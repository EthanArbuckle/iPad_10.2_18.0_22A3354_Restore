uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitCodeBasedOnEndiannessBranch<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewSet(void)::{lambda(void)#1},JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewSet(void)::{lambda(void)#2}>@<X0>(uint64_t a1@<X0>, JSC::B3::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t **v41;
  JSC::B3::Value *v42;
  JSC::B3::Value *v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  JSC::B3::Value *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  __int128 *v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t result;
  char *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;

  v9 = JSC::B3::Procedure::addBlock(a5, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v10 = (uint64_t)v9;
  v11 = *(_QWORD *)(a1 + 27784);
  if (v11)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v11, (uint64_t)v9);
  }
  else
  {
    v77 = v9;
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v13 = 0u;
    *((_OWORD *)v13 + 1) = 0u;
    v13[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v13;
    v76 = v13;
    v13[2] = v10;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v77, (uint64_t *)&v76, v14, v15, v16, v17, v18, (uint64_t)&v78);
    v12 = v76;
    v19 = *(uint64_t ***)(a1 + 27832);
    *v76 = a1 + 27824;
    v12[1] = (uint64_t)v19;
    *v19 = v12;
    *(_QWORD *)(a1 + 27832) = v12;
  }
  v20 = JSC::B3::Procedure::addBlock(v12, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v21 = (uint64_t)v20;
  v22 = *(_QWORD *)(a1 + 27784);
  if (v22)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v22, (uint64_t)v20);
  }
  else
  {
    v77 = v20;
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v24 = 0u;
    *((_OWORD *)v24 + 1) = 0u;
    v24[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v24;
    v76 = v24;
    v24[2] = v21;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v77, (uint64_t *)&v76, v25, v26, v27, v28, v29, (uint64_t)&v78);
    v23 = v76;
    v30 = *(uint64_t ***)(a1 + 27832);
    *v76 = a1 + 27824;
    v23[1] = (uint64_t)v30;
    *v30 = v23;
    *(_QWORD *)(a1 + 27832) = v23;
  }
  v31 = JSC::B3::Procedure::addBlock(v23, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v32 = (uint64_t)v31;
  v33 = *(_QWORD *)(a1 + 27784);
  if (v33)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v33, (uint64_t)v31);
  }
  else
  {
    v77 = v31;
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v34 = 0u;
    *((_OWORD *)v34 + 1) = 0u;
    v34[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v34;
    v76 = v34;
    v34[2] = v32;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v77, (uint64_t *)&v76, v35, v36, v37, v38, v39, (uint64_t)&v78);
    v40 = v76;
    v41 = *(uint64_t ***)(a1 + 27832);
    *v76 = a1 + 27824;
    v40[1] = (uint64_t)v41;
    *v41 = v40;
    *(_QWORD *)(a1 + 27832) = v40;
  }
  v42 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 1);
  v43 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), a2, v42);
  v44 = *(_QWORD *)(a1 + 27776);
  v45 = *(JSC::B3::Value **)(a1 + 27760);
  v46 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v43, *(_QWORD *)(a1 + 27656));
  JSC::B3::Procedure::addValueImpl(v45, v46);
  v78 = (uint64_t)v46;
  v51 = (char **)(v44 + 8);
  v52 = *(unsigned int *)(v44 + 20);
  if ((_DWORD)v52 == *(_DWORD *)(v44 + 16))
  {
    v75 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v51, v52 + 1, (unint64_t)&v78);
    v52 = *(unsigned int *)(v44 + 20);
    *(_QWORD *)(*(_QWORD *)(v44 + 8) + 8 * v52) = *(_QWORD *)v75;
    v53 = v78;
  }
  else
  {
    *(_QWORD *)&(*v51)[8 * v52] = v46;
    v53 = (uint64_t)v46;
  }
  *(_DWORD *)(v44 + 20) = v52 + 1;
  *(_QWORD *)(v53 + 32) = v44;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v46, v10, v21, NAN, NAN, v47, v48, v49, v50);
  *(_QWORD *)(a1 + 27776) = v10;
  v54 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v21;
  v55 = (_QWORD *)(*(_QWORD *)a4 + 27640);
  v56 = (__int128 *)JSC::FTL::Output::patchpoint(v55, 1);
  v78 = **(_QWORD **)(a4 + 8);
  v79 = 0;
  v80 = 3;
  JSC::B3::StackmapValue::append(v56, v78, (unint64_t)&v79);
  v57 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v57 + 8) = 1;
  *(_QWORD *)v57 = off_1E3577CC0;
  v58 = (unsigned int *)*((_QWORD *)v56 + 7);
  *((_QWORD *)v56 + 7) = v57;
  if (v58)
  {
    v59 = v58 + 2;
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
    {
      atomic_store(1u, v58 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
    }
  }
  *((_QWORD *)v56 + 14) = 0;
  *((_QWORD *)v56 + 15) = 0;
  *((_QWORD *)v56 + 16) = 0;
  JSC::FTL::Output::store((uint64_t)v55, (uint64_t)v56, **(const JSC::FTL::AbstractHeap ***)(a4 + 16), *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8));
  v62 = *(_QWORD *)(a1 + 27776);
  v63 = *(_QWORD *)(a1 + 27760);
  v64 = *(_QWORD *)(a1 + 27768);
  v78 = v32;
  LOBYTE(v79) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v62, v63, 154, v64, &v78, v65, v66, v67);
  *(_QWORD *)(a1 + 27776) = v21;
  *(_QWORD *)(a1 + 27784) = v32;
  JSC::FTL::Output::store(*(_QWORD *)a3 + 27640, **(_QWORD **)(a3 + 8), **(const JSC::FTL::AbstractHeap ***)(a3 + 16), *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8));
  v68 = *(_QWORD *)(a1 + 27776);
  v69 = *(_QWORD *)(a1 + 27760);
  v70 = *(_QWORD *)(a1 + 27768);
  v78 = v32;
  LOBYTE(v79) = 0;
  result = JSC::B3::BasicBlock::appendNewControlValue(v68, v69, 154, v70, &v78, v71, v72, v73);
  *(_QWORD *)(a1 + 27776) = v32;
  *(_QWORD *)(a1 + 27784) = v54;
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewSet(void)::{lambda(void)#4}::operator()(uint64_t a1)
{
  JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *v2;
  _QWORD *v3;
  JSC::B3::Value *v4;
  uint64_t v5;

  v2 = *(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 **)a1;
  v3 = (_QWORD *)(*(_QWORD *)a1 + 27640);
  v4 = JSC::FTL::Output::bitCast(v3, **(_QWORD **)(a1 + 8));
  return JSC::FTL::Output::store((uint64_t)v3, v5, **(const JSC::FTL::AbstractHeap ***)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewSet(void)::{lambda(void)#3}::operator()(uint64_t a1)
{
  return JSC::FTL::Output::store(*(_QWORD *)a1 + 27640, **(_QWORD **)(a1 + 8), **(const JSC::FTL::AbstractHeap ***)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitCodeBasedOnEndiannessBranch<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewSet(void)::{lambda(void)#3},JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewSet(void)::{lambda(void)#4}>(_QWORD *a1, JSC::B3::Value *a2, uint64_t a3, uint64_t a4)
{
  JSC::FTL::Output *v8;
  uint64_t v9;
  uint64_t v10;
  JSC::B3::BasicBlock *v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  JSC::B3::Value *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;

  v8 = (JSC::FTL::Output *)(a1 + 3455);
  v9 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
  v10 = JSC::FTL::Output::newBlock(v8);
  v11 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v8);
  v12 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v8, 1);
  v13 = JSC::FTL::Output::bitAnd(v8, a2, v12);
  v14 = JSC::FTL::Output::logicalNot(v8, v13);
  JSC::FTL::Output::branch(v8, (uint64_t)v14, v9, v10, NAN, NAN, v15, v16, v17, v18);
  a1[3472] = v9;
  v19 = a1[3473];
  a1[3473] = v10;
  JSC::FTL::Output::jump(v8, v11, v20, v21, v22, v23, v24, v25);
  a1[3472] = v10;
  a1[3473] = v11;
  result = JSC::FTL::Output::jump(v8, v11, v26, v27, v28, v29, v30, v31);
  a1[3472] = v11;
  a1[3473] = v19;
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewSet(void)::{lambda(void)#6}::operator()(uint64_t a1)
{
  _QWORD *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  char v12;

  v2 = (_QWORD *)(*(_QWORD *)a1 + 27640);
  v3 = (__int128 *)JSC::FTL::Output::patchpoint(v2, 1);
  v4 = **(_QWORD **)(a1 + 8);
  v11 = 0;
  v12 = 3;
  JSC::B3::StackmapValue::append(v3, v4, (unint64_t)&v11);
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = off_1E3577CE8;
  v6 = (unsigned int *)*((_QWORD *)v3 + 7);
  *((_QWORD *)v3 + 7) = v5;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  *((_QWORD *)v3 + 14) = 0;
  *((_QWORD *)v3 + 15) = 0;
  *((_QWORD *)v3 + 16) = 0;
  return JSC::FTL::Output::store32As16((uint64_t)v2, (uint64_t)v3, **(const JSC::FTL::AbstractHeap ***)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitCodeBasedOnEndiannessBranch<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewSet(void)::{lambda(void)#5},JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewSet(void)::{lambda(void)#6}>@<X0>(uint64_t a1@<X0>, JSC::B3::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t **v41;
  JSC::B3::Value *v42;
  JSC::B3::Value *v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  JSC::B3::Value *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  __int128 *v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t result;
  char *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;

  v9 = JSC::B3::Procedure::addBlock(a5, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v10 = (uint64_t)v9;
  v11 = *(_QWORD *)(a1 + 27784);
  if (v11)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v11, (uint64_t)v9);
  }
  else
  {
    v77 = v9;
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v13 = 0u;
    *((_OWORD *)v13 + 1) = 0u;
    v13[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v13;
    v76 = v13;
    v13[2] = v10;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v77, (uint64_t *)&v76, v14, v15, v16, v17, v18, (uint64_t)&v78);
    v12 = v76;
    v19 = *(uint64_t ***)(a1 + 27832);
    *v76 = a1 + 27824;
    v12[1] = (uint64_t)v19;
    *v19 = v12;
    *(_QWORD *)(a1 + 27832) = v12;
  }
  v20 = JSC::B3::Procedure::addBlock(v12, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v21 = (uint64_t)v20;
  v22 = *(_QWORD *)(a1 + 27784);
  if (v22)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v22, (uint64_t)v20);
  }
  else
  {
    v77 = v20;
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v24 = 0u;
    *((_OWORD *)v24 + 1) = 0u;
    v24[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v24;
    v76 = v24;
    v24[2] = v21;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v77, (uint64_t *)&v76, v25, v26, v27, v28, v29, (uint64_t)&v78);
    v23 = v76;
    v30 = *(uint64_t ***)(a1 + 27832);
    *v76 = a1 + 27824;
    v23[1] = (uint64_t)v30;
    *v30 = v23;
    *(_QWORD *)(a1 + 27832) = v23;
  }
  v31 = JSC::B3::Procedure::addBlock(v23, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v32 = (uint64_t)v31;
  v33 = *(_QWORD *)(a1 + 27784);
  if (v33)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v33, (uint64_t)v31);
  }
  else
  {
    v77 = v31;
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v34 = 0u;
    *((_OWORD *)v34 + 1) = 0u;
    v34[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v34;
    v76 = v34;
    v34[2] = v32;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v77, (uint64_t *)&v76, v35, v36, v37, v38, v39, (uint64_t)&v78);
    v40 = v76;
    v41 = *(uint64_t ***)(a1 + 27832);
    *v76 = a1 + 27824;
    v40[1] = (uint64_t)v41;
    *v41 = v40;
    *(_QWORD *)(a1 + 27832) = v40;
  }
  v42 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 1);
  v43 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), a2, v42);
  v44 = *(_QWORD *)(a1 + 27776);
  v45 = *(JSC::B3::Value **)(a1 + 27760);
  v46 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v43, *(_QWORD *)(a1 + 27656));
  JSC::B3::Procedure::addValueImpl(v45, v46);
  v78 = (uint64_t)v46;
  v51 = (char **)(v44 + 8);
  v52 = *(unsigned int *)(v44 + 20);
  if ((_DWORD)v52 == *(_DWORD *)(v44 + 16))
  {
    v75 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v51, v52 + 1, (unint64_t)&v78);
    v52 = *(unsigned int *)(v44 + 20);
    *(_QWORD *)(*(_QWORD *)(v44 + 8) + 8 * v52) = *(_QWORD *)v75;
    v53 = v78;
  }
  else
  {
    *(_QWORD *)&(*v51)[8 * v52] = v46;
    v53 = (uint64_t)v46;
  }
  *(_DWORD *)(v44 + 20) = v52 + 1;
  *(_QWORD *)(v53 + 32) = v44;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v46, v10, v21, NAN, NAN, v47, v48, v49, v50);
  *(_QWORD *)(a1 + 27776) = v10;
  v54 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v21;
  v55 = (_QWORD *)(*(_QWORD *)a4 + 27640);
  v56 = (__int128 *)JSC::FTL::Output::patchpoint(v55, 1);
  v78 = **(_QWORD **)(a4 + 8);
  v79 = 0;
  v80 = 3;
  JSC::B3::StackmapValue::append(v56, v78, (unint64_t)&v79);
  v57 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v57 + 8) = 1;
  *(_QWORD *)v57 = off_1E3577CE8;
  v58 = (unsigned int *)*((_QWORD *)v56 + 7);
  *((_QWORD *)v56 + 7) = v57;
  if (v58)
  {
    v59 = v58 + 2;
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
    {
      atomic_store(1u, v58 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
    }
  }
  *((_QWORD *)v56 + 14) = 0;
  *((_QWORD *)v56 + 15) = 0;
  *((_QWORD *)v56 + 16) = 0;
  JSC::FTL::Output::store32As16((uint64_t)v55, (uint64_t)v56, **(const JSC::FTL::AbstractHeap ***)(a4 + 16), *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8));
  v62 = *(_QWORD *)(a1 + 27776);
  v63 = *(_QWORD *)(a1 + 27760);
  v64 = *(_QWORD *)(a1 + 27768);
  v78 = v32;
  LOBYTE(v79) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v62, v63, 154, v64, &v78, v65, v66, v67);
  *(_QWORD *)(a1 + 27776) = v21;
  *(_QWORD *)(a1 + 27784) = v32;
  JSC::FTL::Output::store32As16(*(_QWORD *)a3 + 27640, **(_QWORD **)(a3 + 8), **(const JSC::FTL::AbstractHeap ***)(a3 + 16), *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8));
  v68 = *(_QWORD *)(a1 + 27776);
  v69 = *(_QWORD *)(a1 + 27760);
  v70 = *(_QWORD *)(a1 + 27768);
  v78 = v32;
  LOBYTE(v79) = 0;
  result = JSC::B3::BasicBlock::appendNewControlValue(v68, v69, 154, v70, &v78, v71, v72, v73);
  *(_QWORD *)(a1 + 27776) = v32;
  *(_QWORD *)(a1 + 27784) = v54;
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewSet(void)::{lambda(void)#8}::operator()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  char v12;

  v1 = **(_QWORD **)(a1 + 8);
  if (*(_DWORD *)(v1 + 16) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197E0A940);
  }
  v3 = (_QWORD *)(*(_QWORD *)a1 + 27640);
  v4 = (__int128 *)JSC::FTL::Output::patchpoint(v3, 1);
  v11 = 0;
  v12 = 3;
  JSC::B3::StackmapValue::append(v4, v1, (unint64_t)&v11);
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = off_1E3577C48;
  v6 = (unsigned int *)*((_QWORD *)v4 + 7);
  *((_QWORD *)v4 + 7) = v5;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  *((_QWORD *)v4 + 14) = 0;
  *((_QWORD *)v4 + 15) = 0;
  *((_QWORD *)v4 + 16) = 0;
  return JSC::FTL::Output::store((uint64_t)v3, (uint64_t)v4, **(const JSC::FTL::AbstractHeap ***)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitCodeBasedOnEndiannessBranch<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewSet(void)::{lambda(void)#7},JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewSet(void)::{lambda(void)#8}>@<X0>(uint64_t a1@<X0>, JSC::B3::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t **v41;
  JSC::B3::Value *v42;
  JSC::B3::Value *v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  JSC::B3::Value *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  __int128 *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t result;
  char *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;

  v9 = JSC::B3::Procedure::addBlock(a5, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v10 = (uint64_t)v9;
  v11 = *(_QWORD *)(a1 + 27784);
  if (v11)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v11, (uint64_t)v9);
  }
  else
  {
    v78 = v9;
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v13 = 0u;
    *((_OWORD *)v13 + 1) = 0u;
    v13[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v13;
    v77 = v13;
    v13[2] = v10;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v78, (uint64_t *)&v77, v14, v15, v16, v17, v18, (uint64_t)&v79);
    v12 = v77;
    v19 = *(uint64_t ***)(a1 + 27832);
    *v77 = a1 + 27824;
    v12[1] = (uint64_t)v19;
    *v19 = v12;
    *(_QWORD *)(a1 + 27832) = v12;
  }
  v20 = JSC::B3::Procedure::addBlock(v12, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v21 = (uint64_t)v20;
  v22 = *(_QWORD *)(a1 + 27784);
  if (v22)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v22, (uint64_t)v20);
  }
  else
  {
    v78 = v20;
    v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v24 = 0u;
    *((_OWORD *)v24 + 1) = 0u;
    v24[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v24;
    v77 = v24;
    v24[2] = v21;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v78, (uint64_t *)&v77, v25, v26, v27, v28, v29, (uint64_t)&v79);
    v23 = v77;
    v30 = *(uint64_t ***)(a1 + 27832);
    *v77 = a1 + 27824;
    v23[1] = (uint64_t)v30;
    *v30 = v23;
    *(_QWORD *)(a1 + 27832) = v23;
  }
  v31 = JSC::B3::Procedure::addBlock(v23, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v32 = (uint64_t)v31;
  v33 = *(_QWORD *)(a1 + 27784);
  if (v33)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v33, (uint64_t)v31);
  }
  else
  {
    v78 = v31;
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v34 = 0u;
    *((_OWORD *)v34 + 1) = 0u;
    v34[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v34;
    v77 = v34;
    v34[2] = v32;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v78, (uint64_t *)&v77, v35, v36, v37, v38, v39, (uint64_t)&v79);
    v40 = v77;
    v41 = *(uint64_t ***)(a1 + 27832);
    *v77 = a1 + 27824;
    v40[1] = (uint64_t)v41;
    *v41 = v40;
    *(_QWORD *)(a1 + 27832) = v40;
  }
  v42 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 1);
  v43 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), a2, v42);
  v44 = *(_QWORD *)(a1 + 27776);
  v45 = *(JSC::B3::Value **)(a1 + 27760);
  v46 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v43, *(_QWORD *)(a1 + 27656));
  JSC::B3::Procedure::addValueImpl(v45, v46);
  v79 = (uint64_t)v46;
  v51 = (char **)(v44 + 8);
  v52 = *(unsigned int *)(v44 + 20);
  if ((_DWORD)v52 == *(_DWORD *)(v44 + 16))
  {
    v76 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v51, v52 + 1, (unint64_t)&v79);
    v52 = *(unsigned int *)(v44 + 20);
    *(_QWORD *)(*(_QWORD *)(v44 + 8) + 8 * v52) = *(_QWORD *)v76;
    v53 = v79;
  }
  else
  {
    *(_QWORD *)&(*v51)[8 * v52] = v46;
    v53 = (uint64_t)v46;
  }
  *(_DWORD *)(v44 + 20) = v52 + 1;
  *(_QWORD *)(v53 + 32) = v44;
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v46, v10, v21, NAN, NAN, v47, v48, v49, v50);
  *(_QWORD *)(a1 + 27776) = v10;
  v54 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v21;
  v55 = **(_QWORD **)(a4 + 8);
  if (*(_DWORD *)(v55 + 16) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197E0AD38);
  }
  v56 = (_QWORD *)(*(_QWORD *)a4 + 27640);
  v57 = (__int128 *)JSC::FTL::Output::patchpoint(v56, 1);
  v79 = v55;
  v80 = 0;
  v81 = 3;
  JSC::B3::StackmapValue::append(v57, v55, (unint64_t)&v80);
  v58 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v58 + 8) = 1;
  *(_QWORD *)v58 = off_1E3577C48;
  v59 = (unsigned int *)*((_QWORD *)v57 + 7);
  *((_QWORD *)v57 + 7) = v58;
  if (v59)
  {
    v60 = v59 + 2;
    do
    {
      v61 = __ldaxr(v60);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v60));
    if (!v62)
    {
      atomic_store(1u, v59 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 8))(v59);
    }
  }
  *((_QWORD *)v57 + 14) = 0;
  *((_QWORD *)v57 + 15) = 0;
  *((_QWORD *)v57 + 16) = 0;
  JSC::FTL::Output::store((uint64_t)v56, (uint64_t)v57, **(const JSC::FTL::AbstractHeap ***)(a4 + 16), *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8));
  v63 = *(_QWORD *)(a1 + 27776);
  v64 = *(_QWORD *)(a1 + 27760);
  v65 = *(_QWORD *)(a1 + 27768);
  v79 = v32;
  LOBYTE(v80) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v63, v64, 154, v65, &v79, v66, v67, v68);
  *(_QWORD *)(a1 + 27776) = v21;
  *(_QWORD *)(a1 + 27784) = v32;
  JSC::FTL::Output::store(*(_QWORD *)a3 + 27640, **(_QWORD **)(a3 + 8), **(const JSC::FTL::AbstractHeap ***)(a3 + 16), *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8));
  v69 = *(_QWORD *)(a1 + 27776);
  v70 = *(_QWORD *)(a1 + 27760);
  v71 = *(_QWORD *)(a1 + 27768);
  v79 = v32;
  LOBYTE(v80) = 0;
  result = JSC::B3::BasicBlock::appendNewControlValue(v69, v70, 154, v71, &v79, v72, v73, v74);
  *(_QWORD *)(a1 + 27776) = v32;
  *(_QWORD *)(a1 + 27784) = v54;
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewSet(void)::{lambda(void)#2}::operator() const(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  int v11;
  char v12;
  JSC::AssemblerBuffer *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  char v17;

  if (*(_DWORD *)(a3 + 20) <= 1u)
    goto LABEL_8;
  v10 = *(char **)(a3 + 8);
  v11 = (v10[16] & 0x7F) - 32;
  v12 = *v10;
  v13 = (JSC::AssemblerBuffer *)(a2 + 14);
  v14 = a2[50];
  if (v14 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v14 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v14) = v12 & 0x1F | (32 * v11) | 0x1E260000;
  v15 = a2[50];
  v16 = v15 + 4;
  a2[50] = v15 + 4;
  if (!*(_DWORD *)(a3 + 20))
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x197E0AE54);
  }
  v17 = **(_BYTE **)(a3 + 8);
  if ((v15 + 8) > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v16 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v16) = v17 & 0x1F | (32 * (v17 & 0x1F)) | 0x5AC00800;
  a2[50] += 4;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDataViewSet(void)::{lambda(void)#6}::operator() const(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(int a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  unsigned __int8 v11;
  int v12;
  int v13;
  int v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  _QWORD *v19;
  unsigned int v20;

  if (*(_DWORD *)(a3 + 20) <= 1u)
    goto LABEL_19;
  v10 = *(unsigned __int8 **)(a3 + 8);
  v11 = v10[16];
  v12 = v11 & 0x7F;
  v13 = *v10;
  v14 = v13 & 0x7F;
  if (v12 == v14)
    goto LABEL_16;
  if (v12 == 63)
  {
    if (v14 != 31)
    {
      v16 = v13 & 0x1F | 0xD2800000;
      goto LABEL_12;
    }
  }
  else if (v12 != 31 && v14 != 31)
  {
    v16 = v13 & 0xFFE0FFFF | ((v11 & 0x1F) << 16) | 0xAA0003E0;
    goto LABEL_12;
  }
  v16 = v14 | (32 * v12) | 0x91000000;
LABEL_12:
  v18 = a2 + 50;
  v17 = a2[50];
  v19 = a2 + 14;
  if (v17 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*v19 + v17) = v16;
  *v18 += 4;
  if (!*(_DWORD *)(a3 + 20))
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x197E0AFB8);
  }
  LOBYTE(v13) = **(_BYTE **)(a3 + 8);
LABEL_16:
  v20 = a2[50];
  if (v20 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v20 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v20) = v13 & 0x1F | (32 * (v13 & 0x1F)) | 0x5AC00400;
  a2[50] += 4;
  JSC::MacroAssemblerARM64::and32((uint64_t)a2, (JSC::ARM64LogicalImmediate *)0xFFFF, v13 & 0x7F, v13 & 0x7F);
}

void JSC::CodeOrigin::walkUpInlineStack<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileLoopHint(void)::{lambda(JSC::CodeOrigin)#1}>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;

  v9 = a1;
  if ((a1 & 1) != 0)
  {
    v29 = *(_QWORD *)(a1 & 0xFFFFFFFF8);
    if ((a1 & 2) != 0
      || ((v30 = *(_DWORD *)((a1 & 0xFFFFFFFF8) + 8), v30 != 0x3FFFFFFF) ? (v31 = v30 == -1) : (v31 = 1), v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v33 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v33 = v29;
      *(_DWORD *)(v33 + 8) = v30;
      v32 = 1;
      v29 = v33;
    }
    else
    {
      v32 = *(_QWORD *)(a1 & 0xFFFFFFFF8);
      v29 = 0;
    }
    v9 = v29 | v32;
  }
  while (1)
  {
    if ((v9 & 1) != 0)
    {
      v21 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      if ((v9 & 2) != 0
        || ((v22 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v22 != 0x3FFFFFFF) ? (v23 = v22 == -1) : (v23 = 1), v23))
      {
        v24 = 2;
      }
      else if (v22 >> 28)
      {
        v26 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
        v27 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8);
        v21 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v21 = v26;
        *(_DWORD *)(v21 + 8) = v27;
        v24 = 1;
      }
      else
      {
        v24 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
        v21 = 0;
      }
      v25 = v21 | v24;
      v10 = (_BYTE *)a2[1];
      v11 = *(_QWORD *)(*(_QWORD *)*a2 + 40);
      v12 = (_QWORD *)(v25 & 0xFFFFFFFF8);
      if ((v25 & 1) != 0)
      {
        v13 = 0;
        v14 = (_QWORD *)*v12;
        if (!*v12)
          goto LABEL_5;
        goto LABEL_34;
      }
    }
    else
    {
      v10 = (_BYTE *)a2[1];
      v11 = *(_QWORD *)(*(_QWORD *)*a2 + 40);
      v12 = (_QWORD *)(v9 & 0xFFFFFFFF8);
    }
    v13 = 1;
    v14 = v12;
    if (!v12)
      goto LABEL_5;
LABEL_34:
    v11 = v14[1];
LABEL_5:
    if ((*(_WORD *)(*(_QWORD *)(v11 + 56) + 28) & 1) != 0)
      *v10 = 0;
    if ((v13 & 1) == 0 && v12)
      WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
    v15 = (uint64_t *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 1) != 0)
      break;
    v16 = v9 & 0xFFFFFFFF8;
    if (!v15)
      return;
LABEL_10:
    v9 = *(_QWORD *)(v16 + 16);
    if ((v9 & 1) != 0)
    {
      v17 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      if ((v9 & 2) != 0
        || ((v18 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v18 != 0x3FFFFFFF) ? (v19 = v18 == -1) : (v19 = 1), v19))
      {
        v20 = 2;
      }
      else if (v18 >> 28)
      {
        v28 = v17;
        v17 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v17 = v28;
        *(_DWORD *)(v17 + 8) = v18;
        v20 = 1;
      }
      else
      {
        v20 = v17;
        v17 = 0;
      }
      v9 = v17 | v20;
    }
  }
  v16 = *v15;
  if (*v15)
  {
    if (v15)
      WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_10;
  }
  if (v15)
    WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileLoopHint(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3577D10;
  *(_OWORD *)(v4 + 16) = *a2;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileLoopHint(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  unsigned int v72[3];

  v11 = (JSC::AssemblerBuffer *)(a2 + 14);
  v12 = a2[50];
  if (v12 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v12 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v12) = -132182048;
  v13 = a2[50];
  v14 = v13 + 4;
  a2[50] = v13 + 4;
  if ((v13 + 8) > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v14 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v14) = -132182047;
  v15 = a2[50];
  v16 = v15 + 4;
  a2[50] = v15 + 4;
  if ((v15 + 8) > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v16 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v16) = -132182046;
  a2[50] += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, qword_1ECF4C768, 2, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, *(_QWORD *)(a1 + 16), 0, v17, v18, v19, v20, v21);
  v29 = a2[50];
  if (v29 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, v22, v23, v24, v25, v26, v27, v28);
    v29 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v29) = -130023423;
  a2[50] += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 3, 1, 2, v25, v26, v27, v28, (uint64_t)v72);
  v37 = a2[50];
  if (v37 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, v30, v31, v32, v33, v34, v35, v36);
    v37 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v37) = -129955870;
  v38 = a2[50];
  v39 = v38 + 4;
  a2[50] = v38 + 4;
  if ((v38 + 8) > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, v30, v31, v32, v33, v34, v35, v36);
    v39 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v39) = -129955871;
  v40 = a2[50];
  v41 = v40 + 4;
  a2[50] = v40 + 4;
  if ((v40 + 8) > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, v30, v31, v32, v33, v34, v35, v36);
    v41 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v41) = -129955872;
  a2[50] += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a2, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), 0, v32, v33, v34, v35, v36);
  v49 = a2[50];
  if (v49 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, v42, v43, v44, v45, v46, v47, v48);
    v49 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v49) = -129761280;
  a2[50] += 4;
  JSC::B3::Air::Code::emitEpilogue(*(JSC::B3::Air::Code **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 48) + 8) + 160), (JSC::CCallHelpers *)a2, v43, v44, v45, v46, v47, v48);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v72, (uint64_t)a2, v50, v51, v52, v53, v54, v55);
  v63 = a2[50];
  if (v63 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, v56, v57, v58, v59, v60, v61, v62);
    v63 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v63) = -1862269919;
  v64 = a2[50];
  v65 = v64 + 4;
  a2[50] = v64 + 4;
  if ((v64 + 8) > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, v56, v57, v58, v59, v60, v61, v62);
    v65 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v65) = -134217727;
  v66 = a2[50];
  v67 = v66 + 4;
  a2[50] = v66 + 4;
  if ((v66 + 8) > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, v56, v57, v58, v59, v60, v61, v62);
    v67 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v67) = -129955870;
  v68 = a2[50];
  v69 = v68 + 4;
  a2[50] = v68 + 4;
  if ((v68 + 8) > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, v56, v57, v58, v59, v60, v61, v62);
    v69 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v69) = -129955871;
  v70 = a2[50];
  v71 = v70 + 4;
  a2[50] = v70 + 4;
  if ((v70 + 8) > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, v56, v57, v58, v59, v60, v61, v62);
    v71 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v71) = -129955872;
  a2[50] += 4;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNode(unsigned int)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  v9 = a2[50];
  if (v9 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v9 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v9) = -734491104;
  a2[50] += 4;
}

uint64_t JSC::UDateIntervalFormatDeleter::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return udtitvfmt_close();
  return result;
}

uint64_t JSC::JSObject::getOwnPropertySlot(unsigned int *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned __int16 *v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  unint64_t *v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  char v91;
  int v92;
  uint64_t v93;
  uint64_t (*v94)(unsigned int *, uint64_t, WTF::StringImpl *, uint64_t);
  WTF::AtomStringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  int v103;
  uint64_t v104;
  BOOL v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;

  v12 = *(JSC::VM **)(a2 + 56);
  if (!(a3 >> 4))
    goto LABEL_38;
  v13 = 16 * (*a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v13 + 0x20)) != 0)
    goto LABEL_38;
  v14 = *(_QWORD *)(16 * (*a1 & 0xFFFFFFFE) + 0x58);
  if (!v14)
  {
    v25 = *(_QWORD *)(16 * (*a1 & 0xFFFFFFFE) + 0x40);
    if (!v25 || *(_BYTE *)(v25 + 5) != 1 && *(_DWORD *)(v25 + 80) < 2u)
      goto LABEL_38;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v14)
      goto LABEL_38;
  }
  if (!*(_DWORD *)(v14 + 24))
    goto LABEL_38;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  v17 = *(unsigned int *)(v14 + 8);
  v18 = *(_DWORD *)(a3 + 16);
  if ((v15 & 1) != 0)
  {
    if ((v18 & 0x20) != 0)
      v18 = *(_DWORD *)(a3 + 32);
    v19 = *(_DWORD *)(v14 + 12);
    v20 = (v18 >> 8) & *(_QWORD *)&v19;
    v21 = *(unsigned __int8 *)(v16 + v20);
    if (!*(_BYTE *)(v16 + v20))
      goto LABEL_38;
    v22 = v16 + v17;
    v23 = 1;
    while (1)
    {
      v24 = *(_QWORD *)(v22 + 8 * (v21 - 1));
      if (a3 == (v24 & 0xFFFFFFFFFFFFLL))
        break;
      v20 = ((_DWORD)v20 + v23) & v19;
      v21 = *(unsigned __int8 *)(v16 + v20);
      ++v23;
      if (!*(_BYTE *)(v16 + v20))
        goto LABEL_38;
    }
    a6 = (v24 >> 16) & 0xFF00000000 | HIBYTE(v24);
  }
  else
  {
    if ((v18 & 0x20) != 0)
      v18 = *(_DWORD *)(a3 + 32);
    v32 = *(_DWORD *)(v14 + 12);
    v33 = v32 & (v18 >> 8);
    v34 = *(_DWORD *)(v16 + 4 * v33);
    if (!v34)
      goto LABEL_38;
    v35 = v16 + 4 * v17;
    v36 = 1;
    while (1)
    {
      v37 = (v34 - 1);
      if (*(_QWORD *)(v35 + 16 * v37) == a3)
        break;
      v33 = (v33 + v36) & v32;
      v34 = *(_DWORD *)(v16 + 4 * v33);
      ++v36;
      if (!v34)
        goto LABEL_38;
    }
    a6 = *(unsigned int *)(v35 + 16 * v37 + 8) | ((unint64_t)*(unsigned __int8 *)(v35 + 16 * v37 + 12) << 32);
  }
  if ((_DWORD)a6 != -1)
  {
    if ((int)a6 <= 63)
    {
      v26 = (uint64_t)(a1 + 4);
      v27 = a6 << 32;
    }
    else
    {
      v26 = *((_QWORD *)a1 + 1) - 8;
      v27 = 0x3F00000000 - (a6 << 32);
    }
    v28 = *(_QWORD *)(v26 + (v27 >> 29));
    if ((v28 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v29 = *(unsigned __int8 *)(v28 + 5);
    if (v29 != 5)
    {
      if (v29 == 6)
      {
        v58 = *(_DWORD *)(v13 + 16) & 3;
        v60 = *(_QWORD *)(v28 + 8);
        v59 = *(_QWORD *)(v28 + 16);
        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
        {
          v62 = *(_QWORD *)(v28 + 24);
          v61 = *(_QWORD *)(v28 + 32);
          *(_QWORD *)a4 = v60;
          *(_QWORD *)(a4 + 8) = v59;
          *(_DWORD *)(a4 + 16) = HIDWORD(a6);
          *(_QWORD *)(a4 + 32) = a1;
          *(_BYTE *)(a4 + 49) = 3;
          v31 = 1;
          if (v58 != 2)
            *(_BYTE *)(a4 + 48) = 1;
          *(_BYTE *)(a4 + 51) = 1;
          *(_QWORD *)(a4 + 72) = v62;
          *(_QWORD *)(a4 + 80) = v61;
        }
        else
        {
          *(_QWORD *)a4 = v60;
          *(_QWORD *)(a4 + 8) = v59;
          *(_DWORD *)(a4 + 16) = HIDWORD(a6);
          *(_QWORD *)(a4 + 32) = a1;
          v31 = 1;
          *(_BYTE *)(a4 + 49) = 3;
          if (v58 != 2)
            *(_BYTE *)(a4 + 48) = 1;
        }
        return v31;
      }
LABEL_24:
      *(_QWORD *)a4 = v28;
      *(_QWORD *)(a4 + 32) = a1;
      *(_DWORD *)(a4 + 16) = HIDWORD(a6);
      *(_DWORD *)(a4 + 20) = a6;
      v30 = 257;
      goto LABEL_25;
    }
    JSC::JSObject::fillGetterPropertySlot(a1, (uint64_t)v12, a4, v28, SHIDWORD(a6), a6);
    return 1;
  }
LABEL_38:
  if ((*((_BYTE *)a1 + 6) & 0x20) == 0 || (v48 = *(unsigned int *)(16 * (*a1 & 0xFFFFFFFE) + 0x4C), !(_DWORD)v48))
  {
LABEL_39:
    if (!a3)
      return 0;
    v38 = *(_DWORD *)(a3 + 16);
    if ((v38 & 0x20) != 0)
      return 0;
    v39 = *(_BYTE **)(a3 + 8);
    v40 = *(unsigned int *)(a3 + 4);
    if ((v38 & 4) != 0)
    {
      if (!(_DWORD)v40)
        return 0;
      v41 = *v39 - 48;
      if (v41 > 9 || v40 >= 2 && *v39 == 48)
        return 0;
      v69 = v40 - 1;
      v70 = v39 + 1;
      while (v69)
      {
        if (v41 <= 0x19999999)
        {
          v71 = *v70 - 48;
          if (v71 <= 9)
          {
            v47 = __CFADD__(v71, 10 * v41);
            v41 = v71 + 10 * v41;
            --v69;
            ++v70;
            if (!v47)
              continue;
          }
        }
        return 0;
      }
    }
    else
    {
      if (!(_DWORD)v40)
        return 0;
      v41 = *(unsigned __int16 *)v39 - 48;
      if (v41 > 9)
        return 0;
      if (*(_WORD *)v39 == 48 && v40 > 1)
        return 0;
      v44 = (unsigned __int16 *)(v39 + 2);
      v45 = v40 - 1;
      while (v45)
      {
        if (v41 <= 0x19999999)
        {
          v46 = *v44 - 48;
          if (v46 <= 9)
          {
            v47 = __CFADD__(v46, 10 * v41);
            v41 = v46 + 10 * v41;
            ++v44;
            --v45;
            if (!v47)
              continue;
          }
        }
        return 0;
      }
    }
    v72 = 0x100000000;
    if (v41 == -1)
    {
      v72 = 0;
      v73 = 0;
    }
    else
    {
      v73 = v41;
    }
    if (v41 == -1)
      v74 = 0;
    else
      v74 = v41 & 0xFFFFFF00;
    v75 = v74 | v73;
    if ((v72 & 0x100000000) != 0)
    {
      if (v75 == -1)
      {
        v94 = *(uint64_t (**)(unsigned int *, uint64_t, WTF::StringImpl *, uint64_t))(16
                                                                                            * *(unsigned int *)(16 * (*a1 & 0xFFFFFFFE) + 0x4C)
                                                                                            + 0x68);
        JSC::Identifier::from(*(uint64_t ***)(a2 + 56), 0xFFFFFFFFuLL, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)&v120);
        v31 = v94(a1, a2, v120, a4);
        v102 = v120;
        v120 = 0;
        if (v102)
        {
          if (*(_DWORD *)v102 == 2)
          {
            WTF::StringImpl::~StringImpl(v102, v95, v96, v97, v98, v99, v100, v101);
            WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
          }
          else
          {
            *(_DWORD *)v102 -= 2;
          }
        }
        return v31;
      }
      v31 = 0;
      switch(a1[1] & 0xF)
      {
        case 0u:
        case 1u:
        case 3u:
          return v31;
        case 4u:
        case 5u:
        case 8u:
        case 9u:
          v76 = *((_QWORD *)a1 + 1);
          if (*(_DWORD *)(v76 - 4) > v75)
          {
            v77 = *(_QWORD *)(v76 + 8 * v75);
            if (v77)
              goto LABEL_109;
          }
          return 0;
        case 6u:
        case 7u:
          v93 = *((_QWORD *)a1 + 1);
          if (*(_DWORD *)(v93 - 4) <= v75)
            return 0;
          v77 = *(_QWORD *)(v93 + 8 * v75) + 0x2000000000000;
          goto LABEL_109;
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
          v78 = (_QWORD *)*((_QWORD *)a1 + 1);
          if (*((_DWORD *)v78 - 2) <= v75)
            return 0;
          if (*((_DWORD *)v78 - 1) > v75)
          {
            v77 = v78[v75 + 2];
            if (v77)
            {
LABEL_109:
              *(_QWORD *)a4 = v77;
              *(_DWORD *)(a4 + 16) = 0;
              goto LABEL_110;
            }
            return 0;
          }
          v79 = *v78;
          if (!v79)
            return 0;
          v80 = *(_QWORD *)(v79 + 8);
          if (!v80)
            return 0;
          v81 = v75;
          v82 = *(_DWORD *)(v80 - 8);
          v83 = (~(v81 << 32) + v81) ^ ((unint64_t)(~(v81 << 32) + v81) >> 22);
          v84 = 9 * ((v83 + ~(v83 << 13)) ^ ((v83 + ~(v83 << 13)) >> 8));
          v85 = (v84 ^ (v84 >> 15)) + ~((v84 ^ (v84 >> 15)) << 27);
          v86 = v82 & ((v85 >> 31) ^ v85);
          v87 = (uint64_t *)(v80 + 24 * v86);
          v88 = *v87;
          if (*v87 == v81)
            goto LABEL_121;
          v89 = 1;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x197E0BE18);
      }
      while (v88 != -1)
      {
        v86 = (v86 + v89) & v82;
        v87 = (uint64_t *)(v80 + 24 * v86);
        v88 = *v87;
        ++v89;
        if (*v87 == v81)
          goto LABEL_121;
      }
      v87 = (uint64_t *)(v80 + 24 * *(unsigned int *)(v80 - 4));
LABEL_121:
      if (v87 == (uint64_t *)(v80 + 24 * *(unsigned int *)(v80 - 4)))
        return 0;
      v90 = v87[1];
      if ((v90 & 0xFFFE000000000002) != 0)
      {
        v91 = 1;
      }
      else if (*(_BYTE *)(v90 + 5) == 5)
      {
        v91 = 2;
      }
      else
      {
        v91 = 1;
      }
      v92 = *((_DWORD *)v87 + 4);
      *(_QWORD *)a4 = v90;
      *(_DWORD *)(a4 + 16) = v92;
      *(_QWORD *)(a4 + 32) = a1;
      *(_BYTE *)(a4 + 49) = v91;
      return 1;
    }
    return 0;
  }
  if (!a3)
    return 0;
  v49 = 16 * v48;
  while (1)
  {
    v50 = *(_QWORD *)(v49 + 24);
    if (v50)
    {
      if ((*(_BYTE *)((16 * *a1) | 0x12) & 0x40) == 0)
      {
        v51 = *(_DWORD *)(a3 + 16);
        if ((v51 & 0x20) == 0)
        {
          v52 = *(_DWORD *)(v50 + 4) & (v51 >> 8);
          v53 = *(_QWORD *)(v50 + 32);
          v54 = *(unsigned __int16 *)(v53 + 4 * v52);
          if (v54 != 0xFFFF)
          {
            v119 = *(_QWORD *)(v50 + 16);
            while (1)
            {
              v55 = (__int16)v54;
              v56 = (unint64_t *)(*(_QWORD *)(v50 + 24) + 40 * (__int16)v54);
              v57 = v56[1];
              if (!v57)
                goto LABEL_70;
              if (WTF::equalInternal<unsigned char>(a3, *v56, v57 - 1))
                break;
              v53 = *(_QWORD *)(v50 + 32);
LABEL_70:
              v52 = *(__int16 *)(v53 + 4 * v52 + 2);
              if (v52 == -1)
                goto LABEL_61;
              LOWORD(v54) = *(_WORD *)(v53 + 4 * v52);
            }
            v63 = *(_QWORD *)(v50 + 24);
            if (v63)
              break;
          }
        }
      }
    }
LABEL_61:
    v49 = *(_QWORD *)(v49 + 16);
    if (!v49)
      goto LABEL_39;
  }
  v64 = *(_DWORD *)(v63 + 40 * v55 + 16);
  if ((v64 & 0x3B10) != 0)
  {
    if ((JSC::setUpStaticFunctionSlot(v12, v119, v63 + 40 * v55, a1, a3, a4, a7, a8) & 1) != 0)
      return 1;
    goto LABEL_61;
  }
  if ((v64 & 0x400) != 0)
  {
    v103 = *(_DWORD *)(v63 + 40 * v55 + 16);
    v104 = *(_QWORD *)(v63 + 40 * v55 + 24);
    v105 = v104 == (int)v104;
    v106 = v104 | 0xFFFE000000000000;
    v107 = COERCE__INT64((double)v104) + 0x2000000000000;
    if (v105)
      v107 = v106;
    *(_QWORD *)a4 = v107;
    *(_DWORD *)(a4 + 16) = v103;
LABEL_110:
    *(_QWORD *)(a4 + 32) = a1;
    v31 = 1;
    *(_BYTE *)(a4 + 49) = 1;
  }
  else
  {
    v65 = *(_DWORD *)(v63 + 40 * v55 + 16);
    if ((v64 & 0x8000) != 0)
    {
      v108 = v63 + 40 * v55;
      v110 = *(_QWORD **)(v108 + 24);
      v109 = *(_QWORD *)(v108 + 32);
      *(_QWORD *)a4 = *v110;
      *(_QWORD *)(a4 + 8) = v109;
      *(_DWORD *)(a4 + 16) = v65;
      *(_QWORD *)(a4 + 32) = a1;
      *(_WORD *)(a4 + 48) = 769;
      v31 = 1;
      *(_BYTE *)(a4 + 51) = 1;
      *(_QWORD *)(a4 + 72) = v119;
      *(_QWORD *)(a4 + 80) = v110;
    }
    else
    {
      v66 = v63 + 40 * v55;
      v68 = *(_QWORD *)(v66 + 24);
      v67 = *(_QWORD *)(v66 + 32);
      if ((v64 & 0x4000) != 0)
      {
        *(_QWORD *)a4 = v68;
        *(_QWORD *)(a4 + 8) = v67;
        *(_DWORD *)(a4 + 16) = v65;
        *(_QWORD *)(a4 + 32) = a1;
        *(_WORD *)(a4 + 48) = 769;
        v31 = 1;
        *(_BYTE *)(a4 + 51) = 1;
        *(_QWORD *)(a4 + 72) = v119;
        *(_QWORD *)(a4 + 80) = 0;
      }
      else
      {
        *(_QWORD *)a4 = v68;
        *(_QWORD *)(a4 + 8) = v67;
        *(_DWORD *)(a4 + 16) = v65;
        *(_QWORD *)(a4 + 32) = a1;
        v30 = 769;
LABEL_25:
        v31 = 1;
        *(_WORD *)(a4 + 48) = v30;
      }
    }
  }
  return v31;
}

void JSC::IntlDateTimeFormat::visitChildren(JSC::IntlDateTimeFormat *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_9;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_9:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::IntlDateTimeFormat::visitChildren(JSC::IntlDateTimeFormat *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t JSC::JSCell::visitOutputConstraints(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 88);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 24))
    {
      result = 75;
      __break(0xC471u);
    }
  }
  return result;
}

unint64_t JSC::IntlDateTimeFormat::create(JSC::IntlDateTimeFormat *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t result;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = (_QWORD *)*((_QWORD *)this + 5068);
  if (!v10)
    v10 = (_QWORD *)JSC::GCClient::Heap::intlDateTimeFormatSpaceSlow((JSC::Heap **)this + 4694);
  result = v10[3];
  if (result < v10[4])
    goto LABEL_4;
  result = v10[5];
  if ((result & 1) == 0)
  {
    v13 = *(_QWORD *)(result + 8) ^ v10[6];
    v10[4] = result + HIDWORD(v13);
    v10[5] = result + (int)v13;
LABEL_4:
    v10[3] = result + 112;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v10, (uint64_t)this + 192, 112, 0, 0, v14, v15, v16);
LABEL_5:
  *(_DWORD *)result = 0;
  v12 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v12;
  *(_OWORD *)(result + 86) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::IntlDateTimeFormat::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlDateTimeFormat::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::IntlDateTimeFormat::localeData(JSC *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, float a9@<S1>)
{
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  int *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const char *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  uint64_t *v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF *v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF *v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  int v126;
  int v127;

  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  switch((_DWORD)a2)
  {
    case 5:
      JSC::numberingSystemsForLocale(a1, a3, a4, a5, a6, a7, (uint64_t)&v123, a9);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a8, &v123, v62, v63, v64, v65, v66, v67);
      if (HIDWORD(v124))
      {
        v112 = v123;
        v113 = 8 * HIDWORD(v124);
        do
        {
          v114 = *(WTF::StringImpl **)v112;
          *(_QWORD *)v112 = 0;
          if (v114)
          {
            if (*(_DWORD *)v114 == 2)
            {
              WTF::StringImpl::~StringImpl(v114, v68, v69, v70, v71, v72, v73, v74);
              WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
            }
            else
            {
              *(_DWORD *)v114 -= 2;
            }
          }
          v112 = (WTF *)((char *)v112 + 8);
          v113 -= 8;
        }
        while (v113);
      }
      v75 = v123;
      if (v123)
      {
        v123 = 0;
        LODWORD(v124) = 0;
        WTF::fastFree((unint64_t)v75, v68, v69, v70, v71, v72, v73, v74);
      }
      break;
    case 2:
      v123 = 0;
      v76 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a8, 1uLL, (unint64_t)&v123);
      v84 = *(unsigned int *)(a8 + 12);
      v85 = *(_QWORD *)a8;
      v86 = *v76;
      *v76 = 0;
      *(_QWORD *)(v85 + 8 * v84) = v86;
      v87 = v123;
      v88 = v84 + 1;
      *(_DWORD *)(a8 + 12) = v84 + 1;
      v123 = 0;
      if (v87)
      {
        if (*(_DWORD *)v87 == 2)
        {
          WTF::StringImpl::~StringImpl(v87, v77, v78, v79, v80, v81, v82, v83);
          WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
          v88 = *(_DWORD *)(a8 + 12);
        }
        else
        {
          *(_DWORD *)v87 -= 2;
        }
      }
      v123 = (WTF *)"h11";
      v124 = 4;
      if (v88 == *(_DWORD *)(a8 + 8))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((int *)a8, (uint64_t *)&v123);
        v89 = *(_DWORD *)(a8 + 12);
      }
      else
      {
        v90 = *(_QWORD *)a8;
        v91 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v91 = 0x300000002;
        *(_QWORD *)(v91 + 8) = "h11";
        *(_DWORD *)(v91 + 16) = 4;
        v92 = *(_DWORD *)(a8 + 12);
        *(_QWORD *)(v90 + 8 * v88) = v91;
        v89 = v92 + 1;
        *(_DWORD *)(a8 + 12) = v92 + 1;
      }
      v123 = (WTF *)"h12";
      v124 = 4;
      if (v89 == *(_DWORD *)(a8 + 8))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((int *)a8, (uint64_t *)&v123);
        v93 = *(_DWORD *)(a8 + 12);
      }
      else
      {
        v94 = *(_QWORD *)a8;
        v95 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v95 = 0x300000002;
        *(_QWORD *)(v95 + 8) = "h12";
        *(_DWORD *)(v95 + 16) = 4;
        v96 = *(_DWORD *)(a8 + 12);
        *(_QWORD *)(v94 + 8 * v89) = v95;
        v93 = v96 + 1;
        *(_DWORD *)(a8 + 12) = v96 + 1;
      }
      v123 = (WTF *)"h23";
      v124 = 4;
      if (v93 == *(_DWORD *)(a8 + 8))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((int *)a8, (uint64_t *)&v123);
        v97 = *(_DWORD *)(a8 + 12);
      }
      else
      {
        v98 = *(_QWORD *)a8;
        v99 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v99 = 0x300000002;
        *(_QWORD *)(v99 + 8) = "h23";
        *(_DWORD *)(v99 + 16) = 4;
        v100 = *(_DWORD *)(a8 + 12);
        *(_QWORD *)(v98 + 8 * v93) = v99;
        v97 = v100 + 1;
        *(_DWORD *)(a8 + 12) = v100 + 1;
      }
      v123 = (WTF *)"h24";
      v124 = 4;
      if (v97 == *(_DWORD *)(a8 + 8))
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((int *)a8, (uint64_t *)&v123);
      }
      else
      {
        v101 = *(_QWORD *)a8;
        v102 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v102 = 0x300000002;
        *(_QWORD *)(v102 + 8) = "h24";
        *(_DWORD *)(v102 + 16) = 4;
        v103 = *(_DWORD *)(a8 + 12);
        *(_QWORD *)(v101 + 8 * v97) = v102;
        *(_DWORD *)(a8 + 12) = v103 + 1;
      }
      break;
    case 0:
      v127 = 0;
      WTF::String::utf8((uint64_t *)a1, a2, a3, a4, a5, a6, a7, &v123, a9);
      v10 = v123;
      ucal_getKeywordValuesForLocale();
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
          WTF::fastFree((unint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
        else
          --*(_DWORD *)v10;
      }
      v126 = 0;
      v18 = uenum_next();
      if (!v18)
      {
LABEL_46:
        uenum_close();
        return;
      }
      v19 = (_BYTE *)v18;
      while (1)
      {
        v20 = v126;
        if (v126)
        {
          if (v126 < 0)
          {
            __break(0xC471u);
            return;
          }
          v21 = (int *)WTF::fastCompactMalloc((WTF *)(v126 + 20));
          v22 = v21 + 5;
          *v21 = 2;
          v21[1] = v20;
          *((_QWORD *)v21 + 1) = v21 + 5;
          v21[4] = 4;
          if (v20 == 1)
            *v22 = *v19;
          else
            memcpy(v22, v19, v20);
        }
        else
        {
          WTF::StringImpl::s_emptyAtomString += 2;
          v21 = &WTF::StringImpl::s_emptyAtomString;
        }
        v125 = (WTF::StringImpl *)v21;
        v23 = *(unsigned int *)(a8 + 12);
        if ((_DWORD)v23 == *(_DWORD *)(a8 + 8))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String&>(a8, (unint64_t)&v125);
        }
        else
        {
          v57 = *(_QWORD *)a8;
          *v21 += 2;
          *(_QWORD *)(v57 + 8 * v23) = v21;
          *(_DWORD *)(a8 + 12) = v23 + 1;
        }
        if (WTF::equalInternal<unsigned char>((uint64_t)v125, (unint64_t)"islamic-civil", 13))
        {
          v123 = (WTF *)"islamicc";
          v124 = 9;
          v24 = *(unsigned int *)(a8 + 12);
          if ((_DWORD)v24 == *(_DWORD *)(a8 + 8))
          {
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((int *)a8, (uint64_t *)&v123);
          }
          else
          {
            v25 = *(_QWORD *)a8;
            v26 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v26 = 0x800000002;
            *(_QWORD *)(v26 + 8) = "islamicc";
            *(_DWORD *)(v26 + 16) = 4;
            v27 = *(_DWORD *)(a8 + 12);
            *(_QWORD *)(v25 + 8 * v24) = v26;
            *(_DWORD *)(a8 + 12) = v27 + 1;
          }
        }
        v28 = "gregory";
        if (WTF::equalInternal<unsigned char>((uint64_t)v125, (unint64_t)"gregorian", 9)
          || (v28 = "ethioaa",
              WTF::equalInternal<unsigned char>((uint64_t)v125, (unint64_t)"ethiopic-amete-alem", 19)))
        {
          v36 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v36 = 0x700000002;
          *(_QWORD *)(v36 + 8) = v28;
          *(_DWORD *)(v36 + 16) = 4;
          v123 = (WTF *)v36;
          LOBYTE(v124) = 1;
          v37 = *(unsigned int *)(a8 + 12);
          if ((_DWORD)v37 != *(_DWORD *)(a8 + 8))
          {
            v38 = *(_QWORD *)a8;
            v123 = 0;
            *(_QWORD *)(v38 + 8 * v37) = v36;
            *(_DWORD *)(a8 + 12) = v37 + 1;
LABEL_25:
            v39 = v123;
            v123 = 0;
            if (v39)
            {
              if (*(_DWORD *)v39 == 2)
              {
                WTF::StringImpl::~StringImpl(v39, v29, v30, v31, v32, v33, v34, v35);
                WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
              }
              else
              {
                *(_DWORD *)v39 -= 2;
              }
            }
            goto LABEL_28;
          }
          v58 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a8, v37 + 1, (unint64_t)&v123);
          v59 = *(unsigned int *)(a8 + 12);
          v60 = *(_QWORD *)a8;
          v61 = *v58;
          *v58 = 0;
          *(_QWORD *)(v60 + 8 * v59) = v61;
          LODWORD(v60) = v124;
          *(_DWORD *)(a8 + 12) = v59 + 1;
          if ((_DWORD)v60)
            goto LABEL_25;
        }
LABEL_28:
        v40 = v125;
        v125 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
          {
            WTF::StringImpl::~StringImpl(v40, v29, v30, v31, v32, v33, v34, v35);
            WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
          }
          else
          {
            *(_DWORD *)v40 -= 2;
          }
        }
        v19 = (_BYTE *)uenum_next();
        if (!v19)
          goto LABEL_46;
      }
  }
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10)
    WTF::VectorTypeOperations<WTF::String>::destruct(*(unint64_t **)a1, (WTF::AtomStringImpl *)(*(_QWORD *)a1 + 8 * v10), a3, a4, a5, a6, a7, a8);
  WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::IntlDateTimeFormat::initializeDateTimeFormat(_QWORD *a1, unint64_t a2, unint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  JSC::Structure *v16;
  JSC::Symbol *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  WTF::AtomStringImpl *v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  JSC::VM *v34;
  JSC::VM *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  unint64_t v56;
  JSC::Heap **v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  JSC::Exception *v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  JSC::VM *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  int v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  unint64_t v96;
  JSC::Heap **v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  JSC::Exception *v105;
  WTF::StringImpl *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  JSC::VM *v116;
  int v117;
  uint64_t v118;
  int8x16_t v119;
  unint64_t v120;
  int v121;
  unint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  uint64_t (*v129)(WTF **);
  WTF **v130;
  int v131;
  int *v132;
  char *v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  WTF::StringImpl *v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  WTF::AtomStringImpl *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::AtomStringImpl *v166;
  const WTF::String *v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF *v175;
  unint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  WTF *v192;
  uint64_t v193;
  WTF::StringImpl *v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  WTF::StringImpl *v219;
  const char *v220;
  unint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  WTF::AtomStringImpl *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  WTF::StringImpl *v237;
  WTF::StringImpl **v238;
  uint64_t v239;
  unint64_t v240;
  JSC::Heap **v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  double v248;
  JSC::Exception *v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  unint64_t v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  WTF::AtomStringImpl *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  float v267;
  int v268;
  _DWORD *v269;
  WTF::StringImpl *v270;
  WTF::StringImpl *v271;
  WTF::StringImpl *v272;
  WTF::StringImpl *v273;
  uint64_t v274;
  int v275;
  int v276;
  int v277;
  BOOL v278;
  int v279;
  char v280;
  int v281;
  int v282;
  char v283;
  unsigned int v284;
  uint64_t v285;
  int v286;
  BOOL v287;
  WTF::StringImpl *v288;
  WTF::StringImpl *v289;
  int *v290;
  _BYTE *v291;
  _BYTE *v292;
  size_t v293;
  _WORD *v294;
  int8x16_t *v295;
  uint64_t v296;
  char *v297;
  char *v298;
  unint64_t v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  void *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  __int128 v332;
  char *v333;
  int8x16_t v334;
  int8x16_t v335;
  int8x16_t v336;
  char *v337;
  char *v338;
  char *v339;
  __int16 v340;
  uint64_t v341;
  _WORD *v342;
  _QWORD *v343;
  uint64_t **v344;
  unint64_t v345;
  int8x16_t v346;
  JSC::VM *v347;
  uint64_t *v348;
  int *v349;
  int *v350;
  int v351;
  WTF::StringImpl **v352;
  char v353;
  WTF::StringImpl *v354;
  WTF::StringImpl *v355;
  int *v356;
  unsigned int v357;
  unsigned __int8 *v358;
  unint64_t v359;
  int64_t v360;
  char v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  char v365;
  unsigned int v366;
  unint64_t v367;
  unsigned int v368;
  unint64_t v369;
  unsigned int v370;
  unsigned int v371;
  uint64_t v372;
  int v373;
  unint64_t v374;
  int *v375;
  size_t v376;
  unint64_t v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  void *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  void *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  void *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t v409;
  void *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  WTF *v418;
  int8x16_t v419;
  unint64_t v420;
  unint64_t v421;
  void *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  WTF *v431;
  unint64_t v432;
  signed int CanonicalTimeZoneID;
  void *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unsigned int v441;
  unsigned __int8 *v442;
  uint64_t v443;
  WTF *v444;
  uint64_t v445;
  _WORD *v446;
  int *v447;
  WTF *v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  WTF *v452;
  uint64_t v453;
  WTF *v454;
  void *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  int v465;
  unint64_t v466;
  char *v467;
  size_t v468;
  uint64_t v469;
  char v470;
  JSC::VM *v471;
  WTF::AtomStringImpl *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  WTF::StringImpl *v480;
  unint64_t v481;
  JSC::Heap **v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  double v489;
  JSC::Exception *v490;
  WTF::StringImpl *v491;
  int v492;
  uint64_t v493;
  int v494;
  BOOL v495;
  int v496;
  WTF::StringImpl *v497;
  unint64_t v498;
  void *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t v506;
  int v507;
  unint64_t v508;
  void *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t (*v517)(WTF **);
  WTF **v518;
  unint64_t v519;
  void *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  int v527;
  BOOL v528;
  unint64_t v529;
  void *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  int v538;
  int *v539;
  char *v540;
  unsigned int v541;
  uint64_t v542;
  uint64_t v543;
  int v544;
  WTF::StringImpl *v545;
  JSC::VM *v546;
  unint64_t v547;
  uint64_t v548;
  WTF *v549;
  int8x16_t v550;
  unint64_t v551;
  unint64_t v552;
  void *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  unint64_t v561;
  JSC::Heap **v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  double v569;
  JSC::Exception *v570;
  WTF::StringImpl *v571;
  unint64_t v572;
  void *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  int v580;
  int v581;
  int *v582;
  char *v583;
  unsigned int v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  WTF::StringImpl *v588;
  uint64_t v589;
  WTF *v590;
  int8x16_t v591;
  unint64_t v592;
  unint64_t v593;
  void *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unint64_t v602;
  JSC::Heap **v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  double v610;
  JSC::Exception *v611;
  WTF::StringImpl *v612;
  unint64_t v613;
  void *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  int v621;
  int v622;
  int *v623;
  char *v624;
  unsigned int v625;
  uint64_t v626;
  uint64_t v627;
  unint64_t v628;
  JSC::Heap **v629;
  unint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  double v636;
  JSC::Exception *v637;
  WTF::StringImpl *v638;
  WTF::StringImpl *v639;
  JSC::VM *v640;
  uint64_t v641;
  WTF *v642;
  int8x16_t v643;
  unint64_t v644;
  unint64_t v645;
  void *v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  void *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  int v661;
  int v662;
  int *v663;
  char *v664;
  unsigned int v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  WTF::StringImpl *v670;
  uint64_t v671;
  WTF *v672;
  int8x16_t v673;
  unint64_t v674;
  unint64_t v675;
  void *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  unint64_t v684;
  JSC::Heap **v685;
  unint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  double v692;
  JSC::Exception *v693;
  WTF::StringImpl *v694;
  unint64_t v695;
  void *v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  int v703;
  int v704;
  int *v705;
  char *v706;
  unsigned int v707;
  uint64_t v708;
  uint64_t v709;
  unint64_t v710;
  JSC::Heap **v711;
  unint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  double v718;
  JSC::Exception *v719;
  WTF::StringImpl *v720;
  WTF::StringImpl *v721;
  JSC::VM *v722;
  uint64_t v723;
  WTF *v724;
  int8x16_t v725;
  unint64_t v726;
  unint64_t v727;
  void *v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  unint64_t v735;
  void *v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  int v743;
  int v744;
  int *v745;
  char *v746;
  unsigned int v747;
  uint64_t v748;
  uint64_t v749;
  int v750;
  WTF::StringImpl *v751;
  uint64_t v752;
  WTF *v753;
  int8x16_t v754;
  unint64_t v755;
  unint64_t v756;
  void *v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  unint64_t v765;
  JSC::Heap **v766;
  unint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  double v773;
  JSC::Exception *v774;
  WTF::StringImpl *v775;
  unint64_t v776;
  void *v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  int v784;
  int v785;
  int *v786;
  char *v787;
  unsigned int v788;
  uint64_t v789;
  uint64_t v790;
  unint64_t v791;
  JSC::Heap **v792;
  unint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  double v799;
  JSC::Exception *v800;
  WTF::StringImpl *v801;
  WTF::StringImpl *v802;
  JSC::VM *v803;
  uint64_t v804;
  WTF *v805;
  int8x16_t v806;
  unint64_t v807;
  unint64_t v808;
  void *v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  unint64_t v816;
  void *v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  int v824;
  int v825;
  int *v826;
  char *v827;
  unsigned int v828;
  uint64_t v829;
  uint64_t v830;
  unint64_t v831;
  JSC::Heap **v832;
  unint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  double v839;
  JSC::Exception *v840;
  WTF::StringImpl *v841;
  WTF::StringImpl *v842;
  uint64_t v843;
  WTF *v844;
  int8x16_t v845;
  unint64_t v846;
  unint64_t v847;
  unint64_t v848;
  void *v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  unint64_t v856;
  void *v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  int v864;
  int v865;
  int *v866;
  char *v867;
  unsigned int v868;
  uint64_t v869;
  uint64_t v870;
  unint64_t v871;
  JSC::Heap **v872;
  unint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  double v879;
  JSC::Exception *v880;
  WTF::StringImpl *v881;
  WTF::StringImpl *v882;
  JSC::VM *v883;
  unint64_t v884;
  uint64_t v885;
  JSC::JSObject *v886;
  int8x16_t v887;
  unint64_t v888;
  void *v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  unint64_t v896;
  void *v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  int v904;
  int v905;
  JSC::VM *v906;
  uint64_t v907;
  WTF *v908;
  int8x16_t v909;
  unint64_t v910;
  int v911;
  int v912;
  int *v913;
  char *v914;
  unsigned int v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  WTF::StringImpl *v921;
  unint64_t v922;
  WTF::StringImpl *v923;
  JSC::VM *v924;
  unint64_t v925;
  _QWORD *v926;
  unint64_t v927;
  JSC::VM *v928;
  WTF::AtomStringImpl *v929;
  const char *v930;
  unint64_t v931;
  uint64_t v932;
  unint64_t v933;
  void *v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  WTF *v942;
  unsigned int v943;
  unint64_t v944;
  unint64_t v945;
  WTF *v946;
  WTF *v947;
  __int16 v948;
  void *v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  WTF *v957;
  _QWORD *v959;
  int v960;
  char v961;
  __int16 v962;
  WTF *v963;
  int v964;
  uint64_t v965;
  unsigned int v966;
  int v967;
  uint64_t v968;
  int v969;
  int v970;
  char v971;
  int v972;
  int v973;
  _BOOL4 v974;
  int v975;
  int v976;
  int v977;
  _BOOL4 v978;
  unsigned int v979;
  unsigned int v980;
  uint64_t v981;
  int v982;
  uint64_t v983;
  unsigned int v984;
  unsigned int v985;
  int v986;
  int v987;
  unsigned int v989;
  uint64_t v990;
  uint64_t v991;
  unsigned int v992;
  uint64_t v993;
  WTF *v994;
  unsigned int v995;
  unint64_t v996;
  unint64_t v997;
  WTF *v998;
  WTF *v999;
  __int16 v1000;
  void *v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  unint64_t v1010;
  WTF *v1011;
  WTF *v1012;
  unint64_t v1013;
  void *v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  _BOOL4 v1022;
  int v1023;
  int v1024;
  int v1025;
  _BOOL4 v1026;
  int v1027;
  int v1028;
  int v1029;
  int8x16_t *v1030;
  size_t v1031;
  unint64_t v1032;
  void *v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  int8x16_t *v1040;
  size_t v1041;
  WTF *v1042;
  _DWORD *v1043;
  uint64_t v1044;
  int v1045;
  uint64_t v1046;
  int v1047;
  WTF *v1048;
  uint64_t v1049;
  int v1050;
  WTF *v1051;
  _QWORD *v1052;
  WTF *v1053;
  uint64_t v1054;
  WTF *v1055;
  uint64_t v1056;
  uint64_t v1057;
  int v1058;
  uint64_t v1059;
  _WORD *v1060;
  uint64_t v1061;
  WTF *v1062;
  _DWORD *v1063;
  uint64_t v1064;
  int v1065;
  uint64_t v1066;
  unint64_t v1067;
  unint64_t v1068;
  uint64_t v1069;
  int v1070;
  uint64_t v1071;
  uint64_t v1072;
  int v1073;
  uint64_t v1074;
  int v1075;
  WTF *v1076;
  uint64_t v1077;
  uint64_t v1078;
  int v1079;
  uint64_t v1080;
  WTF *v1081;
  _QWORD *v1082;
  _WORD *v1083;
  uint64_t v1084;
  WTF *v1085;
  _DWORD *v1086;
  uint64_t v1087;
  int v1088;
  uint64_t v1089;
  int v1090;
  WTF *v1091;
  _DWORD *v1092;
  uint64_t v1093;
  int v1094;
  uint64_t v1095;
  uint64_t v1096;
  BOOL v1097;
  int v1098;
  uint64_t v1099;
  uint64_t v1100;
  int v1102;
  uint64_t v1103;
  char v1104;
  BOOL v1105;
  int v1106;
  int v1108;
  WTF *v1109;
  WTF::StringImpl *v1110;
  WTF::StringImpl *v1111;
  int8x16_t **v1112;
  int v1113;
  WTF *v1114;
  unint64_t v1115;
  unint64_t v1116;
  WTF *v1117;
  WTF *v1118;
  __int16 v1119;
  void *v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  WTF *v1125;
  __int32 v1126;
  __int32 v1127;
  WTF *v1128;
  unint64_t v1129;
  void *v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  unint64_t v1137;
  void *v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  WTF *v1145;
  _QWORD *v1146;
  uint64_t v1147;
  WTF *v1148;
  WTF *v1149;
  _WORD *v1150;
  _WORD *v1151;
  unint64_t v1152;
  void *v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  unint64_t v1160;
  void *v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  _DWORD *v1168;
  int v1169;
  unint64_t v1170;
  __int128 v1171;
  char *v1172;
  int8x16_t v1173;
  __int128 v1174;
  __int128 v1175;
  char *v1176;
  char *v1177;
  char *v1178;
  signed int Skeleton;
  unsigned int v1180;
  uint64_t v1181;
  unint64_t v1182;
  unint64_t v1183;
  uint64_t v1184;
  unint64_t v1185;
  JSC::Heap **v1186;
  unint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  double v1193;
  JSC::Exception *v1194;
  WTF::StringImpl *v1195;
  unint64_t v1196;
  __int128 v1197;
  char *v1198;
  int8x16_t v1199;
  __int128 v1200;
  __int128 v1201;
  char *v1202;
  char *v1203;
  char *v1204;
  WTF::AtomStringImpl *v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  __int16 v1212;
  unsigned int v1213;
  int v1214;
  uint64_t v1216;
  unsigned int v1217;
  uint64_t v1218;
  unsigned int v1219;
  void *v1220;
  WTF *v1221;
  __int32 v1222;
  __int32 v1223;
  unint64_t v1224;
  __int128 v1225;
  char *v1226;
  int8x16_t v1227;
  __int128 v1228;
  __int128 v1229;
  char *v1230;
  char *v1231;
  char *v1232;
  WTF *v1233;
  WTF *v1234;
  unint64_t v1235;
  void *v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  unint64_t v1243;
  unint64_t v1244;
  unint64_t v1245;
  WTF *v1246;
  uint64_t v1247;
  WTF *v1248;
  void *v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  int v1256;
  int v1257;
  JSC::VM *v1258;
  int v1259;
  int v1260;
  WTF *v1261;
  WTF::StringImpl *v1262;
  uint64_t (*v1263)(int8x16_t *);
  uint64_t *v1264;
  unint64_t v1265;
  void *v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  int v1273;
  int v1274;
  int v1275;
  int v1276;
  int v1277;
  int v1278;
  int v1279;
  int v1280;
  int v1281;
  int v1282;
  int v1283;
  uint64_t (*v1284)(int8x16_t *);
  uint64_t *v1285;
  uint64_t (*v1286)(int8x16_t *);
  uint64_t *v1287;
  uint64_t (*v1288)(int8x16_t *);
  uint64_t *v1289;
  uint64_t (*v1290)(int8x16_t *);
  uint64_t *v1291;
  uint64_t (*v1292)(int8x16_t *);
  uint64_t *v1293;
  uint64_t (*v1294)(WTF **);
  WTF **v1295;
  unint64_t v1296;
  unint64_t v1297;
  unint64_t v1298;
  WTF *v1299;
  WTF *v1300;
  void *v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t (*v1308)(int8x16_t *);
  uint64_t *v1309;
  uint64_t (*v1310)(int8x16_t *);
  uint64_t *v1311;
  uint64_t (*v1312)(int8x16_t *);
  uint64_t *v1313;
  uint64_t (*v1314)(int8x16_t *);
  uint64_t *v1315;
  uint64_t (*v1316)(int8x16_t *);
  uint64_t *v1317;
  __int16 v1318;
  unsigned __int128 *v1319;
  unsigned __int128 *v1320;
  unsigned __int128 *v1321;
  unsigned __int128 v1322;
  char v1323;
  unint64_t v1324;
  int v1325;
  int v1326;
  unsigned int v1327;
  int v1328;
  int v1329;
  unsigned int v1330;
  int v1331;
  int v1332;
  int v1333;
  int v1334;
  int v1335;
  uint64_t v1336;
  int v1337;
  int v1338;
  int v1339;
  WTF::StringImpl *v1340;
  WTF::StringImpl *v1341;
  WTF::StringImpl *v1342;
  WTF::StringImpl *v1343;
  unint64_t v1344;
  int v1345;
  uint64_t v1346;
  uint64_t v1347;
  unsigned int v1348;
  _QWORD *v1349;
  int8x16_t __src;
  _QWORD v1351[10];
  WTF *v1352;
  unint64_t v1353;
  _BYTE v1354[64];
  WTF::StringImpl *v1355;
  WTF::StringImpl *v1356;
  uint64_t v1357;
  WTF *v1358;
  WTF::StringImpl *v1359;
  WTF::StringImpl *v1360;
  WTF::StringImpl *v1361;
  uint64_t v1362;
  _DWORD *v1363;
  WTF::StringImpl *v1364;
  WTF::StringImpl *v1365;
  WTF::StringImpl *v1366;
  unsigned __int8 v1367;
  char v1368;
  char v1369;
  WTF::StringImpl *v1370;
  char v1371;
  char v1372;
  char v1373;
  char v1374;
  char v1375;
  WTF::StringImpl *v1376;
  unsigned __int8 v1377;
  WTF *v1378;
  int v1379;
  unsigned int v1380;
  JSC::VM *v1381;
  WTF::StringImpl *v1382[2];
  char v1383;
  char v1384;
  WTF::StringImpl *v1385;
  WTF *v1386[2];
  __int128 v1387;
  uint64_t v1388;
  char v1389;
  const char *v1390;
  uint64_t v1391;
  char v1392;
  const char *v1393;
  uint64_t v1394;
  unint64_t v1395;
  const char *v1396;
  uint64_t v1397;
  char v1398;
  const char *v1399;
  uint64_t v1400;
  char v1401;
  uint64_t v1402;
  int8x16x2_t v1403;
  int8x16x2_t v1404;
  int8x16x2_t v1405;
  int8x16x2_t v1406;
  int8x16x2_t v1407;
  int8x16x2_t v1408;
  int8x16x2_t v1409;
  int8x16x2_t v1410;
  int8x16x2_t v1411;
  int8x16x2_t v1412;
  int8x16x2_t v1413;
  int8x16x2_t v1414;

  v9 = a6;
  v10 = a5;
  v11 = (unint64_t)a4;
  v12 = a2;
  v1402 = *MEMORY[0x1E0C80C00];
  v1381 = *(JSC::VM **)(a2 + 56);
  v14 = (unint64_t)v1381;
  JSC::canonicalizeLocaleList(a2, a3, a3, a4, a5, a6, a7, a8, &v1378, a9);
  if (*(_DWORD *)(v14 + 80))
  {
    v123 = *(_DWORD *)(v14 + 80);
    if ((v123 & 0x27) != 0 && (v123 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_206;
  }
  v1386[0] = (WTF *)v11;
  if (v11 == 10)
    goto LABEL_8;
  v22 = *(_QWORD *)(v12 + 56);
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    v122 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)v1386, (JSC::JSGlobalObject *)v12, v16, (uint64_t)v17, v18, v19, v20, v21);
    goto LABEL_109;
  }
  if (*(unsigned __int8 *)(v11 + 5) <= 0x16u)
  {
    v122 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v11, (JSC::SymbolObject **)v12, (uint64_t)v16, v17, v18, v19, v20, v21);
LABEL_109:
    v11 = v122;
  }
  if (*(_DWORD *)(v22 + 80))
  {
    v23 = *(_DWORD *)(v22 + 80);
    if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v22 + 64), 7u, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
    if (*(_QWORD *)(v22 + 16))
LABEL_8:
      v11 = 0;
  }
  if (*(_DWORD *)(v14 + 80))
  {
    v124 = *(_DWORD *)(v14 + 80);
    if ((v124 & 0x27) != 0 && (v124 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_206;
  }
  LOBYTE(v1366) = 0;
  v24 = v14 + 41952;
  v1367 = 0;
  v1368 = 0;
  v1369 = 0;
  LOBYTE(v1370) = 0;
  v1371 = 0;
  v1372 = 0;
  v1373 = 0;
  v1374 = 0;
  v1375 = 0;
  LOBYTE(v1376) = 0;
  v1377 = 0;
  v25 = *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 1792);
  v1386[0] = (WTF *)"lookup";
  v1386[1] = (WTF *)7;
  LOBYTE(v1387) = 0;
  *((_QWORD *)&v1387 + 1) = "best fit";
  v1388 = 9;
  v1389 = 1;
  v33 = JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)v12, (unsigned int *)v11, v25, (uint64_t)v1386, 2, (unint64_t)"localeMatcher must be either \"lookup\" or \"best fit\"", 52, 1);
  v34 = v1381;
  if (*((_DWORD *)v1381 + 20))
  {
    v125 = *((_DWORD *)v1381 + 20);
    if ((v125 & 0x27) != 0 && (v125 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1381 + 64), 7u, (uint64_t)v27, v28, v29, v30, v31, v32);
    if (*((_QWORD *)v34 + 2))
      goto LABEL_205;
  }
  v1348 = v33;
  JSC::intlStringOption((JSC::JSGlobalObject *)v12, (unsigned int *)v11, *(_QWORD *)(*(_QWORD *)v24 + 968), 0, 0, 0, 0, v32, &v1365, 0, 0);
  v35 = v1381;
  if (*((_DWORD *)v1381 + 20))
  {
    v126 = *((_DWORD *)v1381 + 20);
    if ((v126 & 0x27) != 0 && (v126 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1381 + 64), 7u, (uint64_t)v27, v28, v29, v30, v31, v32);
    if (*((_QWORD *)v35 + 2))
      goto LABEL_202;
  }
  v36 = v1365;
  if (v1365)
  {
    v37 = *((_QWORD *)v1365 + 1);
    v38 = *((unsigned int *)v1365 + 1);
    if ((*((_BYTE *)v1365 + 16) & 4) != 0)
    {
      if ((_DWORD)v38)
      {
        while (1)
        {
          v45 = 0;
          while (1)
          {
            v46 = *(unsigned __int8 *)(v37 + v45);
            if ((v46 - 48) >= 0xA && (v46 | 0x20u) - 97 > 0x19)
              break;
            if (v38 == ++v45)
            {
              v52 = v37 + v38;
              goto LABEL_43;
            }
          }
          if (v46 != 45 || (v45 - 3) >= 6)
            break;
          v49 = v38 - 1;
          v38 += ~v45;
          v37 += v45 + 1;
          if (v49 == v45)
            goto LABEL_41;
        }
LABEL_49:
        v55 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v55 = 0x2C00000002;
        *(_QWORD *)(v55 + 8) = "calendar is not a well-formed calendar value";
        *(_DWORD *)(v55 + 16) = 4;
        __src.i64[0] = v55;
        v56 = *(_QWORD *)(v12 + 128);
        v57 = *(JSC::Heap ***)(v12 + 56);
        if ((v56 & 1) != 0)
        {
          v129 = *(uint64_t (**)(WTF **))(v56 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v12 & 8) != 0)
            v130 = (WTF **)(v12 - 16);
          else
            v130 = (WTF **)(v12 & 0xFFFFFFFFFFFFC000 | 8);
          v1386[0] = *v130;
          v1386[1] = (WTF *)v12;
          *(_QWORD *)&v1387 = v12 + 128;
          v56 = v129(v1386);
        }
        v58 = JSC::ErrorInstance::create(v57, v56, (WTF::StringImpl **)&__src, 0, 0, 0, 2, 1);
        v65 = (JSC::Exception *)v58;
        if ((v58 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0x4C)))
        {
          v65 = (JSC::Exception *)JSC::Exception::create((uint64_t)v35, (JSC::VM *)v58, 0, v59, v60, v61, v62, v63);
        }
        JSC::VM::throwException(v35, (JSC::JSGlobalObject *)v12, v65, v64, v59, v60, v61, v62, v63);
        v66 = (WTF::StringImpl *)__src.i64[0];
        __src.i64[0] = 0;
        if (v66)
          goto LABEL_200;
        goto LABEL_202;
      }
LABEL_41:
      v52 = v37;
LABEL_43:
      v51 = v52 - v37 - 3;
    }
    else
    {
      if ((_DWORD)v38)
      {
        do
        {
          v39 = 0;
          v40 = -2;
          while (1)
          {
            v41 = *(unsigned __int16 *)(v37 + 2 * v39);
            v42 = (v41 - 48) >= 0xA && (v41 | 0x20u) - 97 > 0x19;
            if (v42)
              break;
            v40 -= 2;
            if (v38 == ++v39)
            {
              v50 = v37 + 2 * v38;
              goto LABEL_42;
            }
          }
          if (v41 != 45 || (v39 - 3) >= 6)
            goto LABEL_49;
          v44 = v38 - 1;
          v38 += ~v39;
          v37 -= v40;
        }
        while (v44 != v39);
      }
      v50 = v37;
LABEL_42:
      v51 = ((unint64_t)(v50 - v37) >> 1) - 3;
    }
    if (v51 >= 6)
      goto LABEL_49;
    v53 = v1367;
    *(_DWORD *)v1365 += 2;
    if (v53)
    {
      v54 = v1366;
      v1366 = v36;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          WTF::StringImpl::~StringImpl(v54, v26, (uint64_t)v27, v28, v29, v30, v31, v32);
          WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
        }
        else
        {
          *(_DWORD *)v54 -= 2;
        }
      }
    }
    else
    {
      v1366 = v36;
      v1367 = 1;
    }
  }
  JSC::intlStringOption((JSC::JSGlobalObject *)v12, (unsigned int *)v11, *(_QWORD *)(*(_QWORD *)v24 + 2040), 0, 0, 0, 0, v32, &v1364, 0, 0);
  v75 = v1381;
  if (*((_DWORD *)v1381 + 20))
  {
    v127 = *((_DWORD *)v1381 + 20);
    if ((v127 & 0x27) != 0 && (v127 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1381 + 64), 7u, (uint64_t)v27, v28, v29, v30, v31, v32);
    if (*((_QWORD *)v75 + 2))
      goto LABEL_199;
  }
  v76 = v1364;
  if (v1364)
  {
    v77 = *((_QWORD *)v1364 + 1);
    v78 = *((unsigned int *)v1364 + 1);
    if ((*((_BYTE *)v1364 + 16) & 4) != 0)
    {
      if ((_DWORD)v78)
      {
        while (1)
        {
          v85 = 0;
          while (1)
          {
            v86 = *(unsigned __int8 *)(v77 + v85);
            if ((v86 - 48) >= 0xA && (v86 | 0x20u) - 97 > 0x19)
              break;
            if (v78 == ++v85)
            {
              v92 = v77 + v78;
              goto LABEL_88;
            }
          }
          if (v86 != 45 || (v85 - 3) >= 6)
            break;
          v89 = v78 - 1;
          v78 += ~v85;
          v77 += v85 + 1;
          if (v89 == v85)
            goto LABEL_86;
        }
LABEL_94:
        v95 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v95 = 0x3B00000002;
        *(_QWORD *)(v95 + 8) = "numberingSystem is not a well-formed numbering system value";
        *(_DWORD *)(v95 + 16) = 4;
        __src.i64[0] = v95;
        v96 = *(_QWORD *)(v12 + 128);
        v97 = *(JSC::Heap ***)(v12 + 56);
        if ((v96 & 1) != 0)
        {
          v517 = *(uint64_t (**)(WTF **))(v96 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v12 & 8) != 0)
            v518 = (WTF **)(v12 - 16);
          else
            v518 = (WTF **)(v12 & 0xFFFFFFFFFFFFC000 | 8);
          v1386[0] = *v518;
          v1386[1] = (WTF *)v12;
          *(_QWORD *)&v1387 = v12 + 128;
          v96 = v517(v1386);
        }
        v98 = JSC::ErrorInstance::create(v97, v96, (WTF::StringImpl **)&__src, 0, 0, 0, 2, 1);
        v105 = (JSC::Exception *)v98;
        if ((v98 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v98 & 0xFFFFFFFE) + 0x4C)))
        {
          v105 = (JSC::Exception *)JSC::Exception::create((uint64_t)v75, (JSC::VM *)v98, 0, v99, v100, v101, v102, v103);
        }
        JSC::VM::throwException(v75, (JSC::JSGlobalObject *)v12, v105, v104, v99, v100, v101, v102, v103);
        v106 = (WTF::StringImpl *)__src.i64[0];
        __src.i64[0] = 0;
        if (v106)
          goto LABEL_197;
        goto LABEL_199;
      }
LABEL_86:
      v92 = v77;
LABEL_88:
      v91 = v92 - v77 - 3;
    }
    else
    {
      if ((_DWORD)v78)
      {
        do
        {
          v79 = 0;
          v80 = -2;
          while (1)
          {
            v81 = *(unsigned __int16 *)(v77 + 2 * v79);
            if ((v81 - 48) >= 0xA && (v81 | 0x20u) - 97 > 0x19)
              break;
            v80 -= 2;
            if (v78 == ++v79)
            {
              v90 = v77 + 2 * v78;
              goto LABEL_87;
            }
          }
          if (v81 != 45 || (v79 - 3) >= 6)
            goto LABEL_94;
          v84 = v78 - 1;
          v78 += ~v79;
          v77 -= v80;
        }
        while (v84 != v79);
      }
      v90 = v77;
LABEL_87:
      v91 = ((unint64_t)(v90 - v77) >> 1) - 3;
    }
    if (v91 >= 6)
      goto LABEL_94;
    v93 = v1377;
    *(_DWORD *)v1364 += 2;
    if (v93)
    {
      v94 = v1376;
      v1376 = v76;
      if (v94)
      {
        if (*(_DWORD *)v94 == 2)
        {
          WTF::StringImpl::~StringImpl(v94, v26, (uint64_t)v27, v28, v29, v30, v31, v32);
          WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
        }
        else
        {
          *(_DWORD *)v94 -= 2;
        }
      }
    }
    else
    {
      v1376 = v76;
      v1377 = 1;
    }
  }
  v115 = JSC::intlBooleanOption(v12, (unsigned int *)v11, *(_QWORD *)(*(_QWORD *)v24 + 1520), v28, v29, v30, v31, v32);
  v1345 = v115;
  v116 = v1381;
  if (*((_DWORD *)v1381 + 20))
  {
    v128 = *((_DWORD *)v1381 + 20);
    if ((v128 & 0x27) != 0 && (v128 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1381 + 64), 7u, (uint64_t)v27, v28, v29, v30, v31, v32);
    if (*((_QWORD *)v116 + 2))
      goto LABEL_199;
  }
  v27 = *(const WTF::String **)(*(_QWORD *)v24 + 1512);
  v1386[0] = (WTF *)"h11";
  v1386[1] = (WTF *)4;
  LOBYTE(v1387) = 1;
  *((_QWORD *)&v1387 + 1) = "h12";
  v1388 = 4;
  v1389 = 2;
  v1390 = "h23";
  v1391 = 4;
  v1392 = 3;
  v1393 = "h24";
  v1394 = 4;
  LOBYTE(v1395) = 4;
  if (v11)
  {
    v117 = v10;
    v118 = *(_QWORD *)(v12 + 56);
    v115 = JSC::JSObject::get((unsigned int *)v11, v12, (unint64_t)v27, v28, v29, v30, v31, v32);
    v120 = v115;
    v1352 = (WTF *)v115;
    if (*(_DWORD *)(v118 + 80))
    {
      v131 = *(_DWORD *)(v118 + 80);
      if ((v131 & 0x27) != 0 && (v131 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v118 + 64), 7u, (uint64_t)v27, v28, v29, v30, v31, v32);
      v121 = 0;
      if (*(_QWORD *)(v118 + 16) || v120 == 10)
        goto LABEL_163;
    }
    else if (v115 == 10)
    {
      v121 = 0;
LABEL_163:
      v116 = v1381;
      v10 = v117;
      v24 = v14 + 41952;
      goto LABEL_164;
    }
    if ((v120 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v120 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1352, (JSC::JSGlobalObject *)v12, v27, v28, v29, v30, v31, v32, (int **)&v1359);
      goto LABEL_142;
    }
    v132 = *(int **)(v120 + 8);
    if ((v132 & 1) != 0)
    {
      v132 = *JSC::JSRopeString::resolveRope(v120, (JSC::JSGlobalObject *)v12, (uint64_t)v27, v28, v119, v29, v30, v31, v32);
      if (!v132)
        goto LABEL_141;
    }
    else if (!v132)
    {
LABEL_141:
      v1359 = (WTF::StringImpl *)v132;
LABEL_142:
      if (!*(_DWORD *)(v118 + 80))
        goto LABEL_143;
      v527 = *(_DWORD *)(v118 + 80);
      if ((v527 & 0x27) != 0 && (v527 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v118 + 64), 7u, (uint64_t)v27, v28, v29, v30, v31, v32);
      if (!*(_QWORD *)(v118 + 16))
      {
LABEL_143:
        if (v1386[1])
          v133 = (char *)v1386[1] - 1;
        else
          v133 = 0;
        if (WTF::equalInternal<unsigned char>((uint64_t)v1359, (unint64_t)v1386[0], (uint64_t)v133))
        {
          v134 = 0;
LABEL_159:
          v121 = LOBYTE(v1386[3 * v134 + 2]);
          goto LABEL_160;
        }
        if (v1388)
          v135 = v1388 - 1;
        else
          v135 = 0;
        if (WTF::equalInternal<unsigned char>((uint64_t)v1359, *((unint64_t *)&v1387 + 1), v135))
        {
          v134 = 1;
          goto LABEL_159;
        }
        if (v1391)
          v136 = v1391 - 1;
        else
          v136 = 0;
        if (WTF::equalInternal<unsigned char>((uint64_t)v1359, (unint64_t)v1390, v136))
        {
          v134 = 2;
          goto LABEL_159;
        }
        if (v1394)
          v137 = v1394 - 1;
        else
          v137 = 0;
        if (WTF::equalInternal<unsigned char>((uint64_t)v1359, (unint64_t)v1393, v137))
        {
          v134 = 3;
          goto LABEL_159;
        }
        v239 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v239 = 0x2F00000002;
        *(_QWORD *)(v239 + 8) = "hourCycle must be \"h11\", \"h12\", \"h23\", or \"h24\"";
        *(_DWORD *)(v239 + 16) = 4;
        v1382[0] = (WTF::StringImpl *)v239;
        v240 = *(_QWORD *)(v12 + 128);
        v241 = *(JSC::Heap ***)(v12 + 56);
        if ((v240 & 1) != 0)
        {
          v1263 = *(uint64_t (**)(int8x16_t *))(v240 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v12 & 8) != 0)
            v1264 = (uint64_t *)(v12 - 16);
          else
            v1264 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
          __src.i64[0] = *v1264;
          __src.i64[1] = v12;
          v1351[0] = v12 + 128;
          v240 = v1263(&__src);
        }
        v242 = JSC::ErrorInstance::create(v241, v240, v1382, 0, 0, 0, 2, 1);
        v249 = (JSC::Exception *)v242;
        if ((v242 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v242 & 0xFFFFFFFE) + 0x4C)))
        {
          v249 = (JSC::Exception *)JSC::Exception::create(v118, (JSC::VM *)v242, 0, v243, v244, v245, v246, v247);
        }
        JSC::VM::throwException((JSC::VM *)v118, (JSC::JSGlobalObject *)v12, v249, v248, v243, v244, v245, v246, v247);
        v250 = v1382[0];
        v1382[0] = 0;
        if (v250)
        {
          if (*(_DWORD *)v250 == 2)
          {
            WTF::StringImpl::~StringImpl(v250, v26, (uint64_t)v27, v28, v29, v30, v31, v32);
            WTF::fastFree(v324, v325, v326, v327, v328, v329, v330, v331);
          }
          else
          {
            *(_DWORD *)v250 -= 2;
          }
        }
      }
      v121 = 0;
LABEL_160:
      v115 = (uint64_t)v1359;
      v1359 = 0;
      if (v115)
      {
        if (*(_DWORD *)v115 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v115, v26, (uint64_t)v27, v28, v29, v30, v31, v32);
          WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
        }
        else
        {
          *(_DWORD *)v115 -= 2;
        }
      }
      goto LABEL_163;
    }
    *v132 += 2;
    goto LABEL_141;
  }
  v121 = 0;
LABEL_164:
  if (*((_DWORD *)v116 + 20))
  {
    v507 = *((_DWORD *)v116 + 20);
    if ((v507 & 0x27) != 0 && (v507 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v116 + 64), 7u, (uint64_t)v27, v28, v29, v30, v31, v32);
    if (*((_QWORD *)v116 + 2))
      goto LABEL_199;
  }
  if (v1345 == 2)
  {
    v138 = "h11";
    switch(v121)
    {
      case 0:
        goto LABEL_186;
      case 1:
        goto LABEL_175;
      case 2:
        v138 = "h12";
        goto LABEL_175;
      case 3:
        v138 = "h23";
        goto LABEL_175;
      case 4:
        v138 = "h24";
LABEL_175:
        v115 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v115 = 0x300000002;
        *(_QWORD *)(v115 + 8) = v138;
        *(_DWORD *)(v115 + 16) = 4;
        break;
      default:
        v115 = 0;
        break;
    }
    if (v1371)
    {
      v139 = v1370;
      v1370 = (WTF::StringImpl *)v115;
      if (!v139)
        goto LABEL_186;
      if (*(_DWORD *)v139 != 2)
      {
        *(_DWORD *)v139 -= 2;
        goto LABEL_186;
      }
      v115 = (uint64_t)v139;
      goto LABEL_185;
    }
    v1370 = (WTF::StringImpl *)v115;
LABEL_181:
    v1371 = 1;
    goto LABEL_186;
  }
  if (!v1371)
  {
    v1370 = 0;
    goto LABEL_181;
  }
  v115 = (uint64_t)v1370;
  v1370 = 0;
  if (!v115)
    goto LABEL_186;
  if (*(_DWORD *)v115 != 2)
  {
    *(_DWORD *)v115 -= 2;
    goto LABEL_186;
  }
LABEL_185:
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v115, v26, (uint64_t)v27, v28, v29, v30, v31, v32);
  WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
LABEL_186:
  v156 = JSC::intlAvailableLocales((JSC *)v115);
  LOWORD(v1386[0]) = 512;
  BYTE2(v1386[0]) = 5;
  JSC::resolveLocale((JSC *)v12, (const WTF::StringImpl *)v156, (uint64_t)&v1378, v1348, (uint64_t)&v1366, (uint64_t)v1386, 3, (uint64_t)JSC::IntlDateTimeFormat::localeData, (uint64_t)&v1359);
  v164 = v1359;
  if (v1359)
    *(_DWORD *)v1359 += 2;
  v165 = (WTF::StringImpl *)a1[5];
  a1[5] = v164;
  if (v165)
  {
    if (*(_DWORD *)v165 == 2)
    {
      WTF::StringImpl::~StringImpl(v165, v157, v158, v159, v160, v161, v162, v163);
      WTF::fastFree(v211, v212, v213, v214, v215, v216, v217, v218);
      v164 = (WTF::StringImpl *)a1[5];
      if (!v164)
        goto LABEL_192;
      goto LABEL_221;
    }
    *(_DWORD *)v165 -= 2;
  }
  if (!v164)
  {
LABEL_192:
    JSC::throwTypeError(v12, &v1381, (uint64_t)"failed to initialize DateTimeFormat due to invalid locale", 58);
    goto LABEL_193;
  }
LABEL_221:
  if (!*((_DWORD *)v164 + 1))
    goto LABEL_192;
  v1344 = v24;
  v219 = v1361;
  if (v1361)
    *(_DWORD *)v1361 += 2;
  if (WTF::equalInternal<unsigned char>((uint64_t)v219, (unint64_t)"gregorian", 9))
  {
    v220 = "gregory";
  }
  else
  {
    if (!WTF::equalInternal<unsigned char>((uint64_t)v219, (unint64_t)"ethiopic-amete-alem", 19))
    {
      v238 = (WTF::StringImpl **)(a1 + 7);
      v251 = (WTF::StringImpl *)a1[7];
      a1[7] = v219;
      if (!v251)
        goto LABEL_250;
      if (*(_DWORD *)v251 != 2)
      {
        *(_DWORD *)v251 -= 2;
        goto LABEL_250;
      }
      goto LABEL_249;
    }
    v220 = "ethioaa";
  }
  v236 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v236 = 0x700000002;
  *(_QWORD *)(v236 + 8) = v220;
  *(_DWORD *)(v236 + 16) = 4;
  v238 = (WTF::StringImpl **)(a1 + 7);
  v237 = (WTF::StringImpl *)a1[7];
  a1[7] = v236;
  if (!v237)
    goto LABEL_235;
  if (*(_DWORD *)v237 != 2)
  {
    *(_DWORD *)v237 -= 2;
LABEL_235:
    if (!v219)
      goto LABEL_250;
    goto LABEL_236;
  }
  WTF::StringImpl::~StringImpl(v237, v229, v230, v231, v232, v233, v234, v235);
  WTF::fastFree(v315, v316, v317, v318, v319, v320, v321, v322);
  if (v219)
  {
LABEL_236:
    if (*(_DWORD *)v219 != 2)
    {
      *(_DWORD *)v219 -= 2;
      goto LABEL_250;
    }
    v251 = v219;
LABEL_249:
    WTF::StringImpl::~StringImpl(v251, v229, v230, v231, v232, v233, v234, v235);
    WTF::fastFree(v252, v253, v254, v255, v256, v257, v258, v259);
  }
LABEL_250:
  if (WTF::equalInternal<unsigned char>(v1362, (unint64_t)"h11", 3))
  {
    v268 = 1;
  }
  else if (WTF::equalInternal<unsigned char>(v1362, (unint64_t)"h12", 3))
  {
    v268 = 2;
  }
  else
  {
    v1326 = 3;
    if (WTF::equalInternal<unsigned char>(v1362, (unint64_t)"h23", 3))
      goto LABEL_259;
    if (WTF::equalInternal<unsigned char>(v1362, (unint64_t)"h24", 3))
      v268 = 4;
    else
      v268 = 0;
  }
  v1326 = v268;
LABEL_259:
  v269 = v1363;
  if (v1363)
    *v1363 += 2;
  v270 = (WTF::StringImpl *)a1[8];
  a1[8] = v269;
  if (v270)
  {
    if (*(_DWORD *)v270 == 2)
    {
      WTF::StringImpl::~StringImpl(v270, v260, v261, v262, v263, v264, v265, v266);
      WTF::fastFree(v299, v300, v301, v302, v303, v304, v305, v306);
    }
    else
    {
      *(_DWORD *)v270 -= 2;
    }
  }
  v271 = v1360;
  if (v1360)
    *(_DWORD *)v1360 += 2;
  v272 = (WTF::StringImpl *)a1[6];
  a1[6] = v271;
  if (v272)
  {
    if (*(_DWORD *)v272 == 2)
    {
      WTF::StringImpl::~StringImpl(v272, v260, v261, v262, v263, v264, v265, v266);
      WTF::fastFree(v307, v308, v309, v310, v311, v312, v313, v314);
      v271 = (WTF::StringImpl *)a1[6];
    }
    else
    {
      *(_DWORD *)v272 -= 2;
    }
  }
  v1339 = v10;
  if (v271)
    *(_DWORD *)v271 += 2;
  v1338 = v9;
  v273 = *v238;
  if (*v238)
    *(_DWORD *)v273 += 2;
  v274 = a1[8];
  if (v274)
    *(_DWORD *)v274 += 2;
  if (v271)
  {
    v275 = *((_DWORD *)v271 + 1);
    if (v273)
    {
LABEL_277:
      v276 = *((_DWORD *)v273 + 1);
      goto LABEL_278;
    }
  }
  else
  {
    v275 = 0;
    if (v273)
      goto LABEL_277;
  }
  v276 = 0;
LABEL_278:
  v1349 = a1;
  if (v274)
  {
    v277 = *(_DWORD *)(v274 + 4);
    if (v277 < 0)
      goto LABEL_1899;
  }
  else
  {
    v277 = 0;
  }
  v278 = __OFADD__(v277, 4);
  v279 = v277 + 4;
  v280 = v278;
  if (v276 < 0
    || (v280 & 1) != 0
    || (v278 = __OFADD__(v276, v279), v281 = v276 + v279, v278)
    || ((v278 = __OFADD__(v281, 6), v282 = v281 + 6, !v278) ? (v283 = 0) : (v283 = 1),
        v275 < 0 || (v283 & 1) != 0 || (v284 = v275 + v282, __OFADD__(v275, v282))))
  {
LABEL_1899:
    __break(0xC471u);
    JUMPOUT(0x197E12D20);
  }
  if (v271 && (*((_BYTE *)v271 + 16) & 4) == 0)
  {
    if (v284)
    {
      v285 = v284;
LABEL_309:
      if (v284 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v285 + 20), v1386);
        v290 = (int *)v1386[0];
        if (v1386[0])
        {
          v294 = (_WORD *)((char *)v1386[0] + 20);
          *(_DWORD *)v1386[0] = 2;
          v290[1] = v284;
          *((_QWORD *)v290 + 1) = v290 + 5;
          v290[4] = 0;
          if (v271)
          {
            v295 = (int8x16_t *)*((_QWORD *)v271 + 1);
            v296 = *((unsigned int *)v271 + 1);
            if ((*((_BYTE *)v271 + 16) & 4) != 0)
            {
              v297 = (char *)&v294[v296];
              if (v296 >= 0x40)
              {
                v298 = (char *)&v294[v296 & 0xFFFFFFC0];
                v332 = 0uLL;
                v333 = (char *)(v290 + 5);
                do
                {
                  v1403.val[0] = *v295;
                  v334 = v295[1];
                  v1407.val[0] = v295[2];
                  v335 = v295[3];
                  v295 += 4;
                  v336 = v335;
                  v1407.val[1] = 0uLL;
                  v1411.val[0] = v334;
                  v1403.val[1] = 0uLL;
                  v337 = v333;
                  vst2q_s8(v337, v1403);
                  v337 += 32;
                  v1411.val[1] = 0uLL;
                  vst2q_s8(v337, v1411);
                  v338 = v333 + 64;
                  vst2q_s8(v338, v1407);
                  v339 = v333 + 96;
                  vst2q_s8(v339, *(int8x16x2_t *)(&v332 - 1));
                  v333 += 128;
                }
                while (v333 != v298);
              }
              else
              {
                v298 = (char *)(v290 + 5);
              }
              while (v298 != v297)
              {
                v340 = v295->u8[0];
                v295 = (int8x16_t *)((char *)v295 + 1);
                *(_WORD *)v298 = v340;
                v298 += 2;
              }
            }
            else if ((_DWORD)v296 == 1)
            {
              *v294 = v295->i16[0];
            }
            else if ((_DWORD)v296)
            {
              memcpy(v290 + 5, v295, 2 * v296);
            }
            v341 = *((unsigned int *)v271 + 1);
          }
          else
          {
            v341 = 0;
          }
          v342 = &v294[v341];
          *(_QWORD *)v342 = 0x63002D0075002DLL;
          *((_DWORD *)v342 + 2) = 2949217;
          WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)v342 + 12, (uint64_t)v273, (int8x16_t *)"-nu-", 4, v274);
          goto LABEL_334;
        }
      }
      goto LABEL_1899;
    }
LABEL_1808:
    v290 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_334;
  }
  if (!v273)
  {
    if (!v274)
    {
      if (!v284)
        goto LABEL_1808;
      v288 = 0;
      v289 = 0;
      v285 = v284;
      goto LABEL_301;
    }
LABEL_299:
    v285 = v284;
    v287 = v284 == 0;
    if ((*(_BYTE *)(v274 + 16) & 4) != 0)
      goto LABEL_300;
LABEL_308:
    if (!v287)
      goto LABEL_309;
    goto LABEL_1808;
  }
  v286 = *((_DWORD *)v273 + 4);
  if (v274 && (v286 & 4) != 0)
    goto LABEL_299;
  v285 = v284;
  v287 = v284 == 0;
  if ((v286 & 4) == 0)
    goto LABEL_308;
LABEL_300:
  v288 = v273;
  v289 = (WTF::StringImpl *)v274;
  if (v287)
    goto LABEL_1808;
LABEL_301:
  v1336 = (uint64_t)v288;
  v1340 = v289;
  if ((v284 & 0x80000000) != 0)
    goto LABEL_1899;
  WTF::tryFastCompactMalloc((WTF *)(v285 + 20), v1386);
  v290 = (int *)v1386[0];
  if (!v1386[0])
    goto LABEL_1899;
  v291 = (char *)v1386[0] + 20;
  *(_DWORD *)v1386[0] = 2;
  v290[1] = v284;
  *((_QWORD *)v290 + 1) = v290 + 5;
  v290[4] = 4;
  if (v271)
  {
    v292 = (_BYTE *)*((_QWORD *)v271 + 1);
    v293 = *((unsigned int *)v271 + 1);
    if ((*((_BYTE *)v271 + 16) & 4) != 0)
    {
      if ((_DWORD)v293 == 1)
      {
        *v291 = *v292;
      }
      else if ((_DWORD)v293)
      {
        memcpy(v290 + 5, v292, v293);
      }
    }
    else
    {
      v1319 = (unsigned __int128 *)&v291[v293];
      if (v293 < 0x10)
      {
        v1320 = (unsigned __int128 *)(v290 + 5);
      }
      else
      {
        v1320 = (unsigned __int128 *)&v291[v293 & 0xFFFFFFF0];
        v1321 = (unsigned __int128 *)(v290 + 5);
        do
        {
          v1322 = (unsigned __int128)vld2q_s8(v292);
          v292 += 32;
          *v1321++ = v1322;
        }
        while (v1321 != v1320);
      }
      for (; v1320 != v1319; v1320 = (unsigned __int128 *)((char *)v1320 + 1))
      {
        v1323 = *v292;
        v292 += 2;
        *(_BYTE *)v1320 = v1323;
      }
    }
    v323 = *((unsigned int *)v271 + 1);
  }
  else
  {
    v323 = 0;
  }
  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v291[v323], "-u-ca-", 6u, v1336, "-nu-", 4u, (uint64_t)v1340);
LABEL_334:
  v1386[0] = (WTF *)v290;
  WTF::String::utf8((uint64_t *)v1386, 0, v262, v263, v264, v265, v266, &v1358, v267);
  v1386[0] = 0;
  if (*v290 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v290, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
    WTF::fastFree(v377, v378, v379, v380, v381, v382, v383, v384);
  }
  else
  {
    *v290 -= 2;
  }
  v343 = v1349;
  if (!v274)
  {
LABEL_339:
    if (v273)
      goto LABEL_340;
    goto LABEL_342;
  }
  if (*(_DWORD *)v274 != 2)
  {
    *(_DWORD *)v274 -= 2;
    goto LABEL_339;
  }
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v274, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
  WTF::fastFree(v385, v386, v387, v388, v389, v390, v391, v392);
  if (v273)
  {
LABEL_340:
    if (*(_DWORD *)v273 == 2)
    {
      WTF::StringImpl::~StringImpl(v273, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
      WTF::fastFree(v393, v394, v395, v396, v397, v398, v399, v400);
    }
    else
    {
      *(_DWORD *)v273 -= 2;
    }
  }
LABEL_342:
  v344 = (uint64_t **)(v14 + 90592);
  if (v271)
  {
    if (*(_DWORD *)v271 == 2)
    {
      WTF::StringImpl::~StringImpl(v271, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
      WTF::fastFree(v401, v402, v403, v404, v405, v406, v407, v408);
    }
    else
    {
      *(_DWORD *)v271 -= 2;
    }
  }
  v1357 = 10;
  v1324 = v14 + 90592;
  if (!v11)
    goto LABEL_348;
  v345 = JSC::JSObject::get((unsigned int *)v11, v12, *(_QWORD *)(*(_QWORD *)v1344 + 2448), v168, v169, v170, v171, v172);
  v1357 = v345;
  v347 = v1381;
  if (*((_DWORD *)v1381 + 20))
  {
    v537 = *((_DWORD *)v1381 + 20);
    if ((v537 & 0x27) != 0 && (v537 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1381 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
    if (*((_QWORD *)v347 + 2))
      goto LABEL_1229;
    v345 = v1357;
    v343 = v1349;
    v344 = (uint64_t **)(v14 + 90592);
  }
  if (v345 == 10)
  {
LABEL_348:
    v348 = *v344;
    if (!*v344)
    {
      JSC::DateCache::timeZoneCacheSlow(v344, (uint64_t)v166, (uint64_t)v167, v168, v169, v170, v171, v172);
      v348 = *v344;
    }
    v349 = (int *)v348[1];
    if (v349)
    {
      v350 = 0;
      v351 = *v349 + 2;
      *v349 = v351;
      v352 = (WTF::StringImpl **)(v343 + 9);
LABEL_352:
      v353 = 0;
      *v349 = v351 + 2;
      goto LABEL_353;
    }
    v350 = 0;
    v352 = (WTF::StringImpl **)(v343 + 9);
    goto LABEL_557;
  }
  if ((v345 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v345 + 5) == 2)
  {
    v356 = *(int **)(v345 + 8);
    if ((v356 & 1) != 0)
    {
      v356 = *JSC::JSRopeString::resolveRope(v345, (JSC::JSGlobalObject *)v12, (uint64_t)v167, v168, v346, v169, v170, v171, v172);
      if (!v356)
        goto LABEL_364;
    }
    else if (!v356)
    {
LABEL_364:
      v1385 = (WTF::StringImpl *)v356;
      goto LABEL_365;
    }
    *v356 += 2;
    goto LABEL_364;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1357, (JSC::JSGlobalObject *)v12, v167, v168, v169, v170, v171, v172, (int **)&v1385);
LABEL_365:
  if (*((_DWORD *)v347 + 20))
  {
    v1273 = *((_DWORD *)v347 + 20);
    if ((v1273 & 0x27) != 0 && (v1273 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v347 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
    v343 = v1349;
    if (*((_QWORD *)v347 + 2))
      goto LABEL_485;
  }
  v357 = v1385;
  if (v1385)
  {
    v358 = (unsigned __int8 *)*((_QWORD *)v1385 + 1);
    v357 = *((_DWORD *)v1385 + 1);
    v359 = ((unint64_t)*((unsigned int *)v1385 + 4) >> 2) & 1;
  }
  else
  {
    v358 = 0;
    v359 = 1;
  }
  v360 = JSC::ISO8601::parseUTCOffsetInMinutes(v358, v357 | (v359 << 32));
  if (v361)
  {
    if (v360 >= 0)
      v362 = v360;
    else
      v362 = -v360;
    v363 = v362 / 0x3C;
    v1352 = (WTF *)0x200000030;
    v1353 = v362 / 0x3C;
    v364 = v362 % 0x3C;
    v1382[0] = (WTF::StringImpl *)0x200000030;
    v1382[1] = (WTF::StringImpl *)(v362 % 0x3C);
    if (v360 >= 0)
      v365 = 43;
    else
      v365 = 45;
    v1384 = v365;
    v1386[0] = (WTF *)&v1352;
    v1386[1] = (WTF *)(v362 / 0x3C);
    v1383 = 58;
    __src.i64[0] = (uint64_t)v1382;
    __src.i64[1] = v362 % 0x3C;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<long long>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<long long>,void>>(&v1384, (uint64_t *)v1386, &v1383, __src.i64, &v1356);
    v1341 = v1356;
    if (!v1356)
    {
      __break(0xC471u);
      JUMPOUT(0x197E12E0CLL);
    }
    v366 = 0;
    v367 = v363;
    do
    {
      ++v366;
      v42 = v367 > 9;
      v367 /= 0xAuLL;
    }
    while (v42);
    v368 = 0;
    v369 = v364;
    do
    {
      ++v368;
      v42 = v369 > 9;
      v369 /= 0xAuLL;
    }
    while (v42);
    if (v366 <= 2)
      v366 = 2;
    if (v368 <= 2)
      v368 = 2;
    if (((v368 | v366) & 0x80000000) == 0)
    {
      v278 = __OFADD__(v366, v368);
      v370 = v366 + v368;
      if (!v278)
      {
        v278 = __OFADD__(v370, 1);
        v371 = v370 + 1;
        if (!v278)
        {
          v372 = v371 + 3;
          if (!__OFADD__(v371, 3))
          {
            if (v371 == -3)
            {
              v350 = &WTF::StringImpl::s_emptyAtomString;
              WTF::StringImpl::s_emptyAtomString += 2;
LABEL_474:
              v470 = 1;
              v349 = (int *)v1341;
              goto LABEL_502;
            }
            if ((v372 & 0x80000000) == 0)
            {
              WTF::tryFastCompactMalloc((WTF *)(v372 + 20), v1386);
              v350 = (int *)v1386[0];
              if (v1386[0])
              {
                v373 = 0;
                *(_DWORD *)v1386[0] = 2;
                v350[1] = v372;
                *((_WORD *)v350 + 10) = 19783;
                *((_QWORD *)v350 + 1) = v350 + 5;
                v350[4] = 4;
                *((_BYTE *)v350 + 22) = 84;
                *((_BYTE *)v350 + 23) = v365;
                v374 = v363;
                do
                {
                  --v373;
                  v42 = v374 > 9;
                  v374 /= 0xAuLL;
                }
                while (v42);
                v375 = v350 + 6;
                if (-v373 != 1 && v373 != 0)
                {
                  v376 = 0;
                }
                else
                {
                  v376 = (v373 + 2);
                  memset(v350 + 6, 48, v376);
                }
                v462 = 0;
                v463 = v363;
                do
                {
                  *((_BYTE *)&v1387 + v462-- + 8) = (v463 % 0xA) | 0x30;
                  v42 = v463 > 9;
                  v463 /= 0xAuLL;
                }
                while (v42);
                if (v462 + 26 <= 25)
                  memcpy((char *)v375 + v376, (char *)&v1387 + v462 + 9, -v462);
                LODWORD(v464) = 0;
                do
                {
                  LODWORD(v464) = v464 + 1;
                  v42 = v363 > 9;
                  v363 /= 0xAuLL;
                }
                while (v42);
                v465 = 0;
                if (v464 <= 2)
                  v464 = 2;
                else
                  v464 = v464;
                v466 = v364;
                do
                {
                  --v465;
                  v42 = v466 > 9;
                  v466 /= 0xAuLL;
                }
                while (v42);
                v467 = (char *)v375 + v464;
                if (-v465 != 1 && v465 != 0)
                {
                  v468 = 0;
                }
                else
                {
                  v468 = (v465 + 2);
                  memset(v467, 48, v468);
                }
                v469 = 0;
                do
                {
                  *((_BYTE *)&v1387 + v469-- + 8) = (v364 % 0xA) | 0x30;
                  v42 = v364 > 9;
                  v364 /= 0xAuLL;
                }
                while (v42);
                if (v469 + 26 <= 25)
                  memcpy(&v467[v468], (char *)&v1387 + v469 + 9, -v469);
                goto LABEL_474;
              }
            }
          }
        }
      }
    }
    __break(0xC471u);
    JUMPOUT(0x197E12D74);
  }
  v1343 = v347;
  LODWORD(v1352) = 0;
  ucal_openTimeZones();
  do
  {
    while (1)
    {
      do
      {
        LODWORD(v1352) = 0;
        LODWORD(v1382[0]) = 0;
        v429 = uenum_unext();
        if (!v429)
        {
          uenum_close();
          v1386[0] = (WTF *)"invalid time zone: ";
          v1386[1] = (WTF *)20;
          WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)v1386, (uint64_t *)&v1385, (int **)&__src);
          v343 = v1349;
          v471 = v1343;
          if (!__src.i64[0])
          {
            v479 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v479 = 0x1100000002;
            *(_QWORD *)(v479 + 8) = "invalid time zone";
            *(_DWORD *)(v479 + 16) = 4;
            v480 = (WTF::StringImpl *)__src.i64[0];
            __src.i64[0] = v479;
            if (v480)
            {
              if (*(_DWORD *)v480 == 2)
              {
                WTF::StringImpl::~StringImpl(v480, v472, v473, v474, v475, v476, v477, v478);
                WTF::fastFree(v519, v520, v521, v522, v523, v524, v525, v526);
              }
              else
              {
                *(_DWORD *)v480 -= 2;
              }
            }
          }
          v481 = *(_QWORD *)(v12 + 128);
          v482 = *(JSC::Heap ***)(v12 + 56);
          if ((v481 & 1) != 0)
          {
            v1294 = *(uint64_t (**)(WTF **))(v481 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v12 & 8) != 0)
              v1295 = (WTF **)(v12 - 16);
            else
              v1295 = (WTF **)(v12 & 0xFFFFFFFFFFFFC000 | 8);
            v1386[0] = *v1295;
            v1386[1] = (WTF *)v12;
            *(_QWORD *)&v1387 = v12 + 128;
            v481 = v1294(v1386);
            v343 = v1349;
            v471 = v1343;
          }
          v483 = JSC::ErrorInstance::create(v482, v481, (WTF::StringImpl **)&__src, 0, 0, 0, 2, 1);
          v490 = (JSC::Exception *)v483;
          if ((v483 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v483 & 0xFFFFFFFE) + 0x4C)))
          {
            v490 = (JSC::Exception *)JSC::Exception::create((uint64_t)v471, (JSC::VM *)v483, 0, v484, v485, v486, v487, v488);
          }
          JSC::VM::throwException(v471, (JSC::JSGlobalObject *)v12, v490, v489, v484, v485, v486, v487, v488);
          v491 = (WTF::StringImpl *)__src.i64[0];
          __src.i64[0] = 0;
          if (v491)
          {
            if (*(_DWORD *)v491 == 2)
            {
              WTF::StringImpl::~StringImpl(v491, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
              WTF::fastFree(v508, v509, v510, v511, v512, v513, v514, v515);
            }
            else
            {
              *(_DWORD *)v491 -= 2;
            }
          }
LABEL_485:
          v350 = 0;
          v349 = 0;
          v470 = 0;
          goto LABEL_502;
        }
        v430 = (unint64_t)v1385;
        if (v1385)
        {
          v431 = (WTF *)*((_QWORD *)v1385 + 1);
          v430 = *((unsigned int *)v1385 + 1);
          v432 = ((unint64_t)*((unsigned int *)v1385 + 4) >> 2) & 1;
        }
        else
        {
          v431 = 0;
          v432 = 1;
        }
        v14 = v14 & 0xFFFFFF0000000000 | LODWORD(v1382[0]);
        v1386[0] = v431;
        v1386[1] = (WTF *)(v430 | (v432 << 32));
        __src.i64[0] = v429;
        __src.i64[1] = v14;
      }
      while (!WTF::equalIgnoringASCIICaseCommon<WTF::StringView,WTF::StringView>((unsigned __int16 **)v1386, (unsigned __int8 **)&__src));
      v1386[0] = (WTF *)&v1387;
      v1386[1] = (WTF *)0x2000000020;
      __src.i32[0] = 0;
      CanonicalTimeZoneID = ucal_getCanonicalTimeZoneID();
      v441 = CanonicalTimeZoneID;
      if (__src.i32[0] <= 0)
      {
        HIDWORD(v1386[1]) = CanonicalTimeZoneID;
      }
      else
      {
        if (__src.i32[0] == 15)
        {
          v442 = (unsigned __int8 *)v11;
          v443 = v12;
          __src.i32[0] = 0;
          if (LODWORD(v1386[1]) < (unint64_t)CanonicalTimeZoneID)
          {
            v449 = LODWORD(v1386[1]) + ((unint64_t)LODWORD(v1386[1]) >> 2);
            if (v449 >= 0x10)
              v450 = v449 + 1;
            else
              v450 = 16;
            if (v450 <= CanonicalTimeZoneID)
              v451 = CanonicalTimeZoneID;
            else
              v451 = v450;
            v452 = v1386[0];
            v453 = HIDWORD(v1386[1]);
            if (v451 < 0x21)
            {
              v1386[0] = (WTF *)&v1387;
              LODWORD(v1386[1]) = 32;
              v454 = (WTF *)&v1387;
            }
            else
            {
              if (v451 >> 31)
              {
                __break(0xC471u);
                JUMPOUT(0x197E12E64);
              }
              v454 = (WTF *)WTF::fastMalloc((WTF *)(2 * v451));
              LODWORD(v1386[1]) = v451;
              v1386[0] = v454;
            }
            memcpy(v454, v452, 2 * v453);
            if (&v1387 != (__int128 *)v452 && v452)
            {
              if (v1386[0] == v452)
              {
                v1386[0] = 0;
                LODWORD(v1386[1]) = 0;
              }
              WTF::fastFree((unint64_t)v452, v455, v456, v457, v458, v459, v460, v461);
            }
          }
          HIDWORD(v1386[1]) = v441;
          ucal_getCanonicalTimeZoneID();
          v12 = v443;
          v11 = (unint64_t)v442;
        }
        v441 = HIDWORD(v1386[1]);
      }
      v444 = v1386[0];
      if (v1386[0])
      {
        if (v441)
        {
          if (v441 > 0x7FFFFFEF)
          {
            __break(0xC471u);
            JUMPOUT(0x197E12DB4);
          }
          v445 = WTF::fastCompactMalloc((WTF *)(2 * v441 + 20));
          v446 = (_WORD *)(v445 + 20);
          *(_DWORD *)v445 = 2;
          *(_DWORD *)(v445 + 4) = v441;
          *(_QWORD *)(v445 + 8) = v445 + 20;
          v447 = (int *)v445;
          *(_DWORD *)(v445 + 16) = 0;
          if (v441 == 1)
            *v446 = *(_WORD *)v444;
          else
            memcpy(v446, v444, 2 * v441);
          v349 = v447;
        }
        else
        {
          v349 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
        }
      }
      else
      {
        v349 = 0;
      }
      v448 = v1386[0];
      if (&v1387 != (__int128 *)v1386[0])
      {
        if (v1386[0])
          break;
      }
      if (v349)
        goto LABEL_486;
    }
    v1386[0] = 0;
    LODWORD(v1386[1]) = 0;
    WTF::fastFree((unint64_t)v448, v434, v435, v436, v437, v438, v439, v440);
  }
  while (!v349);
LABEL_486:
  uenum_close();
  v492 = v349[4];
  v493 = *((_QWORD *)v349 + 1);
  v494 = v349[1];
  v495 = v494 != 7;
  if ((char *)v493 == "Etc/UTC" || v494 != 7)
  {
    if ((char *)v493 == "Etc/UTC")
    {
      v496 = v349[1];
      v528 = v494 == 7;
LABEL_544:
      v343 = v1349;
      if (v528)
        goto LABEL_530;
LABEL_491:
      if ((char *)v493 == "Etc/GMT")
        v495 = 1;
      if (v495)
      {
        if ((char *)v493 == "Etc/GMT" && v494 == 7)
          goto LABEL_530;
      }
      else
      {
        if (!v496)
          goto LABEL_530;
        if ((v492 & 4) != 0)
        {
          if (*(_BYTE *)v493 == 69 && *(_DWORD *)(v493 + 1) == 1194287988 && *(_DWORD *)(v493 + 3) == 1414350639)
            goto LABEL_530;
        }
        else if (*(_WORD *)v493 == 69
               && *(_QWORD *)(v493 + 2) == 0x47002F00630074
               && *(_QWORD *)(v493 + 6) == 0x54004D0047002FLL)
        {
          goto LABEL_530;
        }
      }
      if ((char *)v493 == "GMT" || v496 != 3)
      {
        if ((char *)v493 == "GMT" && v496 == 3)
          goto LABEL_530;
      }
      else if ((v492 & 4) != 0)
      {
        if (*(_BYTE *)v493 == 71 && *(_WORD *)(v493 + 1) == 21581)
          goto LABEL_530;
      }
      else if (*(_WORD *)v493 == 71 && *(_DWORD *)(v493 + 2) == 5505101)
      {
        goto LABEL_530;
      }
      v350 = 0;
      v470 = 1;
      goto LABEL_502;
    }
    v496 = v349[1];
LABEL_1966:
    v343 = v1349;
    goto LABEL_491;
  }
  v343 = v1349;
  if ((v492 & 4) == 0)
  {
    if (*(_WORD *)v493 != 69)
      goto LABEL_490;
    v496 = 7;
    if (*(_QWORD *)(v493 + 2) == 0x55002F00630074)
    {
      v528 = *(_QWORD *)(v493 + 6) == 0x4300540055002FLL;
      goto LABEL_544;
    }
    goto LABEL_1966;
  }
  if (*(_BYTE *)v493 != 69 || *(_DWORD *)(v493 + 1) != 1429169012 || *(_DWORD *)(v493 + 3) != 1129600303)
  {
LABEL_490:
    v496 = 7;
    goto LABEL_491;
  }
LABEL_530:
  v516 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v516 = 0x300000002;
  *(_QWORD *)(v516 + 8) = "UTC";
  *(_DWORD *)(v516 + 16) = 4;
  if (*v349 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v349, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
    WTF::fastFree(v529, v530, v531, v532, v533, v534, v535, v536);
  }
  else
  {
    *v349 -= 2;
  }
  v350 = 0;
  v470 = 1;
  v349 = (int *)v516;
LABEL_502:
  v497 = v1385;
  v1385 = 0;
  if (!v497)
  {
LABEL_505:
    if ((v470 & 1) == 0)
      goto LABEL_509;
LABEL_506:
    v352 = (WTF::StringImpl **)(v343 + 9);
    if (v349)
    {
      v351 = *v349;
      goto LABEL_352;
    }
LABEL_557:
    v353 = 1;
LABEL_353:
    v354 = *v352;
    *v352 = (WTF::StringImpl *)v349;
    if (v354)
    {
      if (*(_DWORD *)v354 == 2)
      {
        WTF::StringImpl::~StringImpl(v354, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
        WTF::fastFree(v409, v410, v411, v412, v413, v414, v415, v416);
        if (v350)
        {
LABEL_357:
          v355 = (WTF::StringImpl *)v343[10];
          v343[10] = v350;
          if (!v355)
            goto LABEL_406;
          goto LABEL_404;
        }
LABEL_401:
        if ((v353 & 1) == 0)
          *v349 += 2;
        v355 = (WTF::StringImpl *)v343[10];
        v343[10] = v349;
        if (!v355)
        {
LABEL_406:
          v167 = *(const WTF::String **)(*(_QWORD *)v1344 + 2632);
          v1386[0] = (WTF *)"narrow";
          v1386[1] = (WTF *)7;
          LOBYTE(v1387) = 1;
          *((_QWORD *)&v1387 + 1) = "short";
          v1388 = 6;
          v1389 = 2;
          v1390 = "long";
          v1391 = 5;
          v1392 = 3;
          v1342 = (WTF::StringImpl *)v349;
          if (!v11)
          {
            v1334 = 0;
            goto LABEL_587;
          }
          v417 = *(_QWORD *)(v12 + 56);
          v418 = (WTF *)JSC::JSObject::get((unsigned int *)v11, v12, (unint64_t)v167, v168, v169, v170, v171, v172);
          v420 = (unint64_t)v418;
          v1352 = v418;
          if (*(_DWORD *)(v417 + 80))
          {
            v538 = *(_DWORD *)(v417 + 80);
            if ((v538 & 0x27) != 0 && (v538 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v417 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
            v1334 = 0;
            if (*(_QWORD *)(v417 + 16) || v420 == 10)
            {
LABEL_587:
              v546 = v1381;
              if (*((_DWORD *)v1381 + 20))
              {
                v580 = *((_DWORD *)v1381 + 20);
                if ((v580 & 0x27) != 0 && (v580 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1381 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                if (*((_QWORD *)v546 + 2))
                  goto LABEL_1226;
              }
              v547 = v1344;
              v167 = *(const WTF::String **)(*(_QWORD *)v1344 + 1224);
              v1386[0] = (WTF *)"narrow";
              v1386[1] = (WTF *)7;
              LOBYTE(v1387) = 1;
              *((_QWORD *)&v1387 + 1) = "short";
              v1388 = 6;
              v1389 = 2;
              v1390 = "long";
              v1391 = 5;
              v1392 = 3;
              if (!v11)
              {
                v1333 = 0;
LABEL_635:
                if (*((_DWORD *)v546 + 20))
                {
                  v621 = *((_DWORD *)v546 + 20);
                  if ((v621 & 0x27) != 0 && (v621 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v546 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                  v547 = v1344;
                  if (*((_QWORD *)v546 + 2))
                    goto LABEL_1647;
                }
                v167 = *(const WTF::String **)(*(_QWORD *)v547 + 2664);
                v1386[0] = (WTF *)"2-digit";
                v1386[1] = (WTF *)8;
                LOBYTE(v1387) = 1;
                *((_QWORD *)&v1387 + 1) = "numeric";
                v1388 = 8;
                v1389 = 2;
                if (!v11)
                {
                  v1332 = 0;
                  goto LABEL_685;
                }
                v589 = *(_QWORD *)(v12 + 56);
                v590 = (WTF *)JSC::JSObject::get((unsigned int *)v11, v12, (unint64_t)v167, v168, v169, v170, v171, v172);
                v592 = (unint64_t)v590;
                v1352 = v590;
                if (*(_DWORD *)(v589 + 80))
                {
                  v622 = *(_DWORD *)(v589 + 80);
                  if ((v622 & 0x27) != 0 && (v622 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v589 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                  v1332 = 0;
                  if (*(_QWORD *)(v589 + 16) || v592 == 10)
                  {
LABEL_685:
                    v640 = v1381;
                    if (*((_DWORD *)v1381 + 20))
                    {
                      v661 = *((_DWORD *)v1381 + 20);
                      if ((v661 & 0x27) != 0 && (v661 & 0x20) == 0)
                        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1381 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                      if (*((_QWORD *)v640 + 2))
                        goto LABEL_1647;
                    }
                    v167 = *(const WTF::String **)(*(_QWORD *)v1344 + 1928);
                    v1386[0] = (WTF *)"2-digit";
                    v1386[1] = (WTF *)8;
                    LOBYTE(v1387) = 1;
                    *((_QWORD *)&v1387 + 1) = "numeric";
                    v1388 = 8;
                    v1389 = 2;
                    v1390 = "narrow";
                    v1391 = 7;
                    v1392 = 3;
                    v1393 = "short";
                    v1394 = 6;
                    LOBYTE(v1395) = 4;
                    v1396 = "long";
                    v1397 = 5;
                    v1398 = 5;
                    if (!v11)
                    {
                      v1329 = 0;
LABEL_736:
                      if (*((_DWORD *)v640 + 20))
                      {
                        v703 = *((_DWORD *)v640 + 20);
                        if ((v703 & 0x27) != 0 && (v703 & 0x20) == 0)
                          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v640 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                        if (*((_QWORD *)v640 + 2))
                          goto LABEL_1647;
                      }
                      v167 = *(const WTF::String **)(*(_QWORD *)v1344 + 1112);
                      v1386[0] = (WTF *)"2-digit";
                      v1386[1] = (WTF *)8;
                      LOBYTE(v1387) = 1;
                      *((_QWORD *)&v1387 + 1) = "numeric";
                      v1388 = 8;
                      v1389 = 2;
                      if (!v11)
                      {
                        v1328 = 0;
                        goto LABEL_783;
                      }
                      v671 = *(_QWORD *)(v12 + 56);
                      v672 = (WTF *)JSC::JSObject::get((unsigned int *)v11, v12, (unint64_t)v167, v168, v169, v170, v171, v172);
                      v674 = (unint64_t)v672;
                      v1352 = v672;
                      if (*(_DWORD *)(v671 + 80))
                      {
                        v704 = *(_DWORD *)(v671 + 80);
                        if ((v704 & 0x27) != 0 && (v704 & 0x20) == 0)
                          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v671 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                        v1328 = 0;
                        if (*(_QWORD *)(v671 + 16) || v674 == 10)
                        {
LABEL_783:
                          v722 = v1381;
                          if (*((_DWORD *)v1381 + 20))
                          {
                            v743 = *((_DWORD *)v1381 + 20);
                            if ((v743 & 0x27) != 0 && (v743 & 0x20) == 0)
                              JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1381 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                            if (*((_QWORD *)v722 + 2))
                              goto LABEL_1647;
                          }
                          v167 = *(const WTF::String **)(*(_QWORD *)v1344 + 1136);
                          v1386[0] = (WTF *)"narrow";
                          v1386[1] = (WTF *)7;
                          LOBYTE(v1387) = 1;
                          *((_QWORD *)&v1387 + 1) = "short";
                          v1388 = 6;
                          v1389 = 2;
                          v1390 = "long";
                          v1391 = 5;
                          v1392 = 3;
                          if (!v11)
                          {
                            v1337 = 0;
LABEL_825:
                            if (*((_DWORD *)v722 + 20))
                            {
                              v784 = *((_DWORD *)v722 + 20);
                              if ((v784 & 0x27) != 0 && (v784 & 0x20) == 0)
                                JSC::VMTraps::handleTraps((JSC::VM *)((char *)v722 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                              if (*((_QWORD *)v722 + 2))
                                goto LABEL_1647;
                            }
                            v167 = *(const WTF::String **)(*(_QWORD *)v1344 + 1488);
                            v1386[0] = (WTF *)"2-digit";
                            v1386[1] = (WTF *)8;
                            LOBYTE(v1387) = 1;
                            *((_QWORD *)&v1387 + 1) = "numeric";
                            v1388 = 8;
                            v1389 = 2;
                            if (!v11)
                              goto LABEL_829;
                            v752 = *(_QWORD *)(v12 + 56);
                            v753 = (WTF *)JSC::JSObject::get((unsigned int *)v11, v12, (unint64_t)v167, v168, v169, v170, v171, v172);
                            v755 = (unint64_t)v753;
                            v1352 = v753;
                            if (*(_DWORD *)(v752 + 80))
                            {
                              v785 = *(_DWORD *)(v752 + 80);
                              if ((v785 & 0x27) != 0 && (v785 & 0x20) == 0)
                                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v752 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                              v1331 = 0;
                              if (*(_QWORD *)(v752 + 16) || v755 == 10)
                              {
LABEL_874:
                                v803 = v1381;
                                if (*((_DWORD *)v1381 + 20))
                                {
                                  v824 = *((_DWORD *)v1381 + 20);
                                  if ((v824 & 0x27) != 0 && (v824 & 0x20) == 0)
                                    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1381 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                                  if (*((_QWORD *)v803 + 2))
                                    goto LABEL_1647;
                                }
                                v167 = *(const WTF::String **)(*(_QWORD *)v1344 + 1904);
                                v1386[0] = (WTF *)"2-digit";
                                v1386[1] = (WTF *)8;
                                LOBYTE(v1387) = 1;
                                *((_QWORD *)&v1387 + 1) = "numeric";
                                v1388 = 8;
                                v1389 = 2;
                                if (!v11)
                                {
                                  v1330 = 0;
LABEL_918:
                                  if (*((_DWORD *)v803 + 20))
                                  {
                                    v864 = *((_DWORD *)v803 + 20);
                                    if ((v864 & 0x27) != 0 && (v864 & 0x20) == 0)
                                      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v803 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                                    if (*((_QWORD *)v803 + 2))
                                      goto LABEL_1647;
                                  }
                                  v167 = *(const WTF::String **)(*(_QWORD *)v1344 + 2248);
                                  v1386[0] = (WTF *)"2-digit";
                                  v1386[1] = (WTF *)8;
                                  LOBYTE(v1387) = 1;
                                  *((_QWORD *)&v1387 + 1) = "numeric";
                                  v1388 = 8;
                                  v1389 = 2;
                                  if (!v11)
                                  {
                                    v1327 = 0;
                                    v847 = v1344;
                                    goto LABEL_961;
                                  }
                                  v843 = *(_QWORD *)(v12 + 56);
                                  v844 = (WTF *)JSC::JSObject::get((unsigned int *)v11, v12, (unint64_t)v167, v168, v169, v170, v171, v172);
                                  v846 = (unint64_t)v844;
                                  v1352 = v844;
                                  if (*(_DWORD *)(v843 + 80))
                                  {
                                    v865 = *(_DWORD *)(v843 + 80);
                                    if ((v865 & 0x27) != 0 && (v865 & 0x20) == 0)
                                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v843 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                                    v1327 = 0;
                                    if (*(_QWORD *)(v843 + 16))
                                    {
                                      v847 = v1344;
                                      goto LABEL_961;
                                    }
                                    v847 = v1344;
                                    if (v846 == 10)
                                      goto LABEL_961;
                                  }
                                  else
                                  {
                                    v847 = v1344;
                                    if (v844 == (WTF *)10)
                                    {
                                      v1327 = 0;
                                      goto LABEL_961;
                                    }
                                  }
                                  if ((v846 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v846 + 5) != 2)
                                  {
                                    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1352, (JSC::JSGlobalObject *)v12, v167, v168, v169, v170, v171, v172, (int **)v1382);
                                    goto LABEL_941;
                                  }
                                  v866 = *(int **)(v846 + 8);
                                  if ((v866 & 1) != 0)
                                  {
                                    v866 = *JSC::JSRopeString::resolveRope(v846, (JSC::JSGlobalObject *)v12, (uint64_t)v167, v168, v845, v169, v170, v171, v172);
                                    if (!v866)
                                      goto LABEL_940;
                                  }
                                  else if (!v866)
                                  {
LABEL_940:
                                    v1382[0] = (WTF::StringImpl *)v866;
LABEL_941:
                                    if (!*(_DWORD *)(v843 + 80))
                                      goto LABEL_942;
                                    v1282 = *(_DWORD *)(v843 + 80);
                                    if ((v1282 & 0x27) != 0 && (v1282 & 0x20) == 0)
                                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v843 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                                    v847 = v1344;
                                    if (!*(_QWORD *)(v843 + 16))
                                    {
LABEL_942:
                                      if (v1386[1])
                                        v867 = (char *)v1386[1] - 1;
                                      else
                                        v867 = 0;
                                      if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1386[0], (uint64_t)v867))
                                      {
                                        v868 = 0;
LABEL_950:
                                        v1327 = LOBYTE(v1386[3 * v868 + 2]);
                                        goto LABEL_958;
                                      }
                                      if (v1388)
                                        v869 = v1388 - 1;
                                      else
                                        v869 = 0;
                                      if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], *((unint64_t *)&v1387 + 1), v869))
                                      {
                                        v868 = 1;
                                        goto LABEL_950;
                                      }
                                      v870 = WTF::fastCompactMalloc((WTF *)0x20);
                                      *(_QWORD *)v870 = 0x2500000002;
                                      *(_QWORD *)(v870 + 8) = "second must be \"2-digit\" or \"numeric\"";
                                      *(_DWORD *)(v870 + 16) = 4;
                                      v1385 = (WTF::StringImpl *)v870;
                                      v871 = *(_QWORD *)(v12 + 128);
                                      v872 = *(JSC::Heap ***)(v12 + 56);
                                      if ((v871 & 1) != 0)
                                      {
                                        v1292 = *(uint64_t (**)(int8x16_t *))(v871 & 0xFFFFFFFFFFFFFFFCLL);
                                        if ((v12 & 8) != 0)
                                          v1293 = (uint64_t *)(v12 - 16);
                                        else
                                          v1293 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
                                        __src.i64[0] = *v1293;
                                        __src.i64[1] = v12;
                                        v1351[0] = v12 + 128;
                                        v871 = v1292(&__src);
                                        v847 = v1344;
                                      }
                                      v873 = JSC::ErrorInstance::create(v872, v871, &v1385, 0, 0, 0, 2, 1);
                                      v880 = (JSC::Exception *)v873;
                                      if ((v873 & 0xFFFE000000000002) != 0
                                        || &JSC::Exception::s_info != (char **)(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v873 & 0xFFFFFFFE)
                                                                                                + 0x4C)))
                                      {
                                        v880 = (JSC::Exception *)JSC::Exception::create(v843, (JSC::VM *)v873, 0, v874, v875, v876, v877, v878);
                                      }
                                      JSC::VM::throwException((JSC::VM *)v843, (JSC::JSGlobalObject *)v12, v880, v879, v874, v875, v876, v877, v878);
                                      v881 = v1385;
                                      v1385 = 0;
                                      if (v881)
                                      {
                                        if (*(_DWORD *)v881 == 2)
                                        {
                                          WTF::StringImpl::~StringImpl(v881, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                                          WTF::fastFree(v896, v897, v898, v899, v900, v901, v902, v903);
                                        }
                                        else
                                        {
                                          *(_DWORD *)v881 -= 2;
                                        }
                                      }
                                    }
                                    v1327 = 0;
LABEL_958:
                                    v882 = v1382[0];
                                    v1382[0] = 0;
                                    if (v882)
                                    {
                                      if (*(_DWORD *)v882 == 2)
                                      {
                                        WTF::StringImpl::~StringImpl(v882, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                                        WTF::fastFree(v888, v889, v890, v891, v892, v893, v894, v895);
                                      }
                                      else
                                      {
                                        *(_DWORD *)v882 -= 2;
                                      }
                                    }
LABEL_961:
                                    v883 = v1381;
                                    if (!*((_DWORD *)v1381 + 20))
                                      goto LABEL_1982;
                                    v904 = *((_DWORD *)v1381 + 20);
                                    if ((v904 & 0x27) != 0 && (v904 & 0x20) == 0)
                                      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1381 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                                    v847 = v1344;
                                    if (!*((_QWORD *)v883 + 2))
                                    {
LABEL_1982:
                                      if (!v11)
                                        goto LABEL_975;
                                      v884 = *(_QWORD *)(*(_QWORD *)v847 + 1352);
                                      v885 = *(_QWORD *)(v12 + 56);
                                      v886 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v11, v12, v884, v168, v169, v170, v171, v172);
                                      if (!*(_DWORD *)(v885 + 80))
                                        goto LABEL_964;
                                      v905 = *(_DWORD *)(v885 + 80);
                                      if ((v905 & 0x27) != 0 && (v905 & 0x20) == 0)
                                        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v885 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                                      v847 = v1344;
                                      if (*(_QWORD *)(v885 + 16))
LABEL_975:
                                        v1335 = 0;
                                      else
LABEL_964:
                                        v1335 = JSC::intlDefaultNumberOption((JSC::JSGlobalObject *)v12, v886, v884, 1, 3, 0, v171, v172, v887);
                                      v906 = v1381;
                                      if (!*((_DWORD *)v1381 + 20))
                                        goto LABEL_977;
                                      v911 = *((_DWORD *)v1381 + 20);
                                      if ((v911 & 0x27) != 0 && (v911 & 0x20) == 0)
                                        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1381 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                                      v847 = v1344;
                                      if (!*((_QWORD *)v906 + 2))
                                      {
LABEL_977:
                                        v167 = *(const WTF::String **)(*(_QWORD *)v847 + 2456);
                                        v1386[0] = (WTF *)"short";
                                        v1386[1] = (WTF *)6;
                                        LOBYTE(v1387) = 1;
                                        *((_QWORD *)&v1387 + 1) = "long";
                                        v1388 = 5;
                                        v1389 = 2;
                                        v1390 = "shortOffset";
                                        v1391 = 12;
                                        v1392 = 3;
                                        v1393 = "longOffset";
                                        v1394 = 11;
                                        LOBYTE(v1395) = 4;
                                        v1396 = "shortGeneric";
                                        v1397 = 13;
                                        v1398 = 5;
                                        v1399 = "longGeneric";
                                        v1400 = 12;
                                        v1401 = 6;
                                        if (!v11)
                                        {
                                          v1325 = 0;
                                          goto LABEL_1027;
                                        }
                                        v907 = *(_QWORD *)(v12 + 56);
                                        v908 = (WTF *)JSC::JSObject::get((unsigned int *)v11, v12, (unint64_t)v167, v168, v169, v170, v171, v172);
                                        v910 = (unint64_t)v908;
                                        v1352 = v908;
                                        if (*(_DWORD *)(v907 + 80))
                                        {
                                          v912 = *(_DWORD *)(v907 + 80);
                                          if ((v912 & 0x27) != 0 && (v912 & 0x20) == 0)
                                            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v907 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                                          v1325 = 0;
                                          if (*(_QWORD *)(v907 + 16))
                                          {
                                            v847 = v1344;
                                            goto LABEL_1026;
                                          }
                                          v847 = v1344;
                                          if (v910 == 10)
                                          {
LABEL_1026:
                                            v906 = v1381;
LABEL_1027:
                                            if (*((_DWORD *)v906 + 20))
                                            {
                                              v1256 = *((_DWORD *)v906 + 20);
                                              if ((v1256 & 0x27) != 0 && (v1256 & 0x20) == 0)
                                                JSC::VMTraps::handleTraps((JSC::VM *)((char *)v906 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                                              v847 = v1344;
                                              if (*((_QWORD *)v906 + 2))
                                                goto LABEL_1647;
                                            }
                                            v922 = *(_QWORD *)(*(_QWORD *)v847 + 1320);
                                            *(_OWORD *)v1386 = xmmword_1E3577FA0;
                                            v1387 = *(_OWORD *)&off_1E3577FB0;
                                            JSC::intlStringOption((JSC::JSGlobalObject *)v12, (unsigned int *)v11, v922, (unint64_t *)v1386, 2, (unint64_t)"formatMatcher must be either \"basic\" or \"best fit\"", 51, v172, &v1355, (uint64_t)"best fit", 9);
                                            v923 = v1355;
                                            v1355 = 0;
                                            if (v923)
                                            {
                                              if (*(_DWORD *)v923 == 2)
                                              {
                                                WTF::StringImpl::~StringImpl(v923, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                                                WTF::fastFree(v933, v934, v935, v936, v937, v938, v939, v940);
                                              }
                                              else
                                              {
                                                *(_DWORD *)v923 -= 2;
                                              }
                                            }
                                            v924 = v1381;
                                            if (*((_DWORD *)v1381 + 20))
                                            {
                                              v1257 = *((_DWORD *)v1381 + 20);
                                              if ((v1257 & 0x27) != 0 && (v1257 & 0x20) == 0)
                                                JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1381 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                                              v847 = v1344;
                                              if (*((_QWORD *)v924 + 2))
                                                goto LABEL_1647;
                                            }
                                            v925 = *(_QWORD *)(*(_QWORD *)v847 + 1104);
                                            v1386[0] = (WTF *)"full";
                                            v1386[1] = (WTF *)5;
                                            LOBYTE(v1387) = 1;
                                            *((_QWORD *)&v1387 + 1) = "long";
                                            v1388 = 5;
                                            v1389 = 2;
                                            v1390 = "medium";
                                            v1391 = 7;
                                            v1392 = 3;
                                            v1393 = "short";
                                            v1394 = 6;
                                            LOBYTE(v1395) = 4;
                                            v926 = v1349;
                                            *((_BYTE *)v1349 + 100) = JSC::intlOption<JSC::IntlDateTimeFormat::DateTimeStyle>(v12, (unsigned int *)v11, v925, (uint64_t)v1386, 4, (unint64_t)"dateStyle must be \"full\", \"long\", \"medium\", or \"short\"", 55, v172);
                                            if (*((_DWORD *)v1381 + 20))
                                            {
                                              v1258 = v1381;
                                              v1259 = *((_DWORD *)v1381 + 20);
                                              if ((v1259 & 0x27) != 0 && (v1259 & 0x20) == 0)
                                                JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1381 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                                              v926 = v1349;
                                              if (*((_QWORD *)v1258 + 2))
                                                goto LABEL_1647;
                                            }
                                            v927 = *(_QWORD *)(*(_QWORD *)v1344 + 2440);
                                            v1386[0] = (WTF *)"full";
                                            v1386[1] = (WTF *)5;
                                            LOBYTE(v1387) = 1;
                                            *((_QWORD *)&v1387 + 1) = "long";
                                            v1388 = 5;
                                            v1389 = 2;
                                            v1390 = "medium";
                                            v1391 = 7;
                                            v1392 = 3;
                                            v1393 = "short";
                                            v1394 = 6;
                                            LOBYTE(v1395) = 4;
                                            *((_BYTE *)v926 + 101) = JSC::intlOption<JSC::IntlDateTimeFormat::DateTimeStyle>(v12, (unsigned int *)v11, v927, (uint64_t)v1386, 4, (unint64_t)"timeStyle must be \"full\", \"long\", \"medium\", or \"short\"", 55, v172);
                                            v928 = v1381;
                                            if (*((_DWORD *)v1381 + 20))
                                            {
                                              v1260 = *((_DWORD *)v1381 + 20);
                                              if ((v1260 & 0x27) != 0 && (v1260 & 0x20) == 0)
                                                JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1381 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                                              v926 = v1349;
                                              if (*((_QWORD *)v928 + 2))
                                                goto LABEL_1647;
                                            }
                                            v1352 = (WTF *)v1354;
                                            v1353 = 32;
                                            v349 = (int *)v1342;
                                            v929 = (WTF::AtomStringImpl *)v1330;
                                            if (*((_BYTE *)v926 + 100) || *((_BYTE *)v926 + 101))
                                            {
                                              if (v1334
                                                || v1333
                                                || v1332
                                                || v1329
                                                || v1328
                                                || v1337
                                                || v1331
                                                || v1330
                                                || v1327
                                                || v1335
                                                || v1325)
                                              {
                                                v930 = "dateStyle and timeStyle may not be used with other DateTimeFormat options";
                                                v931 = v12;
                                                v932 = 74;
                                                goto LABEL_1223;
                                              }
                                              if (v1339 == 1)
                                              {
                                                if (*((_BYTE *)v926 + 100))
                                                {
                                                  v930 = "dateStyle is specified while formatting time is requested";
LABEL_1713:
                                                  v931 = v12;
                                                  v932 = 58;
LABEL_1223:
                                                  JSC::throwTypeError(v931, &v1381, (uint64_t)v930, v932);
                                                  goto LABEL_1224;
                                                }
                                              }
                                              else if (!v1339 && *((_BYTE *)v926 + 101))
                                              {
                                                v930 = "timeStyle is specified while formatting date is requested";
                                                goto LABEL_1713;
                                              }
                                              LODWORD(v1382[0]) = 0;
                                              v941 = v926[10];
                                              if (v941)
                                              {
                                                v942 = *(WTF **)(v941 + 8);
                                                v943 = *(_DWORD *)(v941 + 4);
                                                v944 = ((unint64_t)*(unsigned int *)(v941 + 16) >> 2) & 1;
                                              }
                                              else
                                              {
                                                v942 = 0;
                                                v943 = 0;
                                                v944 = 1;
                                              }
                                              v945 = v943;
                                              v1386[0] = (WTF *)&v1387;
                                              v1386[1] = (WTF *)32;
                                              v1395 = 0;
                                              v1394 = 0;
                                              if (v944)
                                              {
                                                if (v943 > 0x20)
                                                {
                                                  if (v943 <= 0x29uLL)
                                                    v1170 = 41;
                                                  else
                                                    v1170 = v943;
                                                  if (v1170 >> 31)
                                                  {
                                                    __break(0xC471u);
                                                    JUMPOUT(0x197E12EFCLL);
                                                  }
                                                  v946 = (WTF *)WTF::fastMalloc((WTF *)(2 * v1170));
                                                  v1386[0] = v946;
                                                  v1386[1] = (WTF *)__PAIR64__(v943, v1170);
                                                  if (v943 < 0x40)
                                                  {
                                                    v947 = v946;
                                                  }
                                                  else
                                                  {
                                                    v947 = (WTF *)((char *)v946 + 2 * (v943 & 0xFFFFFFC0));
                                                    v1171 = 0uLL;
                                                    v1172 = (char *)v946;
                                                    do
                                                    {
                                                      v1404.val[0] = *(int8x16_t *)v942;
                                                      v1173 = *((int8x16_t *)v942 + 1);
                                                      v1408.val[0] = (int8x16_t)*((_OWORD *)v942 + 2);
                                                      v1174 = *((_OWORD *)v942 + 3);
                                                      v942 = (WTF *)((char *)v942 + 64);
                                                      v1175 = v1174;
                                                      v1408.val[1] = 0uLL;
                                                      v1412.val[0] = v1173;
                                                      v1404.val[1] = 0uLL;
                                                      v1176 = v1172;
                                                      vst2q_s8(v1176, v1404);
                                                      v1176 += 32;
                                                      v1412.val[1] = 0uLL;
                                                      vst2q_s8(v1176, v1412);
                                                      v1177 = v1172 + 64;
                                                      vst2q_s8(v1177, v1408);
                                                      v1178 = v1172 + 96;
                                                      vst2q_s8(v1178, *(int8x16x2_t *)(&v1171 - 1));
                                                      v1172 += 128;
                                                    }
                                                    while (v1172 != (char *)v947);
                                                  }
                                                }
                                                else
                                                {
                                                  HIDWORD(v1386[1]) = v943;
                                                  v946 = (WTF *)&v1387;
                                                  v947 = (WTF *)&v1387;
                                                }
                                                while (v947 != (WTF *)((char *)v946 + 2 * v943))
                                                {
                                                  v948 = *(unsigned __int8 *)v942;
                                                  v942 = (WTF *)((char *)v942 + 1);
                                                  *(_WORD *)v947 = v948;
                                                  v947 = (WTF *)((char *)v947 + 2);
                                                }
                                                v942 = v1386[0];
                                                v945 = HIDWORD(v1386[1]);
                                              }
                                              v1394 = (uint64_t)v942;
                                              v1395 = v945;
                                              v956 = udat_open();
                                              v957 = v1386[0];
                                              if (&v1387 != (__int128 *)v1386[0] && v1386[0] != 0)
                                              {
                                                v1386[0] = 0;
                                                LODWORD(v1386[1]) = 0;
                                                WTF::fastFree((unint64_t)v957, v949, v950, v951, v952, v953, v954, v955);
                                              }
                                              v959 = v1349;
                                              v960 = v1326;
                                              if (SLODWORD(v1382[0]) >= 1)
                                              {
LABEL_1068:
                                                JSC::throwTypeError(v12, &v1381, (uint64_t)"failed to initialize DateTimeFormat", 36);
                                                v961 = 0;
                                                goto LABEL_1069;
                                              }
                                              HIDWORD(v1353) = v1353;
                                              LODWORD(v1386[0]) = 0;
                                              v972 = udat_toPattern();
                                              v973 = v972;
                                              if (SLODWORD(v1386[0]) <= 0)
                                              {
                                                HIDWORD(v1353) = v972;
                                                LODWORD(v1382[0]) = v1386[0];
                                              }
                                              else
                                              {
                                                if (LODWORD(v1386[0]) != 15)
                                                {
                                                  LODWORD(v1382[0]) = v1386[0];
                                                  goto LABEL_1068;
                                                }
                                                LODWORD(v1386[0]) = 0;
                                                if (v1353 < (unint64_t)v972)
                                                {
                                                  v1243 = v1353
                                                        + ((unint64_t)v1353 >> 2);
                                                  if (v1243 >= 0x10)
                                                    v1244 = v1243 + 1;
                                                  else
                                                    v1244 = 16;
                                                  if (v1244 <= v972)
                                                    v1245 = v972;
                                                  else
                                                    v1245 = v1244;
                                                  v1246 = v1352;
                                                  v1247 = HIDWORD(v1353);
                                                  if (v1245 < 0x21)
                                                  {
                                                    v1352 = (WTF *)v1354;
                                                    LODWORD(v1353) = 32;
                                                    v1248 = (WTF *)v1354;
                                                  }
                                                  else
                                                  {
                                                    if (v1245 >> 31)
                                                    {
                                                      __break(0xC471u);
                                                      JUMPOUT(0x197E12F2CLL);
                                                    }
                                                    v1248 = (WTF *)WTF::fastMalloc((WTF *)(2 * v1245));
                                                    LODWORD(v1353) = v1245;
                                                    v1352 = v1248;
                                                  }
                                                  memcpy(v1248, v1246, 2 * v1247);
                                                  v959 = v1349;
                                                  v960 = v1326;
                                                  if (v1354 != (_BYTE *)v1246 && v1246)
                                                  {
                                                    if (v1352 == v1246)
                                                    {
                                                      v1352 = 0;
                                                      LODWORD(v1353) = 0;
                                                    }
                                                    WTF::fastFree((unint64_t)v1246, v1249, v1250, v1251, v1252, v1253, v1254, v1255);
                                                    v959 = v1349;
                                                    v960 = v1326;
                                                  }
                                                }
                                                HIDWORD(v1353) = v973;
                                                udat_toPattern();
                                                LODWORD(v1382[0]) = v1386[0];
                                                if (SLODWORD(v1386[0]) >= 1)
                                                  goto LABEL_1068;
                                              }
                                              if (!*((_BYTE *)v959 + 101) || !v960 && v1345 == 2)
                                                goto LABEL_1546;
                                              v978 = v1345 == 2 ? (v960 - 1) < 2 : v1345 == 1;
                                              if (!HIDWORD(v1353))
                                                goto LABEL_1546;
                                              v979 = 0;
                                              v961 = 1;
                                              while (1)
                                              {
                                                v980 = *((unsigned __int16 *)v1352 + v979);
                                                if (v980 > 0x47)
                                                {
                                                  if (*((unsigned __int16 *)v1352 + v979) > 0x67u)
                                                  {
                                                    if (v980 == 104)
                                                      goto LABEL_1545;
                                                    v982 = v979;
                                                    if (v980 == 107)
                                                    {
LABEL_1539:
                                                      if (v978)
                                                        goto LABEL_1540;
LABEL_1546:
                                                      v961 = 1;
LABEL_1069:
                                                      if (v956)
                                                        udat_close();
                                                      v349 = (int *)v1342;
                                                      if ((v961 & 1) != 0)
                                                      {
LABEL_1072:
                                                        v962 = 72;
                                                        switch(v960)
                                                        {
                                                          case 0:
                                                            goto LABEL_1073;
                                                          case 1:
                                                            v962 = 75;
                                                            break;
                                                          case 2:
                                                            v962 = 104;
                                                            break;
                                                          case 4:
                                                            v962 = 107;
                                                            break;
                                                          default:
                                                            break;
                                                        }
                                                        v984 = HIDWORD(v1353);
                                                        if (HIDWORD(v1353))
                                                        {
                                                          v985 = 0;
                                                          v986 = HIDWORD(v1353) - 1;
                                                          do
                                                          {
                                                            v987 = *((unsigned __int16 *)v1352 + v985);
                                                            if ((v987 - 72) <= 0x23
                                                              && ((1 << (v987 - 72)) & 0x900000009) != 0)
                                                            {
                                                              *((_WORD *)v1352 + v985) = v962;
LABEL_1190:
                                                              v989 = v985;
                                                              goto LABEL_1191;
                                                            }
                                                            if (v987 != 39)
                                                              goto LABEL_1190;
                                                            v990 = v985 + 1;
                                                            v989 = v984 - 1;
                                                            if (v990 >= v984)
                                                              goto LABEL_1191;
                                                            if (HIDWORD(v1353) <= v990)
                                                              v991 = v990;
                                                            else
                                                              v991 = HIDWORD(v1353);
                                                            v992 = v986 - v985;
                                                            while (1)
                                                            {
                                                              if (v991 == v990)
                                                              {
                                                                __break(0xC471u);
                                                                JUMPOUT(0x197E12D30);
                                                              }
                                                              if (*((_WORD *)v1352 + v990) == 39)
                                                                break;
                                                              ++v990;
                                                              if (!--v992)
                                                              {
                                                                v989 = v984 - 1;
                                                                goto LABEL_1191;
                                                              }
                                                            }
                                                            v989 = v990;
LABEL_1191:
                                                            v985 = v989 + 1;
                                                          }
                                                          while (v989 + 1 < v984);
LABEL_1073:
                                                          v349 = (int *)HIDWORD(v1353);
                                                          v963 = v1352;
                                                          if (HIDWORD(v1353))
                                                          {
                                                            v170 = 0;
                                                            v506 = 4;
                                                            while (1)
                                                            {
                                                              v169 = *((unsigned __int16 *)v963 + v170);
                                                              if ((_DWORD)v169 == 39)
                                                              {
                                                                v168 = (v170 + 1);
                                                                v964 = (_DWORD)v349 - 1;
                                                                if (v168 < v349)
                                                                {
                                                                  v167 = (const WTF::String *)((v170 + 2)
                                                                                             - 1);
                                                                  while (v349 != (int *)v168)
                                                                  {
                                                                    v169 = *((unsigned __int16 *)v963 + v168);
                                                                    if ((_DWORD)v169 == 39)
                                                                    {
                                                                      v964 = v168;
                                                                      goto LABEL_1095;
                                                                    }
                                                                    ++v168;
                                                                    v167 = (const WTF::String *)((char *)v167 + 1);
                                                                    if ((_DWORD)v349 == (_DWORD)v167)
                                                                    {
                                                                      v964 = (_DWORD)v349 - 1;
                                                                      goto LABEL_1095;
                                                                    }
                                                                  }
                                                                  __break(1u);
LABEL_1530:
                                                                  v1352 = 0;
                                                                  LODWORD(v1353) = 0;
LABEL_517:
                                                                  WTF::fastFree(v506, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                                                                  if (!v349)
                                                                    goto LABEL_1229;
LABEL_1227:
                                                                  if (*v349 == 2)
                                                                  {
                                                                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v349, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                                                                    WTF::fastFree(v1013, v1014, v1015, v1016, v1017, v1018, v1019, v1020);
                                                                  }
                                                                  else
                                                                  {
                                                                    *v349 -= 2;
                                                                  }
                                                                  goto LABEL_1229;
                                                                }
                                                              }
                                                              else if ((v169 | 0x20) - 97 > 0x19)
                                                              {
                                                                v964 = v170;
                                                              }
                                                              else
                                                              {
                                                                v965 = (v170 + 1);
                                                                if (v965 < v349
                                                                  && *((unsigned __int16 *)v963 + v965) == (_DWORD)v169)
                                                                {
                                                                  v171 = 0;
                                                                  v966 = (_DWORD)v349 - v170;
                                                                  v172 = (uint64_t)v349 - v965 - 1;
                                                                  v967 = v170;
                                                                  v968 = (uint64_t)v963 + 2 * v965 + 2;
                                                                  while (v172 != v171)
                                                                  {
                                                                    v969 = *(unsigned __int16 *)(v968 + 2 * v171++);
                                                                    if (v969 != (_DWORD)v169)
                                                                    {
                                                                      v964 = v967 + v171;
                                                                      v966 = v171 + 1;
                                                                      goto LABEL_1091;
                                                                    }
                                                                  }
                                                                  v964 = (_DWORD)v349 - 1;
                                                                }
                                                                else
                                                                {
                                                                  v966 = 1;
                                                                  v964 = v170;
                                                                }
LABEL_1091:
                                                                v970 = v169 - 66;
                                                                v971 = 1;
                                                                switch(v970)
                                                                {
                                                                  case 0:
                                                                  case 31:
                                                                  case 32:
                                                                    if (v966 > 3)
                                                                    {
                                                                      if (v966 == 5)
                                                                      {
                                                                        *((_BYTE *)v959 + 94) = 1;
                                                                      }
                                                                      else if (v966 == 4)
                                                                      {
                                                                        *((_BYTE *)v959 + 94) = 3;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      *((_BYTE *)v959 + 94) = 2;
                                                                    }
                                                                    break;
                                                                  case 3:
                                                                  case 33:
                                                                  case 35:
                                                                    if (v966 > 3)
                                                                    {
                                                                      if (v966 == 5)
                                                                      {
                                                                        *((_BYTE *)v959 + 89) = 1;
                                                                      }
                                                                      else if (v966 == 4)
                                                                      {
                                                                        *((_BYTE *)v959 + 89) = 3;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      *((_BYTE *)v959 + 89) = 2;
                                                                    }
                                                                    break;
                                                                  case 5:
                                                                    if (v966 > 3)
                                                                    {
                                                                      if (v966 == 5)
                                                                      {
                                                                        *((_BYTE *)v959 + 90) = 1;
                                                                      }
                                                                      else if (v966 == 4)
                                                                      {
                                                                        *((_BYTE *)v959 + 90) = 3;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      *((_BYTE *)v959 + 90) = 2;
                                                                    }
                                                                    break;
                                                                  case 6:
                                                                    v971 = 3;
                                                                    goto LABEL_1126;
                                                                  case 9:
                                                                    goto LABEL_1126;
                                                                  case 10:
                                                                  case 11:
                                                                    switch(v966)
                                                                    {
                                                                      case 1u:
                                                                        *((_BYTE *)v959 + 92) = 2;
                                                                        break;
                                                                      case 2u:
                                                                        *((_BYTE *)v959 + 92) = 1;
                                                                        break;
                                                                      case 3u:
                                                                        *((_BYTE *)v959 + 92) = 4;
                                                                        break;
                                                                      case 4u:
                                                                        *((_BYTE *)v959 + 92) = 5;
                                                                        break;
                                                                      case 5u:
                                                                        *((_BYTE *)v959 + 92) = 3;
                                                                        break;
                                                                      default:
                                                                        goto LABEL_1095;
                                                                    }
                                                                    break;
                                                                  case 13:
                                                                    if (v966 == 4)
                                                                    {
                                                                      *((_BYTE *)v959 + 99) = 4;
                                                                    }
                                                                    else if (v966 == 1)
                                                                    {
                                                                      *((_BYTE *)v959 + 99) = 3;
                                                                    }
                                                                    break;
                                                                  case 17:
                                                                    *((_BYTE *)v959 + 98) = v966;
                                                                    break;
                                                                  case 20:
                                                                    if (v966 == 4)
                                                                    {
                                                                      *((_BYTE *)v959 + 99) = 6;
                                                                    }
                                                                    else if (v966 == 1)
                                                                    {
                                                                      *((_BYTE *)v959 + 99) = 5;
                                                                    }
                                                                    break;
                                                                  case 34:
                                                                    if (v966 == 2)
                                                                    {
                                                                      *((_BYTE *)v959 + 93) = 1;
                                                                    }
                                                                    else if (v966 == 1)
                                                                    {
                                                                      *((_BYTE *)v959 + 93) = 2;
                                                                    }
                                                                    break;
                                                                  case 38:
                                                                    v971 = 2;
                                                                    goto LABEL_1126;
                                                                  case 41:
                                                                    v971 = 4;
LABEL_1126:
                                                                    *((_BYTE *)v959 + 88) = v971;
                                                                    if (v966 == 2)
                                                                    {
                                                                      *((_BYTE *)v959 + 95) = 1;
                                                                    }
                                                                    else if (v966 == 1)
                                                                    {
                                                                      *((_BYTE *)v959 + 95) = 2;
                                                                    }
                                                                    break;
                                                                  case 43:
                                                                    if (v966 == 2)
                                                                    {
                                                                      *((_BYTE *)v959 + 96) = 1;
                                                                    }
                                                                    else if (v966 == 1)
                                                                    {
                                                                      *((_BYTE *)v959 + 96) = 2;
                                                                    }
                                                                    break;
                                                                  default:
                                                                    break;
                                                                }
                                                              }
LABEL_1095:
                                                              v170 = (v964 + 1);
                                                              if (v170 >= v349)
                                                                goto LABEL_1205;
                                                            }
                                                          }
                                                          v349 = 0;
                                                        }
                                                        else
                                                        {
                                                          v349 = 0;
                                                          v963 = v1352;
                                                        }
LABEL_1205:
                                                        LODWORD(v1382[0]) = 0;
                                                        v993 = v959[10];
                                                        if (v993)
                                                        {
                                                          v994 = *(WTF **)(v993 + 8);
                                                          v995 = *(_DWORD *)(v993 + 4);
                                                          v996 = ((unint64_t)*(unsigned int *)(v993 + 16) >> 2) & 1;
                                                        }
                                                        else
                                                        {
                                                          v994 = 0;
                                                          v995 = 0;
                                                          v996 = 1;
                                                        }
                                                        v997 = v995;
                                                        v1386[0] = (WTF *)&v1387;
                                                        v1386[1] = (WTF *)32;
                                                        v1395 = 0;
                                                        v1394 = 0;
                                                        if (v996)
                                                        {
                                                          if (v995 > 0x20)
                                                          {
                                                            v1346 = v12;
                                                            if (v995 <= 0x29uLL)
                                                              v1196 = 41;
                                                            else
                                                              v1196 = v995;
                                                            if (v1196 >> 31)
                                                            {
                                                              __break(0xC471u);
                                                              JUMPOUT(0x197E12F0CLL);
                                                            }
                                                            v998 = (WTF *)WTF::fastMalloc((WTF *)(2 * v1196));
                                                            v1386[0] = v998;
                                                            v1386[1] = (WTF *)__PAIR64__(v995, v1196);
                                                            if (v995 < 0x40)
                                                            {
                                                              v999 = v998;
                                                            }
                                                            else
                                                            {
                                                              v999 = (WTF *)((char *)v998 + 2 * (v995 & 0xFFFFFFC0));
                                                              v1197 = 0uLL;
                                                              v1198 = (char *)v998;
                                                              do
                                                              {
                                                                v1405.val[0] = *(int8x16_t *)v994;
                                                                v1199 = *((int8x16_t *)v994 + 1);
                                                                v1409.val[0] = (int8x16_t)*((_OWORD *)v994 + 2);
                                                                v1200 = *((_OWORD *)v994 + 3);
                                                                v994 = (WTF *)((char *)v994 + 64);
                                                                v1201 = v1200;
                                                                v1409.val[1] = 0uLL;
                                                                v1413.val[0] = v1199;
                                                                v1405.val[1] = 0uLL;
                                                                v1202 = v1198;
                                                                vst2q_s8(v1202, v1405);
                                                                v1202 += 32;
                                                                v1413.val[1] = 0uLL;
                                                                vst2q_s8(v1202, v1413);
                                                                v1203 = v1198 + 64;
                                                                vst2q_s8(v1203, v1409);
                                                                v1204 = v1198 + 96;
                                                                vst2q_s8(v1204, *(int8x16x2_t *)(&v1197 - 1));
                                                                v1198 += 128;
                                                              }
                                                              while (v1198 != (char *)v999);
                                                            }
                                                            v12 = v1346;
                                                          }
                                                          else
                                                          {
                                                            HIDWORD(v1386[1]) = v995;
                                                            v998 = (WTF *)&v1387;
                                                            v999 = (WTF *)&v1387;
                                                          }
                                                          while (v999 != (WTF *)((char *)v998 + 2 * v995))
                                                          {
                                                            v1000 = *(unsigned __int8 *)v994;
                                                            v994 = (WTF *)((char *)v994 + 1);
                                                            *(_WORD *)v999 = v1000;
                                                            v999 = (WTF *)((char *)v999 + 2);
                                                          }
                                                          v994 = v1386[0];
                                                          v997 = HIDWORD(v1386[1]);
                                                        }
                                                        v1394 = (uint64_t)v994;
                                                        v1395 = v997;
                                                        __src.i64[0] = (uint64_t)v1351;
                                                        __src.i64[1] = 32;
                                                        v1351[8] = v963;
                                                        v1351[9] = v349;
                                                        v1008 = udat_open();
                                                        v1009 = v1349[3];
                                                        v1349[3] = v1008;
                                                        if (v1009)
                                                          udat_close();
                                                        v1010 = __src.i64[0];
                                                        v349 = (int *)v1342;
                                                        if (v1351 != (_QWORD *)__src.i64[0] && __src.i64[0])
                                                        {
                                                          __src.i64[0] = 0;
                                                          __src.i32[2] = 0;
                                                          WTF::fastFree(v1010, v1001, v1002, v1003, v1004, v1005, v1006, v1007);
                                                        }
                                                        v1011 = v1386[0];
                                                        if (&v1387 != (__int128 *)v1386[0] && v1386[0])
                                                        {
                                                          v1386[0] = 0;
                                                          LODWORD(v1386[1]) = 0;
                                                          WTF::fastFree((unint64_t)v1011, v1001, v1002, v1003, v1004, v1005, v1006, v1007);
                                                        }
                                                        if (SLODWORD(v1382[0]) >= 1)
                                                        {
                                                          v930 = "failed to initialize DateTimeFormat";
                                                          v931 = v12;
                                                          v932 = 36;
                                                          goto LABEL_1223;
                                                        }
                                                        udat_getCalendar();
                                                        ucal_setGregorianChange();
                                                      }
LABEL_1224:
                                                      v506 = (unint64_t)v1352;
                                                      if (v1354 != (_BYTE *)v1352 && v1352)
                                                        goto LABEL_1530;
LABEL_1226:
                                                      if (!v349)
                                                        goto LABEL_1229;
                                                      goto LABEL_1227;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    if (v980 == 72)
                                                      goto LABEL_1539;
                                                    v982 = v979;
                                                    if (v980 == 75)
                                                    {
LABEL_1545:
                                                      if (v978)
                                                        goto LABEL_1546;
LABEL_1540:
                                                      v1386[0] = (WTF *)&v1387;
                                                      LODWORD(v1385) = 0;
                                                      v1386[1] = (WTF *)0x2000000020;
                                                      __src.i32[0] = 0;
                                                      Skeleton = udatpg_getSkeleton();
                                                      v1180 = Skeleton;
                                                      if (__src.i32[0] > 0)
                                                      {
                                                        if (__src.i32[0] == 15)
                                                        {
                                                          __src.i32[0] = 0;
                                                          if (LODWORD(v1386[1]) < (unint64_t)Skeleton)
                                                          {
                                                            v1296 = LODWORD(v1386[1])
                                                                  + ((unint64_t)LODWORD(v1386[1]) >> 2);
                                                            if (v1296 >= 0x10)
                                                              v1297 = v1296 + 1;
                                                            else
                                                              v1297 = 16;
                                                            if (v1297 <= Skeleton)
                                                              v1298 = Skeleton;
                                                            else
                                                              v1298 = v1297;
                                                            v1299 = v1386[0];
                                                            v1347 = HIDWORD(v1386[1]);
                                                            if (v1298 < 0x21)
                                                            {
                                                              v1386[0] = (WTF *)&v1387;
                                                              LODWORD(v1386[1]) = 32;
                                                              v1300 = (WTF *)&v1387;
                                                            }
                                                            else
                                                            {
                                                              if (v1298 >> 31)
                                                              {
                                                                __break(0xC471u);
                                                                JUMPOUT(0x197E12F34);
                                                              }
                                                              v1300 = (WTF *)WTF::fastMalloc((WTF *)(2 * v1298));
                                                              LODWORD(v1386[1]) = v1298;
                                                              v1386[0] = v1300;
                                                            }
                                                            memcpy(v1300, v1299, 2 * v1347);
                                                            if (&v1387 != (__int128 *)v1299 && v1299)
                                                            {
                                                              if (v1386[0] == v1299)
                                                              {
                                                                v1386[0] = 0;
                                                                LODWORD(v1386[1]) = 0;
                                                              }
                                                              WTF::fastFree((unint64_t)v1299, v1301, v1302, v1303, v1304, v1305, v1306, v1307);
                                                            }
                                                          }
                                                          HIDWORD(v1386[1]) = v1180;
                                                          udatpg_getSkeleton();
                                                          LODWORD(v1385) = __src.i32[0];
                                                          if (__src.i32[0] <= 0)
                                                          {
                                                            v1180 = HIDWORD(v1386[1]);
                                                            goto LABEL_1570;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          LODWORD(v1385) = __src.i32[0];
                                                        }
LABEL_1612:
                                                        JSC::throwTypeError(v12, &v1381, (uint64_t)"failed to initialize DateTimeFormat", 36);
                                                        v1233 = v1386[0];
                                                        if (&v1387 != (__int128 *)v1386[0] && v1386[0])
                                                        {
                                                          v1386[0] = 0;
                                                          LODWORD(v1386[1]) = 0;
                                                          WTF::fastFree((unint64_t)v1233, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                                                        }
                                                        v961 = 0;
                                                        goto LABEL_1616;
                                                      }
                                                      HIDWORD(v1386[1]) = Skeleton;
                                                      LODWORD(v1385) = __src.i32[0];
LABEL_1570:
                                                      if (v978)
                                                        v1212 = 104;
                                                      else
                                                        v1212 = 72;
                                                      if (!v1180)
                                                      {
LABEL_1594:
                                                        JSC::IntlCache::getBestDateTimePattern(*(int8x16_t ***)(v1324 + 2552), (int8x16_t **)&v1358, (UErrorCode *)&v1385, (uint64_t)&__src);
                                                        v1221 = v1352;
                                                        if (v1352 != (WTF *)v1354)
                                                        {
                                                          if (v1352)
                                                          {
                                                            v1352 = 0;
                                                            LODWORD(v1353) = 0;
                                                            WTF::fastFree((unint64_t)v1221, v1220, (uint64_t)v167, v168, v169, v170, v171, v172);
                                                          }
                                                          v1352 = (WTF *)v1354;
                                                        }
                                                        v166 = (WTF::AtomStringImpl *)__src.i64[0];
                                                        if ((_QWORD *)__src.i64[0] == v1351)
                                                        {
                                                          v1223 = __src.i32[3];
                                                          memcpy(v1354, (const void *)__src.i64[0], 2 * __src.u32[3]);
                                                          v1222 = __src.i32[2];
                                                        }
                                                        else
                                                        {
                                                          v1352 = (WTF *)__src.i64[0];
                                                          v1222 = __src.i32[2];
                                                          v1223 = __src.i32[3];
                                                        }
                                                        v1353 = __PAIR64__(v1223, v1222);
                                                        if ((int)v1385 > 0)
                                                          goto LABEL_1612;
                                                        v1234 = v1386[0];
                                                        if (&v1387 != (__int128 *)v1386[0] && v1386[0])
                                                        {
                                                          v1386[0] = 0;
                                                          LODWORD(v1386[1]) = 0;
                                                          WTF::fastFree((unint64_t)v1234, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                                                        }
                                                        v961 = 1;
LABEL_1616:
                                                        v959 = v1349;
                                                        v960 = v1326;
                                                        goto LABEL_1069;
                                                      }
                                                      v1213 = 0;
                                                      while (2)
                                                      {
                                                        v1214 = *((unsigned __int16 *)v1386[0] + v1213);
                                                        if ((v1214 - 72) <= 0x22
                                                          && ((1 << (v1214 - 72)) & 0x500000001) != 0)
                                                        {
                                                          *((_WORD *)v1386[0] + v1213) = v1212;
                                                          goto LABEL_1590;
                                                        }
                                                        if (v1214 == 39)
                                                        {
                                                          v1216 = v1213 + 1;
                                                          v1217 = v1180 - 1;
                                                          if (v1216 >= v1180)
                                                            goto LABEL_1591;
                                                          if (HIDWORD(v1386[1]) <= v1216)
                                                            v1218 = v1216;
                                                          else
                                                            v1218 = HIDWORD(v1386[1]);
                                                          v1219 = v1180 - 1 - v1213;
                                                          while (1)
                                                          {
                                                            if (v1218 == v1216)
                                                            {
                                                              __break(0xC471u);
                                                              JUMPOUT(0x197E12E94);
                                                            }
                                                            if (*((_WORD *)v1386[0] + v1216) == 39)
                                                              break;
                                                            ++v1216;
                                                            if (!--v1219)
                                                            {
                                                              v1217 = v1180 - 1;
                                                              goto LABEL_1591;
                                                            }
                                                          }
                                                          v1217 = v1216;
                                                        }
                                                        else
                                                        {
LABEL_1590:
                                                          v1217 = v1213;
                                                        }
LABEL_1591:
                                                        v1213 = v1217 + 1;
                                                        if (v1217 + 1 >= v1180)
                                                          goto LABEL_1594;
                                                        continue;
                                                      }
                                                    }
                                                  }
                                                }
                                                else if (v980 == 39)
                                                {
                                                  v981 = v979 + 1;
                                                  v982 = HIDWORD(v1353) - 1;
                                                  if (v981 >= HIDWORD(v1353))
                                                    goto LABEL_1178;
                                                  v983 = v979 + 2 - 1;
                                                  while (1)
                                                  {
                                                    if (HIDWORD(v1353) == v981)
                                                    {
                                                      __break(0xC471u);
                                                      JUMPOUT(0x197E12DACLL);
                                                    }
                                                    if (*((_WORD *)v1352 + v981) == 39)
                                                      break;
                                                    ++v981;
                                                    if (HIDWORD(v1353) == (_DWORD)++v983)
                                                    {
                                                      v982 = HIDWORD(v1353) - 1;
                                                      goto LABEL_1178;
                                                    }
                                                  }
                                                  v982 = v981;
                                                }
                                                else
                                                {
                                                  v982 = v979;
                                                }
LABEL_1178:
                                                v979 = v982 + 1;
                                                if ((v982 + 1) >= HIDWORD(v1353))
                                                  goto LABEL_1069;
                                              }
                                            }
                                            if ((v1339 & 0xFFFFFFFD) != 0)
                                            {
                                              v974 = 1;
                                              v975 = v1332;
                                              v977 = v1328;
                                              v976 = v1329;
                                            }
                                            else
                                            {
                                              v975 = v1332;
                                              v977 = v1328;
                                              v976 = v1329;
                                              v974 = (v1334 | v1332 | v1329 | v1328) == 0;
                                            }
                                            v1021 = v1327;
                                            if ((v1339 - 1) <= 1 && v1337 | v1331 | v1330 | v1327 | v1335)
                                              v974 = 0;
                                            v1022 = (v1338 & 0xFD) == 0;
                                            if (v1022 && v974)
                                              v1023 = 2;
                                            else
                                              v1023 = v977;
                                            if (v1022 && v974)
                                              v1024 = 2;
                                            else
                                              v1024 = v976;
                                            if (v1022 && v974)
                                              v1025 = 2;
                                            else
                                              v1025 = v975;
                                            v1026 = (v1338 - 1) < 2;
                                            if (v1026 && v974)
                                              v1027 = 2;
                                            else
                                              v1027 = v1327;
                                            if (v1026 && v974)
                                              v1028 = 2;
                                            else
                                              v1028 = v1330;
                                            if (v1026 && v974)
                                              v1029 = 2;
                                            else
                                              v1029 = v1331;
                                            v1386[1] = 0;
                                            v1386[0] = 0;
                                            LODWORD(v1387) = 0;
                                            BYTE4(v1387) = 1;
                                            switch(v1334)
                                            {
                                              case 1:
                                                v1030 = (int8x16_t *)"EEEEE";
                                                v1031 = 5;
                                                break;
                                              case 3:
                                                v1030 = (int8x16_t *)"EEEE";
                                                v1031 = 4;
                                                break;
                                              case 2:
                                                v1030 = (int8x16_t *)"EEE";
                                                v1031 = 3;
                                                break;
                                              default:
                                                goto LABEL_1266;
                                            }
                                            WTF::StringBuilder::append((uint64_t)v1386, v1030, v1031, v168, v169, v170, v171, v172);
LABEL_1266:
                                            switch(v1333)
                                            {
                                              case 1:
                                                v1040 = (int8x16_t *)"GGGGG";
                                                v1041 = 5;
                                                break;
                                              case 3:
                                                v1040 = (int8x16_t *)"GGGG";
                                                v1041 = 4;
                                                break;
                                              case 2:
                                                v1040 = (int8x16_t *)"GGG";
                                                v1041 = 3;
                                                break;
                                              default:
                                                goto LABEL_1273;
                                            }
                                            WTF::StringBuilder::append((uint64_t)v1386, v1040, v1041, v168, v169, v170, v171, v172);
LABEL_1273:
                                            if (v1025 == 2)
                                            {
                                              __src.i8[0] = 121;
                                              if (!v1386[1]
                                                || (v1044 = v1387,
                                                    v1387 >= *((_DWORD *)v1386[1] + 1))
                                                || v1386[0])
                                              {
                                                WTF::StringBuilder::append((uint64_t)v1386, &__src, 1uLL, v168, v169, v170, v171, v172);
                                              }
                                              else
                                              {
                                                v1045 = *((_DWORD *)v1386[1] + 4);
                                                v1046 = *((_QWORD *)v1386[1] + 1);
                                                LODWORD(v1387) = v1387 + 1;
                                                if ((v1045 & 4) != 0)
                                                  *(_BYTE *)(v1046 + v1044) = 121;
                                                else
                                                  *(_WORD *)(v1046 + 2 * v1044) = 121;
                                              }
                                            }
                                            else if (v1025 == 1 && (v1387 & 0x80000000) == 0)
                                            {
                                              v1042 = v1386[1];
                                              if ((v1386[1] || (v1042 = v1386[0]) != 0)
                                                && (*((_BYTE *)v1042 + 16) & 4) == 0)
                                              {
                                                v1043 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 2), v1021, v168, v169, v170, v171, v172);
                                                if (v1043)
                                                  *v1043 = 7929977;
                                              }
                                              else
                                              {
                                                v1060 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 2), v1021, v168, v169, v170, v171, v172);
                                                if (v1060)
                                                  *v1060 = 31097;
                                              }
                                            }
                                            v1047 = v1024 - 1;
                                            v959 = v1349;
                                            v960 = v1326;
                                            switch(v1047)
                                            {
                                              case 0:
                                                if ((v1387 & 0x80000000) == 0)
                                                {
                                                  v1048 = v1386[1];
                                                  if ((v1386[1] || (v1048 = v1386[0]) != 0)
                                                    && (*((_BYTE *)v1048 + 16) & 4) == 0)
                                                  {
                                                    v1049 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 2), v1021, v168, v169, v170, v171, v172);
                                                    if (v1049)
                                                    {
                                                      v1050 = 5046349;
                                                      goto LABEL_1323;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    v1061 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 2), v1021, v168, v169, v170, v171, v172);
                                                    if (v1061)
                                                      goto LABEL_1327;
                                                  }
                                                }
                                                break;
                                              case 1:
                                                __src.i8[0] = 77;
                                                if (!v1386[1]
                                                  || (v1057 = v1387,
                                                      v1387 >= *((_DWORD *)v1386[1] + 1))
                                                  || v1386[0])
                                                {
                                                  WTF::StringBuilder::append((uint64_t)v1386, &__src, 1uLL, v168, v169, v170, v171, v172);
                                                }
                                                else
                                                {
                                                  v1058 = *((_DWORD *)v1386[1] + 4);
                                                  v1059 = *((_QWORD *)v1386[1] + 1);
                                                  LODWORD(v1387) = v1387 + 1;
                                                  if ((v1058 & 4) != 0)
                                                    *(_BYTE *)(v1059 + v1057) = 77;
                                                  else
                                                    *(_WORD *)(v1059 + 2 * v1057) = 77;
                                                }
                                                break;
                                              case 2:
                                                if ((v1387 & 0x80000000) == 0)
                                                {
                                                  v1053 = v1386[1];
                                                  if ((v1386[1] || (v1053 = v1386[0]) != 0)
                                                    && (*((_BYTE *)v1053 + 16) & 4) == 0)
                                                  {
                                                    v1054 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 5), v1021, v168, v169, v170, v171, v172);
                                                    if (v1054)
                                                    {
                                                      *(_QWORD *)v1054 = 0x4D004D004D004DLL;
                                                      *(_WORD *)(v1054 + 8) = 77;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    v1049 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 5), v1021, v168, v169, v170, v171, v172);
                                                    if (v1049)
                                                    {
                                                      *(_BYTE *)(v1049 + 4) = 77;
                                                      goto LABEL_1322;
                                                    }
                                                  }
                                                }
                                                break;
                                              case 3:
                                                if ((v1387 & 0x80000000) == 0)
                                                {
                                                  v1055 = v1386[1];
                                                  if ((v1386[1] || (v1055 = v1386[0]) != 0)
                                                    && (*((_BYTE *)v1055 + 16) & 4) == 0)
                                                  {
                                                    v1056 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 3), v1021, v168, v169, v170, v171, v172);
                                                    if (v1056)
                                                    {
                                                      *(_DWORD *)v1056 = 5046349;
                                                      *(_WORD *)(v1056 + 4) = 77;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    v1061 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 3), v1021, v168, v169, v170, v171, v172);
                                                    if (v1061)
                                                    {
                                                      *(_BYTE *)(v1061 + 2) = 77;
LABEL_1327:
                                                      *(_WORD *)v1061 = 19789;
                                                    }
                                                  }
                                                }
                                                break;
                                              case 4:
                                                if ((v1387 & 0x80000000) == 0)
                                                {
                                                  v1051 = v1386[1];
                                                  if ((v1386[1] || (v1051 = v1386[0]) != 0)
                                                    && (*((_BYTE *)v1051 + 16) & 4) == 0)
                                                  {
                                                    v1052 = (_QWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 4), v1021, v168, v169, v170, v171, v172);
                                                    if (v1052)
                                                      *v1052 = 0x4D004D004D004DLL;
                                                  }
                                                  else
                                                  {
                                                    v1049 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 4), v1021, v168, v169, v170, v171, v172);
                                                    if (v1049)
                                                    {
LABEL_1322:
                                                      v1050 = 1296911693;
LABEL_1323:
                                                      *(_DWORD *)v1049 = v1050;
                                                    }
                                                  }
                                                }
                                                break;
                                              default:
                                                break;
                                            }
                                            if (v1023 == 2)
                                            {
                                              __src.i8[0] = 100;
                                              if (!v1386[1]
                                                || (v1064 = v1387,
                                                    v1387 >= *((_DWORD *)v1386[1] + 1))
                                                || v1386[0])
                                              {
                                                WTF::StringBuilder::append((uint64_t)v1386, &__src, 1uLL, v168, v169, v170, v171, v172);
                                              }
                                              else
                                              {
                                                v1065 = *((_DWORD *)v1386[1] + 4);
                                                v1066 = *((_QWORD *)v1386[1] + 1);
                                                LODWORD(v1387) = v1387 + 1;
                                                if ((v1065 & 4) != 0)
                                                  *(_BYTE *)(v1066 + v1064) = 100;
                                                else
                                                  *(_WORD *)(v1066 + 2 * v1064) = 100;
                                              }
                                            }
                                            else if (v1023 == 1 && (v1387 & 0x80000000) == 0)
                                            {
                                              v1062 = v1386[1];
                                              if ((v1386[1] || (v1062 = v1386[0]) != 0)
                                                && (*((_BYTE *)v1062 + 16) & 4) == 0)
                                              {
                                                v1063 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 2), v1021, v168, v169, v170, v171, v172);
                                                if (v1063)
                                                  *v1063 = 6553700;
                                              }
                                              else
                                              {
                                                v1083 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 2), v1021, v168, v169, v170, v171, v172);
                                                if (v1083)
                                                  *v1083 = 25700;
                                              }
                                            }
                                            if (v1345 == 1)
                                            {
                                              LOWORD(v1067) = 104;
                                            }
                                            else if (v1345 == 2)
                                            {
                                              if ((v1326 - 1) >= 4)
                                                LOWORD(v1067) = 106;
                                              else
                                                v1067 = 0x48004800680068uLL >> (16 * (v1326 - 1));
                                            }
                                            else
                                            {
                                              LOWORD(v1067) = 72;
                                            }
                                            if (v1029 == 2)
                                            {
                                              __src.i16[0] = v1067;
                                              if (v1386[1])
                                              {
                                                v1072 = v1387;
                                                if (v1387 < *((_DWORD *)v1386[1] + 1) && !v1386[0])
                                                {
                                                  v1073 = *((_DWORD *)v1386[1] + 4);
                                                  v1074 = *((_QWORD *)v1386[1] + 1);
                                                  LODWORD(v1387) = v1387 + 1;
                                                  v1068 = v1324;
                                                  if ((v1073 & 4) == 0)
                                                  {
LABEL_1365:
                                                    *(_WORD *)(v1074 + 2 * v1072) = v1067;
                                                    goto LABEL_1368;
                                                  }
LABEL_1359:
                                                  *(_BYTE *)(v1074 + v1072) = v1067;
                                                  goto LABEL_1368;
                                                }
                                              }
                                              WTF::StringBuilder::append((uint64_t)v1386, &__src, 1uLL, v168, v169, v170, v171, v172);
                                              v1068 = v1324;
                                            }
                                            else
                                            {
                                              v1068 = v1324;
                                              if (v1029 != 1)
                                                goto LABEL_1368;
                                              __src.i16[0] = v1067;
                                              if (!v1386[1]
                                                || (v1069 = v1387,
                                                    v1387 >= *((_DWORD *)v1386[1] + 1))
                                                || v1386[0])
                                              {
                                                WTF::StringBuilder::append((uint64_t)v1386, &__src, 1uLL, v168, v169, v170, v171, v172);
                                              }
                                              else
                                              {
                                                v1070 = *((_DWORD *)v1386[1] + 4);
                                                v1071 = *((_QWORD *)v1386[1] + 1);
                                                LODWORD(v1387) = v1387 + 1;
                                                if ((v1070 & 4) != 0)
                                                  *(_BYTE *)(v1071 + v1069) = v1067;
                                                else
                                                  *(_WORD *)(v1071 + 2 * v1069) = v1067;
                                              }
                                              __src.i16[0] = v1067;
                                              if (v1386[1])
                                              {
                                                v1072 = v1387;
                                                if (v1387 < *((_DWORD *)v1386[1] + 1) && !v1386[0])
                                                {
                                                  v1075 = *((_DWORD *)v1386[1] + 4);
                                                  v1074 = *((_QWORD *)v1386[1] + 1);
                                                  LODWORD(v1387) = v1387 + 1;
                                                  if ((v1075 & 4) == 0)
                                                    goto LABEL_1365;
                                                  goto LABEL_1359;
                                                }
                                              }
                                              WTF::StringBuilder::append((uint64_t)v1386, &__src, 1uLL, v168, v169, v170, v171, v172);
                                            }
LABEL_1368:
                                            if (v1337 == 3)
                                            {
                                              if ((v1387 & 0x80000000) == 0)
                                              {
                                                v1081 = v1386[1];
                                                if ((v1386[1] || (v1081 = v1386[0]) != 0)
                                                  && (*((_BYTE *)v1081 + 16) & 4) == 0)
                                                {
                                                  v1082 = (_QWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 4), v1021, v168, v169, v170, v171, v172);
                                                  if (v1082)
                                                    *v1082 = 0x42004200420042;
                                                  goto LABEL_1395;
                                                }
                                                v1084 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 4), v1021, v168, v169, v170, v171, v172);
                                                if (v1084)
                                                  goto LABEL_1394;
                                              }
                                            }
                                            else
                                            {
                                              if (v1337 == 2)
                                              {
                                                __src.i8[0] = 66;
                                                if (!v1386[1]
                                                  || (v1078 = v1387,
                                                      v1387 >= *((_DWORD *)v1386[1] + 1))
                                                  || v1386[0])
                                                {
                                                  WTF::StringBuilder::append((uint64_t)v1386, &__src, 1uLL, v168, v169, v170, v171, v172);
                                                }
                                                else
                                                {
                                                  v1079 = *((_DWORD *)v1386[1] + 4);
                                                  v1080 = *((_QWORD *)v1386[1] + 1);
                                                  LODWORD(v1387) = v1387 + 1;
                                                  if ((v1079 & 4) != 0)
                                                    *(_BYTE *)(v1080 + v1078) = 66;
                                                  else
                                                    *(_WORD *)(v1080 + 2 * v1078) = 66;
                                                }
                                                goto LABEL_1395;
                                              }
                                              if (v1337 == 1 && (v1387 & 0x80000000) == 0)
                                              {
                                                v1076 = v1386[1];
                                                if ((v1386[1] || (v1076 = v1386[0]) != 0)
                                                  && (*((_BYTE *)v1076 + 16) & 4) == 0)
                                                {
                                                  v1077 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 5), v1021, v168, v169, v170, v171, v172);
                                                  if (v1077)
                                                  {
                                                    *(_QWORD *)v1077 = 0x42004200420042;
                                                    *(_WORD *)(v1077 + 8) = 66;
                                                  }
                                                  goto LABEL_1395;
                                                }
                                                v1084 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 5), v1021, v168, v169, v170, v171, v172);
                                                if (v1084)
                                                {
                                                  *(_BYTE *)(v1084 + 4) = 66;
LABEL_1394:
                                                  *(_DWORD *)v1084 = 1111638594;
                                                }
                                              }
                                            }
LABEL_1395:
                                            if (v1028 == 2)
                                            {
                                              __src.i8[0] = 109;
                                              if (!v1386[1]
                                                || (v1087 = v1387,
                                                    v1387 >= *((_DWORD *)v1386[1] + 1))
                                                || v1386[0])
                                              {
                                                WTF::StringBuilder::append((uint64_t)v1386, &__src, 1uLL, v168, v169, v170, v171, v172);
                                              }
                                              else
                                              {
                                                v1088 = *((_DWORD *)v1386[1] + 4);
                                                v1089 = *((_QWORD *)v1386[1] + 1);
                                                LODWORD(v1387) = v1387 + 1;
                                                if ((v1088 & 4) != 0)
                                                  *(_BYTE *)(v1089 + v1087) = 109;
                                                else
                                                  *(_WORD *)(v1089 + 2 * v1087) = 109;
                                              }
                                            }
                                            else if (v1028 == 1 && (v1387 & 0x80000000) == 0)
                                            {
                                              v1085 = v1386[1];
                                              if ((v1386[1] || (v1085 = v1386[0]) != 0)
                                                && (*((_BYTE *)v1085 + 16) & 4) == 0)
                                              {
                                                v1086 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 2), v1021, v168, v169, v170, v171, v172);
                                                if (v1086)
                                                  *v1086 = 7143533;
                                              }
                                              else
                                              {
                                                v1150 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 2), v1021, v168, v169, v170, v171, v172);
                                                if (v1150)
                                                  *v1150 = 28013;
                                              }
                                            }
                                            if (v1027 == 2)
                                            {
                                              __src.i8[0] = 115;
                                              if (!v1386[1]
                                                || (v1093 = v1387,
                                                    v1387 >= *((_DWORD *)v1386[1] + 1))
                                                || v1386[0])
                                              {
                                                WTF::StringBuilder::append((uint64_t)v1386, &__src, 1uLL, v168, v169, v170, v171, v172);
                                                v1090 = v1335;
                                              }
                                              else
                                              {
                                                v1094 = *((_DWORD *)v1386[1] + 4);
                                                v1095 = *((_QWORD *)v1386[1] + 1);
                                                LODWORD(v1387) = v1387 + 1;
                                                v1090 = v1335;
                                                if ((v1094 & 4) != 0)
                                                  *(_BYTE *)(v1095 + v1093) = 115;
                                                else
                                                  *(_WORD *)(v1095 + 2 * v1093) = 115;
                                              }
                                            }
                                            else
                                            {
                                              v528 = v1027 == 1;
                                              v1090 = v1335;
                                              if (v528 && (v1387 & 0x80000000) == 0)
                                              {
                                                v1091 = v1386[1];
                                                if ((v1386[1] || (v1091 = v1386[0]) != 0)
                                                  && (*((_BYTE *)v1091 + 16) & 4) == 0)
                                                {
                                                  v1092 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 2), v1021, v168, v169, v170, v171, v172);
                                                  if (v1092)
                                                    *v1092 = 7536755;
                                                }
                                                else
                                                {
                                                  v1151 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 2), v1021, v168, v169, v170, v171, v172);
                                                  if (v1151)
                                                    *v1151 = 29555;
                                                }
                                              }
                                            }
                                            for (; v1090; --v1090)
                                            {
                                              __src.i8[0] = 83;
                                              if (v1386[1]
                                                && ((v1096 = v1387,
                                                     v1387 < *((_DWORD *)v1386[1] + 1))
                                                  ? (v1097 = v1386[0] == 0)
                                                  : (v1097 = 0),
                                                    v1097))
                                              {
                                                v1098 = *((_DWORD *)v1386[1] + 4);
                                                v1099 = *((_QWORD *)v1386[1] + 1);
                                                LODWORD(v1387) = v1387 + 1;
                                                if ((v1098 & 4) != 0)
                                                  *(_BYTE *)(v1099 + v1096) = 83;
                                                else
                                                  *(_WORD *)(v1099 + 2 * v1096) = 83;
                                              }
                                              else
                                              {
                                                WTF::StringBuilder::append((uint64_t)v1386, &__src, 1uLL, v168, v169, v170, v171, v172);
                                              }
                                            }
                                            switch(v1325)
                                            {
                                              case 1:
                                                __src.i8[0] = 122;
                                                if (!v1386[1])
                                                  goto LABEL_1692;
                                                v1100 = v1387;
                                                if (v1387 >= *((_DWORD *)v1386[1] + 1) || v1386[0] != 0)
                                                  goto LABEL_1692;
                                                v1102 = *((_DWORD *)v1386[1] + 4);
                                                v1103 = *((_QWORD *)v1386[1] + 1);
                                                LODWORD(v1387) = v1387 + 1;
                                                if ((v1102 & 4) != 0)
                                                {
                                                  v1104 = 122;
                                                  goto LABEL_1460;
                                                }
                                                v1318 = 122;
                                                goto LABEL_1807;
                                              case 2:
                                                if ((v1387 & 0x80000000) != 0)
                                                  goto LABEL_1461;
                                                v1148 = v1386[1];
                                                if ((v1386[1] || (v1148 = v1386[0]) != 0)
                                                  && (*((_BYTE *)v1148 + 16) & 4) == 0)
                                                {
                                                  v1146 = (_QWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 4), v1021, v168, v169, v170, v171, v172);
                                                  if (!v1146)
                                                    goto LABEL_1461;
                                                  v1147 = 0x7A007A007A007ALL;
                                                  goto LABEL_1514;
                                                }
                                                v1168 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 4), v1021, v168, v169, v170, v171, v172);
                                                if (!v1168)
                                                  goto LABEL_1461;
                                                v1169 = 2054847098;
                                                goto LABEL_1528;
                                              case 3:
                                                __src.i8[0] = 79;
                                                if (!v1386[1])
                                                  goto LABEL_1692;
                                                v1100 = v1387;
                                                if (v1387 >= *((_DWORD *)v1386[1] + 1) || v1386[0] != 0)
                                                  goto LABEL_1692;
                                                v1108 = *((_DWORD *)v1386[1] + 4);
                                                v1103 = *((_QWORD *)v1386[1] + 1);
                                                LODWORD(v1387) = v1387 + 1;
                                                if ((v1108 & 4) != 0)
                                                {
                                                  v1104 = 79;
                                                  goto LABEL_1460;
                                                }
                                                v1318 = 79;
                                                goto LABEL_1807;
                                              case 4:
                                                if ((v1387 & 0x80000000) != 0)
                                                  goto LABEL_1461;
                                                v1145 = v1386[1];
                                                if ((v1386[1] || (v1145 = v1386[0]) != 0)
                                                  && (*((_BYTE *)v1145 + 16) & 4) == 0)
                                                {
                                                  v1146 = (_QWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 4), v1021, v168, v169, v170, v171, v172);
                                                  if (!v1146)
                                                    goto LABEL_1461;
                                                  v1147 = 0x4F004F004F004FLL;
                                                  goto LABEL_1514;
                                                }
                                                v1168 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 4), v1021, v168, v169, v170, v171, v172);
                                                if (!v1168)
                                                  goto LABEL_1461;
                                                v1169 = 1330597711;
                                                goto LABEL_1528;
                                              case 5:
                                                __src.i8[0] = 118;
                                                if (v1386[1]
                                                  && ((v1100 = v1387,
                                                       v1387 < *((_DWORD *)v1386[1] + 1))
                                                    ? (v1105 = v1386[0] == 0)
                                                    : (v1105 = 0),
                                                      v1105))
                                                {
                                                  v1106 = *((_DWORD *)v1386[1] + 4);
                                                  v1103 = *((_QWORD *)v1386[1] + 1);
                                                  LODWORD(v1387) = v1387 + 1;
                                                  if ((v1106 & 4) != 0)
                                                  {
                                                    v1104 = 118;
LABEL_1460:
                                                    *(_BYTE *)(v1103 + v1100) = v1104;
                                                  }
                                                  else
                                                  {
                                                    v1318 = 118;
LABEL_1807:
                                                    *(_WORD *)(v1103 + 2 * v1100) = v1318;
                                                  }
                                                }
                                                else
                                                {
LABEL_1692:
                                                  WTF::StringBuilder::append((uint64_t)v1386, &__src, 1uLL, v168, v169, v170, v171, v172);
                                                }
                                                goto LABEL_1461;
                                              case 6:
                                                if ((v1387 & 0x80000000) != 0)
                                                  goto LABEL_1461;
                                                v1149 = v1386[1];
                                                if ((v1386[1] || (v1149 = v1386[0]) != 0)
                                                  && (*((_BYTE *)v1149 + 16) & 4) == 0)
                                                {
                                                  v1146 = (_QWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 4), v1021, v168, v169, v170, v171, v172);
                                                  if (v1146)
                                                  {
                                                    v1147 = 0x76007600760076;
LABEL_1514:
                                                    *v1146 = v1147;
                                                  }
                                                }
                                                else
                                                {
                                                  v1168 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v1386, (WTF::AtomStringImpl *)(v1387 + 4), v1021, v168, v169, v170, v171, v172);
                                                  if (v1168)
                                                  {
                                                    v1169 = 1987475062;
LABEL_1528:
                                                    *v1168 = v1169;
                                                  }
                                                }
LABEL_1461:
                                                v1109 = v1386[0];
                                                if (v1386[0])
                                                  goto LABEL_1462;
                                                if ((v1387 & 0x80000000) == 0
                                                  && v1386[1]
                                                  && *((_DWORD *)v1386[1] + 1) > v1387
                                                                               + (v1387 >> 2))
                                                {
                                                  if ((*((_BYTE *)v1386[1] + 16) & 4) != 0)
                                                    WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)v1386, (WTF::AtomStringImpl *)v1387, v1021, v168, v169, v170, v171, v172);
                                                  else
                                                    WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)v1386, (WTF::AtomStringImpl *)v1387, v1021, v168, v169, v170, v171, v172);
                                                  v1261 = v1386[1];
                                                  v1262 = v1386[0];
                                                  v1386[1] = 0;
                                                  v1386[0] = v1261;
                                                  if (v1262)
                                                  {
                                                    if (*(_DWORD *)v1262 == 2)
                                                    {
                                                      WTF::StringImpl::~StringImpl(v1262, v1205, v1206, v1207, v1208, v1209, v1210, v1211);
                                                      WTF::fastFree(v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272);
                                                    }
                                                    else
                                                    {
                                                      *(_DWORD *)v1262 -= 2;
                                                    }
                                                  }
                                                }
                                                WTF::StringBuilder::reifyString((WTF::StringBuilder *)v1386);
                                                v1109 = v1386[0];
                                                v959 = v1349;
                                                v960 = v1326;
                                                v1068 = v1324;
                                                if (v1386[0])
LABEL_1462:
                                                  *(_DWORD *)v1109 += 2;
                                                v1110 = v1386[1];
                                                v1386[1] = 0;
                                                if (v1110)
                                                {
                                                  if (*(_DWORD *)v1110 == 2)
                                                  {
                                                    WTF::StringImpl::~StringImpl(v1110, v929, v1021, v168, v169, v170, v171, v172);
                                                    WTF::fastFree(v1129, v1130, v1131, v1132, v1133, v1134, v1135, v1136);
                                                  }
                                                  else
                                                  {
                                                    *(_DWORD *)v1110 -= 2;
                                                  }
                                                }
                                                v1111 = v1386[0];
                                                v1386[0] = 0;
                                                if (v1111)
                                                {
                                                  if (*(_DWORD *)v1111 == 2)
                                                  {
                                                    WTF::StringImpl::~StringImpl(v1111, v929, v1021, v168, v169, v170, v171, v172);
                                                    WTF::fastFree(v1137, v1138, v1139, v1140, v1141, v1142, v1143, v1144);
                                                  }
                                                  else
                                                  {
                                                    *(_DWORD *)v1111 -= 2;
                                                  }
                                                }
                                                LODWORD(v1382[0]) = 0;
                                                v1112 = *(int8x16_t ***)(v1068 + 2552);
                                                if (v1109)
                                                {
                                                  v1113 = *((_DWORD *)v1109 + 4);
                                                  v1114 = (WTF *)*((_QWORD *)v1109 + 1);
                                                  v1115 = *((unsigned int *)v1109 + 1);
                                                  v1386[0] = (WTF *)&v1387;
                                                  v1386[1] = (WTF *)32;
                                                  v1395 = 0;
                                                  v1394 = 0;
                                                  if ((v1113 & 4) == 0)
                                                    goto LABEL_1477;
                                                  if (v1115 > 0x20)
                                                  {
                                                    if (v1115 <= 0x29)
                                                      v1224 = 41;
                                                    else
                                                      v1224 = v1115;
                                                    if (v1224 >> 31)
                                                    {
                                                      __break(0xC471u);
                                                      JUMPOUT(0x197E12F1CLL);
                                                    }
                                                    v1117 = (WTF *)WTF::fastMalloc((WTF *)(2 * v1224));
                                                    v1386[0] = v1117;
                                                    v1386[1] = (WTF *)__PAIR64__(v1115, v1224);
                                                    if (v1115 < 0x40)
                                                    {
                                                      v1118 = v1117;
                                                    }
                                                    else
                                                    {
                                                      v1118 = (WTF *)((char *)v1117
                                                                    + 2 * (v1115 & 0xFFFFFFC0));
                                                      v1225 = 0uLL;
                                                      v1226 = (char *)v1117;
                                                      do
                                                      {
                                                        v1406.val[0] = *(int8x16_t *)v1114;
                                                        v1227 = *((int8x16_t *)v1114 + 1);
                                                        v1410.val[0] = (int8x16_t)*((_OWORD *)v1114 + 2);
                                                        v1228 = *((_OWORD *)v1114 + 3);
                                                        v1114 = (WTF *)((char *)v1114 + 64);
                                                        v1229 = v1228;
                                                        v1410.val[1] = 0uLL;
                                                        v1414.val[0] = v1227;
                                                        v1406.val[1] = 0uLL;
                                                        v1230 = v1226;
                                                        vst2q_s8(v1230, v1406);
                                                        v1230 += 32;
                                                        v1414.val[1] = 0uLL;
                                                        vst2q_s8(v1230, v1414);
                                                        v1231 = v1226 + 64;
                                                        vst2q_s8(v1231, v1410);
                                                        v1232 = v1226 + 96;
                                                        vst2q_s8(v1232, *(int8x16x2_t *)(&v1225 - 1));
                                                        v1226 += 128;
                                                      }
                                                      while (v1226 != (char *)v1118);
                                                    }
                                                    v959 = v1349;
                                                    v960 = v1326;
LABEL_1474:
                                                    while (v1118 != (WTF *)((char *)v1117 + 2 * v1115))
                                                    {
                                                      v1119 = *(unsigned __int8 *)v1114;
                                                      v1114 = (WTF *)((char *)v1114 + 1);
                                                      *(_WORD *)v1118 = v1119;
                                                      v1118 = (WTF *)((char *)v1118 + 2);
                                                    }
                                                    v1114 = v1386[0];
                                                    v1115 = HIDWORD(v1386[1]);
LABEL_1477:
                                                    v1394 = (uint64_t)v1114;
                                                    v1395 = v1115;
                                                    JSC::IntlCache::getBestDateTimePattern(v1112, (int8x16_t **)&v1358, (UErrorCode *)v1382, (uint64_t)&__src);
                                                    v1125 = v1352;
                                                    if (v1352 != (WTF *)v1354)
                                                    {
                                                      if (v1352)
                                                      {
                                                        v1352 = 0;
                                                        LODWORD(v1353) = 0;
                                                        WTF::fastFree((unint64_t)v1125, v1120, v1121, v1122, v1123, v1124, v171, v172);
                                                      }
                                                      v1352 = (WTF *)v1354;
                                                    }
                                                    v166 = (WTF::AtomStringImpl *)__src.i64[0];
                                                    if ((_QWORD *)__src.i64[0] == v1351)
                                                    {
                                                      v1127 = __src.i32[3];
                                                      memcpy(v1354, (const void *)__src.i64[0], 2 * __src.u32[3]);
                                                      v1126 = __src.i32[2];
                                                    }
                                                    else
                                                    {
                                                      __src.i64[0] = (uint64_t)v1351;
                                                      v1352 = v166;
                                                      v1126 = __src.i32[2];
                                                      v1127 = __src.i32[3];
                                                      __src.i32[2] = 32;
                                                    }
                                                    __src.i32[3] = 0;
                                                    v1353 = __PAIR64__(v1127, v1126);
                                                    v1128 = v1386[0];
                                                    if (&v1387 != (__int128 *)v1386[0] && v1386[0])
                                                    {
                                                      v1386[0] = 0;
                                                      LODWORD(v1386[1]) = 0;
                                                      WTF::fastFree((unint64_t)v1128, v166, v1121, v1122, v1123, v1124, v171, v172);
                                                    }
                                                    v349 = (int *)v1342;
                                                    if (SLODWORD(v1382[0]) < 1)
                                                    {
                                                      if (v1109)
                                                      {
                                                        if (*(_DWORD *)v1109 == 2)
                                                        {
                                                          WTF::StringImpl::~StringImpl(v1109, v166, v1121, v1122, v1123, v1124, v171, v172);
                                                          WTF::fastFree(v1160, v1161, v1162, v1163, v1164, v1165, v1166, v1167);
                                                        }
                                                        else
                                                        {
                                                          *(_DWORD *)v1109 -= 2;
                                                        }
                                                      }
                                                      goto LABEL_1072;
                                                    }
                                                    JSC::throwTypeError(v12, &v1381, (uint64_t)"failed to initialize DateTimeFormat", 36);
                                                    if (v1109)
                                                    {
                                                      if (*(_DWORD *)v1109 == 2)
                                                      {
                                                        WTF::StringImpl::~StringImpl(v1109, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                                                        WTF::fastFree(v1152, v1153, v1154, v1155, v1156, v1157, v1158, v1159);
                                                      }
                                                      else
                                                      {
                                                        *(_DWORD *)v1109 -= 2;
                                                      }
                                                    }
                                                    goto LABEL_1224;
                                                  }
                                                  v1116 = v1115;
                                                }
                                                else
                                                {
                                                  v1114 = 0;
                                                  LODWORD(v1115) = 0;
                                                  v1116 = 0;
                                                  v1386[0] = (WTF *)&v1387;
                                                  LODWORD(v1386[1]) = 32;
                                                  v1395 = 0;
                                                  v1394 = 0;
                                                }
                                                HIDWORD(v1386[1]) = v1115;
                                                v1115 = v1116;
                                                v1117 = (WTF *)&v1387;
                                                v1118 = (WTF *)&v1387;
                                                goto LABEL_1474;
                                              default:
                                                goto LABEL_1461;
                                            }
                                          }
                                        }
                                        else if (v908 == (WTF *)10)
                                        {
                                          v1325 = 0;
                                          goto LABEL_1026;
                                        }
                                        if ((v910 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v910 + 5) != 2)
                                        {
                                          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1352, (JSC::JSGlobalObject *)v12, v167, v168, v169, v170, v171, v172, (int **)v1382);
                                          goto LABEL_994;
                                        }
                                        v913 = *(int **)(v910 + 8);
                                        if ((v913 & 1) != 0)
                                        {
                                          v913 = *JSC::JSRopeString::resolveRope(v910, (JSC::JSGlobalObject *)v12, (uint64_t)v167, v168, v909, v169, v170, v171, v172);
                                          if (!v913)
                                            goto LABEL_993;
                                        }
                                        else if (!v913)
                                        {
LABEL_993:
                                          v1382[0] = (WTF::StringImpl *)v913;
                                          if (!*(_DWORD *)(v907 + 80))
                                            goto LABEL_995;
LABEL_994:
                                          v1283 = *(_DWORD *)(v907 + 80);
                                          if ((v1283 & 0x27) != 0 && (v1283 & 0x20) == 0)
                                            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v907 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                                          v847 = v1344;
                                          if (*(_QWORD *)(v907 + 16))
                                          {
                                            v1325 = 0;
                                          }
                                          else
                                          {
LABEL_995:
                                            if (v1386[1])
                                              v914 = (char *)v1386[1] - 1;
                                            else
                                              v914 = 0;
                                            if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1386[0], (uint64_t)v914))
                                            {
                                              v915 = 0;
                                            }
                                            else
                                            {
                                              if (v1388)
                                                v916 = v1388 - 1;
                                              else
                                                v916 = 0;
                                              if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], *((unint64_t *)&v1387 + 1), v916))
                                              {
                                                v915 = 1;
                                              }
                                              else
                                              {
                                                if (v1391)
                                                  v917 = v1391 - 1;
                                                else
                                                  v917 = 0;
                                                if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1390, v917))
                                                {
                                                  v915 = 2;
                                                }
                                                else
                                                {
                                                  if (v1394)
                                                    v918 = v1394 - 1;
                                                  else
                                                    v918 = 0;
                                                  if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1393, v918))
                                                  {
                                                    v915 = 3;
                                                  }
                                                  else
                                                  {
                                                    if (v1397)
                                                      v919 = v1397 - 1;
                                                    else
                                                      v919 = 0;
                                                    if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1396, v919))
                                                    {
                                                      v915 = 4;
                                                    }
                                                    else
                                                    {
                                                      if (v1400)
                                                        v920 = v1400 - 1;
                                                      else
                                                        v920 = 0;
                                                      if (!WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1399, v920))
                                                      {
                                                        v1181 = WTF::fastCompactMalloc((WTF *)0x20);
                                                        *(_QWORD *)v1181 = 0x6300000002;
                                                        *(_QWORD *)(v1181 + 8) = "timeZoneName must be \"short\", \"long\""
                                                                                 ", \"shortOffset\", \"longOffset\", \"sh"
                                                                                 "ortGeneric\", or \"longGeneric\"";
                                                        *(_DWORD *)(v1181 + 16) = 4;
                                                        v1385 = (WTF::StringImpl *)v1181;
                                                        v1182 = v12;
                                                        v1185 = *(_QWORD *)(v12 + 128);
                                                        v1184 = v12 + 128;
                                                        v1183 = v1185;
                                                        v1186 = *(JSC::Heap ***)(v1184 - 72);
                                                        if ((v1185 & 1) != 0)
                                                        {
                                                          v1316 = *(uint64_t (**)(int8x16_t *))(v1183 & 0xFFFFFFFFFFFFFFFCLL);
                                                          if ((v1182 & 8) != 0)
                                                            v1317 = (uint64_t *)(v1182 - 16);
                                                          else
                                                            v1317 = (uint64_t *)(v1182 & 0xFFFFFFFFFFFFC000 | 8);
                                                          __src.i64[0] = *v1317;
                                                          __src.i64[1] = v1182;
                                                          v1351[0] = v1184;
                                                          v1183 = v1316(&__src);
                                                        }
                                                        v1187 = JSC::ErrorInstance::create(v1186, v1183, &v1385, 0, 0, 0, 2, 1);
                                                        v1194 = (JSC::Exception *)v1187;
                                                        if ((v1187 & 0xFFFE000000000002) != 0
                                                          || &JSC::Exception::s_info != (char **)(16
                                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v1187 & 0xFFFFFFFE) + 0x4C)))
                                                        {
                                                          v1194 = (JSC::Exception *)JSC::Exception::create(v907, (JSC::VM *)v1187, 0, v1188, v1189, v1190, v1191, v1192);
                                                        }
                                                        v12 = v1182;
                                                        JSC::VM::throwException((JSC::VM *)v907, (JSC::JSGlobalObject *)v1182, v1194, v1193, v1188, v1189, v1190, v1191, v1192);
                                                        v1195 = v1385;
                                                        v1385 = 0;
                                                        if (v1195)
                                                        {
                                                          if (*(_DWORD *)v1195 == 2)
                                                          {
                                                            WTF::StringImpl::~StringImpl(v1195, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                                                            WTF::fastFree(v1235, v1236, v1237, v1238, v1239, v1240, v1241, v1242);
                                                          }
                                                          else
                                                          {
                                                            *(_DWORD *)v1195 -= 2;
                                                          }
                                                        }
                                                        v1325 = 0;
                                                        v847 = v1344;
                                                        goto LABEL_1023;
                                                      }
                                                      v915 = 5;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            v1325 = LOBYTE(v1386[3 * v915 + 2]);
                                          }
LABEL_1023:
                                          v921 = v1382[0];
                                          v1382[0] = 0;
                                          if (v921)
                                          {
                                            if (*(_DWORD *)v921 == 2)
                                            {
                                              WTF::StringImpl::~StringImpl(v921, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                                              WTF::fastFree(v1032, v1033, v1034, v1035, v1036, v1037, v1038, v1039);
                                            }
                                            else
                                            {
                                              *(_DWORD *)v921 -= 2;
                                            }
                                          }
                                          goto LABEL_1026;
                                        }
                                        *v913 += 2;
                                        goto LABEL_993;
                                      }
                                    }
LABEL_1647:
                                    v349 = (int *)v1342;
                                    if (!v1342)
                                      goto LABEL_1229;
                                    goto LABEL_1227;
                                  }
                                  *v866 += 2;
                                  goto LABEL_940;
                                }
                                v804 = *(_QWORD *)(v12 + 56);
                                v805 = (WTF *)JSC::JSObject::get((unsigned int *)v11, v12, (unint64_t)v167, v168, v169, v170, v171, v172);
                                v807 = (unint64_t)v805;
                                v1352 = v805;
                                if (*(_DWORD *)(v804 + 80))
                                {
                                  v825 = *(_DWORD *)(v804 + 80);
                                  if ((v825 & 0x27) != 0 && (v825 & 0x20) == 0)
                                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v804 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                                  v1330 = 0;
                                  if (*(_QWORD *)(v804 + 16) || v807 == 10)
                                    goto LABEL_917;
                                }
                                else if (v805 == (WTF *)10)
                                {
                                  v1330 = 0;
LABEL_917:
                                  v803 = v1381;
                                  goto LABEL_918;
                                }
                                if ((v807 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v807 + 5) != 2)
                                {
                                  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1352, (JSC::JSGlobalObject *)v12, v167, v168, v169, v170, v171, v172, (int **)v1382);
                                  goto LABEL_897;
                                }
                                v826 = *(int **)(v807 + 8);
                                if ((v826 & 1) != 0)
                                {
                                  v826 = *JSC::JSRopeString::resolveRope(v807, (JSC::JSGlobalObject *)v12, (uint64_t)v167, v168, v806, v169, v170, v171, v172);
                                  if (!v826)
                                    goto LABEL_896;
                                }
                                else if (!v826)
                                {
LABEL_896:
                                  v1382[0] = (WTF::StringImpl *)v826;
LABEL_897:
                                  if (!*(_DWORD *)(v804 + 80))
                                    goto LABEL_898;
                                  v1281 = *(_DWORD *)(v804 + 80);
                                  if ((v1281 & 0x27) != 0 && (v1281 & 0x20) == 0)
                                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v804 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                                  if (!*(_QWORD *)(v804 + 16))
                                  {
LABEL_898:
                                    if (v1386[1])
                                      v827 = (char *)v1386[1] - 1;
                                    else
                                      v827 = 0;
                                    if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1386[0], (uint64_t)v827))
                                    {
                                      v828 = 0;
LABEL_906:
                                      v1330 = LOBYTE(v1386[3 * v828 + 2]);
                                      goto LABEL_914;
                                    }
                                    if (v1388)
                                      v829 = v1388 - 1;
                                    else
                                      v829 = 0;
                                    if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], *((unint64_t *)&v1387 + 1), v829))
                                    {
                                      v828 = 1;
                                      goto LABEL_906;
                                    }
                                    v830 = WTF::fastCompactMalloc((WTF *)0x20);
                                    *(_QWORD *)v830 = 0x2500000002;
                                    *(_QWORD *)(v830 + 8) = "minute must be \"2-digit\" or \"numeric\"";
                                    *(_DWORD *)(v830 + 16) = 4;
                                    v1385 = (WTF::StringImpl *)v830;
                                    v831 = *(_QWORD *)(v12 + 128);
                                    v832 = *(JSC::Heap ***)(v12 + 56);
                                    if ((v831 & 1) != 0)
                                    {
                                      v1290 = *(uint64_t (**)(int8x16_t *))(v831 & 0xFFFFFFFFFFFFFFFCLL);
                                      if ((v12 & 8) != 0)
                                        v1291 = (uint64_t *)(v12 - 16);
                                      else
                                        v1291 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
                                      __src.i64[0] = *v1291;
                                      __src.i64[1] = v12;
                                      v1351[0] = v12 + 128;
                                      v831 = v1290(&__src);
                                    }
                                    v833 = JSC::ErrorInstance::create(v832, v831, &v1385, 0, 0, 0, 2, 1);
                                    v840 = (JSC::Exception *)v833;
                                    if ((v833 & 0xFFFE000000000002) != 0
                                      || &JSC::Exception::s_info != (char **)(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v833 & 0xFFFFFFFE)
                                                                                              + 0x4C)))
                                    {
                                      v840 = (JSC::Exception *)JSC::Exception::create(v804, (JSC::VM *)v833, 0, v834, v835, v836, v837, v838);
                                    }
                                    JSC::VM::throwException((JSC::VM *)v804, (JSC::JSGlobalObject *)v12, v840, v839, v834, v835, v836, v837, v838);
                                    v841 = v1385;
                                    v1385 = 0;
                                    if (v841)
                                    {
                                      if (*(_DWORD *)v841 == 2)
                                      {
                                        WTF::StringImpl::~StringImpl(v841, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                                        WTF::fastFree(v856, v857, v858, v859, v860, v861, v862, v863);
                                      }
                                      else
                                      {
                                        *(_DWORD *)v841 -= 2;
                                      }
                                    }
                                  }
                                  v1330 = 0;
LABEL_914:
                                  v842 = v1382[0];
                                  v1382[0] = 0;
                                  if (v842)
                                  {
                                    if (*(_DWORD *)v842 == 2)
                                    {
                                      WTF::StringImpl::~StringImpl(v842, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                                      WTF::fastFree(v848, v849, v850, v851, v852, v853, v854, v855);
                                    }
                                    else
                                    {
                                      *(_DWORD *)v842 -= 2;
                                    }
                                  }
                                  goto LABEL_917;
                                }
                                *v826 += 2;
                                goto LABEL_896;
                              }
                            }
                            else if (v753 == (WTF *)10)
                            {
LABEL_829:
                              v1331 = 0;
                              goto LABEL_874;
                            }
                            if ((v755 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v755 + 5) != 2)
                            {
                              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1352, (JSC::JSGlobalObject *)v12, v167, v168, v169, v170, v171, v172, (int **)v1382);
                              goto LABEL_854;
                            }
                            v786 = *(int **)(v755 + 8);
                            if ((v786 & 1) != 0)
                            {
                              v786 = *JSC::JSRopeString::resolveRope(v755, (JSC::JSGlobalObject *)v12, (uint64_t)v167, v168, v754, v169, v170, v171, v172);
                              if (!v786)
                                goto LABEL_853;
                            }
                            else if (!v786)
                            {
LABEL_853:
                              v1382[0] = (WTF::StringImpl *)v786;
LABEL_854:
                              if (!*(_DWORD *)(v752 + 80))
                                goto LABEL_855;
                              v1280 = *(_DWORD *)(v752 + 80);
                              if ((v1280 & 0x27) != 0 && (v1280 & 0x20) == 0)
                                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v752 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                              if (!*(_QWORD *)(v752 + 16))
                              {
LABEL_855:
                                if (v1386[1])
                                  v787 = (char *)v1386[1] - 1;
                                else
                                  v787 = 0;
                                if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1386[0], (uint64_t)v787))
                                {
                                  v788 = 0;
LABEL_863:
                                  v1331 = LOBYTE(v1386[3 * v788 + 2]);
                                  goto LABEL_871;
                                }
                                if (v1388)
                                  v789 = v1388 - 1;
                                else
                                  v789 = 0;
                                if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], *((unint64_t *)&v1387 + 1), v789))
                                {
                                  v788 = 1;
                                  goto LABEL_863;
                                }
                                v790 = WTF::fastCompactMalloc((WTF *)0x20);
                                *(_QWORD *)v790 = 0x2300000002;
                                *(_QWORD *)(v790 + 8) = "hour must be \"2-digit\" or \"numeric\"";
                                *(_DWORD *)(v790 + 16) = 4;
                                v1385 = (WTF::StringImpl *)v790;
                                v791 = *(_QWORD *)(v12 + 128);
                                v792 = *(JSC::Heap ***)(v12 + 56);
                                if ((v791 & 1) != 0)
                                {
                                  v1288 = *(uint64_t (**)(int8x16_t *))(v791 & 0xFFFFFFFFFFFFFFFCLL);
                                  if ((v12 & 8) != 0)
                                    v1289 = (uint64_t *)(v12 - 16);
                                  else
                                    v1289 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
                                  __src.i64[0] = *v1289;
                                  __src.i64[1] = v12;
                                  v1351[0] = v12 + 128;
                                  v791 = v1288(&__src);
                                }
                                v793 = JSC::ErrorInstance::create(v792, v791, &v1385, 0, 0, 0, 2, 1);
                                v800 = (JSC::Exception *)v793;
                                if ((v793 & 0xFFFE000000000002) != 0
                                  || &JSC::Exception::s_info != (char **)(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v793 & 0xFFFFFFFE)
                                                                                          + 0x4C)))
                                {
                                  v800 = (JSC::Exception *)JSC::Exception::create(v752, (JSC::VM *)v793, 0, v794, v795, v796, v797, v798);
                                }
                                JSC::VM::throwException((JSC::VM *)v752, (JSC::JSGlobalObject *)v12, v800, v799, v794, v795, v796, v797, v798);
                                v801 = v1385;
                                v1385 = 0;
                                if (v801)
                                {
                                  if (*(_DWORD *)v801 == 2)
                                  {
                                    WTF::StringImpl::~StringImpl(v801, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                                    WTF::fastFree(v816, v817, v818, v819, v820, v821, v822, v823);
                                  }
                                  else
                                  {
                                    *(_DWORD *)v801 -= 2;
                                  }
                                }
                              }
                              v1331 = 0;
LABEL_871:
                              v802 = v1382[0];
                              v1382[0] = 0;
                              if (v802)
                              {
                                if (*(_DWORD *)v802 == 2)
                                {
                                  WTF::StringImpl::~StringImpl(v802, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                                  WTF::fastFree(v808, v809, v810, v811, v812, v813, v814, v815);
                                }
                                else
                                {
                                  *(_DWORD *)v802 -= 2;
                                }
                              }
                              goto LABEL_874;
                            }
                            *v786 += 2;
                            goto LABEL_853;
                          }
                          v723 = *(_QWORD *)(v12 + 56);
                          v724 = (WTF *)JSC::JSObject::get((unsigned int *)v11, v12, (unint64_t)v167, v168, v169, v170, v171, v172);
                          v726 = (unint64_t)v724;
                          v1352 = v724;
                          if (*(_DWORD *)(v723 + 80))
                          {
                            v744 = *(_DWORD *)(v723 + 80);
                            if ((v744 & 0x27) != 0 && (v744 & 0x20) == 0)
                              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v723 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                            v1337 = 0;
                            if (*(_QWORD *)(v723 + 16) || v726 == 10)
                              goto LABEL_824;
                          }
                          else if (v724 == (WTF *)10)
                          {
                            v1337 = 0;
LABEL_824:
                            v722 = v1381;
                            goto LABEL_825;
                          }
                          if ((v726 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v726 + 5) != 2)
                          {
                            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1352, (JSC::JSGlobalObject *)v12, v167, v168, v169, v170, v171, v172, (int **)v1382);
                            goto LABEL_806;
                          }
                          v745 = *(int **)(v726 + 8);
                          if ((v745 & 1) != 0)
                          {
                            v745 = *JSC::JSRopeString::resolveRope(v726, (JSC::JSGlobalObject *)v12, (uint64_t)v167, v168, v725, v169, v170, v171, v172);
                            if (!v745)
                              goto LABEL_805;
                          }
                          else if (!v745)
                          {
LABEL_805:
                            v1382[0] = (WTF::StringImpl *)v745;
LABEL_806:
                            if (!*(_DWORD *)(v723 + 80))
                              goto LABEL_807;
                            v1279 = *(_DWORD *)(v723 + 80);
                            if ((v1279 & 0x27) != 0 && (v1279 & 0x20) == 0)
                              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v723 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                            if (!*(_QWORD *)(v723 + 16))
                            {
LABEL_807:
                              if (v1386[1])
                                v746 = (char *)v1386[1] - 1;
                              else
                                v746 = 0;
                              if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1386[0], (uint64_t)v746))
                              {
                                v747 = 0;
LABEL_819:
                                v750 = LOBYTE(v1386[3 * v747 + 2]);
LABEL_820:
                                v751 = v1382[0];
                                v1382[0] = 0;
                                if (v751)
                                {
                                  if (*(_DWORD *)v751 == 2)
                                  {
                                    WTF::StringImpl::~StringImpl(v751, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                                    WTF::fastFree(v756, v757, v758, v759, v760, v761, v762, v763);
                                  }
                                  else
                                  {
                                    *(_DWORD *)v751 -= 2;
                                  }
                                }
                                v1337 = v750;
                                goto LABEL_824;
                              }
                              if (v1388)
                                v748 = v1388 - 1;
                              else
                                v748 = 0;
                              if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], *((unint64_t *)&v1387 + 1), v748))
                              {
                                v747 = 1;
                                goto LABEL_819;
                              }
                              if (v1391)
                                v749 = v1391 - 1;
                              else
                                v749 = 0;
                              if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1390, v749))
                              {
                                v747 = 2;
                                goto LABEL_819;
                              }
                              v764 = WTF::fastCompactMalloc((WTF *)0x20);
                              *(_QWORD *)v764 = 0x2E00000002;
                              *(_QWORD *)(v764 + 8) = "dayPeriod must be \"narrow\", \"short\", or \"long\"";
                              *(_DWORD *)(v764 + 16) = 4;
                              v1385 = (WTF::StringImpl *)v764;
                              v765 = *(_QWORD *)(v12 + 128);
                              v766 = *(JSC::Heap ***)(v12 + 56);
                              if ((v765 & 1) != 0)
                              {
                                v1312 = *(uint64_t (**)(int8x16_t *))(v765 & 0xFFFFFFFFFFFFFFFCLL);
                                if ((v12 & 8) != 0)
                                  v1313 = (uint64_t *)(v12 - 16);
                                else
                                  v1313 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
                                __src.i64[0] = *v1313;
                                __src.i64[1] = v12;
                                v1351[0] = v12 + 128;
                                v765 = v1312(&__src);
                              }
                              v767 = JSC::ErrorInstance::create(v766, v765, &v1385, 0, 0, 0, 2, 1);
                              v774 = (JSC::Exception *)v767;
                              if ((v767 & 0xFFFE000000000002) != 0
                                || &JSC::Exception::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)v767 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
                              {
                                v774 = (JSC::Exception *)JSC::Exception::create(v723, (JSC::VM *)v767, 0, v768, v769, v770, v771, v772);
                              }
                              JSC::VM::throwException((JSC::VM *)v723, (JSC::JSGlobalObject *)v12, v774, v773, v768, v769, v770, v771, v772);
                              v775 = v1385;
                              v1385 = 0;
                              if (v775)
                              {
                                if (*(_DWORD *)v775 == 2)
                                {
                                  WTF::StringImpl::~StringImpl(v775, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                                  WTF::fastFree(v776, v777, v778, v779, v780, v781, v782, v783);
                                }
                                else
                                {
                                  *(_DWORD *)v775 -= 2;
                                }
                              }
                            }
                            v750 = 0;
                            goto LABEL_820;
                          }
                          *v745 += 2;
                          goto LABEL_805;
                        }
                      }
                      else if (v672 == (WTF *)10)
                      {
                        v1328 = 0;
                        goto LABEL_783;
                      }
                      if ((v674 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v674 + 5) != 2)
                      {
                        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1352, (JSC::JSGlobalObject *)v12, v167, v168, v169, v170, v171, v172, (int **)v1382);
                        goto LABEL_763;
                      }
                      v705 = *(int **)(v674 + 8);
                      if ((v705 & 1) != 0)
                      {
                        v705 = *JSC::JSRopeString::resolveRope(v674, (JSC::JSGlobalObject *)v12, (uint64_t)v167, v168, v673, v169, v170, v171, v172);
                        if (!v705)
                          goto LABEL_762;
                      }
                      else if (!v705)
                      {
LABEL_762:
                        v1382[0] = (WTF::StringImpl *)v705;
LABEL_763:
                        if (!*(_DWORD *)(v671 + 80))
                          goto LABEL_764;
                        v1278 = *(_DWORD *)(v671 + 80);
                        if ((v1278 & 0x27) != 0 && (v1278 & 0x20) == 0)
                          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v671 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                        if (!*(_QWORD *)(v671 + 16))
                        {
LABEL_764:
                          if (v1386[1])
                            v706 = (char *)v1386[1] - 1;
                          else
                            v706 = 0;
                          if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1386[0], (uint64_t)v706))
                          {
                            v707 = 0;
LABEL_772:
                            v1328 = LOBYTE(v1386[3 * v707 + 2]);
                            goto LABEL_780;
                          }
                          if (v1388)
                            v708 = v1388 - 1;
                          else
                            v708 = 0;
                          if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], *((unint64_t *)&v1387 + 1), v708))
                          {
                            v707 = 1;
                            goto LABEL_772;
                          }
                          v709 = WTF::fastCompactMalloc((WTF *)0x20);
                          *(_QWORD *)v709 = 0x2200000002;
                          *(_QWORD *)(v709 + 8) = "day must be \"2-digit\" or \"numeric\"";
                          *(_DWORD *)(v709 + 16) = 4;
                          v1385 = (WTF::StringImpl *)v709;
                          v710 = *(_QWORD *)(v12 + 128);
                          v711 = *(JSC::Heap ***)(v12 + 56);
                          if ((v710 & 1) != 0)
                          {
                            v1286 = *(uint64_t (**)(int8x16_t *))(v710 & 0xFFFFFFFFFFFFFFFCLL);
                            if ((v12 & 8) != 0)
                              v1287 = (uint64_t *)(v12 - 16);
                            else
                              v1287 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
                            __src.i64[0] = *v1287;
                            __src.i64[1] = v12;
                            v1351[0] = v12 + 128;
                            v710 = v1286(&__src);
                          }
                          v712 = JSC::ErrorInstance::create(v711, v710, &v1385, 0, 0, 0, 2, 1);
                          v719 = (JSC::Exception *)v712;
                          if ((v712 & 0xFFFE000000000002) != 0
                            || &JSC::Exception::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v712 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
                          {
                            v719 = (JSC::Exception *)JSC::Exception::create(v671, (JSC::VM *)v712, 0, v713, v714, v715, v716, v717);
                          }
                          JSC::VM::throwException((JSC::VM *)v671, (JSC::JSGlobalObject *)v12, v719, v718, v713, v714, v715, v716, v717);
                          v720 = v1385;
                          v1385 = 0;
                          if (v720)
                          {
                            if (*(_DWORD *)v720 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v720, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                              WTF::fastFree(v735, v736, v737, v738, v739, v740, v741, v742);
                            }
                            else
                            {
                              *(_DWORD *)v720 -= 2;
                            }
                          }
                        }
                        v1328 = 0;
LABEL_780:
                        v721 = v1382[0];
                        v1382[0] = 0;
                        if (v721)
                        {
                          if (*(_DWORD *)v721 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v721, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                            WTF::fastFree(v727, v728, v729, v730, v731, v732, v733, v734);
                          }
                          else
                          {
                            *(_DWORD *)v721 -= 2;
                          }
                        }
                        goto LABEL_783;
                      }
                      *v705 += 2;
                      goto LABEL_762;
                    }
                    v641 = *(_QWORD *)(v12 + 56);
                    v642 = (WTF *)JSC::JSObject::get((unsigned int *)v11, v12, (unint64_t)v167, v168, v169, v170, v171, v172);
                    v644 = (unint64_t)v642;
                    v1352 = v642;
                    if (*(_DWORD *)(v641 + 80))
                    {
                      v662 = *(_DWORD *)(v641 + 80);
                      if ((v662 & 0x27) != 0 && (v662 & 0x20) == 0)
                        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v641 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                      v1329 = 0;
                      if (*(_QWORD *)(v641 + 16) || v644 == 10)
                        goto LABEL_735;
                    }
                    else if (v642 == (WTF *)10)
                    {
                      v1329 = 0;
LABEL_735:
                      v640 = v1381;
                      goto LABEL_736;
                    }
                    if ((v644 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v644 + 5) != 2)
                    {
                      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1352, (JSC::JSGlobalObject *)v12, v167, v168, v169, v170, v171, v172, (int **)v1382);
                      goto LABEL_708;
                    }
                    v663 = *(int **)(v644 + 8);
                    if ((v663 & 1) != 0)
                    {
                      v663 = *JSC::JSRopeString::resolveRope(v644, (JSC::JSGlobalObject *)v12, (uint64_t)v167, v168, v643, v169, v170, v171, v172);
                      if (!v663)
                        goto LABEL_707;
                    }
                    else if (!v663)
                    {
LABEL_707:
                      v1382[0] = (WTF::StringImpl *)v663;
LABEL_708:
                      if (!*(_DWORD *)(v641 + 80))
                        goto LABEL_709;
                      v1277 = *(_DWORD *)(v641 + 80);
                      if ((v1277 & 0x27) != 0 && (v1277 & 0x20) == 0)
                        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v641 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                      if (!*(_QWORD *)(v641 + 16))
                      {
LABEL_709:
                        if (v1386[1])
                          v664 = (char *)v1386[1] - 1;
                        else
                          v664 = 0;
                        if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1386[0], (uint64_t)v664))
                        {
                          v665 = 0;
LABEL_731:
                          v1329 = LOBYTE(v1386[3 * v665 + 2]);
                          goto LABEL_732;
                        }
                        if (v1388)
                          v666 = v1388 - 1;
                        else
                          v666 = 0;
                        if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], *((unint64_t *)&v1387 + 1), v666))
                        {
                          v665 = 1;
                          goto LABEL_731;
                        }
                        if (v1391)
                          v667 = v1391 - 1;
                        else
                          v667 = 0;
                        if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1390, v667))
                        {
                          v665 = 2;
                          goto LABEL_731;
                        }
                        if (v1394)
                          v668 = v1394 - 1;
                        else
                          v668 = 0;
                        if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1393, v668))
                        {
                          v665 = 3;
                          goto LABEL_731;
                        }
                        if (v1397)
                          v669 = v1397 - 1;
                        else
                          v669 = 0;
                        v665 = 4;
                        if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1396, v669))
                          goto LABEL_731;
                        v683 = WTF::fastCompactMalloc((WTF *)0x20);
                        *(_QWORD *)v683 = 0x4000000002;
                        *(_QWORD *)(v683 + 8) = "month must be \"2-digit\", \"numeric\", \"narrow\", \"short\", or \"long\"";
                        *(_DWORD *)(v683 + 16) = 4;
                        v1385 = (WTF::StringImpl *)v683;
                        v684 = *(_QWORD *)(v12 + 128);
                        v685 = *(JSC::Heap ***)(v12 + 56);
                        if ((v684 & 1) != 0)
                        {
                          v1314 = *(uint64_t (**)(int8x16_t *))(v684 & 0xFFFFFFFFFFFFFFFCLL);
                          if ((v12 & 8) != 0)
                            v1315 = (uint64_t *)(v12 - 16);
                          else
                            v1315 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
                          __src.i64[0] = *v1315;
                          __src.i64[1] = v12;
                          v1351[0] = v12 + 128;
                          v684 = v1314(&__src);
                        }
                        v686 = JSC::ErrorInstance::create(v685, v684, &v1385, 0, 0, 0, 2, 1);
                        v693 = (JSC::Exception *)v686;
                        if ((v686 & 0xFFFE000000000002) != 0
                          || &JSC::Exception::s_info != (char **)(16
                                                                * *(unsigned int *)(16
                                                                                  * (*(_DWORD *)v686 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
                        {
                          v693 = (JSC::Exception *)JSC::Exception::create(v641, (JSC::VM *)v686, 0, v687, v688, v689, v690, v691);
                        }
                        JSC::VM::throwException((JSC::VM *)v641, (JSC::JSGlobalObject *)v12, v693, v692, v687, v688, v689, v690, v691);
                        v694 = v1385;
                        v1385 = 0;
                        if (v694)
                        {
                          if (*(_DWORD *)v694 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v694, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                            WTF::fastFree(v695, v696, v697, v698, v699, v700, v701, v702);
                          }
                          else
                          {
                            *(_DWORD *)v694 -= 2;
                          }
                        }
                      }
                      v1329 = 0;
LABEL_732:
                      v670 = v1382[0];
                      v1382[0] = 0;
                      if (v670)
                      {
                        if (*(_DWORD *)v670 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v670, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                          WTF::fastFree(v675, v676, v677, v678, v679, v680, v681, v682);
                        }
                        else
                        {
                          *(_DWORD *)v670 -= 2;
                        }
                      }
                      goto LABEL_735;
                    }
                    *v663 += 2;
                    goto LABEL_707;
                  }
                }
                else if (v590 == (WTF *)10)
                {
                  v1332 = 0;
                  goto LABEL_685;
                }
                if ((v592 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v592 + 5) != 2)
                {
                  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1352, (JSC::JSGlobalObject *)v12, v167, v168, v169, v170, v171, v172, (int **)v1382);
                  goto LABEL_665;
                }
                v623 = *(int **)(v592 + 8);
                if ((v623 & 1) != 0)
                {
                  v623 = *JSC::JSRopeString::resolveRope(v592, (JSC::JSGlobalObject *)v12, (uint64_t)v167, v168, v591, v169, v170, v171, v172);
                  if (!v623)
                    goto LABEL_664;
                }
                else if (!v623)
                {
LABEL_664:
                  v1382[0] = (WTF::StringImpl *)v623;
LABEL_665:
                  if (!*(_DWORD *)(v589 + 80))
                    goto LABEL_666;
                  v1276 = *(_DWORD *)(v589 + 80);
                  if ((v1276 & 0x27) != 0 && (v1276 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v589 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                  if (!*(_QWORD *)(v589 + 16))
                  {
LABEL_666:
                    if (v1386[1])
                      v624 = (char *)v1386[1] - 1;
                    else
                      v624 = 0;
                    if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1386[0], (uint64_t)v624))
                    {
                      v625 = 0;
LABEL_674:
                      v1332 = LOBYTE(v1386[3 * v625 + 2]);
                      goto LABEL_682;
                    }
                    if (v1388)
                      v626 = v1388 - 1;
                    else
                      v626 = 0;
                    if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], *((unint64_t *)&v1387 + 1), v626))
                    {
                      v625 = 1;
                      goto LABEL_674;
                    }
                    v627 = WTF::fastCompactMalloc((WTF *)0x20);
                    *(_QWORD *)v627 = 0x2300000002;
                    *(_QWORD *)(v627 + 8) = "year must be \"2-digit\" or \"numeric\"";
                    *(_DWORD *)(v627 + 16) = 4;
                    v1385 = (WTF::StringImpl *)v627;
                    v628 = *(_QWORD *)(v12 + 128);
                    v629 = *(JSC::Heap ***)(v12 + 56);
                    if ((v628 & 1) != 0)
                    {
                      v1284 = *(uint64_t (**)(int8x16_t *))(v628 & 0xFFFFFFFFFFFFFFFCLL);
                      if ((v12 & 8) != 0)
                        v1285 = (uint64_t *)(v12 - 16);
                      else
                        v1285 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
                      __src.i64[0] = *v1285;
                      __src.i64[1] = v12;
                      v1351[0] = v12 + 128;
                      v628 = v1284(&__src);
                    }
                    v630 = JSC::ErrorInstance::create(v629, v628, &v1385, 0, 0, 0, 2, 1);
                    v637 = (JSC::Exception *)v630;
                    if ((v630 & 0xFFFE000000000002) != 0
                      || &JSC::Exception::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v630 & 0xFFFFFFFE)
                                                                              + 0x4C)))
                    {
                      v637 = (JSC::Exception *)JSC::Exception::create(v589, (JSC::VM *)v630, 0, v631, v632, v633, v634, v635);
                    }
                    JSC::VM::throwException((JSC::VM *)v589, (JSC::JSGlobalObject *)v12, v637, v636, v631, v632, v633, v634, v635);
                    v638 = v1385;
                    v1385 = 0;
                    if (v638)
                    {
                      if (*(_DWORD *)v638 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v638, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                        WTF::fastFree(v653, v654, v655, v656, v657, v658, v659, v660);
                      }
                      else
                      {
                        *(_DWORD *)v638 -= 2;
                      }
                    }
                  }
                  v1332 = 0;
LABEL_682:
                  v639 = v1382[0];
                  v1382[0] = 0;
                  if (v639)
                  {
                    if (*(_DWORD *)v639 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v639, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                      WTF::fastFree(v645, v646, v647, v648, v649, v650, v651, v652);
                    }
                    else
                    {
                      *(_DWORD *)v639 -= 2;
                    }
                  }
                  goto LABEL_685;
                }
                *v623 += 2;
                goto LABEL_664;
              }
              v548 = *(_QWORD *)(v12 + 56);
              v549 = (WTF *)JSC::JSObject::get((unsigned int *)v11, v12, (unint64_t)v167, v168, v169, v170, v171, v172);
              v551 = (unint64_t)v549;
              v1352 = v549;
              if (*(_DWORD *)(v548 + 80))
              {
                v581 = *(_DWORD *)(v548 + 80);
                if ((v581 & 0x27) != 0 && (v581 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v548 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                v1333 = 0;
                if (*(_QWORD *)(v548 + 16))
                {
                  v547 = v1344;
                  goto LABEL_634;
                }
                v547 = v1344;
                if (v551 == 10)
                {
LABEL_634:
                  v546 = v1381;
                  goto LABEL_635;
                }
              }
              else if (v549 == (WTF *)10)
              {
                v1333 = 0;
                goto LABEL_634;
              }
              if ((v551 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v551 + 5) != 2)
              {
                JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1352, (JSC::JSGlobalObject *)v12, v167, v168, v169, v170, v171, v172, (int **)v1382);
                goto LABEL_617;
              }
              v582 = *(int **)(v551 + 8);
              if ((v582 & 1) != 0)
              {
                v582 = *JSC::JSRopeString::resolveRope(v551, (JSC::JSGlobalObject *)v12, (uint64_t)v167, v168, v550, v169, v170, v171, v172);
                if (!v582)
                  goto LABEL_616;
              }
              else if (!v582)
              {
LABEL_616:
                v1382[0] = (WTF::StringImpl *)v582;
LABEL_617:
                if (!*(_DWORD *)(v548 + 80))
                  goto LABEL_618;
                v1275 = *(_DWORD *)(v548 + 80);
                if ((v1275 & 0x27) != 0 && (v1275 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v548 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                v547 = v1344;
                if (!*(_QWORD *)(v548 + 16))
                {
LABEL_618:
                  if (v1386[1])
                    v583 = (char *)v1386[1] - 1;
                  else
                    v583 = 0;
                  if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1386[0], (uint64_t)v583))
                  {
                    v584 = 0;
LABEL_630:
                    v587 = LOBYTE(v1386[3 * v584 + 2]);
                    goto LABEL_631;
                  }
                  if (v1388)
                    v585 = v1388 - 1;
                  else
                    v585 = 0;
                  if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], *((unint64_t *)&v1387 + 1), v585))
                  {
                    v584 = 1;
                    goto LABEL_630;
                  }
                  if (v1391)
                    v586 = v1391 - 1;
                  else
                    v586 = 0;
                  if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1390, v586))
                  {
                    v584 = 2;
                    goto LABEL_630;
                  }
                  v601 = WTF::fastCompactMalloc((WTF *)0x20);
                  *(_QWORD *)v601 = 0x2800000002;
                  *(_QWORD *)(v601 + 8) = "era must be \"narrow\", \"short\", or \"long\"";
                  *(_DWORD *)(v601 + 16) = 4;
                  v1385 = (WTF::StringImpl *)v601;
                  v602 = *(_QWORD *)(v12 + 128);
                  v603 = *(JSC::Heap ***)(v12 + 56);
                  if ((v602 & 1) != 0)
                  {
                    v1310 = *(uint64_t (**)(int8x16_t *))(v602 & 0xFFFFFFFFFFFFFFFCLL);
                    if ((v12 & 8) != 0)
                      v1311 = (uint64_t *)(v12 - 16);
                    else
                      v1311 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
                    __src.i64[0] = *v1311;
                    __src.i64[1] = v12;
                    v1351[0] = v12 + 128;
                    v602 = v1310(&__src);
                    v547 = v1344;
                  }
                  v604 = JSC::ErrorInstance::create(v603, v602, &v1385, 0, 0, 0, 2, 1);
                  v611 = (JSC::Exception *)v604;
                  if ((v604 & 0xFFFE000000000002) != 0
                    || &JSC::Exception::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v604 & 0xFFFFFFFE)
                                                                            + 0x4C)))
                  {
                    v611 = (JSC::Exception *)JSC::Exception::create(v548, (JSC::VM *)v604, 0, v605, v606, v607, v608, v609);
                  }
                  JSC::VM::throwException((JSC::VM *)v548, (JSC::JSGlobalObject *)v12, v611, v610, v605, v606, v607, v608, v609);
                  v612 = v1385;
                  v1385 = 0;
                  if (v612)
                  {
                    if (*(_DWORD *)v612 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v612, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                      WTF::fastFree(v613, v614, v615, v616, v617, v618, v619, v620);
                    }
                    else
                    {
                      *(_DWORD *)v612 -= 2;
                    }
                  }
                }
                v587 = 0;
LABEL_631:
                v1333 = v587;
                v588 = v1382[0];
                v1382[0] = 0;
                if (v588)
                {
                  if (*(_DWORD *)v588 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v588, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                    WTF::fastFree(v593, v594, v595, v596, v597, v598, v599, v600);
                  }
                  else
                  {
                    *(_DWORD *)v588 -= 2;
                  }
                }
                goto LABEL_634;
              }
              *v582 += 2;
              goto LABEL_616;
            }
          }
          else if (v418 == (WTF *)10)
          {
            v1334 = 0;
            goto LABEL_587;
          }
          if ((v420 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v420 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1352, (JSC::JSGlobalObject *)v12, v167, v168, v169, v170, v171, v172, (int **)v1382);
            goto LABEL_570;
          }
          v539 = *(int **)(v420 + 8);
          if ((v539 & 1) != 0)
          {
            v539 = *JSC::JSRopeString::resolveRope(v420, (JSC::JSGlobalObject *)v12, (uint64_t)v167, v168, v419, v169, v170, v171, v172);
            if (!v539)
              goto LABEL_569;
          }
          else if (!v539)
          {
LABEL_569:
            v1382[0] = (WTF::StringImpl *)v539;
LABEL_570:
            if (!*(_DWORD *)(v417 + 80))
              goto LABEL_571;
            v1274 = *(_DWORD *)(v417 + 80);
            if ((v1274 & 0x27) != 0 && (v1274 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v417 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
            if (!*(_QWORD *)(v417 + 16))
            {
LABEL_571:
              if (v1386[1])
                v540 = (char *)v1386[1] - 1;
              else
                v540 = 0;
              if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1386[0], (uint64_t)v540))
              {
                v541 = 0;
LABEL_583:
                v544 = LOBYTE(v1386[3 * v541 + 2]);
                goto LABEL_584;
              }
              if (v1388)
                v542 = v1388 - 1;
              else
                v542 = 0;
              if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], *((unint64_t *)&v1387 + 1), v542))
              {
                v541 = 1;
                goto LABEL_583;
              }
              if (v1391)
                v543 = v1391 - 1;
              else
                v543 = 0;
              if (WTF::equalInternal<unsigned char>((uint64_t)v1382[0], (unint64_t)v1390, v543))
              {
                v541 = 2;
                goto LABEL_583;
              }
              v560 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v560 = 0x2C00000002;
              *(_QWORD *)(v560 + 8) = "weekday must be \"narrow\", \"short\", or \"long\"";
              *(_DWORD *)(v560 + 16) = 4;
              v1385 = (WTF::StringImpl *)v560;
              v561 = *(_QWORD *)(v12 + 128);
              v562 = *(JSC::Heap ***)(v12 + 56);
              if ((v561 & 1) != 0)
              {
                v1308 = *(uint64_t (**)(int8x16_t *))(v561 & 0xFFFFFFFFFFFFFFFCLL);
                if ((v12 & 8) != 0)
                  v1309 = (uint64_t *)(v12 - 16);
                else
                  v1309 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
                __src.i64[0] = *v1309;
                __src.i64[1] = v12;
                v1351[0] = v12 + 128;
                v561 = v1308(&__src);
              }
              v563 = JSC::ErrorInstance::create(v562, v561, &v1385, 0, 0, 0, 2, 1);
              v570 = (JSC::Exception *)v563;
              if ((v563 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v563 & 0xFFFFFFFE) + 0x4C)))
              {
                v570 = (JSC::Exception *)JSC::Exception::create(v417, (JSC::VM *)v563, 0, v564, v565, v566, v567, v568);
              }
              JSC::VM::throwException((JSC::VM *)v417, (JSC::JSGlobalObject *)v12, v570, v569, v564, v565, v566, v567, v568);
              v571 = v1385;
              v1385 = 0;
              if (v571)
              {
                if (*(_DWORD *)v571 == 2)
                {
                  WTF::StringImpl::~StringImpl(v571, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                  WTF::fastFree(v572, v573, v574, v575, v576, v577, v578, v579);
                }
                else
                {
                  *(_DWORD *)v571 -= 2;
                }
              }
            }
            v544 = 0;
LABEL_584:
            v1334 = v544;
            v545 = v1382[0];
            v1382[0] = 0;
            if (v545)
            {
              if (*(_DWORD *)v545 == 2)
              {
                WTF::StringImpl::~StringImpl(v545, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
                WTF::fastFree(v552, v553, v554, v555, v556, v557, v558, v559);
              }
              else
              {
                *(_DWORD *)v545 -= 2;
              }
            }
            goto LABEL_587;
          }
          *v539 += 2;
          goto LABEL_569;
        }
LABEL_404:
        if (*(_DWORD *)v355 == 2)
        {
          WTF::StringImpl::~StringImpl(v355, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
          WTF::fastFree(v421, v422, v423, v424, v425, v426, v427, v428);
        }
        else
        {
          *(_DWORD *)v355 -= 2;
        }
        goto LABEL_406;
      }
      *(_DWORD *)v354 -= 2;
    }
    if (v350)
      goto LABEL_357;
    goto LABEL_401;
  }
  if (*(_DWORD *)v497 != 2)
  {
    *(_DWORD *)v497 -= 2;
    goto LABEL_505;
  }
  WTF::StringImpl::~StringImpl(v497, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
  WTF::fastFree(v498, v499, v500, v501, v502, v503, v504, v505);
  if ((v470 & 1) != 0)
    goto LABEL_506;
LABEL_509:
  if (!v350)
    goto LABEL_1226;
  if (*v350 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v350, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
    goto LABEL_517;
  }
  *v350 -= 2;
  if (v349)
    goto LABEL_1227;
LABEL_1229:
  v1012 = v1358;
  v1358 = 0;
  if (v1012)
  {
    if (*(_DWORD *)v1012 == 1)
      WTF::fastFree((unint64_t)v1012, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
    else
      --*(_DWORD *)v1012;
  }
LABEL_193:
  std::array<WTF::String,6ul>::~array(&v1361, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
  v173 = v1360;
  v1360 = 0;
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
    {
      WTF::StringImpl::~StringImpl(v173, v26, (uint64_t)v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v221, v222, v223, v224, v225, v226, v227, v228);
    }
    else
    {
      *(_DWORD *)v173 -= 2;
    }
  }
  v106 = v1359;
  v1359 = 0;
  if (v106)
  {
LABEL_197:
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v26, (uint64_t)v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
LABEL_199:
  v66 = v1364;
  v1364 = 0;
  if (v66)
  {
LABEL_200:
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v26, (uint64_t)v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v184, v185, v186, v187, v188, v189, v190, v191);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
LABEL_202:
  v174 = v1365;
  v1365 = 0;
  if (v174)
  {
    if (*(_DWORD *)v174 == 2)
    {
      WTF::StringImpl::~StringImpl(v174, v26, (uint64_t)v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v176, v177, v178, v179, v180, v181, v182, v183);
    }
    else
    {
      *(_DWORD *)v174 -= 2;
    }
  }
LABEL_205:
  std::array<std::optional<WTF::String>,6ul>::~array((uint64_t)&v1366, v26, (uint64_t)v27, v28, v29, v30, v31, v32);
LABEL_206:
  if (v1380)
  {
    v192 = v1378;
    v193 = 8 * v1380;
    do
    {
      v194 = *(WTF::StringImpl **)v192;
      *(_QWORD *)v192 = 0;
      if (v194)
      {
        if (*(_DWORD *)v194 == 2)
        {
          WTF::StringImpl::~StringImpl(v194, v15, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
          WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
        }
        else
        {
          *(_DWORD *)v194 -= 2;
        }
      }
      v192 = (WTF *)((char *)v192 + 8);
      v193 -= 8;
    }
    while (v193);
  }
  v175 = v1378;
  if (v1378)
  {
    v1378 = 0;
    v1379 = 0;
    WTF::fastFree((unint64_t)v175, v15, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
  }
}

uint64_t JSC::intlOption<JSC::LocaleMatcher>(JSC::JSGlobalObject *a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM *v14;
  uint64_t v15;
  const WTF::String *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const WTF::String *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;

  v8 = a8;
  if (a2)
  {
    v14 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v22 = JSC::JSObject::get(a2, (uint64_t)a1, a3, a4, a5, a6, a7, a8);
    v71 = v22;
    if (*((_DWORD *)v14 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v14, v15, (uint64_t)v16, v17, v18, v19, v20, v21))
    {
      return 0;
    }
    if (v22 != 10)
    {
      JSC::JSValue::toWTFString((JSC::JSValue *)&v71, a1, v16, v17, v18, v19, v20, v21, (int **)&v70, v23);
      if (!*((_DWORD *)v14 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v14, v25, v26, v27, v28, v29, v30, v31))
      {
        if (a5)
        {
          v32 = a4 + 24 * a5;
          v33 = (unsigned __int8 *)(a4 + 16);
          while (1)
          {
            v34 = *((_QWORD *)v33 - 1);
            v35 = v33 - 16;
            v36 = v34 ? v34 - 1 : 0;
            if (WTF::equalInternal<unsigned char>((uint64_t)v70, *((_QWORD *)v33 - 2), v36))
              break;
            v33 += 24;
            if (v35 + 24 == (unsigned __int8 *)v32)
              goto LABEL_13;
          }
          v8 = *v33;
          goto LABEL_17;
        }
LABEL_13:
        WTF::String::String((int **)&v69, a6, a7);
        v45 = JSC::createRangeError((unint64_t)a1, &v69, v44);
        JSC::VM::throwException(v14, a1, v45, v46, v47, v48, v49, v50);
        v51 = v69;
        v69 = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
          {
            WTF::StringImpl::~StringImpl(v51, v37, v38, v39, v40, v41, v42, v43);
            WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
          }
          else
          {
            *(_DWORD *)v51 -= 2;
          }
        }
      }
      v8 = 0;
LABEL_17:
      v52 = v70;
      v70 = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2)
        {
          WTF::StringImpl::~StringImpl(v52, v37, v38, v39, v40, v41, v42, v43);
          WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
        }
        else
        {
          *(_DWORD *)v52 -= 2;
        }
      }
    }
  }
  return v8;
}

int **WTF::String::String(int **a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int *v6;

  if (a3)
  {
    v4 = a3 - 1;
    if (a3 == 1)
    {
      v6 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v6 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v6 = 2;
      v6[1] = v4;
      *((_QWORD *)v6 + 1) = a2;
      v6[4] = 4;
    }
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  return a1;
}

uint64_t JSC::JSObject::get(unsigned int *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::JSGlobalObject *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  _WORD *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  uint64_t result;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  BOOL v65;
  unsigned int *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t (**v78)(unint64_t);
  int8x16_t **v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(unint64_t);
  int v86;
  _WORD *v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  JSC::VM *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  int v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  BOOL v125;
  unsigned __int16 *v128;
  uint64_t v129;
  unsigned int v130;
  unint64_t v131;
  JSC::VM *v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  BOOL v141;
  char v142;
  int v143;
  uint64_t v144;
  uint64_t (**v145)(unint64_t);
  int8x16_t **v146;
  uint64_t v147;
  int v148;
  int v149;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  int v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t (**v157)(unint64_t);
  unsigned int v158;
  _BOOL4 v159;
  int v160;
  unsigned int v161;
  uint64_t v162;
  unsigned __int8 *v163;
  int v164;
  double v165;
  void *v166;
  const unsigned __int8 *v167;
  uint64_t v168;
  unsigned __int8 *v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  unsigned __int8 *v173;
  unsigned int v174;
  int8x16_t **v175;
  unint64_t v176;
  uint64_t (*v177)(unint64_t);
  uint64_t v178;
  unint64_t v179;
  _DWORD *v180;
  _DWORD *v181;
  _QWORD v182[2];
  uint64_t v183;
  char v184;
  int8x16_t **v185;
  uint64_t (**v186)(unint64_t);
  JSC::VM *v187[18];

  v9 = (JSC::JSGlobalObject *)a2;
  v10 = (uint64_t)a1;
  v187[16] = *(JSC::VM **)MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a2 + 56);
  v179 = 0xFFFFFFFF00000000;
  LOBYTE(v183) = 0;
  v184 = 0;
  v185 = 0;
  v186 = 0;
  v13 = (char *)a1 + 6;
  v12 = *((_BYTE *)a1 + 6);
  v181 = 0;
  memset(v182, 0, 13);
  v180 = a1;
  v14 = a3 >> 4;
  v15 = (uint64_t)a1;
  if ((v12 & 8) == 0)
  {
    v16 = a1;
    do
    {
      v17 = *v16 & 0xFFFFFFFE;
      v18 = 16 * v17;
      if ((_DWORD)v14 && (v14 & ~*(_DWORD *)(16 * v17 + 0x20)) == 0)
      {
        v19 = *(_QWORD *)(16 * v17 + 0x58);
        if (v19
          || (v30 = *(_QWORD *)(16 * v17 + 0x40)) != 0
          && (*(_BYTE *)(v30 + 5) == 1 || *(_DWORD *)(v30 + 80) >= 2u)
          && (JSC::Structure::materializePropertyTable((JSC::Structure *)v18, (JSC::VM *)v11, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v19))
        {
          if (*(_DWORD *)(v19 + 24))
          {
            v20 = *(_QWORD *)(v19 + 16);
            v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
            v22 = *(unsigned int *)(v19 + 8);
            v23 = *(_DWORD *)(a3 + 16);
            if ((v20 & 1) != 0)
            {
              if ((v23 & 0x20) != 0)
                v23 = *(_DWORD *)(a3 + 32);
              v24 = *(_DWORD *)(v19 + 12);
              v25 = (v23 >> 8) & *(_QWORD *)&v24;
              v26 = *(unsigned __int8 *)(v21 + v25);
              if (*(_BYTE *)(v21 + v25))
              {
                v27 = v21 + v22;
                v28 = 1;
                while (1)
                {
                  v29 = *(_QWORD *)(v27 + 8 * (v26 - 1));
                  if (a3 == (v29 & 0xFFFFFFFFFFFFLL))
                    break;
                  v25 = ((_DWORD)v25 + v28) & v24;
                  v26 = *(unsigned __int8 *)(v21 + v25);
                  ++v28;
                  if (!*(_BYTE *)(v21 + v25))
                    goto LABEL_14;
                }
                a6 = (v29 >> 16) & 0xFF00000000 | HIBYTE(v29);
                goto LABEL_38;
              }
            }
            else
            {
              if ((v23 & 0x20) != 0)
                v23 = *(_DWORD *)(a3 + 32);
              v41 = *(_DWORD *)(v19 + 12);
              v42 = v41 & (v23 >> 8);
              v43 = *(_DWORD *)(v21 + 4 * v42);
              if (v43)
              {
                v44 = v21 + 4 * v22;
                v45 = 1;
                while (1)
                {
                  v46 = (v43 - 1);
                  if (*(_QWORD *)(v44 + 16 * v46) == a3)
                    break;
                  v42 = (v42 + v45) & v41;
                  v43 = *(_DWORD *)(v21 + 4 * v42);
                  ++v45;
                  if (!v43)
                    goto LABEL_14;
                }
                a6 = *(unsigned int *)(v44 + 16 * v46 + 8) | ((unint64_t)*(unsigned __int8 *)(v44 + 16 * v46 + 12) << 32);
LABEL_38:
                if ((_DWORD)a6 != -1)
                {
                  a5 = HIDWORD(a6);
                  if ((int)a6 <= 63)
                  {
                    v57 = (uint64_t)(v16 + 4);
                    v58 = a6 << 32;
                  }
                  else
                  {
                    v57 = *((_QWORD *)v16 + 1) - 8;
                    v58 = 0x3F00000000 - (a6 << 32);
                  }
                  a4 = *(_QWORD *)(v57 + (v58 >> 29));
                  if ((a4 & 0xFFFE000000000002) != 0)
                  {
LABEL_70:
                    v177 = (uint64_t (*)(unint64_t))a4;
                    v181 = v16;
LABEL_71:
                    v179 = __PAIR64__(a6, a5);
                    v54 = 1;
                    LOWORD(v182[1]) = 257;
                    goto LABEL_58;
                  }
                  v59 = *(unsigned __int8 *)(a4 + 5);
                  if (v59 != 5)
                  {
                    if (v59 == 6)
                    {
                      v76 = *(_DWORD *)(v18 + 16) & 3;
                      v77 = *(_QWORD *)(a4 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v79 = *(int8x16_t ***)(a4 + 24);
                        v78 = *(uint64_t (***)(unint64_t))(a4 + 32);
                        v177 = *(uint64_t (**)(unint64_t))(a4 + 8);
                        v178 = v77;
                        LODWORD(v179) = HIDWORD(a6);
                        v181 = v16;
                        BYTE1(v182[1]) = 3;
                        v54 = 1;
                        if (v76 != 2)
                          LOBYTE(v182[1]) = 1;
                        BYTE3(v182[1]) = 1;
                        v185 = v79;
                        v186 = v78;
                      }
                      else
                      {
                        v177 = *(uint64_t (**)(unint64_t))(a4 + 8);
                        v178 = v77;
                        LODWORD(v179) = HIDWORD(a6);
                        v181 = v16;
                        v54 = 1;
                        BYTE1(v182[1]) = 3;
                        if (v76 != 2)
                          LOBYTE(v182[1]) = 1;
                      }
                      goto LABEL_58;
                    }
                    goto LABEL_70;
                  }
                  v66 = v16;
                  v67 = v11;
LABEL_93:
                  JSC::JSObject::fillGetterPropertySlot(v66, v67, (uint64_t)&v177, a4, a5, a6);
LABEL_94:
                  v54 = 1;
                  goto LABEL_58;
                }
              }
            }
          }
        }
      }
LABEL_14:
      if ((*v13 & 0x20) == 0)
        goto LABEL_15;
      v64 = *(unsigned int *)(16 * (*v16 & 0xFFFFFFFE) + 0x4C);
      v65 = !(_DWORD)v64 || a3 == 0;
      if (v65)
        goto LABEL_15;
      v34 = 16 * v64;
      do
      {
        v31 = v11;
        v32 = v9;
        v33 = *(_QWORD *)(v34 + 24);
        if (!v33)
          goto LABEL_26;
        if ((*(_BYTE *)((16 * *v16) | 0x12) & 0x40) != 0)
          goto LABEL_26;
        v35 = *(_DWORD *)(a3 + 16);
        if ((v35 & 0x20) != 0)
          goto LABEL_26;
        v36 = *(_DWORD *)(v33 + 4) & (v35 >> 8);
        v37 = *(_QWORD *)(v33 + 32);
        v38 = *(unsigned __int16 *)(v37 + 4 * v36);
        if (v38 == 0xFFFF)
          goto LABEL_26;
        v175 = *(int8x16_t ***)(v33 + 16);
        while (1)
        {
          v176 = (__int16)v38;
          v39 = (unint64_t *)(*(_QWORD *)(v33 + 24) + 40 * (__int16)v38);
          v40 = v39[1];
          if (!v40)
            goto LABEL_35;
          if (WTF::equalInternal<unsigned char>(a3, *v39, v40 - 1))
            break;
          v37 = *(_QWORD *)(v33 + 32);
LABEL_35:
          v36 = *(__int16 *)(v37 + 4 * v36 + 2);
          if (v36 == -1)
            goto LABEL_26;
          LOWORD(v38) = *(_WORD *)(v37 + 4 * v36);
        }
        v80 = *(_QWORD *)(v33 + 24);
        if (v80)
        {
          v81 = *(_DWORD *)(v80 + 40 * (int)v176 + 16);
          if ((v81 & 0x3B10) == 0)
          {
            if ((v81 & 0x400) == 0)
            {
              v82 = *(_DWORD *)(v80 + 40 * (int)v176 + 16);
              v9 = v32;
              if ((v81 & 0x8000) == 0)
              {
                v83 = v80 + 40 * (int)v176;
                v85 = *(uint64_t (**)(unint64_t))(v83 + 24);
                v84 = *(_QWORD *)(v83 + 32);
                v11 = v31;
                v177 = v85;
                v178 = v84;
                LODWORD(v179) = v81;
                v181 = v16;
                if ((v81 & 0x4000) != 0)
                {
                  LOWORD(v182[1]) = 769;
                  v54 = 1;
                  BYTE3(v182[1]) = 1;
                  v185 = v175;
                  v186 = 0;
                }
                else
                {
                  v54 = 1;
                  LOWORD(v182[1]) = 769;
                }
                goto LABEL_58;
              }
              v155 = v80 + 40 * (int)v176;
              v157 = *(uint64_t (***)(unint64_t))(v155 + 24);
              v156 = *(_QWORD *)(v155 + 32);
              v177 = *v157;
              v178 = v156;
              LODWORD(v179) = v82;
              v181 = v16;
              LOWORD(v182[1]) = 769;
              v54 = 1;
              BYTE3(v182[1]) = 1;
              v185 = v175;
              v186 = v157;
LABEL_235:
              v11 = v31;
              goto LABEL_58;
            }
            v151 = *(_DWORD *)(v80 + 40 * (int)v176 + 16);
            v152 = *(_QWORD *)(v80 + 40 * (int)v176 + 24);
            v65 = v152 == (int)v152;
            v153 = v152 | 0xFFFE000000000000;
            v154 = COERCE__INT64((double)v152) + 0x2000000000000;
            if (v65)
              v154 = v153;
            v177 = (uint64_t (*)(unint64_t))v154;
            LODWORD(v179) = v151;
            v181 = v16;
            v54 = 1;
            BYTE1(v182[1]) = 1;
LABEL_198:
            v9 = v32;
            goto LABEL_235;
          }
          if ((JSC::setUpStaticFunctionSlot(v31, v175, v80 + 40 * (int)v176, v16, a3, &v177) & 1) != 0)
          {
            v54 = 1;
            goto LABEL_198;
          }
        }
LABEL_26:
        v34 = *(_QWORD *)(v34 + 16);
        v9 = v32;
        v11 = v31;
      }
      while (v34);
LABEL_15:
      v15 = *(_QWORD *)(v18 + 48);
      if (!v15)
        v15 = *((_QWORD *)v16 + 2);
      if ((v15 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v15 + 5) < 0x17u)
      {
        if (!a3)
          goto LABEL_57;
        v47 = *(_DWORD *)(a3 + 16);
        if ((v47 & 0x20) != 0)
          goto LABEL_57;
        v48 = *(_WORD **)(a3 + 8);
        v49 = *(unsigned int *)(a3 + 4);
        if ((v47 & 4) == 0)
        {
          if ((_DWORD)v49)
          {
            v50 = (unsigned __int16)*v48 - 48;
            if (v50 <= 9 && (*v48 != 48 || v49 <= 1))
            {
              v60 = v48 + 1;
              v61 = v49 - 1;
              while (v61)
              {
                if (v50 > 0x19999999)
                  goto LABEL_53;
                v62 = *v60 - 48;
                if (v62 > 9)
                  goto LABEL_53;
                v51 = 0;
                LOBYTE(v49) = 0;
                v52 = 0;
                v63 = __CFADD__(v62, 10 * v50);
                v50 = v62 + 10 * v50;
                ++v60;
                --v61;
                if (v63)
                  goto LABEL_55;
              }
              v52 = v50 & 0xFFFFFF00;
              v51 = 0x100000000;
              if (v50 == -1)
              {
                v51 = 0;
                LOBYTE(v49) = 0;
              }
              else
              {
                LOBYTE(v49) = v50;
              }
              if (v50 == -1)
                v52 = 0;
LABEL_55:
              v53 = v49;
LABEL_56:
              if ((v51 & 0x100000000) == 0)
              {
LABEL_57:
                v54 = 0;
                goto LABEL_58;
              }
              v68 = v52 | v53;
              v69 = *((_QWORD *)v9 + 7);
              while (2)
              {
                v31 = v11;
                v70 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
                v71 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v70 + 0x4C) + 0x70))(v10, v9, v68, &v177);
                v73 = v71;
                if (*(_DWORD *)(v69 + 80))
                {
                  v139 = *(_DWORD *)(v69 + 80);
                  if ((v139 & 0x27) != 0 && (v139 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v69 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  v140 = *(_QWORD *)(v69 + 16);
                  v141 = v140 == 0;
                  if (v140)
                    v142 = 1;
                  else
                    v142 = v73;
                  if ((v142 & 1) != 0)
                  {
                    v54 = v141;
                    goto LABEL_235;
                  }
                }
                else if ((v71 & 1) != 0)
                {
LABEL_234:
                  v54 = 1;
                  goto LABEL_235;
                }
                if (BYTE2(v182[1]) == 3)
                {
                  if (BYTE4(v182[1]))
                    goto LABEL_291;
                  v74 = *(unsigned __int8 *)(v10 + 5);
                  if (v74 != 61)
                    goto LABEL_102;
                }
                else
                {
                  v74 = *(unsigned __int8 *)(v10 + 5);
                  if (v74 == 61)
                  {
                    if (BYTE2(v182[1]) == 1)
                      goto LABEL_291;
                  }
                  else
                  {
LABEL_102:
                    if ((v74 - 39) <= 0xA
                      && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v10, v72, a3, a4, a5, a6, a7, a8) <= v68)
                    {
LABEL_291:
                      v54 = 0;
                      goto LABEL_235;
                    }
                  }
                }
                if ((*(_WORD *)(v70 + 12) & 0x800) == 0 || BYTE2(v182[1]) == 3)
                {
                  v75 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                  v11 = v31;
                  if (!v75)
                    v75 = *(_QWORD *)(v10 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v75 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                    * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                                                    + 0xB0))(v10, v9);
                  }
                  else
                  {
                    v75 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                    if (!v75)
                      v75 = *(_QWORD *)(v10 + 16);
                  }
                  if (*(_DWORD *)(v69 + 80))
                  {
                    v11 = v31;
                    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v69, v72, a3, a4, a5, a6, a7, a8))
                    {
                      v54 = 0;
                      goto LABEL_58;
                    }
                  }
                  else
                  {
                    v11 = v31;
                  }
                }
                if ((v75 & 0xFFFE000000000002) != 0)
                  goto LABEL_57;
                v54 = 0;
                v10 = v75;
                if (*(unsigned __int8 *)(v75 + 5) <= 0x16u)
                  goto LABEL_58;
                continue;
              }
            }
LABEL_53:
            v51 = 0;
            LOBYTE(v49) = 0;
          }
          else
          {
            v51 = 0;
          }
          v52 = 0;
          goto LABEL_55;
        }
        if ((_DWORD)v49)
        {
          v158 = *(unsigned __int8 *)v48 - 48;
          if (v158 <= 9 && (v49 < 2 || *(_BYTE *)v48 != 48))
          {
            v168 = v49 - 1;
            v169 = (unsigned __int8 *)v48 + 1;
            while (v168)
            {
              if (v158 > 0x19999999)
                goto LABEL_276;
              v170 = *v169 - 48;
              if (v170 > 9)
                goto LABEL_276;
              v53 = 0;
              LOBYTE(v49) = 0;
              v51 = 0;
              v63 = __CFADD__(v170, 10 * v158);
              v158 = v170 + 10 * v158;
              --v168;
              ++v169;
              if (v63)
                goto LABEL_278;
            }
            if (v158 == -1)
              v53 = 0;
            else
              v53 = v158 & 0xFFFFFF00;
            if (v158 == -1)
              LOBYTE(v49) = 0;
            else
              LOBYTE(v49) = v158;
            if (v158 == -1)
              v51 = 0;
            else
              v51 = 0x100000000;
            goto LABEL_278;
          }
LABEL_276:
          v53 = 0;
          LOBYTE(v49) = 0;
        }
        else
        {
          v53 = 0;
        }
        v51 = 0;
LABEL_278:
        v52 = v49;
        goto LABEL_56;
      }
      v13 = (_BYTE *)(v15 + 6);
      v16 = (unsigned int *)v15;
    }
    while ((*(_BYTE *)(v15 + 6) & 8) == 0);
  }
  if (!a3)
    goto LABEL_128;
  v86 = *(_DWORD *)(a3 + 16);
  if ((v86 & 0x20) != 0)
    goto LABEL_128;
  v87 = *(_WORD **)(a3 + 8);
  v88 = *(unsigned int *)(a3 + 4);
  if ((v86 & 4) == 0)
  {
    if ((_DWORD)v88)
    {
      v89 = (unsigned __int16)*v87 - 48;
      if (v89 <= 9 && (*v87 != 48 || v88 <= 1))
      {
        v128 = v87 + 1;
        v129 = v88 - 1;
        while (v129)
        {
          if (v89 > 0x19999999)
            goto LABEL_124;
          v130 = *v128 - 48;
          if (v130 > 9)
            goto LABEL_124;
          v90 = 0;
          LOBYTE(v88) = 0;
          v91 = 0;
          v63 = __CFADD__(v130, 10 * v89);
          v89 = v130 + 10 * v89;
          ++v128;
          --v129;
          if (v63)
            goto LABEL_126;
        }
        v91 = v89 & 0xFFFFFF00;
        v90 = 0x100000000;
        if (v89 == -1)
        {
          v90 = 0;
          LOBYTE(v88) = 0;
        }
        else
        {
          LOBYTE(v88) = v89;
        }
        if (v89 == -1)
          v91 = 0;
        goto LABEL_126;
      }
LABEL_124:
      v90 = 0;
      LOBYTE(v88) = 0;
    }
    else
    {
      v90 = 0;
    }
    v91 = 0;
LABEL_126:
    v92 = v88;
    goto LABEL_127;
  }
  if ((_DWORD)v88)
  {
    v171 = *(unsigned __int8 *)v87 - 48;
    if (v171 <= 9 && (v88 < 2 || *(_BYTE *)v87 != 48))
    {
      v172 = v88 - 1;
      v173 = (unsigned __int8 *)v87 + 1;
      while (v172)
      {
        if (v171 > 0x19999999)
          goto LABEL_343;
        v174 = *v173 - 48;
        if (v174 > 9)
          goto LABEL_343;
        v92 = 0;
        LOBYTE(v88) = 0;
        v90 = 0;
        v63 = __CFADD__(v174, 10 * v171);
        v171 = v174 + 10 * v171;
        --v172;
        ++v173;
        if (v63)
          goto LABEL_345;
      }
      if (v171 == -1)
        v92 = 0;
      else
        v92 = v171 & 0xFFFFFF00;
      if (v171 == -1)
        LOBYTE(v88) = 0;
      else
        LOBYTE(v88) = v171;
      if (v171 == -1)
        v90 = 0;
      else
        v90 = 0x100000000;
      goto LABEL_345;
    }
LABEL_343:
    v92 = 0;
    LOBYTE(v88) = 0;
  }
  else
  {
    v92 = 0;
  }
  v90 = 0;
LABEL_345:
  v91 = v88;
LABEL_127:
  if ((v90 & 0x100000000) != 0)
  {
    v131 = v91 | v92;
    v132 = (JSC::VM *)*((_QWORD *)v9 + 7);
    while (1)
    {
      v31 = v11;
      v133 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
      v134 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v133 + 0x4C) + 0x70))(v10, v9, v131, &v177);
      v136 = v134;
      if (*((_DWORD *)v132 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v132, v135, a3, a4, a5, a6, a7, a8);
        if (((hasExceptionsAfterHandlingTraps | v136) & 1) != 0)
        {
          v54 = !hasExceptionsAfterHandlingTraps;
          goto LABEL_235;
        }
      }
      else if ((v134 & 1) != 0)
      {
        goto LABEL_234;
      }
      if (BYTE2(v182[1]) == 3)
      {
        if (BYTE4(v182[1]))
          goto LABEL_291;
        v137 = *(unsigned __int8 *)(v10 + 5);
        if (v137 == 61)
          goto LABEL_228;
      }
      else
      {
        v137 = *(unsigned __int8 *)(v10 + 5);
        if (v137 == 61)
        {
          if (BYTE2(v182[1]) == 1)
            goto LABEL_291;
          goto LABEL_228;
        }
      }
      if ((v137 - 39) <= 0xA
        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v10, v135, a3, a4, a5, a6, a7, a8) <= v131)
      {
        goto LABEL_291;
      }
LABEL_228:
      if ((*(_WORD *)(v133 + 12) & 0x800) == 0 || BYTE2(v182[1]) == 3)
      {
        v138 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
        if (!v138)
          v138 = *(_QWORD *)(v10 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v138 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0xB0))(v10, v9);
        }
        else
        {
          v138 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
          if (!v138)
            v138 = *(_QWORD *)(v10 + 16);
        }
        if (*((_DWORD *)v132 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v132, v135, a3, a4, a5, a6, a7, a8))
          goto LABEL_291;
      }
      if ((v138 & 0xFFFE000000000002) != 0)
        goto LABEL_291;
      v54 = 0;
      v10 = v138;
      v11 = v31;
      if (*(unsigned __int8 *)(v138 + 5) <= 0x16u)
        goto LABEL_58;
    }
  }
LABEL_128:
  v93 = (JSC::VM *)*((_QWORD *)v9 + 7);
  while (1)
  {
    v94 = 16 * (*(_DWORD *)v15 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v15 + 6) & 8) == 0)
      break;
    v148 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C) + 0x68))(v15, v9, a3, &v177);
    v149 = v148;
    if (*((_DWORD *)v93 + 20))
    {
      v159 = JSC::VM::hasExceptionsAfterHandlingTraps(v93, a2, a3, a4, a5, a6, a7, a8);
      if (((v159 | v149) & 1) != 0)
      {
        v54 = !v159;
        goto LABEL_58;
      }
    }
    else if ((v148 & 1) != 0)
    {
      v54 = 1;
      goto LABEL_58;
    }
    if (BYTE2(v182[1]) == 3)
    {
      if (BYTE4(v182[1]))
      {
LABEL_360:
        v54 = 0;
        goto LABEL_58;
      }
      v160 = *(unsigned __int8 *)(v15 + 5);
      if (v160 != 61)
      {
LABEL_296:
        if (!a3)
          goto LABEL_142;
        if ((v160 - 50) < 0xFFFFFFF5)
          goto LABEL_142;
        v161 = *(_DWORD *)(a3 + 16);
        if ((v161 & 0x20) != 0)
          goto LABEL_142;
        v162 = *(unsigned int *)(a3 + 4);
        if (!(_DWORD)v162)
          goto LABEL_142;
        v163 = *(unsigned __int8 **)(a3 + 8);
        if ((v161 & 4) == 0)
        {
          v164 = *(unsigned __int16 *)v163;
          if ((_DWORD)v162 == 1)
            goto LABEL_302;
          if (v164 == 45)
          {
            v164 = *((unsigned __int16 *)v163 + 1);
            goto LABEL_306;
          }
          if ((v164 - 48) >= 0xA && ((_DWORD)v162 != 8 || v164 != 73))
          {
LABEL_317:
            if ((_DWORD)v162 != 3 || v164 != 78)
              goto LABEL_142;
          }
LABEL_310:
          v176 = v176 & 0xFFFFFF0000000000 | v162 | ((unint64_t)((v161 >> 2) & 1) << 32);
          JSC::jsToNumber(v163, v176);
          v166 = WTF::numberToString(v187, v165);
          if (WTF::equal(a3, (unint64_t)v166, v167))
            goto LABEL_57;
          goto LABEL_142;
        }
        v164 = *v163;
        if ((_DWORD)v162 == 1)
        {
LABEL_302:
          if ((v164 - 48) < 0xA)
            goto LABEL_57;
          goto LABEL_142;
        }
        if (v164 == 45)
        {
          v164 = v163[1];
LABEL_306:
          if ((v164 - 48) < 0xA)
          {
            if ((_DWORD)v162 == 2)
              goto LABEL_360;
            goto LABEL_310;
          }
          if ((_DWORD)v162 != 9)
            goto LABEL_142;
        }
        else
        {
          if ((v164 - 48) < 0xA)
            goto LABEL_310;
          if ((_DWORD)v162 != 8)
            goto LABEL_317;
        }
        if (v164 != 73)
          goto LABEL_142;
        goto LABEL_310;
      }
    }
    else
    {
      v160 = *(unsigned __int8 *)(v15 + 5);
      if (v160 != 61)
        goto LABEL_296;
      if (BYTE2(v182[1]) == 1)
        goto LABEL_57;
    }
LABEL_142:
    if ((*(_WORD *)(v94 + 12) & 0x800) != 0)
    {
      v106 = *(_DWORD *)v15;
      if (BYTE2(v182[1]) != 3)
      {
        v147 = 16 * (v106 & 0xFFFFFFFE);
        if ((*(_WORD *)(v147 + 12) & 0x800) != 0)
        {
          v107 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v147 + 76) + 0xB0))(v15, v9);
        }
        else
        {
          v107 = *(_QWORD *)(v147 + 48);
          if (!v107)
            v107 = *(_QWORD *)(v15 + 16);
        }
        if (*((_DWORD *)v93 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v93, a2, a3, a4, a5, a6, a7, a8))
          goto LABEL_57;
        goto LABEL_146;
      }
    }
    else
    {
      v106 = *(_DWORD *)v15;
    }
    v107 = *(_QWORD *)(16 * (v106 & 0xFFFFFFFE) + 0x30);
    if (!v107)
      v107 = *(_QWORD *)(v15 + 16);
LABEL_146:
    if ((v107 & 0xFFFE000000000002) != 0)
      goto LABEL_57;
    v54 = 0;
    v15 = v107;
    if (*(unsigned __int8 *)(v107 + 5) <= 0x16u)
      goto LABEL_58;
  }
  if (!(_DWORD)v14 || (v14 & ~*(_DWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_141;
  v95 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x58);
  if (!v95)
  {
    v108 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x40);
    if (!v108 || *(_BYTE *)(v108 + 5) != 1 && *(_DWORD *)(v108 + 80) < 2u)
      goto LABEL_141;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE)), v93, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v95)
      goto LABEL_141;
  }
  if (!*(_DWORD *)(v95 + 24))
    goto LABEL_141;
  v96 = *(_QWORD *)(v95 + 16);
  v97 = v96 & 0xFFFFFFFFFFFFFFFELL;
  v98 = *(unsigned int *)(v95 + 8);
  v99 = *(_DWORD *)(a3 + 16);
  if ((v96 & 1) != 0)
  {
    if ((v99 & 0x20) != 0)
      v99 = *(_DWORD *)(a3 + 32);
    v100 = *(_DWORD *)(v95 + 12);
    v101 = (v99 >> 8) & *(_QWORD *)&v100;
    v102 = *(unsigned __int8 *)(v97 + v101);
    if (*(_BYTE *)(v97 + v101))
    {
      v103 = v97 + v98;
      v104 = 1;
      while (1)
      {
        v105 = *(_QWORD *)(v103 + 8 * (v102 - 1));
        if (a3 == (v105 & 0xFFFFFFFFFFFFLL))
          break;
        v101 = ((_DWORD)v101 + v104) & v100;
        v102 = *(unsigned __int8 *)(v97 + v101);
        ++v104;
        if (!*(_BYTE *)(v97 + v101))
          goto LABEL_141;
      }
      a6 = (v105 >> 16) & 0xFF00000000 | HIBYTE(v105);
      goto LABEL_154;
    }
LABEL_141:
    if ((*(_BYTE *)(v15 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot(v15, v93, a3, &v177) & 1) != 0)
      goto LABEL_94;
    goto LABEL_142;
  }
  if ((v99 & 0x20) != 0)
    v99 = *(_DWORD *)(a3 + 32);
  v109 = *(_DWORD *)(v95 + 12);
  v110 = v109 & (v99 >> 8);
  v111 = *(_DWORD *)(v97 + 4 * v110);
  if (!v111)
    goto LABEL_141;
  v112 = v97 + 4 * v98;
  v113 = 1;
  while (1)
  {
    v114 = (v111 - 1);
    if (*(_QWORD *)(v112 + 16 * v114) == a3)
      break;
    v110 = (v110 + v113) & v109;
    v111 = *(_DWORD *)(v97 + 4 * v110);
    ++v113;
    if (!v111)
      goto LABEL_141;
  }
  a6 = *(unsigned int *)(v112 + 16 * v114 + 8) | ((unint64_t)*(unsigned __int8 *)(v112 + 16 * v114 + 12) << 32);
LABEL_154:
  if ((_DWORD)a6 == -1)
    goto LABEL_141;
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v115 = v15 + 16;
    v116 = a6 << 32;
  }
  else
  {
    v115 = *(_QWORD *)(v15 + 8) - 8;
    v116 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v115 + (v116 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_169;
  v117 = *(unsigned __int8 *)(a4 + 5);
  if (v117 == 5)
  {
    v66 = (unsigned int *)v15;
    v67 = (uint64_t)v93;
    goto LABEL_93;
  }
  if (v117 != 6)
  {
LABEL_169:
    v177 = (uint64_t (*)(unint64_t))a4;
    v181 = (_DWORD *)v15;
    goto LABEL_71;
  }
  v143 = *(_DWORD *)(v94 + 16) & 3;
  v144 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v146 = *(int8x16_t ***)(a4 + 24);
    v145 = *(uint64_t (***)(unint64_t))(a4 + 32);
    v177 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v178 = v144;
    LODWORD(v179) = HIDWORD(a6);
    v181 = (_DWORD *)v15;
    BYTE1(v182[1]) = 3;
    v54 = 1;
    if (v143 != 2)
      LOBYTE(v182[1]) = 1;
    BYTE3(v182[1]) = 1;
    v185 = v146;
    v186 = v145;
  }
  else
  {
    v177 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v178 = v144;
    LODWORD(v179) = HIDWORD(a6);
    v181 = (_DWORD *)v15;
    v54 = 1;
    BYTE1(v182[1]) = 3;
    if (v143 != 2)
      LOBYTE(v182[1]) = 1;
  }
LABEL_58:
  if (*(_DWORD *)(v11 + 80))
  {
    v118 = *(_DWORD *)(v11 + 80);
    if ((v118 & 0x27) != 0 && (v118 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      v119 = 0;
    else
      v119 = v54;
    if ((v119 & 1) != 0)
      goto LABEL_175;
LABEL_60:
    result = 10;
  }
  else
  {
    if (!v54)
      goto LABEL_60;
LABEL_175:
    if (BYTE1(v182[1]) == 1)
    {
      result = (uint64_t)v177;
      if (!v184)
        return result;
      goto LABEL_62;
    }
    if (BYTE1(v182[1]) == 2)
    {
      result = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v177, v9, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v120 = (unint64_t)v181;
      v121 = *(_QWORD *)(16 * (*v181 & 0xFFFFFFFE) + 0x28);
      if ((v179 & 0x20) != 0)
        v120 = (unint64_t)v180;
      if (BYTE3(v182[1]) != 1)
        goto LABEL_194;
      if ((v120 & 0xFFFE000000000002) != 0)
        goto LABEL_273;
      v122 = *(unsigned int *)(16 * (*(_DWORD *)v120 & 0xFFFFFFFE) + 0x4C);
      v123 = *(_DWORD *)(16 * (*(_DWORD *)v120 & 0xFFFFFFFE) + 0x4C) != 0;
      v124 = 16 * v122;
      if ((_DWORD)v122)
        v125 = v185 == (int8x16_t **)v124;
      else
        v125 = 1;
      if (!v125)
      {
        do
        {
          v124 = *(_QWORD *)(v124 + 16);
          v123 = v124 != 0;
        }
        while ((int8x16_t **)v124 != v185 && v124 != 0);
      }
      if (!v123)
      {
LABEL_273:
        v187[0] = *((JSC::VM **)v9 + 7);
        result = JSC::throwDOMAttributeGetterTypeError(v121, v187, v185, (WTF::StringImpl *)a3);
      }
      else
      {
LABEL_194:
        result = v177(v121);
      }
    }
  }
  if (!v184)
    return result;
LABEL_62:
  v56 = *(_DWORD *)(v183 + 4);
  if (!v56)
  {
    __break(0xC471u);
    JUMPOUT(0x197E13C68);
  }
  *(_DWORD *)(v183 + 4) = v56 - 1;
  return result;
}

void JSC::JSValue::toWTFString(JSC::JSValue *this@<X0>, JSC::JSGlobalObject *a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>, int8x16_t a10@<Q0>)
{
  uint64_t v11;
  int *v12;

  v11 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase(this, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    v12 = *(int **)(v11 + 8);
    if ((v12 & 1) != 0)
      v12 = *JSC::JSRopeString::resolveRope(*(_QWORD *)this, a2, (uint64_t)a3, a4, a10, a5, a6, a7, a8);
    if (v12)
      *v12 += 2;
    *a9 = v12;
  }
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int **a3@<X8>)
{
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v3 = a1[1];
  if (!v3)
  {
    v6 = *a1;
LABEL_3:
    v7 = v3;
    v5 = *a2;
    return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v6, &v5, a3);
  }
  --v3;
  v6 = *a1;
  if (!(v3 >> 31))
    goto LABEL_3;
  result = 124;
  __break(0xC471u);
  return result;
}

uint64_t JSC::intlOption<JSC::IntlDateTimeFormat::DateTimeStyle>(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  const WTF::String *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  unint64_t v35;
  JSC::Heap **v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  JSC::Exception *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t (*v65)(_QWORD *);
  _QWORD *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  _QWORD v70[3];

  if (!a2)
    return 0;
  v13 = *(_QWORD *)(a1 + 56);
  v14 = JSC::JSObject::get(a2, a1, a3, a4, a5, a6, a7, a8);
  v23 = v14;
  v69 = v14;
  if (*(_DWORD *)(v13 + 80))
  {
    v25 = *(_DWORD *)(v13 + 80);
    if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)v16, v17, v18, v19, v20, v21);
    if (*(_QWORD *)(v13 + 16))
      v26 = 1;
    else
      v26 = v23 == 10;
    if (v26)
      return 0;
  }
  else if (v14 == 10)
  {
    return 0;
  }
  if ((v23 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v23 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v69, (JSC::JSGlobalObject *)a1, v16, v17, v18, v19, v20, v21, (int **)&v68);
    goto LABEL_16;
  }
  v27 = *(WTF::StringImpl **)(v23 + 8);
  if ((v27 & 1) != 0)
  {
    v27 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v23, (JSC::JSGlobalObject *)a1, (uint64_t)v16, v17, v22, v18, v19, v20, v21);
    if (!v27)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (v27)
LABEL_14:
    *(_DWORD *)v27 += 2;
LABEL_15:
  v68 = v27;
LABEL_16:
  if (!*(_DWORD *)(v13 + 80))
    goto LABEL_17;
  v64 = *(_DWORD *)(v13 + 80);
  if ((v64 & 0x27) != 0 && (v64 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)v16, v17, v18, v19, v20, v21);
  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_17:
    if (a5)
    {
      v28 = a4 + 24 * a5;
      v29 = (unsigned __int8 *)(a4 + 16);
      while (1)
      {
        v30 = *((_QWORD *)v29 - 1);
        v31 = v29 - 16;
        v32 = v30 ? v30 - 1 : 0;
        if (WTF::equalInternal<unsigned char>((uint64_t)v68, *((_QWORD *)v29 - 2), v32))
          break;
        v29 += 24;
        if (v31 + 24 == (unsigned __int8 *)v28)
          goto LABEL_24;
      }
      v24 = *v29;
      goto LABEL_35;
    }
LABEL_24:
    if (a7)
    {
      v33 = a7 - 1;
      if (v33)
      {
        v34 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
        *v34 = 2;
        v34[1] = v33;
        *((_QWORD *)v34 + 1) = a6;
        v34[4] = 4;
      }
      else
      {
        v34 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
    }
    else
    {
      v34 = 0;
    }
    v67 = (WTF::StringImpl *)v34;
    v35 = *(_QWORD *)(a1 + 128);
    v36 = *(JSC::Heap ***)(a1 + 56);
    if ((v35 & 1) != 0)
    {
      v65 = *(uint64_t (**)(_QWORD *))(v35 & 0xFFFFFFFFFFFFFFFCLL);
      v66 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v66 = (_QWORD *)(a1 - 16);
      v70[0] = *v66;
      v70[1] = a1;
      v70[2] = a1 + 128;
      v35 = v65(v70);
    }
    v37 = JSC::ErrorInstance::create(v36, v35, &v67, 0, 0, 0, 2, 1);
    v44 = (JSC::Exception *)v37;
    if ((v37 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x4C)))
    {
      v44 = (JSC::Exception *)JSC::Exception::create(v13, (JSC::VM *)v37, 0, v38, v39, v40, v41, v42);
    }
    JSC::VM::throwException((JSC::VM *)v13, (JSC::JSGlobalObject *)a1, v44, v43, v38, v39, v40, v41, v42);
    v45 = v67;
    v67 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
      {
        WTF::StringImpl::~StringImpl(v45, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      }
      else
      {
        *(_DWORD *)v45 -= 2;
      }
    }
  }
  v24 = 0;
LABEL_35:
  v46 = v68;
  v68 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  return v24;
}

uint64_t JSC::IntlDateTimeFormat::resolvedOptions(JSC::IntlDateTimeFormat *this, JSC::JSGlobalObject *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  const WTF::String *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  const WTF::String *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  unsigned int v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  int v82;
  uint64_t v83;
  char v84;
  unsigned int v85;
  unint64_t v86;
  unsigned __int8 v87;
  char *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  WTF::AtomStringImpl *v95;
  WTF::StringImpl *v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  _DWORD *v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __n128 v120;
  uint64_t v121;
  uint64_t v122;
  WTF::AtomStringImpl *v123;
  WTF::StringImpl *v124;
  unsigned int v125;
  unint64_t v126;
  unsigned __int8 v127;
  char *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  __n128 v132;
  uint64_t v133;
  uint64_t v134;
  WTF::AtomStringImpl *v135;
  WTF::StringImpl *v136;
  int v137;
  unint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  __n128 v142;
  uint64_t v143;
  uint64_t v144;
  WTF::AtomStringImpl *v145;
  WTF::StringImpl *v146;
  unsigned int v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  __n128 v154;
  uint64_t v155;
  uint64_t v156;
  WTF::AtomStringImpl *v157;
  WTF::StringImpl *v158;
  int v159;
  unint64_t v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  __n128 v164;
  uint64_t v165;
  uint64_t v166;
  WTF::AtomStringImpl *v167;
  WTF::StringImpl *v168;
  unsigned int v169;
  unint64_t v170;
  unsigned __int8 v171;
  char *v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  __n128 v176;
  uint64_t v177;
  uint64_t v178;
  WTF::AtomStringImpl *v179;
  WTF::StringImpl *v180;
  int v181;
  unint64_t v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  __n128 v186;
  uint64_t v187;
  uint64_t v188;
  WTF::AtomStringImpl *v189;
  WTF::StringImpl *v190;
  int v191;
  unint64_t v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  __n128 v196;
  uint64_t v197;
  uint64_t v198;
  WTF::AtomStringImpl *v199;
  WTF::StringImpl *v200;
  int v201;
  unint64_t v202;
  const char *v203;
  uint64_t v204;
  uint64_t v205;
  __n128 v206;
  uint64_t v207;
  uint64_t v208;
  WTF::AtomStringImpl *v209;
  WTF::StringImpl *v210;
  uint64_t v211;
  unint64_t v212;
  unsigned int v213;
  uint64_t v214;
  __n128 v215;
  uint64_t v216;
  uint64_t v217;
  WTF::AtomStringImpl *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  WTF::StringImpl *v225;
  uint64_t result;
  unint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  void *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  void *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  JSC::JSGlobalObject *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t SlowCase;
  JSC::JSGlobalObject *v313;
  uint64_t Slow;
  WTF::StringImpl *v315;
  uint64_t v316;
  unint64_t v317;
  int v318;
  int v319;
  uint64_t v320;

  v9 = *((_QWORD *)a2 + 7);
  v10 = *(_QWORD *)(v9 + 15056);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 60);
    v12 = *(_QWORD *)(v10 + 24);
    if (v12 < *(_QWORD *)(v10 + 32))
    {
LABEL_3:
      *(_QWORD *)(v10 + 24) = v12 + v11;
      goto LABEL_4;
    }
    v12 = *(_QWORD *)(v10 + 40);
    if ((v12 & 1) == 0)
    {
      v307 = *(_QWORD *)(v12 + 8) ^ *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 32) = v12 + HIDWORD(v307);
      *(_QWORD *)(v10 + 40) = v12 + (int)v307;
      goto LABEL_3;
    }
    v308 = a2;
    JSC::sanitizeStackForVM(*((JSC **)a2 + 7), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v10, v9 + 192, v11, 0, 0, v309, v310, v311);
    a2 = v308;
    v12 = SlowCase;
LABEL_4:
    *(_DWORD *)v12 = 0;
    *(_DWORD *)v12 = *((_DWORD *)a2 + 212);
    *(_DWORD *)(v12 + 4) = 16783360;
    *(_OWORD *)(v12 + 8) = 0u;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_QWORD *)(v12 + 56) = 0;
    if (*(_BYTE *)(v9 + 755))
      __dmb(0xAu);
    v13 = v9 + 41952;
    v14 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 1784);
    v15 = JSC::jsNontrivialString((JSC *)v9, (JSC::IntlDateTimeFormat *)((char *)this + 40), a3, a4, a5, a6, a7, a8);
    v316 = 0;
    v317 = v12;
    v318 = -1;
    v16.n128_u64[0] = 0x100000001000000;
    v319 = 0x1000000;
    v320 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v14, v15, 0, (uint64_t)&v316, v17, v18, v16);
    v19 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 968);
    v26 = JSC::jsNontrivialString((JSC *)v9, (JSC::IntlDateTimeFormat *)((char *)this + 56), v20, v21, v22, v23, v24, v25);
    v316 = 0;
    v317 = v12;
    v318 = -1;
    v27.n128_u64[0] = 0x100000001000000;
    v319 = 0x1000000;
    v320 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v19, v26, 0, (uint64_t)&v316, v28, v29, v27);
    v30 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2040);
    v37 = JSC::jsNontrivialString((JSC *)v9, (JSC::IntlDateTimeFormat *)((char *)this + 64), v31, v32, v33, v34, v35, v36);
    v316 = 0;
    v317 = v12;
    v318 = -1;
    v38.n128_u64[0] = 0x100000001000000;
    v319 = 0x1000000;
    v320 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v30, v37, 0, (uint64_t)&v316, v39, v40, v38);
    v41 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2448);
    v48 = JSC::jsNontrivialString((JSC *)v9, (JSC::IntlDateTimeFormat *)((char *)this + 72), v42, v43, v44, v45, v46, v47);
    v316 = 0;
    v317 = v12;
    v318 = -1;
    v49.n128_u64[0] = 0x100000001000000;
    v319 = 0x1000000;
    v320 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v41, v48, 0, (uint64_t)&v316, v50, v51, v49);
    v59 = *((unsigned __int8 *)this + 88);
    if (*((_BYTE *)this + 88))
    {
      v60 = *(_QWORD *)(*(_QWORD *)v13 + 1512);
      if (v59 > 4)
      {
        v62 = 0;
      }
      else
      {
        v61 = off_1E3577FC0[(char)(v59 - 1)];
        v62 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v62 = 0x300000002;
        *(_QWORD *)(v62 + 8) = v61;
        *(_DWORD *)(v62 + 16) = 4;
      }
      v315 = (WTF::StringImpl *)v62;
      v63 = JSC::jsNontrivialString(v9, (JSC::VM *)&v315, v52, v53, v54, v55, v56, v57);
      v316 = 0;
      v317 = v12;
      v318 = -1;
      v64.n128_u64[0] = 0x100000001000000;
      v319 = 0x1000000;
      v320 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v60, v63, 0, (uint64_t)&v316, v65, v66, v64);
      v75 = v315;
      v315 = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
        {
          WTF::StringImpl::~StringImpl(v75, v67, v68, v69, v70, v71, v72, v73);
          WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
        }
        else
        {
          *(_DWORD *)v75 -= 2;
        }
      }
      v76 = *(_QWORD *)(*(_QWORD *)v13 + 1520);
      if (*((unsigned __int8 *)this + 88) - 1 >= 2)
        v77 = 6;
      else
        v77 = 7;
      v316 = 0;
      v317 = v12;
      v318 = -1;
      v74.n128_u64[0] = 0x100000001000000;
      v319 = 0x1000000;
      v320 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v76, v77, 0, (uint64_t)&v316, v72, v73, v74);
    }
    v78 = *((unsigned __int8 *)this + 100);
    if (*((_BYTE *)this + 100))
    {
      v79 = *(_QWORD *)(*(_QWORD *)v13 + 1104);
      if (v78 > 4)
      {
        v83 = 0;
      }
      else
      {
        v80 = (char)(v78 - 1);
        v81 = off_1E3578050[v80];
        v82 = dword_199124A50[v80];
        v83 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_DWORD *)v83 = 2;
        *(_DWORD *)(v83 + 4) = v82;
        *(_QWORD *)(v83 + 8) = v81;
        *(_DWORD *)(v83 + 16) = 4;
      }
      v315 = (WTF::StringImpl *)v83;
      v91 = JSC::jsNontrivialString(v9, (JSC::VM *)&v315, v52, v53, v54, v55, v56, v57);
      v316 = 0;
      v317 = v12;
      v318 = -1;
      v92.n128_u64[0] = 0x100000001000000;
      v319 = 0x1000000;
      v320 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v79, v91, 0, (uint64_t)&v316, v93, v94, v92);
      v96 = v315;
      v315 = 0;
      if (v96)
      {
        if (*(_DWORD *)v96 == 2)
        {
          WTF::StringImpl::~StringImpl(v96, v95, v52, v53, v54, v55, v56, v57);
          WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
        }
        else
        {
          *(_DWORD *)v96 -= 2;
        }
      }
      v84 = *((_BYTE *)this + 101);
      if (!v84)
        return v12;
LABEL_29:
      v97 = *(_QWORD *)(*(_QWORD *)v13 + 2440);
      LOBYTE(v98) = v84 - 1;
      if (v98 <= 3u)
      {
        v98 = (char)v98;
        v99 = off_1E3578050[(char)v98];
        v100 = dword_199124A50;
LABEL_31:
        v101 = v100[v98];
        v102 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_DWORD *)v102 = 2;
        *(_DWORD *)(v102 + 4) = v101;
        *(_QWORD *)(v102 + 8) = v99;
        *(_DWORD *)(v102 + 16) = 4;
        goto LABEL_115;
      }
      goto LABEL_114;
    }
    v84 = *((_BYTE *)this + 101);
    if (v84)
      goto LABEL_29;
    v85 = *((unsigned __int8 *)this + 89);
    if (*((_BYTE *)this + 89))
    {
      v86 = *(_QWORD *)(*(_QWORD *)v13 + 2632);
      if (v85 > 3)
      {
        v90 = 0;
      }
      else
      {
        v87 = v85 - 1;
        v88 = off_1E3578008[(char)v87];
        v89 = 6 - v87;
        v90 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_DWORD *)v90 = 2;
        *(_DWORD *)(v90 + 4) = v89;
        *(_QWORD *)(v90 + 8) = v88;
        *(_DWORD *)(v90 + 16) = 4;
      }
      v315 = (WTF::StringImpl *)v90;
      v119 = JSC::jsNontrivialString(v9, (JSC::VM *)&v315, v52, v53, v54, v55, v56, v57);
      v316 = 0;
      v317 = v12;
      v318 = -1;
      v120.n128_u64[0] = 0x100000001000000;
      v319 = 0x1000000;
      v320 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v86, v119, 0, (uint64_t)&v316, v121, v122, v120);
      v124 = v315;
      v315 = 0;
      if (v124)
      {
        if (*(_DWORD *)v124 == 2)
        {
          WTF::StringImpl::~StringImpl(v124, v123, v52, v53, v54, v55, v56, v57);
          WTF::fastFree(v235, v236, v237, v238, v239, v240, v241, v242);
        }
        else
        {
          *(_DWORD *)v124 -= 2;
        }
      }
    }
    v125 = *((unsigned __int8 *)this + 90);
    if (*((_BYTE *)this + 90))
    {
      v126 = *(_QWORD *)(*(_QWORD *)v13 + 1224);
      if (v125 > 3)
      {
        v130 = 0;
      }
      else
      {
        v127 = v125 - 1;
        v128 = off_1E3578008[(char)v127];
        v129 = 6 - v127;
        v130 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_DWORD *)v130 = 2;
        *(_DWORD *)(v130 + 4) = v129;
        *(_QWORD *)(v130 + 8) = v128;
        *(_DWORD *)(v130 + 16) = 4;
      }
      v315 = (WTF::StringImpl *)v130;
      v131 = JSC::jsNontrivialString(v9, (JSC::VM *)&v315, v52, v53, v54, v55, v56, v57);
      v316 = 0;
      v317 = v12;
      v318 = -1;
      v132.n128_u64[0] = 0x100000001000000;
      v319 = 0x1000000;
      v320 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v126, v131, 0, (uint64_t)&v316, v133, v134, v132);
      v136 = v315;
      v315 = 0;
      if (v136)
      {
        if (*(_DWORD *)v136 == 2)
        {
          WTF::StringImpl::~StringImpl(v136, v135, v52, v53, v54, v55, v56, v57);
          WTF::fastFree(v243, v244, v245, v246, v247, v248, v249, v250);
        }
        else
        {
          *(_DWORD *)v136 -= 2;
        }
      }
    }
    v137 = *((unsigned __int8 *)this + 91);
    if (!*((_BYTE *)this + 91))
    {
LABEL_55:
      v147 = *((unsigned __int8 *)this + 92);
      if (*((_BYTE *)this + 92))
      {
        v148 = *(_QWORD *)(*(_QWORD *)v13 + 1928);
        if (v147 > 5)
        {
          v152 = 0;
        }
        else
        {
          v149 = (char)(v147 - 1);
          v150 = off_1E3577FE0[v149];
          v151 = dword_199124A60[v149];
          v152 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_DWORD *)v152 = 2;
          *(_DWORD *)(v152 + 4) = v151;
          *(_QWORD *)(v152 + 8) = v150;
          *(_DWORD *)(v152 + 16) = 4;
        }
        v315 = (WTF::StringImpl *)v152;
        v153 = JSC::jsNontrivialString(v9, (JSC::VM *)&v315, v52, v53, v54, v55, v56, v57);
        v316 = 0;
        v317 = v12;
        v318 = -1;
        v154.n128_u64[0] = 0x100000001000000;
        v319 = 0x1000000;
        v320 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v148, v153, 0, (uint64_t)&v316, v155, v156, v154);
        v158 = v315;
        v315 = 0;
        if (v158)
        {
          if (*(_DWORD *)v158 == 2)
          {
            WTF::StringImpl::~StringImpl(v158, v157, v52, v53, v54, v55, v56, v57);
            WTF::fastFree(v259, v260, v261, v262, v263, v264, v265, v266);
          }
          else
          {
            *(_DWORD *)v158 -= 2;
          }
        }
      }
      v159 = *((unsigned __int8 *)this + 93);
      if (!*((_BYTE *)this + 93))
      {
LABEL_72:
        v169 = *((unsigned __int8 *)this + 94);
        if (*((_BYTE *)this + 94))
        {
          v170 = *(_QWORD *)(*(_QWORD *)v13 + 1136);
          if (v169 > 3)
          {
            v174 = 0;
          }
          else
          {
            v171 = v169 - 1;
            v172 = off_1E3578008[(char)v171];
            v173 = 6 - v171;
            v174 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_DWORD *)v174 = 2;
            *(_DWORD *)(v174 + 4) = v173;
            *(_QWORD *)(v174 + 8) = v172;
            *(_DWORD *)(v174 + 16) = 4;
          }
          v315 = (WTF::StringImpl *)v174;
          v175 = JSC::jsNontrivialString(v9, (JSC::VM *)&v315, v52, v53, v54, v55, v56, v57);
          v316 = 0;
          v317 = v12;
          v318 = -1;
          v176.n128_u64[0] = 0x100000001000000;
          v319 = 0x1000000;
          v320 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v170, v175, 0, (uint64_t)&v316, v177, v178, v176);
          v180 = v315;
          v315 = 0;
          if (v180)
          {
            if (*(_DWORD *)v180 == 2)
            {
              WTF::StringImpl::~StringImpl(v180, v179, v52, v53, v54, v55, v56, v57);
              WTF::fastFree(v275, v276, v277, v278, v279, v280, v281, v282);
            }
            else
            {
              *(_DWORD *)v180 -= 2;
            }
          }
        }
        v181 = *((unsigned __int8 *)this + 95);
        if (!*((_BYTE *)this + 95))
        {
LABEL_89:
          v191 = *((unsigned __int8 *)this + 96);
          if (!*((_BYTE *)this + 96))
            goto LABEL_99;
          v192 = *(_QWORD *)(*(_QWORD *)v13 + 1904);
          if (v191 == 1)
          {
            v193 = "2-digit";
          }
          else
          {
            if (v191 != 2)
            {
              v194 = 0;
LABEL_96:
              v315 = (WTF::StringImpl *)v194;
              v195 = JSC::jsNontrivialString(v9, (JSC::VM *)&v315, v52, v53, v54, v55, v56, v57);
              v316 = 0;
              v317 = v12;
              v318 = -1;
              v196.n128_u64[0] = 0x100000001000000;
              v319 = 0x1000000;
              v320 = 0;
              JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v192, v195, 0, (uint64_t)&v316, v197, v198, v196);
              v200 = v315;
              v315 = 0;
              if (v200)
              {
                if (*(_DWORD *)v200 == 2)
                {
                  WTF::StringImpl::~StringImpl(v200, v199, v52, v53, v54, v55, v56, v57);
                  WTF::fastFree(v291, v292, v293, v294, v295, v296, v297, v298);
                }
                else
                {
                  *(_DWORD *)v200 -= 2;
                }
              }
LABEL_99:
              v201 = *((unsigned __int8 *)this + 97);
              if (!*((_BYTE *)this + 97))
                goto LABEL_109;
              v202 = *(_QWORD *)(*(_QWORD *)v13 + 2248);
              if (v201 == 1)
              {
                v203 = "2-digit";
              }
              else
              {
                if (v201 != 2)
                {
                  v204 = 0;
LABEL_106:
                  v315 = (WTF::StringImpl *)v204;
                  v205 = JSC::jsNontrivialString(v9, (JSC::VM *)&v315, v52, v53, v54, v55, v56, v57);
                  v316 = 0;
                  v317 = v12;
                  v318 = -1;
                  v206.n128_u64[0] = 0x100000001000000;
                  v319 = 0x1000000;
                  v320 = 0;
                  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v202, v205, 0, (uint64_t)&v316, v207, v208, v206);
                  v210 = v315;
                  v315 = 0;
                  if (v210)
                  {
                    if (*(_DWORD *)v210 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v210, v209, v52, v53, v54, v55, v56, v57);
                      WTF::fastFree(v299, v300, v301, v302, v303, v304, v305, v306);
                    }
                    else
                    {
                      *(_DWORD *)v210 -= 2;
                    }
                  }
LABEL_109:
                  v211 = *((unsigned __int8 *)this + 98);
                  if (*((_BYTE *)this + 98))
                  {
                    v212 = *(_QWORD *)(*(_QWORD *)v13 + 1352);
                    v316 = 0;
                    v317 = v12;
                    v318 = -1;
                    v58.n128_u64[0] = 0x100000001000000;
                    v319 = 0x1000000;
                    v320 = 0;
                    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v212, v211 | 0xFFFE000000000000, 0, (uint64_t)&v316, v56, v57, v58);
                  }
                  v213 = *((unsigned __int8 *)this + 99);
                  if (!*((_BYTE *)this + 99))
                    return v12;
                  v97 = *(_QWORD *)(*(_QWORD *)v13 + 2456);
                  if (v213 <= 6)
                  {
                    v98 = (char)(v213 - 1);
                    v99 = off_1E3578020[v98];
                    v100 = &unk_199124A74;
                    goto LABEL_31;
                  }
LABEL_114:
                  v102 = 0;
LABEL_115:
                  v315 = (WTF::StringImpl *)v102;
                  v214 = JSC::jsNontrivialString(v9, (JSC::VM *)&v315, v52, v53, v54, v55, v56, v57);
                  v316 = 0;
                  v317 = v12;
                  v318 = -1;
                  v215.n128_u64[0] = 0x100000001000000;
                  v319 = 0x1000000;
                  v320 = 0;
                  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v97, v214, 0, (uint64_t)&v316, v216, v217, v215);
                  v225 = v315;
                  v315 = 0;
                  if (v225)
                  {
                    if (*(_DWORD *)v225 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v225, v218, v219, v220, v221, v222, v223, v224);
                      WTF::fastFree(v227, v228, v229, v230, v231, v232, v233, v234);
                    }
                    else
                    {
                      *(_DWORD *)v225 -= 2;
                    }
                  }
                  return v12;
                }
                v203 = "numeric";
              }
              v204 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v204 = 0x700000002;
              *(_QWORD *)(v204 + 8) = v203;
              *(_DWORD *)(v204 + 16) = 4;
              goto LABEL_106;
            }
            v193 = "numeric";
          }
          v194 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v194 = 0x700000002;
          *(_QWORD *)(v194 + 8) = v193;
          *(_DWORD *)(v194 + 16) = 4;
          goto LABEL_96;
        }
        v182 = *(_QWORD *)(*(_QWORD *)v13 + 1488);
        if (v181 == 1)
        {
          v183 = "2-digit";
        }
        else
        {
          if (v181 != 2)
          {
            v184 = 0;
LABEL_86:
            v315 = (WTF::StringImpl *)v184;
            v185 = JSC::jsNontrivialString(v9, (JSC::VM *)&v315, v52, v53, v54, v55, v56, v57);
            v316 = 0;
            v317 = v12;
            v318 = -1;
            v186.n128_u64[0] = 0x100000001000000;
            v319 = 0x1000000;
            v320 = 0;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v182, v185, 0, (uint64_t)&v316, v187, v188, v186);
            v190 = v315;
            v315 = 0;
            if (v190)
            {
              if (*(_DWORD *)v190 == 2)
              {
                WTF::StringImpl::~StringImpl(v190, v189, v52, v53, v54, v55, v56, v57);
                WTF::fastFree(v283, v284, v285, v286, v287, v288, v289, v290);
              }
              else
              {
                *(_DWORD *)v190 -= 2;
              }
            }
            goto LABEL_89;
          }
          v183 = "numeric";
        }
        v184 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v184 = 0x700000002;
        *(_QWORD *)(v184 + 8) = v183;
        *(_DWORD *)(v184 + 16) = 4;
        goto LABEL_86;
      }
      v160 = *(_QWORD *)(*(_QWORD *)v13 + 1112);
      if (v159 == 1)
      {
        v161 = "2-digit";
      }
      else
      {
        if (v159 != 2)
        {
          v162 = 0;
LABEL_69:
          v315 = (WTF::StringImpl *)v162;
          v163 = JSC::jsNontrivialString(v9, (JSC::VM *)&v315, v52, v53, v54, v55, v56, v57);
          v316 = 0;
          v317 = v12;
          v318 = -1;
          v164.n128_u64[0] = 0x100000001000000;
          v319 = 0x1000000;
          v320 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v160, v163, 0, (uint64_t)&v316, v165, v166, v164);
          v168 = v315;
          v315 = 0;
          if (v168)
          {
            if (*(_DWORD *)v168 == 2)
            {
              WTF::StringImpl::~StringImpl(v168, v167, v52, v53, v54, v55, v56, v57);
              WTF::fastFree(v267, v268, v269, v270, v271, v272, v273, v274);
            }
            else
            {
              *(_DWORD *)v168 -= 2;
            }
          }
          goto LABEL_72;
        }
        v161 = "numeric";
      }
      v162 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v162 = 0x700000002;
      *(_QWORD *)(v162 + 8) = v161;
      *(_DWORD *)(v162 + 16) = 4;
      goto LABEL_69;
    }
    v138 = *(_QWORD *)(*(_QWORD *)v13 + 2664);
    if (v137 == 1)
    {
      v139 = "2-digit";
    }
    else
    {
      if (v137 != 2)
      {
        v140 = 0;
LABEL_52:
        v315 = (WTF::StringImpl *)v140;
        v141 = JSC::jsNontrivialString(v9, (JSC::VM *)&v315, v52, v53, v54, v55, v56, v57);
        v316 = 0;
        v317 = v12;
        v318 = -1;
        v142.n128_u64[0] = 0x100000001000000;
        v319 = 0x1000000;
        v320 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v138, v141, 0, (uint64_t)&v316, v143, v144, v142);
        v146 = v315;
        v315 = 0;
        if (v146)
        {
          if (*(_DWORD *)v146 == 2)
          {
            WTF::StringImpl::~StringImpl(v146, v145, v52, v53, v54, v55, v56, v57);
            WTF::fastFree(v251, v252, v253, v254, v255, v256, v257, v258);
          }
          else
          {
            *(_DWORD *)v146 -= 2;
          }
        }
        goto LABEL_55;
      }
      v139 = "numeric";
    }
    v140 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v140 = 0x700000002;
    *(_QWORD *)(v140 + 8) = v139;
    *(_DWORD *)(v140 + 16) = 4;
    goto LABEL_52;
  }
  v313 = a2;
  Slow = JSC::CompleteSubspace::tryAllocateSlow(v9 + 14936, *((JSC **)a2 + 7), 0x40uLL, 0, a5, a6, a7, a8);
  a2 = v313;
  v12 = Slow;
  if (Slow)
    goto LABEL_4;
  result = 110;
  __break(0xC471u);
  return result;
}

uint64_t JSC::jsNontrivialString(JSC *this, JSC::VM *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t SlowCase;
  _DWORD *v20;
  unint64_t v21;
  JSC *v22;

  v8 = (uint64_t *)((char *)this + 39696);
  v9 = *(_DWORD **)a2;
  *v9 = **(_DWORD **)a2 + 2;
  v10 = v9[4];
  v11 = v9;
  if ((v10 & 3) == 2)
  {
    v11 = v9;
    do
    {
      v11 = (_DWORD *)*((_QWORD *)v11 + 3);
      v10 = v11[4];
    }
    while ((v10 & 3) == 2);
  }
  if ((v10 & 8) != 0)
  {
    v12 = 0;
  }
  else
  {
    v11[4] = v10 | 8;
    v12 = (unint64_t)v11[1] << ((v10 & 4) == 0);
  }
  v13 = (char *)this + 192;
  v14 = *v8;
  if ((unint64_t)*v8 < *((_QWORD *)this + 4963))
    goto LABEL_5;
  v14 = *((_QWORD *)this + 4964);
  if ((v14 & 1) == 0)
  {
    v16 = *(_QWORD *)(v14 + 8) ^ *((_QWORD *)this + 4965);
    *((_QWORD *)this + 4963) = v14 + HIDWORD(v16);
    *((_QWORD *)this + 4964) = v14 + (int)v16;
LABEL_5:
    *v8 = v14 + 16;
    goto LABEL_6;
  }
  v17 = (char *)this + 39672;
  v21 = v12;
  v22 = this;
  v18 = (char *)this + 192;
  v20 = v9;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, v12, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v17, v18, 16, 0, 0);
  v9 = v20;
  v12 = v21;
  v13 = v18;
  v14 = SlowCase;
  this = v22;
LABEL_6:
  *(_DWORD *)v14 = (unint64_t)v8[227] >> 4;
  *(_DWORD *)(v14 + 4) = 17302016;
  *(_QWORD *)(v14 + 8) = v9;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if (v12 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v13, 0, v14, v12, a5, a6, a7, a8);
  return v14;
}

uint64_t JSC::jsNontrivialString(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t SlowCase;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v8 = (uint64_t *)(a1 + 39696);
  v9 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v10 = *(_DWORD *)(v9 + 16);
  v11 = v9;
  if ((v10 & 3) == 2)
  {
    v11 = v9;
    do
    {
      v11 = *(_QWORD *)(v11 + 24);
      v10 = *(_DWORD *)(v11 + 16);
    }
    while ((v10 & 3) == 2);
  }
  if ((v10 & 8) != 0)
  {
    v12 = 0;
  }
  else
  {
    *(_DWORD *)(v11 + 16) = v10 | 8;
    v12 = (unint64_t)*(unsigned int *)(v11 + 4) << ((v10 & 4) == 0);
  }
  v13 = a1 + 192;
  v14 = *v8;
  if ((unint64_t)*v8 < *(_QWORD *)(a1 + 39704))
    goto LABEL_5;
  v14 = *(_QWORD *)(a1 + 39712);
  if ((v14 & 1) == 0)
  {
    v16 = *(_QWORD *)(v14 + 8) ^ *(_QWORD *)(a1 + 39720);
    *(_QWORD *)(a1 + 39704) = v14 + HIDWORD(v16);
    *(_QWORD *)(a1 + 39712) = v14 + (int)v16;
LABEL_5:
    *v8 = v14 + 16;
    goto LABEL_6;
  }
  v17 = a1 + 39672;
  v21 = v12;
  v22 = a1;
  v18 = a1 + 192;
  v20 = v9;
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, v12, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v17, v18, 16, 0, 0);
  v9 = v20;
  v12 = v21;
  v13 = v18;
  v14 = SlowCase;
  a1 = v22;
LABEL_6:
  *(_DWORD *)v14 = (unint64_t)v8[227] >> 4;
  *(_DWORD *)(v14 + 4) = 17302016;
  *(_QWORD *)(v14 + 8) = v9;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  if (v12 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase(v13, 0, v14, v12, a5, a6, a7, a8);
  return v14;
}

uint64_t JSC::IntlDateTimeFormat::format(JSC::IntlDateTimeFormat *this, unint64_t a2, double a3)
{
  JSC::VM *v4;
  signed int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  JSC::Heap **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  JSC::Exception *v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  _WORD *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  int *v46;
  _WORD *v47;
  WTF::StringImpl *v48;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(_QWORD **);
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  _QWORD v74[8];
  WTF::StringImpl *v75;
  JSC::VM *v76;

  v4 = *(JSC::VM **)(a2 + 56);
  v76 = v4;
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v72 = v74;
    v73 = 0x2000000020;
    LODWORD(v75) = 0;
    v5 = udat_format();
    v12 = v5;
    if ((int)v75 <= 0)
    {
      HIDWORD(v73) = v5;
    }
    else
    {
      if ((_DWORD)v75 != 15)
      {
LABEL_6:
        v20 = JSC::throwTypeError(a2, &v76, (uint64_t)"failed to format date value", 28);
LABEL_37:
        v40 = (unint64_t)v72;
        if (v74 == v72 || !v72)
          return v20;
        v72 = 0;
        LODWORD(v73) = 0;
LABEL_15:
        WTF::fastFree(v40, v13, v14, v15, v16, v17, v18, v19);
        return v20;
      }
      LODWORD(v75) = 0;
      if (v73 < (unint64_t)v5)
      {
        v58 = v73 + ((unint64_t)v73 >> 2);
        if (v58 >= 0x10)
          v59 = v58 + 1;
        else
          v59 = 16;
        if (v59 <= v5)
          v60 = v5;
        else
          v60 = v59;
        v61 = v72;
        if (v60 < 0x21)
        {
          v72 = v74;
          LODWORD(v73) = 32;
          v62 = v74;
        }
        else
        {
          if (v60 >> 31)
            goto LABEL_61;
          v62 = (_QWORD *)WTF::fastMalloc((WTF *)(2 * v60));
          LODWORD(v73) = v60;
          v72 = v62;
        }
        memcpy(v62, v61, 2 * HIDWORD(v73));
        if (v74 != v61 && v61)
        {
          if (v72 == v61)
          {
            v72 = 0;
            LODWORD(v73) = 0;
          }
          WTF::fastFree((unint64_t)v61, v63, v64, v65, v66, v67, v68, v69);
        }
      }
      HIDWORD(v73) = v12;
      udat_format();
      if ((int)v75 > 0)
        goto LABEL_6;
      v12 = HIDWORD(v73);
    }
    v41 = v72;
    if (v12)
    {
      v42 = 0;
      v43 = 2 * v12;
      do
      {
        v44 = (unsigned __int16)v41[v42 / 2];
        if (v44 == 8239 || v44 == 8201)
          v41[v42 / 2] = 32;
        v42 += 2;
      }
      while (v43 != v42);
      if (v41)
      {
        if (v12 < 0x7FFFFFF0)
        {
          v46 = (int *)WTF::fastCompactMalloc((WTF *)(v43 + 20));
          v47 = v46 + 5;
          *v46 = 2;
          v46[1] = v12;
          *((_QWORD *)v46 + 1) = v46 + 5;
          v46[4] = 0;
          if (v12 == 1)
            *v47 = *v41;
          else
            memcpy(v47, v41, 2 * v12);
LABEL_34:
          v75 = (WTF::StringImpl *)v46;
          v20 = JSC::jsString((uint64_t)v4, (JSC::VM *)&v75, v6, v7, v8, v9, v10, v11);
          v48 = v75;
          v75 = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
            {
              WTF::StringImpl::~StringImpl(v48, (WTF::AtomStringImpl *)v13, v14, v15, v16, v17, v18, v19);
              WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
            }
            else
            {
              *(_DWORD *)v48 -= 2;
            }
          }
          goto LABEL_37;
        }
LABEL_61:
        __break(0xC471u);
        JUMPOUT(0x197E15BD8);
      }
    }
    else if (v72)
    {
      v46 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_34;
    }
    v46 = 0;
    goto LABEL_34;
  }
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x3300000002;
  *(_QWORD *)(v21 + 8) = "date value is not finite in DateTimeFormat format()";
  *(_DWORD *)(v21 + 16) = 4;
  v75 = (WTF::StringImpl *)v21;
  v22 = *(_QWORD *)(a2 + 128);
  v23 = *(JSC::Heap ***)(a2 + 56);
  if ((v22 & 1) != 0)
  {
    v70 = *(uint64_t (**)(_QWORD **))(v22 & 0xFFFFFFFFFFFFFFFCLL);
    v71 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v71 = (_QWORD *)(a2 - 16);
    v72 = (_QWORD *)*v71;
    v73 = a2;
    v74[0] = a2 + 128;
    v22 = v70(&v72);
  }
  v24 = JSC::ErrorInstance::create(v23, v22, &v75, 0, 0, 0, 2, 1);
  v31 = (JSC::Exception *)v24;
  if ((v24 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x4C)))
  {
    v31 = (JSC::Exception *)JSC::Exception::create((uint64_t)v4, (JSC::VM *)v24, 0, v25, v26, v27, v28, v29);
  }
  v20 = (uint64_t)JSC::VM::throwException(v4, (JSC::JSGlobalObject *)a2, v31, v30, v25, v26, v27, v28, v29);
  v39 = v75;
  v75 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 != 2)
    {
      *(_DWORD *)v39 -= 2;
      return v20;
    }
    WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
    goto LABEL_15;
  }
  return v20;
}

uint64_t JSC::jsString(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t SlowCase;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v8 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return *(_QWORD *)(a1 + 41968);
  v9 = *(_DWORD *)(v8 + 4);
  if (v9 != 1)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v8 + 16);
      goto LABEL_5;
    }
    return *(_QWORD *)(a1 + 41968);
  }
  v10 = *(_DWORD *)(v8 + 16);
  v17 = *(unsigned __int8 **)(v8 + 8);
  if ((v10 & 4) != 0)
  {
    v18 = *v17;
    return *(_QWORD *)(a1 + 8 * v18 + 42216);
  }
  v18 = *(unsigned __int16 *)v17;
  if (v18 <= 0xFF)
    return *(_QWORD *)(a1 + 8 * v18 + 42216);
LABEL_5:
  v11 = (uint64_t *)(a1 + 39696);
  *(_QWORD *)a2 = 0;
  v12 = v8;
  if ((v10 & 3) == 2)
  {
    v12 = v8;
    do
    {
      v12 = *(_QWORD *)(v12 + 24);
      v10 = *(_DWORD *)(v12 + 16);
    }
    while ((v10 & 3) == 2);
  }
  if ((v10 & 8) != 0)
  {
    v13 = 0;
  }
  else
  {
    *(_DWORD *)(v12 + 16) = v10 | 8;
    v13 = (unint64_t)*(unsigned int *)(v12 + 4) << ((v10 & 4) == 0);
  }
  v14 = a1 + 192;
  v15 = *v11;
  if ((unint64_t)*v11 >= *(_QWORD *)(a1 + 39704))
  {
    v15 = *(_QWORD *)(a1 + 39712);
    if ((v15 & 1) != 0)
    {
      v20 = a1 + 39672;
      v24 = v13;
      v25 = a1;
      v21 = a1 + 192;
      v23 = v8;
      JSC::sanitizeStackForVM((JSC *)a1, a2, a3, v13, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v20, v21, 16, 0, 0);
      v8 = v23;
      v13 = v24;
      v14 = v21;
      v15 = SlowCase;
      a1 = v25;
      goto LABEL_10;
    }
    v19 = *(_QWORD *)(v15 + 8) ^ *(_QWORD *)(a1 + 39720);
    *(_QWORD *)(a1 + 39704) = v15 + HIDWORD(v19);
    *(_QWORD *)(a1 + 39712) = v15 + (int)v19;
  }
  *v11 = v15 + 16;
LABEL_10:
  *(_DWORD *)v15 = (unint64_t)v11[227] >> 4;
  *(_DWORD *)(v15 + 4) = 17302016;
  *(_QWORD *)(v15 + 8) = v8;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  if (v13 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase(v14, 0, v15, v13, a5, a6, a7, a8);
  return v15;
}

JSC::Exception *JSC::IntlDateTimeFormat::formatToParts(JSC::IntlDateTimeFormat *this, unint64_t a2, double a3, JSC::JSString *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  JSC::Heap **v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  JSC::Exception *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::Exception *v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  unsigned int v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  int v46;
  int v48;
  unint64_t v49;
  unint64_t v50;
  JSC::JSGlobalObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  int v71;
  BOOL v72;
  unsigned int v73;
  char *v74;
  uint64_t v75;
  JSC::VM *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t SlowCase;
  __n128 v88;
  unint64_t v89;
  unint64_t v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  uint64_t v99;
  unint64_t v100;
  const char *v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::AtomStringImpl *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  unsigned int v120;
  char *v121;
  uint64_t v122;
  JSC::VM *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t Slow;
  __n128 v135;
  unint64_t v136;
  unint64_t v137;
  __n128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __n128 v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  int v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t OutOfMemoryError;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  JSC::Exception *v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  WTF *v186;
  WTF *v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t (*v195)(WTF **);
  WTF **v196;
  WTF *v197;
  JSC::VMTraps *v199;
  uint64_t v200;
  WTF *v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  JSC::JSString *v205;
  int v206;
  uint64_t v207;
  WTF *v208;
  unint64_t v209;
  _QWORD v210[8];
  int v211;
  JSC::VM *v212;
  WTF::StringImpl *v213;
  unint64_t v214;
  int v215;
  int v216;
  uint64_t v217;

  v5 = *(_QWORD *)(a2 + 56);
  v212 = (JSC::VM *)v5;
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v8 = 0x3A00000002;
    *(_QWORD *)(v8 + 8) = "date value is not finite in DateTimeFormat formatToParts()";
    *(_DWORD *)(v8 + 16) = 4;
    v213 = (WTF::StringImpl *)v8;
    v9 = *(_QWORD *)(a2 + 128);
    v10 = *(JSC::Heap ***)(a2 + 56);
    if ((v9 & 1) != 0)
    {
      v195 = *(uint64_t (**)(WTF **))(v9 & 0xFFFFFFFFFFFFFFFCLL);
      v196 = (WTF **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v196 = (WTF **)(a2 - 16);
      v208 = *v196;
      v209 = a2;
      v210[0] = a2 + 128;
      v9 = v195(&v208);
    }
    v11 = JSC::ErrorInstance::create(v10, v9, &v213, 0, 0, 0, 2, 1);
    v18 = (JSC::Exception *)v11;
    if ((v11 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
    {
      v18 = (JSC::Exception *)JSC::Exception::create(v5, (JSC::VM *)v11, 0, v12, v13, v14, v15, v16);
    }
    v26 = JSC::VM::throwException((JSC::VM *)v5, (JSC::JSGlobalObject *)a2, v18, v17, v12, v13, v14, v15, v16);
    v27 = v213;
    v213 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::~StringImpl(v27, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v27 -= 2;
      }
    }
    return v26;
  }
  v211 = 0;
  v7 = ufieldpositer_open();
  v208 = (WTF *)v210;
  v209 = 0x2000000020;
  LODWORD(v213) = 0;
  v28 = udat_formatForFields();
  v35 = v28;
  v205 = a4;
  if ((int)v213 <= 0)
  {
    HIDWORD(v209) = v28;
    v211 = (int)v213;
    goto LABEL_16;
  }
  if ((_DWORD)v213 != 15)
  {
    v211 = (int)v213;
LABEL_111:
    v166 = JSC::throwTypeError(a2, &v212, (uint64_t)"failed to format date value", 28);
    goto LABEL_115;
  }
  LODWORD(v213) = 0;
  if (v209 < (unint64_t)v28)
  {
    v183 = v209 + ((unint64_t)v209 >> 2);
    if (v183 >= 0x10)
      v184 = v183 + 1;
    else
      v184 = 16;
    if (v184 <= v28)
      v185 = v28;
    else
      v185 = v184;
    v186 = v208;
    if (v185 < 0x21)
    {
      v208 = (WTF *)v210;
      LODWORD(v209) = 32;
      v187 = (WTF *)v210;
    }
    else
    {
      if (v185 >> 31)
      {
        __break(0xC471u);
LABEL_146:
        __break(1u);
        JUMPOUT(0x197E168B4);
      }
      v187 = (WTF *)WTF::fastMalloc((WTF *)(2 * v185));
      LODWORD(v209) = v185;
      v208 = v187;
    }
    memcpy(v187, v186, 2 * HIDWORD(v209));
    if (v210 != (_QWORD *)v186 && v186)
    {
      if (v208 == v186)
      {
        v208 = 0;
        LODWORD(v209) = 0;
      }
      WTF::fastFree((unint64_t)v186, v188, v189, v190, v191, v192, v193, v194);
    }
  }
  HIDWORD(v209) = v35;
  udat_formatForFields();
  v211 = (int)v213;
  if ((int)v213 > 0)
    goto LABEL_111;
  v35 = HIDWORD(v209);
LABEL_16:
  if (v35)
  {
    v44 = v208;
    v45 = 2 * v35;
    do
    {
      v46 = *(unsigned __int16 *)v44;
      if (v46 == 8239 || v46 == 8201)
        *(_WORD *)v44 = 32;
      v44 = (WTF *)((char *)v44 + 2);
      v45 -= 2;
    }
    while (v45);
  }
  v48 = *(_DWORD *)(a2 + 908);
  if (v48)
    v49 = 16 * (v48 & 0xFFFFFFFE);
  else
    v49 = 0;
  v50 = JSC::JSArray::tryCreate((JSC::JSArray *)v5, v49, 0, v29, v30, v31, v32, v33, v34);
  if (v50)
  {
    v26 = (JSC::Exception *)v50;
    v201 = v208;
    v52 = HIDWORD(v209);
    v53 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v53 = 0x700000002;
    *(_QWORD *)(v53 + 8) = "literal";
    *(_DWORD *)(v53 + 16) = 4;
    v213 = (WTF::StringImpl *)v53;
    v200 = JSC::jsNontrivialString(v5, (JSC::VM *)&v213, v54, v55, v56, v57, v58, v59);
    v67 = v213;
    v213 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
      {
        WTF::StringImpl::~StringImpl(v67, v60, v61, v62, v63, v64, v65, v66);
        WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
      }
      else
      {
        *(_DWORD *)v67 -= 2;
      }
    }
    v207 = 0;
    v206 = HIDWORD(v209);
    if (SHIDWORD(v209) >= 1)
    {
      v68 = 0;
      v69 = v5 + 41952;
      v199 = (JSC::VMTraps *)(v5 + 64);
      v203 = v52;
      v204 = (unint64_t)v26;
      v202 = v7;
      while (1)
      {
        v70 = ufieldpositer_next();
        if (v70 < 0)
        {
          v71 = v206;
          LODWORD(v207) = v206;
          HIDWORD(v207) = v206;
        }
        else
        {
          v71 = HIDWORD(v207);
        }
        v72 = __OFSUB__(v71, v68);
        v73 = v71 - v68;
        if (((v73 & 0x80000000) != 0) ^ v72 | (v73 == 0))
          goto LABEL_52;
        if (v52 <= v68)
        {
          v75 = 0x100000000;
          v74 = "";
        }
        else if (v52 - v68 > v73 || (v73 = v52 - v68, v74 = (char *)v201, v75 = v52, v68))
        {
          if (v52 - (unint64_t)v68 < v73)
            goto LABEL_146;
          v75 = v73;
          v74 = (char *)v201 + 2 * v68;
        }
        v83 = JSC::jsString(v5, v74, v75);
        v84 = *(_QWORD *)(a2 + 56);
        v85 = *(_QWORD *)(v84 + 15056);
        if (v85)
        {
          v86 = *(unsigned int *)(v85 + 60);
          SlowCase = *(_QWORD *)(v85 + 24);
          if (SlowCase < *(_QWORD *)(v85 + 32))
            goto LABEL_46;
          SlowCase = *(_QWORD *)(v85 + 40);
          if ((SlowCase & 1) == 0)
          {
            v159 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v85 + 48);
            *(_QWORD *)(v85 + 32) = SlowCase + HIDWORD(v159);
            *(_QWORD *)(v85 + 40) = SlowCase + (int)v159;
LABEL_46:
            *(_QWORD *)(v85 + 24) = SlowCase + v86;
            goto LABEL_47;
          }
          JSC::sanitizeStackForVM(*(JSC **)(a2 + 56), v76, v77, v78, v79, v80, v81, v82);
          SlowCase = JSC::LocalAllocator::allocateSlowCase(v85, v84 + 192, v86, 0, 0, v163, v164, v165);
        }
        else
        {
          SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v84 + 14936, *(JSC **)(a2 + 56), 0x40uLL, 0, v79, v80, v81, v82);
          if (!SlowCase)
          {
            __break(0xC471u);
            JUMPOUT(0x197E166B0);
          }
        }
LABEL_47:
        *(_DWORD *)SlowCase = 0;
        *(_DWORD *)SlowCase = *(_DWORD *)(a2 + 848);
        *(_DWORD *)(SlowCase + 4) = 16783360;
        v88.n128_u64[1] = 0;
        *(_OWORD *)(SlowCase + 8) = 0u;
        *(_OWORD *)(SlowCase + 24) = 0u;
        *(_OWORD *)(SlowCase + 40) = 0u;
        *(_QWORD *)(SlowCase + 56) = 0;
        v52 = v203;
        v26 = (JSC::Exception *)v204;
        if (*(_BYTE *)(v84 + 755))
          __dmb(0xAu);
        v89 = *(_QWORD *)(*(_QWORD *)v69 + 2560);
        v213 = 0;
        v214 = SlowCase;
        v215 = -1;
        v88.n128_u64[0] = 0x100000001000000;
        v216 = 0x1000000;
        v217 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v5, v89, v200, 0, (uint64_t)&v213, v81, v82, v88);
        v90 = *(_QWORD *)(*(_QWORD *)v69 + 2608);
        v213 = 0;
        v214 = SlowCase;
        v215 = -1;
        v91.n128_u64[0] = 0x100000001000000;
        v216 = 0x1000000;
        v217 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v5, v90, v83, 0, (uint64_t)&v213, v92, v93, v91);
        v99 = (uint64_t)v205;
        if (v205)
        {
          v100 = *(_QWORD *)(*(_QWORD *)v69 + 2336);
          v213 = 0;
          v214 = SlowCase;
          v215 = -1;
          v98.n128_u64[0] = 0x100000001000000;
          v216 = 0x1000000;
          v217 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v5, v100, (uint64_t)v205, 0, (uint64_t)&v213, v96, v97, v98);
        }
        JSC::JSArray::push(v204, (JSC::VM **)a2, SlowCase, v99, v94, v95, v96, v97, v98);
        if (*(_DWORD *)(v5 + 80))
        {
          v158 = *(_DWORD *)(v5 + 80);
          if ((v158 & 0x27) != 0 && (v158 & 0x20) == 0)
            JSC::VMTraps::handleTraps(v199, 7u, v61, v62, v63, v64, v65, v66);
          if (*(_QWORD *)(v5 + 16))
          {
LABEL_136:
            v26 = 0;
            v7 = v202;
            goto LABEL_137;
          }
        }
LABEL_52:
        v68 = v207;
        if ((v70 & 0x80000000) == 0)
        {
          v101 = "era";
          v102 = 4;
          switch(v70)
          {
            case 0:
              goto LABEL_70;
            case 1:
            case 20:
              v101 = "year";
              goto LABEL_59;
            case 2:
            case 26:
              v101 = "month";
              v102 = 6;
              goto LABEL_70;
            case 3:
              v101 = "day";
              v102 = 4;
              goto LABEL_70;
            case 4:
            case 5:
            case 15:
            case 16:
              v101 = "hour";
LABEL_59:
              v102 = 5;
              goto LABEL_70;
            case 6:
              v101 = "minute";
              goto LABEL_67;
            case 7:
              v101 = "second";
LABEL_67:
              v102 = 7;
              goto LABEL_70;
            case 8:
              v101 = "fractionalSecond";
              v102 = 17;
              goto LABEL_70;
            case 9:
            case 19:
            case 25:
              v101 = "weekday";
              goto LABEL_62;
            case 14:
            case 35:
            case 36:
              v101 = "dayPeriod";
              v102 = 10;
              goto LABEL_70;
            case 17:
            case 23:
            case 24:
            case 29:
            case 31:
            case 32:
            case 33:
              v101 = "timeZoneName";
              v102 = 13;
              goto LABEL_70;
            case 30:
              v101 = "yearName";
              v102 = 9;
              goto LABEL_70;
            case 34:
              v101 = "relatedYear";
              v102 = 12;
              goto LABEL_70;
            default:
              v101 = "unknown";
LABEL_62:
              v102 = 8;
LABEL_70:
              v103 = v102 - 1;
              v104 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_DWORD *)v104 = 2;
              *(_DWORD *)(v104 + 4) = v103;
              *(_QWORD *)(v104 + 8) = v101;
              *(_DWORD *)(v104 + 16) = 4;
              v213 = (WTF::StringImpl *)v104;
              v118 = JSC::jsNontrivialString(v5, (JSC::VM *)&v213, v105, v106, v107, v108, v109, v110);
              v119 = v213;
              v213 = 0;
              if (v119)
              {
                if (*(_DWORD *)v119 == 2)
                {
                  WTF::StringImpl::~StringImpl(v119, v111, v112, v113, v114, v115, v116, v117);
                  WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
                }
                else
                {
                  *(_DWORD *)v119 -= 2;
                }
              }
              if (v52 <= HIDWORD(v207))
              {
                v122 = 0x100000000;
                v121 = "";
              }
              else
              {
                v120 = v207 - HIDWORD(v207);
                if ((int)v52 - HIDWORD(v207) > (v207 - HIDWORD(v207))
                  || (v120 = v52 - HIDWORD(v207), v121 = (char *)v201, v122 = v52, HIDWORD(v207)))
                {
                  if (v52 - (unint64_t)HIDWORD(v207) < v120)
                    goto LABEL_146;
                  v122 = v120;
                  v121 = (char *)v201 + 2 * HIDWORD(v207);
                }
              }
              v130 = JSC::jsString(v5, v121, v122);
              v131 = *(_QWORD *)(a2 + 56);
              v132 = *(_QWORD *)(v131 + 15056);
              if (v132)
              {
                v133 = *(unsigned int *)(v132 + 60);
                Slow = *(_QWORD *)(v132 + 24);
                if (Slow < *(_QWORD *)(v132 + 32))
                  goto LABEL_81;
                Slow = *(_QWORD *)(v132 + 40);
                if ((Slow & 1) == 0)
                {
                  v157 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v132 + 48);
                  *(_QWORD *)(v132 + 32) = Slow + HIDWORD(v157);
                  *(_QWORD *)(v132 + 40) = Slow + (int)v157;
LABEL_81:
                  *(_QWORD *)(v132 + 24) = Slow + v133;
                  goto LABEL_82;
                }
                JSC::sanitizeStackForVM(*(JSC **)(a2 + 56), v123, v124, v125, v126, v127, v128, v129);
                Slow = JSC::LocalAllocator::allocateSlowCase(v132, v131 + 192, v133, 0, 0, v160, v161, v162);
              }
              else
              {
                Slow = JSC::CompleteSubspace::tryAllocateSlow(v131 + 14936, *(JSC **)(a2 + 56), 0x40uLL, 0, v126, v127, v128, v129);
                if (!Slow)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E168A8);
                }
              }
LABEL_82:
              *(_DWORD *)Slow = 0;
              *(_DWORD *)Slow = *(_DWORD *)(a2 + 848);
              *(_DWORD *)(Slow + 4) = 16783360;
              v135.n128_u64[1] = 0;
              *(_OWORD *)(Slow + 8) = 0u;
              *(_OWORD *)(Slow + 24) = 0u;
              *(_OWORD *)(Slow + 40) = 0u;
              *(_QWORD *)(Slow + 56) = 0;
              v52 = v203;
              v26 = (JSC::Exception *)v204;
              if (*(_BYTE *)(v131 + 755))
                __dmb(0xAu);
              v136 = *(_QWORD *)(*(_QWORD *)v69 + 2560);
              v213 = 0;
              v214 = Slow;
              v215 = -1;
              v135.n128_u64[0] = 0x100000001000000;
              v216 = 0x1000000;
              v217 = 0;
              JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v5, v136, v118, 0, (uint64_t)&v213, v128, v129, v135);
              v137 = *(_QWORD *)(*(_QWORD *)v69 + 2608);
              v213 = 0;
              v214 = Slow;
              v215 = -1;
              v138.n128_u64[0] = 0x100000001000000;
              v216 = 0x1000000;
              v217 = 0;
              JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v5, v137, v130, 0, (uint64_t)&v213, v139, v140, v138);
              v146 = (uint64_t)v205;
              if (v205)
              {
                v147 = *(_QWORD *)(*(_QWORD *)v69 + 2336);
                v213 = 0;
                v214 = Slow;
                v215 = -1;
                v145.n128_u64[0] = 0x100000001000000;
                v216 = 0x1000000;
                v217 = 0;
                JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v5, v147, (uint64_t)v205, 0, (uint64_t)&v213, v143, v144, v145);
              }
              JSC::JSArray::push(v204, (JSC::VM **)a2, Slow, v146, v141, v142, v143, v144, v145);
              if (*(_DWORD *)(v5 + 80))
              {
                v156 = *(_DWORD *)(v5 + 80);
                if ((v156 & 0x27) != 0 && (v156 & 0x20) == 0)
                  JSC::VMTraps::handleTraps(v199, 7u, v61, v62, v63, v64, v65, v66);
                if (*(_QWORD *)(v5 + 16))
                  goto LABEL_136;
              }
              break;
          }
        }
        v7 = v202;
        if ((int)v207 >= v206)
          goto LABEL_137;
      }
    }
    goto LABEL_137;
  }
  OutOfMemoryError = JSC::createOutOfMemoryError(a2, v51);
  v174 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v174 = (JSC::Exception *)JSC::Exception::create(v5, (JSC::VM *)OutOfMemoryError, 0, v168, v169, v170, v171, v172);
  }
  v166 = (uint64_t)JSC::VM::throwException((JSC::VM *)v5, (JSC::JSGlobalObject *)a2, v174, v173, v168, v169, v170, v171, v172);
LABEL_115:
  v26 = (JSC::Exception *)v166;
LABEL_137:
  v197 = v208;
  if (v210 != (_QWORD *)v208 && v208)
  {
    v208 = 0;
    LODWORD(v209) = 0;
    WTF::fastFree((unint64_t)v197, v60, v61, v62, v63, v64, v65, v66);
    if (!v7)
      return v26;
    goto LABEL_140;
  }
  if (v7)
LABEL_140:
    ufieldpositer_close();
  return v26;
}

unint64_t JSC::JSArray::tryCreate(JSC::JSArray *this, unint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v9;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t result;
  unint64_t v26;
  unsigned int *v27;
  unsigned __int32 *v28;
  int v29;
  const void *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  __n128 *v35;
  uint64_t v36;
  __n128 *v37;
  __n128 *v38;
  __n128 *v39;
  __n128 *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t SlowCase;
  unint64_t v48;

  v9 = a3;
  v12 = *(unsigned __int16 *)(a2 + 24);
  if (v12 == 65534
    || (v12 == 0xFFFF ? (v13 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84)) : (v13 = *(unsigned __int16 *)(a2 + 24)),
        v13 < 64))
  {
    v14 = 0;
  }
  else if ((v13 - 63) >= 5)
  {
    v31 = (v13 - 64) | ((v13 - 64) >> 1) | (((v13 - 64) | ((v13 - 64) >> 1)) >> 2);
    v32 = v31 | (v31 >> 4) | ((v31 | (v31 >> 4)) >> 8);
    v14 = (v32 | HIWORD(v32)) + 1;
  }
  else
  {
    v14 = 4;
  }
  v15 = *(_BYTE *)(a2 + 8) & 0xE;
  if (v15 > 9)
  {
    v36 = *((_QWORD *)this + 846);
    if (v36)
    {
      v37 = *(__n128 **)(v36 + 24);
      if ((unint64_t)v37 < *(_QWORD *)(v36 + 32))
      {
        *(_QWORD *)(v36 + 24) = (char *)v37 + *(unsigned int *)(v36 + 60);
LABEL_59:
        if (!v37)
          return 0;
        v38 = v37;
LABEL_61:
        v37->n128_u64[0] = v9 | 0x400000000;
        v39 = v38;
        v40 = v38;
        a9.n128_u64[0] = 0;
        while (v38 != v40)
        {
          *v38 = a9;
          v38[1] = a9;
          v38[2] = a9;
          v38[3] = a9;
          v38 += 4;
        }
        while (v38 != v39)
        {
          v38->n128_u64[0] = 0;
          v38 = (__n128 *)((char *)v38 + 8);
        }
        *(__n128 *)((char *)v37 + 8) = 0u;
        v28 = &v37->n128_u32[2];
        *((_OWORD *)v28 + 1) = 0u;
        *((_OWORD *)v28 + 2) = 0u;
        goto LABEL_30;
      }
      v43 = *(unsigned int *)(v36 + 60);
      v38 = *(__n128 **)(v36 + 40);
      if ((v38 & 1) == 0)
      {
        v44 = v38->n128_u64[1] ^ *(_QWORD *)(v36 + 48);
        *(_QWORD *)(v36 + 32) = (char *)v38 + HIDWORD(v44);
        *(_QWORD *)(v36 + 40) = (char *)v38 + (int)v44;
        *(_QWORD *)(v36 + 24) = (char *)v38 + v43;
        v37 = v38;
        goto LABEL_61;
      }
      JSC::sanitizeStackForVM(this, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v36, (char *)this + 192, v43, 0, 1);
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)this + 6648, this, 0x38uLL, 0, a5, a6, a7, a8);
    }
    v37 = (__n128 *)SlowCase;
    goto LABEL_59;
  }
  if (a3 > 0x10000000)
    return 0;
  if (v12 == 65534)
    goto LABEL_12;
  if (v12 == 0xFFFF)
    v12 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84);
  if (v12 < 64)
  {
LABEL_12:
    v16 = 0;
  }
  else if ((v12 - 63) >= 5)
  {
    v33 = (v12 - 64) | ((v12 - 64) >> 1) | (((v12 - 64) | ((v12 - 64) >> 1)) >> 2);
    v34 = v33 | (v33 >> 4) | ((v33 | (v33 >> 4)) >> 8);
    v16 = (v34 | HIWORD(v34)) + 1;
  }
  else
  {
    v16 = 4;
  }
  if (a3 <= 3)
    LODWORD(v17) = 3;
  else
    LODWORD(v17) = (_DWORD)a3;
  if ((_DWORD)a3)
    v17 = v17;
  else
    v17 = 5;
  v18 = v16 + v17;
  v19 = 8 * v18;
  if (v18 > 9)
  {
    if (v18 > 0x3EB)
      v20 = v19 + 8;
    else
      v20 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                            + (((unint64_t)(v19 + 23) >> 2) & 0x7FFFFFFFCLL));
  }
  else
  {
    v20 = (v19 + 23) & 0x1FFFFFFFF0;
  }
  v21 = v20 - 8 * v16 - 8;
  v22 = v21 & 0x7FFFFFFF8;
  a3 = (JSC::Structure *)((v21 & 0x7FFFFFFF8) + 8 * v14 + 8);
  if ((unint64_t)a3 <= 0x1F60
    && (v23 = *(_QWORD *)((char *)this + ((((v21 & 0x7FFFFFFF8) + 8 * v14 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
  {
    v24 = *(unsigned int *)(v23 + 60);
    result = *(_QWORD *)(v23 + 24);
    if (result >= *(_QWORD *)(v23 + 32))
    {
      result = *(_QWORD *)(v23 + 40);
      if ((result & 1) != 0)
      {
        v48 = v21;
        v45 = *(unsigned int *)(v23 + 60);
        JSC::sanitizeStackForVM(this, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v46 = v45;
        v21 = v48;
        result = JSC::LocalAllocator::allocateSlowCase(v23, (char *)this + 192, v46, 0, 1);
        if (!result)
          return result;
      }
      else
      {
        v42 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v23 + 48);
        *(_QWORD *)(v23 + 32) = result + HIDWORD(v42);
        *(_QWORD *)(v23 + 40) = result + (int)v42;
        *(_QWORD *)(v23 + 24) = result + v24;
      }
    }
    else
    {
      *(_QWORD *)(v23 + 24) = result + v24;
      if (!result)
        return result;
    }
  }
  else
  {
    result = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)this + 6648, this, (unint64_t)a3, 0, a5, a6, a7, a8);
    if (!result)
      return result;
  }
  v26 = v21 >> 3;
  if ((v21 >> 3) >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x197E16D18);
  }
  v27 = (unsigned int *)(result + 8 * v14);
  v28 = v27 + 2;
  *v27 = v9;
  v27[1] = v26;
  if (v15 == 6)
  {
    if (v26 > 0x63)
    {
      v30 = &memset_pattern_2;
    }
    else
    {
      if (!(_DWORD)v26)
        goto LABEL_30;
      v30 = &unk_199124A40;
    }
    memset_pattern16(v27 + 2, v30, v22);
  }
  else if (v26 > 0x63)
  {
    v35 = (__n128 *)(v27 + 2);
    a9.n128_u64[0] = 0;
    while (v35 != (__n128 *)((char *)v28 + (v21 & 0x7FFFFFFC0)))
    {
      *v35 = a9;
      v35[1] = a9;
      v35[2] = a9;
      v35[3] = a9;
      v35 += 4;
    }
    while (v35 != (__n128 *)((char *)v28 + v22))
    {
      v35->n128_u64[0] = 0;
      v35 = (__n128 *)((char *)v35 + 8);
    }
  }
  else if ((_DWORD)v26)
  {
    bzero(v27 + 2, v22);
  }
LABEL_30:
  result = *((_QWORD *)this + 4698);
  if (result < *((_QWORD *)this + 4699))
  {
LABEL_31:
    *((_QWORD *)this + 4698) = result + 16;
    goto LABEL_32;
  }
  result = *((_QWORD *)this + 4700);
  if ((result & 1) == 0)
  {
    v41 = *(_QWORD *)(result + 8) ^ *((_QWORD *)this + 4701);
    *((_QWORD *)this + 4699) = result + HIDWORD(v41);
    *((_QWORD *)this + 4700) = result + (int)v41;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM(this, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((char *)this + 37560, (char *)this + 192, 16, 0, 0);
LABEL_32:
  *(_DWORD *)result = 0;
  v29 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)result = a2 >> 4;
  *(_DWORD *)(result + 4) = v29;
  *(_QWORD *)(result + 8) = v28;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::jsString(uint64_t a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unsigned int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;

  if (!(_DWORD)a3)
    return *(_QWORD *)(a1 + 41968);
  if ((_DWORD)a3 == 1)
  {
    if (BYTE4(a3))
    {
      v20 = *(unsigned __int8 *)a2;
    }
    else
    {
      if ((unsigned __int16)*a2 >= 0x100u)
        goto LABEL_4;
      v20 = *a2;
    }
    return *(_QWORD *)(a1 + 8 * v20 + 42216);
  }
  if (!BYTE4(a3))
  {
LABEL_4:
    WTF::StringImpl::create(a2, a3, (uint64_t *)&v29);
    goto LABEL_5;
  }
  WTF::StringImpl::create(a2, a3, (uint64_t *)&v29);
LABEL_5:
  v17 = JSC::JSString::create(a1, (JSC::VM *)&v29, v4, v5, v6, v7, v8, v9);
  v18 = v29;
  v29 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return v17;
}

uint64_t JSC::IntlDateTimeFormat::createDateIntervalFormatIfNecessary(JSC::IntlDateTimeFormat *this, JSC::JSGlobalObject *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  char *v30;
  uint64_t v31;
  int8x16_t *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  size_t v39;
  uint64_t v40;
  __int128 v41;
  char *v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  char *v46;
  char *v47;
  char *v48;
  __int16 v49;
  uint64_t v50;
  char *v51;
  const char *v52;
  int v53;
  WTF::StringImpl *v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  WTF *v67;
  WTF *v68;
  __int16 v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF *v83;
  unint64_t v84;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF::AtomStringImpl *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  __int128 v118;
  char *v119;
  int8x16_t v120;
  __int128 v121;
  __int128 v122;
  char *v123;
  char *v124;
  char *v125;
  WTF::StringImpl *v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int128 *v135;
  unsigned __int128 *v136;
  unsigned __int128 v137;
  char v138;
  unsigned int v139;
  WTF *v140;
  unint64_t v141;
  _BYTE v142[64];
  WTF *v143;
  uint64_t v144;
  int v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  unsigned int v148;
  char v149;
  WTF *v150;
  int v151;
  int Skeleton;
  _BYTE v153[64];
  _BYTE *v154;
  int v155;
  int v156;
  _BYTE v157[64];
  JSC::VM *v158;
  const char *v159;
  int v160;
  int8x16x2_t v161;
  int8x16x2_t v162;
  int8x16x2_t v163;
  int8x16x2_t v164;
  int8x16x2_t v165;
  int8x16x2_t v166;

  v158 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v2 = *((_QWORD *)this + 4);
  if (v2)
    return v2;
  v154 = v157;
  v155 = 32;
  v156 = udat_toPattern();
  v150 = (WTF *)v153;
  v151 = 32;
  LODWORD(v140) = 0;
  Skeleton = udatpg_getSkeleton();
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v149 = 1;
  v12 = *((_QWORD *)this + 6);
  v11 = *((_QWORD *)this + 7);
  v13 = *((_QWORD *)this + 8);
  if (v12)
  {
    v14 = *(_DWORD *)(v12 + 4);
    if (v11)
      goto LABEL_4;
  }
  else
  {
    v14 = 0;
    if (v11)
    {
LABEL_4:
      v15 = *(_DWORD *)(v11 + 4);
      if (v13)
        goto LABEL_5;
LABEL_17:
      v17 = 4;
      goto LABEL_7;
    }
  }
  v15 = 0;
  if (!v13)
    goto LABEL_17;
LABEL_5:
  v16 = *(_DWORD *)(v13 + 4);
  if (v16 >= 0xFFFFFFFC)
    v17 = -1;
  else
    v17 = v16 + 4;
LABEL_7:
  v18 = __CFADD__(v17, v15);
  v19 = v17 + v15;
  if (v18 || v19 >= 0xFFFFFFFA)
    v20 = -1;
  else
    v20 = v19 + 6;
  v21 = (v20 + v14);
  if (__CFADD__(v20, v14))
  {
    v21 = 0xFFFFFFFFLL;
    if (!v12)
      goto LABEL_19;
  }
  else if (!v12)
  {
    goto LABEL_19;
  }
  if ((*(_BYTE *)(v12 + 16) & 4) == 0)
  {
    v22 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v146, (WTF::AtomStringImpl *)v21, v5, v6, v7, v8, v9, v10);
    if (v22)
    {
      v30 = (char *)v22;
      goto LABEL_25;
    }
    goto LABEL_47;
  }
LABEL_19:
  if ((!v11 || (*(_BYTE *)(v11 + 16) & 4) != 0) && (!v13 || (*(_BYTE *)(v13 + 16) & 4) != 0))
  {
    v36 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v146, (WTF::AtomStringImpl *)v21, v5, v6, v7, v8, v9, v10);
    if (v36)
    {
      v37 = v36;
      if (v12)
      {
        v38 = *(_BYTE **)(v12 + 8);
        v39 = *(unsigned int *)(v12 + 4);
        if ((*(_BYTE *)(v12 + 16) & 4) != 0)
        {
          if ((_DWORD)v39 == 1)
          {
            *v36 = *v38;
          }
          else if ((_DWORD)v39)
          {
            memcpy(v36, v38, v39);
          }
        }
        else
        {
          if (v39 < 0x10)
          {
            v135 = (unsigned __int128 *)v36;
          }
          else
          {
            v135 = (unsigned __int128 *)&v36[v39 & 0xFFFFFFF0];
            v136 = (unsigned __int128 *)v36;
            do
            {
              v137 = (unsigned __int128)vld2q_s8(v38);
              v38 += 32;
              *v136++ = v137;
            }
            while (v136 != v135);
          }
          while (v135 != (unsigned __int128 *)&v36[v39])
          {
            v138 = *v38;
            v38 += 2;
            *(_BYTE *)v135 = v138;
            v135 = (unsigned __int128 *)((char *)v135 + 1);
          }
        }
        v40 = *(unsigned int *)(v12 + 4);
      }
      else
      {
        v40 = 0;
      }
      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v37[v40], "-u-ca-", 6u, v11, "-nu-", 4u, v13);
    }
    goto LABEL_47;
  }
  v31 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v146, (WTF::AtomStringImpl *)v21, v5, v6, v7, v8, v9, v10);
  if (v31)
  {
    v30 = (char *)v31;
    if (!v12)
    {
      v50 = 0;
LABEL_46:
      v51 = &v30[2 * v50];
      *(_QWORD *)v51 = 0x63002D0075002DLL;
      *((_DWORD *)v51 + 2) = 2949217;
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v51 + 12, v11, (int8x16_t *)"-nu-", 4, v13);
      goto LABEL_47;
    }
LABEL_25:
    v32 = *(int8x16_t **)(v12 + 8);
    v33 = *(unsigned int *)(v12 + 4);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      v34 = &v30[2 * v33];
      if (v33 >= 0x40)
      {
        v35 = &v30[2 * (v33 & 0xFFFFFFC0)];
        v41 = 0uLL;
        v42 = v30;
        do
        {
          v161.val[0] = *v32;
          v43 = v32[1];
          v163.val[0] = v32[2];
          v44 = v32[3];
          v32 += 4;
          v45 = v44;
          v163.val[1] = 0uLL;
          v165.val[0] = v43;
          v161.val[1] = 0uLL;
          v46 = v42;
          vst2q_s8(v46, v161);
          v46 += 32;
          v165.val[1] = 0uLL;
          vst2q_s8(v46, v165);
          v47 = v42 + 64;
          vst2q_s8(v47, v163);
          v48 = v42 + 96;
          vst2q_s8(v48, *(int8x16x2_t *)(&v41 - 1));
          v42 += 128;
        }
        while (v42 != v35);
      }
      else
      {
        v35 = v30;
      }
      while (v35 != v34)
      {
        v49 = v32->u8[0];
        v32 = (int8x16_t *)((char *)v32 + 1);
        *(_WORD *)v35 = v49;
        v35 += 2;
      }
    }
    else if ((_DWORD)v33 == 1)
    {
      *(_WORD *)v30 = v32->i16[0];
    }
    else if ((_DWORD)v33)
    {
      memcpy(v30, v32, 2 * v33);
    }
    v50 = *(unsigned int *)(v12 + 4);
    goto LABEL_46;
  }
LABEL_47:
  v52 = "h11";
  switch(*((_BYTE *)this + 88))
  {
    case 0:
      goto LABEL_53;
    case 1:
      goto LABEL_51;
    case 2:
      v52 = "h12";
      goto LABEL_51;
    case 3:
      v52 = "h23";
      goto LABEL_51;
    case 4:
      v52 = "h24";
LABEL_51:
      v140 = (WTF *)"-hc-";
      LODWORD(v141) = 4;
      v53 = 3;
      break;
    default:
      v52 = 0;
      v53 = 0;
      v140 = (WTF *)"-hc-";
      LODWORD(v141) = 4;
      break;
  }
  v159 = v52;
  v160 = v53;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v146, (int8x16_t **)&v140, (uint64_t)&v159, v24, v25, v26, v27, v28);
LABEL_53:
  v54 = v146;
  if (v146)
    goto LABEL_54;
  if ((v148 & 0x80000000) == 0 && v147 && *((_DWORD *)v147 + 1) > v148 + (v148 >> 2))
  {
    if ((*((_BYTE *)v147 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v146, (WTF::AtomStringImpl *)v148, v23, v24, v25, v26, v27, v28);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v146, (WTF::AtomStringImpl *)v148, v23, v24, v25, v26, v27, v28);
    v126 = v146;
    v146 = v147;
    v147 = 0;
    if (v126)
    {
      if (*(_DWORD *)v126 == 2)
      {
        WTF::StringImpl::~StringImpl(v126, v110, v111, v112, v113, v114, v115, v116);
        WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
      }
      else
      {
        *(_DWORD *)v126 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v146);
  v54 = v146;
  if (v146)
LABEL_54:
    *(_DWORD *)v54 += 2;
  v140 = v54;
  WTF::String::utf8((uint64_t *)&v140, 0, v24, v25, v26, v27, v28, &v159, v29);
  v140 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v55, v56, v57, v58, v59, v60, v61);
      WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  v145 = 0;
  v62 = *((_QWORD *)this + 10);
  if (v62)
  {
    v63 = *(WTF **)(v62 + 8);
    v64 = *(_DWORD *)(v62 + 4);
    v65 = ((unint64_t)*(unsigned int *)(v62 + 16) >> 2) & 1;
  }
  else
  {
    v63 = 0;
    v64 = 0;
    v65 = 1;
  }
  v66 = v64;
  v140 = (WTF *)v142;
  v141 = 32;
  v143 = 0;
  v144 = 0;
  if (v65)
  {
    if (v64 > 0x20)
    {
      if (v64 <= 0x29uLL)
        v117 = 41;
      else
        v117 = v64;
      if (v117 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x197E1786CLL);
      }
      v139 = v117;
      v67 = (WTF *)WTF::fastMalloc((WTF *)(2 * v117));
      v140 = v67;
      v141 = __PAIR64__(v64, v139);
      if (v64 < 0x40)
      {
        v68 = v67;
      }
      else
      {
        v68 = (WTF *)((char *)v67 + 2 * (v64 & 0xFFFFFFC0));
        v118 = 0uLL;
        v119 = (char *)v67;
        do
        {
          v162.val[0] = *(int8x16_t *)v63;
          v120 = *((int8x16_t *)v63 + 1);
          v164.val[0] = (int8x16_t)*((_OWORD *)v63 + 2);
          v121 = *((_OWORD *)v63 + 3);
          v63 = (WTF *)((char *)v63 + 64);
          v122 = v121;
          v164.val[1] = 0uLL;
          v166.val[0] = v120;
          v162.val[1] = 0uLL;
          v123 = v119;
          vst2q_s8(v123, v162);
          v123 += 32;
          v166.val[1] = 0uLL;
          vst2q_s8(v123, v166);
          v124 = v119 + 64;
          vst2q_s8(v124, v164);
          v125 = v119 + 96;
          vst2q_s8(v125, *(int8x16x2_t *)(&v118 - 1));
          v119 += 128;
        }
        while (v119 != (char *)v68);
      }
    }
    else
    {
      HIDWORD(v141) = v64;
      v67 = (WTF *)v142;
      v68 = (WTF *)v142;
    }
    while (v68 != (WTF *)((char *)v67 + 2 * v64))
    {
      v69 = *(unsigned __int8 *)v63;
      v63 = (WTF *)((char *)v63 + 1);
      *(_WORD *)v68 = v69;
      v68 = (WTF *)((char *)v68 + 2);
    }
    v63 = v140;
    v66 = HIDWORD(v141);
  }
  v143 = v63;
  v144 = v66;
  v77 = udtitvfmt_open();
  v78 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v77;
  if (v78)
    udtitvfmt_close();
  v79 = v140;
  if (v142 != (_BYTE *)v140 && v140 != 0)
  {
    v140 = 0;
    LODWORD(v141) = 0;
    WTF::fastFree((unint64_t)v79, v70, v71, v72, v73, v74, v75, v76);
  }
  if (v145 < 1)
  {
    v2 = *((_QWORD *)this + 4);
  }
  else
  {
    JSC::throwTypeError((unint64_t)a2, &v158, (uint64_t)"failed to initialize DateIntervalFormat", 40);
    v2 = 0;
  }
  if (v159)
  {
    if (*(_DWORD *)v159 == 1)
      WTF::fastFree((unint64_t)v159, v70, v71, v72, v73, v74, v75, v76);
    else
      --*(_DWORD *)v159;
  }
  v81 = v147;
  v147 = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
    {
      WTF::StringImpl::~StringImpl(v81, (WTF::AtomStringImpl *)v70, v71, v72, v73, v74, v75, v76);
      WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
    }
    else
    {
      *(_DWORD *)v81 -= 2;
    }
  }
  v82 = v146;
  v146 = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, (WTF::AtomStringImpl *)v70, v71, v72, v73, v74, v75, v76);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v82 -= 2;
    }
  }
  v83 = v150;
  if (v153 != (_BYTE *)v150 && v150)
  {
    v150 = 0;
    v151 = 0;
    WTF::fastFree((unint64_t)v83, v70, v71, v72, v73, v74, v75, v76);
  }
  v84 = (unint64_t)v154;
  if (v157 != v154 && v154)
  {
    v154 = 0;
    v155 = 0;
    WTF::fastFree(v84, v70, v71, v72, v73, v74, v75, v76);
  }
  return v2;
}

uint64_t JSC::IntlDateTimeFormat::formatRange(JSC::IntlDateTimeFormat *this, JSC::JSGlobalObject *a2, double a3, double a4)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t DateIntervalFormatIfNecessary;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int Position;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  WTF::StringImpl *v49;
  WTF *v50;
  int v51;
  int v52;
  _QWORD v53[8];
  int v54;
  int v55;
  WTF::StringImpl *v56;
  JSC::VM *v57;

  v5 = *((_QWORD *)a2 + 7);
  v57 = (JSC::VM *)v5;
  v6 = fabs(a3);
  v7 = trunc(a3) + 0.0;
  if (v6 <= 8.64e15)
    v8 = v7;
  else
    v8 = NAN;
  DateIntervalFormatIfNecessary = JSC::IntlDateTimeFormat::createDateIntervalFormatIfNecessary(this, a2);
  if (*(_DWORD *)(v5 + 80))
  {
    v48 = *(_DWORD *)(v5 + 80);
    if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v5 + 64), 7u, v10, v11, v12, v13, v14, v15);
    if (*(_QWORD *)(v5 + 16))
      return 0;
  }
  v55 = 0;
  JSC::formattedValueFromDateRange((uint64_t *)&v56, v8, DateIntervalFormatIfNecessary, *((_QWORD *)this + 3), &v55);
  if (v55 >= 1)
  {
    JSC::throwTypeError((unint64_t)a2, &v57, (uint64_t)"Failed to format date interval", 31);
    v17 = 0;
    v18 = v56;
    goto LABEL_14;
  }
  v18 = v56;
  udtitvfmt_resultAsValue();
  if (v55 >= 1)
    goto LABEL_13;
  v19 = ucfpos_open();
  v20 = v55;
  if (v55 > 0 || (ucfpos_constrainCategory(), v20 = v55, v55 > 0))
  {
    v21 = 0;
    if (!v19)
      goto LABEL_12;
    goto LABEL_11;
  }
  Position = ufmtval_nextPosition();
  v20 = v55;
  v21 = v55 < 1 && Position == 0;
  if (v19)
  {
LABEL_11:
    ucfpos_close();
    v20 = v55;
  }
LABEL_12:
  if (v20 >= 1)
  {
LABEL_13:
    JSC::throwTypeError((unint64_t)a2, &v57, (uint64_t)"Failed to format date interval", 31);
    v17 = 0;
    goto LABEL_14;
  }
  if (!v21)
  {
    v54 = 0;
    ufmtval_getString();
    if (v55 < 1)
    {
      v50 = (WTF *)v53;
      v51 = 32;
      v52 = v54;
      WTF::StringImpl::s_emptyAtomString += 2;
      v49 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
      v17 = JSC::jsString(v5, (JSC::VM *)&v49, v23, v24, v25, v26, v27, v28);
      v38 = v49;
      v49 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
        {
          WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
          WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
        }
        else
        {
          *(_DWORD *)v38 -= 2;
        }
      }
      v39 = v50;
      if (v53 != (_QWORD *)v50 && v50)
      {
        v50 = 0;
        v51 = 0;
        WTF::fastFree((unint64_t)v39, v31, v32, v33, v34, v35, v36, v37);
      }
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  v17 = JSC::IntlDateTimeFormat::format(this, (unint64_t)a2, v8);
LABEL_14:
  if (v18)
    udtitvfmt_closeResult();
  return v17;
}

uint64_t JSC::formattedValueFromDateRange(uint64_t *a1, double a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  result = udtitvfmt_openResult();
  v9 = result;
  if (*a5 > 0)
    goto LABEL_2;
  if (a2 >= -1.22192064e13)
  {
    result = udtitvfmt_formatToResult();
LABEL_20:
    *a1 = v9;
    return result;
  }
  udat_getCalendar();
  result = ucal_clone();
  v10 = result;
  if (*a5 > 0 || (result = ucal_setMillis(), *a5 >= 1))
  {
    if (!v10 || (result = ucal_close(), *a5 > 0))
    {
LABEL_2:
      *a1 = 0;
      goto LABEL_3;
    }
    v10 = 0;
  }
  result = ucal_clone();
  v11 = result;
  if (*a5 <= 0 && (result = ucal_setMillis(), *a5 < 1))
  {
    result = udtitvfmt_formatCalendarToResult();
    if (v11)
      result = ucal_close();
  }
  else
  {
    if (!v11 || (result = ucal_close(), *a5 > 0))
    {
      v12 = 0;
      *a1 = 0;
      if (!v10)
        goto LABEL_17;
      goto LABEL_16;
    }
    result = udtitvfmt_formatCalendarToResult();
  }
  v12 = 1;
  if (v10)
LABEL_16:
    result = ucal_close();
LABEL_17:
  if (v12)
    goto LABEL_20;
LABEL_3:
  if (v9)
    return udtitvfmt_closeResult();
  return result;
}

JSC::Exception *JSC::IntlDateTimeFormat::formatRangeToParts(JSC::IntlDateTimeFormat *this, JSC::JSGlobalObject *a2, double a3, double a4)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t DateIntervalFormatIfNecessary;
  JSC::Exception *v16;
  uint64_t v17;
  JSC::VM **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::JSString *v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  int v42;
  _BOOL4 v43;
  int v45;
  unint64_t v46;
  unint64_t v47;
  JSC::JSGlobalObject *v48;
  uint64_t String;
  uint64_t v50;
  signed int v51;
  uint64_t v52;
  WTF *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int Position;
  JSC::JSGlobalObject *v64;
  unint64_t OutOfMemoryError;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  JSC::Exception *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::AtomStringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::AtomStringImpl *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF::AtomStringImpl *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  char v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  WTF *v135;
  signed int v137;
  int Category;
  int v139;
  int Field;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __n128 v153;
  uint64_t v154;
  const char *v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  WTF::AtomStringImpl *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  JSC::VM *v172;
  WTF::StringImpl *v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __n128 v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  int v190;
  int v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  __n128 v222;
  int v223;
  JSC::VMTraps *v224;
  int v225;
  JSC::VM *v226;
  WTF::StringImpl *v227;
  uint64_t v228;
  WTF::StringImpl *v229[8];
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  WTF *v234;
  unsigned int v235;
  char v236;
  WTF *v237;
  int v238;
  unsigned int v239;
  _QWORD v240[8];
  signed int v241;
  JSC::JSString *v242;
  uint64_t v243;
  int v244;
  JSC::VM *v245;
  JSC::VM **v246;

  v4 = *((_QWORD *)a2 + 7);
  v245 = (JSC::VM *)v4;
  v246 = (JSC::VM **)a2;
  v5 = fabs(a3);
  v6 = trunc(a3) + 0.0;
  if (v5 <= 8.64e15)
    v7 = v6;
  else
    v7 = NAN;
  DateIntervalFormatIfNecessary = JSC::IntlDateTimeFormat::createDateIntervalFormatIfNecessary(this, a2);
  if (*(_DWORD *)(v4 + 80))
  {
    v191 = *(_DWORD *)(v4 + 80);
    if ((v191 & 0x27) != 0 && (v191 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v9, v10, v11, v12, v13, v14);
    if (*(_QWORD *)(v4 + 16))
      return 0;
  }
  v244 = 0;
  JSC::formattedValueFromDateRange(&v243, v7, DateIntervalFormatIfNecessary, *((_QWORD *)this + 3), &v244);
  if (v244 >= 1)
  {
    JSC::throwTypeError((unint64_t)v246, &v245, (uint64_t)"Failed to format date interval", 31);
    v16 = 0;
    v17 = v243;
    goto LABEL_20;
  }
  v17 = v243;
  udtitvfmt_resultAsValue();
  if (v244 >= 1)
  {
LABEL_8:
    v18 = v246;
LABEL_18:
    JSC::throwTypeError((unint64_t)v18, &v245, (uint64_t)"Failed to format date interval", 31);
LABEL_19:
    v16 = 0;
    goto LABEL_20;
  }
  v19 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v19 = 0x600000002;
  *(_QWORD *)(v19 + 8) = "shared";
  *(_DWORD *)(v19 + 16) = 4;
  v237 = (WTF *)v19;
  v33 = (JSC::JSString *)JSC::jsNontrivialString(v4, (JSC::VM *)&v237, v20, v21, v22, v23, v24, v25);
  v34 = v237;
  v237 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  v242 = v33;
  v40 = ucfpos_open();
  v42 = v244;
  if (v244 > 0 || (ucfpos_constrainCategory(), v42 = v244, v244 > 0))
  {
    v43 = 0;
    if (!v40)
      goto LABEL_16;
    goto LABEL_15;
  }
  Position = ufmtval_nextPosition();
  v42 = v244;
  v43 = v244 < 1 && Position == 0;
  if (v40)
  {
LABEL_15:
    ucfpos_close();
    v42 = v244;
  }
LABEL_16:
  if (v42 >= 1)
  {
    v18 = v246;
    goto LABEL_18;
  }
  if (!v43)
  {
    v45 = *((_DWORD *)v246 + 227);
    if (v45)
      v46 = 16 * (v45 & 0xFFFFFFFE);
    else
      v46 = 0;
    v47 = JSC::JSArray::tryCreate((JSC::JSArray *)v4, v46, 0, v35, v36, v37, v38, v39, v41);
    if (!v47)
    {
      v64 = (JSC::JSGlobalObject *)v246;
      OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)v246, v48);
      v72 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v72 = (JSC::Exception *)JSC::Exception::create(v4, (JSC::VM *)OutOfMemoryError, 0, v66, v67, v68, v69, v70);
      }
      JSC::VM::throwException((JSC::VM *)v4, v64, v72, v71, v66, v67, v68, v69, v70);
      goto LABEL_19;
    }
    v16 = (JSC::Exception *)v47;
    v241 = 0;
    String = ufmtval_getString();
    if (v244 >= 1)
      goto LABEL_8;
    v50 = String;
    v51 = v241;
    v237 = (WTF *)v240;
    v238 = 32;
    v239 = v241;
    v52 = 2 * v241;
    if (v241 < 0x21)
    {
      if (!v241)
      {
        v74 = 0;
        v53 = (WTF *)v240;
        goto LABEL_60;
      }
      v53 = (WTF *)v240;
    }
    else
    {
      if (v241 < 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197E189BCLL);
      }
      v53 = (WTF *)WTF::fastMalloc((WTF *)(2 * v241));
      v238 = v51;
      v237 = v53;
    }
    v73 = 0;
    do
    {
      *(_WORD *)((char *)v53 + v73) = *(_WORD *)(v50 + v73);
      v73 += 2;
    }
    while (v52 != v73);
    v74 = v239;
    if (v239)
    {
      v75 = 0;
      v76 = 2 * v239;
      do
      {
        v77 = *(unsigned __int16 *)((char *)v53 + v75);
        if (v77 == 8239 || v77 == 8201)
          *(_WORD *)((char *)v53 + v75) = 32;
        v75 += 2;
      }
      while (v76 != v75);
    }
LABEL_60:
    v234 = v53;
    v235 = v74;
    v236 = 0;
    v79 = ucfpos_open();
    if (v244 >= 1)
      goto LABEL_71;
    v80 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v80 = 0xA00000002;
    *(_QWORD *)(v80 + 8) = "startRange";
    *(_DWORD *)(v80 + 16) = 4;
    v229[0] = (WTF::StringImpl *)v80;
    v94 = JSC::jsNontrivialString(v4, (JSC::VM *)v229, v81, v82, v83, v84, v85, v86);
    v95 = v229[0];
    v229[0] = 0;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
      {
        WTF::StringImpl::~StringImpl(v95, v87, v88, v89, v90, v91, v92, v93);
        WTF::fastFree(v192, v193, v194, v195, v196, v197, v198, v199);
      }
      else
      {
        *(_DWORD *)v95 -= 2;
      }
    }
    v233 = v94;
    v96 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v96 = 0x800000002;
    *(_QWORD *)(v96 + 8) = "endRange";
    *(_DWORD *)(v96 + 16) = 4;
    v229[0] = (WTF::StringImpl *)v96;
    v110 = JSC::jsNontrivialString(v4, (JSC::VM *)v229, v97, v98, v99, v100, v101, v102);
    v111 = v229[0];
    v229[0] = 0;
    if (v111)
    {
      if (*(_DWORD *)v111 == 2)
      {
        WTF::StringImpl::~StringImpl(v111, v103, v104, v105, v106, v107, v108, v109);
        WTF::fastFree(v200, v201, v202, v203, v204, v205, v206, v207);
      }
      else
      {
        *(_DWORD *)v111 -= 2;
      }
    }
    v232 = v110;
    v112 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v112 = 0x700000002;
    *(_QWORD *)(v112 + 8) = "literal";
    *(_DWORD *)(v112 + 16) = 4;
    v229[0] = (WTF::StringImpl *)v112;
    v226 = (JSC::VM *)JSC::jsNontrivialString(v4, (JSC::VM *)v229, v113, v114, v115, v116, v117, v118);
    v126 = v229[0];
    v229[0] = 0;
    if (v126)
    {
      if (*(_DWORD *)v126 == 2)
      {
        WTF::StringImpl::~StringImpl(v126, v119, v120, v121, v122, v123, v124, v125);
        WTF::fastFree(v208, v209, v210, v211, v212, v213, v214, v215);
      }
      else
      {
        *(_DWORD *)v126 -= 2;
      }
    }
    v230 = 0;
    v231 = 0;
    v229[0] = (WTF::StringImpl *)&v231;
    v229[1] = (WTF::StringImpl *)&v233;
    v229[2] = (WTF::StringImpl *)&v230;
    v229[3] = (WTF::StringImpl *)&v232;
    v229[4] = (WTF::StringImpl *)&v242;
    v229[5] = (WTF::StringImpl *)v4;
    v229[6] = (WTF::StringImpl *)&v234;
    v229[7] = (WTF::StringImpl *)&v246;
    v225 = v235;
    v127 = ufmtval_nextPosition();
    if (v244 <= 0)
    {
      v137 = 0;
      v224 = (JSC::VMTraps *)(v4 + 64);
      while (v127)
      {
        Category = ucfpos_getCategory();
        if (v244 >= 1)
          goto LABEL_71;
        v139 = Category;
        Field = ucfpos_getField();
        if (v244 >= 1)
          goto LABEL_71;
        v141 = Field;
        v228 = 0;
        ucfpos_getIndexes();
        if (v244 >= 1)
          goto LABEL_71;
        if ((v139 == 4101 || v139 == 1) && (v139 != 1 || (v141 & 0x80000000) == 0))
        {
          v146 = HIDWORD(v228);
          if (SHIDWORD(v228) > v137)
          {
            v147 = JSC::IntlDateTimeFormat::formatRangeToParts(JSC::JSGlobalObject *,double,double)::$_0::operator()((uint64_t)v229, v226, v137, (HIDWORD(v228) - v137), v142, v143, v144, v145);
            JSC::JSArray::push((unint64_t)v16, v246, v147, v148, v149, v150, v151, v152, v153);
            if (*(_DWORD *)(v4 + 80))
            {
              v189 = *(_DWORD *)(v4 + 80);
              if ((v189 & 0x27) != 0 && (v189 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v224, 7u, v129, v134, v130, v131, v132, v133);
              if (*(_QWORD *)(v4 + 16))
                goto LABEL_72;
            }
            v146 = HIDWORD(v228);
            v137 = HIDWORD(v228);
          }
          if (v139 == 4101)
          {
            v154 = v228;
            if (v141)
            {
              if (v146 == (_DWORD)v228)
              {
                v154 = 0;
                v146 = 0;
              }
              v230 = v146 | (unint64_t)(v154 << 32);
            }
            else
            {
              if (v146 == (_DWORD)v228)
              {
                v154 = 0;
                v146 = 0;
              }
              v231 = v146 | (unint64_t)(v154 << 32);
            }
          }
          else
          {
            v155 = "era";
            v156 = 4;
            switch(v141)
            {
              case 0:
                goto LABEL_117;
              case 1:
              case 20:
                v155 = "year";
                goto LABEL_106;
              case 2:
              case 26:
                v155 = "month";
                v156 = 6;
                goto LABEL_117;
              case 3:
                v155 = "day";
                v156 = 4;
                goto LABEL_117;
              case 4:
              case 5:
              case 15:
              case 16:
                v155 = "hour";
LABEL_106:
                v156 = 5;
                goto LABEL_117;
              case 6:
                v155 = "minute";
                goto LABEL_113;
              case 7:
                v155 = "second";
LABEL_113:
                v156 = 7;
                goto LABEL_117;
              case 8:
                v155 = "fractionalSecond";
                v156 = 17;
                goto LABEL_117;
              case 9:
              case 19:
              case 25:
                v155 = "weekday";
                goto LABEL_110;
              case 14:
              case 35:
              case 36:
                v155 = "dayPeriod";
                v156 = 10;
                goto LABEL_117;
              case 17:
              case 23:
              case 24:
              case 29:
              case 31:
              case 32:
              case 33:
                v155 = "timeZoneName";
                v156 = 13;
                goto LABEL_117;
              case 30:
                v155 = "yearName";
                v156 = 9;
                goto LABEL_117;
              case 34:
                v155 = "relatedYear";
                v156 = 12;
                goto LABEL_117;
              default:
                v155 = "unknown";
LABEL_110:
                v156 = 8;
LABEL_117:
                v157 = v156 - 1;
                v158 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_DWORD *)v158 = 2;
                *(_DWORD *)(v158 + 4) = v157;
                *(_QWORD *)(v158 + 8) = v155;
                *(_DWORD *)(v158 + 16) = 4;
                v227 = (WTF::StringImpl *)v158;
                v172 = (JSC::VM *)JSC::jsNontrivialString(v4, (JSC::VM *)&v227, v159, v160, v161, v162, v163, v164);
                v173 = v227;
                v227 = 0;
                if (v173)
                {
                  if (*(_DWORD *)v173 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v173, v165, v166, v167, v168, v169, v170, v171);
                    WTF::fastFree(v181, v182, v183, v184, v185, v186, v187, v188);
                  }
                  else
                  {
                    *(_DWORD *)v173 -= 2;
                  }
                }
                v174 = JSC::IntlDateTimeFormat::formatRangeToParts(JSC::JSGlobalObject *,double,double)::$_0::operator()((uint64_t)v229, v172, HIDWORD(v228), (v228 - HIDWORD(v228)), v168, v169, v170, v171);
                JSC::JSArray::push((unint64_t)v16, v246, v174, v175, v176, v177, v178, v179, v180);
                if (*(_DWORD *)(v4 + 80))
                {
                  v190 = *(_DWORD *)(v4 + 80);
                  if ((v190 & 0x27) != 0 && (v190 & 0x20) == 0)
                    JSC::VMTraps::handleTraps(v224, 7u, v129, v134, v130, v131, v132, v133);
                  if (*(_QWORD *)(v4 + 16))
                    goto LABEL_72;
                }
                v137 = v228;
                break;
            }
          }
        }
        v127 = ufmtval_nextPosition();
        if (v244 >= 1)
          goto LABEL_71;
      }
      v134 = (v225 - v137);
      if (v225 <= v137)
        goto LABEL_73;
      v216 = JSC::IntlDateTimeFormat::formatRangeToParts(JSC::JSGlobalObject *,double,double)::$_0::operator()((uint64_t)v229, v226, v137, v134, v130, v131, v132, v133);
      JSC::JSArray::push((unint64_t)v16, v246, v216, v217, v218, v219, v220, v221, v222);
      if (!*(_DWORD *)(v4 + 80))
        goto LABEL_73;
      v223 = *(_DWORD *)(v4 + 80);
      if ((v223 & 0x27) != 0 && (v223 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v224, 7u, v129, v134, v130, v131, v132, v133);
      if (!*(_QWORD *)(v4 + 16))
        goto LABEL_73;
    }
    else
    {
LABEL_71:
      JSC::throwTypeError((unint64_t)v246, &v245, (uint64_t)"Failed to format date interval", 31);
    }
LABEL_72:
    v16 = 0;
LABEL_73:
    if (v79)
      ucfpos_close();
    v135 = v237;
    if (v240 != (_QWORD *)v237 && v237 != 0)
    {
      v237 = 0;
      v238 = 0;
      WTF::fastFree((unint64_t)v135, v128, v129, v134, v130, v131, v132, v133);
    }
    goto LABEL_20;
  }
  v16 = JSC::IntlDateTimeFormat::formatToParts(this, (unint64_t)v246, v7, v242);
LABEL_20:
  if (v17)
    udtitvfmt_closeResult();
  return v16;
}

uint64_t JSC::IntlDateTimeFormat::formatRangeToParts(JSC::JSGlobalObject *,double,double)::$_0::operator()(uint64_t a1, JSC::VM *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  JSC *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t result;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  JSC *v48;
  uint64_t Slow;
  uint64_t v50;
  JSC *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  int v57;
  uint64_t v58;

  v14 = *(_DWORD **)a1;
  v15 = *(uint64_t **)(a1 + 8);
  v17 = *(_DWORD **)(a1 + 16);
  v16 = *(uint64_t **)(a1 + 24);
  v19 = *(uint64_t **)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v52 = v16;
  v53 = v19;
  v20 = *(JSC **)(a1 + 48);
  v21 = *((unsigned int *)v20 + 2);
  if (v21 <= a3)
  {
    v23 = 0x100000000;
    v25 = "";
  }
  else if (v21 - a3 > a4 || (a4 = v21 - a3, a3))
  {
    v22 = a3;
    v23 = a4;
    v24 = v21 - a3;
    if (*((_BYTE *)v20 + 12))
    {
      if (v24 >= a4)
      {
        v25 = (char *)(*(_QWORD *)v20 + a3);
        v23 = a4 | 0x100000000;
        goto LABEL_11;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (v24 < a4)
      goto LABEL_24;
    v25 = (char *)(*(_QWORD *)v20 + 2 * a3);
  }
  else
  {
    v25 = *(char **)v20;
    v23 = *((_QWORD *)v20 + 1);
  }
LABEL_11:
  v8 = JSC::jsString(v18, v25, v23);
  v10 = **(_QWORD **)(a1 + 56);
  v20 = *(JSC **)(v10 + 56);
  v9 = *((_QWORD *)v20 + 1882);
  if (v9)
  {
    v22 = *(unsigned int *)(v9 + 60);
    v26 = *(_QWORD *)(v9 + 24);
    if (v26 < *(_QWORD *)(v9 + 32))
    {
LABEL_13:
      *(_QWORD *)(v9 + 24) = v26 + v22;
      goto LABEL_14;
    }
    v26 = *(_QWORD *)(v9 + 40);
    if ((v26 & 1) == 0)
    {
      v42 = *(_QWORD *)(v26 + 8) ^ *(_QWORD *)(v9 + 48);
      *(_QWORD *)(v9 + 32) = v26 + HIDWORD(v42);
      *(_QWORD *)(v9 + 40) = v26 + (int)v42;
      goto LABEL_13;
    }
LABEL_25:
    v50 = (uint64_t)v20 + 192;
    v51 = v20;
    v43 = v22;
    JSC::sanitizeStackForVM(v20, a2, v23, a4, a5, a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v9, v50, v43, 0, 0, v44, v45, v46);
    v20 = v51;
    v26 = SlowCase;
    goto LABEL_14;
  }
  v48 = *(JSC **)(v10 + 56);
  Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v20 + 14936, v48, 0x40uLL, 0, a5, a6, a7, a8);
  v20 = v48;
  v26 = Slow;
  if (!Slow)
  {
    result = 110;
    __break(0xC471u);
    return result;
  }
LABEL_14:
  *(_DWORD *)v26 = 0;
  *(_DWORD *)v26 = *(_DWORD *)(v10 + 848);
  *(_DWORD *)(v26 + 4) = 16783360;
  v27.n128_u64[1] = 0;
  *(_OWORD *)(v26 + 8) = 0u;
  *(_OWORD *)(v26 + 24) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  *(_QWORD *)(v26 + 56) = 0;
  if (*((_BYTE *)v20 + 755))
    __dmb(0xAu);
  v28 = *(_QWORD *)(a1 + 40);
  v29 = *(_QWORD *)(*(_QWORD *)(v28 + 41952) + 2560);
  v54 = 0;
  v55 = v26;
  v56 = -1;
  v27.n128_u64[0] = 0x100000001000000;
  v57 = 0x1000000;
  v58 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v26, v28, v29, (uint64_t)a2, 0, (uint64_t)&v54, a7, a8, v27);
  v30 = *(_QWORD *)(a1 + 40);
  v31 = *(_QWORD *)(*(_QWORD *)(v30 + 41952) + 2608);
  v54 = 0;
  v55 = v26;
  v56 = -1;
  v32.n128_u64[0] = 0x100000001000000;
  v57 = 0x1000000;
  v58 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v26, v30, v31, v8, 0, (uint64_t)&v54, v33, v34, v32);
  v38 = *(_QWORD *)(a1 + 40);
  v39 = *(_QWORD *)(*(_QWORD *)(v38 + 41952) + 2336);
  if (*v14 > (signed int)a3 || v14[1] <= (signed int)a3)
  {
    if (*v17 > (signed int)a3 || (v15 = v52, v17[1] <= (signed int)a3))
      v15 = v53;
  }
  v40 = *v15;
  v54 = 0;
  v55 = v26;
  v56 = -1;
  v37.n128_u64[0] = 0x100000001000000;
  v57 = 0x1000000;
  v58 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v26, v38, v39, v40, 0, (uint64_t)&v54, v35, v36, v37);
  return v26;
}

void JSC::IntlDateTimeFormat::~IntlDateTimeFormat(JSC::IntlDateTimeFormat *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  v15 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v15)
    udtitvfmt_close();
  v16 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v16)
    udat_close();
}

unint64_t JSC::JSObject::didBecomePrototype(unint64_t this, JSC::VM *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD v27[4];

  v10 = this;
  v11 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  if ((*(_BYTE *)(v11 + 0x12) & 8) == 0)
  {
    LODWORD(v26) = 1;
    WORD2(v26) = 0;
    v27[0] = v27;
    v27[1] = v27;
    v27[2] = a2;
    v27[3] = v11;
    this = JSC::Structure::nonPropertyTransitionSlow(a2, v11, 15, (uint64_t)&v26, a6, a7, a8, a9, a3);
    *(_DWORD *)v10 = this >> 4;
    *(_BYTE *)(v10 + 6) = *(_BYTE *)(v10 + 6) & 0x80 | *(_BYTE *)(this + 10);
    *(_BYTE *)(v10 + 5) = *(_BYTE *)(this + 9);
    v20 = (unsigned __int8 *)(v10 + 4);
    if (*(unsigned __int8 *)(v10 + 4) != *(unsigned __int8 *)(this + 8))
    {
      do
      {
        while (1)
        {
          v24 = *v20;
          v25 = __ldxr(v20);
          if (v25 == v24)
            break;
          __clrex();
        }
      }
      while (__stxr(v24 & 0xC0 | *(_BYTE *)(this + 8), v20));
    }
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v10 + 7))
      this = JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v10);
    if (BYTE4(v26) == 1)
      this = (unint64_t)JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v26, v19, v12, v13, v14, v15, v16, v17, v18);
    while (1)
    {
      v21 = (_QWORD *)v27[0];
      if ((_QWORD *)v27[0] == v27)
        break;
      v23 = *(_QWORD *)v27[0];
      v22 = *(_QWORD **)(v27[0] + 8);
      *v22 = *(_QWORD *)v27[0];
      *(_QWORD *)(v23 + 8) = v22;
      *v21 = 0;
      v21[1] = 0;
    }
  }
  if (*(_BYTE *)(v10 + 5) == 32)
    return JSC::JSObject::didBecomePrototype(*(JSC::JSObject **)(v10 + 16), a2);
  return this;
}

BOOL WTF::equalIgnoringASCIICaseCommon<WTF::StringView,WTF::StringView>(unsigned __int16 **a1, unsigned __int8 **a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v16;
  unint64_t v17;
  int v18;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2 != *((_DWORD *)a2 + 2))
    return 0;
  v3 = *a1;
  v4 = *a2;
  if (!*((_BYTE *)a1 + 12))
  {
    if (*((_BYTE *)a2 + 12))
    {
      if (!(_DWORD)v2)
        return 1;
      if ((*v3 | (32 * (*v3 - 65 < 0x1A))) == WTF::asciiCaseFoldTable[*v4])
      {
        v9 = 1;
        do
        {
          v6 = v9;
          if (v2 == v9)
            break;
          v10 = v3[v9] | (32 * (v3[v9] - 65 < 0x1A));
          ++v9;
        }
        while (v10 == WTF::asciiCaseFoldTable[v4[v6]]);
        return v6 >= v2;
      }
    }
    else
    {
      if (!(_DWORD)v2)
        return 1;
      if ((*v3 | (32 * (*v3 - 65 < 0x1A))) == (*(unsigned __int16 *)v4 | (32
                                                                                       * (*(unsigned __int16 *)v4
                                                                                        - 65 < 0x1A))))
      {
        v16 = 1;
        do
        {
          v17 = v16;
          if (v2 == v16)
            break;
          v18 = v3[v16] | (32 * (v3[v16] - 65 < 0x1A));
          ++v16;
        }
        while (v18 == (*(unsigned __int16 *)&v4[2 * v17] | (32
                                                           * (*(unsigned __int16 *)&v4[2 * v17] - 65 < 0x1A))));
        return v17 >= v2;
      }
    }
    return 0;
  }
  if (!*((_BYTE *)a2 + 12))
  {
    if (!(_DWORD)v2)
      return 1;
    if ((*(unsigned __int16 *)v4 | (32 * (*(unsigned __int16 *)v4 - 65 < 0x1A))) == WTF::asciiCaseFoldTable[*(unsigned __int8 *)v3])
    {
      v11 = 1;
      do
      {
        v6 = v11;
        if (v2 == v11)
          break;
        v12 = WTF::asciiCaseFoldTable[*((unsigned __int8 *)v3 + v11)];
        v13 = *(unsigned __int16 *)&v4[2 * v11] | (32 * (*(unsigned __int16 *)&v4[2 * v11] - 65 < 0x1A));
        ++v11;
      }
      while (v13 == v12);
      return v6 >= v2;
    }
    return 0;
  }
  if (!(_DWORD)v2)
    return 1;
  if (WTF::asciiCaseFoldTable[*(unsigned __int8 *)v3] != WTF::asciiCaseFoldTable[*v4])
    return 0;
  v5 = 1;
  do
  {
    v6 = v5;
    if (v2 == v5)
      break;
    v7 = WTF::asciiCaseFoldTable[*((unsigned __int8 *)v3 + v5)];
    v8 = WTF::asciiCaseFoldTable[v4[v5++]];
  }
  while (v7 == v8);
  return v6 >= v2;
}

WTF::StringImpl **std::array<WTF::String,6ul>::~array(WTF::StringImpl **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v9 = a1[5];
  a1[5] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = a1[4];
  a1[4] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = a1[3];
  a1[3] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = a1[2];
  a1[2] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  v13 = a1[1];
  a1[1] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  v14 = *a1;
  *a1 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  return a1;
}

uint64_t std::array<std::optional<WTF::String>,6ul>::~array(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  if (*(_BYTE *)(a1 + 88))
  {
    v9 = *(WTF::StringImpl **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *(_DWORD *)v9 -= 2;
      }
    }
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v10 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  if (*(_BYTE *)(a1 + 56))
  {
    v11 = *(WTF::StringImpl **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v11 -= 2;
      }
    }
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v12 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
      }
      else
      {
        *(_DWORD *)v12 -= 2;
      }
    }
  }
  if (*(_BYTE *)(a1 + 24))
  {
    v13 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
      }
      else
      {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  if (*(_BYTE *)(a1 + 8))
  {
    v14 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      }
      else
      {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  return a1;
}

uint64_t JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(int *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v11;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unsigned __int8 *v42;
  _WORD *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unsigned __int8 *v75;
  uint64_t v77;
  unsigned __int8 v78;
  unint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  JSC::VM *v82;
  int v83;
  uint64_t v84;
  int v85;
  BOOL v86;
  char v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  int v105;
  BOOL v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  int v131;
  JSC::VM *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  unint64_t v141;
  unsigned __int8 *v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  int v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  int v152;
  unsigned int v153;
  int v154;
  unint64_t v155;
  int v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char v161;
  unsigned int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t SlowCase;
  unint64_t Slow;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unsigned int v178;
  __n128 *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  __n128 *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __n128 v196;
  unint64_t v197;
  int v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  int v202;
  uint64_t v203;
  unsigned __int8 *v204;
  int v205;
  _QWORD *v206;
  int v208;
  int v209;
  _QWORD *v210;
  uint64_t v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unint64_t MoreOutOfLineStorage;
  uint64_t v217;
  unsigned int v218;
  unsigned int v219;
  uint64_t v220;
  unsigned int v221;
  unsigned int v222;
  int v223;
  uint64_t v224;
  int v225;
  int v226;
  int v227;
  int v228;
  unint64_t v229;
  int v230;
  uint64_t v231;
  int v232;
  JSC::VM *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  double v241;
  unint64_t v242;
  unsigned __int8 *v243;
  _QWORD *v244;
  _QWORD *v245;
  uint64_t v246;
  int v247;
  int v248;
  uint64_t v249;
  _WORD *v250;
  int v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  __int128 v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _WORD *v259;
  int v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  JSC::VM *v274;
  JSC::VM *v275;
  JSC::VM *v276;
  int v277;
  uint64_t v278;
  _QWORD *v279;
  _QWORD **v280;
  uint64_t v281;
  JSC::VM *v282;

  v9 = a6;
  v11 = a4;
  v15 = *a1;
  v16 = 16 * (*a1 & 0xFFFFFFFE);
  v17 = *(_DWORD *)(v16 + 0x10);
  if ((v17 & 3) == 0)
  {
    if ((v17 & 0x8000000) == 0)
    {
      v18 = *(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x50);
      if ((v18 & 1) != 0)
      {
        v28 = v18 & 0xFFFFFFFFFFFFFFFELL;
        if ((v18 & 0xFFFFFFFFFFFFFFFELL) != 0)
        {
          v46 = (*(_DWORD *)(v28 + 16) >> 13) & 0x1F;
          if ((_DWORD)v46 == 16)
          {
            v47 = *(_QWORD *)(v28 + 48);
            v48 = v47 | 0x1000000000000000;
            v106 = v47 == 2;
            v49 = 0x1000000000000000;
            if (!v106)
              v49 = v48;
          }
          else
          {
            v49 = (v46 << 56) | (16 * *(unsigned int *)(v28 + 72));
          }
          if ((v49 | ((unint64_t)*(unsigned __int8 *)(v28 + 20) << 48)) == (a3 | (a5 << 48) | 0x100000000000000))
          {
LABEL_9:
            v29 = *(unsigned __int16 *)(v28 + 22);
            if (v29 == 65534)
            {
              v29 = -1;
            }
            else if (v29 == 0xFFFF)
            {
              v29 = *(_DWORD *)(*(_QWORD *)(v28 + 64) + 88);
            }
            v30 = *(unsigned __int16 *)(16 * (v15 & 0xFFFFFFFE) + 0x18);
            if (v30 == 65534)
            {
              v35 = 0;
              v36 = *(unsigned __int16 *)(v28 + 24);
              if (v36 == 65534)
                goto LABEL_24;
            }
            else
            {
              if (v30 == 0xFFFF)
                v31 = *(_DWORD *)(*(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x40) + 84);
              else
                v31 = *(unsigned __int16 *)(16 * (v15 & 0xFFFFFFFE) + 0x18);
              v32 = (v31 - 64) | ((v31 - 64) >> 1) | (((v31 - 64) | ((v31 - 64) >> 1)) >> 2);
              v33 = v32 | (v32 >> 4) | ((v32 | (v32 >> 4)) >> 8);
              v34 = v33 | HIWORD(v33);
              if ((v31 - 63) >= 5)
                v35 = v34 + 1;
              else
                v35 = 4;
              if (v31 < 64)
                v35 = 0;
              v36 = *(unsigned __int16 *)(v28 + 24);
              if (v36 == 65534)
                goto LABEL_24;
            }
            if (v36 == 0xFFFF)
              v37 = *(_DWORD *)(*(_QWORD *)(v28 + 64) + 84);
            else
              v37 = v36;
            if (v37 >= 64)
            {
              if ((v37 - 63) >= 5)
              {
                v123 = (v37 - 64) | ((v37 - 64) >> 1) | (((v37 - 64) | ((v37 - 64) >> 1)) >> 2);
                v124 = v123 | (v123 >> 4) | ((v123 | (v123 >> 4)) >> 8);
                v38 = (v124 | HIWORD(v124)) + 1;
              }
              else
              {
                v38 = 4;
              }
LABEL_25:
              if (v35 == v38)
                goto LABEL_26;
              v271 = *a1;
              if (v30 == 65534)
              {
                v121 = 0;
              }
              else
              {
                if (v30 == 0xFFFF)
                  v30 = *(_DWORD *)(*(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x40) + 84);
                v117 = (v30 - 64) | ((v30 - 64) >> 1) | (((v30 - 64) | ((v30 - 64) >> 1)) >> 2);
                v118 = v117 | (v117 >> 4) | ((v117 | (v117 >> 4)) >> 8);
                v119 = (v118 | HIWORD(v118)) + 1;
                if ((v30 - 63) >= 5)
                  v120 = v119;
                else
                  v120 = 4;
                if (v30 >= 64)
                  v121 = v120;
                else
                  v121 = 0;
              }
              if (v36 == 65534)
                goto LABEL_177;
              if (v36 == 0xFFFF)
                v36 = *(_DWORD *)(*(_QWORD *)(v28 + 64) + 84);
              if (v36 < 64
                || ((v36 - 63) >= 5
                  ? (v218 = (v36 - 64) | ((v36 - 64) >> 1) | (((v36 - 64) | ((v36 - 64) >> 1)) >> 2),
                     v219 = v218 | (v218 >> 4) | ((v218 | (v218 >> 4)) >> 8),
                     v158 = (v219 | HIWORD(v219)) + 1)
                  : (v158 = 4),
                    v159 = v158 - v121,
                    v158 <= v121))
              {
LABEL_177:
                __break(0xC471u);
                JUMPOUT(0x197E19C0CLL);
              }
              v273 = a4;
              v160 = *((_QWORD *)a1 + 1);
              if (v160)
              {
                v161 = *(_BYTE *)(16 * (*a1 & 0xFFFFFFFE) + 8);
                v162 = v161 & 0xE;
                if (v162 >= 0xA)
                  v163 = *(unsigned int *)(v160 + 8);
                else
                  v163 = 0;
                v164 = v161 & 0xF;
                if ((v164 - 3) >= 7)
                {
                  if ((v164 - 10) < 4)
                    v165 = 8 * *(unsigned int *)(v160 - 4) + 16;
                  else
                    v165 = 0;
                }
                else
                {
                  v165 = 8 * *(unsigned int *)(v160 - 4);
                }
                if (v162)
                {
                  v166 = 8 * (v163 + v158);
LABEL_235:
                  v167 = 8;
                  goto LABEL_236;
                }
                if (*(unsigned __int8 *)(16 * (*a1 & 0xFFFFFFFE) + 9) - 39 >= 0xB)
                {
                  v167 = 0;
                  v166 = 8 * (v163 + v158);
                }
                else
                {
                  v166 = 8 * (v163 + v158);
                  if ((a1[10] & 0x40) != 0)
                    goto LABEL_235;
                  v167 = 0;
                }
LABEL_236:
                v168 = v167 + v165 + v166;
                if (v168 <= 0x1F60 && (v169 = *(_QWORD *)(a2 + (((v168 + 15) >> 1) & 0x3FFFFFFFF8) + 6736)) != 0)
                {
                  v170 = *(unsigned int *)(v169 + 60);
                  SlowCase = *(_QWORD *)(v169 + 24);
                  if (SlowCase >= *(_QWORD *)(v169 + 32))
                  {
                    v276 = (JSC::VM *)v165;
                    v268 = v163;
                    SlowCase = *(_QWORD *)(v169 + 40);
                    if ((SlowCase & 1) != 0)
                    {
                      v267 = a2 + 192;
                      JSC::sanitizeStackForVM((JSC *)a2, (JSC::VM *)a2, v168, a4, a5, a6, a7, a8);
                      SlowCase = JSC::LocalAllocator::allocateSlowCase(v169, v267, v170, 0, 0);
                    }
                    else
                    {
                      v261 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v169 + 48);
                      *(_QWORD *)(v169 + 32) = SlowCase + HIDWORD(v261);
                      *(_QWORD *)(v169 + 40) = SlowCase + (int)v261;
                      *(_QWORD *)(v169 + 24) = SlowCase + v170;
                    }
                    v163 = v268;
                    v159 = v158 - v121;
                    v165 = (uint64_t)v276;
                  }
                  else
                  {
                    *(_QWORD *)(v169 + 24) = SlowCase + v170;
                  }
                }
                else
                {
                  v257 = v163;
                  v275 = (JSC::VM *)v165;
                  SlowCase = JSC::CompleteSubspace::tryAllocateSlow(a2 + 6648, (JSC *)a2, v168, 0, a5, a6, a7, a8);
                  v165 = (uint64_t)v275;
                  v163 = v257;
                  v159 = v158 - v121;
                  if (!SlowCase)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E1A950);
                  }
                }
                if ((v165 & 7) != 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E1AB28);
                }
                Slow = SlowCase + 8 * v163;
                v173 = Slow + 8 * v158 - 8 * v121;
                v174 = v160 - 8 - 8 * v121;
                v175 = v165 + 8 * v121 + v167;
                if (v175 > 0xF0)
                {
                  v252 = v175 & 0x3FFFFFFFE0;
                  v253 = v175 + v173;
                  v254 = v252 + v173;
                  while (v173 != v254)
                  {
                    a9 = *(__n128 *)v174;
                    v255 = *(_OWORD *)(v174 + 16);
                    v174 += 32;
                    *(__n128 *)v173 = a9;
                    *(_OWORD *)(v173 + 16) = v255;
                    v173 += 32;
                  }
                  while (v173 != v253)
                  {
                    v256 = *(_QWORD *)v174;
                    v174 += 8;
                    *(_QWORD *)v173 = v256;
                    v173 += 8;
                  }
                  v9 = a6;
                  v11 = v273;
                }
                else
                {
                  v9 = a6;
                  v11 = v273;
                  if (v175 >= 8)
                  {
                    v176 = 0;
                    v177 = v175 >> 3;
                    v178 = 1;
                    do
                    {
                      *(_QWORD *)(v173 + 8 * v176) = *(_QWORD *)(v174 + 8 * v176);
                      v176 = v178;
                      v87 = v177 > v178++;
                    }
                    while (v87);
                  }
                }
                v179 = (__n128 *)Slow;
                a9.n128_u64[0] = 0;
                while (v179 != (__n128 *)(((8 * v159) & 0xFFFFFFFFFFFFFFC0) + Slow))
                {
                  *v179 = a9;
                  v179[1] = a9;
                  v179[2] = a9;
                  v179[3] = a9;
                  v179 += 4;
                }
                while (v179 != (__n128 *)(Slow + 8 * v159))
                {
                  v179->n128_u64[0] = 0;
                  v179 = (__n128 *)((char *)v179 + 8);
                }
                goto LABEL_250;
              }
              v184 = 8 * v158;
              if (v158 <= 0x3EC
                && (v185 = *(_QWORD *)(a2 + (((unint64_t)(v184 + 15) >> 1) & 0x7FFFFFFF8) + 6736)) != 0)
              {
                v186 = *(unsigned int *)(v185 + 60);
                Slow = *(_QWORD *)(v185 + 24);
                v11 = a4;
                if (Slow < *(_QWORD *)(v185 + 32))
                {
                  *(_QWORD *)(v185 + 24) = Slow + v186;
                  goto LABEL_266;
                }
                Slow = *(_QWORD *)(v185 + 40);
                if ((Slow & 1) == 0)
                {
                  v262 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v185 + 48);
                  *(_QWORD *)(v185 + 32) = Slow + HIDWORD(v262);
                  *(_QWORD *)(v185 + 40) = Slow + (int)v262;
                  *(_QWORD *)(v185 + 24) = Slow + v186;
                  v11 = a4;
LABEL_267:
                  v187 = (__n128 *)Slow;
                  a9.n128_u64[0] = 0;
                  while (v187 != (__n128 *)((v184 & 0x7FFFFFFC0) + Slow))
                  {
                    *v187 = a9;
                    v187[1] = a9;
                    v187[2] = a9;
                    v187[3] = a9;
                    v187 += 4;
                  }
                  while (v187 != (__n128 *)(v184 + Slow))
                  {
                    v187->n128_u64[0] = 0;
                    v187 = (__n128 *)((char *)v187 + 8);
                  }
LABEL_250:
                  v180 = Slow + 8 * v158 + 8;
                  v181 = a2 + 192;
                  if (*(_BYTE *)(a2 + 755))
                  {
                    *a1 = v271 | 1;
                    __dmb(0xAu);
                    *((_QWORD *)a1 + 1) = v180;
                    if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
                      JSC::Heap::writeBarrierSlowPath(v181, (unint64_t)a1);
                    __dmb(0xAu);
                  }
                  else
                  {
                    *((_QWORD *)a1 + 1) = v180;
                    if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
                      JSC::Heap::writeBarrierSlowPath(v181, (unint64_t)a1);
                  }
LABEL_26:
                  if (v29 <= 63)
                  {
                    v39 = (uint64_t)(a1 + 4);
                    v40 = v29;
                  }
                  else
                  {
                    v39 = *((_QWORD *)a1 + 1) - 8;
                    v40 = 63 - v29;
                  }
                  *(_QWORD *)(v39 + 8 * v40) = v11;
                  if ((v11 & 0xFFFE000000000002) == 0
                    && a1
                    && v11
                    && *(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
                  {
                    JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
                  }
                  v41 = v28 >> 4;
                  *a1 = v28 >> 4;
                  *((_BYTE *)a1 + 6) = *((_BYTE *)a1 + 6) & 0x80 | *(_BYTE *)(v28 + 10);
                  *((_BYTE *)a1 + 5) = *(_BYTE *)(v28 + 9);
                  v42 = (unsigned __int8 *)(a1 + 1);
                  if (*((unsigned __int8 *)a1 + 4) != *(unsigned __int8 *)(v28 + 8))
                  {
                    do
                    {
                      while (1)
                      {
                        v44 = *v42;
                        v45 = __ldxr(v42);
                        if (v45 == v44)
                          break;
                        __clrex();
                      }
                    }
                    while (__stxr(v44 & 0xC0 | *(_BYTE *)(v28 + 8), v42));
                  }
                  if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
                  {
                    JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
                    LODWORD(v41) = *a1;
                  }
                  *(_BYTE *)(v9 + 21) = 2;
                  *(_QWORD *)v9 = a1;
                  *(_DWORD *)(v9 + 16) = v29;
                  if ((*(_BYTE *)((16 * v41) | 0x12) & 8) == 0)
                    return 0;
                  v43 = *(_WORD **)(a2 + 93080);
                  if (!v43)
                    return 0;
LABEL_144:
                  if ((v43 & 1) == 0)
                  {
                    v110 = (unsigned __int16)v43[66560]++ + 1;
                    if ((v110 & 0x10000) != 0)
                      JSC::MegamorphicCache::clearEntries(v43);
                  }
                  return 0;
                }
                JSC::sanitizeStackForVM((JSC *)a2, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
                Slow = JSC::LocalAllocator::allocateSlowCase(v185, a2 + 192, v186, 0, 1);
              }
              else
              {
                Slow = JSC::CompleteSubspace::tryAllocateSlow(a2 + 6648, (JSC *)a2, 8 * v158, 0, a5, a6, a7, a8);
              }
              v11 = v273;
LABEL_266:
              if (!Slow)
              {
                __break(0xC471u);
                JUMPOUT(0x197E1AD18);
              }
              goto LABEL_267;
            }
LABEL_24:
            v38 = 0;
            goto LABEL_25;
          }
        }
      }
      else
      {
        v19 = *(_QWORD *)(v18 + 8);
        if (v19)
        {
          v20 = a3 | (a5 << 48) | 0x100000000000000;
          v21 = *(_DWORD *)(v19 - 8);
          v22 = (v20 + ~(a3 << 32)) ^ ((v20 + ~(a3 << 32)) >> 22);
          v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          v25 = v21 & ((v24 >> 31) ^ v24);
          v26 = *(_QWORD *)(v19 + 16 * v25);
          if (v26 == v20)
          {
LABEL_6:
            v27 = *(_QWORD *)(v19 + 16 * v25 + 8);
            if (v27)
            {
              if ((*(_BYTE *)(v27 + 8) & 3) == 0)
              {
                v28 = *(_QWORD *)v27;
                if (*(_QWORD *)v27)
                  goto LABEL_9;
              }
            }
          }
          else
          {
            v61 = 1;
            while (v26)
            {
              v25 = ((_DWORD)v25 + v61) & v21;
              v26 = *(_QWORD *)(v19 + 16 * v25);
              ++v61;
              if (v26 == v20)
                goto LABEL_6;
            }
          }
        }
      }
    }
    v277 = 0;
    if (!(a3 >> 4) || ((a3 >> 4) & ~*(_DWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x20)) != 0)
      goto LABEL_274;
    v62 = *(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x58);
    if (!v62)
    {
      v128 = *(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x40);
      if (!v128 || *(_BYTE *)(v128 + 5) != 1 && *(_DWORD *)(v128 + 80) < 2u)
        goto LABEL_274;
      JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (v15 & 0xFFFFFFFE)), (JSC::VM *)a2, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
      if (!v62)
        goto LABEL_274;
    }
    if (!*(_DWORD *)(v62 + 24))
      goto LABEL_274;
    v63 = *(_QWORD *)(v62 + 16);
    v64 = v63 & 0xFFFFFFFFFFFFFFFELL;
    v65 = *(unsigned int *)(v62 + 8);
    v66 = *(_DWORD *)(a3 + 16);
    if ((v63 & 1) != 0)
    {
      if ((v66 & 0x20) != 0)
        v66 = *(_DWORD *)(a3 + 32);
      v67 = *(_DWORD *)(v62 + 12);
      v68 = (v66 >> 8) & *(_QWORD *)&v67;
      v69 = *(unsigned __int8 *)(v64 + v68);
      if (!*(_BYTE *)(v64 + v68))
        goto LABEL_274;
      v70 = v64 + v65;
      v71 = 1;
      while (1)
      {
        v72 = *(_QWORD *)(v70 + 8 * (v69 - 1));
        if (a3 == (v72 & 0xFFFFFFFFFFFFLL))
          break;
        v68 = ((_DWORD)v68 + v71) & v67;
        v69 = *(unsigned __int8 *)(v64 + v68);
        ++v71;
        if (!*(_BYTE *)(v64 + v68))
          goto LABEL_274;
      }
      v129 = (v72 >> 16) & 0xFF00000000 | HIBYTE(v72);
    }
    else
    {
      if ((v66 & 0x20) != 0)
        v66 = *(_DWORD *)(a3 + 32);
      v152 = *(_DWORD *)(v62 + 12);
      v153 = v152 & (v66 >> 8);
      v154 = *(_DWORD *)(v64 + 4 * v153);
      if (!v154)
        goto LABEL_274;
      v155 = v64 + 4 * v65;
      v156 = 1;
      while (1)
      {
        v157 = (v154 - 1);
        if (*(_QWORD *)(v155 + 16 * v157) == a3)
          break;
        v153 = (v153 + v156) & v152;
        v154 = *(_DWORD *)(v64 + 4 * v153);
        ++v156;
        if (!v154)
          goto LABEL_274;
      }
      v129 = *(unsigned int *)(v155 + 16 * v157 + 8) | ((unint64_t)*(unsigned __int8 *)(v155 + 16 * v157 + 12) << 32);
    }
    if ((_DWORD)v129 != -1)
    {
      v277 = v129;
      if ((*(_BYTE *)(16 * (v15 & 0xFFFFFFFE) + 0x12) & 4) != 0)
        JSC::Structure::didReplacePropertySlow(16 * (v15 & 0xFFFFFFFE), v129, (JSC::Structure *)a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
      if ((int)v129 <= 63)
      {
        v130 = (uint64_t)(a1 + 4);
        v131 = v129;
      }
      else
      {
        v130 = *((_QWORD *)a1 + 1) - 8;
        v131 = 63 - v129;
      }
      *(_QWORD *)(v130 + 8 * v131) = v11;
      if ((v11 & 0xFFFE000000000002) == 0
        && a1
        && v11
        && *(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
      {
        JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
      }
      if ((a5 & 0x70) == 0 && HIDWORD(v129) == (_DWORD)a5)
      {
        *(_BYTE *)(v9 + 21) = 1;
        *(_QWORD *)v9 = a1;
        *(_DWORD *)(v9 + 16) = v129;
      }
      else
      {
        LODWORD(v278) = 1;
        WORD2(v278) = 0;
        v279 = &v279;
        v280 = &v279;
        v281 = a2;
        v282 = (JSC::VM *)(16 * (v15 & 0xFFFFFFFE));
        v132 = JSC::Structure::attributeChangeTransition((JSC::Structure *)a2, v282, a3, a5, (JSC::Structure *)&v278, a6, a7, a8, a9.n128_f64[0]);
        v141 = (unint64_t)v132 >> 4;
        *a1 = (unint64_t)v132 >> 4;
        *((_BYTE *)a1 + 6) = *((_BYTE *)a1 + 6) & 0x80 | *((_BYTE *)v132 + 10);
        *((_BYTE *)a1 + 5) = *((_BYTE *)v132 + 9);
        v142 = (unsigned __int8 *)(a1 + 1);
        if (*((unsigned __int8 *)a1 + 4) != *((unsigned __int8 *)v132 + 8))
        {
          do
          {
            while (1)
            {
              v146 = *v142;
              v147 = __ldxr(v142);
              if (v147 == v146)
                break;
              __clrex();
            }
          }
          while (__stxr(v146 & 0xC0 | *((_BYTE *)v132 + 8), v142));
        }
        if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
        {
          JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
          LODWORD(v141) = *a1;
        }
        if ((*(_BYTE *)((16 * v141) | 0x12) & 8) != 0)
        {
          v259 = *(_WORD **)(a2 + 93080);
          if (v259)
          {
            if ((v259 & 1) == 0)
            {
              v260 = (unsigned __int16)v259[66560]++ + 1;
              if ((v260 & 0x10000) != 0)
                JSC::MegamorphicCache::clearEntries(v259);
            }
          }
        }
        if (BYTE4(v278) == 1)
          JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v278, v140, v133, v134, v135, v136, v137, v138, v139);
        while (1)
        {
          v143 = v279;
          if (v279 == &v279)
            break;
          v145 = *v279;
          v144 = (_QWORD *)v279[1];
          *v144 = *v279;
          *(_QWORD *)(v145 + 8) = v144;
          *v143 = 0;
          v143[1] = 0;
        }
      }
      return 0;
    }
LABEL_274:
    v277 = -1;
    LODWORD(v278) = 1;
    WORD2(v278) = 0;
    v279 = &v279;
    v280 = &v279;
    v281 = a2;
    v282 = (JSC::VM *)(16 * (v15 & 0xFFFFFFFE));
    v188 = JSC::Structure::addNewPropertyTransition((JSC::VM *)a2, (unsigned int **)v16, a3, (const JSC::PropertyTable *)a5, &v277, *(unsigned __int8 *)(v9 + 22), (JSC::Structure *)&v278, a8, a9.n128_f64[0]);
    v197 = v188;
    v198 = *(unsigned __int16 *)(16 * (v15 & 0xFFFFFFFE) + 0x18);
    if (v198 == 65534)
      goto LABEL_278;
    if (v198 == 0xFFFF)
      v198 = *(_DWORD *)(*(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x40) + 84);
    if (v198 < 64)
    {
LABEL_278:
      v199 = 0;
    }
    else if ((v198 - 63) >= 5)
    {
      v212 = (v198 - 64) | ((v198 - 64) >> 1) | (((v198 - 64) | ((v198 - 64) >> 1)) >> 2);
      v213 = v212 | (v212 >> 4) | ((v212 | (v212 >> 4)) >> 8);
      v199 = (v213 | HIWORD(v213)) + 1;
    }
    else
    {
      v199 = 4;
    }
    v200 = *(unsigned __int16 *)(v188 + 24);
    if (v200 == 65534)
      goto LABEL_283;
    if (v200 == 0xFFFF)
      v200 = *(_DWORD *)(*(_QWORD *)(v188 + 64) + 84);
    if (v200 < 64)
    {
LABEL_283:
      v201 = 0;
    }
    else if ((v200 - 63) >= 5)
    {
      v214 = (v200 - 64) | ((v200 - 64) >> 1) | (((v200 - 64) | ((v200 - 64) >> 1)) >> 2);
      v215 = v214 | (v214 >> 4) | ((v214 | (v214 >> 4)) >> 8);
      v201 = (v215 | HIWORD(v215)) + 1;
    }
    else
    {
      v201 = 4;
    }
    if (v199 != v201)
    {
      MoreOutOfLineStorage = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)a1, (JSC::VM *)a2, v199, v201, v192, v193, v194, v195, v196);
      v217 = a2 + 192;
      if (*(_BYTE *)(a2 + 755))
      {
        *a1 = v15 | 1;
        __dmb(0xAu);
        *((_QWORD *)a1 + 1) = MoreOutOfLineStorage;
        if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
          JSC::Heap::writeBarrierSlowPath(v217, (unint64_t)a1);
        __dmb(0xAu);
      }
      else
      {
        *((_QWORD *)a1 + 1) = MoreOutOfLineStorage;
        if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
          JSC::Heap::writeBarrierSlowPath(v217, (unint64_t)a1);
      }
    }
    v202 = v277;
    if (v277 <= 63)
    {
      v203 = (uint64_t)(a1 + 4);
    }
    else
    {
      v203 = *((_QWORD *)a1 + 1) - 8;
      v202 = 63 - v277;
    }
    *(_QWORD *)(v203 + 8 * v202) = v11;
    if ((v11 & 0xFFFE000000000002) == 0
      && a1
      && v11
      && *(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
    {
      JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
    }
    *a1 = v197 >> 4;
    *((_BYTE *)a1 + 6) = *((_BYTE *)a1 + 6) & 0x80 | *(_BYTE *)(v197 + 10);
    *((_BYTE *)a1 + 5) = *(_BYTE *)(v197 + 9);
    v204 = (unsigned __int8 *)(a1 + 1);
    if (*((unsigned __int8 *)a1 + 4) != *(unsigned __int8 *)(v197 + 8))
    {
      do
      {
        while (1)
        {
          v208 = *v204;
          v209 = __ldxr(v204);
          if (v209 == v208)
            break;
          __clrex();
        }
      }
      while (__stxr(v208 & 0xC0 | *(_BYTE *)(v197 + 8), v204));
    }
    if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
      JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
    v205 = v277;
    *(_BYTE *)(v9 + 21) = 2;
    *(_QWORD *)v9 = a1;
    *(_DWORD *)(v9 + 16) = v205;
    if ((a5 & 2) != 0)
      *(_DWORD *)(v197 + 16) |= 0x10u;
    if ((*(_BYTE *)((16 * *a1) | 0x12) & 8) != 0)
    {
      v250 = *(_WORD **)(a2 + 93080);
      if (v250)
      {
        if ((v250 & 1) == 0)
        {
          v251 = (unsigned __int16)v250[66560]++ + 1;
          if ((v251 & 0x10000) != 0)
            JSC::MegamorphicCache::clearEntries(v250);
        }
      }
    }
    if (BYTE4(v278) == 1)
      JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v278, v196.n128_f64[0], v189, v190, v191, v192, v193, v194, v195);
    while (1)
    {
      v206 = v279;
      if (v279 == &v279)
        break;
      v211 = *v279;
      v210 = (_QWORD *)v279[1];
      *v210 = *v279;
      *(_QWORD *)(v211 + 8) = v210;
      *v206 = 0;
      v206[1] = 0;
    }
    return 0;
  }
  v50 = *(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x58);
  if (!v50)
  {
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (v15 & 0xFFFFFFFE)), (JSC::VM *)a2, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    v50 = v73;
  }
  v51 = *(_QWORD *)(v50 + 16);
  v52 = v51 & 0xFFFFFFFFFFFFFFFELL;
  v53 = *(unsigned int *)(v50 + 8);
  v54 = *(_DWORD *)(a3 + 16);
  v270 = v15;
  if ((v51 & 1) != 0)
  {
    if ((v54 & 0x20) != 0)
      v54 = *(_DWORD *)(a3 + 32);
    v55 = *(_DWORD *)(v50 + 12);
    v56 = (v54 >> 8) & *(_QWORD *)&v55;
    v57 = *(unsigned __int8 *)(v52 + v56);
    if (!*(_BYTE *)(v52 + v56))
      goto LABEL_81;
    v58 = v52 + v53;
    v59 = 1;
    while (1)
    {
      v60 = *(_QWORD *)(v58 + 8 * (v57 - 1));
      if (a3 == (v60 & 0xFFFFFFFFFFFFLL))
        break;
      v56 = ((_DWORD)v56 + v59) & v55;
      v57 = *(unsigned __int8 *)(v52 + v56);
      ++v59;
      if (!*(_BYTE *)(v52 + v56))
        goto LABEL_81;
    }
    v74 = (v60 >> 16) & 0xFF00000000 | HIBYTE(v60);
  }
  else
  {
    if ((v54 & 0x20) != 0)
      v54 = *(_DWORD *)(a3 + 32);
    v112 = *(_DWORD *)(v50 + 12);
    LODWORD(v56) = v112 & (v54 >> 8);
    v113 = *(_DWORD *)(v52 + 4 * v56);
    if (!v113)
      goto LABEL_81;
    v114 = v52 + 4 * v53;
    v115 = 1;
    while (1)
    {
      v116 = (v113 - 1);
      if (*(_QWORD *)(v114 + 16 * v116) == a3)
        break;
      LODWORD(v56) = (v56 + v115) & v112;
      v113 = *(_DWORD *)(v52 + 4 * v56);
      ++v115;
      if (!v113)
        goto LABEL_81;
    }
    v74 = *(unsigned int *)(v114 + 16 * v116 + 8) | ((unint64_t)*(unsigned __int8 *)(v114 + 16 * v116 + 12) << 32);
  }
  if ((_DWORD)v74 != -1)
  {
    if ((int)v74 <= 63)
    {
      v231 = (uint64_t)(a1 + 4);
      v232 = v74;
    }
    else
    {
      v231 = *((_QWORD *)a1 + 1) - 8;
      v232 = 63 - v74;
    }
    *(_QWORD *)(v231 + 8 * v232) = v11;
    if ((v11 & 0xFFFE000000000002) == 0
      && a1
      && v11
      && *(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
    {
      v265 = v9;
      v266 = v74;
      JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
      v74 = v266;
      v9 = v265;
    }
    if ((*(_BYTE *)(v16 + 18) & 4) != 0)
    {
      v264 = v74;
      JSC::Structure::didReplacePropertySlow(v16, v74, (JSC::Structure *)a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
      v74 = v264;
    }
    if ((a5 & 0x70) == 0 && HIDWORD(v74) == (_DWORD)a5)
    {
      *(_BYTE *)(v9 + 21) = 1;
      *(_QWORD *)v9 = a1;
      *(_DWORD *)(v9 + 16) = v74;
    }
    else
    {
      LODWORD(v278) = 1;
      WORD2(v278) = 0;
      v279 = &v279;
      v280 = &v279;
      v281 = a2;
      v282 = (JSC::VM *)v16;
      v233 = JSC::Structure::attributeChangeTransition((JSC::Structure *)a2, (JSC::VM *)v16, a3, a5, (JSC::Structure *)&v278, a6, a7, a8, a9.n128_f64[0]);
      v242 = (unint64_t)v233 >> 4;
      *a1 = (unint64_t)v233 >> 4;
      *((_BYTE *)a1 + 6) = *((_BYTE *)a1 + 6) & 0x80 | *((_BYTE *)v233 + 10);
      *((_BYTE *)a1 + 5) = *((_BYTE *)v233 + 9);
      v243 = (unsigned __int8 *)(a1 + 1);
      if (*((unsigned __int8 *)a1 + 4) != *((unsigned __int8 *)v233 + 8))
      {
        do
        {
          while (1)
          {
            v247 = *v243;
            v248 = __ldxr(v243);
            if (v248 == v247)
              break;
            __clrex();
          }
        }
        while (__stxr(v247 & 0xC0 | *((_BYTE *)v233 + 8), v243));
      }
      if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
      {
        JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
        LODWORD(v242) = *a1;
      }
      if ((*(_BYTE *)((16 * v242) | 0x12) & 8) != 0)
        JSC::VM::invalidateStructureChainIntegrity(a2);
      if (BYTE4(v278) == 1)
        JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v278, v241, v234, v235, v236, v237, v238, v239, v240);
      while (1)
      {
        v244 = v279;
        if (v279 == &v279)
          break;
        v246 = *v279;
        v245 = (_QWORD *)v279[1];
        *v245 = *v279;
        *(_QWORD *)(v246 + 8) = v245;
        *v244 = 0;
        v244[1] = 0;
      }
    }
    return 0;
  }
LABEL_81:
  v272 = v11;
  v75 = (unsigned __int8 *)(v16 + 15);
  if (__ldaxr((unsigned __int8 *)(v16 + 15)))
  {
    __clrex();
LABEL_83:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v16 + 15);
    goto LABEL_84;
  }
  if (__stxr(1u, v75))
    goto LABEL_83;
LABEL_84:
  ++*(_DWORD *)(a2 + 916);
  *(_DWORD *)(v16 + 16) |= 4u;
  if (v50)
  {
    *(_QWORD *)(v16 + 88) = v50;
    if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(v16 + 7))
      JSC::Heap::writeBarrierSlowPath(a2 + 192, v16);
  }
  else
  {
    *(_QWORD *)(v16 + 88) = 0;
  }
  v274 = (JSC::VM *)a2;
  v77 = *(_QWORD *)(v16 + 64);
  if (v77 && *(_BYTE *)(v77 + 5) != 1)
  {
    v78 = a5;
    *(_DWORD *)(v77 + 80) = 0;
  }
  else
  {
    v78 = a5;
    *(_QWORD *)(v16 + 64) = 0;
  }
  v79 = *(unsigned int *)(v16 + 72);
  *(_DWORD *)(v16 + 72) = 0;
  if ((_DWORD)v79)
  {
    v80 = 16 * v79;
    if (*(_DWORD *)(16 * v79) != 2)
    {
      *(_DWORD *)v80 = *(_DWORD *)(16 * v79) - 2;
      goto LABEL_93;
    }
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)(16 * v79), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    v125 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v125)
    {
      pas_try_deallocate_slow_no_cache(16 * v79, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_93;
    }
    v126 = v79 >> 20;
    if (((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v79 >> 23) & 0x1FC)) >> (v79 >> 20)) & 1) != 0)
      goto LABEL_185;
    if (v126 < *off_1ECF425F8 || off_1ECF425F8[1] <= v126)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + (((v126 - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((v126 - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_185:
        v127 = *(unsigned int *)(v125 + 8000);
        if (v127 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v125, 16 * v79, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v125 + 8 * v127) = v80 | 0x5000000000000;
          *(_DWORD *)(v125 + 8000) = v127 + 1;
        }
        goto LABEL_93;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v125, 16 * v79, 1, a4, a5, a6, a7, a8);
  }
LABEL_93:
  v81 = v78;
  if ((v78 & 4) != 0)
  {
    v122 = *(_DWORD *)(v16 + 16) & 0xFFFFFF9F | 0x40;
    v82 = v274;
LABEL_181:
    *(_DWORD *)(v16 + 16) = v122;
    goto LABEL_96;
  }
  v82 = v274;
  if (a3 && (*(_BYTE *)(a3 + 16) & 0x20) != 0)
  {
    v122 = *(_DWORD *)(v16 + 16) & 0xFFFFFFDF;
    goto LABEL_181;
  }
LABEL_96:
  if ((v81 & 8) != 0)
  {
    v226 = *(_DWORD *)(v16 + 16);
    *(_DWORD *)(v16 + 16) = v226 | 0x40000000;
    if ((v81 & 0x72) != 0)
      *(_DWORD *)(v16 + 16) = v226 | 0xC0000000;
  }
  if (*(_QWORD *)(*((_QWORD *)v274 + 5244) + 16) == a3)
    *(_DWORD *)(v16 + 16) |= 0x20000000u;
  v83 = *(unsigned __int8 *)(v16 + 14);
  v84 = *(_QWORD *)(v50 + 32);
  if (v84 && (v249 = *(unsigned int *)(v84 + 12), (_DWORD)v249))
  {
    v90 = *(_DWORD *)(*(_QWORD *)v84 + 4 * v249 - 4);
    *(_DWORD *)(v84 + 12) = v249 - 1;
  }
  else
  {
    v85 = *(_DWORD *)(v50 + 24);
    v86 = __OFSUB__(v85, v83);
    v88 = v85 - v83;
    v87 = (v88 < 0) ^ v86;
    v89 = v88 + 64;
    if (v87)
      v90 = *(_DWORD *)(v50 + 24);
    else
      v90 = v89;
  }
  v91 = *(_DWORD *)(a3 + 16);
  if ((v91 & 0x20) != 0)
    v91 = *(_DWORD *)(a3 + 32);
  v92 = *(_DWORD *)(v16 + 28) ^ (v91 >> 8);
  v93 = *(_DWORD *)(v16 + 32) | (a3 >> 4);
  *(_DWORD *)(v16 + 28) = v92;
  *(_DWORD *)(v16 + 32) = v93;
  *(_DWORD *)a3 += 2;
  v94 = *(_DWORD *)(v50 + 24);
  if ((*(_DWORD *)(v50 + 28) + v94) >= *(_DWORD *)(v50 + 8) >> 1
    || (v95 = *(_QWORD *)(v50 + 16), (v95 & 1) != 0) && v90 > 255)
  {
    JSC::PropertyTable::rehash((JSC::PropertyTable *)v50, v82, (v94 + 1), v90 < 256, a5, a6, a7, a8);
    v95 = *(_QWORD *)(v50 + 16);
    v96 = v95 & 0xFFFFFFFFFFFFFFFELL;
    v220 = *(unsigned int *)(v50 + 8);
    v221 = *(_DWORD *)(a3 + 16);
    if ((v95 & 1) != 0)
    {
      if ((v221 & 0x20) != 0)
        v221 = *(_DWORD *)(a3 + 32);
      v222 = *(_DWORD *)(v50 + 12);
      v56 = (v221 >> 8) & *(_QWORD *)&v222;
      v223 = *(unsigned __int8 *)(v96 + v56);
      if (*(_BYTE *)(v96 + v56))
      {
        v224 = v96 + v220;
        v225 = 1;
        do
        {
          if (a3 == (*(_QWORD *)(v224 + 8 * (v223 - 1)) & 0xFFFFFFFFFFFFLL))
            break;
          v56 = ((_DWORD)v56 + v225) & v222;
          v223 = *(unsigned __int8 *)(v96 + v56);
          ++v225;
        }
        while (*(_BYTE *)(v96 + v56));
      }
    }
    else
    {
      if ((v221 & 0x20) != 0)
        v221 = *(_DWORD *)(a3 + 32);
      v227 = *(_DWORD *)(v50 + 12);
      LODWORD(v56) = v227 & (v221 >> 8);
      v228 = *(_DWORD *)(v96 + 4 * v56);
      if (v228)
      {
        v229 = v96 + 4 * v220;
        v230 = 1;
        do
        {
          if (*(_QWORD *)(v229 + 16 * (v228 - 1)) == a3)
            break;
          LODWORD(v56) = (v56 + v230) & v227;
          v228 = *(_DWORD *)(v96 + 4 * v56);
          ++v230;
        }
        while (v228);
      }
    }
  }
  else
  {
    v96 = v95 & 0xFFFFFFFFFFFFFFFELL;
  }
  v97 = *(_DWORD *)(v50 + 28) + *(_DWORD *)(v50 + 24);
  v98 = v97 + 1;
  if ((v95 & 1) != 0)
  {
    *(_BYTE *)(v96 + v56) = v98;
    *(_QWORD *)(v96 + *(unsigned int *)(v50 + 8) + 8 * v97) = a3 | ((unint64_t)(v81 | (v90 << 8)) << 48);
  }
  else
  {
    *(_DWORD *)(v96 + 4 * v56) = v98;
    v111 = v96 + 4 * *(unsigned int *)(v50 + 8) + 16 * v97;
    *(_QWORD *)v111 = a3;
    *(_DWORD *)(v111 + 8) = v90;
    *(_BYTE *)(v111 + 12) = v81;
  }
  ++*(_DWORD *)(v50 + 24);
  v99 = *(unsigned __int16 *)(v16 + 24);
  if (v99 == 65534)
  {
    if (v90 < -1)
      goto LABEL_148;
    v102 = 0;
    v101 = v90;
  }
  else
  {
    if (v99 == 0xFFFF)
      v100 = *(_DWORD *)(*(_QWORD *)(v16 + 64) + 84);
    else
      v100 = *(unsigned __int16 *)(v16 + 24);
    if (v90 <= v100)
      v101 = v100;
    else
      v101 = v90;
    if (v100 >= 64)
    {
      if ((v100 - 63) >= 5)
      {
        v150 = (v100 - 64) | ((v100 - 64) >> 1) | (((v100 - 64) | ((v100 - 64) >> 1)) >> 2);
        v151 = v150 | (v150 >> 4) | ((v150 | (v150 >> 4)) >> 8);
        v102 = (v151 | HIWORD(v151)) + 1;
      }
      else
      {
        v102 = 4;
      }
    }
    else
    {
      v102 = 0;
    }
  }
  if (v101 >= 64)
  {
    if ((v101 - 63) >= 5)
    {
      v148 = (v101 - 64) | ((v101 - 64) >> 1) | (((v101 - 64) | ((v101 - 64) >> 1)) >> 2);
      v149 = v148 | (v148 >> 4) | ((v148 | (v148 >> 4)) >> 8);
      v103 = (v149 | HIWORD(v149)) + 1;
    }
    else
    {
      v103 = 4;
    }
  }
  else
  {
    v103 = 0;
  }
  if (v103 == v102)
  {
    if (v101 != -1)
    {
      if (v101 > 65533)
      {
        v258 = *(_QWORD *)(v16 + 64);
        if (v99 == 0xFFFF)
        {
          *(_DWORD *)(v258 + 84) = v101;
        }
        else
        {
          if (!v258 || *(_BYTE *)(v258 + 5) == 1)
          {
            JSC::Structure::allocateRareData((JSC::Structure *)v16, v274, (JSC::Structure *)a3, a4, a5, a6, a7, a8);
            v258 = *(_QWORD *)(v16 + 64);
          }
          *(_DWORD *)(v258 + 84) = v101;
          __dmb(0xAu);
          *(_WORD *)(v16 + 24) = -1;
        }
        v82 = v274;
      }
      else
      {
        *(_WORD *)(v16 + 24) = v101;
      }
      goto LABEL_125;
    }
LABEL_148:
    *(_WORD *)(v16 + 24) = -2;
    goto LABEL_125;
  }
  v182 = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)a1, v82, v102, v103, a5, a6, a7, a8, a9);
  v183 = (uint64_t)v82 + 192;
  if (*((_BYTE *)v82 + 755))
  {
    *a1 = v270 | 1;
    __dmb(0xAu);
    *((_QWORD *)a1 + 1) = v182;
    if (*((_DWORD *)v82 + 190) >= *((unsigned __int8 *)a1 + 7))
      JSC::Heap::writeBarrierSlowPath(v183, (unint64_t)a1);
    __dmb(0xAu);
  }
  else
  {
    *((_QWORD *)a1 + 1) = v182;
    if (*((_DWORD *)v82 + 190) >= *((unsigned __int8 *)a1 + 7))
      JSC::Heap::writeBarrierSlowPath(v183, (unint64_t)a1);
  }
  if (v101 == -1)
  {
    *(_WORD *)(v16 + 24) = -2;
  }
  else if (v101 > 65533)
  {
    v263 = *(_QWORD *)(v16 + 64);
    if (*(__int16 *)(v16 + 24) == -1)
    {
      *(_DWORD *)(v263 + 84) = v101;
    }
    else
    {
      if (!v263 || *(_BYTE *)(v263 + 5) == 1)
      {
        JSC::Structure::allocateRareData((JSC::Structure *)v16, v274, (JSC::Structure *)a3, a4, a5, a6, a7, a8);
        v263 = *(_QWORD *)(v16 + 64);
      }
      *(_DWORD *)(v263 + 84) = v101;
      __dmb(0xAu);
      *(_WORD *)(v16 + 24) = -1;
    }
    v82 = v274;
  }
  else
  {
    *(_WORD *)(v16 + 24) = v101;
  }
  __dmb(0xAu);
  *a1 = v270;
LABEL_125:
  v104 = __ldxr(v75);
  if (v104 != 1)
  {
    __clrex();
    goto LABEL_129;
  }
  if (__stlxr(0, v75))
LABEL_129:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v16 + 15), 0, a3, a4, a5, a6, a7, a8);
  v105 = *((_DWORD *)v82 + 229) - 1;
  *((_DWORD *)v82 + 229) = v105;
  if (*((unsigned __int8 *)v82 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v106 = v105 == 0;
  else
    v106 = 0;
  if (v106)
  {
    *((_BYTE *)v82 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v82 + 192, 0);
  }
  if (v90 <= 63)
  {
    v107 = (uint64_t)(a1 + 4);
    v108 = v90;
  }
  else
  {
    v107 = *((_QWORD *)a1 + 1) - 8;
    v108 = 63 - v90;
  }
  *(_QWORD *)(v107 + 8 * v108) = v272;
  if ((v272 & 0xFFFE000000000002) == 0
    && a1
    && v272
    && *((_DWORD *)v82 + 190) >= *((unsigned __int8 *)a1 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v82 + 192, (unint64_t)a1);
  }
  *(_BYTE *)(v9 + 21) = 2;
  *(_QWORD *)v9 = a1;
  *(_DWORD *)(v9 + 16) = v90;
  v109 = *(_DWORD *)(16 * (*a1 & 0xFFFFFFFE) + 0x10);
  if ((v81 & 2) != 0)
  {
    v109 |= 0x10u;
    *(_DWORD *)(16 * (*a1 & 0xFFFFFFFE) + 0x10) = v109;
  }
  if ((v109 & 0x80000) != 0)
  {
    v43 = (_WORD *)*((_QWORD *)v82 + 11635);
    if (v43)
      goto LABEL_144;
  }
  return 0;
}

void JSC::PropertyTable::rehash(JSC::PropertyTable *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  int v72;
  _QWORD v73[5];
  unint64_t v74;
  unint64_t v75;

  v10 = *((_QWORD *)this + 2);
  v11 = (*((_DWORD *)this + 7) + *((_DWORD *)this + 6));
  v12 = *((unsigned int *)this + 2);
  v71 = *((_DWORD *)this + 7) + *((_DWORD *)this + 6);
  v72 = v12;
  v13 = 4 * v12;
  if ((v10 & 1) != 0)
    v14 = 3;
  else
    v14 = 4;
  if ((v10 & 1) != 0)
    v13 = v12;
  if (a3 >= 8)
  {
    v41 = a3 | (a3 >> 1) | ((a3 | (a3 >> 1)) >> 2);
    v42 = v41 | (v41 >> 4) | ((v41 | (v41 >> 4)) >> 8);
    v15 = 2 * (v42 | HIWORD(v42)) + 2;
  }
  else
  {
    v15 = 16;
  }
  v16 = ((v12 >> 1) + 1) << v14;
  *((_DWORD *)this + 2) = v15;
  *((_DWORD *)this + 3) = v15 - 1;
  *((_QWORD *)this + 3) = 0;
  if ((_DWORD)a4 && (v10 & 1) != 0)
  {
    v17 = v15;
    v18 = 3;
    if (v15 < 0x1FE)
    {
      v19 = 1;
    }
    else
    {
      v18 = 4;
      v19 = 0;
    }
    if (v15 >= 0x1FE)
      v17 = 4 * v15;
  }
  else
  {
    v19 = 0;
    v17 = 4 * v15;
    v18 = 4;
  }
  v20 = v16 + v13;
  v21 = WTF::fastZeroedMalloc(v17 + ((unint64_t)((v15 >> 1) + 1) << v18), (unint64_t)a2, a3, a4, a5, a6, a7, a8);
  *((_QWORD *)this + 2) = v19 | v21;
  v29 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (((v19 | v21) & 1) != 0)
  {
    v74 = v29 + *((unsigned int *)this + 2);
    v75 = v21 & 0xFFFFFFFFFFFFFFFELL;
    v73[0] = this;
    v73[1] = &v72;
    v73[2] = &v71;
    v73[3] = &v75;
    v73[4] = &v74;
    v30 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((v10 & 1) != 0)
    {
      if ((_DWORD)v11)
      {
        v31 = (uint64_t *)(v30 + v12);
        do
        {
          v32 = *v31;
          if ((*v31 & 0xFFFFFFFFFFFFLL) != 1)
          {
            v33 = *(_DWORD *)((*v31 & 0xFFFFFFFFFFFFLL) + 0x10);
            if ((v33 & 0x20) != 0)
              v33 = *(_DWORD *)((*v31 & 0xFFFFFFFFFFFFLL) + 0x20);
            v34 = 0;
            v35 = v74;
            v36 = v33 >> 8;
            v37 = *((unsigned int *)this + 3);
            do
            {
              v38 = v36 & v37;
              v39 = *(unsigned __int8 *)(v75 + (v36 & v37));
              v36 = ++v34 + (v36 & v37);
            }
            while (v39);
            v40 = *((_DWORD *)this + 7) + *((_DWORD *)this + 6);
            *(_BYTE *)(v75 + v38) = *((_BYTE *)this + 28) + *((_BYTE *)this + 24) + 1;
            *(_QWORD *)(v35 + 8 * v40) = v32;
            ++*((_DWORD *)this + 6);
          }
          ++v31;
        }
        while (v31 != (uint64_t *)(v30 + v12 + 8 * v11));
      }
    }
    else
    {
      _ZZZN3JSC13PropertyTable6rehashERNS_2VMEjbENKUlPT_E_clIhEEDaS4_ENKUlPKS3_E_clIjEES7_S9_((uint64_t)v73, v10 & 0xFFFFFFFFFFFFFFFELL);
      v30 = v10 & 0xFFFFFFFFFFFFFFFELL;
    }
  }
  else
  {
    v43 = v29 + 4 * *((unsigned int *)this + 2);
    v30 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((v10 & 1) != 0)
    {
      if ((_DWORD)v11)
      {
        v44 = (unint64_t *)(v30 + v12);
        do
        {
          v45 = *v44;
          v46 = *v44 & 0xFFFFFFFFFFFFLL;
          if (v46 != 1)
          {
            v47 = *(_DWORD *)((*v44 & 0xFFFFFFFFFFFFLL) + 0x10);
            if ((v47 & 0x20) != 0)
              v47 = *(_DWORD *)((*v44 & 0xFFFFFFFFFFFFLL) + 0x20);
            v48 = 0;
            LODWORD(v22) = v47 >> 8;
            do
            {
              v49 = v22 & *((_DWORD *)this + 3);
              v23 = *(unsigned int *)(v29 + 4 * v49);
              v22 = (++v48 + v49);
            }
            while ((_DWORD)v23);
            v50 = *((_DWORD *)this + 7) + *((_DWORD *)this + 6);
            *(_DWORD *)(v29 + 4 * v49) = v50 + 1;
            v51 = v43 + 16 * v50;
            *(_QWORD *)v51 = v46;
            *(_DWORD *)(v51 + 8) = HIBYTE(v45);
            *(_BYTE *)(v51 + 12) = BYTE6(v45);
            ++*((_DWORD *)this + 6);
          }
          ++v44;
        }
        while (v44 != (unint64_t *)(v30 + v12 + 8 * v11));
      }
    }
    else if ((_DWORD)v11)
    {
      v52 = (uint64_t *)(v30 + 4 * v12);
      v53 = &v52[2 * v11];
      do
      {
        v54 = *v52;
        if (*v52 != 1)
        {
          v55 = *(_DWORD *)(v54 + 16);
          if ((v55 & 0x20) != 0)
            v55 = *(_DWORD *)(v54 + 32);
          v56 = 0;
          v57 = v55 >> 8;
          do
          {
            v58 = v57 & *((_DWORD *)this + 3);
            v57 = ++v56 + v58;
          }
          while (*(_DWORD *)(v29 + 4 * v58));
          v59 = *((_DWORD *)this + 7) + *((_DWORD *)this + 6);
          *(_DWORD *)(v29 + 4 * v58) = v59 + 1;
          v60 = (_QWORD *)(v43 + 16 * v59);
          v61 = *v52;
          *(_QWORD *)((char *)v60 + 5) = *(uint64_t *)((char *)v52 + 5);
          *v60 = v61;
          ++*((_DWORD *)this + 6);
        }
        v52 += 2;
      }
      while (v52 != v53);
    }
  }
  WTF::fastFree(v30, (void *)v22, v23, v24, v25, v26, v27, v28);
  v66 = *((unsigned int *)this + 2);
  v67 = 4 * v66;
  v68 = 3;
  if ((*((_QWORD *)this + 2) & 1) != 0)
    v67 = *((unsigned int *)this + 2);
  else
    v68 = 4;
  v69 = (((v66 >> 1) + 1) << v68) + v67;
  v70 = v69 - v20;
  if (v69 > v20 && v70 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)a2 + 192, 0, (uint64_t)this, v70, v62, v63, v64, v65);
}

uint64_t _ZZZN3JSC13PropertyTable6rehashERNS_2VMEjbENKUlPT_E_clIhEEDaS4_ENKUlPKS3_E_clIjEES7_S9_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;

  v2 = **(unsigned int **)(result + 16);
  if ((_DWORD)v2)
  {
    v3 = *(unsigned int **)result;
    v4 = (uint64_t *)(a2 + 4 * **(unsigned int **)(result + 8));
    v5 = &v4[2 * v2];
    do
    {
      v6 = *v4;
      if (*v4 != 1)
      {
        v7 = *(_DWORD *)(v6 + 16);
        if ((v7 & 0x20) != 0)
          v7 = *(_DWORD *)(v6 + 32);
        v8 = 0;
        v9 = **(_QWORD **)(result + 24);
        v10 = **(_QWORD **)(result + 32);
        v11 = v7 >> 8;
        v12 = v3[3];
        do
        {
          v13 = v11 & v12;
          v14 = *(unsigned __int8 *)(v9 + (v11 & v12));
          v11 = ++v8 + (v11 & v12);
        }
        while (v14);
        v15 = v3[7] + v3[6];
        *(_BYTE *)(v9 + v13) = *((_BYTE *)v3 + 28) + *((_BYTE *)v3 + 24) + 1;
        *(_QWORD *)(v10 + 8 * v15) = *v4 | ((unint64_t)(*((unsigned __int8 *)v4 + 12) | (*((_DWORD *)v4 + 2) << 8)) << 48);
        ++v3[6];
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t JSC::JSString::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t i;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t SlowCase;
  unint64_t v20;
  JSC::VM *v21;
  uint64_t v22;

  v8 = (uint64_t *)(a1 + 39696);
  for (i = *(_QWORD *)a2; ; i = *(_QWORD *)(i + 24))
  {
    v10 = *(_DWORD *)(i + 16);
    if ((v10 & 3) != 2)
      break;
  }
  if ((v10 & 8) != 0)
  {
    v11 = 0;
  }
  else
  {
    *(_DWORD *)(i + 16) = v10 | 8;
    v11 = (unint64_t)*(unsigned int *)(i + 4) << ((v10 & 4) == 0);
  }
  v12 = a1 + 192;
  v13 = *v8;
  if ((unint64_t)*v8 < *(_QWORD *)(a1 + 39704))
    goto LABEL_6;
  v13 = *(_QWORD *)(a1 + 39712);
  if ((v13 & 1) == 0)
  {
    v16 = *(_QWORD *)(v13 + 8) ^ *(_QWORD *)(a1 + 39720);
    *(_QWORD *)(a1 + 39704) = v13 + HIDWORD(v16);
    *(_QWORD *)(a1 + 39712) = v13 + (int)v16;
LABEL_6:
    *v8 = v13 + 16;
    goto LABEL_7;
  }
  v17 = a1 + 39672;
  v21 = a2;
  v22 = a1;
  v20 = v11;
  v18 = a1 + 192;
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, v11, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v17, v18, 16, 0, 0);
  v12 = v18;
  v11 = v20;
  a2 = v21;
  v13 = SlowCase;
  a1 = v22;
LABEL_7:
  *(_DWORD *)v13 = (unint64_t)v8[227] >> 4;
  *(_DWORD *)(v13 + 4) = 17302016;
  v14 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(v13 + 8) = v14;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  if (v11 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase(v12, 0, v13, v11, a5, a6, a7, a8);
  return v13;
}

void WTF::VectorTypeOperations<WTF::String>::destruct(unint64_t *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  unint64_t StatusReg;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != (unint64_t *)a2)
  {
    v9 = a1;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, a2, a3, a4, a5, a6, a7, a8);
          v12 = *(_QWORD *)(StatusReg + 752);
          if (v12)
          {
            if (!(v11 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v11 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v11)) & 1) != 0)
            {
LABEL_10:
              v13 = *(unsigned int *)(v12 + 8000);
              if (v13 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v12, v11, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v12 + 8 * v13) = v11 | 0x5000000000000;
                *(_DWORD *)(v12 + 8000) = v13 + 1;
              }
              goto LABEL_4;
            }
            if (v11 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v11 >> 24)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v11 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v11) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_10;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v12, v11, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v11, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v11 -= 2;
        }
      }
LABEL_4:
      ++v9;
    }
    while (v9 != (unint64_t *)a2);
  }
}

uint64_t WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String&>(uint64_t a1, unint64_t a2)
{
  _DWORD **v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  v3 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  if (*v3)
    *v6 += 2;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

int *WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>(int *result, uint64_t *a2)
{
  int *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v3 = result;
  v4 = result[2];
  v5 = result[3];
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = *(const void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    v3[2] = v8;
    *(_QWORD *)v3 = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(const void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      WTF::fastFree((unint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  v18 = v3[3];
  v19 = v3[3];
  v20 = *(_QWORD *)v3;
  v21 = a2[1];
  if (v21)
  {
    v22 = v21 - 1;
    if (v21 == 1)
    {
      result = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v23 = *a2;
      result = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *result = 2;
      result[1] = v22;
      *((_QWORD *)result + 1) = v23;
      result[4] = 4;
      v19 = v3[3];
    }
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(v20 + 8 * v18) = result;
  v3[3] = v19 + 1;
  return result;
}

void WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;

  v10 = *(_QWORD *)a1;
  if (v10)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v11;
  LODWORD(v11) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 8) = v11;
  LODWORD(v11) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v11;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, uint64_t a4, _BYTE *__src, unsigned int a6, uint64_t a7)
{
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  size_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  size_t v19;
  unsigned __int128 *v20;
  unsigned __int128 *v21;
  unsigned __int128 v22;
  _BYTE *v23;
  _BYTE *v24;
  unsigned __int128 v25;
  char v26;
  char v27;

  v12 = __dst;
  if (a3 == 1)
  {
    *__dst = *a2;
  }
  else if (a3)
  {
    __dst = memcpy(__dst, a2, a3);
  }
  v13 = &v12[a3];
  if (a4)
  {
    v14 = *(_BYTE **)(a4 + 8);
    v15 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v15 == 1)
      {
        *v13 = *v14;
      }
      else if ((_DWORD)v15)
      {
        __dst = memcpy(v13, v14, v15);
      }
    }
    else
    {
      if (v15 < 0x10)
      {
        v20 = (unsigned __int128 *)v13;
      }
      else
      {
        v20 = (unsigned __int128 *)&v13[v15 & 0xFFFFFFF0];
        v21 = (unsigned __int128 *)v13;
        do
        {
          v22 = (unsigned __int128)vld2q_s8(v14);
          v14 += 32;
          *v21++ = v22;
        }
        while (v21 != v20);
      }
      while (v20 != (unsigned __int128 *)&v13[v15])
      {
        v27 = *v14;
        v14 += 2;
        *(_BYTE *)v20 = v27;
        v20 = (unsigned __int128 *)((char *)v20 + 1);
      }
    }
    v16 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v16 = 0;
  }
  v17 = &v13[v16];
  if (a6 == 1)
  {
    *v17 = *__src;
  }
  else if (a6)
  {
    __dst = memcpy(&v13[v16], __src, a6);
  }
  if (a7)
  {
    __dst = &v17[a6];
    v18 = *(_BYTE **)(a7 + 8);
    v19 = *(unsigned int *)(a7 + 4);
    if ((*(_BYTE *)(a7 + 16) & 4) != 0)
    {
      if ((_DWORD)v19 == 1)
      {
        *__dst = *v18;
      }
      else if ((_DWORD)v19)
      {
        return memcpy(__dst, v18, v19);
      }
    }
    else
    {
      v23 = &__dst[v19];
      if (v19 >= 0x10)
      {
        v24 = &__dst[v19 & 0xFFFFFFF0];
        do
        {
          v25 = (unsigned __int128)vld2q_s8(v18);
          v18 += 32;
          *(_OWORD *)__dst = v25;
          __dst += 16;
        }
        while (__dst != v24);
        __dst = v24;
      }
      while (__dst != v23)
      {
        v26 = *v18;
        v18 += 2;
        *__dst++ = v26;
      }
    }
  }
  return __dst;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(_BYTE *__dst, _BYTE *a2, unsigned int a3, uint64_t a4)
{
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unsigned __int128 v11;
  char v12;

  v6 = __dst;
  if (a3 == 1)
  {
    *__dst = *a2;
  }
  else if (a3)
  {
    __dst = memcpy(__dst, a2, a3);
  }
  if (a4)
  {
    __dst = &v6[a3];
    v7 = *(_BYTE **)(a4 + 8);
    v8 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v8 == 1)
      {
        *__dst = *v7;
      }
      else if ((_DWORD)v8)
      {
        return memcpy(__dst, v7, v8);
      }
    }
    else
    {
      v9 = &__dst[v8];
      if (v8 >= 0x10)
      {
        v10 = &__dst[v8 & 0xFFFFFFF0];
        do
        {
          v11 = (unsigned __int128)vld2q_s8(v7);
          v7 += 32;
          *(_OWORD *)__dst = v11;
          __dst += 16;
        }
        while (__dst != v10);
        __dst = v10;
      }
      while (__dst != v9)
      {
        v12 = *v7;
        v7 += 2;
        *__dst++ = v12;
      }
    }
  }
  return __dst;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, int8x16_t *a3, int a4, uint64_t a5)
{
  int8x16_t *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int16 v22;
  uint64_t v23;
  char *v24;
  char *result;
  char *v26;
  __int128 v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;
  int8x16_t *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int128 v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int16 v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;

  if (a2)
  {
    v10 = *(int8x16_t **)(a2 + 8);
    v11 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v12 = &__dst[2 * v11];
      if (v11 >= 0x40)
      {
        v13 = &__dst[2 * (v11 & 0xFFFFFFC0)];
        v14 = 0uLL;
        v15 = __dst;
        do
        {
          v47.val[0] = *v10;
          v16 = v10[1];
          v50.val[0] = v10[2];
          v17 = v10[3];
          v10 += 4;
          v18 = v17;
          v50.val[1] = 0uLL;
          v53.val[0] = v16;
          v47.val[1] = 0uLL;
          v19 = v15;
          vst2q_s8(v19, v47);
          v19 += 32;
          v53.val[1] = 0uLL;
          vst2q_s8(v19, v53);
          v20 = v15 + 64;
          vst2q_s8(v20, v50);
          v21 = v15 + 96;
          vst2q_s8(v21, *(int8x16x2_t *)(&v14 - 1));
          v15 += 128;
        }
        while (v15 != v13);
      }
      else
      {
        v13 = __dst;
      }
      while (v13 != v12)
      {
        v22 = v10->u8[0];
        v10 = (int8x16_t *)((char *)v10 + 1);
        *(_WORD *)v13 = v22;
        v13 += 2;
      }
    }
    else if ((_DWORD)v11 == 1)
    {
      *(_WORD *)__dst = v10->i16[0];
    }
    else if ((_DWORD)v11)
    {
      memcpy(__dst, v10, 2 * v11);
    }
    v23 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v23 = 0;
  }
  v24 = &__dst[2 * v23];
  result = &v24[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v26 = &v24[2 * (a4 & 0xFFFFFFC0)];
    v27 = 0uLL;
    do
    {
      v48.val[0] = *a3;
      v28 = a3[1];
      v51.val[0] = a3[2];
      v29 = a3[3];
      a3 += 4;
      v30 = v29;
      v51.val[1] = 0uLL;
      v54.val[0] = v28;
      v48.val[1] = 0uLL;
      v31 = v24;
      vst2q_s8(v31, v48);
      v31 += 32;
      v54.val[1] = 0uLL;
      vst2q_s8(v31, v54);
      v32 = v24 + 64;
      vst2q_s8(v32, v51);
      v33 = v24 + 96;
      vst2q_s8(v33, *(int8x16x2_t *)(&v27 - 1));
      v24 += 128;
    }
    while (v24 != v26);
    v24 = v26;
  }
  while (v24 != result)
  {
    v34 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v24 = v34;
    v24 += 2;
  }
  if (a5)
  {
    v35 = *(int8x16_t **)(a5 + 8);
    v36 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      v37 = &result[2 * v36];
      if (v36 >= 0x40)
      {
        v38 = &result[2 * (v36 & 0xFFFFFFC0)];
        v39 = 0uLL;
        do
        {
          v49.val[0] = *v35;
          v40 = v35[1];
          v52.val[0] = v35[2];
          v41 = v35[3];
          v35 += 4;
          v42 = v41;
          v52.val[1] = 0uLL;
          v55.val[0] = v40;
          v49.val[1] = 0uLL;
          v43 = result;
          vst2q_s8(v43, v49);
          v43 += 32;
          v55.val[1] = 0uLL;
          vst2q_s8(v43, v55);
          v44 = result + 64;
          vst2q_s8(v44, v52);
          v45 = result + 96;
          vst2q_s8(v45, *(int8x16x2_t *)(&v39 - 1));
          result += 128;
        }
        while (result != v38);
        result = v38;
      }
      while (result != v37)
      {
        v46 = v35->u8[0];
        v35 = (int8x16_t *)((char *)v35 + 1);
        *(_WORD *)result = v46;
        result += 2;
      }
    }
    else if ((_DWORD)v36 == 1)
    {
      *(_WORD *)result = v35->i16[0];
    }
    else if ((_DWORD)v36)
    {
      return (char *)memcpy(result, v35, 2 * v36);
    }
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4)
{
  char *v4;
  char *result;
  char *v6;
  __int128 v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int16 v14;
  int8x16_t *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int16 v26;
  int8x16x2_t v27;
  int8x16x2_t v28;
  int8x16x2_t v29;
  int8x16x2_t v30;
  int8x16x2_t v31;
  int8x16x2_t v32;

  v4 = a1;
  result = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v6 = &v4[2 * (a3 & 0xFFFFFFC0)];
    v7 = 0uLL;
    do
    {
      v27.val[0] = *a2;
      v8 = a2[1];
      v29.val[0] = a2[2];
      v9 = a2[3];
      a2 += 4;
      v10 = v9;
      v29.val[1] = 0uLL;
      v31.val[0] = v8;
      v27.val[1] = 0uLL;
      v11 = v4;
      vst2q_s8(v11, v27);
      v11 += 32;
      v31.val[1] = 0uLL;
      vst2q_s8(v11, v31);
      v12 = v4 + 64;
      vst2q_s8(v12, v29);
      v13 = v4 + 96;
      vst2q_s8(v13, *(int8x16x2_t *)(&v7 - 1));
      v4 += 128;
    }
    while (v4 != v6);
    v4 = v6;
  }
  while (v4 != result)
  {
    v14 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)v4 = v14;
    v4 += 2;
  }
  if (a4)
  {
    v15 = *(int8x16_t **)(a4 + 8);
    v16 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v17 = &result[2 * v16];
      if (v16 >= 0x40)
      {
        v18 = &result[2 * (v16 & 0xFFFFFFC0)];
        v19 = 0uLL;
        do
        {
          v28.val[0] = *v15;
          v20 = v15[1];
          v30.val[0] = v15[2];
          v21 = v15[3];
          v15 += 4;
          v22 = v21;
          v30.val[1] = 0uLL;
          v32.val[0] = v20;
          v28.val[1] = 0uLL;
          v23 = result;
          vst2q_s8(v23, v28);
          v23 += 32;
          v32.val[1] = 0uLL;
          vst2q_s8(v23, v32);
          v24 = result + 64;
          vst2q_s8(v24, v30);
          v25 = result + 96;
          vst2q_s8(v25, *(int8x16x2_t *)(&v19 - 1));
          result += 128;
        }
        while (result != v18);
        result = v18;
      }
      while (result != v17)
      {
        v26 = v15->u8[0];
        v15 = (int8x16_t *)((char *)v15 + 1);
        *(_WORD *)result = v26;
        result += 2;
      }
    }
    else if ((_DWORD)v16 == 1)
    {
      *(_WORD *)result = v15->i16[0];
    }
    else if ((_DWORD)v16)
    {
      return (char *)memcpy(result, v15, 2 * v16);
    }
  }
  return result;
}

char *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<long long>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<long long>,void>>@<X0>(char *result@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  BOOL v19;
  unsigned int v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  char v25;
  _DWORD *v26;

  v6 = *a2;
  v7 = a2[1];
  if ((v7 & 0x8000000000000000) != 0)
  {
    v11 = -(uint64_t)v7;
    v8 = 1;
    do
    {
      ++v8;
      v12 = v11 >= 0xA;
      v11 /= 0xAuLL;
    }
    while (v12);
  }
  else
  {
    v8 = 0;
    v9 = a2[1];
    do
    {
      ++v8;
      v10 = v9 > 9;
      v9 /= 0xAuLL;
    }
    while (v10);
  }
  if (*(_DWORD *)(v6 + 4) > v8)
    v8 = *(_DWORD *)(v6 + 4);
  v13 = *a4;
  v14 = a4[1];
  if ((v14 & 0x8000000000000000) != 0)
  {
    v17 = -(uint64_t)v14;
    v15 = 1;
    do
    {
      ++v15;
      v12 = v17 >= 0xA;
      v17 /= 0xAuLL;
    }
    while (v12);
  }
  else
  {
    v15 = 0;
    v16 = a4[1];
    do
    {
      ++v15;
      v10 = v16 > 9;
      v16 /= 0xAuLL;
    }
    while (v10);
  }
  if (*(_DWORD *)(v13 + 4) > v15)
    v15 = *(_DWORD *)(v13 + 4);
  if ((v15 & 0x80000000) != 0)
    goto LABEL_29;
  v18 = 0;
  v19 = __OFADD__(v15, 1);
  v20 = v15 + 1;
  v21 = v19;
  if ((v8 & 0x80000000) == 0 && (v21 & 1) == 0)
  {
    v19 = __OFADD__(v8, v20);
    v22 = v8 + v20;
    if (!v19)
    {
      v23 = v22 + 1;
      if (!__OFADD__(v22, 1) && (v23 & 0x80000000) == 0)
      {
        v24 = *result;
        v25 = *a3;
        result = (char *)WTF::tryFastCompactMalloc((WTF *)(v23 + 20), &v26);
        v18 = v26;
        if (v26)
        {
          *v26 = 2;
          v18[1] = v23;
          *((_BYTE *)v18 + 20) = v24;
          *((_QWORD *)v18 + 1) = v18 + 5;
          v18[4] = 4;
          result = WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<long long>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<long long>,void>>((_BYTE *)v18 + 21, v6, v7, v25, v13, v14);
        }
        goto LABEL_28;
      }
    }
LABEL_29:
    v18 = 0;
  }
LABEL_28:
  *a5 = v18;
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::PaddingSpecification<long long>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<long long>,void>>(_BYTE *a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  unint64_t v9;
  unsigned int v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  _BYTE *v31;
  _BYTE *v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *result;
  uint64_t v41;
  _BYTE *v42;
  size_t v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE v46[25];
  uint64_t v47;

  v9 = a3;
  v47 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0x8000000000000000) != 0)
  {
    v15 = -(uint64_t)a3;
    v12 = 1;
    do
    {
      ++v12;
      v16 = v15 >= 0xA;
      v15 /= 0xAuLL;
    }
    while (v16);
  }
  else
  {
    v12 = 0;
    v13 = a3;
    do
    {
      ++v12;
      v14 = v13 > 9;
      v13 /= 0xAuLL;
    }
    while (v14);
  }
  v17 = *(_DWORD *)(a2 + 4);
  v16 = v17 >= v12;
  v18 = v17 - v12;
  if ((_DWORD)v18 != 0 && v16)
  {
    v19 = a1;
    v20 = v18;
    do
    {
      *v19++ = *(_BYTE *)a2;
      --v20;
    }
    while (v20);
  }
  else
  {
    v18 = 0;
  }
  v21 = &a1[v18];
  v22 = 0;
  if ((a3 & 0x8000000000000000) != 0)
  {
    v26 = -(uint64_t)a3;
    do
    {
      v46[v22-- + 24] = (v26 % 0xA) | 0x30;
      v14 = v26 > 9;
      v26 /= 0xAuLL;
    }
    while (v14);
    v27 = v22 + 24;
    v24 = &v46[v22 + 24];
    *v24 = 45;
    if (v22 + 26 > 26)
      goto LABEL_23;
    if (v27 <= 24)
      v27 = 24;
    v25 = v27 - v22 - 23;
  }
  else
  {
    v23 = a3;
    do
    {
      v46[v22-- + 24] = (v23 % 0xA) | 0x30;
      v14 = v23 > 9;
      v23 /= 0xAuLL;
    }
    while (v14);
    if (v22 + 26 > 25)
      goto LABEL_23;
    v24 = &v46[v22 + 25];
    v25 = -v22;
  }
  memcpy(v21, v24, v25);
LABEL_23:
  if ((v9 & 0x8000000000000000) != 0)
  {
    v29 = -(uint64_t)v9;
    LODWORD(v28) = 1;
    do
    {
      LODWORD(v28) = v28 + 1;
      v16 = v29 >= 0xA;
      v29 /= 0xAuLL;
    }
    while (v16);
  }
  else
  {
    LODWORD(v28) = 0;
    do
    {
      LODWORD(v28) = v28 + 1;
      v14 = v9 > 9;
      v9 /= 0xAuLL;
    }
    while (v14);
  }
  v30 = *(_DWORD *)(a2 + 4);
  if (v30 <= v28)
    v28 = v28;
  else
    v28 = v30;
  v31 = &a1[v28];
  *v31 = a4;
  v32 = v31 + 1;
  if ((a6 & 0x8000000000000000) != 0)
  {
    v35 = -(uint64_t)a6;
    v33 = 1;
    do
    {
      ++v33;
      v16 = v35 >= 0xA;
      v35 /= 0xAuLL;
    }
    while (v16);
  }
  else
  {
    v33 = 0;
    v34 = a6;
    do
    {
      ++v33;
      v14 = v34 > 9;
      v34 /= 0xAuLL;
    }
    while (v14);
  }
  v36 = *(_DWORD *)(a5 + 4);
  v16 = v36 >= v33;
  v37 = v36 - v33;
  if ((_DWORD)v37 != 0 && v16)
  {
    v38 = v32;
    v39 = v37;
    do
    {
      *v38++ = *(_BYTE *)a5;
      --v39;
    }
    while (v39);
  }
  else
  {
    v37 = 0;
  }
  result = &v32[v37];
  v41 = 0;
  if ((a6 & 0x8000000000000000) != 0)
  {
    v44 = -(uint64_t)a6;
    do
    {
      v46[v41-- + 24] = (v44 % 0xA) | 0x30;
      v14 = v44 > 9;
      v44 /= 0xAuLL;
    }
    while (v14);
    v45 = v41 + 24;
    v42 = &v46[v41 + 24];
    *v42 = 45;
    if (v41 + 26 <= 26)
    {
      if (v45 <= 24)
        v45 = 24;
      v43 = v45 - v41 - 23;
      return memcpy(result, v42, v43);
    }
  }
  else
  {
    do
    {
      v46[v41-- + 24] = (a6 % 0xA) | 0x30;
      v14 = a6 > 9;
      a6 /= 0xAuLL;
    }
    while (v14);
    if (v41 + 26 <= 25)
    {
      v42 = &v46[v41 + 25];
      v43 = -v41;
      return memcpy(result, v42, v43);
    }
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, int **a3@<X8>)
{
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  int v8;

  v3 = *(_DWORD *)(result + 8);
  v4 = *a2;
  if (*a2)
    v5 = *(_DWORD *)(v4 + 4);
  else
    v5 = 0;
  if ((v5 | v3) < 0 || (v6 = __OFADD__(v3, v5), v7 = (v3 + v5), v6))
  {
    *a3 = 0;
  }
  else
  {
    if (v4)
      v8 = (*(unsigned __int8 *)(v4 + 16) >> 2) & 1;
    else
      v8 = 1;
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v7, v8, *(int8x16_t **)result, *(_QWORD *)(result + 8), v4, a3);
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, int8x16_t *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int **a6@<X8>)
{
  int v9;
  int *v11;
  _BYTE *v12;
  char *v13;
  _DWORD *v14;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v14);
        v11 = v14;
        if (v14)
        {
          v12 = v14 + 5;
          *v14 = 2;
          v11[1] = v9;
          *((_QWORD *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v12, a3, a4, a5);
        }
        goto LABEL_6;
      }
LABEL_12:
      v11 = 0;
      goto LABEL_6;
    }
LABEL_11:
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_6;
  }
  if (!(_DWORD)result)
    goto LABEL_11;
  if (result > 0x7FFFFFEF)
    goto LABEL_12;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v14);
  v11 = v14;
  if (v14)
  {
    v13 = (char *)(v14 + 5);
    *v14 = 2;
    v11[1] = v9;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v13, a3, a4, a5);
  }
LABEL_6:
  *a6 = v11;
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(uint64_t a1, int8x16_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *result;
  int8x16_t *v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  char *v33;
  char *v34;
  int8x16_t *v35;
  uint64_t v36;
  int8x16_t *v37;
  size_t v38;
  int8x16x2_t v39;
  int8x16x2_t v40;
  int8x16x2_t v41;

  v10 = *(_DWORD *)(a1 + 16);
  v11 = *((_DWORD *)a2 + 2);
  v12 = *(_DWORD *)(a3 + 8);
  v13 = __CFADD__(v12, v11);
  v14 = v12 + v11;
  if (v13)
    v14 = -1;
  v13 = __CFADD__(v14, v10);
  v15 = v14 + v10;
  if (v13)
    v16 = 0xFFFFFFFFLL;
  else
    v16 = v15;
  v17 = *(_QWORD *)(a1 + 8);
  if ((v17 || (v17 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v17 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v19 = *a2;
      v20 = *(int8x16_t **)a3;
      v21 = *(_QWORD *)(a3 + 8);
      v22 = &result[2 * a2[1]];
      v23 = (unint64_t)a2[1] & 0xFFFFFFC0;
      if (v23)
      {
        v24 = &result[2 * v23];
        v25 = 0uLL;
        do
        {
          v39.val[0] = *v19;
          v26 = v19[1];
          v40.val[0] = v19[2];
          v27 = v19[3];
          v19 += 4;
          v28 = v27;
          v40.val[1] = 0uLL;
          v41.val[0] = v26;
          v39.val[1] = 0uLL;
          v29 = result;
          vst2q_s8(v29, v39);
          v29 += 32;
          v41.val[1] = 0uLL;
          vst2q_s8(v29, v41);
          v30 = result + 64;
          vst2q_s8(v30, v40);
          v31 = result + 96;
          vst2q_s8(v31, *(int8x16x2_t *)(&v25 - 1));
          result += 128;
        }
        while (result != v24);
        result = v24;
      }
      while (result != v22)
      {
        v32 = v19->u8[0];
        v19 = (int8x16_t *)((char *)v19 + 1);
        *(_WORD *)result = v32;
        result += 2;
      }
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v22, v20, v21);
    }
  }
  else
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v16, a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v33 = result;
      v34 = (char *)*a2;
      v35 = a2[1];
      v36 = v35;
      v37 = *(int8x16_t **)a3;
      v38 = *(unsigned int *)(a3 + 8);
      if ((_DWORD)v35 == 1)
      {
        *result = *v34;
      }
      else if ((_DWORD)v35)
      {
        memcpy(result, v34, v35);
      }
      result = &v33[v36];
      if ((_DWORD)v38 == 1)
      {
        *result = v37->i8[0];
      }
      else if ((_DWORD)v38)
      {
        return (char *)memcpy(result, v37, v38);
      }
    }
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *result, int8x16_t *a2, int a3)
{
  char *v3;
  char *v4;
  __int128 v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int16 v12;
  int8x16x2_t v13;
  int8x16x2_t v14;
  int8x16x2_t v15;

  v3 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v4 = &result[2 * (a3 & 0xFFFFFFC0)];
    v5 = 0uLL;
    do
    {
      v13.val[0] = *a2;
      v6 = a2[1];
      v14.val[0] = a2[2];
      v7 = a2[3];
      a2 += 4;
      v8 = v7;
      v14.val[1] = 0uLL;
      v15.val[0] = v6;
      v13.val[1] = 0uLL;
      v9 = result;
      vst2q_s8(v9, v13);
      v9 += 32;
      v15.val[1] = 0uLL;
      vst2q_s8(v9, v15);
      v10 = result + 64;
      vst2q_s8(v10, v14);
      v11 = result + 96;
      vst2q_s8(v11, *(int8x16x2_t *)(&v5 - 1));
      result += 128;
    }
    while (result != v4);
    result = v4;
  }
  while (result != v3)
  {
    v12 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v12;
    result += 2;
  }
  return result;
}

uint64_t JSC::IntlDurationFormat::destroy(JSC::IntlDurationFormat *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t result;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v9 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v9;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  result = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
    return ulistfmt_close();
  return result;
}

unint64_t JSC::IntlDurationFormat::create(JSC::IntlDurationFormat *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t result;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = (_QWORD *)*((_QWORD *)this + 5070);
  if (!v10)
    v10 = (_QWORD *)JSC::GCClient::Heap::intlDurationFormatSpaceSlow((JSC::Heap **)this + 4694);
  result = v10[3];
  if (result < v10[4])
    goto LABEL_4;
  result = v10[5];
  if ((result & 1) == 0)
  {
    v13 = *(_QWORD *)(result + 8) ^ v10[6];
    v10[4] = result + HIDWORD(v13);
    v10[5] = result + (int)v13;
LABEL_4:
    v10[3] = result + 64;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v10, (uint64_t)this + 192, 64, 0, 0, v14, v15, v16);
LABEL_5:
  *(_DWORD *)result = 0;
  v12 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v12;
  *(_QWORD *)(result + 55) = 0;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::IntlDurationFormat::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlDurationFormat::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::IntlDurationFormat::initializeDurationFormat(uint64_t a1, unint64_t a2, unint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::Symbol *v9;
  JSC::VM *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  JSC::Heap **v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  JSC::Exception *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  WTF::AtomStringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl **v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  const char *v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  const WTF::String *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF *v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _DWORD *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  uint64_t v131;
  int v132;
  int v133;
  BOOL v134;
  int v135;
  char v136;
  uint64_t v137;
  unsigned int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  float v145;
  uint64_t v146;
  _DWORD *v147;
  WTF::StringImpl *v148;
  char v149;
  uint64_t v150;
  unint64_t v151;
  int8x16_t v152;
  int *v153;
  unsigned int v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  WTF::StringImpl *v195;
  uint64_t v196;
  char v197;
  char v198;
  unint64_t v199;
  float v200;
  unint64_t *v201;
  unint64_t *v202;
  unint64_t v203;
  int v204;
  int v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int *v209;
  uint64_t v210;
  const char *v211;
  uint64_t v212;
  __int16 v213;
  char v214;
  char v216;
  uint64_t v217;
  unint64_t v218;
  int8x16_t v219;
  int *v220;
  uint64_t v221;
  JSC::Heap **v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  double v230;
  JSC::Exception *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  uint64_t v234;
  JSC::Heap **v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  double v243;
  JSC::Exception *v244;
  WTF::StringImpl *v245;
  char v246;
  JSC::VM *v247;
  unint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  uint64_t (*v277)(JSC::VM **);
  uint64_t (*v278)(JSC::VM **);
  unint64_t v279;
  uint64_t v280;
  JSC::JSObject *v281;
  int8x16_t v282;
  int v283;
  JSC::VM *v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  JSC::Heap **v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  double v304;
  JSC::Exception *v305;
  WTF::StringImpl *v306;
  int v307;
  int v308;
  int v309;
  int v310;
  uint64_t (*v311)(JSC::VM **);
  JSC::VM **v312;
  unint64_t v313;
  void *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  uint64_t (*v326)(WTF::StringImpl **);
  WTF::StringImpl **v327;
  JSC::VM **v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  JSC::VM *v333;
  unsigned int *v334;
  WTF::StringImpl *v335;
  WTF::StringImpl *v336;
  WTF::StringImpl *v337;
  _DWORD *v338;
  WTF::StringImpl *v339;
  _BYTE v340[80];
  WTF::StringImpl *v341;
  unsigned __int8 v342;
  WTF *v343;
  int v344;
  unsigned int v345;
  JSC::VM *v346;
  WTF::StringImpl *v347;
  WTF::StringImpl *v348[3];
  WTF::StringImpl *v349;
  WTF::StringImpl *v350;
  JSC::VM *v351;
  uint64_t v352;
  unint64_t v353;
  const char *v354;
  uint64_t v355;
  __int16 v356;
  const char *v357;
  uint64_t v358;
  __int16 v359;
  const char *v360;
  uint64_t v361;
  __int16 v362;
  const char *v363;
  uint64_t v364;
  __int16 v365;
  uint64_t v366;

  v9 = a4;
  v366 = *MEMORY[0x1E0C80C00];
  v346 = *(JSC::VM **)(a2 + 56);
  v12 = v346;
  JSC::canonicalizeLocaleList(a2, a3, a3, a4, a5, a6, a7, a8, &v343, a9);
  if (*((_DWORD *)v12 + 20))
  {
    v307 = *((_DWORD *)v12 + 20);
    if ((v307 & 0x27) != 0 && (v307 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*((_QWORD *)v12 + 2))
      goto LABEL_71;
  }
  v351 = *(JSC::VM **)(a2 + 56);
  if (v9 != (JSC::Symbol *)10)
  {
    if (((unint64_t)v9 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v9 + 5) > 0x16u)
      goto LABEL_6;
    JSC::throwTypeError(a2, &v351, (uint64_t)"options argument is not an object or undefined", 47);
  }
  v9 = 0;
LABEL_6:
  if (*((_DWORD *)v12 + 20))
  {
    v308 = *((_DWORD *)v12 + 20);
    if ((v308 & 0x27) != 0 && (v308 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*((_QWORD *)v12 + 2))
      goto LABEL_71;
  }
  v340[0] = 0;
  v340[8] = 0;
  v340[16] = 0;
  v340[24] = 0;
  v340[32] = 0;
  v340[40] = 0;
  v340[48] = 0;
  v340[56] = 0;
  v340[64] = 0;
  v340[72] = 0;
  LOBYTE(v341) = 0;
  v342 = 0;
  v20 = (char *)v12 + 41952;
  v21 = *(_QWORD *)(*((_QWORD *)v12 + 5244) + 1792);
  v351 = (JSC::VM *)"lookup";
  v352 = 7;
  LOBYTE(v353) = 0;
  v354 = "best fit";
  v355 = 9;
  LOBYTE(v356) = 1;
  v29 = JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)a2, (unsigned int *)v9, v21, (uint64_t)&v351, 2, (unint64_t)"localeMatcher must be either \"lookup\" or \"best fit\"", 52, 1);
  if (*((_DWORD *)v12 + 20))
  {
    v309 = *((_DWORD *)v12 + 20);
    if ((v309 & 0x27) != 0 && (v309 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*((_QWORD *)v12 + 2))
      goto LABEL_70;
  }
  JSC::intlStringOption((JSC::JSGlobalObject *)a2, (unsigned int *)v9, *(_QWORD *)(*(_QWORD *)v20 + 2040), 0, 0, 0, 0, v28, &v339, 0, 0);
  if (*((_DWORD *)v12 + 20))
  {
    v310 = *((_DWORD *)v12 + 20);
    if ((v310 & 0x27) != 0 && (v310 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*((_QWORD *)v12 + 2))
      goto LABEL_67;
  }
  v31 = v339;
  if (v339)
  {
    v32 = *((_QWORD *)v339 + 1);
    v33 = *((unsigned int *)v339 + 1);
    if ((*((_BYTE *)v339 + 16) & 4) != 0)
    {
      if ((_DWORD)v33)
      {
        while (1)
        {
          v40 = 0;
          while (1)
          {
            v41 = *(unsigned __int8 *)(v32 + v40);
            if ((v41 - 48) >= 0xA && (v41 | 0x20u) - 97 > 0x19)
              break;
            if (v33 == ++v40)
            {
              v47 = v32 + v33;
              goto LABEL_40;
            }
          }
          if (v41 != 45 || (v40 - 3) >= 6)
            break;
          v44 = v33 - 1;
          v33 += ~v40;
          v32 += v40 + 1;
          if (v44 == v40)
            goto LABEL_38;
        }
LABEL_46:
        v49 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v49 = 0x3B00000002;
        *(_QWORD *)(v49 + 8) = "numberingSystem is not a well-formed numbering system value";
        *(_DWORD *)(v49 + 16) = 4;
        v335 = (WTF::StringImpl *)v49;
        v50 = *(_QWORD *)(a2 + 128);
        v51 = *(JSC::Heap ***)(a2 + 56);
        if ((v50 & 1) != 0)
        {
          v311 = *(uint64_t (**)(JSC::VM **))(v50 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a2 & 8) != 0)
            v312 = (JSC::VM **)(a2 - 16);
          else
            v312 = (JSC::VM **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
          v351 = *v312;
          v352 = a2;
          v353 = a2 + 128;
          v50 = v311(&v351);
        }
        v52 = JSC::ErrorInstance::create(v51, v50, &v335, 0, 0, 0, 2, 1);
        v59 = (JSC::Exception *)v52;
        if ((v52 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v52 & 0xFFFFFFFE) + 0x4C)))
        {
          v59 = (JSC::Exception *)JSC::Exception::create((uint64_t)v12, (JSC::VM *)v52, 0, v53, v54, v55, v56, v57);
        }
        JSC::VM::throwException(v12, (JSC::JSGlobalObject *)a2, v59, v58, v53, v54, v55, v56, v57);
        goto LABEL_64;
      }
LABEL_38:
      v47 = v32;
LABEL_40:
      v46 = v47 - v32 - 3;
    }
    else
    {
      if ((_DWORD)v33)
      {
        do
        {
          v34 = 0;
          v35 = -2;
          while (1)
          {
            v36 = *(unsigned __int16 *)(v32 + 2 * v34);
            if ((v36 - 48) >= 0xA && (v36 | 0x20u) - 97 > 0x19)
              break;
            v35 -= 2;
            if (v33 == ++v34)
            {
              v45 = v32 + 2 * v33;
              goto LABEL_39;
            }
          }
          if (v36 != 45 || (v34 - 3) >= 6)
            goto LABEL_46;
          v39 = v33 - 1;
          v33 += ~v34;
          v32 -= v35;
        }
        while (v39 != v34);
      }
      v45 = v32;
LABEL_39:
      v46 = ((unint64_t)(v45 - v32) >> 1) - 3;
    }
    if (v46 >= 6)
      goto LABEL_46;
    v48 = v342;
    *(_DWORD *)v339 += 2;
    if (v48)
    {
      v30 = v341;
      v341 = v31;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
        {
          WTF::StringImpl::~StringImpl(v30, v22, v23, v24, v25, v26, v27, v28);
          WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
        }
        else
        {
          *(_DWORD *)v30 -= 2;
        }
      }
    }
    else
    {
      v341 = v31;
      v342 = 1;
    }
  }
  v68 = JSC::intlAvailableLocales(v30);
  LOBYTE(v351) = 5;
  JSC::resolveLocale((JSC *)a2, (const WTF::StringImpl *)v68, (uint64_t)&v343, v29, (uint64_t)v340, (uint64_t)&v351, 1, (uint64_t)JSC::IntlDurationFormat::initializeDurationFormat(JSC::JSGlobalObject *,JSC::JSValue,JSC::JSValue)::$_0::__invoke, (uint64_t)&v335);
  v76 = (WTF::StringImpl **)(a1 + 24);
  v77 = v335;
  if (v335)
    *(_DWORD *)v335 += 2;
  v78 = *v76;
  *v76 = v77;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
      v77 = *v76;
      if (!*v76)
        goto LABEL_59;
      goto LABEL_85;
    }
    *(_DWORD *)v78 -= 2;
  }
  if (!v77)
  {
LABEL_59:
    v79 = "failed to initialize DurationFormat due to invalid locale";
    v80 = a2;
    v81 = 58;
    goto LABEL_60;
  }
LABEL_85:
  if (!*((_DWORD *)v77 + 1))
    goto LABEL_59;
  v128 = v338;
  if (v338)
    *v338 += 2;
  v129 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v128;
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
    {
      WTF::StringImpl::~StringImpl(v129, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
    }
    else
    {
      *(_DWORD *)v129 -= 2;
    }
  }
  v130 = v336;
  if (v336)
    *(_DWORD *)v336 += 2;
  v131 = *(_QWORD *)(a1 + 32);
  if (v131)
    *(_DWORD *)v131 += 2;
  if (v130)
  {
    v132 = *((_DWORD *)v130 + 1);
    if (v131)
      goto LABEL_97;
LABEL_324:
    v133 = 0;
    goto LABEL_98;
  }
  v132 = 0;
  if (!v131)
    goto LABEL_324;
LABEL_97:
  v133 = *(_DWORD *)(v131 + 4);
  if (v133 < 0)
  {
LABEL_350:
    v348[0] = 0;
    goto LABEL_351;
  }
LABEL_98:
  v134 = __OFADD__(v133, 6);
  v135 = v133 + 6;
  v136 = v134;
  if (v132 < 0)
    goto LABEL_350;
  if ((v136 & 1) != 0)
    goto LABEL_350;
  v137 = (v132 + v135);
  if (__OFADD__(v132, v135))
    goto LABEL_350;
  if (v130)
  {
    v138 = *((_DWORD *)v130 + 4);
    v139 = (v138 >> 2) & 1;
    if (v131 && (v138 & 4) != 0)
      goto LABEL_107;
  }
  else
  {
    if (v131)
    {
LABEL_107:
      v139 = (*(unsigned __int8 *)(v131 + 16) >> 2) & 1;
      goto LABEL_108;
    }
    v139 = 1;
  }
LABEL_108:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v137, v139, (uint64_t)v130, (int8x16_t *)"-u-nu-", 6u, v131, (int **)v348);
  if (!v348[0])
  {
LABEL_351:
    __break(0xC471u);
    JUMPOUT(0x197E1DB28);
  }
  WTF::String::utf8((uint64_t *)v348, 0, v140, v141, v142, v143, v144, &v351, v145);
  v147 = *(_DWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v351;
  if (v147)
  {
    if (*v147 == 1)
      WTF::fastFree((unint64_t)v147, v82, v146, v84, v85, v86, v87, v88);
    else
      --*v147;
    v351 = 0;
  }
  v148 = v348[0];
  v348[0] = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
    {
      WTF::StringImpl::~StringImpl(v148, (WTF::AtomStringImpl *)v82, v146, v84, v85, v86, v87, v88);
      WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
      if (!v131)
        goto LABEL_119;
      goto LABEL_117;
    }
    *(_DWORD *)v148 -= 2;
  }
  if (!v131)
    goto LABEL_119;
LABEL_117:
  if (*(_DWORD *)v131 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v131, (WTF::AtomStringImpl *)v82, v146, v84, v85, v86, v87, v88);
    WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
  }
  else
  {
    *(_DWORD *)v131 -= 2;
  }
LABEL_119:
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
    {
      WTF::StringImpl::~StringImpl(v130, (WTF::AtomStringImpl *)v82, v146, v84, v85, v86, v87, v88);
      WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
    }
    else
    {
      *(_DWORD *)v130 -= 2;
    }
  }
  v329 = (uint64_t *)(a1 + 24);
  v83 = *(const WTF::String **)(*(_QWORD *)v20 + 2384);
  v351 = (JSC::VM *)"long";
  v352 = 5;
  LOBYTE(v353) = 0;
  v354 = "short";
  v355 = 6;
  v149 = 1;
  LOBYTE(v356) = 1;
  v357 = "narrow";
  v358 = 7;
  LOBYTE(v359) = 2;
  v360 = "digital";
  v361 = 8;
  LOBYTE(v362) = 3;
  v333 = v12;
  v334 = (unsigned int *)v9;
  v332 = (char *)v12 + 41952;
  if (!v9)
    goto LABEL_151;
  v150 = *(_QWORD *)(a2 + 56);
  v151 = JSC::JSObject::get((unsigned int *)v9, a2, (unint64_t)v83, v84, v85, v86, v87, v88);
  v350 = (WTF::StringImpl *)v151;
  if (!*(_DWORD *)(v150 + 80))
    goto LABEL_124;
  v324 = *(_DWORD *)(v150 + 80);
  if ((v324 & 0x27) != 0 && (v324 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v150 + 64), 7u, (uint64_t)v83, v84, v85, v86, v87, v88);
  v20 = (char *)v12 + 41952;
  if (!*(_QWORD *)(v150 + 16))
  {
LABEL_124:
    if (v151 == 10)
      goto LABEL_151;
    if ((v151 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v151 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v350, (JSC::JSGlobalObject *)a2, v83, v84, v85, v86, v87, v88, (int **)&v349);
      goto LABEL_131;
    }
    v153 = *(int **)(v151 + 8);
    if ((v153 & 1) != 0)
    {
      v153 = *JSC::JSRopeString::resolveRope(v151, (JSC::JSGlobalObject *)a2, (uint64_t)v83, v84, v152, v85, v86, v87, v88);
      if (!v153)
        goto LABEL_130;
    }
    else if (!v153)
    {
LABEL_130:
      v349 = (WTF::StringImpl *)v153;
LABEL_131:
      if (!*(_DWORD *)(v150 + 80))
        goto LABEL_132;
      v325 = *(_DWORD *)(v150 + 80);
      if ((v325 & 0x27) != 0 && (v325 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v150 + 64), 7u, (uint64_t)v83, v84, v85, v86, v87, v88);
      v20 = (char *)v12 + 41952;
      if (!*(_QWORD *)(v150 + 16))
      {
LABEL_132:
        if (WTF::equalInternal<unsigned char>((uint64_t)v349, (unint64_t)"long", 4))
        {
          v154 = 0;
LABEL_147:
          v149 = *((_BYTE *)&v353 + 24 * v154);
          goto LABEL_148;
        }
        if (WTF::equalInternal<unsigned char>((uint64_t)v349, (unint64_t)"short", 5))
        {
          v154 = 1;
          goto LABEL_147;
        }
        if (WTF::equalInternal<unsigned char>((uint64_t)v349, (unint64_t)"narrow", 6))
        {
          v154 = 2;
          goto LABEL_147;
        }
        if (WTF::equalInternal<unsigned char>((uint64_t)v349, (unint64_t)"digital", 7))
        {
          v154 = 3;
          goto LABEL_147;
        }
        v295 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v295 = 0x3C00000002;
        *(_QWORD *)(v295 + 8) = "style must be either \"long\", \"short\", \"narrow\", or \"digital\"";
        *(_DWORD *)(v295 + 16) = 4;
        v347 = (WTF::StringImpl *)v295;
        v296 = *(_QWORD *)(a2 + 128);
        v297 = *(JSC::Heap ***)(a2 + 56);
        if ((v296 & 1) != 0)
        {
          v326 = *(uint64_t (**)(WTF::StringImpl **))(v296 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a2 & 8) != 0)
            v327 = (WTF::StringImpl **)(a2 - 16);
          else
            v327 = (WTF::StringImpl **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
          v348[0] = *v327;
          v348[1] = (WTF::StringImpl *)a2;
          v348[2] = (WTF::StringImpl *)(a2 + 128);
          v296 = v326(v348);
          v20 = (char *)v12 + 41952;
        }
        v298 = JSC::ErrorInstance::create(v297, v296, &v347, 0, 0, 0, 2, 1);
        v305 = (JSC::Exception *)v298;
        if ((v298 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v298 & 0xFFFFFFFE) + 0x4C)))
        {
          v305 = (JSC::Exception *)JSC::Exception::create(v150, (JSC::VM *)v298, 0, v299, v300, v301, v302, v303);
        }
        JSC::VM::throwException((JSC::VM *)v150, (JSC::JSGlobalObject *)a2, v305, v304, v299, v300, v301, v302, v303);
        v306 = v347;
        v347 = 0;
        if (v306)
        {
          if (*(_DWORD *)v306 == 2)
          {
            WTF::StringImpl::~StringImpl(v306, (WTF::AtomStringImpl *)v82, (uint64_t)v83, v84, v85, v86, v87, v88);
            WTF::fastFree(v313, v314, v315, v316, v317, v318, v319, v320);
          }
          else
          {
            *(_DWORD *)v306 -= 2;
          }
        }
      }
      v149 = 0;
LABEL_148:
      v195 = v349;
      v349 = 0;
      if (v195)
      {
        if (*(_DWORD *)v195 == 2)
        {
          WTF::StringImpl::~StringImpl(v195, (WTF::AtomStringImpl *)v82, (uint64_t)v83, v84, v85, v86, v87, v88);
          WTF::fastFree(v287, v288, v289, v290, v291, v292, v293, v294);
        }
        else
        {
          *(_DWORD *)v195 -= 2;
        }
      }
      goto LABEL_151;
    }
    *v153 += 2;
    goto LABEL_130;
  }
  v149 = 0;
LABEL_151:
  *(_BYTE *)(a1 + 52) = v149;
  if (*((_DWORD *)v12 + 20))
  {
    v321 = *((_DWORD *)v12 + 20);
    if ((v321 & 0x27) != 0 && (v321 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, (uint64_t)v83, v84, v85, v86, v87, v88);
    v20 = (char *)v12 + 41952;
    if (*((_QWORD *)v12 + 2))
      goto LABEL_61;
  }
  v196 = 0;
  v197 = 0;
  v198 = 0;
  v199 = a2 - 16;
  if ((a2 & 8) == 0)
    v199 = a2 & 0xFFFFFFFFFFFFC000 | 8;
  v328 = (JSC::VM **)v199;
  v330 = a1 + 53;
  v331 = a1;
  do
  {
    v83 = (const WTF::String *)JSC::temporalUnitPluralPropertyName((uint64_t)v12, v196);
    v201 = *(unint64_t **)v20;
    switch((char)v196)
    {
      case 0:
        v202 = v201 + 335;
        break;
      case 1:
        v202 = v201 + 244;
        break;
      case 2:
        v202 = v201 + 331;
        break;
      case 3:
        v202 = v201 + 141;
        break;
      case 4:
        v202 = v201 + 188;
        break;
      case 5:
        v202 = v201 + 240;
        break;
      case 6:
        v202 = v201 + 283;
        break;
      case 7:
        v202 = v201 + 234;
        break;
      case 8:
        v202 = v201 + 231;
        break;
      case 9:
        v202 = v201 + 249;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197E1DAACLL);
    }
    v203 = *v202;
    v204 = *(unsigned __int8 *)(a1 + 52);
    v205 = JSC::styleLists[v196];
    v206 = JSC::digitalDefaults[v196];
    v207 = *(_QWORD *)(a2 + 56);
    if (v205 == 2)
    {
      v351 = (JSC::VM *)"long";
      v352 = 5;
      LOWORD(v353) = 256;
      v354 = "short";
      v355 = 6;
      v356 = 257;
      v357 = "narrow";
      v358 = 7;
      v359 = 258;
      v360 = "numeric";
      v361 = 8;
      v362 = 259;
      v363 = "2-digit";
      v364 = 8;
      v365 = 260;
      v208 = a2;
      v209 = v334;
      v210 = 5;
      v211 = "style must be either \"long\", \"short\", \"narrow\" or \"numeric\", or \"2-digit\"";
      v212 = 74;
    }
    else if (v205 == 1)
    {
      v351 = (JSC::VM *)"long";
      v352 = 5;
      LOWORD(v353) = 256;
      v354 = "short";
      v355 = 6;
      v356 = 257;
      v357 = "narrow";
      v358 = 7;
      v359 = 258;
      v360 = "numeric";
      v361 = 8;
      v362 = 259;
      v208 = a2;
      v209 = v334;
      v210 = 4;
      v211 = "style must be either \"long\", \"short\", \"narrow\", or \"numeric\"";
      v212 = 61;
    }
    else
    {
      if (JSC::styleLists[v196])
        goto LABEL_175;
      v351 = (JSC::VM *)"long";
      v352 = 5;
      LOWORD(v353) = 256;
      v354 = "short";
      v355 = 6;
      v356 = 257;
      v357 = "narrow";
      v358 = 7;
      v359 = 258;
      v208 = a2;
      v209 = v334;
      v210 = 3;
      v211 = "style must be either \"long\", \"short\", or \"narrow\"";
      v212 = 50;
    }
    v213 = JSC::intlOption<std::optional<JSC::IntlDurationFormat::UnitStyle>>(v208, v209, (unint64_t)v83, (uint64_t)&v351, v210, (unint64_t)v211, v212, v88);
    if (*(_DWORD *)(v207 + 80))
    {
      v274 = *(_DWORD *)(v207 + 80);
      if ((v274 & 0x27) != 0 && (v274 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v207 + 64), 7u, (uint64_t)v83, v84, v85, v86, v87, v88);
      if (*(_QWORD *)(v207 + 16))
      {
        v246 = 0;
        a1 = v331;
        v20 = v332;
        v12 = v333;
        goto LABEL_227;
      }
    }
    if (!HIBYTE(v213))
    {
LABEL_175:
      if ((v197 - 3) >= 2u || v198 == 0)
        v216 = v204;
      else
        v216 = 3;
      if (v204 == 3)
        LOBYTE(v213) = v206;
      else
        LOBYTE(v213) = v216;
      v214 = v204 != 3 || (v196 - 7) < 0xFDu;
      goto LABEL_187;
    }
    v214 = 0;
LABEL_187:
    if (v334)
    {
      v217 = *(_QWORD *)(a2 + 56);
      v218 = JSC::JSObject::get(v334, a2, v203, v84, v85, v86, v87, v88);
      v348[0] = (WTF::StringImpl *)v218;
      if (*(_DWORD *)(v217 + 80))
      {
        v275 = *(_DWORD *)(v217 + 80);
        if ((v275 & 0x27) != 0 && (v275 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v217 + 64), 7u, (uint64_t)v83, v84, v85, v86, v87, v88);
        if (*(_QWORD *)(v217 + 16))
        {
          v214 = 0;
          goto LABEL_211;
        }
      }
      if (v218 != 10)
      {
        if ((v218 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v218 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v348, (JSC::JSGlobalObject *)a2, v83, v84, v85, v86, v87, v88, (int **)&v350);
        }
        else
        {
          v220 = *(int **)(v218 + 8);
          if ((v220 & 1) != 0)
          {
            v220 = *JSC::JSRopeString::resolveRope(v218, (JSC::JSGlobalObject *)a2, (uint64_t)v83, v84, v219, v85, v86, v87, v88);
            if (v220)
LABEL_194:
              *v220 += 2;
          }
          else if (v220)
          {
            goto LABEL_194;
          }
          v350 = (WTF::StringImpl *)v220;
        }
        if (!*(_DWORD *)(v217 + 80))
          goto LABEL_197;
        v276 = *(_DWORD *)(v217 + 80);
        if ((v276 & 0x27) != 0 && (v276 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v217 + 64), 7u, (uint64_t)v83, v84, v85, v86, v87, v88);
        if (!*(_QWORD *)(v217 + 16))
        {
LABEL_197:
          if (WTF::equalInternal<unsigned char>((uint64_t)v350, (unint64_t)"auto", 4))
          {
            v214 = 1;
            goto LABEL_208;
          }
          if (!WTF::equalInternal<unsigned char>((uint64_t)v350, (unint64_t)"always", 6))
          {
            v221 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v221 = 0x2E00000002;
            *(_QWORD *)(v221 + 8) = "display name must be either \"auto\" or \"always\"";
            *(_DWORD *)(v221 + 16) = 4;
            v349 = (WTF::StringImpl *)v221;
            v222 = *(JSC::Heap ***)(a2 + 56);
            v223 = *(_QWORD *)(a2 + 128);
            if ((v223 & 1) != 0)
            {
              v278 = *(uint64_t (**)(JSC::VM **))(v223 & 0xFFFFFFFFFFFFFFFCLL);
              v351 = *v328;
              v352 = a2;
              v353 = a2 + 128;
              v223 = v278(&v351);
            }
            v224 = JSC::ErrorInstance::create(v222, v223, &v349, 0, 0, 0, 2, 1);
            v231 = (JSC::Exception *)v224;
            if ((v224 & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v224 & 0xFFFFFFFE) + 0x4C)))
            {
              v231 = (JSC::Exception *)JSC::Exception::create(v217, (JSC::VM *)v224, 0, v225, v226, v227, v228, v229);
            }
            JSC::VM::throwException((JSC::VM *)v217, (JSC::JSGlobalObject *)a2, v231, v230, v225, v226, v227, v228, v229);
            v232 = v349;
            v349 = 0;
            if (v232)
            {
              if (*(_DWORD *)v232 == 2)
              {
                WTF::StringImpl::~StringImpl(v232, (WTF::AtomStringImpl *)v82, (uint64_t)v83, v84, v85, v86, v87, v88);
                WTF::fastFree(v264, v265, v266, v267, v268, v269, v270, v271);
              }
              else
              {
                *(_DWORD *)v232 -= 2;
              }
            }
          }
        }
        v214 = 0;
LABEL_208:
        v233 = v350;
        v350 = 0;
        if (v233)
        {
          if (*(_DWORD *)v233 == 2)
          {
            WTF::StringImpl::~StringImpl(v233, (WTF::AtomStringImpl *)v82, (uint64_t)v83, v84, v85, v86, v87, v88);
            WTF::fastFree(v248, v249, v250, v251, v252, v253, v254, v255);
          }
          else
          {
            *(_DWORD *)v233 -= 2;
          }
        }
      }
    }
LABEL_211:
    v20 = v332;
    v12 = v333;
    if (*(_DWORD *)(v207 + 80))
    {
      v273 = *(_DWORD *)(v207 + 80);
      if ((v273 & 0x27) != 0 && (v273 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v207 + 64), 7u, (uint64_t)v83, v84, v85, v86, v87, v88);
      if (*(_QWORD *)(v207 + 16))
      {
        v246 = 0;
        goto LABEL_226;
      }
    }
    if (!v198 || (v197 - 3) > 1u)
      goto LABEL_225;
    if ((v213 - 5) > 0xFDu)
    {
      if ((((_BYTE)v196 - 5) & 0xFE) == 0)
        LOBYTE(v213) = 4;
LABEL_225:
      v246 = v213 & 0x7F | (v214 << 7);
LABEL_226:
      a1 = v331;
      goto LABEL_227;
    }
    v234 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v234 = 0x1C00000002;
    *(_QWORD *)(v234 + 8) = "style option is inconsistent";
    *(_DWORD *)(v234 + 16) = 4;
    v348[0] = (WTF::StringImpl *)v234;
    v235 = *(JSC::Heap ***)(a2 + 56);
    v236 = *(_QWORD *)(a2 + 128);
    if ((v236 & 1) != 0)
    {
      v277 = *(uint64_t (**)(JSC::VM **))(v236 & 0xFFFFFFFFFFFFFFFCLL);
      v351 = *v328;
      v352 = a2;
      v353 = a2 + 128;
      v236 = v277(&v351);
    }
    v237 = JSC::ErrorInstance::create(v235, v236, v348, 0, 0, 0, 2, 1);
    v244 = (JSC::Exception *)v237;
    if ((v237 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v237 & 0xFFFFFFFE) + 0x4C)))
    {
      v244 = (JSC::Exception *)JSC::Exception::create(v207, (JSC::VM *)v237, 0, v238, v239, v240, v241, v242);
    }
    JSC::VM::throwException((JSC::VM *)v207, (JSC::JSGlobalObject *)a2, v244, v243, v238, v239, v240, v241, v242);
    v245 = v348[0];
    v348[0] = 0;
    a1 = v331;
    if (v245)
    {
      if (*(_DWORD *)v245 == 2)
      {
        WTF::StringImpl::~StringImpl(v245, (WTF::AtomStringImpl *)v82, (uint64_t)v83, v84, v85, v86, v87, v88);
        WTF::fastFree(v256, v257, v258, v259, v260, v261, v262, v263);
      }
      else
      {
        *(_DWORD *)v245 -= 2;
      }
    }
    v246 = 0;
LABEL_227:
    v247 = v346;
    if (*((_DWORD *)v346 + 20))
    {
      v272 = *((_DWORD *)v346 + 20);
      if ((v272 & 0x27) != 0 && (v272 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v346 + 64), 7u, (uint64_t)v83, v84, v85, v86, v87, v88);
      if (*((_QWORD *)v247 + 2))
        goto LABEL_61;
    }
    *(_BYTE *)(v330 + v196) = v246;
    if ((v196 - 4) < 5u)
    {
      v198 = 1;
      v197 = v246 & 0x7F;
    }
    ++v196;
  }
  while (v196 != 10);
  if (v334)
  {
    v279 = *(_QWORD *)(*(_QWORD *)v20 + 1344);
    v280 = *(_QWORD *)(a2 + 56);
    v281 = (JSC::JSObject *)JSC::JSObject::get(v334, a2, v279, v84, v85, v86, v87, v88);
    if (!*(_DWORD *)(v280 + 80))
      goto LABEL_267;
    v323 = *(_DWORD *)(v280 + 80);
    if ((v323 & 0x27) != 0 && (v323 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v280 + 64), 7u, (uint64_t)v83, v84, v85, v86, v87, v88);
    a1 = v331;
    if (*(_QWORD *)(v280 + 16))
      v283 = 0;
    else
LABEL_267:
      v283 = JSC::intlDefaultNumberOption((JSC::JSGlobalObject *)a2, v281, v279, 0, 9, 0xFFFFFFFFuLL, v87, v88, v282);
  }
  else
  {
    v283 = -1;
  }
  *(_DWORD *)(a1 + 48) = v283;
  if (!*((_DWORD *)v247 + 20))
    goto LABEL_275;
  v322 = *((_DWORD *)v247 + 20);
  if ((v322 & 0x27) != 0 && (v322 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v247 + 64), 7u, (uint64_t)v83, v84, v85, v86, v87, v88);
  a1 = v331;
  if (!*((_QWORD *)v247 + 2))
  {
LABEL_275:
    LODWORD(v348[0]) = 0;
    WTF::String::utf8(v329, 0, v84, v85, v86, v87, v88, &v351, v200);
    v284 = v351;
    v285 = ulistfmt_openForType();
    v286 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v285;
    if (v286)
      ulistfmt_close();
    if (v284)
    {
      if (*(_DWORD *)v284 == 1)
        WTF::fastFree((unint64_t)v284, v82, (uint64_t)v83, v84, v85, v86, v87, v88);
      else
        --*(_DWORD *)v284;
    }
    if (SLODWORD(v348[0]) >= 1)
    {
      v79 = "failed to initialize DurationFormat";
      v80 = a2;
      v81 = 36;
LABEL_60:
      JSC::throwTypeError(v80, &v346, (uint64_t)v79, v81);
    }
  }
LABEL_61:
  std::array<WTF::String,6ul>::~array(&v337, (WTF::AtomStringImpl *)v82, (uint64_t)v83, v84, v85, v86, v87, v88);
  v89 = v336;
  v336 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
LABEL_64:
  v90 = v335;
  v335 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
LABEL_67:
  v91 = v339;
  v339 = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
    {
      WTF::StringImpl::~StringImpl(v91, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
    }
    else
    {
      *(_DWORD *)v91 -= 2;
    }
  }
LABEL_70:
  std::array<std::optional<WTF::String>,6ul>::~array((uint64_t)v340, v22, v23, v24, v25, v26, v27, v28);
LABEL_71:
  if (v345)
  {
    v109 = v343;
    v110 = 8 * v345;
    do
    {
      v111 = *(WTF::StringImpl **)v109;
      *(_QWORD *)v109 = 0;
      if (v111)
      {
        if (*(_DWORD *)v111 == 2)
        {
          WTF::StringImpl::~StringImpl(v111, v13, v14, v15, v16, v17, v18, v19);
          WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
        }
        else
        {
          *(_DWORD *)v111 -= 2;
        }
      }
      v109 = (WTF *)((char *)v109 + 8);
      v110 -= 8;
    }
    while (v110);
  }
  v92 = v343;
  if (v343)
  {
    v343 = 0;
    v344 = 0;
    WTF::fastFree((unint64_t)v92, v13, v14, v15, v16, v17, v18, v19);
  }
}

uint64_t JSC::IntlDurationFormat::format(JSC::IntlDurationFormat *this, JSC::JSGlobalObject *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  uint64_t *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int8x16_t *v59;
  size_t v60;
  int8x16_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  WTF *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::AtomStringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  WTF *v117;
  int *v118;
  _WORD *v119;
  WTF::AtomStringImpl *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  WTF *v129;
  WTF *v130;
  WTF *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  WTF::StringImpl *v162;
  WTF *v163;
  uint64_t v164;
  _BYTE v165[64];
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  unsigned int v168;
  char v169;
  WTF *v170;
  int v171;
  uint64_t v172;
  WTF *v173;
  int v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  _OWORD v179[5];
  unint64_t v180;
  unsigned int v181;
  uint64_t v182;

  v182 = *((_QWORD *)a2 + 7);
  v8 = v182;
  v9 = a3[3];
  v179[2] = a3[2];
  v179[3] = v9;
  v179[4] = a3[4];
  v10 = a3[1];
  v179[0] = *a3;
  v179[1] = v10;
  JSC::collectElements((JSC *)&v180, a2, this, (double *)v179, a5, a6, a7, a8);
  if (*(_DWORD *)(v8 + 80))
  {
    v161 = *(_DWORD *)(v8 + 80);
    if ((v161 & 0x27) != 0 && (v161 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v8 + 16))
    {
      v127 = 0;
      v18 = v181;
      goto LABEL_104;
    }
  }
  v176 = &v178;
  v177 = 4;
  v18 = v181;
  if (!v181)
    goto LABEL_83;
  v19 = 0;
  v20 = v180;
  do
  {
    v166 = 0;
    v167 = 0;
    v168 = 0;
    v169 = 1;
    v21 = v20 + 32 * v19;
    v24 = *(WTF::StringImpl **)(v21 + 8);
    v23 = (uint64_t *)(v21 + 8);
    v22 = v24;
    if (v24)
      *(_DWORD *)v22 += 2;
    v166 = v22;
    v25 = *v23;
    if (v25)
      LODWORD(v25) = *(_DWORD *)(v25 + 4);
    v168 = v25;
    v26 = v19 + 1;
    if (v18 <= v19 + 1)
      goto LABEL_52;
    while (1)
    {
      v27 = v26;
      if (*(_BYTE *)(v20 + 32 * (v19 + 1)))
      {
        v27 = v19;
        goto LABEL_51;
      }
      v28 = v20 + 32 * (v19 + 1);
      v31 = *(_QWORD *)(v28 + 8);
      v30 = (uint64_t *)(v28 + 8);
      v29 = v31;
      if (!v168 && v167 == 0)
      {
        if (v29)
          *(_DWORD *)v29 += 2;
        v33 = v166;
        v166 = (WTF::StringImpl *)v29;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
          {
            WTF::StringImpl::~StringImpl(v33, v11, v12, v13, v14, v15, v16, v17);
            WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
          }
          else
          {
            *(_DWORD *)v33 -= 2;
          }
        }
        v34 = *v30;
        if (*v30)
          LODWORD(v34) = *(_DWORD *)(v34 + 4);
        v168 = v34;
      }
      else
      {
        if (!v29)
        {
          v59 = 0;
          v60 = 0;
LABEL_41:
          WTF::StringBuilder::append((uint64_t)&v166, v59, v60, v13, v14, v15, v16, v17);
          goto LABEL_23;
        }
        v59 = *(int8x16_t **)(v29 + 8);
        v60 = *(unsigned int *)(v29 + 4);
        if ((*(_BYTE *)(v29 + 16) & 4) != 0)
          goto LABEL_41;
        WTF::StringBuilder::append((uint64_t)&v166, v59, v60, v13, v14, v15, v16, v17);
      }
LABEL_23:
      v35 = v19 + 2;
      if (v18 <= v35)
        goto LABEL_51;
      if (*(_BYTE *)(v20 + 32 * (v19 + 2)) != 1)
        break;
      v36 = v20 + 32 * v35;
      v39 = *(_QWORD *)(v36 + 8);
      v38 = (uint64_t *)(v36 + 8);
      v37 = v39;
      if (!v168 && !v167)
      {
        if (v37)
          *(_DWORD *)v37 += 2;
        v40 = v166;
        v166 = (WTF::StringImpl *)v37;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
          {
            WTF::StringImpl::~StringImpl(v40, v11, v12, v13, v14, v15, v16, v17);
            WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
          }
          else
          {
            *(_DWORD *)v40 -= 2;
          }
        }
        v41 = *v38;
        if (*v38)
          LODWORD(v41) = *(_DWORD *)(v41 + 4);
        v168 = v41;
        goto LABEL_35;
      }
      if (v37)
      {
        v61 = *(int8x16_t **)(v37 + 8);
        v62 = *(unsigned int *)(v37 + 4);
        if ((*(_BYTE *)(v37 + 16) & 4) == 0)
        {
          WTF::StringBuilder::append((uint64_t)&v166, v61, v62, v13, v14, v15, v16, v17);
          goto LABEL_35;
        }
      }
      else
      {
        v61 = 0;
        v62 = 0;
      }
      WTF::StringBuilder::append((uint64_t)&v166, v61, v62, v13, v14, v15, v16, v17);
LABEL_35:
      v26 = v19 + 3;
      v42 = v19 + 3;
      v19 += 2;
      v27 = v35;
      if (v18 <= v42)
        goto LABEL_51;
    }
    v27 = v19 + 1;
LABEL_51:
    v22 = v166;
    v19 = v27;
LABEL_52:
    if (v22)
      goto LABEL_53;
    if ((v168 & 0x80000000) == 0 && v167 && *((_DWORD *)v167 + 1) > v168 + (v168 >> 2))
    {
      if ((*((_BYTE *)v167 + 16) & 4) != 0)
        WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v166, (WTF::AtomStringImpl *)v168, v12, v13, v14, v15, v16, v17);
      else
        WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v166, (WTF::AtomStringImpl *)v168, v12, v13, v14, v15, v16, v17);
      v101 = v166;
      v166 = v167;
      v167 = 0;
      if (v101)
      {
        if (*(_DWORD *)v101 == 2)
        {
          WTF::StringImpl::~StringImpl(v101, v94, v95, v96, v97, v98, v99, v100);
          WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
        }
        else
        {
          *(_DWORD *)v101 -= 2;
        }
      }
    }
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v166);
    v22 = v166;
    if (v166)
LABEL_53:
      *(_DWORD *)v22 += 2;
    v163 = v22;
    LODWORD(v63) = HIDWORD(v177);
    if (HIDWORD(v177) == (_DWORD)v177)
    {
      v64 = (uint64_t *)WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v176, HIDWORD(v177) + 1, (unint64_t)&v163);
      v63 = HIDWORD(v177);
      v65 = v176;
      v66 = *v64;
      *v64 = 0;
      v65[v63] = v66;
    }
    else
    {
      v163 = 0;
      v176[HIDWORD(v177)] = (uint64_t)v22;
    }
    HIDWORD(v177) = v63 + 1;
    v67 = v163;
    v163 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
      {
        WTF::StringImpl::~StringImpl(v67, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
      }
      else
      {
        *(_DWORD *)v67 -= 2;
      }
    }
    v68 = v167;
    v167 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
      {
        WTF::StringImpl::~StringImpl(v68, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
      }
      else
      {
        *(_DWORD *)v68 -= 2;
      }
    }
    v69 = v166;
    v166 = 0;
    if (v69)
    {
      if (*(_DWORD *)v69 == 2)
      {
        WTF::StringImpl::~StringImpl(v69, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
      }
      else
      {
        *(_DWORD *)v69 -= 2;
      }
    }
    ++v19;
  }
  while (v18 > v19);
LABEL_83:
  JSC::ListFormatInput::ListFormatInput((uint64_t)&v166, (uint64_t)&v176);
  v163 = (WTF *)v165;
  v164 = 0x2000000020;
  LODWORD(v162) = 0;
  v116 = ulistfmt_format();
  HIDWORD(v164) = v116;
  v117 = v163;
  if (v163)
  {
    if (v116)
    {
      if (v116 >= 0x7FFFFFF0)
      {
        __break(0xC471u);
        JUMPOUT(0x197E1E280);
      }
      v118 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v116 + 20));
      v119 = v118 + 5;
      *v118 = 2;
      v118[1] = v116;
      *((_QWORD *)v118 + 1) = v118 + 5;
      v118[4] = 0;
      if (v116 == 1)
        *v119 = *(_WORD *)v117;
      else
        memcpy(v119, v117, 2 * v116);
    }
    else
    {
      v118 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
  }
  else
  {
    v118 = 0;
  }
  v162 = (WTF::StringImpl *)v118;
  v127 = JSC::jsString(v8, (JSC::VM *)&v162, v110, v111, v112, v113, v114, v115);
  v128 = v162;
  v162 = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
    {
      WTF::StringImpl::~StringImpl(v128, v120, v121, v122, v123, v124, v125, v126);
      WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
    }
    else
    {
      *(_DWORD *)v128 -= 2;
    }
  }
  v129 = v163;
  if (v165 != (_BYTE *)v163 && v163)
  {
    v163 = 0;
    LODWORD(v164) = 0;
    WTF::fastFree((unint64_t)v129, v120, v121, v122, v123, v124, v125, v126);
  }
  v130 = v173;
  if (&v175 != (uint64_t *)v173 && v173)
  {
    v173 = 0;
    v174 = 0;
    WTF::fastFree((unint64_t)v130, v120, v121, v122, v123, v124, v125, v126);
  }
  v131 = v170;
  if (&v172 != (uint64_t *)v170 && v170)
  {
    v170 = 0;
    v171 = 0;
    WTF::fastFree((unint64_t)v131, v120, v121, v122, v123, v124, v125, v126);
  }
  WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v166, v120, v121, v122, v123, v124, v125, v126);
  WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v176, v132, v133, v134, v135, v136, v137, v138);
LABEL_104:
  v139 = v180;
  if (v18)
  {
    v140 = 32 * v18;
    v141 = (uint64_t *)(v180 + 24);
    do
    {
      v142 = *v141;
      *v141 = 0;
      if (v142)
        unumf_closeResult();
      v143 = (WTF::StringImpl *)*(v141 - 2);
      *(v141 - 2) = 0;
      if (v143)
      {
        if (*(_DWORD *)v143 == 2)
        {
          WTF::StringImpl::~StringImpl(v143, v11, v12, v13, v14, v15, v16, v17);
          WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
        }
        else
        {
          *(_DWORD *)v143 -= 2;
        }
      }
      v141 += 4;
      v140 -= 32;
    }
    while (v140);
  }
  if (v139)
    WTF::fastFree(v139, v11, v12, v13, v14, v15, v16, v17);
  return v127;
}

void JSC::collectElements(JSC *this, JSC::JSGlobalObject *a2, const JSC::IntlDurationFormat *a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char v10;
  unsigned __int8 v11;
  uint64_t v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unsigned int v26;
  char v27;
  WTF::AtomStringImpl *v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  _WORD *v37;
  uint64_t v38;
  _BOOL4 v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  WTF::StringImpl *v49;
  _DWORD *v50;
  _WORD *v51;
  int v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  __int128 v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  double v58;
  _BOOL4 v59;
  void *v60;
  uint64_t v61;
  int8x16_t *v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  int v70;
  WTF::StringImpl *v71;
  unsigned int v72;
  int8x16_t *v73;
  size_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  unint64_t v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  _BOOL4 v95;
  BOOL v96;
  BOOL v97;
  _BOOL4 v98;
  _BOOL4 v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  unint64_t v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  int v114;
  BOOL v115;
  int *v116;
  const JSC::IntlDurationFormat *v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  float v173;
  uint64_t v174;
  int8x16_t *v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  WTF::AtomStringImpl *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  BOOL v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t StringByKey;
  uint64_t v198;
  int v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t *v204;
  unint64_t v205;
  WTF::StringImpl *v206;
  uint64_t v207;
  uint64_t v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  BOOL v212;
  char v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  WTF::AtomStringImpl *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  WTF::StringImpl *v246;
  unint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  _WORD *v257;
  int v258;
  WTF::StringImpl *v259;
  unint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  int v269;
  int v270;
  int v271;
  unint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t v291;
  WTF::StringImpl *v292;
  unint64_t v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  WTF::StringImpl *v301;
  unint64_t v302;
  void *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  size_t v310;
  _WORD *v311;
  uint64_t v312;
  JSC::VMTraps *v313;
  uint64_t v315;
  WTF::StringImpl *v316;
  WTF::StringImpl *v317;
  int8x16_t *v318;
  WTF::StringImpl *v319;
  double v320;
  uint64_t v321;
  WTF::StringImpl *v322;
  uint64_t v323;
  int8x16_t v324;
  _QWORD *v325;
  double *v326;
  uint64_t v327;
  _QWORD *v328;
  WTF::StringImpl *v329;
  WTF::StringImpl *v330;
  unsigned int v331;
  char v332;
  double v333;
  unint64_t v334;
  uint64_t v335;
  const JSC::IntlDurationFormat *v336;
  _QWORD v337[2];

  v9 = 0;
  v10 = 0;
  v11 = 0;
  v315 = 0;
  v336 = a3;
  v337[0] = a2;
  v12 = *((_QWORD *)a2 + 7);
  v334 = 0;
  v335 = 0;
  v316 = 0;
  v313 = (JSC::VMTraps *)(v12 + 64);
  while (1)
  {
    v13 = *((_BYTE *)v336 + v9 + 53);
    v333 = a4[v9];
    v329 = 0;
    v330 = 0;
    v331 = 0;
    v332 = 1;
    v14 = (void *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v329, (WTF::AtomStringImpl *)0x15, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (v14)
      qmemcpy(v14, "rounding-mode-half-up", 21);
    if ((v11 - 6) > 2u)
    {
LABEL_13:
      v24 = 0;
      goto LABEL_14;
    }
    if (v11 == 6)
    {
      if ((*((_BYTE *)v336 + 60) & 0x7F) != 3)
        goto LABEL_13;
      v21 = v333 + a4[7] / 1000.0 + a4[8] / 1000000.0;
      v22 = a4[9] / 1000000000.0;
    }
    else
    {
      v23 = 61;
      if (v11 != 7)
        v23 = 62;
      if ((*((_BYTE *)v336 + v23) & 0x7F) != 3)
        goto LABEL_13;
      v21 = v333;
      if (v11 == 7)
      {
        v21 = v333 + a4[8] / 1000.0;
        v22 = a4[9] / 1000000.0;
      }
      else
      {
        v22 = a4[9] / 1000.0;
      }
    }
    v333 = v21 + v22;
    if ((v331 & 0x80000000) == 0)
    {
      v49 = v330;
      if ((v330 || (v49 = v329) != 0) && (*((_BYTE *)v49 + 16) & 4) == 0)
      {
        v50 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v329, (WTF::AtomStringImpl *)(v331 + 2), v15, v16, v17, v18, v19, v20);
        if (v50)
          *v50 = 3014688;
      }
      else
      {
        v51 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v329, (WTF::AtomStringImpl *)(v331 + 2), v15, v16, v17, v18, v19, v20);
        if (v51)
          *v51 = 11808;
      }
    }
    v52 = *((_DWORD *)v336 + 12);
    if (v52 == -1)
    {
      if ((v331 & 0x80000000) == 0)
      {
        v53 = v330;
        if ((v330 || (v53 = v329) != 0) && (*((_BYTE *)v53 + 16) & 4) == 0)
        {
          v54 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v329, (WTF::AtomStringImpl *)(v331 + 9), v15, v16, v17, v18, v19, v20);
          if (v54)
          {
            *(_QWORD *)&v55 = 0x23002300230023;
            *((_QWORD *)&v55 + 1) = 0x23002300230023;
            *(_OWORD *)v54 = v55;
            *(_WORD *)(v54 + 16) = 35;
          }
        }
        else
        {
          v151 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v329, (WTF::AtomStringImpl *)(v331 + 9), v15, v16, v17, v18, v19, v20);
          if (v151)
          {
            *(_BYTE *)(v151 + 8) = 35;
            *(_QWORD *)v151 = *(_QWORD *)"#########";
          }
        }
      }
      v24 = 1;
    }
    else
    {
      for (; v52; --v52)
      {
        v324.i8[0] = 48;
        if (v330 && ((v192 = v331, v331 < *((_DWORD *)v330 + 1)) ? (v193 = v329 == 0) : (v193 = 0), v193))
        {
          v194 = *((_DWORD *)v330 + 4);
          v195 = *((_QWORD *)v330 + 1);
          ++v331;
          if ((v194 & 4) != 0)
            *(_BYTE *)(v195 + v192) = 48;
          else
            *(_WORD *)(v195 + 2 * v192) = 48;
        }
        else
        {
          WTF::StringBuilder::append((uint64_t)&v329, &v324, 1uLL, v16, v17, v18, v19, v20);
        }
      }
      v24 = 1;
    }
LABEL_14:
    v25 = atomic_load(&WTF::ICU::version(void)::onceKey);
    if (v25 != -1)
    {
      v324.i64[0] = (uint64_t)&v327;
      v318 = &v324;
      std::__call_once(&WTF::ICU::version(void)::onceKey, &v318, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ICU::version(void)::$_0 &&>>);
    }
    v26 = v13 & 0x7F;
    if (WTF::ICU::version(void)::versions > 0x42u)
      v27 = 42;
    else
      v27 = 43;
    v324.i64[0] = (uint64_t)" integer-width/";
    v324.i32[2] = 15;
    LOBYTE(v318) = v27;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v329, (uint64_t)&v324, (char *)&v318, v16, v17, v18, v19, v20);
    if (v26 == 4)
    {
      if ((v331 & 0x80000000) == 0)
      {
        v29 = v330;
        if ((v330 || (v29 = v329) != 0) && (*((_BYTE *)v29 + 16) & 4) == 0)
        {
          v30 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v329, (WTF::AtomStringImpl *)(v331 + 2), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          if (v30)
            *v30 = 3145776;
        }
        else
        {
          v37 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v329, (WTF::AtomStringImpl *)(v331 + 2), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          if (v37)
            *v37 = 12336;
        }
      }
    }
    else
    {
      v324.i8[0] = 48;
      if (!v330 || (v31 = v331, v331 >= *((_DWORD *)v330 + 1)) || v329)
      {
        WTF::StringBuilder::append((uint64_t)&v329, &v324, 1uLL, (uint64_t)a4, a5, a6, a7, a8);
      }
      else
      {
        v32 = *((_DWORD *)v330 + 4);
        v33 = *((_QWORD *)v330 + 1);
        ++v331;
        if ((v32 & 4) != 0)
          *(_BYTE *)(v33 + v31) = 48;
        else
          *(_WORD *)(v33 + 2 * v31) = 48;
      }
    }
    if (v333 != 0.0)
    {
      v327 = v12;
      v328 = v337;
      if ((v10 & 1) == 0)
      {
        v10 = 0;
        goto LABEL_118;
      }
LABEL_38:
      if ((v331 & 0x80000000) == 0)
      {
        v35 = v330;
        if ((v330 || (v35 = v329) != 0) && (*((_BYTE *)v35 + 16) & 4) == 0)
        {
          v36 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v329, (WTF::AtomStringImpl *)(v331 + 3), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          if (v36)
          {
            *(_DWORD *)v36 = 2818080;
            *(_WORD *)(v36 + 4) = 95;
          }
        }
        else
        {
          v38 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v329, (WTF::AtomStringImpl *)(v331 + 3), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          if (v38)
          {
            *(_BYTE *)(v38 + 2) = 95;
            *(_WORD *)v38 = 11040;
          }
        }
      }
      goto LABEL_117;
    }
    if (v13 < 0 && v26 - 3 >= 2)
    {
      v34 = 0;
      goto LABEL_280;
    }
    v327 = v12;
    v328 = v337;
    if ((v10 & 1) != 0)
      goto LABEL_38;
    v39 = v315;
    if (HIDWORD(v315))
      goto LABEL_96;
    v39 = *a4 >= 0.0;
    if (*a4 < 0.0 || *a4 > 0.0)
      goto LABEL_96;
    v40 = a4[1];
    if (v40 > 0.0)
      v39 = 1;
    if (v40 < 0.0)
    {
      v39 = 0;
      goto LABEL_96;
    }
    if (v40 > 0.0)
      goto LABEL_96;
    v41 = a4[2];
    if (v41 > 0.0)
      v39 = 1;
    if (v41 < 0.0)
    {
      v39 = 0;
      goto LABEL_96;
    }
    if (v41 > 0.0)
      goto LABEL_96;
    v42 = a4[3];
    if (v42 > 0.0)
      v39 = 1;
    if (v42 < 0.0)
    {
      v39 = 0;
      goto LABEL_96;
    }
    if (v42 > 0.0)
      goto LABEL_96;
    v43 = a4[4];
    if (v43 > 0.0)
      v39 = 1;
    if (v43 < 0.0)
    {
      v39 = 0;
      goto LABEL_96;
    }
    if (v43 > 0.0)
      goto LABEL_96;
    v44 = a4[5];
    if (v44 > 0.0)
      v39 = 1;
    if (v44 < 0.0)
    {
      v39 = 0;
      goto LABEL_96;
    }
    if (v44 > 0.0)
      goto LABEL_96;
    v45 = a4[6];
    if (v45 > 0.0)
      v39 = 1;
    if (v45 < 0.0)
    {
      v39 = 0;
      goto LABEL_96;
    }
    if (v45 > 0.0)
      goto LABEL_96;
    v46 = a4[7];
    if (v46 > 0.0)
      v39 = 1;
    if (v46 < 0.0)
    {
      v39 = 0;
      goto LABEL_96;
    }
    if (v46 > 0.0)
      goto LABEL_96;
    v47 = a4[8];
    if (v47 > 0.0)
      v39 = 1;
    if (v47 < 0.0)
    {
      v39 = 0;
LABEL_96:
      if (v39)
      {
        v10 = 0;
        v315 = v39 | 0x100000000;
        goto LABEL_118;
      }
      v333 = -0.0;
      v315 = 0x100000000;
LABEL_117:
      v10 = 1;
      goto LABEL_118;
    }
    if (v47 > 0.0)
      goto LABEL_96;
    v10 = 0;
    v48 = a4[9];
    if (v48 > 0.0)
      v39 = 1;
    if (v48 < 0.0)
      v39 = 0;
    v315 = 0x100000002;
    if (v48 != 0.0)
      goto LABEL_96;
LABEL_118:
    v324.i64[0] = v12;
    v324.i64[1] = (uint64_t)&v336;
    v325 = v337;
    v326 = &v333;
    if (v26 >= 3)
    {
      if (v26 - 3 > 1)
        goto LABEL_278;
      v58 = a4[6];
      if ((*((_BYTE *)v336 + 60) & 0x7F) == 3)
        v58 = v58 + a4[7] / 1000.0 + a4[8] / 1000000.0 + a4[9] / 1000000000.0;
      v59 = a4[4] != 0.0 || *((char *)v336 + 57) >= 0;
      v95 = v58 != 0.0 || *((char *)v336 + 59) >= 0;
      v96 = v59 && v95 || a4[5] != 0.0 || *((char *)v336 + 58) >= 0;
      v97 = v11 == 5 && v96;
      if (v11 != 4)
      {
        LOBYTE(v59) = 0;
        v96 = 0;
      }
      if (v59 || v97)
      {
        if (v11 != 5)
          LOBYTE(v95) = 0;
        LOBYTE(v99) = v96 || v95;
      }
      else
      {
        if (v96)
          goto LABEL_215;
        v98 = v11 == 6 && v95;
        v99 = v11 == 5 && v95;
        if (!v98)
        {
          if (!v99)
          {
LABEL_278:
            v34 = 0;
            if (v333 != 0.0)
              v10 = 1;
            goto LABEL_280;
          }
LABEL_215:
          v116 = (int *)v316;
          if (v316)
          {
            LOBYTE(v318) = 0;
            BYTE1(v318) = v11;
          }
          else
          {
            v117 = v336;
            LODWORD(v323) = 0;
            v118 = ures_open();
            if ((int)v323 < 1)
            {
              v317 = (WTF::StringImpl *)ures_getByKey();
              if ((int)v323 < 1)
              {
                WTF::String::utf8((uint64_t *)v117 + 4, 0, v168, v169, v170, v171, v172, &v318, v173);
                v175 = v318;
                v176 = ures_getByKey();
                if (v175)
                {
                  if (v175->i32[0] == 1)
                  {
                    v245 = v176;
                    WTF::fastFree((unint64_t)v175, v177, v178, v179, v180, v181, v182, v183);
                    v176 = v245;
                  }
                  else
                  {
                    --v175->i32[0];
                  }
                }
                v312 = v176;
                if ((int)v323 < 1)
                {
                  v196 = ures_getByKey();
                  if ((int)v323 < 1 && (LODWORD(v318) = 0, StringByKey = ures_getStringByKey(), (int)v323 < 1))
                  {
                    if (StringByKey)
                    {
                      if ((_DWORD)v318)
                      {
                        v311 = (_WORD *)StringByKey;
                        if (v318 >= 0x7FFFFFF0)
                        {
                          __break(0xC471u);
                          return;
                        }
                        v310 = 2 * (int)v318;
                        v255 = (int)v318;
                        v256 = WTF::fastCompactMalloc((WTF *)(v310 + 20));
                        v257 = (_WORD *)(v256 + 20);
                        v258 = v255;
                        *(_DWORD *)v256 = 2;
                        *(_DWORD *)(v256 + 4) = v255;
                        *(_QWORD *)(v256 + 8) = v256 + 20;
                        v116 = (int *)v256;
                        *(_DWORD *)(v256 + 16) = 0;
                        if (v258 == 1)
                          *v257 = *v311;
                        else
                          memcpy(v257, v311, v310);
                      }
                      else
                      {
                        v116 = &WTF::StringImpl::s_emptyAtomString;
                        WTF::StringImpl::s_emptyAtomString += 2;
                      }
                    }
                    else
                    {
                      v116 = 0;
                    }
                  }
                  else
                  {
                    v198 = WTF::fastCompactMalloc((WTF *)0x20);
                    *(_QWORD *)v198 = 0x100000002;
                    *(_QWORD *)(v198 + 8) = ":";
                    v116 = (int *)v198;
                    *(_DWORD *)(v198 + 16) = 4;
                  }
                  if (v196)
                    ures_close();
                }
                else
                {
                  v184 = WTF::fastCompactMalloc((WTF *)0x20);
                  *(_QWORD *)v184 = 0x100000002;
                  *(_QWORD *)(v184 + 8) = ":";
                  v116 = (int *)v184;
                  *(_DWORD *)(v184 + 16) = 4;
                }
                if (v312)
                  ures_close();
              }
              else
              {
                v174 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v174 = 0x100000002;
                *(_QWORD *)(v174 + 8) = ":";
                v116 = (int *)v174;
                *(_DWORD *)(v174 + 16) = 4;
              }
              if (v317)
                ures_close();
            }
            else
            {
              v116 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v116 = 0x100000002;
              *((_QWORD *)v116 + 1) = ":";
              v116[4] = 4;
            }
            if (v118)
              ures_close();
            LOBYTE(v318) = 0;
            BYTE1(v318) = v11;
            if (!v116)
              goto LABEL_270;
          }
          *v116 += 2;
LABEL_270:
          v319 = (WTF::StringImpl *)v116;
          v320 = v333;
          v321 = 0;
          v199 = HIDWORD(v335);
          if (HIDWORD(v335) == (_DWORD)v335)
          {
            v200 = WTF::Vector<JSC::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v334, HIDWORD(v335) + 1, (unint64_t)&v318);
            v199 = HIDWORD(v335);
            v201 = v334 + 32 * HIDWORD(v335);
            *(_WORD *)v201 = *(_WORD *)v200;
            v202 = *(_QWORD *)(v200 + 8);
            *(_QWORD *)(v200 + 8) = 0;
            *(_QWORD *)(v201 + 8) = v202;
            *(_QWORD *)(v201 + 16) = *(_QWORD *)(v200 + 16);
            v203 = (uint64_t *)(v201 + 24);
            v204 = (uint64_t *)(v200 + 24);
          }
          else
          {
            v205 = v334 + 32 * HIDWORD(v335);
            *(_WORD *)v205 = (_WORD)v318;
            v206 = v319;
            v319 = 0;
            *(_QWORD *)(v205 + 8) = v206;
            *(double *)(v205 + 16) = v320;
            v203 = (uint64_t *)(v205 + 24);
            v204 = &v321;
          }
          v207 = *v204;
          *v204 = 0;
          *v203 = v207;
          HIDWORD(v335) = v199 + 1;
          v208 = v321;
          v321 = 0;
          if (v208)
            unumf_closeResult();
          v316 = (WTF::StringImpl *)v116;
          v209 = v319;
          v319 = 0;
          if (v209)
          {
            if (*(_DWORD *)v209 == 2)
            {
              WTF::StringImpl::~StringImpl(v209, v28, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v230, v231, v232, v233, v234, v235, v236, v237);
            }
            else
            {
              *(_DWORD *)v209 -= 2;
            }
          }
          goto LABEL_278;
        }
      }
      v100 = v329;
      if (v329)
        goto LABEL_196;
      if ((v331 & 0x80000000) == 0 && v330 && *((_DWORD *)v330 + 1) > v331 + (v331 >> 2))
      {
        if ((*((_BYTE *)v330 + 16) & 4) != 0)
          WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v329, (WTF::AtomStringImpl *)v331, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        else
          WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v329, (WTF::AtomStringImpl *)v331, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v259 = v329;
        v329 = v330;
        v330 = 0;
        if (v259)
        {
          if (*(_DWORD *)v259 == 2)
          {
            WTF::StringImpl::~StringImpl(v259, v238, v239, v240, v241, v242, v243, v244);
            WTF::fastFree(v260, v261, v262, v263, v264, v265, v266, v267);
          }
          else
          {
            *(_DWORD *)v259 -= 2;
          }
        }
      }
      WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v329);
      v100 = v329;
      if (v329)
      {
LABEL_196:
        *(_DWORD *)v100 += 2;
        JSC::collectElements(JSC::JSGlobalObject *,JSC::IntlDurationFormat const*,JSC::ISO8601::Duration)::$_1::operator()(&v323, v324.i64, (uint64_t)v100);
        if (*(_DWORD *)v100 == 2)
        {
          WTF::StringImpl::~StringImpl(v100, v28, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
        }
        else
        {
          *(_DWORD *)v100 -= 2;
        }
      }
      else
      {
        JSC::collectElements(JSC::JSGlobalObject *,JSC::IntlDurationFormat const*,JSC::ISO8601::Duration)::$_1::operator()(&v323, v324.i64, 0);
      }
      if (!*(_DWORD *)(v12 + 80))
        goto LABEL_199;
      v270 = *(_DWORD *)(v12 + 80);
      if ((v270 & 0x27) != 0 && (v270 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v313, 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v12 + 16))
      {
        *(_QWORD *)this = 0;
        *((_QWORD *)this + 1) = 0;
        v114 = 1;
        v101 = v323;
      }
      else
      {
LABEL_199:
        v101 = v323;
        JSC::collectElements(JSC::JSGlobalObject *,JSC::IntlDurationFormat const*,JSC::ISO8601::Duration)::$_0::operator()((int **)&v322, (uint64_t)&v327);
        if (!*(_DWORD *)(v12 + 80))
          goto LABEL_200;
        v271 = *(_DWORD *)(v12 + 80);
        if ((v271 & 0x27) != 0 && (v271 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v313, 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v12 + 16))
        {
          *(_QWORD *)this = 0;
          *((_QWORD *)this + 1) = 0;
          if (v322)
          {
            if (*(_DWORD *)v322 == 2)
            {
              WTF::StringImpl::~StringImpl(v322, v28, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v280, v281, v282, v283, v284, v285, v286, v287);
            }
            else
            {
              *(_DWORD *)v322 -= 2;
            }
          }
          v114 = 1;
        }
        else
        {
LABEL_200:
          LOBYTE(v318) = 1;
          BYTE1(v318) = v11;
          v102 = v322;
          v322 = 0;
          v323 = 0;
          v319 = v102;
          v320 = v333;
          v321 = v101;
          v103 = HIDWORD(v335);
          if (HIDWORD(v335) == (_DWORD)v335)
          {
            v104 = WTF::Vector<JSC::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v334, HIDWORD(v335) + 1, (unint64_t)&v318);
            v103 = HIDWORD(v335);
            v105 = v334 + 32 * HIDWORD(v335);
            *(_WORD *)v105 = *(_WORD *)v104;
            v106 = *(_QWORD *)(v104 + 8);
            *(_QWORD *)(v104 + 8) = 0;
            *(_QWORD *)(v105 + 8) = v106;
            *(_QWORD *)(v105 + 16) = *(_QWORD *)(v104 + 16);
            v107 = (uint64_t *)(v105 + 24);
            v108 = (uint64_t *)(v104 + 24);
          }
          else
          {
            v109 = v334 + 32 * HIDWORD(v335);
            *(_WORD *)v109 = (_WORD)v318;
            v110 = v319;
            v319 = 0;
            *(_QWORD *)(v109 + 8) = v110;
            *(double *)(v109 + 16) = v320;
            v107 = (uint64_t *)(v109 + 24);
            v108 = &v321;
          }
          v111 = *v108;
          *v108 = 0;
          *v107 = v111;
          HIDWORD(v335) = v103 + 1;
          v112 = v321;
          v321 = 0;
          if (v112)
            unumf_closeResult();
          v113 = v319;
          v319 = 0;
          if (v113)
          {
            if (*(_DWORD *)v113 == 2)
            {
              WTF::StringImpl::~StringImpl(v113, v28, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
            }
            else
            {
              *(_DWORD *)v113 -= 2;
            }
          }
          v114 = 0;
          v101 = 0;
        }
      }
      v323 = 0;
      if (v101)
        unumf_closeResult();
      if (v114)
        v115 = 0;
      else
        v115 = v99;
      if (!v115)
      {
        if (v114)
        {
          v34 = 1;
          goto LABEL_280;
        }
        goto LABEL_278;
      }
      goto LABEL_215;
    }
    if ((v331 & 0x80000000) == 0)
    {
      v56 = v330;
      if ((v330 || (v56 = v329) != 0) && (*((_BYTE *)v56 + 16) & 4) == 0)
      {
        v57 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v329, (WTF::AtomStringImpl *)(v331 + 23), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (v57)
        {
          *(_OWORD *)v57 = xmmword_199124AC0;
          *(_OWORD *)(v57 + 16) = xmmword_199124AD0;
          *(_QWORD *)(v57 + 32) = 0x69007400610072;
          *(_DWORD *)(v57 + 40) = 7209071;
          *(_WORD *)(v57 + 44) = 45;
        }
      }
      else
      {
        v60 = (void *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v329, (WTF::AtomStringImpl *)(v331 + 23), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (v60)
          qmemcpy(v60, " measure-unit/duration-", 23);
      }
    }
    v61 = JSC::temporalUnitSingularPropertyName(v12, v11);
    v69 = (WTF::StringImpl *)v61;
    if (!v61)
    {
      v62 = 0;
      if (v331)
      {
        v63 = 0;
      }
      else
      {
        v63 = 0;
        if (!v330)
          goto LABEL_136;
      }
LABEL_303:
      WTF::StringBuilder::append((uint64_t)&v329, v62, v63, v64, v65, v66, v67, v68);
      if (!v69)
        goto LABEL_144;
      goto LABEL_142;
    }
    v70 = *(_DWORD *)v61;
    *(_DWORD *)v61 += 2;
    if (!v331 && !v330)
    {
      *(_DWORD *)v61 = v70 + 4;
LABEL_136:
      v71 = v329;
      v329 = v69;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2)
        {
          WTF::StringImpl::~StringImpl(v71, (WTF::AtomStringImpl *)v62, v63, v64, v65, v66, v67, v68);
          WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
          if (v69)
            goto LABEL_140;
          goto LABEL_225;
        }
        *(_DWORD *)v71 -= 2;
      }
      if (v69)
      {
LABEL_140:
        v72 = *((_DWORD *)v69 + 1);
        goto LABEL_141;
      }
LABEL_225:
      v72 = 0;
LABEL_141:
      v331 = v72;
      if (!v69)
        goto LABEL_144;
      goto LABEL_142;
    }
    v62 = *(int8x16_t **)(v61 + 8);
    v63 = *(unsigned int *)(v61 + 4);
    if ((*(_BYTE *)(v61 + 16) & 4) != 0)
      goto LABEL_303;
    WTF::StringBuilder::append((uint64_t)&v329, v62, v63, v64, v65, v66, v67, v68);
LABEL_142:
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, (WTF::AtomStringImpl *)v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
LABEL_144:
    if (v26)
    {
      if (v26 == 1)
      {
        v73 = (int8x16_t *)" unit-width-short";
        v74 = 17;
      }
      else
      {
        v73 = (int8x16_t *)" unit-width-narrow";
        v74 = 18;
      }
    }
    else
    {
      v73 = (int8x16_t *)" unit-width-full-name";
      v74 = 21;
    }
    WTF::StringBuilder::append((uint64_t)&v329, v73, v74, v64, v65, v66, v67, v68);
    v81 = v329;
    if (v329)
      goto LABEL_151;
    if ((v331 & 0x80000000) == 0 && v330 && *((_DWORD *)v330 + 1) > v331 + (v331 >> 2))
    {
      if ((*((_BYTE *)v330 + 16) & 4) != 0)
        WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v329, (WTF::AtomStringImpl *)v331, v75, v76, v77, v78, v79, v80);
      else
        WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v329, (WTF::AtomStringImpl *)v331, v75, v76, v77, v78, v79, v80);
      v246 = v329;
      v329 = v330;
      v330 = 0;
      if (v246)
      {
        if (*(_DWORD *)v246 == 2)
        {
          WTF::StringImpl::~StringImpl(v246, v185, v186, v187, v188, v189, v190, v191);
          WTF::fastFree(v247, v248, v249, v250, v251, v252, v253, v254);
        }
        else
        {
          *(_DWORD *)v246 -= 2;
        }
      }
    }
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v329);
    v81 = v329;
    if (v329)
    {
LABEL_151:
      *(_DWORD *)v81 += 2;
      JSC::collectElements(JSC::JSGlobalObject *,JSC::IntlDurationFormat const*,JSC::ISO8601::Duration)::$_1::operator()(&v323, v324.i64, (uint64_t)v81);
      if (*(_DWORD *)v81 == 2)
      {
        WTF::StringImpl::~StringImpl(v81, v28, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
      }
      else
      {
        *(_DWORD *)v81 -= 2;
      }
    }
    else
    {
      JSC::collectElements(JSC::JSGlobalObject *,JSC::IntlDurationFormat const*,JSC::ISO8601::Duration)::$_1::operator()(&v323, v324.i64, 0);
    }
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_154;
    v268 = *(_DWORD *)(v12 + 80);
    if ((v268 & 0x27) != 0 && (v268 & 0x20) == 0)
      JSC::VMTraps::handleTraps(v313, 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
    {
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      v34 = 1;
      v82 = v323;
    }
    else
    {
LABEL_154:
      v82 = v323;
      JSC::collectElements(JSC::JSGlobalObject *,JSC::IntlDurationFormat const*,JSC::ISO8601::Duration)::$_0::operator()((int **)&v322, (uint64_t)&v327);
      if (!*(_DWORD *)(v12 + 80))
        goto LABEL_155;
      v269 = *(_DWORD *)(v12 + 80);
      if ((v269 & 0x27) != 0 && (v269 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v313, 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v12 + 16))
      {
        *(_QWORD *)this = 0;
        *((_QWORD *)this + 1) = 0;
        if (v322)
        {
          if (*(_DWORD *)v322 == 2)
          {
            WTF::StringImpl::~StringImpl(v322, v28, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v272, v273, v274, v275, v276, v277, v278, v279);
          }
          else
          {
            *(_DWORD *)v322 -= 2;
          }
        }
        v34 = 1;
      }
      else
      {
LABEL_155:
        LOBYTE(v318) = 1;
        BYTE1(v318) = v11;
        v83 = v322;
        v322 = 0;
        v323 = 0;
        v319 = v83;
        v320 = v333;
        v321 = v82;
        v84 = HIDWORD(v335);
        if (HIDWORD(v335) == (_DWORD)v335)
        {
          v85 = WTF::Vector<JSC::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v334, HIDWORD(v335) + 1, (unint64_t)&v318);
          v84 = HIDWORD(v335);
          v86 = v334 + 32 * HIDWORD(v335);
          *(_WORD *)v86 = *(_WORD *)v85;
          v87 = *(_QWORD *)(v85 + 8);
          *(_QWORD *)(v85 + 8) = 0;
          *(_QWORD *)(v86 + 8) = v87;
          *(_QWORD *)(v86 + 16) = *(_QWORD *)(v85 + 16);
          v88 = (uint64_t *)(v86 + 24);
          v89 = (uint64_t *)(v85 + 24);
        }
        else
        {
          v90 = v334 + 32 * HIDWORD(v335);
          *(_WORD *)v90 = (_WORD)v318;
          v91 = v319;
          v319 = 0;
          *(_QWORD *)(v90 + 8) = v91;
          *(double *)(v90 + 16) = v320;
          v88 = (uint64_t *)(v90 + 24);
          v89 = &v321;
        }
        v92 = *v89;
        *v89 = 0;
        *v88 = v92;
        HIDWORD(v335) = v84 + 1;
        v93 = v321;
        v321 = 0;
        if (v93)
          unumf_closeResult();
        v94 = v319;
        v319 = 0;
        if (v94)
        {
          if (*(_DWORD *)v94 == 2)
          {
            WTF::StringImpl::~StringImpl(v94, v28, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
          }
          else
          {
            *(_DWORD *)v94 -= 2;
          }
        }
        v82 = 0;
        v34 = 9;
      }
    }
    v323 = 0;
    if (v82)
      unumf_closeResult();
    if (v34 == 9)
      goto LABEL_278;
LABEL_280:
    v210 = v330;
    v330 = 0;
    if (v210)
    {
      if (*(_DWORD *)v210 == 2)
      {
        WTF::StringImpl::~StringImpl(v210, v28, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v214, v215, v216, v217, v218, v219, v220, v221);
      }
      else
      {
        *(_DWORD *)v210 -= 2;
      }
    }
    v211 = v329;
    v329 = 0;
    if (v211)
      break;
LABEL_286:
    if (v34)
      goto LABEL_362;
LABEL_287:
    v212 = v9++ > 8;
    ++v11;
    if (v212)
      v213 = 1;
    else
      v213 = v24;
    if ((v213 & 1) != 0)
    {
      *(_QWORD *)this = v334;
      *((_QWORD *)this + 1) = v335;
      v301 = v316;
      goto LABEL_374;
    }
  }
  if (*(_DWORD *)v211 != 2)
  {
    *(_DWORD *)v211 -= 2;
    goto LABEL_286;
  }
  WTF::StringImpl::~StringImpl(v211, v28, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  WTF::fastFree(v222, v223, v224, v225, v226, v227, v228, v229);
  if (!v34)
    goto LABEL_287;
LABEL_362:
  v288 = v334;
  v301 = v316;
  if (HIDWORD(v335))
  {
    v289 = 32 * HIDWORD(v335);
    v290 = (uint64_t *)(v334 + 24);
    do
    {
      v291 = *v290;
      *v290 = 0;
      if (v291)
        unumf_closeResult();
      v292 = (WTF::StringImpl *)*(v290 - 2);
      *(v290 - 2) = 0;
      if (v292)
      {
        if (*(_DWORD *)v292 == 2)
        {
          WTF::StringImpl::~StringImpl(v292, v28, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v293, v294, v295, v296, v297, v298, v299, v300);
        }
        else
        {
          *(_DWORD *)v292 -= 2;
        }
      }
      v290 += 4;
      v289 -= 32;
    }
    while (v289);
  }
  if (v288)
    WTF::fastFree(v288, v28, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_374:
  if (v301)
  {
    if (*(_DWORD *)v301 == 2)
    {
      WTF::StringImpl::~StringImpl(v301, v28, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v302, v303, v304, v305, v306, v307, v308, v309);
    }
    else
    {
      *(_DWORD *)v301 -= 2;
    }
  }
}

JSC::Exception *JSC::IntlDurationFormat::formatToParts(JSC::IntlDurationFormat *this, JSC::JSGlobalObject *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t StatusReg;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  _DWORD **v49;
  uint64_t *v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  WTF::StringImpl *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int8x16_t *v65;
  unint64_t v66;
  WTF::StringImpl *v67;
  WTF::AtomStringImpl *v68;
  WTF::AtomStringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  int v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  int v98;
  int v99;
  char *v100;
  char *v101;
  WTF *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _WORD *v118;
  _WORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  WTF *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  const WTF::String *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  WTF *v173;
  WTF *v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  WTF *v182;
  WTF *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  WTF::StringImpl *v199;
  unint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __n128 v214;
  int v215;
  unint64_t v216;
  JSC::VM *v217;
  unint64_t v218;
  JSC::JSGlobalObject *v219;
  JSC::Exception *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  WTF::AtomStringImpl *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  WTF::StringImpl *v236;
  char Position;
  JSC::JSGlobalObject *v238;
  unint64_t OutOfMemoryError;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  double v245;
  JSC::Exception *v246;
  unsigned int i;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  JSC::VM **v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  __n128 v268;
  JSC::VM *v269;
  int v270;
  BOOL v271;
  int v272;
  WTF::StringImpl *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  WTF::AtomStringImpl *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  WTF::StringImpl *v288;
  JSC::VM *v289;
  unint64_t v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  int v300;
  int v301;
  unint64_t v302;
  void *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  JSC::JSArray *v310;
  JSC::VM *v311;
  WTF *v312;
  uint64_t v313;
  _WORD v314[4];
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  WTF *v318;
  int v319;
  uint64_t v320;
  WTF *v321;
  int v322;
  uint64_t v323;
  WTF::StringImpl *v324;
  WTF::StringImpl *v325;
  unsigned int v326;
  char v327;
  WTF *v328;
  uint64_t v329;
  _BYTE v330[192];
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  _OWORD v334[5];
  unint64_t v335;
  unsigned int v336;
  uint64_t v337;
  JSC::VM **v338;
  WTF::StringImpl *v339;
  uint64_t v340;
  int v341;
  JSC::VM *v342[3];

  v337 = *((_QWORD *)a2 + 7);
  v8 = v337;
  v338 = (JSC::VM **)a2;
  v9 = a3[3];
  v334[2] = a3[2];
  v334[3] = v9;
  v334[4] = a3[4];
  v10 = a3[1];
  v334[0] = *a3;
  v334[1] = v10;
  JSC::collectElements((JSC *)&v335, a2, this, (double *)v334, a5, a6, a7, a8);
  if (*(_DWORD *)(v8 + 80))
  {
    v301 = *(_DWORD *)(v8 + 80);
    if ((v301 & 0x27) != 0 && (v301 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v8 + 16))
    {
      v220 = 0;
      goto LABEL_182;
    }
  }
  v310 = (JSC::JSArray *)v8;
  v331 = &v333;
  v332 = 4;
  v328 = (WTF *)v330;
  v329 = 4;
  v18 = v336;
  if (v336)
  {
    v19 = 0;
    v20 = v335;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v312 = (WTF *)v314;
      v313 = 1;
      v22 = v20 + 32 * v19;
      v314[0] = *(_WORD *)v22;
      v23 = *(_QWORD *)(v22 + 8);
      *(_QWORD *)(v22 + 8) = 0;
      v315 = v23;
      v316 = *(_QWORD *)(v22 + 16);
      v24 = *(_QWORD *)(v22 + 24);
      *(_QWORD *)(v22 + 24) = 0;
      v317 = v24;
      HIDWORD(v313) = 1;
      v25 = v19 + 1;
      if (v18 <= v19 + 1)
        break;
      LODWORD(v26) = 1;
      while (1)
      {
        v27 = v19 + 1;
        v28 = (_BYTE *)(v20 + 32 * v27);
        if (*v28)
        {
          LODWORD(v38) = v19;
          goto LABEL_21;
        }
        if ((_DWORD)v26 == (_DWORD)v313)
        {
          v29 = WTF::Vector<JSC::Element,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v312, v26 + 1, (unint64_t)v28, v13, v14, v15, v16, v17);
          v30 = (char *)v312 + 32 * HIDWORD(v313);
          *(_WORD *)v30 = *(_WORD *)v29;
          v31 = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          *((_QWORD *)v30 + 1) = v31;
          *((_QWORD *)v30 + 2) = *(_QWORD *)(v29 + 16);
          v32 = v30 + 24;
          v33 = (uint64_t *)(v29 + 24);
        }
        else
        {
          v34 = (char *)v312 + 32 * v26;
          *(_WORD *)v34 = *(_WORD *)v28;
          v35 = (_QWORD *)(v20 + 32 * v27);
          v36 = v35[1];
          v35[1] = 0;
          *((_QWORD *)v34 + 1) = v36;
          *((_QWORD *)v34 + 2) = v35[2];
          v32 = v34 + 24;
          v33 = v35 + 3;
        }
        v37 = *v33;
        *v33 = 0;
        *v32 = v37;
        v26 = (char *)++HIDWORD(v313);
        v38 = v19 + 2;
        if (v18 <= v38)
        {
          LODWORD(v38) = v25;
          goto LABEL_21;
        }
        v28 = (_BYTE *)(v20 + 32 * v38);
        if (*v28 != 1)
          break;
        if ((_DWORD)v26 == (_DWORD)v313)
        {
          v39 = WTF::Vector<JSC::Element,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v312, (unint64_t)(v26 + 1), (unint64_t)v28, v13, v14, v15, v16, v17);
          v40 = (char *)v312 + 32 * HIDWORD(v313);
          *(_WORD *)v40 = *(_WORD *)v39;
          v41 = *(_QWORD *)(v39 + 8);
          *(_QWORD *)(v39 + 8) = 0;
          *((_QWORD *)v40 + 1) = v41;
          *((_QWORD *)v40 + 2) = *(_QWORD *)(v39 + 16);
          v26 = v40 + 24;
          v42 = (uint64_t *)(v39 + 24);
        }
        else
        {
          v43 = (char *)v312 + 32 * (_QWORD)v26;
          *(_WORD *)v43 = *(_WORD *)v28;
          v44 = (_QWORD *)(v20 + 32 * v38);
          v45 = v44[1];
          v44[1] = 0;
          *((_QWORD *)v43 + 1) = v45;
          *((_QWORD *)v43 + 2) = v44[2];
          v26 = v43 + 24;
          v42 = v44 + 3;
        }
        v46 = *v42;
        *v42 = 0;
        *(_QWORD *)v26 = v46;
        LODWORD(v26) = ++HIDWORD(v313);
        v25 = v19 + 3;
        v47 = v19 + 3;
        v19 += 2;
        if (v18 <= v47)
          goto LABEL_21;
      }
      LODWORD(v38) = v19 + 1;
LABEL_21:
      if ((_DWORD)v26 == 1)
        goto LABEL_22;
      v324 = 0;
      v325 = 0;
      v326 = 0;
      v327 = 1;
      if ((_DWORD)v26)
      {
        v52 = 32 * v26;
        v53 = (uint64_t *)((char *)v312 + 8);
        while (1)
        {
          v54 = *v53;
          if (!v326 && v325 == 0)
            break;
          if (v54)
          {
            v65 = *(int8x16_t **)(v54 + 8);
            v66 = *(unsigned int *)(v54 + 4);
            if ((*(_BYTE *)(v54 + 16) & 4) == 0)
            {
              WTF::StringBuilder::append((uint64_t)&v324, v65, v66, v13, v14, v15, v16, v17);
              goto LABEL_43;
            }
          }
          else
          {
            v65 = 0;
            v66 = 0;
          }
          WTF::StringBuilder::append((uint64_t)&v324, v65, v66, v13, v14, v15, v16, v17);
LABEL_43:
          v53 += 4;
          v52 -= 32;
          if (!v52)
          {
            v67 = v324;
            if (!v324)
            {
              v68 = (WTF::AtomStringImpl *)v326;
              if ((v326 & 0x80000000) != 0)
                goto LABEL_65;
              goto LABEL_56;
            }
            goto LABEL_66;
          }
        }
        if (v54)
          *(_DWORD *)v54 += 2;
        v56 = v324;
        v324 = (WTF::StringImpl *)v54;
        if (v56)
        {
          if (*(_DWORD *)v56 != 2)
          {
            *(_DWORD *)v56 -= 2;
            goto LABEL_40;
          }
          WTF::StringImpl::~StringImpl(v56, v11, (uint64_t)v28, v13, v14, v15, v16, v17);
          WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
          v54 = *v53;
          if (!*v53)
          {
LABEL_42:
            v326 = v54;
            goto LABEL_43;
          }
        }
        else
        {
LABEL_40:
          if (!v54)
            goto LABEL_42;
        }
        LODWORD(v54) = *(_DWORD *)(v54 + 4);
        goto LABEL_42;
      }
      v68 = 0;
LABEL_56:
      if (v325 && *((_DWORD *)v325 + 1) > v68 + (v68 >> 2))
      {
        if ((*((_BYTE *)v325 + 16) & 4) != 0)
          WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v324, v68, (uint64_t)v28, v13, v14, v15, v16, v17);
        else
          WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v324, v68, (uint64_t)v28, v13, v14, v15, v16, v17);
        v76 = v324;
        v324 = v325;
        v325 = 0;
        if (v76)
        {
          if (*(_DWORD *)v76 == 2)
          {
            WTF::StringImpl::~StringImpl(v76, v69, v70, v71, v72, v73, v74, v75);
            WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
          }
          else
          {
            *(_DWORD *)v76 -= 2;
          }
        }
      }
LABEL_65:
      WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v324);
      v67 = v324;
      if (v324)
LABEL_66:
        *(_DWORD *)v67 += 2;
      v342[0] = v67;
      LODWORD(v85) = HIDWORD(v332);
      if (HIDWORD(v332) == (_DWORD)v332)
      {
        v86 = (uint64_t *)WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v331, HIDWORD(v332) + 1, (unint64_t)v342);
        v85 = HIDWORD(v332);
        v87 = v331;
        v88 = *v86;
        *v86 = 0;
        v87[v85] = v88;
      }
      else
      {
        v342[0] = 0;
        v331[HIDWORD(v332)] = (uint64_t)v67;
      }
      HIDWORD(v332) = v85 + 1;
      v89 = v342[0];
      v342[0] = 0;
      if (v89)
      {
        if (*(_DWORD *)v89 == 2)
        {
          WTF::StringImpl::~StringImpl(v89, v11, (uint64_t)v28, v13, v14, v15, v16, v17);
          WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
        }
        else
        {
          *(_DWORD *)v89 -= 2;
        }
      }
      v90 = v325;
      v325 = 0;
      if (v90)
      {
        if (*(_DWORD *)v90 == 2)
        {
          WTF::StringImpl::~StringImpl(v90, v11, (uint64_t)v28, v13, v14, v15, v16, v17);
          WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
        }
        else
        {
          *(_DWORD *)v90 -= 2;
        }
      }
      v91 = v324;
      v324 = 0;
      if (v91)
      {
        if (*(_DWORD *)v91 == 2)
        {
          WTF::StringImpl::~StringImpl(v91, v11, (uint64_t)v28, v13, v14, v15, v16, v17);
          WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
        }
        else
        {
          *(_DWORD *)v91 -= 2;
        }
      }
LABEL_79:
      v92 = HIDWORD(v329);
      if (HIDWORD(v329) == (_DWORD)v329)
      {
        v93 = WTF::Vector<WTF::Vector<JSC::Element,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v328, HIDWORD(v329) + 1, (unint64_t)&v312, v13, v14, v15, v16, v17);
        v94 = v93;
        v95 = (char *)v328 + 48 * HIDWORD(v329);
        v96 = v95 + 16;
        *(_QWORD *)v95 = v95 + 16;
        *((_QWORD *)v95 + 1) = 1;
        v97 = *(_QWORD *)v93;
        if (*(char **)v93 == v93 + 16)
        {
          v104 = *((unsigned int *)v93 + 3);
          if ((_DWORD)v104)
          {
            v105 = v97 + 32 * v104;
            do
            {
              *(_WORD *)v96 = *(_WORD *)v97;
              v106 = *(_QWORD *)(v97 + 8);
              *(_QWORD *)(v97 + 8) = 0;
              *((_QWORD *)v96 + 1) = v106;
              *((_QWORD *)v96 + 2) = *(_QWORD *)(v97 + 16);
              v107 = *(_QWORD *)(v97 + 24);
              *(_QWORD *)(v97 + 24) = 0;
              *((_QWORD *)v96 + 3) = v107;
              v108 = *(_QWORD *)(v97 + 24);
              *(_QWORD *)(v97 + 24) = 0;
              if (v108)
                unumf_closeResult();
              v109 = *(WTF::StringImpl **)(v97 + 8);
              *(_QWORD *)(v97 + 8) = 0;
              if (v109)
              {
                if (*(_DWORD *)v109 == 2)
                {
                  WTF::StringImpl::~StringImpl(v109, v11, (uint64_t)v28, v13, v14, v15, v16, v17);
                  WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
                }
                else
                {
                  *(_DWORD *)v109 -= 2;
                }
              }
              v97 += 32;
              v96 += 32;
            }
            while (v97 != v105);
          }
        }
        else
        {
          *(_QWORD *)v93 = v93 + 16;
          *(_QWORD *)v95 = v97;
          v98 = *((_DWORD *)v93 + 2);
          *((_DWORD *)v93 + 2) = 1;
          *((_DWORD *)v95 + 2) = v98;
        }
        v99 = *((_DWORD *)v94 + 3);
        *((_DWORD *)v94 + 3) = 0;
        *((_DWORD *)v95 + 3) = v99;
        v92 = HIDWORD(v329);
      }
      else
      {
        v100 = (char *)v328 + 48 * HIDWORD(v329);
        v101 = v100 + 16;
        *(_QWORD *)v100 = v100 + 16;
        *((_QWORD *)v100 + 1) = 1;
        v102 = v312;
        if (v312 == (WTF *)v314)
        {
          if (HIDWORD(v313))
          {
            v118 = &v314[16 * HIDWORD(v313)];
            v119 = v314;
            do
            {
              *(_WORD *)v101 = *v119;
              v120 = *((_QWORD *)v119 + 1);
              *((_QWORD *)v119 + 1) = 0;
              *((_QWORD *)v101 + 1) = v120;
              *((_QWORD *)v101 + 2) = *((_QWORD *)v119 + 2);
              v121 = *((_QWORD *)v119 + 3);
              *((_QWORD *)v119 + 3) = 0;
              *((_QWORD *)v101 + 3) = v121;
              v122 = *((_QWORD *)v119 + 3);
              *((_QWORD *)v119 + 3) = 0;
              if (v122)
                unumf_closeResult();
              v123 = (WTF::StringImpl *)*((_QWORD *)v119 + 1);
              *((_QWORD *)v119 + 1) = 0;
              if (v123)
              {
                if (*(_DWORD *)v123 == 2)
                {
                  WTF::StringImpl::~StringImpl(v123, v11, (uint64_t)v28, v13, v14, v15, v16, v17);
                  WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
                }
                else
                {
                  *(_DWORD *)v123 -= 2;
                }
              }
              v119 += 16;
              v101 += 32;
            }
            while (v119 != v118);
            v92 = HIDWORD(v329);
          }
        }
        else
        {
          v312 = (WTF *)v314;
          *(_QWORD *)v100 = v102;
          v103 = v313;
          LODWORD(v313) = 1;
          *((_DWORD *)v100 + 2) = v103;
        }
        v132 = HIDWORD(v313);
        HIDWORD(v313) = 0;
        *((_DWORD *)v100 + 3) = v132;
      }
      HIDWORD(v329) = v92 + 1;
      v133 = v312;
      if (HIDWORD(v313))
      {
        v134 = 32 * HIDWORD(v313);
        v135 = (uint64_t *)((char *)v312 + 24);
        while (1)
        {
          v136 = *v135;
          *v135 = 0;
          if (v136)
            unumf_closeResult();
          v137 = *(v135 - 2);
          *(v135 - 2) = 0;
          if (!v137)
            goto LABEL_113;
          if (*(_DWORD *)v137 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v137, v11, (uint64_t)v28, v13, v14, v15, v16, v17);
            v138 = *(_QWORD *)(StatusReg + 752);
            if (v138)
            {
              if (!(v137 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v137 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v137)) & 1) != 0)
              {
LABEL_118:
                v139 = *(unsigned int *)(v138 + 8000);
                if (v139 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v138, v137, (os_unfair_lock_s *)5, v13, v14, v15, v16, v17);
                }
                else
                {
                  *(_QWORD *)(v138 + 8 * v139) = v137 | 0x5000000000000;
                  *(_DWORD *)(v138 + 8000) = v139 + 1;
                }
                goto LABEL_113;
              }
              if (v137 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v137 >> 24)
              {
                v13 = 0;
              }
              else
              {
                v13 = (*(_DWORD *)((char *)off_1ECF425F8
                                 + ((((v137 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                 + 24) >> (2 * ((BYTE3(v137) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v13 == 1)
                  goto LABEL_118;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v138, v137, 1, v13, v14, v15, v16, v17);
            }
            else
            {
              pas_try_deallocate_slow_no_cache(v137, (uint64_t)&bmalloc_heap_config, 1);
            }
          }
          else
          {
            *(_DWORD *)v137 -= 2;
          }
LABEL_113:
          v135 += 4;
          v134 -= 32;
          if (!v134)
          {
            v133 = v312;
            break;
          }
        }
      }
      if (v314 != (_WORD *)v133 && v133 != 0)
      {
        v312 = 0;
        LODWORD(v313) = 0;
        WTF::fastFree((unint64_t)v133, v11, (uint64_t)v28, v13, v14, v15, v16, v17);
      }
      v19 = v38 + 1;
      if (v18 <= (int)v38 + 1)
        goto LABEL_137;
    }
    LODWORD(v38) = v19;
LABEL_22:
    v28 = (char *)v312 + 8;
    v48 = HIDWORD(v332);
    if (HIDWORD(v332) == (_DWORD)v332)
    {
      v49 = (_DWORD **)WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v331, HIDWORD(v332) + 1, (unint64_t)v28);
      v48 = HIDWORD(v332);
      v50 = v331;
      v51 = *v49;
      if (!*v49)
        goto LABEL_27;
    }
    else
    {
      v50 = v331;
      v51 = *(_DWORD **)v28;
      if (!*(_QWORD *)v28)
      {
LABEL_27:
        v50[v48] = (uint64_t)v51;
        HIDWORD(v332) = v48 + 1;
        goto LABEL_79;
      }
    }
    *v51 += 2;
    goto LABEL_27;
  }
LABEL_137:
  JSC::ListFormatInput::ListFormatInput((uint64_t)&v312, (uint64_t)&v331);
  v165 = ulistfmt_openResult();
  ulistfmt_formatStringsToResult();
  ulistfmt_resultAsValue();
  v215 = *((_DWORD *)v338 + 227);
  if (v215)
    v216 = 16 * (v215 & 0xFFFFFFFE);
  else
    v216 = 0;
  v217 = v310;
  v218 = JSC::JSArray::tryCreate(v310, v216, 0, v209, v210, v211, v212, v213, v214);
  if (!v218)
  {
    v238 = (JSC::JSGlobalObject *)v338;
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)v338, v219);
    v246 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v246 = (JSC::Exception *)JSC::Exception::create((uint64_t)v310, (JSC::VM *)OutOfMemoryError, 0, v240, v241, v242, v243, v244);
    }
    v220 = JSC::VM::throwException(v310, v238, v246, v245, v240, v241, v242, v243, v244);
    goto LABEL_138;
  }
  v220 = (JSC::Exception *)v218;
  ufmtval_getString();
  v221 = ucfpos_open();
  ucfpos_constrainField();
  v222 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v222 = 0x700000002;
  *(_QWORD *)(v222 + 8) = "literal";
  *(_DWORD *)(v222 + 16) = 4;
  v324 = (WTF::StringImpl *)v222;
  v311 = (JSC::VM *)JSC::jsNontrivialString((uint64_t)v310, (JSC::VM *)&v324, v223, v224, v225, v226, v227, v228);
  v236 = v324;
  v324 = 0;
  if (v236)
  {
    if (*(_DWORD *)v236 == 2)
    {
      WTF::StringImpl::~StringImpl(v236, v229, v230, v231, v232, v233, v234, v235);
      WTF::fastFree(v302, v303, v304, v305, v306, v307, v308, v309);
    }
    else
    {
      *(_DWORD *)v236 -= 2;
    }
  }
  v324 = (WTF::StringImpl *)&v338;
  v325 = v310;
  Position = ufmtval_nextPosition();
  for (i = 0; ; ++i)
  {
    if (!Position)
      goto LABEL_203;
    ucfpos_getIndexes();
    v342[0] = v217;
    if (HIDWORD(v329) > i)
    {
      v248 = (char *)v328 + 48 * i;
      v249 = *((unsigned int *)v248 + 3);
      if ((_DWORD)v249)
      {
        v250 = *(_QWORD *)v248;
        v251 = *(_QWORD *)v248 + 32 * v249;
        while (1)
        {
          if (*(_BYTE *)v250)
          {
            if (*(_BYTE *)v250 == 1)
            {
              v341 = 0;
              v252 = ufieldpositer_open();
              if (v341 >= 1)
              {
                v253 = v338;
                v254 = "failed to open field position iterator";
                v255 = 39;
                goto LABEL_226;
              }
              unumf_resultGetAllFieldPositions();
              if (v341 < 1)
              {
                v340 = v252;
                v273 = (WTF::StringImpl *)JSC::temporalUnitSingularPropertyName((uint64_t)v217, *(unsigned __int8 *)(v250 + 1));
                if (v273)
                  *(_DWORD *)v273 += 2;
                v339 = v273;
                v287 = JSC::jsString((uint64_t)v217, (JSC::VM *)&v339, v274, v275, v276, v277, v278, v279);
                v288 = v339;
                v339 = 0;
                if (v288)
                {
                  if (*(_DWORD *)v288 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v288, v280, v281, v282, v283, v284, v285, v286);
                    WTF::fastFree(v290, v291, v292, v293, v294, v295, v296, v297);
                  }
                  else
                  {
                    *(_DWORD *)v288 -= 2;
                  }
                }
                JSC::IntlNumberFormat::formatToPartsInternal((uint64_t)v338, 3, *(_QWORD *)(v250 + 16) >> 63, (*(_QWORD *)(v250 + 16) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL, (JSC::VM *)(v250 + 8), (uint64_t)&v340, (unint64_t)v220, 0, v287);
                v289 = v342[0];
                if (!*((_DWORD *)v342[0] + 20))
                  goto LABEL_237;
                v298 = *((_DWORD *)v342[0] + 20);
                if ((v298 & 0x27) != 0 && (v298 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VM *)((char *)v342[0] + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
                if (*((_QWORD *)v289 + 2))
                  v272 = 1;
                else
LABEL_237:
                  v272 = 4;
                v217 = v310;
                if (v252)
                  goto LABEL_227;
              }
              else
              {
                v253 = v338;
                v254 = "Failed to format a number.";
                v255 = 27;
LABEL_226:
                JSC::throwTypeError((unint64_t)v253, v342, (uint64_t)v254, v255);
                v272 = 1;
                if (v252)
LABEL_227:
                  ufieldpositer_close();
              }
              if (v272 != 4)
                break;
            }
LABEL_229:
            v250 += 32;
            if (v250 == v251)
              break;
          }
          else
          {
            v256 = JSC::jsString(v217, (JSC::VM *)(v250 + 8), v167, v168, v169, v170, v171, v172);
            v262 = JSC::IntlDurationFormat::formatToParts(JSC::JSGlobalObject *,JSC::ISO8601::Duration)const::$_0::operator()((uint64_t **)&v324, v311, v256, v257, v258, v259, v260, v261);
            JSC::JSArray::push((unint64_t)v220, v338, v262, v263, v264, v265, v266, v267, v268);
            v269 = v342[0];
            if (!*((_DWORD *)v342[0] + 20))
              goto LABEL_229;
            v270 = *((_DWORD *)v342[0] + 20);
            if ((v270 & 0x27) != 0 && (v270 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VM *)((char *)v342[0] + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
            v250 += 32;
            if (*((_QWORD *)v269 + 2))
              v271 = 1;
            else
              v271 = v250 == v251;
            v217 = v310;
            if (v271)
              break;
          }
        }
      }
    }
    v299 = v337;
    if (*(_DWORD *)(v337 + 80))
    {
      v300 = *(_DWORD *)(v337 + 80);
      if ((v300 & 0x27) != 0 && (v300 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v337 + 64), 7u, (uint64_t)v167, v168, v169, v170, v171, v172);
      v217 = v310;
      if (*(_QWORD *)(v299 + 16))
        break;
    }
    Position = ufmtval_nextPosition();
  }
  v220 = 0;
LABEL_203:
  if (v221)
    ucfpos_close();
LABEL_138:
  if (v165)
    ulistfmt_closeResult();
  v173 = v321;
  if (&v323 != (uint64_t *)v321 && v321)
  {
    v321 = 0;
    v322 = 0;
    WTF::fastFree((unint64_t)v173, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
  }
  v174 = v318;
  if (&v320 != (uint64_t *)v318 && v318)
  {
    v318 = 0;
    v319 = 0;
    WTF::fastFree((unint64_t)v174, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
  }
  WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v312, v166, (uint64_t)v167, v168, v169, v170, v171, v172);
  v182 = v328;
  if (HIDWORD(v329))
  {
    v183 = (WTF *)((char *)v328 + 48 * HIDWORD(v329));
    v184 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v185 = *((unsigned int *)v182 + 3);
      if ((_DWORD)v185)
        break;
LABEL_169:
      v192 = *(_QWORD *)v182;
      if ((WTF *)((char *)v182 + 16) != *(WTF **)v182 && v192 != 0)
      {
        *(_QWORD *)v182 = 0;
        *((_DWORD *)v182 + 2) = 0;
        WTF::fastFree(v192, v175, v176, v177, v178, v179, v180, v181);
      }
      v182 = (WTF *)((char *)v182 + 48);
      if (v182 == v183)
      {
        v182 = v328;
        goto LABEL_176;
      }
    }
    v186 = 32 * v185;
    v187 = (uint64_t *)(*(_QWORD *)v182 + 24);
    while (2)
    {
      v188 = *v187;
      *v187 = 0;
      if (v188)
        unumf_closeResult();
      v189 = *(v187 - 2);
      *(v187 - 2) = 0;
      if (v189)
      {
        if (*(_DWORD *)v189 != 2)
        {
          *(_DWORD *)v189 -= 2;
          goto LABEL_155;
        }
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v189, (WTF::AtomStringImpl *)v175, v176, v177, v178, v179, v180, v181);
        v190 = *(_QWORD *)(v184 + 752);
        if (v190)
        {
          if (v189 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v189 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v189)) & 1) == 0)
          {
            if (v189 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v189 >> 24)
            {
              v177 = 0;
            }
            else
            {
              v177 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v189 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v189) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v177 == 1)
                goto LABEL_160;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v190, v189, 1, v177, v178, v179, v180, v181);
          }
          else
          {
LABEL_160:
            v191 = *(unsigned int *)(v190 + 8000);
            if (v191 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v190, v189, (os_unfair_lock_s *)5, v177, v178, v179, v180, v181);
            }
            else
            {
              *(_QWORD *)(v190 + 8 * v191) = v189 | 0x5000000000000;
              *(_DWORD *)(v190 + 8000) = v191 + 1;
            }
          }
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v189, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_155:
      v187 += 4;
      v186 -= 32;
      if (!v186)
        goto LABEL_169;
      continue;
    }
  }
LABEL_176:
  if (v330 != (_BYTE *)v182 && v182 != 0)
  {
    v328 = 0;
    LODWORD(v329) = 0;
    WTF::fastFree((unint64_t)v182, v175, v176, v177, v178, v179, v180, v181);
  }
  WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v331, v175, v176, v177, v178, v179, v180, v181);
LABEL_182:
  v195 = v335;
  if (v336)
  {
    v196 = 32 * v336;
    v197 = (uint64_t *)(v335 + 24);
    do
    {
      v198 = *v197;
      *v197 = 0;
      if (v198)
        unumf_closeResult();
      v199 = (WTF::StringImpl *)*(v197 - 2);
      *(v197 - 2) = 0;
      if (v199)
      {
        if (*(_DWORD *)v199 == 2)
        {
          WTF::StringImpl::~StringImpl(v199, v11, v12, v13, v14, v15, v16, v17);
          WTF::fastFree(v200, v201, v202, v203, v204, v205, v206, v207);
        }
        else
        {
          *(_DWORD *)v199 -= 2;
        }
      }
      v197 += 4;
      v196 -= 32;
    }
    while (v196);
  }
  if (v195)
    WTF::fastFree(v195, v11, v12, v13, v14, v15, v16, v17);
  return v220;
}

uint64_t JSC::IntlDurationFormat::formatToParts(JSC::JSGlobalObject *,JSC::ISO8601::Duration)const::$_0::operator()(uint64_t **a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  JSC *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t SlowCase;
  JSC *v33;
  uint64_t Slow;
  uint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v9 = (uint64_t)a2;
  v11 = **a1;
  v12 = *(JSC **)(v11 + 56);
  v13 = *((_QWORD *)v12 + 1882);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 + 60);
    v15 = *(_QWORD *)(v13 + 24);
    if (v15 >= *(_QWORD *)(v13 + 32))
    {
      v15 = *(_QWORD *)(v13 + 40);
      if ((v15 & 1) != 0)
      {
        v26 = (uint64_t)v12 + 192;
        v27 = *((_QWORD *)v12 + 1882);
        v28 = *(JSC **)(v11 + 56);
        JSC::sanitizeStackForVM(v28, a2, a3, (uint64_t)a2, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v27, v26, v14, 0, 0, v29, v30, v31);
        v12 = v28;
        v9 = (uint64_t)a2;
        v15 = SlowCase;
        goto LABEL_4;
      }
      v25 = *(_QWORD *)(v15 + 8) ^ *(_QWORD *)(v13 + 48);
      *(_QWORD *)(v13 + 32) = v15 + HIDWORD(v25);
      *(_QWORD *)(v13 + 40) = v15 + (int)v25;
    }
    *(_QWORD *)(v13 + 24) = v15 + v14;
  }
  else
  {
    v33 = *(JSC **)(v11 + 56);
    Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v12 + 14936, v33, 0x40uLL, 0, a5, a6, a7, a8);
    v12 = v33;
    v9 = (uint64_t)a2;
    v15 = Slow;
    if (!Slow)
    {
      result = 110;
      __break(0xC471u);
      return result;
    }
  }
LABEL_4:
  *(_DWORD *)v15 = 0;
  *(_DWORD *)v15 = *(_DWORD *)(v11 + 848);
  *(_DWORD *)(v15 + 4) = 16783360;
  v16.n128_u64[1] = 0;
  *(_OWORD *)(v15 + 8) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_QWORD *)(v15 + 56) = 0;
  if (*((_BYTE *)v12 + 755))
    __dmb(0xAu);
  v17 = (uint64_t)a1[1];
  v18 = *(_QWORD *)(*(_QWORD *)(v17 + 41952) + 2560);
  v37 = 0;
  v38 = v15;
  v39 = -1;
  v16.n128_u64[0] = 0x100000001000000;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v15, v17, v18, v9, 0, (uint64_t)&v37, a7, a8, v16);
  v19 = (uint64_t)a1[1];
  v20 = *(_QWORD *)(*(_QWORD *)(v19 + 41952) + 2608);
  v37 = 0;
  v38 = v15;
  v39 = -1;
  v21.n128_u64[0] = 0x100000001000000;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v15, v19, v20, a3, 0, (uint64_t)&v37, v22, v23, v21);
  return v15;
}

unint64_t JSC::IntlDurationFormat::resolvedOptions(JSC::IntlDurationFormat *this, JSC::JSGlobalObject *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  unint64_t *v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  const char *v88;
  uint64_t v89;
  __n128 v90;
  uint64_t v91;
  uint64_t v92;
  WTF::AtomStringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __n128 v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  const WTF::String *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __n128 v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  JSC::JSGlobalObject *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t SlowCase;
  JSC::JSGlobalObject *v139;
  uint64_t Slow;
  JSC::IntlDurationFormat *v141;
  WTF::StringImpl *v142;
  uint64_t v143;
  unint64_t v144;
  int v145;
  int v146;
  uint64_t v147;

  v9 = *((_QWORD *)a2 + 7);
  v10 = *(_QWORD *)(v9 + 15056);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 60);
    v12 = *(_QWORD *)(v10 + 24);
    if (v12 < *(_QWORD *)(v10 + 32))
    {
LABEL_3:
      *(_QWORD *)(v10 + 24) = v12 + v11;
      goto LABEL_4;
    }
    v12 = *(_QWORD *)(v10 + 40);
    if ((v12 & 1) == 0)
    {
      v133 = *(_QWORD *)(v12 + 8) ^ *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 32) = v12 + HIDWORD(v133);
      *(_QWORD *)(v10 + 40) = v12 + (int)v133;
      goto LABEL_3;
    }
    v134 = a2;
    JSC::sanitizeStackForVM(*((JSC **)a2 + 7), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v10, v9 + 192, v11, 0, 0, v135, v136, v137);
    a2 = v134;
    v12 = SlowCase;
  }
  else
  {
    v139 = a2;
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v9 + 14936, *((JSC **)a2 + 7), 0x40uLL, 0, a5, a6, a7, a8);
    a2 = v139;
    v12 = Slow;
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x197E20E90);
    }
  }
LABEL_4:
  *(_DWORD *)v12 = 0;
  *(_DWORD *)v12 = *((_DWORD *)a2 + 212);
  *(_DWORD *)(v12 + 4) = 16783360;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_QWORD *)(v12 + 56) = 0;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  v13 = v9 + 41952;
  v14 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 1784);
  v15 = JSC::jsString((JSC *)v9, (JSC::IntlDurationFormat *)((char *)this + 24), a3, a4, a5, a6, a7, a8);
  v143 = 0;
  v144 = v12;
  v145 = -1;
  v16.n128_u64[0] = 0x100000001000000;
  v146 = 0x1000000;
  v147 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v14, v15, 0, (uint64_t)&v143, v17, v18, v16);
  v25 = 0;
  v26 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2384);
  v27 = *((char *)this + 52);
  if (v27 <= 3)
  {
    v28 = off_1E3578170[v27];
    v29 = *((unsigned __int8 *)this + 52) + 4;
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v25 = 2;
    *(_DWORD *)(v25 + 4) = v29;
    *(_QWORD *)(v25 + 8) = v28;
    *(_DWORD *)(v25 + 16) = 4;
  }
  v142 = (WTF::StringImpl *)v25;
  v30 = JSC::jsNontrivialString(v9, (JSC::VM *)&v142, v19, v20, v21, v22, v23, v24);
  v143 = 0;
  v144 = v12;
  v145 = -1;
  v31.n128_u64[0] = 0x100000001000000;
  v146 = 0x1000000;
  v147 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v26, v30, 0, (uint64_t)&v143, v32, v33, v31);
  v41 = v142;
  v142 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  v42 = 0;
  v141 = this;
  v43 = (char *)this + 53;
  do
  {
    v44 = v43[v42];
    v51 = JSC::temporalUnitPluralPropertyName(v9, v42);
    if ((v44 & 0x7Fu) > 4)
    {
      v56 = 0;
    }
    else
    {
      v52 = off_1E3578190[v44 & 0x7F];
      v53 = v43;
      v54 = v13;
      v55 = dword_199124B00[v44 & 0x7F];
      v56 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_DWORD *)v56 = 2;
      *(_DWORD *)(v56 + 4) = v55;
      v13 = v54;
      v43 = v53;
      *(_QWORD *)(v56 + 8) = v52;
      *(_DWORD *)(v56 + 16) = 4;
    }
    v142 = (WTF::StringImpl *)v56;
    v57 = JSC::jsNontrivialString(v9, (JSC::VM *)&v142, v45, v46, v47, v48, v49, v50);
    v143 = 0;
    v144 = v12;
    v145 = -1;
    v58.n128_u64[0] = 0x100000001000000;
    v146 = 0x1000000;
    v147 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v51, v57, 0, (uint64_t)&v143, v59, v60, v58);
    v68 = v142;
    v142 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
      {
        WTF::StringImpl::~StringImpl(v68, v61, v62, v63, v64, v65, v66, v67);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      else
      {
        *(_DWORD *)v68 -= 2;
      }
    }
    v69 = *(unint64_t **)v13;
    switch((char)v42)
    {
      case 0:
        v70 = v69 + 335;
        break;
      case 1:
        v70 = v69 + 244;
        break;
      case 2:
        v70 = v69 + 331;
        break;
      case 3:
        v70 = v69 + 141;
        break;
      case 4:
        v70 = v69 + 188;
        break;
      case 5:
        v70 = v69 + 240;
        break;
      case 6:
        v70 = v69 + 283;
        break;
      case 7:
        v70 = v69 + 234;
        break;
      case 8:
        v70 = v69 + 231;
        break;
      case 9:
        v70 = v69 + 249;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197E20E14);
    }
    v79 = *v70;
    v80 = WTF::fastCompactMalloc((WTF *)0x20);
    if (v44 < 0)
      v87 = 4;
    else
      v87 = 6;
    *(_DWORD *)v80 = 2;
    *(_DWORD *)(v80 + 4) = v87;
    v88 = "auto";
    if (v44 >= 0)
      v88 = "always";
    *(_QWORD *)(v80 + 8) = v88;
    *(_DWORD *)(v80 + 16) = 4;
    v142 = (WTF::StringImpl *)v80;
    v89 = JSC::jsNontrivialString(v9, (JSC::VM *)&v142, v81, v82, v83, v84, v85, v86);
    v143 = 0;
    v144 = v12;
    v145 = -1;
    v90.n128_u64[0] = 0x100000001000000;
    v146 = 0x1000000;
    v147 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v79, v89, 0, (uint64_t)&v143, v91, v92, v90);
    v101 = v142;
    v142 = 0;
    if (v101)
    {
      if (*(_DWORD *)v101 == 2)
      {
        WTF::StringImpl::~StringImpl(v101, v93, v94, v95, v96, v97, v98, v99);
        WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
      }
      else
      {
        *(_DWORD *)v101 -= 2;
      }
    }
    ++v42;
  }
  while (v42 != 10);
  v110 = *(_QWORD *)(*(_QWORD *)v13 + 1344);
  v111 = *((unsigned int *)v141 + 12);
  if ((_DWORD)v111 == -1)
  {
    v112 = 10;
  }
  else if ((int)v111 < 0)
  {
    v112 = COERCE__INT64((double)v111) + 0x2000000000000;
  }
  else
  {
    v112 = v111 | 0xFFFE000000000000;
  }
  v143 = 0;
  v144 = v12;
  v145 = -1;
  v100.n128_u64[0] = 0x100000001000000;
  v146 = 0x1000000;
  v147 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v110, v112, 0, (uint64_t)&v143, v98, v99, v100);
  v113 = *(_QWORD *)(*(_QWORD *)v13 + 2040);
  v120 = JSC::jsString((JSC *)v9, (JSC::IntlDurationFormat *)((char *)v141 + 32), v114, v115, v116, v117, v118, v119);
  v143 = 0;
  v144 = v12;
  v145 = -1;
  v121.n128_u64[0] = 0x100000001000000;
  v146 = 0x1000000;
  v147 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v113, v120, 0, (uint64_t)&v143, v122, v123, v121);
  return v12;
}

uint64_t JSC::jsString(JSC *this, JSC::VM *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned __int8 *v17;
  unsigned int v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t SlowCase;
  uint64_t v23;
  unint64_t v24;
  JSC *v25;

  v8 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return *((_QWORD *)this + 5246);
  v9 = *(_DWORD *)(v8 + 4);
  if (v9 != 1)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v8 + 16);
      goto LABEL_5;
    }
    return *((_QWORD *)this + 5246);
  }
  v10 = *(_DWORD *)(v8 + 16);
  v17 = *(unsigned __int8 **)(v8 + 8);
  if ((v10 & 4) != 0)
  {
    v18 = *v17;
    return *((_QWORD *)this + v18 + 5277);
  }
  v18 = *(unsigned __int16 *)v17;
  if (v18 <= 0xFF)
    return *((_QWORD *)this + v18 + 5277);
LABEL_5:
  v11 = (uint64_t *)((char *)this + 39696);
  *(_DWORD *)v8 += 2;
  v12 = v8;
  if ((v10 & 3) == 2)
  {
    v12 = v8;
    do
    {
      v12 = *(_QWORD *)(v12 + 24);
      v10 = *(_DWORD *)(v12 + 16);
    }
    while ((v10 & 3) == 2);
  }
  if ((v10 & 8) != 0)
  {
    v13 = 0;
  }
  else
  {
    *(_DWORD *)(v12 + 16) = v10 | 8;
    v13 = (unint64_t)*(unsigned int *)(v12 + 4) << ((v10 & 4) == 0);
  }
  v14 = (char *)this + 192;
  v15 = *v11;
  if ((unint64_t)*v11 >= *((_QWORD *)this + 4963))
  {
    v15 = *((_QWORD *)this + 4964);
    if ((v15 & 1) != 0)
    {
      v20 = (char *)this + 39672;
      v24 = v13;
      v25 = this;
      v21 = (char *)this + 192;
      v23 = v8;
      JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, v13, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v20, v21, 16, 0, 0);
      v8 = v23;
      v13 = v24;
      v14 = v21;
      v15 = SlowCase;
      this = v25;
      goto LABEL_10;
    }
    v19 = *(_QWORD *)(v15 + 8) ^ *((_QWORD *)this + 4965);
    *((_QWORD *)this + 4963) = v15 + HIDWORD(v19);
    *((_QWORD *)this + 4964) = v15 + (int)v19;
  }
  *v11 = v15 + 16;
LABEL_10:
  *(_DWORD *)v15 = (unint64_t)v11[227] >> 4;
  *(_DWORD *)(v15 + 4) = 17302016;
  *(_QWORD *)(v15 + 8) = v8;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if (v13 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v14, 0, v15, v13, a5, a6, a7, a8);
  return v15;
}

uint64_t JSC::intlOption<std::optional<JSC::IntlDurationFormat::UnitStyle>>(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  const WTF::String *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  unint64_t v36;
  JSC::Heap **v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  JSC::Exception *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t (*v66)(_QWORD *);
  _QWORD *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  _QWORD v71[3];

  if (!a2)
    goto LABEL_4;
  v13 = *(_QWORD *)(a1 + 56);
  v14 = JSC::JSObject::get(a2, a1, a3, a4, a5, a6, a7, a8);
  v23 = v14;
  v70 = v14;
  if (*(_DWORD *)(v13 + 80))
  {
    v26 = *(_DWORD *)(v13 + 80);
    if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)v16, v17, v18, v19, v20, v21);
    if (*(_QWORD *)(v13 + 16))
      v27 = 1;
    else
      v27 = v23 == 10;
    if (v27)
      goto LABEL_4;
  }
  else if (v14 == 10)
  {
LABEL_4:
    LOBYTE(v24) = 0;
    v25 = 0;
    return v24 | (v25 << 8);
  }
  if ((v23 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v23 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v70, (JSC::JSGlobalObject *)a1, v16, v17, v18, v19, v20, v21, (int **)&v69);
    goto LABEL_16;
  }
  v28 = *(WTF::StringImpl **)(v23 + 8);
  if ((v28 & 1) != 0)
  {
    v28 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v23, (JSC::JSGlobalObject *)a1, (uint64_t)v16, v17, v22, v18, v19, v20, v21);
    if (!v28)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (v28)
LABEL_14:
    *(_DWORD *)v28 += 2;
LABEL_15:
  v69 = v28;
LABEL_16:
  if (!*(_DWORD *)(v13 + 80))
    goto LABEL_17;
  v65 = *(_DWORD *)(v13 + 80);
  if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)v16, v17, v18, v19, v20, v21);
  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_17:
    if (a5)
    {
      v29 = a4 + 24 * a5;
      v30 = (unsigned __int16 *)(a4 + 16);
      while (1)
      {
        v31 = *((_QWORD *)v30 - 1);
        v32 = v30 - 8;
        v33 = v31 ? v31 - 1 : 0;
        if (WTF::equalInternal<unsigned char>((uint64_t)v69, *((_QWORD *)v30 - 2), v33))
          break;
        v30 += 12;
        if (v32 + 12 == (unsigned __int16 *)v29)
          goto LABEL_24;
      }
      v24 = *v30;
      v25 = v24 >> 8;
      goto LABEL_35;
    }
LABEL_24:
    if (a7)
    {
      v34 = a7 - 1;
      if (v34)
      {
        v35 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
        *v35 = 2;
        v35[1] = v34;
        *((_QWORD *)v35 + 1) = a6;
        v35[4] = 4;
      }
      else
      {
        v35 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
    }
    else
    {
      v35 = 0;
    }
    v68 = (WTF::StringImpl *)v35;
    v36 = *(_QWORD *)(a1 + 128);
    v37 = *(JSC::Heap ***)(a1 + 56);
    if ((v36 & 1) != 0)
    {
      v66 = *(uint64_t (**)(_QWORD *))(v36 & 0xFFFFFFFFFFFFFFFCLL);
      v67 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v67 = (_QWORD *)(a1 - 16);
      v71[0] = *v67;
      v71[1] = a1;
      v71[2] = a1 + 128;
      v36 = v66(v71);
    }
    v38 = JSC::ErrorInstance::create(v37, v36, &v68, 0, 0, 0, 2, 1);
    v45 = (JSC::Exception *)v38;
    if ((v38 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x4C)))
    {
      v45 = (JSC::Exception *)JSC::Exception::create(v13, (JSC::VM *)v38, 0, v39, v40, v41, v42, v43);
    }
    JSC::VM::throwException((JSC::VM *)v13, (JSC::JSGlobalObject *)a1, v45, v44, v39, v40, v41, v42, v43);
    v46 = v68;
    v68 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
  }
  LOBYTE(v24) = 0;
  v25 = 0;
LABEL_35:
  v47 = v69;
  v69 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  return v24 | (v25 << 8);
}

void JSC::collectElements(JSC::JSGlobalObject *,JSC::IntlDurationFormat const*,JSC::ISO8601::Duration)::$_1::operator()(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int8x16_t *v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  char *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  char *v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  WTF *v28;
  unsigned int v29;
  _BYTE v30[64];
  int8x16_t *v31;
  uint64_t v32;
  uint64_t v33;
  int8x16x2_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;

  v33 = *a2;
  if (a3)
  {
    v4 = *(int8x16_t **)(a3 + 8);
    v5 = *(unsigned int *)(a3 + 4) | ((unint64_t)((*(_DWORD *)(a3 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v4 = 0;
    v5 = 0x100000000;
  }
  v28 = (WTF *)v30;
  v31 = 0;
  v32 = 0;
  v6 = v5;
  if ((v5 & 0x100000000) != 0)
  {
    if (v5 > 0x20uLL)
    {
      if (v5 <= 0x29uLL)
        v19 = 41;
      else
        v19 = v5;
      if (v19 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x197E215D0);
      }
      v7 = (WTF *)WTF::fastMalloc((WTF *)(2 * v19));
      v28 = v7;
      v29 = v5;
      if (v5 < 0x40uLL)
      {
        v8 = (char *)v7;
      }
      else
      {
        v8 = (char *)v7 + 2 * (v5 & 0xFFFFFFC0);
        v20 = 0uLL;
        v21 = (char *)v7;
        do
        {
          v34.val[0] = *v4;
          v22 = v4[1];
          v35.val[0] = v4[2];
          v23 = v4[3];
          v4 += 4;
          v24 = v23;
          v35.val[1] = 0uLL;
          v36.val[0] = v22;
          v34.val[1] = 0uLL;
          v25 = v21;
          vst2q_s8(v25, v34);
          v25 += 32;
          v36.val[1] = 0uLL;
          vst2q_s8(v25, v36);
          v26 = v21 + 64;
          vst2q_s8(v26, v35);
          v27 = v21 + 96;
          vst2q_s8(v27, *(int8x16x2_t *)(&v20 - 1));
          v21 += 128;
        }
        while (v21 != v8);
      }
    }
    else
    {
      v29 = v5;
      v7 = (WTF *)v30;
      v8 = v30;
    }
    while (v8 != (char *)v7 + 2 * v5)
    {
      v9 = v4->u8[0];
      v4 = (int8x16_t *)((char *)v4 + 1);
      *(_WORD *)v8 = v9;
      v8 += 2;
    }
    v4 = (int8x16_t *)v28;
    v6 = v29;
  }
  v31 = v4;
  v32 = v6;
  v10 = unumf_openForSkeletonAndLocale();
  v11 = unumf_openResult();
  unumf_formatDouble();
  *a1 = v11;
  if (v10)
    unumf_close();
  if (v30 != (_BYTE *)v28)
  {
    if (v28)
      WTF::fastFree((unint64_t)v28, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::collectElements(JSC::JSGlobalObject *,JSC::IntlDurationFormat const*,JSC::ISO8601::Duration)::$_0::operator()(int **a1, uint64_t a2)
{
  signed int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int *v13;
  _WORD *v14;
  unint64_t v16;
  WTF *v17;
  WTF *v18;
  _BYTE v19[64];
  JSC::VM *v20;
  int v21;

  v20 = *(JSC::VM **)a2;
  v18 = (WTF *)v19;
  v21 = 0;
  v4 = unumf_resultToString();
  v12 = v4;
  if (v21 > 0)
  {
    if (v21 != 15)
    {
LABEL_5:
      JSC::throwTypeError(**(_QWORD **)(a2 + 8), &v20, (uint64_t)"Failed to format a number.", 27);
LABEL_11:
      v13 = 0;
      goto LABEL_12;
    }
    v21 = 0;
    if ((unint64_t)v4 > 0x20)
    {
      if ((unint64_t)v4 >= 0x29)
        v16 = v4;
      else
        v16 = 41;
      if (v16 < 0x21)
      {
        v18 = (WTF *)v19;
        v17 = (WTF *)v19;
      }
      else
      {
        if (v16 >> 31)
          goto LABEL_28;
        v17 = (WTF *)WTF::fastMalloc((WTF *)(2 * v16));
        v18 = v17;
      }
      memcpy(v17, v19, 0x40uLL);
    }
    unumf_resultToString();
    if (v21 > 0)
      goto LABEL_5;
  }
  if (!v18)
    goto LABEL_11;
  if (v12)
  {
    if (v12 < 0x7FFFFFF0)
    {
      v13 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v12 + 20));
      v14 = v13 + 5;
      *v13 = 2;
      v13[1] = v12;
      *((_QWORD *)v13 + 1) = v13 + 5;
      v13[4] = 0;
      if (v12 == 1)
        *v14 = *(_WORD *)v18;
      else
        memcpy(v14, v18, 2 * v12);
      goto LABEL_12;
    }
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x197E21804);
  }
  v13 = &WTF::StringImpl::s_emptyAtomString;
  WTF::StringImpl::s_emptyAtomString += 2;
LABEL_12:
  *a1 = v13;
  if (v19 != (_BYTE *)v18 && v18 != 0)
    WTF::fastFree((unint64_t)v18, v5, v6, v7, v8, v9, v10, v11);
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char *result;
  char *v18;
  int8x16_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v10 = *(_DWORD *)(a1 + 16);
  v11 = *(_DWORD *)(a2 + 8);
  v12 = __CFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    v13 = -1;
  v12 = __CFADD__(v13, v10);
  v14 = v13 + v10;
  if (v12)
    v15 = 0xFFFFFFFFLL;
  else
    v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if ((v16 || (v16 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v16 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v15, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (result)
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(result, *(int8x16_t **)a2, *(_QWORD *)(a2 + 8), *a3);
  }
  else
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v15, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v18 = result;
      v19 = *(int8x16_t **)a2;
      v20 = *(_QWORD *)(a2 + 8);
      v21 = v20;
      v22 = *a3;
      if ((_DWORD)v20 == 1)
      {
        *result = v19->i8[0];
      }
      else if ((_DWORD)v20)
      {
        result = (char *)memcpy(result, v19, v20);
      }
      v18[v21] = v22;
    }
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(char *result, int8x16_t *a2, int a3, char a4)
{
  char *v4;
  char *v5;
  __int128 v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;
  int8x16x2_t v14;
  int8x16x2_t v15;
  int8x16x2_t v16;

  v4 = &result[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v5 = &result[2 * (a3 & 0xFFFFFFC0)];
    v6 = 0uLL;
    do
    {
      v14.val[0] = *a2;
      v7 = a2[1];
      v15.val[0] = a2[2];
      v8 = a2[3];
      a2 += 4;
      v9 = v8;
      v15.val[1] = 0uLL;
      v16.val[0] = v7;
      v14.val[1] = 0uLL;
      v10 = result;
      vst2q_s8(v10, v14);
      v10 += 32;
      v16.val[1] = 0uLL;
      vst2q_s8(v10, v16);
      v11 = result + 64;
      vst2q_s8(v11, v15);
      v12 = result + 96;
      vst2q_s8(v12, *(int8x16x2_t *)(&v6 - 1));
      result += 128;
    }
    while (result != v5);
    result = v5;
  }
  while (result != v4)
  {
    v13 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)result = v13;
    result += 2;
  }
  *(_WORD *)v4 = a4;
  return result;
}

unint64_t WTF::Vector<JSC::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<JSC::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<JSC::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = v6;
        v15 = v4 + 32 * v5;
        v16 = v4;
        do
        {
          *(_WORD *)v14 = *(_WORD *)v16;
          v17 = *(_QWORD *)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          *(_QWORD *)(v14 + 8) = v17;
          *(_QWORD *)(v14 + 16) = *(_QWORD *)(v16 + 16);
          v18 = *(_QWORD *)(v16 + 24);
          *(_QWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v14 + 24) = v18;
          v19 = *(_QWORD *)(v16 + 24);
          *(_QWORD *)(v16 + 24) = 0;
          if (v19)
            unumf_closeResult();
          v20 = *(WTF::StringImpl **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
            {
              WTF::StringImpl::~StringImpl(v20, v7, v8, v9, v10, v11, v12, v13);
              WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
            }
            else
            {
              *(_DWORD *)v20 -= 2;
            }
          }
          v16 += 32;
          v14 += 32;
        }
        while (v16 != v15);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t JSC::ListFormatInput::ListFormatInput(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl **v16;
  uint64_t i;
  WTF::StringImpl *v18;
  uint64_t v19;
  char *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  _DWORD *v28;
  WTF::StringImpl *v30;

  v3 = WTF::VectorBuffer<WTF::String,4ul,WTF::FastMalloc>::VectorBuffer(a1, a2);
  *(_QWORD *)(v3 + 48) = v3 + 64;
  v11 = (char **)(v3 + 48);
  *(_QWORD *)(v3 + 56) = 4;
  v12 = (void *)(v3 + 112);
  *(_QWORD *)(v3 + 96) = v3 + 112;
  *(_QWORD *)(v3 + 104) = 4;
  v13 = *(unsigned int *)(v3 + 12);
  if (v13 >= 5)
  {
    if (v13 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x197E21D0CLL);
    }
    v14 = WTF::fastMalloc((WTF *)(8 * v13));
    *(_DWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 48) = v14;
    v13 = *(unsigned int *)(a1 + 12);
    if (v13 >= 5)
    {
      if (v13 >> 30)
      {
        __break(0xC471u);
LABEL_40:
        JUMPOUT(0x197E21D04);
      }
      v15 = WTF::fastMalloc((WTF *)(4 * v13));
      *(_DWORD *)(a1 + 104) = v13;
      *(_QWORD *)(a1 + 96) = v15;
      v13 = *(unsigned int *)(a1 + 12);
    }
  }
  if ((_DWORD)v13)
  {
    v16 = *(WTF::StringImpl ***)a1;
    for (i = 8 * v13; i; i -= 8)
    {
      WTF::String::convertTo16Bit(v16, v4, v5, v6, v7, v8, v9, v10);
      v18 = *v16;
      if (*v16)
        v18 = (WTF::StringImpl *)*((_QWORD *)v18 + 1);
      v30 = v18;
      v19 = *(unsigned int *)(a1 + 60);
      if ((_DWORD)v19 == *(_DWORD *)(a1 + 56))
      {
        v20 = WTF::Vector<char16_t const*,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v19 + 1, (unint64_t)&v30);
        v19 = *(unsigned int *)(a1 + 60);
        *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v19) = *(_QWORD *)v20;
      }
      else
      {
        *(_QWORD *)&(*v11)[8 * v19] = v18;
      }
      *(_DWORD *)(a1 + 60) = v19 + 1;
      if (*v16)
        v21 = *((_DWORD *)*v16 + 1);
      else
        v21 = 0;
      v22 = *(unsigned int *)(a1 + 108);
      if ((_DWORD)v22 == *(_DWORD *)(a1 + 104))
      {
        v23 = v22 + (v22 >> 2);
        if (v23 >= 0x10)
          v24 = v23 + 1;
        else
          v24 = 16;
        if (v24 <= v22 + 1)
          v25 = v22 + 1;
        else
          v25 = v24;
        v26 = *(const void **)(a1 + 96);
        if (v25 < 5)
        {
          *(_QWORD *)(a1 + 96) = v12;
          *(_DWORD *)(a1 + 104) = 4;
          v27 = v12;
        }
        else
        {
          if (v25 >> 30)
          {
            __break(0xC471u);
            goto LABEL_40;
          }
          v27 = (void *)WTF::fastMalloc((WTF *)(4 * v25));
          *(_DWORD *)(a1 + 104) = v25;
          *(_QWORD *)(a1 + 96) = v27;
        }
        memcpy(v27, v26, 4 * v22);
        if (v12 != v26 && v26)
        {
          if (*(const void **)(a1 + 96) == v26)
          {
            *(_QWORD *)(a1 + 96) = 0;
            *(_DWORD *)(a1 + 104) = 0;
          }
          WTF::fastFree((unint64_t)v26, v4, v5, v6, v7, v8, v9, v10);
        }
        v28 = (_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * *(unsigned int *)(a1 + 108));
      }
      else
      {
        v28 = (_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v22);
      }
      *v28 = v21;
      ++*(_DWORD *)(a1 + 108);
      ++v16;
    }
  }
  return a1;
}

uint64_t WTF::VectorBuffer<WTF::String,4ul,WTF::FastMalloc>::VectorBuffer(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  const void *v6;
  int v7;
  int v9;

  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 4;
  v6 = (const void *)(a2 + 16);
  v5 = *(const void **)a2;
  if (v5 == v6)
  {
    memcpy(v4, v5, 8 * *(unsigned int *)(a2 + 12));
  }
  else
  {
    *(_QWORD *)a2 = v6;
    *(_QWORD *)a1 = v5;
    v9 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 4;
    *(_DWORD *)(a1 + 8) = v9;
  }
  v7 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a1 + 12) = v7;
  return a1;
}

char *WTF::Vector<char16_t const*,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v25 = *a1;
        return &v25[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 5)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 4;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v25 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v25 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
          v25 = *a1;
        }
        return &v25[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x197E21F28);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 5)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 4;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return (char *)v3;
}

uint64_t WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v10;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
    WTF::VectorTypeOperations<WTF::String>::destruct(*(unint64_t **)a1, (WTF::AtomStringImpl *)(*(_QWORD *)a1 + 8 * v9), a3, a4, a5, a6, a7, a8);
  v10 = *(unint64_t **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v10 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int8x16_t *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, int **a7@<X8>)
{
  int v11;
  int *v13;
  _BYTE *v14;
  _BYTE *v15;
  size_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  size_t v20;
  char *v21;
  unsigned __int128 *v22;
  unsigned __int128 *v23;
  unsigned __int128 v24;
  size_t v25;
  uint64_t v26;
  unsigned __int128 v27;
  char v28;
  char v29;
  _DWORD *v30;

  v11 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v30);
        v13 = v30;
        if (v30)
        {
          v14 = v30 + 5;
          *v30 = 2;
          v13[1] = v11;
          *((_QWORD *)v13 + 1) = v13 + 5;
          v13[4] = 4;
          if (a3)
          {
            v15 = *(_BYTE **)(a3 + 8);
            v16 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              if ((_DWORD)v16 == 1)
              {
                *v14 = *v15;
              }
              else if ((_DWORD)v16)
              {
                result = (uint64_t)memcpy(v13 + 5, v15, v16);
              }
            }
            else
            {
              if (v16 < 0x10)
              {
                v22 = (unsigned __int128 *)(v13 + 5);
              }
              else
              {
                v22 = (unsigned __int128 *)&v14[v16 & 0xFFFFFFF0];
                v23 = (unsigned __int128 *)(v13 + 5);
                do
                {
                  v24 = (unsigned __int128)vld2q_s8(v15);
                  v15 += 32;
                  *v23++ = v24;
                }
                while (v23 != v22);
              }
              while (v22 != (unsigned __int128 *)&v14[v16])
              {
                v29 = *v15;
                v15 += 2;
                *(_BYTE *)v22 = v29;
                v22 = (unsigned __int128 *)((char *)v22 + 1);
              }
            }
            v17 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v17 = 0;
          }
          v18 = &v14[v17];
          if (a5 == 1)
          {
            *v18 = a4->i8[0];
          }
          else if (a5)
          {
            result = (uint64_t)memcpy(&v14[v17], a4, a5);
          }
          if (a6)
          {
            result = (uint64_t)&v18[a5];
            v19 = *(_BYTE **)(a6 + 8);
            v20 = *(unsigned int *)(a6 + 4);
            if ((*(_BYTE *)(a6 + 16) & 4) != 0)
            {
              if ((_DWORD)v20 == 1)
              {
                *(_BYTE *)result = *v19;
              }
              else if ((_DWORD)v20)
              {
                result = (uint64_t)memcpy((void *)result, v19, v20);
              }
            }
            else
            {
              v25 = result + v20;
              if (v20 >= 0x10)
              {
                v26 = result + (v20 & 0xFFFFFFF0);
                do
                {
                  v27 = (unsigned __int128)vld2q_s8(v19);
                  v19 += 32;
                  *(_OWORD *)result = v27;
                  result += 16;
                }
                while (result != v26);
                result = v26;
              }
              while (result != v25)
              {
                v28 = *v19;
                v19 += 2;
                *(_BYTE *)result++ = v28;
              }
            }
          }
        }
        goto LABEL_16;
      }
LABEL_29:
      v13 = 0;
      goto LABEL_16;
    }
LABEL_28:
    v13 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_16;
  }
  if (!(_DWORD)result)
    goto LABEL_28;
  if (result > 0x7FFFFFEF)
    goto LABEL_29;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v30);
  v13 = v30;
  if (v30)
  {
    v21 = (char *)(v30 + 5);
    *v30 = 2;
    v13[1] = v11;
    *((_QWORD *)v13 + 1) = v13 + 5;
    v13[4] = 0;
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v21, a3, a4, a5, a6);
  }
LABEL_16:
  *a7 = v13;
  return result;
}

unint64_t WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  const void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(const void **)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<WTF::String,4ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    memcpy(*(void **)a1, v3, 8 * v4);
    if ((const void *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(const void **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  return 1;
}

uint64_t WTF::VectorBuffer<WTF::String,4ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = result;
  if (a2 < 5)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 4;
    return 1;
  }
  v3 = a2;
  if (!(a2 >> 29))
  {
    v4 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v4;
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<JSC::Element,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v14 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 > a2)
      a2 = v15;
    WTF::Vector<JSC::Element,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v11 = a3 - v10;
    v12 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 > a2)
      a2 = v13;
    WTF::Vector<JSC::Element,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v11;
  }
  return v8;
}

void WTF::Vector<JSC::Element,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (*(unsigned int *)(a1 + 8) >= a2)
    return;
  v8 = a2;
  v10 = *(_QWORD *)a1;
  v11 = *(unsigned int *)(a1 + 12);
  if (a2 >= 2)
  {
    if (a2 >> 27)
    {
      __break(0xC471u);
      return;
    }
    v12 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v12;
    if (!(_DWORD)v11)
      goto LABEL_16;
    goto LABEL_7;
  }
  v12 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 1;
  if ((_DWORD)v11)
  {
LABEL_7:
    v13 = v10 + 32 * v11;
    v14 = v10;
    do
    {
      *(_WORD *)v12 = *(_WORD *)v14;
      v15 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v12 + 8) = v15;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v12 + 24) = v16;
      v17 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v14 + 24) = 0;
      if (v17)
        unumf_closeResult();
      v18 = *(WTF::StringImpl **)(v14 + 8);
      *(_QWORD *)(v14 + 8) = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::~StringImpl(v18, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
        }
        else
        {
          *(_DWORD *)v18 -= 2;
        }
      }
      v14 += 32;
      v12 += 32;
    }
    while (v14 != v13);
  }
LABEL_16:
  if (a1 + 16 != v10 && v10 != 0)
  {
    if (*(_QWORD *)a1 == v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

char *WTF::Vector<WTF::Vector<JSC::Element,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  WTF::AtomStringImpl *v10;
  WTF::AtomStringImpl *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v8 = a3;
  v10 = *(WTF::AtomStringImpl **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = (WTF::AtomStringImpl *)((char *)v10 + 48 * *(unsigned int *)(a1 + 12));
    if ((unint64_t)v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= a2)
        v14 = a2;
      if (v14 <= v12)
      {
        v30 = *(WTF::AtomStringImpl **)a1;
        return (char *)v30 + 16 * ((uint64_t)(v8 - (_QWORD)v10) >> 4);
      }
      if (v14 < 5)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 4;
        goto LABEL_29;
      }
      if (v14 < 0x5555556)
      {
        v15 = 48 * v14;
        v16 = WTF::fastMalloc((WTF *)(48 * v14));
        *(_DWORD *)(a1 + 8) = (v15 & 0xFFFFFFF0) / 0x30;
        *(_QWORD *)a1 = v16;
LABEL_29:
        WTF::VectorMover<false,WTF::Vector<JSC::Element,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(v10, v11, v16, a4, a5, a6, a7, a8);
        v30 = *(WTF::AtomStringImpl **)a1;
        if ((WTF::AtomStringImpl *)(a1 + 16) != v10 && v10)
        {
          if (v30 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v10, v31, v32, v33, v34, v35, v36, v37);
          v30 = *(WTF::AtomStringImpl **)a1;
        }
        return (char *)v30 + 16 * ((uint64_t)(v8 - (_QWORD)v10) >> 4);
      }
LABEL_36:
      __break(0xC471u);
      JUMPOUT(0x197E22714);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= a2)
    v19 = a2;
  if (v19 > v17)
  {
    v20 = *(_DWORD *)(a1 + 12);
    if (v19 < 5)
    {
      v22 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
    }
    else
    {
      if (v19 >= 0x5555556)
        goto LABEL_36;
      v21 = 48 * v19;
      v22 = WTF::fastMalloc((WTF *)(48 * v19));
      *(_DWORD *)(a1 + 8) = (v21 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v22;
    }
    WTF::VectorMover<false,WTF::Vector<JSC::Element,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(v10, (WTF::AtomStringImpl *)((char *)v10 + 48 * v20), v22, a4, a5, a6, a7, a8);
    if ((WTF::AtomStringImpl *)(a1 + 16) != v10 && v10)
    {
      if (*(WTF::AtomStringImpl **)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v10, v23, v24, v25, v26, v27, v28, v29);
    }
  }
  return (char *)v8;
}

void WTF::VectorMover<false,WTF::Vector<JSC::Element,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(WTF::AtomStringImpl *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  unint64_t StatusReg;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (a1 != a2)
  {
    v8 = a3;
    v9 = a1;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      *(_QWORD *)v8 = v8 + 16;
      *(_QWORD *)(v8 + 8) = 1;
      v11 = (uint64_t)v9 + 16;
      v12 = *(_QWORD *)v9;
      if (*(WTF::AtomStringImpl **)v9 == (WTF::AtomStringImpl *)((char *)v9 + 16))
      {
        v24 = *((unsigned int *)v9 + 3);
        if ((_DWORD)v24)
        {
          v25 = 0;
          v26 = v12 + 32 * v24;
          do
          {
            v27 = v8 + v25;
            v28 = v12 + v25;
            *(_WORD *)(v27 + 16) = *(_WORD *)(v12 + v25);
            v29 = *(_QWORD *)(v12 + v25 + 8);
            *(_QWORD *)(v28 + 8) = 0;
            *(_QWORD *)(v27 + 24) = v29;
            *(_QWORD *)(v27 + 32) = *(_QWORD *)(v12 + v25 + 16);
            v30 = *(_QWORD *)(v12 + v25 + 24);
            *(_QWORD *)(v28 + 24) = 0;
            *(_QWORD *)(v27 + 40) = v30;
            v31 = *(_QWORD *)(v12 + v25 + 24);
            *(_QWORD *)(v28 + 24) = 0;
            if (v31)
              unumf_closeResult();
            v32 = *(WTF::StringImpl **)(v28 + 8);
            *(_QWORD *)(v28 + 8) = 0;
            if (v32)
            {
              if (*(_DWORD *)v32 == 2)
              {
                WTF::StringImpl::~StringImpl(v32, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
              }
              else
              {
                *(_DWORD *)v32 -= 2;
              }
            }
            v25 += 32;
          }
          while (v28 + 32 != v26);
        }
      }
      else
      {
        *(_QWORD *)v9 = v11;
        *(_QWORD *)v8 = v12;
        v13 = *((_DWORD *)v9 + 2);
        *((_DWORD *)v9 + 2) = 1;
        *(_DWORD *)(v8 + 8) = v13;
      }
      v14 = *((_DWORD *)v9 + 3);
      *((_DWORD *)v9 + 3) = 0;
      *(_DWORD *)(v8 + 12) = v14;
      v15 = *((unsigned int *)v9 + 3);
      v16 = *(_QWORD *)v9;
      if ((_DWORD)v15)
        break;
LABEL_26:
      if (v11 != v16 && v16 != 0)
      {
        *(_QWORD *)v9 = 0;
        *((_DWORD *)v9 + 2) = 0;
        WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
      }
      v8 += 48;
      v9 = (WTF::AtomStringImpl *)((char *)v9 + 48);
      if (v9 == a2)
        return;
    }
    v17 = 32 * v15;
    v18 = (uint64_t *)(v16 + 24);
    while (1)
    {
      v19 = *v18;
      *v18 = 0;
      if (v19)
        unumf_closeResult();
      v20 = *(v18 - 2);
      *(v18 - 2) = 0;
      if (!v20)
        goto LABEL_12;
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, a2, a3, a4, a5, a6, a7, a8);
        v21 = *(_QWORD *)(StatusReg + 752);
        if (v21)
        {
          if (!(v20 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v20 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v20)) & 1) != 0)
          {
LABEL_17:
            v22 = *(unsigned int *)(v21 + 8000);
            if (v22 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v21, v20, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v21 + 8 * v22) = v20 | 0x5000000000000;
              *(_DWORD *)(v21 + 8000) = v22 + 1;
            }
            goto LABEL_12;
          }
          if (v20 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v20 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v20 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v20) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_17;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v21, v20, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v20, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
      else
      {
        *(_DWORD *)v20 -= 2;
      }
LABEL_12:
      v18 += 4;
      v17 -= 32;
      if (!v17)
      {
        v16 = *(_QWORD *)v9;
        goto LABEL_26;
      }
    }
  }
}

uint64_t JSC::IntlListFormat::destroy(JSC::IntlListFormat *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  uint64_t result;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  result = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
    return ulistfmt_close();
  return result;
}

uint64_t JSC::UListFormatterDeleter::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return ulistfmt_close();
  return result;
}

unint64_t JSC::IntlListFormat::create(JSC::IntlListFormat *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t result;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = (_QWORD *)*((_QWORD *)this + 5071);
  if (!v10)
    v10 = (_QWORD *)JSC::GCClient::Heap::intlListFormatSpaceSlow((JSC::Heap **)this + 4694);
  result = v10[3];
  if (result < v10[4])
    goto LABEL_4;
  result = v10[5];
  if ((result & 1) == 0)
  {
    v13 = *(_QWORD *)(result + 8) ^ v10[6];
    v10[4] = result + HIDWORD(v13);
    v10[5] = result + (int)v13;
LABEL_4:
    v10[3] = result + 48;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v10, (uint64_t)this + 192, 48, 0, 0, v14, v15, v16);
LABEL_5:
  *(_DWORD *)result = 0;
  v12 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v12;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 32) = 256;
  *(_QWORD *)(result + 24) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::IntlListFormat::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlListFormat::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::IntlListFormat::initializeListFormat(uint64_t a1, unint64_t a2, unint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::Symbol *v9;
  JSC::VM *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  JSC *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  const char *v43;
  unint64_t v44;
  uint64_t v45;
  const WTF::String *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int8x16_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int *v94;
  int v95;
  WTF::StringImpl *v96;
  char v97;
  uint64_t v98;
  unint64_t v99;
  int8x16_t v100;
  int *v101;
  int v102;
  WTF::StringImpl *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  JSC::Heap **v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  JSC::Exception *v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  unint64_t v136;
  JSC::Heap **v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  double v144;
  JSC::Exception *v145;
  WTF::StringImpl *v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  uint64_t (*v168)(uint64_t *);
  uint64_t *v169;
  uint64_t (*v170)(uint64_t *);
  uint64_t *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  JSC::VM *v175;
  char v176;
  char v177;
  char v178;
  char v179;
  char v180;
  char v181;
  char v182;
  char v183;
  char v184;
  char v185;
  char v186;
  WTF *v187;
  int v188;
  unsigned int v189;
  JSC::VM *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  const char *v197;
  uint64_t v198;
  _BYTE v199[8];
  const char *v200;
  uint64_t v201;
  char v202;
  const char *v203;
  uint64_t v204;
  char v205;
  uint64_t v206;

  v9 = a4;
  v206 = *MEMORY[0x1E0C80C00];
  v190 = *(JSC::VM **)(a2 + 56);
  v12 = v190;
  JSC::canonicalizeLocaleList(a2, a3, a3, a4, a5, a6, a7, a8, &v187, a9);
  if (*((_DWORD *)v12 + 20))
  {
    v90 = *((_DWORD *)v12 + 20);
    if ((v90 & 0x27) != 0 && (v90 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*((_QWORD *)v12 + 2))
      goto LABEL_23;
  }
  v175 = *(JSC::VM **)(a2 + 56);
  if (v9 != (JSC::Symbol *)10)
  {
    if (((unint64_t)v9 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v9 + 5) > 0x16u)
      goto LABEL_6;
    JSC::throwTypeError(a2, &v175, (uint64_t)"options argument is not an object or undefined", 47);
  }
  v9 = 0;
LABEL_6:
  if (!*((_DWORD *)v12 + 20))
    goto LABEL_7;
  v91 = *((_DWORD *)v12 + 20);
  if ((v91 & 0x27) != 0 && (v91 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, v14, v15, v16, v17, v18, v19);
  if (!*((_QWORD *)v12 + 2))
  {
LABEL_7:
    LOBYTE(v175) = 0;
    v176 = 0;
    v177 = 0;
    v178 = 0;
    v179 = 0;
    v180 = 0;
    v181 = 0;
    v182 = 0;
    v183 = 0;
    v184 = 0;
    v185 = 0;
    v186 = 0;
    v20 = (char *)v12 + 41952;
    v21 = *(_QWORD *)(*((_QWORD *)v12 + 5244) + 1792);
    v197 = "lookup";
    v198 = 7;
    v199[0] = 0;
    v200 = "best fit";
    v201 = 9;
    v202 = 1;
    v22 = (JSC *)JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)a2, (unsigned int *)v9, v21, (uint64_t)&v197, 2, (unint64_t)"localeMatcher must be either \"lookup\" or \"best fit\"", 52, 1);
    v30 = (uint64_t)v22;
    if (*((_DWORD *)v12 + 20))
    {
      v92 = *((_DWORD *)v12 + 20);
      if ((v92 & 0x27) != 0 && (v92 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, v24, v25, v26, v27, v28, v29);
      if (*((_QWORD *)v12 + 2))
        goto LABEL_22;
    }
    v31 = JSC::intlAvailableLocales(v22);
    JSC::resolveLocale((JSC *)a2, (const WTF::StringImpl *)v31, (uint64_t)&v187, v30, (uint64_t)&v175, 0, 0, (uint64_t)JSC::IntlListFormat::initializeListFormat(JSC::JSGlobalObject *,JSC::JSValue,JSC::JSValue)::$_0::__invoke, (uint64_t)&v172);
    v40 = (WTF::StringImpl **)(a1 + 24);
    v41 = v172;
    if (v172)
      *(_DWORD *)v172 += 2;
    v42 = *v40;
    *v40 = v41;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
      {
        WTF::StringImpl::~StringImpl(v42, v32, v33, v34, v35, v36, v37, v38);
        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
        v41 = *v40;
        if (!*v40)
          goto LABEL_14;
        goto LABEL_28;
      }
      *(_DWORD *)v42 -= 2;
    }
    if (!v41)
    {
LABEL_14:
      v43 = "failed to initialize ListFormat due to invalid locale";
      v44 = a2;
      v45 = 54;
      goto LABEL_15;
    }
LABEL_28:
    if (!*((_DWORD *)v41 + 1))
      goto LABEL_14;
    v46 = *(const WTF::String **)(*(_QWORD *)v20 + 2560);
    v197 = "conjunction";
    v198 = 12;
    v199[0] = 0;
    v200 = "disjunction";
    v201 = 12;
    v202 = 1;
    v203 = "unit";
    v204 = 5;
    v205 = 2;
    if (!v9)
      goto LABEL_32;
    v58 = *(_QWORD *)(a2 + 56);
    v59 = JSC::JSObject::get((unsigned int *)v9, a2, (unint64_t)v46, v34, v35, v36, v37, v38);
    v61 = v59;
    v193 = v59;
    if (*(_DWORD *)(v58 + 80))
    {
      v93 = *(_DWORD *)(v58 + 80);
      if ((v93 & 0x27) != 0 && (v93 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v58 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
      v62 = 0;
      if (*(_QWORD *)(v58 + 16) || v61 == 10)
      {
LABEL_72:
        *(_BYTE *)(a1 + 32) = v62;
        if (*((_DWORD *)v12 + 20))
        {
          v163 = *((_DWORD *)v12 + 20);
          if ((v163 & 0x27) != 0 && (v163 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
          if (*((_QWORD *)v12 + 2))
            goto LABEL_16;
        }
        v46 = *(const WTF::String **)(*(_QWORD *)v20 + 2384);
        v197 = "long";
        v198 = 5;
        v97 = 1;
        v199[0] = 1;
        v200 = "short";
        v201 = 6;
        v202 = 0;
        v203 = "narrow";
        v204 = 7;
        v205 = 2;
        if (!v9)
          goto LABEL_94;
        v98 = *(_QWORD *)(a2 + 56);
        v99 = JSC::JSObject::get((unsigned int *)v9, a2, (unint64_t)v46, v34, v35, v36, v37, v38);
        v193 = v99;
        if (*(_DWORD *)(v98 + 80))
        {
          v165 = *(_DWORD *)(v98 + 80);
          if ((v165 & 0x27) != 0 && (v165 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v98 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
          if (*(_QWORD *)(v98 + 16))
          {
            v97 = 0;
            goto LABEL_94;
          }
        }
        if (v99 == 10)
        {
          v97 = 1;
LABEL_94:
          *(_BYTE *)(a1 + 33) = v97;
          if (*((_DWORD *)v12 + 20))
          {
            v164 = *((_DWORD *)v12 + 20);
            if ((v164 & 0x27) != 0 && (v164 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
            if (*((_QWORD *)v12 + 2))
              goto LABEL_16;
          }
          LODWORD(v194) = 0;
          WTF::String::utf8((uint64_t *)(a1 + 24), 0, v34, v35, v36, v37, v38, &v197, v39);
          v104 = v197;
          v105 = ulistfmt_openForType();
          v106 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v105;
          if (v106)
            ulistfmt_close();
          if (v104)
          {
            if (*(_DWORD *)v104 == 1)
              WTF::fastFree((unint64_t)v104, v32, (uint64_t)v46, v34, v35, v36, v37, v38);
            else
              --*(_DWORD *)v104;
          }
          if ((int)v194 < 1)
            goto LABEL_16;
          v43 = "failed to initialize ListFormat";
          v44 = a2;
          v45 = 32;
LABEL_15:
          JSC::throwTypeError(v44, &v190, (uint64_t)v43, v45);
LABEL_16:
          std::array<WTF::String,6ul>::~array(&v174, v32, (uint64_t)v46, v34, v35, v36, v37, v38);
          v47 = v173;
          v173 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
            {
              WTF::StringImpl::~StringImpl(v47, v23, v24, v25, v26, v27, v28, v29);
              WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
            }
            else
            {
              *(_DWORD *)v47 -= 2;
            }
          }
          v48 = v172;
          v172 = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
            {
              WTF::StringImpl::~StringImpl(v48, v23, v24, v25, v26, v27, v28, v29);
              WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
            }
            else
            {
              *(_DWORD *)v48 -= 2;
            }
          }
LABEL_22:
          std::array<std::optional<WTF::String>,6ul>::~array((uint64_t)&v175, v23, v24, v25, v26, v27, v28, v29);
          goto LABEL_23;
        }
        if ((v99 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v99 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v193, (JSC::JSGlobalObject *)a2, v46, v34, v35, v36, v37, v38, (int **)&v192);
          goto LABEL_83;
        }
        v101 = *(int **)(v99 + 8);
        if ((v101 & 1) != 0)
        {
          v101 = *JSC::JSRopeString::resolveRope(v99, (JSC::JSGlobalObject *)a2, (uint64_t)v46, v34, v100, v35, v36, v37, v38);
          if (!v101)
            goto LABEL_82;
        }
        else if (!v101)
        {
LABEL_82:
          v192 = (WTF::StringImpl *)v101;
LABEL_83:
          if (!*(_DWORD *)(v98 + 80))
            goto LABEL_84;
          v167 = *(_DWORD *)(v98 + 80);
          if ((v167 & 0x27) != 0 && (v167 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v98 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
          if (!*(_QWORD *)(v98 + 16))
          {
LABEL_84:
            if (WTF::equalInternal<unsigned char>((uint64_t)v192, (unint64_t)"long", 4))
            {
              v102 = 0;
LABEL_90:
              v97 = v199[24 * v102];
              goto LABEL_91;
            }
            if (WTF::equalInternal<unsigned char>((uint64_t)v192, (unint64_t)"short", 5))
            {
              v102 = 1;
              goto LABEL_90;
            }
            if (WTF::equalInternal<unsigned char>((uint64_t)v192, (unint64_t)"narrow", 6))
            {
              v102 = 2;
              goto LABEL_90;
            }
            v135 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v135 = 0x3100000002;
            *(_QWORD *)(v135 + 8) = "style must be either \"long\", \"short\", or \"narrow\"";
            *(_DWORD *)(v135 + 16) = 4;
            v191 = (WTF::StringImpl *)v135;
            v136 = *(_QWORD *)(a2 + 128);
            v137 = *(JSC::Heap ***)(a2 + 56);
            if ((v136 & 1) != 0)
            {
              v170 = *(uint64_t (**)(uint64_t *))(v136 & 0xFFFFFFFFFFFFFFFCLL);
              if ((a2 & 8) != 0)
                v171 = (uint64_t *)(a2 - 16);
              else
                v171 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
              v194 = *v171;
              v195 = a2;
              v196 = a2 + 128;
              v136 = v170(&v194);
            }
            v138 = JSC::ErrorInstance::create(v137, v136, &v191, 0, 0, 0, 2, 1);
            v145 = (JSC::Exception *)v138;
            if ((v138 & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v138 & 0xFFFFFFFE) + 0x4C)))
            {
              v145 = (JSC::Exception *)JSC::Exception::create(v98, (JSC::VM *)v138, 0, v139, v140, v141, v142, v143);
            }
            JSC::VM::throwException((JSC::VM *)v98, (JSC::JSGlobalObject *)a2, v145, v144, v139, v140, v141, v142, v143);
            v146 = v191;
            v191 = 0;
            if (v146)
            {
              if (*(_DWORD *)v146 == 2)
              {
                WTF::StringImpl::~StringImpl(v146, v32, (uint64_t)v46, v34, v35, v36, v37, v38);
                WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
              }
              else
              {
                *(_DWORD *)v146 -= 2;
              }
            }
          }
          v97 = 0;
LABEL_91:
          v103 = v192;
          v192 = 0;
          if (v103)
          {
            if (*(_DWORD *)v103 == 2)
            {
              WTF::StringImpl::~StringImpl(v103, v32, (uint64_t)v46, v34, v35, v36, v37, v38);
              WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
            }
            else
            {
              *(_DWORD *)v103 -= 2;
            }
          }
          goto LABEL_94;
        }
        *v101 += 2;
        goto LABEL_82;
      }
    }
    else if (v59 == 10)
    {
LABEL_32:
      v62 = 0;
      goto LABEL_72;
    }
    if ((v61 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v61 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v193, (JSC::JSGlobalObject *)a2, v46, v34, v35, v36, v37, v38, (int **)&v192);
      goto LABEL_61;
    }
    v94 = *(int **)(v61 + 8);
    if ((v94 & 1) != 0)
    {
      v94 = *JSC::JSRopeString::resolveRope(v61, (JSC::JSGlobalObject *)a2, (uint64_t)v46, v34, v60, v35, v36, v37, v38);
      if (!v94)
        goto LABEL_60;
    }
    else if (!v94)
    {
LABEL_60:
      v192 = (WTF::StringImpl *)v94;
LABEL_61:
      if (!*(_DWORD *)(v58 + 80))
        goto LABEL_62;
      v166 = *(_DWORD *)(v58 + 80);
      if ((v166 & 0x27) != 0 && (v166 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v58 + 64), 7u, (uint64_t)v46, v34, v35, v36, v37, v38);
      if (!*(_QWORD *)(v58 + 16))
      {
LABEL_62:
        if (WTF::equalInternal<unsigned char>((uint64_t)v192, (unint64_t)"conjunction", 11))
        {
          v95 = 0;
LABEL_68:
          v62 = v199[24 * v95];
          goto LABEL_69;
        }
        if (WTF::equalInternal<unsigned char>((uint64_t)v192, (unint64_t)"disjunction", 11))
        {
          v95 = 1;
          goto LABEL_68;
        }
        if (WTF::equalInternal<unsigned char>((uint64_t)v192, (unint64_t)"unit", 4))
        {
          v95 = 2;
          goto LABEL_68;
        }
        v123 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v123 = 0x3B00000002;
        *(_QWORD *)(v123 + 8) = "type must be either \"conjunction\", \"disjunction\", or \"unit\"";
        *(_DWORD *)(v123 + 16) = 4;
        v191 = (WTF::StringImpl *)v123;
        v124 = *(_QWORD *)(a2 + 128);
        v125 = *(JSC::Heap ***)(a2 + 56);
        if ((v124 & 1) != 0)
        {
          v168 = *(uint64_t (**)(uint64_t *))(v124 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a2 & 8) != 0)
            v169 = (uint64_t *)(a2 - 16);
          else
            v169 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
          v194 = *v169;
          v195 = a2;
          v196 = a2 + 128;
          v124 = v168(&v194);
        }
        v126 = JSC::ErrorInstance::create(v125, v124, &v191, 0, 0, 0, 2, 1);
        v133 = (JSC::Exception *)v126;
        if ((v126 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v126 & 0xFFFFFFFE) + 0x4C)))
        {
          v133 = (JSC::Exception *)JSC::Exception::create(v58, (JSC::VM *)v126, 0, v127, v128, v129, v130, v131);
        }
        JSC::VM::throwException((JSC::VM *)v58, (JSC::JSGlobalObject *)a2, v133, v132, v127, v128, v129, v130, v131);
        v134 = v191;
        v191 = 0;
        if (v134)
        {
          if (*(_DWORD *)v134 == 2)
          {
            WTF::StringImpl::~StringImpl(v134, v32, (uint64_t)v46, v34, v35, v36, v37, v38);
            WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
          }
          else
          {
            *(_DWORD *)v134 -= 2;
          }
        }
      }
      v62 = 0;
LABEL_69:
      v96 = v192;
      v192 = 0;
      if (v96)
      {
        if (*(_DWORD *)v96 == 2)
        {
          WTF::StringImpl::~StringImpl(v96, v32, (uint64_t)v46, v34, v35, v36, v37, v38);
          WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
        }
        else
        {
          *(_DWORD *)v96 -= 2;
        }
      }
      goto LABEL_72;
    }
    *v94 += 2;
    goto LABEL_60;
  }
LABEL_23:
  if (v189)
  {
    v79 = v187;
    v80 = 8 * v189;
    do
    {
      v81 = *(WTF::StringImpl **)v79;
      *(_QWORD *)v79 = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
        {
          WTF::StringImpl::~StringImpl(v81, v13, v14, v15, v16, v17, v18, v19);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
        }
        else
        {
          *(_DWORD *)v81 -= 2;
        }
      }
      v79 = (WTF *)((char *)v79 + 8);
      v80 -= 8;
    }
    while (v80);
  }
  v49 = v187;
  if (v187)
  {
    v187 = 0;
    v188 = 0;
    WTF::fastFree((unint64_t)v49, v13, v14, v15, v16, v17, v18, v19);
  }
}

uint64_t JSC::IntlListFormat::format(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int *v24;
  _WORD *v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl *v48;
  WTF *v49;
  int v50;
  unsigned int v51;
  _WORD v52[32];
  _BYTE v53[48];
  WTF *v54;
  int v55;
  uint64_t v56;
  WTF *v57;
  int v58;
  uint64_t v59;
  _QWORD v60[6];
  uint64_t v61;

  v61 = *(_QWORD *)(a3 + 56);
  v9 = v61;
  JSC::stringListFromIterable(v60, a3, a4, a5, a6, a7, a8, a9, a1);
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_2;
  v47 = *(_DWORD *)(v9 + 80);
  if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v11, v12, v13, v14, v15, v16);
  if (*(_QWORD *)(v9 + 16))
  {
    v33 = 0;
  }
  else
  {
LABEL_2:
    JSC::ListFormatInput::ListFormatInput((uint64_t)v53, (uint64_t)v60);
    v49 = (WTF *)v52;
    v50 = 32;
    LODWORD(v48) = 0;
    v23 = ulistfmt_format();
    v51 = v23;
    if (v52)
    {
      if (v23)
      {
        if (v23 >= 0x7FFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x197E23A14);
        }
        v24 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v23 + 20));
        v25 = v24 + 5;
        *v24 = 2;
        v24[1] = v23;
        *((_QWORD *)v24 + 1) = v24 + 5;
        v24[4] = 0;
        if (v23 == 1)
          *v25 = v52[0];
        else
          memcpy(v25, v52, 2 * v23);
      }
      else
      {
        v24 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
    }
    else
    {
      v24 = 0;
    }
    v48 = (WTF::StringImpl *)v24;
    v33 = JSC::jsString(v9, (JSC::VM *)&v48, v17, v18, v19, v20, v21, v22);
    v34 = v48;
    v48 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl(v34, v26, v27, v28, v29, v30, v31, v32);
        WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
    }
    v35 = v49;
    if (v52 != (_WORD *)v49 && v49)
    {
      v49 = 0;
      v50 = 0;
      WTF::fastFree((unint64_t)v35, v26, v27, v28, v29, v30, v31, v32);
    }
    v36 = v57;
    if (&v59 != (uint64_t *)v57 && v57)
    {
      v57 = 0;
      v58 = 0;
      WTF::fastFree((unint64_t)v36, v26, v27, v28, v29, v30, v31, v32);
    }
    v37 = v54;
    if (&v56 != (uint64_t *)v54 && v54)
    {
      v54 = 0;
      v55 = 0;
      WTF::fastFree((unint64_t)v37, v26, v27, v28, v29, v30, v31, v32);
    }
    WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v53, v26, v27, v28, v29, v30, v31, v32);
  }
  WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v60, v10, v11, v12, v13, v14, v15, v16);
  return v33;
}

void JSC::stringListFromIterable(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t i;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t Index;
  int8x16_t v27;
  int v28;
  int v29;
  JSC::VM *v30;
  JSC::VM *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int8x16_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  _BOOL4 v68;
  _QWORD *v69;

  *a1 = a1 + 2;
  a9.i64[0] = 4;
  a1[1] = 4;
  if (a3 != 10)
  {
    v69 = a1;
    v11 = *(_QWORD *)(a2 + 56);
    if ((a3 & 0xFFFE000000000002) != 0
      || *(_BYTE *)(a3 + 5) != 36
      || ((v12 = *(unsigned __int8 *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 8), (v12 & 0x10) != 0)
        ? (v13 = ((v12 & 0xE) + 10) >> 1)
        : (v13 = (v12 >> 1) & 7),
          (v14 = *(_DWORD *)(a2 + 4 * v13 + 852)) != 0 ? (v15 = 16 * (v14 & 0xFFFFFFFE)) : (v15 = 0),
          v15 != 16 * (*(_DWORD *)a3 & 0xFFFFFFFE)
       || ((v16 = *(_QWORD *)(a2 + 2216), (v16 & 1) != 0)
         ? (v17 = (v16 >> 1) & 3)
         : (v17 = *(unsigned __int8 *)(v16 + 4)),
           v17 == 2)))
    {
      v38 = JSC::iteratorForIterable((JSC::VM **)a2, a3, a3, a4, a5, a6, a7, a8, a9);
      v44 = v43;
      if (!*(_DWORD *)(v11 + 80))
        goto LABEL_55;
      v67 = *(_DWORD *)(v11 + 80);
      if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v41, v42, v34, v35, v36, v37);
      if (!*(_QWORD *)(v11 + 16))
      {
LABEL_55:
        while (1)
        {
          v45 = *(_QWORD *)(a2 + 56);
          v52 = JSC::iteratorNext((JSC::JSGlobalObject *)a2, v38, v44, 0, v34, v35, v36, v37);
          if (*(_DWORD *)(v45 + 80))
          {
            v64 = *(_DWORD *)(v45 + 80);
            if ((v64 & 0x27) != 0 && (v64 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v45 + 64), 7u, v46, v47, v48, v49, v50, v51);
            if (*(_QWORD *)(v45 + 16))
              goto LABEL_53;
          }
          v54 = JSC::iteratorComplete((JSC::JSGlobalObject *)a2, v52, v46, v47, v48, v49, v50, v51, v53);
          if (!*(_DWORD *)(v45 + 80))
            goto LABEL_40;
          v68 = v54;
          v65 = *(_DWORD *)(v45 + 80);
          if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v45 + 64), 7u, v46, v47, v48, v49, v50, v51);
          v54 = v68;
          if (*(_QWORD *)(v45 + 16))
LABEL_53:
            v55 = 0;
          else
LABEL_40:
            v55 = v54 ? 6 : v52;
          if (*(_QWORD *)(v11 + 16) || v55 == 6)
            break;
          v62 = JSC::iteratorValue((JSC::JSGlobalObject *)a2, v55, v46, v47, v48, v49, v50, v51, v53);
          if (*(_DWORD *)(v11 + 80))
          {
            v66 = *(_DWORD *)(v11 + 80);
            if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v56, v57, v58, v59, v60, v61);
            if (*(_QWORD *)(v11 + 16))
              break;
          }
          JSC::stringListFromIterable(JSC::JSGlobalObject *,JSC::JSValue)::$_0::operator()((uint64_t *)&v69, v11, (JSC::JSGlobalObject *)a2, v62, v58, v59, v60, v61, v63);
          if (*(_QWORD *)(v11 + 16))
          {
LABEL_36:
            JSC::iteratorClose((JSC::JSGlobalObject *)a2, v38, v32, v33, v34, v35, v36, v37, v39);
            return;
          }
        }
      }
    }
    else
    {
      for (i = 0; ; ++i)
      {
        v19 = (*(_BYTE *)(a3 + 4) & 0xE) != 0 ? *(unsigned int *)(*(_QWORD *)(a3 + 8) - 8) : 0;
        if (i >= v19)
          break;
        Index = JSC::JSObject::getIndex((JSC::JSObject *)a3, (JSC::JSGlobalObject *)a2, i, a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v11 + 80))
        {
          v28 = *(_DWORD *)(v11 + 80);
          if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v20, v21, v22, v23, v24, v25);
          if (*(_QWORD *)(v11 + 16))
            break;
        }
        JSC::stringListFromIterable(JSC::JSGlobalObject *,JSC::JSValue)::$_0::operator()((uint64_t *)&v69, v11, (JSC::JSGlobalObject *)a2, Index, v22, v23, v24, v25, v27);
        if (*(_QWORD *)(v11 + 16))
        {
          v29 = *(_DWORD *)(a2 + 1000);
          if (v29)
            v30 = (JSC::VM *)(16 * (v29 & 0xFFFFFFFE));
          else
            v30 = 0;
          v31 = JSC::JSArrayIterator::create(v11, v30, a3, 0xFFFE000000000001, a5, a6, a7, a8);
          v38 = (uint64_t)v31;
          *(double *)v39.i64 = (double)(i + 1);
          if ((int)i + 1 < 0)
            v40 = COERCE__INT64((double)(i + 1)) + 0x2000000000000;
          else
            v40 = (i + 1) | 0xFFFE000000000000;
          *((_QWORD *)v31 + 2) = v40;
          goto LABEL_36;
        }
      }
    }
  }
}

unint64_t JSC::IntlListFormat::formatToParts(int8x16_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::VM *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  JSC::JSGlobalObject *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  JSC::VM *v69;
  WTF::StringImpl *v70;
  char Position;
  JSC::JSGlobalObject *v72;
  unint64_t OutOfMemoryError;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  JSC::Exception *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __n128 v93;
  int v94;
  int v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112[2];
  int v113;
  int v114;
  _BYTE v115[48];
  WTF *v116;
  int v117;
  uint64_t v118;
  WTF *v119;
  int v120;
  uint64_t v121;
  _QWORD v122[6];
  JSC::VM *v123;
  JSC::VM **v124;

  v123 = *(JSC::VM **)(a3 + 56);
  v9 = v123;
  v124 = (JSC::VM **)a3;
  JSC::stringListFromIterable(v122, a3, a4, a5, a6, a7, a8, a9, a1);
  if (!*((_DWORD *)v9 + 20))
    goto LABEL_2;
  v95 = *((_DWORD *)v9 + 20);
  if ((v95 & 0x27) != 0 && (v95 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v9 + 64), 7u, v11, v12, v13, v14, v15, v16);
  if (*((_QWORD *)v9 + 2))
  {
    v38 = 0;
  }
  else
  {
LABEL_2:
    JSC::ListFormatInput::ListFormatInput((uint64_t)v115, (uint64_t)v122);
    v114 = 0;
    v17 = ulistfmt_openResult();
    ulistfmt_formatStringsToResult();
    ulistfmt_resultAsValue();
    v34 = *((_DWORD *)v124 + 227);
    if (v34)
      v35 = 16 * (v34 & 0xFFFFFFFE);
    else
      v35 = 0;
    v36 = JSC::JSArray::tryCreate(v9, v35, 0, v28, v29, v30, v31, v32, v33);
    if (v36)
    {
      v38 = v36;
      v113 = 0;
      ufmtval_getString();
      v39 = ucfpos_open();
      ucfpos_constrainField();
      v40 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v40 = 0x700000002;
      *(_QWORD *)(v40 + 8) = "literal";
      *(_DWORD *)(v40 + 16) = 4;
      v112[0] = (WTF::StringImpl *)v40;
      JSC::jsNontrivialString((uint64_t)v9, (JSC::VM *)v112, v41, v42, v43, v44, v45, v46);
      v54 = v112[0];
      v112[0] = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          WTF::StringImpl::~StringImpl(v54, v47, v48, v49, v50, v51, v52, v53);
          WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
        }
        else
        {
          *(_DWORD *)v54 -= 2;
        }
      }
      v55 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v55 = 0x700000002;
      *(_QWORD *)(v55 + 8) = "element";
      *(_DWORD *)(v55 + 16) = 4;
      v112[0] = (WTF::StringImpl *)v55;
      v69 = (JSC::VM *)JSC::jsNontrivialString((uint64_t)v9, (JSC::VM *)v112, v56, v57, v58, v59, v60, v61);
      v70 = v112[0];
      v112[0] = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
        {
          WTF::StringImpl::~StringImpl(v70, v62, v63, v64, v65, v66, v67, v68);
          WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
        }
        else
        {
          *(_DWORD *)v70 -= 2;
        }
      }
      v112[0] = (WTF::StringImpl *)&v124;
      v112[1] = v9;
      Position = ufmtval_nextPosition();
      if (v114 <= 0)
      {
        while (Position)
        {
          ucfpos_getIndexes();
          if (v114 >= 1)
            goto LABEL_24;
          v81 = JSC::jsString((uint64_t)v9, "", 0x100000000);
          v87 = JSC::IntlDurationFormat::formatToParts(JSC::JSGlobalObject *,JSC::ISO8601::Duration)const::$_0::operator()((uint64_t **)v112, v69, v81, v82, v83, v84, v85, v86);
          JSC::JSArray::push(v38, v124, v87, v88, v89, v90, v91, v92, v93);
          if (*((_DWORD *)v9 + 20))
          {
            v94 = *((_DWORD *)v9 + 20);
            if ((v94 & 0x27) != 0 && (v94 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VM *)((char *)v9 + 64), 7u, v19, v20, v21, v22, v23, v24);
            if (*((_QWORD *)v9 + 2))
            {
              v38 = 0;
              break;
            }
          }
          Position = ufmtval_nextPosition();
          if (v114 >= 1)
            goto LABEL_24;
        }
      }
      else
      {
LABEL_24:
        v38 = JSC::throwTypeError((unint64_t)v124, &v123, (uint64_t)"failed to format list of strings", 33);
      }
      if (v39)
        ucfpos_close();
    }
    else
    {
      v72 = (JSC::JSGlobalObject *)v124;
      OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)v124, v37);
      v80 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v80 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, (JSC::VM *)OutOfMemoryError, 0, v74, v75, v76, v77, v78);
      }
      v38 = (unint64_t)JSC::VM::throwException(v9, v72, v80, v79, v74, v75, v76, v77, v78);
    }
    if (v17)
      ulistfmt_closeResult();
    v25 = v119;
    if (&v121 != (uint64_t *)v119 && v119)
    {
      v119 = 0;
      v120 = 0;
      WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
    }
    v26 = v116;
    if (&v118 != (uint64_t *)v116 && v116)
    {
      v116 = 0;
      v117 = 0;
      WTF::fastFree((unint64_t)v26, v18, v19, v20, v21, v22, v23, v24);
    }
    WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v115, v18, v19, v20, v21, v22, v23, v24);
  }
  WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v122, v10, v11, v12, v13, v14, v15, v16);
  return v38;
}

unint64_t JSC::IntlListFormat::resolvedOptions(JSC::IntlListFormat *this, JSC::JSGlobalObject *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  unint64_t result;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  JSC::JSGlobalObject *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t SlowCase;
  JSC::JSGlobalObject *v81;
  uint64_t Slow;
  WTF::StringImpl *v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  uint64_t v88;

  v9 = *((_QWORD *)a2 + 7);
  v10 = *(_QWORD *)(v9 + 15056);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 60);
    v12 = *(_QWORD *)(v10 + 24);
    if (v12 >= *(_QWORD *)(v10 + 32))
    {
      v12 = *(_QWORD *)(v10 + 40);
      if ((v12 & 1) != 0)
      {
        v76 = a2;
        JSC::sanitizeStackForVM(*((JSC **)a2 + 7), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v10, v9 + 192, v11, 0, 0, v77, v78, v79);
        a2 = v76;
        v12 = SlowCase;
        goto LABEL_4;
      }
      v75 = *(_QWORD *)(v12 + 8) ^ *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 32) = v12 + HIDWORD(v75);
      *(_QWORD *)(v10 + 40) = v12 + (int)v75;
    }
    *(_QWORD *)(v10 + 24) = v12 + v11;
  }
  else
  {
    v81 = a2;
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v9 + 14936, *((JSC **)a2 + 7), 0x40uLL, 0, a5, a6, a7, a8);
    a2 = v81;
    v12 = Slow;
    if (!Slow)
    {
      result = 110;
      __break(0xC471u);
      return result;
    }
  }
LABEL_4:
  *(_DWORD *)v12 = 0;
  *(_DWORD *)v12 = *((_DWORD *)a2 + 212);
  *(_DWORD *)(v12 + 4) = 16783360;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_QWORD *)(v12 + 56) = 0;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  v13 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 1784);
  v14 = JSC::jsString((JSC *)v9, (JSC::IntlListFormat *)((char *)this + 24), a3, a4, a5, a6, a7, a8);
  v84 = 0;
  v85 = v12;
  v86 = -1;
  v15.n128_u64[0] = 0x100000001000000;
  v87 = 0x1000000;
  v88 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v13, v14, 0, (uint64_t)&v84, v16, v17, v15);
  v24 = 0;
  v25 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2560);
  v26 = *((char *)this + 32);
  if (v26 <= 2)
  {
    v27 = off_1E35782C0[v26];
    v28 = dword_199124B20[v26];
    v24 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v24 = 2;
    *(_DWORD *)(v24 + 4) = v28;
    *(_QWORD *)(v24 + 8) = v27;
    *(_DWORD *)(v24 + 16) = 4;
  }
  v83 = (WTF::StringImpl *)v24;
  v29 = JSC::jsNontrivialString(v9, (JSC::VM *)&v83, v18, v19, v20, v21, v22, v23);
  v84 = 0;
  v85 = v12;
  v86 = -1;
  v30.n128_u64[0] = 0x100000001000000;
  v87 = 0x1000000;
  v88 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v25, v29, 0, (uint64_t)&v84, v31, v32, v30);
  v40 = v83;
  v83 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
  }
  v41 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2384);
  v42 = *((char *)this + 33);
  if (v42 > 2)
  {
    v45 = 0;
  }
  else
  {
    v43 = off_1E35782D8[v42];
    v44 = dword_199124B2C[v42];
    v45 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v45 = 2;
    *(_DWORD *)(v45 + 4) = v44;
    *(_QWORD *)(v45 + 8) = v43;
    *(_DWORD *)(v45 + 16) = 4;
  }
  v83 = (WTF::StringImpl *)v45;
  v46 = JSC::jsNontrivialString(v9, (JSC::VM *)&v83, v34, v35, v36, v37, v38, v39);
  v84 = 0;
  v85 = v12;
  v86 = -1;
  v47.n128_u64[0] = 0x100000001000000;
  v87 = 0x1000000;
  v88 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v9, v41, v46, 0, (uint64_t)&v84, v48, v49, v47);
  v57 = v83;
  v83 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::~StringImpl(v57, v50, v51, v52, v53, v54, v55, v56);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v57 -= 2;
    }
  }
  return v12;
}

void JSC::IntlListFormat::initializeListFormat(JSC::JSGlobalObject *,JSC::JSValue,JSC::JSValue)::$_0::__invoke(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t JSC::JSObject::getIndex(JSC::JSObject *this, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSObject *v10;
  uint64_t v11;
  uint64_t IndexQuicklyForTypedArray;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  int v43;
  uint64_t v44;
  BOOL v45;
  char v46;
  int v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v92;
  char v93;
  WTF::StringImpl *v94[7];
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;

  v10 = this;
  if (a3 > 0xFFFFFFFE)
  {
    v29 = (uint64_t **)*((_QWORD *)a2 + 7);
    if (a3 == 0xFFFFFFFF)
      JSC::Identifier::from(v29, 0xFFFFFFFFuLL, (const WTF::StringImpl *)0xFFFFFFFFLL, a4, a5, a6, a7, a8, (int **)v94);
    else
      JSC::Identifier::from(v29, a2, (double)a3, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v94);
    IndexQuicklyForTypedArray = JSC::JSObject::get((unsigned int *)v10, (uint64_t)a2, (unint64_t)v94[0], v30, v31, v32, v33, v34);
    v42 = v94[0];
    v94[0] = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
      {
        WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
        WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
      }
      else
      {
        *(_DWORD *)v42 -= 2;
      }
    }
    return IndexQuicklyForTypedArray;
  }
  v11 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 4) & 0xFu) - 8 >= 2)
  {
    switch(*((_BYTE *)this + 4) & 0xF)
    {
      case 0:
      case 1:
        switch(*((_BYTE *)this + 5))
        {
          case '\'':
          case '(':
            if ((*((_BYTE *)this + 40) & 7u) <= 2)
              goto LABEL_36;
            v64 = *(_QWORD *)(v11 - 8);
            if (*(_BYTE *)(v64 + 64) && (v90 = *(_QWORD *)(v64 + 32)) != 0)
              v65 = *(_QWORD *)(v90 + 32);
            else
              v65 = *(_QWORD *)(v64 + 48);
            v52 = *((_QWORD *)this + 3);
            v66 = *((_QWORD *)this + 4);
            if (v52 + v66 > v65)
              goto LABEL_7;
            if ((*((_BYTE *)this + 40) & 1) == 0)
              goto LABEL_89;
            v28 = v65 - v66;
            goto LABEL_37;
          case ')':
            if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds((uint64_t)this, a3))
              goto LABEL_7;
            goto LABEL_38;
          case '*':
          case '+':
            if ((*((_BYTE *)this + 40) & 7u) <= 2)
              goto LABEL_36;
            v49 = *(_QWORD *)(v11 - 8);
            if (*(_BYTE *)(v49 + 64) && (v88 = *(_QWORD *)(v49 + 32)) != 0)
              v50 = *(_QWORD *)(v88 + 32);
            else
              v50 = *(_QWORD *)(v49 + 48);
            v52 = *((_QWORD *)this + 3);
            v51 = *((_QWORD *)this + 4);
            if (v51 + 2 * v52 > v50)
              goto LABEL_7;
            if ((*((_BYTE *)this + 40) & 1) == 0)
              goto LABEL_89;
            if (a3 >= (v50 - v51) >> 1)
              goto LABEL_7;
            goto LABEL_38;
          case ',':
          case '-':
          case '.':
            if ((*((_BYTE *)this + 40) & 7u) <= 2)
              goto LABEL_36;
            v67 = *(_QWORD *)(v11 - 8);
            if (*(_BYTE *)(v67 + 64) && (v87 = *(_QWORD *)(v67 + 32)) != 0)
              v68 = *(_QWORD *)(v87 + 32);
            else
              v68 = *(_QWORD *)(v67 + 48);
            v52 = *((_QWORD *)this + 3);
            v69 = *((_QWORD *)this + 4);
            if (v69 + 4 * v52 > v68)
              goto LABEL_7;
            if ((*((_BYTE *)this + 40) & 1) == 0)
              goto LABEL_89;
            if (a3 >= (v68 - v69) >> 2)
              goto LABEL_7;
            goto LABEL_38;
          case '/':
            if ((*((_BYTE *)this + 40) & 7u) <= 2)
            {
LABEL_36:
              v28 = *((_QWORD *)this + 3);
LABEL_37:
              if (v28 <= a3)
                goto LABEL_7;
            }
            else
            {
              v61 = *(_QWORD *)(v11 - 8);
              if (*(_BYTE *)(v61 + 64) && (v89 = *(_QWORD *)(v61 + 32)) != 0)
                v62 = *(_QWORD *)(v89 + 32);
              else
                v62 = *(_QWORD *)(v61 + 48);
              v52 = *((_QWORD *)this + 3);
              v63 = *((_QWORD *)this + 4);
              if (v63 + 8 * v52 > v62)
                goto LABEL_7;
              if ((*((_BYTE *)this + 40) & 1) != 0)
              {
                if (a3 >= (v62 - v63) >> 3)
                  goto LABEL_7;
              }
              else
              {
LABEL_89:
                if (v52 <= a3)
                  goto LABEL_7;
              }
            }
LABEL_38:
            IndexQuicklyForTypedArray = JSC::JSObject::getIndexQuicklyForTypedArray((uint64_t)v10, a3, 0);
            if (IndexQuicklyForTypedArray)
              return IndexQuicklyForTypedArray;
            break;
          default:
            goto LABEL_7;
        }
        goto LABEL_7;
      case 3:
        goto LABEL_7;
      case 4:
      case 5:
        break;
      case 6:
      case 7:
        if (*(_DWORD *)(v11 - 8) <= a3)
          goto LABEL_7;
        IndexQuicklyForTypedArray = *(_QWORD *)(v11 + 8 * a3) + 0x2000000000000;
        if (*(_QWORD *)(v11 + 8 * a3) == 0xFFFE000000000000)
          goto LABEL_7;
        return IndexQuicklyForTypedArray;
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        if (*(_DWORD *)(v11 - 4) <= a3)
          goto LABEL_7;
        IndexQuicklyForTypedArray = *(_QWORD *)(v11 + 8 * a3 + 16);
        if (!IndexQuicklyForTypedArray)
          goto LABEL_7;
        return IndexQuicklyForTypedArray;
      default:
        __break(0xC471u);
        JUMPOUT(0x197E24B7CLL);
    }
  }
  if (*(_DWORD *)(v11 - 8) > a3)
  {
    IndexQuicklyForTypedArray = *(_QWORD *)(v11 + 8 * a3);
    if (IndexQuicklyForTypedArray)
      return IndexQuicklyForTypedArray;
  }
LABEL_7:
  v14 = *((_QWORD *)a2 + 7);
  v94[2] = (WTF::StringImpl *)0xFFFFFFFF00000000;
  LOBYTE(v95) = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  memset(&v94[4], 0, 21);
  v94[3] = v10;
  while (1)
  {
    v15 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
    v16 = (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v15 + 0x4C) + 0x70))(v10, a2, a3, v94);
    if (!*(_DWORD *)(v14 + 80))
    {
      if ((v16 & 1) == 0)
        goto LABEL_10;
      if (!*(_DWORD *)(v14 + 80))
        goto LABEL_23;
      LOBYTE(v26) = 1;
LABEL_54:
      v47 = *(_DWORD *)(v14 + 80);
      if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)v18, v19, v20, v21, v22, v23);
      if (*(_QWORD *)(v14 + 16))
        v48 = 0;
      else
        v48 = v26;
      if ((v48 & 1) == 0)
        goto LABEL_21;
      goto LABEL_23;
    }
    v43 = *(_DWORD *)(v14 + 80);
    if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
    {
      v93 = v16;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)v18, v19, v20, v21, v22, v23);
      v16 = v93;
    }
    v44 = *(_QWORD *)(v14 + 16);
    v45 = v44 == 0;
    v46 = v44 ? 1 : v16;
    if ((v46 & 1) != 0)
      break;
LABEL_10:
    if (BYTE2(v94[6]) == 3)
    {
      if (BYTE4(v94[6]))
        goto LABEL_18;
      v24 = *((unsigned __int8 *)v10 + 5);
      if (v24 != 61)
      {
LABEL_12:
        if ((v24 - 39) <= 0xA
          && JSC::JSArrayBufferView::length(v10, v17, (uint64_t)v18, v19, v20, v21, v22, v23) <= a3)
        {
          goto LABEL_18;
        }
      }
    }
    else
    {
      v24 = *((unsigned __int8 *)v10 + 5);
      if (v24 != 61)
        goto LABEL_12;
      if (BYTE2(v94[6]) == 1)
        goto LABEL_18;
    }
    if ((*(_WORD *)(v15 + 12) & 0x800) == 0 || BYTE2(v94[6]) == 3)
    {
      v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
      if (!v25)
        v25 = *((_QWORD *)v10 + 2);
    }
    else
    {
      if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v92 = (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v10, a2);
      }
      else
      {
        v92 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
        if (!v92)
          v92 = *((_QWORD *)v10 + 2);
      }
      if (*(_DWORD *)(v14 + 80))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
        v25 = v92;
        if (hasExceptionsAfterHandlingTraps)
          goto LABEL_18;
      }
      else
      {
        v25 = v92;
      }
    }
    if ((v25 & 0xFFFE000000000002) == 0)
    {
      v10 = (JSC::JSObject *)v25;
      if (*(unsigned __int8 *)(v25 + 5) > 0x16u)
        continue;
    }
LABEL_18:
    v26 = 0;
    goto LABEL_19;
  }
  v26 = v45;
LABEL_19:
  if (*(_DWORD *)(v14 + 80))
    goto LABEL_54;
  if (!v26)
  {
LABEL_21:
    IndexQuicklyForTypedArray = 10;
    goto LABEL_25;
  }
LABEL_23:
  if (BYTE1(v94[6]) == 1)
  {
    IndexQuicklyForTypedArray = (uint64_t)v94[0];
  }
  else if (BYTE1(v94[6]) == 2)
  {
    IndexQuicklyForTypedArray = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v94, a2, (uint64_t)v18, v19, v20, v21, v22, v23);
  }
  else
  {
    v70 = (uint64_t **)*((_QWORD *)a2 + 7);
    JSC::Identifier::from(v70, a3, v18, v19, v20, v21, v22, v23, (int **)&v99);
    IndexQuicklyForTypedArray = JSC::PropertySlot::customGetter((uint64_t)v94, (JSC::VM *)v70, v99);
    v78 = v99;
    v99 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
      {
        WTF::StringImpl::~StringImpl(v78, v71, v72, v73, v74, v75, v76, v77);
        WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
      }
      else
      {
        *(_DWORD *)v78 -= 2;
      }
    }
  }
LABEL_25:
  if (v96)
  {
    v27 = *(_DWORD *)(v95 + 4);
    if (!v27)
    {
      __break(0xC471u);
      JUMPOUT(0x197E249DCLL);
    }
    *(_DWORD *)(v95 + 4) = v27 - 1;
  }
  return IndexQuicklyForTypedArray;
}

void JSC::stringListFromIterable(JSC::JSGlobalObject *,JSC::JSValue)::$_0::operator()(uint64_t *a1, uint64_t a2, JSC::JSGlobalObject *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  WTF::StringImpl *v27;
  JSC::VM *v28;

  v28 = (JSC::VM *)a2;
  if ((a4 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a4 + 5) != 2)
  {
    JSC::throwTypeError((unint64_t)a3, &v28, (uint64_t)"Iterable passed to ListFormat includes non String", 50);
    return;
  }
  v11 = *(WTF::StringImpl **)(a4 + 8);
  if ((v11 & 1) == 0)
  {
    if (!v11)
      goto LABEL_6;
    goto LABEL_5;
  }
  v11 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(a4, a3, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (v11)
LABEL_5:
    *(_DWORD *)v11 += 2;
LABEL_6:
  v27 = v11;
  if (!*(_DWORD *)(a2 + 80))
    goto LABEL_7;
  v26 = *(_DWORD *)(a2 + 80);
  if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(a2 + 16))
  {
LABEL_7:
    v12 = *a1;
    v13 = *(unsigned int *)(v12 + 12);
    if ((_DWORD)v13 == *(_DWORD *)(v12 + 8))
    {
      v14 = (_DWORD **)WTF::Vector<WTF::String,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v13 + 1, (unint64_t)&v27);
      v13 = *(unsigned int *)(v12 + 12);
      v15 = *(_QWORD *)v12;
      v16 = *v14;
      if (*v14)
        *v16 += 2;
      *(_QWORD *)(v15 + 8 * v13) = v16;
      v11 = v27;
    }
    else
    {
      v17 = *(_QWORD *)v12;
      if (v11)
        *(_DWORD *)v11 += 2;
      *(_QWORD *)(v17 + 8 * v13) = v11;
    }
    *(_DWORD *)(v12 + 12) = v13 + 1;
  }
  v27 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
}

uint64_t JSC::JSObject::getIndexQuicklyForTypedArray(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = a2;
  if ((a2 & 0x80000000) != 0 && a3)
    *(_DWORD *)(a3 + 4) |= 4u;
  if (*(_BYTE *)(a1 + 5) == 46)
  {
    if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
      if (*(_BYTE *)(v19 + 64) && (v51 = *(_QWORD *)(v19 + 32)) != 0)
        v20 = *(_QWORD *)(v51 + 32);
      else
        v20 = *(_QWORD *)(v19 + 48);
      v22 = *(_QWORD *)(a1 + 24);
      v21 = *(_QWORD *)(a1 + 32);
      if (v21 + 4 * v22 <= v20)
      {
        if ((*(_BYTE *)(a1 + 40) & 1) != 0)
        {
          if (a2 >= (v20 - v21) >> 2)
            goto LABEL_65;
        }
        else if (v22 <= a2)
        {
          goto LABEL_65;
        }
LABEL_5:
        v5 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v5 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        return COERCE__INT64(*(float *)(v5 + 4 * a2)) + 0x2000000000000;
      }
    }
    else if (*(_QWORD *)(a1 + 24) > (unint64_t)a2)
    {
      goto LABEL_5;
    }
LABEL_65:
    __break(0xC471u);
    JUMPOUT(0x197E251DCLL);
  }
  switch(*(_BYTE *)(a1 + 5))
  {
    case '\'':
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v47 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v47 + 64) && (v58 = *(_QWORD *)(v47 + 32)) != 0)
          v48 = *(_QWORD *)(v58 + 32);
        else
          v48 = *(_QWORD *)(v47 + 48);
        v50 = *(_QWORD *)(a1 + 24);
        v49 = *(_QWORD *)(a1 + 32);
        if (v50 + v49 > v48)
          goto LABEL_123;
        if ((*(_BYTE *)(a1 + 40) & 1) == 0)
        {
          if (v50 > a2)
          {
LABEL_54:
            v18 = *(_QWORD *)(a1 + 16);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            v16 = *(char *)(v18 + a2);
            return v16 | 0xFFFE000000000000;
          }
LABEL_123:
          __break(0xC471u);
          JUMPOUT(0x197E254FCLL);
        }
        v17 = v48 - v49;
      }
      else
      {
        v17 = *(_QWORD *)(a1 + 24);
      }
      if (v17 > a2)
        goto LABEL_54;
      goto LABEL_123;
    case '(':
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v39 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v39 + 64) && (v56 = *(_QWORD *)(v39 + 32)) != 0)
          v40 = *(_QWORD *)(v56 + 32);
        else
          v40 = *(_QWORD *)(v39 + 48);
        v42 = *(_QWORD *)(a1 + 24);
        v41 = *(_QWORD *)(a1 + 32);
        if (v42 + v41 > v40)
          goto LABEL_108;
        if ((*(_BYTE *)(a1 + 40) & 1) == 0)
        {
          if (v42 > a2)
          {
LABEL_40:
            v14 = *(_QWORD *)(a1 + 16);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v14 = (v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            v8 = *(unsigned __int8 *)(v14 + v4);
            return v8 | 0xFFFE000000000000;
          }
LABEL_108:
          __break(0xC471u);
          JUMPOUT(0x197E25444);
        }
        v13 = v40 - v41;
      }
      else
      {
        v13 = *(_QWORD *)(a1 + 24);
      }
      if (v13 > a2)
        goto LABEL_40;
      goto LABEL_108;
    case ')':
      if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(a1, a2))
      {
        __break(0xC471u);
        JUMPOUT(0x197E2520CLL);
      }
      goto LABEL_40;
    case '*':
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v43 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v43 + 64) && (v57 = *(_QWORD *)(v43 + 32)) != 0)
          v44 = *(_QWORD *)(v57 + 32);
        else
          v44 = *(_QWORD *)(v43 + 48);
        v46 = *(_QWORD *)(a1 + 24);
        v45 = *(_QWORD *)(a1 + 32);
        if (v45 + 2 * v46 <= v44)
        {
          if ((*(_BYTE *)(a1 + 40) & 1) != 0)
          {
            if (a2 >= (v44 - v45) >> 1)
              goto LABEL_125;
          }
          else if (v46 <= a2)
          {
            goto LABEL_125;
          }
LABEL_46:
          v15 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v16 = *(__int16 *)(v15 + 2 * a2);
          return v16 | 0xFFFE000000000000;
        }
      }
      else if (*(_QWORD *)(a1 + 24) > (unint64_t)a2)
      {
        goto LABEL_46;
      }
LABEL_125:
      __break(0xC471u);
      JUMPOUT(0x197E25528);
    case '+':
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v27 + 64) && (v53 = *(_QWORD *)(v27 + 32)) != 0)
          v28 = *(_QWORD *)(v53 + 32);
        else
          v28 = *(_QWORD *)(v27 + 48);
        v30 = *(_QWORD *)(a1 + 24);
        v29 = *(_QWORD *)(a1 + 32);
        if (v29 + 2 * v30 <= v28)
        {
          if ((*(_BYTE *)(a1 + 40) & 1) != 0)
          {
            if (a2 >= (v28 - v29) >> 1)
              goto LABEL_94;
          }
          else if (v30 <= a2)
          {
            goto LABEL_94;
          }
LABEL_19:
          v9 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v9 = (v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v8 = *(unsigned __int16 *)(v9 + 2 * a2);
          return v8 | 0xFFFE000000000000;
        }
      }
      else if (*(_QWORD *)(a1 + 24) > (unint64_t)a2)
      {
        goto LABEL_19;
      }
LABEL_94:
      __break(0xC471u);
      JUMPOUT(0x197E25394);
    case ',':
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v23 + 64) && (v52 = *(_QWORD *)(v23 + 32)) != 0)
          v24 = *(_QWORD *)(v52 + 32);
        else
          v24 = *(_QWORD *)(v23 + 48);
        v26 = *(_QWORD *)(a1 + 24);
        v25 = *(_QWORD *)(a1 + 32);
        if (v25 + 4 * v26 <= v24)
        {
          if ((*(_BYTE *)(a1 + 40) & 1) != 0)
          {
            if (a2 >= (v24 - v25) >> 2)
              goto LABEL_92;
          }
          else if (v26 <= a2)
          {
            goto LABEL_92;
          }
LABEL_12:
          v7 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v7 = (v7 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v8 = *(unsigned int *)(v7 + 4 * a2);
          return v8 | 0xFFFE000000000000;
        }
      }
      else if (*(_QWORD *)(a1 + 24) > (unint64_t)a2)
      {
        goto LABEL_12;
      }
LABEL_92:
      __break(0xC471u);
      JUMPOUT(0x197E25368);
    case '-':
      if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
      {
        v35 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
        if (*(_BYTE *)(v35 + 64) && (v55 = *(_QWORD *)(v35 + 32)) != 0)
          v36 = *(_QWORD *)(v55 + 32);
        else
          v36 = *(_QWORD *)(v35 + 48);
        v38 = *(_QWORD *)(a1 + 24);
        v37 = *(_QWORD *)(a1 + 32);
        if (v37 + 4 * v38 <= v36)
        {
          if ((*(_BYTE *)(a1 + 40) & 1) != 0)
          {
            if (a2 >= (v36 - v37) >> 2)
              goto LABEL_110;
          }
          else if (v38 <= a2)
          {
            goto LABEL_110;
          }
LABEL_31:
          v11 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v11 = (v11 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v12 = *(unsigned int *)(v11 + 4 * a2);
          if ((int)v12 < 0)
            return COERCE__INT64((double)v12) + 0x2000000000000;
          else
            return v12 | 0xFFFE000000000000;
        }
      }
      else if (*(_QWORD *)(a1 + 24) > (unint64_t)a2)
      {
        goto LABEL_31;
      }
LABEL_110:
      __break(0xC471u);
      JUMPOUT(0x197E25470);
    case '/':
      if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
      {
        if (*(_QWORD *)(a1 + 24) > (unint64_t)a2)
          goto LABEL_25;
LABEL_102:
        __break(0xC471u);
        JUMPOUT(0x197E253F4);
      }
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
      if (*(_BYTE *)(v31 + 64) && (v54 = *(_QWORD *)(v31 + 32)) != 0)
        v32 = *(_QWORD *)(v54 + 32);
      else
        v32 = *(_QWORD *)(v31 + 48);
      v34 = *(_QWORD *)(a1 + 24);
      v33 = *(_QWORD *)(a1 + 32);
      if (v33 + 8 * v34 > v32)
        goto LABEL_102;
      if ((*(_BYTE *)(a1 + 40) & 1) != 0)
      {
        if (a2 >= (v32 - v33) >> 3)
          goto LABEL_102;
      }
      else if (v34 <= a2)
      {
        goto LABEL_102;
      }
LABEL_25:
      v10 = *(_QWORD *)(a1 + 16);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v10 = (v10 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      return *(_QWORD *)(v10 + 8 * a2) + 0x2000000000000;
    case '0':
      __break(0xC471u);
      JUMPOUT(0x197E252E8);
    case '1':
      __break(0xC471u);
      JUMPOUT(0x197E252B8);
    default:
      __break(0xC471u);
      JUMPOUT(0x197E25308);
  }
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if ((*(_BYTE *)(a1 + 40) & 7u) <= 2)
  {
    v2 = *(_QWORD *)(a1 + 24);
    return v2 > a2;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
  if (*(_BYTE *)(v5 + 64) && (v9 = *(_QWORD *)(v5 + 32)) != 0)
    v6 = *(_QWORD *)(v9 + 32);
  else
    v6 = *(_QWORD *)(v5 + 48);
  v8 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  if (v8 + v7 > v6)
    return 0;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v2 = v6 - v7;
    return v2 > a2;
  }
  return v8 > a2;
}

uint64_t JSC::JSObject::get(JSC::JSObject *this, JSC::JSGlobalObject *a2, unint64_t a3)
{
  JSC::JSObject *v5;
  JSC::VM *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  _BOOL4 v23;
  BOOL v24;
  uint64_t **v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v43;
  _QWORD v44[7];
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;

  v5 = this;
  v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v44[2] = 0xFFFFFFFF00000000;
  LOBYTE(v45) = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  memset(&v44[4], 0, 21);
  v44[3] = this;
  while (1)
  {
    v7 = 16 * (*(_DWORD *)v5 & 0xFFFFFFFE);
    v8 = (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *, unint64_t, _QWORD *))(16 * *(unsigned int *)(v7 + 0x4C) + 0x70))(v5, a2, a3, v44);
    v16 = v8;
    if (*((_DWORD *)v6 + 20))
      break;
    if ((v8 & 1) != 0)
    {
      if (!*((_DWORD *)v6 + 20))
        goto LABEL_17;
      v19 = 1;
      goto LABEL_26;
    }
LABEL_4:
    if (BYTE2(v44[6]) == 3)
    {
      if (BYTE4(v44[6]))
        goto LABEL_12;
      v17 = *((unsigned __int8 *)v5 + 5);
      if (v17 != 61)
      {
LABEL_6:
        if ((v17 - 39) <= 0xA
          && JSC::JSArrayBufferView::length(v5, v9, (uint64_t)v10, v11, v12, v13, v14, v15) <= a3)
        {
          goto LABEL_12;
        }
      }
    }
    else
    {
      v17 = *((unsigned __int8 *)v5 + 5);
      if (v17 != 61)
        goto LABEL_6;
      if (BYTE2(v44[6]) == 1)
        goto LABEL_12;
    }
    if ((*(_WORD *)(v7 + 12) & 0x800) == 0 || BYTE2(v44[6]) == 3)
    {
      v18 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x30);
      if (!v18)
        v18 = *((_QWORD *)v5 + 2);
    }
    else
    {
      if ((*(_WORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v43 = (*(uint64_t (**)(JSC::JSObject *, JSC::JSGlobalObject *))(16
                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0xB0))(v5, a2);
      }
      else
      {
        v43 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x30);
        if (!v43)
          v43 = *((_QWORD *)v5 + 2);
      }
      if (*((_DWORD *)v6 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v6, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
        v18 = v43;
        if (hasExceptionsAfterHandlingTraps)
          goto LABEL_12;
      }
      else
      {
        v18 = v43;
      }
    }
    if ((v18 & 0xFFFE000000000002) == 0)
    {
      v5 = (JSC::JSObject *)v18;
      if (*(unsigned __int8 *)(v18 + 5) > 0x16u)
        continue;
    }
LABEL_12:
    v19 = 0;
    goto LABEL_13;
  }
  v23 = JSC::VM::hasExceptionsAfterHandlingTraps(v6, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
  if (((v23 | v16) & 1) == 0)
    goto LABEL_4;
  v19 = !v23;
LABEL_13:
  if (!*((_DWORD *)v6 + 20))
  {
    if (!v19)
    {
      v20 = 10;
      goto LABEL_19;
    }
    goto LABEL_17;
  }
LABEL_26:
  v24 = JSC::VM::hasExceptionsAfterHandlingTraps(v6, v9, (uint64_t)v10, v11, v12, v13, v14, v15);
  v20 = 10;
  if (v24 || !v19)
    goto LABEL_19;
LABEL_17:
  if (BYTE1(v44[6]) == 1)
  {
    v20 = v44[0];
  }
  else if (BYTE1(v44[6]) == 2)
  {
    v20 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v44, a2, (uint64_t)v10, v11, v12, v13, v14, v15);
  }
  else
  {
    v25 = (uint64_t **)*((_QWORD *)a2 + 7);
    JSC::Identifier::from(v25, a3, v10, v11, v12, v13, v14, v15, (int **)&v49);
    v20 = JSC::PropertySlot::customGetter((uint64_t)v44, (JSC::VM *)v25, v49);
    v33 = v49;
    v49 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
      {
        WTF::StringImpl::~StringImpl(v33, v26, v27, v28, v29, v30, v31, v32);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
      }
      else
      {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
LABEL_19:
  if (v46)
  {
    v21 = *(_DWORD *)(v45 + 4);
    if (!v21)
    {
      __break(0xC471u);
      JUMPOUT(0x197E258DCLL);
    }
    *(_DWORD *)(v45 + 4) = v21 - 1;
  }
  return v20;
}

void JSC::IntlNumberFormat::visitChildren(JSC::IntlNumberFormat *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_9;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_9:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::IntlNumberFormat::visitChildren(JSC::IntlNumberFormat *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t JSC::UNumberFormatterDeleter::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return unumf_close();
  return result;
}

uint64_t JSC::UNumberRangeFormatterDeleter::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return unumrf_close();
  return result;
}

unint64_t JSC::IntlNumberFormat::create(JSC::IntlNumberFormat *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v10;
  unint64_t result;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = (JSC::Heap *)*((_QWORD *)this + 5073);
  if (!v10)
    v10 = JSC::GCClient::Heap::intlNumberFormatSpaceSlow((JSC::Heap **)this + 4694);
  result = *((_QWORD *)v10 + 3);
  if (result < *((_QWORD *)v10 + 4))
    goto LABEL_4;
  result = *((_QWORD *)v10 + 5);
  if ((result & 1) == 0)
  {
    v13 = *(_QWORD *)(result + 8) ^ *((_QWORD *)v10 + 6);
    *((_QWORD *)v10 + 4) = result + HIDWORD(v13);
    *((_QWORD *)v10 + 5) = result + (int)v13;
LABEL_4:
    *((_QWORD *)v10 + 3) = result + 112;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v10, (uint64_t)this + 192, 112, 0, 0, v14, v15, v16);
LABEL_5:
  *(_DWORD *)result = 0;
  v12 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v12;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 72) = xmmword_199124B40;
  *(_QWORD *)(result + 88) = 0x100000000;
  *(_BYTE *)(result + 96) = 0;
  *(_BYTE *)(result + 101) = 0;
  *(_DWORD *)(result + 103) = 393984;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::Structure::create(JSC::VM *a1, JSC::VM *a2, uint64_t this, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  char v9;
  char v10;
  uint64_t *v16;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v19;

  v9 = a7;
  v10 = a6;
  v16 = (uint64_t *)((char *)a1 + 40136);
  if ((this & 0xFFFE000000000002) == 0 && this && *(unsigned __int8 *)(this + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(this, a1, a9, this, a4, a5, a6, a7, a8);
  SlowCase = *v16;
  if (*v16 < (unint64_t)v16[1])
    goto LABEL_6;
  SlowCase = v16[2];
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ v16[3];
    v16[1] = SlowCase + HIDWORD(v19);
    v16[2] = SlowCase + (int)v19;
LABEL_6:
    *v16 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM(a1, a2, this, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)a1 + 40112, (char *)a1 + 192, 128, 0, 0);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, this, a4, a5, v10, v9);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::IntlNumberFormat::initializeNumberFormat(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v9;
  JSC::VM *v12;
  WTF::AtomStringImpl *v13;
  JSC::Structure *v14;
  JSC::Symbol *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::VM *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t hasExceptionsAfterHandlingTraps;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::VM *v39;
  uint64_t *v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl **v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  WTF::StringImpl *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  WTF::AtomStringImpl *v117;
  uint64_t v118;
  JSC::VM *v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::AtomStringImpl *v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF::AtomStringImpl *v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  uint64_t v134;
  WTF::AtomStringImpl *v135;
  uint64_t v136;
  JSC::VM *v137;
  WTF::StringImpl *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::AtomStringImpl *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  unsigned int v146;
  WTF::StringImpl *v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  WTF::AtomStringImpl *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  WTF::AtomStringImpl *v162;
  uint64_t v163;
  unint64_t v164;
  WTF::StringImpl *v165;
  uint64_t v166;
  uint64_t v167;
  WTF::AtomStringImpl *v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  WTF::AtomStringImpl *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  WTF::StringImpl *v181;
  uint64_t v182;
  int v183;
  int v184;
  BOOL v185;
  int v186;
  char v187;
  uint64_t v188;
  unsigned int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  float v196;
  WTF::AtomStringImpl *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  WTF::StringImpl *v204;
  int v205;
  WTF::ICU *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  _BOOL4 v213;
  BOOL v214;
  size_t v215;
  const char *v216;
  const char *v217;
  int8x16_t *v218;
  int v219;
  int8x16_t *v220;
  size_t v221;
  WTF::StringImpl *v222;
  unint64_t v223;
  int v224;
  int *v225;
  char v226;
  unint64_t v227;
  int *v228;
  int *v229;
  int *v230;
  __int16 v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int *v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  int v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  int8x16_t *v253;
  size_t v254;
  unint64_t v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  void *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  void *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  void *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  void *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  void *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  void *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  const WTF::String *v407;
  unint64_t RangeError;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  __int128 v415;
  char *v416;
  int8x16_t v417;
  __int128 v418;
  __int128 v419;
  char *v420;
  char *v421;
  char *v422;
  uint64_t v423;
  const WTF::String *v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  WTF::AtomStringImpl *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  JSC *v438;
  JSC *v439;
  int v440;
  const WTF::String *v441;
  uint64_t v442;
  const WTF::String *v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  int8x16_t *v451;
  size_t v452;
  unint64_t v453;
  void *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  WTF::AtomStringImpl *v461;
  unint64_t v462;
  void *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  int8x16_t *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  _BYTE *v476;
  uint64_t v477;
  uint64_t v478;
  WTF::StringImpl *v479;
  WTF::StringImpl *v480;
  WTF::StringImpl *v481;
  int v482;
  char v483;
  WTF::StringImpl *v484;
  WTF::StringImpl *v485;
  JSC *v486;
  WTF::StringImpl *v487;
  WTF::StringImpl *v488;
  WTF::StringImpl *v489;
  _DWORD *v490;
  WTF::StringImpl *v491;
  _BYTE v492[80];
  _BYTE v493[16];
  WTF::StringImpl **v494;
  int v495;
  unsigned int v496;
  JSC::VM *v497;
  const char *v498;
  unint64_t v499;
  _BYTE *v500;
  const char *v501;
  uint64_t v502;
  uint64_t v503;
  const char *v504;
  uint64_t v505;
  unsigned __int8 v506;
  const char *v507;
  uint64_t v508;
  unint64_t v509;
  const char *v510;
  uint64_t v511;
  char v512;
  uint64_t v513;
  int8x16x2_t v514;
  int8x16x2_t v515;
  int8x16x2_t v516;

  v9 = (unint64_t)a4;
  v513 = *MEMORY[0x1E0C80C00];
  v497 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v12 = v497;
  JSC::canonicalizeLocaleList((unint64_t)a2, a3, a3, a4, a5, a6, a7, a8, (WTF **)&v494, a9);
  if (!*((_DWORD *)v12 + 20)
    || !JSC::VM::hasExceptionsAfterHandlingTraps(v12, (uint64_t)v13, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19))
  {
    v498 = (const char *)v9;
    if (v9 == 10)
      goto LABEL_288;
    v20 = (JSC::VM *)*((_QWORD *)a2 + 7);
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      v405 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v498, a2, v14, (uint64_t)v15, v16, v17, v18, v19);
    }
    else
    {
      if (*(unsigned __int8 *)(v9 + 5) > 0x16u)
      {
LABEL_5:
        if (!*((_DWORD *)v20 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v20, (uint64_t)v13, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19))
        {
LABEL_6:
          if (*((_DWORD *)v12 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v12, (uint64_t)v13, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19))
          {
            goto LABEL_27;
          }
          v492[0] = 0;
          v492[8] = 0;
          v492[16] = 0;
          v492[24] = 0;
          v492[32] = 0;
          v492[40] = 0;
          v492[48] = 0;
          v492[56] = 0;
          v492[64] = 0;
          v492[72] = 0;
          v493[0] = 0;
          v493[8] = 0;
          v21 = (char *)v12 + 41952;
          v22 = *(_QWORD *)(*((_QWORD *)v12 + 5244) + 1792);
          v498 = "lookup";
          v499 = 7;
          LOBYTE(v500) = 0;
          v501 = "best fit";
          v502 = 9;
          LOBYTE(v503) = 1;
          v30 = JSC::intlOption<JSC::LocaleMatcher>(a2, (unsigned int *)v9, v22, (uint64_t)&v498, 2, (unint64_t)"localeMatcher must be either \"lookup\" or \"best fit\"", 52, 1);
          if (*((_DWORD *)v497 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v497, v23, v24, v25, v26, v27, v28, v29))
          {
LABEL_26:
            std::array<std::optional<WTF::String>,6ul>::~array((uint64_t)v492, v57, v58, v59, v60, v61, v62, v29);
            goto LABEL_27;
          }
          JSC::intlStringOption(a2, (unsigned int *)v9, *(_QWORD *)(*(_QWORD *)v21 + 2040), 0, 0, 0, 0, v29, &v491, 0, 0);
          v39 = v497;
          if (*((_DWORD *)v497 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v497, v32, v33, v34, v35, v36, v37, v38);
            if ((hasExceptionsAfterHandlingTraps & 1) != 0)
            {
LABEL_23:
              v65 = v491;
              v491 = 0;
              if (v65)
              {
                if (*(_DWORD *)v65 == 2)
                {
                  WTF::StringImpl::~StringImpl(v65, v57, v58, v59, v60, v61, v62, v29);
                  WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
                }
                else
                {
                  *(_DWORD *)v65 -= 2;
                }
              }
              goto LABEL_26;
            }
          }
          if (v491)
          {
            if (!JSC::isUnicodeLocaleIdentifierType(*((_QWORD *)v491 + 1), *((unsigned int *)v491 + 1) | ((unint64_t)((*((_DWORD *)v491 + 4) >> 2) & 1) << 32)))
            {
              v406 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v406 = 0x3B00000002;
              *(_QWORD *)(v406 + 8) = "numberingSystem is not a well-formed numbering system value";
              *(_DWORD *)(v406 + 16) = 4;
              v498 = (const char *)v406;
              RangeError = JSC::createRangeError((unint64_t)a2, (WTF::StringImpl **)&v498, v407);
              JSC::VM::throwException(v39, a2, RangeError, v409, v410, v411, v412, v413);
              v64 = (WTF::StringImpl *)v498;
              v498 = 0;
              if (!v64)
                goto LABEL_23;
              goto LABEL_21;
            }
            hasExceptionsAfterHandlingTraps = std::optional<WTF::String>::operator=[abi:sn180100]<WTF::String&,void>((uint64_t)v493, (WTF::AtomStringImpl *)&v491, v399, v400, v401, v402, v403, v404);
          }
          v40 = JSC::intlAvailableLocales((JSC *)hasExceptionsAfterHandlingTraps);
          LOBYTE(v498) = 5;
          JSC::resolveLocale(a2, (const WTF::StringImpl *)v40, (uint64_t)&v494, v30, (uint64_t)v492, (uint64_t)&v498, 1, (uint64_t)JSC::IntlNumberFormat::localeData, (uint64_t)&v487);
          v48 = v487;
          if (v487)
            *(_DWORD *)v487 += 2;
          v49 = *(WTF::StringImpl **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v48;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
            {
              WTF::StringImpl::~StringImpl(v49, v41, v42, v43, v44, v45, v46, v47);
              WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
              v48 = *(WTF::StringImpl **)(a1 + 40);
            }
            else
            {
              *(_DWORD *)v49 -= 2;
            }
          }
          if (!v48 || !*((_DWORD *)v48 + 1))
          {
            JSC::throwTypeError((unint64_t)a2, &v497, (uint64_t)"failed to initialize NumberFormat due to invalid locale", 56);
            goto LABEL_17;
          }
          v110 = v490;
          if (v490)
            *v490 += 2;
          v111 = *(WTF::StringImpl **)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v110;
          if (v111)
          {
            if (*(_DWORD *)v111 == 2)
            {
              WTF::StringImpl::~StringImpl(v111, v41, v42, v43, v44, v45, v46, v47);
              WTF::fastFree(v255, v256, v257, v258, v259, v260, v261, v262);
            }
            else
            {
              *(_DWORD *)v111 -= 2;
            }
          }
          v112 = *(_QWORD *)(*(_QWORD *)v21 + 2384);
          v498 = "decimal";
          v499 = 8;
          LOBYTE(v500) = 0;
          v501 = "percent";
          v502 = 8;
          LOBYTE(v503) = 1;
          v504 = "currency";
          v505 = 9;
          v506 = 2;
          v507 = "unit";
          v508 = 5;
          LOBYTE(v509) = 3;
          *(_BYTE *)(a1 + 96) = JSC::intlOption<JSC::IntlNumberFormat::Style>(a2, (unsigned int *)v9, v112, (uint64_t)&v498, 4, v45, v46, v47);
          if (*((_DWORD *)v497 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v497, v113, v114, v52, v53, v54, v55, v56))
          {
LABEL_17:
            std::array<WTF::String,6ul>::~array(&v489, v50, v51, v52, v53, v54, v55, v56);
            v63 = v488;
            v488 = 0;
            if (v63)
            {
              if (*(_DWORD *)v63 == 2)
              {
                WTF::StringImpl::~StringImpl(v63, v57, v58, v59, v60, v61, v62, v29);
                WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
              }
              else
              {
                *(_DWORD *)v63 -= 2;
              }
            }
            v64 = v487;
            v487 = 0;
            if (!v64)
              goto LABEL_23;
LABEL_21:
            if (*(_DWORD *)v64 == 2)
            {
              WTF::StringImpl::~StringImpl(v64, v57, v58, v59, v60, v61, v62, v29);
              WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
            }
            else
            {
              *(_DWORD *)v64 -= 2;
            }
            goto LABEL_23;
          }
          WTF::AtomStringImpl::addLiteral((uint64_t)"currency", 8uLL, v52, v53, v54, v55, v56, &v498);
          v115 = (WTF::StringImpl *)v498;
          JSC::intlStringOption(a2, (unsigned int *)v9, (unint64_t)v498, 0, 0, 0, 0, v116, &v486, 0, 0);
          if (v115)
          {
            if (*(_DWORD *)v115 == 2)
            {
              WTF::StringImpl::~StringImpl(v115, v117, v118, v52, v53, v54, v55, v56);
              WTF::fastFree(v263, v264, v265, v266, v267, v268, v269, v270);
            }
            else
            {
              *(_DWORD *)v115 -= 2;
            }
          }
          v119 = v497;
          if (*((_DWORD *)v497 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v497, (uint64_t)v117, v118, v52, v53, v54, v55, v56))
          {
LABEL_182:
            v243 = v486;
            v486 = 0;
            if (v243)
            {
              if (*(_DWORD *)v243 == 2)
              {
                WTF::StringImpl::~StringImpl(v243, v50, v51, v52, v53, v54, v55, v56);
                WTF::fastFree(v271, v272, v273, v274, v275, v276, v277, v278);
              }
              else
              {
                *(_DWORD *)v243 -= 2;
              }
            }
            goto LABEL_17;
          }
          if (v486
            && !JSC::isWellFormedCurrencyCode(*((unsigned __int16 **)v486 + 1), (unsigned __int16 *)(*((unsigned int *)v486 + 1) | ((unint64_t)((*((_DWORD *)v486 + 4) >> 2) & 1) << 32))))
          {
            v423 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v423 = 0x2B00000002;
            *(_QWORD *)(v423 + 8) = "currency is not a well-formed currency code";
            *(_DWORD *)(v423 + 16) = 4;
            v498 = (const char *)v423;
            v425 = JSC::createRangeError((unint64_t)a2, (WTF::StringImpl **)&v498, v424);
            JSC::VM::throwException(v119, a2, v425, v426, v427, v428, v429, v430);
            v242 = (WTF::StringImpl *)v498;
            v498 = 0;
            if (!v242)
              goto LABEL_182;
            goto LABEL_180;
          }
          if (*(_BYTE *)(a1 + 96) != 2)
          {
            v120 = 0;
            goto LABEL_56;
          }
          if (!v486)
          {
            JSC::throwTypeError((unint64_t)a2, &v497, (uint64_t)"currency must be a string", 26);
            goto LABEL_182;
          }
          WTF::String::convertToASCIIUppercase((WTF::String *)&v486, &v498);
          v438 = (JSC *)v498;
          v498 = 0;
          v439 = v486;
          v486 = v438;
          if (v439)
          {
            v440 = *(_DWORD *)v439 - 2;
            if (*(_DWORD *)v439 == 2)
            {
              WTF::StringImpl::~StringImpl(v439, v431, v432, v433, v434, v435, v436, v437);
              WTF::fastFree(v453, v454, v455, v456, v457, v458, v459, v460);
              v439 = (JSC *)v498;
              v498 = 0;
              if (!v439)
                goto LABEL_248;
              v440 = *(_DWORD *)v439 - 2;
              if (*(_DWORD *)v439 == 2)
              {
                WTF::StringImpl::~StringImpl(v439, v461, v432, v433, v434, v435, v436, v437);
                WTF::fastFree(v462, v463, v464, v465, v466, v467, v468, v469);
                goto LABEL_248;
              }
            }
            *(_DWORD *)v439 = v440;
          }
LABEL_248:
          WTF::String::operator=((unint64_t *)(a1 + 56), (WTF::AtomStringImpl *)&v486, v432, v433, v434, v435, v436, v437);
          v120 = JSC::computeCurrencyDigits(v486, v441);
LABEL_56:
          WTF::AtomStringImpl::addLiteral((uint64_t)"currencyDisplay", 0xFuLL, v52, v53, v54, v55, v56, &v498);
          v121 = (WTF::StringImpl *)v498;
          v498 = "code";
          v499 = 5;
          LOBYTE(v500) = 0;
          v501 = "symbol";
          v502 = 7;
          LOBYTE(v503) = 1;
          v504 = "narrowSymbol";
          v505 = 13;
          v506 = 2;
          v507 = "name";
          v508 = 5;
          LOBYTE(v509) = 3;
          *(_BYTE *)(a1 + 97) = JSC::intlOption<JSC::IntlNumberFormat::CurrencyDisplay>(a2, (unsigned int *)v9, (unint64_t)v121, (uint64_t)&v498, 4, v122, v123, v124);
          if (v121)
          {
            if (*(_DWORD *)v121 == 2)
            {
              WTF::StringImpl::~StringImpl(v121, v125, v126, v52, v53, v54, v55, v56);
              WTF::fastFree(v287, v288, v289, v290, v291, v292, v293, v294);
            }
            else
            {
              *(_DWORD *)v121 -= 2;
            }
          }
          if (*((_DWORD *)v497 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v497, (uint64_t)v125, v126, v52, v53, v54, v55, v56))
          {
            goto LABEL_182;
          }
          WTF::AtomStringImpl::addLiteral((uint64_t)"currencySign", 0xCuLL, v52, v53, v54, v55, v56, &v498);
          v127 = (WTF::StringImpl *)v498;
          v498 = "standard";
          v499 = 9;
          LOBYTE(v500) = 0;
          v501 = "accounting";
          v502 = 11;
          LOBYTE(v503) = 1;
          *(_BYTE *)(a1 + 98) = JSC::intlOption<JSC::IntlNumberFormat::CurrencySign>(a2, (unsigned int *)v9, (unint64_t)v127, (uint64_t)&v498, 2, v128, v129, v130);
          if (v127)
          {
            if (*(_DWORD *)v127 == 2)
            {
              WTF::StringImpl::~StringImpl(v127, v131, v132, v52, v53, v54, v55, v56);
              WTF::fastFree(v295, v296, v297, v298, v299, v300, v301, v302);
            }
            else
            {
              *(_DWORD *)v127 -= 2;
            }
          }
          if (*((_DWORD *)v497 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v497, (uint64_t)v131, v132, v52, v53, v54, v55, v56))
          {
            goto LABEL_182;
          }
          WTF::AtomStringImpl::addLiteral((uint64_t)"unit", 4uLL, v52, v53, v54, v55, v56, &v498);
          v133 = (WTF::StringImpl *)v498;
          JSC::intlStringOption(a2, (unsigned int *)v9, (unint64_t)v498, 0, 0, 0, 0, v134, &v485, 0, 0);
          if (v133)
          {
            if (*(_DWORD *)v133 == 2)
            {
              WTF::StringImpl::~StringImpl(v133, v135, v136, v52, v53, v54, v55, v56);
              WTF::fastFree(v303, v304, v305, v306, v307, v308, v309, v310);
            }
            else
            {
              *(_DWORD *)v133 -= 2;
            }
          }
          v137 = v497;
          if (*((_DWORD *)v497 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v497, (uint64_t)v135, v136, v52, v53, v54, v55, v56))
          {
            goto LABEL_179;
          }
          v479 = v485;
          if (v485)
          {
            JSC::wellFormedUnitIdentifier((uint64_t)&v498, *((unsigned __int8 **)v485 + 1), *((unsigned int *)v485 + 1) | ((unint64_t)((*((_DWORD *)v485 + 4) >> 2) & 1) << 32));
            if (!(_BYTE)v507)
            {
              v442 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v442 = 0x2900000002;
              *(_QWORD *)(v442 + 8) = "unit is not a well-formed unit identifier";
              *(_DWORD *)(v442 + 16) = 4;
              v498 = (const char *)v442;
              v444 = JSC::createRangeError((unint64_t)a2, (WTF::StringImpl **)&v498, v443);
              JSC::VM::throwException(v137, a2, v444, v445, v446, v447, v448, v449);
              v240 = (WTF::StringImpl *)v498;
              v498 = 0;
              if (v240)
              {
                v241 = *(_DWORD *)v240 - 2;
                if (*(_DWORD *)v240 == 2)
                {
                  WTF::StringImpl::~StringImpl(v240, v50, v51, v52, v53, v54, v55, v56);
                  goto LABEL_255;
                }
LABEL_178:
                *(_DWORD *)v240 = v241;
              }
LABEL_179:
              v242 = v485;
              v485 = 0;
              if (!v242)
                goto LABEL_182;
LABEL_180:
              if (*(_DWORD *)v242 == 2)
              {
                WTF::StringImpl::~StringImpl(v242, v50, v51, v52, v53, v54, v55, v56);
                WTF::fastFree(v279, v280, v281, v282, v283, v284, v285, v286);
              }
              else
              {
                *(_DWORD *)v242 -= 2;
              }
              goto LABEL_182;
            }
            v477 = v499;
            v475 = *(unsigned int *)((char *)&v498 + 1) | ((unint64_t)(*(unsigned __int16 *)((char *)&v498 + 5) | (HIBYTE(v498) << 16)) << 32);
            v476 = v500;
            v473 = v502;
            v474 = (uint64_t)v501;
            v471 = (int8x16_t *)v504;
            v472 = v503;
            v470 = v505;
            LODWORD(v478) = v506;
            HIDWORD(v478) = v498;
            WTF::String::operator=((unint64_t *)(a1 + 64), (WTF::AtomStringImpl *)&v485, v244, v245, v246, v247, v248, v249);
          }
          else
          {
            if (*(_BYTE *)(a1 + 96) == 3)
            {
              JSC::throwTypeError((unint64_t)a2, &v497, (uint64_t)"unit must be a string", 22);
              goto LABEL_179;
            }
            v478 = 0;
          }
          WTF::AtomStringImpl::addLiteral((uint64_t)"unitDisplay", 0xBuLL, v52, v53, v54, v55, v56, &v498);
          v138 = (WTF::StringImpl *)v498;
          v498 = "short";
          v499 = 6;
          LOBYTE(v500) = 0;
          v501 = "narrow";
          v502 = 7;
          LOBYTE(v503) = 1;
          v504 = "long";
          v505 = 5;
          v506 = 2;
          *(_BYTE *)(a1 + 99) = JSC::intlOption<JSC::IntlNumberFormat::UnitDisplay>(a2, (unsigned int *)v9, (unint64_t)v138, (uint64_t)&v498, 3, v139, v140, v141);
          if (v138)
          {
            if (*(_DWORD *)v138 == 2)
            {
              WTF::StringImpl::~StringImpl(v138, v142, v143, v52, v53, v54, v55, v56);
              WTF::fastFree(v311, v312, v313, v314, v315, v316, v317, v318);
            }
            else
            {
              *(_DWORD *)v138 -= 2;
            }
          }
          if (*((_DWORD *)v497 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v497, (uint64_t)v142, v143, v52, v53, v54, v55, v56))
          {
            goto LABEL_179;
          }
          v144 = *(unsigned __int8 *)(a1 + 96);
          if (v144 == 2)
            v145 = v120;
          else
            v145 = 0;
          if (v144 == 1)
            v146 = 0;
          else
            v146 = 3;
          if (v144 == 2)
            v120 = v120;
          else
            v120 = v146;
          WTF::AtomStringImpl::addLiteral((uint64_t)"notation", 8uLL, v52, v53, v54, v55, v56, &v498);
          v147 = (WTF::StringImpl *)v498;
          v498 = "standard";
          v499 = 9;
          LOBYTE(v500) = 0;
          v501 = "scientific";
          v502 = 11;
          LOBYTE(v503) = 1;
          v504 = "engineering";
          v505 = 12;
          v506 = 2;
          v507 = "compact";
          v508 = 8;
          LOBYTE(v509) = 3;
          *(_BYTE *)(a1 + 101) = JSC::intlOption<JSC::IntlNotation>(a2, (unsigned int *)v9, (unint64_t)v147, (uint64_t)&v498, 4, v148, v149, v150);
          if (v147)
          {
            if (*(_DWORD *)v147 == 2)
            {
              WTF::StringImpl::~StringImpl(v147, v151, v152, v153, v154, v155, v55, v56);
              WTF::fastFree(v319, v320, v321, v322, v323, v324, v325, v326);
            }
            else
            {
              *(_DWORD *)v147 -= 2;
            }
          }
          if (*((_DWORD *)v497 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v497, (uint64_t)v151, v152, v153, v154, v155, v55, v56))
          {
            goto LABEL_179;
          }
          JSC::setNumberFormatDigitOptions<JSC::IntlNumberFormat>(a2, a1, (unsigned int *)v9, v145, v120, *(unsigned __int8 *)(a1 + 101), v55, v56);
          if (*((_DWORD *)v497 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v497, v156, v157, v52, v53, v54, v55, v56))
              goto LABEL_179;
          }
          WTF::AtomStringImpl::addLiteral((uint64_t)"compactDisplay", 0xEuLL, v52, v53, v54, v55, v56, &v498);
          v158 = (WTF::StringImpl *)v498;
          v498 = "short";
          v499 = 6;
          LOBYTE(v500) = 0;
          v501 = "long";
          v502 = 5;
          LOBYTE(v503) = 1;
          *(_BYTE *)(a1 + 100) = JSC::intlOption<JSC::IntlNumberFormat::CompactDisplay>(a2, (unsigned int *)v9, (unint64_t)v158, (uint64_t)&v498, 2, v159, v160, v161);
          if (v158)
          {
            if (*(_DWORD *)v158 == 2)
            {
              WTF::StringImpl::~StringImpl(v158, v162, v163, v52, v53, v54, v55, v56);
              WTF::fastFree(v327, v328, v329, v330, v331, v332, v333, v334);
            }
            else
            {
              *(_DWORD *)v158 -= 2;
            }
          }
          if (*((_DWORD *)v497 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v497, (uint64_t)v162, v163, v52, v53, v54, v55, v56))
          {
            goto LABEL_179;
          }
          v164 = 2;
          if (*(_BYTE *)(a1 + 101) == 3)
            v164 = 1;
          WTF::AtomStringImpl::addLiteral((uint64_t)"useGrouping", 0xBuLL, v52, v53, v54, v55, v56, &v498);
          v165 = (WTF::StringImpl *)v498;
          v498 = "min2";
          v499 = 5;
          LOBYTE(v500) = 1;
          v501 = "auto";
          v502 = 5;
          LOBYTE(v503) = 2;
          v504 = "always";
          v505 = 7;
          v506 = 3;
          *(_BYTE *)(a1 + 104) = JSC::intlStringOrBooleanOption<JSC::IntlNumberFormat::UseGrouping>(a2, (unsigned int *)v9, (unint64_t)v165, (uint64_t)&v498, 3, v164, v166, v167);
          if (v165)
          {
            if (*(_DWORD *)v165 == 2)
            {
              WTF::StringImpl::~StringImpl(v165, v168, v169, v52, v53, v54, v55, v56);
              WTF::fastFree(v335, v336, v337, v338, v339, v340, v341, v342);
            }
            else
            {
              *(_DWORD *)v165 -= 2;
            }
          }
          if (*((_DWORD *)v497 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v497, (uint64_t)v168, v169, v52, v53, v54, v55, v56))
          {
            goto LABEL_179;
          }
          WTF::AtomStringImpl::addLiteral((uint64_t)"signDisplay", 0xBuLL, v52, v53, v54, v55, v56, &v498);
          v170 = (WTF::StringImpl *)v498;
          v498 = "auto";
          v499 = 5;
          LOBYTE(v500) = 0;
          v501 = "never";
          v502 = 6;
          LOBYTE(v503) = 1;
          v504 = "always";
          v505 = 7;
          v506 = 2;
          v507 = "exceptZero";
          v508 = 11;
          LOBYTE(v509) = 3;
          v510 = "negative";
          v511 = 9;
          v512 = 4;
          *(_BYTE *)(a1 + 102) = JSC::intlOption<JSC::IntlNumberFormat::SignDisplay>(a2, (unsigned int *)v9, (unint64_t)v170, (uint64_t)&v498, 5, v171, v172, v173);
          if (v170)
          {
            if (*(_DWORD *)v170 == 2)
            {
              WTF::StringImpl::~StringImpl(v170, v174, v175, v176, v177, v178, v179, v180);
              WTF::fastFree(v343, v344, v345, v346, v347, v348, v349, v350);
            }
            else
            {
              *(_DWORD *)v170 -= 2;
            }
          }
          if (*((_DWORD *)v497 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v497, (uint64_t)v174, v175, v176, v177, v178, v179, v180))
          {
            goto LABEL_179;
          }
          v181 = v488;
          if (v488)
            *(_DWORD *)v488 += 2;
          v182 = *(_QWORD *)(a1 + 48);
          if (v182)
            *(_DWORD *)v182 += 2;
          if (v181)
            v183 = *((_DWORD *)v181 + 1);
          else
            v183 = 0;
          if (v182)
          {
            v184 = *(_DWORD *)(v182 + 4);
            if (v184 < 0)
              goto LABEL_323;
          }
          else
          {
            v184 = 0;
          }
          v185 = __OFADD__(v184, 6);
          v186 = v184 + 6;
          v187 = v185;
          if ((v183 & 0x80000000) == 0 && (v187 & 1) == 0)
          {
            v188 = (v183 + v186);
            if (!__OFADD__(v183, v186))
            {
              if (!v181)
                goto LABEL_319;
              v189 = *((_DWORD *)v181 + 4);
              v190 = (v189 >> 2) & 1;
              if (v182 && (v189 & 4) != 0)
              {
LABEL_119:
                v190 = (*(unsigned __int8 *)(v182 + 16) >> 2) & 1;
                goto LABEL_120;
              }
              while (1)
              {
LABEL_120:
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v188, v190, (uint64_t)v181, (int8x16_t *)"-u-nu-", 6u, v182, (int **)&v498);
                if (!v498)
                  goto LABEL_324;
                WTF::String::utf8((uint64_t *)&v498, 0, v191, v192, v193, v194, v195, &v484, v196);
                v204 = (WTF::StringImpl *)v498;
                v498 = 0;
                if (v204)
                {
                  if (*(_DWORD *)v204 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v204, v197, v198, v199, v200, v201, v202, v203);
                    WTF::fastFree(v351, v352, v353, v354, v355, v356, v357, v358);
                  }
                  else
                  {
                    *(_DWORD *)v204 -= 2;
                  }
                }
                if (v182)
                {
                  if (*(_DWORD *)v182 == 2)
                  {
                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v182, v197, v198, v199, v200, v201, v202, v203);
                    WTF::fastFree(v359, v360, v361, v362, v363, v364, v365, v366);
                  }
                  else
                  {
                    *(_DWORD *)v182 -= 2;
                  }
                }
                if (v181)
                {
                  if (*(_DWORD *)v181 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v181, v197, v198, v199, v200, v201, v202, v203);
                    WTF::fastFree(v367, v368, v369, v370, v371, v372, v373, v374);
                  }
                  else
                  {
                    *(_DWORD *)v181 -= 2;
                  }
                }
                v480 = 0;
                v481 = 0;
                v482 = 0;
                v483 = 1;
                v205 = *(unsigned __int8 *)(a1 + 96);
                if (v205 != 3)
                  break;
                v188 = WTF::StringBuilder::append((uint64_t)&v480, (int8x16_t *)" measure-unit/", 0xEuLL, v199, v200, v201, v202, v203);
                if (v479)
                {
                  WTF::StringBuilder::append<WTF::ASCIILiteral,char,WTF::ASCIILiteral>((uint64_t)&v480, HIDWORD(v478) | (v475 << 8), v477, 45, v476, v474, v250, v251);
                  if ((_DWORD)v478)
                    WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::ASCIILiteral>((uint64_t)&v480, (int8x16_t *)" per-measure-unit/", 19, v473, v472, 45, v471, v470);
                  v252 = *(unsigned __int8 *)(a1 + 99);
                  if (!*(_BYTE *)(a1 + 99))
                  {
                    v253 = (int8x16_t *)" unit-width-short";
                    v254 = 17;
LABEL_192:
                    WTF::StringBuilder::append((uint64_t)&v480, v253, v254, v199, v200, v201, v202, v203);
                    goto LABEL_133;
                  }
                  if (v252 != 2)
                  {
                    if (v252 == 1)
                      goto LABEL_231;
LABEL_133:
                    JSC::appendNumberFormatDigitOptionsToSkeleton<JSC::IntlNumberFormat>(a1, (uint64_t)&v480, v198, v199, v200, v201, v202, v203);
                    v212 = *(unsigned __int8 *)(a1 + 101);
                    switch(v212)
                    {
                      case 1:
                        v451 = (int8x16_t *)" scientific";
                        v452 = 11;
                        goto LABEL_269;
                      case 3:
                        if (!*(_BYTE *)(a1 + 100))
                        {
                          v451 = (int8x16_t *)" compact-short";
                          v452 = 14;
                          goto LABEL_269;
                        }
                        if (*(_BYTE *)(a1 + 100) == 1)
                        {
                          v451 = (int8x16_t *)" compact-long";
                          v452 = 13;
                          goto LABEL_269;
                        }
                        break;
                      case 2:
                        v451 = (int8x16_t *)" engineering";
                        v452 = 12;
LABEL_269:
                        v206 = (WTF::ICU *)WTF::StringBuilder::append((uint64_t)&v480, v451, v452, v207, v208, v209, v210, v211);
                        break;
                      default:
                        break;
                    }
                    v213 = *(_BYTE *)(a1 + 96) == 2 && *(unsigned __int8 *)(a1 + 98) == 1;
                    if (*(_BYTE *)(a1 + 102))
                    {
                      v218 = (int8x16_t *)" sign-never";
                      v215 = 11;
                      switch(*(_BYTE *)(a1 + 102))
                      {
                        case 1:
                          goto LABEL_146;
                        case 2:
                          v214 = !v213;
                          if (v213)
                            v215 = 23;
                          else
                            v215 = 12;
                          v216 = " sign-always";
                          v217 = " sign-accounting-always";
                          break;
                        case 3:
                          v214 = !v213;
                          if (v213)
                            v215 = 28;
                          else
                            v215 = 17;
                          v216 = " sign-except-zero";
                          v217 = " sign-accounting-except-zero";
                          break;
                        case 4:
                          if (WTF::ICU::majorVersion(v206) < 0x45)
                            goto LABEL_147;
                          v214 = !v213;
                          if (v213)
                            v215 = 25;
                          else
                            v215 = 14;
                          v216 = " sign-negative";
                          v217 = " sign-accounting-negative";
                          break;
                        default:
                          goto LABEL_147;
                      }
                    }
                    else
                    {
                      v214 = !v213;
                      if (v213)
                        v215 = 16;
                      else
                        v215 = 10;
                      v216 = " sign-auto";
                      v217 = " sign-accounting";
                    }
                    if (v214)
                      v218 = (int8x16_t *)v216;
                    else
                      v218 = (int8x16_t *)v217;
LABEL_146:
                    WTF::StringBuilder::append((uint64_t)&v480, v218, v215, v207, v208, v209, v210, v211);
LABEL_147:
                    v219 = *(unsigned __int8 *)(a1 + 104);
                    if (v219 == 2)
                    {
                      v220 = (int8x16_t *)" group-auto";
                      goto LABEL_149;
                    }
                    if (!*(_BYTE *)(a1 + 104))
                    {
                      v220 = (int8x16_t *)" group-off";
                      v221 = 10;
                      goto LABEL_150;
                    }
                    if (v219 == 3)
                    {
                      v220 = (int8x16_t *)" group-on-aligned";
                      v221 = 17;
                      goto LABEL_150;
                    }
                    if (v219 == 1)
                    {
                      v220 = (int8x16_t *)" group-min2";
LABEL_149:
                      v221 = 11;
LABEL_150:
                      WTF::StringBuilder::append((uint64_t)&v480, v220, v221, v207, v208, v209, v210, v211);
                    }
                    v222 = v480;
                    if (!v480)
                    {
                      WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v480, (uint64_t)v218, v215, v207, v208, v209, v210, v211);
                      WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v480);
                      v222 = v480;
                      if (!v480)
                      {
                        v225 = 0;
                        LODWORD(v223) = 0;
                        v227 = 0;
                        v498 = (const char *)&v500;
                        LODWORD(v499) = 32;
                        v508 = 0;
                        v509 = 0;
                        v226 = 1;
LABEL_155:
                        HIDWORD(v499) = v223;
                        v228 = (int *)&v500;
                        v229 = (int *)&v500;
                        goto LABEL_156;
                      }
                    }
                    v223 = *((unsigned int *)v222 + 1);
                    *(_DWORD *)v222 += 2;
                    v224 = *((_DWORD *)v222 + 4);
                    v225 = (int *)*((_QWORD *)v222 + 1);
                    v498 = (const char *)&v500;
                    v499 = 32;
                    v508 = 0;
                    v509 = 0;
                    if ((v224 & 4) != 0)
                    {
                      if (v223 <= 0x20)
                      {
                        v226 = 0;
                        v227 = v223;
                        goto LABEL_155;
                      }
                      if (v223 <= 0x29)
                        v414 = 41;
                      else
                        v414 = v223;
                      if (v414 >> 31)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197E272F4);
                      }
                      v228 = (int *)WTF::fastMalloc((WTF *)(2 * v414));
                      v498 = (const char *)v228;
                      v499 = __PAIR64__(v223, v414);
                      if (v223 < 0x40)
                      {
                        v226 = 0;
                        v227 = v223;
                        v229 = v228;
                      }
                      else
                      {
                        v229 = (int *)((char *)v228 + 2 * (v223 & 0xFFFFFFC0));
                        v415 = 0uLL;
                        v416 = (char *)v228;
                        do
                        {
                          v514.val[0] = *(int8x16_t *)v225;
                          v417 = *((int8x16_t *)v225 + 1);
                          v515.val[0] = (int8x16_t)*((_OWORD *)v225 + 2);
                          v418 = *((_OWORD *)v225 + 3);
                          v225 += 16;
                          v419 = v418;
                          v515.val[1] = 0uLL;
                          v516.val[0] = v417;
                          v514.val[1] = 0uLL;
                          v420 = v416;
                          vst2q_s8(v420, v514);
                          v420 += 32;
                          v516.val[1] = 0uLL;
                          vst2q_s8(v420, v516);
                          v421 = v416 + 64;
                          vst2q_s8(v421, v515);
                          v422 = v416 + 96;
                          vst2q_s8(v422, *(int8x16x2_t *)(&v415 - 1));
                          v416 += 128;
                        }
                        while (v416 != (char *)v229);
                        v226 = 0;
                        v227 = v223;
                      }
LABEL_156:
                      v230 = (int *)((char *)v228 + 2 * v227);
                      while (v229 != v230)
                      {
                        v231 = *(unsigned __int8 *)v225;
                        v225 = (int *)((char *)v225 + 1);
                        *(_WORD *)v229 = v231;
                        v229 = (int *)((char *)v229 + 2);
                      }
                      v225 = (int *)v498;
                      v232 = HIDWORD(v499);
                    }
                    else
                    {
                      v226 = 0;
                      v232 = v223;
                    }
                    v508 = (uint64_t)v225;
                    v509 = v232;
                    v233 = unumf_openForSkeletonAndLocale();
                    v234 = *(_QWORD *)(a1 + 24);
                    *(_QWORD *)(a1 + 24) = v233;
                    if (v234)
                      unumf_close();
                    v235 = unumrf_openForSkeletonWithCollapseAndIdentityFallback();
                    v236 = *(_QWORD *)(a1 + 32);
                    *(_QWORD *)(a1 + 32) = v235;
                    if (v236)
                      unumrf_close();
                    v237 = (int *)v498;
                    if (&v500 != (_BYTE **)v498 && v498)
                    {
                      v498 = 0;
                      LODWORD(v499) = 0;
                      WTF::fastFree((unint64_t)v237, v50, v51, v52, v53, v54, v55, v56);
                    }
                    if ((v226 & 1) == 0)
                    {
                      if (*(_DWORD *)v222 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v222, v50, v51, v52, v53, v54, v55, v56);
                        WTF::fastFree(v375, v376, v377, v378, v379, v380, v381, v382);
                      }
                      else
                      {
                        *(_DWORD *)v222 -= 2;
                      }
                    }
                    v238 = v481;
                    v481 = 0;
                    if (v238)
                    {
                      if (*(_DWORD *)v238 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v238, v50, v51, v52, v53, v54, v55, v56);
                        WTF::fastFree(v383, v384, v385, v386, v387, v388, v389, v390);
                      }
                      else
                      {
                        *(_DWORD *)v238 -= 2;
                      }
                    }
                    v239 = v480;
                    v480 = 0;
                    if (v239)
                    {
                      if (*(_DWORD *)v239 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v239, v50, v51, v52, v53, v54, v55, v56);
                        WTF::fastFree(v391, v392, v393, v394, v395, v396, v397, v398);
                      }
                      else
                      {
                        *(_DWORD *)v239 -= 2;
                      }
                    }
                    v240 = v484;
                    v484 = 0;
                    if (v240)
                    {
                      v241 = *(_DWORD *)v240 - 1;
                      if (*(_DWORD *)v240 != 1)
                        goto LABEL_178;
LABEL_255:
                      WTF::fastFree((unint64_t)v240, v50, v51, v52, v53, v54, v55, v56);
                    }
                    goto LABEL_179;
                  }
LABEL_260:
                  v253 = (int8x16_t *)" unit-width-full-name";
                  v254 = 21;
                  goto LABEL_192;
                }
                __break(1u);
LABEL_319:
                if (v182)
                  goto LABEL_119;
                v190 = 1;
              }
              if (v205 == 1)
              {
                v253 = (int8x16_t *)" percent scale/100";
              }
              else
              {
                if (v205 != 2)
                  goto LABEL_133;
                WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String>((uint64_t)&v480, (int8x16_t *)" currency/", 11, (uint64_t)v486, v200, v201, v202, v203);
                v450 = *(unsigned __int8 *)(a1 + 97);
                if (!*(_BYTE *)(a1 + 97))
                {
                  v253 = (int8x16_t *)" unit-width-iso-code";
                  v254 = 20;
                  goto LABEL_192;
                }
                if (v450 == 3)
                  goto LABEL_260;
                if (v450 != 2)
                  goto LABEL_133;
LABEL_231:
                v253 = (int8x16_t *)" unit-width-narrow";
              }
              v254 = 18;
              goto LABEL_192;
            }
          }
LABEL_323:
          v498 = 0;
LABEL_324:
          __break(0xC471u);
          JUMPOUT(0x197E272ECLL);
        }
LABEL_288:
        v9 = 0;
        goto LABEL_6;
      }
      v405 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v9, (JSC::SymbolObject **)a2, (uint64_t)v14, v15, v16, v17, v18, v19);
    }
    v9 = v405;
    goto LABEL_5;
  }
LABEL_27:
  if (v496)
  {
    v99 = v494;
    v100 = 8 * v496;
    do
    {
      v101 = *v99;
      *v99 = 0;
      if (v101)
      {
        if (*(_DWORD *)v101 == 2)
        {
          WTF::StringImpl::~StringImpl(v101, v13, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
          WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
        }
        else
        {
          *(_DWORD *)v101 -= 2;
        }
      }
      ++v99;
      v100 -= 8;
    }
    while (v100);
  }
  v66 = (WTF *)v494;
  if (v494)
  {
    v494 = 0;
    v495 = 0;
    WTF::fastFree((unint64_t)v66, v13, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
  }
}

uint64_t std::optional<WTF::String>::operator=[abi:sn180100]<WTF::String&,void>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  WTF::StringImpl *v10;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = *(_DWORD **)a2;
  if (*(_BYTE *)(a1 + 8))
  {
    if (v9)
      *v9 += 2;
    v10 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  else
  {
    if (v9)
      *v9 += 2;
    *(_QWORD *)a1 = v9;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

unint64_t *WTF::String::operator=(unint64_t *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v9 += 2;
  v10 = *a1;
  *a1 = (unint64_t)v9;
  if (!v10)
    return a1;
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    return a1;
  }
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v17)
  {
    pas_try_deallocate_slow_no_cache(v10, (uint64_t)&bmalloc_heap_config, 1);
    return a1;
  }
  if (v10 >> 43
    || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v10 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v10)) & 1) == 0)
  {
    if (v10 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v10 >> 24)
    {
      v12 = 0;
    }
    else
    {
      v12 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v10 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v10) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)v12 == 1)
        goto LABEL_10;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v17, v10, 1, v12, v13, v14, v15, v16);
    return a1;
  }
LABEL_10:
  v18 = *(unsigned int *)(v17 + 8000);
  if (v18 >= 0x3E7)
  {
    pas_thread_local_cache_append_deallocation_slow(v17, v10, (os_unfair_lock_s *)5, v12, v13, v14, v15, v16);
    return a1;
  }
  *(_QWORD *)(v17 + 8 * v18) = v10 | 0x5000000000000;
  *(_DWORD *)(v17 + 8000) = v18 + 1;
  return a1;
}

uint64_t JSC::intlOption<JSC::IntlNumberFormat::Style>(JSC::JSGlobalObject *a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const WTF::String *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;

  if (!a2)
    return 0;
  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v12 = JSC::JSObject::get(a2, (uint64_t)a1, a3, a4, a5, a6, a7, a8);
  v21 = v12;
  v71 = v12;
  if (*((_DWORD *)v11 + 20))
  {
    v22 = 0;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, v13, (uint64_t)v14, v15, v16, v17, v18, v19) || v21 == 10)
      return v22;
  }
  else if (v12 == 10)
  {
    return 0;
  }
  JSC::JSValue::toWTFString((JSC::JSValue *)&v71, a1, v14, v15, v16, v17, v18, v19, (int **)&v70, v20);
  if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v24, v25, v26, v27, v28, v29, v30))
  {
    if (a5)
    {
      v31 = a4 + 24 * a5;
      v32 = (unsigned __int8 *)(a4 + 16);
      while (1)
      {
        v33 = *((_QWORD *)v32 - 1);
        v34 = v32 - 16;
        v35 = v33 ? v33 - 1 : 0;
        if (WTF::equalInternal<unsigned char>((uint64_t)v70, *((_QWORD *)v32 - 2), v35))
          break;
        v32 += 24;
        if (v34 + 24 == (unsigned __int8 *)v31)
          goto LABEL_16;
      }
      v22 = *v32;
      goto LABEL_21;
    }
LABEL_16:
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v43 = 0x4000000002;
    *(_QWORD *)(v43 + 8) = "style must be either \"decimal\", \"percent\", \"currency\", or \"unit\"";
    *(_DWORD *)(v43 + 16) = 4;
    v69 = (WTF::StringImpl *)v43;
    v45 = JSC::createRangeError((unint64_t)a1, &v69, v44);
    JSC::VM::throwException(v11, a1, v45, v46, v47, v48, v49, v50);
    v51 = v69;
    v69 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v36, v37, v38, v39, v40, v41, v42);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
  }
  v22 = 0;
LABEL_21:
  v52 = v70;
  v70 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  return v22;
}

uint64_t JSC::computeCurrencyDigits(JSC *this, const WTF::String *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v11;

  if (!this)
  {
    v3 = 0;
LABEL_16:
    v2 = 0;
    goto LABEL_4;
  }
  v2 = *((_DWORD *)this + 1);
  if (v2)
  {
    v11 = (unsigned __int8 *)*((_QWORD *)this + 1);
    if ((*((_BYTE *)this + 16) & 4) != 0)
    {
      v3 = *v11 << 16;
      if (v2 != 1)
      {
        v3 |= v11[1] << 8;
        if (v2 != 2)
        {
          v2 = v11[2];
          goto LABEL_4;
        }
      }
    }
    else
    {
      v3 = *(unsigned __int16 *)v11 << 16;
      if (v2 != 1)
      {
        v3 += *((unsigned __int16 *)v11 + 1) << 8;
        if (v2 != 2)
        {
          v2 = *((unsigned __int16 *)v11 + 2);
          goto LABEL_4;
        }
      }
    }
    goto LABEL_16;
  }
  v3 = 0;
LABEL_4:
  v4 = 0;
  v5 = v3 + v2;
  v6 = 26;
  do
  {
    v7 = v6 - 1;
    v8 = (*((char *)&JSC::computeCurrencyDigits(WTF::String const&)::currencyMinorUnits
          + 8 * v4
          + 8 * ((v6 - 1) >> 1)
          + 1) << 8)
       + (*((char *)&JSC::computeCurrencyDigits(WTF::String const&)::currencyMinorUnits + 8 * v4 + 8 * ((v6 - 1) >> 1)) << 16)
       + *((char *)&JSC::computeCurrencyDigits(WTF::String const&)::currencyMinorUnits + 8 * v4
                                                                                       + 8 * ((v6 - 1) >> 1)
                                                                                       + 2);
    if (v8 == v5)
    {
      v4 += (v6 - 1) >> 1;
      return *((unsigned int *)&JSC::computeCurrencyDigits(WTF::String const&)::currencyMinorUnits + 2 * v4 + 1);
    }
    v6 -= (v7 >> 1) + 1;
    if (v8 <= v5)
    {
      v9 = (v7 >> 1) + 1;
    }
    else
    {
      v6 = v7 >> 1;
      v9 = 0;
    }
    v4 += v9;
  }
  while (v6 > 1);
  if (!v6
    || (*((char *)&JSC::computeCurrencyDigits(WTF::String const&)::currencyMinorUnits + 8 * v4 + 1) << 8)
     + (*((char *)&JSC::computeCurrencyDigits(WTF::String const&)::currencyMinorUnits + 8 * v4) << 16)
     + *((char *)&JSC::computeCurrencyDigits(WTF::String const&)::currencyMinorUnits + 8 * v4 + 2) != v5)
  {
    return 2;
  }
  return *((unsigned int *)&JSC::computeCurrencyDigits(WTF::String const&)::currencyMinorUnits + 2 * v4 + 1);
}

uint64_t JSC::intlOption<JSC::IntlNumberFormat::CurrencyDisplay>(JSC::JSGlobalObject *a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  uint64_t v12;
  const WTF::String *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const WTF::String *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;

  if (!a2)
    return 1;
  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v19 = JSC::JSObject::get(a2, (uint64_t)a1, a3, a4, a5, a6, a7, a8);
  v70 = v19;
  if (*((_DWORD *)v11 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v12, (uint64_t)v13, v14, v15, v16, v17, v18))
  {
    return 0;
  }
  if (v19 == 10)
    return 1;
  JSC::JSValue::toWTFString((JSC::JSValue *)&v70, a1, v13, v14, v15, v16, v17, v18, (int **)&v69, v20);
  if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v23, v24, v25, v26, v27, v28, v29))
  {
    if (a5)
    {
      v30 = a4 + 24 * a5;
      v31 = (unsigned __int8 *)(a4 + 16);
      while (1)
      {
        v32 = *((_QWORD *)v31 - 1);
        v33 = v31 - 16;
        v34 = v32 ? v32 - 1 : 0;
        if (WTF::equalInternal<unsigned char>((uint64_t)v69, *((_QWORD *)v31 - 2), v34))
          break;
        v31 += 24;
        if (v33 + 24 == (unsigned __int8 *)v30)
          goto LABEL_14;
      }
      v21 = *v31;
      goto LABEL_18;
    }
LABEL_14:
    v42 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v42 = 0x3A00000002;
    *(_QWORD *)(v42 + 8) = "currencyDisplay must be either \"code\", \"symbol\", or \"name\"";
    *(_DWORD *)(v42 + 16) = 4;
    v68 = (WTF::StringImpl *)v42;
    v44 = JSC::createRangeError((unint64_t)a1, &v68, v43);
    JSC::VM::throwException(v11, a1, v44, v45, v46, v47, v48, v49);
    v50 = v68;
    v68 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v35, v36, v37, v38, v39, v40, v41);
        WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
      }
      else
      {
        *(_DWORD *)v50 -= 2;
      }
    }
  }
  v21 = 0;
LABEL_18:
  v51 = v69;
  v69 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  return v21;
}

uint64_t JSC::intlOption<JSC::IntlNumberFormat::CurrencySign>(JSC::JSGlobalObject *a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const WTF::String *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;

  if (!a2)
    return 0;
  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v12 = JSC::JSObject::get(a2, (uint64_t)a1, a3, a4, a5, a6, a7, a8);
  v21 = v12;
  v71 = v12;
  if (*((_DWORD *)v11 + 20))
  {
    v22 = 0;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, v13, (uint64_t)v14, v15, v16, v17, v18, v19) || v21 == 10)
      return v22;
  }
  else if (v12 == 10)
  {
    return 0;
  }
  JSC::JSValue::toWTFString((JSC::JSValue *)&v71, a1, v14, v15, v16, v17, v18, v19, (int **)&v70, v20);
  if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v24, v25, v26, v27, v28, v29, v30))
  {
    if (a5)
    {
      v31 = a4 + 24 * a5;
      v32 = (unsigned __int8 *)(a4 + 16);
      while (1)
      {
        v33 = *((_QWORD *)v32 - 1);
        v34 = v32 - 16;
        v35 = v33 ? v33 - 1 : 0;
        if (WTF::equalInternal<unsigned char>((uint64_t)v70, *((_QWORD *)v32 - 2), v35))
          break;
        v32 += 24;
        if (v34 + 24 == (unsigned __int8 *)v31)
          goto LABEL_16;
      }
      v22 = *v32;
      goto LABEL_20;
    }
LABEL_16:
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v43 = 0x3600000002;
    *(_QWORD *)(v43 + 8) = "currencySign must be either \"standard\" or \"accounting\"";
    *(_DWORD *)(v43 + 16) = 4;
    v69 = (WTF::StringImpl *)v43;
    v45 = JSC::createRangeError((unint64_t)a1, &v69, v44);
    JSC::VM::throwException(v11, a1, v45, v46, v47, v48, v49, v50);
    v51 = v69;
    v69 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v36, v37, v38, v39, v40, v41, v42);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
  }
  v22 = 0;
LABEL_20:
  v52 = v70;
  v70 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  return v22;
}

uint64_t JSC::wellFormedUnitIdentifier(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t result;
  double v5;
  double v6;
  float v7;
  __int128 v8;
  char v9;
  double v10;
  double v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];
  char v23;
  __int128 v24;
  __int128 v25;
  char v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v27 = a2;
  v28 = a3;
  result = JSC::sanctionedSimpleUnitIdentifier((uint64_t)&v24, a2, a3);
  if (v26)
  {
    v8 = v25;
    *(_OWORD *)a1 = v24;
    *(_OWORD *)(a1 + 16) = v8;
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 64) = 0;
    v9 = 1;
  }
  else
  {
    result = WTF::StringView::find((uint64_t)&v27, (uint64_t)"-per-", (void *)0x100000005, 0, v5, v6, v7);
    if (result == -1)
      goto LABEL_7;
    v13 = result;
    v14 = (result + 5);
    result = WTF::StringView::find((uint64_t)&v27, (uint64_t)"-per-", (void *)0x100000005, v14, v10, v11, v12);
    if (result != -1)
      goto LABEL_7;
    if ((_DWORD)v28)
    {
      if (v28 <= v13)
      {
        v15 = v27;
        v16 = v28;
      }
      else
      {
        v15 = v27;
        v16 = BYTE4(v28) ? v13 | 0x100000000 : v13;
      }
    }
    else
    {
      v16 = 0x100000000;
      v15 = "";
    }
    result = JSC::sanctionedSimpleUnitIdentifier((uint64_t)&v24, v15, v16);
    if (!v26)
    {
LABEL_7:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 72) = 0;
      return result;
    }
    v17 = (unsigned __int8 *)WTF::StringView::substring((const char *)&v27, v14, 0xFFFFFFFF);
    result = JSC::sanctionedSimpleUnitIdentifier((uint64_t)v22, v17, v18);
    v9 = v23;
    if (v23)
    {
      v19 = v25;
      v21 = v22[0];
      v20 = v22[1];
      *(_OWORD *)a1 = v24;
      *(_OWORD *)(a1 + 16) = v19;
      *(_OWORD *)(a1 + 32) = v21;
      *(_OWORD *)(a1 + 48) = v20;
      v9 = 1;
      *(_BYTE *)(a1 + 64) = 1;
    }
    else
    {
      *(_BYTE *)a1 = 0;
    }
  }
  *(_BYTE *)(a1 + 72) = v9;
  return result;
}

uint64_t JSC::intlOption<JSC::IntlNumberFormat::UnitDisplay>(JSC::JSGlobalObject *a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const WTF::String *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;

  if (!a2)
    return 0;
  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v12 = JSC::JSObject::get(a2, (uint64_t)a1, a3, a4, a5, a6, a7, a8);
  v21 = v12;
  v71 = v12;
  if (*((_DWORD *)v11 + 20))
  {
    v22 = 0;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, v13, (uint64_t)v14, v15, v16, v17, v18, v19) || v21 == 10)
      return v22;
  }
  else if (v12 == 10)
  {
    return 0;
  }
  JSC::JSValue::toWTFString((JSC::JSValue *)&v71, a1, v14, v15, v16, v17, v18, v19, (int **)&v70, v20);
  if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v24, v25, v26, v27, v28, v29, v30))
  {
    if (a5)
    {
      v31 = a4 + 24 * a5;
      v32 = (unsigned __int8 *)(a4 + 16);
      while (1)
      {
        v33 = *((_QWORD *)v32 - 1);
        v34 = v32 - 16;
        v35 = v33 ? v33 - 1 : 0;
        if (WTF::equalInternal<unsigned char>((uint64_t)v70, *((_QWORD *)v32 - 2), v35))
          break;
        v32 += 24;
        if (v34 + 24 == (unsigned __int8 *)v31)
          goto LABEL_16;
      }
      v22 = *v32;
      goto LABEL_20;
    }
LABEL_16:
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v43 = 0x3700000002;
    *(_QWORD *)(v43 + 8) = "unitDisplay must be either \"short\", \"narrow\", or \"long\"";
    *(_DWORD *)(v43 + 16) = 4;
    v69 = (WTF::StringImpl *)v43;
    v45 = JSC::createRangeError((unint64_t)a1, &v69, v44);
    JSC::VM::throwException(v11, a1, v45, v46, v47, v48, v49, v50);
    v51 = v69;
    v69 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v36, v37, v38, v39, v40, v41, v42);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
  }
  v22 = 0;
LABEL_20:
  v52 = v70;
  v70 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  return v22;
}

uint64_t JSC::intlOption<JSC::IntlNotation>(JSC::JSGlobalObject *a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const WTF::String *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;

  if (!a2)
    return 0;
  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v12 = JSC::JSObject::get(a2, (uint64_t)a1, a3, a4, a5, a6, a7, a8);
  v21 = v12;
  v71 = v12;
  if (*((_DWORD *)v11 + 20))
  {
    v22 = 0;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, v13, (uint64_t)v14, v15, v16, v17, v18, v19) || v21 == 10)
      return v22;
  }
  else if (v12 == 10)
  {
    return 0;
  }
  JSC::JSValue::toWTFString((JSC::JSValue *)&v71, a1, v14, v15, v16, v17, v18, v19, (int **)&v70, v20);
  if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v24, v25, v26, v27, v28, v29, v30))
  {
    if (a5)
    {
      v31 = a4 + 24 * a5;
      v32 = (unsigned __int8 *)(a4 + 16);
      while (1)
      {
        v33 = *((_QWORD *)v32 - 1);
        v34 = v32 - 16;
        v35 = v33 ? v33 - 1 : 0;
        if (WTF::equalInternal<unsigned char>((uint64_t)v70, *((_QWORD *)v32 - 2), v35))
          break;
        v32 += 24;
        if (v34 + 24 == (unsigned __int8 *)v31)
          goto LABEL_16;
      }
      v22 = *v32;
      goto LABEL_20;
    }
LABEL_16:
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v43 = 0x4D00000002;
    *(_QWORD *)(v43 + 8) = "notation must be either \"standard\", \"scientific\", \"engineering\", or \"compact\"";
    *(_DWORD *)(v43 + 16) = 4;
    v69 = (WTF::StringImpl *)v43;
    v45 = JSC::createRangeError((unint64_t)a1, &v69, v44);
    JSC::VM::throwException(v11, a1, v45, v46, v47, v48, v49, v50);
    v51 = v69;
    v69 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v36, v37, v38, v39, v40, v41, v42);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
  }
  v22 = 0;
LABEL_20:
  v52 = v70;
  v70 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  return v22;
}

void JSC::setNumberFormatDigitOptions<JSC::IntlNumberFormat>(JSC::JSGlobalObject *a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::JSObject *v19;
  int8x16_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  JSC::VM *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  JSC::JSObject *v57;
  int8x16_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  int8x16_t v87;
  _BOOL4 v89;
  JSC::JSObject *v90;
  _BOOL4 v92;
  BOOL v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int8x16_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const WTF::String *v112;
  const char *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::AtomStringImpl *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  int8x16_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  char v151;
  unsigned int v152;
  unsigned int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  JSC::VM *v159;
  WTF::StringImpl *v160;
  uint64_t v161;
  char v162;
  const char *v163;
  uint64_t v164;
  char v165;
  const char *v166;
  uint64_t v167;
  char v168;
  const char *v169;
  uint64_t v170;
  char v171;
  const char *v172;
  uint64_t v173;
  char v174;
  const char *v175;
  uint64_t v176;
  char v177;
  const char *v178;
  uint64_t v179;
  char v180;
  const char *v181;
  uint64_t v182;
  char v183;
  const char *v184;
  uint64_t v185;
  char v186;
  uint64_t v187;

  v153 = a4;
  v187 = *MEMORY[0x1E0C80C00];
  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v159 = v11;
  v12 = (_DWORD *)((char *)v11 + 41952);
  v152 = a5;
  v154 = a6;
  if (a3)
  {
    v13 = *(_QWORD *)(*(_QWORD *)v12 + 1888);
    v19 = (JSC::JSObject *)JSC::JSObject::get(a3, (uint64_t)a1, v13, a4, a5, a6, a7, a8);
    if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v14, v15, v16, v17, v18, a7, a8))
      v21 = 0;
    else
      v21 = JSC::intlDefaultNumberOption(a1, v19, v13, 1, 21, 1uLL, a7, a8, v20);
  }
  else
  {
    v21 = 1;
  }
  if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    if (a3)
    {
      v157 = JSC::JSObject::get(a3, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)v12 + 1880), a4, a5, a6, a7, a8);
      if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v22, v23, v24, v25, v26, v27, v28))
        return;
      v158 = JSC::JSObject::get(a3, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)v12 + 1808), v24, v25, v26, v27, v28);
      if (*((_DWORD *)v11 + 20))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, v29, v30, v31, v32, v33, v34, v35))
          return;
      }
      v155 = JSC::JSObject::get(a3, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)v12 + 1896), v31, v32, v33, v34, v35);
      if (*((_DWORD *)v11 + 20))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, v36, v37, v38, v39, v40, v41, v42))
          return;
      }
      v156 = JSC::JSObject::get(a3, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)v12 + 1816), v38, v39, v40, v41, v42);
      if (*((_DWORD *)v11 + 20))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, v43, v44, v45, v46, v47, v48, v49))
          return;
      }
      *(_DWORD *)(a2 + 72) = v21;
      v50 = *(_QWORD *)(*(_QWORD *)v12 + 2216);
      v51 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v57 = (JSC::JSObject *)JSC::JSObject::get(a3, (uint64_t)a1, v50, v45, v46, v47, v48, v49);
      if (*((_DWORD *)v51 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v51, v52, v53, v54, v55, v56, a7, a8))
        v59 = 0;
      else
        v59 = JSC::intlDefaultNumberOption(a1, v57, v50, 1, 5000, 1uLL, a7, a8, v58);
    }
    else
    {
      v59 = 1;
      *(_DWORD *)(a2 + 72) = v21;
      v157 = 10;
      v158 = 10;
      v155 = 10;
      v156 = 10;
    }
    if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      return;
    if (v59 <= 99)
    {
      if (v59 > 0x32 || ((1 << v59) & 0x4000002100426) == 0)
        goto LABEL_67;
    }
    else if (v59 > 999)
    {
      if (v59 > 2499)
      {
        if (v59 != 2500 && v59 != 5000)
          goto LABEL_67;
      }
      else if (v59 != 1000 && v59 != 2000)
      {
        goto LABEL_67;
      }
    }
    else if (v59 > 249)
    {
      if (v59 != 250 && v59 != 500)
        goto LABEL_67;
    }
    else if (v59 != 100 && v59 != 200)
    {
LABEL_67:
      v111 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v111 = 0x6400000002;
      v113 = "roundingIncrement must be one of 1, 2, 5, 10, 20, 25, 50, 100, 200, 250, 500, 1000, 2000, 2500, 5000";
LABEL_68:
      *(_QWORD *)(v111 + 8) = v113;
      *(_DWORD *)(v111 + 16) = 4;
      v160 = (WTF::StringImpl *)v111;
      v114 = JSC::createRangeError((unint64_t)a1, &v160, v112);
      JSC::VM::throwException(v11, a1, v114, v115, v116, v117, v118, v119);
      v127 = v160;
      v160 = 0;
      if (v127)
      {
        if (*(_DWORD *)v127 == 2)
        {
          WTF::StringImpl::~StringImpl(v127, v120, v121, v122, v123, v124, v125, v126);
          WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
        }
        else
        {
          *(_DWORD *)v127 -= 2;
        }
      }
      return;
    }
    v60 = *(_QWORD *)(*(_QWORD *)v12 + 2224);
    v160 = (WTF::StringImpl *)"ceil";
    v161 = 5;
    v162 = 0;
    v163 = "floor";
    v164 = 6;
    v165 = 1;
    v166 = "expand";
    v167 = 7;
    v168 = 2;
    v169 = "trunc";
    v170 = 6;
    v171 = 3;
    v172 = "halfCeil";
    v173 = 9;
    v174 = 4;
    v175 = "halfFloor";
    v176 = 10;
    v177 = 5;
    v178 = "halfExpand";
    v179 = 11;
    v180 = 6;
    v181 = "halfTrunc";
    v182 = 10;
    v183 = 7;
    v184 = "halfEven";
    v185 = 9;
    v186 = 8;
    v68 = JSC::intlOption<JSC::LocaleMatcher>(a1, a3, v60, (uint64_t)&v160, 9, (unint64_t)"roundingMode must be either \"ceil\", \"floor\", \"expand\", \"trunc\", \"halfCeil\", \"halfFloor\", \"halfExpand\", \"halfTrunc\", or \"halfEven\"", 130, 6);
    if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v61, v62, v63, v64, v65, v66, v67))
      return;
    v69 = *(_QWORD *)(*(_QWORD *)v12 + 2232);
    v160 = (WTF::StringImpl *)"auto";
    v161 = 5;
    v162 = 0;
    v163 = "morePrecision";
    v164 = 14;
    v165 = 1;
    v166 = "lessPrecision";
    v167 = 14;
    v168 = 2;
    v77 = JSC::intlOption<JSC::LocaleMatcher>(a1, a3, v69, (uint64_t)&v160, 3, (unint64_t)"roundingPriority must be either \"auto\", \"morePrecision\", or \"lessPrecision\"", 76, 0);
    if (*((_DWORD *)v11 + 20))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, v70, v71, v72, v73, v74, v75, v76))
        return;
    }
    v78 = *(_QWORD *)(*(_QWORD *)v12 + 2536);
    v160 = (WTF::StringImpl *)"auto";
    v161 = 5;
    v162 = 0;
    v163 = "stripIfInteger";
    v164 = 15;
    v165 = 1;
    v86 = JSC::intlOption<JSC::LocaleMatcher>(a1, a3, v78, (uint64_t)&v160, 2, (unint64_t)"trailingZeroDisplay must be either \"auto\" or \"stripIfInteger\"", 62, 0);
    if (*((_DWORD *)v11 + 20))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, v79, v80, v81, v82, v83, v84, v85))
        return;
    }
    if (v59 != 1)
      v152 = v153;
    *(_DWORD *)(a2 + 92) = v59;
    *(_BYTE *)(a2 + 105) = v68;
    *(_BYTE *)(a2 + 103) = v86;
    v89 = v155 != 10 || v156 != 10;
    v90 = (JSC::JSObject *)v157;
    v92 = v157 != 10 || v158 != 10;
    if (v77)
    {
      if (!v89)
      {
        v87.i64[0] = 0x1500000001;
        *(_QWORD *)(a2 + 84) = 0x1500000001;
LABEL_43:
        if (v92)
        {
          v94 = JSC::intlDefaultNumberOption(a1, v90, *(_QWORD *)(*(_QWORD *)v12 + 1880), 0, 100, 0xFFFFFFFFuLL, v84, v85, v87);
          if (*((_DWORD *)v11 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v96, v97, v98, v99, v100, v101, v102))
          {
            return;
          }
          v95 = JSC::intlDefaultNumberOption(a1, (JSC::JSObject *)v158, *(_QWORD *)(*(_QWORD *)v12 + 1808), 0, 100, 0xFFFFFFFFuLL, v101, v102, v103);
          if (*((_DWORD *)v11 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, v104, v105, v106, v107, v108, v109, v110))
              return;
          }
          if (v94 == -1)
          {
            if (v95 >= v153)
              v94 = v153;
            else
              v94 = v95;
          }
          else if (v95 == -1)
          {
            if (v152 <= v94)
              v95 = v94;
            else
              v95 = v152;
          }
          else if (v94 > v95)
          {
            v111 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v111 = 0x4300000002;
            v113 = "Computed minimumFractionDigits is larger than maximumFractionDigits";
            goto LABEL_68;
          }
        }
        else
        {
          v95 = v152;
          v94 = v153;
        }
        *(_DWORD *)(a2 + 76) = v94;
        *(_DWORD *)(a2 + 80) = v95;
        if (v77 == 1)
        {
          v151 = 2;
          goto LABEL_80;
        }
        if (v77 == 2)
        {
          v151 = 3;
          goto LABEL_80;
        }
        if (!v89)
        {
          *(_BYTE *)(a2 + 106) = 0;
          if (v59 == 1 || v95 == v94)
            return;
          v111 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v111 = 0x6200000002;
          v113 = "maximumFractionDigits and minimumFractionDigits are different while roundingIncrement is specified";
          goto LABEL_68;
        }
LABEL_76:
        v151 = 1;
LABEL_80:
        *(_BYTE *)(a2 + 106) = v151;
LABEL_81:
        if (v59 != 1)
          JSC::throwTypeError((unint64_t)a1, &v159, (uint64_t)"rounding type is not fraction-digits while roundingIncrement is specified", 74);
        return;
      }
    }
    else if (!v89)
    {
      v93 = !v92;
      if (v154 != 3)
        v93 = 0;
      if (v93)
      {
        *(_BYTE *)(a2 + 106) = 2;
        *(_OWORD *)(a2 + 76) = xmmword_199124B50;
        goto LABEL_81;
      }
      goto LABEL_43;
    }
    v143 = JSC::intlDefaultNumberOption(a1, (JSC::JSObject *)v155, *(_QWORD *)(*(_QWORD *)v12 + 1896), 1, 21, 1uLL, v84, v85, v87);
    if (*((_DWORD *)v11 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v136, v137, v138, v139, v140, v141, v142))
    {
      return;
    }
    v150 = JSC::intlDefaultNumberOption(a1, (JSC::JSObject *)v156, *(_QWORD *)(*(_QWORD *)v12 + 1816), v143, 21, 0x15uLL, v141, v142, v144);
    if (*((_DWORD *)v11 + 20))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, v145, v146, v147, v148, v149, v84, v85))
        return;
    }
    *(_DWORD *)(a2 + 84) = v143;
    *(_DWORD *)(a2 + 88) = v150;
    v90 = (JSC::JSObject *)v157;
    if (!v77)
      goto LABEL_76;
    goto LABEL_43;
  }
}

uint64_t JSC::intlOption<JSC::IntlNumberFormat::CompactDisplay>(JSC::JSGlobalObject *a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const WTF::String *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;

  if (!a2)
    return 0;
  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v12 = JSC::JSObject::get(a2, (uint64_t)a1, a3, a4, a5, a6, a7, a8);
  v21 = v12;
  v71 = v12;
  if (*((_DWORD *)v11 + 20))
  {
    v22 = 0;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, v13, (uint64_t)v14, v15, v16, v17, v18, v19) || v21 == 10)
      return v22;
  }
  else if (v12 == 10)
  {
    return 0;
  }
  JSC::JSValue::toWTFString((JSC::JSValue *)&v71, a1, v14, v15, v16, v17, v18, v19, (int **)&v70, v20);
  if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v24, v25, v26, v27, v28, v29, v30))
  {
    if (a5)
    {
      v31 = a4 + 24 * a5;
      v32 = (unsigned __int8 *)(a4 + 16);
      while (1)
      {
        v33 = *((_QWORD *)v32 - 1);
        v34 = v32 - 16;
        v35 = v33 ? v33 - 1 : 0;
        if (WTF::equalInternal<unsigned char>((uint64_t)v70, *((_QWORD *)v32 - 2), v35))
          break;
        v32 += 24;
        if (v34 + 24 == (unsigned __int8 *)v31)
          goto LABEL_16;
      }
      v22 = *v32;
      goto LABEL_20;
    }
LABEL_16:
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v43 = 0x2F00000002;
    *(_QWORD *)(v43 + 8) = "compactDisplay must be either \"short\" or \"long\"";
    *(_DWORD *)(v43 + 16) = 4;
    v69 = (WTF::StringImpl *)v43;
    v45 = JSC::createRangeError((unint64_t)a1, &v69, v44);
    JSC::VM::throwException(v11, a1, v45, v46, v47, v48, v49, v50);
    v51 = v69;
    v69 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v36, v37, v38, v39, v40, v41, v42);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
  }
  v22 = 0;
LABEL_20:
  v52 = v70;
  v70 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  return v22;
}

uint64_t JSC::intlStringOrBooleanOption<JSC::IntlNumberFormat::UseGrouping>(JSC::JSGlobalObject *a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  uint64_t v24;
  const WTF::String *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  const WTF::String *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;

  v8 = a6;
  if (a2)
  {
    v12 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v20 = JSC::JSObject::get(a2, (uint64_t)a1, a3, a4, a5, a6, a7, a8);
    v80 = v20;
    if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12, v13, v14, v15, v16, v17, v18, v19))
      return 0;
    if (v20 == 10)
      return v8;
    if (v20 == 7)
      return 3;
    v23 = JSC::JSValue::toBoolean(&v80, (uint64_t)a1);
    if (*((_DWORD *)v12 + 20))
    {
      v77 = v23;
      v21 = 0;
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v12, v24, (uint64_t)v25, v26, v27, v28, v29, v30)
        || ((v77 ^ 1) & 1) != 0)
      {
        return v21;
      }
    }
    else if (!v23)
    {
      return 0;
    }
    JSC::JSValue::toWTFString((JSC::JSValue *)&v80, a1, v25, v26, v27, v28, v29, v30, (int **)&v79, v31);
    if (!*((_DWORD *)v12 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v12, v32, v33, v34, v35, v36, v37, v38))
    {
      if (WTF::equalInternal<unsigned char>((uint64_t)v79, (unint64_t)"true", 4))
      {
        v21 = v8;
        goto LABEL_14;
      }
      v21 = v8;
      if (WTF::equalInternal<unsigned char>((uint64_t)v79, (unint64_t)"false", 5))
      {
LABEL_14:
        v46 = v79;
        v79 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
          {
            WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
            WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
          }
          else
          {
            *(_DWORD *)v46 -= 2;
          }
        }
        return v21;
      }
      if (a5)
      {
        v47 = a4 + 24 * a5;
        v48 = (unsigned __int8 *)(a4 + 16);
        while (1)
        {
          v49 = *((_QWORD *)v48 - 1);
          v50 = v48 - 16;
          v51 = v49 ? v49 - 1 : 0;
          if (WTF::equalInternal<unsigned char>((uint64_t)v79, *((_QWORD *)v48 - 2), v51))
            break;
          v48 += 24;
          if (v50 + 24 == (unsigned __int8 *)v47)
            goto LABEL_25;
        }
        v21 = *v48;
        goto LABEL_14;
      }
LABEL_25:
      v52 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v52 = 0x4300000002;
      *(_QWORD *)(v52 + 8) = "useGrouping must be either true, false, \"min2\", \"auto\", or \"always\"";
      *(_DWORD *)(v52 + 16) = 4;
      v78 = (WTF::StringImpl *)v52;
      v54 = JSC::createRangeError((unint64_t)a1, &v78, v53);
      JSC::VM::throwException(v12, a1, v54, v55, v56, v57, v58, v59);
      v60 = v78;
      v78 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, v39, v40, v41, v42, v43, v44, v45);
          WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
        }
        else
        {
          *(_DWORD *)v60 -= 2;
        }
      }
    }
    v21 = 0;
    goto LABEL_14;
  }
  return v8;
}

uint64_t JSC::intlOption<JSC::IntlNumberFormat::SignDisplay>(JSC::JSGlobalObject *a1, unsigned int *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  const WTF::String *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const WTF::String *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;

  if (!a2)
    return 0;
  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v12 = JSC::JSObject::get(a2, (uint64_t)a1, a3, a4, a5, a6, a7, a8);
  v21 = v12;
  v71 = v12;
  if (*((_DWORD *)v11 + 20))
  {
    v22 = 0;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, v13, (uint64_t)v14, v15, v16, v17, v18, v19) || v21 == 10)
      return v22;
  }
  else if (v12 == 10)
  {
    return 0;
  }
  JSC::JSValue::toWTFString((JSC::JSValue *)&v71, a1, v14, v15, v16, v17, v18, v19, (int **)&v70, v20);
  if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v24, v25, v26, v27, v28, v29, v30))
  {
    if (a5)
    {
      v31 = a4 + 24 * a5;
      v32 = (unsigned __int8 *)(a4 + 16);
      while (1)
      {
        v33 = *((_QWORD *)v32 - 1);
        v34 = v32 - 16;
        v35 = v33 ? v33 - 1 : 0;
        if (WTF::equalInternal<unsigned char>((uint64_t)v70, *((_QWORD *)v32 - 2), v35))
          break;
        v32 += 24;
        if (v34 + 24 == (unsigned __int8 *)v31)
          goto LABEL_16;
      }
      v22 = *v32;
      goto LABEL_20;
    }
LABEL_16:
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v43 = 0x5100000002;
    *(_QWORD *)(v43 + 8) = "signDisplay must be either \"auto\", \"never\", \"always\", \"exceptZero\", or \"negative\"";
    *(_DWORD *)(v43 + 16) = 4;
    v69 = (WTF::StringImpl *)v43;
    v45 = JSC::createRangeError((unint64_t)a1, &v69, v44);
    JSC::VM::throwException(v11, a1, v45, v46, v47, v48, v49, v50);
    v51 = v69;
    v69 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v36, v37, v38, v39, v40, v41, v42);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
  }
  v22 = 0;
LABEL_20:
  v52 = v70;
  v70 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  return v22;
}

uint64_t WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String>(uint64_t a1, int8x16_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t result;
  uint64_t v10;
  int8x16_t *v11;
  int v12;

  if (!a3)
  {
    v8 = 0;
    v11 = a2;
LABEL_3:
    v12 = v8;
    v10 = a4;
    return (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(a1, &v11, &v10, a4, a5, a6, a7, a8);
  }
  v8 = a3 - 1;
  v11 = a2;
  if (!((unint64_t)(a3 - 1) >> 31))
    goto LABEL_3;
  result = 124;
  __break(0xC471u);
  return result;
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,char,WTF::ASCIILiteral>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  _BYTE *v11;
  int v12;
  char v13;
  uint64_t v14;
  int v15;

  if (a3)
  {
    v8 = a3 - 1;
    v14 = a2;
    if ((unint64_t)(a3 - 1) >> 31)
      goto LABEL_9;
  }
  else
  {
    v8 = 0;
    v14 = a2;
  }
  v15 = v8;
  v13 = a4;
  if (a6)
  {
    v9 = a6 - 1;
    v11 = a5;
    if (!((unint64_t)(a6 - 1) >> 31))
      goto LABEL_5;
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x197E28D98);
  }
  v9 = 0;
  v11 = a5;
LABEL_5:
  v12 = v9;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(a1, (uint64_t)&v14, &v13, &v11, (uint64_t)a5, a6, a7, a8);
}

char *WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::ASCIILiteral,char,WTF::ASCIILiteral>(uint64_t a1, int8x16_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int8x16_t *a7, uint64_t a8)
{
  char v9;
  int8x16_t *v10;
  size_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  char *result;
  char *v23;
  char *v24;
  __int128 v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  char *v33;
  char *v34;
  __int128 v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int16 v42;
  char *v43;
  int8x16x2_t v44;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;

  v9 = a6;
  v10 = (int8x16_t *)a4;
  if (a3)
  {
    v12 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
      goto LABEL_42;
  }
  else
  {
    v12 = 0;
  }
  if (a5)
  {
    v13 = a5 - 1;
    if ((unint64_t)(a5 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x197E29028);
    }
  }
  else
  {
    v13 = 0;
  }
  if (!a8)
  {
    v14 = 0;
    goto LABEL_7;
  }
  v14 = a8 - 1;
  if ((unint64_t)(a8 - 1) >> 31)
  {
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x197E28FFCLL);
  }
LABEL_7:
  v15 = *(_DWORD *)(a1 + 16);
  v16 = v12 + v13 + v14;
  if (v16 + 1 >= v12)
    v17 = v16 + 1;
  else
    v17 = -1;
  v18 = __CFADD__(v17, v15);
  v19 = v17 + v15;
  if (v18)
    v20 = 0xFFFFFFFFLL;
  else
    v20 = v19;
  v21 = *(_QWORD *)(a1 + 8);
  if ((v21 || (v21 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v21 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v20, a3, a4, a5, a6, (uint64_t)a7, a8);
    if (result)
    {
      v23 = &result[2 * v12];
      if ((v12 & 0x7FFFFFC0) != 0)
      {
        v24 = &result[2 * (v12 & 0x7FFFFFC0)];
        v25 = 0uLL;
        do
        {
          v44.val[0] = *a2;
          v26 = a2[1];
          v46.val[0] = a2[2];
          v27 = a2[3];
          a2 += 4;
          v28 = v27;
          v46.val[1] = 0uLL;
          v48.val[0] = v26;
          v44.val[1] = 0uLL;
          v29 = result;
          vst2q_s8(v29, v44);
          v29 += 32;
          v48.val[1] = 0uLL;
          vst2q_s8(v29, v48);
          v30 = result + 64;
          vst2q_s8(v30, v46);
          v31 = result + 96;
          vst2q_s8(v31, *(int8x16x2_t *)(&v25 - 1));
          result += 128;
        }
        while (result != v24);
        result = v24;
      }
      while (result != v23)
      {
        v32 = a2->u8[0];
        a2 = (int8x16_t *)((char *)a2 + 1);
        *(_WORD *)result = v32;
        result += 2;
      }
      v33 = &v23[2 * v13];
      if ((v13 & 0x7FFFFFC0) != 0)
      {
        v34 = &v23[2 * (v13 & 0x7FFFFFC0)];
        v35 = 0uLL;
        do
        {
          v45.val[0] = *v10;
          v36 = v10[1];
          v47.val[0] = v10[2];
          v37 = v10[3];
          v10 += 4;
          v38 = v37;
          v47.val[1] = 0uLL;
          v49.val[0] = v36;
          v45.val[1] = 0uLL;
          v39 = v23;
          vst2q_s8(v39, v45);
          v39 += 32;
          v49.val[1] = 0uLL;
          vst2q_s8(v39, v49);
          v40 = v23 + 64;
          vst2q_s8(v40, v47);
          v41 = v23 + 96;
          vst2q_s8(v41, *(int8x16x2_t *)(&v35 - 1));
          v23 += 128;
        }
        while (v23 != v34);
        v23 = v34;
      }
      while (v23 != v33)
      {
        v42 = v10->u8[0];
        v10 = (int8x16_t *)((char *)v10 + 1);
        *(_WORD *)v23 = v42;
        v23 += 2;
      }
      *(_WORD *)v33 = v9;
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v33 + 2, a7, v14);
    }
  }
  else
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v20, a3, a4, a5, a6, (uint64_t)a7, a8);
    if (result)
    {
      v43 = result;
      if ((_DWORD)v12 == 1)
      {
        *result = a2->i8[0];
      }
      else if ((_DWORD)v12)
      {
        memcpy(result, a2, v12);
      }
      return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v43[v12], v10->i8, v13, v9, a7, v14);
    }
  }
  return result;
}

void JSC::appendNumberFormatDigitOptionsToSkeleton<JSC::IntlNumberFormat>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int8x16_t *v10;
  size_t v11;
  unint64_t v12;
  char v13;
  WTF::ICU *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int j;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int k;
  unsigned int v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int i;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int m;
  unsigned int v88;
  BOOL v89;
  const char *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  int8x16_t v100;
  uint64_t v101;
  char v102;
  int8x16_t *v103;

  if (*(_BYTE *)(a1 + 105) != 6)
  {
    v10 = (int8x16_t *)" rounding-mode-ceiling";
    v11 = 22;
    switch(*(_BYTE *)(a1 + 105))
    {
      case 0:
        goto LABEL_3;
      case 1:
        v10 = (int8x16_t *)" rounding-mode-floor";
        v11 = 20;
        goto LABEL_3;
      case 2:
        v10 = (int8x16_t *)" rounding-mode-up";
        v11 = 17;
        goto LABEL_3;
      case 3:
        v10 = (int8x16_t *)" rounding-mode-down";
        v11 = 19;
        goto LABEL_3;
      case 4:
        v88 = WTF::ICU::majorVersion((WTF::ICU *)a1);
        v89 = v88 > 0x44;
        if (v88 <= 0x44)
          v11 = 22;
        else
          v11 = 27;
        v90 = " rounding-mode-half-ceiling";
        goto LABEL_89;
      case 5:
        v91 = WTF::ICU::majorVersion((WTF::ICU *)a1);
        v89 = v91 > 0x44;
        if (v91 <= 0x44)
          v11 = 22;
        else
          v11 = 25;
        v90 = " rounding-mode-half-floor";
LABEL_89:
        if (v89)
          v10 = (int8x16_t *)v90;
        else
          v10 = (int8x16_t *)" rounding-mode-half-up";
        goto LABEL_3;
      case 7:
        v10 = (int8x16_t *)" rounding-mode-half-down";
        goto LABEL_94;
      case 8:
        v10 = (int8x16_t *)" rounding-mode-half-even";
LABEL_94:
        v11 = 24;
        goto LABEL_3;
      default:
        goto LABEL_4;
    }
  }
  v10 = (int8x16_t *)" rounding-mode-half-up";
  v11 = 22;
LABEL_3:
  WTF::StringBuilder::append(a2, v10, v11, a4, a5, a6, a7, a8);
LABEL_4:
  v12 = atomic_load(&WTF::ICU::version(void)::onceKey);
  if (v12 != -1)
  {
    v100.i64[0] = (uint64_t)&v102;
    v103 = &v100;
    std::__call_once(&WTF::ICU::version(void)::onceKey, &v103, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ICU::version(void)::$_0 &&>>);
  }
  if (WTF::ICU::version(void)::versions > 0x42u)
    v13 = 42;
  else
    v13 = 43;
  v100.i64[0] = (uint64_t)" integer-width/";
  v100.i32[2] = 15;
  LOBYTE(v103) = v13;
  v14 = (WTF::ICU *)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(a2, (uint64_t)&v100, (char *)&v103, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(a1 + 72))
  {
    v21 = 0;
    do
    {
      v100.i8[0] = 48;
      v22 = *(_QWORD *)(a2 + 8);
      if (v22
        && ((v23 = *(unsigned int *)(a2 + 16), v23 < *(_DWORD *)(v22 + 4))
          ? (v24 = *(_QWORD *)a2 == 0)
          : (v24 = 0),
            v24))
      {
        v25 = *(_DWORD *)(v22 + 16);
        v26 = *(_QWORD *)(v22 + 8);
        *(_DWORD *)(a2 + 16) = v23 + 1;
        if ((v25 & 4) != 0)
          *(_BYTE *)(v26 + v23) = 48;
        else
          *(_WORD *)(v26 + 2 * v23) = 48;
      }
      else
      {
        v14 = (WTF::ICU *)WTF::StringBuilder::append(a2, &v100, 1uLL, v16, v17, v18, v19, v20);
      }
      ++v21;
    }
    while (v21 < *(_DWORD *)(a1 + 72));
  }
  if (*(_DWORD *)(a1 + 92) == 1)
  {
    v27 = *(unsigned __int8 *)(a1 + 106);
    if (*(_BYTE *)(a1 + 106))
    {
      if ((v27 - 2) >= 2)
      {
        if (v27 == 1)
        {
          v14 = (WTF::ICU *)WTF::StringBuilder::append(a2, 0x20u, v15, v16, v17, v18, v19, v20);
          v67 = *(_DWORD *)(a1 + 84);
          if (v67)
          {
            for (i = 0; i < v67; ++i)
            {
              v14 = (WTF::ICU *)WTF::StringBuilder::append(a2, 0x40u, v61, v62, v63, v64, v65, v66);
              v67 = *(_DWORD *)(a1 + 84);
            }
          }
          if (*(_DWORD *)(a1 + 88) != v67)
          {
            v69 = 0;
            do
            {
              v14 = (WTF::ICU *)WTF::StringBuilder::append(a2, 0x23u, v61, v62, v63, v64, v65, v66);
              ++v69;
            }
            while (v69 < *(_DWORD *)(a1 + 88) - *(_DWORD *)(a1 + 84));
          }
        }
      }
      else
      {
        v14 = (WTF::ICU *)WTF::ICU::majorVersion(v14);
        if (v14 >= 0x45)
        {
          WTF::StringBuilder::append(a2, (int8x16_t *)" .", 2uLL, v37, v38, v39, v40, v41);
          v48 = *(_DWORD *)(a1 + 76);
          if (v48)
          {
            for (j = 0; j < v48; ++j)
            {
              WTF::StringBuilder::append(a2, 0x30u, v42, v43, v44, v45, v46, v47);
              v48 = *(_DWORD *)(a1 + 76);
            }
          }
          if (*(_DWORD *)(a1 + 80) != v48)
          {
            v50 = 0;
            do
            {
              WTF::StringBuilder::append(a2, 0x23u, v42, v43, v44, v45, v46, v47);
              ++v50;
            }
            while (v50 < *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 76));
          }
          WTF::StringBuilder::append(a2, 0x2Fu, v42, v43, v44, v45, v46, v47);
          v57 = *(_DWORD *)(a1 + 84);
          if (v57)
          {
            for (k = 0; k < v57; ++k)
            {
              WTF::StringBuilder::append(a2, 0x40u, v51, v52, v53, v54, v55, v56);
              v57 = *(_DWORD *)(a1 + 84);
            }
          }
          if (*(_DWORD *)(a1 + 88) != v57)
          {
            v59 = 0;
            do
            {
              WTF::StringBuilder::append(a2, 0x23u, v51, v52, v53, v54, v55, v56);
              ++v59;
            }
            while (v59 < *(_DWORD *)(a1 + 88) - *(_DWORD *)(a1 + 84));
          }
          if (*(_BYTE *)(a1 + 106) == 2)
            v60 = 114;
          else
            v60 = 115;
          v14 = (WTF::ICU *)WTF::StringBuilder::append(a2, v60, v51, v52, v53, v54, v55, v56);
        }
      }
    }
    else
    {
      v28 = *(_DWORD *)(a2 + 16);
      if ((v28 & 0x80000000) == 0)
      {
        v29 = *(_QWORD *)(a2 + 8);
        if ((v29 || (v29 = *(_QWORD *)a2) != 0) && (*(_BYTE *)(v29 + 16) & 4) == 0)
        {
          v14 = (WTF::ICU *)WTF::StringBuilder::extendBufferForAppending<char16_t>(a2, (WTF::AtomStringImpl *)(v28 + 2), v15, v16, v17, v18, v19, v20);
          if (v14)
            *(_DWORD *)v14 = 3014688;
        }
        else
        {
          v14 = (WTF::ICU *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a2, (WTF::AtomStringImpl *)(v28 + 2), v15, v16, v17, v18, v19, v20);
          if (v14)
            *(_WORD *)v14 = 11808;
        }
      }
      v30 = *(_DWORD *)(a1 + 76);
      if (v30)
      {
        for (m = 0; m < v30; ++m)
        {
          v14 = (WTF::ICU *)WTF::StringBuilder::append(a2, 0x30u, v15, v16, v17, v18, v19, v20);
          v30 = *(_DWORD *)(a1 + 76);
        }
      }
      if (*(_DWORD *)(a1 + 80) != v30)
      {
        v31 = 0;
        do
        {
          v100.i8[0] = 35;
          v32 = *(_QWORD *)(a2 + 8);
          if (v32
            && ((v33 = *(unsigned int *)(a2 + 16), v33 < *(_DWORD *)(v32 + 4))
              ? (v34 = *(_QWORD *)a2 == 0)
              : (v34 = 0),
                v34))
          {
            v35 = *(_DWORD *)(v32 + 16);
            v36 = *(_QWORD *)(v32 + 8);
            *(_DWORD *)(a2 + 16) = v33 + 1;
            if ((v35 & 4) != 0)
              *(_BYTE *)(v36 + v33) = 35;
            else
              *(_WORD *)(v36 + 2 * v33) = 35;
          }
          else
          {
            v14 = (WTF::ICU *)WTF::StringBuilder::append(a2, &v100, 1uLL, v16, v17, v18, v19, v20);
          }
          ++v31;
        }
        while (v31 < *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 76));
      }
    }
  }
  else
  {
    WTF::StringBuilder::append(a2, (int8x16_t *)" precision-increment/", 0x15uLL, v16, v17, v18, v19, v20);
    WTF::numberToStringUnsigned<WTF::Vector<unsigned char,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>((uint64_t)&v100, *(_DWORD *)(a1 + 92));
    v74 = *(unsigned int *)(a1 + 80);
    if (v100.i32[3] <= v74)
    {
      WTF::StringBuilder::append(a2, (int8x16_t *)"0.", 2uLL, v70, v71, v74, v72, v73);
      v97 = *(unsigned int *)(a1 + 80);
      if ((_DWORD)v97 != v100.i32[3])
      {
        v98 = 1;
        do
        {
          WTF::StringBuilder::append(a2, 0x30u, v97, v92, v93, v94, v95, v96);
          v97 = v100.u32[3];
          v89 = *(unsigned int *)(a1 + 80) - (unint64_t)v100.u32[3] > v98++;
        }
        while (v89);
      }
      WTF::StringBuilder::append<WTF::Vector<unsigned char,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (int8x16_t *)v100.i64[0], v97, v92, v93, v94, v95, v96);
    }
    else
    {
      WTF::StringBuilder::append<std::span<unsigned char,18446744073709551615ul>,char,std::span<unsigned char,18446744073709551615ul>>(a2, (int8x16_t *)v100.i64[0], (v100.i32[3] - v74), 46, v100.i64[0] + (v100.i32[3] - v74), v74, v72, v73);
    }
    v14 = (WTF::ICU *)v100.i64[0];
    if (&v101 != (uint64_t *)v100.i64[0] && v100.i64[0] != 0)
    {
      v100.i64[0] = 0;
      v100.i32[2] = 0;
      WTF::fastFree((unint64_t)v14, v75, v76, v77, v78, v79, v80, v81);
    }
  }
  if (*(_BYTE *)(a1 + 103) == 1 && WTF::ICU::majorVersion(v14) >= 0x45)
    WTF::StringBuilder::append(a2, (int8x16_t *)"/w", 2uLL, v82, v83, v84, v85, v86);
}

uint64_t JSC::IntlNumberFormat::format(JSC::IntlNumberFormat *this, JSC::JSGlobalObject *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int *v13;
  _WORD *v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  WTF *v35;
  int v36;
  int v37;
  _WORD v38[32];
  uint64_t v39;

  v3 = *((_QWORD *)a2 + 7);
  v39 = v3;
  v35 = (WTF *)v38;
  v36 = 32;
  v4 = unumf_openResult();
  unumf_formatDouble();
  LODWORD(v33) = 0;
  result = unumf_resultToString();
  v12 = result;
  v37 = result;
  v34 = 0;
  if (v38)
  {
    if ((_DWORD)result)
    {
      if (result >= 0x7FFFFFF0)
      {
        __break(0xC471u);
        return result;
      }
      v13 = (int *)WTF::fastCompactMalloc((WTF *)(2 * result + 20));
      v14 = v13 + 5;
      *v13 = 2;
      v13[1] = v12;
      *((_QWORD *)v13 + 1) = v13 + 5;
      v13[4] = 0;
      if (v12 == 1)
        *v14 = v38[0];
      else
        memcpy(v14, v38, 2 * v12);
    }
    else
    {
      v13 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
  }
  else
  {
    v13 = 0;
  }
  v33 = (WTF::StringImpl *)v13;
  v22 = JSC::jsString(v3, (JSC::VM *)&v33, v6, v7, v8, v9, v10, v11);
  v23 = v33;
  v33 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  if (v4)
    unumf_closeResult();
  v24 = v35;
  if (v38 != (_WORD *)v35)
  {
    if (v35)
    {
      v35 = 0;
      v36 = 0;
      WTF::fastFree((unint64_t)v24, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  return v22;
}

uint64_t JSC::IntlNumberFormat::format(uint64_t a1, unint64_t a2, JSC::IntlMathematicalValue *a3)
{
  uint64_t v3;
  WTF *v4;
  JSC::VM *v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  WTF *v25;
  int *v26;
  _WORD *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  WTF *v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  int v51;
  WTF *v52;
  int v53;
  unsigned int v54;
  _BYTE v55[64];
  JSC::VM *v56;

  v7 = *(JSC::VM **)(a2 + 56);
  v56 = v7;
  JSC::IntlMathematicalValue::ensureNonDouble(a3);
  if (*((_DWORD *)a3 + 2) == 1)
  {
    v4 = (WTF *)v55;
    v52 = (WTF *)v55;
    v53 = 32;
    v3 = unumf_openResult();
    unumf_formatDecimal();
    LODWORD(v50) = 0;
    v24 = unumf_resultToString();
    v54 = v24;
    v51 = 0;
  }
  else
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    v38 = v37 + (v37 >> 2);
    if (v38 >= 0x10)
      v39 = v38 + 1;
    else
      v39 = 16;
    if (v39 <= (int)a3)
      v40 = (int)a3;
    else
      v40 = v39;
    v41 = v52;
    if (v40 < 0x21)
    {
      v52 = v4;
      v53 = 32;
      v42 = v4;
    }
    else
    {
      if (v40 >> 31)
        goto LABEL_39;
      v42 = (WTF *)WTF::fastMalloc((WTF *)(2 * v40));
      v53 = v40;
      v52 = v42;
    }
    memcpy(v42, v41, 2 * v54);
    if (v4 != v41 && v41)
    {
      if (v52 == v41)
      {
        v52 = 0;
        v53 = 0;
      }
      WTF::fastFree((unint64_t)v41, v43, v44, v45, v46, v47, v48, v49);
    }
    v54 = a3;
    unumf_resultToString();
    v51 = (int)v50;
    if ((int)v50 > 0)
    {
      v15 = JSC::throwTypeError(a2, &v56, (uint64_t)"Failed to format a BigInt.", 27);
      goto LABEL_4;
    }
    v24 = v54;
  }
  v25 = v52;
  if (!v52)
  {
    v26 = 0;
    goto LABEL_18;
  }
  if (!v24)
  {
    v26 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_18;
  }
  if (v24 >= 0x7FFFFFF0)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x197E29B30);
  }
  v26 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v24 + 20));
  v27 = v26 + 5;
  *v26 = 2;
  v26[1] = v24;
  *((_QWORD *)v26 + 1) = v26 + 5;
  v26[4] = 0;
  if (v24 == 1)
    *v27 = *(_WORD *)v25;
  else
    memcpy(v27, v25, 2 * v24);
LABEL_18:
  v50 = (WTF::StringImpl *)v26;
  v15 = JSC::jsString((uint64_t)v7, (JSC::VM *)&v50, v18, v19, v20, v21, v22, v23);
  v28 = v50;
  v50 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v8, v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
LABEL_4:
  if (v3)
    unumf_closeResult();
  v16 = v52;
  if (v4 != v52 && v52)
  {
    v52 = 0;
    v53 = 0;
    WTF::fastFree((unint64_t)v16, v8, v9, v10, v11, v12, v13, v14);
  }
  return v15;
}

void JSC::IntlMathematicalValue::ensureNonDouble(JSC::IntlMathematicalValue *this)
{
  int v2;
  double v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  _DWORD *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF::StringImpl *v37;
  int8x16_t *v38;
  char v39;

  if (!*((_DWORD *)this + 2))
  {
    v2 = *((_DWORD *)this + 4);
    if (v2 == 2)
    {
      v11 = WTF::fastMalloc((WTF *)0x14);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = 3;
      *(_DWORD *)(v11 + 16) = 7233902;
      goto LABEL_10;
    }
    if (v2 == 1)
    {
      if (*((_BYTE *)this + 20))
        v13 = "-infinity";
      else
        v13 = "infinity";
      if (*((_BYTE *)this + 20))
        v14 = 9;
      else
        v14 = 8;
      v11 = WTF::fastMalloc((WTF *)(v14 + 17));
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = v14;
      memcpy((void *)(v11 + 16), v13, v14);
      *(_BYTE *)(v11 + 16 + v14) = 0;
      v15 = *((unsigned int *)this + 2);
      if ((_DWORD)v15 != -1)
      {
        if ((_DWORD)v15 == 1)
        {
LABEL_22:
          v16 = *(WTF::StringImpl **)this;
          *(_QWORD *)this = v11;
          if (!v16)
            return;
          v17 = *(_DWORD *)v16 - 1;
          if (*(_DWORD *)v16 == 1)
          {
            WTF::fastFree((unint64_t)v16, v4, v5, v6, v7, v8, v9, v10);
            return;
          }
          goto LABEL_37;
        }
        ((void (*)(int8x16_t **, JSC::IntlMathematicalValue *))off_1E35782F0[v15])(&v38, this);
      }
      *(_QWORD *)this = v11;
      *((_DWORD *)this + 2) = 1;
      return;
    }
    if (v2)
      return;
    v3 = *(double *)this;
    if (*(double *)this == 0.0 && (*(_QWORD *)&v3 & 0x8000000000000000) != 0)
    {
      v11 = WTF::fastMalloc((WTF *)0x13);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = 2;
      strcpy((char *)(v11 + 16), "-0");
LABEL_10:
      v12 = *((unsigned int *)this + 2);
      if ((_DWORD)v12 == -1)
      {
LABEL_13:
        *(_QWORD *)this = v11;
        *((_DWORD *)this + 2) = 1;
        return;
      }
      if ((_DWORD)v12 != 1)
      {
        ((void (*)(int8x16_t **, JSC::IntlMathematicalValue *))off_1E35782F0[v12])(&v38, this);
        goto LABEL_13;
      }
      goto LABEL_22;
    }
    WTF::String::number(v3, (int **)&v37);
    WTF::String::ascii((WTF::String *)&v37, &v38);
    v25 = *((unsigned int *)this + 2);
    if ((_DWORD)v25 != -1)
    {
      if ((_DWORD)v25 == 1)
      {
        v26 = (WTF *)v38;
        v38 = 0;
        v27 = *(_DWORD **)this;
        *(_QWORD *)this = v26;
        if (v27)
        {
          if (*v27 == 1)
          {
            WTF::fastFree((unint64_t)v27, v18, v19, v20, v21, v22, v23, v24);
            v36 = (WTF *)v38;
            v38 = 0;
            if (v36)
            {
              if (*(_DWORD *)v36 == 1)
                WTF::fastFree((unint64_t)v36, v18, v19, v20, v21, v22, v23, v24);
              else
                --*(_DWORD *)v36;
            }
            goto LABEL_35;
          }
          --*v27;
        }
LABEL_34:
        v38 = 0;
LABEL_35:
        v16 = v37;
        if (!v37)
          return;
        v17 = *(_DWORD *)v37 - 2;
        if (*(_DWORD *)v37 == 2)
        {
          WTF::StringImpl::~StringImpl(v37, (WTF::AtomStringImpl *)v18, v19, v20, v21, v22, v23, v24);
          WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
          return;
        }
LABEL_37:
        *(_DWORD *)v16 = v17;
        return;
      }
      ((void (*)(char *, JSC::IntlMathematicalValue *))off_1E35782F0[v25])(&v39, this);
    }
    *(_QWORD *)this = v38;
    *((_DWORD *)this + 2) = 1;
    goto LABEL_34;
  }
}

uint64_t JSC::IntlNumberFormat::formatRange(JSC::IntlNumberFormat *this, JSC::JSGlobalObject *a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  v4 = *((_QWORD *)a2 + 7);
  v32 = v4;
  v5 = unumrf_openResult();
  unumrf_formatDoubleRange();
  unumrf_resultAsValue();
  if (ufmtval_getString())
  {
    v14 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  else
  {
    v14 = 0;
  }
  v33 = v14;
  v22 = JSC::jsString(v4, (JSC::VM *)&v33, v7, v8, v9, v10, v11, v12);
  v23 = v33;
  v33 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  if (v5)
    unumrf_closeResult();
  return v22;
}

uint64_t JSC::IntlNumberFormat::formatRange(int a1, unint64_t a2, JSC::IntlMathematicalValue *this, JSC::IntlMathematicalValue *a4)
{
  WTF::StringImpl *v5;
  uint64_t v7;
  unint64_t v8;
  JSC::Heap **v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  JSC::Exception *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(WTF::StringImpl **);
  WTF::StringImpl **v64;
  WTF::StringImpl *v65[2];
  WTF::StringImpl *v66[3];

  v5 = *(WTF::StringImpl **)(a2 + 56);
  v65[1] = v5;
  if (*((_DWORD *)this + 4) == 2 || *((_DWORD *)a4 + 4) == 2)
  {
    v7 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v7 = 0x1F00000002;
    *(_QWORD *)(v7 + 8) = "Passed numbers are out of range";
    *(_DWORD *)(v7 + 16) = 4;
    v65[0] = (WTF::StringImpl *)v7;
    v8 = *(_QWORD *)(a2 + 128);
    v9 = *(JSC::Heap ***)(a2 + 56);
    if ((v8 & 1) != 0)
    {
      v63 = *(uint64_t (**)(WTF::StringImpl **))(v8 & 0xFFFFFFFFFFFFFFFCLL);
      v64 = (WTF::StringImpl **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v64 = (WTF::StringImpl **)(a2 - 16);
      v66[0] = *v64;
      v66[1] = (WTF::StringImpl *)a2;
      v66[2] = (WTF::StringImpl *)(a2 + 128);
      v8 = v63(v66);
    }
    v10 = JSC::ErrorInstance::create(v9, v8, v65, 0, 0, 0, 2, 1);
    v17 = (JSC::Exception *)v10;
    if ((v10 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
    {
      v17 = (JSC::Exception *)JSC::Exception::create((uint64_t)v5, (JSC::VM *)v10, 0, v11, v12, v13, v14, v15);
    }
    v25 = (uint64_t)JSC::VM::throwException(v5, (JSC::JSGlobalObject *)a2, v17, v16, v11, v12, v13, v14, v15);
    v26 = v65[0];
    v65[0] = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    return v25;
  }
  JSC::IntlMathematicalValue::ensureNonDouble(this);
  if (*((_DWORD *)this + 2) == 1)
  {
    JSC::IntlMathematicalValue::ensureNonDouble(a4);
    if (*((_DWORD *)a4 + 2) == 1)
    {
      LODWORD(v65[0]) = 0;
      v29 = unumrf_openResult();
      unumrf_formatDecimalRange();
      unumrf_resultAsValue();
      if (ufmtval_getString())
      {
        v46 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
      else
      {
        v46 = 0;
      }
      v66[0] = v46;
      v25 = JSC::jsString((uint64_t)v5, (JSC::VM *)v66, v31, v32, v33, v34, v35, v36);
      v54 = v66[0];
      v66[0] = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          WTF::StringImpl::~StringImpl(v54, v47, v48, v49, v50, v51, v52, v53);
          WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
        }
        else
        {
          *(_DWORD *)v54 -= 2;
        }
      }
      if (v29)
        unumrf_closeResult();
      return v25;
    }
  }
  result = std::__throw_bad_variant_access[abi:sn180100]();
  __break(0xC471u);
  return result;
}

void JSC::IntlNumberFormat::formatRangeToPartsInternal(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  char Position;
  const char *v71;
  unint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  int Category;
  int v83;
  int Field;
  int v85;
  unint64_t v86;
  int v87;
  char *v88;
  int v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF::AtomStringImpl *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  JSC::VM *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t Slow;
  __n128 v153;
  unint64_t v154;
  unint64_t v155;
  __n128 v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  __n128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __n128 v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  WTF *v182;
  uint64_t v183;
  WTF *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  WTF *v189;
  WTF *v190;
  unsigned int v191;
  int v192;
  WTF *v193;
  uint64_t v194;
  uint64_t v195;
  JSC::VM *v196;
  __int128 v197;
  int v198;
  int v199;
  uint64_t v200;

  v8 = *(_QWORD *)(a1 + 56);
  v195 = 0;
  v196 = (JSC::VM *)v8;
  ufmtval_getString();
  v9 = ucfpos_open();
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x600000002;
  *(_QWORD *)(v10 + 8) = "shared";
  *(_DWORD *)(v10 + 16) = 4;
  *(_QWORD *)&v197 = v10;
  v187 = JSC::jsNontrivialString(v8, (JSC::VM *)&v197, v11, v12, v13, v14, v15, v16);
  v24 = (WTF::StringImpl *)v197;
  *(_QWORD *)&v197 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  v25 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v25 = 0xA00000002;
  *(_QWORD *)(v25 + 8) = "startRange";
  *(_DWORD *)(v25 + 16) = 4;
  *(_QWORD *)&v197 = v25;
  JSC::jsNontrivialString(v8, (JSC::VM *)&v197, v26, v27, v28, v29, v30, v31);
  v39 = (WTF::StringImpl *)v197;
  *(_QWORD *)&v197 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
  v40 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v40 = 0x800000002;
  *(_QWORD *)(v40 + 8) = "endRange";
  *(_DWORD *)(v40 + 16) = 4;
  *(_QWORD *)&v197 = v40;
  JSC::jsNontrivialString(v8, (JSC::VM *)&v197, v41, v42, v43, v44, v45, v46);
  v54 = (WTF::StringImpl *)v197;
  *(_QWORD *)&v197 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v47, v48, v49, v50, v51, v52, v53);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  v55 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v55 = 0x700000002;
  *(_QWORD *)(v55 + 8) = "literal";
  *(_DWORD *)(v55 + 16) = 4;
  *(_QWORD *)&v197 = v55;
  v183 = JSC::jsNontrivialString(v8, (JSC::VM *)&v197, v56, v57, v58, v59, v60, v61);
  v69 = (WTF::StringImpl *)v197;
  *(_QWORD *)&v197 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  v188 = a6;
  v193 = 0;
  v194 = 0;
  Position = ufmtval_nextPosition();
  v189 = 0;
  if (v195 > 0)
  {
LABEL_14:
    v71 = "Failed to format number range";
    v72 = a1;
    v73 = 30;
    goto LABEL_15;
  }
  v189 = 0;
  v81 = 0;
  while (1)
  {
    if (!Position)
    {
      JSC::flattenFields((uint64_t)&v190, (uint64_t)&v193, v195);
      v182 = v190;
      if (!v191)
      {
LABEL_68:
        if (v182)
          WTF::fastFree((unint64_t)v182, v74, v75, v76, v77, v78, v79, v80);
        goto LABEL_16;
      }
      v124 = v190;
      v184 = (WTF *)((char *)v190 + 12 * v191);
      v186 = v8 + 41952;
      v185 = v9;
      while (1)
      {
        if (*(_DWORD *)v124 == -1)
        {
          v125 = v183;
        }
        else
        {
          v126 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_DWORD *)v126 = 2;
          *(_DWORD *)(v126 + 4) = 7;
          *(_QWORD *)(v126 + 8) = "unknown";
          *(_DWORD *)(v126 + 16) = 4;
          *(_QWORD *)&v197 = v126;
          v125 = JSC::jsNontrivialString(v8, (JSC::VM *)&v197, v127, v128, v129, v130, v131, v132);
          v140 = (WTF::StringImpl *)v197;
          *(_QWORD *)&v197 = 0;
          if (v140)
          {
            if (*(_DWORD *)v140 == 2)
            {
              WTF::StringImpl::~StringImpl(v140, v133, v134, v135, v136, v137, v138, v139);
              WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
            }
            else
            {
              *(_DWORD *)v140 -= 2;
            }
          }
        }
        v148 = JSC::jsString(v8, "", 0x100000000);
        v149 = *(_QWORD *)(a1 + 56);
        v150 = *(_QWORD *)(v149 + 15056);
        if (!v150)
        {
          Slow = JSC::CompleteSubspace::tryAllocateSlow(v149 + 14936, *(JSC **)(a1 + 56), 0x40uLL, 0, v144, v145, v146, v147);
          if (!Slow)
          {
            __break(0xC471u);
            JUMPOUT(0x197E2AD20);
          }
          goto LABEL_51;
        }
        v151 = *(unsigned int *)(v150 + 60);
        Slow = *(_QWORD *)(v150 + 24);
        if (Slow >= *(_QWORD *)(v150 + 32))
        {
          Slow = *(_QWORD *)(v150 + 40);
          if ((Slow & 1) != 0)
          {
            JSC::sanitizeStackForVM(*(JSC **)(a1 + 56), v141, v142, v143, v144, v145, v146, v147);
            Slow = JSC::LocalAllocator::allocateSlowCase(v150, v149 + 192, v151, 0, 0, v179, v180, v181);
            goto LABEL_51;
          }
          v177 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v150 + 48);
          *(_QWORD *)(v150 + 32) = Slow + HIDWORD(v177);
          *(_QWORD *)(v150 + 40) = Slow + (int)v177;
        }
        *(_QWORD *)(v150 + 24) = Slow + v151;
LABEL_51:
        *(_DWORD *)Slow = 0;
        *(_DWORD *)Slow = *(_DWORD *)(a1 + 848);
        *(_DWORD *)(Slow + 4) = 16783360;
        v153.n128_u64[1] = 0;
        *(_OWORD *)(Slow + 8) = 0u;
        *(_OWORD *)(Slow + 24) = 0u;
        *(_OWORD *)(Slow + 40) = 0u;
        *(_QWORD *)(Slow + 56) = 0;
        if (*(_BYTE *)(v149 + 755))
          __dmb(0xAu);
        v154 = *(_QWORD *)(*(_QWORD *)v186 + 2560);
        *(_QWORD *)&v197 = 0;
        *((_QWORD *)&v197 + 1) = Slow;
        v198 = -1;
        v153.n128_u64[0] = 0x100000001000000;
        v199 = 0x1000000;
        v200 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v8, v154, v125, 0, (uint64_t)&v197, v146, v147, v153);
        v155 = *(_QWORD *)(*(_QWORD *)v186 + 2608);
        *(_QWORD *)&v197 = 0;
        *((_QWORD *)&v197 + 1) = Slow;
        v198 = -1;
        v156.n128_u64[0] = 0x100000001000000;
        v199 = 0x1000000;
        v200 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v8, v155, v148, 0, (uint64_t)&v197, v157, v158, v156);
        v159 = *(_QWORD *)(*(_QWORD *)v186 + 2336);
        *(_QWORD *)&v197 = 0;
        *((_QWORD *)&v197 + 1) = Slow;
        v198 = -1;
        v160.n128_u64[0] = 0x100000001000000;
        v199 = 0x1000000;
        v200 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v8, v159, v187, 0, (uint64_t)&v197, v161, v162, v160);
        JSC::JSArray::push(v188, (JSC::VM **)a1, Slow, v163, v164, v165, v166, v167, v168);
        if (*(_DWORD *)(v8 + 80))
        {
          v178 = *(_DWORD *)(v8 + 80);
          if ((v178 & 0x27) != 0 && (v178 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v75, v76, v77, v78, v79, v80);
          v9 = v185;
          if (*(_QWORD *)(v8 + 16))
            goto LABEL_68;
          v124 = (WTF *)((char *)v124 + 12);
          if (v124 == v184)
            goto LABEL_68;
        }
        else
        {
          v124 = (WTF *)((char *)v124 + 12);
          v9 = v185;
          if (v124 == v184)
            goto LABEL_68;
        }
      }
    }
    Category = ucfpos_getCategory();
    if (SHIDWORD(v195) >= 1)
      goto LABEL_14;
    v83 = Category;
    Field = ucfpos_getField();
    if (SHIDWORD(v195) >= 1)
      goto LABEL_14;
    v85 = Field;
    LODWORD(v190) = 0;
    v192 = 0;
    ucfpos_getIndexes();
    if (SHIDWORD(v195) >= 1)
      break;
    if ((v83 & 0xFFFFEFFF) == 2 && (v83 != 2 || (v85 & 0x80000000) == 0) && v83 != 4098)
    {
      LODWORD(v197) = v85;
      *(_QWORD *)((char *)&v197 + 4) = 0;
      if (v81 == (_DWORD)v194)
      {
        v86 = WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v193, v81 + 1, (unint64_t)&v197);
        v87 = HIDWORD(v194);
        v189 = v193;
        v88 = (char *)v193 + 12 * HIDWORD(v194);
        v89 = *(_DWORD *)(v86 + 8);
        *(_QWORD *)v88 = *(_QWORD *)v86;
        *((_DWORD *)v88 + 2) = v89;
      }
      else
      {
        v90 = (char *)v189 + 12 * v81;
        v91 = v197;
        *((_DWORD *)v90 + 2) = DWORD2(v197);
        *(_QWORD *)v90 = v91;
        v87 = HIDWORD(v194);
      }
      v81 = v87 + 1;
      HIDWORD(v194) = v87 + 1;
    }
    Position = ufmtval_nextPosition();
    if (SHIDWORD(v195) >= 1)
      goto LABEL_14;
  }
  v71 = "Failed to format number interval";
  v72 = a1;
  v73 = 33;
LABEL_15:
  JSC::throwTypeError(v72, &v196, (uint64_t)v71, v73);
LABEL_16:
  if (v189)
  {
    v193 = 0;
    LODWORD(v194) = 0;
    WTF::fastFree((unint64_t)v189, v74, v75, v76, v77, v78, v79, v80);
  }
  if (v9)
    ucfpos_close();
}

void JSC::flattenFields(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  WTF *v20;
  char *v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  int *v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  int v37;
  char *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  char *v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  WTF *v60;
  uint64_t v61;

  v6 = *(_QWORD *)a2;
  v7 = *(unsigned int *)(a2 + 12);
  v8 = (unint64_t *)(*(_QWORD *)a2 + 12 * v7);
  v9 = 126 - 2 * __clz(v7);
  if ((_DWORD)v7)
    v10 = v9;
  else
    v10 = 0;
  std::__introsort<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*,false>(v6, v8, v10, 1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v60 = 0;
  v61 = 0;
  v58 = 0xFFFFFFFFLL;
  v59 = a3;
  v11 = WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v60, 1uLL, (unint64_t)&v58);
  v19 = HIDWORD(v61);
  v20 = v60;
  v21 = (char *)v60 + 12 * HIDWORD(v61);
  v22 = *(_DWORD *)(v11 + 8);
  *(_QWORD *)v21 = *(_QWORD *)v11;
  *((_DWORD *)v21 + 2) = v22;
  LODWORD(v21) = *(_DWORD *)(a2 + 12);
  v23 = v19 + 1;
  HIDWORD(v61) = v19 + 1;
  v24 = 0;
  if ((_DWORD)v21)
  {
    v25 = 0;
    while (1)
    {
      if (!v23)
      {
LABEL_40:
        __break(0xC471u);
        JUMPOUT(0x197E2B110);
      }
      v26 = *(_QWORD *)a2 + 12 * v25;
      v27 = (int *)(v26 + 4);
      while (1)
      {
        v28 = (char *)v20 + 12 * v23;
        v29 = v28 - 12;
        v30 = *((_DWORD *)v28 - 1);
        v31 = *v27;
        if (v30 >= *v27)
          break;
        if (v24 < v30)
        {
          LODWORD(v58) = *(_DWORD *)v29;
          HIDWORD(v58) = v24;
          v59 = v30;
          v32 = *(unsigned int *)(a1 + 12);
          if ((_DWORD)v32 == *(_DWORD *)(a1 + 8))
          {
            v33 = WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v32 + 1, (unint64_t)&v58);
            LODWORD(v32) = *(_DWORD *)(a1 + 12);
            v34 = *(_QWORD *)a1 + 12 * v32;
            v35 = *(_DWORD *)(v33 + 8);
            *(_QWORD *)v34 = *(_QWORD *)v33;
          }
          else
          {
            v34 = *(_QWORD *)a1 + 12 * v32;
            v35 = v59;
            *(_QWORD *)v34 = v58;
          }
          *(_DWORD *)(v34 + 8) = v35;
          *(_DWORD *)(a1 + 12) = v32 + 1;
          v24 = v59;
        }
        if (!--v23)
          goto LABEL_40;
      }
      HIDWORD(v61) = v23;
      if (v24 == v31)
        break;
      if (v24 < v31)
      {
        LODWORD(v58) = *(_DWORD *)v29;
        HIDWORD(v58) = v24;
        v59 = v31;
        v40 = *(unsigned int *)(a1 + 12);
        if ((_DWORD)v40 == *(_DWORD *)(a1 + 8))
        {
          v41 = WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v40 + 1, (unint64_t)&v58);
          LODWORD(v40) = *(_DWORD *)(a1 + 12);
          v42 = *(_QWORD *)a1 + 12 * v40;
          v43 = *(_DWORD *)(v41 + 8);
          *(_QWORD *)v42 = *(_QWORD *)v41;
        }
        else
        {
          v42 = *(_QWORD *)a1 + 12 * v40;
          v43 = v59;
          *(_QWORD *)v42 = v58;
        }
        *(_DWORD *)(v42 + 8) = v43;
        *(_DWORD *)(a1 + 12) = v40 + 1;
        if (v23 == (_DWORD)v61)
        {
          v46 = WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v60, v23 + 1, v26);
          v47 = HIDWORD(v61);
          v20 = v60;
          v48 = (char *)v60 + 12 * HIDWORD(v61);
          v49 = *(_DWORD *)(v46 + 8);
          *(_QWORD *)v48 = *(_QWORD *)v46;
          *((_DWORD *)v48 + 2) = v49;
        }
        else
        {
          v50 = (char *)v20 + 12 * v23;
          v51 = *(_QWORD *)v26;
          *((_DWORD *)v50 + 2) = *(_DWORD *)(v26 + 8);
          *(_QWORD *)v50 = v51;
          v47 = HIDWORD(v61);
        }
        v23 = v47 + 1;
        HIDWORD(v61) = v47 + 1;
        v24 = *v27;
        goto LABEL_29;
      }
LABEL_30:
      if (*(_DWORD *)(a2 + 12) <= v25)
        goto LABEL_31;
    }
    if (v23 == (_DWORD)v61)
    {
      v36 = WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v60, v23 + 1, v26);
      v37 = HIDWORD(v61);
      v20 = v60;
      v38 = (char *)v60 + 12 * HIDWORD(v61);
      v39 = *(_DWORD *)(v36 + 8);
      *(_QWORD *)v38 = *(_QWORD *)v36;
      *((_DWORD *)v38 + 2) = v39;
    }
    else
    {
      v44 = (char *)v20 + 12 * v23;
      v45 = *(_QWORD *)v26;
      *((_DWORD *)v44 + 2) = *(_DWORD *)(v26 + 8);
      *(_QWORD *)v44 = v45;
      v37 = HIDWORD(v61);
    }
    v23 = v37 + 1;
    HIDWORD(v61) = v37 + 1;
LABEL_29:
    ++v25;
    goto LABEL_30;
  }
LABEL_31:
  if (v23)
  {
    do
    {
      v52 = v23 - 1;
      v53 = *((_DWORD *)v20 + 3 * v52 + 2);
      if (v24 < v53)
      {
        LODWORD(v58) = *((_DWORD *)v20 + 3 * v52);
        HIDWORD(v58) = v24;
        v59 = v53;
        v54 = *(unsigned int *)(a1 + 12);
        if ((_DWORD)v54 == *(_DWORD *)(a1 + 8))
        {
          v55 = WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v54 + 1, (unint64_t)&v58);
          LODWORD(v54) = *(_DWORD *)(a1 + 12);
          v56 = *(_QWORD *)a1 + 12 * v54;
          v57 = *(_DWORD *)(v55 + 8);
          *(_QWORD *)v56 = *(_QWORD *)v55;
        }
        else
        {
          v56 = *(_QWORD *)a1 + 12 * v54;
          v57 = v59;
          *(_QWORD *)v56 = v58;
        }
        *(_DWORD *)(v56 + 8) = v57;
        *(_DWORD *)(a1 + 12) = v54 + 1;
        v24 = v59;
      }
      --v23;
    }
    while (v23);
    HIDWORD(v61) = 0;
  }
  v60 = 0;
  LODWORD(v61) = 0;
  WTF::fastFree((unint64_t)v20, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t JSC::IntlNumberFormat::formatRangeToParts(JSC::IntlNumberFormat *this, JSC::JSGlobalObject *a2, double a3, double a4)
{
  JSC::VM *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::JSString *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  JSC::JSGlobalObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  JSC::VM *v51;
  int v52;
  unint64_t OutOfMemoryError;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  JSC::Exception *v60;
  JSC::VM *v61;
  int Position;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  int v73;
  _BOOL4 v74;
  BOOL v75;
  int v76;
  JSC::VM *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  _BOOL4 v80;
  BOOL v81;
  char v82;

  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v77 = v5;
  v76 = 0;
  v9 = unumrf_openResult();
  unumrf_formatDoubleRange();
  v10 = unumrf_resultAsValue();
  v18 = v10;
  v19 = atomic_load(&WTF::ICU::version(void)::onceKey);
  if (v19 != -1)
  {
    v78 = (WTF::StringImpl *)&v82;
    v72 = (WTF::StringImpl *)&v78;
    std::__call_once(&WTF::ICU::version(void)::onceKey, &v72, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ICU::version(void)::$_0 &&>>);
  }
  if (WTF::ICU::version(void)::versions > 0x46u)
    goto LABEL_18;
  v20 = ucfpos_open();
  v21 = v76;
  if (v76 > 0 || (ucfpos_constrainCategory(), v21 = v76, v76 > 0))
  {
    v22 = 0;
    if (!v20)
      goto LABEL_12;
    goto LABEL_11;
  }
  Position = ufmtval_nextPosition();
  v21 = v76;
  v22 = v76 < 1 && Position == 0;
  if (v20)
  {
LABEL_11:
    ucfpos_close();
    v21 = v76;
  }
LABEL_12:
  if (v21 >= 1)
  {
    JSC::throwTypeError((unint64_t)a2, &v77, (uint64_t)"Failed to format number range", 30);
    goto LABEL_29;
  }
  if (v22)
  {
    v23 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v23 = 0x600000002;
    *(_QWORD *)(v23 + 8) = "shared";
    *(_DWORD *)(v23 + 16) = 4;
    v78 = (WTF::StringImpl *)v23;
    v30 = (JSC::JSString *)JSC::jsNontrivialString((uint64_t)v5, (JSC::VM *)&v78, v24, v25, v26, v27, v28, v29);
    v38 = JSC::IntlNumberFormat::formatToParts(this, a2, a3, v30);
    v39 = v78;
    v78 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
      {
        WTF::StringImpl::~StringImpl(v39, v31, v32, v33, v34, v35, v36, v37);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      else
      {
        *(_DWORD *)v39 -= 2;
      }
    }
    goto LABEL_2;
  }
LABEL_18:
  v40 = *((_DWORD *)a2 + 227);
  if (v40)
    v41 = 16 * (v40 & 0xFFFFFFFE);
  else
    v41 = 0;
  v42 = JSC::JSArray::tryCreate(v5, v41, 0, v11, v12, v13, v14, v15, v16);
  if (!v42)
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a2, v43);
    v60 = (JSC::Exception *)OutOfMemoryError;
    v61 = v77;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v60 = (JSC::Exception *)JSC::Exception::create((uint64_t)v77, (JSC::VM *)OutOfMemoryError, 0, v54, v55, v56, v57, v58);
    }
    JSC::VM::throwException(v61, a2, v60, v59, v54, v55, v56, v57, v58);
    goto LABEL_29;
  }
  v38 = v42;
  v44 = *((unsigned __int8 *)this + 96);
  v78 = *(WTF::StringImpl **)&a3;
  LODWORD(v79) = 0;
  v80 = (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL;
  v81 = a3 < 0.0;
  v72 = *(WTF::StringImpl **)&a4;
  v73 = 0;
  v74 = (*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL;
  v75 = a4 < 0.0;
  JSC::IntlNumberFormat::formatRangeToPartsInternal((unint64_t)a2, v44, (uint64_t)&v78, (uint64_t)&v72, v18, v42);
  v51 = v77;
  if (*((_DWORD *)v77 + 20))
  {
    v52 = *((_DWORD *)v77 + 20);
    if ((v52 & 0x27) != 0 && (v52 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v77 + 64), 7u, v45, v46, v47, v48, v49, v50);
    if (*((_QWORD *)v51 + 2))
LABEL_29:
      v38 = 0;
  }
LABEL_2:
  if (v9)
    unumrf_closeResult();
  return v38;
}

uint64_t JSC::IntlNumberFormat::formatToParts(JSC::IntlNumberFormat *this, JSC::JSGlobalObject *a2, double a3, JSC::JSString *a4)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v27;
  int v28;
  int *v29;
  _WORD *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  JSC::JSGlobalObject *v34;
  _BOOL4 v36;
  int v37;
  unint64_t OutOfMemoryError;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  JSC::Exception *v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t __n;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v59;
  _BYTE v60[68];
  int v61;
  JSC::VM *v62;

  v7 = *((_QWORD *)a2 + 7);
  v62 = (JSC::VM *)v7;
  v61 = 0;
  v9 = ufieldpositer_open();
  v58 = (WTF *)v60;
  v59 = 32;
  v10 = unumf_openResult();
  if (v61 < 1
    && (unumf_formatDouble(), v61 < 1)
    && (LODWORD(v57) = 0, HIDWORD(v59) = unumf_resultToString(), v61 = 0, unumf_resultGetAllFieldPositions(), v61 < 1))
  {
    v57 = v9;
    v27 = v58;
    if (v58)
    {
      v28 = HIDWORD(v59);
      if (HIDWORD(v59))
      {
        if (HIDWORD(v59) >= 0x7FFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x197E2BA20);
        }
        __n = 2 * HIDWORD(v59);
        v29 = (int *)WTF::fastCompactMalloc((WTF *)(__n + 20));
        v30 = v29 + 5;
        *v29 = 2;
        v29[1] = v28;
        *((_QWORD *)v29 + 1) = v29 + 5;
        v29[4] = 0;
        if (v28 == 1)
          *v30 = *(_WORD *)v27;
        else
          memcpy(v30, v27, __n);
      }
      else
      {
        v29 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
    }
    else
    {
      v29 = 0;
    }
    v56 = (WTF::StringImpl *)v29;
    v31 = *((_DWORD *)a2 + 227);
    if (v31)
      v32 = 16 * (v31 & 0xFFFFFFFE);
    else
      v32 = 0;
    v33 = JSC::JSArray::tryCreate((JSC::JSArray *)v7, v32, 0, v11, v12, v13, v14, v15, v16);
    if (v33)
    {
      v24 = v33;
      v36 = (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000
         || (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF7FFFFFFFFFFFFLL;
      JSC::IntlNumberFormat::formatToPartsInternal((uint64_t)a2, *((unsigned __int8 *)this + 96), *(_QWORD *)&a3 >> 63, v36, (JSC::VM *)&v56, (uint64_t)&v57, v33, (uint64_t)a4, 0);
      if (*(_DWORD *)(v7 + 80))
      {
        v37 = *(_DWORD *)(v7 + 80);
        if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v7 + 64), 7u, v18, v19, v20, v21, v22, v23);
        if (*(_QWORD *)(v7 + 16))
          v24 = 0;
      }
    }
    else
    {
      OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a2, v34);
      v45 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v45 = (JSC::Exception *)JSC::Exception::create(v7, (JSC::VM *)OutOfMemoryError, 0, v39, v40, v41, v42, v43);
      }
      v24 = (uint64_t)JSC::VM::throwException((JSC::VM *)v7, a2, v45, v44, v39, v40, v41, v42, v43);
    }
    v46 = v56;
    v56 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
  }
  else
  {
    v24 = JSC::throwTypeError((unint64_t)a2, &v62, (uint64_t)"Failed to format a number.", 27);
  }
  if (v10)
    unumf_closeResult();
  v25 = v58;
  if (v60 != (_BYTE *)v58 && v58)
  {
    v58 = 0;
    LODWORD(v59) = 0;
    WTF::fastFree((unint64_t)v25, v17, v18, v19, v20, v21, v22, v23);
    if (!v9)
      return v24;
    goto LABEL_10;
  }
  if (v9)
LABEL_10:
    ufieldpositer_close();
  return v24;
}

JSC::VM *JSC::IntlNumberFormat::formatRangeToParts(uint64_t a1, unint64_t a2, JSC::IntlMathematicalValue *this, JSC::IntlMathematicalValue *a4)
{
  uint64_t v4;
  unint64_t v5;
  JSC::VM *v6;
  uint64_t v8;
  unint64_t v9;
  JSC::Heap **v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  JSC::Exception *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  JSC::JSGlobalObject *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unint64_t OutOfMemoryError;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  JSC::Exception *v83;
  _BOOL4 v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(WTF::StringImpl **);
  WTF::StringImpl **v95;
  JSC::VM *v96;
  WTF::StringImpl *v97[3];
  char v98;
  WTF::StringImpl *v99;

  v5 = a2;
  v6 = *(JSC::VM **)(a2 + 56);
  v96 = v6;
  if (*((_DWORD *)this + 4) != 2 && *((_DWORD *)a4 + 4) != 2)
  {
    JSC::IntlMathematicalValue::ensureNonDouble(this);
    if (*((_DWORD *)this + 2) == 1 && (JSC::IntlMathematicalValue::ensureNonDouble(a4), *((_DWORD *)a4 + 2) == 1))
    {
      v4 = unumrf_openResult();
      unumrf_formatDecimalRange();
      v30 = unumrf_resultAsValue();
      v46 = v30;
      v47 = atomic_load(&WTF::ICU::version(void)::onceKey);
      if (v47 != -1)
      {
        v97[0] = (WTF::StringImpl *)&v98;
        v99 = (WTF::StringImpl *)v97;
        std::__call_once(&WTF::ICU::version(void)::onceKey, &v99, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ICU::version(void)::$_0 &&>>);
      }
      if (WTF::ICU::version(void)::versions <= 0x46u)
      {
        v48 = ucfpos_open();
        ucfpos_constrainCategory();
        v85 = ufmtval_nextPosition() == 0;
        if (v48)
          ucfpos_close();
        if (v85)
        {
          v49 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v49 = 0x600000002;
          *(_QWORD *)(v49 + 8) = "shared";
          *(_DWORD *)(v49 + 16) = 4;
          v97[0] = (WTF::StringImpl *)v49;
          v56 = JSC::jsNontrivialString((uint64_t)v6, (JSC::VM *)v97, v50, v51, v52, v53, v54, v55);
          v6 = (JSC::VM *)JSC::IntlNumberFormat::formatToParts(a1, v5, this, v56);
          v64 = v97[0];
          v97[0] = 0;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2)
            {
              WTF::StringImpl::~StringImpl(v64, v57, v58, v59, v60, v61, v62, v63);
              WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
            }
            else
            {
              *(_DWORD *)v64 -= 2;
            }
          }
          goto LABEL_15;
        }
      }
      v65 = *(_DWORD *)(v5 + 908);
      if (v65)
        v66 = 16 * (v65 & 0xFFFFFFFE);
      else
        v66 = 0;
      v67 = JSC::JSArray::tryCreate(v6, v66, 0, v31, v32, v33, v34, v35, v36);
      if (!v67)
      {
        OutOfMemoryError = JSC::createOutOfMemoryError(v5, v68);
        v83 = (JSC::Exception *)OutOfMemoryError;
        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                  + 0x4C)))
        {
          v83 = (JSC::Exception *)JSC::Exception::create((uint64_t)v96, (JSC::VM *)OutOfMemoryError, 0, v77, v78, v79, v80, v81);
        }
        JSC::VM::throwException(v96, (JSC::JSGlobalObject *)v5, v83, v82, v77, v78, v79, v80, v81);
        goto LABEL_39;
      }
      v6 = (JSC::VM *)v67;
      JSC::IntlNumberFormat::formatRangeToPartsInternal(v5, *(unsigned __int8 *)(a1 + 96), (uint64_t)this, (uint64_t)a4, v46, v67);
      v5 = (unint64_t)v96;
      if (!*((_DWORD *)v96 + 20))
        goto LABEL_15;
      v75 = *((_DWORD *)v96 + 20);
      if ((v75 & 0x27) == 0)
      {
LABEL_34:
        if (!*(_QWORD *)(v5 + 16))
        {
LABEL_15:
          if (v4)
            unumrf_closeResult();
          return v6;
        }
LABEL_39:
        v6 = 0;
        goto LABEL_15;
      }
    }
    else
    {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    if ((v75 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v5 + 64), 7u, v69, v70, v71, v72, v73, v74);
    goto LABEL_34;
  }
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x1F00000002;
  *(_QWORD *)(v8 + 8) = "Passed numbers are out of range";
  *(_DWORD *)(v8 + 16) = 4;
  v99 = (WTF::StringImpl *)v8;
  v9 = *(_QWORD *)(v5 + 128);
  v10 = *(JSC::Heap ***)(v5 + 56);
  if ((v9 & 1) != 0)
  {
    v94 = *(uint64_t (**)(WTF::StringImpl **))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v95 = (WTF::StringImpl **)(v5 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v5 & 8) != 0)
      v95 = (WTF::StringImpl **)(v5 - 16);
    v97[0] = *v95;
    v97[1] = (WTF::StringImpl *)v5;
    v97[2] = (WTF::StringImpl *)(v5 + 128);
    v9 = v94(v97);
  }
  v11 = JSC::ErrorInstance::create(v10, v9, &v99, 0, 0, 0, 2, 1);
  v18 = (JSC::Exception *)v11;
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    v18 = (JSC::Exception *)JSC::Exception::create((uint64_t)v6, (JSC::VM *)v11, 0, v12, v13, v14, v15, v16);
  }
  v6 = JSC::VM::throwException(v6, (JSC::JSGlobalObject *)v5, v18, v17, v12, v13, v14, v15, v16);
  v26 = v99;
  v99 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  return v6;
}

uint64_t JSC::IntlNumberFormat::formatToParts(uint64_t a1, unint64_t a2, JSC::IntlMathematicalValue *this, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  WTF *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  int v29;
  int *v30;
  _WORD *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  JSC::JSGlobalObject *v35;
  int v36;
  unint64_t OutOfMemoryError;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  JSC::Exception *v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  WTF *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  size_t v66;
  WTF *v67;
  WTF *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v72;
  _BYTE v73[68];
  int v74;
  JSC::VM *v75;

  v12 = *(_QWORD *)(a2 + 56);
  v75 = (JSC::VM *)v12;
  JSC::IntlMathematicalValue::ensureNonDouble(this);
  if (*((_DWORD *)this + 2) == 1)
  {
    v74 = 0;
    v4 = ufieldpositer_open();
    v7 = (WTF *)v73;
    v71 = (WTF *)v73;
    v72 = 32;
    v5 = unumf_openResult();
    if (v74 >= 1)
      goto LABEL_6;
    unumf_formatDecimal();
    if (v74 >= 1)
      goto LABEL_6;
    LODWORD(v70) = 0;
    HIDWORD(v72) = unumf_resultToString();
    v74 = 0;
  }
  else
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    v55 = v54 + (v54 >> 2);
    if (v55 >= 0x10)
      v56 = v55 + 1;
    else
      v56 = 16;
    if (v56 <= v6)
      v57 = v6;
    else
      v57 = v56;
    v68 = v71;
    if (v57 < 0x21)
    {
      v71 = v7;
      LODWORD(v72) = 32;
      v58 = v7;
    }
    else
    {
      if (v57 >> 31)
        goto LABEL_59;
      v58 = (WTF *)WTF::fastMalloc((WTF *)(2 * v57));
      LODWORD(v72) = v57;
      v71 = v58;
    }
    memcpy(v58, v68, 2 * HIDWORD(v72));
    if (v7 != v68 && v68)
    {
      if (v71 == v68)
      {
        v71 = 0;
        LODWORD(v72) = 0;
      }
      WTF::fastFree((unint64_t)v68, v59, v60, v61, v62, v63, v64, v65);
    }
    HIDWORD(v72) = v6;
    unumf_resultToString();
    v74 = v70;
    if ((int)v70 >= 1)
      goto LABEL_6;
  }
  unumf_resultGetAllFieldPositions();
  if (v74 >= 1)
  {
LABEL_6:
    v26 = JSC::throwTypeError(a2, &v75, (uint64_t)"Failed to format a number.", 27);
    goto LABEL_7;
  }
  v70 = v4;
  if (!v71)
  {
    v30 = 0;
    goto LABEL_22;
  }
  v29 = HIDWORD(v72);
  if (!HIDWORD(v72))
  {
    v30 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_22;
  }
  v67 = v71;
  if (HIDWORD(v72) >= 0x7FFFFFF0)
  {
LABEL_59:
    __break(0xC471u);
    JUMPOUT(0x197E2C350);
  }
  v66 = 2 * HIDWORD(v72);
  v30 = (int *)WTF::fastCompactMalloc((WTF *)(v66 + 20));
  v31 = v30 + 5;
  *v30 = 2;
  v30[1] = v29;
  *((_QWORD *)v30 + 1) = v30 + 5;
  v30[4] = 0;
  if (v29 == 1)
    *v31 = *(_WORD *)v67;
  else
    memcpy(v31, v67, v66);
LABEL_22:
  v69 = (WTF::StringImpl *)v30;
  v32 = *(_DWORD *)(a2 + 908);
  if (v32)
    v33 = 16 * (v32 & 0xFFFFFFFE);
  else
    v33 = 0;
  v34 = JSC::JSArray::tryCreate((JSC::JSArray *)v12, v33, 0, v13, v14, v15, v16, v17, v18);
  if (v34)
  {
    v26 = v34;
    JSC::IntlNumberFormat::formatToPartsInternal(a2, *(unsigned __int8 *)(a1 + 96), *((unsigned __int8 *)this + 20), *((unsigned int *)this + 4), (JSC::VM *)&v69, (uint64_t)&v70, v34, a4, 0);
    if (*(_DWORD *)(v12 + 80))
    {
      v36 = *(_DWORD *)(v12 + 80);
      if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v20, v21, v22, v23, v24, v25);
      if (*(_QWORD *)(v12 + 16))
        v26 = 0;
    }
  }
  else
  {
    OutOfMemoryError = JSC::createOutOfMemoryError(a2, v35);
    v44 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v44 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)OutOfMemoryError, 0, v38, v39, v40, v41, v42);
    }
    v26 = (uint64_t)JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v44, v43, v38, v39, v40, v41, v42);
  }
  v45 = v69;
  v69 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl(v45, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v45 -= 2;
    }
  }
LABEL_7:
  if (v5)
    unumf_closeResult();
  v27 = v71;
  if (v7 != v71 && v71)
  {
    v71 = 0;
    LODWORD(v72) = 0;
    WTF::fastFree((unint64_t)v27, v19, v20, v21, v22, v23, v24, v25);
    if (!v4)
      return v26;
    goto LABEL_12;
  }
  if (v4)
LABEL_12:
    ufieldpositer_close();
  return v26;
}

unint64_t JSC::IntlNumberFormat::resolvedOptions(JSC::IntlNumberFormat *this, JSC::JSGlobalObject *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const WTF::String *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  int v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  unint64_t v81;
  char *v82;
  int v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  const WTF::String *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  WTF::AtomStringImpl *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  unint64_t v110;
  char *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  __n128 v115;
  uint64_t v116;
  uint64_t v117;
  WTF::AtomStringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  int v126;
  const char *v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __n128 v137;
  uint64_t v138;
  uint64_t v139;
  WTF::AtomStringImpl *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __n128 v154;
  int v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __n128 v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __n128 v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __n128 v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __n128 v186;
  WTF::StringImpl *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  const char *v196;
  WTF::AtomStringImpl *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  WTF::StringImpl *v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  WTF::AtomStringImpl *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  WTF::StringImpl *v240;
  unint64_t v241;
  char *v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  __n128 v246;
  uint64_t v247;
  uint64_t v248;
  WTF::AtomStringImpl *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  WTF::StringImpl *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  WTF::StringImpl *v263;
  int v264;
  const char *v265;
  uint64_t v266;
  uint64_t v267;
  __n128 v268;
  uint64_t v269;
  uint64_t v270;
  WTF::AtomStringImpl *v271;
  uint64_t v272;
  WTF::StringImpl *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  WTF::StringImpl *v280;
  unint64_t v281;
  char *v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  __n128 v286;
  uint64_t v287;
  uint64_t v288;
  WTF::AtomStringImpl *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  __n128 v296;
  WTF::StringImpl *v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  char *v310;
  int v311;
  uint64_t v312;
  __n128 v313;
  uint64_t v314;
  uint64_t v315;
  WTF::AtomStringImpl *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  WTF::StringImpl *v323;
  unint64_t v324;
  unint64_t v325;
  char *v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  __n128 v330;
  uint64_t v331;
  uint64_t v332;
  WTF::AtomStringImpl *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  WTF::StringImpl *v340;
  unint64_t v341;
  int v342;
  const char *v343;
  uint64_t v344;
  uint64_t v345;
  __n128 v346;
  uint64_t v347;
  uint64_t v348;
  WTF::AtomStringImpl *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  WTF::StringImpl *v356;
  unint64_t v358;
  void *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  void *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  void *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  void *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  void *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  void *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  void *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  void *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  void *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  void *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  void *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  void *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  WTF::StringImpl *v474;
  WTF::StringImpl *v475;
  unint64_t v476;
  int v477;
  int v478;
  uint64_t v479;

  v10 = *((_QWORD *)a2 + 7);
  v11 = *(_QWORD *)(v10 + 15056);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 + 60);
    SlowCase = *(_QWORD *)(v11 + 24);
    if (SlowCase < *(_QWORD *)(v11 + 32))
    {
LABEL_3:
      *(_QWORD *)(v11 + 24) = SlowCase + v12;
      goto LABEL_4;
    }
    SlowCase = *(_QWORD *)(v11 + 40);
    if ((SlowCase & 1) == 0)
    {
      v470 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v11 + 48);
      *(_QWORD *)(v11 + 32) = SlowCase + HIDWORD(v470);
      *(_QWORD *)(v11 + 40) = SlowCase + (int)v470;
      goto LABEL_3;
    }
    JSC::sanitizeStackForVM(*((JSC **)a2 + 7), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v11, v10 + 192, v12, 0, 0, v471, v472, v473);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, *((JSC **)a2 + 7), 0x40uLL, 0, a5, a6, a7, a8);
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x197E2D270);
    }
  }
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  *(_DWORD *)SlowCase = *((_DWORD *)a2 + 212);
  *(_DWORD *)(SlowCase + 4) = 16783360;
  *(_OWORD *)(SlowCase + 8) = 0u;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 40) = 0u;
  *(_QWORD *)(SlowCase + 56) = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v14 = v10 + 41952;
  v15 = *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 1784);
  v16 = JSC::jsString((JSC *)v10, (JSC::IntlNumberFormat *)((char *)this + 40), a3, a4, a5, a6, a7, a8);
  v475 = 0;
  v476 = SlowCase;
  v477 = -1;
  v17.n128_u64[0] = 0x100000001000000;
  v478 = 0x1000000;
  v479 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, v15, v16, 0, (uint64_t)&v475, v18, v19, v17);
  v20 = *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 2040);
  v27 = JSC::jsString((JSC *)v10, (JSC::IntlNumberFormat *)((char *)this + 48), v21, v22, v23, v24, v25, v26);
  v475 = 0;
  v476 = SlowCase;
  v477 = -1;
  v28.n128_u64[0] = 0x100000001000000;
  v478 = 0x1000000;
  v479 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, v20, v27, 0, (uint64_t)&v475, v29, v30, v28);
  v37 = 0;
  v38 = *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 2384);
  v39 = *((char *)this + 96);
  if (v39 <= 3)
  {
    v40 = off_1E3578400[v39];
    v41 = dword_199124B70[v39];
    v37 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v37 = 2;
    *(_DWORD *)(v37 + 4) = v41;
    *(_QWORD *)(v37 + 8) = v40;
    *(_DWORD *)(v37 + 16) = 4;
  }
  v474 = (WTF::StringImpl *)v37;
  v42 = JSC::jsNontrivialString(v10, (JSC::VM *)&v474, v31, v32, v33, v34, v35, v36);
  v475 = 0;
  v476 = SlowCase;
  v477 = -1;
  v43.n128_u64[0] = 0x100000001000000;
  v478 = 0x1000000;
  v479 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, v38, v42, 0, (uint64_t)&v475, v44, v45, v43);
  v54 = v474;
  v474 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v46, v47, v48, v49, v50, v51, v52);
      WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  v55 = *((unsigned __int8 *)this + 96);
  if (v55 != 3)
  {
    if (v55 != 2)
      goto LABEL_44;
    WTF::AtomStringImpl::addLiteral((uint64_t)"currency", 8uLL, v48, v49, v50, v51, v52, &v475);
    v56 = v475;
    v63 = JSC::jsNontrivialString((JSC *)v10, (JSC::IntlNumberFormat *)((char *)this + 56), v57, v58, v59, v60, v61, v62);
    v475 = 0;
    v476 = SlowCase;
    v477 = -1;
    v64.n128_u64[0] = 0x100000001000000;
    v478 = 0x1000000;
    v479 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, (unint64_t)v56, v63, 0, (uint64_t)&v475, v65, v66, v64);
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
      {
        WTF::StringImpl::~StringImpl(v56, v67, v68, v69, v70, v71, v72, v73);
        WTF::fastFree(v438, v439, v440, v441, v442, v443, v444, v445);
      }
      else
      {
        *(_DWORD *)v56 -= 2;
      }
    }
    WTF::AtomStringImpl::addLiteral((uint64_t)"currencyDisplay", 0xFuLL, v69, v70, v71, v72, v73, &v475);
    v80 = v475;
    v81 = *((char *)this + 97);
    if (v81 > 3)
    {
      v84 = 0;
    }
    else
    {
      v82 = off_1E3578420[v81];
      v83 = dword_199124B80[v81];
      v84 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_DWORD *)v84 = 2;
      *(_DWORD *)(v84 + 4) = v83;
      *(_QWORD *)(v84 + 8) = v82;
      *(_DWORD *)(v84 + 16) = 4;
    }
    v474 = (WTF::StringImpl *)v84;
    v114 = JSC::jsNontrivialString(v10, (JSC::VM *)&v474, v74, v75, v76, v77, v78, v79);
    v475 = 0;
    v476 = SlowCase;
    v477 = -1;
    v115.n128_u64[0] = 0x100000001000000;
    v478 = 0x1000000;
    v479 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, (unint64_t)v80, v114, 0, (uint64_t)&v475, v116, v117, v115);
    v125 = v474;
    v474 = 0;
    if (v125)
    {
      if (*(_DWORD *)v125 == 2)
      {
        WTF::StringImpl::~StringImpl(v125, v118, v119, v120, v121, v122, v123, v124);
        WTF::fastFree(v446, v447, v448, v449, v450, v451, v452, v453);
        if (v80)
        {
LABEL_28:
          if (*(_DWORD *)v80 == 2)
          {
            WTF::StringImpl::~StringImpl(v80, v118, v119, v120, v121, v122, v123, v124);
            WTF::fastFree(v454, v455, v456, v457, v458, v459, v460, v461);
          }
          else
          {
            *(_DWORD *)v80 -= 2;
          }
        }
LABEL_30:
        WTF::AtomStringImpl::addLiteral((uint64_t)"currencySign", 0xCuLL, v120, v121, v122, v123, v124, &v475);
        v109 = v475;
        if (!*((_BYTE *)this + 98))
        {
          v126 = 8;
          v127 = "standard";
          goto LABEL_36;
        }
        if (*((_BYTE *)this + 98) == 1)
        {
          v126 = 10;
          v127 = "accounting";
LABEL_36:
          v113 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_DWORD *)v113 = 2;
          *(_DWORD *)(v113 + 4) = v126;
          *(_QWORD *)(v113 + 8) = v127;
          goto LABEL_37;
        }
LABEL_33:
        v113 = 0;
        goto LABEL_38;
      }
      *(_DWORD *)v125 -= 2;
    }
    if (v80)
      goto LABEL_28;
    goto LABEL_30;
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"unit", 4uLL, v48, v49, v50, v51, v52, &v475);
  v85 = v475;
  v92 = JSC::jsNontrivialString((JSC *)v10, (JSC::IntlNumberFormat *)((char *)this + 64), v86, v87, v88, v89, v90, v91);
  v475 = 0;
  v476 = SlowCase;
  v477 = -1;
  v93.n128_u64[0] = 0x100000001000000;
  v478 = 0x1000000;
  v479 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, (unint64_t)v85, v92, 0, (uint64_t)&v475, v94, v95, v93);
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v96, v97, v98, v99, v100, v101, v102);
      WTF::fastFree(v462, v463, v464, v465, v466, v467, v468, v469);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"unitDisplay", 0xBuLL, v98, v99, v100, v101, v102, &v475);
  v109 = v475;
  v110 = *((char *)this + 99);
  if (v110 > 2)
    goto LABEL_33;
  v111 = off_1E3578440[v110];
  v112 = dword_199124D0C[v110];
  v113 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_DWORD *)v113 = 2;
  *(_DWORD *)(v113 + 4) = v112;
  *(_QWORD *)(v113 + 8) = v111;
LABEL_37:
  *(_DWORD *)(v113 + 16) = 4;
LABEL_38:
  v474 = (WTF::StringImpl *)v113;
  v136 = JSC::jsNontrivialString(v10, (JSC::VM *)&v474, v103, v104, v105, v106, v107, v108);
  v475 = 0;
  v476 = SlowCase;
  v477 = -1;
  v137.n128_u64[0] = 0x100000001000000;
  v478 = 0x1000000;
  v479 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, (unint64_t)v109, v136, 0, (uint64_t)&v475, v138, v139, v137);
  v145 = v474;
  v474 = 0;
  if (!v145)
    goto LABEL_41;
  if (*(_DWORD *)v145 != 2)
  {
    *(_DWORD *)v145 -= 2;
LABEL_41:
    if (v109)
      goto LABEL_42;
    goto LABEL_44;
  }
  WTF::StringImpl::~StringImpl(v145, v140, v141, v142, v143, v144, v51, v52);
  WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
  if (v109)
  {
LABEL_42:
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v140, v141, v142, v143, v144, v51, v52);
      WTF::fastFree(v211, v212, v213, v214, v215, v216, v217, v218);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
LABEL_44:
  v146 = *(_QWORD *)(*(_QWORD *)v14 + 1888);
  v147 = *((unsigned int *)this + 18);
  if ((int)v147 < 0)
    v148 = COERCE__INT64((double)v147) + 0x2000000000000;
  else
    v148 = v147 | 0xFFFE000000000000;
  v475 = 0;
  v476 = SlowCase;
  v477 = -1;
  v53.n128_u64[0] = 0x100000001000000;
  v478 = 0x1000000;
  v479 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, v146, v148, 0, (uint64_t)&v475, v51, v52, v53);
  v155 = *((unsigned __int8 *)this + 106);
  if ((v155 - 2) < 2)
  {
    v164 = *(_QWORD *)(*(_QWORD *)v14 + 1880);
    v165 = *((unsigned int *)this + 19);
    if ((int)v165 < 0)
      v166 = COERCE__INT64((double)v165) + 0x2000000000000;
    else
      v166 = v165 | 0xFFFE000000000000;
    v475 = 0;
    v476 = SlowCase;
    v477 = -1;
    v154.n128_u64[0] = 0x100000001000000;
    v478 = 0x1000000;
    v479 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, v164, v166, 0, (uint64_t)&v475, v152, v153, v154);
    v170 = *(_QWORD *)(*(_QWORD *)v14 + 1808);
    v171 = *((unsigned int *)this + 20);
    if ((v171 & 0x80000000) != 0)
      v172 = COERCE__INT64((double)v171) + 0x2000000000000;
    else
      v172 = v171 | 0xFFFE000000000000;
    v475 = 0;
    v476 = SlowCase;
    v477 = -1;
    v169.n128_u64[0] = 0x100000001000000;
    v478 = 0x1000000;
    v479 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, v170, v172, 0, (uint64_t)&v475, v167, v168, v169);
    v176 = *(_QWORD *)(*(_QWORD *)v14 + 1896);
    v177 = *((unsigned int *)this + 21);
    if ((v177 & 0x80000000) != 0)
      v178 = COERCE__INT64((double)v177) + 0x2000000000000;
    else
      v178 = v177 | 0xFFFE000000000000;
    v475 = 0;
    v476 = SlowCase;
    v477 = -1;
    v175.n128_u64[0] = 0x100000001000000;
    v478 = 0x1000000;
    v479 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, v176, v178, 0, (uint64_t)&v475, v173, v174, v175);
    v162 = *(_QWORD *)(*(_QWORD *)v14 + 1816);
    v179 = *((unsigned int *)this + 22);
    if ((v179 & 0x80000000) != 0)
      v180 = COERCE__INT64((double)v179) + 0x2000000000000;
    else
      v180 = v179 | 0xFFFE000000000000;
    v475 = 0;
    v476 = SlowCase;
    v477 = -1;
  }
  else
  {
    if (v155 == 1)
    {
      v181 = *(_QWORD *)(*(_QWORD *)v14 + 1896);
      v182 = *((unsigned int *)this + 21);
      if ((int)v182 < 0)
        v183 = COERCE__INT64((double)v182) + 0x2000000000000;
      else
        v183 = v182 | 0xFFFE000000000000;
      v475 = 0;
      v476 = SlowCase;
      v477 = -1;
      v154.n128_u64[0] = 0x100000001000000;
      v478 = 0x1000000;
      v479 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, v181, v183, 0, (uint64_t)&v475, v152, v153, v154);
      v162 = *(_QWORD *)(*(_QWORD *)v14 + 1816);
      v163 = *((unsigned int *)this + 22);
    }
    else
    {
      if (*((_BYTE *)this + 106))
        goto LABEL_73;
      v156 = *(_QWORD *)(*(_QWORD *)v14 + 1880);
      v157 = *((unsigned int *)this + 19);
      if ((int)v157 < 0)
        v158 = COERCE__INT64((double)v157) + 0x2000000000000;
      else
        v158 = v157 | 0xFFFE000000000000;
      v475 = 0;
      v476 = SlowCase;
      v477 = -1;
      v154.n128_u64[0] = 0x100000001000000;
      v478 = 0x1000000;
      v479 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, v156, v158, 0, (uint64_t)&v475, v152, v153, v154);
      v162 = *(_QWORD *)(*(_QWORD *)v14 + 1808);
      v163 = *((unsigned int *)this + 20);
    }
    if ((int)v163 < 0)
      v180 = COERCE__INT64((double)v163) + 0x2000000000000;
    else
      v180 = v163 | 0xFFFE000000000000;
    v475 = 0;
    v476 = SlowCase;
    v477 = -1;
  }
  v161.n128_u64[0] = 0x100000001000000;
  v478 = 0x1000000;
  v479 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, v162, v180, 0, (uint64_t)&v475, v159, v160, v161);
LABEL_73:
  WTF::AtomStringImpl::addLiteral((uint64_t)"useGrouping", 0xBuLL, v149, v150, v151, v152, v153, &v475);
  v187 = v475;
  v188 = 6;
  switch(*((_BYTE *)this + 104))
  {
    case 0:
      break;
    case 1:
      v189 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v189 = 0x400000002;
      v196 = "min2";
      goto LABEL_77;
    case 2:
      v189 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v189 = 0x400000002;
      v196 = "auto";
      goto LABEL_77;
    case 3:
      v189 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v189 = 0x600000002;
      v196 = "always";
LABEL_77:
      *(_QWORD *)(v189 + 8) = v196;
      *(_DWORD *)(v189 + 16) = 4;
      v475 = (WTF::StringImpl *)v189;
      v188 = JSC::jsNontrivialString(v10, (JSC::VM *)&v475, v190, v191, v192, v193, v194, v195);
      v202 = v475;
      v475 = 0;
      if (v202)
      {
        if (*(_DWORD *)v202 == 2)
        {
          WTF::StringImpl::~StringImpl(v202, v197, v198, v199, v200, v201, v184, v185);
          WTF::fastFree(v219, v220, v221, v222, v223, v224, v225, v226);
        }
        else
        {
          *(_DWORD *)v202 -= 2;
        }
      }
      break;
    default:
      v188 = 10;
      break;
  }
  v475 = 0;
  v476 = SlowCase;
  v477 = -1;
  v186.n128_u64[0] = 0x100000001000000;
  v478 = 0x1000000;
  v479 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, (unint64_t)v187, v188, 0, (uint64_t)&v475, v184, v185, v186);
  if (v187)
  {
    if (*(_DWORD *)v187 == 2)
    {
      WTF::StringImpl::~StringImpl(v187, v227, v228, v229, v230, v231, v232, v233);
      WTF::fastFree(v358, v359, v360, v361, v362, v363, v364, v365);
    }
    else
    {
      *(_DWORD *)v187 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"notation", 8uLL, v229, v230, v231, v232, v233, &v475);
  v240 = v475;
  v241 = *((char *)this + 101);
  if (v241 > 3)
  {
    v244 = 0;
  }
  else
  {
    v242 = off_1E3578458[v241];
    v243 = dword_199124B90[v241];
    v244 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v244 = 2;
    *(_DWORD *)(v244 + 4) = v243;
    *(_QWORD *)(v244 + 8) = v242;
    *(_DWORD *)(v244 + 16) = 4;
  }
  v474 = (WTF::StringImpl *)v244;
  v245 = JSC::jsNontrivialString(v10, (JSC::VM *)&v474, v234, v235, v236, v237, v238, v239);
  v475 = 0;
  v476 = SlowCase;
  v477 = -1;
  v246.n128_u64[0] = 0x100000001000000;
  v478 = 0x1000000;
  v479 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, (unint64_t)v240, v245, 0, (uint64_t)&v475, v247, v248, v246);
  v256 = v474;
  v474 = 0;
  if (v256)
  {
    if (*(_DWORD *)v256 == 2)
    {
      WTF::StringImpl::~StringImpl(v256, v249, v250, v251, v252, v253, v254, v255);
      WTF::fastFree(v366, v367, v368, v369, v370, v371, v372, v373);
      if (!v240)
        goto LABEL_97;
      goto LABEL_95;
    }
    *(_DWORD *)v256 -= 2;
  }
  if (!v240)
    goto LABEL_97;
LABEL_95:
  if (*(_DWORD *)v240 == 2)
  {
    WTF::StringImpl::~StringImpl(v240, v249, v250, v251, v252, v253, v254, v255);
    WTF::fastFree(v374, v375, v376, v377, v378, v379, v380, v381);
  }
  else
  {
    *(_DWORD *)v240 -= 2;
  }
LABEL_97:
  if (*((_BYTE *)this + 101) != 3)
    goto LABEL_110;
  WTF::AtomStringImpl::addLiteral((uint64_t)"compactDisplay", 0xEuLL, v251, v252, v253, v254, v255, &v475);
  v263 = v475;
  if (!*((_BYTE *)this + 100))
  {
    v264 = 5;
    v265 = "short";
    goto LABEL_102;
  }
  if (*((_BYTE *)this + 100) == 1)
  {
    v264 = 4;
    v265 = "long";
LABEL_102:
    v266 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v266 = 2;
    *(_DWORD *)(v266 + 4) = v264;
    *(_QWORD *)(v266 + 8) = v265;
    *(_DWORD *)(v266 + 16) = 4;
    goto LABEL_104;
  }
  v266 = 0;
LABEL_104:
  v474 = (WTF::StringImpl *)v266;
  v267 = JSC::jsNontrivialString(v10, (JSC::VM *)&v474, v257, v258, v259, v260, v261, v262);
  v475 = 0;
  v476 = SlowCase;
  v477 = -1;
  v268.n128_u64[0] = 0x100000001000000;
  v478 = 0x1000000;
  v479 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, (unint64_t)v263, v267, 0, (uint64_t)&v475, v269, v270, v268);
  v273 = v474;
  v474 = 0;
  if (!v273)
    goto LABEL_107;
  if (*(_DWORD *)v273 != 2)
  {
    *(_DWORD *)v273 -= 2;
LABEL_107:
    if (v263)
      goto LABEL_108;
    goto LABEL_110;
  }
  WTF::StringImpl::~StringImpl(v273, v271, v272, v251, v252, v253, v254, v255);
  WTF::fastFree(v422, v423, v424, v425, v426, v427, v428, v429);
  if (v263)
  {
LABEL_108:
    if (*(_DWORD *)v263 == 2)
    {
      WTF::StringImpl::~StringImpl(v263, v271, v272, v251, v252, v253, v254, v255);
      WTF::fastFree(v430, v431, v432, v433, v434, v435, v436, v437);
    }
    else
    {
      *(_DWORD *)v263 -= 2;
    }
  }
LABEL_110:
  WTF::AtomStringImpl::addLiteral((uint64_t)"signDisplay", 0xBuLL, v251, v252, v253, v254, v255, &v475);
  v280 = v475;
  v281 = *((char *)this + 102);
  if (v281 > 4)
  {
    v284 = 0;
  }
  else
  {
    v282 = off_1E3578478[v281];
    v283 = dword_199124D18[v281];
    v284 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v284 = 2;
    *(_DWORD *)(v284 + 4) = v283;
    *(_QWORD *)(v284 + 8) = v282;
    *(_DWORD *)(v284 + 16) = 4;
  }
  v474 = (WTF::StringImpl *)v284;
  v285 = JSC::jsNontrivialString(v10, (JSC::VM *)&v474, v274, v275, v276, v277, v278, v279);
  v475 = 0;
  v476 = SlowCase;
  v477 = -1;
  v286.n128_u64[0] = 0x100000001000000;
  v478 = 0x1000000;
  v479 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, (unint64_t)v280, v285, 0, (uint64_t)&v475, v287, v288, v286);
  v297 = v474;
  v474 = 0;
  if (!v297)
  {
LABEL_116:
    if (v280)
      goto LABEL_117;
    goto LABEL_119;
  }
  if (*(_DWORD *)v297 != 2)
  {
    *(_DWORD *)v297 -= 2;
    goto LABEL_116;
  }
  WTF::StringImpl::~StringImpl(v297, v289, v290, v291, v292, v293, v294, v295);
  WTF::fastFree(v382, v383, v384, v385, v386, v387, v388, v389);
  if (v280)
  {
LABEL_117:
    if (*(_DWORD *)v280 == 2)
    {
      WTF::StringImpl::~StringImpl(v280, v289, v290, v291, v292, v293, v294, v295);
      WTF::fastFree(v390, v391, v392, v393, v394, v395, v396, v397);
    }
    else
    {
      *(_DWORD *)v280 -= 2;
    }
  }
LABEL_119:
  v298 = *(_QWORD *)(*(_QWORD *)v14 + 2216);
  v299 = *((unsigned int *)this + 23);
  if ((v299 & 0x80000000) != 0)
    v300 = COERCE__INT64((double)v299) + 0x2000000000000;
  else
    v300 = v299 | 0xFFFE000000000000;
  v475 = 0;
  v476 = SlowCase;
  v477 = -1;
  v296.n128_u64[0] = 0x100000001000000;
  v478 = 0x1000000;
  v479 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, v298, v300, 0, (uint64_t)&v475, v294, v295, v296);
  v307 = 0;
  v308 = *(_QWORD *)(*(_QWORD *)v14 + 2224);
  v309 = *((char *)this + 105);
  if (v309 <= 8)
  {
    v310 = off_1E35784A0[v309];
    v311 = dword_199124D2C[v309];
    v307 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v307 = 2;
    *(_DWORD *)(v307 + 4) = v311;
    *(_QWORD *)(v307 + 8) = v310;
    *(_DWORD *)(v307 + 16) = 4;
  }
  v474 = (WTF::StringImpl *)v307;
  v312 = JSC::jsNontrivialString(v10, (JSC::VM *)&v474, v301, v302, v303, v304, v305, v306);
  v475 = 0;
  v476 = SlowCase;
  v477 = -1;
  v313.n128_u64[0] = 0x100000001000000;
  v478 = 0x1000000;
  v479 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, v308, v312, 0, (uint64_t)&v475, v314, v315, v313);
  v323 = v474;
  v474 = 0;
  if (v323)
  {
    if (*(_DWORD *)v323 == 2)
    {
      WTF::StringImpl::~StringImpl(v323, v316, v317, v318, v319, v320, v321, v322);
      WTF::fastFree(v398, v399, v400, v401, v402, v403, v404, v405);
    }
    else
    {
      *(_DWORD *)v323 -= 2;
    }
  }
  v324 = *(_QWORD *)(*(_QWORD *)v14 + 2232);
  v325 = *((char *)this + 106);
  if (v325 > 3)
  {
    v328 = 0;
  }
  else
  {
    v326 = off_1E35784E8[v325];
    v327 = dword_199124BA0[v325];
    v328 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v328 = 2;
    *(_DWORD *)(v328 + 4) = v327;
    *(_QWORD *)(v328 + 8) = v326;
    *(_DWORD *)(v328 + 16) = 4;
  }
  v474 = (WTF::StringImpl *)v328;
  v329 = JSC::jsNontrivialString(v10, (JSC::VM *)&v474, v317, v318, v319, v320, v321, v322);
  v475 = 0;
  v476 = SlowCase;
  v477 = -1;
  v330.n128_u64[0] = 0x100000001000000;
  v478 = 0x1000000;
  v479 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, v324, v329, 0, (uint64_t)&v475, v331, v332, v330);
  v340 = v474;
  v474 = 0;
  if (v340)
  {
    if (*(_DWORD *)v340 == 2)
    {
      WTF::StringImpl::~StringImpl(v340, v333, v334, v335, v336, v337, v338, v339);
      WTF::fastFree(v406, v407, v408, v409, v410, v411, v412, v413);
    }
    else
    {
      *(_DWORD *)v340 -= 2;
    }
  }
  v341 = *(_QWORD *)(*(_QWORD *)v14 + 2536);
  if (!*((_BYTE *)this + 103))
  {
    v343 = "auto";
    v342 = 4;
    goto LABEL_136;
  }
  if (*((_BYTE *)this + 103) == 1)
  {
    v342 = 14;
    v343 = "stripIfInteger";
LABEL_136:
    v344 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v344 = 2;
    *(_DWORD *)(v344 + 4) = v342;
    *(_QWORD *)(v344 + 8) = v343;
    *(_DWORD *)(v344 + 16) = 4;
    goto LABEL_138;
  }
  v344 = 0;
LABEL_138:
  v474 = (WTF::StringImpl *)v344;
  v345 = JSC::jsNontrivialString(v10, (JSC::VM *)&v474, v334, v335, v336, v337, v338, v339);
  v475 = 0;
  v476 = SlowCase;
  v477 = -1;
  v346.n128_u64[0] = 0x100000001000000;
  v478 = 0x1000000;
  v479 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, v341, v345, 0, (uint64_t)&v475, v347, v348, v346);
  v356 = v474;
  v474 = 0;
  if (v356)
  {
    if (*(_DWORD *)v356 == 2)
    {
      WTF::StringImpl::~StringImpl(v356, v349, v350, v351, v352, v353, v354, v355);
      WTF::fastFree(v414, v415, v416, v417, v418, v419, v420, v421);
    }
    else
    {
      *(_DWORD *)v356 -= 2;
    }
  }
  return SlowCase;
}

void JSC::IntlNumberFormat::formatToPartsInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::VM *a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  JSC::VM *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t Slow;
  __n128 v70;
  unint64_t v71;
  unint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  unint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  WTF::StringImpl *v114;
  _DWORD *v115;
  uint64_t v116;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  int v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  __int128 v126;
  int v127;
  int v128;
  uint64_t v129;

  v10 = a1;
  v119 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)a5)
    v11 = *(_DWORD *)(*(_QWORD *)a5 + 4);
  else
    v11 = 0;
  v124 = 0;
  v125 = 0;
  LODWORD(v121) = 0;
  v123 = 0;
  v12 = ufieldpositer_next();
  v13 = 0;
  if ((v12 & 0x80000000) == 0)
  {
    v14 = 0;
    do
    {
      LODWORD(v126) = v12;
      *(_QWORD *)((char *)&v126 + 4) = 0;
      if (v14 == (_DWORD)v125)
      {
        v15 = WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v124, v14 + 1, (unint64_t)&v126);
        v16 = HIDWORD(v125);
        v13 = v124;
        v17 = v124 + 12 * HIDWORD(v125);
        v18 = *(_DWORD *)(v15 + 8);
        *(_QWORD *)v17 = *(_QWORD *)v15;
        *(_DWORD *)(v17 + 8) = v18;
      }
      else
      {
        v19 = v13 + 12 * v14;
        v20 = v126;
        *(_DWORD *)(v19 + 8) = DWORD2(v126);
        *(_QWORD *)v19 = v20;
        v16 = HIDWORD(v125);
      }
      v14 = v16 + 1;
      HIDWORD(v125) = v16 + 1;
      LODWORD(v121) = 0;
      v123 = 0;
      v12 = ufieldpositer_next();
    }
    while ((v12 & 0x80000000) == 0);
  }
  v21 = a9;
  JSC::flattenFields((uint64_t)&v121, (uint64_t)&v124, v11);
  v22 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v22 = 0x700000002;
  *(_QWORD *)(v22 + 8) = "literal";
  *(_DWORD *)(v22 + 16) = 4;
  *(_QWORD *)&v126 = v22;
  v23 = (JSC *)v119;
  v116 = JSC::jsNontrivialString(v119, (JSC::VM *)&v126, v24, v25, v26, v27, v28, v29);
  v37 = (WTF::StringImpl *)v126;
  *(_QWORD *)&v126 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  v112 = v13;
  if (a9)
  {
    WTF::AtomStringImpl::addLiteral((uint64_t)"unit", 4uLL, v32, v33, v34, v35, v36, &v126);
    v114 = (WTF::StringImpl *)v126;
  }
  else
  {
    v114 = 0;
  }
  v113 = (unint64_t)v121;
  if (v122)
  {
    v38 = v121;
    v115 = &v121[3 * v122];
    v120 = v119 + 41952;
    while (1)
    {
      v39 = v116;
      if (*v38 != -1)
      {
        v40 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_DWORD *)v40 = 2;
        *(_DWORD *)(v40 + 4) = 7;
        *(_QWORD *)(v40 + 8) = "unknown";
        *(_DWORD *)(v40 + 16) = 4;
        *(_QWORD *)&v126 = v40;
        v39 = JSC::jsNontrivialString((uint64_t)v23, (JSC::VM *)&v126, v41, v42, v43, v44, v45, v46);
        v54 = (WTF::StringImpl *)v126;
        *(_QWORD *)&v126 = 0;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
          {
            WTF::StringImpl::~StringImpl(v54, v47, v48, v49, v50, v51, v52, v53);
            WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
          }
          else
          {
            *(_DWORD *)v54 -= 2;
          }
        }
      }
      v55 = v21;
      v56 = a8;
      v64 = JSC::jsSubstring(v23, a5, (const WTF::String *)v38[1], v38[2] - v38[1]);
      v65 = v10;
      v66 = *(_QWORD *)(v10 + 56);
      v67 = *(_QWORD *)(v66 + 15056);
      if (!v67)
      {
        Slow = JSC::CompleteSubspace::tryAllocateSlow(v66 + 14936, (JSC *)v66, 0x40uLL, 0, v60, v61, v62, v63);
        if (!Slow)
        {
          __break(0xC471u);
          JUMPOUT(0x197E2D8D4);
        }
        goto LABEL_24;
      }
      v68 = *(unsigned int *)(v67 + 60);
      Slow = *(_QWORD *)(v67 + 24);
      if (Slow >= *(_QWORD *)(v67 + 32))
      {
        Slow = *(_QWORD *)(v67 + 40);
        if ((Slow & 1) != 0)
        {
          JSC::sanitizeStackForVM((JSC *)v66, v57, v58, v59, v60, v61, v62, v63);
          Slow = JSC::LocalAllocator::allocateSlowCase(v67, v66 + 192, v68, 0, 0, v93, v94, v95);
          goto LABEL_24;
        }
        v91 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v67 + 48);
        *(_QWORD *)(v67 + 32) = Slow + HIDWORD(v91);
        *(_QWORD *)(v67 + 40) = Slow + (int)v91;
      }
      *(_QWORD *)(v67 + 24) = Slow + v68;
LABEL_24:
      *(_DWORD *)Slow = 0;
      v10 = v65;
      *(_DWORD *)Slow = *(_DWORD *)(v65 + 848);
      *(_DWORD *)(Slow + 4) = 16783360;
      v70.n128_u64[1] = 0;
      *(_OWORD *)(Slow + 8) = 0u;
      *(_OWORD *)(Slow + 24) = 0u;
      *(_OWORD *)(Slow + 40) = 0u;
      *(_QWORD *)(Slow + 56) = 0;
      a8 = v56;
      if (*(_BYTE *)(v66 + 755))
        __dmb(0xAu);
      v23 = (JSC *)v119;
      v71 = *(_QWORD *)(*(_QWORD *)v120 + 2560);
      *(_QWORD *)&v126 = 0;
      *((_QWORD *)&v126 + 1) = Slow;
      v127 = -1;
      v70.n128_u64[0] = 0x100000001000000;
      v128 = 0x1000000;
      v129 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v119, v71, v39, 0, (uint64_t)&v126, v62, v63, v70);
      v72 = *(_QWORD *)(*(_QWORD *)v120 + 2608);
      *(_QWORD *)&v126 = 0;
      *((_QWORD *)&v126 + 1) = Slow;
      v127 = -1;
      v73.n128_u64[0] = 0x100000001000000;
      v128 = 0x1000000;
      v129 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v119, v72, v64, 0, (uint64_t)&v126, v74, v75, v73);
      v21 = v55;
      if (v55)
      {
        *(_QWORD *)&v126 = 0;
        *((_QWORD *)&v126 + 1) = Slow;
        v127 = -1;
        v81.n128_u64[0] = 0x100000001000000;
        v128 = 0x1000000;
        v129 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v119, (unint64_t)v114, v55, 0, (uint64_t)&v126, v79, v80, v81);
      }
      v81.n128_u64[0] = 0x100000001000000;
      if (v56)
      {
        v82 = *(_QWORD *)(*(_QWORD *)v120 + 2336);
        *(_QWORD *)&v126 = 0;
        *((_QWORD *)&v126 + 1) = Slow;
        v127 = -1;
        v128 = 0x1000000;
        v129 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)Slow, v119, v82, v56, 0, (uint64_t)&v126, v79, v80, v81);
      }
      JSC::JSArray::push(a7, (JSC::VM **)v10, Slow, v76, v77, v78, v79, v80, v81);
      if (!*(_DWORD *)(v119 + 80))
        goto LABEL_59;
      v92 = *(_DWORD *)(v119 + 80);
      if ((v92 & 0x27) != 0 && (v92 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v119 + 64), 7u, v31, v32, v33, v34, v35, v36);
      if (!*(_QWORD *)(v119 + 16))
      {
LABEL_59:
        v38 += 3;
        if (v38 != v115)
          continue;
      }
      break;
    }
  }
  if (!v114)
  {
LABEL_47:
    if (!v113)
      goto LABEL_49;
    goto LABEL_48;
  }
  if (*(_DWORD *)v114 != 2)
  {
    *(_DWORD *)v114 -= 2;
    goto LABEL_47;
  }
  WTF::StringImpl::~StringImpl(v114, v30, v31, v32, v33, v34, v35, v36);
  WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
  if (v113)
LABEL_48:
    WTF::fastFree(v113, v30, v31, v32, v33, v34, v35, v36);
LABEL_49:
  if (v112)
  {
    v124 = 0;
    LODWORD(v125) = 0;
    WTF::fastFree(v112, v30, v31, v32, v33, v34, v35, v36);
  }
}

unint64_t JSC::jsSubstring(JSC *this, JSC::VM *a2, const WTF::String *a3, unsigned int a4)
{
  unsigned int v4;
  unint64_t SlowCase;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t *v28;
  _DWORD *v29;
  uint64_t v30;
  JSC::VM *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  WTF::StringImpl *v60;

  v4 = a3;
  if (a4 == 1)
  {
    v8 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      if (*(_DWORD *)(v8 + 4) > a3)
      {
        v57 = *(_QWORD *)(v8 + 8);
        v58 = a3;
        if ((*(_BYTE *)(v8 + 16) & 4) != 0)
        {
          LODWORD(v8) = *(unsigned __int8 *)(v57 + a3);
        }
        else
        {
          if (*(unsigned __int16 *)(v57 + 2 * a3) > 0xFFu)
          {
            v59 = WTF::fastCompactMalloc((WTF *)0x16);
            *(_QWORD *)v59 = 0x100000002;
            *(_QWORD *)(v59 + 8) = v59 + 20;
            *(_DWORD *)(v59 + 16) = 0;
            v60 = (WTF::StringImpl *)v59;
            *(_WORD *)(v59 + 20) = *(_WORD *)(v57 + 2 * v58);
LABEL_12:
            SlowCase = JSC::JSString::create((uint64_t)this, (JSC::VM *)&v60, v14, v15, v16, v17, v18, v19);
            v27 = v60;
            v60 = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
              {
                WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
                WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
              }
              else
              {
                *(_DWORD *)v27 -= 2;
              }
            }
            return SlowCase;
          }
          LODWORD(v8) = *(_WORD *)(v57 + 2 * a3);
        }
      }
      else
      {
        LODWORD(v8) = 0;
      }
    }
    return *((_QWORD *)this + v8 + 5277);
  }
  if (!a4)
    return *((_QWORD *)this + 5246);
  v9 = *(_QWORD *)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 16) & 4) != 0)
  {
    if (a4 <= 0xC)
    {
      v10 = a4;
      v11 = (const void *)(*(_QWORD *)(v9 + 8) + a3);
      v12 = WTF::fastCompactMalloc((WTF *)(a4 + 20));
      v13 = (void *)(v12 + 20);
      *(_DWORD *)v12 = 2;
      *(_DWORD *)(v12 + 4) = a4;
      *(_QWORD *)(v12 + 8) = v12 + 20;
      *(_DWORD *)(v12 + 16) = 4;
LABEL_11:
      v60 = (WTF::StringImpl *)v12;
      memcpy(v13, v11, v10);
      goto LABEL_12;
    }
  }
  else if (a4 <= 6)
  {
    v11 = (const void *)(*(_QWORD *)(v9 + 8) + 2 * a3);
    v10 = 2 * a4;
    v12 = WTF::fastCompactMalloc((WTF *)(v10 + 20));
    v13 = (void *)(v12 + 20);
    *(_DWORD *)v12 = 2;
    *(_DWORD *)(v12 + 4) = a4;
    *(_QWORD *)(v12 + 8) = v12 + 20;
    *(_DWORD *)(v12 + 16) = 0;
    goto LABEL_11;
  }
  v28 = (unint64_t *)((char *)this + 39696);
  v29 = *(_DWORD **)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 16) & 3) == 2)
    v29 = *(_DWORD **)(v9 + 24);
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  v38 = *(_DWORD *)(v9 + 16);
  v39 = *(_QWORD *)(v9 + 8);
  *v29 += 2;
  *(_DWORD *)v30 = 2;
  *(_DWORD *)(v30 + 4) = a4;
  v40 = v39 + v4;
  v41 = v39 + 2 * v4;
  v42 = v38 & 4;
  if (v42)
    v41 = v40;
  *(_QWORD *)(v30 + 8) = v41;
  *(_DWORD *)(v30 + 16) = v42 | 2;
  *(_QWORD *)(v30 + 24) = v29;
  SlowCase = *v28;
  if (*v28 >= *((_QWORD *)this + 4963))
  {
    v52 = v30;
    SlowCase = *((_QWORD *)this + 4964);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM(this, v31, v32, v33, v34, v35, v36, v37);
      SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 39672, (uint64_t)this + 192, 16, 0, 0, v54, v55, v56);
    }
    else
    {
      v53 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4965);
      *((_QWORD *)this + 4963) = SlowCase + HIDWORD(v53);
      *((_QWORD *)this + 4964) = SlowCase + (int)v53;
      *v28 = SlowCase + 16;
    }
    v30 = v52;
  }
  else
  {
    *v28 = SlowCase + 16;
  }
  *(_DWORD *)SlowCase = *((_QWORD *)this + 5189) >> 4;
  *(_DWORD *)(SlowCase + 4) = 17302016;
  *(_QWORD *)(SlowCase + 8) = v30;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return SlowCase;
}

void JSC::IntlMathematicalValue::parseString(JSC::JSGlobalObject **a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  JSC::JSBigInt *v11;
  JSC::JSGlobalObject *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int v22;
  BOOL v25;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v31;
  BOOL v32;
  BOOL v34;
  int v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  int v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  int v60;
  uint64_t v61;
  _WORD *v62;
  int v63;
  uint64_t v64;
  unsigned __int16 *v65;
  int v66;
  unsigned int v67;
  uint64_t v69;
  _WORD *v70;
  unint64_t v71;
  unsigned int v72;
  BOOL v73;
  int v74;
  BOOL v77;
  BOOL v78;
  int v79;
  int v80;
  int v81;
  double v82;
  unint64_t v83;
  int v84;
  int v85;
  int v86;
  unint64_t v88;
  int v89;
  int v90;
  int v91;
  unint64_t v92;
  int v93;
  int v94;
  int v95;
  unint64_t v96;
  JSC::JSBigInt *v97;
  JSC::JSGlobalObject *v98;
  unsigned __int8 *v99;
  double v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  int v105;
  unint64_t v106;
  unsigned __int16 *v107;
  double v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  int v112;
  int v113;
  double v114;
  JSC::JSBigInt *v115;
  JSC::JSGlobalObject *v116;
  JSC::JSBigInt *v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  JSC::JSGlobalObject *v124;
  int v125;
  uint64_t v126;
  JSC::JSGlobalObject *v127;
  WTF::StringImpl *v128;
  _DWORD *v129;
  WTF *v130;
  int v131;
  WTF::StringImpl *v132;
  int v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  JSC::JSGlobalObject *v141;
  int v142;
  double v143;
  BOOL v144;
  unint64_t v145;
  uint16x8_t v146;
  int v147;
  WTF::StringImpl *v148;
  _BOOL4 v149;
  uint16x8_t v150;
  unint64_t v151;
  int v152;
  unint64_t v153;
  JSC::JSBigInt *v154;
  JSC::JSBigInt *v155;
  JSC::JSBigInt *v156;
  JSC::JSGlobalObject *v157;
  JSC::JSGlobalObject *v158;
  JSC::JSGlobalObject *v159;
  WTF *v160;
  WTF *v161;
  _QWORD v162[2];
  char v163;
  WTF::StringImpl *v164;

  v11 = (JSC::JSBigInt *)a1;
  v13 = a1[7];
  v14 = a3;
  if ((a3 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a3)
    {
      v15 = 0;
      LODWORD(v5) = a3 - 1;
      while (1)
      {
        v16 = a2[v15];
        v6 = (v16 - 9);
        if (v6 >= 5 && v16 != 32 && v16 != 160)
          break;
        if (a3 == ++v15)
          goto LABEL_96;
      }
      if ((_DWORD)a3 == 1)
      {
        LODWORD(v17) = 0;
      }
      else
      {
        v17 = (a3 - 1);
        do
        {
          if (v17 >= a3)
            goto LABEL_293;
          v6 = a2[v17];
          if ((v6 - 9) >= 5 && (_DWORD)v6 != 32 && (_DWORD)v6 != 160)
            break;
          --v17;
        }
        while ((_DWORD)v17);
      }
      if ((_DWORD)v15 || (_DWORD)v17 != (_DWORD)v5)
      {
        v5 = (v17 - v15 + 1);
        if (a3 - v15 < v5)
          goto LABEL_293;
        a2 += v15;
        a3 = v5 | 0x100000000;
        v13 = a1[7];
        v11 = (JSC::JSBigInt *)a1;
      }
    }
    goto LABEL_81;
  }
  if (!(_DWORD)a3)
    goto LABEL_81;
  v18 = 0;
  v19 = (a3 - 1);
  v20 = a2;
  while (1)
  {
    v7 = *(unsigned __int16 *)v20;
    if (v7 > 0xFF)
      break;
    v15 = *(_WORD *)v20;
    v5 = (1 << v7) & 0x100001A00;
    if (v15 > 0x20 || v5 == 0)
    {
      v25 = (_DWORD)v15 == 160 || (_DWORD)v7 == 13;
      if (!v25 && (_DWORD)v7 != 10)
        goto LABEL_42;
    }
LABEL_25:
    ++v18;
    v20 += 2;
    if (a3 == v18)
      goto LABEL_96;
  }
  v154 = v11;
  v157 = v13;
  v151 = v19;
  v22 = u_charType(*(unsigned __int16 *)v20);
  v19 = v151;
  v11 = v154;
  v13 = v157;
  v15 = (v7 - 8232);
  if (v22 == 12 || v15 < 2 || (_DWORD)v7 == 65279)
    goto LABEL_25;
LABEL_42:
  v155 = v11;
  v158 = v13;
  if (!(_DWORD)v19)
  {
    if (!(_DWORD)v18)
      goto LABEL_81;
    v7 = 0;
    goto LABEL_72;
  }
  v27 = v19;
  v7 = v19;
  while (2)
  {
    if (v7 >= a3)
      goto LABEL_293;
    v28 = *(unsigned __int16 *)&a2[2 * v7];
    v29 = v28;
    if (v28 <= 0xFF)
    {
      v15 = *(_WORD *)&a2[2 * v7];
      v5 = (1 << v29) & 0x100001A00;
      if (v15 > 0x20 || v5 == 0)
      {
        v34 = (_DWORD)v15 == 160 || v29 == 13;
        if (!v34 && v29 != 10)
          break;
      }
      goto LABEL_50;
    }
    v152 = *(unsigned __int16 *)&a2[2 * v7];
    v31 = u_charType(v28);
    LODWORD(v5) = v152;
    v32 = v31 != 12 && (v152 - 8232) >= 2;
    v15 = 65279;
    if (!v32 || v152 == 65279)
    {
LABEL_50:
      if (!(_DWORD)--v7)
        break;
      continue;
    }
    break;
  }
  if (!(_DWORD)v18)
  {
    v11 = v155;
    v13 = v158;
    if ((_DWORD)v7 != v27)
      goto LABEL_73;
    goto LABEL_81;
  }
LABEL_72:
  v11 = v155;
  v13 = v158;
LABEL_73:
  a3 = (v7 - v18 + 1);
  v15 = v14 - v18;
  a2 = v20;
  if (v14 - v18 < a3)
    goto LABEL_293;
LABEL_81:
  v162[0] = a2;
  v162[1] = a3;
  if (!(_DWORD)a3)
  {
LABEL_96:
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_97;
  }
  if (a3 < 3)
    goto LABEL_132;
  if (BYTE4(a3))
  {
    v36 = *a2;
    if (v36 == 48)
    {
      v5 = (a3 - 2);
      v15 = a3 - 2;
      if (v15 < v5)
        goto LABEL_293;
      v37 = a2[1];
      v7 = (unint64_t)(a2 + 2);
      v14 = v5 | 0x100000000;
      goto LABEL_87;
    }
LABEL_128:
    if (a2 != "Infinity" && (_DWORD)a3 == 8)
    {
      if ((a3 & 0xFF00000000) != 0)
      {
        if (*a2 == 73 && *(_DWORD *)(a2 + 1) == 1852401262 && *((_DWORD *)a2 + 1) == 2037672302)
          goto LABEL_136;
LABEL_132:
        v52 = a3;
        if ((a3 & 0xFF00000000) != 0)
        {
LABEL_133:
          *(double *)&v164 = 0.0;
          v58 = fast_float::from_chars_advanced<double,char>((unsigned __int8 *)a2, (unsigned __int8 *)&a2[v52], (unint64_t *)&v164, 0x2E00000005)- (unsigned __int8 *)a2;
          goto LABEL_382;
        }
LABEL_381:
        *(double *)&v164 = 0.0;
        v58 = ((char *)fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)a2, (unsigned __int16 *)&a2[2 * v52], (double *)&v164, 0x2E00000005)- a2) >> 1;
LABEL_382:
        if (v58 == v52)
        {
          if (((unint64_t)v164 & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
          {
            v148 = v164;
            v149 = ((unint64_t)v164 & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL;
            *(double *)a4 = *(double *)&v164;
            *(_DWORD *)(a4 + 8) = 0;
            *(_DWORD *)(a4 + 16) = v149;
            v145 = (unint64_t)v148 >> 63;
          }
          else
          {
            if (BYTE4(a3))
              v147 = *a2;
            else
              v147 = *(unsigned __int16 *)a2;
            WTF::StringView::utf8((uint64_t)v162, 0, v53, v54, v55, v56, v57, &v160, v59);
            v132 = v160;
            if (v160)
            {
              v133 = (*(_DWORD *)v160)++;
              *(_QWORD *)a4 = v132;
              *(_DWORD *)(a4 + 8) = 1;
              *(_DWORD *)(a4 + 16) = 0;
              *(_BYTE *)(a4 + 20) = v147 == 45;
              if (v133)
                goto LABEL_388;
              goto LABEL_393;
            }
            LOBYTE(v145) = v147 == 45;
            *(_QWORD *)a4 = 0;
            *(_DWORD *)(a4 + 8) = 1;
            *(_DWORD *)(a4 + 16) = 0;
          }
LABEL_392:
          *(_BYTE *)(a4 + 20) = v145;
          return;
        }
LABEL_389:
        *(_QWORD *)a4 = 0x7FF8000000000000;
        *(_DWORD *)(a4 + 8) = 0;
        v60 = 2;
LABEL_390:
        *(_DWORD *)(a4 + 16) = v60;
LABEL_97:
        *(_BYTE *)(a4 + 20) = 0;
        return;
      }
      if (*(_WORD *)a2 != 73 || *(_QWORD *)(a2 + 2) != 0x6E00690066006ELL || *((_QWORD *)a2 + 1) != 0x7900740069006ELL)
        goto LABEL_132;
LABEL_136:
      *(_QWORD *)a4 = 0x7FF0000000000000;
      *(_DWORD *)(a4 + 8) = 0;
      v60 = 1;
      goto LABEL_390;
    }
    if (a2 == "Infinity" && (_DWORD)a3 == 8)
      goto LABEL_136;
    v144 = (_DWORD)a3 != 9;
    if (a2 == "+Infinity" || (_DWORD)a3 != 9)
    {
      if (a2 == "+Infinity" && (_DWORD)a3 == 9)
        goto LABEL_136;
    }
    else
    {
      if ((a3 & 0xFF00000000) != 0)
      {
        if (v36 == 43 && *(_DWORD *)(a2 + 1) == 1768320585 && *(_DWORD *)(a2 + 5) == 2037672302)
          goto LABEL_136;
      }
      else if (*(_WORD *)a2 == 43)
      {
        v146 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a2 + 2), (int16x8_t)xmmword_199124B60);
        v146.i16[0] = vminvq_u16(v146);
        if (v146.i32[0])
          goto LABEL_136;
      }
      v144 = 0;
    }
    if (a2 == "-Infinity" || v144)
    {
      if (a2 != "-Infinity" || (_DWORD)a3 != 9)
        goto LABEL_132;
    }
    else if ((a3 & 0xFF00000000) != 0)
    {
      if (*a2 != 45 || *(_DWORD *)(a2 + 1) != 1768320585 || *(_DWORD *)(a2 + 5) != 2037672302)
      {
        v52 = a3;
        goto LABEL_133;
      }
    }
    else if (*(_WORD *)a2 != 45
           || (v150 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(a2 + 2), (int16x8_t)xmmword_199124B60),
               v150.i16[0] = vminvq_u16(v150),
               !v150.i32[0]))
    {
      v52 = a3;
      goto LABEL_381;
    }
    *(_QWORD *)a4 = 0xFFF0000000000000;
    *(_DWORD *)(a4 + 8) = 0;
    LOBYTE(v145) = 1;
    *(_DWORD *)(a4 + 16) = 1;
    goto LABEL_392;
  }
  v36 = *(unsigned __int16 *)a2;
  if (v36 != 48)
    goto LABEL_128;
  v14 = (a3 - 2);
  v15 = a3 - 2;
  if (v15 < v14)
    goto LABEL_293;
  v37 = *((unsigned __int16 *)a2 + 1);
  v7 = (unint64_t)(a2 + 4);
LABEL_87:
  v38 = v37 & 0xFFFFFFDF;
  if (v38 == 88)
  {
    v39 = v14;
    if ((v14 & 0x100000000) == 0)
    {
      if (!(_DWORD)v14)
      {
        v15 = 0;
        v8 = 1.0;
        LODWORD(a2) = 16;
        goto LABEL_239;
      }
      v64 = 2 * v14;
      v65 = (unsigned __int16 *)v7;
      do
      {
        v66 = *v65;
        v6 = (v66 - 48);
        v67 = (v66 | 0x20) - 97;
        if (v6 >= 0xA && v67 >= 6)
          goto LABEL_389;
        ++v65;
        v64 -= 2;
      }
      while (v64);
      LODWORD(a2) = 16;
      v63 = 1;
      goto LABEL_163;
    }
    if (!(_DWORD)v14)
    {
      v15 = 0;
      v8 = 1.0;
      LODWORD(a2) = 16;
LABEL_198:
      LODWORD(v5) = 16;
      goto LABEL_200;
    }
    v45 = v14;
    v46 = (unsigned __int8 *)v7;
    do
    {
      v47 = *v46;
      v48 = v47 - 48;
      v49 = (v47 | 0x20) - 97;
      if (v48 >= 0xA && v49 >= 6)
        goto LABEL_389;
      ++v46;
      --v45;
    }
    while (v45);
    LODWORD(a2) = 16;
    v42 = 1;
LABEL_114:
    v15 = 0;
    while (1)
    {
      v51 = *(unsigned __int8 *)(v7 + v15);
      v6 = (v51 - 9);
      if (v6 >= 5 && v51 != 32)
      {
        if (v51 == 43)
        {
          ++v15;
          v8 = 1.0;
          goto LABEL_137;
        }
        if (v51 != 160)
          break;
      }
      if (v39 == ++v15)
      {
        v8 = 1.0;
        v15 = v39;
        goto LABEL_137;
      }
    }
    a5 = 1.0;
    if (v51 == 45)
      v8 = -1.0;
    else
      v8 = 1.0;
    if (v51 == 45)
      ++v15;
LABEL_137:
    LODWORD(v5) = v42 ^ 1;
    if (v39 - v15 < 2)
      LODWORD(v5) = 1;
    if ((v5 & 1) != 0)
    {
      LODWORD(v5) = (_DWORD)a2;
      goto LABEL_200;
    }
    if (v39 <= v15)
      goto LABEL_293;
    if (*(_BYTE *)(v7 + v15) == 48)
    {
      v5 = v15 + 1;
      if (v39 <= v15 + 1)
        goto LABEL_293;
      if ((*(unsigned __int8 *)(v7 + v5) | 0x20) == 0x78)
        v15 += 2;
    }
    goto LABEL_198;
  }
  if (v38 == 79)
  {
    v39 = v14;
    if ((v14 & 0x100000000) == 0)
    {
      if (!(_DWORD)v14)
      {
        v15 = 0;
        v8 = 1.0;
        LODWORD(a2) = 8;
        LODWORD(v5) = 8;
        goto LABEL_241;
      }
      v61 = 2 * v14;
      v62 = (_WORD *)v7;
      do
      {
        if ((*v62 & 0xFFF8) != 0x30)
          goto LABEL_389;
        ++v62;
        v61 -= 2;
      }
      while (v61);
      v63 = 0;
      LODWORD(a2) = 8;
      goto LABEL_163;
    }
    if (!(_DWORD)v14)
    {
      v15 = 0;
      v8 = 1.0;
      LODWORD(a2) = 8;
      LODWORD(v5) = 8;
      goto LABEL_200;
    }
    v43 = v14;
    v44 = (_BYTE *)v7;
    do
    {
      if ((*v44 & 0xF8) != 0x30)
        goto LABEL_389;
      ++v44;
      --v43;
    }
    while (v43);
    v42 = 0;
    LODWORD(a2) = 8;
    goto LABEL_114;
  }
  if (v38 != 66)
  {
    LOBYTE(v36) = 48;
    goto LABEL_128;
  }
  v39 = v14;
  if ((v14 & 0x100000000) != 0)
  {
    if ((_DWORD)v14)
    {
      v40 = v14;
      v41 = (_BYTE *)v7;
      do
      {
        if ((*v41 & 0xFE) != 0x30)
          goto LABEL_389;
        ++v41;
        --v40;
      }
      while (v40);
      v42 = 0;
      LODWORD(a2) = 2;
      goto LABEL_114;
    }
    v15 = 0;
    v8 = 1.0;
    LODWORD(a2) = 2;
    LODWORD(v5) = 2;
LABEL_200:
    if (v15 >= v39)
      goto LABEL_320;
    v79 = *(unsigned __int8 *)(v7 + v15);
    if ((v79 - 48) >= 0xA)
    {
      if ((v79 - 65) >= 0x1A)
      {
        if ((v79 - 97) > 0x19)
          goto LABEL_320;
        v80 = -87;
      }
      else
      {
        v80 = -55;
      }
    }
    else
    {
      v80 = -48;
    }
    v81 = v80 + v79;
    if (v81 >= (int)v5 || v81 == -1)
      goto LABEL_320;
    a5 = (double)(int)v5;
    v82 = (double)(int)v5 * 0.0 + (double)v81;
    v83 = v15 + 1;
    if (v15 + 1 == v39)
    {
LABEL_226:
      v83 = v39;
    }
    else
    {
      while (1)
      {
        v84 = *(unsigned __int8 *)(v7 + v83);
        if ((v84 - 48) >= 0xA)
        {
          if ((v84 - 65) >= 0x1A)
          {
            if ((v84 - 97) > 0x19)
              break;
            v85 = -87;
          }
          else
          {
            v85 = -55;
          }
        }
        else
        {
          v85 = -48;
        }
        v86 = v85 + v84;
        if (v86 >= (int)v5 || v86 == -1)
          break;
        v82 = v82 * a5 + (double)v86;
        if (v39 == ++v83)
          goto LABEL_226;
      }
    }
    if (v82 < 9.00719925e15)
      goto LABEL_318;
    v6 = (v5 - 2) >> 1;
    if (v6 > 7)
      goto LABEL_318;
    if (((1 << v6) & 0x8B) != 0)
    {
      if (v39 < (int)v15)
        goto LABEL_293;
      v6 = (int)v15;
      v88 = v83 - (int)v15;
      v15 = v39 - (int)v15;
      if (v88 == -1)
      {
        v88 = v15;
      }
      else if (v15 < v88)
      {
        goto LABEL_293;
      }
      v99 = (unsigned __int8 *)(v7 + v6 + v88 - 1);
      v82 = 0.0;
      if ((unint64_t)v99 < v7 + v6)
        goto LABEL_318;
      v100 = 1.0;
      while (1)
      {
        v101 = *v99;
        if (v100 == INFINITY)
        {
          if (v101 != 48)
          {
LABEL_312:
            v82 = INFINITY;
            goto LABEL_318;
          }
        }
        else
        {
          v102 = v101 - 48;
          v103 = v101 - 65;
          if ((v101 - 97) <= 0x19)
            v104 = v101 - 87;
          else
            v104 = -1;
          v105 = v101 - 55;
          if (v103 > 0x19)
            v105 = v104;
          if (v102 <= 9)
            v105 = v102;
          if (v105 >= (int)v5)
            v105 = -1;
          v82 = v82 + (double)v105 * v100;
        }
        v100 = v100 * a5;
        if ((unint64_t)--v99 < v7 + v6)
          goto LABEL_318;
      }
    }
    if ((_DWORD)v6 != 4)
      goto LABEL_318;
    if (v39 >= (int)v15)
    {
      v5 = (int)v15;
      v15 = v83 - (int)v15;
      v97 = v11;
      v98 = v13;
      if (v15 == -1)
      {
        v15 = v39 - v5;
      }
      else if (v39 - v5 < v15)
      {
        goto LABEL_293;
      }
      *(double *)&v164 = 0.0;
      fast_float::from_chars_advanced<double,char>((unsigned __int8 *)(v7 + v5), (unsigned __int8 *)(v7 + v5 + v15), (unint64_t *)&v164, 0x2E00000005);
LABEL_317:
      v82 = *(double *)&v164;
      v13 = v98;
      v11 = v97;
      goto LABEL_318;
    }
    goto LABEL_293;
  }
  if (!(_DWORD)v14)
  {
    v15 = 0;
    v8 = 1.0;
    LODWORD(a2) = 2;
    LODWORD(v5) = 2;
    goto LABEL_241;
  }
  v69 = 2 * v14;
  v70 = (_WORD *)v7;
  do
  {
    if ((*v70 & 0xFFFE) != 0x30)
      goto LABEL_389;
    ++v70;
    v69 -= 2;
  }
  while (v69);
  v63 = 0;
  LODWORD(a2) = 2;
LABEL_163:
  v71 = 0;
  while (2)
  {
    v72 = *(unsigned __int16 *)(v7 + 2 * v71);
    if (v72 > 0xFF)
    {
      v153 = v39;
      v156 = v11;
      v159 = v13;
      v74 = u_charType(*(unsigned __int16 *)(v7 + 2 * v71));
      v11 = v156;
      v13 = v159;
      v39 = v153;
      if (v74 != 12 && v72 - 8232 >= 2 && v72 != 65279)
      {
        v72 = *(unsigned __int16 *)(v7 + 2 * v71);
        goto LABEL_348;
      }
      goto LABEL_169;
    }
    v73 = *(_WORD *)(v7 + 2 * v71) > 0x20u || ((1 << v72) & 0x100001A00) == 0;
    if (!v73
      || (*(_WORD *)(v7 + 2 * v71) != 160 ? (v77 = v72 == 13) : (v77 = 1),
          !v77 ? (v78 = v72 == 10) : (v78 = 1),
          v78))
    {
LABEL_169:
      if (v39 == ++v71)
      {
        v8 = 1.0;
        v15 = v39;
        goto LABEL_187;
      }
      continue;
    }
    break;
  }
  v156 = v11;
  v159 = v13;
  v153 = v39;
LABEL_348:
  a5 = 1.0;
  v143 = -1.0;
  if (v72 == 45)
  {
    v15 = v71 + 1;
  }
  else
  {
    v143 = 1.0;
    v15 = v71;
  }
  if (v72 == 43)
    v8 = 1.0;
  else
    v8 = v143;
  if (v72 == 43)
    v15 = v71 + 1;
  v39 = v153;
  v11 = v156;
  v13 = v159;
LABEL_187:
  LODWORD(v5) = v63 ^ 1;
  if (v39 - v15 < 2)
    LODWORD(v5) = 1;
  if ((v5 & 1) != 0)
  {
    LODWORD(v5) = (_DWORD)a2;
    goto LABEL_241;
  }
  if (v39 <= v15)
    goto LABEL_293;
  if (*(_WORD *)(v7 + 2 * v15) != 48)
    goto LABEL_239;
  v5 = v15 + 1;
  if (v39 <= v15 + 1)
    goto LABEL_293;
  if ((*(unsigned __int16 *)(v7 + 2 * v5) | 0x20) == 0x78)
    v15 += 2;
LABEL_239:
  LODWORD(v5) = 16;
LABEL_241:
  if (v15 >= v39)
    goto LABEL_320;
  v89 = *(unsigned __int16 *)(v7 + 2 * v15);
  if ((v89 - 48) < 0xA)
  {
    v90 = -48;
    goto LABEL_248;
  }
  if ((v89 - 65) < 0x1A)
  {
    v90 = -55;
    goto LABEL_248;
  }
  if ((v89 - 97) > 0x19)
    goto LABEL_320;
  v90 = -87;
LABEL_248:
  v91 = v90 + v89;
  if (v91 >= (int)v5)
  {
LABEL_320:
    v115 = v11;
    v116 = v13;
    if ((v14 & 0x100000000) != 0)
      v117 = JSC::JSBigInt::parseInt<unsigned char>(v11, v13, v7, v39, 0, a2, 1, 0, 0);
    else
      v117 = JSC::JSBigInt::parseInt<char16_t>(v11, v13, v7, v39, 0, a2, 1, 0, 0);
    v124 = v117;
    if (v117)
    {
      v125 = *((_DWORD *)v117 + 2);
      v126 = *((_QWORD *)v115 + 7);
      if (v125)
      {
        JSC::JSBigInt::toStringGeneric((JSC::JSBigInt *)v126, v115, v124, 10, v120, v121, v122, v123, (int **)&v164);
        v127 = v116;
      }
      else
      {
        if (*(_BYTE *)(v126 + 44265))
        {
          v128 = *(WTF::StringImpl **)(*(_QWORD *)(v126 + 42600) + 8);
          if ((v128 & 1) != 0)
            v129 = 0;
          else
            v129 = *(_DWORD **)(*(_QWORD *)(v126 + 42600) + 8);
          *v129 += 2;
        }
        else
        {
          v163 = 48;
          WTF::AtomStringImpl::add((uint64_t)&v163, 1uLL, v119, v120, v121, v122, v123, &v164);
          v128 = v164;
        }
        v127 = v116;
        v164 = v128;
      }
      if (!*((_DWORD *)v127 + 20))
        goto LABEL_333;
      v141 = v127;
      v142 = *((_DWORD *)v127 + 20);
      if ((v142 & 0x27) != 0 && (v142 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v127 + 64), 7u, (uint64_t)v124, v119, v120, v121, v122, v123);
      if (*((_QWORD *)v141 + 2))
      {
        *(_QWORD *)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
        *(_QWORD *)(a4 + 16) = 0;
      }
      else
      {
LABEL_333:
        WTF::String::ascii((WTF::String *)&v164, (int8x16_t **)&v161);
        v130 = v161;
        if (v161)
        {
          v131 = (*(_DWORD *)v161)++;
          *(_QWORD *)a4 = v130;
          *(_DWORD *)(a4 + 8) = 1;
          *(_DWORD *)(a4 + 16) = 0;
          *(_BYTE *)(a4 + 20) = 0;
          v161 = 0;
          if (v131)
            *(_DWORD *)v130 = v131;
          else
            WTF::fastFree((unint64_t)v130, v118, (uint64_t)v124, v119, v120, v121, v122, v123);
        }
        else
        {
          *(_QWORD *)a4 = 0;
          *(_DWORD *)(a4 + 8) = 1;
          *(_DWORD *)(a4 + 16) = 0;
          *(_BYTE *)(a4 + 20) = 0;
          v161 = 0;
        }
      }
      v132 = v164;
      if (*(double *)&v164 == 0.0)
        return;
      v133 = *(_DWORD *)v164 - 2;
      if (*(_DWORD *)v164 != 2)
      {
LABEL_388:
        *(_DWORD *)v132 = v133;
        return;
      }
      WTF::StringImpl::~StringImpl(v164, (WTF::AtomStringImpl *)v118, (uint64_t)v124, v119, v120, v121, v122, v123);
LABEL_393:
      WTF::fastFree((unint64_t)v132, v134, v135, v136, v137, v138, v139, v140);
      return;
    }
    goto LABEL_389;
  }
  a5 = (double)(int)v5;
  v82 = (double)(int)v5 * 0.0 + (double)v91;
  v92 = v15 + 1;
  if (v15 + 1 == v39)
  {
LABEL_258:
    v92 = v39;
  }
  else
  {
    while (1)
    {
      v93 = *(unsigned __int16 *)(v7 + 2 * v92);
      if ((v93 - 48) >= 0xA)
      {
        if ((v93 - 65) >= 0x1A)
        {
          if ((v93 - 97) > 0x19)
            break;
          v94 = -87;
        }
        else
        {
          v94 = -55;
        }
      }
      else
      {
        v94 = -48;
      }
      v95 = v94 + v93;
      if (v95 >= (int)v5)
        break;
      v82 = v82 * a5 + (double)v95;
      if (v39 == ++v92)
        goto LABEL_258;
    }
  }
  if (v82 < 9.00719925e15)
    goto LABEL_318;
  v6 = (v5 - 2) >> 1;
  if (v6 > 7)
    goto LABEL_318;
  if (((1 << v6) & 0x8B) == 0)
  {
    if ((_DWORD)v6 != 4)
      goto LABEL_318;
    if (v39 >= (int)v15)
    {
      v5 = (int)v15;
      v15 = v92 - (int)v15;
      v97 = v11;
      v98 = v13;
      if (v15 == -1)
      {
        v15 = v39 - v5;
      }
      else if (v39 - v5 < v15)
      {
        goto LABEL_293;
      }
      *(double *)&v164 = 0.0;
      fast_float::from_chars_advanced<double,char16_t>((unsigned __int16 *)(v7 + 2 * v5), (unsigned __int16 *)(v7 + 2 * v5 + 2 * v15), (double *)&v164, 0x2E00000005);
      goto LABEL_317;
    }
LABEL_293:
    __break(1u);
LABEL_294:
    v96 = v15;
    goto LABEL_295;
  }
  if (v39 < (int)v15)
    goto LABEL_293;
  v6 = (int)v15;
  v96 = v92 - (int)v15;
  v15 = v39 - (int)v15;
  if (v96 == -1)
    goto LABEL_294;
  if (v15 < v96)
    goto LABEL_293;
LABEL_295:
  v106 = v7 + 2 * v6;
  v107 = (unsigned __int16 *)(v106 + 2 * v96 - 2);
  v82 = 0.0;
  if ((unint64_t)v107 >= v106)
  {
    v108 = 1.0;
    do
    {
      v109 = *v107;
      if (v108 == INFINITY)
      {
        if (v109 != 48)
          goto LABEL_312;
      }
      else
      {
        v110 = v109 - 48;
        v111 = v109 - 65;
        if ((v109 - 97) <= 0x19)
          v112 = v109 - 87;
        else
          v112 = -1;
        v113 = v109 - 55;
        if (v111 > 0x19)
          v113 = v112;
        if (v110 <= 9)
          v113 = v110;
        if (v113 >= (int)v5)
          v113 = -1;
        v82 = v82 + (double)v113 * v108;
      }
      v108 = v108 * a5;
      --v107;
    }
    while ((unint64_t)v107 >= v106);
  }
LABEL_318:
  v114 = v8 * v82;
  if (v8 * v82 > 9.00719925e15)
  {
    v39 = v14;
    goto LABEL_320;
  }
  *(double *)a4 = v114;
  *(_DWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = COERCE_UNSIGNED_INT64(fabs(v8 * v82)) > 0x7FEFFFFFFFFFFFFFLL;
  *(_BYTE *)(a4 + 20) = v114 < 0.0;
}

void JSC::IntlNumberFormat::~IntlNumberFormat(JSC::IntlNumberFormat *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
    unumrf_close();
  v14 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v14)
    unumf_close();
}

uint64_t JSC::sanctionedSimpleUnitIdentifier(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t result;
  _OWORD *v7;
  __int128 v8;
  char v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  result = (uint64_t)std::lower_bound[abi:sn180100]<JSC::MeasureUnit const*,WTF::StringView,JSC::sanctionedSimpleUnitIdentifier(WTF::StringView)::$_0>((uint64_t)v10);
  if ((char **)result == off_1E359D740
    || (v7 = (_OWORD *)result,
        result = WTF::operator==(*(unsigned __int8 **)(result + 16), *(_QWORD *)(result + 24), a2, a3),
        !(_DWORD)result))
  {
    v9 = 0;
    *(_BYTE *)a1 = 0;
  }
  else
  {
    v8 = v7[1];
    *(_OWORD *)a1 = *v7;
    *(_OWORD *)(a1 + 16) = v8;
    v9 = 1;
  }
  *(_BYTE *)(a1 + 32) = v9;
  return result;
}

char **std::lower_bound[abi:sn180100]<JSC::MeasureUnit const*,WTF::StringView,JSC::sanctionedSimpleUnitIdentifier(WTF::StringView)::$_0>(uint64_t a1)
{
  char **v2;
  unint64_t v3;
  char **v4;
  char *v5;
  uint64_t v6;
  int v7;

  v2 = &JSC::simpleUnits;
  v3 = 45;
  do
  {
    v4 = &v2[4 * (v3 >> 1)];
    v5 = v4[3];
    if (v5)
      v6 = ((_DWORD)v5 - 1) | 0x100000000;
    else
      v6 = 0x100000000;
    v7 = WTF::codePointCompare((unsigned __int16 *)v4[2], v6, *(unsigned __int8 **)a1, *(_QWORD *)(a1 + 8));
    if (v7 >= 0)
      v3 >>= 1;
    else
      v3 += ~(v3 >> 1);
    if (v7 < 0)
      v2 = v4 + 4;
  }
  while (v3);
  return v2;
}

uint64_t WTF::operator==(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  int8x16_t *v4;
  unsigned int v5;
  int8x16_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int16x8_t *v14;
  unsigned int v15;
  uint8x8_t *v16;
  uint16x8_t v17;
  unsigned int v18;
  uint16x8_t v19;
  BOOL v20;
  int v21;
  int v22;
  uint8x16_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint8x16_t v27;
  unsigned int v28;
  uint8x16_t v29;
  BOOL v30;
  int v31;

  if (a2)
    v6 = (int8x16_t *)(a2 + 0xFFFFFFFFLL);
  else
    v6 = 0;
  v7 = (_DWORD)a4 == (_DWORD)v6 && a3 == a1;
  if (a3 == a1 || (_DWORD)a4 != (_DWORD)v6)
    return v7;
  if (!(_DWORD)a4)
    return 1;
  v8 = v6;
  if ((a4 & 0xFF00000000) != 0)
  {
    if ((_DWORD)v6)
    {
      if (*a3 != *a1)
        return 0;
      v4 = (int8x16_t *)(a3 + 1);
      v5 = (_DWORD)v6 - 1;
      v6 = (int8x16_t *)(a1 + 1);
      if ((_DWORD)v8 == 2)
      {
        v21 = v4->u8[0];
        v22 = v6->u8[0];
        return v21 == v22;
      }
      if ((_DWORD)v8 != 1)
      {
        v10 = 32 - __clz(v8 - 2);
        if (v10 != 3)
        {
          switch(v10)
          {
            case 1u:
              v21 = v4->u16[0];
              v22 = v6->u16[0];
              return v21 == v22;
            case 2u:
              if (v4->u16[0] != v6->u16[0])
                return 0;
              v11 = *(unsigned __int16 *)&a3[v8 - 2];
              v12 = *(unsigned __int16 *)&a1[v8 - 2];
              return v11 == v12;
            case 4u:
              if (v4->i64[0] != v6->i64[0])
                return 0;
              return *(_QWORD *)&a3[v8 - 8] == *(_QWORD *)&a1[v8 - 8];
            case 5u:
              v23 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)&a3[v8 - 16], *(int8x16_t *)&a1[v8 - 16]), vceqq_s8(*(int8x16_t *)(a3 + 1), *(int8x16_t *)(a1 + 1)));
              v23.i8[0] = vminvq_u8(v23);
              return v23.i32[0] != 0;
            default:
              goto LABEL_49;
          }
        }
        if (v4->i32[0] != v6->i32[0])
          return 0;
        v11 = *(_DWORD *)&a3[v8 - 4];
        v12 = *(_DWORD *)&a1[v8 - 4];
        return v11 == v12;
      }
      return 1;
    }
    goto LABEL_48;
  }
  if (!(_DWORD)v6)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    v27 = (uint8x16_t)vceqq_s8(*v4, *v6);
    v27.i8[0] = vminvq_u8(v27);
    v7 = v27.u32[0];
    if (v27.i32[0])
    {
      if (v5 < 0x10)
        return 1;
      v28 = v5 & 0xF;
      do
      {
        v29 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v4 + v28), *(int8x16_t *)((char *)v6 + v28));
        v29.i8[0] = vminvq_u8(v29);
        v7 = v29.i32[0] != 0;
        v28 += 16;
        if (v29.i32[0])
          v30 = v28 >= v5;
        else
          v30 = 1;
      }
      while (!v30);
    }
    return v7;
  }
  if (*(_WORD *)a3 != *a1)
    return 0;
  v14 = (int16x8_t *)(a3 + 2);
  v15 = v8 - 1;
  v16 = (uint8x8_t *)(a1 + 1);
  if ((v8 - 1) < 8)
  {
    if (v15 >= 4)
    {
      v24 = (v16->u32[0] | ((unint64_t)v16->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      v25 = (*(unsigned int *)((char *)v16->u32 + (v15 & 3)) | ((unint64_t)*(unsigned int *)((char *)v16->u32
                                                                                                  + (v15 & 3)) << 16)) & 0xFFFF0000FFFFLL;
      v26 = (v25 | (v25 << 8)) & 0xFF00FF00FF00FFLL;
      return ((v24 | (v24 << 8)) & 0xFF00FF00FF00FFLL) == v14->i64[0]
          && v26 == *(uint64_t *)((char *)v14->i64 + 2 * (v15 & 3));
    }
    if (v15 >= 2)
    {
      v13 = ((v16->u16[0] | (v16->u16[0] << 8)) & 0xFF00FF) == v14->i32[0];
      v31 = (*(unsigned __int16 *)((char *)v16->u16 + (v15 & 1)) | (*(unsigned __int16 *)((char *)v16->u16 + (v15 & 1)) << 8)) & 0xFF00FF;
      return v13 && v31 == *(__int32 *)((char *)v14->i32 + 2 * (v15 & 1));
    }
    if ((_DWORD)v8 == 2)
    {
      v12 = v16->u8[0];
      v11 = v14->u16[0];
      return v11 == v12;
    }
    return 1;
  }
  v17 = (uint16x8_t)vceqq_s16(*v14, (int16x8_t)vmovl_u8(*v16));
  v17.i16[0] = vminvq_u16(v17);
  v7 = v17.u32[0];
  if (v17.i32[0])
  {
    v18 = v15 & 7;
    do
    {
      v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v14 + 2 * v18), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v16 + v18)));
      v19.i16[0] = vminvq_u16(v19);
      v7 = v19.i32[0] != 0;
      v18 += 8;
      if (v19.i32[0])
        v20 = v18 >= v15;
      else
        v20 = 1;
    }
    while (!v20);
  }
  return v7;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJdN3WTF7CStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJdS9_EEEEEEDcSD_DpT0_(uint64_t a1, _DWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;

  v8 = *a2;
  *a2 = 0;
  if (v8)
  {
    if (*v8 == 1)
      WTF::fastFree((unint64_t)v8, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v8;
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*,false>(uint64_t result, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t *v27;
  int v28;
  int v29;
  int v30;
  _DWORD *v31;
  _DWORD *v32;
  BOOL v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unint64_t *v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t *v62;
  BOOL v63;
  char v64;
  uint64_t v65;
  _DWORD *v66;
  int *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  int v76;
  int v77;
  int v78;
  BOOL v79;
  int64_t v80;
  int64_t v81;
  int64_t v82;
  uint64_t v83;
  unint64_t *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int64_t v103;
  uint64_t v104;
  int *v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  int64_t v109;
  int v110;
  int v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int *v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int *v123;
  unint64_t v124;
  int v125;
  BOOL v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  int v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  int *v141;
  int *v142;
  int v143;
  BOOL v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;

  v7 = result;
LABEL_2:
  v8 = (unint64_t *)((char *)a2 - 12);
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (uint64_t)a2 - i;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - i) >> 2);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v59 = *((_DWORD *)a2 - 2);
        v60 = *(_DWORD *)(i + 4);
        if (v59 < v60
          || v59 <= v60
          && (v127 = *((_DWORD *)a2 - 1), v128 = *(_DWORD *)(i + 8), v127 >= v128)
          && (v127 > v128 || *(_DWORD *)v8 < *(_DWORD *)i))
        {
          v153 = *(_DWORD *)(i + 8);
          v148 = *(_QWORD *)i;
          v61 = *v8;
          *(_DWORD *)(i + 8) = *((_DWORD *)a2 - 1);
          *(_QWORD *)i = v61;
          *((_DWORD *)a2 - 1) = v153;
          *v8 = v148;
        }
        return result;
      case 3:
        return (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*>((unint64_t *)i, (unint64_t *)(i + 12), (unint64_t *)((char *)a2 - 12));
      case 4:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*>(i, i + 12, i + 24, (uint64_t)a2 - 12);
      case 5:
        return (uint64_t)std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*,0>(i, i + 12, i + 24, i + 36, (uint64_t)a2 - 12);
      default:
        if (v10 <= 287)
        {
          v62 = (unint64_t *)(i + 12);
          v63 = (unint64_t *)i == a2 || v62 == a2;
          v64 = v63;
          if ((a4 & 1) != 0)
          {
            if ((v64 & 1) != 0)
              return result;
            v65 = 0;
            v66 = (_DWORD *)i;
            while (1)
            {
              v67 = v66;
              v66 = v62;
              v68 = v67[4];
              v69 = v67[1];
              if (v68 < v69)
                break;
              if (v68 <= v69)
              {
                v71 = v67[5];
                v78 = v67[2];
                v79 = v71 <= v78;
                if (v71 >= v78)
                {
                  v70 = *v66;
                  if (!v79 || v70 < *v67)
                    goto LABEL_148;
                }
              }
LABEL_165:
              v62 = (unint64_t *)(v66 + 3);
              v65 += 12;
              if (v66 + 3 == (_DWORD *)a2)
                return result;
            }
            v70 = *(_DWORD *)v62;
            v71 = v67[5];
LABEL_148:
            *(_QWORD *)v66 = *(_QWORD *)v67;
            v66[2] = v67[2];
            v72 = (_DWORD *)i;
            if (v67 != (int *)i)
            {
              v73 = v65;
              while (1)
              {
                v74 = i + v73;
                v75 = (int *)(i + v73 - 12);
                v76 = *(_DWORD *)(i + v73 - 8);
                if (v68 >= v76)
                {
                  if (v68 > v76 || (v77 = *(_DWORD *)(i + v73 - 4), v71 < v77))
                  {
                    v72 = v67;
                    goto LABEL_164;
                  }
                  if (v71 <= v77 && v70 >= *v75)
                    break;
                }
                v67 -= 3;
                *(_QWORD *)v74 = *(_QWORD *)v75;
                *(_DWORD *)(v74 + 8) = *(_DWORD *)(i + v73 - 4);
                v73 -= 12;
                if (!v73)
                {
                  v72 = (_DWORD *)i;
                  goto LABEL_164;
                }
              }
              v72 = (_DWORD *)(i + v73);
            }
LABEL_164:
            *v72 = v70;
            v72[1] = v68;
            v72[2] = v71;
            goto LABEL_165;
          }
          if ((v64 & 1) != 0)
            return result;
          v129 = 0;
          v130 = -1;
          v131 = 1;
          v132 = (int *)i;
          while (1)
          {
            v133 = v129;
            v129 = v131;
            v134 = v132[4];
            v135 = *(_DWORD *)(i + 12 * v133 + 4);
            if (v134 < v135)
              break;
            if (v134 <= v135)
            {
              v137 = v132[5];
              v143 = *(_DWORD *)(i + 12 * v133 + 8);
              v144 = v137 <= v143;
              if (v137 >= v143)
              {
                v136 = *(_DWORD *)v62;
                if (!v144 || v136 < *v132)
                  goto LABEL_251;
              }
            }
LABEL_263:
            v132 += 3;
            v131 = v129 + 1;
            v62 = (unint64_t *)(i + 12 * (v129 + 1));
            --v130;
            if (v62 == a2)
              return result;
          }
          v136 = *(_DWORD *)v62;
          v137 = v132[5];
LABEL_251:
          v138 = i + 12 * v133;
          v139 = *(_QWORD *)v138;
          *((_DWORD *)v62 + 2) = *(_DWORD *)(v138 + 8);
          *v62 = v139;
          v140 = v130;
          v141 = v132;
          while (1)
          {
            v142 = v141 - 3;
            result = *(v141 - 2);
            if (v134 >= (int)result)
            {
              if (v134 > (int)result)
                break;
              result = *(v141 - 1);
              if (v137 < (int)result)
                break;
              if (v137 <= (int)result)
              {
                result = *v142;
                if (v136 >= (int)result)
                  break;
              }
            }
            *(_QWORD *)v141 = *(_QWORD *)v142;
            result = *(v141 - 1);
            v141[2] = result;
            v141 -= 3;
            v33 = __CFADD__(v140++, 1);
            if (v33)
              goto LABEL_269;
          }
          *v141 = v136;
          v141[1] = v134;
          v141[2] = v137;
          goto LABEL_263;
        }
        if (!a3)
        {
          if ((unint64_t *)i == a2)
            return result;
          v80 = (unint64_t)(v11 - 2) >> 1;
          v81 = v80;
          while (1)
          {
            v82 = v81;
            if (v80 >= v81)
            {
              v83 = (2 * v81) | 1;
              v84 = (unint64_t *)(i + 12 * v83);
              if (2 * v82 + 2 < v11)
              {
                v85 = *(_DWORD *)(i + 12 * v83 + 4);
                v86 = *((_DWORD *)v84 + 4);
                if (v85 < v86
                  || v85 <= v86
                  && (v87 = *(_DWORD *)(i + 12 * v83 + 8), v88 = *((_DWORD *)v84 + 5), v87 >= v88)
                  && (v87 > v88 || *(_DWORD *)v84 < *((_DWORD *)v84 + 3)))
                {
                  v84 = (unint64_t *)((char *)v84 + 12);
                  v83 = 2 * v82 + 2;
                }
              }
              v89 = *((_DWORD *)v84 + 1);
              v90 = *(_DWORD *)(i + 12 * v82 + 4);
              if (v89 >= v90)
              {
                result = i + 12 * v82;
                if (v89 > v90)
                {
                  v91 = *(_DWORD *)(result + 8);
LABEL_180:
                  v93 = *(_DWORD *)result;
                  while (1)
                  {
                    v94 = *v84;
                    *(_DWORD *)(result + 8) = *((_DWORD *)v84 + 2);
                    *(_QWORD *)result = v94;
                    if (v80 < v83)
                      goto LABEL_200;
                    result = (uint64_t)v84;
                    v95 = 2 * v83;
                    v83 = (2 * v83) | 1;
                    v84 = (unint64_t *)(i + 12 * v83);
                    v96 = v95 + 2;
                    if (v96 < v11)
                    {
                      v97 = *(_DWORD *)(i + 12 * v83 + 4);
                      v98 = *((_DWORD *)v84 + 4);
                      if (v97 < v98
                        || v97 <= v98
                        && (v99 = *(_DWORD *)(i + 12 * v83 + 8), v100 = *((_DWORD *)v84 + 5), v99 >= v100)
                        && (v99 > v100 || *(_DWORD *)v84 < *((_DWORD *)v84 + 3)))
                      {
                        v84 = (unint64_t *)((char *)v84 + 12);
                        v83 = v96;
                      }
                    }
                    v101 = *((_DWORD *)v84 + 1);
                    if (v101 < v90)
                      break;
                    if (v101 <= v90)
                    {
                      v102 = *((_DWORD *)v84 + 2);
                      if (v102 >= v91 && (v102 > v91 || *(_DWORD *)v84 < v93))
                        break;
                    }
                  }
                  v84 = (unint64_t *)result;
LABEL_200:
                  *(_DWORD *)v84 = v93;
                  *((_DWORD *)v84 + 1) = v90;
                  *((_DWORD *)v84 + 2) = v91;
                  goto LABEL_201;
                }
                v92 = *((_DWORD *)v84 + 2);
                v91 = *(_DWORD *)(i + 12 * v82 + 8);
                if (v92 < v91 || v92 <= v91 && *(_DWORD *)v84 >= *(_DWORD *)result)
                  goto LABEL_180;
              }
            }
LABEL_201:
            v81 = v82 - 1;
            if (!v82)
            {
              v103 = v10 / 0xCuLL;
              while (1)
              {
                v104 = 0;
                v154 = *(_DWORD *)(i + 8);
                v149 = *(_QWORD *)i;
                v105 = (int *)i;
                do
                {
                  v106 = v105;
                  v107 = v104 + 1;
                  v105 += 3 * v104 + 3;
                  v108 = 2 * v104;
                  v104 = (2 * v104) | 1;
                  v109 = v108 + 2;
                  if (v109 < v103)
                  {
                    v110 = v106[3 * v107 + 1];
                    result = v105[4];
                    if (v110 < (int)result
                      || v110 <= (int)result
                      && (v111 = v106[3 * v107 + 2], v112 = v105[5], v111 >= v112)
                      && (v111 > v112 || *v105 < v105[3]))
                    {
                      v105 += 3;
                      v104 = v109;
                    }
                  }
                  v113 = *(_QWORD *)v105;
                  v106[2] = v105[2];
                  *(_QWORD *)v106 = v113;
                }
                while (v104 <= (uint64_t)((unint64_t)(v103 - 2) >> 1));
                a2 = (unint64_t *)((char *)a2 - 12);
                if (v105 == (int *)a2)
                {
                  v105[2] = v154;
                  *(_QWORD *)v105 = v149;
                }
                else
                {
                  v114 = *a2;
                  v105[2] = *((_DWORD *)a2 + 2);
                  *(_QWORD *)v105 = v114;
                  *((_DWORD *)a2 + 2) = v154;
                  *a2 = v149;
                  v115 = (uint64_t)v105 - i + 12;
                  if (v115 >= 13)
                  {
                    v116 = v115 / 0xCuLL - 2;
                    v117 = v116 >> 1;
                    v118 = (int *)(i + 12 * (v116 >> 1));
                    v119 = v118[1];
                    v120 = v105[1];
                    if (v119 < v120)
                    {
                      v121 = *v105;
                      v122 = v105[2];
LABEL_221:
                      result = *(_QWORD *)v118;
                      v105[2] = v118[2];
                      *(_QWORD *)v105 = result;
                      if (v116 >= 2)
                      {
                        while (1)
                        {
                          v123 = v118;
                          v124 = v117 - 1;
                          v117 = (v117 - 1) >> 1;
                          v118 = (int *)(i + 12 * v117);
                          result = v118[1];
                          if ((int)result >= v120)
                          {
                            if ((int)result > v120)
                              break;
                            result = *(unsigned int *)(i + 12 * v117 + 8);
                            if ((int)result < v122)
                              break;
                            if ((int)result <= v122)
                            {
                              result = *v118;
                              if ((int)result >= v121)
                                break;
                            }
                          }
                          result = *(_QWORD *)v118;
                          v123[2] = v118[2];
                          *(_QWORD *)v123 = result;
                          if (v124 <= 1)
                            goto LABEL_237;
                        }
                        v118 = v123;
                      }
LABEL_237:
                      *v118 = v121;
                      v118[1] = v120;
                      v118[2] = v122;
                      goto LABEL_238;
                    }
                    if (v119 <= v120)
                    {
                      v125 = *(_DWORD *)(i + 12 * v117 + 8);
                      v122 = v105[2];
                      v126 = v125 <= v122;
                      if (v125 >= v122)
                      {
                        v121 = *v105;
                        if (!v126)
                          goto LABEL_221;
                        result = *v118;
                        if ((int)result < v121)
                          goto LABEL_221;
                      }
                    }
                  }
                }
LABEL_238:
                v79 = v103-- <= 2;
                if (v79)
                  return result;
              }
            }
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = i + 12 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0x601)
        {
          result = (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*>((unint64_t *)(v7 + 12 * v12), (unint64_t *)v7, (unint64_t *)((char *)a2 - 12));
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*>((unint64_t *)v7, (unint64_t *)(v7 + 12 * v12), (unint64_t *)((char *)a2 - 12));
          v14 = 3 * v12;
          v15 = (unint64_t *)(v7 + 12 * v12 - 12);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*>((unint64_t *)(v7 + 12), v15, a2 - 3);
          v16 = (unint64_t *)(v7 + 12 + 4 * v14);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*>((unint64_t *)(v7 + 24), v16, (unint64_t *)((char *)a2 - 36));
          result = (uint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*>(v15, (unint64_t *)v13, v16);
          v150 = *(_DWORD *)(v7 + 8);
          v145 = *(_QWORD *)v7;
          v17 = *(_DWORD *)(v13 + 8);
          *(_QWORD *)v7 = *(_QWORD *)v13;
          *(_DWORD *)(v7 + 8) = v17;
          *(_DWORD *)(v13 + 8) = v150;
          *(_QWORD *)v13 = v145;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v19 = *(_DWORD *)(v7 - 8);
          v18 = *(_DWORD *)(v7 + 4);
          if (v19 < v18)
            goto LABEL_17;
          if (v19 <= v18)
          {
            v20 = *(_DWORD *)(v7 - 4);
            v42 = *(_DWORD *)(v7 + 8);
            if (v20 >= v42 && (v20 > v42 || *(_DWORD *)(v7 - 12) < *(_DWORD *)v7))
              goto LABEL_17;
          }
          else
          {
            v42 = *(_DWORD *)(v7 + 8);
          }
          v43 = *(_DWORD *)v7;
          v44 = *((_DWORD *)a2 - 2);
          if (v18 < v44 || v18 <= v44 && (v47 = *((_DWORD *)a2 - 1), v42 >= v47) && (v42 > v47 || v43 < *(_DWORD *)v8))
          {
            for (i = v7 + 12; (unint64_t *)i != a2; i += 12)
            {
              v45 = *(_DWORD *)(i + 4);
              if (v18 < v45)
                goto LABEL_98;
              if (v18 <= v45)
              {
                v46 = *(_DWORD *)(i + 8);
                if (v42 >= v46 && (v42 > v46 || v43 < *(_DWORD *)i))
                  goto LABEL_98;
              }
            }
            goto LABEL_269;
          }
          for (i = v7 + 12; i < (unint64_t)a2; i += 12)
          {
            v48 = *(_DWORD *)(i + 4);
            if (v18 < v48)
              break;
            if (v18 <= v48)
            {
              v49 = *(_DWORD *)(i + 8);
              if (v42 >= v49 && (v42 > v49 || v43 < *(_DWORD *)i))
                break;
            }
          }
LABEL_98:
          v50 = a2;
          if (i >= (unint64_t)a2)
            goto LABEL_108;
          v50 = (unint64_t *)((char *)a2 - 12);
          if (a2 == (unint64_t *)v7)
            goto LABEL_269;
          while (1)
          {
            v51 = *((_DWORD *)v50 + 1);
            if (v18 >= v51)
            {
              if (v18 > v51)
                break;
              v52 = *((_DWORD *)v50 + 2);
              if (v42 < v52 || v42 <= v52 && v43 >= *(_DWORD *)v50)
                break;
            }
            v63 = v50 == (unint64_t *)v7;
            v50 = (unint64_t *)((char *)v50 - 12);
            if (v63)
              goto LABEL_269;
          }
LABEL_108:
          while (i < (unint64_t)v50)
          {
            v152 = *(_DWORD *)(i + 8);
            v147 = *(_QWORD *)i;
            v53 = *v50;
            *(_DWORD *)(i + 8) = *((_DWORD *)v50 + 2);
            *(_QWORD *)i = v53;
            *((_DWORD *)v50 + 2) = v152;
            *v50 = v147;
            while (1)
            {
              i += 12;
              if ((unint64_t *)i == a2)
                goto LABEL_269;
              v54 = *(_DWORD *)(i + 4);
              if (v18 < v54)
                break;
              if (v18 <= v54)
              {
                v55 = *(_DWORD *)(i + 8);
                if (v42 >= v55 && (v42 > v55 || v43 < *(_DWORD *)i))
                  break;
              }
            }
            if (v50 == (unint64_t *)v7)
              goto LABEL_269;
            v50 = (unint64_t *)((char *)v50 - 12);
            while (1)
            {
              v56 = *((_DWORD *)v50 + 1);
              if (v18 >= v56)
              {
                if (v18 > v56)
                  break;
                v57 = *((_DWORD *)v50 + 2);
                if (v42 < v57 || v42 <= v57 && v43 >= *(_DWORD *)v50)
                  break;
              }
              v63 = v50 == (unint64_t *)v7;
              v50 = (unint64_t *)((char *)v50 - 12);
              if (v63)
                goto LABEL_269;
            }
          }
          if (i - 12 != v7)
          {
            v58 = *(_QWORD *)(i - 12);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(i - 4);
            *(_QWORD *)v7 = v58;
          }
          a4 = 0;
          *(_DWORD *)(i - 12) = v43;
          *(_DWORD *)(i - 8) = v18;
          *(_DWORD *)(i - 4) = v42;
          continue;
        }
        v18 = *(_DWORD *)(v7 + 4);
LABEL_17:
        if ((unint64_t *)(v7 + 12) == a2)
        {
LABEL_269:
          __break(1u);
          return result;
        }
        v21 = 0;
        v22 = *(_DWORD *)v7;
        v23 = *(_DWORD *)(v7 + 8);
        while (1)
        {
          v24 = *(_DWORD *)(v7 + v21 + 16);
          if (v24 >= v18)
          {
            if (v24 > v18)
              break;
            v25 = *(_DWORD *)(v7 + v21 + 20);
            if (v25 < v23 || v25 <= v23 && *(_DWORD *)(v7 + v21 + 12) >= v22)
              break;
          }
          v21 += 12;
          if ((unint64_t *)(v7 + v21 + 12) == a2)
            goto LABEL_269;
        }
        v26 = v7 + v21 + 12;
        if (v21)
        {
          v27 = (unint64_t *)((char *)a2 - 12);
          if (a2 == (unint64_t *)v7)
            goto LABEL_269;
          while (1)
          {
            v28 = *((_DWORD *)v27 + 1);
            if (v28 < v18)
              break;
            if (v28 <= v18)
            {
              v29 = *((_DWORD *)v27 + 2);
              if (v29 >= v23 && (v29 > v23 || *(_DWORD *)v27 < v22))
                break;
            }
            v63 = v27 == (unint64_t *)v7;
            v27 = (unint64_t *)((char *)v27 - 12);
            if (v63)
              goto LABEL_269;
          }
        }
        else
        {
          v27 = a2;
          if (v26 < (unint64_t)a2)
          {
            v30 = *((_DWORD *)a2 - 2);
            v27 = (unint64_t *)((char *)a2 - 12);
            if (v30 >= v18)
            {
              v31 = (_DWORD *)a2 - 1;
              v27 = (unint64_t *)((char *)a2 - 12);
              do
              {
                v32 = v31 - 2;
                if (v30 <= v18 && *v31 >= v23)
                {
                  if (*v31 > v23)
                  {
                    v27 = (unint64_t *)(v31 - 2);
                    goto LABEL_51;
                  }
                  v33 = *v32 < v22 || v26 >= (unint64_t)v32;
                  if (v33)
                    goto LABEL_51;
                }
                else if (v26 >= (unint64_t)v32)
                {
                  goto LABEL_51;
                }
                v27 = (unint64_t *)((char *)v27 - 12);
                v30 = *(v31 - 4);
                v31 -= 3;
              }
              while (v30 >= v18);
              v27 = (unint64_t *)(v31 - 2);
            }
          }
        }
LABEL_51:
        i = v26;
        if (v26 < (unint64_t)v27)
        {
          v34 = v27;
          do
          {
            v151 = *(_DWORD *)(i + 8);
            v146 = *(_QWORD *)i;
            v35 = *v34;
            *(_DWORD *)(i + 8) = *((_DWORD *)v34 + 2);
            *(_QWORD *)i = v35;
            *((_DWORD *)v34 + 2) = v151;
            *v34 = v146;
            while (1)
            {
              i += 12;
              if ((unint64_t *)i == a2)
                goto LABEL_269;
              v36 = *(_DWORD *)(i + 4);
              if (v36 >= v18)
              {
                if (v36 > v18)
                  break;
                v37 = *(_DWORD *)(i + 8);
                if (v37 < v23 || v37 <= v23 && *(_DWORD *)i >= v22)
                  break;
              }
            }
            if (v34 == (unint64_t *)v7)
              goto LABEL_269;
            v34 = (unint64_t *)((char *)v34 - 12);
            while (1)
            {
              v38 = *((_DWORD *)v34 + 1);
              if (v38 < v18)
                break;
              if (v38 <= v18)
              {
                v39 = *((_DWORD *)v34 + 2);
                if (v39 >= v23 && (v39 > v23 || *(_DWORD *)v34 < v22))
                  break;
              }
              v63 = v34 == (unint64_t *)v7;
              v34 = (unint64_t *)((char *)v34 - 12);
              if (v63)
                goto LABEL_269;
            }
          }
          while (i < (unint64_t)v34);
        }
        if (i - 12 != v7)
        {
          v40 = *(_QWORD *)(i - 12);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(i - 4);
          *(_QWORD *)v7 = v40;
        }
        *(_DWORD *)(i - 12) = v22;
        *(_DWORD *)(i - 8) = v18;
        *(_DWORD *)(i - 4) = v23;
        if (v26 < (unint64_t)v27)
        {
LABEL_76:
          result = std::__introsort<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*,false>(v7, i - 12, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v41 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*>(v7, (_DWORD *)(i - 12));
        result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*>(i, a2);
        if (!(_DWORD)result)
        {
          if (v41)
            continue;
          goto LABEL_76;
        }
        a2 = (unint64_t *)(i - 12);
        if (!v41)
          goto LABEL_2;
        return result;
    }
  }
}

unint64_t *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t *result;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;

  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*>(a1, a2, a3, a4);
  v11 = *(_DWORD *)(a5 + 4);
  v12 = *(_DWORD *)(a4 + 4);
  if (v11 < v12
    || v11 <= v12
    && (v31 = *(_DWORD *)(a5 + 8), v32 = *(_DWORD *)(a4 + 8), v31 >= v32)
    && (v31 > v32 || *(_DWORD *)a5 < *(_DWORD *)a4))
  {
    v13 = *(_DWORD *)(a4 + 8);
    v14 = *(_QWORD *)a4;
    v15 = *(_DWORD *)(a5 + 8);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_DWORD *)(a4 + 8) = v15;
    *(_QWORD *)a5 = v14;
    *(_DWORD *)(a5 + 8) = v13;
    v16 = *(_DWORD *)(a4 + 4);
    v17 = *(_DWORD *)(a3 + 4);
    if (v16 < v17
      || v16 <= v17
      && (v33 = *(_DWORD *)(a4 + 8), v34 = *(_DWORD *)(a3 + 8), v33 >= v34)
      && (v33 > v34 || *(_DWORD *)a4 < *(_DWORD *)a3))
    {
      v18 = *(_DWORD *)(a3 + 8);
      v19 = *(_QWORD *)a3;
      v20 = *(_DWORD *)(a4 + 8);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_DWORD *)(a3 + 8) = v20;
      *(_QWORD *)a4 = v19;
      *(_DWORD *)(a4 + 8) = v18;
      v21 = *(_DWORD *)(a3 + 4);
      v22 = *(_DWORD *)(a2 + 4);
      if (v21 < v22
        || v21 <= v22
        && (v35 = *(_DWORD *)(a3 + 8), v36 = *(_DWORD *)(a2 + 8), v35 >= v36)
        && (v35 > v36 || *(_DWORD *)a3 < *(_DWORD *)a2))
      {
        v23 = *(_DWORD *)(a2 + 8);
        v24 = *(_QWORD *)a2;
        v25 = *(_DWORD *)(a3 + 8);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_DWORD *)(a2 + 8) = v25;
        *(_QWORD *)a3 = v24;
        *(_DWORD *)(a3 + 8) = v23;
        v26 = *(_DWORD *)(a2 + 4);
        v27 = *(_DWORD *)(a1 + 4);
        if (v26 < v27
          || v26 <= v27
          && (v37 = *(_DWORD *)(a2 + 8), v38 = *(_DWORD *)(a1 + 8), v37 >= v38)
          && (v37 > v38 || *(_DWORD *)a2 < *(_DWORD *)a1))
        {
          v28 = *(_DWORD *)(a1 + 8);
          v29 = *(_QWORD *)a1;
          v30 = *(_DWORD *)(a2 + 8);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_DWORD *)(a1 + 8) = v30;
          *(_QWORD *)a2 = v29;
          *(_DWORD *)(a2 + 8) = v28;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;

  v3 = *((_DWORD *)a2 + 1);
  v4 = *((_DWORD *)result + 1);
  if (v3 < v4
    || v3 <= v4
    && (v9 = *((_DWORD *)a2 + 2), v10 = *((_DWORD *)result + 2), v9 >= v10)
    && (v9 > v10 || *(_DWORD *)a2 < *(_DWORD *)result))
  {
    v5 = *((_DWORD *)a3 + 1);
    if (v5 < v3
      || v5 <= v3
      && (v20 = *((_DWORD *)a3 + 2), v21 = *((_DWORD *)a2 + 2), v20 >= v21)
      && (v20 > v21 || *(_DWORD *)a3 < *(_DWORD *)a2))
    {
      v6 = *((_DWORD *)result + 2);
      v7 = *result;
      v8 = *((_DWORD *)a3 + 2);
      *result = *a3;
      *((_DWORD *)result + 2) = v8;
    }
    else
    {
      v22 = *((_DWORD *)result + 2);
      v23 = *result;
      v24 = *((_DWORD *)a2 + 2);
      *result = *a2;
      *((_DWORD *)result + 2) = v24;
      *a2 = v23;
      *((_DWORD *)a2 + 2) = v22;
      v25 = *((_DWORD *)a3 + 1);
      v26 = HIDWORD(v23);
      if (v25 >= (int)v26)
      {
        if (v25 > (int)v26)
          return result;
        v32 = *((_DWORD *)a3 + 2);
        v33 = *((_DWORD *)a2 + 2);
        if (v32 < v33 || v32 <= v33 && *(_DWORD *)a3 >= *(_DWORD *)a2)
          return result;
      }
      v6 = *((_DWORD *)a2 + 2);
      v7 = *a2;
      v27 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v27;
    }
    *a3 = v7;
    *((_DWORD *)a3 + 2) = v6;
    return result;
  }
  v11 = *((_DWORD *)a3 + 1);
  if (v11 < v3
    || v11 <= v3
    && (v28 = *((_DWORD *)a3 + 2), v29 = *((_DWORD *)a2 + 2), v28 >= v29)
    && (v28 > v29 || *(_DWORD *)a3 < *(_DWORD *)a2))
  {
    v12 = *((_DWORD *)a2 + 2);
    v13 = *a2;
    v14 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v14;
    *a3 = v13;
    *((_DWORD *)a3 + 2) = v12;
    v15 = *((_DWORD *)a2 + 1);
    v16 = *((_DWORD *)result + 1);
    if (v15 < v16
      || v15 <= v16
      && (v30 = *((_DWORD *)a2 + 2), v31 = *((_DWORD *)result + 2), v30 >= v31)
      && (v30 > v31 || *(_DWORD *)a2 < *(_DWORD *)result))
    {
      v17 = *((_DWORD *)result + 2);
      v18 = *result;
      v19 = *((_DWORD *)a2 + 2);
      *result = *a2;
      *((_DWORD *)result + 2) = v19;
      *a2 = v18;
      *((_DWORD *)a2 + 2) = v17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*>(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (unint64_t *)(a2 - 3);
      v7 = *(a2 - 2);
      v8 = *(_DWORD *)(a1 + 4);
      if (v7 < v8
        || v7 <= v8
        && (v28 = *(a2 - 1), v29 = *(_DWORD *)(a1 + 8), v28 >= v29)
        && (v28 > v29 || *(_DWORD *)v6 < *(_DWORD *)a1))
      {
        v9 = *(_DWORD *)(a1 + 8);
        v10 = *(_QWORD *)a1;
        v11 = *(a2 - 1);
        *(_QWORD *)a1 = *v6;
        *(_DWORD *)(a1 + 8) = v11;
        *v6 = v10;
        *(a2 - 1) = v9;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*>((unint64_t *)a1, (unint64_t *)(a1 + 12), (unint64_t *)(a2 - 3));
      return 1;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*>(a1, a1 + 12, a1 + 24, (uint64_t)(a2 - 3));
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*,0>(a1, a1 + 12, a1 + 24, a1 + 36, (uint64_t)(a2 - 3));
      return 1;
    default:
      v12 = (_DWORD *)(a1 + 24);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*>((unint64_t *)a1, (unint64_t *)(a1 + 12), (unint64_t *)(a1 + 24));
      v13 = (_DWORD *)(a1 + 36);
      if ((_DWORD *)(a1 + 36) == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  do
  {
    v16 = v13[1];
    v17 = v12[1];
    if (v16 >= v17)
    {
      if (v16 > v17)
        goto LABEL_27;
      v19 = v13[2];
      v26 = v12[2];
      v27 = v19 <= v26;
      if (v19 < v26)
        goto LABEL_27;
      v18 = *v13;
      if (v27 && v18 >= *v12)
        goto LABEL_27;
    }
    else
    {
      v18 = *v13;
      v19 = v13[2];
    }
    *(_QWORD *)v13 = *(_QWORD *)v12;
    v13[2] = v12[2];
    v20 = (_DWORD *)a1;
    if (v12 == (_DWORD *)a1)
      goto LABEL_26;
    v21 = v14;
    while (1)
    {
      v22 = a1 + v21;
      v23 = (_DWORD *)(a1 + v21 + 12);
      v24 = *(_DWORD *)(a1 + v21 + 16);
      if (v16 < v24)
        goto LABEL_16;
      if (v16 > v24)
        goto LABEL_24;
      v25 = *(_DWORD *)(a1 + v21 + 20);
      if (v19 < v25)
        break;
      if (v19 <= v25 && v18 >= *v23)
      {
LABEL_24:
        v20 = v12;
        goto LABEL_26;
      }
LABEL_16:
      v12 -= 3;
      *(_QWORD *)(v22 + 24) = *(_QWORD *)v23;
      *(_DWORD *)(v22 + 32) = *(_DWORD *)(a1 + v21 + 20);
      v21 -= 12;
      if (v21 == -24)
      {
        v20 = (_DWORD *)a1;
        goto LABEL_26;
      }
    }
    v20 = (_DWORD *)(a1 + v21 + 24);
LABEL_26:
    *v20 = v18;
    v20[1] = v16;
    v20[2] = v19;
    if (++v15 == 8)
      return v13 + 3 == a2;
LABEL_27:
    v12 = v13;
    v14 += 12;
    v13 += 3;
  }
  while (v13 != a2);
  return 1;
}

unint64_t *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *result;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;

  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::flattenFields(WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,int)::$_0 &,JSC::IntlNumberFormatField*>((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  v9 = *(_DWORD *)(a4 + 4);
  v10 = *(_DWORD *)(a3 + 4);
  if (v9 < v10
    || v9 <= v10
    && (v24 = *(_DWORD *)(a4 + 8), v25 = *(_DWORD *)(a3 + 8), v24 >= v25)
    && (v24 > v25 || *(_DWORD *)a4 < *(_DWORD *)a3))
  {
    v11 = *(_DWORD *)(a3 + 8);
    v12 = *(_QWORD *)a3;
    v13 = *(_DWORD *)(a4 + 8);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_DWORD *)(a3 + 8) = v13;
    *(_QWORD *)a4 = v12;
    *(_DWORD *)(a4 + 8) = v11;
    v14 = *(_DWORD *)(a3 + 4);
    v15 = *(_DWORD *)(a2 + 4);
    if (v14 < v15
      || v14 <= v15
      && (v26 = *(_DWORD *)(a3 + 8), v27 = *(_DWORD *)(a2 + 8), v26 >= v27)
      && (v26 > v27 || *(_DWORD *)a3 < *(_DWORD *)a2))
    {
      v16 = *(_DWORD *)(a2 + 8);
      v17 = *(_QWORD *)a2;
      v18 = *(_DWORD *)(a3 + 8);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_DWORD *)(a2 + 8) = v18;
      *(_QWORD *)a3 = v17;
      *(_DWORD *)(a3 + 8) = v16;
      v19 = *(_DWORD *)(a2 + 4);
      v20 = *(_DWORD *)(a1 + 4);
      if (v19 < v20
        || v19 <= v20
        && (v28 = *(_DWORD *)(a2 + 8), v29 = *(_DWORD *)(a1 + 8), v28 >= v29)
        && (v28 > v29 || *(_DWORD *)a2 < *(_DWORD *)a1))
      {
        v21 = *(_DWORD *)(a1 + 8);
        v22 = *(_QWORD *)a1;
        v23 = *(_DWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a1 + 8) = v23;
        *(_QWORD *)a2 = v22;
        *(_DWORD *)(a2 + 8) = v21;
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<JSC::IntlNumberFormatField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if (v5 + 12 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v22 = *(_QWORD *)a1;
        return v22 + 4 * ((uint64_t)(v3 - v5) >> 2);
      }
      if (v9 < 0x15555556)
      {
        v10 = 12 * v9;
        v11 = WTF::fastMalloc((WTF *)(12 * v9));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFFC) / 0xC;
        *(_QWORD *)a1 = v11;
        do
        {
          v20 = v11 + v19;
          v21 = *(_QWORD *)(v5 + v19);
          *(_DWORD *)(v20 + 8) = *(_DWORD *)(v5 + v19 + 8);
          *(_QWORD *)v20 = v21;
          v19 += 12;
        }
        while (12 * v6 != v19);
        v22 = *(_QWORD *)a1;
        if (v5)
        {
          if (v22 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          v22 = *(_QWORD *)a1;
        }
        return v22 + 4 * ((uint64_t)(v3 - v5) >> 2);
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x197E307FCLL);
    }
  }
  v23 = *(unsigned int *)(a1 + 8);
  v24 = v23 + (v23 >> 2);
  if (v24 >= 0x10)
    v25 = v24 + 1;
  else
    v25 = 16;
  if (v25 <= a2)
    v25 = a2;
  if (v25 > v23)
  {
    if (v25 >= 0x15555556)
      goto LABEL_33;
    v26 = *(unsigned int *)(a1 + 12);
    v27 = 12 * v25;
    v28 = WTF::fastMalloc((WTF *)(12 * v25));
    *(_DWORD *)(a1 + 8) = (v27 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)a1 = v28;
    if ((_DWORD)v26)
    {
      v36 = 12 * v26;
      v37 = v5;
      do
      {
        v38 = *(_QWORD *)v37;
        *(_DWORD *)(v28 + 8) = *(_DWORD *)(v37 + 8);
        *(_QWORD *)v28 = v38;
        v28 += 12;
        v37 += 12;
        v36 -= 12;
      }
      while (v36);
    }
    if (v5)
    {
      if (*(_QWORD *)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v29, v30, v31, v32, v33, v34, v35);
    }
  }
  return v3;
}

uint64_t JSC::JSValue::toBoolean(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  BOOL v10;
  _BOOL4 v11;

  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFE000000000000)
    return (_DWORD)v2 != 0;
  *(_QWORD *)&v3 = v2 - 0x2000000000000;
  if ((unint64_t)(v2 - 0x2000000000000) > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v2 & 0xFFFE000000000002) != 0)
      return v2 == 7;
    v5 = *(unsigned __int8 *)(v2 + 5);
    if (v5 == 2)
    {
      v7 = *(_QWORD *)(v2 + 8);
      v8 = (int *)(v2 + 16);
      if ((v7 & 1) == 0)
        v8 = (int *)(v7 + 4);
      v9 = *v8;
    }
    else
    {
      if (v5 != 3)
      {
        v6 = 16 * (*(_DWORD *)v2 & 0xFFFFFFFE);
        return (*(_BYTE *)(v6 + 10) & 1) == 0 || *(_QWORD *)(v6 + 40) != a2;
      }
      v9 = *(_DWORD *)(v2 + 8);
    }
    return v9 != 0;
  }
  v10 = v3 <= 0.0;
  v11 = v3 < 0.0;
  return !v10 || v11;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(uint64_t a1, int8x16_t **a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char *result;
  char *v20;
  int8x16_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int16 v32;
  int8x16_t *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  char *v41;
  char *v42;
  char *v43;
  __int16 v44;
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;

  v10 = *(_DWORD *)(a1 + 16);
  v11 = *((_DWORD *)a2 + 2);
  v12 = *a3;
  if (*a3)
    v13 = *(_DWORD *)(v12 + 4);
  else
    v13 = 0;
  v14 = __CFADD__(v13, v11);
  v15 = v13 + v11;
  if (v14)
    v15 = -1;
  v14 = __CFADD__(v15, v10);
  v16 = v15 + v10;
  if (v14)
    v17 = 0xFFFFFFFFLL;
  else
    v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if ((v18 || (v18 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v18 + 16) & 4) == 0 || v12 && (*(_BYTE *)(v12 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v17, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v20 = result;
      v21 = *a2;
      v22 = *a3;
      result += 2 * a2[1];
      v23 = (unint64_t)a2[1] & 0xFFFFFFC0;
      if (v23)
      {
        v24 = &v20[2 * v23];
        v25 = 0uLL;
        do
        {
          v45.val[0] = *v21;
          v26 = v21[1];
          v47.val[0] = v21[2];
          v27 = v21[3];
          v21 += 4;
          v28 = v27;
          v47.val[1] = 0uLL;
          v49.val[0] = v26;
          v45.val[1] = 0uLL;
          v29 = v20;
          vst2q_s8(v29, v45);
          v29 += 32;
          v49.val[1] = 0uLL;
          vst2q_s8(v29, v49);
          v30 = v20 + 64;
          vst2q_s8(v30, v47);
          v31 = v20 + 96;
          vst2q_s8(v31, *(int8x16x2_t *)(&v25 - 1));
          v20 += 128;
        }
        while (v20 != v24);
        v20 = v24;
      }
      while (v20 != result)
      {
        v32 = v21->u8[0];
        v21 = (int8x16_t *)((char *)v21 + 1);
        *(_WORD *)v20 = v32;
        v20 += 2;
      }
      if (v22)
      {
        v33 = *(int8x16_t **)(v22 + 8);
        v34 = *(unsigned int *)(v22 + 4);
        if ((*(_BYTE *)(v22 + 16) & 4) != 0)
        {
          v35 = &result[2 * v34];
          if (v34 >= 0x40)
          {
            v36 = &result[2 * (v34 & 0xFFFFFFC0)];
            v37 = 0uLL;
            do
            {
              v46.val[0] = *v33;
              v38 = v33[1];
              v48.val[0] = v33[2];
              v39 = v33[3];
              v33 += 4;
              v40 = v39;
              v48.val[1] = 0uLL;
              v50.val[0] = v38;
              v46.val[1] = 0uLL;
              v41 = result;
              vst2q_s8(v41, v46);
              v41 += 32;
              v50.val[1] = 0uLL;
              vst2q_s8(v41, v50);
              v42 = result + 64;
              vst2q_s8(v42, v48);
              v43 = result + 96;
              vst2q_s8(v43, *(int8x16x2_t *)(&v37 - 1));
              result += 128;
            }
            while (result != v36);
            result = v36;
          }
          while (result != v35)
          {
            v44 = v33->u8[0];
            v33 = (int8x16_t *)((char *)v33 + 1);
            *(_WORD *)result = v44;
            result += 2;
          }
        }
        else if ((_DWORD)v34 == 1)
        {
          *(_WORD *)result = v33->i16[0];
        }
        else if ((_DWORD)v34)
        {
          return (char *)memcpy(result, v33, 2 * v34);
        }
      }
    }
  }
  else
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v17, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (result)
      return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, *a2, a2[1], *a3);
  }
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(uint64_t a1, uint64_t a2, char *a3, _BYTE **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char *result;

  v11 = *(_DWORD *)(a1 + 16);
  v12 = *(_DWORD *)(a2 + 8);
  v13 = *((_DWORD *)a4 + 2);
  v14 = __CFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    v15 = -1;
  v14 = __CFADD__(v15, v12);
  v16 = v15 + v12;
  if (v14)
    v16 = -1;
  v14 = __CFADD__(v16, v11);
  v17 = v16 + v11;
  if (v14)
    v18 = 0xFFFFFFFFLL;
  else
    v18 = v17;
  v19 = *(_QWORD *)(a1 + 8);
  if ((v19 || (v19 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v19 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v18, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (result)
      return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, *(int8x16_t **)a2, *(_QWORD *)(a2 + 8), *a3, (int8x16_t *)*a4, (int)a4[1]);
  }
  else
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v18, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (result)
      return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, *(char **)a2, *(_QWORD *)(a2 + 8), *a3, *a4, a4[1]);
  }
  return result;
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, char *a2, unsigned int a3, char a4, _BYTE *__src, unsigned int a6)
{
  char *v11;
  _BYTE *result;

  if (a3 == 1)
  {
    *__dst = *a2;
  }
  else if (a3)
  {
    memcpy(__dst, a2, a3);
  }
  v11 = &__dst[a3];
  *v11 = a4;
  result = v11 + 1;
  if (a6 == 1)
  {
    *result = *__src;
  }
  else if (a6)
  {
    return memcpy(result, __src, a6);
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *a1, int8x16_t *a2, int a3, char a4, int8x16_t *a5, int a6)
{
  char *v6;
  char *v7;
  char *v8;
  __int128 v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int16 v16;
  int8x16x2_t v18;
  int8x16x2_t v19;
  int8x16x2_t v20;

  v6 = a1;
  v7 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    v8 = &v6[2 * (a3 & 0xFFFFFFC0)];
    v9 = 0uLL;
    do
    {
      v18.val[0] = *a2;
      v10 = a2[1];
      v19.val[0] = a2[2];
      v11 = a2[3];
      a2 += 4;
      v12 = v11;
      v19.val[1] = 0uLL;
      v20.val[0] = v10;
      v18.val[1] = 0uLL;
      v13 = v6;
      vst2q_s8(v13, v18);
      v13 += 32;
      v20.val[1] = 0uLL;
      vst2q_s8(v13, v20);
      v14 = v6 + 64;
      vst2q_s8(v14, v19);
      v15 = v6 + 96;
      vst2q_s8(v15, *(int8x16x2_t *)(&v9 - 1));
      v6 += 128;
    }
    while (v6 != v8);
    v6 = v8;
  }
  while (v6 != v7)
  {
    v16 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)v6 = v16;
    v6 += 2;
  }
  *(_WORD *)v7 = a4;
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v7 + 2, a5, a6);
}

uint64_t WTF::StringBuilder::append(uint64_t this, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int8x16_t var1;

  var1.i8[0] = a2;
  v8 = *(_QWORD *)(this + 8);
  if (!v8)
    return WTF::StringBuilder::append(this, &var1, 1uLL, a4, a5, a6, a7, a8);
  v9 = *(unsigned int *)(this + 16);
  if (v9 >= *(_DWORD *)(v8 + 4) || *(_QWORD *)this)
    return WTF::StringBuilder::append(this, &var1, 1uLL, a4, a5, a6, a7, a8);
  v10 = *(_DWORD *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 8);
  *(_DWORD *)(this + 16) = v9 + 1;
  if ((v10 & 4) != 0)
    *(_BYTE *)(v11 + v9) = a2;
  else
    *(_WORD *)(v11 + 2 * v9) = a2;
  return this;
}

void *WTF::numberToStringUnsigned<WTF::Vector<unsigned char,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  BOOL v4;
  void *result;
  _BYTE v6[13];
  uint64_t v7;

  v3 = 0;
  v7 = *MEMORY[0x1E0C80C00];
  do
  {
    v6[v3-- + 12] = (a2 % 0xA) | 0x30;
    v4 = a2 > 9;
    a2 /= 0xAu;
  }
  while (v4);
  if (v3 + 14 >= 15)
    __break(1u);
  result = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 10;
  *(_DWORD *)(a1 + 12) = -(int)v3;
  if ((unint64_t)-v3 < 0xB)
  {
    if (!v3)
      return result;
  }
  else
  {
    if ((unint64_t)-v3 >> 32)
    {
      __break(0xC471u);
      return result;
    }
    result = (void *)WTF::fastMalloc((WTF *)-v3);
    *(_DWORD *)(a1 + 8) = -(int)v3;
    *(_QWORD *)a1 = result;
  }
  return memcpy(result, &v6[v3 + 13], -v3);
}

uint64_t WTF::StringBuilder::append<WTF::Vector<unsigned char,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, int8x16_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int8x16_t *v9;
  int v10;

  v9 = a2;
  if ((a3 & 0x80000000) != 0)
  {
    result = 124;
    __break(0xC471u);
  }
  else
  {
    v10 = a3;
    return (uint64_t)WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Vector<unsigned char,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>(a1, &v9, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

char *WTF::StringBuilder::append<std::span<unsigned char,18446744073709551615ul>,char,std::span<unsigned char,18446744073709551615ul>>(uint64_t a1, int8x16_t *a2, unint64_t a3, char a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  char v11;
  int8x16_t *v12;
  int v13;

  v12 = a2;
  if (a3 >> 31 || (v13 = a3, v11 = a4, v9 = a5, a6 >> 31))
  {
    __break(0xC471u);
    JUMPOUT(0x197E30E98);
  }
  v10 = a6;
  return WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<unsigned char,18446744073709551615ul>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<std::span<unsigned char,18446744073709551615ul>,void>>(a1, &v12, &v11, (uint64_t)&v9, a5, a6, a7, a8);
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Vector<unsigned char,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>(uint64_t a1, int8x16_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char *result;
  int8x16_t *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int16 v27;
  char *v28;
  int8x16_t *v29;
  int8x16x2_t v30;
  int8x16x2_t v31;
  int8x16x2_t v32;

  v9 = *(_DWORD *)(a1 + 16);
  v10 = *((_DWORD *)a2 + 2);
  v11 = __CFADD__(v10, v9);
  v12 = v10 + v9;
  if (v11)
    v13 = 0xFFFFFFFFLL;
  else
    v13 = v12;
  v14 = *(_QWORD *)(a1 + 8);
  if ((v14 || (v14 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v14 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v13, a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v16 = *a2;
      v17 = &result[2 * a2[1]];
      v18 = (unint64_t)a2[1] & 0xFFFFFFC0;
      if (v18)
      {
        v19 = &result[2 * v18];
        v20 = 0uLL;
        do
        {
          v30.val[0] = *v16;
          v21 = v16[1];
          v31.val[0] = v16[2];
          v22 = v16[3];
          v16 += 4;
          v23 = v22;
          v31.val[1] = 0uLL;
          v32.val[0] = v21;
          v30.val[1] = 0uLL;
          v24 = result;
          vst2q_s8(v24, v30);
          v24 += 32;
          v32.val[1] = 0uLL;
          vst2q_s8(v24, v32);
          v25 = result + 64;
          vst2q_s8(v25, v31);
          v26 = result + 96;
          vst2q_s8(v26, *(int8x16x2_t *)(&v20 - 1));
          result += 128;
        }
        while (result != v19);
        result = v19;
      }
      while (result != v17)
      {
        v27 = v16->u8[0];
        v16 = (int8x16_t *)((char *)v16 + 1);
        *(_WORD *)result = v27;
        result += 2;
      }
    }
  }
  else
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v13, a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v28 = (char *)*a2;
      v29 = a2[1];
      if ((_DWORD)v29 == 1)
      {
        *result = *v28;
      }
      else if ((_DWORD)v29)
      {
        return (char *)memcpy(result, v28, a2[1]);
      }
    }
  }
  return result;
}

char *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<unsigned char,18446744073709551615ul>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<std::span<unsigned char,18446744073709551615ul>,void>>(uint64_t a1, int8x16_t **a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char *result;
  int8x16_t *v21;
  __int16 v22;
  int8x16_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int16 v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int16 v47;
  char *v48;
  char *v49;
  int8x16_t *v50;
  uint64_t v51;
  char v52;
  int8x16_t *v53;
  size_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;

  v11 = *(_DWORD *)(a1 + 16);
  v12 = *((_DWORD *)a2 + 2);
  v13 = *(_DWORD *)(a4 + 8);
  v14 = __CFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    v15 = -1;
  v14 = __CFADD__(v15, v12);
  v16 = v15 + v12;
  if (v14)
    v16 = -1;
  v14 = __CFADD__(v16, v11);
  v17 = v16 + v11;
  if (v14)
    v18 = 0xFFFFFFFFLL;
  else
    v18 = v17;
  v19 = *(_QWORD *)(a1 + 8);
  if ((v19 || (v19 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v19 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v18, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v21 = *a2;
      v22 = *a3;
      v23 = *(int8x16_t **)a4;
      v24 = *(unsigned int *)(a4 + 8);
      v25 = &result[2 * a2[1]];
      v26 = (unint64_t)a2[1] & 0xFFFFFFC0;
      if (v26)
      {
        v27 = &result[2 * v26];
        v28 = 0uLL;
        do
        {
          v55.val[0] = *v21;
          v29 = v21[1];
          v57.val[0] = v21[2];
          v30 = v21[3];
          v21 += 4;
          v31 = v30;
          v57.val[1] = 0uLL;
          v59.val[0] = v29;
          v55.val[1] = 0uLL;
          v32 = result;
          vst2q_s8(v32, v55);
          v32 += 32;
          v59.val[1] = 0uLL;
          vst2q_s8(v32, v59);
          v33 = result + 64;
          vst2q_s8(v33, v57);
          v34 = result + 96;
          vst2q_s8(v34, *(int8x16x2_t *)(&v28 - 1));
          result += 128;
        }
        while (result != v27);
        result = v27;
      }
      while (result != v25)
      {
        v35 = v21->u8[0];
        v21 = (int8x16_t *)((char *)v21 + 1);
        *(_WORD *)result = v35;
        result += 2;
      }
      *(_WORD *)v25 = v22;
      v36 = v25 + 2;
      v37 = &v36[2 * v24];
      v38 = v24 & 0xFFFFFFC0;
      if (v38)
      {
        v39 = &v36[2 * v38];
        v40 = 0uLL;
        do
        {
          v56.val[0] = *v23;
          v41 = v23[1];
          v58.val[0] = v23[2];
          v42 = v23[3];
          v23 += 4;
          v43 = v42;
          v58.val[1] = 0uLL;
          v60.val[0] = v41;
          v56.val[1] = 0uLL;
          v44 = v36;
          vst2q_s8(v44, v56);
          v44 += 32;
          v60.val[1] = 0uLL;
          vst2q_s8(v44, v60);
          v45 = v36 + 64;
          vst2q_s8(v45, v58);
          v46 = v36 + 96;
          vst2q_s8(v46, *(int8x16x2_t *)(&v40 - 1));
          v36 += 128;
        }
        while (v36 != v39);
        v36 = v39;
      }
      while (v36 != v37)
      {
        v47 = v23->u8[0];
        v23 = (int8x16_t *)((char *)v23 + 1);
        *(_WORD *)v36 = v47;
        v36 += 2;
      }
    }
  }
  else
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v18, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (result)
    {
      v48 = result;
      v49 = (char *)*a2;
      v50 = a2[1];
      v51 = v50;
      v52 = *a3;
      v53 = *(int8x16_t **)a4;
      v54 = *(unsigned int *)(a4 + 8);
      if ((_DWORD)v50 == 1)
      {
        *result = *v49;
      }
      else if ((_DWORD)v50)
      {
        memcpy(result, v49, v50);
      }
      v48[v51] = v52;
      result = &v48[v51 + 1];
      if ((_DWORD)v54 == 1)
      {
        *result = v53->i8[0];
      }
      else if ((_DWORD)v54)
      {
        return (char *)memcpy(result, v53, v54);
      }
    }
  }
  return result;
}

uint64_t WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if (v4 >= a2)
  {
LABEL_2:
    *(_DWORD *)(v3 + 12) = v2;
    return 1;
  }
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  v8 = *(const void **)result;
  v9 = *(unsigned int *)(result + 12);
  if (v7 < 0x21)
  {
    v10 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 32;
    goto LABEL_12;
  }
  if (!(v7 >> 31))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)(2 * v7));
    *(_DWORD *)(v3 + 8) = v7;
    *(_QWORD *)v3 = v10;
LABEL_12:
    memcpy(v10, v8, 2 * v9);
    if ((const void *)(v3 + 16) != v8 && v8)
    {
      if (*(const void **)v3 == v8)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v8, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_2;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::UPluralRulesDeleter::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return uplrules_close();
  return result;
}

uint64_t JSC::IntlPluralRules::destroy(JSC::IntlPluralRules *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
    unumrf_close();
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
    unumf_close();
  result = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
    return uplrules_close();
  return result;
}

void JSC::IntlPluralRules::visitChildren(JSC::IntlPluralRules *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v3;
  _QWORD v4[2];
  uint64_t v5;
  char v6;

  v4[0] = a2;
  v4[1] = this;
  v6 = 0;
  v3 = *((_QWORD *)a2 + 11);
  v5 = v3;
  if (v3 && *(_BYTE *)(v3 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v4;
    JSC::JSObject::visitChildren(this, a2, a3);
    *(_QWORD *)(v4[0] + 88) = v5;
  }
}

unint64_t JSC::IntlPluralRules::create(JSC::IntlPluralRules *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t result;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = (_QWORD *)*((_QWORD *)this + 5074);
  if (!v10)
    v10 = (_QWORD *)JSC::GCClient::Heap::intlPluralRulesSpaceSlow((JSC::Heap **)this + 4694);
  result = v10[3];
  if (result < v10[4])
    goto LABEL_4;
  result = v10[5];
  if ((result & 1) == 0)
  {
    v13 = *(_QWORD *)(result + 8) ^ v10[6];
    v10[4] = result + HIDWORD(v13);
    v10[5] = result + (int)v13;
LABEL_4:
    v10[3] = result + 80;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v10, (uint64_t)this + 192, 80, 0, 0, v14, v15, v16);
LABEL_5:
  *(_DWORD *)result = 0;
  v12 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v12;
  *(_QWORD *)(result + 40) = 0;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 48) = xmmword_199124B40;
  *(_QWORD *)(result + 64) = 0x100000000;
  *(_DWORD *)(result + 72) = 1536;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::IntlPluralRules::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlPluralRules::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::IntlPluralRules::localeData(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void JSC::IntlPluralRules::initializePluralRules(uint64_t a1, uint64_t a2, unint64_t a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v9;
  unsigned int v10;
  unint64_t v11;
  JSC::VM *v14;
  WTF::AtomStringImpl *v15;
  JSC::Structure *v16;
  JSC::Symbol *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  unint64_t v25;
  JSC *v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::VM *v35;
  uint64_t *v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  const WTF::String *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int8x16_t v62;
  unint64_t v63;
  BOOL v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int *v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  JSC::Heap **v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  JSC::Exception *v111;
  WTF *v112;
  WTF::StringImpl *v113;
  std::once_flag::_State_type *v114;
  std::once_flag::_State_type *v115;
  unint64_t v116;
  JSC::JSObject *v117;
  int8x16_t v118;
  uint64_t v119;
  JSC::JSObject *v120;
  int8x16_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char v125;
  int8x16_t v126;
  unsigned int v127;
  _BOOL4 v129;
  unsigned __int8 *v131;
  int8x16_t v132;
  int v133;
  unsigned int v134;
  int8x16_t v135;
  uint64_t v136;
  const char *v137;
  char v138;
  unint64_t v139;
  JSC::Heap **v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  double v147;
  JSC::Exception *v148;
  WTF::StringImpl *v149;
  JSC::VM *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int8x16_t *v156;
  size_t v157;
  unint64_t v158;
  BOOL v159;
  const char *v160;
  unint64_t v161;
  unint64_t v162;
  __int8 v163;
  uint64_t v164;
  BOOL v165;
  int v166;
  uint64_t v167;
  int v168;
  WTF::StringImpl *v169;
  _DWORD *v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  unint64_t v173;
  WTF::StringImpl *v174;
  _DWORD *v175;
  void *v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  _QWORD *v180;
  unsigned int v181;
  void *v182;
  WTF::StringImpl *v183;
  _DWORD *v184;
  uint64_t v185;
  BOOL v186;
  int v187;
  uint64_t v188;
  unsigned int v189;
  unsigned int k;
  uint64_t v191;
  BOOL v192;
  int v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  BOOL v197;
  int v198;
  uint64_t v199;
  _WORD *v200;
  __int32 v201;
  unint64_t v202;
  unsigned int v203;
  uint64_t v204;
  BOOL v205;
  int v206;
  uint64_t v207;
  unint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _WORD *v216;
  unsigned int v217;
  unsigned int m;
  uint64_t v219;
  BOOL v220;
  int v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  BOOL v225;
  int v226;
  uint64_t v227;
  _WORD *v228;
  unsigned int v229;
  unsigned int i;
  uint64_t v231;
  BOOL v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  BOOL v236;
  int v237;
  uint64_t v238;
  unsigned int v239;
  unsigned int j;
  uint64_t v241;
  BOOL v242;
  int v243;
  uint64_t v244;
  unsigned __int8 v245;
  uint64_t v246;
  BOOL v247;
  int v248;
  uint64_t v249;
  unint64_t v250;
  WTF::StringImpl *v251;
  _DWORD *v252;
  _WORD *v253;
  WTF::StringImpl *v254;
  unint64_t v255;
  int v256;
  int8x16_t *v257;
  char v258;
  unint64_t v259;
  uint64_t *v260;
  uint64_t *v261;
  uint64_t *v262;
  __int16 v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  WTF::StringImpl *v272;
  WTF::StringImpl *v273;
  unint64_t v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  void *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int v298;
  uint64_t v299;
  BOOL v300;
  int v301;
  uint64_t v302;
  unsigned int v303;
  uint64_t v304;
  BOOL v305;
  int v306;
  uint64_t v307;
  unint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  WTF::AtomStringImpl *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  __int128 v324;
  char *v325;
  int8x16_t v326;
  int8x16_t v327;
  int8x16_t v328;
  char *v329;
  char *v330;
  char *v331;
  unint64_t v332;
  void *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  WTF::StringImpl *v340;
  unint64_t v341;
  void *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  uint64_t (*v367)(int8x16_t *);
  uint64_t *v368;
  uint64_t (*v369)(WTF::StringImpl **);
  WTF::StringImpl **v370;
  unsigned int v371;
  int v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  WTF::StringImpl *v377;
  WTF::StringImpl *v378;
  WTF::StringImpl *v379;
  _BYTE v380[96];
  WTF *v381;
  int v382;
  unsigned int v383;
  JSC::VM *v384;
  WTF *v385;
  WTF::StringImpl *v386;
  WTF::StringImpl *v387;
  uint64_t v388;
  WTF::StringImpl *v389;
  unsigned int v390;
  char v391;
  int8x16_t v392;
  uint64_t v393;
  const char *v394;
  uint64_t v395;
  char v396;
  const char *v397;
  uint64_t v398;
  char v399;
  const char *v400;
  uint64_t v401;
  unint64_t v402;
  const char *v403;
  uint64_t v404;
  char v405;
  const char *v406;
  uint64_t v407;
  char v408;
  const char *v409;
  uint64_t v410;
  char v411;
  const char *v412;
  uint64_t v413;
  char v414;
  const char *v415;
  uint64_t v416;
  char v417;
  int8x16_t v418;
  uint64_t v419;
  int8x16x2_t v420;
  int8x16x2_t v421;
  int8x16x2_t v422;

  v11 = (unint64_t)a4;
  v419 = *MEMORY[0x1E0C80C00];
  v384 = *(JSC::VM **)(a2 + 56);
  v14 = v384;
  JSC::canonicalizeLocaleList(a2, a3, a3, a4, a5, a6, a7, a8, &v381, a9);
  if (*((_DWORD *)v14 + 20))
  {
    v93 = *((_DWORD *)v14 + 20);
    if ((v93 & 0x27) != 0 && (v93 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v14 + 64), 7u, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
    if (*((_QWORD *)v14 + 2))
      goto LABEL_25;
  }
  v392.i64[0] = v11;
  if (v11 == 10)
    goto LABEL_8;
  v22 = *(_QWORD *)(a2 + 56);
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    v92 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v392, (JSC::JSGlobalObject *)a2, v16, (uint64_t)v17, v18, v19, v20, v21);
    goto LABEL_47;
  }
  if (*(unsigned __int8 *)(v11 + 5) <= 0x16u)
  {
    v92 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v11, (JSC::SymbolObject **)a2, (uint64_t)v16, v17, v18, v19, v20, v21);
LABEL_47:
    v11 = v92;
  }
  if (*(_DWORD *)(v22 + 80))
  {
    v23 = *(_DWORD *)(v22 + 80);
    if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v22 + 64), 7u, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
    if (*(_QWORD *)(v22 + 16))
LABEL_8:
      v11 = 0;
  }
  if (*((_DWORD *)v14 + 20))
  {
    v94 = *((_DWORD *)v14 + 20);
    if ((v94 & 0x27) != 0 && (v94 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v14 + 64), 7u, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
    if (*((_QWORD *)v14 + 2))
      goto LABEL_25;
  }
  v380[0] = 0;
  v380[8] = 0;
  v380[16] = 0;
  v380[24] = 0;
  v380[32] = 0;
  v380[40] = 0;
  v380[48] = 0;
  v380[56] = 0;
  v380[64] = 0;
  v380[72] = 0;
  v380[80] = 0;
  v380[88] = 0;
  v24 = (char *)v14 + 41952;
  v25 = *(_QWORD *)(*((_QWORD *)v14 + 5244) + 1792);
  v392.i64[0] = (uint64_t)"lookup";
  v392.i64[1] = 7;
  LOBYTE(v393) = 0;
  v394 = "best fit";
  v395 = 9;
  v396 = 1;
  v26 = (JSC *)JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)a2, (unsigned int *)v11, v25, (uint64_t)&v392, 2, (unint64_t)"localeMatcher must be either \"lookup\" or \"best fit\"", 52, 1);
  v34 = (uint64_t)v26;
  v35 = v384;
  if (*((_DWORD *)v384 + 20))
  {
    v95 = *((_DWORD *)v384 + 20);
    if ((v95 & 0x27) != 0 && (v95 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v384 + 64), 7u, v28, v29, v30, v31, v32, v33);
    if (*((_QWORD *)v35 + 2))
      goto LABEL_24;
  }
  v36 = JSC::intlAvailableLocales(v26);
  JSC::resolveLocale((JSC *)a2, (const WTF::StringImpl *)v36, (uint64_t)&v381, v34, (uint64_t)v380, 0, 0, (uint64_t)JSC::IntlPluralRules::localeData, (uint64_t)&v377);
  v45 = (WTF::StringImpl **)(a1 + 40);
  v46 = v377;
  if (v377)
    *(_DWORD *)v377 += 2;
  v47 = *v45;
  *v45 = v46;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v37, v38, v39, v40, v41, v42, v43);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
      v46 = *v45;
      if (!*v45)
        goto LABEL_17;
      goto LABEL_30;
    }
    *(_DWORD *)v47 -= 2;
  }
  if (!v46)
  {
LABEL_17:
    JSC::throwTypeError(a2, &v384, (uint64_t)"failed to initialize PluralRules due to invalid locale", 55);
    goto LABEL_18;
  }
LABEL_30:
  if (!*((_DWORD *)v46 + 1))
    goto LABEL_17;
  v48 = *(const WTF::String **)(*(_QWORD *)v24 + 2560);
  v392.i64[0] = (uint64_t)"cardinal";
  v392.i64[1] = 9;
  LOBYTE(v393) = 0;
  v394 = "ordinal";
  v395 = 8;
  v396 = 1;
  if (!v11)
  {
    v64 = 0;
    goto LABEL_87;
  }
  v60 = *(_QWORD *)(a2 + 56);
  v61 = JSC::JSObject::get((unsigned int *)v11, a2, (unint64_t)v48, v39, v40, v41, v42, v43);
  v63 = v61;
  v418.i64[0] = v61;
  if (*(_DWORD *)(v60 + 80))
  {
    v96 = *(_DWORD *)(v60 + 80);
    if ((v96 & 0x27) != 0 && (v96 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v60 + 64), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
    v64 = 0;
    if (*(_QWORD *)(v60 + 16) || v63 == 10)
      goto LABEL_86;
LABEL_60:
    if ((v63 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v63 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v418, (JSC::JSGlobalObject *)a2, v48, v39, v40, v41, v42, v43, (int **)&v389);
      goto LABEL_66;
    }
    v97 = *(int **)(v63 + 8);
    if ((v97 & 1) != 0)
    {
      v97 = *JSC::JSRopeString::resolveRope(v63, (JSC::JSGlobalObject *)a2, (uint64_t)v48, v39, v62, v40, v41, v42, v43);
      if (!v97)
        goto LABEL_65;
    }
    else if (!v97)
    {
LABEL_65:
      v389 = (WTF::StringImpl *)v97;
LABEL_66:
      if (!*(_DWORD *)(v60 + 80))
        goto LABEL_67;
      v366 = *(_DWORD *)(v60 + 80);
      if ((v366 & 0x27) != 0 && (v366 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v60 + 64), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
      if (!*(_QWORD *)(v60 + 16))
      {
LABEL_67:
        if (v392.i64[1])
          v98 = v392.i64[1] - 1;
        else
          v98 = 0;
        if (WTF::equalInternal<unsigned char>((uint64_t)v389, v392.u64[0], v98))
        {
          v99 = 0;
LABEL_75:
          v64 = *((_BYTE *)&v392 + 24 * v99 + 16) != 0;
          goto LABEL_83;
        }
        if (v395)
          v100 = v395 - 1;
        else
          v100 = 0;
        if (WTF::equalInternal<unsigned char>((uint64_t)v389, (unint64_t)v394, v100))
        {
          v99 = 1;
          goto LABEL_75;
        }
        v101 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v101 = 0x2400000002;
        *(_QWORD *)(v101 + 8) = "type must be \"cardinal\" or \"ordinal\"";
        *(_DWORD *)(v101 + 16) = 4;
        v385 = (WTF *)v101;
        v102 = *(_QWORD *)(a2 + 128);
        v103 = *(JSC::Heap ***)(a2 + 56);
        if ((v102 & 1) != 0)
        {
          v369 = *(uint64_t (**)(WTF::StringImpl **))(v102 & 0xFFFFFFFFFFFFFFFCLL);
          if ((a2 & 8) != 0)
            v370 = (WTF::StringImpl **)(a2 - 16);
          else
            v370 = (WTF::StringImpl **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
          v386 = *v370;
          v387 = (WTF::StringImpl *)a2;
          v388 = a2 + 128;
          v102 = v369(&v386);
        }
        v104 = JSC::ErrorInstance::create(v103, v102, &v385, 0, 0, 0, 2, 1);
        v111 = (JSC::Exception *)v104;
        if ((v104 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v104 & 0xFFFFFFFE) + 0x4C)))
        {
          v111 = (JSC::Exception *)JSC::Exception::create(v60, (JSC::VM *)v104, 0, v105, v106, v107, v108, v109);
        }
        JSC::VM::throwException((JSC::VM *)v60, (JSC::JSGlobalObject *)a2, v111, v110, v105, v106, v107, v108, v109);
        v112 = v385;
        v385 = 0;
        if (v112)
        {
          if (*(_DWORD *)v112 == 2)
          {
            WTF::StringImpl::~StringImpl(v112, v37, (uint64_t)v48, v39, v40, v41, v42, v43);
            WTF::fastFree(v332, v333, v334, v335, v336, v337, v338, v339);
          }
          else
          {
            *(_DWORD *)v112 -= 2;
          }
        }
      }
      v64 = 0;
LABEL_83:
      v113 = v389;
      v389 = 0;
      if (v113)
      {
        if (*(_DWORD *)v113 == 2)
        {
          WTF::StringImpl::~StringImpl(v113, v37, (uint64_t)v48, v39, v40, v41, v42, v43);
          WTF::fastFree(v208, v209, v210, v211, v212, v213, v214, v215);
        }
        else
        {
          *(_DWORD *)v113 -= 2;
        }
      }
      goto LABEL_86;
    }
    *v97 += 2;
    goto LABEL_65;
  }
  if (v61 != 10)
    goto LABEL_60;
  v64 = 0;
LABEL_86:
  v35 = v384;
LABEL_87:
  *(_BYTE *)(a1 + 75) = v64;
  if (*((_DWORD *)v35 + 20))
  {
    v349 = *((_DWORD *)v35 + 20);
    if ((v349 & 0x27) != 0 && (v349 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v35 + 64), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
    if (*((_QWORD *)v35 + 2))
      goto LABEL_18;
  }
  v114 = *(std::once_flag::_State_type **)(a2 + 56);
  v386 = (WTF::StringImpl *)v114;
  v115 = v114 + 5244;
  if (v11)
  {
    v116 = *(_QWORD *)(*v115 + 1888);
    v117 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v11, a2, v116, v39, v40, v41, v42, v43);
    if (!*((_DWORD *)v114 + 20))
      goto LABEL_90;
    v356 = *((_DWORD *)v114 + 20);
    if ((v356 & 0x27) != 0 && (v356 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v114 + 8), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
    if (v114[2])
      LODWORD(v116) = 0;
    else
LABEL_90:
      LODWORD(v116) = JSC::intlDefaultNumberOption((JSC::JSGlobalObject *)a2, v117, v116, 1, 21, 1uLL, v42, v43, v118);
  }
  else
  {
    LODWORD(v116) = 1;
  }
  if (*((_DWORD *)v114 + 20))
  {
    v350 = *((_DWORD *)v114 + 20);
    if ((v350 & 0x27) != 0 && (v350 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v114 + 8), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
    if (v114[2])
      goto LABEL_170;
  }
  if (v11)
  {
    v375 = JSC::JSObject::get((unsigned int *)v11, a2, *(_QWORD *)(*v115 + 1880), v39, v40, v41, v42, v43);
    if (*((_DWORD *)v114 + 20))
    {
      v357 = *((_DWORD *)v114 + 20);
      if ((v357 & 0x27) != 0 && (v357 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v114 + 8), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
      if (v114[2])
        goto LABEL_170;
    }
    v374 = JSC::JSObject::get((unsigned int *)v11, a2, *(_QWORD *)(*v115 + 1808), v39, v40, v41, v42, v43);
    if (*((_DWORD *)v114 + 20))
    {
      v358 = *((_DWORD *)v114 + 20);
      if ((v358 & 0x27) != 0 && (v358 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v114 + 8), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
      if (v114[2])
        goto LABEL_170;
    }
    v373 = JSC::JSObject::get((unsigned int *)v11, a2, *(_QWORD *)(*v115 + 1896), v39, v40, v41, v42, v43);
    if (*((_DWORD *)v114 + 20))
    {
      v359 = *((_DWORD *)v114 + 20);
      if ((v359 & 0x27) != 0 && (v359 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v114 + 8), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
      if (v114[2])
        goto LABEL_170;
    }
    v376 = JSC::JSObject::get((unsigned int *)v11, a2, *(_QWORD *)(*v115 + 1816), v39, v40, v41, v42, v43);
    if (*((_DWORD *)v114 + 20))
    {
      v360 = *((_DWORD *)v114 + 20);
      if ((v360 & 0x27) != 0 && (v360 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v114 + 8), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
      if (v114[2])
        goto LABEL_170;
    }
    *(_DWORD *)(a1 + 48) = v116;
    v116 = *(_QWORD *)(*v115 + 2216);
    v119 = *(_QWORD *)(a2 + 56);
    v120 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v11, a2, v116, v39, v40, v41, v42, v43);
    if (!*(_DWORD *)(v119 + 80))
      goto LABEL_99;
    v361 = *(_DWORD *)(v119 + 80);
    if ((v361 & 0x27) != 0 && (v361 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v119 + 64), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
    if (*(_QWORD *)(v119 + 16))
      v9 = 0;
    else
LABEL_99:
      v9 = JSC::intlDefaultNumberOption((JSC::JSGlobalObject *)a2, v120, v116, 1, 5000, 1uLL, v42, v43, v121);
  }
  else
  {
    v9 = 1;
    *(_DWORD *)(a1 + 48) = v116;
    v375 = 10;
    v374 = 10;
    v373 = 10;
    v376 = 10;
  }
  if (*((_DWORD *)v114 + 20))
  {
    v352 = *((_DWORD *)v114 + 20);
    if ((v352 & 0x27) != 0 && (v352 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v114 + 8), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
    if (v114[2])
      goto LABEL_170;
  }
  if (v9 <= 99)
  {
    if (v9 > 0x32 || ((1 << v9) & 0x4000002100426) == 0)
      goto LABEL_160;
  }
  else if (v9 > 999)
  {
    if (v9 > 2499)
    {
      if (v9 != 2500 && v9 != 5000)
        goto LABEL_160;
    }
    else if (v9 != 1000 && v9 != 2000)
    {
      goto LABEL_160;
    }
  }
  else if (v9 > 249)
  {
    if (v9 != 250 && v9 != 500)
      goto LABEL_160;
  }
  else if (v9 != 100 && v9 != 200)
  {
LABEL_160:
    v136 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v136 = 0x6400000002;
    v137 = "roundingIncrement must be one of 1, 2, 5, 10, 20, 25, 50, 100, 200, 250, 500, 1000, 2000, 2500, 5000";
    goto LABEL_164;
  }
  v122 = *(_QWORD *)(*v115 + 2224);
  v392.i64[0] = (uint64_t)"ceil";
  v392.i64[1] = 5;
  LOBYTE(v393) = 0;
  v394 = "floor";
  v395 = 6;
  LODWORD(v116) = 1;
  v396 = 1;
  v397 = "expand";
  v398 = 7;
  v10 = 2;
  v399 = 2;
  v400 = "trunc";
  v401 = 6;
  LOBYTE(v402) = 3;
  v403 = "halfCeil";
  v404 = 9;
  v405 = 4;
  v406 = "halfFloor";
  v407 = 10;
  v408 = 5;
  v409 = "halfExpand";
  v410 = 11;
  v411 = 6;
  v412 = "halfTrunc";
  v413 = 10;
  v414 = 7;
  v415 = "halfEven";
  v416 = 9;
  v417 = 8;
  v372 = JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)a2, (unsigned int *)v11, v122, (uint64_t)&v392, 9, (unint64_t)"roundingMode must be either \"ceil\", \"floor\", \"expand\", \"trunc\", \"halfCeil\", \"halfFloor\", \"halfExpand\", \"halfTrunc\", or \"halfEven\"", 130, 6);
  if (!*((_DWORD *)v114 + 20))
    goto LABEL_632;
  v353 = *((_DWORD *)v114 + 20);
  if ((v353 & 0x27) != 0 && (v353 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v114 + 8), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
  if (!v114[2])
  {
LABEL_632:
    v123 = *(_QWORD *)(*v115 + 2232);
    v392.i64[0] = (uint64_t)"auto";
    v392.i64[1] = 5;
    LOBYTE(v393) = 0;
    v394 = "morePrecision";
    v395 = 14;
    v396 = 1;
    v397 = "lessPrecision";
    v398 = 14;
    v399 = 2;
    LODWORD(v116) = JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)a2, (unsigned int *)v11, v123, (uint64_t)&v392, 3, (unint64_t)"roundingPriority must be either \"auto\", \"morePrecision\", or \"lessPrecision\"", 76, 0);
    if (!*((_DWORD *)v114 + 20))
      goto LABEL_633;
    v354 = *((_DWORD *)v114 + 20);
    if ((v354 & 0x27) != 0 && (v354 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v114 + 8), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
    if (!v114[2])
    {
LABEL_633:
      v124 = *(_QWORD *)(*v115 + 2536);
      v392.i64[0] = (uint64_t)"auto";
      v392.i64[1] = 5;
      LOBYTE(v393) = 0;
      v394 = "stripIfInteger";
      v395 = 15;
      v396 = 1;
      v125 = JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)a2, (unsigned int *)v11, v124, (uint64_t)&v392, 2, (unint64_t)"trailingZeroDisplay must be either \"auto\" or \"stripIfInteger\"", 62, 0);
      if (!*((_DWORD *)v114 + 20))
        goto LABEL_113;
      v355 = *((_DWORD *)v114 + 20);
      if ((v355 & 0x27) != 0 && (v355 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v114 + 8), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
      if (!v114[2])
      {
LABEL_113:
        if (v9 == 1)
          v127 = 3;
        else
          v127 = 0;
        *(_DWORD *)(a1 + 68) = v9;
        *(_BYTE *)(a1 + 73) = v372;
        *(_BYTE *)(a1 + 72) = v125;
        v37 = (WTF::AtomStringImpl *)v373;
        v129 = v373 != 10 || v376 != 10;
        v10 = v375 != 10 || v374 != 10;
        v372 = v129;
        if ((_DWORD)v116)
        {
          if (!v129)
          {
            v126.i64[0] = 0x1500000001;
            *(_QWORD *)(a1 + 60) = 0x1500000001;
            goto LABEL_135;
          }
        }
        else if (!v129)
        {
          goto LABEL_135;
        }
        v371 = v127;
        v131 = (unsigned __int8 *)JSC::intlDefaultNumberOption((JSC::JSGlobalObject *)a2, (JSC::JSObject *)v373, *(_QWORD *)(*v115 + 1896), 1, 21, 1uLL, v42, v43, v126);
        if (*((_DWORD *)v114 + 20))
          goto LABEL_539;
        goto LABEL_133;
      }
    }
  }
  while (1)
  {
LABEL_170:
    v150 = v384;
    if (*((_DWORD *)v384 + 20))
    {
      v351 = *((_DWORD *)v384 + 20);
      if ((v351 & 0x27) != 0 && (v351 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v384 + 64), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
      if (*((_QWORD *)v150 + 2))
        goto LABEL_18;
    }
    WTF::String::utf8((uint64_t *)v45, 0, v39, v40, v41, v42, v43, &v385, *(float *)&v44);
    v386 = 0;
    v387 = 0;
    LODWORD(v388) = 0;
    BYTE4(v388) = 1;
    v114 = &WTF::ICU::version(void)::onceKey;
    v131 = WTF::AtomStringTableLocker::s_stringTableLock;
    v156 = (int8x16_t *)" rounding-mode-ceiling";
    v157 = 22;
    switch(*(_BYTE *)(a1 + 73))
    {
      case 0:
        goto LABEL_194;
      case 1:
        v156 = (int8x16_t *)" rounding-mode-floor";
        v157 = 20;
        goto LABEL_194;
      case 2:
        v156 = (int8x16_t *)" rounding-mode-up";
        v157 = 17;
        goto LABEL_194;
      case 3:
        v156 = (int8x16_t *)" rounding-mode-down";
        v157 = 19;
        goto LABEL_194;
      case 4:
        v158 = atomic_load(&WTF::ICU::version(void)::onceKey);
        if (v158 != -1)
        {
          v392.i64[0] = (uint64_t)&v389;
          v418.i64[0] = (uint64_t)&v392;
          std::__call_once(&WTF::ICU::version(void)::onceKey, &v418, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ICU::version(void)::$_0 &&>>);
        }
        v159 = WTF::ICU::version(void)::versions > 0x44u;
        if (WTF::ICU::version(void)::versions <= 0x44u)
          v157 = 22;
        else
          v157 = 27;
        v160 = " rounding-mode-half-ceiling";
        goto LABEL_188;
      case 5:
        v161 = atomic_load(&WTF::ICU::version(void)::onceKey);
        if (v161 != -1)
        {
          v392.i64[0] = (uint64_t)&v389;
          v418.i64[0] = (uint64_t)&v392;
          std::__call_once(&WTF::ICU::version(void)::onceKey, &v418, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ICU::version(void)::$_0 &&>>);
        }
        v159 = WTF::ICU::version(void)::versions > 0x44u;
        if (WTF::ICU::version(void)::versions <= 0x44u)
          v157 = 22;
        else
          v157 = 25;
        v160 = " rounding-mode-half-floor";
LABEL_188:
        if (v159)
          v156 = (int8x16_t *)v160;
        else
          v156 = (int8x16_t *)" rounding-mode-half-up";
        goto LABEL_194;
      case 6:
        v156 = (int8x16_t *)" rounding-mode-half-up";
        v157 = 22;
        goto LABEL_194;
      case 7:
        v156 = (int8x16_t *)" rounding-mode-half-down";
        goto LABEL_193;
      case 8:
        v156 = (int8x16_t *)" rounding-mode-half-even";
LABEL_193:
        v157 = 24;
LABEL_194:
        WTF::StringBuilder::append((uint64_t)&v386, v156, v157, v151, v152, v153, v154, v155);
        break;
      default:
        break;
    }
    v162 = atomic_load(&WTF::ICU::version(void)::onceKey);
    if (v162 != -1)
    {
      v392.i64[0] = (uint64_t)&v389;
      v418.i64[0] = (uint64_t)&v392;
      std::__call_once(&WTF::ICU::version(void)::onceKey, &v418, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ICU::version(void)::$_0 &&>>);
    }
    if (WTF::ICU::version(void)::versions > 0x42u)
      v163 = 42;
    else
      v163 = 43;
    v392.i64[0] = (uint64_t)" integer-width/";
    v392.i32[2] = 15;
    v418.i8[0] = v163;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>((uint64_t)&v386, (uint64_t)&v392, v418.i8, v151, v152, v153, v154, v155);
    if (*(_DWORD *)(a1 + 48))
    {
      LODWORD(v45) = 0;
      LODWORD(v116) = 48;
      do
      {
        v392.i8[0] = 48;
        if (v387
          && ((v164 = v388, v388 < *((_DWORD *)v387 + 1))
            ? (v165 = v386 == 0)
            : (v165 = 0),
              v165))
        {
          v166 = *((_DWORD *)v387 + 4);
          v167 = *((_QWORD *)v387 + 1);
          LODWORD(v388) = v388 + 1;
          if ((v166 & 4) != 0)
            *(_BYTE *)(v167 + v164) = 48;
          else
            *(_WORD *)(v167 + 2 * v164) = 48;
        }
        else
        {
          WTF::StringBuilder::append((uint64_t)&v386, &v392, 1uLL, v39, v40, v41, v42, v43);
        }
        v45 = (WTF::StringImpl **)((_DWORD)v45 + 1);
      }
      while (v45 < *(_DWORD *)(a1 + 48));
    }
    if (*(_DWORD *)(a1 + 68) == 1)
    {
      v168 = *(unsigned __int8 *)(a1 + 74);
      if ((v168 - 2) < 2)
      {
        v173 = atomic_load(&WTF::ICU::version(void)::onceKey);
        if (v173 != -1)
        {
          v392.i64[0] = (uint64_t)&v389;
          v418.i64[0] = (uint64_t)&v392;
          std::__call_once(&WTF::ICU::version(void)::onceKey, &v418, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ICU::version(void)::$_0 &&>>);
        }
        if (WTF::ICU::version(void)::versions >= 0x45u)
        {
          if ((v388 & 0x80000000) == 0)
          {
            v174 = v387;
            if ((v387 || (v174 = v386) != 0) && (*((_BYTE *)v174 + 16) & 4) == 0)
            {
              v175 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v386, (WTF::AtomStringImpl *)(v388 + 2), (uint64_t)v48, v39, v40, v41, v42, v43);
              if (v175)
                *v175 = 3014688;
            }
            else
            {
              v228 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v386, (WTF::AtomStringImpl *)(v388 + 2), (uint64_t)v48, v39, v40, v41, v42, v43);
              if (v228)
                *v228 = 11808;
            }
          }
          v229 = *(_DWORD *)(a1 + 52);
          if (v229)
          {
            for (i = 0; i < v229; ++i)
            {
              v392.i8[0] = 48;
              if (v387
                && ((v231 = v388, v388 < *((_DWORD *)v387 + 1))
                  ? (v232 = v386 == 0)
                  : (v232 = 0),
                    v232))
              {
                v233 = *((_DWORD *)v387 + 4);
                v234 = *((_QWORD *)v387 + 1);
                LODWORD(v388) = v388 + 1;
                if ((v233 & 4) != 0)
                  *(_BYTE *)(v234 + v231) = 48;
                else
                  *(_WORD *)(v234 + 2 * v231) = 48;
              }
              else
              {
                WTF::StringBuilder::append((uint64_t)&v386, &v392, 1uLL, v39, v40, v41, v42, v43);
              }
              v229 = *(_DWORD *)(a1 + 52);
            }
          }
          if (*(_DWORD *)(a1 + 56) != v229)
          {
            v298 = 0;
            do
            {
              v392.i8[0] = 35;
              if (v387
                && ((v299 = v388, v388 < *((_DWORD *)v387 + 1))
                  ? (v300 = v386 == 0)
                  : (v300 = 0),
                    v300))
              {
                v301 = *((_DWORD *)v387 + 4);
                v302 = *((_QWORD *)v387 + 1);
                LODWORD(v388) = v388 + 1;
                if ((v301 & 4) != 0)
                  *(_BYTE *)(v302 + v299) = 35;
                else
                  *(_WORD *)(v302 + 2 * v299) = 35;
              }
              else
              {
                WTF::StringBuilder::append((uint64_t)&v386, &v392, 1uLL, v39, v40, v41, v42, v43);
              }
              ++v298;
            }
            while (v298 < *(_DWORD *)(a1 + 56) - *(_DWORD *)(a1 + 52));
          }
          v392.i8[0] = 47;
          if (v387
            && ((v235 = v388, v388 < *((_DWORD *)v387 + 1))
              ? (v236 = v386 == 0)
              : (v236 = 0),
                v236))
          {
            v237 = *((_DWORD *)v387 + 4);
            v238 = *((_QWORD *)v387 + 1);
            LODWORD(v388) = v388 + 1;
            if ((v237 & 4) != 0)
              *(_BYTE *)(v238 + v235) = 47;
            else
              *(_WORD *)(v238 + 2 * v235) = 47;
          }
          else
          {
            WTF::StringBuilder::append((uint64_t)&v386, &v392, 1uLL, v39, v40, v41, v42, v43);
          }
          v239 = *(_DWORD *)(a1 + 60);
          if (v239)
          {
            for (j = 0; j < v239; ++j)
            {
              v392.i8[0] = 64;
              if (v387
                && ((v241 = v388, v388 < *((_DWORD *)v387 + 1))
                  ? (v242 = v386 == 0)
                  : (v242 = 0),
                    v242))
              {
                v243 = *((_DWORD *)v387 + 4);
                v244 = *((_QWORD *)v387 + 1);
                LODWORD(v388) = v388 + 1;
                if ((v243 & 4) != 0)
                  *(_BYTE *)(v244 + v241) = 64;
                else
                  *(_WORD *)(v244 + 2 * v241) = 64;
              }
              else
              {
                WTF::StringBuilder::append((uint64_t)&v386, &v392, 1uLL, v39, v40, v41, v42, v43);
              }
              v239 = *(_DWORD *)(a1 + 60);
            }
          }
          if (*(_DWORD *)(a1 + 64) != v239)
          {
            v303 = 0;
            do
            {
              v392.i8[0] = 35;
              if (v387
                && ((v304 = v388, v388 < *((_DWORD *)v387 + 1))
                  ? (v305 = v386 == 0)
                  : (v305 = 0),
                    v305))
              {
                v306 = *((_DWORD *)v387 + 4);
                v307 = *((_QWORD *)v387 + 1);
                LODWORD(v388) = v388 + 1;
                if ((v306 & 4) != 0)
                  *(_BYTE *)(v307 + v304) = 35;
                else
                  *(_WORD *)(v307 + 2 * v304) = 35;
              }
              else
              {
                WTF::StringBuilder::append((uint64_t)&v386, &v392, 1uLL, v39, v40, v41, v42, v43);
              }
              ++v303;
            }
            while (v303 < *(_DWORD *)(a1 + 64) - *(_DWORD *)(a1 + 60));
          }
          if (*(_BYTE *)(a1 + 74) == 2)
            v245 = 114;
          else
            v245 = 115;
          v392.i8[0] = v245;
          if (v387
            && ((v246 = v388, v388 < *((_DWORD *)v387 + 1))
              ? (v247 = v386 == 0)
              : (v247 = 0),
                v247))
          {
            v248 = *((_DWORD *)v387 + 4);
            v249 = *((_QWORD *)v387 + 1);
            LODWORD(v388) = v388 + 1;
            if ((v248 & 4) != 0)
              *(_BYTE *)(v249 + v246) = v245;
            else
              *(_WORD *)(v249 + 2 * v246) = v245;
          }
          else
          {
            WTF::StringBuilder::append((uint64_t)&v386, &v392, 1uLL, v39, v40, v41, v42, v43);
          }
        }
      }
      else if (v168 == 1)
      {
        v392.i8[0] = 32;
        if (v387
          && ((v185 = v388, v388 < *((_DWORD *)v387 + 1))
            ? (v186 = v386 == 0)
            : (v186 = 0),
              v186))
        {
          v187 = *((_DWORD *)v387 + 4);
          v188 = *((_QWORD *)v387 + 1);
          LODWORD(v388) = v388 + 1;
          if ((v187 & 4) != 0)
            *(_BYTE *)(v188 + v185) = 32;
          else
            *(_WORD *)(v188 + 2 * v185) = 32;
        }
        else
        {
          WTF::StringBuilder::append((uint64_t)&v386, &v392, 1uLL, v39, v40, v41, v42, v43);
        }
        v189 = *(_DWORD *)(a1 + 60);
        if (v189)
        {
          for (k = 0; k < v189; ++k)
          {
            v392.i8[0] = 64;
            if (v387
              && ((v191 = v388, v388 < *((_DWORD *)v387 + 1))
                ? (v192 = v386 == 0)
                : (v192 = 0),
                  v192))
            {
              v193 = *((_DWORD *)v387 + 4);
              v194 = *((_QWORD *)v387 + 1);
              LODWORD(v388) = v388 + 1;
              if ((v193 & 4) != 0)
                *(_BYTE *)(v194 + v191) = 64;
              else
                *(_WORD *)(v194 + 2 * v191) = 64;
            }
            else
            {
              WTF::StringBuilder::append((uint64_t)&v386, &v392, 1uLL, v39, v40, v41, v42, v43);
            }
            v189 = *(_DWORD *)(a1 + 60);
          }
        }
        if (*(_DWORD *)(a1 + 64) != v189)
        {
          v195 = 0;
          do
          {
            v392.i8[0] = 35;
            if (v387
              && ((v196 = v388, v388 < *((_DWORD *)v387 + 1))
                ? (v197 = v386 == 0)
                : (v197 = 0),
                  v197))
            {
              v198 = *((_DWORD *)v387 + 4);
              v199 = *((_QWORD *)v387 + 1);
              LODWORD(v388) = v388 + 1;
              if ((v198 & 4) != 0)
                *(_BYTE *)(v199 + v196) = 35;
              else
                *(_WORD *)(v199 + 2 * v196) = 35;
            }
            else
            {
              WTF::StringBuilder::append((uint64_t)&v386, &v392, 1uLL, v39, v40, v41, v42, v43);
            }
            ++v195;
          }
          while (v195 < *(_DWORD *)(a1 + 64) - *(_DWORD *)(a1 + 60));
        }
      }
      else if (!*(_BYTE *)(a1 + 74))
      {
        if ((v388 & 0x80000000) == 0)
        {
          v169 = v387;
          if ((v387 || (v169 = v386) != 0) && (*((_BYTE *)v169 + 16) & 4) == 0)
          {
            v170 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v386, (WTF::AtomStringImpl *)(v388 + 2), (uint64_t)v48, v39, v40, v41, v42, v43);
            if (v170)
              *v170 = 3014688;
          }
          else
          {
            v216 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v386, (WTF::AtomStringImpl *)(v388 + 2), (uint64_t)v48, v39, v40, v41, v42, v43);
            if (v216)
              *v216 = 11808;
          }
        }
        v217 = *(_DWORD *)(a1 + 52);
        if (v217)
        {
          for (m = 0; m < v217; ++m)
          {
            v392.i8[0] = 48;
            if (v387
              && ((v219 = v388, v388 < *((_DWORD *)v387 + 1))
                ? (v220 = v386 == 0)
                : (v220 = 0),
                  v220))
            {
              v221 = *((_DWORD *)v387 + 4);
              v222 = *((_QWORD *)v387 + 1);
              LODWORD(v388) = v388 + 1;
              if ((v221 & 4) != 0)
                *(_BYTE *)(v222 + v219) = 48;
              else
                *(_WORD *)(v222 + 2 * v219) = 48;
            }
            else
            {
              WTF::StringBuilder::append((uint64_t)&v386, &v392, 1uLL, v39, v40, v41, v42, v43);
            }
            v217 = *(_DWORD *)(a1 + 52);
          }
        }
        if (*(_DWORD *)(a1 + 56) != v217)
        {
          v223 = 0;
          do
          {
            v392.i8[0] = 35;
            if (v387
              && ((v224 = v388, v388 < *((_DWORD *)v387 + 1))
                ? (v225 = v386 == 0)
                : (v225 = 0),
                  v225))
            {
              v226 = *((_DWORD *)v387 + 4);
              v227 = *((_QWORD *)v387 + 1);
              LODWORD(v388) = v388 + 1;
              if ((v226 & 4) != 0)
                *(_BYTE *)(v227 + v224) = 35;
              else
                *(_WORD *)(v227 + 2 * v224) = 35;
            }
            else
            {
              WTF::StringBuilder::append((uint64_t)&v386, &v392, 1uLL, v39, v40, v41, v42, v43);
            }
            ++v223;
          }
          while (v223 < *(_DWORD *)(a1 + 56) - *(_DWORD *)(a1 + 52));
        }
      }
      goto LABEL_402;
    }
    if ((v388 & 0x80000000) == 0)
    {
      v171 = v387;
      if ((v387 || (v171 = v386) != 0) && (*((_BYTE *)v171 + 16) & 4) == 0)
      {
        v172 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v386, (WTF::AtomStringImpl *)(v388 + 21), (uint64_t)v48, v39, v40, v41, v42, v43);
        if (v172)
        {
          v132.i64[1] = 0x69007300690063;
          v44 = 7209071;
          *(_OWORD *)v172 = xmmword_199124D50;
          *(_OWORD *)(v172 + 16) = xmmword_199124D60;
          v132.i64[0] = 0x74006E0065006DLL;
          *(_QWORD *)(v172 + 32) = 0x74006E0065006DLL;
          *(_WORD *)(v172 + 40) = 47;
        }
      }
      else
      {
        v176 = (void *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v386, (WTF::AtomStringImpl *)(v388 + 21), (uint64_t)v48, v39, v40, v41, v42, v43);
        if (v176)
        {
          v132 = *(int8x16_t *)" precision-increment/";
          qmemcpy(v176, " precision-increment/", 21);
        }
      }
    }
    v177 = 0;
    v178 = *(_DWORD *)(a1 + 68);
    do
    {
      v418.i8[v177-- + 12] = (v178 % 0xA) | 0x30;
      v159 = v178 > 9;
      v178 /= 0xAu;
    }
    while (v159);
    if (v177 + 14 < 15)
      break;
    __break(1u);
LABEL_539:
    v362 = *((_DWORD *)v114 + 20);
    if ((v362 & 0x27) != 0 && (v362 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v114 + 8), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
    if (!v114[2])
    {
LABEL_133:
      v133 = JSC::intlDefaultNumberOption((JSC::JSGlobalObject *)a2, (JSC::JSObject *)v376, *(_QWORD *)(*v115 + 1816), (uint64_t)v131, 21, 0x15uLL, v42, v43, v132);
      if (!*((_DWORD *)v114 + 20))
        goto LABEL_134;
      v363 = *((_DWORD *)v114 + 20);
      if ((v363 & 0x27) != 0 && (v363 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v114 + 8), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
      if (!v114[2])
      {
LABEL_134:
        *(_DWORD *)(a1 + 60) = (_DWORD)v131;
        *(_DWORD *)(a1 + 64) = v133;
        v127 = v371;
        if (!(_DWORD)v116)
          goto LABEL_152;
LABEL_135:
        if (!v10)
        {
LABEL_142:
          v134 = 0;
          goto LABEL_143;
        }
        v10 = v127;
        v134 = JSC::intlDefaultNumberOption((JSC::JSGlobalObject *)a2, (JSC::JSObject *)v375, *(_QWORD *)(*v115 + 1880), 0, 100, 0xFFFFFFFFuLL, v42, v43, v126);
        if (!*((_DWORD *)v114 + 20))
          goto LABEL_634;
        v364 = *((_DWORD *)v114 + 20);
        if ((v364 & 0x27) != 0 && (v364 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v114 + 8), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
        if (!v114[2])
        {
LABEL_634:
          v127 = JSC::intlDefaultNumberOption((JSC::JSGlobalObject *)a2, (JSC::JSObject *)v374, *(_QWORD *)(*v115 + 1808), 0, 100, 0xFFFFFFFFuLL, v42, v43, v135);
          if (!*((_DWORD *)v114 + 20))
            goto LABEL_138;
          v365 = *((_DWORD *)v114 + 20);
          if ((v365 & 0x27) != 0 && (v365 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v114 + 8), 7u, (uint64_t)v48, v39, v40, v41, v42, v43);
          if (!v114[2])
          {
LABEL_138:
            if (v134 == -1)
              goto LABEL_142;
            if (v127 == -1)
            {
              if (v10 <= v134)
                v127 = v134;
              else
                v127 = v10;
            }
            else if (v134 > v127)
            {
              v136 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v136 = 0x4300000002;
              v137 = "Computed minimumFractionDigits is larger than maximumFractionDigits";
LABEL_164:
              *(_QWORD *)(v136 + 8) = v137;
              *(_DWORD *)(v136 + 16) = 4;
              v418.i64[0] = v136;
              v139 = *(_QWORD *)(a2 + 128);
              v140 = *(JSC::Heap ***)(a2 + 56);
              if ((v139 & 1) != 0)
              {
                v367 = *(uint64_t (**)(int8x16_t *))(v139 & 0xFFFFFFFFFFFFFFFCLL);
                if ((a2 & 8) != 0)
                  v368 = (uint64_t *)(a2 - 16);
                else
                  v368 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
                v392.i64[0] = *v368;
                v392.i64[1] = a2;
                v393 = a2 + 128;
                v139 = v367(&v392);
              }
              v141 = JSC::ErrorInstance::create(v140, v139, (WTF::StringImpl **)&v418, 0, 0, 0, 2, 1);
              v148 = (JSC::Exception *)v141;
              if ((v141 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v141 & 0xFFFFFFFE) + 0x4C)))
              {
                v148 = (JSC::Exception *)JSC::Exception::create((uint64_t)v114, (JSC::VM *)v141, 0, v142, v143, v144, v145, v146);
              }
              JSC::VM::throwException((JSC::VM *)v114, (JSC::JSGlobalObject *)a2, v148, v147, v142, v143, v144, v145, v146);
              v149 = (WTF::StringImpl *)v418.i64[0];
              v418.i64[0] = 0;
              if (v149)
              {
                if (*(_DWORD *)v149 == 2)
                {
                  WTF::StringImpl::~StringImpl(v149, v37, (uint64_t)v48, v39, v40, v41, v42, v43);
                  WTF::fastFree(v308, v309, v310, v311, v312, v313, v314, v315);
                }
                else
                {
                  *(_DWORD *)v149 -= 2;
                }
              }
              continue;
            }
LABEL_143:
            *(_DWORD *)(a1 + 52) = v134;
            *(_DWORD *)(a1 + 56) = v127;
            if ((_DWORD)v116 == 1)
            {
              v138 = 2;
              goto LABEL_153;
            }
            if ((_DWORD)v116 == 2)
            {
              v138 = 3;
LABEL_153:
              *(_BYTE *)(a1 + 74) = v138;
              if (v9 != 1)
                JSC::throwTypeError(a2, &v386, (uint64_t)"rounding type is not fraction-digits while roundingIncrement is specified", 74);
            }
            else
            {
              if (v372)
              {
LABEL_152:
                v138 = 1;
                goto LABEL_153;
              }
              *(_BYTE *)(a1 + 74) = 0;
              if (v9 != 1 && v127 != v134)
              {
                v136 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_QWORD *)v136 = 0x6200000002;
                v137 = "maximumFractionDigits and minimumFractionDigits are different while roundingIncrement is specified";
                goto LABEL_164;
              }
            }
          }
        }
      }
    }
  }
  v392.i64[0] = (uint64_t)&v393;
  v179 = -v177;
  v392.i32[2] = 10;
  v392.i32[3] = -(int)v177;
  if ((unint64_t)-v177 < 0xB)
  {
    v180 = &v393;
    if (v177)
      goto LABEL_248;
  }
  else
  {
    if ((unint64_t)-v177 >> 32)
    {
      __break(0xC471u);
      JUMPOUT(0x197E3360CLL);
    }
    v180 = (_QWORD *)WTF::fastMalloc((WTF *)-v177);
    v392.i32[2] = -(int)v177;
    v392.i64[0] = (uint64_t)v180;
LABEL_248:
    memcpy(v180, (char *)&v418.u64[1] + v177 + 5, -v177);
    LODWORD(v179) = v392.i32[3];
  }
  v181 = *(_DWORD *)(a1 + 56);
  if (v179 <= v181)
  {
    if ((v388 & 0x80000000) == 0)
    {
      v183 = v387;
      if ((v387 || (v183 = v386) != 0) && (*((_BYTE *)v183 + 16) & 4) == 0)
      {
        v184 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v386, (WTF::AtomStringImpl *)(v388 + 2), (uint64_t)v48, v39, v40, v41, v42, v43);
        if (v184)
          *v184 = 3014704;
      }
      else
      {
        v200 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v386, (WTF::AtomStringImpl *)(v388 + 2), (uint64_t)v48, v39, v40, v41, v42, v43);
        if (v200)
          *v200 = 11824;
      }
    }
    v201 = *(_DWORD *)(a1 + 56);
    if (v201 != v392.i32[3])
    {
      v203 = 1;
      do
      {
        v418.i8[0] = 48;
        if (v387
          && ((v204 = v388, v388 < *((_DWORD *)v387 + 1))
            ? (v205 = v386 == 0)
            : (v205 = 0),
              v205))
        {
          v206 = *((_DWORD *)v387 + 4);
          v207 = *((_QWORD *)v387 + 1);
          LODWORD(v388) = v388 + 1;
          if ((v206 & 4) != 0)
            *(_BYTE *)(v207 + v204) = 48;
          else
            *(_WORD *)(v207 + 2 * v204) = 48;
        }
        else
        {
          WTF::StringBuilder::append((uint64_t)&v386, &v418, 1uLL, v39, v40, v41, v42, v43);
        }
        v201 = v392.i32[3];
        v159 = *(unsigned int *)(a1 + 56) - (unint64_t)v392.u32[3] > v203++;
      }
      while (v159);
    }
    v418.i64[0] = v392.i64[0];
    if (v201 < 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197E33360);
    }
    v418.i32[2] = v201;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::Vector<unsigned char,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>((uint64_t)&v386, (int8x16_t **)&v418, (uint64_t)v48, v39, v40, v41, v42, v43);
  }
  else
  {
    v418.i64[0] = v392.i64[0];
    if ((int)(v179 - v181) < 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197E33340);
    }
    v418.i32[2] = v179 - v181;
    v391 = 46;
    v389 = (WTF::StringImpl *)(v392.i64[0] + v179 - v181);
    if ((v181 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197E33380);
    }
    v390 = v181;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<unsigned char,18446744073709551615ul>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<std::span<unsigned char,18446744073709551615ul>,void>>((uint64_t)&v386, (int8x16_t **)&v418, &v391, (uint64_t)&v389, v40, v41, v42, v43);
  }
  v202 = v392.i64[0];
  if (&v393 != (uint64_t *)v392.i64[0] && v392.i64[0])
  {
    v392.i64[0] = 0;
    v392.i32[2] = 0;
    WTF::fastFree(v202, v182, (uint64_t)v48, v39, v40, v41, v42, v43);
  }
LABEL_402:
  if (*(_BYTE *)(a1 + 72) == 1)
  {
    v250 = atomic_load(&WTF::ICU::version(void)::onceKey);
    if (v250 != -1)
    {
      v392.i64[0] = (uint64_t)&v389;
      v418.i64[0] = (uint64_t)&v392;
      std::__call_once(&WTF::ICU::version(void)::onceKey, &v418, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::ICU::version(void)::$_0 &&>>);
    }
    if (WTF::ICU::version(void)::versions >= 0x45u && (v388 & 0x80000000) == 0)
    {
      v251 = v387;
      if ((v387 || (v251 = v386) != 0) && (*((_BYTE *)v251 + 16) & 4) == 0)
      {
        v252 = (_DWORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v386, (WTF::AtomStringImpl *)(v388 + 2), (uint64_t)v48, v39, v40, v41, v42, v43);
        if (v252)
          *v252 = 7798831;
      }
      else
      {
        v253 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v386, (WTF::AtomStringImpl *)(v388 + 2), (uint64_t)v48, v39, v40, v41, v42, v43);
        if (v253)
          *v253 = 30511;
      }
    }
  }
  v254 = v386;
  if (!v386)
  {
    if ((v388 & 0x80000000) == 0 && v387 && *((_DWORD *)v387 + 1) > v388 + (v388 >> 2))
    {
      if ((*((_BYTE *)v387 + 16) & 4) != 0)
        WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v386, (WTF::AtomStringImpl *)v388, (uint64_t)v48, v39, v40, v41, v42, v43);
      else
        WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v386, (WTF::AtomStringImpl *)v388, (uint64_t)v48, v39, v40, v41, v42, v43);
      v340 = v386;
      v386 = v387;
      v387 = 0;
      if (v340)
      {
        if (*(_DWORD *)v340 == 2)
        {
          WTF::StringImpl::~StringImpl(v340, v316, v317, v318, v319, v320, v321, v322);
          WTF::fastFree(v341, v342, v343, v344, v345, v346, v347, v348);
        }
        else
        {
          *(_DWORD *)v340 -= 2;
        }
      }
    }
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v386);
    v254 = v386;
    if (!v386)
    {
      v257 = 0;
      LODWORD(v255) = 0;
      v259 = 0;
      v392.i64[0] = (uint64_t)&v393;
      v392.i32[2] = 32;
      v401 = 0;
      v402 = 0;
      v258 = 1;
LABEL_418:
      v392.i32[3] = v255;
      v260 = &v393;
      v261 = &v393;
      goto LABEL_419;
    }
  }
  v255 = *((unsigned int *)v254 + 1);
  *(_DWORD *)v254 += 2;
  v256 = *((_DWORD *)v254 + 4);
  v257 = (int8x16_t *)*((_QWORD *)v254 + 1);
  v392.i64[0] = (uint64_t)&v393;
  v392.i64[1] = 32;
  v401 = 0;
  v402 = 0;
  if ((v256 & 4) != 0)
  {
    if (v255 <= 0x20)
    {
      v258 = 0;
      v259 = v255;
      goto LABEL_418;
    }
    if (v255 <= 0x29)
      v323 = 41;
    else
      v323 = v255;
    if (v323 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x197E3361CLL);
    }
    v260 = (uint64_t *)WTF::fastMalloc((WTF *)(2 * v323));
    v392.i64[0] = (uint64_t)v260;
    v392.i64[1] = __PAIR64__(v255, v323);
    if (v255 < 0x40)
    {
      v258 = 0;
      v259 = v255;
      v261 = v260;
    }
    else
    {
      v261 = (uint64_t *)((char *)v260 + 2 * (v255 & 0xFFFFFFC0));
      v324 = 0uLL;
      v325 = (char *)v260;
      do
      {
        v420.val[0] = *v257;
        v326 = v257[1];
        v421.val[0] = v257[2];
        v327 = v257[3];
        v257 += 4;
        v328 = v327;
        v421.val[1] = 0uLL;
        v422.val[0] = v326;
        v420.val[1] = 0uLL;
        v329 = v325;
        vst2q_s8(v329, v420);
        v329 += 32;
        v422.val[1] = 0uLL;
        vst2q_s8(v329, v422);
        v330 = v325 + 64;
        vst2q_s8(v330, v421);
        v331 = v325 + 96;
        vst2q_s8(v331, *(int8x16x2_t *)(&v324 - 1));
        v325 += 128;
      }
      while (v325 != (char *)v261);
      v258 = 0;
      v259 = v255;
    }
LABEL_419:
    v262 = (uint64_t *)((char *)v260 + 2 * v259);
    while (v261 != v262)
    {
      v263 = v257->u8[0];
      v257 = (int8x16_t *)((char *)v257 + 1);
      *(_WORD *)v261 = v263;
      v261 = (uint64_t *)((char *)v261 + 2);
    }
    v257 = (int8x16_t *)v392.i64[0];
    v264 = v392.u32[3];
  }
  else
  {
    v258 = 0;
    v264 = v255;
  }
  v401 = (uint64_t)v257;
  v402 = v264;
  v265 = unumf_openForSkeletonAndLocale();
  v266 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v265;
  if (v266)
    unumf_close();
  v267 = unumrf_openForSkeletonWithCollapseAndIdentityFallback();
  v268 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v267;
  if (v268)
    unumrf_close();
  v269 = uplrules_openForType();
  v270 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v269;
  if (v270)
    uplrules_close();
  v271 = v392.i64[0];
  if (&v393 != (uint64_t *)v392.i64[0] && v392.i64[0])
  {
    v392.i64[0] = 0;
    v392.i32[2] = 0;
    WTF::fastFree(v271, v37, (uint64_t)v48, v39, v40, v41, v42, v43);
    if ((v258 & 1) == 0)
      goto LABEL_432;
  }
  else if ((v258 & 1) == 0)
  {
LABEL_432:
    if (*(_DWORD *)v254 == 2)
    {
      WTF::StringImpl::~StringImpl(v254, v37, (uint64_t)v48, v39, v40, v41, v42, v43);
      WTF::fastFree(v274, v275, v276, v277, v278, v279, v280, v281);
    }
    else
    {
      *(_DWORD *)v254 -= 2;
    }
  }
  v272 = v387;
  v387 = 0;
  if (v272)
  {
    if (*(_DWORD *)v272 == 2)
    {
      WTF::StringImpl::~StringImpl(v272, v37, (uint64_t)v48, v39, v40, v41, v42, v43);
      WTF::fastFree(v282, v283, v284, v285, v286, v287, v288, v289);
    }
    else
    {
      *(_DWORD *)v272 -= 2;
    }
  }
  v273 = v386;
  v386 = 0;
  if (v273)
  {
    if (*(_DWORD *)v273 == 2)
    {
      WTF::StringImpl::~StringImpl(v273, v37, (uint64_t)v48, v39, v40, v41, v42, v43);
      WTF::fastFree(v290, v291, v292, v293, v294, v295, v296, v297);
    }
    else
    {
      *(_DWORD *)v273 -= 2;
    }
  }
  if (v385)
  {
    if (*(_DWORD *)v385 == 1)
      WTF::fastFree((unint64_t)v385, v37, (uint64_t)v48, v39, v40, v41, v42, v43);
    else
      --*(_DWORD *)v385;
  }
LABEL_18:
  std::array<WTF::String,6ul>::~array(&v379, v37, (uint64_t)v48, v39, v40, v41, v42, v43);
  v49 = v378;
  v378 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v377;
  v377 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
LABEL_24:
  std::array<std::optional<WTF::String>,6ul>::~array((uint64_t)v380, v27, v28, v29, v30, v31, v32, v33);
LABEL_25:
  if (v383)
  {
    v81 = v381;
    v82 = 8 * v383;
    do
    {
      v83 = *(WTF::StringImpl **)v81;
      *(_QWORD *)v81 = 0;
      if (v83)
      {
        if (*(_DWORD *)v83 == 2)
        {
          WTF::StringImpl::~StringImpl(v83, v15, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
          WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
        }
        else
        {
          *(_DWORD *)v83 -= 2;
        }
      }
      v81 = (WTF *)((char *)v81 + 8);
      v82 -= 8;
    }
    while (v82);
  }
  v51 = v381;
  if (v381)
  {
    v381 = 0;
    v382 = 0;
    WTF::fastFree((unint64_t)v51, v15, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21);
  }
}

int *JSC::IntlPluralRules::resolvedOptions(JSC::IntlPluralRules *this, JSC::JSGlobalObject *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t SlowCase;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  const char *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  JSC::JSGlobalObject *v84;
  unint64_t v85;
  uint64_t Keywords;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  JSC::VM *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int32x4_t v99;
  WTF::AtomStringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  WTF::StringImpl *v117;
  __n128 v118;
  uint64_t v119;
  uint64_t v120;
  WTF::AtomStringImpl *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __n128 v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  int v142;
  uint64_t v143;
  __n128 v144;
  uint64_t v145;
  uint64_t v146;
  WTF::AtomStringImpl *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  unint64_t v155;
  unint64_t v156;
  char *v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  __n128 v161;
  uint64_t v162;
  uint64_t v163;
  WTF::AtomStringImpl *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  unint64_t v172;
  int v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  __n128 v177;
  uint64_t v178;
  uint64_t v179;
  WTF::AtomStringImpl *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t OutOfMemoryError;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  double v235;
  JSC::Exception *v236;
  unint64_t v237;
  int *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int *v243;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  unint64_t v247;
  int v248;
  int v249;
  uint64_t v250;

  v9 = *((_QWORD *)a2 + 7);
  v10 = *(_QWORD *)(v9 + 15056);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 60);
    SlowCase = *(_QWORD *)(v10 + 24);
    if (SlowCase < *(_QWORD *)(v10 + 32))
    {
LABEL_3:
      *(_QWORD *)(v10 + 24) = SlowCase + v11;
      goto LABEL_4;
    }
    SlowCase = *(_QWORD *)(v10 + 40);
    if ((SlowCase & 1) == 0)
    {
      v237 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 32) = SlowCase + HIDWORD(v237);
      *(_QWORD *)(v10 + 40) = SlowCase + (int)v237;
      goto LABEL_3;
    }
    JSC::sanitizeStackForVM(*((JSC **)a2 + 7), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v10, v9 + 192, v11, 0, 0, v239, v240, v241);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v9 + 14936, *((JSC **)a2 + 7), 0x40uLL, 0, a5, a6, a7, a8);
    if (!SlowCase)
    {
      __break(0xC471u);
      JUMPOUT(0x197E34000);
    }
  }
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  *(_DWORD *)SlowCase = *((_DWORD *)a2 + 212);
  *(_DWORD *)(SlowCase + 4) = 16783360;
  *(_OWORD *)(SlowCase + 8) = 0u;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 40) = 0u;
  *(_QWORD *)(SlowCase + 56) = 0;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  v13 = v9 + 41952;
  v14 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 1784);
  v15 = JSC::jsNontrivialString((JSC *)v9, (JSC::IntlPluralRules *)((char *)this + 40), a3, a4, a5, a6, a7, a8);
  v246 = 0;
  v247 = SlowCase;
  v248 = -1;
  v16.n128_u64[0] = 0x100000001000000;
  v249 = 0x1000000;
  v250 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v9, v14, v15, 0, (uint64_t)&v246, v17, v18, v16);
  v19 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2560);
  if (*((_BYTE *)this + 75))
    v20 = "ordinal";
  else
    v20 = "cardinal";
  v21 = 8;
  if (!*((_BYTE *)this + 75))
    v21 = 9;
  v22 = v21 - 1;
  v23 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_DWORD *)v23 = 2;
  *(_DWORD *)(v23 + 4) = v22;
  *(_QWORD *)(v23 + 8) = v20;
  *(_DWORD *)(v23 + 16) = 4;
  v245 = (WTF::StringImpl *)v23;
  v30 = JSC::jsNontrivialString(v9, (JSC::VM *)&v245, v24, v25, v26, v27, v28, v29);
  v246 = 0;
  v247 = SlowCase;
  v248 = -1;
  v31.n128_u64[0] = 0x100000001000000;
  v249 = 0x1000000;
  v250 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v9, v19, v30, 0, (uint64_t)&v246, v32, v33, v31);
  v42 = v245;
  v245 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v189, v190, v191, v192, v193, v194, v195, v196);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = *(_QWORD *)(*(_QWORD *)v13 + 1888);
  v44 = *((unsigned int *)this + 12);
  if ((int)v44 < 0)
    v45 = COERCE__INT64((double)v44) + 0x2000000000000;
  else
    v45 = v44 | 0xFFFE000000000000;
  v246 = 0;
  v247 = SlowCase;
  v248 = -1;
  v41.n128_u64[0] = 0x100000001000000;
  v249 = 0x1000000;
  v250 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v9, v43, v45, 0, (uint64_t)&v246, v39, v40, v41);
  v52 = *((unsigned __int8 *)this + 74);
  if ((v52 - 2) < 2)
  {
    v61 = *(_QWORD *)(*(_QWORD *)v13 + 1880);
    v62 = *((unsigned int *)this + 13);
    if ((int)v62 < 0)
      v63 = COERCE__INT64((double)v62) + 0x2000000000000;
    else
      v63 = v62 | 0xFFFE000000000000;
    v246 = 0;
    v247 = SlowCase;
    v248 = -1;
    v51.n128_u64[0] = 0x100000001000000;
    v249 = 0x1000000;
    v250 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v9, v61, v63, 0, (uint64_t)&v246, v49, v50, v51);
    v67 = *(_QWORD *)(*(_QWORD *)v13 + 1808);
    v68 = *((unsigned int *)this + 14);
    if ((int)v68 < 0)
      v69 = COERCE__INT64((double)v68) + 0x2000000000000;
    else
      v69 = v68 | 0xFFFE000000000000;
    v246 = 0;
    v247 = SlowCase;
    v248 = -1;
    v66.n128_u64[0] = 0x100000001000000;
    v249 = 0x1000000;
    v250 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v9, v67, v69, 0, (uint64_t)&v246, v64, v65, v66);
    v73 = *(_QWORD *)(*(_QWORD *)v13 + 1896);
    v74 = *((unsigned int *)this + 15);
    if ((int)v74 < 0)
      v75 = COERCE__INT64((double)v74) + 0x2000000000000;
    else
      v75 = v74 | 0xFFFE000000000000;
    v246 = 0;
    v247 = SlowCase;
    v248 = -1;
    v72.n128_u64[0] = 0x100000001000000;
    v249 = 0x1000000;
    v250 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v9, v73, v75, 0, (uint64_t)&v246, v70, v71, v72);
    v59 = *(_QWORD *)(*(_QWORD *)v13 + 1816);
    v76 = *((unsigned int *)this + 16);
    if ((v76 & 0x80000000) != 0)
      v77 = COERCE__INT64((double)v76) + 0x2000000000000;
    else
      v77 = v76 | 0xFFFE000000000000;
    v246 = 0;
    v247 = SlowCase;
    v248 = -1;
  }
  else
  {
    if (v52 == 1)
    {
      v78 = *(_QWORD *)(*(_QWORD *)v13 + 1896);
      v79 = *((unsigned int *)this + 15);
      if ((int)v79 < 0)
        v80 = COERCE__INT64((double)v79) + 0x2000000000000;
      else
        v80 = v79 | 0xFFFE000000000000;
      v246 = 0;
      v247 = SlowCase;
      v248 = -1;
      v51.n128_u64[0] = 0x100000001000000;
      v249 = 0x1000000;
      v250 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v9, v78, v80, 0, (uint64_t)&v246, v49, v50, v51);
      v59 = *(_QWORD *)(*(_QWORD *)v13 + 1816);
      v60 = *((unsigned int *)this + 16);
    }
    else
    {
      if (*((_BYTE *)this + 74))
        goto LABEL_45;
      v53 = *(_QWORD *)(*(_QWORD *)v13 + 1880);
      v54 = *((unsigned int *)this + 13);
      if ((int)v54 < 0)
        v55 = COERCE__INT64((double)v54) + 0x2000000000000;
      else
        v55 = v54 | 0xFFFE000000000000;
      v246 = 0;
      v247 = SlowCase;
      v248 = -1;
      v51.n128_u64[0] = 0x100000001000000;
      v249 = 0x1000000;
      v250 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v9, v53, v55, 0, (uint64_t)&v246, v49, v50, v51);
      v59 = *(_QWORD *)(*(_QWORD *)v13 + 1808);
      v60 = *((unsigned int *)this + 14);
    }
    if ((int)v60 < 0)
      v77 = COERCE__INT64((double)v60) + 0x2000000000000;
    else
      v77 = v60 | 0xFFFE000000000000;
    v246 = 0;
    v247 = SlowCase;
    v248 = -1;
  }
  v58.n128_u64[0] = 0x100000001000000;
  v249 = 0x1000000;
  v250 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v9, v59, v77, 0, (uint64_t)&v246, v56, v57, v58);
LABEL_45:
  v81 = *((_DWORD *)a2 + 227);
  if (v81)
    v82 = 16 * (v81 & 0xFFFFFFFE);
  else
    v82 = 0;
  v83 = JSC::JSArray::tryCreate((JSC::JSArray *)v9, v82, 0, v46, v47, v48, v49, v50, v51);
  if (v83)
  {
    v85 = v83;
    v242 = v9 + 41952;
    v243 = (int *)SlowCase;
    Keywords = uplrules_getKeywords();
    if (uenum_next())
    {
      v93 = 0;
      while (1)
      {
        WTF::StringImpl::s_emptyAtomString += 2;
        v246 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
        v94 = JSC::jsNontrivialString(v9, (JSC::VM *)&v246, v87, v88, v89, v90, v91, v92);
        JSC::JSObject::putDirectIndex(v85, (unint64_t)a2, v93, v94, v95, v96, v97, v98, v99);
        v107 = v246;
        v246 = 0;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2)
          {
            WTF::StringImpl::~StringImpl(v107, v100, v101, v102, v103, v104, v105, v106);
            WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
          }
          else
          {
            *(_DWORD *)v107 -= 2;
          }
        }
        if (*(_DWORD *)(v9 + 80))
        {
          v116 = *(_DWORD *)(v9 + 80);
          if ((v116 & 0x27) != 0 && (v116 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v101, v102, v103, v104, v105, v106);
          if (*(_QWORD *)(v9 + 16))
            break;
        }
        v93 = (JSC::VM *)((_DWORD)v93 + 1);
        if (!uenum_next())
          goto LABEL_63;
      }
      v238 = 0;
      goto LABEL_89;
    }
LABEL_63:
    WTF::AtomStringImpl::addLiteral((uint64_t)"pluralCategories", 0x10uLL, v88, v89, v90, v91, v92, &v246);
    v117 = v246;
    v238 = v243;
    v246 = 0;
    v247 = (unint64_t)v243;
    v248 = -1;
    v118.n128_u64[0] = 0x100000001000000;
    v249 = 0x1000000;
    v250 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v243, v9, (unint64_t)v117, v85, 0, (uint64_t)&v246, v119, v120, v118);
    if (v117)
    {
      if (*(_DWORD *)v117 == 2)
      {
        WTF::StringImpl::~StringImpl(v117, v121, v122, v123, v124, v125, v126, v127);
        WTF::fastFree(v197, v198, v199, v200, v201, v202, v203, v204);
      }
      else
      {
        *(_DWORD *)v117 -= 2;
      }
    }
    v129 = *(_QWORD *)(*(_QWORD *)v242 + 2216);
    v130 = *((unsigned int *)this + 17);
    if ((int)v130 < 0)
      v131 = COERCE__INT64((double)v130) + 0x2000000000000;
    else
      v131 = v130 | 0xFFFE000000000000;
    v246 = 0;
    v247 = (unint64_t)v243;
    v248 = -1;
    v128.n128_u64[0] = 0x100000001000000;
    v249 = 0x1000000;
    v250 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v243, v9, v129, v131, 0, (uint64_t)&v246, v126, v127, v128);
    v138 = 0;
    v139 = *(_QWORD *)(*(_QWORD *)v242 + 2224);
    v140 = *((char *)this + 73);
    if (v140 <= 8)
    {
      v141 = off_1E3578610[v140];
      v142 = dword_199124D80[v140];
      v138 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_DWORD *)v138 = 2;
      *(_DWORD *)(v138 + 4) = v142;
      *(_QWORD *)(v138 + 8) = v141;
      *(_DWORD *)(v138 + 16) = 4;
    }
    v245 = (WTF::StringImpl *)v138;
    v143 = JSC::jsNontrivialString(v9, (JSC::VM *)&v245, v132, v133, v134, v135, v136, v137);
    v246 = 0;
    v247 = (unint64_t)v243;
    v248 = -1;
    v144.n128_u64[0] = 0x100000001000000;
    v249 = 0x1000000;
    v250 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v243, v9, v139, v143, 0, (uint64_t)&v246, v145, v146, v144);
    v154 = v245;
    v245 = 0;
    if (v154)
    {
      if (*(_DWORD *)v154 == 2)
      {
        WTF::StringImpl::~StringImpl(v154, v147, v148, v149, v150, v151, v152, v153);
        WTF::fastFree(v205, v206, v207, v208, v209, v210, v211, v212);
      }
      else
      {
        *(_DWORD *)v154 -= 2;
      }
    }
    v155 = *(_QWORD *)(*(_QWORD *)v242 + 2232);
    v156 = *((char *)this + 74);
    if (v156 > 3)
    {
      v159 = 0;
    }
    else
    {
      v157 = off_1E3578658[v156];
      v158 = dword_199124BA0[v156];
      v159 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_DWORD *)v159 = 2;
      *(_DWORD *)(v159 + 4) = v158;
      *(_QWORD *)(v159 + 8) = v157;
      *(_DWORD *)(v159 + 16) = 4;
    }
    v245 = (WTF::StringImpl *)v159;
    v160 = JSC::jsNontrivialString(v9, (JSC::VM *)&v245, v148, v149, v150, v151, v152, v153);
    v246 = 0;
    v247 = (unint64_t)v243;
    v248 = -1;
    v161.n128_u64[0] = 0x100000001000000;
    v249 = 0x1000000;
    v250 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v243, v9, v155, v160, 0, (uint64_t)&v246, v162, v163, v161);
    v171 = v245;
    v245 = 0;
    if (v171)
    {
      if (*(_DWORD *)v171 == 2)
      {
        WTF::StringImpl::~StringImpl(v171, v164, v165, v166, v167, v168, v169, v170);
        WTF::fastFree(v213, v214, v215, v216, v217, v218, v219, v220);
      }
      else
      {
        *(_DWORD *)v171 -= 2;
      }
    }
    v172 = *(_QWORD *)(*(_QWORD *)v242 + 2536);
    if (*((_BYTE *)this + 72))
    {
      if (*((_BYTE *)this + 72) != 1)
      {
        v175 = 0;
LABEL_86:
        v245 = (WTF::StringImpl *)v175;
        v176 = JSC::jsNontrivialString(v9, (JSC::VM *)&v245, v165, v166, v167, v168, v169, v170);
        v246 = 0;
        v247 = (unint64_t)v243;
        v248 = -1;
        v177.n128_u64[0] = 0x100000001000000;
        v249 = 0x1000000;
        v250 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v243, v9, v172, v176, 0, (uint64_t)&v246, v178, v179, v177);
        v187 = v245;
        v245 = 0;
        if (v187)
        {
          if (*(_DWORD *)v187 == 2)
          {
            WTF::StringImpl::~StringImpl(v187, v180, v181, v182, v183, v184, v185, v186);
            WTF::fastFree(v221, v222, v223, v224, v225, v226, v227, v228);
          }
          else
          {
            *(_DWORD *)v187 -= 2;
          }
        }
LABEL_89:
        if (Keywords)
          uenum_close();
        return v238;
      }
      v173 = 14;
      v174 = "stripIfInteger";
    }
    else
    {
      v174 = "auto";
      v173 = 4;
    }
    v175 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)v175 = 2;
    *(_DWORD *)(v175 + 4) = v173;
    *(_QWORD *)(v175 + 8) = v174;
    *(_DWORD *)(v175 + 16) = 4;
    goto LABEL_86;
  }
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a2, v84);
  v236 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v236 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v230, v231, v232, v233, v234);
  }
  JSC::VM::throwException((JSC::VM *)v9, a2, v236, v235, v230, v231, v232, v233, v234);
  return 0;
}

uint64_t JSC::JSObject::putDirectIndex(unint64_t a1, unint64_t a2, JSC::VM *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int32x4_t a9)
{
  char v12;
  unsigned int v13;
  uint64_t v14;
  JSC::VM *v15;
  int v16;
  double v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v12 = *(_BYTE *)(a1 + 4);
  v13 = v12 & 0x1F;
  if (v13 - 4 >= 0xA)
  {
    v19 = v13 > 3 || v13 == 2;
    if (v19 && (*(_BYTE *)(a1 + 4) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197E342B8);
    }
    return JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength((JSC::JSObject *)a1, a2, a3, a4, 0, 0, a7, a8, a9);
  }
  v14 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v14 - 4) <= a3)
    return JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength((JSC::JSObject *)a1, a2, a3, a4, 0, 0, a7, a8, a9);
  v15 = *(JSC::VM **)(a2 + 56);
  v16 = v12 & 0xF;
  if ((v16 - 8) >= 2)
  {
    switch(v16)
    {
      case 0:
      case 1:
        JSC::JSObject::setIndexQuicklyForTypedArray(a1, a3, a4);
        return 1;
      case 4:
      case 5:
        if (a4 > 0xFFFDFFFFFFFFFFFFLL)
          goto LABEL_4;
        if (a4 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL
          && (a9.i64[0] = a4 - 0x2000000000000, BYTE1(dword_1ECF4C5C0)))
        {
          JSC::JSObject::convertInt32ToDouble((JSC::JSObject *)a1, *(JSC::VM **)(a2 + 56), (uint64_t)a3, a4, a5, a6, a7, a8, *(double *)a9.i64);
        }
        else
        {
          JSC::JSObject::convertInt32ToContiguous((JSC::JSObject *)a1, *(JSC::VM **)(a2 + 56), (uint64_t)a3, a4, a5, a6, a7, a8, *(double *)a9.i64);
        }
        JSC::JSObject::setIndexQuickly(a1, v15, (uint64_t)a3, a4, v20, v21, v22, v23);
        return 1;
      case 6:
      case 7:
        if (a4 >> 49)
        {
          v18 = (double)(int)a4;
          if (a4 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v18 = a4 - 0x2000000000000;
          *(double *)(v14 + 8 * a3) = v18;
LABEL_14:
          if (*(_DWORD *)(v14 - 8) <= a3)
            *(_DWORD *)(v14 - 8) = (_DWORD)a3 + 1;
        }
        else
        {
          JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)a1, *(JSC::VM **)(a2 + 56), (uint64_t)a3, a4, a5, a6, a7, a8, *(double *)a9.i64);
        }
        break;
      case 10:
      case 11:
      case 12:
      case 13:
        v26 = *(_QWORD *)(a1 + 8);
        v24 = v14 + 8 * a3;
        v25 = *(_QWORD *)(v24 + 16);
        *(_QWORD *)(v24 + 16) = a4;
        if (a4
          && (a4 & 0xFFFE000000000002) == 0
          && *((_DWORD *)v15 + 190) >= *(unsigned __int8 *)(a1 + 7))
        {
          JSC::Heap::writeBarrierSlowPath((uint64_t)v15 + 192, a1);
        }
        v14 = v26;
        if (v25)
          return 1;
        ++*(_DWORD *)(v26 + 12);
        goto LABEL_14;
      default:
        __break(0xC471u);
        JUMPOUT(0x197E34294);
    }
  }
  else
  {
LABEL_4:
    *(_QWORD *)(v14 + 8 * a3) = a4;
    if (*(_DWORD *)(v14 - 8) <= a3)
      *(_DWORD *)(v14 - 8) = (_DWORD)a3 + 1;
    if (a4 && (a4 & 0xFFFE000000000002) == 0 && *((_DWORD *)v15 + 190) >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v15 + 192, a1);
  }
  return 1;
}

uint64_t JSC::IntlPluralRules::select(JSC::IntlPluralRules *this, JSC::JSGlobalObject *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  WTF *v37;
  int *v38;
  _WORD *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF *v58;
  int v59;
  unsigned int v60;
  _BYTE v61[68];
  int v62;
  uint64_t v63;

  v3 = *((_QWORD *)a2 + 7);
  v63 = v3;
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v5 = 0x500000002;
    *(_QWORD *)(v5 + 8) = "other";
    *(_DWORD *)(v5 + 16) = 4;
    v58 = (WTF *)v5;
    v19 = JSC::jsNontrivialString(v3, (JSC::VM *)&v58, v6, v7, v8, v9, v10, v11);
    v20 = v58;
    v58 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::~StringImpl(v20, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
      }
      else
      {
        *(_DWORD *)v20 -= 2;
      }
    }
  }
  else
  {
    v62 = 0;
    v4 = unumf_openResult();
    unumf_formatDouble();
    v58 = (WTF *)v61;
    v59 = 32;
    LODWORD(v57) = 0;
    v36 = uplrules_selectFormatted();
    v60 = v36;
    v62 = 0;
    v37 = v58;
    if (v58)
    {
      if (v36)
      {
        if (v36 >= 0x7FFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x197E34684);
        }
        v38 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v36 + 20));
        v39 = v38 + 5;
        *v38 = 2;
        v38[1] = v36;
        *((_QWORD *)v38 + 1) = v38 + 5;
        v38[4] = 0;
        if (v36 == 1)
          *v39 = *(_WORD *)v37;
        else
          memcpy(v39, v37, 2 * v36);
      }
      else
      {
        v38 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
    }
    else
    {
      v38 = 0;
    }
    v57 = (WTF::StringImpl *)v38;
    v19 = JSC::jsString(v3, (JSC::VM *)&v57, v30, v31, v32, v33, v34, v35);
    v47 = v57;
    v57 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
      {
        WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      else
      {
        *(_DWORD *)v47 -= 2;
      }
    }
    v48 = v58;
    if (v61 != (_BYTE *)v58 && v58)
    {
      v58 = 0;
      v59 = 0;
      WTF::fastFree((unint64_t)v48, v40, v41, v42, v43, v44, v45, v46);
    }
    if (v4)
      unumf_closeResult();
  }
  return v19;
}

uint64_t JSC::IntlPluralRules::selectRange(JSC::IntlPluralRules *this, JSC::JSGlobalObject *a2, double a3, double a4)
{
  JSC::VM *v5;
  uint64_t v6;
  signed int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int *v16;
  _WORD *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  WTF *v36;
  WTF *v37;
  _QWORD v38[8];
  int v39;
  WTF::StringImpl *v40;
  JSC::VM *v41;

  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v41 = v5;
  v39 = 0;
  v6 = unumrf_openResult();
  unumrf_formatDoubleRange();
  v37 = (WTF *)v38;
  LODWORD(v40) = 0;
  v8 = uplrules_selectForRange();
  v15 = v8;
  if ((int)v40 <= 0)
  {
    v39 = (int)v40;
    goto LABEL_11;
  }
  if ((_DWORD)v40 != 15)
  {
    v39 = (int)v40;
    goto LABEL_17;
  }
  LODWORD(v40) = 0;
  if ((unint64_t)v8 > 0x20)
  {
    if ((unint64_t)v8 >= 0x29)
      v35 = v8;
    else
      v35 = 41;
    if (v35 < 0x21)
    {
      v37 = (WTF *)v38;
      v36 = (WTF *)v38;
    }
    else
    {
      if (v35 >> 31)
        goto LABEL_36;
      v36 = (WTF *)WTF::fastMalloc((WTF *)(2 * v35));
      v37 = v36;
    }
    memcpy(v36, v38, 0x40uLL);
  }
  uplrules_selectForRange();
  v39 = (int)v40;
  if ((int)v40 > 0)
  {
LABEL_17:
    v25 = JSC::throwTypeError((unint64_t)a2, &v41, (uint64_t)"failed to select plural value", 30);
    goto LABEL_24;
  }
LABEL_11:
  if (!v37)
  {
    v16 = 0;
    goto LABEL_21;
  }
  if (!v15)
  {
    v16 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_21;
  }
  if (v15 >= 0x7FFFFFF0)
  {
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x197E34AACLL);
  }
  v16 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v15 + 20));
  v17 = v16 + 5;
  *v16 = 2;
  v16[1] = v15;
  *((_QWORD *)v16 + 1) = v16 + 5;
  v16[4] = 0;
  if (v15 == 1)
    *v17 = *(_WORD *)v37;
  else
    memcpy(v17, v37, 2 * v15);
LABEL_21:
  v40 = (WTF::StringImpl *)v16;
  v25 = JSC::jsString((uint64_t)v5, (JSC::VM *)&v40, v9, v10, v11, v12, v13, v14);
  v26 = v40;
  v40 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
LABEL_24:
  if (v38 != (_QWORD *)v37 && v37)
    WTF::fastFree((unint64_t)v37, v18, v19, v20, v21, v22, v23, v24);
  if (v6)
    unumrf_closeResult();
  return v25;
}

uint64_t JSC::JSObject::setIndexQuicklyForTypedArray(uint64_t result, unsigned int a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v12;
  uint64_t v14;
  float v15;
  float v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v21;
  unint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v28;
  double v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v3 = a3;
  v4 = result;
  switch(*(_BYTE *)(result + 5))
  {
    case '\'':
      v5 = a2;
      if ((*(_BYTE *)(result + 40) & 7u) <= 2)
      {
        v6 = *(_QWORD *)(result + 24);
        goto LABEL_4;
      }
      v51 = *(_QWORD *)(*(_QWORD *)(result + 8) - 8);
      if (*(_BYTE *)(v51 + 64) && (v92 = *(_QWORD *)(v51 + 32)) != 0)
        v52 = *(_QWORD *)(v92 + 32);
      else
        v52 = *(_QWORD *)(v51 + 48);
      v54 = *(_QWORD *)(result + 24);
      v53 = *(_QWORD *)(result + 32);
      if (v54 + v53 > v52)
        goto LABEL_9;
      if ((*(_BYTE *)(result + 40) & 1) != 0)
      {
        v6 = v52 - v53;
LABEL_4:
        if (v6 > a2 && a3 >> 49 != 0)
          goto LABEL_47;
LABEL_9:
        __break(0xC471u);
        JUMPOUT(0x197E34B3CLL);
      }
      if (v54 <= a2 || !(a3 >> 49))
        goto LABEL_9;
      goto LABEL_47;
    case '(':
      v5 = a2;
      if ((*(_BYTE *)(result + 40) & 7u) > 2)
      {
        v55 = *(_QWORD *)(*(_QWORD *)(result + 8) - 8);
        if (*(_BYTE *)(v55 + 64) && (v93 = *(_QWORD *)(v55 + 32)) != 0)
          v56 = *(_QWORD *)(v93 + 32);
        else
          v56 = *(_QWORD *)(v55 + 48);
        v58 = *(_QWORD *)(result + 24);
        v57 = *(_QWORD *)(result + 32);
        if (v58 + v57 > v56)
          goto LABEL_140;
        if ((*(_BYTE *)(result + 40) & 1) == 0)
        {
          if (v58 > a2 && a3 >> 49)
          {
LABEL_47:
            if (a3 < 0xFFFE000000000000)
            {
              v83 = a3 - 0x2000000000000;
              if ((double)(int)COERCE_DOUBLE(a3 - 0x2000000000000) == COERCE_DOUBLE(a3 - 0x2000000000000))
              {
                LODWORD(v3) = (int)COERCE_DOUBLE(a3 - 0x2000000000000);
              }
              else
              {
                v84 = (v83 >> 52) & 0x7FF;
                v85 = (v83 >> 52) + 1;
                if ((v84 - 1023) <= 0x53)
                {
                  v86 = v83 >> (51 - (v83 >> 52));
                  if (v84 > 0x433)
                    LODWORD(v86) = a3 << (v84 - 51);
                  v87 = (((1 << v85) - 1) & v86) + (1 << v85);
                  if (v84 >= 0x41F)
                    v88 = v86;
                  else
                    v88 = v87;
                  if ((uint64_t)a3 >= 0x2000000000000)
                    LOBYTE(v3) = v88;
                  else
                    LODWORD(v3) = -v88;
                }
                else
                {
                  LOBYTE(v3) = 0;
                }
              }
            }
            v19 = *(_QWORD *)(result + 16);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            *(_BYTE *)(v19 + v5) = v3;
            return result;
          }
LABEL_140:
          __break(0xC471u);
          JUMPOUT(0x197E35060);
        }
        v17 = v56 - v57;
      }
      else
      {
        v17 = *(_QWORD *)(result + 24);
      }
      if (v17 > a2 && a3 >> 49 != 0)
        goto LABEL_47;
      goto LABEL_140;
    case ')':
      v10 = a2;
      if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(result, a2) || !(v3 >> 49))
      {
        __break(0xC471u);
        JUMPOUT(0x197E35134);
      }
      return JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setIndexQuickly(v4, v10, v3);
    case '*':
      v8 = a2;
      if ((*(_BYTE *)(result + 40) & 7u) <= 2)
      {
        if (*(_QWORD *)(result + 24) > (unint64_t)a2 && a3 >> 49 != 0)
          goto LABEL_25;
LABEL_191:
        __break(0xC471u);
        JUMPOUT(0x197E35244);
      }
      v43 = *(_QWORD *)(*(_QWORD *)(result + 8) - 8);
      if (*(_BYTE *)(v43 + 64) && (v90 = *(_QWORD *)(v43 + 32)) != 0)
        v44 = *(_QWORD *)(v90 + 32);
      else
        v44 = *(_QWORD *)(v43 + 48);
      v46 = *(_QWORD *)(result + 24);
      v45 = *(_QWORD *)(result + 32);
      if (v45 + 2 * v46 > v44)
        goto LABEL_191;
      if ((*(_BYTE *)(result + 40) & 1) != 0)
      {
        if (a2 < (v44 - v45) >> 1 && a3 >> 49 != 0)
          goto LABEL_25;
        goto LABEL_191;
      }
      if (v46 <= a2 || !(a3 >> 49))
        goto LABEL_191;
      goto LABEL_25;
    case '+':
      v8 = a2;
      if ((*(_BYTE *)(result + 40) & 7u) > 2)
      {
        v39 = *(_QWORD *)(*(_QWORD *)(result + 8) - 8);
        if (*(_BYTE *)(v39 + 64) && (v89 = *(_QWORD *)(v39 + 32)) != 0)
          v40 = *(_QWORD *)(v89 + 32);
        else
          v40 = *(_QWORD *)(v39 + 48);
        v42 = *(_QWORD *)(result + 24);
        v41 = *(_QWORD *)(result + 32);
        if (v41 + 2 * v42 <= v40)
        {
          if ((*(_BYTE *)(result + 40) & 1) != 0)
          {
            if (a2 < (v40 - v41) >> 1 && a3 >> 49 != 0)
              goto LABEL_25;
          }
          else if (v42 > a2 && a3 >> 49)
          {
LABEL_25:
            if (a3 < 0xFFFE000000000000)
            {
              v71 = a3 - 0x2000000000000;
              if ((double)(int)COERCE_DOUBLE(a3 - 0x2000000000000) == COERCE_DOUBLE(a3 - 0x2000000000000))
              {
                LODWORD(v3) = (int)COERCE_DOUBLE(a3 - 0x2000000000000);
              }
              else
              {
                v72 = (v71 >> 52) & 0x7FF;
                v73 = (v71 >> 52) + 1;
                if ((v72 - 1023) <= 0x53)
                {
                  v80 = v71 >> (51 - (v71 >> 52));
                  if (v72 > 0x433)
                    LODWORD(v80) = a3 << (v72 - 51);
                  v81 = (((1 << v73) - 1) & v80) + (1 << v73);
                  if (v72 >= 0x41F)
                    v82 = v80;
                  else
                    v82 = v81;
                  if ((uint64_t)a3 >= 0x2000000000000)
                    LOWORD(v3) = v82;
                  else
                    LODWORD(v3) = -v82;
                }
                else
                {
                  LOWORD(v3) = 0;
                }
              }
            }
            v12 = *(_QWORD *)(result + 16);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v12 = (v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            *(_WORD *)(v12 + 2 * v8) = v3;
            return result;
          }
        }
      }
      else if (*(_QWORD *)(result + 24) > (unint64_t)a2 && a3 >> 49 != 0)
      {
        goto LABEL_25;
      }
      __break(0xC471u);
      JUMPOUT(0x197E34B84);
    case ',':
      if ((*(_BYTE *)(result + 40) & 7u) > 2)
      {
        v59 = *(_QWORD *)(*(_QWORD *)(result + 8) - 8);
        if (*(_BYTE *)(v59 + 64) && (v94 = *(_QWORD *)(v59 + 32)) != 0)
          v60 = *(_QWORD *)(v94 + 32);
        else
          v60 = *(_QWORD *)(v59 + 48);
        v62 = *(_QWORD *)(result + 24);
        v61 = *(_QWORD *)(result + 32);
        if (v61 + 4 * v62 <= v60)
        {
          if ((*(_BYTE *)(result + 40) & 1) != 0)
          {
            if (a2 < (v60 - v61) >> 2 && a3 >> 49 != 0)
              goto LABEL_57;
          }
          else if (v62 > a2 && a3 >> 49)
          {
LABEL_57:
            if (a3 < 0xFFFE000000000000)
            {
              v31 = a3 - 0x2000000000000;
              if ((double)(int)COERCE_DOUBLE(a3 - 0x2000000000000) == COERCE_DOUBLE(a3 - 0x2000000000000))
              {
                LODWORD(v3) = (int)COERCE_DOUBLE(a3 - 0x2000000000000);
              }
              else
              {
                v32 = (v31 >> 52) & 0x7FF;
                v33 = (v31 >> 52) + 1;
                if ((v32 - 1023) <= 0x53)
                {
                  v34 = v31 >> (51 - (v31 >> 52));
                  if (v32 > 0x433)
                    LODWORD(v34) = a3 << (v32 - 51);
                  v35 = (((1 << v33) - 1) & v34) + (1 << v33);
                  if (v32 >= 0x41F)
                    v36 = v34;
                  else
                    v36 = v35;
                  if ((uint64_t)a3 >= 0x2000000000000)
                    LODWORD(v3) = v36;
                  else
                    LODWORD(v3) = -v36;
                }
                else
                {
                  LODWORD(v3) = 0;
                }
              }
            }
            v21 = *(_QWORD *)(result + 16);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v21 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            *(_DWORD *)(v21 + 4 * a2) = v3;
            return result;
          }
        }
      }
      else if (*(_QWORD *)(result + 24) > (unint64_t)a2 && a3 >> 49 != 0)
      {
        goto LABEL_57;
      }
      __break(0xC471u);
      JUMPOUT(0x197E35198);
    case '-':
      if ((*(_BYTE *)(result + 40) & 7u) > 2)
      {
        v63 = *(_QWORD *)(*(_QWORD *)(result + 8) - 8);
        if (*(_BYTE *)(v63 + 64) && (v95 = *(_QWORD *)(v63 + 32)) != 0)
          v64 = *(_QWORD *)(v95 + 32);
        else
          v64 = *(_QWORD *)(v63 + 48);
        v66 = *(_QWORD *)(result + 24);
        v65 = *(_QWORD *)(result + 32);
        if (v65 + 4 * v66 <= v64)
        {
          if ((*(_BYTE *)(result + 40) & 1) != 0)
          {
            if (a2 < (v64 - v65) >> 2 && a3 >> 49 != 0)
              goto LABEL_67;
          }
          else if (v66 > a2 && a3 >> 49)
          {
LABEL_67:
            if (a3 >= 0xFFFE000000000000)
            {
              v24 = a3;
            }
            else
            {
              v23 = a3 - 0x2000000000000;
              v24 = (int)COERCE_DOUBLE(a3 - 0x2000000000000);
              if ((double)v24 != COERCE_DOUBLE(a3 - 0x2000000000000))
              {
                v25 = (v23 >> 52) & 0x7FF;
                v26 = (v23 >> 52) + 1;
                if ((v25 - 1023) <= 0x53)
                {
                  v37 = v23 >> (51 - (v23 >> 52));
                  if (v25 > 0x433)
                    LODWORD(v37) = a3 << (v25 - 51);
                  v38 = (((1 << v26) - 1) & v37) + (1 << v26);
                  if (v25 >= 0x41F)
                    v24 = v37;
                  else
                    v24 = v38;
                  if ((uint64_t)a3 < 0x2000000000000)
                    v24 = -v24;
                }
                else
                {
                  v24 = 0;
                }
              }
            }
            v30 = *(_QWORD *)(result + 16);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v30 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            *(_DWORD *)(v30 + 4 * a2) = v24;
            return result;
          }
        }
      }
      else if (*(_QWORD *)(result + 24) > (unint64_t)a2 && a3 >> 49 != 0)
      {
        goto LABEL_67;
      }
      __break(0xC471u);
      JUMPOUT(0x197E35278);
    case '.':
      if ((*(_BYTE *)(result + 40) & 7u) > 2)
      {
        v47 = *(_QWORD *)(*(_QWORD *)(result + 8) - 8);
        if (*(_BYTE *)(v47 + 64) && (v91 = *(_QWORD *)(v47 + 32)) != 0)
          v48 = *(_QWORD *)(v91 + 32);
        else
          v48 = *(_QWORD *)(v47 + 48);
        v50 = *(_QWORD *)(result + 24);
        v49 = *(_QWORD *)(result + 32);
        if (v49 + 4 * v50 <= v48)
        {
          if ((*(_BYTE *)(result + 40) & 1) != 0)
          {
            if (a2 < (v48 - v49) >> 2 && a3 >> 49 != 0)
              goto LABEL_35;
          }
          else if (v50 > a2 && a3 >> 49)
          {
LABEL_35:
            v14 = *(_QWORD *)(result + 16);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v14 = (v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            v15 = (float)(int)a3;
            if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
            {
              v16 = COERCE_DOUBLE(a3 - 0x2000000000000);
              v15 = v16;
            }
            *(float *)(v14 + 4 * a2) = v15;
            return result;
          }
        }
      }
      else if (*(_QWORD *)(result + 24) > (unint64_t)a2 && a3 >> 49 != 0)
      {
        goto LABEL_35;
      }
      __break(0xC471u);
      JUMPOUT(0x197E351CCLL);
    case '/':
      if ((*(_BYTE *)(result + 40) & 7u) <= 2)
      {
        if (*(_QWORD *)(result + 24) > (unint64_t)a2 && a3 >> 49 != 0)
          goto LABEL_76;
LABEL_184:
        __break(0xC471u);
        JUMPOUT(0x197E35208);
      }
      v67 = *(_QWORD *)(*(_QWORD *)(result + 8) - 8);
      if (*(_BYTE *)(v67 + 64) && (v96 = *(_QWORD *)(v67 + 32)) != 0)
        v68 = *(_QWORD *)(v96 + 32);
      else
        v68 = *(_QWORD *)(v67 + 48);
      v70 = *(_QWORD *)(result + 24);
      v69 = *(_QWORD *)(result + 32);
      if (v69 + 8 * v70 > v68)
        goto LABEL_184;
      if ((*(_BYTE *)(result + 40) & 1) != 0)
      {
        if (a2 < (v68 - v69) >> 3 && a3 >> 49 != 0)
          goto LABEL_76;
        goto LABEL_184;
      }
      if (v70 <= a2 || !(a3 >> 49))
        goto LABEL_184;
LABEL_76:
      v28 = *(_QWORD *)(result + 16);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v28 = (v28 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v29 = (double)(int)a3;
      if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v29 = a3 - 0x2000000000000;
      *(double *)(v28 + 8 * a2) = v29;
      return result;
    case '0':
      __break(0xC471u);
      JUMPOUT(0x197E353E0);
    case '1':
      __break(0xC471u);
      JUMPOUT(0x197E353B0);
    default:
      __break(0xC471u);
      JUMPOUT(0x197E35380);
  }
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setIndexQuickly(uint64_t result, uint64_t a2, unint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  double v6;
  uint64_t v7;

  if (a3 < 0xFFFE000000000000)
  {
    *(_QWORD *)&v6 = a3 - 0x2000000000000;
    if (COERCE_DOUBLE(a3 - 0x2000000000000) >= 0.0)
    {
      v7 = (uint64_t)rint(v6);
      if (v6 <= 255.0)
        LOBYTE(v4) = v7;
      else
        LOBYTE(v4) = -1;
    }
    else
    {
      LOBYTE(v4) = 0;
    }
  }
  else
  {
    if ((int)a3 >= 255)
      v3 = 255;
    else
      v3 = a3;
    v4 = v3 & ~(v3 >> 31);
  }
  v5 = *(_QWORD *)(result + 16);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v5 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_BYTE *)(v5 + a2) = v4;
  return result;
}

uint64_t JSC::promiseConstructorAllCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::promiseConstructorAllCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::promiseConstructorAllCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promiseConstructorAllSettledCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::promiseConstructorAllSettledCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124E00;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x131E00000D28), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypeAnchorCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeAnchorCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124E10;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x13850000131ELL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promiseConstructorAnyCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::promiseConstructorAnyCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124E20;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x181500001385), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::reflectObjectApplyCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::reflectObjectApplyCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124E40;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x19C30000187DLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeAsyncGeneratorEnqueueCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorEnqueueCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorEnqueueCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeAsyncGeneratorQueueDequeueCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorQueueDequeueCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorQueueDequeueCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeAsyncGeneratorQueueEnqueueCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorQueueEnqueueCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorQueueEnqueueCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeAsyncGeneratorQueueIsEmptyCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t IsEmptyCodeExecutable;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  IsEmptyCodeExecutable = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorQueueIsEmptyCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorQueueIsEmptyCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(IsEmptyCodeExecutable, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeAsyncGeneratorRejectCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorRejectCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorRejectCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeAsyncGeneratorResolveCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorResolveCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorResolveCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeAsyncGeneratorResumeNextCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t CodeExecutable;
  double CodeSource;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  CodeExecutable = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorResumeNextCodeExecutable(this[11644]);
  CodeSource = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorResumeNextCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, CodeSource, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeAsyncGeneratorResumeNextOnFulfilledCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorResumeNextOnFulfilledCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorResumeNextOnFulfilledCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeAsyncGeneratorResumeNextOnRejectedCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorResumeNextOnRejectedCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorResumeNextOnRejectedCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeAsyncGeneratorYieldCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorYieldCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorYieldCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeAsyncGeneratorYieldAwaitedCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorYieldAwaitedCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorYieldAwaitedCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeAsyncGeneratorYieldOnRejectedCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorYieldOnRejectedCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAsyncGeneratorYieldOnRejectedCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderAsyncModuleEvaluationCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::moduleLoaderAsyncModuleEvaluationCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124EC0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x388A0000361CLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeAtCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeAtCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124ED0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x39AA0000388ALL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypeAtCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeAtCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124EE0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x3B0D000039AALL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::typedArrayPrototypeAtCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::typedArrayPrototypeAtCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124EF0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x3BCB00003B0DLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeAwaitValueCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAwaitValueCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::asyncGeneratorPrototypeAwaitValueCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypeBigCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeBigCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124F00;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x3CCD00003C6CLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypeBlinkCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeBlinkCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124F10;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x3D3200003CCDLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypeBoldCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeBoldCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124F20;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x3D9200003D32), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::iteratorHelpersBuiltinMapIterableCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::iteratorHelpersBuiltinMapIterableCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124F30;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x3E6500003D92), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::iteratorHelpersBuiltinSetIterableCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::iteratorHelpersBuiltinSetIterableCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124F40;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x3F3700003E65), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderCacheSatisfyCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::moduleLoaderCacheSatisfyCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124F50;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x3FB300003F37), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderCacheSatisfyAndReturnCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::moduleLoaderCacheSatisfyAndReturnCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124F60;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x40F700003FB3), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promisePrototypeCatchCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::promisePrototypeCatchCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124F80;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x4221000041CDLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeConcatCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeConcatCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124FA0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x442600004295), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypeConcatCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeConcatCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124FB0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x454600004426), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeCopyWithinCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeCopyWithinCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199124FD0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x4EBF00004A0DLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncFromSyncIteratorPrototypeCreateAsyncFromSyncIteratorCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t AsyncFromSyncIteratorCodeExecutable;
  double AsyncFromSyncIteratorCodeSource;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  AsyncFromSyncIteratorCodeExecutable = JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeCreateAsyncFromSyncIteratorCodeExecutable(this[11644]);
  AsyncFromSyncIteratorCodeSource = JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeCreateAsyncFromSyncIteratorCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(AsyncFromSyncIteratorCodeExecutable, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, AsyncFromSyncIteratorCodeSource, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promiseOperationsCreateResolvingFunctionsCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t ResolvingFunctionsCodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  ResolvingFunctionsCodeExecutable = JSC::BuiltinExecutables::promiseOperationsCreateResolvingFunctionsCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125020;
  v8 = JSC::UnlinkedFunctionExecutable::link(ResolvingFunctionsCodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x101110000FF71), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::reflectObjectDeletePropertyCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::reflectObjectDeletePropertyCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125070;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x10879000107C5), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderDependencyKeysIfEvaluatedCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::moduleLoaderDependencyKeysIfEvaluatedCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125080;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x109A900010879), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::setPrototypeDifferenceCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::setPrototypeDifferenceCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125090;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x10D5A000109A9), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallOnFulfilledNormalCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallOnFulfilledNormalCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallOnFulfilledNormalCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallOnFulfilledReturnCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallOnFulfilledReturnCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallOnFulfilledReturnCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderEnsureRegisteredCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::moduleLoaderEnsureRegisteredCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991250A0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1174D0001169ELL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::shadowRealmPrototypeEvaluateCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::shadowRealmPrototypeEvaluateCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991250B0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x118B60001174DLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeEveryCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeEveryCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991250C0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x11A76000118B6), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeFillCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeFillCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991250E0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x11E7700011BB8), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeFilterCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeFilterCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991250F0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x120C000011E77), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promisePrototypeFinallyCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::promisePrototypeFinallyCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::promisePrototypeFinallyCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeFindCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t CodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  CodeExecutable = JSC::BuiltinExecutables::arrayPrototypeFindCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125110;
  v8 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1290D00012751), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeFindIndexCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t IndexCodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  IndexCodeExecutable = JSC::BuiltinExecutables::arrayPrototypeFindIndexCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125130;
  v8 = JSC::UnlinkedFunctionExecutable::link(IndexCodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x12C0700012A63), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeFindLastCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t LastCodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  LastCodeExecutable = JSC::BuiltinExecutables::arrayPrototypeFindLastCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125150;
  v8 = JSC::UnlinkedFunctionExecutable::link(LastCodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x12F1200012D46), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::typedArrayPrototypeFindLastCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t LastCodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  LastCodeExecutable = JSC::BuiltinExecutables::typedArrayPrototypeFindLastCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125160;
  v8 = JSC::UnlinkedFunctionExecutable::link(LastCodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1307A00012F12), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeFindLastIndexCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t LastIndexCodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  LastIndexCodeExecutable = JSC::BuiltinExecutables::arrayPrototypeFindLastIndexCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125170;
  v8 = JSC::UnlinkedFunctionExecutable::link(LastIndexCodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1322B0001307ALL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::typedArrayPrototypeFindLastIndexCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t LastIndexCodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  LastIndexCodeExecutable = JSC::BuiltinExecutables::typedArrayPrototypeFindLastIndexCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125180;
  v8 = JSC::UnlinkedFunctionExecutable::link(LastIndexCodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x133730001322BLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypeFixedCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeFixedCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125190;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x133D500013373), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeFlatCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeFlatCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991251A0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1355C000133D5), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeFlatIntoArrayWithCallbackCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeFlatIntoArrayWithCallbackCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991251C0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x139A800013772), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeFlatMapCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeFlatMapCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991251D0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x13B59000139A8), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypeFontcolorCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeFontcolorCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991251E0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x13BCE00013B59), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypeFontsizeCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeFontsizeCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991251F0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x13C3F00013BCELL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeForEachCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeForEachCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125200;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x13DD600013C3FLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::typedArrayPrototypeForEachCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::typedArrayPrototypeForEachCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125230;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1432D0001420DLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderForceFulfillPromiseCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::moduleLoaderForceFulfillPromiseCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125240;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x144040001432DLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayConstructorFromCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayConstructorFromCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125250;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x14A8000014404), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::typedArrayConstructorFromCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::typedArrayConstructorFromCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125260;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x151B400014A80), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayConstructorFromAsyncCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayConstructorFromAsyncCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125270;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1574D000151B4), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::objectConstructorFromEntriesCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::objectConstructorFromEntriesCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125280;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x158770001574DLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderFulfillFetchCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t CodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  CodeExecutable = JSC::BuiltinExecutables::moduleLoaderFulfillFetchCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125290;
  v8 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1594B00015877), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::generatorPrototypeGeneratorResumeCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::generatorPrototypeGeneratorResumeCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::generatorPrototypeGeneratorResumeCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::reflectObjectGetCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t CodeExecutable;
  double CodeSource;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  CodeExecutable = JSC::BuiltinExecutables::reflectObjectGetCodeExecutable(this[11644]);
  CodeSource = JSC::BuiltinExecutables::reflectObjectGetCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, CodeSource, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::mapConstructorGroupByCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::mapConstructorGroupByCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991252F0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x16F2200016BDBLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::objectConstructorGroupByCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::objectConstructorGroupByCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125300;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1729600016F22), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::reflectObjectHasCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t HasCodeExecutable;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  HasCodeExecutable = JSC::BuiltinExecutables::reflectObjectHasCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::reflectObjectHasCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(HasCodeExecutable, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::regExpPrototypeHasObservableSideEffectsForRegExpSplitCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t HasObservableSideEffectsForRegExpSplitCodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  HasObservableSideEffectsForRegExpSplitCodeExecutable = JSC::BuiltinExecutables::regExpPrototypeHasObservableSideEffectsForRegExpSplitCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125320;
  v8 = JSC::UnlinkedFunctionExecutable::link(HasObservableSideEffectsForRegExpSplitCodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x17B830001758ALL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::shadowRealmPrototypeImportValueCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::shadowRealmPrototypeImportValueCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125340;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x180AF00017E0CLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeIncludesCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeIncludesCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125350;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x18346000180AFLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::internalPromiseConstructorInternalAllCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::internalPromiseConstructorInternalAllCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125370;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x188260001840DLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::setPrototypeIntersectionCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::setPrototypeIntersectionCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125380;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x18BD400018826), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayConstructorIsArrayCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t IsArrayCodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  IsArrayCodeExecutable = JSC::BuiltinExecutables::arrayConstructorIsArrayCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125390;
  v8 = JSC::UnlinkedFunctionExecutable::link(IsArrayCodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x18C7D00018BD4), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::setPrototypeIsDisjointFromCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t IsDisjointFromCodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  IsDisjointFromCodeExecutable = JSC::BuiltinExecutables::setPrototypeIsDisjointFromCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991253A0;
  v8 = JSC::UnlinkedFunctionExecutable::link(IsDisjointFromCodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1900C00018C7DLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeIsExecutionStateCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t IsExecutionStateCodeExecutable;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  IsExecutionStateCodeExecutable = JSC::BuiltinExecutables::asyncGeneratorPrototypeIsExecutionStateCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::asyncGeneratorPrototypeIsExecutionStateCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(IsExecutionStateCodeExecutable, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::globalObjectIsFiniteCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t IsFiniteCodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  IsFiniteCodeExecutable = JSC::BuiltinExecutables::globalObjectIsFiniteCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991253B0;
  v8 = JSC::UnlinkedFunctionExecutable::link(IsFiniteCodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x192350001917DLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::numberConstructorIsFiniteCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t IsFiniteCodeExecutable;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  IsFiniteCodeExecutable = JSC::BuiltinExecutables::numberConstructorIsFiniteCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::numberConstructorIsFiniteCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(IsFiniteCodeExecutable, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::setPrototypeIsSubsetOfCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t IsSubsetOfCodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  IsSubsetOfCodeExecutable = JSC::BuiltinExecutables::setPrototypeIsSubsetOfCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991253C0;
  v8 = JSC::UnlinkedFunctionExecutable::link(IsSubsetOfCodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x195BF000192DELL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::setPrototypeIsSupersetOfCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t IsSupersetOfCodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  IsSupersetOfCodeExecutable = JSC::BuiltinExecutables::setPrototypeIsSupersetOfCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991253D0;
  v8 = JSC::UnlinkedFunctionExecutable::link(IsSupersetOfCodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1982C000195BFLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeIsSuspendYieldStateCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t IsSuspendYieldStateCodeExecutable;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  IsSuspendYieldStateCodeExecutable = JSC::BuiltinExecutables::asyncGeneratorPrototypeIsSuspendYieldStateCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::asyncGeneratorPrototypeIsSuspendYieldStateCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(IsSuspendYieldStateCodeExecutable, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypeItalicsCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeItalicsCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991253E0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x199C10001995ELL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderLinkCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::moduleLoaderLinkCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991253F0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x19C82000199C1), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypeLinkCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeLinkCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125400;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x19CE900019C82), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderLinkAndEvaluateModuleCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::moduleLoaderLinkAndEvaluateModuleCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125410;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x19D8600019CE9), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderLoadAndEvaluateModuleCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::moduleLoaderLoadAndEvaluateModuleCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125420;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x19EB600019D86), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderLoadModuleCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t ModuleCodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  ModuleCodeExecutable = JSC::BuiltinExecutables::moduleLoaderLoadModuleCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125430;
  v8 = JSC::UnlinkedFunctionExecutable::link(ModuleCodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x19FAC00019EB6), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeMapCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeMapCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125440;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1A1C400019FACLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::regExpPrototypeMatchCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t matched;
  _DWORD *v10;
  uint64_t v11;
  double v12;
  float v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v17;
  __int128 v18;

  matched = JSC::BuiltinExecutables::regExpPrototypeMatchCodeExecutable(this[11644], (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v10 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v10[2];
  v17 = v10;
  v18 = xmmword_199125460;
  v14 = JSC::UnlinkedFunctionExecutable::link(matched, (uint64_t)this, 0, (uint64_t)&v17, 0, 0, 0, v11, COERCE_DOUBLE(0x1A5D30001A4AFLL), v12, v13);
  v15 = v17;
  v17 = 0;
  if (v15)
  {
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[2];
  }
  return v14;
}

uint64_t JSC::stringPrototypeMatchCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t matched;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  matched = JSC::BuiltinExecutables::stringPrototypeMatchCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125470;
  v8 = JSC::UnlinkedFunctionExecutable::link(matched, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1A77C0001A5D3), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::regExpPrototypeMatchAllCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t matched;
  _DWORD *v10;
  uint64_t v11;
  double v12;
  float v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v17;
  __int128 v18;

  matched = JSC::BuiltinExecutables::regExpPrototypeMatchAllCodeExecutable(this[11644], (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v10 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v10[2];
  v17 = v10;
  v18 = xmmword_199125480;
  v14 = JSC::UnlinkedFunctionExecutable::link(matched, (uint64_t)this, 0, (uint64_t)&v17, 0, 0, 0, v11, COERCE_DOUBLE(0x1A9DB0001A77CLL), v12, v13);
  v15 = v17;
  v17 = 0;
  if (v15)
  {
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[2];
  }
  return v14;
}

uint64_t JSC::stringPrototypeMatchAllCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t matched;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  matched = JSC::BuiltinExecutables::stringPrototypeMatchAllCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125490;
  v8 = JSC::UnlinkedFunctionExecutable::link(matched, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1AC140001A9DBLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeMaxWithPositivesCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeMaxWithPositivesCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991254B0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1AEB20001AE76), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderModuleEvaluationCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::moduleLoaderModuleEvaluationCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991254D0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1B0FB0001AF33), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promiseOperationsNewHandledRejectedPromiseCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::promiseOperationsNewHandledRejectedPromiseCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991254E0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1B2170001B0FBLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayIteratorPrototypeNextCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t CodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  CodeExecutable = JSC::BuiltinExecutables::arrayIteratorPrototypeNextCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125520;
  v8 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1B9FF0001B7F4), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncFromSyncIteratorPrototypeNextCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t CodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  CodeExecutable = JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeNextCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125530;
  v8 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1BD490001B9FFLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeNextCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t CodeExecutable;
  double CodeSource;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  CodeExecutable = JSC::BuiltinExecutables::asyncGeneratorPrototypeNextCodeExecutable(this[11644]);
  CodeSource = JSC::BuiltinExecutables::asyncGeneratorPrototypeNextCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, CodeSource, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::generatorPrototypeNextCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t CodeExecutable;
  double CodeSource;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  CodeExecutable = JSC::BuiltinExecutables::generatorPrototypeNextCodeExecutable(this[11644]);
  CodeSource = JSC::BuiltinExecutables::generatorPrototypeNextCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, CodeSource, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::mapIteratorPrototypeNextCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t CodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  CodeExecutable = JSC::BuiltinExecutables::mapIteratorPrototypeNextCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125540;
  v8 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1C1450001BF48), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::regExpStringIteratorPrototypeNextCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t CodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  CodeExecutable = JSC::BuiltinExecutables::regExpStringIteratorPrototypeNextCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125550;
  v8 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1C5D30001C145), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::setIteratorPrototypeNextCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t CodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  CodeExecutable = JSC::BuiltinExecutables::setIteratorPrototypeNextCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125560;
  v8 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1C7680001C5D3), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringIteratorPrototypeNextCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t CodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  CodeExecutable = JSC::BuiltinExecutables::stringIteratorPrototypeNextCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125570;
  v8 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1CB360001C768), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayConstructorOfCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayConstructorOfCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125580;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1CC480001CB36), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::typedArrayConstructorOfCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::typedArrayConstructorOfCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125590;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1CDBE0001CC48), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypePadEndCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypePadEndCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991255A0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1D0E00001CDBELL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypePadStartCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t started;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  started = JSC::BuiltinExecutables::stringPrototypePadStartCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991255B0;
  v8 = JSC::UnlinkedFunctionExecutable::link(started, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1D4040001D0E0), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promiseConstructorPromiseAllNewResolveElementCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::promiseConstructorPromiseAllNewResolveElementCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::promiseConstructorPromiseAllNewResolveElementCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promiseConstructorPromiseAllOnFulfilledCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::promiseConstructorPromiseAllOnFulfilledCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::promiseConstructorPromiseAllOnFulfilledCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promiseConstructorPromiseAllSlowCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::promiseConstructorPromiseAllSlowCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::promiseConstructorPromiseAllSlowCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promiseOperationsPromiseEmptyOnRejectedCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::promiseOperationsPromiseEmptyOnRejectedCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125670;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x1FA5B0001FA23), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promiseConstructorPromiseNewOnRejectedCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::promiseConstructorPromiseNewOnRejectedCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::promiseConstructorPromiseNewOnRejectedCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promiseConstructorPromiseOnRejectedWithContextCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::promiseConstructorPromiseOnRejectedWithContextCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::promiseConstructorPromiseOnRejectedWithContextCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promiseOperationsPromiseRejectSlowCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::promiseOperationsPromiseRejectSlowCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991256A0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x2005E0001FF72), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promiseOperationsPromiseResolveCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::promiseOperationsPromiseResolveCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991256B0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x2019D0002005ELL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderProvideFetchCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t CodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  CodeExecutable = JSC::BuiltinExecutables::moduleLoaderProvideFetchCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125710;
  v8 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x20E8500020DBDLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promiseConstructorRaceCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::promiseConstructorRaceCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125730;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x21403000211DELL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringConstructorRawCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringConstructorRawCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125740;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x216D300021403), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeReduceCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeReduceCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125750;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x219F0000216D3), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeReduceRightCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeReduceRightCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125770;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x21F5300021C27), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promiseConstructorRejectCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::promiseConstructorRejectCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991257A0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x2242300022306), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypeRepeatCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeRepeatCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991257E0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x22A95000228BALL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::regExpPrototypeReplaceCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  double v12;
  float v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v17;
  __int128 v18;

  v9 = JSC::BuiltinExecutables::regExpPrototypeReplaceCodeExecutable(this[11644], (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v10 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v10[2];
  v17 = v10;
  v18 = xmmword_199125810;
  v14 = JSC::UnlinkedFunctionExecutable::link(v9, (uint64_t)this, 0, (uint64_t)&v17, 0, 0, 0, v11, COERCE_DOUBLE(0x2374D00022D9ALL), v12, v13);
  v15 = v17;
  v17 = 0;
  if (v15)
  {
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[2];
  }
  return v14;
}

uint64_t JSC::stringPrototypeReplaceCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeReplaceCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125820;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 81, 0, v5, COERCE_DOUBLE(0x2399B0002374DLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypeReplaceAllCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeReplaceAllCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125830;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x23CAA0002399BLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderRequestFetchCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t CodeExecutable;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  CodeExecutable = JSC::BuiltinExecutables::moduleLoaderRequestFetchCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125840;
  v8 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x23EB500023CAALL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderRequestImportModuleCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::moduleLoaderRequestImportModuleCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125850;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x2404B00023EB5), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderRequestInstantiateCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::moduleLoaderRequestInstantiateCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125860;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x244300002404BLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderRequestSatisfyCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::moduleLoaderRequestSatisfyCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125870;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x2458A00024430), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::moduleLoaderRequestSatisfyUtilCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::moduleLoaderRequestSatisfyUtilCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125880;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x2492F0002458ALL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promiseConstructorResolveCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::promiseConstructorResolveCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125890;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x249BB0002492FLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncFromSyncIteratorPrototypeReturnCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeReturnCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991258E0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x2573C0002524ELL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeReturnCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::asyncGeneratorPrototypeReturnCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991258F0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x257A90002573CLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::generatorPrototypeReturnCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::generatorPrototypeReturnCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::generatorPrototypeReturnCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::regExpPrototypeSearchCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  double v12;
  float v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v17;
  __int128 v18;

  v9 = JSC::BuiltinExecutables::regExpPrototypeSearchCodeExecutable(this[11644], (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v10 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v10[2];
  v17 = v10;
  v18 = xmmword_199125900;
  v14 = JSC::UnlinkedFunctionExecutable::link(v9, (uint64_t)this, 0, (uint64_t)&v17, 0, 0, 0, v11, COERCE_DOUBLE(0x25BBB00025936), v12, v13);
  v15 = v17;
  v17 = 0;
  if (v15)
  {
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[2];
  }
  return v14;
}

uint64_t JSC::stringPrototypeSearchCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::stringPrototypeSearchCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::stringPrototypeSearchCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypeSmallCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeSmallCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125920;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x25E3200025DCDLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeSomeCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeSomeCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125930;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x25FEF00025E32), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::regExpPrototypeSplitCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  double v12;
  float v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v17;
  __int128 v18;

  v9 = JSC::BuiltinExecutables::regExpPrototypeSplitCodeExecutable(this[11644], (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v10 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v10[2];
  v17 = v10;
  v18 = xmmword_199125960;
  v14 = JSC::UnlinkedFunctionExecutable::link(v9, (uint64_t)this, 0, (uint64_t)&v17, 0, 0, 0, v11, COERCE_DOUBLE(0x26B0B0002630CLL), v12, v13);
  v15 = v17;
  v17 = 0;
  if (v15)
  {
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[2];
  }
  return v14;
}

uint64_t JSC::stringPrototypeSplitCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeSplitCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125970;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x26C8500026B0BLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypeStrikeCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeStrikeCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125980;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x26CEC00026C85), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypeSubCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeSubCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991259A0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x26DF900026D98), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::stringPrototypeSupCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::stringPrototypeSupCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991259B0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x26E5A00026DF9), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::iteratorPrototypeSymbolIteratorGetterCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  double v12;
  float v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v17;
  __int128 v18;

  v9 = JSC::BuiltinExecutables::iteratorPrototypeSymbolIteratorGetterCodeExecutable(this[11644], (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v10 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v10[2];
  v17 = v10;
  v18 = xmmword_1991259E0;
  v14 = JSC::UnlinkedFunctionExecutable::link(v9, (uint64_t)this, 0, (uint64_t)&v17, 0, 0, 0, v11, COERCE_DOUBLE(0x26F8A00026F5DLL), v12, v13);
  v15 = v17;
  v17 = 0;
  if (v15)
  {
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[2];
  }
  return v14;
}

uint64_t JSC::setPrototypeSymmetricDifferenceCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::setPrototypeSymmetricDifferenceCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_1991259F0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x2721D00026F8ALL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::regExpPrototypeTestCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::regExpPrototypeTestCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125A00;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 63, 0, v5, COERCE_DOUBLE(0x273D50002721DLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncFromSyncIteratorPrototypeThrowCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeThrowCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125A20;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x27AC4000275E5), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::asyncGeneratorPrototypeThrowCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::asyncGeneratorPrototypeThrowCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125A30;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x27B3800027AC4), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::generatorPrototypeThrowCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::generatorPrototypeThrowCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125A40;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x27D0A00027B38), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::typedArrayPrototypeToLocaleStringCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::typedArrayPrototypeToLocaleStringCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125A50;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x27E4D00027D0ALL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeToReversedCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeToReversedCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125A60;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x27FA600027E4DLL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeToSortedCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeToSortedCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125A70;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x281A800027FA6), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeToSplicedCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeToSplicedCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125A80;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x286DC000281A8), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promiseConstructorTryCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::promiseConstructorTryCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125AA0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x28B3D00028965), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::typedArrayPrototypeTypedArraySpeciesConstructorCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD v11[3];

  v3 = JSC::BuiltinExecutables::typedArrayPrototypeTypedArraySpeciesConstructorCodeExecutable(this[11644]);
  v4 = JSC::BuiltinExecutables::typedArrayPrototypeTypedArraySpeciesConstructorCodeSource(this[11644], (uint64_t)v11);
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)v11, 0, 0, 0, v5, v4, v6, v7);
  v9 = (_DWORD *)v11[0];
  v11[0] = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::setPrototypeUnionCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::setPrototypeUnionCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125AB0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x28F0E00028CC9), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::arrayPrototypeWithCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::arrayPrototypeWithCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125AC0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x2918200028F0ELL), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

uint64_t JSC::promiseConstructorWithResolversCodeGenerator(JSC::BuiltinExecutables **this, JSC::VM *a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  double v6;
  float v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v11;
  __int128 v12;

  v3 = JSC::BuiltinExecutables::promiseConstructorWithResolversCodeExecutable(this[11644]);
  v4 = (_DWORD *)*((_QWORD *)this[11644] + 1);
  ++v4[2];
  v11 = v4;
  v12 = xmmword_199125AD0;
  v8 = JSC::UnlinkedFunctionExecutable::link(v3, (uint64_t)this, 0, (uint64_t)&v11, 0, 0, 0, v5, COERCE_DOUBLE(0x291C600029182), v6, v7);
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  return v8;
}

void JSC::OpaqueICUTimeZoneDeleter::operator()(int a1, WTF *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (this)
  {
    v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::~StringImpl(v9, this, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
      }
      else
      {
        *(_DWORD *)v9 -= 2;
      }
    }
    v10 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    if (v10)
      ucal_close();
    WTF::fastFree((unint64_t)this, this, a3, a4, a5, a6, a7, a8);
  }
}

unint64_t JSC::DateCache::calculateLocalTimeOffset(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;

  v8 = a2;
  if (!*a1)
    JSC::DateCache::timeZoneCacheSlow(a1, a2, a3, a4, a5, a6, a7, a8);
  ucal_setMillis();
  if (v8 == 1)
  {
    ucal_getTimeZoneOffsetFromLocal();
    v10 = 0;
    v9 = 0;
  }
  else
  {
    v9 = ucal_get();
    v10 = ucal_get();
  }
  return (v10 != 0) | ((unint64_t)(v10 + v9) << 32);
}

_QWORD *JSC::DateCache::DSTCache::leastRecentlyUsed(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = a1 + 33;
  v3 = a1 + 5;
  if (a1 + 1 != a2)
  {
    if (v3 == a2)
    {
      v3 = a1 + 1;
    }
    else if (a1[4] <= a1[8])
    {
      v3 = a1 + 1;
    }
    goto LABEL_5;
  }
  if (v3 != a2)
  {
LABEL_5:
    if (a1 + 9 != a2 && v3[3] > a1[12])
      v3 = a1 + 9;
    goto LABEL_8;
  }
  v3 = a1 + 9;
  if (a1 + 9 != a2)
  {
LABEL_8:
    if (a1 + 13 != a2 && v3[3] > a1[16])
      v3 = a1 + 13;
    goto LABEL_11;
  }
  v3 = a1 + 13;
  if (a1 + 13 != a2)
  {
LABEL_11:
    if (a1 + 17 != a2 && v3[3] > a1[20])
      v3 = a1 + 17;
    goto LABEL_14;
  }
  v3 = a1 + 17;
  if (a1 + 17 != a2)
  {
LABEL_14:
    if (a1 + 21 != a2 && v3[3] > a1[24])
      v3 = a1 + 21;
    goto LABEL_17;
  }
  v3 = a1 + 21;
  if (a1 + 21 != a2)
  {
LABEL_17:
    if (a1 + 25 != a2 && v3[3] > a1[28])
      v3 = a1 + 25;
    goto LABEL_20;
  }
  v3 = a1 + 25;
  if (a1 + 25 != a2)
  {
LABEL_20:
    if (a1 + 29 != a2 && v3[3] > a1[32])
      v3 = a1 + 29;
    goto LABEL_23;
  }
  v3 = a1 + 29;
  if (a1 + 29 != a2)
  {
LABEL_23:
    if (v2 != a2 && v3[3] > a1[36])
      v3 = a1 + 33;
    goto LABEL_26;
  }
  v3 = a1 + 33;
  if (v2 != a2)
  {
LABEL_26:
    if (a1 + 37 != a2 && v3[3] > a1[40])
      v3 = a1 + 37;
    goto LABEL_29;
  }
  v3 = a1 + 37;
  if (a1 + 37 != a2)
  {
LABEL_29:
    if (a1 + 41 != a2 && v3[3] > a1[44])
      v3 = a1 + 41;
    goto LABEL_32;
  }
  v3 = a1 + 41;
  if (a1 + 41 != a2)
  {
LABEL_32:
    if (a1 + 45 != a2 && v3[3] > a1[48])
      v3 = a1 + 45;
    goto LABEL_35;
  }
  v3 = a1 + 45;
  if (a1 + 45 != a2)
  {
LABEL_35:
    if (a1 + 49 != a2 && v3[3] > a1[52])
      v3 = a1 + 49;
    goto LABEL_38;
  }
  v3 = a1 + 49;
  if (a1 + 49 != a2)
  {
LABEL_38:
    if (a1 + 53 != a2 && v3[3] > a1[56])
      v3 = a1 + 53;
    goto LABEL_41;
  }
  v3 = a1 + 53;
  if (a1 + 53 != a2)
  {
LABEL_41:
    if (a1 + 57 != a2 && v3[3] > a1[60])
      v3 = a1 + 57;
    goto LABEL_44;
  }
  v3 = a1 + 57;
  if (a1 + 57 != a2)
  {
LABEL_44:
    if (a1 + 61 != a2 && v3[3] > a1[64])
      v3 = a1 + 61;
    goto LABEL_47;
  }
  v3 = a1 + 61;
  if (a1 + 61 != a2)
  {
LABEL_47:
    if (a1 + 65 != a2 && v3[3] > a1[68])
      v3 = a1 + 65;
    goto LABEL_50;
  }
  v3 = a1 + 65;
  if (a1 + 65 != a2)
  {
LABEL_50:
    if (a1 + 69 != a2 && v3[3] > a1[72])
      v3 = a1 + 69;
    goto LABEL_53;
  }
  v3 = a1 + 69;
  if (a1 + 69 != a2)
  {
LABEL_53:
    if (a1 + 73 != a2 && v3[3] > a1[76])
      v3 = a1 + 73;
    goto LABEL_56;
  }
  v3 = a1 + 73;
  if (a1 + 73 != a2)
  {
LABEL_56:
    if (a1 + 77 != a2 && v3[3] > a1[80])
      v3 = a1 + 77;
    goto LABEL_59;
  }
  v3 = a1 + 77;
  if (a1 + 77 != a2)
  {
LABEL_59:
    if (a1 + 81 != a2 && v3[3] > a1[84])
      v3 = a1 + 81;
    goto LABEL_62;
  }
  v3 = a1 + 81;
  if (a1 + 81 != a2)
  {
LABEL_62:
    if (a1 + 85 != a2 && v3[3] > a1[88])
      v3 = a1 + 85;
    goto LABEL_65;
  }
  v3 = a1 + 85;
  if (a1 + 85 != a2)
  {
LABEL_65:
    if (a1 + 89 != a2 && v3[3] > a1[92])
      v3 = a1 + 89;
    goto LABEL_68;
  }
  v3 = a1 + 89;
  if (a1 + 89 != a2)
  {
LABEL_68:
    if (a1 + 93 != a2 && v3[3] > a1[96])
      v3 = a1 + 93;
    goto LABEL_71;
  }
  v3 = a1 + 93;
  if (a1 + 93 != a2)
  {
LABEL_71:
    if (a1 + 97 != a2 && v3[3] > a1[100])
      v3 = a1 + 97;
    goto LABEL_74;
  }
  v3 = a1 + 97;
  if (a1 + 97 != a2)
  {
LABEL_74:
    if (a1 + 101 != a2 && v3[3] > a1[104])
      v3 = a1 + 101;
    goto LABEL_77;
  }
  v3 = a1 + 101;
  if (a1 + 101 != a2)
  {
LABEL_77:
    if (a1 + 105 != a2 && v3[3] > a1[108])
      v3 = a1 + 105;
    goto LABEL_80;
  }
  v3 = a1 + 105;
  if (a1 + 105 != a2)
  {
LABEL_80:
    if (a1 + 109 != a2 && v3[3] > a1[112])
      v3 = a1 + 109;
    goto LABEL_83;
  }
  v3 = a1 + 109;
  if (a1 + 109 != a2)
  {
LABEL_83:
    if (a1 + 113 != a2 && v3[3] > a1[116])
      v3 = a1 + 113;
    goto LABEL_86;
  }
  v3 = a1 + 113;
  if (a1 + 113 != a2)
  {
LABEL_86:
    if (a1 + 117 != a2 && v3[3] > a1[120])
      v3 = a1 + 117;
    goto LABEL_89;
  }
  v3 = a1 + 117;
  if (a1 + 117 != a2)
  {
LABEL_89:
    if (a1 + 121 != a2 && v3[3] > a1[124])
      v3 = a1 + 121;
    goto LABEL_92;
  }
  v3 = a1 + 121;
  if (a1 + 121 == a2)
  {
    v3 = a1 + 125;
    goto LABEL_95;
  }
LABEL_92:
  if (a1 + 125 != a2 && v3[3] > a1[128])
    v3 = a1 + 125;
LABEL_95:
  *(_OWORD *)v3 = xmmword_19914EE70;
  *((_OWORD *)v3 + 1) = xmmword_19914EE80;
  return v3;
}

uint64_t WTF::equivalentTime(WTF *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  int *v9;
  int *v11;
  int v12;
  int v13;
  char v15;
  signed int v16;
  int v17;
  unint64_t v18;
  BOOL v19;
  int *v20;
  int v21;

  v1 = (int)this;
  v2 = (uint64_t)this - 86399999;
  if ((uint64_t)this >= 0)
    v2 = (uint64_t)this;
  v3 = v2 / 86400000;
  v4 = WTF::yearMonthDayFromDays((WTF *)(v2 / 86400000));
  HIDWORD(v7) = -1030792151 * v4 + 85899344;
  LODWORD(v7) = HIDWORD(v7);
  v6 = v7 >> 2;
  LODWORD(v7) = HIDWORD(v7);
  v8 = v7 >> 4;
  v9 = WTF::firstDayOfMonth;
  if (v8 < 0xA3D70B || v6 > 0x28F5C28)
    v9 = &WTF::firstDayOfMonth[12];
  if ((v4 & 3) != 0)
    v11 = WTF::firstDayOfMonth;
  else
    v11 = v9;
  if ((int)v4 >= -399999)
    v12 = v4 + 399999;
  else
    v12 = v4 + 400002;
  v13 = (365 * ((int)v4 + 399999) + (v12 >> 2) + ((int)v4 + 399999) / -100 + ((int)v4 + 399999) / 400 + *v11 - 146816158)
      % 7;
  if (v13 < 0)
    LOBYTE(v13) = v13 + 7;
  if (v6 <= 0x28F5C28 && v8 >= 0xA3D70B)
    v15 = -81;
  else
    v15 = -92;
  if ((v4 & 3) != 0)
    v15 = -81;
  v16 = SHIDWORD(v4) / 12
      + ((SHIDWORD(v4) % 12) >> 31)
      + ((12 * v13) % 0x1Cu + v15 + 124) % 0x1Cu
      + 2008;
  v17 = SHIDWORD(v4) % 12 + (SHIDWORD(v4) % 12 < 0 ? 0xC : 0);
  if ((v16 & 3) == 0
    && ((HIDWORD(v18) = 85899344 - 1030792151 * v16, LODWORD(v18) = HIDWORD(v18), (v18 >> 2) <= 0x28F5C28)
      ? (v19 = v16 % 400 == 0)
      : (v19 = 1),
        v19))
  {
    v20 = &WTF::firstDayOfMonth[v17 + 12];
  }
  else
  {
    v20 = &WTF::firstDayOfMonth[v17];
  }
  v21 = v16 + 400002;
  if (v16 >= -399999)
    v21 = v16 + 399999;
  return v1
       - 86400000 * (int)v3
       + 86400000
       * (v5 - 146816163 + (v21 >> 2) + 365 * (v16 + 399999) + (v16 + 399999) / -100 + (v16 + 399999) / 400 + *v20);
}

double JSC::DateCache::DSTCache::reset(JSC::DateCache::DSTCache *this)
{
  double result;

  *(_OWORD *)((char *)this + 8) = xmmword_19914EE70;
  *((_QWORD *)this + 3) = -8640000000000000;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  result = 4.26872718e-308;
  *((_OWORD *)this + 3) = xmmword_19914EE90;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_OWORD *)this + 5) = xmmword_19914EE90;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_OWORD *)this + 7) = xmmword_19914EE90;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_OWORD *)this + 9) = xmmword_19914EE90;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_OWORD *)this + 11) = xmmword_19914EE90;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_OWORD *)this + 13) = xmmword_19914EE90;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_OWORD *)this + 15) = xmmword_19914EE90;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_OWORD *)this + 17) = xmmword_19914EE90;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_OWORD *)this + 19) = xmmword_19914EE90;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_OWORD *)this + 21) = xmmword_19914EE90;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_OWORD *)this + 23) = xmmword_19914EE90;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_OWORD *)this + 25) = xmmword_19914EE90;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_OWORD *)this + 27) = xmmword_19914EE90;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_OWORD *)this + 29) = xmmword_19914EE90;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_OWORD *)this + 31) = xmmword_19914EE90;
  *((_QWORD *)this + 65) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_OWORD *)this + 33) = xmmword_19914EE90;
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_OWORD *)this + 35) = xmmword_19914EE90;
  *((_QWORD *)this + 73) = 0;
  *((_QWORD *)this + 72) = 0;
  *((_OWORD *)this + 37) = xmmword_19914EE90;
  *((_QWORD *)this + 77) = 0;
  *((_QWORD *)this + 76) = 0;
  *((_OWORD *)this + 39) = xmmword_19914EE90;
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 80) = 0;
  *((_OWORD *)this + 41) = xmmword_19914EE90;
  *((_QWORD *)this + 85) = 0;
  *((_QWORD *)this + 84) = 0;
  *((_OWORD *)this + 43) = xmmword_19914EE90;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 88) = 0;
  *((_OWORD *)this + 45) = xmmword_19914EE90;
  *((_QWORD *)this + 93) = 0;
  *((_QWORD *)this + 92) = 0;
  *((_OWORD *)this + 47) = xmmword_19914EE90;
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 96) = 0;
  *((_OWORD *)this + 49) = xmmword_19914EE90;
  *((_QWORD *)this + 101) = 0;
  *((_QWORD *)this + 100) = 0;
  *((_OWORD *)this + 51) = xmmword_19914EE90;
  *((_QWORD *)this + 105) = 0;
  *((_QWORD *)this + 104) = 0;
  *((_OWORD *)this + 53) = xmmword_19914EE90;
  *((_QWORD *)this + 109) = 0;
  *((_QWORD *)this + 108) = 0;
  *((_OWORD *)this + 55) = xmmword_19914EE90;
  *((_QWORD *)this + 113) = 0;
  *((_QWORD *)this + 112) = 0;
  *((_OWORD *)this + 57) = xmmword_19914EE90;
  *((_QWORD *)this + 117) = 0;
  *((_QWORD *)this + 116) = 0;
  *((_OWORD *)this + 59) = xmmword_19914EE90;
  *((_QWORD *)this + 121) = 0;
  *((_QWORD *)this + 120) = 0;
  *((_OWORD *)this + 61) = xmmword_19914EE90;
  *((_QWORD *)this + 125) = 0;
  *((_QWORD *)this + 124) = 0;
  *((_OWORD *)this + 63) = xmmword_19914EE90;
  *((_QWORD *)this + 128) = 0;
  *((_QWORD *)this + 129) = (char *)this + 8;
  *((_QWORD *)this + 130) = (char *)this + 40;
  *(_QWORD *)this = 0;
  return result;
}

uint64_t **JSC::DateCache::gregorianDateTimeToMS(uint64_t **result, _DWORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  _BOOL4 v15;
  double v16;

  v9 = a2[1];
  v10 = v9 / 12 + *a2;
  v11 = v9 % 12;
  if (v11 < 0)
  {
    v11 += 12;
    --v10;
  }
  v12 = 1;
  HIDWORD(v14) = -1030792151 * v10 + 85899344;
  LODWORD(v14) = HIDWORD(v14);
  v13 = v14 >> 4;
  LODWORD(v14) = HIDWORD(v14);
  v15 = (v14 >> 2) > 0x28F5C28;
  if (v13 >= 0xA3D70B)
    v12 = v15;
  if ((v10 & 3) != 0)
    v12 = 0;
  v16 = a9
      + ((double)(int)a2[7] + ((double)(int)a2[6] + (double)(int)a2[5] * 60.0) * 60.0) * 1000.0
      + (floor(floor(((double)v10 + -1.0) / 400.0)+ -4.0+ floor(((double)v10 + -1.0) * 0.25)+ -492.0+ ((double)v10 + -1970.0) * 365.0- (floor(((double)v10 + -1.0) / 100.0)+ -19.0))+ (double)(a2[3] + WTF::firstDayOfMonth[12 * v12 + v11] - 1))* 86400000.0;
  if (a3 == 1 && (*(_QWORD *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    return (uint64_t **)JSC::DateCache::localTimeOffset(result, (WTF *)(uint64_t)v16, 1, a4, a5, a6, a7, a8);
  return result;
}

unint64_t JSC::DateCache::localTimeOffset(uint64_t **a1, WTF *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v8;
  uint64_t v9;
  uint64_t **v10;
  JSC::DateCache::DSTCache *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t **v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  int8x16_t *v25;
  uint64_t **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 **v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v40;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v99;

  if (a3 >= 2)
  {
    __break(1u);
LABEL_92:
    JSC::DateCache::DSTCache::reset(v11);
    goto LABEL_5;
  }
  v9 = a3;
  v8 = this;
  v10 = a1;
  v13 = 8640000000000000;
  v12 = a3;
  v14 = a1 + 1;
  v11 = (JSC::DateCache::DSTCache *)&a1[131 * a3 + 1];
  if ((unint64_t)this + 8640000000000000 >= 0x3D641185B80001)
    v8 = (WTF *)WTF::equivalentTime(this);
  if (*((_DWORD *)v11 + 1))
    goto LABEL_92;
LABEL_5:
  v15 = &v14[131 * v12];
  v16 = (unint64_t *)v15[129];
  v17 = v16[1];
  if (v17 <= (uint64_t)v8 && (uint64_t)v8 <= (uint64_t)v16[2])
  {
    v18 = *(_QWORD *)v11 + 1;
    *(_QWORD *)v11 = v18;
    v16[3] = v18;
    v19 = *v16;
LABEL_8:
    v20 = HIDWORD(v19);
    return v19 | ((unint64_t)v20 << 32);
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = (int8x16_t *)(v15 + 129);
  v26 = &v10[131 * v12];
  do
  {
    v27 = (uint64_t)v26[v22 + 3];
    if (v27 <= (uint64_t)v8)
    {
      if (v24)
      {
        if ((uint64_t)v24[1] < v27)
          v24 = (unint64_t *)&v26[v22 + 2];
      }
      else
      {
        v24 = (unint64_t *)&v26[v22 + 2];
      }
    }
    else
    {
      v28 = (uint64_t)v26[v22 + 4];
      if (v28 > (uint64_t)v8 && (!v23 || (uint64_t)v23[2] > v28))
        v23 = (unint64_t *)&v26[v22 + 2];
    }
    v22 += 4;
  }
  while (v22 != 128);
  if (!v24)
  {
    v24 = v16;
    if (v17 <= (uint64_t)v16[2])
    {
      v89 = v23;
      v90 = JSC::DateCache::DSTCache::leastRecentlyUsed(v11, v23);
      v23 = v89;
      v24 = v90;
    }
  }
  if (!v23)
  {
    v23 = (unint64_t *)v14[131 * v12 + 130];
    if ((uint64_t)v23[1] <= (uint64_t)v23[2] || v24 == v23)
      v23 = JSC::DateCache::DSTCache::leastRecentlyUsed(v11, v24);
  }
  v25->i64[0] = (uint64_t)v24;
  v30 = &v14[131 * v12];
  v30[130] = (uint64_t *)v23;
  v31 = v24[2];
  if ((uint64_t)v24[1] > v31)
  {
    v19 = JSC::DateCache::calculateLocalTimeOffset(v10, v9, a3, a4, a5, a6, a7, a8);
    v20 = HIDWORD(v19);
    *(_QWORD *)v25->i64[0] = v19;
    v87 = (_QWORD *)v25->i64[0];
    v87[1] = v8;
    v87[2] = v8;
    v88 = *(_QWORD *)v11 + 1;
    *(_QWORD *)v11 = v88;
    v87[3] = v88;
    return v19 | ((unint64_t)v20 << 32);
  }
  if ((uint64_t)v8 <= v31)
  {
    v32 = *(_QWORD *)v11 + 1;
    *(_QWORD *)v11 = v32;
    v24[3] = v32;
    v19 = *v24;
    goto LABEL_8;
  }
  v33 = (unsigned __int8 **)(v30 + 130);
  if ((uint64_t)v8 - 1641600000 <= v31)
  {
    v34 = *(_QWORD *)v11;
    v35 = *(_QWORD *)v11 + 1;
    *(_QWORD *)v11 = v35;
    v24[3] = v35;
    if (v31 < 8639998358400000)
      v13 = v31 + 1641600000;
    if (v13 > (uint64_t)v23[1])
    {
      v42 = v34 + 2;
      *(_QWORD *)v11 = v34 + 2;
    }
    else
    {
      v36 = JSC::DateCache::calculateLocalTimeOffset(v10, v9, a3, a4, a5, a6, a7, a8);
      v23 = (unint64_t *)*v33;
      v37 = *((_QWORD *)*v33 + 1);
      v38 = *((_QWORD *)*v33 + 2);
      v40 = **v33 == v36 && *((_DWORD *)*v33 + 1) == HIDWORD(v36) && v37 - 1641600000 <= v13;
      if (v40 && v38 >= v13)
      {
        v23[1] = v13;
LABEL_52:
        v43 = v25->i64[0];
        if (*(unsigned __int8 *)v25->i64[0] == *(unsigned __int8 *)v23 && *(_DWORD *)(v43 + 4) == *((_DWORD *)v23 + 1))
        {
          *(_QWORD *)(v43 + 16) = v23[2];
          *(_OWORD *)v23 = xmmword_19914EE70;
          *((_OWORD *)v23 + 1) = xmmword_19914EE80;
          v19 = *(_QWORD *)v25->i64[0];
          goto LABEL_8;
        }
        v44 = v23[1];
        v45 = *(_QWORD *)(v43 + 16);
        v40 = v44 < v45;
        v46 = v44 - v45;
        if (v40)
          ++v46;
        v47 = v45 + (v46 >> 1);
        v19 = JSC::DateCache::calculateLocalTimeOffset(v10, v9, a3, a4, a5, a6, a7, a8);
        v20 = HIDWORD(v19);
        v54 = (unsigned __int8 *)v25->i64[0];
        if (*(unsigned __int8 *)v25->i64[0] == v19 && *(_DWORD *)(v25->i64[0] + 4) == HIDWORD(v19))
        {
          *((_QWORD *)v54 + 2) = v47;
          if ((uint64_t)v8 <= v47)
            return v19 | ((unint64_t)v20 << 32);
        }
        else
        {
          v56 = (unint64_t *)*v33;
          *((_QWORD *)*v33 + 1) = v47;
          if ((uint64_t)v8 >= v47)
            goto LABEL_103;
          v47 = *((_QWORD *)v54 + 2);
        }
        v57 = *((_QWORD *)*v33 + 1);
        v40 = v57 < v47;
        v58 = v57 - v47;
        if (v40)
          ++v58;
        v59 = v47 + (v58 >> 1);
        v19 = JSC::DateCache::calculateLocalTimeOffset(v10, v9, v48, v49, v50, v51, v52, v53);
        v20 = HIDWORD(v19);
        v54 = (unsigned __int8 *)v25->i64[0];
        if (*(unsigned __int8 *)v25->i64[0] == v19 && *(_DWORD *)(v25->i64[0] + 4) == HIDWORD(v19))
        {
          *((_QWORD *)v54 + 2) = v59;
          if ((uint64_t)v8 <= v59)
            return v19 | ((unint64_t)v20 << 32);
        }
        else
        {
          v56 = (unint64_t *)*v33;
          *((_QWORD *)*v33 + 1) = v59;
          if ((uint64_t)v8 >= v59)
            goto LABEL_103;
          v59 = *((_QWORD *)v54 + 2);
        }
        v67 = *((_QWORD *)*v33 + 1);
        v40 = v67 < v59;
        v68 = v67 - v59;
        if (v40)
          ++v68;
        v69 = v59 + (v68 >> 1);
        v19 = JSC::DateCache::calculateLocalTimeOffset(v10, v9, v60, v61, v62, v63, v64, v65);
        v20 = HIDWORD(v19);
        v54 = (unsigned __int8 *)v25->i64[0];
        if (*(unsigned __int8 *)v25->i64[0] == v19 && *(_DWORD *)(v25->i64[0] + 4) == HIDWORD(v19))
        {
          *((_QWORD *)v54 + 2) = v69;
          if ((uint64_t)v8 <= v69)
            return v19 | ((unint64_t)v20 << 32);
        }
        else
        {
          v56 = (unint64_t *)*v33;
          *((_QWORD *)*v33 + 1) = v69;
          if ((uint64_t)v8 >= v69)
            goto LABEL_103;
          v69 = *((_QWORD *)v54 + 2);
        }
        v77 = *((_QWORD *)*v33 + 1);
        v40 = v77 < v69;
        v78 = v77 - v69;
        if (v40)
          ++v78;
        v79 = v69 + (v78 >> 1);
        v19 = JSC::DateCache::calculateLocalTimeOffset(v10, v9, v70, v71, v72, v73, v74, v75);
        v20 = HIDWORD(v19);
        v54 = (unsigned __int8 *)v25->i64[0];
        if (*(unsigned __int8 *)v25->i64[0] == v19 && *(_DWORD *)(v25->i64[0] + 4) == HIDWORD(v19))
        {
          *((_QWORD *)v54 + 2) = v79;
          if ((uint64_t)v8 <= v79)
            return v19 | ((unint64_t)v20 << 32);
        }
        else
        {
          v56 = (unint64_t *)*v33;
          *((_QWORD *)*v33 + 1) = v79;
          if ((uint64_t)v8 >= v79)
            goto LABEL_103;
        }
        v19 = JSC::DateCache::calculateLocalTimeOffset(v10, v9, v80, v81, v82, v83, v84, v85);
        v20 = HIDWORD(v19);
        v54 = (unsigned __int8 *)v25->i64[0];
        if (__PAIR64__(*(_DWORD *)(v25->i64[0] + 4), *(unsigned __int8 *)v25->i64[0]) == __PAIR64__(HIDWORD(v19), v19))
        {
          *((_QWORD *)v54 + 2) = v8;
          return v19 | ((unint64_t)v20 << 32);
        }
        v56 = (unint64_t *)*v33;
        *((_QWORD *)*v33 + 1) = v8;
LABEL_103:
        v25->i64[0] = (uint64_t)v56;
        *v33 = v54;
        return v19 | ((unint64_t)v20 << 32);
      }
      if (v37 <= v38)
      {
        v23 = JSC::DateCache::DSTCache::leastRecentlyUsed(v11, v25->i64[0]);
        *v33 = (unsigned __int8 *)v23;
      }
      v23[1] = v13;
      v23[2] = v13;
      *v23 = v36;
      v42 = *(_QWORD *)v11 + 1;
      *(_QWORD *)v11 = v42;
      v23 = (unint64_t *)*v33;
    }
    v23[3] = v42;
    goto LABEL_52;
  }
  v91 = JSC::DateCache::calculateLocalTimeOffset(v10, v9, a3, a4, a5, a6, a7, a8);
  v20 = HIDWORD(v91);
  v92 = (unint64_t *)*v33;
  v93 = *((_QWORD *)*v33 + 1);
  v94 = *((_QWORD *)*v33 + 2);
  v95 = v91;
  if (**v33 != v91
    || *((_DWORD *)*v33 + 1) != HIDWORD(v91)
    || v93 - 1641600000 > (uint64_t)v8
    || v94 < (uint64_t)v8)
  {
    if (v93 <= v94)
    {
      v92 = JSC::DateCache::DSTCache::leastRecentlyUsed(v11, v25->i64[0]);
      *v33 = (unsigned __int8 *)v92;
    }
    v92[1] = (unint64_t)v8;
    v92[2] = (unint64_t)v8;
    *v92 = v95;
    v99 = *(_QWORD *)v11 + 1;
    *(_QWORD *)v11 = v99;
    *((_QWORD *)*v33 + 3) = v99;
  }
  else
  {
    v92[1] = (unint64_t)v8;
  }
  *v25 = vextq_s8(*v25, *v25, 8uLL);
  LODWORD(v19) = v95;
  return v19 | ((unint64_t)v20 << 32);
}

uint64_t JSC::DateCache::msToGregorianDateTime(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  double v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  _BOOL4 v32;
  int v33;
  int v34;
  uint64_t result;
  unint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v46;
  int v47;
  int v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v67;
  uint64_t v69;
  unsigned __int8 *v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t *v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v126;
  __int128 v127;
  _OWORD v128[2];
  uint64_t v129;

  v10 = a9;
  if (a2 == 1 && (*(_QWORD *)&a9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v12 = 8640000000000000;
    v13 = (uint64_t)a9;
    v14 = (uint64_t *)(a1 + 8);
    if ((unint64_t)((uint64_t)a9 + 8640000000000000) >= 0x3D641185B80001)
      v13 = WTF::equivalentTime((WTF *)(uint64_t)a9);
    if (*(_DWORD *)(a1 + 12))
      JSC::DateCache::DSTCache::reset((JSC::DateCache::DSTCache *)(a1 + 8));
    v15 = *(unint64_t **)(a1 + 1040);
    v16 = v15[1];
    if (v16 <= v13 && v13 <= (uint64_t)v15[2])
    {
      v17 = *v14 + 1;
      *v14 = v17;
      v15[3] = v17;
      v18 = *v15;
LABEL_10:
      v19 = HIDWORD(v18);
LABEL_11:
      v20 = v18;
      v10 = (double)(int)v19 + v10;
      v21 = v18 & 0xFFFFFF00;
      goto LABEL_12;
    }
    v53 = 0;
    v54 = 0;
    v55 = 0;
    do
    {
      v56 = *(_QWORD *)(a1 + v53 + 24);
      if (v56 <= v13)
      {
        if (v55)
        {
          if ((uint64_t)v55[1] < v56)
            v55 = (unint64_t *)(a1 + v53 + 16);
        }
        else
        {
          v55 = (unint64_t *)(a1 + v53 + 16);
        }
      }
      else
      {
        v57 = *(_QWORD *)(a1 + v53 + 32);
        if (v57 > v13 && (!v54 || (uint64_t)v54[2] > v57))
          v54 = (unint64_t *)(a1 + v53 + 16);
      }
      v53 += 32;
    }
    while (v53 != 1024);
    if (!v55)
    {
      v55 = *(unint64_t **)(a1 + 1040);
      if (v16 <= (uint64_t)v15[2])
      {
        v116 = v54;
        v117 = JSC::DateCache::DSTCache::leastRecentlyUsed((_QWORD *)(a1 + 8), v54);
        v54 = v116;
        v55 = v117;
      }
    }
    if (!v54)
    {
      v54 = *(unint64_t **)(a1 + 1048);
      if ((uint64_t)v54[1] <= (uint64_t)v54[2] || v55 == v54)
        v54 = JSC::DateCache::DSTCache::leastRecentlyUsed((_QWORD *)(a1 + 8), v55);
    }
    *(_QWORD *)(a1 + 1040) = v55;
    *(_QWORD *)(a1 + 1048) = v54;
    v59 = v55[2];
    if ((uint64_t)v55[1] > v59)
    {
      v18 = JSC::DateCache::calculateLocalTimeOffset((uint64_t **)a1, 0, a3, a4, a5, a6, a7, a8);
      v19 = HIDWORD(v18);
      **(_QWORD **)(a1 + 1040) = v18;
      v114 = *(_QWORD **)(a1 + 1040);
      v114[1] = v13;
      v114[2] = v13;
      v115 = *(_QWORD *)(a1 + 8) + 1;
      *(_QWORD *)(a1 + 8) = v115;
      v114[3] = v115;
      goto LABEL_11;
    }
    if (v13 <= v59)
    {
      v60 = *v14 + 1;
      *v14 = v60;
      v55[3] = v60;
      v18 = *v55;
      goto LABEL_10;
    }
    if (v13 - 1641600000 > v59)
    {
      v118 = JSC::DateCache::calculateLocalTimeOffset((uint64_t **)a1, 0, a3, a4, a5, a6, a7, a8);
      v19 = HIDWORD(v118);
      v119 = *(_QWORD **)(a1 + 1048);
      v120 = v119[1];
      v121 = v119[2];
      v122 = v118;
      if (*(unsigned __int8 *)v119 != v118
        || *((_DWORD *)v119 + 1) != HIDWORD(v118)
        || v120 - 1641600000 > v13
        || v121 < v13)
      {
        if (v120 <= v121)
        {
          v119 = JSC::DateCache::DSTCache::leastRecentlyUsed((_QWORD *)(a1 + 8), *(_QWORD **)(a1 + 1040));
          *(_QWORD *)(a1 + 1048) = v119;
        }
        v119[1] = v13;
        v119[2] = v13;
        *v119 = v122;
        v126 = *(_QWORD *)(a1 + 8) + 1;
        *(_QWORD *)(a1 + 8) = v126;
        *(_QWORD *)(*(_QWORD *)(a1 + 1048) + 24) = v126;
      }
      else
      {
        v119[1] = v13;
      }
      *(int8x16_t *)(a1 + 1040) = vextq_s8(*(int8x16_t *)(a1 + 1040), *(int8x16_t *)(a1 + 1040), 8uLL);
      LODWORD(v18) = v122;
      goto LABEL_11;
    }
    v61 = *v14;
    v62 = *v14 + 1;
    *v14 = v62;
    v55[3] = v62;
    if (v59 < 8639998358400000)
      v12 = v59 + 1641600000;
    if (v12 > (uint64_t)v54[1])
    {
      v69 = v61 + 2;
      *v14 = v61 + 2;
    }
    else
    {
      v63 = JSC::DateCache::calculateLocalTimeOffset((uint64_t **)a1, 0, a3, a4, a5, a6, a7, a8);
      v54 = *(unint64_t **)(a1 + 1048);
      v64 = v54[1];
      v65 = v54[2];
      v67 = *(unsigned __int8 *)v54 == v63
         && *((_DWORD *)v54 + 1) == HIDWORD(v63)
         && v64 - 1641600000 <= v12;
      if (v67 && v65 >= v12)
      {
        v54[1] = v12;
LABEL_90:
        v70 = *(unsigned __int8 **)(a1 + 1040);
        if (*v70 == *(unsigned __int8 *)v54 && *((_DWORD *)v70 + 1) == *((_DWORD *)v54 + 1))
        {
          *((_QWORD *)v70 + 2) = v54[2];
          *(_OWORD *)v54 = xmmword_19914EE70;
          *((_OWORD *)v54 + 1) = xmmword_19914EE80;
          v18 = **(_QWORD **)(a1 + 1040);
          goto LABEL_10;
        }
        v71 = v54[1];
        v72 = *((_QWORD *)v70 + 2);
        v67 = v71 < v72;
        v73 = v71 - v72;
        if (v67)
          ++v73;
        v74 = v72 + (v73 >> 1);
        v18 = JSC::DateCache::calculateLocalTimeOffset((uint64_t **)a1, 0, a3, a4, a5, a6, a7, a8);
        v19 = HIDWORD(v18);
        v81 = *(unsigned __int8 **)(a1 + 1040);
        if (*v81 == v18 && *((_DWORD *)v81 + 1) == HIDWORD(v18))
        {
          *((_QWORD *)v81 + 2) = v74;
          if (v13 <= v74)
            goto LABEL_11;
        }
        else
        {
          v83 = *(_QWORD *)(a1 + 1048);
          *(_QWORD *)(v83 + 8) = v74;
          if (v13 >= v74)
            goto LABEL_153;
          v74 = *((_QWORD *)v81 + 2);
        }
        v84 = *(_QWORD *)(*(_QWORD *)(a1 + 1048) + 8);
        v67 = v84 < v74;
        v85 = v84 - v74;
        if (v67)
          ++v85;
        v86 = v74 + (v85 >> 1);
        v18 = JSC::DateCache::calculateLocalTimeOffset((uint64_t **)a1, 0, v75, v76, v77, v78, v79, v80);
        v19 = HIDWORD(v18);
        v81 = *(unsigned __int8 **)(a1 + 1040);
        if (*v81 == v18 && *((_DWORD *)v81 + 1) == HIDWORD(v18))
        {
          *((_QWORD *)v81 + 2) = v86;
          if (v13 <= v86)
            goto LABEL_11;
        }
        else
        {
          v83 = *(_QWORD *)(a1 + 1048);
          *(_QWORD *)(v83 + 8) = v86;
          if (v13 >= v86)
            goto LABEL_153;
          v86 = *((_QWORD *)v81 + 2);
        }
        v94 = *(_QWORD *)(*(_QWORD *)(a1 + 1048) + 8);
        v67 = v94 < v86;
        v95 = v94 - v86;
        if (v67)
          ++v95;
        v96 = v86 + (v95 >> 1);
        v18 = JSC::DateCache::calculateLocalTimeOffset((uint64_t **)a1, 0, v87, v88, v89, v90, v91, v92);
        v19 = HIDWORD(v18);
        v81 = *(unsigned __int8 **)(a1 + 1040);
        if (*v81 == v18 && *((_DWORD *)v81 + 1) == HIDWORD(v18))
        {
          *((_QWORD *)v81 + 2) = v96;
          if (v13 <= v96)
            goto LABEL_11;
        }
        else
        {
          v83 = *(_QWORD *)(a1 + 1048);
          *(_QWORD *)(v83 + 8) = v96;
          if (v13 >= v96)
            goto LABEL_153;
          v96 = *((_QWORD *)v81 + 2);
        }
        v104 = *(_QWORD *)(*(_QWORD *)(a1 + 1048) + 8);
        v67 = v104 < v96;
        v105 = v104 - v96;
        if (v67)
          ++v105;
        v106 = v96 + (v105 >> 1);
        v18 = JSC::DateCache::calculateLocalTimeOffset((uint64_t **)a1, 0, v97, v98, v99, v100, v101, v102);
        v19 = HIDWORD(v18);
        v81 = *(unsigned __int8 **)(a1 + 1040);
        if (*v81 == v18 && *((_DWORD *)v81 + 1) == HIDWORD(v18))
        {
          *((_QWORD *)v81 + 2) = v106;
          if (v13 <= v106)
            goto LABEL_11;
        }
        else
        {
          v83 = *(_QWORD *)(a1 + 1048);
          *(_QWORD *)(v83 + 8) = v106;
          if (v13 >= v106)
            goto LABEL_153;
        }
        v18 = JSC::DateCache::calculateLocalTimeOffset((uint64_t **)a1, 0, v107, v108, v109, v110, v111, v112);
        v19 = HIDWORD(v18);
        v81 = *(unsigned __int8 **)(a1 + 1040);
        if (__PAIR64__(*((_DWORD *)v81 + 1), *v81) == v18)
        {
          *((_QWORD *)v81 + 2) = v13;
          goto LABEL_11;
        }
        v83 = *(_QWORD *)(a1 + 1048);
        *(_QWORD *)(v83 + 8) = v13;
LABEL_153:
        *(_QWORD *)(a1 + 1040) = v83;
        *(_QWORD *)(a1 + 1048) = v81;
        goto LABEL_11;
      }
      if (v64 <= v65)
      {
        v54 = JSC::DateCache::DSTCache::leastRecentlyUsed((_QWORD *)(a1 + 8), *(_QWORD **)(a1 + 1040));
        *(_QWORD *)(a1 + 1048) = v54;
      }
      v54[1] = v12;
      v54[2] = v12;
      *v54 = v63;
      v69 = *(_QWORD *)(a1 + 8) + 1;
      *(_QWORD *)(a1 + 8) = v69;
      v54 = *(unint64_t **)(a1 + 1048);
    }
    v54[3] = v69;
    goto LABEL_90;
  }
  v20 = 0;
  v19 = 0;
  v21 = 0;
LABEL_12:
  if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    result = WTF::GregorianDateTime::GregorianDateTime((uint64_t)v128, v21 | (v19 << 32) | v20, v10);
    v127 = v128[1];
    *(_OWORD *)a3 = v128[0];
    *(_OWORD *)(a3 + 16) = v127;
    *(_QWORD *)(a3 + 32) = v129;
    return result;
  }
  v22 = (uint64_t)v10 - 86399999;
  if ((uint64_t)v10 >= 0)
    v22 = (uint64_t)v10;
  v23 = (int)v22 / 86400000;
  v24 = (uint64_t)v10 - 86400000 * v23;
  v25 = *(unsigned __int8 *)(a1 + 2120);
  if (!*(_BYTE *)(a1 + 2120)
    || (v26 = *(_DWORD *)(a1 + 2116) + v23 - *(_DWORD *)(a1 + 2104), (v26 - 1) > 0x1B))
  {
    v38 = (v23 + 146816528) % 146097;
    v39 = (v38 - 1) / 36524;
    v40 = (v38 - 1) % 36524;
    v41 = (v40 + 1) / 1461;
    v42 = (v40 + 1) % 1461;
    v43 = ((22983 * (__int16)(v42 - 1)) >> 23) + ((22983 * (__int16)(v42 - 1)) >> 31);
    v44 = v40 - 1460;
    v46 = (v38 + 36522) < 0x11D57 || v44 < 0xFFFFF497;
    v47 = v46 && (v42 + 363) < 0x2D9;
    v48 = v47 + (__int16)(v42 - 1) % 365;
    if (v47)
      v49 = 60;
    else
      v49 = 59;
    v50 = __OFSUB__(v48, v49);
    v51 = v48 - v49;
    if (((v51 & 0x80000000) != 0) != v50)
    {
      v26 = v48 - 30;
      v52 = 0x100000000;
      if (v48 <= 30)
      {
        v52 = 0;
        v26 = v48 + 1;
      }
      goto LABEL_40;
    }
    if ((int)v51 > 30)
    {
      if (v51 >= 0x3D)
      {
        if (v51 >= 0x5C)
        {
          if (v51 >= 0x7A)
          {
            if (v51 >= 0x99)
            {
              if (v51 >= 0xB8)
              {
                if (v51 >= 0xD6)
                {
                  if (v51 >= 0xF5)
                  {
                    if (v51 >= 0x113)
                    {
                      if (v51 >= 0x132)
                      {
                        v52 = 0;
                        v26 = 0;
LABEL_40:
                        v27 = (100 * v39 + 400 * ((v23 + 146816528) / 146097) + 4 * v41 - 400000 + v43) | v52;
                        *(_DWORD *)(a1 + 2104) = v23;
                        *(_DWORD *)(a1 + 2108) = v27;
                        v28 = HIDWORD(v52);
                        *(_DWORD *)(a1 + 2112) = HIDWORD(v52);
                        *(_DWORD *)(a1 + 2116) = v26;
                        if (!v25)
                          *(_BYTE *)(a1 + 2120) = 1;
                        goto LABEL_18;
                      }
                      v52 = 0xB00000000;
                      v51 -= 275;
                    }
                    else
                    {
                      v52 = 0xA00000000;
                      v51 -= 245;
                    }
                  }
                  else
                  {
                    v52 = 0x900000000;
                    v51 -= 214;
                  }
                }
                else
                {
                  v52 = 0x800000000;
                  v51 -= 184;
                }
              }
              else
              {
                v52 = 0x700000000;
                v51 -= 153;
              }
            }
            else
            {
              v52 = 0x600000000;
              v51 -= 122;
            }
          }
          else
          {
            v52 = 0x500000000;
            v51 -= 92;
          }
        }
        else
        {
          v52 = 0x400000000;
          v51 -= 61;
        }
      }
      else
      {
        v51 -= 31;
        v52 = 0x300000000;
      }
    }
    else
    {
      v52 = 0x200000000;
    }
    v26 = v51 + 1;
    goto LABEL_40;
  }
  v27 = *(_DWORD *)(a1 + 2108);
  LODWORD(v28) = *(_DWORD *)(a1 + 2112);
  *(_DWORD *)(a1 + 2104) = v23;
  *(_DWORD *)(a1 + 2116) = v26;
LABEL_18:
  v29 = v24 / 3600000;
  v30 = v24 / 60000 % 60;
  v31 = v24 / 1000 % 60;
  if ((v27 & 3) != 0)
  {
    v32 = 0;
  }
  else
  {
    HIDWORD(v36) = -1030792151 * v27 + 85899344;
    LODWORD(v36) = HIDWORD(v36);
    if ((v36 >> 4) < 0xA3D70B)
    {
      v32 = 1;
    }
    else
    {
      HIDWORD(v37) = -1030792151 * v27 + 85899344;
      LODWORD(v37) = HIDWORD(v37);
      v32 = (v37 >> 2) > 0x28F5C28;
    }
  }
  v33 = v26 + WTF::firstDayOfMonth[12 * v32 + (int)v28] - 1;
  v34 = (v23 + 4) % 7;
  result = (v34 + 7);
  *(_DWORD *)a3 = v27;
  *(_DWORD *)(a3 + 4) = v28;
  *(_DWORD *)(a3 + 8) = v33;
  *(_DWORD *)(a3 + 12) = v26;
  *(_DWORD *)(a3 + 16) = v34 + (v34 < 0 ? 7 : 0);
  *(_DWORD *)(a3 + 20) = v29;
  *(_DWORD *)(a3 + 24) = v30;
  *(_DWORD *)(a3 + 28) = v31;
  *(_DWORD *)(a3 + 32) = (int)v19 / 60000;
  *(_DWORD *)(a3 + 36) = v20 != 0;
  return result;
}

double JSC::DateCache::parseDate(JSC::DateCache *this, JSC::JSGlobalObject *a2, JSC::VM *a3, WTF **a4)
{
  WTF *v6;
  const WTF::StringImpl *v7;
  BOOL v9;
  double v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  WTF::StringImpl *v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  char v22;
  char *v23;
  unint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  WTF *v33;
  WTF::StringImpl *v34;
  int v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  JSC::VM *v54;
  char v55;

  v54 = a3;
  v6 = *a4;
  v7 = (const WTF::StringImpl *)*((_QWORD *)this + 266);
  if (*a4 == v7)
    return *((double *)this + 267);
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    if (WTF::equal(v6, v7, a3))
      return *((double *)this + 267);
    v6 = *a4;
  }
  if (v6 && (WTF::StringImpl::replace((uint64_t)v6, 0x202Fu, 0x20u, &v52), (v18 = (WTF::StringImpl *)v52) != 0))
  {
    v19 = *(char **)(v52 + 8);
    v20 = *(unsigned int *)(v52 + 4);
    if ((*(_BYTE *)(v52 + 16) & 4) != 0)
      WTF::StringImpl::utf8ForCharacters(v19, v20, (uint64_t)&v52, v17);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v19, v20, 0, v12, v13, v14, v15, v16, (uint64_t)&v52);
    v22 = 0;
  }
  else
  {
    v21 = WTF::fastMalloc((WTF *)0x11);
    v18 = 0;
    v22 = 1;
    *(_DWORD *)v21 = 1;
    *(_QWORD *)(v21 + 8) = 0;
    v52 = v21;
    *(_BYTE *)(v21 + 16) = 0;
    v53 = 0;
  }
  if (!v53)
  {
    if (v52)
    {
      v23 = (char *)(v52 + 16);
      v24 = *(_QWORD *)(v52 + 8);
    }
    else
    {
      v24 = 0;
      v23 = 0;
    }
    v55 = 0;
    WTF::parseES5Date(v23, v24, &v55);
    v10 = v32;
    if (v55 && (*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      v10 = v32
          - (double)(int)(JSC::DateCache::localTimeOffset((uint64_t **)this, (WTF *)(uint64_t)v32, 1, v27, v28, v29, v30, v31) >> 32);
    v33 = *a4;
    if (*a4)
      *(_DWORD *)v33 += 2;
    v34 = (WTF::StringImpl *)*((_QWORD *)this + 266);
    *((_QWORD *)this + 266) = v33;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl(v34, v25, v26, v27, v28, v29, v30, v31);
        WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
    }
    *((double *)this + 267) = v10;
LABEL_29:
    v35 = v53;
    if (v53 == -1)
      goto LABEL_31;
    goto LABEL_30;
  }
  if (v53 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_41;
  }
  if (!(_BYTE)v52)
  {
LABEL_41:
    JSC::throwOutOfMemoryError(a2, (JSC::JSGlobalObject *)&v54);
    v10 = NAN;
    goto LABEL_29;
  }
  v35 = 1;
  v10 = NAN;
LABEL_30:
  ((void (*)(char *, uint64_t *))off_1E3578678[v35])(&v55, &v52);
LABEL_31:
  if ((v22 & 1) == 0)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return v10;
}

void JSC::DateCache::timeZoneDisplayName(JSC::DateCache *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int v9;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  unsigned int TimeZoneDisplayName;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF *v36;
  unsigned int v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF *v46;
  WTF *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  _BYTE v74[64];
  WTF *v75;
  uint64_t v76;

  v9 = a2;
  if (*((_QWORD *)this + 301))
    goto LABEL_2;
  if (!*(_QWORD *)this)
    JSC::DateCache::timeZoneCacheSlow((uint64_t **)this, a2, a3, a4, a5, a6, a7, a8);
  WTF::defaultLanguage(1, &v72);
  WTF::String::utf8((uint64_t *)&v72, 0, v13, v14, v15, v16, v17, &v75, v18);
  v26 = v72;
  v72 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  v72 = (WTF *)v74;
  v73 = 32;
  WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)&v72, 0x20uLL);
  LODWORD(v76) = 0;
  TimeZoneDisplayName = ucal_getTimeZoneDisplayName();
  if ((int)v76 > 0)
  {
    if ((_DWORD)v76 != 15)
      goto LABEL_16;
    LODWORD(v76) = 0;
    WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)&v72, (int)TimeZoneDisplayName);
    ucal_getTimeZoneDisplayName();
    if ((int)v76 > 0)
      goto LABEL_16;
    TimeZoneDisplayName = HIDWORD(v73);
  }
  else
  {
    HIDWORD(v73) = TimeZoneDisplayName;
  }
  WTF::StringImpl::create(v72, TimeZoneDisplayName, &v76);
  v35 = (WTF::StringImpl *)*((_QWORD *)this + 301);
  *((_QWORD *)this + 301) = v76;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
LABEL_16:
  v36 = v72;
  if (v74 != (_BYTE *)v72 && v72)
  {
    v72 = 0;
    LODWORD(v73) = 0;
    WTF::fastFree((unint64_t)v36, v28, v29, v30, v31, v32, v33, v34);
  }
  v72 = (WTF *)v74;
  v73 = 32;
  WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)&v72, 0x20uLL);
  LODWORD(v76) = 0;
  v37 = ucal_getTimeZoneDisplayName();
  if ((int)v76 <= 0)
  {
    HIDWORD(v73) = v37;
    goto LABEL_21;
  }
  if ((_DWORD)v76 == 15)
  {
    LODWORD(v76) = 0;
    WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)&v72, (int)v37);
    ucal_getTimeZoneDisplayName();
    if ((int)v76 <= 0)
    {
      v37 = HIDWORD(v73);
LABEL_21:
      WTF::StringImpl::create(v72, v37, &v76);
      v45 = (WTF::StringImpl *)*((_QWORD *)this + 302);
      *((_QWORD *)this + 302) = v76;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
        {
          WTF::StringImpl::~StringImpl(v45, v38, v39, v40, v41, v42, v43, v44);
          WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
        }
        else
        {
          *(_DWORD *)v45 -= 2;
        }
      }
    }
  }
  v46 = v72;
  if (v74 != (_BYTE *)v72 && v72)
  {
    v72 = 0;
    LODWORD(v73) = 0;
    WTF::fastFree((unint64_t)v46, v38, v39, v40, v41, v42, v43, v44);
  }
  v47 = v75;
  v75 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::fastFree((unint64_t)v47, v38, v39, v40, v41, v42, v43, v44);
    else
      --*(_DWORD *)v47;
  }
LABEL_2:
  if (!v9)
  {
    v12 = (_DWORD *)*((_QWORD *)this + 301);
    if (!v12)
      goto LABEL_5;
    goto LABEL_4;
  }
  v12 = (_DWORD *)*((_QWORD *)this + 302);
  if (v12)
LABEL_4:
    *v12 += 2;
LABEL_5:
  *a9 = v12;
}

JSC::DateCache *JSC::DateCache::DateCache(JSC::DateCache *this)
{
  unint64_t v2;
  char v4;
  char **v5;
  char *v6;

  *(_QWORD *)this = 0;
  JSC::DateCache::DSTCache::DSTCache((JSC::DateCache *)((char *)this + 8));
  JSC::DateCache::DSTCache::DSTCache((JSC::DateCache *)((char *)this + 1056));
  *((_BYTE *)this + 2104) = 0;
  *((_BYTE *)this + 2120) = 0;
  *((_QWORD *)this + 266) = 0;
  *((_QWORD *)this + 269) = 0;
  *((_QWORD *)this + 271) = 0;
  *((_QWORD *)this + 273) = 0;
  *((_QWORD *)this + 275) = 0;
  *((_QWORD *)this + 277) = 0;
  *((_QWORD *)this + 279) = 0;
  *((_QWORD *)this + 281) = 0;
  *((_QWORD *)this + 283) = 0;
  *((_QWORD *)this + 285) = 0;
  *((_QWORD *)this + 287) = 0;
  *((_QWORD *)this + 289) = 0;
  *((_QWORD *)this + 291) = 0;
  *((_QWORD *)this + 293) = 0;
  *((_QWORD *)this + 295) = 0;
  *((_QWORD *)this + 297) = 0;
  *((_QWORD *)this + 299) = 0;
  *((_QWORD *)this + 268) = 0x7FF8000000000000;
  *((_QWORD *)this + 270) = 0x7FF8000000000000;
  *((_QWORD *)this + 272) = 0x7FF8000000000000;
  *((_QWORD *)this + 274) = 0x7FF8000000000000;
  *((_QWORD *)this + 276) = 0x7FF8000000000000;
  *((_QWORD *)this + 278) = 0x7FF8000000000000;
  *((_QWORD *)this + 280) = 0x7FF8000000000000;
  *((_QWORD *)this + 282) = 0x7FF8000000000000;
  *((_QWORD *)this + 284) = 0x7FF8000000000000;
  *((_QWORD *)this + 286) = 0x7FF8000000000000;
  *((_QWORD *)this + 288) = 0x7FF8000000000000;
  *((_QWORD *)this + 290) = 0x7FF8000000000000;
  *((_QWORD *)this + 292) = 0x7FF8000000000000;
  *((_QWORD *)this + 294) = 0x7FF8000000000000;
  *((_QWORD *)this + 296) = 0x7FF8000000000000;
  *((_QWORD *)this + 298) = 0x7FF8000000000000;
  *((_QWORD *)this + 302) = 0;
  *((_OWORD *)this + 150) = 0u;
  v2 = atomic_load(&JSC::DateCache::DateCache(void)::onceKey);
  if (v2 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&JSC::DateCache::DateCache(void)::onceKey, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::DateCache::DateCache(void)::$_0 &&>>);
  }
  return this;
}

void JSC::DateCache::~DateCache(JSC::DateCache *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 302);
  *((_QWORD *)this + 302) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 301);
  *((_QWORD *)this + 301) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  std::array<JSC::DateInstanceCache::CacheEntry,16ul>::~array((_QWORD *)this + 268, a2, a3, a4, a5, a6, a7, a8);
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 266);
  *((_QWORD *)this + 266) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  v19 = *(uint64_t **)this;
  *(_QWORD *)this = 0;
  if (v19)
  {
    v20 = (WTF::StringImpl *)v19[1];
    v19[1] = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::~StringImpl(v20, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
      }
      else
      {
        *(_DWORD *)v20 -= 2;
      }
    }
    v21 = *v19;
    *v19 = 0;
    if (v21)
      ucal_close();
    WTF::fastFree((unint64_t)v19, v11, v12, v13, v14, v15, v16, v17);
  }
}

void JSC::DateCache::cachedDateInstanceData(JSC::DateCache *this@<X0>, double a2@<D0>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t *v8;
  _DWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;

  v4 = (~(*(_QWORD *)&a2 << 32) + *(_QWORD *)&a2) ^ ((~(*(_QWORD *)&a2 << 32) + *(_QWORD *)&a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((unint64_t)(v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = (char *)this + 16 * (((v6 >> 31) ^ v6) & 0xF) + 2144;
  if (*(double *)v7 == a2)
  {
    v8 = (uint64_t *)(v7 + 8);
  }
  else
  {
    *(double *)v7 = a2;
    v17 = WTF::fastMalloc((WTF *)0x68);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = 0x7FF8000000000000;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_QWORD *)(v17 + 48) = 0;
    *(_QWORD *)(v17 + 56) = 0x7FF8000000000000;
    *(_OWORD *)(v17 + 64) = 0u;
    *(_OWORD *)(v17 + 80) = 0u;
    *(_QWORD *)(v17 + 96) = 0;
    v19 = (_DWORD *)*((_QWORD *)v7 + 1);
    v8 = (uint64_t *)(v7 + 8);
    v18 = v19;
    *v8 = v17;
    if (v19)
    {
      if (*v18 == 1)
        WTF::fastFree((unint64_t)v18, v10, v11, v12, v13, v14, v15, v16);
      else
        --*v18;
    }
  }
  v9 = (_DWORD *)*v8;
  *v9 = *(_DWORD *)*v8 + 1;
  *a3 = v9;
}

void JSC::DateCache::timeZoneCacheSlow(uint64_t **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  signed int CanonicalTimeZoneID;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  WTF *v27;
  int *v28;
  _WORD *v29;
  WTF *v30;
  int v31;
  const char *v32;
  int v33;
  BOOL v34;
  BOOL v35;
  int v36;
  int v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  _BYTE v79[68];
  int v80;
  WTF *v81;
  uint64_t v82;
  _BYTE v83[68];
  int v84;

  v81 = (WTF *)v83;
  v82 = 32;
  if (__ldaxr(WTF::innerTimeZoneOverrideLock))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::innerTimeZoneOverrideLock);
    goto LABEL_4;
  }
  if (__stxr(1u, WTF::innerTimeZoneOverrideLock))
    goto LABEL_3;
LABEL_4:
  {
    WTF::innerTimeZoneOverride(void)::timeZoneOverride = 0;
    *(_QWORD *)&dword_1EE342AD0 = 0;
  }
  WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=<0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((unint64_t)&v81, (uint64_t)&WTF::innerTimeZoneOverride(void)::timeZoneOverride, a3, a4, a5, a6, a7, a8);
  v16 = __ldxr(WTF::innerTimeZoneOverrideLock);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, WTF::innerTimeZoneOverrideLock))
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::innerTimeZoneOverrideLock, 0, v10, v11, v12, v13, v14, v15);
  v17 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *v17 = 0;
  v17[1] = 0;
  if (!HIDWORD(v82))
  {
    HIDWORD(v82) = v82;
    HIDWORD(v82) = ucal_getHostTimeZone();
    v80 = 0;
  }
  v77 = (WTF *)v79;
  v78 = 0x2000000020;
  v84 = 0;
  CanonicalTimeZoneID = ucal_getCanonicalTimeZoneID();
  v26 = CanonicalTimeZoneID;
  if (v84 > 0)
  {
    if (v84 != 15)
      goto LABEL_27;
    v84 = 0;
    WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)&v77, CanonicalTimeZoneID);
    ucal_getCanonicalTimeZoneID();
    v28 = 0;
    if (v84 > 0)
      goto LABEL_28;
    v26 = HIDWORD(v78);
  }
  else
  {
    HIDWORD(v78) = CanonicalTimeZoneID;
  }
  v27 = v77;
  if (!v77)
  {
LABEL_27:
    v28 = 0;
    goto LABEL_28;
  }
  if (v26)
  {
    if (v26 >= 0x7FFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x197E3E970);
    }
    v28 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v26 + 20));
    v29 = v28 + 5;
    *v28 = 2;
    v28[1] = v26;
    *((_QWORD *)v28 + 1) = v28 + 5;
    v28[4] = 0;
    if (v26 == 1)
      *v29 = *(_WORD *)v27;
    else
      memcpy(v29, v27, 2 * v26);
  }
  else
  {
    v28 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
LABEL_28:
  v30 = v77;
  if (v79 != (_BYTE *)v77 && v77)
  {
    v77 = 0;
    LODWORD(v78) = 0;
    WTF::fastFree((unint64_t)v30, v19, v20, v21, v22, v23, v24, v25);
  }
  if (!v28)
  {
    v38 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v38 = 0x300000002;
    *(_QWORD *)(v38 + 8) = "UTC";
    *(_DWORD *)(v38 + 16) = 4;
    goto LABEL_59;
  }
  v31 = v28[4];
  v32 = (const char *)*((_QWORD *)v28 + 1);
  v33 = v28[1];
  v34 = v33 == 7;
  v35 = v33 != 7;
  if (v32 == "Etc/UTC" || v33 != 7)
  {
    if (v32 == "Etc/UTC" && v33 == 7)
      goto LABEL_79;
  }
  else
  {
    if ((v31 & 4) == 0)
    {
      if (*(_WORD *)v32 == 69)
      {
        if (*(_QWORD *)(v32 + 2) == 0x55002F00630074 && *(_QWORD *)(v32 + 6) == 0x4300540055002FLL)
          goto LABEL_79;
        if (v32 != "Etc/GMT")
        {
LABEL_91:
          if (*(_QWORD *)(v32 + 2) == 0x47002F00630074 && *(_QWORD *)(v32 + 6) == 0x54004D0047002FLL)
            goto LABEL_79;
          goto LABEL_58;
        }
      }
      else if (v32 != "Etc/GMT")
      {
        goto LABEL_58;
      }
LABEL_53:
      if (v34)
        goto LABEL_79;
      if (v32 == "GMT" || v33 != 3)
      {
        if (v32 == "GMT" && v33 == 3)
          goto LABEL_79;
      }
      else if ((v31 & 4) != 0)
      {
        if (*v32 == 71)
        {
          v36 = *(unsigned __int16 *)(v32 + 1);
          v37 = 21581;
          goto LABEL_78;
        }
      }
      else if (*(_WORD *)v32 == 71 && *(_DWORD *)(v32 + 2) == 5505101)
      {
        goto LABEL_79;
      }
LABEL_58:
      v38 = (uint64_t)v28;
      goto LABEL_59;
    }
    if (*v32 == 69 && *(_DWORD *)(v32 + 1) == 1429169012 && *(_DWORD *)(v32 + 3) == 1129600303)
      goto LABEL_79;
  }
  v34 = v32 == "Etc/GMT";
  if (v32 == "Etc/GMT")
    v35 = 1;
  if (v33 != 7)
    v34 = 0;
  if (v35)
    goto LABEL_53;
  if ((v31 & 4) == 0)
  {
    if (*(_WORD *)v32 != 69)
      goto LABEL_58;
    goto LABEL_91;
  }
  if (*v32 != 69 || *(_DWORD *)(v32 + 1) != 1194287988)
    goto LABEL_58;
  v36 = *(_DWORD *)(v32 + 3);
  v37 = 1414350639;
LABEL_78:
  if (v36 != v37)
    goto LABEL_58;
LABEL_79:
  v38 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v38 = 0x300000002;
  *(_QWORD *)(v38 + 8) = "UTC";
  *(_DWORD *)(v38 + 16) = 4;
  if (*v28 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v28, (WTF::AtomStringImpl *)v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
  }
  else
  {
    *v28 -= 2;
  }
LABEL_59:
  v39 = (WTF::StringImpl *)v17[1];
  v17[1] = v38;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, (WTF::AtomStringImpl *)v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
  v80 = 0;
  v40 = ucal_open();
  v41 = *v17;
  *v17 = v40;
  if (v41)
    ucal_close();
  ucal_setGregorianChange();
  v49 = *this;
  *this = v17;
  if (v49)
  {
    v50 = (WTF::StringImpl *)v49[1];
    v49[1] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
      }
      else
      {
        *(_DWORD *)v50 -= 2;
      }
    }
    v51 = *v49;
    *v49 = 0;
    if (v51)
      ucal_close();
    WTF::fastFree((unint64_t)v49, v42, v43, v44, v45, v46, v47, v48);
  }
  v52 = v81;
  if (v83 != (_BYTE *)v81)
  {
    if (v81)
    {
      v81 = 0;
      LODWORD(v82) = 0;
      WTF::fastFree((unint64_t)v52, v42, v43, v44, v45, v46, v47, v48);
    }
  }
}

void JSC::DateCache::resetIfNecessarySlow(JSC::DateCache *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v9 = *(uint64_t **)this;
  *(_QWORD *)this = 0;
  if (v9)
  {
    v10 = (WTF::StringImpl *)v9[1];
    v9[1] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
    v11 = *v9;
    *v9 = 0;
    if (v11)
      ucal_close();
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::DateCache::DSTCache::reset((JSC::DateCache *)((char *)this + 8));
  JSC::DateCache::DSTCache::reset((JSC::DateCache *)((char *)this + 1056));
  if (*((_BYTE *)this + 2120))
    *((_BYTE *)this + 2120) = 0;
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 266);
  *((_QWORD *)this + 266) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  *((_QWORD *)this + 267) = 0x7FF8000000000000;
  *((_QWORD *)this + 268) = 0x7FF8000000000000;
  *((_QWORD *)this + 270) = 0x7FF8000000000000;
  *((_QWORD *)this + 272) = 0x7FF8000000000000;
  *((_QWORD *)this + 274) = 0x7FF8000000000000;
  *((_QWORD *)this + 276) = 0x7FF8000000000000;
  *((_QWORD *)this + 278) = 0x7FF8000000000000;
  *((_QWORD *)this + 280) = 0x7FF8000000000000;
  *((_QWORD *)this + 282) = 0x7FF8000000000000;
  *((_QWORD *)this + 284) = 0x7FF8000000000000;
  *((_QWORD *)this + 286) = 0x7FF8000000000000;
  *((_QWORD *)this + 288) = 0x7FF8000000000000;
  *((_QWORD *)this + 290) = 0x7FF8000000000000;
  *((_QWORD *)this + 292) = 0x7FF8000000000000;
  *((_QWORD *)this + 294) = 0x7FF8000000000000;
  *((_QWORD *)this + 296) = 0x7FF8000000000000;
  *((_QWORD *)this + 298) = 0x7FF8000000000000;
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 301);
  *((_QWORD *)this + 301) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 302);
  *((_QWORD *)this + 302) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
}

double JSC::DateCache::DSTCache::DSTCache(JSC::DateCache::DSTCache *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  result = 4.26872718e-308;
  *((_OWORD *)this + 1) = xmmword_19914EE90;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_OWORD *)this + 3) = xmmword_19914EE90;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_OWORD *)this + 5) = xmmword_19914EE90;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_OWORD *)this + 7) = xmmword_19914EE90;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_OWORD *)this + 9) = xmmword_19914EE90;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_OWORD *)this + 11) = xmmword_19914EE90;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_OWORD *)this + 13) = xmmword_19914EE90;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_OWORD *)this + 15) = xmmword_19914EE90;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_OWORD *)this + 17) = xmmword_19914EE90;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_OWORD *)this + 19) = xmmword_19914EE90;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_OWORD *)this + 21) = xmmword_19914EE90;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_OWORD *)this + 23) = xmmword_19914EE90;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_OWORD *)this + 25) = xmmword_19914EE90;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_OWORD *)this + 27) = xmmword_19914EE90;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_OWORD *)this + 29) = xmmword_19914EE90;
  *((_QWORD *)this + 60) = 0;
  *((_QWORD *)this + 61) = 0;
  *((_OWORD *)this + 31) = xmmword_19914EE90;
  *((_QWORD *)this + 65) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_OWORD *)this + 33) = xmmword_19914EE90;
  *((_QWORD *)this + 69) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_OWORD *)this + 35) = xmmword_19914EE90;
  *((_QWORD *)this + 73) = 0;
  *((_QWORD *)this + 72) = 0;
  *((_OWORD *)this + 37) = xmmword_19914EE90;
  *((_QWORD *)this + 77) = 0;
  *((_QWORD *)this + 76) = 0;
  *((_OWORD *)this + 39) = xmmword_19914EE90;
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 80) = 0;
  *((_OWORD *)this + 41) = xmmword_19914EE90;
  *((_QWORD *)this + 85) = 0;
  *((_QWORD *)this + 84) = 0;
  *((_OWORD *)this + 43) = xmmword_19914EE90;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 88) = 0;
  *((_OWORD *)this + 45) = xmmword_19914EE90;
  *((_QWORD *)this + 93) = 0;
  *((_QWORD *)this + 92) = 0;
  *((_OWORD *)this + 47) = xmmword_19914EE90;
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 96) = 0;
  *((_OWORD *)this + 49) = xmmword_19914EE90;
  *((_QWORD *)this + 101) = 0;
  *((_QWORD *)this + 100) = 0;
  *((_OWORD *)this + 51) = xmmword_19914EE90;
  *((_QWORD *)this + 105) = 0;
  *((_QWORD *)this + 104) = 0;
  *((_OWORD *)this + 53) = xmmword_19914EE90;
  *((_QWORD *)this + 109) = 0;
  *((_QWORD *)this + 108) = 0;
  *((_OWORD *)this + 55) = xmmword_19914EE90;
  *((_QWORD *)this + 113) = 0;
  *((_QWORD *)this + 112) = 0;
  *((_OWORD *)this + 57) = xmmword_19914EE90;
  *((_QWORD *)this + 117) = 0;
  *((_QWORD *)this + 116) = 0;
  *((_OWORD *)this + 59) = xmmword_19914EE90;
  *((_QWORD *)this + 121) = 0;
  *((_QWORD *)this + 120) = 0;
  *((_OWORD *)this + 61) = xmmword_19914EE90;
  *((_QWORD *)this + 125) = 0;
  *((_QWORD *)this + 124) = 0;
  *((_OWORD *)this + 63) = xmmword_19914EE90;
  *((_QWORD *)this + 128) = 0;
  *((_QWORD *)this + 129) = (char *)this + 8;
  *((_QWORD *)this + 130) = (char *)this + 40;
  return result;
}

_QWORD *std::array<JSC::DateInstanceCache::CacheEntry,16ul>::~array(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;

  v9 = (_DWORD *)a1[31];
  a1[31] = 0;
  if (v9)
  {
    if (*v9 == 1)
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v9;
  }
  v10 = (_DWORD *)a1[29];
  a1[29] = 0;
  if (v10)
  {
    if (*v10 == 1)
      WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v10;
  }
  v11 = (_DWORD *)a1[27];
  a1[27] = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v11;
  }
  v12 = (_DWORD *)a1[25];
  a1[25] = 0;
  if (v12)
  {
    if (*v12 == 1)
      WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v12;
  }
  v13 = (_DWORD *)a1[23];
  a1[23] = 0;
  if (v13)
  {
    if (*v13 == 1)
      WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v13;
  }
  v14 = (_DWORD *)a1[21];
  a1[21] = 0;
  if (v14)
  {
    if (*v14 == 1)
      WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v14;
  }
  v15 = (_DWORD *)a1[19];
  a1[19] = 0;
  if (v15)
  {
    if (*v15 == 1)
      WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v15;
  }
  v16 = (_DWORD *)a1[17];
  a1[17] = 0;
  if (v16)
  {
    if (*v16 == 1)
      WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v16;
  }
  v17 = (_DWORD *)a1[15];
  a1[15] = 0;
  if (v17)
  {
    if (*v17 == 1)
      WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v17;
  }
  v18 = (_DWORD *)a1[13];
  a1[13] = 0;
  if (v18)
  {
    if (*v18 == 1)
      WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v18;
  }
  v19 = (_DWORD *)a1[11];
  a1[11] = 0;
  if (v19)
  {
    if (*v19 == 1)
      WTF::fastFree((unint64_t)v19, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v19;
  }
  v20 = (_DWORD *)a1[9];
  a1[9] = 0;
  if (v20)
  {
    if (*v20 == 1)
      WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v20;
  }
  v21 = (_DWORD *)a1[7];
  a1[7] = 0;
  if (v21)
  {
    if (*v21 == 1)
      WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v21;
  }
  v22 = (_DWORD *)a1[5];
  a1[5] = 0;
  if (v22)
  {
    if (*v22 == 1)
      WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v22;
  }
  v23 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v23)
  {
    if (*v23 == 1)
      WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v23;
  }
  v24 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v24)
  {
    if (*v24 == 1)
      WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
    else
      --*v24;
  }
  return a1;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::DateCache::DateCache(void)::$_0 &&>>()
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, 0, (CFNotificationCallback)JSC::timeZoneChangeNotification, (CFStringRef)*MEMORY[0x1E0C9B370], 0, CFNotificationSuspensionBehaviorDeliverImmediately);
}

void JSC::timeZoneChangeNotification(JSC *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  unint64_t v6;

  do
    v6 = __ldaxr(&JSC::lastTimeZoneID);
  while (__stlxr(v6 + 1, &JSC::lastTimeZoneID));
}

void JSC::JSWebAssemblyArray::destroy(JSC::JSWebAssemblyArray *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (*((_DWORD *)this + 10) != 1 || (v9 = *((unsigned __int8 *)this + 24), v9 == 247) || v9 == 248)
  {
    v10 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v10)
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::JSWebAssemblyArray::visitChildren(JSC::JSWebAssemblyArray *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  int v21;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  if (!*((_DWORD *)this + 10))
  {
    v10 = BYTE1(dword_1ECF4C7B0) ? 29 : 17;
    if ((v10 + *((_BYTE *)this + 24)) <= 1u && *((_QWORD *)this + 7))
    {
      v11 = 1;
      do
      {
        v12 = JSC::JSWebAssemblyArray::get(this, v11 - 1);
        if ((v12 & 0xFFFE000000000002) != 0 || v12 == 0)
          continue;
        v20 = v12;
        if ((v12 & 8) != 0)
        {
          if ((*(_BYTE *)(v12 - 79) & 1) == 0)
            goto LABEL_20;
        }
        else
        {
          v21 = *((_DWORD *)a2 + 33);
          if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != v21)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v21, v13, v14, v15, v16, v17, v18);
          if (((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) == 0)
          {
LABEL_20:
            JSC::SlotVisitor::appendSlow((uint64_t)a2, v20, 0, v14, v15, v16, v17, v18);
            continue;
          }
        }
        if (*((_QWORD *)a2 + 21))
          goto LABEL_20;
      }
      while (*((_QWORD *)this + 7) > (unint64_t)v11++);
    }
  }
}

void JSC::JSWebAssemblyArray::visitChildren(JSC::JSWebAssemblyArray *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  char v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD v10[2];
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  _QWORD *v14;
  char v15;

  v10[0] = a2;
  v10[1] = this;
  v12 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v11 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    v13[0] = a2;
    v13[1] = this;
    v15 = 0;
    v14 = v10;
    *((_QWORD *)a2 + 11) = v13;
    JSC::JSObject::visitChildren(this, a2, a3);
    *(_QWORD *)(v13[0] + 88) = v14;
    if (!*((_DWORD *)this + 10))
    {
      v6 = BYTE1(dword_1ECF4C7B0) ? 29 : 17;
      if ((v6 + *((_BYTE *)this + 24)) <= 1u && *((_QWORD *)this + 7))
      {
        v7 = 1;
        do
        {
          v8 = JSC::JSWebAssemblyArray::get(this, v7 - 1);
          if ((v8 & 0xFFFE000000000002) == 0)
            (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v8);
        }
        while (*((_QWORD *)this + 7) > (unint64_t)v7++);
      }
    }
    *(_QWORD *)(v10[0] + 88) = v11;
  }
}

uint64_t JSC::JSWebAssemblyArray::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 755107915;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::JSWebAssemblyArray::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::JSWebAssemblyArray::fill(unint64_t this, unsigned int a2, uint64_t __c, size_t __len)
{
  unsigned int v5;
  unint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  unint64_t v26;

  v5 = a2;
  v6 = this;
  v7 = *(_DWORD *)(this + 40);
  if (v7 != 1)
  {
    if (!v7)
    {
      v8 = BYTE1(dword_1ECF4C7B0) ? 29 : 17;
      if ((v8 + *(_BYTE *)(this + 24)) <= 1u)
      {
        if (!BYTE2(dword_1ECF4C7B0))
          goto LABEL_8;
LABEL_28:
        if (*(_QWORD *)(this + 32) != -20)
        {
LABEL_8:
          if ((_DWORD)__len)
          {
            v9 = __len;
            do
            {
              this = JSC::JSWebAssemblyArray::set(v6, v5++, __c);
              --v9;
            }
            while (v9);
          }
          return this;
        }
        goto LABEL_29;
      }
    }
    goto LABEL_29;
  }
  v10 = *(unsigned __int8 *)(this + 24);
  if (v10 != 247)
  {
    if (v10 == 248)
    {
      v11 = *(unsigned int **)(this + 64);
      if (v11)
      {
        v13 = *v11++;
        v12 = v13;
      }
      else
      {
        v12 = 0;
      }
      if (v12 >= a2 && v12 - a2 >= __len)
        return (unint64_t)memset((char *)v11 + a2, __c, __len);
      __break(1u);
      goto LABEL_28;
    }
LABEL_29:
    v18 = *(unsigned __int8 *)(this + 24);
    if (v18 == 253 || v18 == 255)
    {
      if ((_DWORD)__len)
      {
        v23 = *(_QWORD *)(this + 64);
        if (v23)
          v24 = v23 + 4;
        else
          v24 = 0;
        v25 = (_DWORD *)(v24 + 4 * a2);
        v26 = __len + 1;
        do
        {
          *v25++ = __c;
          --v26;
        }
        while (v26 > 1);
      }
    }
    else if (v18 == 251)
    {
      this = 141;
      __break(0xC471u);
    }
    else if ((_DWORD)__len)
    {
      v19 = *(_QWORD *)(this + 64);
      if (v19)
        v20 = v19 + 8;
      else
        v20 = 0;
      v21 = (uint64_t *)(v20 + 8 * a2);
      v22 = __len + 1;
      do
      {
        *v21++ = __c;
        --v22;
      }
      while (v22 > 1);
    }
    return this;
  }
  if ((_DWORD)__len)
  {
    v14 = *(_QWORD *)(this + 64);
    if (v14)
      v15 = v14 + 4;
    else
      v15 = 0;
    v16 = (_WORD *)(v15 + 2 * a2);
    v17 = __len + 1;
    do
    {
      *v16++ = __c;
      --v17;
    }
    while (v17 > 1);
  }
  return this;
}

unint64_t JSC::JSWebAssemblyArray::set(unint64_t this, unsigned int a2, uint64_t a3)
{
  int v3;
  unsigned int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;

  if (*(_DWORD *)(this + 40) == 1)
  {
    v3 = *(unsigned __int8 *)(this + 24);
    if (v3 == 247)
    {
      v11 = *(unsigned int **)(this + 64);
      if (*v11 <= a2)
      {
        __break(0xC471u);
        JUMPOUT(0x197E3F63CLL);
      }
      *((_WORD *)v11 + a2 + 2) = a3;
    }
    else if (v3 == 248)
    {
      v4 = *(unsigned int **)(this + 64);
      if (*v4 <= a2)
      {
        __break(0xC471u);
        JUMPOUT(0x197E3F61CLL);
      }
      *((_BYTE *)v4 + a2 + 4) = a3;
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(this + 24);
    switch(*(_BYTE *)(this + 24))
    {
      case 0xFC:
      case 0xFE:
        v10 = *(unsigned int **)(this + 64);
        if (*v10 <= a2)
        {
          __break(0xC471u);
          JUMPOUT(0x197E3F65CLL);
        }
        *(_QWORD *)&v10[2 * a2 + 2] = a3;
        break;
      case 0xFD:
      case 0xFF:
        v12 = *(unsigned int **)(this + 64);
        if (*v12 <= a2)
        {
          __break(0xC471u);
          JUMPOUT(0x197E3F67CLL);
        }
        v12[a2 + 1] = a3;
        break;
      default:
        if ((v5 - 227) >= 2 && (v5 - 239) >= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x197E3F69CLL);
        }
        v6 = *(_QWORD *)(this + 64);
        v7 = v6 + 8;
        if (!v6)
          v7 = 0;
        v8 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
        if ((this & 8) != 0)
          v8 = (uint64_t *)(this - 16);
        v9 = *v8;
        *(_QWORD *)(v7 + 8 * a2) = a3;
        if (a3
          && (a3 & 0xFFFE000000000002) == 0
          && *(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(this + 7))
        {
          this = JSC::Heap::writeBarrierSlowPath(v9 + 192, this);
        }
        break;
    }
  }
  return this;
}

void JSC::JSWebAssemblyArray::copy(JSC::JSWebAssemblyArray *this, JSC::JSWebAssemblyArray *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unsigned int v7;
  int v10;
  char v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int *v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t i;
  _DWORD *v36;
  unsigned int *v37;
  unint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v7 = a3;
  v10 = *((_DWORD *)this + 10);
  if (v10 != 1)
  {
    if (v10)
      goto LABEL_47;
    v11 = BYTE1(dword_1ECF4C7B0) ? 29 : 17;
    if ((v11 + *((_BYTE *)this + 24)) > 1u || BYTE2(dword_1ECF4C7B0) && *((_QWORD *)this + 4) == -20)
      goto LABEL_47;
    v12 = a5;
    if (a5 + a3 < a4 || a2 != this || a5 + a4 < a3)
    {
      if (!a5)
        return;
      for (i = a4; ; ++i)
      {
        v36 = (_DWORD *)*((_QWORD *)this + 8);
        if (*v36 <= i)
          break;
        JSC::JSWebAssemblyArray::set((unint64_t)a2, v7++, *(_QWORD *)&v36[2 * i + 2]);
        if (!--v12)
          return;
      }
LABEL_45:
      __break(0xC471u);
      JUMPOUT(0x197E3F8E0);
    }
    if (!a5)
      return;
    v13 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * a5 + 8));
    *v13 = a5;
    v14 = *((_QWORD *)this + 8);
    if (v14)
      v15 = v14 + 8;
    else
      v15 = 0;
    memmove(v13 + 2, (const void *)(v15 + 8 * a4), 8 * a5);
    v16 = 0;
    while (*v13 > v16)
    {
      JSC::JSWebAssemblyArray::set((unint64_t)this, v7 + v16, *(_QWORD *)&v13[2 * v16 + 2]);
      if (a5 == ++v16)
      {
        WTF::fastFree((unint64_t)v13, v17, v18, v19, v20, v21, v22, v23);
        return;
      }
    }
    __break(0xC471u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v24 = *((unsigned __int8 *)this + 24);
  if (v24 == 247)
  {
    if (a5)
    {
      v28 = *((_QWORD *)this + 8);
      if (v28)
        v29 = v28 + 4;
      else
        v29 = 0;
      v30 = (char *)(v29 + 2 * a4);
      v31 = 2 * a5;
      v32 = *((_QWORD *)a2 + 8);
      if (v32)
        v33 = v32 + 4;
      else
        v33 = 0;
      v34 = (char *)(v33 + 2 * v7);
      goto LABEL_74;
    }
    return;
  }
  if (v24 == 248)
  {
    v25 = (unsigned int *)*((_QWORD *)a2 + 8);
    if (v25)
    {
      v27 = *v25++;
      v26 = v27;
    }
    else
    {
      v26 = 0;
    }
    if (v26 >= a3)
    {
      v37 = (unsigned int *)*((_QWORD *)this + 8);
      if (v37)
      {
        v39 = *v37++;
        v38 = v39;
      }
      else
      {
        v38 = 0;
      }
      if (v38 >= a4)
      {
        v34 = (char *)v25 + a3;
        v30 = (char *)v37 + a4;
        v31 = a5;
LABEL_74:
        memmove(v34, v30, v31);
        return;
      }
    }
    goto LABEL_44;
  }
LABEL_47:
  v40 = *((unsigned __int8 *)this + 24);
  if (v40 == 251)
  {
    if (a5)
    {
      v45 = *((_QWORD *)this + 8);
      if (v45)
        v46 = v45 + 8;
      else
        v46 = 0;
      v30 = (char *)(v46 + 16 * a4);
      v31 = 16 * a5;
      v47 = *((_QWORD *)a2 + 8);
      if (v47)
        v48 = v47 + 8;
      else
        v48 = 0;
      v34 = (char *)(v48 + 16 * v7);
      goto LABEL_74;
    }
  }
  else if (v40 == 255 || v40 == 253)
  {
    if (a5)
    {
      v41 = *((_QWORD *)this + 8);
      if (v41)
        v42 = v41 + 4;
      else
        v42 = 0;
      v30 = (char *)(v42 + 4 * a4);
      v31 = 4 * a5;
      v43 = *((_QWORD *)a2 + 8);
      if (v43)
        v44 = v43 + 4;
      else
        v44 = 0;
      v34 = (char *)(v44 + 4 * v7);
      goto LABEL_74;
    }
  }
  else if (a5)
  {
    v49 = *((_QWORD *)this + 8);
    if (v49)
      v50 = v49 + 8;
    else
      v50 = 0;
    v30 = (char *)(v50 + 8 * a4);
    v31 = 8 * a5;
    v51 = *((_QWORD *)a2 + 8);
    if (v51)
      v52 = v51 + 8;
    else
      v52 = 0;
    v34 = (char *)(v52 + 8 * v7);
    goto LABEL_74;
  }
}

uint64_t JSC::JSWebAssemblyArray::get(JSC::JSWebAssemblyArray *this, unsigned int a2)
{
  int v2;
  unsigned int *v3;
  int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;

  if (*((_DWORD *)this + 10) != 1)
    goto LABEL_6;
  v2 = *((unsigned __int8 *)this + 24);
  if (v2 != 247)
  {
    if (v2 == 248)
    {
      v3 = (unsigned int *)*((_QWORD *)this + 8);
      if (*v3 <= a2)
      {
        __break(0xC471u);
        JUMPOUT(0x197E3FADCLL);
      }
      return *((unsigned __int8 *)v3 + a2 + 4);
    }
LABEL_6:
    v5 = *((unsigned __int8 *)this + 24);
    if (v5 == 253 || v5 == 255)
    {
      v7 = (unsigned int *)*((_QWORD *)this + 8);
      if (*v7 > a2)
        return v7[a2 + 1];
    }
    else if (v5 != 251)
    {
      v6 = (unsigned int *)*((_QWORD *)this + 8);
      if (*v6 <= a2)
      {
        __break(0xC471u);
        JUMPOUT(0x197E3FABCLL);
      }
      return *(_QWORD *)&v6[2 * a2 + 2];
    }
    __break(0xC471u);
    JUMPOUT(0x197E3FA9CLL);
  }
  v8 = (unsigned int *)*((_QWORD *)this + 8);
  if (*v8 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x197E3FAFCLL);
  }
  return *((unsigned __int16 *)v8 + a2 + 2);
}

unint64_t ctiMasmProbeTrampoline@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, double a14@<D4>, double a15@<D5>, double a16@<D6>, double a17@<D7>, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,unint64_t a40,unint64_t a41,uint64_t a42,unint64_t a43,unint64_t a44,unint64_t a45,unint64_t a46,unint64_t *a47,unint64_t a48,unint64_t a49,unint64_t a50,double a51,double a52,double a53,double a54,double a55,double a56,double a57,double a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t a66;
  uint64_t a67;
  uint64_t a68;
  uint64_t a69;
  uint64_t a70;
  uint64_t a71;
  uint64_t a72;
  uint64_t a73;
  uint64_t a74;
  uint64_t a75;
  uint64_t a76;
  uint64_t a77;
  uint64_t a78;
  uint64_t a79;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t StatusReg;
  unint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  void (*v114)(unint64_t *);
  unint64_t result;
  unint64_t *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;

  v126 = a1;
  v127 = a2;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  a18 = a3;
  a19 = a4;
  a20 = a5;
  a21 = a6;
  v106 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 1));
  a22 = a7;
  a23 = a8;
  a24 = a9;
  a25 = v79;
  a26 = v80;
  a27 = v81;
  a28 = v82;
  a29 = v83;
  a30 = v84;
  a31 = v85;
  a32 = v86;
  a33 = v87;
  a40 = v122;
  a41 = v123;
  a42 = v124;
  a43 = v126;
  a46 = v125;
  a47 = (unint64_t *)&a18;
  v107 = v88 + 16;
  STACK[0x308] = v107;
  a48 = v107;
  a49 = StatusReg;
  a50 = v106;
  a51 = a10;
  a52 = a11;
  a53 = a12;
  a54 = a13;
  a55 = a14;
  a56 = a15;
  a57 = a16;
  a58 = a17;
  a65 = v89;
  a66 = v90;
  a67 = v91;
  a68 = v92;
  a69 = v93;
  a70 = v94;
  a71 = v95;
  a72 = v96;
  a73 = v97;
  a74 = v98;
  a75 = v99;
  a76 = v100;
  a77 = v101;
  a78 = v102;
  a79 = v103;
  STACK[0x200] = v104;
  v108 = &v122;
  executeJSCJITProbe((uint64_t)&v122);
  if ((uint64_t)a47 < (uint64_t)&STACK[0x350])
  {
    v109 = (unint64_t)(a47 - 112) & 0xFFFFFFFFFFFFFFF0;
    v110 = &v122;
    v111 = (_QWORD *)v109;
    do
    {
      v112 = *v110;
      v113 = v110[1];
      v110 += 2;
      *v111 = v112;
      v111[1] = v113;
      v111 += 2;
    }
    while ((uint64_t)v110 < (uint64_t)&STACK[0x320]);
    v108 = (unint64_t *)v109;
  }
  v114 = (void (*)(unint64_t *))v108[2];
  if (v114)
    v114(v108);
  result = v126;
  v116 = a47;
  if (STACK[0x308] == a48)
  {
    v116 = a47 - 2;
    *(a47 - 2) = a46;
    a48 = STACK[0x308] - 16;
  }
  v117 = v116 - 6;
  v118 = a50;
  *v117 = a49;
  v117[1] = v118;
  v119 = a44;
  v117[2] = a43;
  v117[3] = v119;
  v120 = a48;
  v117[4] = a45;
  v117[5] = v120;
  v121 = v123;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v122);
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 1), v121);
  return result;
}

unint64_t ctiMasmProbeTrampolineSIMD@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __n128 a10@<Q0>, __n128 a11@<Q1>, __n128 a12@<Q2>, __n128 a13@<Q3>, __n128 a14@<Q4>, __n128 a15@<Q5>, __n128 a16@<Q6>, __n128 a17@<Q7>, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,unint64_t a40,unint64_t a41,uint64_t a42,unint64_t a43,unint64_t a44,unint64_t a45,unint64_t a46,unint64_t *a47,unint64_t a48,unint64_t a49,unint64_t a50,__n128 a51,__n128 a52,__n128 a53,__n128 a54,__n128 a55,__n128 a56,__n128 a57,__n128 a58)
{
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  unint64_t StatusReg;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t v92;
  void (*v93)(unint64_t *);
  unint64_t result;
  unint64_t *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;

  v105 = a1;
  v106 = a2;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  a18 = a3;
  a19 = a4;
  a20 = a5;
  a21 = a6;
  v85 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 1));
  a22 = a7;
  a23 = a8;
  a24 = a9;
  a25 = v58;
  a26 = v59;
  a27 = v60;
  a28 = v61;
  a29 = v62;
  a30 = v63;
  a31 = v64;
  a32 = v65;
  a33 = v66;
  a40 = v101;
  a41 = v102;
  a42 = v103;
  a43 = v105;
  a46 = v104;
  a47 = (unint64_t *)&a18;
  v86 = v67 + 16;
  STACK[0x308] = v86;
  a48 = v86;
  a49 = StatusReg;
  a50 = v85;
  a51 = a10;
  a52 = a11;
  a53 = a12;
  a54 = a13;
  a55 = a14;
  a56 = a15;
  a57 = a16;
  a58 = a17;
  *(_OWORD *)&STACK[0x208] = v68;
  *(_OWORD *)&STACK[0x218] = v69;
  *(_OWORD *)&STACK[0x228] = v70;
  *(_OWORD *)&STACK[0x238] = v71;
  *(_OWORD *)&STACK[0x248] = v72;
  *(_OWORD *)&STACK[0x258] = v73;
  *(_OWORD *)&STACK[0x268] = v74;
  *(_OWORD *)&STACK[0x278] = v75;
  *(_OWORD *)&STACK[0x288] = v76;
  *(_OWORD *)&STACK[0x298] = v77;
  *(_OWORD *)&STACK[0x2A8] = v78;
  *(_OWORD *)&STACK[0x2B8] = v79;
  *(_OWORD *)&STACK[0x2C8] = v80;
  *(_OWORD *)&STACK[0x2D8] = v81;
  *(_OWORD *)&STACK[0x2E8] = v82;
  *(_OWORD *)&STACK[0x2F8] = v83;
  v87 = &v101;
  executeJSCJITProbe((uint64_t)&v101);
  if ((uint64_t)a47 < (uint64_t)&STACK[0x350])
  {
    v88 = (unint64_t)(a47 - 112) & 0xFFFFFFFFFFFFFFF0;
    v89 = &v101;
    v90 = (_QWORD *)v88;
    do
    {
      v91 = *v89;
      v92 = v89[1];
      v89 += 2;
      *v90 = v91;
      v90[1] = v92;
      v90 += 2;
    }
    while ((uint64_t)v89 < (uint64_t)&STACK[0x320]);
    v87 = (unint64_t *)v88;
  }
  v93 = (void (*)(unint64_t *))v87[2];
  if (v93)
    v93(v87);
  result = v105;
  v95 = a47;
  if (STACK[0x308] == a48)
  {
    v95 = a47 - 2;
    *(a47 - 2) = a46;
    a48 = STACK[0x308] - 16;
  }
  v96 = v95 - 6;
  v97 = a50;
  *v96 = a49;
  v96[1] = v97;
  v98 = a44;
  v96[2] = a43;
  v96[3] = v98;
  v99 = a48;
  v96[4] = a45;
  v96[5] = v99;
  v100 = v102;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v101);
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 1), v100);
  return result;
}

void JSC::MacroAssembler::probe(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::AssemblerBuffer *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;

  v8 = a4;
  v12 = (JSC::AssemblerBuffer *)(a1 + 14);
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = -788478977;
  v14 = a1[50];
  v15 = v14 + 4;
  a1[50] = v14 + 4;
  if ((v14 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v15 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v15) = -1459591176;
  v16 = a1[50];
  v17 = v16 + 4;
  a1[50] = v16 + 4;
  if ((v16 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v17 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v17) = -1459520518;
  a1[50] += 4;
  if (v8)
    v18 = ctiMasmProbeTrampoline;
  else
    v18 = ctiMasmProbeTrampolineSIMD;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, (uint64_t)v18, 26, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, a2, 24, v19, v20, v21, v22, v23);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, a3, 25, v24, v25, v26, v27, v28);
  a1[52] = 0;
  v36 = a1[50];
  if (v36 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, v29, v30, v31, v32, v33, v34, v35);
    v36 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v36) = -700513472;
  v37 = a1[50];
  v38 = v37 + 4;
  a1[50] = v37 + 4;
  if ((v37 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, v29, v30, v31, v32, v33, v34, v35);
    v38 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v38) = -130022402;
  v39 = a1[50];
  v40 = v39 + 4;
  a1[50] = v39 + 4;
  if ((v39 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, v29, v30, v31, v32, v33, v34, v35);
    v40 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v40) = -1862253569;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::collectCPUFeatures(JSC::MacroAssemblerARM64 *this)
{
  if (!JSC::MacroAssemblerARM64::s_lseCheckState)
    JSC::MacroAssemblerARM64::s_lseCheckState = 1;
  if (!JSC::MacroAssemblerARM64::s_jscvtCheckState)
    JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
}

int32x2_t JSC::ASTBuilder::makeTypeOfNode(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  JSC::ParserArena *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int32x2_t result;

  v6 = (*(uint64_t (**)(_QWORD *))(*a3 + 112))(a3);
  v7 = *(JSC::ParserArena **)(a1 + 8);
  v8 = *(_QWORD *)v7;
  v9 = *((_QWORD *)v7 + 1) - *(_QWORD *)v7;
  if (v6)
  {
    if (v9 <= 0x27)
    {
      JSC::ParserArena::allocateFreeablePool(v7);
      v8 = *(_QWORD *)v7;
    }
    *(_QWORD *)v7 = v8 + 40;
    v10 = a3[4];
    *(_DWORD *)(v8 + 8) = *(_DWORD *)a2;
    result = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(int32x2_t *)(v8 + 12) = result;
    *(_DWORD *)(v8 + 20) = -1;
    *(_BYTE *)(v8 + 24) = 0;
    *(_BYTE *)(v8 + 25) = 4;
    *(_BYTE *)(v8 + 26) = 0;
    *(_QWORD *)v8 = &off_1E35875F8;
    *(_QWORD *)(v8 + 32) = v10;
  }
  else
  {
    if (v9 <= 0x27)
    {
      JSC::ParserArena::allocateFreeablePool(v7);
      v8 = *(_QWORD *)v7;
    }
    *(_QWORD *)v7 = v8 + 40;
    *(_DWORD *)(v8 + 8) = *(_DWORD *)a2;
    result = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(int32x2_t *)(v8 + 12) = result;
    *(_DWORD *)(v8 + 20) = -1;
    *(_BYTE *)(v8 + 24) = 0;
    *(_BYTE *)(v8 + 25) = 4;
    *(_BYTE *)(v8 + 26) = 0;
    *(_QWORD *)v8 = &off_1E3587778;
    *(_QWORD *)(v8 + 32) = a3;
  }
  return result;
}

_QWORD **JSC::ASTBuilder::makeDeleteNode(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  _QWORD **v9;
  JSC::ParserArena *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (**v18)(JSC::DeleteBracketNode *__hidden);
  JSC::ParserArena *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  JSC::ParserArena *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v9 = a3;
  if (((unsigned int (*)(_QWORD **))(*a3)[39])(a3)
    && ((*(uint64_t (**)(_QWORD *))(*v9[4] + 88))(v9[4]) & 1) != 0)
  {
    v9[4] = (_QWORD *)JSC::ASTBuilder::makeDeleteNode(a1, a2, v9[4], a4, a5, a6);
  }
  else
  {
    if ((((uint64_t (*)(_QWORD **))(*v9)[11])(v9) & 1) != 0)
    {
      if (((unsigned int (*)(_QWORD **))(*v9)[14])(v9))
      {
        v25 = *(JSC::ParserArena **)(a1 + 8);
        v13 = *(_QWORD *)v25;
        if (*((_QWORD *)v25 + 1) - *(_QWORD *)v25 <= 0x47uLL)
        {
          JSC::ParserArena::allocateFreeablePool(v25);
          v13 = *(_QWORD *)v25;
        }
        *(_QWORD *)v25 = v13 + 72;
        v26 = v9[4];
        *(_DWORD *)(v13 + 8) = *(_DWORD *)a2;
        *(int32x2_t *)(v13 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
        *(_DWORD *)(v13 + 20) = -1;
        *(_BYTE *)(v13 + 24) = 0;
        *(_QWORD *)v13 = off_1E3583CB8;
        *(_BYTE *)(v13 + 25) = 126;
        *(_BYTE *)(v13 + 26) = 0;
        v27 = *a5;
        *(_DWORD *)(v13 + 36) = *((_DWORD *)a5 + 2);
        *(_QWORD *)(v13 + 28) = v27;
        v28 = *a4;
        *(_DWORD *)(v13 + 48) = *((_DWORD *)a4 + 2);
        *(_QWORD *)(v13 + 40) = v28;
        v29 = *a6;
        *(_DWORD *)(v13 + 60) = *((_DWORD *)a6 + 2);
        *(_QWORD *)(v13 + 52) = v29;
        *(_QWORD *)v13 = &off_1E3586E78;
        *(_QWORD *)(v13 + 64) = v26;
      }
      else
      {
        if (((unsigned int (*)(_QWORD **))(*v9)[16])(v9))
        {
          v20 = *(JSC::ParserArena **)(a1 + 8);
          v13 = *(_QWORD *)v20;
          if (*((_QWORD *)v20 + 1) - *(_QWORD *)v20 <= 0x4FuLL)
          {
            JSC::ParserArena::allocateFreeablePool(v20);
            v13 = *(_QWORD *)v20;
          }
          *(_QWORD *)v20 = v13 + 80;
          *(_DWORD *)(v13 + 8) = *(_DWORD *)a2;
          *(int32x2_t *)(v13 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
          *(_DWORD *)(v13 + 20) = -1;
          *(_BYTE *)(v13 + 24) = 0;
          *(_QWORD *)v13 = off_1E3583CB8;
          *(_BYTE *)(v13 + 26) = 0;
          v14 = *((_OWORD *)v9 + 4);
          *(_BYTE *)(v13 + 25) = 126;
          v21 = *a5;
          *(_DWORD *)(v13 + 36) = *((_DWORD *)a5 + 2);
          *(_QWORD *)(v13 + 28) = v21;
          v22 = *a4;
          *(_DWORD *)(v13 + 48) = *((_DWORD *)a4 + 2);
          *(_QWORD *)(v13 + 40) = v22;
          v23 = *a6;
          *(_DWORD *)(v13 + 60) = *((_DWORD *)a6 + 2);
          *(_QWORD *)(v13 + 52) = v23;
          v18 = &off_1E3586FF8;
        }
        else
        {
          if (((unsigned int (*)(_QWORD **, _QWORD))(*v9)[42])(v9, *(_QWORD *)a1))
            *(_DWORD *)(a1 + 24) |= 2u;
          v12 = *(JSC::ParserArena **)(a1 + 8);
          v13 = *(_QWORD *)v12;
          if (*((_QWORD *)v12 + 1) - *(_QWORD *)v12 <= 0x4FuLL)
          {
            JSC::ParserArena::allocateFreeablePool(v12);
            v13 = *(_QWORD *)v12;
          }
          *(_QWORD *)v12 = v13 + 80;
          *(_DWORD *)(v13 + 8) = *(_DWORD *)a2;
          *(int32x2_t *)(v13 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
          *(_DWORD *)(v13 + 20) = -1;
          *(_BYTE *)(v13 + 24) = 0;
          *(_QWORD *)v13 = off_1E3583CB8;
          *(_BYTE *)(v13 + 26) = 0;
          v14 = *((_OWORD *)v9 + 2);
          *(_BYTE *)(v13 + 25) = 126;
          v15 = *a5;
          *(_DWORD *)(v13 + 36) = *((_DWORD *)a5 + 2);
          *(_QWORD *)(v13 + 28) = v15;
          v16 = *a4;
          *(_DWORD *)(v13 + 48) = *((_DWORD *)a4 + 2);
          *(_QWORD *)(v13 + 40) = v16;
          v17 = *a6;
          *(_DWORD *)(v13 + 60) = *((_DWORD *)a6 + 2);
          *(_QWORD *)(v13 + 52) = v17;
          v18 = &off_1E3587178;
        }
        *(_QWORD *)v13 = v18;
        *(_OWORD *)(v13 + 64) = v14;
      }
    }
    else
    {
      v24 = *(uint64_t **)(a1 + 8);
      v13 = *v24;
      if ((unint64_t)(v24[1] - *v24) <= 0x27)
      {
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a1 + 8));
        v13 = *v24;
      }
      *v24 = v13 + 40;
      *(_DWORD *)(v13 + 8) = *(_DWORD *)a2;
      *(int32x2_t *)(v13 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
      *(_DWORD *)(v13 + 20) = -1;
      *(_BYTE *)(v13 + 24) = 0;
      *(_BYTE *)(v13 + 25) = 126;
      *(_BYTE *)(v13 + 26) = 0;
      *(_QWORD *)v13 = &off_1E35872F8;
      *(_QWORD *)(v13 + 32) = v9;
    }
    return (_QWORD **)v13;
  }
  return v9;
}

int32x2_t JSC::ASTBuilder::makeNegateNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32x2_t result;
  JSC::ParserArena *v7;
  uint64_t v8;
  int v9;
  char v10;
  char v11;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3))
  {
    JSC::ASTBuilder::createNumberFromUnaryOperation(a1, a2, a3, -*(double *)(a3 + 32));
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3))
  {
    return JSC::ASTBuilder::createBigIntFromUnaryOperation(*(_QWORD *)(a1 + 8), a2, *(_BYTE *)(a3 + 41) == 0, *(_QWORD *)(a3 + 32), *(_BYTE *)(a3 + 40));
  }
  else
  {
    v7 = *(JSC::ParserArena **)(a1 + 8);
    v8 = *(_QWORD *)v7;
    if (*((_QWORD *)v7 + 1) - *(_QWORD *)v7 <= 0x2FuLL)
    {
      JSC::ParserArena::allocateFreeablePool(v7);
      v8 = *(_QWORD *)v7;
    }
    *(_QWORD *)v7 = v8 + 48;
    v9 = *(_BYTE *)(a3 + 25) & 0x7E;
    if (v9 == 8)
      v10 = 8;
    else
      v10 = 10;
    if (v9 == 2)
      v11 = 2;
    else
      v11 = v10;
    *(_DWORD *)(v8 + 8) = *(_DWORD *)a2;
    result = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(int32x2_t *)(v8 + 12) = result;
    *(_DWORD *)(v8 + 20) = -1;
    *(_BYTE *)(v8 + 24) = 0;
    *(_BYTE *)(v8 + 25) = v11;
    *(_BYTE *)(v8 + 26) = 0;
    *(_QWORD *)(v8 + 32) = a3;
    *(_DWORD *)(v8 + 40) = 183;
    *(_QWORD *)v8 = &off_1E35787A0;
  }
  return result;
}

uint64_t JSC::ASTBuilder::createNumberFromUnaryOperation(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  int v7;
  JSC::ParserArena *v8;
  uint64_t result;
  unint64_t v10;
  char v11;
  void (**v12)(JSC::IntegerNode *__hidden);
  char v13;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 376))(a3);
  v8 = *(JSC::ParserArena **)(a1 + 8);
  result = *(_QWORD *)v8;
  v10 = *((_QWORD *)v8 + 1) - *(_QWORD *)v8;
  if (v7)
  {
    if (v10 <= 0x27)
    {
      JSC::ParserArena::allocateFreeablePool(v8);
      result = *(_QWORD *)v8;
    }
    *(_QWORD *)v8 = result + 40;
    if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (double)(int)a4 != a4
      || (v13 = 3, !(int)a4) && (*(_QWORD *)&a4 & 0x8000000000000000) != 0)
    {
      if (*(_QWORD *)&a4 >> 49 == 32766)
        v13 = 3;
      else
        v13 = 2;
    }
    *(_DWORD *)(result + 8) = *(_DWORD *)a2;
    *(int32x2_t *)(result + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(_DWORD *)(result + 20) = -1;
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 25) = v13;
    *(_BYTE *)(result + 26) = 0;
    *(double *)(result + 32) = a4;
    v12 = &off_1E3578920;
  }
  else
  {
    if (v10 <= 0x27)
    {
      JSC::ParserArena::allocateFreeablePool(v8);
      result = *(_QWORD *)v8;
    }
    *(_QWORD *)v8 = result + 40;
    if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (double)(int)a4 != a4
      || (v11 = 3, !(int)a4) && (*(_QWORD *)&a4 & 0x8000000000000000) != 0)
    {
      if (*(_QWORD *)&a4 >> 49 == 32766)
        v11 = 3;
      else
        v11 = 2;
    }
    *(_DWORD *)(result + 8) = *(_DWORD *)a2;
    *(int32x2_t *)(result + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(_DWORD *)(result + 20) = -1;
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 25) = v11;
    *(_BYTE *)(result + 26) = 0;
    *(double *)(result + 32) = a4;
    v12 = &off_1E3578AB0;
  }
  *(_QWORD *)result = v12;
  return result;
}

int32x2_t JSC::ASTBuilder::createBigIntFromUnaryOperation(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  int32x2_t result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if ((unint64_t)(v11 - v10) <= 0x2F)
  {
    if (v11)
    {
      v14 = (_QWORD *)(a1 + 24);
      v15 = v11 - 8000;
      v18 = v11 - 8000;
      v16 = *(unsigned int *)(a1 + 36);
      if ((_DWORD)v16 == *(_DWORD *)(a1 + 32))
      {
        v17 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v14, v16 + 1, (unint64_t)&v18);
        v16 = *(unsigned int *)(a1 + 36);
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v16) = *v17;
      }
      else
      {
        *(_QWORD *)(*v14 + 8 * v16) = v15;
      }
      *(_DWORD *)(a1 + 36) = v16 + 1;
    }
    v10 = WTF::fastMalloc((WTF *)0x1F40);
    *(_QWORD *)(a1 + 8) = v10 + 8000;
  }
  *(_QWORD *)a1 = v10 + 48;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v10 + 12) = result;
  *(_DWORD *)(v10 + 20) = -1;
  *(_BYTE *)(v10 + 24) = 0;
  *(_BYTE *)(v10 + 25) = 8;
  *(_BYTE *)(v10 + 26) = 0;
  *(_QWORD *)v10 = &off_1E3583E38;
  *(_QWORD *)(v10 + 32) = a4;
  *(_BYTE *)(v10 + 40) = a5;
  *(_BYTE *)(v10 + 41) = a3;
  return result;
}

int32x2_t JSC::ASTBuilder::makeBitwiseNotNode(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  JSC::ParserArena *v6;
  uint64_t v7;
  int32x2_t result;
  unint64_t v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  int v13;
  int v14;

  if ((*(unsigned int (**)(_QWORD *))(*a3 + 24))(a3))
  {
    v9 = a3[4];
    v10 = (v9 >> 52) & 0x7FF;
    v11 = -1.0;
    if ((v10 - 1023) <= 0x53)
    {
      v12 = v9 >> (51 - (v9 >> 52));
      if (v10 > 0x433)
        LODWORD(v12) = v9 << ((v9 >> 52) - 51);
      if (v10 >= 0x41F)
        v13 = v12;
      else
        v13 = (((1 << ((v9 >> 52) + 1)) - 1) & v12) + (1 << ((v9 >> 52) + 1));
      if ((v9 & 0x8000000000000000) == 0)
        v14 = v13;
      else
        v14 = -v13;
      v11 = (double)~v14;
    }
    return JSC::ASTBuilder::createIntegerLikeNumber(*(JSC::ParserArena **)(a1 + 8), a2, v11);
  }
  else
  {
    v6 = *(JSC::ParserArena **)(a1 + 8);
    v7 = *(_QWORD *)v6;
    if (*((_QWORD *)v6 + 1) - *(_QWORD *)v6 <= 0x2FuLL)
    {
      JSC::ParserArena::allocateFreeablePool(v6);
      v7 = *(_QWORD *)v6;
    }
    *(_QWORD *)v6 = v7 + 48;
    *(_DWORD *)(v7 + 8) = *(_DWORD *)a2;
    result = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(int32x2_t *)(v7 + 12) = result;
    *(_DWORD *)(v7 + 20) = -1;
    *(_BYTE *)(v7 + 24) = 0;
    *(_BYTE *)(v7 + 25) = 11;
    *(_BYTE *)(v7 + 26) = 0;
    *(_QWORD *)(v7 + 32) = a3;
    *(_DWORD *)(v7 + 40) = 194;
    *(_QWORD *)v7 = &off_1E3578C40;
  }
  return result;
}

int32x2_t JSC::ASTBuilder::createIntegerLikeNumber(JSC::ParserArena *a1, uint64_t a2, double a3)
{
  uint64_t v6;
  char v8;
  int32x2_t result;

  v6 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v6) <= 0x27)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v6 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v6 + 40;
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (double)(int)a3 != a3
    || (v8 = 3, !(int)a3) && (*(_QWORD *)&a3 & 0x8000000000000000) != 0)
  {
    if (*(_QWORD *)&a3 >> 49 == 32766)
      v8 = 3;
    else
      v8 = 2;
  }
  *(_DWORD *)(v6 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v6 + 12) = result;
  *(_DWORD *)(v6 + 20) = -1;
  *(_BYTE *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 25) = v8;
  *(_BYTE *)(v6 + 26) = 0;
  *(double *)(v6 + 32) = a3;
  *(_QWORD *)v6 = &off_1E3578920;
  return result;
}

int32x2_t JSC::ASTBuilder::makePowNode(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, char a5)
{
  double *v10;
  long double *v11;
  uint64_t *v12;
  uint64_t v13;
  double v15;

  v10 = (double *)(*(uint64_t (**)(double *))(*(_QWORD *)a3 + 360))(a3);
  v11 = (long double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 360))(a4);
  if ((*(unsigned int (**)(double *))(*(_QWORD *)v10 + 24))(v10)
    && (*(unsigned int (**)(long double *))(*(_QWORD *)v11 + 24))(v11))
  {
    v15 = operationMathPow(v10[4], v11[4]);
    return JSC::ASTBuilder::createNumberFromBinaryOperation(a1, a2, (uint64_t)v10, (uint64_t)v11, v15);
  }
  else
  {
    if (!(*(unsigned int (**)(double *))(*(_QWORD *)v10 + 24))(v10))
      v10 = a3;
    if ((*(unsigned int (**)(long double *))(*(_QWORD *)v11 + 24))(v11))
      a4 = (uint64_t)v11;
    v12 = *(uint64_t **)(a1 + 8);
    v13 = *v12;
    if ((unint64_t)(v12[1] - *v12) <= 0x37)
    {
      JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v12);
      v13 = *v12;
    }
    *v12 = v13 + 56;
    return JSC::PowNode::PowNode(v13, a2, (uint64_t)v10, a4, a5);
  }
}

int32x2_t JSC::ASTBuilder::createNumberFromBinaryOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  JSC::ParserArena *v9;
  uint64_t v10;
  char v11;
  int32x2_t result;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 376))(a3)
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 376))(a4))
  {
    return JSC::ASTBuilder::createDoubleLikeNumber(*(JSC::ParserArena **)(a1 + 8), a2, a5);
  }
  v9 = *(JSC::ParserArena **)(a1 + 8);
  v10 = *(_QWORD *)v9;
  if (*((_QWORD *)v9 + 1) - *(_QWORD *)v9 <= 0x27uLL)
  {
    JSC::ParserArena::allocateFreeablePool(v9);
    v10 = *(_QWORD *)v9;
  }
  *(_QWORD *)v9 = v10 + 40;
  if ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (double)(int)a5 != a5
    || (v11 = 3, !(int)a5) && (*(_QWORD *)&a5 & 0x8000000000000000) != 0)
  {
    if (*(_QWORD *)&a5 >> 49 == 32766)
      v11 = 3;
    else
      v11 = 2;
  }
  *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v10 + 12) = result;
  *(_DWORD *)(v10 + 20) = -1;
  *(_BYTE *)(v10 + 24) = 0;
  *(_BYTE *)(v10 + 25) = v11;
  *(_BYTE *)(v10 + 26) = 0;
  *(double *)(v10 + 32) = a5;
  *(_QWORD *)v10 = &off_1E3578920;
  return result;
}

int32x2_t JSC::ASTBuilder::createDoubleLikeNumber(JSC::ParserArena *a1, uint64_t a2, double a3)
{
  uint64_t v6;
  char v8;
  int32x2_t result;

  v6 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v6) <= 0x27)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v6 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v6 + 40;
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (double)(int)a3 != a3
    || (v8 = 3, !(int)a3) && (*(_QWORD *)&a3 & 0x8000000000000000) != 0)
  {
    if (*(_QWORD *)&a3 >> 49 == 32766)
      v8 = 3;
    else
      v8 = 2;
  }
  *(_DWORD *)(v6 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v6 + 12) = result;
  *(_DWORD *)(v6 + 20) = -1;
  *(_BYTE *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 25) = v8;
  *(_BYTE *)(v6 + 26) = 0;
  *(double *)(v6 + 32) = a3;
  *(_QWORD *)v6 = &off_1E3578AB0;
  return result;
}

uint64_t JSC::CoalesceNode::CoalesceNode(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  char v5;
  int v6;

  v4 = *(_BYTE *)(a3 + 25);
  v5 = *(_BYTE *)(a4 + 25);
  v6 = v4 & 0x7E;
  if ((v4 & 0x50) != 0)
    v4 = 126;
  *(_DWORD *)(result + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(result + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  if (v6 == 16)
    v4 = v5;
  *(_DWORD *)(result + 20) = -1;
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 25) = v4;
  *(_BYTE *)(result + 26) = 0;
  *(_QWORD *)result = &off_1E3588378;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 40) = a4;
  *(_BYTE *)(result + 48) = 1;
  return result;
}

int32x2_t JSC::ASTBuilder::makeStaticBlockFunctionCallNode(JSC::ParserArena *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  int32x2_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = *(_QWORD *)a1;
  if ((unint64_t)(*((_QWORD *)a1 + 1) - v12) <= 0x47)
  {
    JSC::ParserArena::allocateFreeablePool(a1);
    v12 = *(_QWORD *)a1;
  }
  *(_QWORD *)a1 = v12 + 72;
  *(_DWORD *)(v12 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v12 + 12) = result;
  *(_DWORD *)(v12 + 20) = -1;
  *(_BYTE *)(v12 + 24) = 0;
  *(_QWORD *)v12 = off_1E3583CB8;
  *(_BYTE *)(v12 + 25) = 126;
  *(_BYTE *)(v12 + 26) = 0;
  v15 = *a4;
  *(_DWORD *)(v12 + 36) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(v12 + 28) = v15;
  v16 = *a5;
  *(_DWORD *)(v12 + 48) = *((_DWORD *)a5 + 2);
  *(_QWORD *)(v12 + 40) = v16;
  v17 = *a6;
  *(_DWORD *)(v12 + 60) = *((_DWORD *)a6 + 2);
  *(_QWORD *)(v12 + 52) = v17;
  *(_QWORD *)v12 = &off_1E3585F48;
  *(_QWORD *)(v12 + 64) = a3;
  return result;
}

uint64_t JSC::ASTBuilder::makeFunctionCallNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, char a10)
{
  uint64_t v15;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  int v38;
  int v39;
  uint64_t *v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  int v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (**v76)(JSC::CallFunctionCallDotNode *__hidden);
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  int v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  char v88;
  __int128 v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t *v98;
  int v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;

  v15 = a3;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 240))(a3))
    *(_DWORD *)(a1 + 24) |= 0x100u;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 280))(v15)
    && !*(_BYTE *)(v15 + 104)
    && !*(_BYTE *)(v15 + 80))
  {
LABEL_46:
    v77 = *(uint64_t **)(a1 + 8);
    v78 = *v77;
    if ((unint64_t)(v77[1] - *v77) <= 0x6F)
    {
      JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a1 + 8));
      v78 = *v77;
    }
    *v77 = v78 + 112;
    v114 = *(_OWORD *)(v15 + 64);
    v115 = *(_QWORD *)(v15 + 80);
    v79 = *(_QWORD *)(v15 + 88);
    *(_DWORD *)(v78 + 8) = *(_DWORD *)a2;
    *(int32x2_t *)(v78 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(_DWORD *)(v78 + 20) = -1;
    *(_BYTE *)(v78 + 24) = 0;
    *(_QWORD *)v78 = off_1E3583CB8;
    *(_BYTE *)(v78 + 25) = 126;
    *(_BYTE *)(v78 + 26) = 0;
    v80 = *a7;
    *(_DWORD *)(v78 + 36) = *((_DWORD *)a7 + 2);
    *(_QWORD *)(v78 + 28) = v80;
    LODWORD(v80) = *((_DWORD *)a6 + 2);
    *(_QWORD *)(v78 + 40) = *a6;
    *(_DWORD *)(v78 + 48) = v80;
    LODWORD(v80) = *((_DWORD *)a8 + 2);
    *(_QWORD *)(v78 + 52) = *a8;
    *(_DWORD *)(v78 + 60) = v80;
    *(_QWORD *)v78 = &off_1E3586548;
    *(_OWORD *)(v78 + 64) = v114;
    *(_QWORD *)(v78 + 80) = v115;
    *(_QWORD *)(v78 + 88) = v79;
    *(_QWORD *)(v78 + 96) = a5;
    *(_BYTE *)(v78 + 104) = 1;
    return v78;
  }
  v113 = a5;
  v18 = a10;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 312))(v15))
  {
    v112 = (uint64_t *)(v15 + 32);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v15 + 32) + 88))(*(_QWORD *)(v15 + 32)))
    {
      if (!a10)
      {
        *v112 = JSC::ASTBuilder::makeFunctionCallNode(a1, a2, *v112, a4, v113, a6, a7, a8, a9, 0);
        return v15;
      }
      v18 = 1;
      while (1)
      {
        v19 = *v112;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v112 + 240))(*v112))
          *(_DWORD *)(a1 + 24) |= 0x100u;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 280))(v19)
          && !*(_BYTE *)(v19 + 104)
          && !*(_BYTE *)(v19 + 80))
        {
          break;
        }
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 312))(v19))
        {
          v18 = 1;
          goto LABEL_6;
        }
        v112 = (uint64_t *)(v19 + 32);
        if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 32) + 88))(*(_QWORD *)(v19 + 32)) & 1) == 0)
          goto LABEL_6;
      }
      v15 = v19;
      a5 = v113;
      goto LABEL_46;
    }
  }
  v19 = v15;
LABEL_6:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 88))(v19) & 1) == 0)
  {
    v66 = *(uint64_t **)(a1 + 8);
    v15 = *v66;
    if ((unint64_t)(v66[1] - *v66) <= 0x57)
    {
      JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v66);
      v15 = *v66;
    }
    *v66 = v15 + 88;
    *(_DWORD *)(v15 + 8) = *(_DWORD *)a2;
    *(int32x2_t *)(v15 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(_DWORD *)(v15 + 20) = -1;
    *(_BYTE *)(v15 + 24) = 0;
    *(_QWORD *)v15 = off_1E3583CB8;
    *(_BYTE *)(v15 + 25) = 126;
    *(_BYTE *)(v15 + 26) = 0;
    v67 = *a7;
    *(_DWORD *)(v15 + 36) = *((_DWORD *)a7 + 2);
    *(_QWORD *)(v15 + 28) = v67;
    v68 = *a6;
    *(_DWORD *)(v15 + 48) = *((_DWORD *)a6 + 2);
    *(_QWORD *)(v15 + 40) = v68;
    v69 = *a8;
    *(_DWORD *)(v15 + 60) = *((_DWORD *)a8 + 2);
    *(_QWORD *)(v15 + 52) = v69;
    *(_QWORD *)v15 = &off_1E3585DC8;
    *(_QWORD *)(v15 + 64) = v19;
    goto LABEL_14;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 112))(v19))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 128))(v19))
    {
      v87 = *(uint64_t **)(a1 + 8);
      v15 = *v87;
      if ((unint64_t)(v87[1] - *v87) <= 0x67)
      {
        JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v87);
        v15 = *v87;
      }
      *v87 = v15 + 104;
      v88 = *(_BYTE *)(v19 + 80);
      *(_DWORD *)(v15 + 8) = *(_DWORD *)a2;
      *(int32x2_t *)(v15 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
      *(_DWORD *)(v15 + 20) = -1;
      *(_BYTE *)(v15 + 24) = 0;
      *(_QWORD *)v15 = off_1E3583CB8;
      *(_BYTE *)(v15 + 26) = 0;
      v89 = *(_OWORD *)(v19 + 64);
      *(_BYTE *)(v15 + 25) = 126;
      v90 = *((_DWORD *)a7 + 2);
      *(_QWORD *)(v15 + 28) = *a7;
      *(_DWORD *)(v15 + 36) = v90;
      v91 = *a6;
      *(_DWORD *)(v15 + 48) = *((_DWORD *)a6 + 2);
      *(_QWORD *)(v15 + 40) = v91;
      v92 = *a8;
      *(_DWORD *)(v15 + 60) = *((_DWORD *)a8 + 2);
      *(_QWORD *)(v15 + 52) = v92;
      *(_QWORD *)(v15 + 64) = 0;
      *(_QWORD *)v15 = &off_1E3586248;
      *(_OWORD *)(v15 + 72) = v89;
      *(_QWORD *)(v15 + 88) = v113;
      *(_BYTE *)(v15 + 96) = v88;
      *(_BYTE *)(v15 + 97) = v18;
      v93 = *(_DWORD *)(v15 + 32) - *(_DWORD *)(v19 + 32);
      if (!HIWORD(v93))
      {
        v94 = *(_DWORD *)(v15 + 28) - *(_DWORD *)(v19 + 28);
        if (!HIWORD(v94))
        {
          v95 = *(_DWORD *)(v15 + 36) - *(_DWORD *)(v19 + 36);
          if (!HIWORD(v95))
          {
            v96 = *(_DWORD *)(v15 + 56) - *(_DWORD *)(v19 + 56);
            if (!HIWORD(v96))
            {
              *(_WORD *)(v15 + 64) = v93;
              *(_WORD *)(v15 + 66) = v96;
              *(_WORD *)(v15 + 68) = v94;
              *(_WORD *)(v15 + 70) = v95;
            }
          }
        }
      }
      return v15;
    }
    if ((a4 & 1) != 0)
      goto LABEL_25;
    v35 = *(_QWORD *)(*(_QWORD *)a1 + 41952);
    v36 = *(_QWORD *)(v35 + 48);
    v37 = **(int ***)(v19 + 40);
    if (v37 != *(int **)(v36 + 320))
    {
      v38 = JSC::Symbols::callPrivateName[0];
      JSC::Symbols::callPrivateName[0] += 2;
      if (v38)
      {
        JSC::Symbols::callPrivateName[0] = v38;
        if (v37 != JSC::Symbols::callPrivateName)
        {
LABEL_21:
          if (v37 != *(int **)(v36 + 80))
          {
            v39 = JSC::Symbols::applyPrivateName[0];
            JSC::Symbols::applyPrivateName[0] += 2;
            if (v39)
            {
              JSC::Symbols::applyPrivateName[0] = v39;
              if (v37 != JSC::Symbols::applyPrivateName)
              {
LABEL_24:
                if (v37 == *(int **)(v35 + 1464))
                {
                  if (*(_QWORD *)v113)
                  {
                    v97 = *(_QWORD *)(*(_QWORD *)v113 + 40);
                    if (v97)
                    {
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 112))(v97)
                        && !*(_QWORD *)(*(_QWORD *)v113 + 32)
                        && (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 32) + 112))(*(_QWORD *)(v19 + 32)) & 1) != 0
                         || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 32) + 224))(*(_QWORD *)(v19 + 32))))
                      {
                        v98 = *(uint64_t **)(a1 + 8);
                        v15 = *v98;
                        if ((unint64_t)(v98[1] - *v98) <= 0x6F)
                        {
                          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v98);
                          v15 = *v98;
                        }
                        *v98 = v15 + 112;
                        v99 = *(_DWORD *)(v19 + 48);
                        *(_DWORD *)(v15 + 8) = *(_DWORD *)a2;
                        *(int32x2_t *)(v15 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
                        *(_DWORD *)(v15 + 20) = -1;
                        *(_BYTE *)(v15 + 24) = 0;
                        *(_BYTE *)(v15 + 26) = 0;
                        *(_QWORD *)v15 = off_1E3579FC0;
                        v100 = *(_OWORD *)(v19 + 32);
                        *(_BYTE *)(v15 + 25) = 126;
                        *(_OWORD *)(v15 + 32) = v100;
                        *(_DWORD *)(v15 + 48) = v99;
                        v101 = *a7;
                        *(_DWORD *)(v15 + 60) = *((_DWORD *)a7 + 2);
                        *(_QWORD *)(v15 + 52) = v101;
                        v102 = *a6;
                        *(_DWORD *)(v15 + 72) = *((_DWORD *)a6 + 2);
                        *(_QWORD *)(v15 + 64) = v102;
                        v103 = *a8;
                        *(_DWORD *)(v15 + 84) = *((_DWORD *)a8 + 2);
                        *(_QWORD *)(v15 + 76) = v103;
                        *(_QWORD *)(v15 + 88) = 0;
                        *(_QWORD *)(v15 + 96) = v113;
                        *(_BYTE *)(v15 + 104) = v18;
                        *(_QWORD *)v15 = &off_1E35869C8;
                        goto LABEL_28;
                      }
                    }
                  }
                }
LABEL_25:
                v40 = *(uint64_t **)(a1 + 8);
                v15 = *v40;
                if ((unint64_t)(v40[1] - *v40) <= 0x6F)
                {
                  JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v40);
                  v15 = *v40;
                }
                *v40 = v15 + 112;
                v41 = *(_DWORD *)(v19 + 48);
                *(_DWORD *)(v15 + 8) = *(_DWORD *)a2;
                *(int32x2_t *)(v15 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
                *(_DWORD *)(v15 + 20) = -1;
                *(_BYTE *)(v15 + 24) = 0;
                *(_BYTE *)(v15 + 26) = 0;
                *(_QWORD *)v15 = off_1E3579FC0;
                v42 = *(_OWORD *)(v19 + 32);
                *(_BYTE *)(v15 + 25) = 126;
                *(_OWORD *)(v15 + 32) = v42;
                *(_DWORD *)(v15 + 48) = v41;
                v43 = *a7;
                *(_DWORD *)(v15 + 60) = *((_DWORD *)a7 + 2);
                *(_QWORD *)(v15 + 52) = v43;
                v44 = *a6;
                *(_DWORD *)(v15 + 72) = *((_DWORD *)a6 + 2);
                *(_QWORD *)(v15 + 64) = v44;
                v45 = *a8;
                *(_DWORD *)(v15 + 84) = *((_DWORD *)a8 + 2);
                *(_QWORD *)(v15 + 76) = v45;
                *(_QWORD *)v15 = &off_1E35863C8;
                *(_QWORD *)(v15 + 88) = 0;
                *(_QWORD *)(v15 + 96) = v113;
                *(_BYTE *)(v15 + 104) = v18;
                goto LABEL_28;
              }
            }
            else
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::applyPrivateName, v28, v29, v30, v31, v32, v33, v34);
              WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
              if (v37 != JSC::Symbols::applyPrivateName)
              {
                v35 = *(_QWORD *)(*(_QWORD *)a1 + 41952);
                v37 = **(int ***)(v19 + 40);
                goto LABEL_24;
              }
            }
          }
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 32) + 112))(*(_QWORD *)(v19 + 32))
            && **(_QWORD **)(*(_QWORD *)(v19 + 32) + 32) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 41952) + 728))
          {
            goto LABEL_25;
          }
          v81 = *(uint64_t **)(a1 + 8);
          v15 = *v81;
          if ((unint64_t)(v81[1] - *v81) <= 0x77)
          {
            JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v81);
            v15 = *v81;
          }
          *v81 = v15 + 120;
          v82 = *(_DWORD *)(v19 + 48);
          *(_DWORD *)(v15 + 8) = *(_DWORD *)a2;
          *(int32x2_t *)(v15 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
          *(_DWORD *)(v15 + 20) = -1;
          *(_BYTE *)(v15 + 24) = 0;
          *(_BYTE *)(v15 + 26) = 0;
          *(_QWORD *)v15 = off_1E3579FC0;
          v83 = *(_OWORD *)(v19 + 32);
          *(_BYTE *)(v15 + 25) = 126;
          *(_OWORD *)(v15 + 32) = v83;
          *(_DWORD *)(v15 + 48) = v82;
          v84 = *a7;
          *(_DWORD *)(v15 + 60) = *((_DWORD *)a7 + 2);
          *(_QWORD *)(v15 + 52) = v84;
          v85 = *a6;
          *(_DWORD *)(v15 + 72) = *((_DWORD *)a6 + 2);
          *(_QWORD *)(v15 + 64) = v85;
          v86 = *a8;
          *(_DWORD *)(v15 + 84) = *((_DWORD *)a8 + 2);
          *(_QWORD *)(v15 + 76) = v86;
          *(_QWORD *)(v15 + 88) = 0;
          *(_QWORD *)(v15 + 96) = v113;
          *(_BYTE *)(v15 + 104) = v18;
          v76 = &off_1E3586848;
LABEL_43:
          *(_QWORD *)v15 = v76;
          *(_QWORD *)(v15 + 112) = a9;
LABEL_28:
          v46 = *(_DWORD *)(v15 + 56) - *(_DWORD *)(v19 + 56);
          if (!HIWORD(v46))
          {
            v47 = *(_DWORD *)(v15 + 52) - *(_DWORD *)(v19 + 52);
            if (!HIWORD(v47))
            {
              v48 = *(_DWORD *)(v15 + 60) - *(_DWORD *)(v19 + 60);
              if (!HIWORD(v48))
              {
                v49 = *(_DWORD *)(v15 + 80) - *(_DWORD *)(v19 + 80);
                if (!HIWORD(v49))
                {
                  *(_WORD *)(v15 + 88) = v46;
                  *(_WORD *)(v15 + 90) = v49;
                  *(_WORD *)(v15 + 92) = v47;
                  *(_WORD *)(v15 + 94) = v48;
                }
              }
            }
          }
          return v15;
        }
      }
      else
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::callPrivateName, v28, v29, v30, v31, v32, v33, v34);
        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
        if (v37 != JSC::Symbols::callPrivateName)
        {
          v35 = *(_QWORD *)(*(_QWORD *)a1 + 41952);
          v36 = *(_QWORD *)(v35 + 48);
          v37 = **(int ***)(v19 + 40);
          goto LABEL_21;
        }
      }
    }
    v70 = *(uint64_t **)(a1 + 8);
    v15 = *v70;
    if ((unint64_t)(v70[1] - *v70) <= 0x77)
    {
      JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v70);
      v15 = *v70;
    }
    *v70 = v15 + 120;
    v71 = *(_DWORD *)(v19 + 48);
    *(_DWORD *)(v15 + 8) = *(_DWORD *)a2;
    *(int32x2_t *)(v15 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(_DWORD *)(v15 + 20) = -1;
    *(_BYTE *)(v15 + 24) = 0;
    *(_BYTE *)(v15 + 26) = 0;
    *(_QWORD *)v15 = off_1E3579FC0;
    v72 = *(_OWORD *)(v19 + 32);
    *(_BYTE *)(v15 + 25) = 126;
    *(_OWORD *)(v15 + 32) = v72;
    *(_DWORD *)(v15 + 48) = v71;
    v73 = *a7;
    *(_DWORD *)(v15 + 60) = *((_DWORD *)a7 + 2);
    *(_QWORD *)(v15 + 52) = v73;
    v74 = *a6;
    *(_DWORD *)(v15 + 72) = *((_DWORD *)a6 + 2);
    *(_QWORD *)(v15 + 64) = v74;
    v75 = *a8;
    *(_DWORD *)(v15 + 84) = *((_DWORD *)a8 + 2);
    *(_QWORD *)(v15 + 76) = v75;
    *(_QWORD *)(v15 + 88) = 0;
    *(_QWORD *)(v15 + 96) = v113;
    *(_BYTE *)(v15 + 104) = v18;
    v76 = &off_1E35866C8;
    goto LABEL_43;
  }
  v20 = *(_QWORD **)(v19 + 32);
  if (*v20 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 41952) + 1248))
    v21 = v18;
  else
    v21 = 1;
  if ((v21 & 1) != 0)
  {
    v22 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)v22;
    v23 = *(_QWORD *)(v22 + 8);
    if ((unint64_t)(v23 - *(_QWORD *)v22) <= 0x57)
    {
      if (v23)
      {
        v108 = (_QWORD *)(v22 + 24);
        v109 = v23 - 8000;
        v116 = v23 - 8000;
        v110 = *(unsigned int *)(v22 + 36);
        if ((_DWORD)v110 == *(_DWORD *)(v22 + 32))
        {
          v111 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v108, v110 + 1, (unint64_t)&v116);
          v110 = *(unsigned int *)(v22 + 36);
          *(_QWORD *)(*(_QWORD *)(v22 + 24) + 8 * v110) = *v111;
        }
        else
        {
          *(_QWORD *)(*v108 + 8 * v110) = v109;
        }
        *(_DWORD *)(v22 + 36) = v110 + 1;
      }
      v15 = WTF::fastMalloc((WTF *)0x1F40);
      *(_QWORD *)(v22 + 8) = v15 + 8000;
    }
    *(_QWORD *)v22 = v15 + 88;
    *(_DWORD *)(v15 + 8) = *(_DWORD *)a2;
    *(int32x2_t *)(v15 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(_DWORD *)(v15 + 20) = -1;
    *(_BYTE *)(v15 + 24) = 0;
    *(_QWORD *)v15 = off_1E3583CB8;
    *(_BYTE *)(v15 + 25) = 126;
    *(_BYTE *)(v15 + 26) = 0;
    v24 = *a7;
    *(_DWORD *)(v15 + 36) = *((_DWORD *)a7 + 2);
    *(_QWORD *)(v15 + 28) = v24;
    v25 = *a6;
    *(_DWORD *)(v15 + 48) = *((_DWORD *)a6 + 2);
    *(_QWORD *)(v15 + 40) = v25;
    v26 = *a8;
    *(_DWORD *)(v15 + 60) = *((_DWORD *)a8 + 2);
    *(_QWORD *)(v15 + 52) = v26;
    *(_QWORD *)v15 = &off_1E35860C8;
    *(_QWORD *)(v15 + 64) = v20;
LABEL_14:
    *(_QWORD *)(v15 + 72) = v113;
    *(_BYTE *)(v15 + 80) = v18;
    return v15;
  }
  ++*(_DWORD *)(a1 + 1216);
  *(_DWORD *)(a1 + 24) |= 1u;
  v104 = *(uint64_t **)(a1 + 8);
  v15 = *v104;
  if ((unint64_t)(v104[1] - *v104) <= 0x47)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a1 + 8));
    v15 = *v104;
  }
  *v104 = v15 + 72;
  *(_DWORD *)(v15 + 8) = *(_DWORD *)a2;
  *(int32x2_t *)(v15 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(_DWORD *)(v15 + 20) = -1;
  *(_BYTE *)(v15 + 24) = 0;
  *(_QWORD *)v15 = off_1E3583CB8;
  *(_BYTE *)(v15 + 25) = 126;
  *(_BYTE *)(v15 + 26) = 0;
  v105 = *a7;
  *(_DWORD *)(v15 + 36) = *((_DWORD *)a7 + 2);
  *(_QWORD *)(v15 + 28) = v105;
  v106 = *a6;
  *(_DWORD *)(v15 + 48) = *((_DWORD *)a6 + 2);
  *(_QWORD *)(v15 + 40) = v106;
  v107 = *a8;
  *(_DWORD *)(v15 + 60) = *((_DWORD *)a8 + 2);
  *(_QWORD *)(v15 + 52) = v107;
  *(_QWORD *)v15 = &off_1E3585C48;
  *(_QWORD *)(v15 + 64) = v113;
  return v15;
}

uint64_t JSC::ThrowableSubExpressionData::setSubexpressionInfo(uint64_t result, _DWORD *a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(_DWORD *)(result + 4) - a2[1];
  if (!HIWORD(v3))
  {
    v4 = *(_DWORD *)result - *a2;
    if (!HIWORD(v4))
    {
      v5 = *(_DWORD *)(result + 8) - a2[2];
      if (!HIWORD(v5))
      {
        v6 = *(_DWORD *)(result + 28) - a3;
        if (!HIWORD(v6))
        {
          *(_WORD *)(result + 36) = v3;
          *(_WORD *)(result + 38) = v6;
          *(_WORD *)(result + 40) = v4;
          *(_WORD *)(result + 42) = v5;
        }
      }
    }
  }
  return result;
}

double JSC::ASTBuilder::makeBinaryNode(uint64_t a1, uint64_t a2, int a3, double **a4, uint64_t a5)
{
  JSC::ParserArena *v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  void (**v15)(JSC::IntegerNode *__hidden);
  double *v16;
  uint64_t v17;
  char v18;
  JSC::ParserArena *v19;
  int v20;
  char v21;
  int v22;
  JSC::ParserArena *v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  int v29;
  JSC::ParserArena *v30;
  double *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  double *v36;
  double *v37;
  JSC::ParserArena *v38;
  char v39;
  int v40;
  int v41;
  int v43;
  JSC::ParserArena *v44;
  char v45;
  unsigned int v46;
  int v47;
  double *v48;
  _QWORD *v49;
  char v50;
  JSC::ParserArena *v51;
  double *v52;
  double *v53;
  char v54;
  JSC::ParserArena *v55;
  JSC::ParserArena *v56;
  double *v57;
  uint64_t v58;
  char v59;
  JSC::ParserArena *v60;
  double *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  JSC::ParserArena *v68;
  char v69;
  int v70;
  int v71;
  int v73;
  int v74;
  uint64_t v76;
  char v77;
  JSC::ParserArena *v78;
  char v79;
  int v80;
  int v81;
  int v83;
  JSC::ParserArena *v84;
  double *v85;
  uint64_t v86;
  char v87;
  double *v88;
  _QWORD *v89;
  char v90;
  JSC::ParserArena *v91;
  int v92;
  double *v94;
  _QWORD *v95;
  char v96;
  JSC::ParserArena *v97;
  JSC::ParserArena *v98;
  double *v99;
  uint64_t v100;
  char v101;
  double v102;
  JSC::ParserArena *v103;
  char v104;
  JSC::ParserArena *v105;
  JSC::ParserArena *v106;
  uint64_t v107;
  double *v108;
  uint64_t v109;
  char v110;
  void (**v111)(JSC::InstanceOfNode *__hidden);
  uint64_t v112;
  double *v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  JSC::ParserArena *v119;
  char v120;
  int v121;
  int v122;
  int v124;
  JSC::ParserArena *v125;
  JSC::ParserArena *v126;
  double *v127;
  uint64_t v128;
  char v129;
  double *v130;
  _QWORD *v131;
  char v132;
  JSC::ParserArena *v133;
  JSC::ParserArena *v134;
  double *v135;
  uint64_t v136;
  char v137;
  double *v138;
  double *v139;
  char v140;
  JSC::ParserArena *v141;
  JSC::ParserArena *v142;
  double *v143;
  uint64_t v144;
  char v145;
  unint64_t v146;
  uint64_t v147;
  int v148;
  double v149;
  double v150;
  JSC::ParserArena *v151;
  char v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  double v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  int v161;
  double *v162;
  uint64_t v163;
  JSC::ParserArena *v164;
  uint64_t v165;
  char v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  char v171;
  unint64_t v172;
  int v173;
  unint64_t v174;
  uint64_t v175;
  char v176;
  unint64_t v177;
  int v178;
  int v179;
  JSC::ParserArena *v180;
  uint64_t *v181;
  uint64_t v182;
  unint64_t v183;
  int v184;
  unint64_t v185;
  uint64_t v186;
  int v187;
  unint64_t v188;
  int v189;
  int v190;
  double v191;
  JSC *v192;
  unint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unint64_t v196;
  int v197;
  int v198;
  int v199;
  JSC *v200;
  JSC *v201;
  unint64_t v202;
  uint64_t v203;
  int v204;
  unint64_t v205;
  int v206;
  unint64_t v207;
  uint64_t v208;
  int v209;
  unint64_t v210;
  int v211;
  unint64_t v212;
  int v213;
  unint64_t v214;
  uint64_t v215;
  int v216;
  unint64_t v217;
  int v218;

  if (a3 > 131588)
  {
    if (a3 <= 174335)
    {
      if (a3 <= 156671)
      {
        switch(a3)
        {
          case 139264:
            v30 = *(JSC::ParserArena **)(a1 + 8);
            v10 = *(_QWORD *)v30;
            if (*((_QWORD *)v30 + 1) - *(_QWORD *)v30 <= 0x37uLL)
            {
              JSC::ParserArena::allocateFreeablePool(v30);
              v10 = *(_QWORD *)v30;
            }
            *(_QWORD *)v30 = v10 + 56;
            v31 = *a4;
            v32 = *(_QWORD *)a5;
            v33 = *(_BYTE *)(a5 + 44);
            *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
            *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
            *(_QWORD *)(v10 + 12) = v14;
            *(_DWORD *)(v10 + 20) = -1;
            *(_BYTE *)(v10 + 24) = 0;
            *(_BYTE *)(v10 + 25) = 32;
            *(_BYTE *)(v10 + 26) = 0;
            *(_BYTE *)(v10 + 27) = v33;
            *(_BYTE *)(v10 + 28) = 1;
            *(_DWORD *)(v10 + 32) = 148;
            *(_QWORD *)(v10 + 40) = v31;
            *(_QWORD *)(v10 + 48) = v32;
            v15 = &off_1E357A440;
            goto LABEL_20;
          case 139265:
            v98 = *(JSC::ParserArena **)(a1 + 8);
            v10 = *(_QWORD *)v98;
            if (*((_QWORD *)v98 + 1) - *(_QWORD *)v98 <= 0x37uLL)
            {
              JSC::ParserArena::allocateFreeablePool(v98);
              v10 = *(_QWORD *)v98;
            }
            *(_QWORD *)v98 = v10 + 56;
            v99 = *a4;
            v100 = *(_QWORD *)a5;
            v101 = *(_BYTE *)(a5 + 44);
            *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
            *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
            *(_QWORD *)(v10 + 12) = v14;
            *(_DWORD *)(v10 + 20) = -1;
            *(_BYTE *)(v10 + 24) = 0;
            *(_BYTE *)(v10 + 25) = 32;
            *(_BYTE *)(v10 + 26) = 0;
            *(_BYTE *)(v10 + 27) = v101;
            *(_BYTE *)(v10 + 28) = 1;
            *(_DWORD *)(v10 + 32) = 150;
            *(_QWORD *)(v10 + 40) = v99;
            *(_QWORD *)(v10 + 48) = v100;
            v15 = &off_1E357A5C0;
            goto LABEL_20;
          case 139266:
            v134 = *(JSC::ParserArena **)(a1 + 8);
            v10 = *(_QWORD *)v134;
            if (*((_QWORD *)v134 + 1) - *(_QWORD *)v134 <= 0x37uLL)
            {
              JSC::ParserArena::allocateFreeablePool(v134);
              v10 = *(_QWORD *)v134;
            }
            *(_QWORD *)v134 = v10 + 56;
            v135 = *a4;
            v136 = *(_QWORD *)a5;
            v137 = *(_BYTE *)(a5 + 44);
            *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
            *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
            *(_QWORD *)(v10 + 12) = v14;
            *(_DWORD *)(v10 + 20) = -1;
            *(_BYTE *)(v10 + 24) = 0;
            *(_BYTE *)(v10 + 25) = 32;
            *(_BYTE *)(v10 + 26) = 0;
            *(_BYTE *)(v10 + 27) = v137;
            *(_BYTE *)(v10 + 28) = 1;
            *(_DWORD *)(v10 + 32) = 149;
            *(_QWORD *)(v10 + 40) = v135;
            *(_QWORD *)(v10 + 48) = v136;
            v15 = &off_1E357A740;
            goto LABEL_20;
          case 139267:
            v126 = *(JSC::ParserArena **)(a1 + 8);
            v10 = *(_QWORD *)v126;
            if (*((_QWORD *)v126 + 1) - *(_QWORD *)v126 <= 0x37uLL)
            {
              JSC::ParserArena::allocateFreeablePool(v126);
              v10 = *(_QWORD *)v126;
            }
            *(_QWORD *)v126 = v10 + 56;
            v127 = *a4;
            v128 = *(_QWORD *)a5;
            v129 = *(_BYTE *)(a5 + 44);
            *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
            *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
            *(_QWORD *)(v10 + 12) = v14;
            *(_DWORD *)(v10 + 20) = -1;
            *(_BYTE *)(v10 + 24) = 0;
            *(_BYTE *)(v10 + 25) = 32;
            *(_BYTE *)(v10 + 26) = 0;
            *(_BYTE *)(v10 + 27) = v129;
            *(_BYTE *)(v10 + 28) = 1;
            *(_DWORD *)(v10 + 32) = 151;
            *(_QWORD *)(v10 + 40) = v127;
            *(_QWORD *)(v10 + 48) = v128;
            v15 = &off_1E357A8C0;
            goto LABEL_20;
          default:
            if (a3 == 139780)
            {
              v106 = *(JSC::ParserArena **)(a1 + 8);
              v107 = *(_QWORD *)v106;
              if (*((_QWORD *)v106 + 1) - *(_QWORD *)v106 <= 0x5FuLL)
              {
                JSC::ParserArena::allocateFreeablePool(v106);
                v107 = *(_QWORD *)v106;
              }
              *(_QWORD *)v106 = v107 + 96;
              v108 = *a4;
              v109 = *(_QWORD *)a5;
              v110 = *(_BYTE *)(a5 + 44);
              *(_DWORD *)(v107 + 8) = *(_DWORD *)a2;
              *(int32x2_t *)(v107 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
              *(_DWORD *)(v107 + 20) = -1;
              *(_BYTE *)(v107 + 24) = 0;
              *(_BYTE *)(v107 + 25) = 32;
              *(_BYTE *)(v107 + 26) = 0;
              *(_BYTE *)(v107 + 27) = v110;
              *(_BYTE *)(v107 + 28) = 1;
              *(_DWORD *)(v107 + 32) = 187;
              *(_QWORD *)(v107 + 40) = v108;
              *(_QWORD *)(v107 + 48) = v109;
              *(_DWORD *)(v107 + 88) = -1;
              *(_QWORD *)&v14 = -1;
              *((_QWORD *)&v14 + 1) = -1;
              *(_OWORD *)(v107 + 72) = v14;
              *(_OWORD *)(v107 + 56) = v14;
              v111 = &off_1E3587BF8;
            }
            else
            {
              if (a3 != 131589)
                goto LABEL_359;
              v142 = *(JSC::ParserArena **)(a1 + 8);
              v107 = *(_QWORD *)v142;
              if (*((_QWORD *)v142 + 1) - *(_QWORD *)v142 <= 0x5FuLL)
              {
                JSC::ParserArena::allocateFreeablePool(v142);
                v107 = *(_QWORD *)v142;
              }
              *(_QWORD *)v142 = v107 + 96;
              v143 = *a4;
              v144 = *(_QWORD *)a5;
              v145 = *(_BYTE *)(a5 + 44);
              *(_DWORD *)(v107 + 8) = *(_DWORD *)a2;
              *(int32x2_t *)(v107 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
              *(_DWORD *)(v107 + 20) = -1;
              *(_BYTE *)(v107 + 24) = 0;
              *(_BYTE *)(v107 + 25) = 126;
              *(_BYTE *)(v107 + 26) = 0;
              *(_BYTE *)(v107 + 27) = v145;
              *(_BYTE *)(v107 + 28) = 1;
              *(_DWORD *)(v107 + 32) = 37;
              *(_QWORD *)(v107 + 40) = v143;
              *(_QWORD *)(v107 + 48) = v144;
              *(_DWORD *)(v107 + 88) = -1;
              *(_QWORD *)&v14 = -1;
              *((_QWORD *)&v14 + 1) = -1;
              *(_OWORD *)(v107 + 72) = v14;
              *(_OWORD *)(v107 + 56) = v14;
              v111 = &off_1E3587D78;
            }
            *(_QWORD *)v107 = v111;
            v112 = *(_QWORD *)(a5 + 8);
            *(_DWORD *)(v107 + 64) = *(_DWORD *)(a5 + 16);
            *(_QWORD *)(v107 + 56) = v112;
            v113 = a4[1];
            *(_DWORD *)(v107 + 76) = *((_DWORD *)a4 + 4);
            *(_QWORD *)(v107 + 68) = v113;
            v114 = *(_QWORD *)(a5 + 32);
            *(_DWORD *)(v107 + 88) = *(_DWORD *)(a5 + 40);
            *(_QWORD *)(v107 + 80) = v114;
            return *(double *)&v14;
        }
      }
      if (a3 == 156673)
      {
        v52 = *a4;
        v53 = *(double **)a5;
        v54 = *(_BYTE *)(a5 + 44);
        if ((*(unsigned int (**)(double *))(*(_QWORD *)*a4 + 24))(*a4))
        {
          v192 = (JSC *)(*(uint64_t (**)(double *))(*(_QWORD *)v53 + 24))(v53);
          if ((_DWORD)v192)
          {
            v193 = *((_QWORD *)v52 + 4);
            v194 = (v193 >> 52) & 0x7FF;
            v195 = v194 - 1023;
            v196 = v193 >> (51 - (v193 >> 52));
            if (v194 > 0x433)
              LODWORD(v196) = v193 << ((v193 >> 52) - 51);
            if (v194 >= 0x41F)
              v197 = v196;
            else
              v197 = (((1 << ((v193 >> 52) + 1)) - 1) & v196) + (1 << ((v193 >> 52) + 1));
            if ((v193 & 0x8000000000000000) == 0)
              v198 = v197;
            else
              v198 = -v197;
            if (v195 <= 0x53)
              v199 = v198;
            else
              v199 = 0;
            v190 = v199 >> JSC::toUInt32(v192, v53[4]);
            goto LABEL_280;
          }
        }
        v55 = *(JSC::ParserArena **)(a1 + 8);
        v10 = *(_QWORD *)v55;
        if (*((_QWORD *)v55 + 1) - *(_QWORD *)v55 <= 0x37uLL)
        {
          JSC::ParserArena::allocateFreeablePool(v55);
          v10 = *(_QWORD *)v55;
        }
        *(_QWORD *)v55 = v10 + 56;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
        *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
        *(_QWORD *)(v10 + 12) = v14;
        *(_DWORD *)(v10 + 20) = -1;
        *(_BYTE *)(v10 + 24) = 0;
        *(_BYTE *)(v10 + 25) = 11;
        *(_BYTE *)(v10 + 26) = 0;
        *(_BYTE *)(v10 + 27) = v54;
        *(_BYTE *)(v10 + 28) = 1;
        *(_DWORD *)(v10 + 32) = 165;
        *(_QWORD *)(v10 + 40) = v52;
        *(_QWORD *)(v10 + 48) = v53;
        v15 = &off_1E3579840;
        goto LABEL_20;
      }
      if (a3 != 156672)
      {
        if (a3 != 156674)
          goto LABEL_359;
        v138 = *a4;
        v139 = *(double **)a5;
        v140 = *(_BYTE *)(a5 + 44);
        if ((*(unsigned int (**)(double *))(*(_QWORD *)*a4 + 24))(*a4))
        {
          v200 = (JSC *)(*(uint64_t (**)(double *))(*(_QWORD *)v139 + 24))(v139);
          if ((_DWORD)v200)
          {
            v201 = (JSC *)JSC::toUInt32(v200, v138[4]);
            v191 = (double)(v201 >> JSC::toUInt32(v201, v139[4]));
            goto LABEL_281;
          }
        }
        v141 = *(JSC::ParserArena **)(a1 + 8);
        v10 = *(_QWORD *)v141;
        if (*((_QWORD *)v141 + 1) - *(_QWORD *)v141 <= 0x37uLL)
        {
          JSC::ParserArena::allocateFreeablePool(v141);
          v10 = *(_QWORD *)v141;
        }
        *(_QWORD *)v141 = v10 + 56;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
        *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
        *(_QWORD *)(v10 + 12) = v14;
        *(_DWORD *)(v10 + 20) = -1;
        *(_BYTE *)(v10 + 24) = 0;
        *(_BYTE *)(v10 + 25) = 2;
        *(_BYTE *)(v10 + 26) = 0;
        *(_BYTE *)(v10 + 27) = v140;
        *(_BYTE *)(v10 + 28) = 1;
        *(_DWORD *)(v10 + 32) = 156;
        *(_QWORD *)(v10 + 40) = v138;
        *(_QWORD *)(v10 + 48) = v139;
        v15 = &off_1E35799C0;
        goto LABEL_20;
      }
      v94 = *a4;
      v95 = *(_QWORD **)a5;
      v96 = *(_BYTE *)(a5 + 44);
      if (!(*(unsigned int (**)(double *))(*(_QWORD *)*a4 + 24))(*a4)
        || !(*(unsigned int (**)(_QWORD *))(*v95 + 24))(v95))
      {
        v97 = *(JSC::ParserArena **)(a1 + 8);
        v10 = *(_QWORD *)v97;
        if (*((_QWORD *)v97 + 1) - *(_QWORD *)v97 <= 0x37uLL)
        {
          JSC::ParserArena::allocateFreeablePool(v97);
          v10 = *(_QWORD *)v97;
        }
        *(_QWORD *)v97 = v10 + 56;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
        *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
        *(_QWORD *)(v10 + 12) = v14;
        *(_DWORD *)(v10 + 20) = -1;
        *(_BYTE *)(v10 + 24) = 0;
        *(_BYTE *)(v10 + 25) = 11;
        *(_BYTE *)(v10 + 26) = 0;
        *(_BYTE *)(v10 + 27) = v96;
        *(_BYTE *)(v10 + 28) = 1;
        *(_DWORD *)(v10 + 32) = 164;
        *(_QWORD *)(v10 + 40) = v94;
        *(_QWORD *)(v10 + 48) = v95;
        v15 = &off_1E35796C0;
        goto LABEL_20;
      }
      v153 = *((_QWORD *)v94 + 4);
      v154 = (v153 >> 52) & 0x7FF;
      if ((v154 - 1023) <= 0x53)
      {
        v172 = v153 >> (51 - (v153 >> 52));
        if (v154 > 0x433)
          LODWORD(v172) = v153 << ((v153 >> 52) - 51);
        if (v154 >= 0x41F)
          v173 = v172;
        else
          v173 = (((1 << ((v153 >> 52) + 1)) - 1) & v172) + (1 << ((v153 >> 52) + 1));
        if ((v153 & 0x8000000000000000) == 0)
          v155 = v173;
        else
          v155 = -v173;
      }
      else
      {
        v155 = 0;
      }
      v174 = v95[4];
      v175 = (v174 >> 52) & 0x7FF;
      if ((v175 - 1023) <= 0x53)
      {
        v177 = v174 >> (51 - (v174 >> 52));
        if (v175 > 0x433)
          LODWORD(v177) = v174 << ((v174 >> 52) - 51);
        if (v175 >= 0x41F)
          v178 = v177;
        else
          v178 = (((1 << ((v174 >> 52) + 1)) - 1) & v177) + (1 << ((v174 >> 52) + 1));
        if ((v174 & 0x8000000000000000) == 0)
          LOBYTE(v179) = v178;
        else
          v179 = -v178;
        v176 = v179 & 0x1F;
      }
      else
      {
        v176 = 0;
      }
      v102 = (double)(v155 << v176);
      v180 = *(JSC::ParserArena **)(a1 + 8);
      v10 = *(_QWORD *)v180;
      if (*((_QWORD *)v180 + 1) - *(_QWORD *)v180 <= 0x27uLL)
      {
        JSC::ParserArena::allocateFreeablePool(v180);
        v10 = *(_QWORD *)v180;
      }
      *(_QWORD *)v180 = v10 + 40;
      *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
      *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
      *(_QWORD *)(v10 + 12) = v14;
      *(_DWORD *)(v10 + 20) = -1;
      *(_BYTE *)(v10 + 24) = 0;
      v104 = 3;
LABEL_137:
      *(_BYTE *)(v10 + 25) = v104;
      *(_BYTE *)(v10 + 26) = 0;
      *(double *)(v10 + 32) = v102;
      v15 = &off_1E3578920;
      goto LABEL_20;
    }
    if (a3 <= 191487)
    {
      if (a3 == 174336)
      {
        v16 = *a4;
        v17 = *(_QWORD *)a5;
        v18 = *(_BYTE *)(a5 + 44);
        if (!(*(unsigned int (**)(double *))(*(_QWORD *)*a4 + 24))(*a4)
          || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17))
        {
          v19 = *(JSC::ParserArena **)(a1 + 8);
          v10 = *(_QWORD *)v19;
          if (*((_QWORD *)v19 + 1) - *(_QWORD *)v19 <= 0x37uLL)
          {
            JSC::ParserArena::allocateFreeablePool(v19);
            v10 = *(_QWORD *)v19;
          }
          *(_QWORD *)v19 = v10 + 56;
          v20 = *((_BYTE *)v16 + 25) & 0x7E;
          if (v20 != 4)
          {
            v21 = *(_BYTE *)(v17 + 25);
            if (v20 == 2)
            {
              v170 = v21 & 0x7E;
              if (v170 == 4)
                v171 = 4;
              else
                v171 = 14;
              if (v170 == 2)
                LOBYTE(v20) = 2;
              else
                LOBYTE(v20) = v171;
            }
            else
            {
              v22 = v21 & 0x7E;
              if (v22 == 4)
              {
                LOBYTE(v20) = 4;
              }
              else if (v20 == 8 && v22 == 8)
              {
                LOBYTE(v20) = 8;
              }
              else
              {
                LOBYTE(v20) = 14;
              }
            }
          }
          *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
          *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
          *(_QWORD *)(v10 + 12) = v14;
          *(_DWORD *)(v10 + 20) = -1;
          *(_BYTE *)(v10 + 24) = 0;
          *(_BYTE *)(v10 + 25) = v20;
          *(_BYTE *)(v10 + 26) = 0;
          *(_BYTE *)(v10 + 27) = v18;
          *(_BYTE *)(v10 + 28) = 1;
          *(_DWORD *)(v10 + 32) = 157;
          *(_QWORD *)(v10 + 40) = v16;
          *(_QWORD *)(v10 + 48) = v17;
          v15 = &off_1E35793C0;
          goto LABEL_20;
        }
        v156 = v16[4] + *(double *)(v17 + 32);
        v157 = a1;
        v158 = a2;
        v168 = (uint64_t)v16;
        v169 = v17;
LABEL_226:
        *(int32x2_t *)&v14 = JSC::ASTBuilder::createNumberFromBinaryOperation(v157, v158, v168, v169, v156);
        return *(double *)&v14;
      }
      if (a3 != 174337)
        goto LABEL_359;
      v76 = *(_QWORD *)a5;
      v77 = *(_BYTE *)(a5 + 44);
      v66 = (*(uint64_t (**)(double *))(*(_QWORD *)*a4 + 360))(*a4);
      v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 360))(v76);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v66 + 24))(v66)
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67))
      {
        v156 = *(double *)(v66 + 32) - *(double *)(v67 + 32);
        v157 = a1;
        v158 = a2;
LABEL_283:
        v168 = v66;
        v169 = v67;
        goto LABEL_226;
      }
      v78 = *(JSC::ParserArena **)(a1 + 8);
      v10 = *(_QWORD *)v78;
      if (*((_QWORD *)v78 + 1) - *(_QWORD *)v78 <= 0x37uLL)
      {
        JSC::ParserArena::allocateFreeablePool(v78);
        v10 = *(_QWORD *)v78;
      }
      *(_QWORD *)v78 = v10 + 56;
      v79 = *(_BYTE *)(v67 + 25);
      v80 = *(_BYTE *)(v66 + 25) & 0x7E;
      if (v80 == 2)
      {
        v83 = v79 & 0x7E;
        if (v83 == 2)
          goto LABEL_100;
      }
      else
      {
        v81 = v79 & 0x7E;
        if (v80 == 8 && v81 == 8)
        {
          LOBYTE(v83) = 8;
          goto LABEL_100;
        }
      }
      LOBYTE(v83) = 10;
LABEL_100:
      *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
      *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
      *(_QWORD *)(v10 + 12) = v14;
      *(_DWORD *)(v10 + 20) = -1;
      *(_BYTE *)(v10 + 24) = 0;
      *(_BYTE *)(v10 + 25) = v83;
      *(_BYTE *)(v10 + 26) = 0;
      *(_BYTE *)(v10 + 27) = v77;
      *(_BYTE *)(v10 + 28) = 1;
      *(_DWORD *)(v10 + 32) = 160;
      *(_QWORD *)(v10 + 40) = v66;
      *(_QWORD *)(v10 + 48) = v67;
      v15 = &off_1E3579540;
      goto LABEL_20;
    }
    if (a3 < 191489)
    {
      v34 = *(_QWORD *)a5;
      v35 = *(_BYTE *)(a5 + 44);
      v36 = (double *)(*(uint64_t (**)(double *))(*(_QWORD *)*a4 + 360))(*a4);
      v37 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 360))(v34);
      if ((*(unsigned int (**)(double *))(*(_QWORD *)v36 + 24))(v36)
        && (*(unsigned int (**)(double *))(*(_QWORD *)v37 + 24))(v37))
      {
        v102 = v36[4] * v37[4];
        if (!(*(unsigned int (**)(double *))(*(_QWORD *)v36 + 376))(v36)
          || !(*(unsigned int (**)(double *))(*(_QWORD *)v37 + 376))(v37))
        {
          *(int32x2_t *)&v14 = JSC::ASTBuilder::createDoubleLikeNumber(*(JSC::ParserArena **)(a1 + 8), a2, v102);
          return *(double *)&v14;
        }
        v103 = *(JSC::ParserArena **)(a1 + 8);
        v10 = *(_QWORD *)v103;
        if (*((_QWORD *)v103 + 1) - *(_QWORD *)v103 <= 0x27uLL)
        {
          JSC::ParserArena::allocateFreeablePool(v103);
          v10 = *(_QWORD *)v103;
        }
        *(_QWORD *)v103 = v10 + 40;
        if ((*(_QWORD *)&v102 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || v102 != (double)(int)v102
          || (v104 = 3, !(int)v102) && (*(_QWORD *)&v102 & 0x8000000000000000) != 0)
        {
          if (*(_QWORD *)&v102 >> 49 == 32766)
            v104 = 3;
          else
            v104 = 2;
        }
        *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
        *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
        *(_QWORD *)(v10 + 12) = v14;
        *(_DWORD *)(v10 + 20) = -1;
        *(_BYTE *)(v10 + 24) = 0;
        goto LABEL_137;
      }
      if ((*(unsigned int (**)(double *))(*(_QWORD *)v36 + 24))(v36) && v36[4] == 1.0)
      {
        v105 = *(JSC::ParserArena **)(a1 + 8);
        v10 = *(_QWORD *)v105;
        if (*((_QWORD *)v105 + 1) - *(_QWORD *)v105 <= 0x2FuLL)
        {
          JSC::ParserArena::allocateFreeablePool(v105);
          v10 = *(_QWORD *)v105;
        }
        *(_QWORD *)v105 = v10 + 48;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
        *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
        *(_QWORD *)(v10 + 12) = v14;
        *(_DWORD *)(v10 + 20) = -1;
        *(_BYTE *)(v10 + 24) = 0;
        *(_BYTE *)(v10 + 25) = 2;
        *(_BYTE *)(v10 + 26) = 0;
        *(_QWORD *)(v10 + 32) = v37;
LABEL_164:
        *(_DWORD *)(v10 + 40) = 192;
        v15 = &off_1E35878F8;
        goto LABEL_20;
      }
      if ((*(unsigned int (**)(double *))(*(_QWORD *)v37 + 24))(v37) && v37[4] == 1.0)
      {
        v125 = *(JSC::ParserArena **)(a1 + 8);
        v10 = *(_QWORD *)v125;
        if (*((_QWORD *)v125 + 1) - *(_QWORD *)v125 <= 0x2FuLL)
        {
          JSC::ParserArena::allocateFreeablePool(v125);
          v10 = *(_QWORD *)v125;
        }
        *(_QWORD *)v125 = v10 + 48;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
        *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
        *(_QWORD *)(v10 + 12) = v14;
        *(_DWORD *)(v10 + 20) = -1;
        *(_BYTE *)(v10 + 24) = 0;
        *(_BYTE *)(v10 + 25) = 2;
        *(_BYTE *)(v10 + 26) = 0;
        *(_QWORD *)(v10 + 32) = v36;
        goto LABEL_164;
      }
      v38 = *(JSC::ParserArena **)(a1 + 8);
      v10 = *(_QWORD *)v38;
      if (*((_QWORD *)v38 + 1) - *(_QWORD *)v38 <= 0x37uLL)
      {
        JSC::ParserArena::allocateFreeablePool(v38);
        v10 = *(_QWORD *)v38;
      }
      *(_QWORD *)v38 = v10 + 56;
      v39 = *((_BYTE *)v37 + 25);
      v40 = *((_BYTE *)v36 + 25) & 0x7E;
      if (v40 == 2)
      {
        v43 = v39 & 0x7E;
        if (v43 == 2)
          goto LABEL_45;
      }
      else
      {
        v41 = v39 & 0x7E;
        if (v40 == 8 && v41 == 8)
        {
          LOBYTE(v43) = 8;
          goto LABEL_45;
        }
      }
      LOBYTE(v43) = 10;
LABEL_45:
      *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
      *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
      *(_QWORD *)(v10 + 12) = v14;
      *(_DWORD *)(v10 + 20) = -1;
      *(_BYTE *)(v10 + 24) = 0;
      *(_BYTE *)(v10 + 25) = v43;
      *(_BYTE *)(v10 + 26) = 0;
      *(_BYTE *)(v10 + 27) = v35;
      *(_BYTE *)(v10 + 28) = 1;
      *(_DWORD *)(v10 + 32) = 158;
      *(_QWORD *)(v10 + 40) = v36;
      *(_QWORD *)(v10 + 48) = v37;
      v15 = &off_1E3578F40;
      goto LABEL_20;
    }
    if (a3 == 191489)
    {
      v64 = *(_QWORD *)a5;
      v65 = *(_BYTE *)(a5 + 44);
      v66 = (*(uint64_t (**)(double *))(*(_QWORD *)*a4 + 360))(*a4);
      v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 360))(v64);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v66 + 24))(v66)
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67))
      {
        v149 = *(double *)(v67 + 32);
        v150 = *(double *)(v66 + 32) / v149;
        if (v150 != (double)(uint64_t)v150)
        {
          v151 = *(JSC::ParserArena **)(a1 + 8);
          v10 = *(_QWORD *)v151;
          if (*((_QWORD *)v151 + 1) - *(_QWORD *)v151 <= 0x27uLL)
          {
            JSC::ParserArena::allocateFreeablePool(v151);
            v10 = *(_QWORD *)v151;
          }
          *(_QWORD *)v151 = v10 + 40;
          if ((*(_QWORD *)&v150 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || v150 != (double)(int)v150
            || (v152 = 3, !(int)v150) && (*(_QWORD *)&v150 & 0x8000000000000000) != 0)
          {
            if (*(_QWORD *)&v150 >> 49 == 32766)
              v152 = 3;
            else
              v152 = 2;
          }
          *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
          *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
          *(_QWORD *)(v10 + 12) = v14;
          *(_DWORD *)(v10 + 20) = -1;
          *(_BYTE *)(v10 + 24) = 0;
          *(_BYTE *)(v10 + 25) = v152;
          *(_BYTE *)(v10 + 26) = 0;
          *(double *)(v10 + 32) = v150;
          v15 = &off_1E3578AB0;
          goto LABEL_20;
        }
        v157 = a1;
        v158 = a2;
        v156 = *(double *)(v66 + 32) / v149;
        goto LABEL_283;
      }
      v68 = *(JSC::ParserArena **)(a1 + 8);
      v10 = *(_QWORD *)v68;
      if (*((_QWORD *)v68 + 1) - *(_QWORD *)v68 <= 0x37uLL)
      {
        JSC::ParserArena::allocateFreeablePool(v68);
        v10 = *(_QWORD *)v68;
      }
      *(_QWORD *)v68 = v10 + 56;
      v69 = *(_BYTE *)(v67 + 25);
      v70 = *(_BYTE *)(v66 + 25) & 0x7E;
      if (v70 == 2)
      {
        v73 = v69 & 0x7E;
        if (v73 == 2)
          goto LABEL_80;
      }
      else
      {
        v71 = v69 & 0x7E;
        if (v70 == 8 && v71 == 8)
        {
          LOBYTE(v73) = 8;
          goto LABEL_80;
        }
      }
      LOBYTE(v73) = 10;
LABEL_80:
      *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
      *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
      *(_QWORD *)(v10 + 12) = v14;
      *(_DWORD *)(v10 + 20) = -1;
      *(_BYTE *)(v10 + 24) = 0;
      *(_BYTE *)(v10 + 25) = v73;
      *(_BYTE *)(v10 + 26) = 0;
      *(_BYTE *)(v10 + 27) = v65;
      *(_BYTE *)(v10 + 28) = 1;
      *(_DWORD *)(v10 + 32) = 159;
      *(_QWORD *)(v10 + 40) = v66;
      *(_QWORD *)(v10 + 48) = v67;
      v15 = &off_1E35790C0;
      goto LABEL_20;
    }
    if (a3 != 191490)
    {
      if (a3 == 4403200)
      {
        *(int32x2_t *)&v14 = JSC::ASTBuilder::makePowNode(a1, a2, *a4, *(_QWORD *)a5, *(_BYTE *)(a5 + 44));
        return *(double *)&v14;
      }
      goto LABEL_359;
    }
    v115 = *(_QWORD *)a5;
    v116 = *(_BYTE *)(a5 + 44);
    v117 = (*(uint64_t (**)(double *))(*(_QWORD *)*a4 + 360))(*a4);
    v118 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v115 + 360))(v115);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v117 + 24))(v117)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v118 + 24))(v118))
    {
      v191 = fmod(*(long double *)(v117 + 32), *(long double *)(v118 + 32));
      goto LABEL_281;
    }
    v119 = *(JSC::ParserArena **)(a1 + 8);
    v10 = *(_QWORD *)v119;
    if (*((_QWORD *)v119 + 1) - *(_QWORD *)v119 <= 0x37uLL)
    {
      JSC::ParserArena::allocateFreeablePool(v119);
      v10 = *(_QWORD *)v119;
    }
    *(_QWORD *)v119 = v10 + 56;
    v120 = *(_BYTE *)(v118 + 25);
    v121 = *(_BYTE *)(v117 + 25) & 0x7E;
    if (v121 == 2)
    {
      v124 = v120 & 0x7E;
      if (v124 == 2)
        goto LABEL_157;
    }
    else
    {
      v122 = v120 & 0x7E;
      if (v121 == 8 && v122 == 8)
      {
        LOBYTE(v124) = 8;
        goto LABEL_157;
      }
    }
    LOBYTE(v124) = 10;
LABEL_157:
    *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
    *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(_QWORD *)(v10 + 12) = v14;
    *(_DWORD *)(v10 + 20) = -1;
    *(_BYTE *)(v10 + 24) = 0;
    *(_BYTE *)(v10 + 25) = v124;
    *(_BYTE *)(v10 + 26) = 0;
    *(_BYTE *)(v10 + 27) = v116;
    *(_BYTE *)(v10 + 28) = 1;
    *(_DWORD *)(v10 + 32) = 154;
    *(_QWORD *)(v10 + 40) = v117;
    *(_QWORD *)(v10 + 48) = v118;
    v15 = &off_1E3579240;
    goto LABEL_20;
  }
  if (a3 >= 69632)
  {
    if (a3 > 121855)
    {
      switch(a3)
      {
        case 121856:
          v60 = *(JSC::ParserArena **)(a1 + 8);
          v10 = *(_QWORD *)v60;
          if (*((_QWORD *)v60 + 1) - *(_QWORD *)v60 <= 0x37uLL)
          {
            JSC::ParserArena::allocateFreeablePool(v60);
            v10 = *(_QWORD *)v60;
          }
          *(_QWORD *)v60 = v10 + 56;
          v61 = *a4;
          v62 = *(_QWORD *)a5;
          v63 = *(_BYTE *)(a5 + 44);
          *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
          *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
          *(_QWORD *)(v10 + 12) = v14;
          *(_DWORD *)(v10 + 20) = -1;
          *(_BYTE *)(v10 + 24) = 0;
          *(_BYTE *)(v10 + 25) = 32;
          *(_BYTE *)(v10 + 26) = 0;
          *(_BYTE *)(v10 + 27) = v63;
          *(_BYTE *)(v10 + 28) = 1;
          *(_DWORD *)(v10 + 32) = 144;
          *(_QWORD *)(v10 + 40) = v61;
          *(_QWORD *)(v10 + 48) = v62;
          v15 = &off_1E3587EF8;
          goto LABEL_20;
        case 121857:
          v84 = *(JSC::ParserArena **)(a1 + 8);
          v10 = *(_QWORD *)v84;
          if (*((_QWORD *)v84 + 1) - *(_QWORD *)v84 <= 0x37uLL)
          {
            JSC::ParserArena::allocateFreeablePool(v84);
            v10 = *(_QWORD *)v84;
          }
          *(_QWORD *)v84 = v10 + 56;
          v85 = *a4;
          v86 = *(_QWORD *)a5;
          v87 = *(_BYTE *)(a5 + 44);
          *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
          *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
          *(_QWORD *)(v10 + 12) = v14;
          *(_DWORD *)(v10 + 20) = -1;
          *(_BYTE *)(v10 + 24) = 0;
          *(_BYTE *)(v10 + 25) = 32;
          *(_BYTE *)(v10 + 26) = 0;
          *(_BYTE *)(v10 + 27) = v87;
          *(_BYTE *)(v10 + 28) = 1;
          *(_DWORD *)(v10 + 32) = 145;
          *(_QWORD *)(v10 + 40) = v85;
          *(_QWORD *)(v10 + 48) = v86;
          v15 = &off_1E357A140;
          goto LABEL_20;
        case 121858:
          v9 = *(JSC::ParserArena **)(a1 + 8);
          v10 = *(_QWORD *)v9;
          if (*((_QWORD *)v9 + 1) - *(_QWORD *)v9 <= 0x37uLL)
          {
            JSC::ParserArena::allocateFreeablePool(v9);
            v10 = *(_QWORD *)v9;
          }
          *(_QWORD *)v9 = v10 + 56;
          v11 = *a4;
          v12 = *(_QWORD *)a5;
          v13 = *(_BYTE *)(a5 + 44);
          *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
          *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
          *(_QWORD *)(v10 + 12) = v14;
          *(_DWORD *)(v10 + 20) = -1;
          *(_BYTE *)(v10 + 24) = 0;
          *(_BYTE *)(v10 + 25) = 32;
          *(_BYTE *)(v10 + 26) = 0;
          *(_BYTE *)(v10 + 27) = v13;
          *(_BYTE *)(v10 + 28) = 1;
          *(_DWORD *)(v10 + 32) = 146;
          *(_QWORD *)(v10 + 40) = v11;
          *(_QWORD *)(v10 + 48) = v12;
          v15 = &off_1E3588078;
          goto LABEL_20;
        case 121859:
          v56 = *(JSC::ParserArena **)(a1 + 8);
          v10 = *(_QWORD *)v56;
          if (*((_QWORD *)v56 + 1) - *(_QWORD *)v56 <= 0x37uLL)
          {
            JSC::ParserArena::allocateFreeablePool(v56);
            v10 = *(_QWORD *)v56;
          }
          *(_QWORD *)v56 = v10 + 56;
          v57 = *a4;
          v58 = *(_QWORD *)a5;
          v59 = *(_BYTE *)(a5 + 44);
          *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
          *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
          *(_QWORD *)(v10 + 12) = v14;
          *(_DWORD *)(v10 + 20) = -1;
          *(_BYTE *)(v10 + 24) = 0;
          *(_BYTE *)(v10 + 25) = 32;
          *(_BYTE *)(v10 + 26) = 0;
          *(_BYTE *)(v10 + 27) = v59;
          *(_BYTE *)(v10 + 28) = 1;
          *(_DWORD *)(v10 + 32) = 147;
          *(_QWORD *)(v10 + 40) = v57;
          *(_QWORD *)(v10 + 48) = v58;
          v15 = &off_1E357A2C0;
          goto LABEL_20;
        default:
          goto LABEL_359;
      }
    }
    if (a3 != 104448)
    {
      if (a3 == 69632)
      {
        v48 = *a4;
        v49 = *(_QWORD **)a5;
        v50 = *(_BYTE *)(a5 + 44);
        if ((*(unsigned int (**)(double *))(*(_QWORD *)*a4 + 24))(*a4)
          && (*(unsigned int (**)(_QWORD *))(*v49 + 24))(v49))
        {
          v159 = *((_QWORD *)v48 + 4);
          v160 = (v159 >> 52) & 0x7FF;
          if ((v160 - 1023) <= 0x53)
          {
            v183 = v159 >> (51 - (v159 >> 52));
            if (v160 > 0x433)
              LODWORD(v183) = v159 << ((v159 >> 52) - 51);
            if (v160 >= 0x41F)
              v184 = v183;
            else
              v184 = (((1 << ((v159 >> 52) + 1)) - 1) & v183) + (1 << ((v159 >> 52) + 1));
            if ((v159 & 0x8000000000000000) == 0)
              v161 = v184;
            else
              v161 = -v184;
          }
          else
          {
            v161 = 0;
          }
          v185 = v49[4];
          v186 = (v185 >> 52) & 0x7FF;
          if ((v186 - 1023) <= 0x53)
          {
            v188 = v185 >> (51 - (v185 >> 52));
            if (v186 > 0x433)
              LODWORD(v188) = v185 << ((v185 >> 52) - 51);
            if (v186 >= 0x41F)
              v189 = v188;
            else
              v189 = (((1 << ((v185 >> 52) + 1)) - 1) & v188) + (1 << ((v185 >> 52) + 1));
            if ((v185 & 0x8000000000000000) == 0)
              v187 = v189;
            else
              v187 = -v189;
          }
          else
          {
            v187 = 0;
          }
          v190 = v187 | v161;
LABEL_280:
          v191 = (double)v190;
LABEL_281:
          *(int32x2_t *)&v14 = JSC::ASTBuilder::createIntegerLikeNumber(*(JSC::ParserArena **)(a1 + 8), a2, v191);
          return *(double *)&v14;
        }
        v51 = *(JSC::ParserArena **)(a1 + 8);
        v10 = *(_QWORD *)v51;
        if (*((_QWORD *)v51 + 1) - *(_QWORD *)v51 <= 0x37uLL)
        {
          JSC::ParserArena::allocateFreeablePool(v51);
          v10 = *(_QWORD *)v51;
        }
        *(_QWORD *)v51 = v10 + 56;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
        *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
        *(_QWORD *)(v10 + 12) = v14;
        *(_DWORD *)(v10 + 20) = -1;
        *(_BYTE *)(v10 + 24) = 0;
        *(_BYTE *)(v10 + 25) = 11;
        *(_BYTE *)(v10 + 26) = 0;
        *(_BYTE *)(v10 + 27) = v50;
        *(_BYTE *)(v10 + 28) = 1;
        *(_DWORD *)(v10 + 32) = 162;
        *(_QWORD *)(v10 + 40) = v48;
        *(_QWORD *)(v10 + 48) = v49;
        v15 = &off_1E3579B40;
        goto LABEL_20;
      }
      if (a3 == 87040)
      {
        v130 = *a4;
        v131 = *(_QWORD **)a5;
        v132 = *(_BYTE *)(a5 + 44);
        if ((*(unsigned int (**)(double *))(*(_QWORD *)*a4 + 24))(*a4)
          && (*(unsigned int (**)(_QWORD *))(*v131 + 24))(v131))
        {
          v202 = *((_QWORD *)v130 + 4);
          v203 = (v202 >> 52) & 0x7FF;
          if ((v203 - 1023) <= 0x53)
          {
            v212 = v202 >> (51 - (v202 >> 52));
            if (v203 > 0x433)
              LODWORD(v212) = v202 << ((v202 >> 52) - 51);
            if (v203 >= 0x41F)
              v213 = v212;
            else
              v213 = (((1 << ((v202 >> 52) + 1)) - 1) & v212) + (1 << ((v202 >> 52) + 1));
            if ((v202 & 0x8000000000000000) == 0)
              v204 = v213;
            else
              v204 = -v213;
          }
          else
          {
            v204 = 0;
          }
          v214 = v131[4];
          v215 = (v214 >> 52) & 0x7FF;
          if ((v215 - 1023) <= 0x53)
          {
            v217 = v214 >> (51 - (v214 >> 52));
            if (v215 > 0x433)
              LODWORD(v217) = v214 << ((v214 >> 52) - 51);
            if (v215 >= 0x41F)
              v218 = v217;
            else
              v218 = (((1 << ((v214 >> 52) + 1)) - 1) & v217) + (1 << ((v214 >> 52) + 1));
            if ((v214 & 0x8000000000000000) == 0)
              v216 = v218;
            else
              v216 = -v218;
          }
          else
          {
            v216 = 0;
          }
          v190 = v216 ^ v204;
          goto LABEL_280;
        }
        v133 = *(JSC::ParserArena **)(a1 + 8);
        v10 = *(_QWORD *)v133;
        if (*((_QWORD *)v133 + 1) - *(_QWORD *)v133 <= 0x37uLL)
        {
          JSC::ParserArena::allocateFreeablePool(v133);
          v10 = *(_QWORD *)v133;
        }
        *(_QWORD *)v133 = v10 + 56;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
        *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
        *(_QWORD *)(v10 + 12) = v14;
        *(_DWORD *)(v10 + 20) = -1;
        *(_BYTE *)(v10 + 24) = 0;
        *(_BYTE *)(v10 + 25) = 11;
        *(_BYTE *)(v10 + 26) = 0;
        *(_BYTE *)(v10 + 27) = v132;
        *(_BYTE *)(v10 + 28) = 1;
        *(_DWORD *)(v10 + 32) = 163;
        *(_QWORD *)(v10 + 40) = v130;
        *(_QWORD *)(v10 + 48) = v131;
        v15 = &off_1E3579E40;
        goto LABEL_20;
      }
LABEL_359:
      __break(0xC471u);
      JUMPOUT(0x197E436C0);
    }
    v88 = *a4;
    v89 = *(_QWORD **)a5;
    v90 = *(_BYTE *)(a5 + 44);
    if ((*(unsigned int (**)(double *))(*(_QWORD *)*a4 + 24))(*a4)
      && (*(unsigned int (**)(_QWORD *))(*v89 + 24))(v89))
    {
      v146 = *((_QWORD *)v88 + 4);
      v147 = (v146 >> 52) & 0x7FF;
      if ((v147 - 1023) <= 0x53)
      {
        v205 = v146 >> (51 - (v146 >> 52));
        if (v147 > 0x433)
          LODWORD(v205) = v146 << ((v146 >> 52) - 51);
        if (v147 >= 0x41F)
          v206 = v205;
        else
          v206 = (((1 << ((v146 >> 52) + 1)) - 1) & v205) + (1 << ((v146 >> 52) + 1));
        if ((v146 & 0x8000000000000000) == 0)
          v148 = v206;
        else
          v148 = -v206;
      }
      else
      {
        v148 = 0;
      }
      v207 = v89[4];
      v208 = (v207 >> 52) & 0x7FF;
      if ((v208 - 1023) <= 0x53)
      {
        v210 = v207 >> (51 - (v207 >> 52));
        if (v208 > 0x433)
          LODWORD(v210) = v207 << ((v207 >> 52) - 51);
        if (v208 >= 0x41F)
          v211 = v210;
        else
          v211 = (((1 << ((v207 >> 52) + 1)) - 1) & v210) + (1 << ((v207 >> 52) + 1));
        if ((v207 & 0x8000000000000000) == 0)
          v209 = v211;
        else
          v209 = -v211;
      }
      else
      {
        v209 = 0;
      }
      v190 = v209 & v148;
      goto LABEL_280;
    }
    v91 = *(JSC::ParserArena **)(a1 + 8);
    v10 = *(_QWORD *)v91;
    if (*((_QWORD *)v91 + 1) - *(_QWORD *)v91 <= 0x37uLL)
    {
      JSC::ParserArena::allocateFreeablePool(v91);
      v10 = *(_QWORD *)v91;
    }
    *(_QWORD *)v91 = v10 + 56;
    *(_DWORD *)(v10 + 8) = *(_DWORD *)a2;
    *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(_QWORD *)(v10 + 12) = v14;
    *(_DWORD *)(v10 + 20) = -1;
    *(_BYTE *)(v10 + 24) = 0;
    *(_BYTE *)(v10 + 25) = 11;
    *(_BYTE *)(v10 + 26) = 0;
    *(_BYTE *)(v10 + 27) = v90;
    *(_BYTE *)(v10 + 28) = 1;
    *(_DWORD *)(v10 + 32) = 161;
    *(_QWORD *)(v10 + 40) = v88;
    *(_QWORD *)(v10 + 48) = v89;
    v15 = &off_1E3579CC0;
LABEL_20:
    *(_QWORD *)v10 = v15;
    return *(double *)&v14;
  }
  if (a3 == 52224)
  {
    v23 = *(JSC::ParserArena **)(a1 + 8);
    v24 = *(_QWORD *)v23;
    if (*((_QWORD *)v23 + 1) - *(_QWORD *)v23 <= 0x2FuLL)
    {
      JSC::ParserArena::allocateFreeablePool(v23);
      v24 = *(_QWORD *)v23;
    }
    *(_QWORD *)v23 = v24 + 48;
    v25 = *a4;
    v26 = *(_QWORD *)a5;
    v27 = *(_BYTE *)(*(_QWORD *)a5 + 25);
    v28 = *((_BYTE *)*a4 + 25) & 0x7E;
    if (v28 <= 0x1F)
    {
      if (v28 == 2)
      {
        v29 = v27 & 0x7E;
        if (v29 == 2)
          goto LABEL_88;
      }
      else if (v28 == 4)
      {
        v29 = v27 & 0x7E;
        if (v29 == 4)
          goto LABEL_88;
      }
      else
      {
        v74 = v27 & 0x7E;
        if (v28 == 8 && v74 == 8)
        {
          LOBYTE(v29) = 8;
          goto LABEL_88;
        }
      }
    }
    else if (v28 == 32)
    {
      v29 = v27 & 0x7E;
      if (v29 == 32)
        goto LABEL_88;
    }
    LOBYTE(v29) = 126;
LABEL_88:
    *(_DWORD *)(v24 + 8) = *(_DWORD *)a2;
    *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(_QWORD *)(v24 + 12) = v14;
    *(_DWORD *)(v24 + 20) = -1;
    *(_BYTE *)(v24 + 24) = 0;
    *(_BYTE *)(v24 + 25) = v29;
    *(_WORD *)(v24 + 26) = 0;
LABEL_89:
    *(_QWORD *)v24 = &off_1E35881F8;
    *(_QWORD *)(v24 + 32) = v25;
    *(_QWORD *)(v24 + 40) = v26;
    return *(double *)&v14;
  }
  if (a3 == 34816)
  {
    v44 = *(JSC::ParserArena **)(a1 + 8);
    v24 = *(_QWORD *)v44;
    if (*((_QWORD *)v44 + 1) - *(_QWORD *)v44 <= 0x2FuLL)
    {
      JSC::ParserArena::allocateFreeablePool(v44);
      v24 = *(_QWORD *)v44;
    }
    *(_QWORD *)v44 = v24 + 48;
    v25 = *a4;
    v26 = *(_QWORD *)a5;
    v45 = *(_BYTE *)(*(_QWORD *)a5 + 25);
    v46 = *((_BYTE *)*a4 + 25) & 0x7E;
    if (v46 <= 0x1F)
    {
      if (v46 == 2)
      {
        v47 = v45 & 0x7E;
        if (v47 == 2)
          goto LABEL_115;
      }
      else if (v46 == 4)
      {
        v47 = v45 & 0x7E;
        if (v47 == 4)
          goto LABEL_115;
      }
      else
      {
        v92 = v45 & 0x7E;
        if (v46 == 8 && v92 == 8)
        {
          LOBYTE(v47) = 8;
          goto LABEL_115;
        }
      }
    }
    else if (v46 == 32)
    {
      v47 = v45 & 0x7E;
      if (v47 == 32)
        goto LABEL_115;
    }
    LOBYTE(v47) = 126;
LABEL_115:
    *(_DWORD *)(v24 + 8) = *(_DWORD *)a2;
    *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(_QWORD *)(v24 + 12) = v14;
    *(_DWORD *)(v24 + 20) = -1;
    *(_BYTE *)(v24 + 24) = 0;
    *(_BYTE *)(v24 + 25) = v47;
    *(_WORD *)(v24 + 26) = 256;
    goto LABEL_89;
  }
  if (a3 != 17408)
    goto LABEL_359;
  v162 = *a4;
  v163 = *(_QWORD *)a5;
  if (!(*(unsigned int (**)(double *))(*(_QWORD *)*a4 + 312))(*a4)
    || ((*(uint64_t (**)(_QWORD))(**((_QWORD **)v162 + 4) + 304))(*((_QWORD *)v162 + 4)) & 1) != 0)
  {
    v164 = *(JSC::ParserArena **)(a1 + 8);
    v165 = *(_QWORD *)v164;
    if (*((_QWORD *)v164 + 1) - *(_QWORD *)v164 <= 0x37uLL)
    {
      JSC::ParserArena::allocateFreeablePool(v164);
      v165 = *(_QWORD *)v164;
    }
    *(_QWORD *)v164 = v165 + 56;
    v166 = *((_BYTE *)v162 + 25);
    v167 = v166 & 0x7E;
    if ((v166 & 0x50) != 0)
      v166 = 126;
    if (v167 == 16)
      v166 = *(_BYTE *)(v163 + 25);
    *(_DWORD *)(v165 + 8) = *(_DWORD *)a2;
    *(int32x2_t *)&v14 = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(_QWORD *)(v165 + 12) = v14;
    *(_DWORD *)(v165 + 20) = -1;
    *(_BYTE *)(v165 + 24) = 0;
    *(_BYTE *)(v165 + 25) = v166;
    *(_BYTE *)(v165 + 26) = 0;
    *(_QWORD *)v165 = &off_1E3588378;
    *(_QWORD *)(v165 + 32) = v162;
    *(_QWORD *)(v165 + 40) = v163;
    *(_BYTE *)(v165 + 48) = 0;
  }
  else
  {
    v181 = *(uint64_t **)(a1 + 8);
    v182 = *v181;
    if ((unint64_t)(v181[1] - *v181) <= 0x37)
    {
      JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v181);
      v182 = *v181;
    }
    *v181 = v182 + 56;
    JSC::CoalesceNode::CoalesceNode(v182, a2, *((_QWORD *)v162 + 4), v163);
  }
  return *(double *)&v14;
}

uint64_t JSC::ASTBuilder::makeAssignNode(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _QWORD *a5, char a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (**v57)(JSC::ReadModifyResolveNode *__hidden);
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  WTF::StringImpl *v63;
  uint64_t *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t *v69;
  __int128 v70;
  int v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  void (**v75)(JSC::ReadModifyBracketNode *__hidden);
  char v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  _DWORD *v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  uint64_t *v85;
  int v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t *v117;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 88))(a3) & 1) != 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3))
    {
      if (a4)
      {
        if ((a4 - 12) >= 3)
        {
          v58 = *(uint64_t **)(a1 + 8);
          v19 = *v58;
          if ((unint64_t)(v58[1] - *v58) <= 0x57)
          {
            JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v58);
            v19 = *v58;
          }
          *v58 = v19 + 88;
          v53 = *(_QWORD *)(a3 + 32);
          *(_DWORD *)(v19 + 8) = *(_DWORD *)a2;
          *(int32x2_t *)(v19 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
          *(_DWORD *)(v19 + 20) = -1;
          *(_BYTE *)(v19 + 24) = 0;
          *(_QWORD *)v19 = off_1E3583CB8;
          *(_BYTE *)(v19 + 25) = 126;
          *(_BYTE *)(v19 + 26) = 0;
          v59 = *(_QWORD *)a9;
          *(_DWORD *)(v19 + 36) = *(_DWORD *)(a9 + 8);
          *(_QWORD *)(v19 + 28) = v59;
          v60 = *(_QWORD *)a8;
          *(_DWORD *)(v19 + 48) = *(_DWORD *)(a8 + 8);
          *(_QWORD *)(v19 + 40) = v60;
          v56 = *(_QWORD *)a10;
          *(_DWORD *)(v19 + 60) = *(_DWORD *)(a10 + 8);
          v57 = &off_1E35887F8;
        }
        else
        {
          if ((*(unsigned int (**)(_QWORD *))(*a5 + 152))(a5))
          {
            v81 = a5[4];
            v82 = **(_DWORD ***)(a3 + 32);
            if (v82)
              *v82 += 2;
            v83 = *(WTF::StringImpl **)(v81 + 48);
            *(_QWORD *)(v81 + 48) = v82;
            if (v83)
            {
              if (*(_DWORD *)v83 == 2)
              {
                WTF::StringImpl::~StringImpl(v83, v45, v46, v47, v48, v49, v50, v51);
                WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
              }
              else
              {
                *(_DWORD *)v83 -= 2;
              }
            }
          }
          else if ((*(unsigned int (**)(_QWORD *))(*a5 + 176))(a5))
          {
            v84 = *(_QWORD *)(a3 + 32);
            if (*(_QWORD *)a5[20])
              v84 = a5[20];
            a5[21] = v84;
          }
          v52 = *(uint64_t **)(a1 + 8);
          v19 = *v52;
          if ((unint64_t)(v52[1] - *v52) <= 0x57)
          {
            JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v52);
            v19 = *v52;
          }
          *v52 = v19 + 88;
          v53 = *(_QWORD *)(a3 + 32);
          *(_DWORD *)(v19 + 8) = *(_DWORD *)a2;
          *(int32x2_t *)(v19 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
          *(_DWORD *)(v19 + 20) = -1;
          *(_BYTE *)(v19 + 24) = 0;
          *(_QWORD *)v19 = off_1E3583CB8;
          *(_BYTE *)(v19 + 25) = 126;
          *(_BYTE *)(v19 + 26) = 0;
          v54 = *(_QWORD *)a9;
          *(_DWORD *)(v19 + 36) = *(_DWORD *)(a9 + 8);
          *(_QWORD *)(v19 + 28) = v54;
          v55 = *(_QWORD *)a8;
          *(_DWORD *)(v19 + 48) = *(_DWORD *)(a8 + 8);
          *(_QWORD *)(v19 + 40) = v55;
          v56 = *(_QWORD *)a10;
          *(_DWORD *)(v19 + 60) = *(_DWORD *)(a10 + 8);
          v57 = &off_1E3588978;
        }
        *(_QWORD *)(v19 + 52) = v56;
        *(_QWORD *)v19 = v57;
        *(_QWORD *)(v19 + 64) = v53;
        *(_QWORD *)(v19 + 72) = a5;
        *(_BYTE *)(v19 + 80) = a4;
        *(_BYTE *)(v19 + 81) = a7;
      }
      else
      {
        if ((*(unsigned int (**)(_QWORD *))(*a5 + 152))(a5))
        {
          v61 = a5[4];
          v62 = **(_DWORD ***)(a3 + 32);
          if (v62)
            *v62 += 2;
          v63 = *(WTF::StringImpl **)(v61 + 48);
          *(_QWORD *)(v61 + 48) = v62;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2)
            {
              WTF::StringImpl::~StringImpl(v63, v26, v27, v28, v29, v30, v31, v32);
              WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
            }
            else
            {
              *(_DWORD *)v63 -= 2;
            }
          }
        }
        else if ((*(unsigned int (**)(_QWORD *))(*a5 + 176))(a5))
        {
          v103 = *(_QWORD *)(a3 + 32);
          if (*(_QWORD *)a5[20])
            v103 = a5[20];
          a5[21] = v103;
        }
        v33 = *(uint64_t **)(a1 + 8);
        v19 = *v33;
        if ((unint64_t)(v33[1] - *v33) <= 0x57)
        {
          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v33);
          v19 = *v33;
        }
        *v33 = v19 + 88;
        v34 = *(_QWORD *)(a3 + 32);
        *(_DWORD *)(v19 + 8) = *(_DWORD *)a2;
        *(int32x2_t *)(v19 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
        *(_DWORD *)(v19 + 20) = -1;
        *(_BYTE *)(v19 + 24) = 0;
        *(_BYTE *)(v19 + 25) = 126;
        *(_BYTE *)(v19 + 26) = 0;
        *(_QWORD *)&v35 = -1;
        *((_QWORD *)&v35 + 1) = -1;
        *(_OWORD *)(v19 + 28) = v35;
        *(_OWORD *)(v19 + 44) = v35;
        *(_DWORD *)(v19 + 60) = -1;
        *(_QWORD *)v19 = &off_1E3588AF8;
        *(_QWORD *)(v19 + 64) = v34;
        *(_QWORD *)(v19 + 72) = a5;
        *(_BYTE *)(v19 + 80) = 2;
        v36 = *(_QWORD *)a9;
        *(_DWORD *)(v19 + 36) = *(_DWORD *)(a9 + 8);
        *(_QWORD *)(v19 + 28) = v36;
        v37 = *(_QWORD *)a8;
        *(_DWORD *)(v19 + 48) = *(_DWORD *)(a8 + 8);
        *(_QWORD *)(v19 + 40) = v37;
        v38 = *(_QWORD *)a10;
        *(_DWORD *)(v19 + 60) = *(_DWORD *)(a10 + 8);
        *(_QWORD *)(v19 + 52) = v38;
      }
    }
    else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 128))(a3))
    {
      if (a4)
      {
        if ((a4 - 12) >= 3)
        {
          v91 = *(uint64_t **)(a1 + 8);
          v19 = *v91;
          if ((unint64_t)(v91[1] - *v91) <= 0x67)
          {
            v117 = v91;
            JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v91);
            v91 = v117;
            v19 = *v117;
          }
          *v91 = v19 + 104;
          *(_DWORD *)(v19 + 8) = *(_DWORD *)a2;
          *(int32x2_t *)(v19 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
          *(_DWORD *)(v19 + 20) = -1;
          *(_BYTE *)(v19 + 24) = 0;
          *(_QWORD *)v19 = off_1E3583CB8;
          *(_BYTE *)(v19 + 26) = 0;
          v70 = *(_OWORD *)(a3 + 64);
          *(_BYTE *)(v19 + 25) = 126;
          v92 = *(_DWORD *)(a9 + 8);
          *(_QWORD *)(v19 + 28) = *(_QWORD *)a9;
          v72 = (_DWORD *)(v19 + 28);
          *(_DWORD *)(v19 + 36) = v92;
          v93 = *(_QWORD *)a8;
          *(_DWORD *)(v19 + 48) = *(_DWORD *)(a8 + 8);
          *(_QWORD *)(v19 + 40) = v93;
          v94 = *(_QWORD *)a10;
          *(_DWORD *)(v19 + 60) = *(_DWORD *)(a10 + 8);
          *(_QWORD *)(v19 + 52) = v94;
          *(_QWORD *)(v19 + 64) = 0;
          v75 = &off_1E3588C78;
        }
        else
        {
          v69 = *(uint64_t **)(a1 + 8);
          v19 = *v69;
          if ((unint64_t)(v69[1] - *v69) <= 0x67)
          {
            v116 = v69;
            JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v69);
            v69 = v116;
            v19 = *v116;
          }
          *v69 = v19 + 104;
          *(_DWORD *)(v19 + 8) = *(_DWORD *)a2;
          *(int32x2_t *)(v19 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
          *(_DWORD *)(v19 + 20) = -1;
          *(_BYTE *)(v19 + 24) = 0;
          *(_QWORD *)v19 = off_1E3583CB8;
          *(_BYTE *)(v19 + 26) = 0;
          v70 = *(_OWORD *)(a3 + 64);
          *(_BYTE *)(v19 + 25) = 126;
          v71 = *(_DWORD *)(a9 + 8);
          *(_QWORD *)(v19 + 28) = *(_QWORD *)a9;
          v72 = (_DWORD *)(v19 + 28);
          *(_DWORD *)(v19 + 36) = v71;
          v73 = *(_QWORD *)a8;
          *(_DWORD *)(v19 + 48) = *(_DWORD *)(a8 + 8);
          *(_QWORD *)(v19 + 40) = v73;
          v74 = *(_QWORD *)a10;
          *(_DWORD *)(v19 + 60) = *(_DWORD *)(a10 + 8);
          *(_QWORD *)(v19 + 52) = v74;
          *(_QWORD *)(v19 + 64) = 0;
          v75 = &off_1E3588DF8;
        }
        *(_QWORD *)v19 = v75;
        *(_OWORD *)(v19 + 72) = v70;
        *(_QWORD *)(v19 + 88) = a5;
        *(_BYTE *)(v19 + 96) = a4;
        if (a7)
          v76 = 2;
        else
          v76 = 0;
        *(_BYTE *)(v19 + 97) = v76 | a6 | *(_BYTE *)(v19 + 97) & 0xFC;
        v77 = *(_DWORD *)(v19 + 32) - *(_DWORD *)(a3 + 32);
        if (!HIWORD(v77))
        {
          v78 = *v72 - *(_DWORD *)(a3 + 28);
          if (!HIWORD(v78))
          {
            v79 = *(_DWORD *)(v19 + 36) - *(_DWORD *)(a3 + 36);
            if (!HIWORD(v79))
            {
              v80 = *(_DWORD *)(v19 + 56) - *(_DWORD *)(a3 + 56);
              if (!HIWORD(v80))
              {
                *(_WORD *)(v19 + 64) = v77;
                *(_WORD *)(v19 + 66) = v80;
                *(_WORD *)(v19 + 68) = v78;
                *(_WORD *)(v19 + 70) = v79;
              }
            }
          }
        }
      }
      else
      {
        v39 = *(uint64_t **)(a1 + 8);
        v19 = *v39;
        if ((unint64_t)(v39[1] - *v39) <= 0x5F)
        {
          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v39);
          v19 = *v39;
        }
        *v39 = v19 + 96;
        *(_DWORD *)(v19 + 8) = *(_DWORD *)a2;
        *(int32x2_t *)(v19 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
        *(_DWORD *)(v19 + 20) = -1;
        *(_BYTE *)(v19 + 24) = 0;
        *(_QWORD *)v19 = off_1E3583CB8;
        *(_BYTE *)(v19 + 26) = 0;
        v40 = *(_OWORD *)(a3 + 64);
        *(_BYTE *)(v19 + 25) = 126;
        v41 = *(_QWORD *)(a3 + 28);
        *(_DWORD *)(v19 + 36) = *(_DWORD *)(a3 + 36);
        *(_QWORD *)(v19 + 28) = v41;
        v42 = *(_QWORD *)a8;
        *(_DWORD *)(v19 + 48) = *(_DWORD *)(a8 + 8);
        *(_QWORD *)(v19 + 40) = v42;
        v43 = *(_QWORD *)a10;
        *(_DWORD *)(v19 + 60) = *(_DWORD *)(a10 + 8);
        *(_QWORD *)(v19 + 52) = v43;
        *(_QWORD *)v19 = &off_1E3588F78;
        *(_OWORD *)(v19 + 64) = v40;
        *(_QWORD *)(v19 + 80) = a5;
        if (a7)
          v44 = 2;
        else
          v44 = 0;
        *(_BYTE *)(v19 + 88) = v44 | a6 | *(_BYTE *)(v19 + 88) & 0xFC;
      }
    }
    else if (a4)
    {
      if ((a4 - 12) >= 3)
      {
        v85 = *(uint64_t **)(a1 + 8);
        v19 = *v85;
        if ((unint64_t)(v85[1] - *v85) <= 0x6F)
        {
          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v85);
          v19 = *v85;
        }
        *v85 = v19 + 112;
        v86 = *(_DWORD *)(a3 + 48);
        *(_DWORD *)(v19 + 8) = *(_DWORD *)a2;
        *(int32x2_t *)(v19 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
        *(_DWORD *)(v19 + 20) = -1;
        *(_BYTE *)(v19 + 24) = 0;
        *(_BYTE *)(v19 + 26) = 0;
        *(_QWORD *)v19 = off_1E3579FC0;
        v87 = *(_OWORD *)(a3 + 32);
        *(_BYTE *)(v19 + 25) = 126;
        *(_OWORD *)(v19 + 32) = v87;
        *(_DWORD *)(v19 + 48) = v86;
        v88 = *(_QWORD *)a9;
        *(_DWORD *)(v19 + 60) = *(_DWORD *)(a9 + 8);
        *(_QWORD *)(v19 + 52) = v88;
        v89 = *(_QWORD *)a8;
        *(_DWORD *)(v19 + 72) = *(_DWORD *)(a8 + 8);
        *(_QWORD *)(v19 + 64) = v89;
        v90 = *(_QWORD *)a10;
        *(_DWORD *)(v19 + 84) = *(_DWORD *)(a10 + 8);
        *(_QWORD *)(v19 + 76) = v90;
        *(_QWORD *)v19 = &off_1E3589278;
        *(_QWORD *)(v19 + 88) = 0;
        *(_QWORD *)(v19 + 96) = a5;
        *(_BYTE *)(v19 + 104) = a4;
        *(_BYTE *)(v19 + 105) = *(_BYTE *)(v19 + 105) & 0xFE | a7;
        JSC::ThrowableSubExpressionData::setSubexpressionInfo(v19 + 52, (_DWORD *)(a3 + 52), *(_DWORD *)(a3 + 80));
      }
      else
      {
        v64 = *(uint64_t **)(a1 + 8);
        v19 = *v64;
        if ((unint64_t)(v64[1] - *v64) <= 0x6F)
        {
          JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v64);
          v19 = *v64;
        }
        *v64 = v19 + 112;
        JSC::ShortCircuitReadModifyDotNode::ShortCircuitReadModifyDotNode(v19, a2, *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 40), *(_DWORD *)(a3 + 48), a4, (uint64_t)a5, a7, (uint64_t *)a9, (uint64_t *)a8, (uint64_t *)a10);
        v65 = *(_DWORD *)(v19 + 56) - *(_DWORD *)(a3 + 56);
        if (!HIWORD(v65))
        {
          v66 = *(_DWORD *)(v19 + 52) - *(_DWORD *)(a3 + 52);
          if (!HIWORD(v66))
          {
            v67 = *(_DWORD *)(v19 + 60) - *(_DWORD *)(a3 + 60);
            if (!HIWORD(v67))
            {
              v68 = *(_DWORD *)(v19 + 80) - *(_DWORD *)(a3 + 80);
              if (!HIWORD(v68))
              {
                *(_WORD *)(v19 + 88) = v65;
                *(_WORD *)(v19 + 90) = v68;
                *(_WORD *)(v19 + 92) = v66;
                *(_WORD *)(v19 + 94) = v67;
              }
            }
          }
        }
      }
    }
    else
    {
      v18 = *(uint64_t **)(a1 + 8);
      v19 = *v18;
      if ((unint64_t)(v18[1] - *v18) <= 0x67)
      {
        JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v18);
        v19 = *v18;
      }
      *v18 = v19 + 104;
      v20 = *(_DWORD *)(a3 + 48);
      *(_DWORD *)(v19 + 8) = *(_DWORD *)a2;
      *(int32x2_t *)(v19 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
      *(_DWORD *)(v19 + 20) = -1;
      *(_BYTE *)(v19 + 24) = 0;
      *(_BYTE *)(v19 + 26) = 0;
      *(_QWORD *)v19 = off_1E3579FC0;
      v21 = *(_OWORD *)(a3 + 32);
      *(_BYTE *)(v19 + 25) = 126;
      *(_OWORD *)(v19 + 32) = v21;
      *(_DWORD *)(v19 + 48) = v20;
      v22 = *(_QWORD *)(a3 + 52);
      *(_DWORD *)(v19 + 60) = *(_DWORD *)(a3 + 60);
      *(_QWORD *)(v19 + 52) = v22;
      v23 = *(_QWORD *)a8;
      *(_DWORD *)(v19 + 72) = *(_DWORD *)(a8 + 8);
      *(_QWORD *)(v19 + 64) = v23;
      v24 = *(_QWORD *)a10;
      *(_DWORD *)(v19 + 84) = *(_DWORD *)(a10 + 8);
      *(_QWORD *)(v19 + 76) = v24;
      *(_QWORD *)v19 = &off_1E35890F8;
      *(_QWORD *)(v19 + 88) = a5;
      *(_BYTE *)(v19 + 96) = a7;
    }
  }
  else
  {
    v112 = *(uint64_t **)(a1 + 8);
    v19 = *v112;
    if ((unint64_t)(v112[1] - *v112) <= 0x3F)
    {
      JSC::ParserArena::allocateFreeablePool((JSC::ParserArena *)v112);
      v19 = *v112;
    }
    *v112 = v19 + 64;
    *(_DWORD *)(v19 + 8) = *(_DWORD *)a2;
    *(int32x2_t *)(v19 + 12) = vrev64_s32(*(int32x2_t *)(a2 + 4));
    *(_DWORD *)(v19 + 20) = -1;
    *(_BYTE *)(v19 + 24) = 0;
    *(_QWORD *)v19 = off_1E3583CB8;
    *(_BYTE *)(v19 + 25) = 126;
    *(_BYTE *)(v19 + 26) = 0;
    v113 = *(_QWORD *)a9;
    *(_DWORD *)(v19 + 36) = *(_DWORD *)(a9 + 8);
    *(_QWORD *)(v19 + 28) = v113;
    v114 = *(_QWORD *)a8;
    *(_DWORD *)(v19 + 48) = *(_DWORD *)(a8 + 8);
    *(_QWORD *)(v19 + 40) = v114;
    v115 = *(_QWORD *)a10;
    *(_DWORD *)(v19 + 60) = *(_DWORD *)(a10 + 8);
    *(_QWORD *)(v19 + 52) = v115;
    *(_QWORD *)v19 = &off_1E3589578;
  }
  return v19;
}

void JSC::FunctionMetadataNode::setEcmaName(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2)
    *(_DWORD *)a2 += 2;
  v9 = *(WTF::StringImpl **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = a2;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
}

int32x2_t JSC::ASTBuilder::makePrefixNode(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  JSC::ParserArena *v14;
  uint64_t v15;
  int32x2_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a3 && (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 336))(a3, *(_QWORD *)a1))
    *(_DWORD *)(a1 + 24) |= 2u;
  v14 = *(JSC::ParserArena **)(a1 + 8);
  v15 = *(_QWORD *)v14;
  if (*((_QWORD *)v14 + 1) - *(_QWORD *)v14 <= 0x57uLL)
  {
    JSC::ParserArena::allocateFreeablePool(v14);
    v15 = *(_QWORD *)v14;
  }
  *(_QWORD *)v14 = v15 + 88;
  *(_DWORD *)(v15 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v15 + 12) = result;
  *(_DWORD *)(v15 + 20) = -1;
  *(_BYTE *)(v15 + 24) = 0;
  *(_QWORD *)v15 = off_1E3583CB8;
  *(_BYTE *)(v15 + 25) = 126;
  *(_BYTE *)(v15 + 26) = 0;
  v17 = *a6;
  *(_DWORD *)(v15 + 36) = *((_DWORD *)a6 + 2);
  *(_QWORD *)(v15 + 28) = v17;
  v18 = *a5;
  *(_DWORD *)(v15 + 48) = *((_DWORD *)a5 + 2);
  *(_QWORD *)(v15 + 40) = v18;
  v19 = *a7;
  *(_DWORD *)(v15 + 60) = *((_DWORD *)a7 + 2);
  *(_QWORD *)(v15 + 52) = v19;
  *(_QWORD *)v15 = &off_1E3586B48;
  *(_QWORD *)(v15 + 64) = 0;
  *(_QWORD *)(v15 + 72) = a3;
  *(_BYTE *)(v15 + 80) = a4;
  return result;
}

int32x2_t JSC::ASTBuilder::makePostfixNode(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  JSC::ParserArena *v14;
  uint64_t v15;
  int32x2_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 336))(a3, *(_QWORD *)a1))
    *(_DWORD *)(a1 + 24) |= 2u;
  v14 = *(JSC::ParserArena **)(a1 + 8);
  v15 = *(_QWORD *)v14;
  if (*((_QWORD *)v14 + 1) - *(_QWORD *)v14 <= 0x57uLL)
  {
    JSC::ParserArena::allocateFreeablePool(v14);
    v15 = *(_QWORD *)v14;
  }
  *(_QWORD *)v14 = v15 + 88;
  *(_DWORD *)(v15 + 8) = *(_DWORD *)a2;
  result = vrev64_s32(*(int32x2_t *)(a2 + 4));
  *(int32x2_t *)(v15 + 12) = result;
  *(_DWORD *)(v15 + 20) = -1;
  *(_BYTE *)(v15 + 24) = 0;
  *(_QWORD *)v15 = off_1E3583CB8;
  *(_BYTE *)(v15 + 25) = 126;
  *(_BYTE *)(v15 + 26) = 0;
  v17 = *a6;
  *(_DWORD *)(v15 + 36) = *((_DWORD *)a6 + 2);
  *(_QWORD *)(v15 + 28) = v17;
  v18 = *a5;
  *(_DWORD *)(v15 + 48) = *((_DWORD *)a5 + 2);
  *(_QWORD *)(v15 + 40) = v18;
  v19 = *a7;
  *(_DWORD *)(v15 + 60) = *((_DWORD *)a7 + 2);
  *(_QWORD *)(v15 + 52) = v19;
  *(_QWORD *)(v15 + 64) = 0;
  *(_QWORD *)(v15 + 72) = a3;
  *(_BYTE *)(v15 + 80) = a4;
  *(_QWORD *)v15 = &off_1E3586CE0;
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::Parser(uint64_t a1, JSC::VM *a2, int *a3, char a4, int a5, int a6, int a7, int a8, int a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, char a16)
{
  BOOL v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  JSC::SourceProviderCache *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl **v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 10;
  *(_QWORD *)(a1 + 7216) = a2;
  *(_QWORD *)(a1 + 7224) = a3;
  *(_OWORD *)(a1 + 7232) = 0u;
  *(_OWORD *)(a1 + 7248) = 0u;
  *(_OWORD *)(a1 + 7264) = 0u;
  *(_OWORD *)(a1 + 7280) = 0u;
  *(_OWORD *)(a1 + 7296) = 0u;
  *(_QWORD *)(a1 + 7312) = 0x100000000;
  *(_QWORD *)(a1 + 7320) = 0;
  *(_QWORD *)(a1 + 7336) = 0;
  *(_QWORD *)(a1 + 7328) = 0;
  v23 = 1;
  *(_WORD *)(a1 + 7344) = 1;
  *(_BYTE *)(a1 + 7352) = 0;
  *(_QWORD *)(a1 + 7360) = 0;
  *(_DWORD *)(a1 + 7368) = 0x100000;
  *(_OWORD *)(a1 + 7376) = 0u;
  *(_OWORD *)(a1 + 7392) = 0u;
  *(_QWORD *)(a1 + 7408) = 0;
  *(_QWORD *)(a1 + 7432) = -1;
  *(_QWORD *)(a1 + 7424) = -1;
  *(_QWORD *)(a1 + 7416) = -1;
  *(_BYTE *)(a1 + 7440) = 1;
  *(_OWORD *)(a1 + 7444) = xmmword_199123900;
  *(_QWORD *)(a1 + 7464) = 0;
  *(_BYTE *)(a1 + 7472) = a4;
  *(_BYTE *)(a1 + 7473) = a5 == 1;
  *(_BYTE *)(a1 + 7474) = a8;
  *(_DWORD *)(a1 + 7476) = a9;
  *(_DWORD *)(a1 + 7480) = a7;
  *(_DWORD *)(a1 + 7484) = a10;
  *(_BYTE *)(a1 + 7488) = 0;
  *(_BYTE *)(a1 + 7505) = 0;
  *(_QWORD *)(a1 + 7512) = 0;
  *(_QWORD *)(a1 + 7520) = a15;
  *(_QWORD *)(a1 + 7528) = 0;
  *(_BYTE *)(a1 + 7536) = a16;
  *(_WORD *)(a1 + 7537) = 0;
  *(_BYTE *)(a1 + 7539) = 0;
  v24 = WTF::fastMalloc((WTF *)0xD0);
  *(_OWORD *)(v24 + 8) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_OWORD *)(v24 + 40) = 0u;
  *(_QWORD *)(v24 + 128) = 0;
  *(_QWORD *)(v24 + 136) = 0;
  *(_QWORD *)(v24 + 120) = 0;
  *(_QWORD *)(v24 + 141) = 0;
  *(_QWORD *)(v24 + 160) = 0;
  *(_QWORD *)(v24 + 168) = 0;
  *(_QWORD *)(v24 + 152) = 0;
  *(_QWORD *)(v24 + 192) = a2;
  if (a5 != 1)
    v23 = byte_1ECF4C6C1 != 0;
  *(_BYTE *)(v24 + 200) = v23;
  *(_DWORD *)(v24 + 204) = a7;
  v32 = *(_QWORD *)(a1 + 7288);
  *(_QWORD *)(a1 + 7288) = v24;
  if (v32)
  {
    v33 = JSC::Lexer<unsigned char>::~Lexer(v32, v25, v26, v27, v28, v29, v30, v31);
    WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    v24 = *(_QWORD *)(a1 + 7288);
  }
  JSC::Lexer<unsigned char>::setCode(v24, a3, a1 + 7232);
  *(_DWORD *)(a1 + 7400) = a3[4] + 1;
  v41 = a3[2];
  *(_DWORD *)(a1 + 7408) = v41;
  *(_DWORD *)(a1 + 7412) = v41;
  *(_DWORD *)(a1 + 7404) = v41;
  v48 = (_DWORD *)JSC::VM::addSourceProviderCache(a2, *(JSC::SourceProvider **)a3, v42, v43, v44, v45, v46, v47);
  v56 = v48;
  if (v48)
    ++*v48;
  v57 = *(JSC::SourceProviderCache **)(a1 + 7464);
  *(_QWORD *)(a1 + 7464) = v56;
  if (v57)
  {
    if (*(_DWORD *)v57 == 1)
    {
      JSC::SourceProviderCache::~SourceProviderCache(v57, v49, v50, v51, v52, v53, v54, v55);
      WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
    }
    else
    {
      --*(_DWORD *)v57;
    }
  }
  *(_QWORD *)(a1 + 7496) = 0;
  v58 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  v60 = v59;
  if (*(_DWORD *)(v58 + 12) <= v59)
    goto LABEL_51;
  v61 = v58;
  v62 = v59;
  JSC::Scope::setSourceParseMode(*(_QWORD *)v58 + 720 * v59, a8);
  if (*(_DWORD *)(v61 + 12) <= v60)
  {
    __break(0xC471u);
    JUMPOUT(0x197E44778);
  }
  if (a13)
    v67 = 0x2000000;
  else
    v67 = 0;
  *(_DWORD *)(*(_QWORD *)v61 + 720 * v62 + 10) = *(_DWORD *)(*(_QWORD *)v61 + 720 * v62 + 10) & 0xFDFFFFFF | v67;
  v68 = *(_DWORD *)(v61 + 12);
  if (a13)
  {
    if (v68 > v60)
    {
      *(_BYTE *)(*(_QWORD *)v61 + 720 * v62 + 14) = a14;
      goto LABEL_16;
    }
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x197E44770);
  }
LABEL_16:
  if (v68 <= v60)
  {
    __break(0xC471u);
    JUMPOUT(0x197E44780);
  }
  v69 = *(_QWORD *)v61;
  if ((*(_BYTE *)(*(_QWORD *)v61 + 720 * v62 + 11) & 1) != 0)
    *(_BYTE *)(v69 + 720 * v62 + 15) = a11;
  *(_BYTE *)(v69 + 720 * v62 + 16) = a12;
  if (a12)
    *(_DWORD *)(v69 + 720 * v62 + 20) = 0;
  if (a6 == 1)
    *(_BYTE *)(v69 + 720 * v62 + 9) |= 1u;
  if (((1 << a8) & 0x6000) != 0)
  {
    v85 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v85 = 1;
    *(_QWORD *)(v85 + 8) = 0;
    *(_QWORD *)(v85 + 16) = 0;
    v107 = 0;
    v93 = *(_QWORD *)(a1 + 7512);
    *(_QWORD *)(a1 + 7512) = v85;
    if (v93)
    {
      if (*(_DWORD *)v93 == 1)
      {
        v94 = *(_QWORD *)(v93 + 16);
        if (v94)
          WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::deallocateTable(v94, v86, v87, v88, v89, v90, v91, v92);
        v95 = *(_QWORD *)(v93 + 8);
        if (v95)
        {
          v96 = *(unsigned int *)(v95 - 4);
          if ((_DWORD)v96)
          {
            v97 = *(WTF::StringImpl ***)(v93 + 8);
            do
            {
              v98 = *v97;
              if (*v97 != (WTF::StringImpl *)-1)
              {
                *v97 = 0;
                if (v98)
                {
                  if (*(_DWORD *)v98 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v98, v86, v87, v88, v89, v90, v91, v92);
                    WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
                  }
                  else
                  {
                    *(_DWORD *)v98 -= 2;
                  }
                }
              }
              ++v97;
              --v96;
            }
            while (v96);
          }
          WTF::fastFree(v95 - 16, v86, v87, v88, v89, v90, v91, v92);
        }
        WTF::fastFree(v93, v86, v87, v88, v89, v90, v91, v92);
      }
      else
      {
        --*(_DWORD *)v93;
      }
    }
    WTF::Ref<JSC::ModuleScopeData,WTF::RawPtrTraits<JSC::ModuleScopeData>,WTF::DefaultRefDerefTraits<JSC::ModuleScopeData>>::~Ref(&v107, v86, v87, v88, v89, v90, v91, v92);
  }
  v70 = *(_DWORD *)(a1 + 7400);
  v71 = *(_DWORD *)(a1 + 7412);
  v72 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v70;
  *(_DWORD *)(a1 + 7448) = v71;
  *(_DWORD *)(a1 + 7452) = v72;
  v73 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v73 + 4) = v70;
  v74 = *(_DWORD *)(a1 + 12);
  if (!v74)
  {
    __break(0xC471u);
    JUMPOUT(0x197E44788);
  }
  v75 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v74 - 1) + 9) & 1;
  *(_BYTE *)(v73 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v73, a1 + 7368, 0, v75, v63, v64, v65, v66);
  return a1;
}

{
  return JSC::Parser<JSC::Lexer<unsigned char>>::Parser(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(uint64_t a1)
{
  char v2;
  unsigned int v3;
  uint64_t v4;
  char v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  void *v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  unsigned __int8 v17;
  __int16 v18;
  __int16 v19;
  char v20;
  char v21;

  v2 = *(_BYTE *)(a1 + 7472);
  v21 = v2;
  v20 = 0;
  v19 = 0;
  v18 = 0;
  v17 = 0;
  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(_QWORD *)a1 + 720 * v3 - 720;
    v2 = *(_BYTE *)(*(_QWORD *)a1 + 720 * v3 - 712);
    v21 = v2;
    v5 = *(_BYTE *)(v4 + 9);
    v20 = v5;
    v6 = *(_DWORD *)(v4 + 10);
    v7 = (v6 >> 8) & 1;
    HIBYTE(v19) = BYTE1(v6) & 1;
    v8 = (v6 >> 9) & 1;
    LOBYTE(v19) = (v6 & 0x200) != 0;
    v9 = (v6 >> 11) & 1;
    HIBYTE(v18) = (v6 & 0x800) != 0;
    v10 = (v6 >> 13) & 1;
    LOBYTE(v18) = (v6 & 0x2000) != 0;
    v11 = (v6 >> 20) & 1;
    v17 = v11;
  }
  else
  {
    v11 = 0;
    v10 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v5 = 0;
  }
  v12 = *(void **)(a1 + 7216);
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<JSC::Scope,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::VM &,JSC::ImplementationVisibility &,unsigned char &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &>(a1, v12, (uint64_t)&v21, (uint64_t)&v20, (uint64_t)&v19 + 1, (uint64_t)&v19, (uint64_t)&v18 + 1, (uint64_t)&v18, &v17);
  }
  else
  {
    v13 = *(_QWORD *)a1 + 720 * v3;
    *(_QWORD *)v13 = v12;
    *(_BYTE *)(v13 + 8) = v2;
    *(_BYTE *)(v13 + 9) = v5;
    if (v7)
      v14 = 8389056;
    else
      v14 = 8388800;
    *(_DWORD *)(v13 + 10) = (v11 << 20) | (v10 << 13) | (v9 << 11) | (v8 << 9) | v14 | *(_DWORD *)(v13 + 10) & 0xF0000000;
    *(_WORD *)(v13 + 14) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    *(_DWORD *)(v13 + 20) = 1;
    *(_QWORD *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_BYTE *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 48) = 0x800000000;
    *(_QWORD *)&v15 = -1;
    *((_QWORD *)&v15 + 1) = -1;
    *(_OWORD *)(v13 + 56) = v15;
    *(_OWORD *)(v13 + 72) = v15;
    *(_OWORD *)(v13 + 88) = v15;
    *(_OWORD *)(v13 + 104) = v15;
    *(_QWORD *)(v13 + 120) = 0;
    *(_BYTE *)(v13 + 128) = 0;
    *(_QWORD *)(v13 + 136) = 0;
    *(_QWORD *)(v13 + 144) = 0;
    *(_BYTE *)(v13 + 152) = 0;
    *(_QWORD *)(v13 + 160) = 0;
    *(_QWORD *)(v13 + 168) = v13 + 184;
    *(_QWORD *)(v13 + 616) = 0x800000000;
    *(_OWORD *)(v13 + 624) = v15;
    *(_OWORD *)(v13 + 640) = v15;
    *(_OWORD *)(v13 + 656) = v15;
    *(_OWORD *)(v13 + 672) = v15;
    *(_OWORD *)(v13 + 688) = 0u;
    *(_OWORD *)(v13 + 704) = 0u;
    *(_OWORD *)(v13 + 208) = v15;
    *(_OWORD *)(v13 + 224) = v15;
    *(_OWORD *)(v13 + 240) = v15;
    *(_OWORD *)(v13 + 176) = xmmword_19914EEF0;
    *(_OWORD *)(v13 + 192) = v15;
    ++*(_DWORD *)(a1 + 12);
  }
  return a1;
}

uint64_t JSC::Scope::setSourceParseMode(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned __int16 v3;
  int v4;
  unsigned int v5;
  unsigned __int16 v6;

  switch(a2)
  {
    case 0:
    case 3:
    case 4:
    case 5:
    case 19:
      v2 = *(_DWORD *)(result + 10) & 0xFE8F007F;
      v3 = -32384;
      goto LABEL_3;
    case 1:
      v2 = *(_DWORD *)(result + 10) & 0xFE8F007F;
      v6 = -30848;
      goto LABEL_10;
    case 2:
    case 18:
      v5 = *(_DWORD *)(result + 10) & 0xFE8F007F | 0x1408380;
      goto LABEL_5;
    case 6:
      v2 = *(_DWORD *)(result + 10) & 0xFE8F007F;
      v3 = -26240;
LABEL_3:
      v4 = v3 | 0x1400000;
      goto LABEL_4;
    case 7:
      v2 = *(_DWORD *)(result + 10) & 0xFE8F007F;
      v6 = -7808;
      goto LABEL_10;
    case 8:
      v2 = *(_DWORD *)(result + 10) & 0xFE8F007F;
      v6 = -1664;
LABEL_10:
      v4 = v6 | 0x400000;
      goto LABEL_4;
    case 9:
    case 10:
      v5 = (*(_DWORD *)(result + 10) & 0xFE8F007F | 0x1409980) + 2048;
      goto LABEL_5;
    case 11:
      v5 = *(_DWORD *)(result + 10) & 0xFE8F007F | 0x140B980;
      goto LABEL_5;
    case 12:
      v5 = *(_DWORD *)(result + 10) | 0x10000;
      goto LABEL_5;
    case 13:
    case 14:
      v5 = *(_DWORD *)(result + 10) | 0x30000;
      goto LABEL_5;
    case 15:
      v5 = *(_DWORD *)(result + 10) & 0xFE8F007F | 0x40E780;
      goto LABEL_5;
    case 16:
    case 17:
      v5 = (*(_DWORD *)(result + 10) & 0xFE8F007F | 0x1409980) + 2560;
      goto LABEL_5;
    case 20:
      v2 = *(_DWORD *)(result + 10) & 0xFFFF01FF;
      v4 = 24150400;
LABEL_4:
      v5 = v2 | v4;
LABEL_5:
      *(_DWORD *)(result + 10) = v5;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::~Parser(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  JSC::SourceProviderCache *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v9 = *(_QWORD *)(a1 + 7512);
  *(_QWORD *)(a1 + 7512) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      v31 = *(_QWORD *)(v9 + 16);
      if (v31)
        WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::deallocateTable(v31, a2, a3, a4, a5, a6, a7, a8);
      v32 = *(_QWORD *)(v9 + 8);
      if (v32)
      {
        v49 = *(unsigned int *)(v32 - 4);
        if ((_DWORD)v49)
        {
          v50 = *(WTF::StringImpl ***)(v9 + 8);
          do
          {
            v51 = *v50;
            if (*v50 != (WTF::StringImpl *)-1)
            {
              *v50 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                {
                  WTF::StringImpl::~StringImpl(v51, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
                }
                else
                {
                  *(_DWORD *)v51 -= 2;
                }
              }
            }
            ++v50;
            --v49;
          }
          while (v49);
        }
        WTF::fastFree(v32 - 16, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  v10 = *(JSC::SourceProviderCache **)(a1 + 7464);
  *(_QWORD *)(a1 + 7464) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      JSC::SourceProviderCache::~SourceProviderCache(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  v11 = *(WTF::StringImpl **)(a1 + 7360);
  *(_QWORD *)(a1 + 7360) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = *(_QWORD *)(a1 + 7288);
  *(_QWORD *)(a1 + 7288) = 0;
  if (v12)
  {
    v13 = JSC::Lexer<unsigned char>::~Lexer(v12, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  JSC::ParserArena::~ParserArena((JSC::ParserArena *)(a1 + 7232), a2, a3, a4, a5, a6, a7, a8);
  v28 = *(_DWORD *)(a1 + 12);
  if (v28)
    WTF::VectorTypeOperations<JSC::Scope>::destruct(*(unsigned int **)a1, (unsigned int *)(*(_QWORD *)a1 + 720 * v28), v22, v23, v24, v25, v26, v27);
  v29 = *(unsigned int **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v29)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((unint64_t)v29, v21, v22, v23, v24, v25, v26, v27);
  }
  return a1;
}

void std::tuple<JSC::VariableEnvironment,WTF::Vector<JSC::FunctionMetadataNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~tuple(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)a1, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::AutoPopScopeRef::~AutoPopScopeRef(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  _BYTE v18[24];
  WTF *v19;
  int v20;

  v8 = *(uint64_t **)(result + 16);
  if (v8)
  {
    v17 = result;
    *(_QWORD *)(result + 16) = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v18, v8, 0, a4, a5, a6, a7, a8);
    v16 = v19;
    if (v19)
    {
      v19 = 0;
      v20 = 0;
      WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v18, (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
    return v17;
  }
  return result;
}

uint64_t *JSC::Parser<JSC::Lexer<unsigned char>>::resetImplementationVisibilityIfNeeded(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  char v6;

  v1 = *((unsigned int *)result + 3);
  if ((_DWORD)v1)
  {
    v2 = v1 - 1;
    v3 = *result;
    if ((*(_BYTE *)(*result + 720 * (v1 - 1) + 12) & 0x40) != 0 && (_DWORD)v1 != 1)
    {
      for (i = 720 * v1; ; i -= 720)
      {
        v5 = i - 720;
        if (i == 720)
          break;
        v6 = *(_BYTE *)(v3 + i - 1428);
        if ((v6 & 0x40) != 0)
        {
          if (*(_BYTE *)(v3 + v5 - 712) != 2)
            *(_BYTE *)(v3 + 720 * v2 + 8) = 0;
          return result;
        }
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t *v34;
  int *v35;
  WTF **v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  char v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  WTF **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  WTF *v96;
  uint64_t v98;
  int v99;
  WTF *v100;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t *v137;
  uint64_t v138;
  uint64_t v140;
  WTF::StringImpl ***v141;
  unint64_t v142;
  WTF::StringImpl **v143;
  uint64_t v144;
  uint64_t v145;
  WTF::StringImpl **v146;
  uint64_t v147;
  WTF::StringImpl ***v148;
  unint64_t v149;
  WTF::StringImpl **v150;
  uint64_t v151;
  uint64_t v152;
  WTF::StringImpl **v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  WTF::StringImpl **v165;
  uint64_t v166;
  WTF::StringImpl **v167;
  WTF::StringImpl *v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  WTF::StringImpl **v178;
  WTF::StringImpl *v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  int v192;
  int v193;
  uint64_t v194;
  unsigned int *v195;
  unsigned int *v196;
  unint64_t v197;
  unint64_t v198;
  unsigned int v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _OWORD *v205;
  __int128 v206;
  uint64_t v207;
  unsigned int v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  unsigned int v218;
  unsigned int v219;
  uint64_t v221;
  WTF::StringImpl **v222;
  WTF::StringImpl *v223;
  unint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  WTF::StringImpl **v233;
  WTF::StringImpl *v234;
  unint64_t v235;
  void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v245;
  WTF::StringImpl ***v246;
  unint64_t v247;
  WTF::StringImpl **v248;
  uint64_t v249;
  uint64_t v250;
  WTF::StringImpl **v251;
  uint64_t v252;
  WTF::StringImpl ***v253;
  unint64_t v254;
  WTF::StringImpl **v255;
  uint64_t v256;
  uint64_t v257;
  WTF::StringImpl **v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  int v265;
  uint64_t v266;
  unsigned int v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v271;
  _BYTE *v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  WTF::StringImpl **v281;
  WTF::StringImpl *v282;
  unint64_t v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  WTF::StringImpl **v292;
  WTF::StringImpl *v293;
  unint64_t v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int v318;
  uint64_t v319;
  int v321;
  uint64_t *v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  WTF::StringImpl **v327;
  WTF::StringImpl *v328;
  uint64_t v329;
  unsigned int v330;
  unsigned int v331;
  uint64_t v332;
  WTF::StringImpl *v333;
  int v334;
  unint64_t v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  WTF::StringImpl **v344;
  WTF::StringImpl *v345;
  unint64_t v346;
  void *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  WTF::StringImpl **v355;
  WTF::StringImpl *v356;
  unint64_t v357;
  void *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unsigned int v366;
  unsigned int v367;
  uint64_t v368;
  int v369;
  WTF *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  JSC::Scope *v374;
  unint64_t StatusReg;
  uint64_t v376;
  WTF **v377;
  unsigned int *v378;
  int *v379;
  uint64_t v380;
  uint64_t *v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t v384;
  WTF::AtomStringImpl *v385;
  WTF *v386;
  _BYTE v387[32];

  v8 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v8)
  {
    __break(0xC471u);
    JUMPOUT(0x197E46844);
  }
  v11 = (WTF::AtomStringImpl *)(v8 - 1);
  v12 = *a2;
  v13 = *a2 + 720 * (v8 - 1);
  v15 = *(_BYTE *)(v13 + 10);
  v14 = v13 + 10;
  v373 = *a2 + 720 * (v8 - 1);
  v16 = v373 + 144;
  v385 = (WTF::AtomStringImpl *)(v8 - 1);
  v384 = *a2;
  v382 = a3;
  v383 = v14;
  if ((v15 & 0xA) == 0)
  {
    v17 = *(_QWORD *)v16;
    if (*(_QWORD *)v16)
      v18 = *(_DWORD *)(v17 - 12);
    else
      v18 = 0;
    v19 = *(_QWORD **)(v12 + 720 * (_QWORD)v11 + 160);
    if (v19)
    {
      v19 = (_QWORD *)*v19;
      if (v19)
        LODWORD(v19) = *((_DWORD *)v19 - 3);
    }
    if (v18 + (_DWORD)v19)
    {
      v162 = *(_QWORD *)(v12 + 720 * (_QWORD)v11 + 696);
      if (v162)
      {
        if (*(_DWORD *)(v162 - 12))
        {
          v163 = *(unsigned int *)(v162 - 4);
          if ((_DWORD)v163)
          {
            v164 = 8 * v163;
            v165 = *(WTF::StringImpl ***)(v12 + 720 * (_QWORD)v11 + 696);
            while ((unint64_t)*v165 + 1 <= 1)
            {
              ++v165;
              v164 -= 8;
              if (!v164)
                goto LABEL_7;
            }
          }
          else
          {
            v165 = *(WTF::StringImpl ***)(v12 + 720 * (_QWORD)v11 + 696);
          }
          v327 = (WTF::StringImpl **)(v162 + 8 * v163);
          if (v165 != v327)
          {
            v328 = *v165;
LABEL_444:
            if (v328)
            {
              *(_DWORD *)v328 += 2;
              v329 = *(_QWORD *)v16;
              if (*(_QWORD *)v16)
              {
                v330 = *((_DWORD *)v328 + 4);
                if ((v330 & 0x20) != 0)
                  v330 = *((_DWORD *)v328 + 8);
                v331 = *(_DWORD *)(v329 - 8);
                v332 = v331 & (v330 >> 8);
                v333 = *(WTF::StringImpl **)(v329 + 16 * v332);
                if (v333 != v328)
                {
                  v334 = 1;
                  while (v333)
                  {
                    v332 = ((_DWORD)v332 + v334) & v331;
                    v333 = *(WTF::StringImpl **)(v329 + 16 * v332);
                    ++v334;
                    if (v333 == v328)
                      goto LABEL_454;
                  }
                  v332 = *(unsigned int *)(v329 - 4);
                }
LABEL_454:
                if (v332 != *(_DWORD *)(v329 - 4))
                  *(_WORD *)(v329 + 16 * v332 + 8) |= 1u;
              }
              if (*(_DWORD *)v328 == 2)
              {
                WTF::StringImpl::~StringImpl(v328, v11, a3, v16, v12, a6, a7, a8);
                WTF::fastFree(v335, v336, v337, v338, v339, v340, v341, v342);
                a3 = v382;
                v16 = v373 + 144;
                v12 = v384;
                v11 = v385;
              }
              else
              {
                *(_DWORD *)v328 -= 2;
              }
              goto LABEL_458;
            }
            v365 = *(_QWORD *)v16;
            if (*(_QWORD *)v16)
            {
              v366 = MEMORY[0x10];
              if ((MEMORY[0x10] & 0x20) != 0)
                v366 = MEMORY[0x20];
              v367 = *(_DWORD *)(v365 - 8);
              v368 = v367 & (v366 >> 8);
              if (*(_QWORD *)(v365 + 16 * v368))
              {
                v369 = 1;
                do
                  v368 = ((_DWORD)v368 + v369++) & v367;
                while (*(_QWORD *)(v365 + 16 * v368));
              }
              if (v368 != *(_DWORD *)(v365 - 4))
                *(_WORD *)(v365 + 16 * v368 + 8) |= 1u;
            }
            v11 = v385;
            v16 = v373 + 144;
            v12 = v384;
            a3 = v382;
            v14 = v383;
LABEL_458:
            while (++v165 != v327)
            {
              v328 = *v165;
              if ((unint64_t)*v165 + 1 > 1)
              {
                if (v165 != v327)
                  goto LABEL_444;
                break;
              }
            }
            v17 = *(_QWORD *)v16;
          }
        }
      }
    }
LABEL_7:
    if (v17)
    {
      v20 = *(unsigned int *)(v17 - 4);
      v21 = v17 + 16 * v20;
      if (*(_DWORD *)(v17 - 12))
      {
        v22 = v17;
        if ((_DWORD)v20)
        {
          v23 = 16 * v20;
          v22 = v17;
          while ((unint64_t)(*(_QWORD *)v22 + 1) <= 1)
          {
            v22 += 16;
            v23 -= 16;
            if (!v23)
            {
              v22 = v21;
              goto LABEL_14;
            }
          }
        }
        goto LABEL_14;
      }
      v22 = v17 + 16 * v20;
    }
    else
    {
      v22 = 0;
      v20 = 0;
    }
    v21 = v17 + 16 * v20;
    if (!v17)
    {
      v24 = 0;
LABEL_15:
      if (v24 != v22)
      {
        v160 = v12 + 720 * (_QWORD)v11;
        do
        {
          if ((*(_WORD *)(v22 + 8) & 1) != 0)
          {
            v207 = *(_QWORD *)(v160 + 696);
            if (v207)
            {
              v208 = *(_DWORD *)(v207 - 8);
              v209 = ~(*(_QWORD *)v22 << 32) + *(_QWORD *)v22;
              v210 = (v209 ^ (v209 >> 22)) + ~((v209 ^ (v209 >> 22)) << 13);
              v211 = (9 * (v210 ^ (v210 >> 8))) ^ ((9 * (v210 ^ (v210 >> 8))) >> 15);
              v212 = v208 & (((v211 + ~(v211 << 27)) >> 31) ^ ((_DWORD)v211 + ~((_DWORD)v211 << 27)));
              v213 = *(_QWORD *)(v207 + 8 * v212);
              if (v213 != *(_QWORD *)v22)
              {
                v243 = 1;
                while (v213)
                {
                  v212 = ((_DWORD)v212 + v243) & v208;
                  v213 = *(_QWORD *)(v207 + 8 * v212);
                  ++v243;
                  if (v213 == *(_QWORD *)v22)
                    goto LABEL_256;
                }
                v212 = *(unsigned int *)(v207 - 4);
              }
LABEL_256:
              if (v212 != *(_DWORD *)(v207 - 4))
              {
                *(_QWORD *)(v207 + 8 * v212) = -1;
                v214 = (uint64_t *)(v160 + 696);
                ++*(_DWORD *)(*(_QWORD *)(v160 + 696) - 16);
                v215 = *(_QWORD *)(v160 + 696);
                v216 = v215 ? *(_DWORD *)(v215 - 12) - 1 : -1;
                *(_DWORD *)(v215 - 12) = v216;
                v217 = *v214;
                if (*v214)
                {
                  v218 = 6 * *(_DWORD *)(v217 - 12);
                  v219 = *(_DWORD *)(v217 - 4);
                  if (v218 < v219 && v219 >= 9)
                  {
                    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v214, v219 >> 1, 0, v16, v12, a6, a7, a8);
                    a3 = v382;
                    v16 = v373 + 144;
                    v12 = v384;
                    v11 = v385;
                  }
                }
              }
            }
          }
          v161 = v22 + 16;
          v22 = v21;
          if (v161 != v21)
          {
            v22 = v161;
            while ((unint64_t)(*(_QWORD *)v22 + 1) <= 1)
            {
              v22 += 16;
              if (v22 == v21)
              {
                v22 = v21;
                break;
              }
            }
          }
        }
        while (v22 != v24);
      }
      goto LABEL_16;
    }
LABEL_14:
    v24 = v17 + 16 * *(unsigned int *)(v17 - 4);
    goto LABEL_15;
  }
  v271 = v12 + 720 * (_QWORD)v11;
  v273 = *(unsigned __int8 *)(v271 + 152);
  v272 = (_BYTE *)(v271 + 152);
  if (v273)
    goto LABEL_16;
  *v272 = 1;
  v274 = *(_QWORD *)v16;
  if (*(_QWORD *)v16)
  {
    v275 = *(unsigned int *)(v274 - 4);
    v276 = v274 + 16 * v275;
    if (*(_DWORD *)(v274 - 12))
    {
      v277 = *(_QWORD *)v16;
      if ((_DWORD)v275)
      {
        v278 = 16 * v275;
        v277 = *(_QWORD *)v16;
        while ((unint64_t)(*(_QWORD *)v277 + 1) <= 1)
        {
          v277 += 16;
          v278 -= 16;
          if (!v278)
          {
            v277 = v276;
            goto LABEL_358;
          }
        }
      }
      goto LABEL_358;
    }
    v277 = v274 + 16 * v275;
  }
  else
  {
    v277 = 0;
    v275 = 0;
  }
  v276 = v274 + 16 * v275;
LABEL_358:
  if (v274)
    v274 += 16 * *(unsigned int *)(v274 - 4);
  while (v277 != v274)
  {
    *(_WORD *)(v277 + 8) |= 1u;
    v279 = v277 + 16;
    v277 = v276;
    if (v279 != v276)
    {
      v277 = v279;
      while ((unint64_t)(*(_QWORD *)v277 + 1) <= 1)
      {
        v277 += 16;
        if (v277 == v276)
        {
          v277 = v276;
          break;
        }
      }
    }
  }
LABEL_16:
  v25 = *((unsigned int *)a2 + 3);
  if (v25 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197E4684CLL);
  }
  v26 = v25 - 2;
  v27 = *a2;
  v28 = *(_DWORD *)v14;
  if ((*(_DWORD *)v14 & 2) != 0)
  {
    *(_DWORD *)(v27 + 720 * v26 + 10) |= 2u;
    v28 = *(_DWORD *)v14;
  }
  if ((v28 & 4) != 0)
    *(_DWORD *)(v27 + 720 * v26 + 10) |= 4u;
  v380 = a1;
  v381 = a2;
  v29 = *(unsigned int *)(v27 + 720 * v26 + 180);
  if (!(_DWORD)v29)
  {
    __break(0xC471u);
    JUMPOUT(0x197E46854);
  }
  v374 = (JSC::Scope *)(v27 + 720 * v26);
  v30 = v12 + 720 * (_QWORD)v11;
  v31 = *(_DWORD *)(v30 + 180);
  if (v31)
  {
    v33 = *(_QWORD *)(v30 + 168);
    v34 = (uint64_t *)(v12 + 720 * (_QWORD)v11 + 120);
    v32 = (unsigned int *)(*(_QWORD *)(v27 + 720 * v26 + 168) + 72 * (v29 - 1));
    v35 = (int *)(v32 + 1);
    v36 = (WTF **)(v32 + 2);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v376 = v33 + 72 * v31;
    v378 = v32;
    v379 = (int *)(v32 + 1);
    v377 = (WTF **)(v32 + 2);
    while (1)
    {
      v37 = *(unsigned int *)(v33 + 4);
      v38 = (_QWORD *)(v33 + 8);
      if ((_DWORD)v37 != 8)
        v38 = (_QWORD *)*v38;
      v39 = 0;
      while ((_DWORD)v37 != v39)
      {
        v40 = v39;
        v41 = v38[v39++];
        if (v41 != -1)
        {
          v42 = v40;
          goto LABEL_30;
        }
      }
      v42 = *(unsigned int *)(v33 + 4);
LABEL_30:
      if ((_DWORD)v37 != (_DWORD)v42)
        break;
LABEL_123:
      v33 += 72;
      if (v33 == v376)
        goto LABEL_133;
    }
    v43 = v42 | (v37 << 32);
    while (1)
    {
      v386 = 0;
      v44 = v38[v43];
      v386 = (WTF *)v44;
      if (v44)
        *(_DWORD *)v44 += 2;
      v45 = *v34;
      if (!*v34)
        goto LABEL_44;
      v46 = *(_DWORD *)(v44 + 16);
      if ((v46 & 0x20) != 0)
        v46 = *(_DWORD *)(v44 + 32);
      v47 = *(_DWORD *)(v45 - 8);
      v48 = v47 & (v46 >> 8);
      v49 = *(_QWORD *)(v45 + 16 * v48);
      if (v49 != v44)
        break;
LABEL_42:
      if (*(_DWORD *)v44 == 2)
      {
        v102 = v26;
        v103 = v27;
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, v11, a3, v16, v12, v26, v27, a8);
        WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
        v36 = v377;
        v32 = v378;
        v35 = v379;
        v27 = v103;
        v14 = v383;
        v26 = v102;
LABEL_106:
        a3 = v382;
        v16 = v373 + 144;
        v12 = v384;
        v11 = v385;
        goto LABEL_69;
      }
      *(_DWORD *)v44 -= 2;
LABEL_69:
      if (HIDWORD(v43) <= (v42 + 1))
        v66 = (v42 + 1);
      else
        v66 = HIDWORD(v43);
      while ((_DWORD)v66 - 1 != (_DWORD)v42)
      {
        v42 = (v42 + 1);
        if (v38[v42] != -1)
        {
          LODWORD(v66) = v42;
          goto LABEL_75;
        }
      }
      v42 = v66;
LABEL_75:
      v43 = v42 | v43 & 0xFFFFFFFF00000000;
      LODWORD(v42) = v66;
      if ((_DWORD)v37 == (_DWORD)v66)
        goto LABEL_123;
    }
    v50 = 1;
    while (v49)
    {
      v48 = (v48 + v50) & v47;
      v49 = *(_QWORD *)(v45 + 16 * v48);
      ++v50;
      if (v49 == v44)
      {
        if (!v44)
          goto LABEL_69;
        goto LABEL_42;
      }
    }
LABEL_44:
    if (v44)
      *(_DWORD *)v44 += 2;
    v51 = *(_QWORD *)v16;
    if (*(_QWORD *)v16)
    {
      v52 = *(_DWORD *)(v44 + 16);
      if ((v52 & 0x20) != 0)
        v52 = *(_DWORD *)(v44 + 32);
      v53 = *(_DWORD *)(v51 - 8);
      v54 = v53 & (v52 >> 8);
      v55 = *(_QWORD *)(v51 + 16 * v54);
      if (v55 == v44)
      {
LABEL_54:
        v57 = 1;
        goto LABEL_55;
      }
      v56 = 1;
      while (v55)
      {
        v54 = (v54 + v56) & v53;
        v55 = *(_QWORD *)(v51 + 16 * v54);
        ++v56;
        if (v55 == v44)
        {
          if (!v44)
            goto LABEL_69;
          goto LABEL_54;
        }
      }
    }
    if (!v44)
      goto LABEL_59;
    v57 = 0;
LABEL_55:
    v58 = *(_DWORD *)v44 - 2;
    if (*(_DWORD *)v44 != 2)
    {
      *(_DWORD *)v44 = v58;
      goto LABEL_57;
    }
    v67 = v27;
    v68 = v26;
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, v11, a3, v16, v12, v26, v27, a8);
    v73 = *(_QWORD *)(StatusReg + 752);
    if (v73)
    {
      if (!(v44 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v44 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v44)) & 1) != 0)
      {
        goto LABEL_86;
      }
      if (v44 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v44 >> 24)
      {
        v69 = 0;
      }
      else
      {
        v69 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v44 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v44) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v69 == 1)
        {
LABEL_86:
          v74 = *(unsigned int *)(v73 + 8000);
          if (v74 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v73, v44, (os_unfair_lock_s *)5, v69, v70, v71, v72, a8);
          }
          else
          {
            *(_QWORD *)(v73 + 8 * v74) = v44 | 0x5000000000000;
            *(_DWORD *)(v73 + 8000) = v74 + 1;
          }
          goto LABEL_88;
        }
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v73, v44, 1, v69, v70, v71, v72, a8);
    }
    else
    {
      pas_try_deallocate_slow_no_cache(v44, (uint64_t)&bmalloc_heap_config, 1);
    }
LABEL_88:
    v58 = *(_DWORD *)v44;
    v11 = v385;
    v16 = v373 + 144;
    v12 = v384;
    a3 = v382;
    v26 = v68;
    v27 = v67;
    v14 = v383;
    v32 = v378;
    v35 = v379;
    v36 = v377;
LABEL_57:
    v59 = v58 - 2;
    if (v59)
    {
      *(_DWORD *)v44 = v59;
      if ((v57 & 1) != 0)
        goto LABEL_69;
LABEL_59:
      v60 = (uint64_t)v386;
      if ((~*(_DWORD *)v14 & 0x1400000) == 0
        && (*(_DWORD *)v14 & 0x1000) == 0
        && v386 == *(WTF **)(*(_QWORD *)(*(_QWORD *)v374 + 41952) + 880))
      {
        goto LABEL_69;
      }
      v61 = *v35;
      v62 = *v32;
      if (*v35 == 8)
      {
        if (v62)
        {
          v63 = *v32;
          v64 = v36;
          v65 = v63;
          while (*v64 != v386)
          {
            ++v64;
            if (!--v65)
            {
              if (v62 <= 7)
                goto LABEL_66;
              v203 = v26;
              v204 = v27;
              v205 = (_OWORD *)WTF::fastMalloc((WTF *)0x200);
              v36 = v377;
              v32 = v378;
              v35 = v379;
              v27 = v204;
              v14 = v383;
              v16 = v373 + 144;
              v26 = v203;
              v12 = v384;
              v11 = v385;
              v98 = 0;
              *(_QWORD *)&v206 = -1;
              *((_QWORD *)&v206 + 1) = -1;
              *v205 = v206;
              v205[1] = v206;
              v205[2] = v206;
              v205[3] = v206;
              v205[4] = v206;
              v205[5] = v206;
              v205[6] = v206;
              v205[7] = v206;
              v205[8] = v206;
              v205[9] = v206;
              v205[10] = v206;
              v205[11] = v206;
              v205[12] = v206;
              v205[13] = v206;
              v205[14] = v206;
              v205[15] = v206;
              v205[16] = v206;
              v205[17] = v206;
              v205[18] = v206;
              v205[19] = v206;
              v205[20] = v206;
              v205[21] = v206;
              v205[22] = v206;
              v205[23] = v206;
              v205[24] = v206;
              v205[25] = v206;
              v205[26] = v206;
              v205[27] = v206;
              v205[28] = v206;
              v205[29] = v206;
              v205[30] = v206;
              v205[31] = v206;
              *v379 = 64;
              do
              {
                v90 = v377[v98];
                if (v90 != (WTF *)-1)
                {
                  v91 = ((unint64_t)v90 + ~((_QWORD)v90 << 32)) ^ (((unint64_t)v90 + ~((_QWORD)v90 << 32)) >> 22);
                  v92 = 9 * ((v91 + ~(v91 << 13)) ^ ((v91 + ~(v91 << 13)) >> 8));
                  v93 = (v92 ^ (v92 >> 15)) + ~((v92 ^ (v92 >> 15)) << 27);
                  v94 = v93 ^ (v93 >> 31);
                  v95 = v94 & 0x3F;
                  v96 = (WTF *)*((_QWORD *)v205 + v95);
                  if (v96 != (WTF *)-1 && v96 != v90)
                  {
                    LOBYTE(v95) = v94 & 0x3F;
                    v99 = 1;
                    do
                    {
                      v95 = ((_BYTE)v95 + (_BYTE)v99) & 0x3F;
                      v100 = (WTF *)*((_QWORD *)v205 + v95);
                      ++v99;
                    }
                    while (v100 != (WTF *)-1 && v100 != v90);
                  }
                  *((_QWORD *)v205 + v95) = v90;
                }
                ++v98;
              }
              while (v98 != 8);
              v62 = *v378;
              *v377 = (WTF *)v205;
              v61 = 64;
              a3 = v382;
              goto LABEL_96;
            }
          }
LABEL_68:
          if ((_DWORD)a3 && (*(_DWORD *)v14 & 0x408000) != 0x8000)
          {
            v112 = v26;
            v113 = v27;
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v27 + 720 * v26 + 696), (uint64_t *)&v386, v16, v12, v26, v27, a8, (uint64_t)v387);
            v36 = v377;
            v32 = v378;
            v35 = v379;
            v27 = v113;
            v14 = v383;
            v26 = v112;
            goto LABEL_106;
          }
          goto LABEL_69;
        }
        v63 = 0;
LABEL_66:
        v36[v63] = v386;
      }
      else
      {
LABEL_96:
        if (3 * v61 <= 4 * v62)
        {
          v371 = v27;
          v372 = v26;
          v370 = *v36;
          v83 = (void *)WTF::fastMalloc((WTF *)(8 * (2 * v61)));
          memset(v83, 255, 8 * (2 * v61));
          *v379 = 2 * v61;
          if (v61)
          {
            v309 = 0;
            v310 = 2 * v61 - 1;
            do
            {
              v311 = *((_QWORD *)v370 + v309);
              if (v311 != -1)
              {
                v312 = (~(v311 << 32) + v311) ^ ((unint64_t)(~(v311 << 32) + v311) >> 22);
                v313 = 9 * ((v312 + ~(v312 << 13)) ^ ((v312 + ~(v312 << 13)) >> 8));
                v314 = (v313 ^ (v313 >> 15)) + ~((v313 ^ (v313 >> 15)) << 27);
                v315 = v310 & ((v314 >> 31) ^ v314);
                v316 = *((_QWORD *)v83 + v315);
                if (v316 != -1 && v316 != v311)
                {
                  v318 = 1;
                  do
                  {
                    v315 = ((_DWORD)v315 + v318) & v310;
                    v319 = *((_QWORD *)v83 + v315);
                    ++v318;
                  }
                  while (v319 != -1 && v319 != v311);
                }
                *((_QWORD *)v83 + v315) = v311;
              }
              ++v309;
            }
            while (v309 != v61);
          }
          WTF::fastFree((unint64_t)v370, v302, v303, v304, v305, v306, v307, v308);
          v32 = v378;
          v35 = v379;
          v61 = *v379;
          v36 = v377;
          *v377 = (WTF *)v83;
          v11 = v385;
          v16 = v373 + 144;
          v12 = v384;
          a3 = v382;
          v27 = v371;
          v26 = v372;
          v14 = v383;
        }
        else
        {
          v83 = *v36;
        }
        v84 = (~(v60 << 32) + v60) ^ ((unint64_t)(~(v60 << 32) + v60) >> 22);
        v85 = 9 * ((v84 + ~(v84 << 13)) ^ ((v84 + ~(v84 << 13)) >> 8));
        v86 = (v85 ^ (v85 >> 15)) + ~((v85 ^ (v85 >> 15)) << 27);
        v87 = (v61 - 1) & ((v86 >> 31) ^ v86);
        v88 = *((_QWORD *)v83 + v87);
        if (v88 != -1 && v88 != v60)
        {
          v192 = 1;
          do
          {
            v87 = ((_DWORD)v87 + v192) & (v61 - 1);
            v88 = *((_QWORD *)v83 + v87);
            ++v192;
          }
          while (v88 != -1 && v88 != v60);
        }
        if (v88 == v60)
          goto LABEL_68;
        *((_QWORD *)v83 + v87) = v60;
        v62 = *v32;
      }
      *v32 = v62 + 1;
      goto LABEL_68;
    }
    v75 = v27;
    v76 = v26;
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, v11, a3, v16, v12, v26, v27, a8);
    v81 = *(_QWORD *)(StatusReg + 752);
    if (!v81)
    {
      pas_try_deallocate_slow_no_cache(v44, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_94;
    }
    if (!(v44 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v44 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v44)) & 1) != 0)
    {
LABEL_92:
      v82 = *(unsigned int *)(v81 + 8000);
      if (v82 >= 0x3E7)
      {
        pas_thread_local_cache_append_deallocation_slow(v81, v44, (os_unfair_lock_s *)5, v77, v78, v79, v80, a8);
      }
      else
      {
        *(_QWORD *)(v81 + 8 * v82) = v44 | 0x5000000000000;
        *(_DWORD *)(v81 + 8000) = v82 + 1;
      }
LABEL_94:
      v11 = v385;
      v16 = v373 + 144;
      v12 = v384;
      a3 = v382;
      v26 = v76;
      v27 = v75;
      v14 = v383;
      v32 = v378;
      v35 = v379;
      v36 = v377;
      if ((v57 & 1) != 0)
        goto LABEL_69;
      goto LABEL_59;
    }
    if (v44 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v44 >> 24)
    {
      v77 = 0;
    }
    else
    {
      v77 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v44 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v44) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)v77 == 1)
        goto LABEL_92;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v81, v44, 1, v77, v78, v79, v80, a8);
    goto LABEL_94;
  }
LABEL_133:
  v115 = v381;
  if ((a3 & 1) != 0 && (*(_BYTE *)(v14 + 2) & 0x40) == 0)
  {
    v188 = *(_QWORD *)(v12 + 720 * (_QWORD)v11 + 696);
    if (v188)
    {
      if (*(_DWORD *)(v188 - 12))
      {
        v189 = *(unsigned int *)(v188 - 4);
        if ((_DWORD)v189)
        {
          v190 = 8 * v189;
          v191 = *(uint64_t **)(v12 + 720 * (_QWORD)v11 + 696);
          while ((unint64_t)(*v191 + 1) <= 1)
          {
            ++v191;
            v190 -= 8;
            if (!v190)
              goto LABEL_134;
          }
        }
        else
        {
          v191 = *(uint64_t **)(v12 + 720 * (_QWORD)v11 + 696);
        }
        v323 = (uint64_t *)(v188 + 8 * v189);
        if (v191 != v323)
        {
          v324 = (uint64_t *)(v27 + 720 * v26 + 696);
LABEL_436:
          v325 = v26;
          v326 = v27;
          WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add(v324, v191, v16, v12, v26, v27, a8, (uint64_t)v387);
          v27 = v326;
          v14 = v383;
          v16 = v373 + 144;
          v26 = v325;
          v12 = v384;
          v11 = v385;
          while (++v191 != v323)
          {
            if ((unint64_t)(*v191 + 1) > 1)
            {
              if (v191 != v323)
                goto LABEL_436;
              break;
            }
          }
        }
      }
    }
  }
LABEL_134:
  v116 = *(_QWORD *)(v12 + 720 * (_QWORD)v11 + 688);
  if (v116 && *(_DWORD *)(v116 - 12))
  {
    v262 = v26;
    v263 = v27;
    JSC::Scope::bubbleSloppyModeFunctionHoistingCandidates((JSC::Scope *)v373, v374);
    v27 = v263;
    v26 = v262;
    v16 = v373 + 144;
    v12 = v384;
    v11 = v385;
  }
  v117 = *(_DWORD *)v14;
  if ((*(_DWORD *)v14 & 0x800) != 0)
  {
    if ((v117 & 2) != 0)
      *(_BYTE *)(v12 + 720 * (_QWORD)v11 + 32) |= 1u;
    v193 = *(_DWORD *)(v373 + 180);
    if (v193)
    {
      v194 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v373 + 41952) + 880);
      v195 = *(unsigned int **)(v373 + 168);
      v196 = &v195[18 * v193];
      v197 = (~(v194 << 32) + v194) ^ ((unint64_t)(~(v194 << 32) + v194) >> 22);
      v198 = (v197 + ~(v197 << 13)) ^ ((v197 + ~(v197 << 13)) >> 8);
      do
      {
        v199 = v195[1];
        if (v199 == 8)
        {
          v200 = *v195;
          if ((_DWORD)v200)
          {
            if (*((_QWORD *)v195 + 1) == v194)
              goto LABEL_337;
            v201 = 0;
            while (v200 - 1 != v201)
            {
              v202 = *(_QWORD *)&v195[2 * v201++ + 4];
              if (v202 == v194)
              {
                if (v201 >= v200)
                  break;
                goto LABEL_337;
              }
            }
          }
        }
        else
        {
          v264 = ((9 * v198) ^ ((9 * v198) >> 15)) + ~(((9 * v198) ^ ((9 * v198) >> 15)) << 27);
          v265 = (v264 >> 31) ^ v264;
          v266 = *((_QWORD *)v195 + 1);
          v267 = v199 - 1;
          v268 = v267 & v265;
          v269 = *(_QWORD *)(v266 + 8 * v268);
          if (v269 != -1 && v269 != v194)
          {
            v321 = 1;
            do
            {
              v268 = (v268 + v321) & v267;
              v269 = *(_QWORD *)(v266 + 8 * v268);
              ++v321;
            }
            while (v269 != -1 && v269 != v194);
          }
          if (v269 == v194)
          {
LABEL_337:
            *(_BYTE *)(v12 + 720 * (_QWORD)v11 + 32) |= 2u;
            break;
          }
        }
        v195 += 18;
      }
      while (v195 != v196);
    }
  }
  if ((v117 & 0x401000) != 0x400000)
  {
    *(_BYTE *)(v27 + 720 * v26 + 32) |= *(_BYTE *)(v12 + 720 * (_QWORD)v11 + 32);
    v117 = *(_DWORD *)v14;
  }
  if ((v117 & 0x400008) == 8)
    *(_DWORD *)(v27 + 720 * v26 + 10) |= 8u;
  v118 = *(_QWORD *)v16;
  *(_QWORD *)v16 = 0;
  v119 = v12 + 720 * (_QWORD)v11;
  v120 = *(_BYTE *)(v119 + 152);
  v121 = *(_QWORD *)(v119 + 160);
  *(_QWORD *)(v119 + 160) = 0;
  v122 = *(_QWORD *)(v119 + 704);
  *(_QWORD *)(v119 + 704) = 0;
  *(_QWORD *)v380 = v118;
  *(_BYTE *)(v380 + 8) = v120;
  *(_QWORD *)(v380 + 16) = v121;
  *(_QWORD *)(v380 + 24) = v122;
  v123 = *(_QWORD *)(v119 + 712);
  *(_QWORD *)(v119 + 712) = 0;
  *(_QWORD *)(v380 + 32) = v123;
  v124 = *((unsigned int *)v381 + 3);
  if (!(_DWORD)v124)
  {
    __break(0xC471u);
    JUMPOUT(0x197E4685CLL);
  }
  v125 = v124 - 1;
  v126 = *v381;
  v127 = *v381 + 720 * (v124 - 1);
  v128 = *(_QWORD *)(v127 + 704);
  if (v128)
  {
    *(_QWORD *)(v127 + 704) = 0;
    *(_DWORD *)(v126 + 720 * v125 + 712) = 0;
    WTF::fastFree(v128, v11, a3, v16, v12, v26, v27, a8);
  }
  v129 = *(_QWORD *)(v126 + 720 * v125 + 696);
  if (v129)
    WTF::fastFree(v129 - 16, v11, a3, v16, v12, v26, v27, a8);
  v130 = *(_QWORD *)(v126 + 720 * v125 + 688);
  if (v130)
    WTF::fastFree(v130 - 16, v11, a3, v16, v12, v26, v27, a8);
  if (*(_DWORD *)(v126 + 720 * v125 + 620) != 8)
    WTF::fastFree(*(_QWORD *)(v126 + 720 * v125 + 624), v11, a3, v16, v12, v26, v27, a8);
  v131 = v126 + 720 * v125;
  v134 = *(_QWORD *)(v131 + 168);
  v133 = v131 + 168;
  v132 = v134;
  v135 = *(unsigned int *)(v133 + 12);
  if ((_DWORD)v135)
  {
    v136 = 72 * v135;
    v137 = (unint64_t *)(v132 + 8);
    do
    {
      if (*((_DWORD *)v137 - 1) != 8)
        WTF::fastFree(*v137, v11, a3, v16, v12, v26, v27, a8);
      v137 += 9;
      v136 -= 72;
    }
    while (v136);
    v132 = *(_QWORD *)v133;
  }
  v138 = v126 + 720 * v125 + 184;
  if (v138 == v132 && v132 != 0)
  {
    v140 = v126 + 720 * v125;
    v141 = (WTF::StringImpl ***)(v140 + 144);
    v142 = *(_QWORD *)(v140 + 160);
    *(_QWORD *)(v140 + 160) = 0;
    if (!v142)
      goto LABEL_166;
    v143 = *(WTF::StringImpl ***)v142;
    if (*(_QWORD *)v142)
    {
      v221 = *((unsigned int *)v143 - 1);
      if ((_DWORD)v221)
      {
        v222 = *(WTF::StringImpl ***)v142;
        do
        {
          v223 = *v222;
          if (*v222 != (WTF::StringImpl *)-1)
          {
            if (v223)
            {
              *v222 = 0;
              if (*(_DWORD *)v223 == 2)
              {
                WTF::StringImpl::~StringImpl(v223, v11, a3, v16, v12, v26, v27, a8);
                WTF::fastFree(v224, v225, v226, v227, v228, v229, v230, v231);
              }
              else
              {
                *(_DWORD *)v223 -= 2;
              }
            }
            else
            {
              *v222 = 0;
            }
          }
          v222 += 2;
          --v221;
        }
        while (v221);
      }
      WTF::fastFree((unint64_t)(v143 - 2), v11, a3, v16, v12, v26, v27, a8);
    }
    v144 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v144)
    {
      pas_try_deallocate_slow_no_cache(v142, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_166;
    }
    if (!(v142 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v142 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v142)) & 1) != 0)
    {
LABEL_164:
      v145 = *(unsigned int *)(v144 + 8000);
      if (v145 >= 0x3E7)
      {
        pas_thread_local_cache_append_deallocation_slow(v144, v142, (os_unfair_lock_s *)5, v16, v12, v26, v27, a8);
      }
      else
      {
        *(_QWORD *)(v144 + 8 * v145) = v142 | 0x5000000000000;
        *(_DWORD *)(v144 + 8000) = v145 + 1;
      }
LABEL_166:
      v146 = *v141;
      if (v146)
      {
        v166 = *((unsigned int *)v146 - 1);
        if ((_DWORD)v166)
        {
          v167 = v146;
          do
          {
            v168 = *v167;
            if (*v167 != (WTF::StringImpl *)-1)
            {
              if (v168)
              {
                *v167 = 0;
                if (*(_DWORD *)v168 == 2)
                {
                  WTF::StringImpl::~StringImpl(v168, v11, a3, v16, v12, v26, v27, a8);
                  WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
                }
                else
                {
                  *(_DWORD *)v168 -= 2;
                }
              }
              else
              {
                *v167 = 0;
              }
            }
            v167 += 2;
            --v166;
          }
          while (v166);
        }
        WTF::fastFree((unint64_t)(v146 - 2), v11, a3, v16, v12, v26, v27, a8);
      }
      v147 = v126 + 720 * v125;
      v148 = (WTF::StringImpl ***)(v147 + 120);
      v149 = *(_QWORD *)(v147 + 136);
      *(_QWORD *)(v147 + 136) = 0;
      if (!v149)
      {
LABEL_174:
        v153 = *v148;
        if (v153)
        {
          v177 = *((unsigned int *)v153 - 1);
          if ((_DWORD)v177)
          {
            v178 = v153;
            do
            {
              v179 = *v178;
              if (*v178 != (WTF::StringImpl *)-1)
              {
                if (v179)
                {
                  *v178 = 0;
                  if (*(_DWORD *)v179 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v179, v11, a3, v16, v12, v26, v27, a8);
                    WTF::fastFree(v180, v181, v182, v183, v184, v185, v186, v187);
                  }
                  else
                  {
                    *(_DWORD *)v179 -= 2;
                  }
                }
                else
                {
                  *v178 = 0;
                }
              }
              v178 += 2;
              --v177;
            }
            while (v177);
          }
          WTF::fastFree((unint64_t)(v153 - 2), v11, a3, v16, v12, v26, v27, a8);
        }
        if (*(_DWORD *)(v126 + 720 * v125 + 52) != 8)
          WTF::fastFree(*(_QWORD *)(v126 + 720 * v125 + 56), v11, a3, v16, v12, v26, v27, a8);
        v154 = v126 + 720 * v125;
        v155 = *(_QWORD *)(v154 + 40);
        *(_QWORD *)(v154 + 40) = 0;
        if (v155)
        {
          v156 = *(_QWORD *)v155;
          if (v155 + 16 != *(_QWORD *)v155 && v156 != 0)
          {
            *(_QWORD *)v155 = 0;
            *(_DWORD *)(v155 + 8) = 0;
            WTF::fastFree(v156, v11, a3, v16, v12, v26, v27, a8);
          }
          v158 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
          if (v158)
          {
            if (!(v155 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v155 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v155)) & 1) != 0)
            {
              goto LABEL_186;
            }
            if (v155 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v155 >> 24)
            {
              v16 = 0;
              goto LABEL_349;
            }
            v16 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v155 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v155) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v16 != 1)
            {
LABEL_349:
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v158, v155, 1, v16, v12, v26, v27, a8);
              goto LABEL_188;
            }
LABEL_186:
            v159 = *(unsigned int *)(v158 + 8000);
            if (v159 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v158, v155, (os_unfair_lock_s *)5, v16, v12, v26, v27, a8);
            }
            else
            {
              *(_QWORD *)(v158 + 8 * v159) = v155 | 0x5000000000000;
              *(_DWORD *)(v158 + 8000) = v159 + 1;
            }
            goto LABEL_188;
          }
          goto LABEL_376;
        }
        goto LABEL_188;
      }
      v150 = *(WTF::StringImpl ***)v149;
      if (*(_QWORD *)v149)
      {
        v232 = *((unsigned int *)v150 - 1);
        if ((_DWORD)v232)
        {
          v233 = *(WTF::StringImpl ***)v149;
          do
          {
            v234 = *v233;
            if (*v233 != (WTF::StringImpl *)-1)
            {
              if (v234)
              {
                *v233 = 0;
                if (*(_DWORD *)v234 == 2)
                {
                  WTF::StringImpl::~StringImpl(v234, v11, a3, v16, v12, v26, v27, a8);
                  WTF::fastFree(v235, v236, v237, v238, v239, v240, v241, v242);
                }
                else
                {
                  *(_DWORD *)v234 -= 2;
                }
              }
              else
              {
                *v233 = 0;
              }
            }
            v233 += 2;
            --v232;
          }
          while (v232);
        }
        WTF::fastFree((unint64_t)(v150 - 2), v11, a3, v16, v12, v26, v27, a8);
      }
      v151 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v151)
      {
        pas_try_deallocate_slow_no_cache(v149, (uint64_t)&bmalloc_heap_config, 1);
        goto LABEL_174;
      }
      if (!(v149 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v149 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v149)) & 1) != 0)
      {
LABEL_172:
        v152 = *(unsigned int *)(v151 + 8000);
        if (v152 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v151, v149, (os_unfair_lock_s *)5, v16, v12, v26, v27, a8);
        }
        else
        {
          *(_QWORD *)(v151 + 8 * v152) = v149 | 0x5000000000000;
          *(_DWORD *)(v151 + 8000) = v152 + 1;
        }
        goto LABEL_174;
      }
      if (v149 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v149 >> 24)
      {
        v16 = 0;
      }
      else
      {
        v16 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v149 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v149) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v16 == 1)
          goto LABEL_172;
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v151, v149, 1, v16, v12, v26, v27, a8);
      goto LABEL_174;
    }
    if (v142 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v142 >> 24)
    {
      v16 = 0;
    }
    else
    {
      v16 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v142 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v142) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)v16 == 1)
        goto LABEL_164;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v144, v142, 1, v16, v12, v26, v27, a8);
    goto LABEL_166;
  }
  if (v138 != v132 && v132 != 0)
  {
    *(_QWORD *)v133 = 0;
    *(_DWORD *)(v126 + 720 * v125 + 176) = 0;
    WTF::fastFree(v132, v11, a3, v16, v12, v26, v27, a8);
  }
  v245 = v126 + 720 * v125;
  v246 = (WTF::StringImpl ***)(v245 + 144);
  v247 = *(_QWORD *)(v245 + 160);
  *(_QWORD *)(v245 + 160) = 0;
  if (v247)
  {
    v248 = *(WTF::StringImpl ***)v247;
    if (*(_QWORD *)v247)
    {
      v343 = *((unsigned int *)v248 - 1);
      if ((_DWORD)v343)
      {
        v344 = *(WTF::StringImpl ***)v247;
        do
        {
          v345 = *v344;
          if (*v344 != (WTF::StringImpl *)-1)
          {
            *v344 = 0;
            if (v345)
            {
              if (*(_DWORD *)v345 == 2)
              {
                WTF::StringImpl::~StringImpl(v345, v11, a3, v16, v12, v26, v27, a8);
                WTF::fastFree(v346, v347, v348, v349, v350, v351, v352, v353);
              }
              else
              {
                *(_DWORD *)v345 -= 2;
              }
            }
          }
          v344 += 2;
          --v343;
        }
        while (v343);
      }
      WTF::fastFree((unint64_t)(v248 - 2), v11, a3, v16, v12, v26, v27, a8);
      v115 = v381;
    }
    v249 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v249)
    {
      pas_try_deallocate_slow_no_cache(v247, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_305;
    }
    if (!(v247 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v247 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v247)) & 1) != 0)
    {
      goto LABEL_303;
    }
    if (v247 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v247 >> 24)
    {
      v16 = 0;
      v115 = v381;
    }
    else
    {
      v16 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v247 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v247) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      v115 = v381;
      if ((_DWORD)v16 == 1)
      {
LABEL_303:
        v250 = *(unsigned int *)(v249 + 8000);
        if (v250 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v249, v247, (os_unfair_lock_s *)5, v16, v12, v26, v27, a8);
        }
        else
        {
          *(_QWORD *)(v249 + 8 * v250) = v247 | 0x5000000000000;
          *(_DWORD *)(v249 + 8000) = v250 + 1;
        }
        goto LABEL_305;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v249, v247, 1, v16, v12, v26, v27, a8);
  }
LABEL_305:
  v251 = *v246;
  if (v251)
  {
    v280 = *((unsigned int *)v251 - 1);
    if ((_DWORD)v280)
    {
      v281 = v251;
      do
      {
        v282 = *v281;
        if (*v281 != (WTF::StringImpl *)-1)
        {
          *v281 = 0;
          if (v282)
          {
            if (*(_DWORD *)v282 == 2)
            {
              WTF::StringImpl::~StringImpl(v282, v11, a3, v16, v12, v26, v27, a8);
              WTF::fastFree(v283, v284, v285, v286, v287, v288, v289, v290);
            }
            else
            {
              *(_DWORD *)v282 -= 2;
            }
          }
        }
        v281 += 2;
        --v280;
      }
      while (v280);
    }
    WTF::fastFree((unint64_t)(v251 - 2), v11, a3, v16, v12, v26, v27, a8);
  }
  v252 = v126 + 720 * v125;
  v253 = (WTF::StringImpl ***)(v252 + 120);
  v254 = *(_QWORD *)(v252 + 136);
  *(_QWORD *)(v252 + 136) = 0;
  if (v254)
  {
    v255 = *(WTF::StringImpl ***)v254;
    if (*(_QWORD *)v254)
    {
      v354 = *((unsigned int *)v255 - 1);
      if ((_DWORD)v354)
      {
        v355 = *(WTF::StringImpl ***)v254;
        do
        {
          v356 = *v355;
          if (*v355 != (WTF::StringImpl *)-1)
          {
            *v355 = 0;
            if (v356)
            {
              if (*(_DWORD *)v356 == 2)
              {
                WTF::StringImpl::~StringImpl(v356, v11, a3, v16, v12, v26, v27, a8);
                WTF::fastFree(v357, v358, v359, v360, v361, v362, v363, v364);
              }
              else
              {
                *(_DWORD *)v356 -= 2;
              }
            }
          }
          v355 += 2;
          --v354;
        }
        while (v354);
      }
      WTF::fastFree((unint64_t)(v255 - 2), v11, a3, v16, v12, v26, v27, a8);
      v115 = v381;
    }
    v256 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v256)
    {
      pas_try_deallocate_slow_no_cache(v254, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_313;
    }
    if (!(v254 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v254 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v254)) & 1) != 0)
    {
      goto LABEL_311;
    }
    if (v254 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v254 >> 24)
    {
      v16 = 0;
      v115 = v381;
    }
    else
    {
      v16 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v254 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v254) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      v115 = v381;
      if ((_DWORD)v16 == 1)
      {
LABEL_311:
        v257 = *(unsigned int *)(v256 + 8000);
        if (v257 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v256, v254, (os_unfair_lock_s *)5, v16, v12, v26, v27, a8);
        }
        else
        {
          *(_QWORD *)(v256 + 8 * v257) = v254 | 0x5000000000000;
          *(_DWORD *)(v256 + 8000) = v257 + 1;
        }
        goto LABEL_313;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v256, v254, 1, v16, v12, v26, v27, a8);
  }
LABEL_313:
  v258 = *v253;
  if (v258)
  {
    v291 = *((unsigned int *)v258 - 1);
    if ((_DWORD)v291)
    {
      v292 = v258;
      do
      {
        v293 = *v292;
        if (*v292 != (WTF::StringImpl *)-1)
        {
          *v292 = 0;
          if (v293)
          {
            if (*(_DWORD *)v293 == 2)
            {
              WTF::StringImpl::~StringImpl(v293, v11, a3, v16, v12, v26, v27, a8);
              WTF::fastFree(v294, v295, v296, v297, v298, v299, v300, v301);
            }
            else
            {
              *(_DWORD *)v293 -= 2;
            }
          }
        }
        v292 += 2;
        --v291;
      }
      while (v291);
    }
    WTF::fastFree((unint64_t)(v258 - 2), v11, a3, v16, v12, v26, v27, a8);
  }
  if (*(_DWORD *)(v126 + 720 * v125 + 52) != 8)
    WTF::fastFree(*(_QWORD *)(v126 + 720 * v125 + 56), v11, a3, v16, v12, v26, v27, a8);
  v259 = v126 + 720 * v125;
  v155 = *(_QWORD *)(v259 + 40);
  *(_QWORD *)(v259 + 40) = 0;
  if (v155)
  {
    v260 = *(_QWORD *)v155;
    if (v155 + 16 != *(_QWORD *)v155 && v260 != 0)
    {
      *(_QWORD *)v155 = 0;
      *(_DWORD *)(v155 + 8) = 0;
      WTF::fastFree(v260, v11, a3, v16, v12, v26, v27, a8);
    }
    v158 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v158)
    {
      if (!(v155 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v155 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v155)) & 1) != 0)
      {
        goto LABEL_186;
      }
      if (v155 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v155 >> 24)
      {
        v16 = 0;
        v115 = v381;
        goto LABEL_349;
      }
      v16 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v155 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v155) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      v115 = v381;
      if ((_DWORD)v16 != 1)
        goto LABEL_349;
      goto LABEL_186;
    }
LABEL_376:
    pas_try_deallocate_slow_no_cache(v155, (uint64_t)&bmalloc_heap_config, 1);
  }
LABEL_188:
  *((_DWORD *)v115 + 3) = v125;
}

void JSC::Scope::finalizeLexicalEnvironment(JSC::Scope *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v36;
  int v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;

  v8 = (uint64_t *)((char *)this + 144);
  if ((*((_BYTE *)this + 10) & 0xA) != 0)
  {
    JSC::VariableEnvironment::markAllVariablesAsCaptured((uint64_t *)this + 18);
    return;
  }
  v10 = *v8;
  if (*v8)
    v11 = *(_DWORD *)(v10 - 12);
  else
    v11 = 0;
  v12 = (_QWORD *)*((_QWORD *)this + 20);
  if (v12)
  {
    v12 = (_QWORD *)*v12;
    if (v12)
      LODWORD(v12) = *((_DWORD *)v12 - 3);
  }
  if (v11 + (_DWORD)v12)
  {
    v18 = *((_QWORD *)this + 87);
    if (v18)
    {
      if (*(_DWORD *)(v18 - 12))
      {
        v19 = *(unsigned int *)(v18 - 4);
        if ((_DWORD)v19)
        {
          v20 = 8 * v19;
          v21 = (WTF::StringImpl **)*((_QWORD *)this + 87);
          while ((unint64_t)*v21 + 1 <= 1)
          {
            ++v21;
            v20 -= 8;
            if (!v20)
              goto LABEL_6;
          }
        }
        else
        {
          v21 = (WTF::StringImpl **)*((_QWORD *)this + 87);
        }
        v38 = (WTF::StringImpl **)(v18 + 8 * v19);
        if (v21 != v38)
        {
          v39 = *v21;
LABEL_59:
          if (v39)
          {
            *(_DWORD *)v39 += 2;
            v50 = v39;
            JSC::VariableEnvironment::markVariableAsCapturedIfDefined(v8, (uint64_t *)&v50);
            if (*(_DWORD *)v39 == 2)
            {
              WTF::StringImpl::~StringImpl(v39, v40, v41, a4, a5, a6, a7, a8);
              WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
            }
            else
            {
              *(_DWORD *)v39 -= 2;
            }
          }
          else
          {
            v50 = 0;
            JSC::VariableEnvironment::markVariableAsCapturedIfDefined(v8, (uint64_t *)&v50);
          }
          while (++v21 != v38)
          {
            v39 = *v21;
            if ((unint64_t)*v21 + 1 > 1)
            {
              if (v21 != v38)
                goto LABEL_59;
              break;
            }
          }
          v10 = *v8;
        }
      }
    }
  }
LABEL_6:
  if (v10)
  {
    v13 = *(unsigned int *)(v10 - 4);
    v14 = v10 + 16 * v13;
    if (*(_DWORD *)(v10 - 12))
    {
      v15 = v10;
      if ((_DWORD)v13)
      {
        v16 = 16 * v13;
        v15 = v10;
        while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
        {
          v15 += 16;
          v16 -= 16;
          if (!v16)
          {
            v15 = v14;
            goto LABEL_13;
          }
        }
      }
      goto LABEL_13;
    }
    v15 = v10 + 16 * v13;
  }
  else
  {
    v15 = 0;
    v13 = 0;
  }
  v14 = v10 + 16 * v13;
LABEL_13:
  if (v10)
    v10 += 16 * *(unsigned int *)(v10 - 4);
  while (v15 != v10)
  {
    if ((*(_WORD *)(v15 + 8) & 1) != 0)
    {
      v22 = *((_QWORD *)this + 87);
      if (v22)
      {
        v23 = *(_DWORD *)(v22 - 8);
        v24 = ~(*(_QWORD *)v15 << 32) + *(_QWORD *)v15;
        v25 = (v24 ^ (v24 >> 22)) + ~((v24 ^ (v24 >> 22)) << 13);
        v26 = (9 * (v25 ^ (v25 >> 8))) ^ ((9 * (v25 ^ (v25 >> 8))) >> 15);
        v27 = v23 & (((v26 + ~(v26 << 27)) >> 31) ^ ((_DWORD)v26 + ~((_DWORD)v26 << 27)));
        v28 = *(_QWORD *)(v22 + 8 * v27);
        if (v28 != *(_QWORD *)v15)
        {
          v37 = 1;
          while (v28)
          {
            v27 = ((_DWORD)v27 + v37) & v23;
            v28 = *(_QWORD *)(v22 + 8 * v27);
            ++v37;
            if (v28 == *(_QWORD *)v15)
              goto LABEL_37;
          }
          v27 = *(unsigned int *)(v22 - 4);
        }
LABEL_37:
        if (v27 != *(_DWORD *)(v22 - 4))
        {
          *(_QWORD *)(v22 + 8 * v27) = -1;
          v29 = (uint64_t *)((char *)this + 696);
          ++*(_DWORD *)(*((_QWORD *)this + 87) - 16);
          v30 = *((_QWORD *)this + 87);
          v31 = v30 ? *(_DWORD *)(v30 - 12) - 1 : -1;
          *(_DWORD *)(v30 - 12) = v31;
          v32 = *v29;
          if (*v29)
          {
            v33 = 6 * *(_DWORD *)(v32 - 12);
            v34 = *(_DWORD *)(v32 - 4);
            if (v33 < v34 && v34 >= 9)
            {
              v36 = v10;
              WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v29, v34 >> 1, 0, a4, a5, a6, a7, a8);
              v10 = v36;
            }
          }
        }
      }
    }
    v17 = v15 + 16;
    v15 = v14;
    if (v17 != v14)
    {
      v15 = v17;
      while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
      {
        v15 += 16;
        if (v15 == v14)
        {
          v15 = v14;
          break;
        }
      }
    }
  }
}

void JSC::Scope::bubbleSloppyModeFunctionHoistingCandidates(JSC::Scope *this, JSC::Scope *a2)
{
  _QWORD *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29[31];
  unsigned __int8 v30;
  unint64_t v31;

  v4 = (_QWORD *)*((_QWORD *)this + 86);
  v5 = WTF::HashMap<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::HashTableTraits>::begin(v4);
  v6 = v5;
  v8 = v7;
  if (v4)
    v9 = &v4[2 * *((unsigned int *)v4 - 1)];
  else
    v9 = 0;
  if (v9 != v5)
  {
    v10 = (uint64_t *)((char *)a2 + 688);
    do
    {
      v11 = *v6;
      if (!*((_BYTE *)v6 + 8))
        goto LABEL_6;
      v12 = *(WTF::StringImpl **)(v11 + 40);
      if (v12)
        *(_DWORD *)v12 += 2;
      v20 = !WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::contains(*((_QWORD *)this + 18), (uint64_t)v12)|| (*((unsigned __int8 *)this + 12) >> 2) & 1;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::~StringImpl(v12, v13, v14, v15, v16, v17, v18, v19);
          WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
        }
        else
        {
          *(_DWORD *)v12 -= 2;
        }
      }
      if (v20)
      {
LABEL_6:
        v31 = v11;
        v30 = 1;
        WTF::HashMap<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::HashTableTraits>::inlineSet<JSC::FunctionMetadataNode * const&,JSC::Scope::NeedsDuplicateDeclarationCheck>((uint64_t)v29, v10, &v31, &v30);
      }
      while (1)
      {
        v6 += 2;
        if (v6 == v8)
          break;
        if (*v6 + 1 > 1)
          goto LABEL_11;
      }
      v6 = v8;
LABEL_11:
      ;
    }
    while (v6 != v9);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::declareHoistedVariable(uint64_t *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  int v27;
  int v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  _BOOL4 v47;
  int v49;
  uint64_t *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75[24];

  v8 = *((_DWORD *)a1 + 3);
  if (!v8)
  {
LABEL_77:
    __break(0xC471u);
    JUMPOUT(0x197E47184);
  }
  v11 = v8 - 1;
  while (2)
  {
    v12 = v11;
    v13 = *a1;
    v14 = *(int **)a2;
    if (*(_QWORD *)a2)
    {
      *v14 += 4;
      v15 = *(_QWORD *)(v13 + 720 * v12 + 144);
      if (!v15)
        goto LABEL_13;
    }
    else
    {
      v15 = *(_QWORD *)(v13 + 720 * v12 + 144);
      if (!v15)
        goto LABEL_18;
    }
    v16 = v14[4];
    if ((v16 & 0x20) != 0)
      v16 = v14[8];
    v17 = *(_DWORD *)(v15 - 8);
    v18 = v17 & (v16 >> 8);
    v19 = *(int **)(v15 + 16 * v18);
    if (v19 == v14)
      goto LABEL_22;
    v20 = 1;
    do
    {
      if (!v19)
      {
        if (!v14)
          goto LABEL_18;
LABEL_13:
        v21 = 0;
LABEL_14:
        v22 = *v14 - 2;
        if (*v14 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
          v22 = *v14;
        }
        else
        {
          *v14 = v22;
        }
        v23 = v22 - 2;
        if (v23)
        {
          *v14 = v23;
          if (v21)
            goto LABEL_25;
        }
        else
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
          if ((v21 & 1) != 0)
            goto LABEL_25;
        }
        goto LABEL_18;
      }
      v18 = (v18 + v20) & v17;
      v19 = *(int **)(v15 + 16 * v18);
      ++v20;
    }
    while (v19 != v14);
    if (v14)
    {
LABEL_22:
      v21 = 1;
      goto LABEL_14;
    }
LABEL_25:
    if (*((_DWORD *)a1 + 3) <= v12)
      goto LABEL_77;
    if ((*(_BYTE *)(*a1 + 720 * v12 + 12) & 4) == 0)
      return 2;
LABEL_18:
    if (*((_DWORD *)a1 + 3) <= v12)
    {
      __break(0xC471u);
      JUMPOUT(0x197E4718CLL);
    }
    v24 = *a1;
    v25 = *a1 + 720 * v12;
    v28 = *(_DWORD *)(v25 + 10);
    v26 = (unsigned int *)(v25 + 10);
    v27 = v28;
    if ((v28 & 0x40) == 0)
    {
      WTF::SmallSet<WTF::UniquedStringImpl *,WTF::PtrHashBase<WTF::UniquedStringImpl *,false>,8u>::add((uint64_t)v75, (unsigned int *)(v24 + 720 * v12 + 616), *(_QWORD *)a2);
      v11 = v12 - 1;
      if (*((_DWORD *)a1 + 3) <= v12 - 1)
        goto LABEL_77;
      continue;
    }
    break;
  }
  v46 = *(_QWORD *)(*(_QWORD *)(v24 + 720 * v12) + 41952);
  v47 = *(_QWORD *)(v46 + 1248) == *(_QWORD *)a2 || *(_QWORD *)(v46 + 880) == *(_QWORD *)a2;
  if ((v27 & 0x800000) == 0 || v47)
    v49 = 0;
  else
    v49 = 0x800000;
  *v26 = v49 | v27 & 0xFF7FFFFF;
  v50 = (uint64_t *)(v24 + 720 * v12 + 120);
  v51 = *(WTF::StringImpl **)a2;
  if (v51)
    *(_DWORD *)v51 += 2;
  v52 = *v50;
  if (*v50)
    goto LABEL_40;
  v53 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)(v53 + 16) = 0;
  v53 += 16;
  *(_WORD *)(v53 + 8) = 0;
  *(_QWORD *)(v53 + 16) = 0;
  *(_WORD *)(v53 + 24) = 0;
  *(_QWORD *)(v53 + 32) = 0;
  *(_WORD *)(v53 + 40) = 0;
  *(_QWORD *)(v53 + 48) = 0;
  *(_WORD *)(v53 + 56) = 0;
  *(_QWORD *)(v53 + 64) = 0;
  *(_WORD *)(v53 + 72) = 0;
  *(_QWORD *)(v53 + 80) = 0;
  *(_WORD *)(v53 + 88) = 0;
  *(_QWORD *)(v53 + 96) = 0;
  *(_WORD *)(v53 + 104) = 0;
  *(_QWORD *)(v53 + 112) = 0;
  *(_WORD *)(v53 + 120) = 0;
  *v50 = v53;
  *(_DWORD *)(v53 - 4) = 8;
  *(_DWORD *)(*v50 - 8) = 7;
  *(_DWORD *)(*v50 - 16) = 0;
  *(_DWORD *)(*v50 - 12) = 0;
  v52 = *v50;
  if (*v50)
LABEL_40:
    v54 = *(_DWORD *)(v52 - 8);
  else
    v54 = 0;
  v55 = *((_DWORD *)v51 + 4);
  if ((v55 & 0x20) != 0)
    v55 = *((_DWORD *)v51 + 8);
  v56 = v54 & (v55 >> 8);
  v57 = v52 + 16 * v56;
  v58 = *(WTF::StringImpl **)v57;
  if (*(_QWORD *)v57)
  {
    v65 = 0;
    v66 = 1;
    while (v58 != v51)
    {
      if (v58 == (WTF::StringImpl *)-1)
        v65 = v57;
      v56 = (v56 + v66) & v54;
      v57 = v52 + 16 * v56;
      v58 = *(WTF::StringImpl **)v57;
      ++v66;
      if (!*(_QWORD *)v57)
      {
        if (v65)
        {
          *(_QWORD *)v65 = 0;
          *(_WORD *)(v65 + 8) = 0;
          --*(_DWORD *)(*v50 - 16);
          v57 = v65;
        }
        if (v51)
          goto LABEL_44;
        goto LABEL_45;
      }
    }
    goto LABEL_51;
  }
LABEL_44:
  *(_DWORD *)v51 += 2;
LABEL_45:
  *(_QWORD *)v57 = v51;
  *(_WORD *)(v57 + 8) = 0;
  v59 = *v50;
  if (*v50)
    v60 = *(_DWORD *)(v59 - 12) + 1;
  else
    v60 = 1;
  *(_DWORD *)(v59 - 12) = v60;
  v61 = *v50;
  if (*v50)
    v62 = *(_DWORD *)(v61 - 12);
  else
    v62 = 0;
  v63 = (*(_DWORD *)(v61 - 16) + v62);
  v64 = *(unsigned int *)(v61 - 4);
  if (v64 > 0x400)
  {
    if (v64 > 2 * v63)
      goto LABEL_51;
LABEL_70:
    v57 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(v50, (WTF::StringImpl **)v57);
    goto LABEL_51;
  }
  if (3 * v64 <= 4 * v63)
    goto LABEL_70;
LABEL_51:
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  *(_WORD *)(v57 + 8) |= 4u;
  return v47;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::declareVariable(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  int v28;
  int v30;
  uint64_t *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  __int16 v47;
  __int16 v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  unsigned int v72;
  WTF::StringImpl *v73;
  int v75;
  __int16 v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  BOOL hasLexicallyDeclaredVariable;
  BOOL v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  if (!(_DWORD)a3)
    return JSC::Parser<JSC::Lexer<unsigned char>>::declareHoistedVariable((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = a4;
  v12 = a3;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148)
    && *(_DWORD *)(a1 + 7456) == 1
    && ((JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredParameter((uint64_t *)a1, *(WTF::StringImpl **)a2, a3, a4, a5, a6, a7, a8) & 1) != 0|| (JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredVariable((uint64_t *)a1, *(WTF::StringImpl **)a2, v13, v14, v15, v16, v17, v18) & 1) != 0))
  {
    return 2;
  }
  v19 = *(_DWORD *)(a1 + 12);
  if (!v19)
  {
LABEL_103:
    __break(0xC471u);
    JUMPOUT(0x197E47644);
  }
  v20 = v19 - 1;
  v21 = *(_QWORD *)a1;
  while (1)
  {
    v22 = *(_DWORD *)(v21 + 720 * v20 + 10);
    if ((v22 & 0x80) != 0)
      break;
    if (v19 <= --v20)
      goto LABEL_103;
  }
  if (v19 <= v20)
  {
    __break(0xC471u);
    JUMPOUT(0x197E47684);
  }
  if ((v22 & 0x80000) != 0)
  {
    if (v19 > v20 - 1)
    {
      v78 = v21 + 720 * (v20 - 1);
      v79 = *(WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
      {
        *(_DWORD *)v79 += 2;
        hasLexicallyDeclaredVariable = JSC::Scope::hasLexicallyDeclaredVariable(v78, v79, a3, a4, a5, a6, a7, a8);
        v81 = hasLexicallyDeclaredVariable;
        if (*(_DWORD *)v79 == 2)
        {
          WTF::StringImpl::~StringImpl(v79, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
          if (!v81)
            goto LABEL_91;
        }
        else
        {
          *(_DWORD *)v79 -= 2;
          if (!hasLexicallyDeclaredVariable)
          {
LABEL_91:
            v19 = *(_DWORD *)(a1 + 12);
            goto LABEL_12;
          }
        }
      }
      else if (!JSC::Scope::hasLexicallyDeclaredVariable(v78, 0, a3, a4, a5, a6, a7, a8))
      {
        goto LABEL_91;
      }
      return 2;
    }
    goto LABEL_103;
  }
LABEL_12:
  if (v19 <= v20)
  {
    __break(0xC471u);
    JUMPOUT(0x197E4768CLL);
  }
  v23 = v20;
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 720 * v20) + 41952);
  v26 = *(_QWORD *)(v25 + 1248) == *(_QWORD *)a2 || *(_QWORD *)(v25 + 880) == *(_QWORD *)a2;
  v27 = v24 + 720 * v23;
  v28 = *(_DWORD *)(v27 + 10);
  if ((v28 & 0x800000) == 0 || v26)
    v30 = 0;
  else
    v30 = 0x800000;
  *(_DWORD *)(v27 + 10) = v30 | v28 & 0xFF7FFFFF;
  v31 = (uint64_t *)(v27 + 144);
  v32 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v32 += 2;
  v33 = *v31;
  if (*v31)
    goto LABEL_25;
  v34 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)(v34 + 16) = 0;
  v34 += 16;
  *(_WORD *)(v34 + 8) = 0;
  *(_QWORD *)(v34 + 16) = 0;
  *(_WORD *)(v34 + 24) = 0;
  *(_QWORD *)(v34 + 32) = 0;
  *(_WORD *)(v34 + 40) = 0;
  *(_QWORD *)(v34 + 48) = 0;
  *(_WORD *)(v34 + 56) = 0;
  *(_QWORD *)(v34 + 64) = 0;
  *(_WORD *)(v34 + 72) = 0;
  *(_QWORD *)(v34 + 80) = 0;
  *(_WORD *)(v34 + 88) = 0;
  *(_QWORD *)(v34 + 96) = 0;
  *(_WORD *)(v34 + 104) = 0;
  *(_QWORD *)(v34 + 112) = 0;
  *(_WORD *)(v34 + 120) = 0;
  *v31 = v34;
  *(_DWORD *)(v34 - 4) = 8;
  *(_DWORD *)(*v31 - 8) = 7;
  *(_DWORD *)(*v31 - 16) = 0;
  *(_DWORD *)(*v31 - 12) = 0;
  v33 = *v31;
  if (*v31)
LABEL_25:
    v35 = *(_DWORD *)(v33 - 8);
  else
    v35 = 0;
  v36 = *((_DWORD *)v32 + 4);
  if ((v36 & 0x20) != 0)
    v36 = *((_DWORD *)v32 + 8);
  v37 = v35 & (v36 >> 8);
  v38 = v33 + 16 * v37;
  v39 = *(WTF::StringImpl **)v38;
  if (!*(_QWORD *)v38)
    goto LABEL_29;
  v57 = 0;
  v58 = 1;
  do
  {
    if (v39 == v32)
    {
      v46 = 1;
      goto LABEL_37;
    }
    if (v39 == (WTF::StringImpl *)-1)
      v57 = v38;
    v37 = (v37 + v58) & v35;
    v38 = v33 + 16 * v37;
    v39 = *(WTF::StringImpl **)v38;
    ++v58;
  }
  while (*(_QWORD *)v38);
  if (v57)
  {
    *(_QWORD *)v57 = 0;
    *(_WORD *)(v57 + 8) = 0;
    --*(_DWORD *)(*v31 - 16);
    v38 = v57;
  }
  if (v32)
LABEL_29:
    *(_DWORD *)v32 += 2;
  *(_QWORD *)v38 = v32;
  *(_WORD *)(v38 + 8) = 0;
  v40 = *v31;
  if (*v31)
    v41 = *(_DWORD *)(v40 - 12) + 1;
  else
    v41 = 1;
  *(_DWORD *)(v40 - 12) = v41;
  v42 = *v31;
  if (*v31)
    v43 = *(_DWORD *)(v42 - 12);
  else
    v43 = 0;
  v44 = (*(_DWORD *)(v42 - 16) + v43);
  v45 = *(unsigned int *)(v42 - 4);
  if (v45 > 0x400)
  {
    if (v45 > 2 * v44)
      goto LABEL_36;
LABEL_71:
    v38 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(v31, (WTF::StringImpl **)v38);
    goto LABEL_36;
  }
  if (3 * v45 <= 4 * v44)
    goto LABEL_71;
LABEL_36:
  v46 = 0;
LABEL_37:
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  if (v12 == 2)
    v47 = 2;
  else
    v47 = 8;
  v48 = *(_WORD *)(v38 + 8) | v47;
  *(_WORD *)(v38 + 8) = v48;
  if (v11)
  {
    if (v11 != 1)
      goto LABEL_45;
    v77 = 96;
  }
  else
  {
    v77 = 32;
  }
  *(_WORD *)(v38 + 8) = v77 | v48;
LABEL_45:
  if ((v46 & 1) == 0)
  {
    v49 = *(WTF::StringImpl **)a2;
    v50 = v24 + 720 * v23;
    v51 = *(_DWORD *)(v50 + 620);
    v52 = (WTF::StringImpl **)(v50 + 624);
    if (v51 == 8)
    {
      v53 = *(unsigned int *)(v24 + 720 * v23 + 616);
      if (!(_DWORD)v53)
      {
LABEL_48:
        v54 = 0;
        goto LABEL_49;
      }
      if (*v52 != v49)
      {
        v55 = 0;
        while (v53 - 1 != v55)
        {
          v56 = *(WTF::StringImpl **)(v24 + 720 * v23 + 632 + 8 * v55++);
          if (v56 == v49)
          {
            if (v55 >= v53)
              goto LABEL_48;
            goto LABEL_57;
          }
        }
        goto LABEL_48;
      }
    }
    else
    {
      v67 = *v52;
      v68 = ((unint64_t)v49 + ~((_QWORD)v49 << 32)) ^ (((unint64_t)v49 + ~((_QWORD)v49 << 32)) >> 22);
      v69 = 9 * ((v68 + ~(v68 << 13)) ^ ((v68 + ~(v68 << 13)) >> 8));
      v70 = (v69 ^ (v69 >> 15)) + ~((v69 ^ (v69 >> 15)) << 27);
      v71 = v51 - 1;
      v72 = v71 & ((v70 >> 31) ^ v70);
      v73 = (WTF::StringImpl *)*((_QWORD *)v67 + v72);
      if (v73 != (WTF::StringImpl *)-1 && v73 != v49)
      {
        v75 = 1;
        do
        {
          v72 = (v72 + v75) & v71;
          v73 = (WTF::StringImpl *)*((_QWORD *)v67 + v72);
          ++v75;
        }
        while (v73 != (WTF::StringImpl *)-1 && v73 != v49);
      }
      if (v73 != v49)
        goto LABEL_48;
    }
  }
LABEL_57:
  v54 = 2;
LABEL_49:
  if (v26)
    return v54 | 1;
  else
    return v54;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredParameter(uint64_t *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t hasDeclaredParameter;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v8 = *((_DWORD *)a1 + 3);
  if (!v8)
    goto LABEL_17;
  v10 = v8 - 1;
  v11 = *a1;
  v12 = *(_DWORD *)(*a1 + 720 * (v8 - 1) + 10);
  if ((v12 & 0x40) != 0)
  {
    v13 = *((_DWORD *)a1 + 3);
  }
  else
  {
    v13 = *((_DWORD *)a1 + 3);
    do
    {
      if (v8 <= v13 - 2)
        goto LABEL_17;
      v12 = *(_DWORD *)(v11 + 720 * (v13 - 2) + 10);
      --v13;
    }
    while ((v12 & 0x40) == 0);
    v10 = v13 - 1;
  }
  if ((v12 & 0x4400) != 0)
    v10 = v13 - 2;
  if (v8 <= v10)
  {
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x197E47778);
  }
  v14 = v11 + 720 * v10;
  if (!a2)
    return JSC::Scope::hasDeclaredParameter(v14, 0, a3, a4, a5, a6, a7, a8);
  *(_DWORD *)a2 += 2;
  hasDeclaredParameter = JSC::Scope::hasDeclaredParameter(v14, a2, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)a2 == 2)
  {
    WTF::StringImpl::~StringImpl(a2, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
  }
  else
  {
    *(_DWORD *)a2 -= 2;
  }
  return hasDeclaredParameter;
}

uint64_t *JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredVariable(uint64_t *result, WTF::StringImpl *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;

  v8 = *((_DWORD *)result + 3);
  if (!v8)
  {
LABEL_33:
    __break(0xC471u);
    return result;
  }
  v10 = v8 - 1;
  v11 = *result;
  if ((*(_BYTE *)(*result + 720 * (v8 - 1) + 10) & 0x40) == 0)
  {
    v40 = v8 - 2;
    while (v8 > v40)
    {
      v10 = v40;
      v41 = v11 + 720 * v40--;
      if ((*(_BYTE *)(v41 + 10) & 0x40) != 0)
        goto LABEL_3;
    }
    goto LABEL_33;
  }
LABEL_3:
  if (this)
    *(_DWORD *)this += 4;
  v12 = v11 + 720 * v10;
  v15 = *(_QWORD *)(v12 + 120);
  v14 = (uint64_t *)(v12 + 120);
  v13 = v15;
  if (v15)
  {
    v16 = *(_DWORD *)(v13 - 8);
    v17 = *((_DWORD *)this + 4);
    if ((v17 & 0x20) != 0)
      v17 = *((_DWORD *)this + 8);
    v18 = v16 & (v17 >> 8);
    v19 = *(WTF::StringImpl **)(v13 + 16 * v18);
    if (v19 == this)
    {
LABEL_12:
      v21 = v13 + 16 * v18;
    }
    else
    {
      v20 = 1;
      while (v19)
      {
        v18 = ((_DWORD)v18 + v20) & v16;
        v19 = *(WTF::StringImpl **)(v13 + 16 * v18);
        ++v20;
        if (v19 == this)
          goto LABEL_12;
      }
      v21 = v13 + 16 * *(unsigned int *)(v13 - 4);
    }
  }
  else
  {
    v21 = 0;
  }
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      WTF::StringImpl::~StringImpl(this, this, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)this -= 2;
    }
  }
  v22 = *v14;
  if (*v14)
    v22 += 16 * *(unsigned int *)(v22 - 4);
  if (v21 == v22)
    v23 = 0;
  else
    v23 = (*(unsigned __int16 *)(v21 + 8) >> 2) & 1;
  if (this)
  {
    if (*(_DWORD *)this == 2)
    {
      WTF::StringImpl::~StringImpl(this, this, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)this -= 2;
    }
  }
  return (uint64_t *)v23;
}

uint64_t JSC::Scope::declareLexicalVariable(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  int v15;
  uint64_t *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  __int16 v32;
  WTF::StringImpl *v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  unsigned int v55;
  WTF::StringImpl *v56;
  int v58;

  v8 = a3;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 41952);
  v12 = *(_QWORD *)(v11 + 1248) == *(_QWORD *)a2 || *(_QWORD *)(v11 + 880) == *(_QWORD *)a2;
  v13 = *(_DWORD *)(a1 + 10);
  if ((v13 & 0x800000) == 0 || v12)
    v15 = 0;
  else
    v15 = 0x800000;
  *(_DWORD *)(a1 + 10) = v15 | v13 & 0xFF7FFFFF;
  v16 = (uint64_t *)(a1 + 144);
  v17 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v17 += 2;
  v18 = *v16;
  if (*v16)
    goto LABEL_13;
  v19 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)(v19 + 16) = 0;
  v19 += 16;
  *(_WORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  *(_WORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 0;
  *(_WORD *)(v19 + 40) = 0;
  *(_QWORD *)(v19 + 48) = 0;
  *(_WORD *)(v19 + 56) = 0;
  *(_QWORD *)(v19 + 64) = 0;
  *(_WORD *)(v19 + 72) = 0;
  *(_QWORD *)(v19 + 80) = 0;
  *(_WORD *)(v19 + 88) = 0;
  *(_QWORD *)(v19 + 96) = 0;
  *(_WORD *)(v19 + 104) = 0;
  *(_QWORD *)(v19 + 112) = 0;
  *(_WORD *)(v19 + 120) = 0;
  *v16 = v19;
  *(_DWORD *)(v19 - 4) = 8;
  *(_DWORD *)(*v16 - 8) = 7;
  *(_DWORD *)(*v16 - 16) = 0;
  *(_DWORD *)(*v16 - 12) = 0;
  v18 = *v16;
  if (*v16)
LABEL_13:
    v20 = *(_DWORD *)(v18 - 8);
  else
    v20 = 0;
  v21 = *((_DWORD *)v17 + 4);
  if ((v21 & 0x20) != 0)
    v21 = *((_DWORD *)v17 + 8);
  v22 = v20 & (v21 >> 8);
  v23 = v18 + 16 * v22;
  v24 = *(WTF::StringImpl **)v23;
  if (!*(_QWORD *)v23)
    goto LABEL_17;
  v40 = 0;
  v41 = 1;
  do
  {
    if (v24 == v17)
    {
      v31 = 1;
      goto LABEL_25;
    }
    if (v24 == (WTF::StringImpl *)-1)
      v40 = v23;
    v22 = (v22 + v41) & v20;
    v23 = v18 + 16 * v22;
    v24 = *(WTF::StringImpl **)v23;
    ++v41;
  }
  while (*(_QWORD *)v23);
  if (v40)
  {
    *(_QWORD *)v40 = 0;
    *(_WORD *)(v40 + 8) = 0;
    --*(_DWORD *)(*v16 - 16);
    v23 = v40;
  }
  if (v17)
LABEL_17:
    *(_DWORD *)v17 += 2;
  *(_QWORD *)v23 = v17;
  *(_WORD *)(v23 + 8) = 0;
  v25 = *v16;
  if (*v16)
    v26 = *(_DWORD *)(v25 - 12) + 1;
  else
    v26 = 1;
  *(_DWORD *)(v25 - 12) = v26;
  v27 = *v16;
  if (*v16)
    v28 = *(_DWORD *)(v27 - 12);
  else
    v28 = 0;
  v29 = (*(_DWORD *)(v27 - 16) + v28);
  v30 = *(unsigned int *)(v27 - 4);
  if (v30 > 0x400)
  {
    if (v30 > 2 * v29)
      goto LABEL_24;
LABEL_57:
    v23 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand((uint64_t *)(a1 + 144), (WTF::StringImpl **)v23);
    goto LABEL_24;
  }
  if (3 * v30 <= 4 * v29)
    goto LABEL_57;
LABEL_24:
  v31 = 0;
LABEL_25:
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  if (v8)
    v32 = 2;
  else
    v32 = 8;
  *(_WORD *)(v23 + 8) |= v32;
  if ((v31 & 1) == 0)
  {
    v33 = *(WTF::StringImpl **)a2;
    v34 = *(_DWORD *)(a1 + 620);
    if (v34 == 8)
    {
      v35 = *(unsigned int *)(a1 + 616);
      if (!(_DWORD)v35)
      {
LABEL_34:
        v36 = 0;
        goto LABEL_35;
      }
      if (*(WTF::StringImpl **)(a1 + 624) != v33)
      {
        v38 = 0;
        while (v35 - 1 != v38)
        {
          v39 = *(WTF::StringImpl **)(a1 + 632 + 8 * v38++);
          if (v39 == v33)
          {
            if (v38 >= v35)
              goto LABEL_34;
            goto LABEL_43;
          }
        }
        goto LABEL_34;
      }
    }
    else
    {
      v50 = *(_QWORD *)(a1 + 624);
      v51 = ((unint64_t)v33 + ~((_QWORD)v33 << 32)) ^ (((unint64_t)v33 + ~((_QWORD)v33 << 32)) >> 22);
      v52 = 9 * ((v51 + ~(v51 << 13)) ^ ((v51 + ~(v51 << 13)) >> 8));
      v53 = (v52 ^ (v52 >> 15)) + ~((v52 ^ (v52 >> 15)) << 27);
      v54 = v34 - 1;
      v55 = v54 & ((v53 >> 31) ^ v53);
      v56 = *(WTF::StringImpl **)(v50 + 8 * v55);
      if (v56 != (WTF::StringImpl *)-1 && v56 != v33)
      {
        v58 = 1;
        do
        {
          v55 = (v55 + v58) & v54;
          v56 = *(WTF::StringImpl **)(v50 + 8 * v55);
          ++v58;
        }
        while (v56 != (WTF::StringImpl *)-1 && v56 != v33);
      }
      if (v56 != v33)
        goto LABEL_34;
    }
  }
LABEL_43:
  v36 = 2;
LABEL_35:
  if (v12)
    return v36 | 1;
  else
    return v36;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::declareFunction(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  BOOL hasLexicallyDeclaredVariable;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  WTF::StringImpl **v39;

  v10 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 1864) == 1)
  {
    if (!v10)
      goto LABEL_38;
    v11 = v10 - 1;
    v12 = *a2;
    v13 = *(_DWORD *)(*a2 + 720 * v11 + 10);
    if ((v13 & 0x20000) == 0)
    {
      if ((v13 & 0x40) != 0)
      {
LABEL_5:
        if (v10 <= v11)
        {
          __break(0xC471u);
          JUMPOUT(0x197E47E10);
        }
        result = JSC::Scope::declareFunctionAsVar(v12 + 720 * v11, a3);
        goto LABEL_7;
      }
      v27 = v10 - 2;
      while (v10 > v27)
      {
        v11 = v27;
        v28 = v12 + 720 * v27--;
        if ((*(_BYTE *)(v28 + 10) & 0x40) != 0)
          goto LABEL_5;
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x197E47E08);
    }
  }
  else
  {
    if (!v10)
      goto LABEL_36;
    v12 = *a2;
    v11 = v10 - 1;
  }
  v15 = *(_DWORD *)(v12 + 720 * v11 + 10);
  if ((v15 & 0x80) == 0)
  {
    v37 = v11 - 1;
    while (v10 > v37)
    {
      v11 = v37;
      v15 = *(_DWORD *)(v12 + 720 * v37-- + 10);
      if ((v15 & 0x80) != 0)
        goto LABEL_11;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x197E47E28);
  }
LABEL_11:
  if (v10 <= v11)
  {
    __break(0xC471u);
    JUMPOUT(0x197E47E18);
  }
  if ((v15 & 0x80000) == 0)
    goto LABEL_13;
  v38 = v11;
  v39 = a3;
  if (v10 <= (int)v11 - 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197E47E30);
  }
  v16 = v12 + 720 * (v11 - 1);
  v17 = *a3;
  if (*a3)
  {
    *(_DWORD *)v17 += 2;
    hasLexicallyDeclaredVariable = JSC::Scope::hasLexicallyDeclaredVariable(v16, v17, (uint64_t)a3, a4, a5, a6, a7, a8);
    v26 = hasLexicallyDeclaredVariable;
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      if (v26)
        goto LABEL_19;
    }
    else
    {
      *(_DWORD *)v17 -= 2;
      if (hasLexicallyDeclaredVariable)
      {
LABEL_19:
        result = 2;
        v11 = v38;
        goto LABEL_7;
      }
    }
  }
  else if (JSC::Scope::hasLexicallyDeclaredVariable(v16, 0, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_19;
  }
  v10 = *((_DWORD *)a2 + 3);
  v11 = v38;
  a3 = v39;
LABEL_13:
  if (v10 <= v11)
  {
    __break(0xC471u);
    JUMPOUT(0x197E47E20);
  }
  result = JSC::Scope::declareFunctionAsLet(*a2 + 720 * v11, a3, *((_BYTE *)a2 + 7474) == 0);
LABEL_7:
  *(_BYTE *)a1 = result;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = v11;
  return result;
}

uint64_t JSC::Scope::declareFunctionAsVar(uint64_t a1, WTF::StringImpl **a2)
{
  uint64_t v4;
  _BOOL8 v5;
  int v6;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  int v28;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  uint64_t v63[3];
  __int16 v64;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 41952);
  v5 = *(WTF::StringImpl **)(v4 + 1248) == *a2 || *(WTF::StringImpl **)(v4 + 880) == *a2;
  v6 = *(_DWORD *)(a1 + 10);
  if ((v6 & 0x800000) == 0 || v5)
    v8 = 0;
  else
    v8 = 0x800000;
  *(_DWORD *)(a1 + 10) = v8 | v6 & 0xFF7FFFFF;
  v9 = a1 + 120;
  v10 = *a2;
  if (*a2)
    *(_DWORD *)v10 += 2;
  v62 = v10;
  v64 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry>(v9, &v62, &v64, (uint64_t)v63);
  v18 = v62;
  v62 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  *(_WORD *)(v63[0] + 8) |= 0x84u;
  v19 = *a2;
  if (*a2)
  {
    v20 = *(_DWORD *)v19;
    *(_DWORD *)v19 += 2;
    v21 = *(_QWORD *)(a1 + 144);
    if (!v21)
    {
      if (v20)
      {
        *(_DWORD *)v19 = v20;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
      }
      return v5;
    }
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 144);
    if (!v21)
      return v5;
  }
  v22 = *(_DWORD *)(v21 - 8);
  v23 = *((_DWORD *)v19 + 4);
  if ((v23 & 0x20) != 0)
    v23 = *((_DWORD *)v19 + 8);
  v24 = v22 & (v23 >> 8);
  v25 = *(WTF::StringImpl **)(v21 + 16 * v24);
  if (v25 == v19)
  {
    v28 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    else
    {
LABEL_33:
      *(_DWORD *)v19 = v28;
    }
  }
  else
  {
    v26 = 1;
    do
    {
      v27 = v25;
      if (!v25)
      {
        if (!v19)
          return v5;
        if (*(_DWORD *)v19 != 2)
        {
          *(_DWORD *)v19 -= 2;
          return v5;
        }
        goto LABEL_37;
      }
      v24 = (v24 + v26) & v22;
      v25 = *(WTF::StringImpl **)(v21 + 16 * v24);
      ++v26;
    }
    while (v25 != v19);
    if (!v19)
      return v5 | 2;
    v28 = *(_DWORD *)v19 - 2;
    if (*(_DWORD *)v19 != 2)
      goto LABEL_33;
LABEL_37:
    WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
    WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    if (!v27)
      return v5;
  }
  return v5 | 2;
}

uint64_t JSC::Scope::declareFunctionAsLet(uint64_t a1, WTF::StringImpl **a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  int v27;
  int v28;
  unint64_t v29;
  BOOL v30;
  __int16 v31;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unsigned int v64;
  WTF::StringImpl *v65;
  int v67;
  WTF::StringImpl *v69;
  uint64_t v70;
  char v71;
  __int16 v72;

  v6 = *(_QWORD *)(*(_QWORD *)a1 + 41952);
  v7 = *(WTF::StringImpl **)(v6 + 1248) == *a2 || *(WTF::StringImpl **)(v6 + 880) == *a2;
  v8 = *(_DWORD *)(a1 + 10);
  if ((v8 & 0x800000) != 0)
    v9 = v7;
  else
    v9 = 1;
  if (v9)
    v10 = 0;
  else
    v10 = 0x800000;
  *(_DWORD *)(a1 + 10) = v10 | v8 & 0xFF7FFFFF;
  v11 = a1 + 144;
  v12 = *a2;
  if (*a2)
    *(_DWORD *)v12 += 2;
  v69 = v12;
  v72 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry>(v11, &v69, &v72, (uint64_t)&v70);
  v20 = v69;
  v69 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  if (!v71 && ((*(_BYTE *)(a1 + 9) & 1) != 0 || (*(_WORD *)(v70 + 8) & 0x4000) == 0 || (a3 & 1) == 0))
    v7 = v7 | 2;
  v21 = *a2;
  if (*a2)
    *(_DWORD *)v21 += 2;
  v22 = *(_QWORD *)(a1 + 120);
  if (v22)
  {
    v23 = *(_DWORD *)(v22 - 8);
    v24 = *((_DWORD *)v21 + 4);
    if ((v24 & 0x20) != 0)
      v24 = *((_DWORD *)v21 + 8);
    v25 = v23 & (v24 >> 8);
    v26 = *(WTF::StringImpl **)(v22 + 16 * v25);
    if (v26 == v21)
    {
LABEL_26:
      if (*(_DWORD *)v21 == 2)
      {
        WTF::StringImpl::~StringImpl(v21, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
LABEL_28:
      v7 = v7 | 2;
      goto LABEL_36;
    }
    v27 = 1;
    while (v26)
    {
      v25 = (v25 + v27) & v23;
      v26 = *(WTF::StringImpl **)(v22 + 16 * v25);
      ++v27;
      if (v26 == v21)
      {
        if (!v21)
          goto LABEL_28;
        goto LABEL_26;
      }
    }
  }
  v28 = *(_DWORD *)(a1 + 620);
  if (v28 == 8)
  {
    v29 = *(unsigned int *)(a1 + 616);
    if ((_DWORD)v29)
    {
      if (*(WTF::StringImpl **)(a1 + 624) == v21)
      {
        v30 = 1;
      }
      else
      {
        v33 = 0;
        while (v29 - 1 != v33)
        {
          v34 = *(WTF::StringImpl **)(a1 + 632 + 8 * v33++);
          if (v34 == v21)
            goto LABEL_46;
        }
        v33 = *(unsigned int *)(a1 + 616);
LABEL_46:
        v30 = v33 < v29;
      }
    }
    else
    {
      v30 = 0;
    }
  }
  else
  {
    v59 = *(_QWORD *)(a1 + 624);
    v60 = ((unint64_t)v21 + ~((_QWORD)v21 << 32)) ^ (((unint64_t)v21 + ~((_QWORD)v21 << 32)) >> 22);
    v61 = 9 * ((v60 + ~(v60 << 13)) ^ ((v60 + ~(v60 << 13)) >> 8));
    v62 = (v61 ^ (v61 >> 15)) + ~((v61 ^ (v61 >> 15)) << 27);
    v63 = v28 - 1;
    v64 = v63 & ((v62 >> 31) ^ v62);
    v65 = *(WTF::StringImpl **)(v59 + 8 * v64);
    if (v65 != (WTF::StringImpl *)-1 && v65 != v21)
    {
      v67 = 1;
      do
      {
        v64 = (v64 + v67) & v63;
        v65 = *(WTF::StringImpl **)(v59 + 8 * v64);
        ++v67;
      }
      while (v65 != (WTF::StringImpl *)-1 && v65 != v21);
    }
    v30 = v65 == v21;
  }
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  if (v30)
    goto LABEL_28;
LABEL_36:
  if (a3)
    v31 = 16520;
  else
    v31 = 136;
  *(_WORD *)(v70 + 8) |= v31;
  return v7;
}

BOOL JSC::Parser<JSC::Lexer<unsigned char>>::exportName(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  WTF::StringImpl *v17;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  _BYTE v28[24];

  v8 = (uint64_t *)(a1 + 8);
  if (a2)
    *(_DWORD *)a2 += 2;
  v27 = a2;
  WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add(v8, (WTF::AtomStringImpl *)&v27, a3, a4, a5, a6, a7, a8, (uint64_t)v28);
  v16 = v28[16];
  v17 = v27;
  v27 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  return v16 != 0;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::parseInner(uint64_t a1@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, JSC::ExpressionNode *a4@<X3>, unsigned int **a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  int v11;
  _BYTE *v13;
  int v14;
  unsigned int v15;
  int v18;
  uint64_t v19;
  int *v20;
  int v21;
  int v22;
  _BOOL4 v23;
  uint64_t FormalParameterList;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  WTF::StringImpl *v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  _BYTE *v73;
  unsigned int v74;
  int v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF *v96;
  WTF::StringImpl *v97;
  int v98;
  WTF *v99;
  WTF *v101;
  WTF *v102;
  WTF *v103;
  uint64_t v104;
  WTF::StringImpl **v105;
  WTF::StringImpl *v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unsigned __int8 *v128;
  int v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  uint64_t v140;
  WTF::StringImpl ****v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::AtomStringImpl *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  WTF::StringImpl **v157;
  WTF::StringImpl **v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int *v178;
  uint64_t v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  int *v183;
  int v184;
  char v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  unsigned int *v189;
  unsigned int *v190;
  unint64_t v191;
  unint64_t v192;
  unsigned int v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  WTF::StringImpl *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206;
  WTF::StringImpl *v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  unint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  int v245;
  uint64_t v246;
  unsigned int v247;
  unsigned int v248;
  uint64_t v249;
  char v251;
  uint64_t v252;
  WTF::StringImpl *v253;
  int v254;
  int v255;
  unint64_t v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  WTF::StringImpl *v274;
  int v275;
  char v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v280;
  uint64_t v282;
  WTF::StringImpl *v283;
  uint64_t v284;
  WTF::StringImpl **v285;
  int v286;
  WTF::AtomStringImpl *v287;
  WTF::StringImpl *v288[2];
  WTF *v289[5];
  uint64_t v290;
  char v291;
  uint64_t v292;
  uint64_t v293;
  JSC::ParserArena *v294;
  JSC::ASTBuilder *v295;
  uint64_t v296;
  uint64_t v297;
  WTF *v298;
  uint64_t v299;
  _BYTE v300[480];
  WTF *v301;
  uint64_t v302;
  _BYTE v303[400];
  WTF *v304;
  uint64_t v305;
  _BYTE v306[80];
  WTF *v307;
  uint64_t v308;
  _DWORD v309[42];
  WTF::StringImpl *v310;
  __int16 v311[7];
  __int16 v312[5];

  v10 = *(_QWORD *)(a1 + 7224);
  v294 = *(JSC::ParserArena **)(a1 + 7216);
  v295 = (JSC::ASTBuilder *)(a1 + 7232);
  v296 = v10;
  v297 = 0;
  v298 = (WTF *)v300;
  v299 = 10;
  v301 = (WTF *)v303;
  v302 = 10;
  v304 = (WTF *)v306;
  v305 = 10;
  v307 = (WTF *)v309;
  v308 = 10;
  v309[40] = 0;
  v11 = *(_DWORD *)(a1 + 12);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x197E491B8);
  }
  v13 = (_BYTE *)(a1 + 7474);
  v14 = *(unsigned __int8 *)(a1 + 7474);
  v15 = v11 - 1;
  *(_DWORD *)(*(_QWORD *)a1 + 720 * (v11 - 1) + 10) |= 0x8080u;
  if (*(_DWORD *)(a1 + 12) <= (v11 - 1))
  {
    __break(0xC471u);
    JUMPOUT(0x197E491C0);
  }
  v18 = a3;
  if (a6)
  {
    v19 = *(_QWORD *)a1 + 720 * v15;
    v22 = *(_DWORD *)(v19 + 10);
    v20 = (int *)(v19 + 10);
    v21 = v22;
    if ((v22 & 0x2000000) != 0 && *a6 && *(_DWORD *)(*a6 - 12))
    {
      *v20 = v21 | 0x8000000;
      if (*(_DWORD *)(a1 + 12) <= v15)
      {
        __break(0xC471u);
        goto LABEL_284;
      }
      v140 = *(_QWORD *)a1 + 720 * v15;
      v142 = *(_QWORD *)(v140 + 160);
      v141 = (WTF::StringImpl ****)(v140 + 160);
      if (!v142)
      {
        v143 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)8);
        *(_QWORD *)v143 = 0;
        v288[0] = v143;
        std::unique_ptr<JSC::VariableEnvironment::RareData>::operator=[abi:sn180100](v141, (WTF::AtomStringImpl *)v288, v144, v145, v146, v147, v148, v149);
        std::unique_ptr<JSC::VariableEnvironment::RareData>::~unique_ptr[abi:sn180100]((WTF::StringImpl ****)v288, v150, v151, v152, v153, v154, v155, v156);
      }
      v284 = *a6;
      v157 = (WTF::StringImpl **)WTF::HashMap<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::HashTableTraits>::begin((_QWORD *)*a6);
      v158 = v157;
      v287 = a2;
      if (v284)
        v285 = (WTF::StringImpl **)(v284 + 16 * *(unsigned int *)(v284 - 4));
      else
        v285 = 0;
      if (v285 != v157)
      {
        do
        {
          v159 = *v158;
          if (*v158)
            *(_DWORD *)v159 += 2;
          v310 = v159;
          v311[0] = *((_WORD *)v158 + 4);
          WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::add<JSC::PrivateNameEntry&>((uint64_t *)*v141, &v310, v311, (uint64_t)v288);
          v160 = v310;
          v310 = 0;
          if (v160)
          {
            if (*(_DWORD *)v160 == 2)
            {
              WTF::StringImpl::~StringImpl(v160, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
              WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
            }
            else
            {
              *(_DWORD *)v160 -= 2;
            }
          }
          while (1)
          {
            v158 += 2;
            if (v158 == (WTF::StringImpl **)v287)
              break;
            if ((unint64_t)*v158 + 1 > 1)
              goto LABEL_150;
          }
          v158 = (WTF::StringImpl **)v287;
LABEL_150:
          ;
        }
        while (v158 != v285);
      }
    }
  }
  v286 = *(_DWORD *)(a1 + 7316);
  *(_DWORD *)(a1 + 7316) = 1;
  v23 = v14 == 8 && *(_DWORD *)(a1 + 7368) != 0;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148))
  {
    *(_OWORD *)v288 = 0u;
    memset(v289, 0, 28);
    if (((1 << v14) & 0x8182) != 0)
    {
      FormalParameterList = JSC::Parser<JSC::Lexer<unsigned char>>::createGeneratorParameters<JSC::ASTBuilder>(a1, (uint64_t)&v294, v289, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    }
    else if (v14 == 19)
    {
      FormalParameterList = JSC::ASTBuilder::createFormalParameterList(v295);
    }
    else
    {
      FormalParameterList = JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionParameters<JSC::ASTBuilder,JSC::ParserFunctionInfo<JSC::ASTBuilder>>(a1, &v294, (JSC::DestructuringPatternNode *)v288, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    }
    v283 = (WTF::StringImpl *)FormalParameterList;
    if (((1 << v14) & 0x840) != 0 && !*(_QWORD *)(a1 + 7360))
    {
      if (*(_DWORD *)(a1 + 7368) != 38)
      {
        std::experimental::fundamentals_v3::expected<JSC::Parser<JSC::Lexer<unsigned char>>::ParseInnerResult,WTF::String>::expected<WTF::ASCIILiteral>(a9, (uint64_t)"Parser error", 13);
LABEL_222:
        v98 = v286;
        goto LABEL_68;
      }
      v131 = *(_DWORD *)(a1 + 7400);
      v132 = *(_DWORD *)(a1 + 7412);
      v133 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v131;
      *(_DWORD *)(a1 + 7448) = v132;
      *(_DWORD *)(a1 + 7452) = v133;
      v134 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v134 + 4) = v131;
      v135 = *(_DWORD *)(a1 + 12);
      if (!v135)
      {
        __break(0xC471u);
        JUMPOUT(0x197E4925CLL);
      }
      v136 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v135 - 1) + 9) & 1;
      *(_BYTE *)(v134 + 56) = 0;
      v137 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v134, a1 + 7368, 0, v136, (uint64_t)a5, (uint64_t)a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v137;
      v23 = v137 != 0;
    }
  }
  else
  {
    v283 = 0;
  }
  if (*(_DWORD *)(a1 + 7476) == 1)
  {
    v25 = *(WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
    {
      if (*(_DWORD *)(a1 + 12) <= v15)
      {
        __break(0xC471u);
        JUMPOUT(0x197E49264);
      }
      v138 = *(_QWORD *)a1 + 720 * v15 + 120;
      *(_DWORD *)v25 += 2;
      v310 = v25;
      v312[0] = 0;
      WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry>(v138, &v310, v312, (uint64_t)v288);
      v139 = v310;
      v310 = 0;
      if (v139)
      {
        if (*(_DWORD *)v139 == 2)
        {
          WTF::StringImpl::~StringImpl(v139, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
          WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
        }
        else
        {
          *(_DWORD *)v139 -= 2;
        }
      }
      *((_WORD *)v288[0] + 4) &= ~4u;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148))
    --*(_DWORD *)(a1 + 7456);
  if (*(_QWORD *)(a1 + 7360))
  {
    v26 = 0;
  }
  else
  {
    v273 = 1 << v14;
    if (((1 << v14) & 0xE00) != 0)
    {
      v274 = (WTF::StringImpl *)JSC::Parser<JSC::Lexer<unsigned char>>::parseAsyncFunctionSourceElements<JSC::ASTBuilder>(a1, (uint64_t)&v294, v23, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    }
    else if (v23)
    {
      v274 = (WTF::StringImpl *)JSC::Parser<JSC::Lexer<unsigned char>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::ASTBuilder>(a1, (uint64_t)&v294);
    }
    else if ((v273 & 0x6000) != 0)
    {
      v274 = (WTF::StringImpl *)JSC::Parser<JSC::Lexer<unsigned char>>::parseModuleSourceElements<JSC::ASTBuilder>(a1, &v294, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    }
    else if ((v273 & 0x40004) != 0)
    {
      v274 = (WTF::StringImpl *)JSC::Parser<JSC::Lexer<unsigned char>>::parseGeneratorFunctionSourceElements<JSC::ASTBuilder>(a1, (uint64_t)&v294, (WTF::AtomStringImpl **)a2, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    }
    else if ((v273 & 0x30000) != 0)
    {
      v274 = (WTF::StringImpl *)JSC::Parser<JSC::Lexer<unsigned char>>::parseAsyncGeneratorFunctionSourceElements<JSC::ASTBuilder>(a1, (uint64_t)&v294, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    }
    else if (v18 == 1)
    {
      v274 = (WTF::StringImpl *)JSC::Parser<JSC::Lexer<unsigned char>>::parseSingleFunction<JSC::ASTBuilder>(a1, (uint64_t)&v294, (uint64_t)a4, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    }
    else if (v14 == 19)
    {
      v274 = (WTF::StringImpl *)JSC::Parser<JSC::Lexer<unsigned char>>::parseClassFieldInitializerSourceElements<JSC::ASTBuilder>(a1, &v294, a5, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    }
    else
    {
      v274 = (WTF::StringImpl *)JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::ASTBuilder>(a1, (uint64_t)&v294, 0, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    }
    v26 = v274;
  }
  if (*(_DWORD *)(a1 + 7368) != 20)
    goto LABEL_90;
  v27 = *(_DWORD *)(a1 + 7400);
  v28 = *(_DWORD *)(a1 + 7412);
  v29 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v27;
  *(_DWORD *)(a1 + 7448) = v28;
  *(_DWORD *)(a1 + 7452) = v29;
  v30 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v30 + 4) = v27;
  v31 = *(_DWORD *)(a1 + 12);
  if (!v31)
  {
    __break(0xC471u);
    JUMPOUT(0x197E4921CLL);
  }
  v32 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v31 - 1) + 9) & 1;
  *(_BYTE *)(v30 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v30, a1 + 7368, 0, v32, (uint64_t)a5, (uint64_t)a6, a7, a8);
  if (!v26)
  {
LABEL_90:
    v115 = *(_QWORD *)(a1 + 7360);
    if (v115)
    {
      *(_DWORD *)v115 += 2;
    }
    else
    {
      v115 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v115 = 0xC00000002;
      *(_QWORD *)(v115 + 8) = "Parser error";
      *(_DWORD *)(v115 + 16) = 4;
    }
    v98 = v286;
    *(_QWORD *)a9 = v115;
    *(_DWORD *)(a9 + 88) = 1;
    goto LABEL_68;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148) && v13[64])
  {
    if (*(_DWORD *)(a1 + 12) <= v15)
    {
      __break(0xC471u);
      JUMPOUT(0x197E4929CLL);
    }
    v116 = *(_QWORD *)a1 + 720 * v15;
    v117 = *(_DWORD *)(v116 + 180);
    if (v117)
    {
      v118 = *(_QWORD *)(v116 + 168);
      v119 = v118 + 72 * v117;
      while (1)
      {
        v120 = *(unsigned int *)(v118 + 4);
        v121 = (_QWORD *)(v118 + 8);
        if ((_DWORD)v120 != 8)
          v121 = (_QWORD *)*v121;
        v122 = 0;
        while ((_DWORD)v120 != v122)
        {
          v123 = v122;
          v124 = v121[v122++];
          if (v124 != -1)
          {
            v125 = v123;
            goto LABEL_104;
          }
        }
        v125 = *(unsigned int *)(v118 + 4);
LABEL_104:
        if ((_DWORD)v120 != (_DWORD)v125)
          break;
LABEL_120:
        v118 += 72;
        if (v118 == v119)
          goto LABEL_22;
      }
      v126 = v125 | (v120 << 32);
      while (1)
      {
        v127 = v121[v126];
        if (*(_DWORD *)(v127 + 4))
        {
          v128 = *(unsigned __int8 **)(v127 + 8);
          v129 = (*(_BYTE *)(v127 + 16) & 4) != 0 ? *v128 : *(unsigned __int16 *)v128;
          if (v129 == 35)
          {
            v280 = v119;
            v282 = v118;
            v277 = v121;
            v278 = v120;
            if (!a6
              || (v251 = WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::contains<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>(*a6, v127), v121 = v277, v120 = v278, v119 = v280, v118 = v282, (v251 & 1) == 0))
            {
              if (*(_DWORD *)(a1 + 12) <= v15)
              {
                __break(0xC471u);
                JUMPOUT(0x197E492A4);
              }
              v252 = *(_QWORD *)a1 + 720 * v15;
              v275 = *(_DWORD *)v127;
              *(_DWORD *)v127 += 2;
              v276 = WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::contains(*(_QWORD *)(v252 + 144), v127);
              if (v275)
              {
                *(_DWORD *)v127 = v275;
              }
              else
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v127, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
                WTF::fastFree(v257, v258, v259, v260, v261, v262, v263, v264);
              }
              v119 = v280;
              v118 = v282;
              v121 = v277;
              v120 = v278;
              if ((v276 & 1) == 0)
                break;
            }
          }
        }
        if (HIDWORD(v126) <= (v125 + 1))
          v130 = (v125 + 1);
        else
          v130 = HIDWORD(v126);
        while ((_DWORD)v130 - 1 != (_DWORD)v125)
        {
          v125 = (v125 + 1);
          if (v121[v125] != -1)
          {
            LODWORD(v130) = v125;
            goto LABEL_116;
          }
        }
        v125 = v130;
LABEL_116:
        v126 = v125 | v126 & 0xFFFFFFFF00000000;
        LODWORD(v125) = v130;
        if ((_DWORD)v120 == (_DWORD)v130)
          goto LABEL_120;
      }
      WTF::makeString<WTF::ASCIILiteral,WTF::StringView,char>((int8x16_t *)"Cannot reference undeclared private names: \"", 45, *(_BYTE **)(v127 + 8), *(unsigned int *)(v127 + 4) | ((unint64_t)((*(_DWORD *)(v127 + 16) >> 2) & 1) << 32), 34, (int **)v288);
      v253 = v288[0];
      if (v288[0])
      {
        v254 = *(_DWORD *)v288[0];
        *(_DWORD *)v288[0] += 2;
        *(_QWORD *)a9 = v253;
        *(_DWORD *)(a9 + 88) = 1;
        if (v254)
        {
          *(_DWORD *)v253 = v254;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v253, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
          WTF::fastFree(v265, v266, v267, v268, v269, v270, v271, v272);
        }
        goto LABEL_222;
      }
    }
  }
LABEL_22:
  if (*(_DWORD *)(a1 + 12) <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x197E49224);
  }
  JSC::Scope::finalizeSloppyModeFunctionHoisting((JSC::Scope *)(*(_QWORD *)a1 + 720 * v15), a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  v310 = 0;
  if (*(_DWORD *)(a1 + 12) <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x197E4922CLL);
  }
  JSC::Scope::getCapturedVars(*(_QWORD *)a1 + 720 * v15, (uint64_t *)&v310, v33, v34, v35, v36, v37, v38);
  if (*(_DWORD *)(a1 + 12) <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x197E49234);
  }
  v46 = *(_QWORD *)a1;
  v47 = v310;
  if (v310)
  {
    v48 = *((unsigned int *)v310 - 1);
    v49 = (WTF::StringImpl *)((char *)v310 + 8 * v48);
    if (*((_DWORD *)v310 - 3))
    {
      v50 = v310;
      if ((_DWORD)v48)
      {
        v51 = 8 * v48;
        v50 = v310;
        while ((unint64_t)(*(_QWORD *)v50 + 1) <= 1)
        {
          v50 = (WTF::StringImpl *)((char *)v50 + 8);
          v51 -= 8;
          if (!v51)
          {
            v50 = v49;
            goto LABEL_32;
          }
        }
      }
      goto LABEL_32;
    }
    v50 = (WTF::StringImpl *)((char *)v310 + 8 * v48);
  }
  else
  {
    v50 = 0;
    v48 = 0;
  }
  v49 = (WTF::StringImpl *)((char *)v310 + 8 * v48);
LABEL_32:
  if (v310)
    v47 = (WTF::StringImpl *)((char *)v310 + 8 * *((unsigned int *)v310 - 1));
  if (v47 != v50)
  {
    v52 = (uint64_t *)(v46 + 720 * v15 + 120);
    while (1)
    {
      v53 = *v52;
      if (!*v52)
        break;
      v54 = *(_QWORD *)v50;
      v55 = *(_DWORD *)(*(_QWORD *)v50 + 16);
      if ((v55 & 0x20) != 0)
        v55 = *(_DWORD *)(v54 + 32);
      v56 = *(_DWORD *)(v53 - 8);
      v57 = v56 & (v55 >> 8);
      v58 = *(_QWORD *)(v53 + 16 * v57);
      if (v58 != v54)
      {
        v59 = 1;
        while (v58)
        {
          v57 = ((_DWORD)v57 + v59) & v56;
          v58 = *(_QWORD *)(v53 + 16 * v57);
          ++v59;
          if (v58 == v54)
            goto LABEL_45;
        }
        v57 = *(unsigned int *)(v53 - 4);
      }
LABEL_45:
      if (v57 == *(_DWORD *)(v53 - 4))
        break;
      *(_WORD *)(v53 + 16 * v57 + 8) |= 1u;
      v60 = (WTF::StringImpl *)((char *)v50 + 8);
      v50 = v49;
      if (v60 != v49)
      {
        v50 = v60;
        while ((unint64_t)(*(_QWORD *)v50 + 1) <= 1)
        {
          v50 = (WTF::StringImpl *)((char *)v50 + 8);
          if (v50 == v49)
          {
            v50 = v49;
            break;
          }
        }
      }
      if (v50 == v47)
        goto LABEL_52;
    }
    __break(0xC471u);
LABEL_284:
    JUMPOUT(0x197E488D0);
  }
LABEL_52:
  JSC::Scope::finalizeLexicalEnvironment((JSC::Scope *)(v46 + 720 * v15), v39, v40, v41, v42, v43, v44, v45);
  if (((1 << v14) & 0x70E04) == 0)
  {
    v68 = v297;
    v69 = *(_DWORD *)(a1 + 12);
    goto LABEL_54;
  }
  v69 = *(_DWORD *)(a1 + 12);
  if (v69 <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x197E49294);
  }
  v186 = *(_QWORD *)a1 + 720 * v15;
  v187 = *(_DWORD *)(v186 + 180);
  if (!v187)
  {
LABEL_178:
    v68 = v297;
    goto LABEL_54;
  }
  v188 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 880);
  v189 = *(unsigned int **)(v186 + 168);
  v190 = &v189[18 * v187];
  v191 = (~(v188 << 32) + v188) ^ ((unint64_t)(~(v188 << 32) + v188) >> 22);
  v192 = (v191 + ~(v191 << 13)) ^ ((v191 + ~(v191 << 13)) >> 8);
  while (1)
  {
    v193 = v189[1];
    if (v193 != 8)
      break;
    v194 = *v189;
    if ((_DWORD)v194)
    {
      if (*((_QWORD *)v189 + 1) == v188)
        goto LABEL_229;
      v195 = 0;
      while (v194 - 1 != v195)
      {
        v196 = *(_QWORD *)&v189[2 * v195++ + 4];
        if (v196 == v188)
        {
          if (v195 >= v194)
            break;
          goto LABEL_229;
        }
      }
    }
LABEL_170:
    v189 += 18;
    if (v189 == v190)
      goto LABEL_178;
  }
  v244 = ((9 * v192) ^ ((9 * v192) >> 15)) + ~(((9 * v192) ^ ((9 * v192) >> 15)) << 27);
  v245 = (v244 >> 31) ^ v244;
  v246 = *((_QWORD *)v189 + 1);
  v247 = v193 - 1;
  v248 = v247 & v245;
  v249 = *(_QWORD *)(v246 + 8 * v248);
  if (v249 != -1 && v249 != v188)
  {
    v255 = 1;
    do
    {
      v248 = (v248 + v255) & v247;
      v249 = *(_QWORD *)(v246 + 8 * v248);
      ++v255;
    }
    while (v249 != -1 && v249 != v188);
  }
  if (v249 != v188)
    goto LABEL_170;
LABEL_229:
  v68 = v297 | 2;
  LODWORD(v297) = v297 | 2;
LABEL_54:
  if (v69 <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x197E49244);
  }
  v70 = *(_QWORD *)a1;
  v71 = *(_QWORD *)a1 + 720 * v15;
  v74 = *(_DWORD *)(v71 + 10);
  v73 = (_BYTE *)(v71 + 10);
  v72 = v74;
  if ((v74 & 1) != 0)
    v68 = (unsigned __int16)v68 | 0x20;
  if (v13[63])
    v68 |= 0x800u;
  v75 = v68 | (v72 >> 22) & 0x10;
  if ((v72 & 4) != 0)
    v76 = v75 | 0x1000;
  else
    v76 = v75;
  if (v13[65])
  {
    v177 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 720 * v15) + 41952);
    v178 = *(int **)(v177 + 880);
    if (v178)
    {
      *v178 += 4;
      v179 = *(_QWORD *)(v70 + 720 * v15 + 144);
      if (!v179)
        goto LABEL_183;
    }
    else
    {
      v179 = *(_QWORD *)(v70 + 720 * v15 + 144);
      if (!v179)
        goto LABEL_188;
    }
    v180 = *(_DWORD *)(v179 - 8);
    v181 = v178[4];
    if ((v181 & 0x20) != 0)
      v181 = v178[8];
    v182 = v180 & (v181 >> 8);
    v183 = *(int **)(v179 + 16 * v182);
    if (v183 == v178)
    {
LABEL_163:
      v185 = 1;
      goto LABEL_184;
    }
    v184 = 1;
    while (v183)
    {
      v182 = (v182 + v184) & v180;
      v183 = *(int **)(v179 + 16 * v182);
      ++v184;
      if (v183 == v178)
      {
        if (!v178)
          goto LABEL_215;
        goto LABEL_163;
      }
    }
    if (!v178)
      goto LABEL_188;
LABEL_183:
    v185 = 0;
LABEL_184:
    v197 = *v178 - 2;
    if (*v178 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v178, v61, v62, v63, v64, v65, v66, v67);
      WTF::fastFree(v212, v213, v214, v215, v216, v217, v218, v219);
      v197 = *v178;
    }
    else
    {
      *v178 = v197;
    }
    v198 = v197 - 2;
    if (v198)
    {
      *v178 = v198;
      if ((v185 & 1) != 0)
        goto LABEL_215;
    }
    else
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v178, v61, v62, v63, v64, v65, v66, v67);
      WTF::fastFree(v220, v221, v222, v223, v224, v225, v226, v227);
      if ((v185 & 1) != 0)
        goto LABEL_215;
    }
LABEL_188:
    v199 = *(WTF::StringImpl **)(v177 + 880);
    if (v199)
      *(_DWORD *)v199 += 4;
    v200 = v70 + 720 * v15;
    v203 = *(_QWORD *)(v200 + 120);
    v202 = (uint64_t *)(v200 + 120);
    v201 = v203;
    if (v203)
    {
      v204 = *(_DWORD *)(v201 - 8);
      v205 = *((_DWORD *)v199 + 4);
      if ((v205 & 0x20) != 0)
        v205 = *((_DWORD *)v199 + 8);
      v206 = v204 & (v205 >> 8);
      v207 = *(WTF::StringImpl **)(v201 + 16 * v206);
      if (v207 == v199)
      {
LABEL_197:
        v209 = v201 + 16 * v206;
      }
      else
      {
        v208 = 1;
        while (v207)
        {
          v206 = ((_DWORD)v206 + v208) & v204;
          v207 = *(WTF::StringImpl **)(v201 + 16 * v206);
          ++v208;
          if (v207 == v199)
            goto LABEL_197;
        }
        v209 = v201 + 16 * *(unsigned int *)(v201 - 4);
      }
    }
    else
    {
      v209 = 0;
    }
    if (v199)
    {
      if (*(_DWORD *)v199 == 2)
      {
        WTF::StringImpl::~StringImpl(v199, v61, v62, v63, v64, v65, v66, v67);
        WTF::fastFree(v228, v229, v230, v231, v232, v233, v234, v235);
      }
      else
      {
        *(_DWORD *)v199 -= 2;
      }
    }
    v210 = *v202;
    if (*v202)
      v210 += 16 * *(unsigned int *)(v210 - 4);
    if (v209 == v210)
      LOBYTE(v211) = 0;
    else
      v211 = (*(unsigned __int16 *)(v209 + 8) >> 2) & 1;
    if (v199)
    {
      if (*(_DWORD *)v199 == 2)
      {
        WTF::StringImpl::~StringImpl(v199, v61, v62, v63, v64, v65, v66, v67);
        WTF::fastFree(v236, v237, v238, v239, v240, v241, v242, v243);
      }
      else
      {
        *(_DWORD *)v199 -= 2;
      }
    }
    if ((v211 & 1) == 0 && (*v73 & 1) == 0)
      goto LABEL_63;
LABEL_215:
    v76 |= 2u;
  }
LABEL_63:
  v288[0] = v283;
  v288[1] = v26;
  if (*(_DWORD *)(a1 + 12) <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x197E4924CLL);
  }
  v77 = *(_QWORD *)a1 + 720 * v15;
  v78 = *(_QWORD *)(v77 + 704);
  *(_QWORD *)(v77 + 704) = 0;
  v79 = *(_QWORD *)(v77 + 712);
  *(_QWORD *)(v77 + 712) = 0;
  if (*(_DWORD *)(a1 + 12) <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x197E49254);
  }
  v80 = *(_QWORD *)a1 + 720 * v15;
  v81 = *(_QWORD *)(v80 + 120);
  *(_QWORD *)(v80 + 120) = 0;
  LOBYTE(v289[3]) = *(_BYTE *)(v80 + 128);
  v82 = (char)v289[3];
  v83 = *(_QWORD *)(v80 + 136);
  *(_QWORD *)(v80 + 136) = 0;
  v84 = *(_QWORD *)a1 + 720 * v15;
  v85 = *(_QWORD *)(v84 + 144);
  *(_QWORD *)(v84 + 144) = 0;
  v291 = *(_BYTE *)(v84 + 152);
  v86 = v291;
  v87 = *(_QWORD *)(v84 + 160);
  *(_QWORD *)(v84 + 160) = 0;
  LOWORD(v293) = v76;
  HIDWORD(v293) = HIDWORD(v297);
  *(_OWORD *)a9 = *(_OWORD *)v288;
  v289[0] = 0;
  v289[1] = 0;
  *(_QWORD *)(a9 + 16) = v78;
  *(_QWORD *)(a9 + 24) = v79;
  *(_QWORD *)(a9 + 32) = v81;
  *(_BYTE *)(a9 + 40) = v82;
  v289[2] = 0;
  v289[4] = 0;
  v290 = 0;
  *(_QWORD *)(a9 + 48) = v83;
  *(_QWORD *)(a9 + 56) = v85;
  *(_BYTE *)(a9 + 64) = v86;
  v292 = 0;
  v88 = v293;
  *(_QWORD *)(a9 + 72) = v87;
  *(_QWORD *)(a9 + 80) = v88;
  *(_DWORD *)(a9 + 88) = 0;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v290, v61, v62, v63, v64, v65, v66, v67);
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v289[2], v89, v90, v91, v92, v93, v94, v95);
  v96 = v289[0];
  if (v289[0])
  {
    v289[0] = 0;
    LODWORD(v289[1]) = 0;
    WTF::fastFree((unint64_t)v96, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  }
  v97 = v310;
  v98 = v286;
  if (v310)
  {
    v104 = *((unsigned int *)v310 - 1);
    if ((_DWORD)v104)
    {
      v105 = (WTF::StringImpl **)v310;
      do
      {
        v106 = *v105;
        if (*v105 != (WTF::StringImpl *)-1)
        {
          *v105 = 0;
          if (v106)
          {
            if (*(_DWORD *)v106 == 2)
            {
              WTF::StringImpl::~StringImpl(v106, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
              WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
            }
            else
            {
              *(_DWORD *)v106 -= 2;
            }
          }
        }
        ++v105;
        --v104;
      }
      while (v104);
    }
    WTF::fastFree((unint64_t)v97 - 16, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  }
LABEL_68:
  *(_DWORD *)(a1 + 7316) = v98;
  v99 = v307;
  if (v309 != (_DWORD *)v307 && v307 != 0)
  {
    v307 = 0;
    LODWORD(v308) = 0;
    WTF::fastFree((unint64_t)v99, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  }
  v101 = v304;
  if (v306 != (_BYTE *)v304 && v304)
  {
    v304 = 0;
    LODWORD(v305) = 0;
    WTF::fastFree((unint64_t)v101, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  }
  v102 = v301;
  if (v303 != (_BYTE *)v301 && v301)
  {
    v301 = 0;
    LODWORD(v302) = 0;
    WTF::fastFree((unint64_t)v102, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  }
  v103 = v298;
  if (v300 != (_BYTE *)v298)
  {
    if (v298)
    {
      v298 = 0;
      LODWORD(v299) = 0;
      WTF::fastFree((unint64_t)v103, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    }
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::createGeneratorParameters<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  WTF::AtomStringImpl *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  WTF::AtomStringImpl *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  WTF::AtomStringImpl *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  WTF::AtomStringImpl *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  WTF::AtomStringImpl *v64;
  JSC::ParserArena *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  _QWORD *v71;
  __int128 *v72;
  __int128 *v73;
  __int128 *v74;
  __int128 *v75;
  __int128 *v76;
  uint64_t v77;
  int v78;
  __int128 v79;

  v11 = *(uint64_t **)(a2 + 8);
  v12 = *v11;
  if ((unint64_t)(v11[1] - *v11) <= 0x4F)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v12 = *v11;
  }
  *v11 = v12 + 80;
  *(_QWORD *)&v79 = v12;
  v13 = v11 + 5;
  v14 = *((unsigned int *)v11 + 13);
  if ((_DWORD)v14 == *((_DWORD *)v11 + 12))
  {
    v71 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)&v79);
    v14 = *((unsigned int *)v11 + 13);
    *(_QWORD *)(v11[5] + 8 * v14) = *v71;
  }
  else
  {
    *(_QWORD *)(*v13 + 8 * v14) = v12;
  }
  *((_DWORD *)v11 + 13) = v14 + 1;
  *(_QWORD *)v12 = &off_1E357AA40;
  *(_QWORD *)(v12 + 8) = v12 + 24;
  v15 = (uint64_t *)(v12 + 8);
  *(_QWORD *)(v12 + 16) = 3;
  *(_BYTE *)(v12 + 72) = 1;
  v77 = *(_QWORD *)(a1 + 7416);
  v78 = *(_DWORD *)(a1 + 7424);
  v16 = (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 56);
  JSC::Parser<JSC::Lexer<unsigned char>>::declareParameter((uint64_t *)a1, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
  v17 = *(unint64_t **)(a2 + 8);
  v18 = *v17;
  if (v17[1] - *v17 <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v18 = *v17;
  }
  *v17 = v18 + 48;
  *(_QWORD *)v18 = &off_1E358B760;
  *(_QWORD *)(v18 + 8) = v77;
  *(_DWORD *)(v18 + 16) = v78;
  *(_QWORD *)(v18 + 20) = v77;
  *(_DWORD *)(v18 + 28) = v78;
  *(_QWORD *)(v18 + 32) = v16;
  *(_BYTE *)(v18 + 40) = 0;
  *(_BYTE *)(v12 + 72) &= JSC::BindingNode::isBindingNode((JSC::BindingNode *)v18);
  v79 = v18;
  v25 = *(unsigned int *)(v12 + 20);
  if ((_DWORD)v25 == *(_DWORD *)(v12 + 16))
  {
    v72 = (__int128 *)WTF::Vector<std::pair<JSC::DestructuringPatternNode *,JSC::ExpressionNode *>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 8, v25 + 1, (unint64_t)&v79);
    v25 = *(unsigned int *)(v12 + 20);
    v26 = *(_QWORD *)(v12 + 8);
    v27 = *v72;
  }
  else
  {
    v26 = *v15;
    v27 = v79;
  }
  *(_OWORD *)(v26 + 16 * v25) = v27;
  ++*(_DWORD *)(v12 + 20);
  ++*a3;
  v28 = (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 64);
  JSC::Parser<JSC::Lexer<unsigned char>>::declareParameter((uint64_t *)a1, v28, v19, v20, v21, v22, v23, v24);
  v29 = *(unint64_t **)(a2 + 8);
  v30 = *v29;
  if (v29[1] - *v29 <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v30 = *v29;
  }
  *v29 = v30 + 48;
  *(_QWORD *)v30 = &off_1E358B760;
  *(_QWORD *)(v30 + 8) = v77;
  *(_DWORD *)(v30 + 16) = v78;
  *(_QWORD *)(v30 + 20) = v77;
  *(_DWORD *)(v30 + 28) = v78;
  *(_QWORD *)(v30 + 32) = v28;
  *(_BYTE *)(v30 + 40) = 0;
  *(_BYTE *)(v12 + 72) &= JSC::BindingNode::isBindingNode((JSC::BindingNode *)v30);
  v79 = v30;
  v37 = *(unsigned int *)(v12 + 20);
  if ((_DWORD)v37 == *(_DWORD *)(v12 + 16))
  {
    v73 = (__int128 *)WTF::Vector<std::pair<JSC::DestructuringPatternNode *,JSC::ExpressionNode *>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 8, v37 + 1, (unint64_t)&v79);
    v37 = *(unsigned int *)(v12 + 20);
    v38 = *(_QWORD *)(v12 + 8);
    v39 = *v73;
  }
  else
  {
    v38 = *v15;
    v39 = v79;
  }
  *(_OWORD *)(v38 + 16 * v37) = v39;
  ++*(_DWORD *)(v12 + 20);
  ++*a3;
  v40 = (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 72);
  JSC::Parser<JSC::Lexer<unsigned char>>::declareParameter((uint64_t *)a1, v40, v31, v32, v33, v34, v35, v36);
  v41 = *(unint64_t **)(a2 + 8);
  v42 = *v41;
  if (v41[1] - *v41 <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v42 = *v41;
  }
  *v41 = v42 + 48;
  *(_QWORD *)v42 = &off_1E358B760;
  *(_QWORD *)(v42 + 8) = v77;
  *(_DWORD *)(v42 + 16) = v78;
  *(_QWORD *)(v42 + 20) = v77;
  *(_DWORD *)(v42 + 28) = v78;
  *(_QWORD *)(v42 + 32) = v40;
  *(_BYTE *)(v42 + 40) = 0;
  *(_BYTE *)(v12 + 72) &= JSC::BindingNode::isBindingNode((JSC::BindingNode *)v42);
  v79 = v42;
  v49 = *(unsigned int *)(v12 + 20);
  if ((_DWORD)v49 == *(_DWORD *)(v12 + 16))
  {
    v74 = (__int128 *)WTF::Vector<std::pair<JSC::DestructuringPatternNode *,JSC::ExpressionNode *>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 8, v49 + 1, (unint64_t)&v79);
    v49 = *(unsigned int *)(v12 + 20);
    v50 = *(_QWORD *)(v12 + 8);
    v51 = *v74;
  }
  else
  {
    v50 = *v15;
    v51 = v79;
  }
  *(_OWORD *)(v50 + 16 * v49) = v51;
  ++*(_DWORD *)(v12 + 20);
  ++*a3;
  v52 = (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 80);
  JSC::Parser<JSC::Lexer<unsigned char>>::declareParameter((uint64_t *)a1, v52, v43, v44, v45, v46, v47, v48);
  v53 = *(unint64_t **)(a2 + 8);
  v54 = *v53;
  if (v53[1] - *v53 <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v54 = *v53;
  }
  *v53 = v54 + 48;
  *(_QWORD *)v54 = &off_1E358B760;
  *(_QWORD *)(v54 + 8) = v77;
  *(_DWORD *)(v54 + 16) = v78;
  *(_QWORD *)(v54 + 20) = v77;
  *(_DWORD *)(v54 + 28) = v78;
  *(_QWORD *)(v54 + 32) = v52;
  *(_BYTE *)(v54 + 40) = 0;
  *(_BYTE *)(v12 + 72) &= JSC::BindingNode::isBindingNode((JSC::BindingNode *)v54);
  v79 = v54;
  v61 = *(unsigned int *)(v12 + 20);
  if ((_DWORD)v61 == *(_DWORD *)(v12 + 16))
  {
    v75 = (__int128 *)WTF::Vector<std::pair<JSC::DestructuringPatternNode *,JSC::ExpressionNode *>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 8, v61 + 1, (unint64_t)&v79);
    v61 = *(unsigned int *)(v12 + 20);
    v62 = *(_QWORD *)(v12 + 8);
    v63 = *v75;
  }
  else
  {
    v62 = *v15;
    v63 = v79;
  }
  *(_OWORD *)(v62 + 16 * v61) = v63;
  ++*(_DWORD *)(v12 + 20);
  ++*a3;
  v64 = (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 88);
  JSC::Parser<JSC::Lexer<unsigned char>>::declareParameter((uint64_t *)a1, v64, v55, v56, v57, v58, v59, v60);
  v65 = *(JSC::ParserArena **)(a2 + 8);
  v66 = *(_QWORD *)v65;
  if (*((_QWORD *)v65 + 1) - *(_QWORD *)v65 <= 0x2FuLL)
  {
    JSC::ParserArena::allocateFreeablePool(v65);
    v66 = *(_QWORD *)v65;
  }
  *(_QWORD *)v65 = v66 + 48;
  *(_QWORD *)v66 = &off_1E358B760;
  *(_QWORD *)(v66 + 8) = v77;
  *(_DWORD *)(v66 + 16) = v78;
  *(_QWORD *)(v66 + 20) = v77;
  *(_DWORD *)(v66 + 28) = v78;
  *(_QWORD *)(v66 + 32) = v64;
  *(_BYTE *)(v66 + 40) = 0;
  *(_BYTE *)(v12 + 72) &= JSC::BindingNode::isBindingNode((JSC::BindingNode *)v66);
  v79 = v66;
  v67 = *(unsigned int *)(v12 + 20);
  if ((_DWORD)v67 == *(_DWORD *)(v12 + 16))
  {
    v76 = (__int128 *)WTF::Vector<std::pair<JSC::DestructuringPatternNode *,JSC::ExpressionNode *>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12 + 8, v67 + 1, (unint64_t)&v79);
    v67 = *(unsigned int *)(v12 + 20);
    v68 = *(_QWORD *)(v12 + 8);
    v69 = *v76;
  }
  else
  {
    v68 = *v15;
    v69 = v79;
  }
  *(_OWORD *)(v68 + 16 * v67) = v69;
  ++*(_DWORD *)(v12 + 20);
  ++*a3;
  return v12;
}

uint64_t JSC::ASTBuilder::createFormalParameterList(JSC::ASTBuilder *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  v2 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) - *(_QWORD *)this <= 0x4FuLL)
  {
    JSC::ParserArena::allocateFreeablePool(this);
    v2 = *(_QWORD *)this;
  }
  *(_QWORD *)this = v2 + 80;
  v7 = v2;
  v3 = (_QWORD *)((char *)this + 40);
  v4 = *((unsigned int *)this + 13);
  if ((_DWORD)v4 == *((_DWORD *)this + 12))
  {
    v6 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4 + 1, (unint64_t)&v7);
    v4 = *((unsigned int *)this + 13);
    *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v4) = *v6;
  }
  else
  {
    *(_QWORD *)(*v3 + 8 * v4) = v2;
  }
  *((_DWORD *)this + 13) = v4 + 1;
  *(_QWORD *)v2 = &off_1E357AA40;
  *(_QWORD *)(v2 + 8) = v2 + 24;
  *(_QWORD *)(v2 + 16) = 3;
  *(_BYTE *)(v2 + 72) = 1;
  return v2;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionParameters<JSC::ASTBuilder,JSC::ParserFunctionInfo<JSC::ASTBuilder>>(uint64_t a1, JSC::ParserArena **a2, JSC::DestructuringPatternNode *a3, JSC::ExpressionNode *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  _BYTE *v9;
  int v10;
  int v11;
  JSC::ParserArena *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t *v44;
  int v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  __int128 *v59;
  _QWORD *v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  WTF::AtomStringImpl **v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl **v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  const char *v87;
  const char *v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  JSC::ParserArena *v106;
  const char *v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  const char *v120;
  WTF::AtomStringImpl ***v121;
  int v122;
  const char *v123;
  const char *v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  JSC::FunctionParameters *v133;
  JSC::DestructuringPatternNode *v134;
  JSC::ExpressionNode *v135;
  JSC::DestructuringPatternNode *v136;
  _BOOL4 v137;
  int v138;
  int v139;
  int v140;
  int v141;
  const char *v142;
  JSC::FunctionParameters *v143;
  JSC::ExpressionNode *v144;
  const char *v145;
  const char *v146;
  int v147;
  const char *v148;
  int v149;
  uint64_t v150;
  BOOL isAllowedIdentifierLet;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  BOOL isAllowedIdentifierYield;
  int v158;
  unsigned int v159;
  uint64_t v160;
  JSC::ParserArena *v161;
  const char *v162;
  int v163;
  int v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  JSC::DestructuringPatternNode *v181;
  char v182;
  int v183;
  int v184;
  int v185;
  int v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  int v196;
  unint64_t v197;
  int v198;
  int v199;
  int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  int v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  const char *v208;
  int v209;
  _BYTE *v210;
  unsigned int v211;
  uint64_t v212;
  JSC::DestructuringPatternNode *v213;
  int *v214;
  const char *v215;
  unsigned __int8 v216;
  __int128 v217;

  v213 = a3;
  v9 = (_BYTE *)(a1 + 7344);
  v10 = *(unsigned __int8 *)(a1 + 7474);
  v11 = 1 << v10;
  if (((1 << v10) & 0x7000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197E4A558);
  }
  v14 = a2[1];
  v15 = *(_QWORD *)v14;
  if (*((_QWORD *)v14 + 1) - *(_QWORD *)v14 <= 0x4FuLL)
  {
    JSC::ParserArena::allocateFreeablePool(a2[1]);
    v15 = *(_QWORD *)v14;
  }
  *(_QWORD *)v14 = v15 + 80;
  *(_QWORD *)&v217 = v15;
  v16 = (_QWORD *)((char *)v14 + 40);
  v17 = *((unsigned int *)v14 + 13);
  if ((_DWORD)v17 == *((_DWORD *)v14 + 12))
  {
    v60 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, v17 + 1, (unint64_t)&v217);
    v17 = *((unsigned int *)v14 + 13);
    *(_QWORD *)(*((_QWORD *)v14 + 5) + 8 * v17) = *v60;
  }
  else
  {
    *(_QWORD *)(*v16 + 8 * v17) = v15;
  }
  *((_DWORD *)v14 + 13) = v17 + 1;
  *(_QWORD *)v15 = &off_1E357AA40;
  *(_QWORD *)(v15 + 8) = v15 + 24;
  v18 = v15 + 8;
  *(_QWORD *)(v15 + 16) = 3;
  *(_BYTE *)(v15 + 72) = 1;
  if (v10 != 20)
  {
    v19 = *(_DWORD *)(a1 + 7316);
    *(_DWORD *)(a1 + 7316) = 0;
    v214 = (int *)(a1 + 7368);
    v20 = *(_DWORD *)(a1 + 7368);
    if ((v11 & 0x840) == 0)
    {
      if (v20 == 2)
      {
        v21 = *(_DWORD *)(a1 + 7400);
        v22 = *(_DWORD *)(a1 + 7412);
        v23 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v21;
        *(_DWORD *)(a1 + 7448) = v22;
        *(_DWORD *)(a1 + 7452) = v23;
        v24 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v24 + 4) = v21;
        v25 = *(_DWORD *)(a1 + 12);
        if (!v25)
        {
          __break(0xC471u);
          JUMPOUT(0x197E4AC84);
        }
        v26 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v25 - 1) + 9) & 1;
        *(_BYTE *)(v24 + 56) = 0;
        v27 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v24, (uint64_t)v214, 0, v26, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v27;
        if (v10 == 3)
        {
          if (v27 == 3)
          {
            v108 = *(_DWORD *)(a1 + 7400);
            v109 = *(_DWORD *)(a1 + 7412);
            v110 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v108;
            *(_DWORD *)(a1 + 7448) = v109;
            *(_DWORD *)(a1 + 7452) = v110;
            v111 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v111 + 4) = v108;
            v112 = *(_DWORD *)(a1 + 12);
            if (!v112)
            {
              __break(0xC471u);
              JUMPOUT(0x197E4AF74);
            }
            v113 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v112 - 1) + 9) & 1;
            *(_BYTE *)(v111 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v111, (uint64_t)v214, 0, v113, v28, v29, v30, v31);
            *((_DWORD *)v213 + 4) = 0;
            goto LABEL_81;
          }
          if (v27 == 20 || (v27 & 0x100000) != 0)
            goto LABEL_165;
          if (*(_QWORD *)(a1 + 7360))
          {
LABEL_166:
            v15 = 0;
            goto LABEL_81;
          }
          v142 = "getter functions must have no parameters";
        }
        else
        {
          if (v10 != 4)
          {
            if (v27 != 3)
            {
              v209 = 1 << v10;
              v210 = v9;
              v211 = v19;
              v32 = 0;
              v33 = 0;
              v216 = 0;
              v215 = 0;
              while (1)
              {
                if (v27 == 37)
                {
                  v96 = *(_DWORD *)(a1 + 7400);
                  v97 = *(_DWORD *)(a1 + 7412);
                  v98 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v96;
                  *(_DWORD *)(a1 + 7448) = v97;
                  *(_DWORD *)(a1 + 7452) = v98;
                  v99 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v99 + 4) = v96;
                  v100 = *(_DWORD *)(a1 + 12);
                  if (!v100)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E4ACB4);
                  }
                  v101 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v100 - 1) + 9) & 1;
                  *(_BYTE *)(v99 + 56) = 0;
                  v102 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v99, (uint64_t)v214, 0, v101, v28, v29, v30, v31);
                  *(_DWORD *)(a1 + 7368) = v102;
                  if (v102 == 546
                    || v102 == 1048592
                    && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
                  {
                    if (!*v210)
                      goto LABEL_448;
                    v103 = *(_DWORD *)(a1 + 12);
                    if (!v103)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197E4ACC4);
                    }
                    if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v103 - 1) + 10) & 0x102000) != 0
                      || *(_DWORD *)(a1 + 7480) == 1)
                    {
LABEL_448:
                      if (!*(_QWORD *)(a1 + 7360))
                        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a parameter name in an async function");
                      goto LABEL_261;
                    }
                  }
                  v104 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 4, 1, (WTF::AtomStringImpl **)&v215, &v216, 0, 0);
                  if (*(_QWORD *)(a1 + 7360))
                    goto LABEL_261;
                  v105 = v104;
                  v106 = a2[1];
                  v41 = *(_QWORD *)v106;
                  if (*((_QWORD *)v106 + 1) - *(_QWORD *)v106 <= 0x17uLL)
                  {
                    v161 = a2[1];
                    JSC::ParserArena::allocateFreeablePool(v161);
                    v106 = v161;
                    v41 = *(_QWORD *)v161;
                  }
                  *(_QWORD *)v106 = v41 + 24;
                  *(_QWORD *)v41 = &off_1E358B820;
                  *(_QWORD *)(v41 + 8) = v105;
                  *(_DWORD *)(v41 + 16) = v33;
                  if (*v214 == 6)
                  {
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Rest parameter should be the last parameter in a function declaration");
                    goto LABEL_261;
                  }
                  v44 = 0;
                  v43 = 1;
                }
                else
                {
                  if (v27 == 3)
                  {
                    v19 = v211;
                    goto LABEL_79;
                  }
                  v34 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 4, 1, (WTF::AtomStringImpl **)&v215, &v216, 0, 0);
                  if (!v34)
                  {
                    if (*v214 == 20 || (*v214 & 0x100000) != 0)
                    {
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                    }
                    else if (!*(_QWORD *)(a1 + 7360))
                    {
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
                    }
                    goto LABEL_261;
                  }
                  v41 = v34;
                  JSC::Parser<JSC::Lexer<unsigned char>>::parseDefaultValueForDestructuringPattern<JSC::ASTBuilder>(a1, a2, v35, v36, v37, v38, v39, v40);
                  v43 = 0;
                  if (v42)
                  {
                    v32 = 1;
                    v44 = v42;
                  }
                  else
                  {
                    v44 = 0;
                  }
                }
                if (*(_QWORD *)(a1 + 7360))
                  goto LABEL_261;
                if (v215)
                {
                  if ((v32 & 1) != 0)
                  {
                    *(_QWORD *)&v217 = *(_QWORD *)v215;
                    v162 = "' not allowed in function with default parameter values";
                    goto LABEL_297;
                  }
                  if (v216)
                  {
                    *(_QWORD *)&v217 = *(_QWORD *)v215;
                    v162 = "' not allowed in function with destructuring parameters";
LABEL_297:
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[56]>(a1, (uint64_t *)&v217, v162);
LABEL_261:
                    if (*v214 == 20 || (*v214 & 0x100000) != 0)
                    {
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                      v15 = 0;
                      v19 = v211;
                      goto LABEL_81;
                    }
                    v19 = v211;
                    if (!*(_QWORD *)(a1 + 7360))
                    {
                      *(_QWORD *)&v217 = JSC::stringForFunctionMode();
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],char const*>(a1, (const char **)&v217);
                    }
                    goto LABEL_166;
                  }
                  if (v43)
                  {
                    *(_QWORD *)&v217 = *(_QWORD *)v215;
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[48]>(a1, (uint64_t *)&v217);
                    goto LABEL_261;
                  }
                  if ((v209 & 0x160438) != 0)
                  {
                    *(_QWORD *)&v217 = *(_QWORD *)v215;
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[26]>(a1, (uint64_t *)&v217);
                    goto LABEL_261;
                  }
                  v45 = 0;
                }
                else
                {
                  v45 = v216;
                }
                if (v44)
                  v46 = 1;
                else
                  v46 = v43;
                if ((v46 & 1) == 0 && !v45)
                  goto LABEL_28;
                v79 = *(_DWORD *)(a1 + 12);
                if (!v79)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E4ACBCLL);
                }
                v80 = *(_QWORD *)a1 + 720 * (v79 - 1);
                *(_DWORD *)(v80 + 10) = *(_DWORD *)(v80 + 10) & 0xFB7FFFFF | 0x4000000;
                if (v44)
                {
                  v48 = 0;
                  v47 = 0;
                }
                else
                {
LABEL_28:
                  v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
                  v48 = 1;
                }
                *(_BYTE *)(v15 + 72) &= v47;
                *(_QWORD *)&v217 = v41;
                *((_QWORD *)&v217 + 1) = v44;
                v49 = *(unsigned int *)(v15 + 20);
                if ((_DWORD)v49 == *(_DWORD *)(v15 + 16))
                {
                  v59 = (__int128 *)WTF::Vector<std::pair<JSC::DestructuringPatternNode *,JSC::ExpressionNode *>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15 + 8, v49 + 1, (unint64_t)&v217);
                  v49 = *(unsigned int *)(v15 + 20);
                  v50 = *(_QWORD *)(v15 + 8);
                  v51 = *v59;
                }
                else
                {
                  v50 = *(_QWORD *)v18;
                  v51 = v217;
                }
                *(_OWORD *)(v50 + 16 * v49) = v51;
                ++*(_DWORD *)(v15 + 20);
                if ((v48 & 1) == 0)
                {
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41))
                  {
                    v71 = *(WTF::AtomStringImpl ***)(v41 + 32);
                    if ((*(unsigned int (**)(uint64_t *))(*v44 + 152))(v44))
                    {
                      JSC::FunctionMetadataNode::setEcmaName(v44[4], *v71, v72, v73, v74, v75, v76, v77);
                    }
                    else if ((*(unsigned int (**)(uint64_t *))(*v44 + 176))(v44))
                    {
                      v78 = (WTF::AtomStringImpl **)v44[20];
                      if (!*v78)
                        v78 = v71;
                      v44[21] = (uint64_t)v78;
                    }
                  }
                  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v41 + 48))(v41))
                  {
                    v121 = *(WTF::AtomStringImpl ****)(v41 + 32);
                    if (((unsigned int (*)(WTF::AtomStringImpl ***))(*v121)[14])(v121))
                      JSC::ASTBuilder::tryInferNameInPatternWithIdentifier(v121[4], v44);
                  }
                }
                if ((v43 & 1) != 0)
                {
                  v52 = *v214;
LABEL_78:
                  v19 = v211;
                  if (v52 == 3)
                    goto LABEL_79;
                  if (v52 != 20 && (v52 & 0x100000) == 0)
                  {
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ')' or a ',' after a parameter declaration");
                    goto LABEL_166;
                  }
LABEL_165:
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
                  goto LABEL_166;
                }
                if ((v32 & 1) == 0)
                  ++*((_DWORD *)v213 + 4);
                v52 = *v214;
                if (*v214 != 6)
                  goto LABEL_78;
                v53 = *(_DWORD *)(a1 + 7400);
                v54 = *(_DWORD *)(a1 + 7412);
                v55 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v53;
                *(_DWORD *)(a1 + 7448) = v54;
                *(_DWORD *)(a1 + 7452) = v55;
                v56 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v56 + 4) = v53;
                v57 = *(_DWORD *)(a1 + 12);
                if (!v57)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E4AB9CLL);
                }
                v58 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v57 - 1) + 9) & 1;
                *(_BYTE *)(v56 + 56) = 0;
                v27 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v56, (uint64_t)v214, 0, v58, v28, v29, v30, v31);
                *(_DWORD *)(a1 + 7368) = v27;
                ++v33;
              }
            }
            *((_DWORD *)v213 + 4) = 0;
LABEL_79:
            v89 = *(_DWORD *)(a1 + 7400);
            v90 = *(_DWORD *)(a1 + 7412);
            v91 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v89;
            *(_DWORD *)(a1 + 7448) = v90;
            *(_DWORD *)(a1 + 7452) = v91;
            v92 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v92 + 4) = v89;
            v93 = *(_DWORD *)(a1 + 12);
            if (!v93)
            {
              __break(0xC471u);
              JUMPOUT(0x197E4ACACLL);
            }
            goto LABEL_80;
          }
          if (v27 != 3)
          {
            *(_QWORD *)&v217 = 0;
            v216 = 0;
            v126 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 4, 1, (WTF::AtomStringImpl **)&v217, &v216, 0, 0);
            if (v126)
            {
              v133 = (JSC::FunctionParameters *)v126;
              JSC::Parser<JSC::Lexer<unsigned char>>::parseDefaultValueForDestructuringPattern<JSC::ASTBuilder>(a1, a2, v127, v128, v129, v130, v131, v132);
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_166;
              if (v134 || v216)
              {
                if ((_QWORD)v217)
                {
                  v215 = *(const char **)v217;
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[57]>(a1, (uint64_t *)&v215);
                  goto LABEL_166;
                }
                v149 = *(_DWORD *)(a1 + 12);
                if (!v149)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E4B148);
                }
                v150 = *(_QWORD *)a1 + 720 * (v149 - 1);
                *(_DWORD *)(v150 + 10) = *(_DWORD *)(v150 + 10) & 0xFB7FFFFF | 0x4000000;
                v136 = v134;
              }
              else
              {
                v136 = 0;
              }
              v137 = v134 == 0;
              JSC::ASTBuilder::appendParameter((JSC::ASTBuilder *)v15, v133, v136, v135);
              *((_DWORD *)v213 + 4) = v137;
              v138 = *v214;
              if (*v214 == 3)
              {
                v139 = *(_DWORD *)(a1 + 7400);
                v140 = *(_DWORD *)(a1 + 7412);
                v141 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v139;
                *(_DWORD *)(a1 + 7448) = v140;
                *(_DWORD *)(a1 + 7452) = v141;
                v92 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v92 + 4) = v139;
                v93 = *(_DWORD *)(a1 + 12);
                if (!v93)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E4A4F0);
                }
LABEL_80:
                v94 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v93 - 1) + 9) & 1;
                *(_BYTE *)(v92 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v92, (uint64_t)v214, 0, v94, v28, v29, v30, v31);
LABEL_81:
                *(_DWORD *)(a1 + 7316) = v19;
                return v15;
              }
              if (v138 != 6)
              {
                if (v138 == 20 || (v138 & 0x100000) != 0)
                  goto LABEL_165;
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ')' after a parameter declaration");
                goto LABEL_166;
              }
            }
            else if (*v214 == 20 || (*v214 & 0x100000) != 0)
            {
              goto LABEL_165;
            }
          }
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_166;
          v142 = "setter functions must have one parameter";
        }
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, v142);
        goto LABEL_166;
      }
      v61 = *(_DWORD *)(a1 + 12);
      if (!v61)
      {
        __break(0xC471u);
        goto LABEL_346;
      }
      v62 = v61 - 1;
      v63 = *(_QWORD *)a1;
      v64 = *(_BYTE *)(*(_QWORD *)a1 + 720 * v62 + 9);
      if ((v64 & 1) != 0 && v20 == 532)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_166;
        v65 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
        v66 = *(unsigned int *)(a1 + 7408);
        v15 = *(unsigned int *)(a1 + 7412);
        v67 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 24))(v65);
        if (v68 <= v66)
        {
          v69 = 0x100000000;
          v67 = "";
          goto LABEL_75;
        }
        LODWORD(v69) = v15 - v66;
        if ((int)v68 - (int)v66 <= (v15 - v66))
        {
          LODWORD(v69) = v68 - v66;
          if (!(_DWORD)v66)
          {
            v69 = v68;
            goto LABEL_75;
          }
        }
        v69 = v69;
        v70 = v68 - v66;
        if ((v68 & 0xFF00000000) != 0)
        {
          if (v70 >= v69)
          {
            v67 += v66;
            v69 = v69 | 0x100000000;
LABEL_75:
            *(_QWORD *)&v217 = v67;
            *((_QWORD *)&v217 + 1) = v69;
            v88 = "getter";
            switch(v10)
            {
              case 0:
                v88 = "function";
                break;
              case 1:
              case 2:
                v88 = "generator function";
                break;
              case 3:
                break;
              case 4:
                v88 = "setter";
                break;
              case 5:
                v88 = "method";
                break;
              case 6:
                v88 = "arrow function";
                break;
              case 7:
              case 9:
                v88 = "async function";
                break;
              case 8:
              case 11:
                v88 = "async arrow function";
                break;
              case 10:
                v88 = "async method";
                break;
              case 12:
              case 13:
              case 14:
              case 19:
                __break(0xC471u);
                JUMPOUT(0x197E4AB54);
              case 15:
              case 16:
                v88 = "async generator function";
                break;
              case 17:
                v88 = "async generator method";
                break;
              case 18:
                v88 = "generator method";
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x197E4AB94);
            }
            v215 = v88;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6],char const(&)[16]>(a1, (uint64_t)&v217, &v215);
            goto LABEL_166;
          }
        }
        else if (v70 >= v69)
        {
          v67 += 2 * v66;
          goto LABEL_75;
        }
        goto LABEL_346;
      }
      if ((v20 - 531) <= 1)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_166;
        v81 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
        v82 = *(unsigned int *)(a1 + 7408);
        v15 = *(unsigned int *)(a1 + 7412);
        v83 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81);
        if (v84 <= v82)
        {
          v85 = 0x100000000;
          v83 = "";
          goto LABEL_105;
        }
        LODWORD(v85) = v15 - v82;
        if ((int)v84 - (int)v82 <= (v15 - v82))
        {
          LODWORD(v85) = v84 - v82;
          if (!(_DWORD)v82)
          {
            v85 = v84;
            goto LABEL_105;
          }
        }
        v85 = v85;
        v86 = v84 - v82;
        if ((v84 & 0xFF00000000) != 0)
        {
          if (v86 >= v85)
          {
            v83 += v82;
            v85 = v85 | 0x100000000;
LABEL_105:
            *(_QWORD *)&v217 = v83;
            *((_QWORD *)&v217 + 1) = v85;
            v107 = "getter";
            switch(v10)
            {
              case 0:
                v107 = "function";
                break;
              case 1:
              case 2:
                v107 = "generator function";
                break;
              case 3:
                break;
              case 4:
                v107 = "setter";
                break;
              case 5:
                v107 = "method";
                break;
              case 6:
                v107 = "arrow function";
                break;
              case 7:
              case 9:
                v107 = "async function";
                break;
              case 8:
              case 11:
                v107 = "async arrow function";
                break;
              case 10:
                v107 = "async method";
                break;
              case 12:
              case 13:
              case 14:
              case 19:
                __break(0xC471u);
                JUMPOUT(0x197E4AB74);
              case 15:
              case 16:
                v107 = "async generator function";
                break;
              case 17:
                v107 = "async generator method";
                break;
              case 18:
                v107 = "generator method";
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x197E4ABFCLL);
            }
            v215 = v107;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&v217, &v215);
            goto LABEL_166;
          }
        }
        else if (v86 >= v85)
        {
          v83 += 2 * v82;
          goto LABEL_105;
        }
LABEL_346:
        __break(1u);
LABEL_347:
        v196 = *(_DWORD *)(a1 + 12);
        if (!v196)
        {
          __break(0xC471u);
          JUMPOUT(0x197E4B3C0);
        }
        v197 = *(_QWORD *)a1 + (v196 - 1) * (unint64_t)v19;
        *(_DWORD *)(v197 + 10) = *(_DWORD *)(v197 + 10) & 0xFB7FFFFF | 0x4000000;
        while (1)
        {
          JSC::ASTBuilder::appendParameter((JSC::ASTBuilder *)v15, (JSC::FunctionParameters *)v18, a3, a4);
          if ((v14 & 1) != 0)
            break;
          if ((v8 & 1) == 0)
            ++*((_DWORD *)v213 + 4);
          v183 = *v214;
          if (*v214 != 6)
            goto LABEL_354;
          v184 = *(_DWORD *)(a1 + 7400);
          v185 = *(_DWORD *)(a1 + 7412);
          v186 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v184;
          *(_DWORD *)(a1 + 7448) = v185;
          *(_DWORD *)(a1 + 7452) = v186;
          v187 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v187 + 4) = v184;
          v188 = *(_DWORD *)(a1 + 12);
          if (!v188)
          {
            __break(0xC471u);
            JUMPOUT(0x197E4B3B0);
          }
          v189 = *(_BYTE *)(*(_QWORD *)a1 + (v188 - 1) * (unint64_t)v19 + 9) & 1;
          *(_BYTE *)(v187 + 56) = 0;
          v169 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v187, (uint64_t)v214, 0, v189, v170, v171, v172, v173);
          *(_DWORD *)(a1 + 7368) = v169;
          ++v10;
LABEL_321:
          if (v169 == 37)
          {
            v198 = *(_DWORD *)(a1 + 7400);
            v199 = *(_DWORD *)(a1 + 7412);
            v200 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v198;
            *(_DWORD *)(a1 + 7448) = v199;
            *(_DWORD *)(a1 + 7452) = v200;
            v201 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v201 + 4) = v198;
            v202 = *(_DWORD *)(a1 + 12);
            if (!v202)
            {
              __break(0xC471u);
              JUMPOUT(0x197E4B3C8);
            }
            v203 = *(_BYTE *)(*(_QWORD *)a1 + (v202 - 1) * (unint64_t)v19 + 9) & 1;
            *(_BYTE *)(v201 + 56) = 0;
            v204 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v201, (uint64_t)v214, 0, v203, v170, v171, v172, v173);
            *(_DWORD *)(a1 + 7368) = v204;
            if (JSC::Parser<JSC::Lexer<unsigned char>>::isDisallowedIdentifierAwait(a1, v204, *(_QWORD **)(a1 + 7376)))
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a parameter name in an async function");
              goto LABEL_376;
            }
            v212 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 4, 1, (WTF::AtomStringImpl **)&v217, &v216, 0, 0);
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_376;
            v205 = (uint64_t *)a2[1];
            v18 = *v205;
            if ((unint64_t)(v205[1] - *v205) <= 0x17)
            {
              JSC::ParserArena::allocateFreeablePool(a2[1]);
              v18 = *v205;
            }
            *v205 = v18 + 24;
            *(_QWORD *)v18 = &off_1E358B820;
            *(_QWORD *)(v18 + 8) = v212;
            *(_DWORD *)(v18 + 16) = v10;
            if (*v214 == 6)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Rest parameter should be the last parameter in a function declaration");
              goto LABEL_376;
            }
            a3 = 0;
            LODWORD(v14) = 1;
          }
          else
          {
            if (v169 == 3)
              goto LABEL_340;
            v174 = JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 4, 1, (WTF::AtomStringImpl **)&v217, &v216, 0, 0);
            if (!v174)
            {
              if (*v214 == 20 || (*v214 & 0x100000) != 0)
              {
                JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
              }
              else if (!*(_QWORD *)(a1 + 7360))
              {
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
              }
              goto LABEL_376;
            }
            v18 = v174;
            JSC::Parser<JSC::Lexer<unsigned char>>::parseDefaultValueForDestructuringPattern<JSC::ASTBuilder>(a1, a2, v175, v176, v177, v178, v179, v180);
            a3 = v181;
            LODWORD(v14) = 0;
            if (v181)
              v8 = 1;
          }
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_376;
          if ((_QWORD)v217)
          {
            if ((v8 & 1) != 0)
            {
              v215 = *(const char **)v217;
              v208 = "' not allowed in function with default parameter values";
            }
            else
            {
              if (!v216)
              {
                v215 = *(const char **)v217;
                if ((_DWORD)v14)
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[48]>(a1, (uint64_t *)&v215);
                else
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[35]>(a1, (uint64_t *)&v215);
                goto LABEL_376;
              }
              v215 = *(const char **)v217;
              v208 = "' not allowed in function with destructuring parameters";
            }
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[56]>(a1, (uint64_t *)&v215, v208);
LABEL_376:
            if (*v214 == 20 || (*v214 & 0x100000) != 0)
              goto LABEL_392;
            if (!*(_QWORD *)(a1 + 7360))
            {
              *(_QWORD *)&v217 = JSC::stringForFunctionMode();
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],char const*>(a1, (const char **)&v217);
            }
            goto LABEL_393;
          }
          if (a3)
            v182 = 1;
          else
            v182 = (char)v14;
          if ((v182 & 1) != 0 || v216)
            goto LABEL_347;
        }
        v183 = *v214;
LABEL_354:
        if (v183 == 3)
          goto LABEL_340;
        if (v183 != 20 && (v183 & 0x100000) == 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected a ')' or a ',' after a parameter declaration");
          goto LABEL_393;
        }
        goto LABEL_392;
      }
      if ((v20 & 0x200) == 0)
        goto LABEL_69;
      if ((v20 - 544) >= 3)
      {
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_166;
        v114 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
        v115 = *(unsigned int *)(a1 + 7408);
        v15 = *(unsigned int *)(a1 + 7412);
        v116 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v114 + 24))(v114);
        if (v117 <= v115)
        {
          v118 = 0x100000000;
          v116 = "";
        }
        else
        {
          LODWORD(v118) = v15 - v115;
          if ((int)v117 - (int)v115 > (v15 - v115) || (LODWORD(v118) = v117 - v115, (_DWORD)v115))
          {
            v118 = v118;
            v119 = v117 - v115;
            if ((v117 & 0xFF00000000) != 0)
            {
              if (v119 < v118)
                goto LABEL_346;
              v116 += v115;
              v118 = v118 | 0x100000000;
            }
            else
            {
              if (v119 < v118)
                goto LABEL_346;
              v116 += 2 * v115;
            }
          }
          else
          {
            v118 = v117;
          }
        }
        *(_QWORD *)&v217 = v116;
        *((_QWORD *)&v217 + 1) = v118;
        v120 = "getter";
        switch(v10)
        {
          case 0:
            v120 = "function";
            break;
          case 1:
          case 2:
            v120 = "generator function";
            break;
          case 3:
            break;
          case 4:
            v120 = "setter";
            break;
          case 5:
            v120 = "method";
            break;
          case 6:
            v120 = "arrow function";
            break;
          case 7:
          case 9:
            v120 = "async function";
            break;
          case 8:
          case 11:
            v120 = "async arrow function";
            break;
          case 10:
            v120 = "async method";
            break;
          case 12:
          case 13:
          case 14:
          case 19:
            __break(0xC471u);
            JUMPOUT(0x197E4ABDCLL);
          case 15:
          case 16:
            v120 = "async generator function";
            break;
          case 17:
            v120 = "async generator method";
            break;
          case 18:
            v120 = "generator method";
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x197E4ACA4);
        }
        v215 = v120;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&v217, &v215);
        goto LABEL_166;
      }
      if (v20 == 546)
      {
        v122 = *v9;
        if (*v9 && (*(_DWORD *)(v63 + 720 * v62 + 10) & 0x102000) == 0 && *(_DWORD *)(a1 + 7480) != 1)
          goto LABEL_69;
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_166;
        v123 = "getter";
        switch(v10)
        {
          case 0:
            v123 = "function";
            break;
          case 1:
          case 2:
            v123 = "generator function";
            break;
          case 3:
            break;
          case 4:
            v123 = "setter";
            break;
          case 5:
            v123 = "method";
            break;
          case 6:
            v123 = "arrow function";
            break;
          case 7:
          case 9:
            v123 = "async function";
            break;
          case 8:
          case 11:
            v123 = "async arrow function";
            break;
          case 10:
            v123 = "async method";
            break;
          case 12:
          case 13:
          case 14:
          case 19:
            __break(0xC471u);
            JUMPOUT(0x197E4AC5CLL);
          case 15:
          case 16:
            v123 = "async generator function";
            break;
          case 17:
            v123 = "async generator method";
            break;
          case 18:
            v123 = "generator method";
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x197E4AF04);
        }
        *(_QWORD *)&v217 = v123;
        if (!v122 || (v147 = *(_DWORD *)(v63 + 720 * v62 + 10), (v147 & 0x2000) != 0))
        {
          v148 = "in an async function";
        }
        else if ((v147 & 0x100000) != 0)
        {
          v148 = "in a static block";
        }
        else
        {
          if (*(_DWORD *)(a1 + 7480) != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197E4ACE4);
          }
          v148 = "in a module";
        }
        v215 = v148;
        v146 = "Cannot use 'await' as a ";
      }
      else
      {
        if (v20 == 544)
        {
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v62 + 9) & 1) != 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              *(_QWORD *)&v217 = JSC::stringForFunctionMode();
              v215 = "in strict mode";
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[6],char const(&)[2],char const*>(a1, (const char **)&v217, &v215);
            }
            goto LABEL_166;
          }
          goto LABEL_69;
        }
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v62 + 9) & 1) == 0 && (*(_BYTE *)(v63 + 720 * v62 + 11) & 2) == 0)
        {
LABEL_69:
          if (v20 == 20 || (v20 & 0x100000) != 0)
            goto LABEL_165;
          if (!*(_QWORD *)(a1 + 7360))
          {
            v87 = "getter";
            switch(v10)
            {
              case 0:
                v87 = "function";
                break;
              case 1:
              case 2:
                v87 = "generator function";
                break;
              case 3:
                break;
              case 4:
                v87 = "setter";
                break;
              case 5:
                v87 = "method";
                break;
              case 6:
                v87 = "arrow function";
                break;
              case 7:
              case 9:
                v87 = "async function";
                break;
              case 8:
              case 11:
                v87 = "async arrow function";
                break;
              case 10:
                v87 = "async method";
                break;
              case 12:
              case 13:
              case 14:
              case 19:
                __break(0xC471u);
                JUMPOUT(0x197E4ABBCLL);
              case 15:
              case 16:
                v87 = "async generator function";
                break;
              case 17:
                v87 = "async generator method";
                break;
              case 18:
                v87 = "generator method";
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x197E4AC7CLL);
            }
            *(_QWORD *)&v217 = v87;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[34],char const*,char const(&)[18]>(a1, (const char **)&v217);
          }
          goto LABEL_166;
        }
        if (*(_QWORD *)(a1 + 7360))
          goto LABEL_166;
        v124 = "getter";
        switch(v10)
        {
          case 0:
            v124 = "function";
            break;
          case 1:
          case 2:
            v124 = "generator function";
            break;
          case 3:
            break;
          case 4:
            v124 = "setter";
            break;
          case 5:
            v124 = "method";
            break;
          case 6:
            v124 = "arrow function";
            break;
          case 7:
          case 9:
            v124 = "async function";
            break;
          case 8:
          case 11:
            v124 = "async arrow function";
            break;
          case 10:
            v124 = "async method";
            break;
          case 12:
          case 13:
          case 14:
          case 19:
            __break(0xC471u);
            JUMPOUT(0x197E4AC3CLL);
          case 15:
          case 16:
            v124 = "async generator function";
            break;
          case 17:
            v124 = "async generator method";
            break;
          case 18:
            v124 = "generator method";
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x197E4AEE4);
        }
        *(_QWORD *)&v217 = v124;
        if ((v64 & 1) != 0)
        {
          v145 = "in strict mode";
        }
        else
        {
          if ((*(_BYTE *)(v63 + 720 * v62 + 11) & 2) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x197E4AC1CLL);
          }
          v145 = "in a generator function";
        }
        v215 = v145;
        v146 = "Cannot use 'yield' as a ";
      }
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[6],char const(&)[2],char const*>(a1, v146, (const char **)&v217, &v215);
      goto LABEL_166;
    }
    if (v20 == 12)
    {
LABEL_195:
      *((_DWORD *)v213 + 4) = 1;
      v143 = (JSC::FunctionParameters *)JSC::Parser<JSC::Lexer<unsigned char>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 4, 1, 0, 0, 0, 0);
      if (!v143)
      {
        if (*v214 == 20 || (*v214 & 0x100000) != 0)
          goto LABEL_165;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
        goto LABEL_166;
      }
      JSC::ASTBuilder::appendParameter((JSC::ASTBuilder *)v15, v143, 0, v144);
      goto LABEL_81;
    }
    v11 = v19;
    isAllowedIdentifierLet = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(a1, v20, *(_QWORD **)(a1 + 7376));
    v156 = *(_DWORD *)(a1 + 7368);
    if (isAllowedIdentifierLet
      || (isAllowedIdentifierYield = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, v156, *(_QWORD **)(a1 + 7376)), v156 = *(_DWORD *)(a1 + 7368), isAllowedIdentifierYield))
    {
      if (v156 != 2)
        goto LABEL_195;
    }
    else
    {
      if (v156 == 546)
        goto LABEL_195;
      if (v156 != 2)
      {
        if (v156 != 1048592
          || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
        {
          v158 = *(_DWORD *)(a1 + 12);
          if (!v158)
          {
            __break(0xC471u);
            JUMPOUT(0x197E4B3A0);
          }
          v159 = v158 - 1;
          if (v156 == 532 && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v159 + 9) & 1) != 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              *(_QWORD *)&v217 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
              *((_QWORD *)&v217 + 1) = v160;
              v215 = JSC::stringForFunctionMode();
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6],char const(&)[16]>(a1, (uint64_t)&v217, &v215);
            }
            goto LABEL_393;
          }
          if ((v156 - 531) <= 1)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              *(_QWORD *)&v217 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
              *((_QWORD *)&v217 + 1) = v206;
              v215 = JSC::stringForFunctionMode();
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&v217, &v215);
            }
            goto LABEL_393;
          }
          if ((v156 & 0x200) != 0)
          {
            if ((v156 - 544) >= 3)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                *(_QWORD *)&v217 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
                *((_QWORD *)&v217 + 1) = v207;
                v215 = JSC::stringForFunctionMode();
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&v217, &v215);
              }
              goto LABEL_393;
            }
            if (v156 == 544)
            {
              if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v159 + 9) & 1) != 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                {
                  *(_QWORD *)&v217 = JSC::stringForFunctionMode();
                  v215 = "in strict mode";
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[6],char const(&)[2],char const*>(a1, (const char **)&v217, &v215);
                }
                goto LABEL_393;
              }
            }
            else if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v159 + 9) & 1) != 0
                   || (*(_BYTE *)(*(_QWORD *)a1 + 720 * v159 + 11) & 2) != 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
              {
                *(_QWORD *)&v217 = JSC::stringForFunctionMode();
                v215 = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierYieldReason(a1);
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[6],char const(&)[2],char const*>(a1, "Cannot use 'yield' as a ", (const char **)&v217, &v215);
              }
              goto LABEL_393;
            }
          }
          if (v156 != 20 && (v156 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Expected an arrow function input parameter");
            goto LABEL_393;
          }
LABEL_392:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_393:
          v15 = 0;
LABEL_342:
          v19 = v11;
          goto LABEL_81;
        }
        goto LABEL_195;
      }
    }
    v163 = *(_DWORD *)(a1 + 7400);
    v164 = *(_DWORD *)(a1 + 7412);
    v165 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v163;
    *(_DWORD *)(a1 + 7448) = v164;
    *(_DWORD *)(a1 + 7452) = v165;
    v166 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v166 + 4) = v163;
    v167 = *(_DWORD *)(a1 + 12);
    if (!v167)
    {
      __break(0xC471u);
      JUMPOUT(0x197E4B3A8);
    }
    v19 = 720;
    v168 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v167 - 1) + 9) & 1;
    *(_BYTE *)(v166 + 56) = 0;
    v169 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v166, (uint64_t)v214, 0, v168, v152, v153, v154, v155);
    *(_DWORD *)(a1 + 7368) = v169;
    if (v169 != 3)
    {
      v8 = 0;
      v10 = 0;
      v216 = 0;
      *(_QWORD *)&v217 = 0;
      goto LABEL_321;
    }
    *((_DWORD *)v213 + 4) = 0;
LABEL_340:
    v190 = *(_DWORD *)(a1 + 7400);
    v191 = *(_DWORD *)(a1 + 7412);
    v192 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v190;
    *(_DWORD *)(a1 + 7448) = v191;
    *(_DWORD *)(a1 + 7452) = v192;
    v193 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v193 + 4) = v190;
    v194 = *(_DWORD *)(a1 + 12);
    if (!v194)
    {
      __break(0xC471u);
      JUMPOUT(0x197E4B3B8);
    }
    v195 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v194 - 1) + 9) & 1;
    *(_BYTE *)(v193 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v193, (uint64_t)v214, 0, v195, v170, v171, v172, v173);
    goto LABEL_342;
  }
  return v15;
}

uint64_t std::experimental::fundamentals_v3::expected<JSC::Parser<JSC::Lexer<unsigned char>>::ParseInnerResult,WTF::String>::expected<WTF::ASCIILiteral>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int *v6;

  if (a3)
  {
    v4 = a3 - 1;
    if (a3 == 1)
    {
      v6 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v6 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v6 = 2;
      v6[1] = v4;
      *((_QWORD *)v6 + 1) = a2;
      v6[4] = 4;
    }
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 88) = 1;
  return a1;
}

void JSC::Scope::declareCallee(uint64_t a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  _QWORD v21[3];
  __int16 v22;

  v2 = a1 + 120;
  v3 = *a2;
  if (*a2)
    *(_DWORD *)v3 += 2;
  v20 = v3;
  v22 = 0;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry>(v2, &v20, &v22, (uint64_t)v21);
  v11 = v20;
  v20 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  *(_WORD *)(v21[0] + 8) &= ~4u;
}

_QWORD *JSC::Parser<JSC::Lexer<unsigned char>>::parseAsyncFunctionSourceElements<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int32x2_t *v10;
  uint64_t v11;
  _QWORD *v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  char v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  char v59;
  char v60;
  int v61;
  int v62;
  __int8 v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  _QWORD *v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t AsyncFunctionBody;
  int v77;
  uint64_t *v78;
  uint64_t v79;
  _QWORD *v80;
  int v82;
  _QWORD *v83;
  int v84;
  int v85;
  uint64_t v86;
  __int8 v87;
  __int8 v88;
  int v89;
  char v90;
  char v91;
  char v92;
  int v93;
  int v94;
  _QWORD *v95;
  char v96;
  int v97;
  uint64_t v98;
  int32x2_t *v99;
  _BYTE v100[24];
  WTF *v101;
  int v102;
  _QWORD v103[2];
  _QWORD v104[3];
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  int v108;
  __int128 v109;

  v10 = (int32x2_t *)(a1 + 7404);
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD **)v11;
  if (*(_QWORD *)(v11 + 8) - *(_QWORD *)v11 <= 0xFuLL)
  {
    v86 = a2;
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    a2 = v86;
    v12 = *(_QWORD **)v11;
  }
  *(_QWORD *)v11 = v12 + 2;
  *v12 = 0;
  v12[1] = 0;
  v13 = (_DWORD *)(a1 + 7400);
  v14 = *(_DWORD *)(a1 + 7408);
  v109 = *(_OWORD *)(a1 + 7400);
  v15 = *(_QWORD *)(a1 + 7416);
  v16 = *(_DWORD *)(a1 + 7424);
  v17 = *(_DWORD *)(a1 + 7404);
  v108 = 0;
  v107 = 0u;
  v106 = 0u;
  v105 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
  v98 = a2;
  JSC::Parser<JSC::Lexer<unsigned char>>::createGeneratorParameters<JSC::ASTBuilder>(a1, a2, (_DWORD *)&v106 + 2, a4, a5, a6, a7, a8);
  v18 = *(_DWORD *)(a1 + 7400);
  v97 = v14;
  LODWORD(v107) = v14;
  DWORD2(v107) = v18;
  v19 = v10[8].u8[6];
  if (v19 == 11)
    v20 = 8;
  else
    v20 = 7;
  if (((1 << v19) & 0x30000) != 0)
    v21 = 15;
  else
    v21 = v20;
  v10[8].i8[6] = v21;
  v22 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  v104[0] = v22;
  v104[1] = v23;
  v104[2] = a1;
  if (*(_DWORD *)(v22 + 12) <= v23)
  {
    __break(0xC471u);
    goto LABEL_60;
  }
  JSC::Scope::setSourceParseMode(*(_QWORD *)v22 + 720 * v23, v10[8].u8[6]);
  v29 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v29)
  {
    __break(0xC471u);
    JUMPOUT(0x197E4BC00);
  }
  if ((_DWORD)v29 != 1)
  {
    v30 = v29 - 1;
    v31 = *(_QWORD *)a1;
    if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v29 - 1) + 10) & 0x400000) != 0)
    {
      v32 = 720 * v29;
      while (1)
      {
        v33 = v32 - 720;
        if (v32 == 720)
          break;
        v34 = *(_BYTE *)(v31 + v32 - 1428);
        v32 -= 720;
        if ((v34 & 0x40) != 0)
        {
          if (*(_BYTE *)(v31 + v33 - 712) != 2)
            *(_BYTE *)(v31 + 720 * v30 + 8) = 0;
          break;
        }
      }
    }
  }
  v103[0] = *(_QWORD *)(a1 + 7216);
  v35 = *(_QWORD *)(a1 + 7520);
  if (a3)
  {
    if (v35)
    {
      if (JSC::Parser<JSC::Lexer<unsigned char>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::ASTBuilder>(a1, v98))
      {
        goto LABEL_21;
      }
    }
    else if (JSC::Parser<JSC::Lexer<unsigned char>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::SyntaxChecker>(a1, (uint64_t)v103))
    {
      goto LABEL_21;
    }
    v84 = *(_DWORD *)(a1 + 7368);
    if (v84 != 20 && (v84 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of async arrow function");
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  if (!v35)
  {
    if (JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::SyntaxChecker>(a1, (uint64_t)v103, 0, v24, v25, v26, v27, v28))goto LABEL_21;
LABEL_48:
    v85 = *(_DWORD *)(a1 + 7368);
    if (v85 != 20 && (v85 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of async function");
      goto LABEL_54;
    }
LABEL_53:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_54:
    JSC::Parser<JSC::Lexer<unsigned char>>::AutoPopScopeRef::~AutoPopScopeRef((uint64_t)v104, v36, v37, v38, v39, v40, v41, v42);
    v74 = 0;
    goto LABEL_38;
  }
  if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::ASTBuilder>(a1, v98, 0, v24, v25, v26, v27, v28))goto LABEL_48;
LABEL_21:
  JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v100, (uint64_t *)a1, 1, v38, v39, v40, v41, v42);
  v50 = v101;
  if (v101)
  {
    v101 = 0;
    v102 = 0;
    WTF::fastFree((unint64_t)v50, v43, v44, v45, v46, v47, v48, v49);
  }
  v94 = v16;
  v95 = v12;
  v96 = v19;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v100, (WTF::AtomStringImpl *)v43, v44, v45, v46, v47, v48, v49);
  v55 = *(_DWORD *)(a1 + 12);
  if (!v55)
  {
    __break(0xC471u);
LABEL_60:
    JUMPOUT(0x197E4BBF8);
  }
  v56 = *(_DWORD *)(a1 + 7404);
  v57 = *(_DWORD *)(a1 + 7408);
  v58 = *(_QWORD *)a1 + 720 * (v55 - 1);
  v59 = *(_BYTE *)(v58 + 8);
  v60 = *(_BYTE *)(v58 + 9);
  v61 = *(_DWORD *)(a1 + 7484);
  v62 = DWORD2(v106);
  v99 = v10;
  v63 = v10[8].i8[6];
  v64 = v98;
  v65 = *(uint64_t **)(v98 + 8);
  v66 = *v65;
  v67 = v97;
  if ((unint64_t)(v65[1] - *v65) <= 0x8F)
  {
    v89 = DWORD2(v106);
    v91 = *(_BYTE *)(v58 + 9);
    v87 = v63;
    v93 = *(_DWORD *)(a1 + 7484);
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v98 + 8));
    v60 = v91;
    LOBYTE(v61) = v93;
    v63 = v87;
    v62 = v89;
    v67 = v97;
    v64 = v98;
    v66 = *v65;
  }
  v68 = v67 - v17;
  v69 = v57 - v56;
  *v65 = v66 + 144;
  v104[0] = v66;
  v70 = v65 + 5;
  v71 = *((unsigned int *)v65 + 13);
  if ((_DWORD)v71 == *((_DWORD *)v65 + 12))
  {
    v82 = v62;
    v88 = v63;
    v90 = v60;
    v92 = v61;
    v83 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v70, v71 + 1, (unint64_t)v104);
    v60 = v90;
    LOBYTE(v61) = v92;
    v63 = v88;
    v62 = v82;
    v67 = v97;
    v64 = v98;
    v71 = *((unsigned int *)v65 + 13);
    *(_QWORD *)(v65[5] + 8 * v71) = *v83;
  }
  else
  {
    *(_QWORD *)(*v70 + 8 * v71) = v66;
  }
  *((_DWORD *)v65 + 13) = v71 + 1;
  *(_DWORD *)(v66 + 16) = *v13;
  *(int32x2_t *)(v66 + 20) = vrev64_s32(*v99);
  *(_DWORD *)(v66 + 28) = -1;
  *(_BYTE *)(v66 + 32) = 0;
  *(_QWORD *)v66 = &off_1E3596470;
  *(_QWORD *)(v66 + 8) = &unk_1E3596490;
  if (a3)
    v72 = 256;
  else
    v72 = 0;
  *(_WORD *)(v66 + 33) = v72 & 0xFFEF | v59 & 3 | (4 * (v60 & 3)) & 0xEF | (16 * (v61 & 1)) | *(_WORD *)(v66 + 33) & 0xF800;
  *(_BYTE *)(v66 + 35) = v63;
  *(_QWORD *)(v66 + 40) = 0;
  *(_QWORD *)(v66 + 48) = 0;
  *(_DWORD *)(v66 + 56) = v68;
  *(_DWORD *)(v66 + 60) = v69;
  *(_DWORD *)(v66 + 64) = v67;
  *(_DWORD *)(v66 + 68) = v67;
  *(_DWORD *)(v66 + 72) = v67;
  *(_QWORD *)(v66 + 80) = 0;
  *(_QWORD *)(v66 + 88) = 0;
  *(_QWORD *)(v66 + 96) = -1;
  *(_QWORD *)(v66 + 104) = 0;
  *(_QWORD *)(v66 + 112) = 0;
  *(_QWORD *)(v66 + 120) = -1;
  *(_DWORD *)(v66 + 128) = DWORD2(v109);
  *(_DWORD *)(v66 + 132) = v62;
  *(_DWORD *)(v66 + 136) = 0;
  *(_QWORD *)&v106 = v66;
  HIDWORD(v107) = *v13;
  if ((a3 & 1) != 0)
    v73 = 7412;
  else
    v73 = 7380;
  v74 = v95;
  DWORD1(v107) = *(_DWORD *)(a1 + v73);
  v108 = v68;
  v75 = v64;
  AsyncFunctionBody = JSC::ASTBuilder::createAsyncFunctionBody(v64, (uint64_t)&v109, (uint64_t)&v105, v21, v51, v52, v53, v54);
  v77 = *(_DWORD *)(a1 + 7444);
  v78 = *(uint64_t **)(v75 + 8);
  v79 = *v78;
  if ((unint64_t)(v78[1] - *v78) <= 0x2F)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v75 + 8));
    v79 = *v78;
  }
  *v78 = v79 + 48;
  *(_BYTE *)(v79 + 24) = 0;
  *(_QWORD *)v79 = &off_1E35899B8;
  *(_QWORD *)(v79 + 32) = 0;
  *(_QWORD *)(v79 + 40) = AsyncFunctionBody;
  *(_DWORD *)(v79 + 28) = v77;
  *(_QWORD *)(v79 + 8) = v15;
  *(_DWORD *)(v79 + 16) = v94;
  *(_DWORD *)(v79 + 20) = -1;
  if (*v95)
  {
    v80 = v95 + 1;
    *(_QWORD *)(v95[1] + 32) = v79;
  }
  else
  {
    *v95 = v79;
    v80 = v95 + 1;
  }
  v10 = v99;
  LOBYTE(v19) = v96;
  *v80 = v79;
LABEL_38:
  v10[8].i8[6] = v19;
  return v74;
}

_QWORD *JSC::Parser<JSC::Lexer<unsigned char>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::ASTBuilder>(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  JSC::ParserArena *v13;
  uint64_t v14;
  void (**v15)(JSC::ReturnNode *__hidden);
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if ((unint64_t)&v21 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v12 = 0;
      *(_BYTE *)(a1 + 7352) = 1;
      return v12;
    }
    return 0;
  }
  v4 = *(_DWORD *)(a1 + 7416);
  v5 = *(_DWORD *)(a1 + 7420);
  v6 = *(_DWORD *)(a1 + 7424);
  LODWORD(v22) = 0;
  v23 = *(_QWORD *)(a1 + 7496);
  v24 = a1;
  *(_QWORD *)(a1 + 7496) = &v22;
  v7 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, &v22);
  *(_QWORD *)(v24 + 7496) = v23;
  if (!v7)
  {
    v20 = *(_DWORD *)(a1 + 7368);
    if (v20 == 20 || (v20 & 0x100000) != 0)
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the arrow function expression");
    }
    return 0;
  }
  v8 = v7;
  *(_DWORD *)(v7 + 20) = *(_DWORD *)(a1 + 7448);
  v9 = *(_DWORD *)(a1 + 7428);
  v10 = *(_QWORD *)(a1 + 7432);
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD **)v11;
  if (*(_QWORD *)(v11 + 8) - *(_QWORD *)v11 <= 0xFuLL)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v12 = *(_QWORD **)v11;
  }
  *(_QWORD *)v11 = v12 + 2;
  *v12 = 0;
  v12[1] = 0;
  v13 = *(JSC::ParserArena **)(a2 + 8);
  v14 = *(_QWORD *)v13;
  if (*((_QWORD *)v13 + 1) - *(_QWORD *)v13 <= 0x57uLL)
  {
    JSC::ParserArena::allocateFreeablePool(v13);
    v14 = *(_QWORD *)v13;
  }
  *(_QWORD *)v13 = v14 + 88;
  *(_QWORD *)(v14 + 32) = 0;
  v15 = &off_1E358A520;
  *(_QWORD *)v14 = &off_1E358A520;
  *(_QWORD *)(v14 + 80) = v8;
  *(_DWORD *)(v14 + 40) = v9;
  *(_QWORD *)(v14 + 44) = v10;
  *(_DWORD *)(v14 + 52) = v4;
  *(_DWORD *)(v14 + 56) = v5;
  *(_DWORD *)(v14 + 60) = v6;
  *(_DWORD *)(v14 + 64) = v9;
  *(_QWORD *)(v14 + 68) = v10;
  *(_DWORD *)(v14 + 28) = v9;
  *(_DWORD *)(v14 + 8) = v4;
  *(_DWORD *)(v14 + 12) = v5;
  *(_DWORD *)(v14 + 16) = v6;
  *(_DWORD *)(v14 + 20) = *(_DWORD *)(a1 + 7448);
  *(_BYTE *)(v14 + 24) = 1;
  v16 = *(_QWORD *)(v14 + 8);
  v22 = v16;
  LODWORD(v23) = v6;
  v17 = *(_QWORD *)(a1 + 7520);
  if (v17 && (v16 & 0x80000000) == 0)
  {
    JSC::DebuggerPausePositions::appendPause(v17, (uint64_t)&v22);
    v15 = *(void (***)(JSC::ReturnNode *__hidden))v14;
  }
  if ((((uint64_t (*)(uint64_t))v15[5])(v14) & 1) == 0)
  {
    if (*v12)
    {
      v18 = v12 + 1;
      *(_QWORD *)(v12[1] + 32) = v14;
    }
    else
    {
      *v12 = v14;
      v18 = v12 + 1;
    }
    *v18 = v14;
  }
  return v12;
}

_QWORD *JSC::Parser<JSC::Lexer<unsigned char>>::parseModuleSourceElements<JSC::ASTBuilder>(uint64_t a1, JSC::ParserArena **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v10;
  JSC::ParserArena *v11;
  _QWORD *v12;
  int *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  unsigned __int8 v36;
  int v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  char v43;
  int v44;
  uint64_t v45;
  int v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v65;
  _OWORD *v66;
  unsigned __int8 *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  int v83;
  BOOL v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  __n128 v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t *v137;
  uint64_t v138;
  int v139;
  int v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v150;
  uint64_t *v151;
  int v152;
  WTF::AtomStringImpl *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  int v157;
  char v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  int v179;
  int v180;
  WTF::AtomStringImpl *v181;
  uint64_t v182;
  unsigned __int8 *v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  WTF *v193;
  int v194;
  WTF::StringImpl *v195;
  uint64_t v196;
  uint64_t *v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  WTF::StringImpl **v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  int v205;
  int v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  _QWORD *v211;
  __int128 v212;
  int v213;
  _QWORD *v214;
  int v215;
  WTF::StringImpl **v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  WTF::StringImpl **v229;
  uint64_t v230;
  WTF::StringImpl *v231;
  int v232;
  WTF::StringImpl *v233;
  int v234;
  uint64_t *v235;
  uint64_t v236;
  int32x2_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  int v242;
  int v243;
  int v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  unint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  unint64_t v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  int v267;
  int v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  WTF *v274;
  WTF *v275;
  _QWORD *v276;
  WTF::StringImpl **v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  int v284;
  int v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  int v302;
  int v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  int v309;
  int v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  int v314;
  WTF::StringImpl *v315;
  uint64_t v316;
  int v317;
  int v318;
  int v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  int v325;
  int v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  uint64_t *v330;
  int v331;
  int v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  int v336;
  int v337;
  int v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  int v347;
  int v348;
  int v349;
  int v350;
  _OWORD *v351;
  unsigned __int8 *v352;
  WTF::StringImpl *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  __int128 v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  unsigned int v363;
  int v364;
  uint64_t v365;
  char v366;
  int v367;
  int v368;
  int v369;
  WTF::AtomStringImpl *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  WTF::StringImpl *v378;
  uint64_t v379;
  unint64_t v380;
  char *v381;
  char v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  int v386;
  int v387;
  int v388;
  WTF::AtomStringImpl *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  int v396;
  uint64_t v397;
  WTF::StringImpl *v398;
  uint64_t v399;
  WTF::StringImpl *v400;
  unint64_t v401;
  unsigned __int16 *v402;
  uint64_t v403;
  int v404;
  int v405;
  int v406;
  uint64_t v407;
  int v408;
  unsigned __int8 *v409;
  uint64_t v410;
  int v411;
  int v412;
  int v413;
  int v414;
  uint64_t v415;
  int v416;
  uint64_t v417;
  unint64_t v418;
  void *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  int v428;
  int v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  int v438;
  const char *v439;
  uint64_t v440;
  int v441;
  int v442;
  int v443;
  uint64_t v444;
  int v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  unint64_t v449;
  unint64_t v450;
  unsigned __int16 *v451;
  uint64_t v452;
  uint64_t v453;
  int v454;
  int v455;
  int v456;
  uint64_t v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  _QWORD *ExportSpecifierList;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  int v477;
  int v478;
  uint64_t v479;
  int v480;
  uint64_t v481;
  int v482;
  int v483;
  uint64_t v485;
  uint64_t v486;
  WTF::StringImpl **v487;
  WTF::StringImpl **v488;
  uint64_t v489;
  WTF::StringImpl **v490;
  int v491;
  uint64_t v492;
  WTF::StringImpl *v493;
  uint64_t *v494;
  uint64_t v495;
  unsigned int v496;
  unsigned int v497;
  uint64_t v498;
  WTF::StringImpl *v499;
  int v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t *v503;
  WTF::StringImpl *v504;
  int v505;
  uint64_t v506;
  unsigned int v507;
  int v508;
  unsigned int v509;
  WTF::StringImpl *v510;
  int v511;
  WTF::StringImpl *v512;
  uint64_t v513;
  WTF::StringImpl *v514;
  int v515;
  int v516;
  uint64_t *v517;
  uint64_t v518;
  WTF::StringImpl *v519;
  unsigned int v520;
  unsigned int v521;
  WTF::StringImpl **v522;
  unint64_t v523;
  void *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v532;
  void *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  unint64_t v540;
  void *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t v548;
  void *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  int v557;
  uint64_t v558;
  __int128 *v559;
  uint64_t v560;
  __int128 v561;
  const char *v562;
  uint64_t v563;
  uint64_t v564;
  WTF::AtomStringImpl *v565;
  uint64_t v566;
  uint64_t v567;
  unsigned int v568;
  int v569;
  int v570;
  int v571;
  uint64_t v572;
  int v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  int v580;
  int v581;
  int v582;
  uint64_t v583;
  int v584;
  uint64_t v585;
  int *v586;
  WTF::AtomStringImpl *v587;
  uint64_t v588;
  uint64_t v589;
  unsigned int v590;
  int v591;
  int v592;
  int v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  int v602;
  int v603;
  int v604;
  int v605;
  WTF::AtomStringImpl *v606;
  uint64_t v607;
  uint64_t v608;
  unsigned int v609;
  WTF::StringImpl *v610;
  uint64_t v611;
  int v612;
  unint64_t v613;
  void *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  unint64_t v621;
  void *v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v630;
  uint64_t v631;
  int v632;
  int v633;
  int v634;
  uint64_t v635;
  int v636;
  uint64_t v637;
  uint64_t v638;
  int v639;
  uint64_t v640;
  uint64_t v641;
  unint64_t v642;
  void *v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  int v651;
  int v652;
  int v653;
  uint64_t v654;
  int v655;
  uint64_t v656;
  uint64_t v657;
  _OWORD *v658;
  uint64_t v659;
  uint64_t *v660;
  uint64_t v661;
  int v662;
  WTF::AtomStringImpl *v663;
  uint64_t v664;
  uint64_t v665;
  int v666;
  unsigned int v667;
  char v668;
  int v669;
  int v670;
  int v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  int v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  _DWORD *v685;
  uint64_t v686;
  int v687;
  int v688;
  int v689;
  int v690;
  uint64_t v691;
  unsigned __int8 *v692;
  WTF::StringImpl *v693;
  uint64_t v694;
  int v695;
  int v696;
  int v697;
  uint64_t v698;
  int v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  BOOL v712;
  uint64_t v713;
  _DWORD *v714;
  int v715;
  int v716;
  int v717;
  int v718;
  uint64_t v719;
  uint64_t v720;
  int v721;
  uint64_t v722;
  int v723;
  int v724;
  int v725;
  uint64_t v726;
  int v727;
  uint64_t v728;
  uint64_t v729;
  unint64_t v730;
  void *v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  int v738;
  _QWORD *v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  int v746;
  int v747;
  int v748;
  int v749;
  uint64_t v750;
  WTF::AtomStringImpl *v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  int v758;
  uint64_t v759;
  unsigned __int8 *v760;
  WTF::StringImpl *v761;
  _DWORD *v762;
  int v763;
  int v764;
  int v765;
  int v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  _DWORD *v776;
  int v777;
  int v778;
  int v779;
  int v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  _DWORD *v789;
  int v790;
  int v791;
  int v792;
  int v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  WTF::StringImpl *v803;
  unsigned __int16 *v804;
  unint64_t v805;
  _BOOL4 hasUnpairedSurrogate;
  unint64_t v807;
  void *v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  unint64_t v815;
  void *v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  int v824;
  WTF::AtomStringImpl *v825;
  _OWORD *v826;
  unsigned int v827;
  uint64_t *v828;
  _OWORD *v829;
  uint64_t v830;
  __int128 v831;
  _QWORD *v832;
  _OWORD *v833;
  unsigned __int8 *v834;
  int *v835;
  _OWORD *v836;
  uint64_t *v837;
  uint64_t v838;
  WTF::StringImpl *v839;
  int v840;
  WTF *v841[2];
  __int128 v842;
  uint64_t v843;
  _OWORD v844[2];

  v8 = (uint64_t)a2;
  v10 = (unsigned __int8 *)(a1 + 7344);
  v11 = a2[1];
  v12 = *(_QWORD **)v11;
  if (*((_QWORD *)v11 + 1) - *(_QWORD *)v11 <= 0xFuLL)
  {
    JSC::ParserArena::allocateFreeablePool(a2[1]);
    v12 = *(_QWORD **)v11;
  }
  *(_QWORD *)v11 = v12 + 2;
  v13 = (int *)(a1 + 7368);
  v14 = (_OWORD *)(a1 + 7400);
  *v12 = 0;
  v12[1] = 0;
  v15 = *(_QWORD *)(a1 + 7216);
  v837 = (uint64_t *)a1;
  v838 = v15;
  v828 = (uint64_t *)(a1 + 7428);
  v16 = (_OWORD *)(a1 + 7296);
  v835 = (int *)(a1 + 7368);
  v836 = (_OWORD *)(a1 + 7296);
  v832 = v12;
  v833 = (_OWORD *)(a1 + 7400);
  v834 = v10;
  while (*v13 != 540)
  {
    if (*v13 != 539)
      goto LABEL_6;
    v32 = (uint64_t)v837;
    *(_OWORD *)v841 = *((_OWORD *)v837 + 456);
    v33 = v8;
    v34 = *((_DWORD *)v837 + 1829);
    v843 = v837[917];
    v842 = *(_OWORD *)((char *)v16 + 24);
    v35 = v10;
    v36 = *v10;
    LODWORD(v830) = v35[1];
    *(_QWORD *)&v831 = v33;
    v37 = *(_DWORD *)(v33 + 1052);
    v38 = (WTF::AtomStringImpl *)*((int *)v837 + 1852);
    v39 = *((int *)v837 + 1851);
    v40 = v837[911];
    v41 = *(_DWORD *)v40;
    v42 = *(_DWORD *)(v40 + 4);
    v43 = *(_BYTE *)(v40 + 56);
    LODWORD(v35) = *((_DWORD *)v837 + 1850);
    LODWORD(v33) = *((_DWORD *)v837 + 1853);
    *((_DWORD *)v837 + 1861) = (_DWORD)v35;
    *(_DWORD *)(v32 + 7448) = v33;
    *(_DWORD *)(v32 + 7452) = v39;
    *(_DWORD *)(v40 + 4) = (_DWORD)v35;
    v44 = *(_DWORD *)(v32 + 12);
    if (!v44)
    {
      __break(0xC471u);
      JUMPOUT(0x197E4F494);
    }
    v829 = (_OWORD *)((char *)v16 + 24);
    v45 = *(_BYTE *)(*(_QWORD *)v32 + 720 * (v44 - 1) + 9) & 1;
    *(_BYTE *)(v40 + 56) = 0;
    v46 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v40, (uint64_t)v835, 0, v45, a5, a6, a7, a8);
    *(_DWORD *)(v32 + 7368) = v46;
    if (v46 == 2)
    {
      JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(v32 + 7288), v38, v39, v49, v50, v51, v52, v53);
      v346 = *(_QWORD *)(v32 + 7288);
      *(_DWORD *)v346 = v41;
      *(_BYTE *)(v346 + 56) = v43;
      v347 = *(_DWORD *)(v32 + 7400);
      v348 = *(_DWORD *)(v32 + 7412);
      v349 = *(_DWORD *)(v32 + 7404);
      *(_DWORD *)(v32 + 7444) = v347;
      *(_DWORD *)(v32 + 7448) = v348;
      *(_DWORD *)(v32 + 7452) = v349;
      *(_DWORD *)(v346 + 4) = v347;
      v350 = *(_DWORD *)(v32 + 12);
      if (!v350)
      {
        __break(0xC471u);
        JUMPOUT(0x197E4F484);
      }
      v13 = v835;
      *(_DWORD *)(v32 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v346, (uint64_t)v835, 0, *(_BYTE *)(*(_QWORD *)v32 + 720 * (v350 - 1) + 9) & 1, v342, v343, v344, v345);
      *(_DWORD *)(*(_QWORD *)(v32 + 7288) + 4) = v42;
      *v836 = *(_OWORD *)v841;
      *(_DWORD *)(v32 + 7312) = v37;
      *(_DWORD *)(v32 + 7316) = v34;
      v351 = v829;
      *v829 = v842;
      *((_QWORD *)v351 + 2) = v843;
      v352 = v834;
      *v834 = v36;
      v10 = v352;
      v352[1] = v830;
      v8 = v831;
      *(_DWORD *)(v831 + 1052) = v37;
      v353 = *(WTF::StringImpl **)(v32 + 7360);
      *(_QWORD *)(v32 + 7360) = 0;
      v12 = v832;
      v14 = v833;
      if (v353)
      {
        if (*(_DWORD *)v353 == 2)
        {
          WTF::StringImpl::~StringImpl(v353, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v418, v419, v420, v421, v422, v423, v424, v425);
        }
        else
        {
          *(_DWORD *)v353 -= 2;
        }
      }
      goto LABEL_263;
    }
    v54 = v46;
    v55 = *(_QWORD *)(v32 + 7288);
    *(_BYTE *)(v55 + 150) = 0;
    v56 = *(WTF::StringImpl **)(v55 + 152);
    *(_QWORD *)(v55 + 152) = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
      {
        WTF::StringImpl::~StringImpl(v56, v47, v48, v49, v50, v51, v52, v53);
        WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
      }
      else
      {
        *(_DWORD *)v56 -= 2;
      }
    }
    v57 = *(_QWORD *)(v55 + 88);
    v58 = *(_QWORD *)(v55 + 96);
    *(_QWORD *)(v55 + 80) = (char *)v38 + v57;
    *(_QWORD *)(v55 + 112) = v57 + v39;
    *(_DWORD *)(v55 + 20) = 0;
    *(_DWORD *)(v55 + 36) = 0;
    if ((unint64_t)v38 + v57 >= v58)
      v59 = 0;
    else
      v59 = *((_BYTE *)v38 + v57);
    *(_BYTE *)(v55 + 176) = v59;
    v60 = (uint64_t)v837;
    v61 = v837[911];
    *(_DWORD *)v61 = v41;
    *(_BYTE *)(v61 + 56) = v43;
    v62 = *(_DWORD *)(v60 + 7400);
    v63 = *(_DWORD *)(v60 + 7412);
    v64 = *(_DWORD *)(v60 + 7404);
    *(_DWORD *)(v60 + 7444) = v62;
    *(_DWORD *)(v60 + 7448) = v63;
    *(_DWORD *)(v60 + 7452) = v64;
    *(_DWORD *)(v61 + 4) = v62;
    v65 = *(_DWORD *)(v60 + 12);
    if (!v65)
    {
      __break(0xC471u);
      JUMPOUT(0x197E4F454);
    }
    v13 = v835;
    *(_DWORD *)(v60 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v61, (uint64_t)v835, 0, *(_BYTE *)(*(_QWORD *)v60 + 720 * (v65 - 1) + 9) & 1, v50, v51, v52, v53);
    *(_DWORD *)(*(_QWORD *)(v60 + 7288) + 4) = v42;
    *v836 = *(_OWORD *)v841;
    *(_DWORD *)(v60 + 7312) = v37;
    *(_DWORD *)(v60 + 7316) = v34;
    v66 = v829;
    *v829 = v842;
    *((_QWORD *)v66 + 2) = v843;
    v67 = v834;
    *v834 = v36;
    v10 = v67;
    v67[1] = v830;
    v8 = v831;
    *(_DWORD *)(v831 + 1052) = v37;
    v68 = *(WTF::StringImpl **)(v60 + 7360);
    *(_QWORD *)(v60 + 7360) = 0;
    v12 = v832;
    v14 = v833;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
      {
        WTF::StringImpl::~StringImpl(v68, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
      }
      else
      {
        *(_DWORD *)v68 -= 2;
      }
    }
    if (v54 == 19)
    {
LABEL_263:
      v16 = v836;
LABEL_6:
      v841[0] = 0;
      LODWORD(v839) = 0;
      if (v10[130] != 13)
      {
        v85 = (uint64_t)v837;
        v86 = *((_DWORD *)v837 + 1864);
        *((_DWORD *)v837 + 1864) = v86 + 1;
        if ((unint64_t)&v823 < *(_QWORD *)(*(_QWORD *)(v85 + 7216) + 93104))
        {
          v88 = (uint64_t)v837;
          if (!v837[920])
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>((uint64_t)v837);
            v28 = 0;
            v10[8] = 1;
            goto LABEL_72;
          }
          goto LABEL_92;
        }
        v87 = *v13;
        if (*v13 <= 522)
        {
          if (v87 == 12)
          {
LABEL_54:
            v88 = (uint64_t)v837;
            if (*(_QWORD *)v837[922] != *(_QWORD *)(*(_QWORD *)(v837[902] + 41952) + 896) || v10[40])
              goto LABEL_55;
            v660 = v837 + 912;
            v844[0] = *((_OWORD *)v837 + 456);
            LODWORD(v831) = *((_DWORD *)v837 + 1829);
            v843 = v837[917];
            v842 = *(_OWORD *)(v837 + 915);
            LODWORD(v830) = *v10;
            LODWORD(v829) = v10[1];
            v661 = v8;
            v662 = *(_DWORD *)(v8 + 1052);
            v663 = (WTF::AtomStringImpl *)*((unsigned int *)v837 + 1852);
            v664 = *((unsigned int *)v837 + 1851);
            v665 = v837[911];
            v667 = *(_DWORD *)v665;
            v666 = *(_DWORD *)(v665 + 4);
            v668 = *(_BYTE *)(v665 + 56);
            v827 = *((_DWORD *)v837 + 1855);
            v669 = *((_DWORD *)v837 + 1850);
            v670 = *((_DWORD *)v837 + 1853);
            *((_DWORD *)v837 + 1861) = v669;
            *(_DWORD *)(v88 + 7448) = v670;
            *(_DWORD *)(v88 + 7452) = v664;
            *(_DWORD *)(v665 + 4) = v669;
            v671 = *(_DWORD *)(v88 + 12);
            if (!v671)
            {
              __break(0xC471u);
              JUMPOUT(0x197E4F48CLL);
            }
            v672 = (uint64_t)v837;
            v673 = *(_BYTE *)(*v837 + 720 * (v671 - 1) + 9) & 1;
            *(_BYTE *)(v665 + 56) = 0;
            v679 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v665, (uint64_t)v835, 0, v673, a5, a6, a7, a8);
            *(_DWORD *)(v672 + 7368) = v679;
            v680 = *(_QWORD *)(v672 + 7288);
            if (v679 != 523 || *(_BYTE *)(v680 + 56))
            {
              JSC::Lexer<unsigned char>::setOffset(v680, v663, v664, v674, v675, v676, v677, v678);
              v685 = v837;
              v686 = v837[911];
              *(_DWORD *)v686 = v667;
              *(_BYTE *)(v686 + 56) = v668;
              v687 = v685[1850];
              v688 = v685[1853];
              v689 = v685[1851];
              v685[1861] = v687;
              v685[1862] = v688;
              v685[1863] = v689;
              *(_DWORD *)(v686 + 4) = v687;
              v690 = v685[3];
              if (!v690)
              {
                __break(0xC471u);
                JUMPOUT(0x197E4F47CLL);
              }
              v691 = (uint64_t)v837;
              *(_DWORD *)(v691 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v686, (uint64_t)v835, 0, *(_BYTE *)(*v837 + 720 * (v690 - 1) + 9) & 1, v681, v682, v683, v684);
              *(_DWORD *)(*(_QWORD *)(v691 + 7288) + 4) = v666;
              *(_OWORD *)v660 = v844[0];
              *(_DWORD *)(v691 + 7312) = v662;
              *(_DWORD *)(v691 + 7316) = v831;
              *(_OWORD *)(v660 + 3) = v842;
              v660[5] = v843;
              v692 = v834;
              *v834 = v830;
              v692[1] = v829;
              *(_DWORD *)(v661 + 1052) = v662;
              v693 = *(WTF::StringImpl **)(v691 + 7360);
              *(_QWORD *)(v691 + 7360) = 0;
              if (v693)
              {
                if (*(_DWORD *)v693 == 2)
                {
                  WTF::StringImpl::~StringImpl(v693, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v807, v808, v809, v810, v811, v812, v813, v814);
                }
                else
                {
                  *(_DWORD *)v693 -= 2;
                }
              }
              v16 = v836;
              v88 = (uint64_t)v837;
              v12 = v832;
              v14 = v833;
              v8 = v661;
              v10 = v834;
LABEL_55:
              v89 = *(_DWORD *)(v88 + 12);
              if (!v89)
              {
                __break(0xC471u);
                JUMPOUT(0x197E4F474);
              }
              if ((*(_BYTE *)(*(_QWORD *)v88 + 720 * (v89 - 1) + 12) & 0x10) == 0)
              {
LABEL_57:
                v90 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpressionOrLabelStatement<JSC::ASTBuilder>(v88, (void *)v8, 1, a4, a5, a6, a7, a8);
                v28 = v90;
                if (v90)
                {
                  v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 96))(v90);
                  goto LABEL_59;
                }
                goto LABEL_72;
              }
              if (*v835 == 546)
              {
                if (v837[920])
                  goto LABEL_652;
                v562 = "Cannot use 'await' within static block";
LABEL_514:
                v88 = (uint64_t)v837;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>((uint64_t)v837, 1, v562);
                v28 = 0;
              }
              else
              {
                v88 = (uint64_t)v837;
                if (*v835 != 545)
                  goto LABEL_57;
                if (!v837[920])
                {
                  v562 = "Cannot use 'yield' within static block";
                  goto LABEL_514;
                }
LABEL_652:
                v28 = 0;
LABEL_508:
                v88 = (uint64_t)v837;
              }
              goto LABEL_62;
            }
            v8 = v661;
            v28 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAsyncFunctionDeclaration<JSC::ASTBuilder>((uint64_t)v837, v661, v827, 1, 0, 0, v677, v678);
            v12 = v832;
            v14 = v833;
            v10 = v834;
            v16 = v836;
LABEL_121:
            if (v28)
            {
              v88 = (uint64_t)v837;
              *(_DWORD *)(v28 + 20) = *((_DWORD *)v837 + 1862);
              goto LABEL_72;
            }
LABEL_122:
            v88 = (uint64_t)v837;
            goto LABEL_72;
          }
          if (v87 == 521)
          {
            v95 = JSC::Parser<JSC::Lexer<unsigned char>>::parseVariableDeclaration<JSC::ASTBuilder>((uint64_t)v837, v8, 2u, 1u);
            v28 = v95;
            if (!v95)
              goto LABEL_122;
            v88 = (uint64_t)v837;
            *(_DWORD *)(v95 + 20) = *((_DWORD *)v837 + 1862);
LABEL_60:
            *(_BYTE *)(v28 + 24) = 1;
            v92 = *(_QWORD *)(v88 + 7520);
            if (v92)
            {
              v556 = *(_QWORD *)(v28 + 8);
              if ((v556 & 0x80000000) == 0)
              {
                v557 = *(_DWORD *)(v28 + 16);
                LODWORD(v842) = 2;
                *(_QWORD *)((char *)&v842 + 4) = v556;
                HIDWORD(v842) = v557;
                v558 = *(unsigned int *)(v92 + 12);
                if ((_DWORD)v558 == *(_DWORD *)(v92 + 8))
                {
                  v559 = (__int128 *)WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v92, v558 + 1, (unint64_t)&v842);
                  v558 = *(unsigned int *)(v92 + 12);
                  v560 = *(_QWORD *)v92;
                  v561 = *v559;
                }
                else
                {
                  v560 = *(_QWORD *)v92;
                  v561 = v842;
                }
                *(_OWORD *)(v560 + 16 * v558) = v561;
                ++*(_DWORD *)(v92 + 12);
              }
              goto LABEL_508;
            }
            v88 = (uint64_t)v837;
LABEL_62:
            v16 = v836;
            goto LABEL_72;
          }
LABEL_71:
          v88 = (uint64_t)v837;
          --*((_DWORD *)v837 + 1864);
          v28 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::ASTBuilder>(v88, v8, v841, &v839, a5, a6, a7, a8);
          goto LABEL_72;
        }
        if (v87 <= 543)
        {
          if (v87 == 523)
          {
            v94 = JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionDeclaration<JSC::ASTBuilder>((uint64_t)v837, v8, 0, 1, 0, 0, a7, a8);
          }
          else
          {
            if (v87 != 541)
              goto LABEL_71;
            v94 = JSC::Parser<JSC::Lexer<unsigned char>>::parseClassDeclaration<JSC::ASTBuilder>((uint64_t)v837, v8, 1, 0);
          }
          v28 = v94;
          goto LABEL_121;
        }
        if (v87 != 544)
        {
          v88 = (uint64_t)v837;
          if ((v87 - 545) < 2)
            goto LABEL_55;
          if (v87 != 1048592)
            goto LABEL_71;
          if (JSC::Parser<JSC::Lexer<unsigned char>>::matchAllowedEscapedContextualKeyword((uint64_t)v837))
            goto LABEL_54;
          v88 = (uint64_t)v837;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError((uint64_t)v837);
LABEL_92:
          v28 = 0;
          goto LABEL_72;
        }
        v279 = (uint64_t)v837;
        v280 = *((_DWORD *)v837 + 3);
        if (!v280)
        {
          __break(0xC471u);
          JUMPOUT(0x197E4F46CLL);
        }
        if ((*(_BYTE *)(*v837 + 720 * (v280 - 1) + 9) & 1) != 0)
        {
LABEL_213:
          v281 = JSC::Parser<JSC::Lexer<unsigned char>>::parseVariableDeclaration<JSC::ASTBuilder>(v279, v8, 1u, 1u);
        }
        else
        {
          v359 = *((_OWORD *)v837 + 456);
          *(_QWORD *)&v831 = v837 + 915;
          v844[0] = v359;
          v827 = *((_DWORD *)v837 + 1829);
          v843 = v837[917];
          v842 = *(_OWORD *)(v837 + 915);
          LODWORD(v829) = *v10;
          LODWORD(v830) = v10[1];
          v360 = *(_DWORD *)(v8 + 1052);
          v825 = (WTF::AtomStringImpl *)*((int *)v837 + 1852);
          v826 = v837 + 912;
          v361 = *((int *)v837 + 1851);
          v362 = v837[911];
          v363 = *(_DWORD *)v362;
          v364 = *(_DWORD *)(v362 + 4);
          v365 = (uint64_t)v13;
          v366 = *(_BYTE *)(v362 + 56);
          v367 = *((_DWORD *)v837 + 1850);
          v368 = *((_DWORD *)v837 + 1853);
          *((_DWORD *)v837 + 1861) = v367;
          *(_DWORD *)(v279 + 7448) = v368;
          *(_DWORD *)(v279 + 7452) = v361;
          *(_DWORD *)(v362 + 4) = v367;
          *(_BYTE *)(v362 + 56) = 0;
          v369 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v362, v365, 0, 0, a5, a6, a7, a8);
          *(_DWORD *)(v279 + 7368) = v369;
          if (v369 == 12
            || (v738 = v369, (v369 - 544) < 3)
            || !v369
            || v369 == 1048592
            && ((v739 = *(_QWORD **)(*(_QWORD *)(v279 + 7216) + 41952),
                 v740 = **(_QWORD **)(v279 + 7376),
                 v740 == v739[41])
             || v740 == v739[62]
             || v740 == v739[16]))
          {
            v377 = *(_QWORD *)(v279 + 7288);
            *(_BYTE *)(v377 + 150) = 0;
            v378 = *(WTF::StringImpl **)(v377 + 152);
            *(_QWORD *)(v377 + 152) = 0;
            v16 = v836;
            if (v378)
            {
              if (*(_DWORD *)v378 == 2)
              {
                WTF::StringImpl::~StringImpl(v378, v370, v371, v372, v373, v374, v375, v376);
                WTF::fastFree(v613, v614, v615, v616, v617, v618, v619, v620);
              }
              else
              {
                *(_DWORD *)v378 -= 2;
              }
            }
            v379 = *(_QWORD *)(v377 + 88);
            v380 = *(_QWORD *)(v377 + 96);
            v381 = (char *)v825 + v379;
            *(_QWORD *)(v377 + 80) = (char *)v825 + v379;
            *(_QWORD *)(v377 + 112) = v379 + v361;
            *(_DWORD *)(v377 + 20) = 0;
            *(_DWORD *)(v377 + 36) = 0;
            if ((unint64_t)v381 >= v380)
              v382 = 0;
            else
              v382 = *v381;
            *(_BYTE *)(v377 + 176) = v382;
            v383 = (uint64_t)v837;
            v384 = v837[911];
            *(_DWORD *)v384 = v363;
            *(_BYTE *)(v384 + 56) = v366;
            v385 = *(_DWORD *)(v383 + 7400);
            v386 = *(_DWORD *)(v383 + 7412);
            v387 = *(_DWORD *)(v383 + 7404);
            *(_DWORD *)(v383 + 7444) = v385;
            *(_DWORD *)(v383 + 7448) = v386;
            *(_DWORD *)(v383 + 7452) = v387;
            *(_DWORD *)(v384 + 4) = v385;
            v388 = *(_DWORD *)(v383 + 12);
            if (!v388)
            {
              __break(0xC471u);
              JUMPOUT(0x197E4F45CLL);
            }
            *(_DWORD *)(v383 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v384, (uint64_t)v835, 0, *(_BYTE *)(*(_QWORD *)v383 + 720 * (v388 - 1) + 9) & 1, v373, v374, v375, v376);
            *(_DWORD *)(*(_QWORD *)(v383 + 7288) + 4) = v364;
            *v826 = v844[0];
            v396 = v360;
            *(_DWORD *)(v383 + 7312) = v360;
            *(_DWORD *)(v383 + 7316) = v827;
            v397 = v831;
            *(_OWORD *)v831 = v842;
            *(_QWORD *)(v397 + 16) = v843;
            v14 = v833;
            v10 = v834;
            *v834 = v829;
            v10[1] = v830;
            *(_DWORD *)(v8 + 1052) = v396;
            v398 = *(WTF::StringImpl **)(v383 + 7360);
            *(_QWORD *)(v383 + 7360) = 0;
            if (v398)
            {
              if (*(_DWORD *)v398 == 2)
              {
                WTF::StringImpl::~StringImpl(v398, v389, v390, v391, v392, v393, v394, v395);
                WTF::fastFree(v621, v622, v623, v624, v625, v626, v627, v628);
              }
              else
              {
                *(_DWORD *)v398 -= 2;
              }
            }
            v279 = (uint64_t)v837;
            goto LABEL_213;
          }
          JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(v279 + 7288), v825, v361, v372, v373, v374, v375, v376);
          v745 = *(_QWORD *)(v279 + 7288);
          *(_DWORD *)v745 = v363;
          *(_BYTE *)(v745 + 56) = v366;
          v746 = *(_DWORD *)(v279 + 7400);
          v747 = *(_DWORD *)(v279 + 7412);
          v748 = *(_DWORD *)(v279 + 7404);
          *(_DWORD *)(v279 + 7444) = v746;
          *(_DWORD *)(v279 + 7448) = v747;
          *(_DWORD *)(v279 + 7452) = v748;
          *(_DWORD *)(v745 + 4) = v746;
          v749 = *(_DWORD *)(v279 + 12);
          if (!v749)
          {
            __break(0xC471u);
            JUMPOUT(0x197E4F464);
          }
          v750 = (uint64_t)v837;
          *(_DWORD *)(v750 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v745, (uint64_t)v835, 0, *(_BYTE *)(*v837 + 720 * (v749 - 1) + 9) & 1, v741, v742, v743, v744);
          *(_DWORD *)(*(_QWORD *)(v750 + 7288) + 4) = v364;
          *v826 = v844[0];
          v758 = v360;
          *(_DWORD *)(v750 + 7312) = v360;
          *(_DWORD *)(v750 + 7316) = v827;
          v759 = v831;
          *(_OWORD *)v831 = v842;
          *(_QWORD *)(v759 + 16) = v843;
          v760 = v834;
          *v834 = v829;
          v760[1] = v830;
          *(_DWORD *)(v8 + 1052) = v758;
          v761 = *(WTF::StringImpl **)(v750 + 7360);
          *(_QWORD *)(v750 + 7360) = 0;
          if (v761)
          {
            if (*(_DWORD *)v761 == 2)
            {
              WTF::StringImpl::~StringImpl(v761, v751, v752, v753, v754, v755, v756, v757);
              WTF::fastFree(v815, v816, v817, v818, v819, v820, v821, v822);
            }
            else
            {
              *(_DWORD *)v761 -= 2;
            }
          }
          v84 = v738 == 4;
          v16 = v836;
          v279 = (uint64_t)v837;
          v14 = v833;
          v10 = v834;
          if (v84)
            goto LABEL_213;
          v281 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpressionOrLabelStatement<JSC::ASTBuilder>((uint64_t)v837, (void *)v8, 1, v753, v754, v755, v756, v757);
        }
        v28 = v281;
        if (!v281)
          goto LABEL_122;
        v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v281 + 96))(v281);
        v88 = (uint64_t)v837;
LABEL_59:
        *(_DWORD *)(v28 + 20) = *(_DWORD *)(v88 + 7448);
        if ((v91 & 1) != 0)
        {
LABEL_72:
          *(_DWORD *)(v88 + 7456) = v86;
          v13 = v835;
          goto LABEL_66;
        }
        goto LABEL_60;
      }
      if (!JSC::Parser<JSC::Lexer<unsigned char>>::parseStatementListItem<JSC::SyntaxChecker>((uint64_t)v837, (uint64_t)&v838, v841, &v839, a5, a6, a7, a8))goto LABEL_359;
    }
    else
    {
      v844[0] = *v14;
      v69 = (uint64_t)v837;
      v70 = *((_DWORD *)v837 + 1850);
      v71 = *((_DWORD *)v837 + 1853);
      v72 = *((_DWORD *)v837 + 1851);
      *((_DWORD *)v837 + 1861) = v70;
      *(_DWORD *)(v69 + 7448) = v71;
      *(_DWORD *)(v69 + 7452) = v72;
      v73 = *(_QWORD *)(v69 + 7288);
      *(_DWORD *)(v73 + 4) = v70;
      v74 = *(_DWORD *)(v69 + 12);
      if (!v74)
      {
        __break(0xC471u);
        JUMPOUT(0x197E4F444);
      }
      v75 = *(_BYTE *)(*(_QWORD *)v69 + 720 * (v74 - 1) + 9) & 1;
      *(_BYTE *)(v73 + 56) = 0;
      *(_DWORD *)(v69 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v73, (uint64_t)v13, 0, v75, a5, a6, a7, a8);
      v77 = *(_QWORD *)(v8 + 8);
      v78 = *(_QWORD *)v77;
      if (*(_QWORD *)(v77 + 8) - *(_QWORD *)v77 <= 0x2FuLL)
      {
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v8 + 8));
        v78 = *(_QWORD *)v77;
      }
      *(_QWORD *)v77 = v78 + 48;
      v839 = (WTF::StringImpl *)v78;
      v79 = *(unsigned int *)(v77 + 52);
      if ((_DWORD)v79 == *(_DWORD *)(v77 + 48))
      {
        WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserArenaDeletable *&>(v77 + 40, (unint64_t)&v839);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v77 + 40) + 8 * v79) = v78;
        *(_DWORD *)(v77 + 52) = v79 + 1;
      }
      *(_QWORD *)(v78 + 32) = 0;
      *(_QWORD *)(v78 + 40) = 0;
      *(_QWORD *)(v78 + 24) = 0;
      *(_QWORD *)v78 = &off_1E357B270;
      *(_QWORD *)(v78 + 8) = v78 + 24;
      *(_QWORD *)(v78 + 16) = 3;
      v80 = *v13;
      if (*v13 == 12)
        goto LABEL_39;
      if (v80 != 14)
      {
        if (JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet((uint64_t)v837, v80, (_QWORD *)v837[922]))
          goto LABEL_39;
        if (JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield((_BOOL8)v837, *((_DWORD *)v837 + 1842), (_QWORD *)v837[922]))
        {
          goto LABEL_39;
        }
        v198 = *v13;
        if (*v13 == 546)
          goto LABEL_39;
        if (v198 == 1048592)
        {
          if (*(_QWORD *)v837[922] != *(_QWORD *)(*(_QWORD *)(v837[902] + 41952) + 128))
            goto LABEL_49;
LABEL_39:
          v81 = (WTF::StringImpl *)JSC::Parser<JSC::Lexer<unsigned char>>::parseImportClauseItem<JSC::ASTBuilder>((uint64_t)v837, v8, 2, a4, a5, a6, a7, a8);
          if (!v81)
          {
            if (*v13 != 20 && (*v13 & 0x100000) == 0)
            {
              v16 = v836;
              if (!v837[920])
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>((uint64_t)v837, "Cannot parse the default import");
              goto LABEL_65;
            }
            goto LABEL_49;
          }
          v839 = v81;
          v82 = *(unsigned int *)(v78 + 20);
          if ((_DWORD)v82 == *(_DWORD *)(v78 + 16))
          {
            WTF::Vector<JSC::ImportSpecifierNode *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ImportSpecifierNode *&>(v78 + 8, (unint64_t)&v839);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v78 + 8) + 8 * v82) = v81;
            *(_DWORD *)(v78 + 20) = v82 + 1;
          }
          v83 = *v13;
          if (*v13 != 6)
          {
LABEL_43:
            if (v83 != 12 || *(_QWORD *)v837[922] != *(_QWORD *)(*(_QWORD *)(v837[902] + 41952) + 1360) || v10[40])
            {
              v84 = v83 != 20 && (v83 & 0x100000) == 0;
              if (!v84)
                goto LABEL_49;
              v16 = v836;
              if (!v837[920])
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>((uint64_t)v837, 1, "Expected 'from' before imported module name");
              goto LABEL_65;
            }
            v282 = (uint64_t)v837;
            v283 = *((_DWORD *)v837 + 1850);
            v284 = *((_DWORD *)v837 + 1853);
            v285 = *((_DWORD *)v837 + 1851);
            *((_DWORD *)v837 + 1861) = v283;
            *(_DWORD *)(v282 + 7448) = v284;
            *(_DWORD *)(v282 + 7452) = v285;
            v286 = *(_QWORD *)(v282 + 7288);
            *(_DWORD *)(v286 + 4) = v283;
            v287 = *(_DWORD *)(v282 + 12);
            if (!v287)
            {
              __break(0xC471u);
              JUMPOUT(0x197E4F42CLL);
            }
            v288 = *(_BYTE *)(*(_QWORD *)v282 + 720 * (v287 - 1) + 9) & 1;
            *(_BYTE *)(v286 + 56) = 0;
            *(_DWORD *)(v282 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v286, (uint64_t)v13, 0, v288, a5, a6, a7, a8);
            v295 = JSC::Parser<JSC::Lexer<unsigned char>>::parseModuleName<JSC::ASTBuilder>(v282, v8, v289, v290, v291, v292, v293, v294);
            if (!v295)
            {
              if (*v13 == 20 || (*v13 & 0x100000) != 0)
                goto LABEL_505;
              v399 = v837[920];
              v12 = v832;
              v14 = v833;
              v8 = v831;
              v10 = v834;
              v13 = v835;
LABEL_292:
              v16 = v836;
              if (!v399)
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>((uint64_t)v837, "Cannot parse the module name");
              goto LABEL_65;
            }
            v296 = v295;
            if (!BYTE5(qword_1ECF4C7A0) || (v297 = v837[911], *(_BYTE *)(v297 + 56)))
            {
              v775 = v296;
              v299 = 0;
            }
            else
            {
              v298 = *v13;
              if (*v13 != 530)
              {
                v299 = 0;
LABEL_223:
                if (v298 == 17)
                {
                  v321 = v299;
                  v322 = v296;
                  v323 = (uint64_t)v837;
                  v324 = *((_DWORD *)v837 + 1850);
                  v325 = *((_DWORD *)v837 + 1853);
                  v326 = *((_DWORD *)v837 + 1851);
                  *((_DWORD *)v837 + 1861) = v324;
                  *(_DWORD *)(v323 + 7448) = v325;
                  *(_DWORD *)(v323 + 7452) = v326;
                  v327 = *(_QWORD *)(v323 + 7288);
                  *(_DWORD *)(v327 + 4) = v324;
                  v328 = *(_DWORD *)(v323 + 12);
                  if (!v328)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E4F41CLL);
                  }
                  v329 = *(_BYTE *)(*(_QWORD *)v323 + 720 * (v328 - 1) + 9) & 1;
                  *(_BYTE *)(v327 + 56) = 0;
                  *(_DWORD *)(v323 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v327, (uint64_t)v13, 0, v329, a5, a6, a7, a8);
                  v296 = v322;
                  v299 = v321;
                }
                else if (v298 != 1 && v298 != 20 && !*(_BYTE *)(v837[911] + 56))
                {
                  goto LABEL_227;
                }
                v330 = *(uint64_t **)(v8 + 8);
                v28 = *v330;
                if ((unint64_t)(v330[1] - *v330) <= 0x3F)
                {
                  v802 = v299;
                  JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v8 + 8));
                  v299 = v802;
                  v28 = *v330;
                }
                *v330 = v28 + 64;
                *(_DWORD *)(v28 + 8) = v844[0];
                v331 = DWORD1(v844[0]);
                *(int32x2_t *)(v28 + 12) = vrev64_s32(*(int32x2_t *)((char *)v844 + 4));
                *(_DWORD *)(v28 + 20) = -1;
                *(_BYTE *)(v28 + 24) = 0;
                *(_DWORD *)(v28 + 28) = -1;
                *(_QWORD *)v28 = &off_1E3589AF8;
                *(_QWORD *)(v28 + 32) = 0;
                *(_QWORD *)(v28 + 40) = v78;
                *(_QWORD *)(v28 + 48) = v296;
                *(_QWORD *)(v28 + 56) = v299;
                v332 = v331;
                goto LABEL_253;
              }
              v776 = v837;
              v777 = *((_DWORD *)v837 + 1850);
              v778 = *((_DWORD *)v837 + 1853);
              v779 = *((_DWORD *)v837 + 1851);
              *((_DWORD *)v837 + 1861) = v777;
              v776[1862] = v778;
              v776[1863] = v779;
              *(_DWORD *)(v297 + 4) = v777;
              v780 = v776[3];
              if (!v780)
              {
                __break(0xC471u);
                JUMPOUT(0x197E4F424);
              }
              v775 = v296;
              v781 = (uint64_t)v837;
              v782 = *(_BYTE *)(*v837 + 720 * (v780 - 1) + 9) & 1;
              *(_BYTE *)(v297 + 56) = 0;
              *(_DWORD *)(v781 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v297, (uint64_t)v835, 0, v782, a5, a6, a7, a8);
              v299 = JSC::Parser<JSC::Lexer<unsigned char>>::parseImportAttributes<JSC::ASTBuilder>(v781, *(uint64_t **)(v831 + 8), v783, v784, v785, v786, v787, v788);
              if (!v299)
              {
                v438 = *v835;
                goto LABEL_317;
              }
            }
            v10 = v834;
            v13 = v835;
            v298 = *v835;
            v12 = v832;
            v14 = v833;
            v8 = v831;
            v296 = v775;
            goto LABEL_223;
          }
          v300 = (uint64_t)v837;
          v301 = *((_DWORD *)v837 + 1850);
          v302 = *((_DWORD *)v837 + 1853);
          v303 = *((_DWORD *)v837 + 1851);
          *((_DWORD *)v837 + 1861) = v301;
          *(_DWORD *)(v300 + 7448) = v302;
          *(_DWORD *)(v300 + 7452) = v303;
          v304 = *(_QWORD *)(v300 + 7288);
          *(_DWORD *)(v304 + 4) = v301;
          v305 = *(_DWORD *)(v300 + 12);
          if (!v305)
          {
            __break(0xC471u);
            JUMPOUT(0x197E4F44CLL);
          }
          v306 = *(_BYTE *)(*(_QWORD *)v300 + 720 * (v305 - 1) + 9) & 1;
          *(_BYTE *)(v304 + 56) = 0;
          v198 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v304, (uint64_t)v13, 0, v306, a5, a6, a7, a8);
          *(_DWORD *)(v300 + 7368) = v198;
        }
        if (!v198)
        {
          v307 = (uint64_t)v837;
          v308 = *((_DWORD *)v837 + 1850);
          v309 = *((_DWORD *)v837 + 1853);
          v310 = *((_DWORD *)v837 + 1851);
          *((_DWORD *)v837 + 1861) = v308;
          *(_DWORD *)(v307 + 7448) = v309;
          *(_DWORD *)(v307 + 7452) = v310;
          v311 = *(_QWORD *)(v307 + 7288);
          *(_DWORD *)(v311 + 4) = v308;
          v312 = *(_DWORD *)(v307 + 12);
          if (!v312)
          {
            __break(0xC471u);
            JUMPOUT(0x197E4F434);
          }
          while (1)
          {
            v313 = *(_BYTE *)(*(_QWORD *)v307 + 720 * (v312 - 1) + 9) & 1;
            *(_BYTE *)(v311 + 56) = 0;
            v314 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v311, (uint64_t)v13, 0, v313, a5, a6, a7, a8);
            *(_DWORD *)(v307 + 7368) = v314;
            if (v314 == 1)
              goto LABEL_257;
            if (v314 != 12 && (v314 & 0x200) == 0 && v314 != 14)
            {
              if (v314 == 20 || (v314 & 0x100000) != 0)
                goto LABEL_505;
              v16 = v836;
              v12 = v832;
              v14 = v833;
              v8 = v831;
              v10 = v834;
              v13 = v835;
              if (!v837[920])
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>((uint64_t)v837, "Expected an imported name or a module export name string for the import declaration");
              goto LABEL_65;
            }
            v315 = (WTF::StringImpl *)JSC::Parser<JSC::Lexer<unsigned char>>::parseImportClauseItem<JSC::ASTBuilder>((uint64_t)v837, v8, 1, a4, a5, a6, a7, a8);
            if (!v315)
            {
              if (*v13 == 20 || (*v13 & 0x100000) != 0)
                goto LABEL_505;
              v16 = v836;
              v12 = v832;
              v14 = v833;
              v8 = v831;
              v10 = v834;
              v13 = v835;
              if (!v837[920])
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>((uint64_t)v837, "Cannot parse the named import");
              goto LABEL_65;
            }
            v839 = v315;
            v316 = *(unsigned int *)(v78 + 20);
            if ((_DWORD)v316 == *(_DWORD *)(v78 + 16))
            {
              WTF::Vector<JSC::ImportSpecifierNode *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ImportSpecifierNode *&>(v78 + 8, (unint64_t)&v839);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)(v78 + 8) + 8 * v316) = v315;
              *(_DWORD *)(v78 + 20) = v316 + 1;
            }
            v317 = *v13;
            if (*v13 != 6)
              break;
            v307 = (uint64_t)v837;
            v318 = *((_DWORD *)v837 + 1850);
            v319 = *((_DWORD *)v837 + 1853);
            v320 = *((_DWORD *)v837 + 1851);
            *((_DWORD *)v837 + 1861) = v318;
            *(_DWORD *)(v307 + 7448) = v319;
            *(_DWORD *)(v307 + 7452) = v320;
            v311 = *(_QWORD *)(v307 + 7288);
            *(_DWORD *)(v311 + 4) = v318;
            v312 = *(_DWORD *)(v307 + 12);
            if (!v312)
            {
              __break(0xC471u);
              JUMPOUT(0x197E4F40CLL);
            }
          }
          if (v317 == 1)
          {
LABEL_257:
            v335 = (uint64_t)v837;
            v336 = *((_DWORD *)v837 + 1850);
            v337 = *((_DWORD *)v837 + 1853);
            v338 = *((_DWORD *)v837 + 1851);
            *((_DWORD *)v837 + 1861) = v336;
            *(_DWORD *)(v335 + 7448) = v337;
            *(_DWORD *)(v335 + 7452) = v338;
            v339 = *(_QWORD *)(v335 + 7288);
            *(_DWORD *)(v339 + 4) = v336;
            v340 = *(_DWORD *)(v335 + 12);
            if (!v340)
            {
              __break(0xC471u);
              JUMPOUT(0x197E4F43CLL);
            }
            v341 = *(_BYTE *)(*(_QWORD *)v335 + 720 * (v340 - 1) + 9) & 1;
            *(_BYTE *)(v339 + 56) = 0;
            v83 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v339, (uint64_t)v13, 0, v341, a5, a6, a7, a8);
            *(_DWORD *)(v335 + 7368) = v83;
            goto LABEL_43;
          }
          if (v317 == 20 || (v317 & 0x100000) != 0)
            goto LABEL_49;
          v16 = v836;
          if (!v837[920])
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[12]>((uint64_t)v837, "import list");
          goto LABEL_65;
        }
        if (v198 != 191488)
        {
          v12 = v832;
          v14 = v833;
          v10 = v834;
          v13 = v835;
          if (v198 != 20 && (v198 & 0x100000) == 0)
          {
            v16 = v836;
            if (!v837[920])
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>((uint64_t)v837, 1, "Expected namespace import or import list");
            goto LABEL_65;
          }
LABEL_49:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError((uint64_t)v837);
LABEL_50:
          v16 = v836;
LABEL_65:
          v28 = 0;
          goto LABEL_66;
        }
        v563 = JSC::Parser<JSC::Lexer<unsigned char>>::parseImportClauseItem<JSC::ASTBuilder>((uint64_t)v837, v8, 0, a4, a5, a6, a7, a8);
        if (!v563)
        {
          if (*v835 != 20 && (*v835 & 0x100000) == 0)
          {
            v16 = v836;
            v12 = v832;
            v14 = v833;
            v8 = v831;
            v10 = v834;
            v13 = v835;
            if (!v837[920])
            {
              v439 = "Cannot parse the namespace import";
LABEL_321:
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>((uint64_t)v837, 1, v439);
            }
            goto LABEL_65;
          }
          goto LABEL_505;
        }
        JSC::ASTBuilder::appendImportSpecifier((_QWORD *)v78, v563);
        v10 = v834;
        v13 = v835;
        v83 = *v835;
        v12 = v832;
        v14 = v833;
        goto LABEL_43;
      }
      v354 = JSC::Parser<JSC::Lexer<unsigned char>>::parseModuleName<JSC::ASTBuilder>((uint64_t)v837, v8, v76, a4, a5, a6, a7, a8);
      if (!v354)
      {
        if (*v13 == 20 || (*v13 & 0x100000) != 0)
          goto LABEL_49;
        v399 = v837[920];
        goto LABEL_292;
      }
      v355 = v354;
      if (BYTE5(qword_1ECF4C7A0) && (v356 = v837[911], !*(_BYTE *)(v356 + 56)) && *v13 == 530)
      {
        v426 = (uint64_t)v837;
        v427 = *((_DWORD *)v837 + 1850);
        v428 = *((_DWORD *)v837 + 1853);
        v429 = *((_DWORD *)v837 + 1851);
        *((_DWORD *)v837 + 1861) = v427;
        *(_DWORD *)(v426 + 7448) = v428;
        *(_DWORD *)(v426 + 7452) = v429;
        *(_DWORD *)(v356 + 4) = v427;
        v430 = *(_DWORD *)(v426 + 12);
        if (!v430)
        {
          __break(0xC471u);
          JUMPOUT(0x197E4F414);
        }
        v431 = *(_BYTE *)(*(_QWORD *)v426 + 720 * (v430 - 1) + 9) & 1;
        *(_BYTE *)(v356 + 56) = 0;
        *(_DWORD *)(v426 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v356, (uint64_t)v13, 0, v431, a5, a6, a7, a8);
        v357 = JSC::Parser<JSC::Lexer<unsigned char>>::parseImportAttributes<JSC::ASTBuilder>(v426, *(uint64_t **)(v8 + 8), v432, v433, v434, v435, v436, v437);
        if (!v357)
        {
          v438 = *v13;
LABEL_317:
          if (v438 != 20 && (v438 & 0x100000) == 0)
          {
            v16 = v836;
            v12 = v832;
            v14 = v833;
            v8 = v831;
            v10 = v834;
            v13 = v835;
            if (!v837[920])
            {
              v439 = "Unable to parse import attributes";
              goto LABEL_321;
            }
            goto LABEL_65;
          }
LABEL_505:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError((uint64_t)v837);
          v12 = v832;
          v14 = v833;
          v8 = v831;
          v10 = v834;
          v13 = v835;
          goto LABEL_50;
        }
      }
      else
      {
        v357 = 0;
      }
      if (!JSC::Parser<JSC::Lexer<unsigned char>>::autoSemiColon((uint64_t)v837, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      {
        v298 = *v13;
        if (*v13 == 20)
          goto LABEL_49;
LABEL_227:
        if ((v298 & 0x100000) != 0)
          goto LABEL_49;
        v16 = v836;
        if (!v837[920])
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>((uint64_t)v837, 1, "Expected a ';' following a targeted import declaration");
        goto LABEL_65;
      }
      JSC::ASTBuilder::createImportDeclaration(*(JSC::ParserArena **)(v8 + 8), (uint64_t)v844, v78, v355, v357);
      v28 = v358;
      if (!v358)
      {
        v16 = v836;
        goto LABEL_66;
      }
      v332 = *(_DWORD *)(v358 + 16);
LABEL_253:
      *(_BYTE *)(v28 + 24) = 1;
      v333 = *(_QWORD *)(v28 + 8);
      *(_QWORD *)&v844[0] = v333;
      DWORD2(v844[0]) = v332;
      v16 = v836;
      v334 = v837[940];
      if (v334 && (v333 & 0x80000000) == 0)
        JSC::DebuggerPausePositions::appendPause(v334, (uint64_t)v844);
LABEL_66:
      if (!v28)
        goto LABEL_359;
LABEL_67:
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28) & 1) == 0)
      {
        v93 = v12;
        if (*v12)
          v93 = (uint64_t *)(v12[1] + 32);
        *v93 = v28;
        v12[1] = v28;
      }
    }
  }
  v844[0] = *v14;
  v17 = (uint64_t)v837;
  v18 = *((_DWORD *)v837 + 1850);
  v19 = *((_DWORD *)v837 + 1853);
  v20 = *((_DWORD *)v837 + 1851);
  *((_DWORD *)v837 + 1861) = v18;
  *(_DWORD *)(v17 + 7448) = v19;
  *(_DWORD *)(v17 + 7452) = v20;
  v21 = *(_QWORD *)(v17 + 7288);
  *(_DWORD *)(v21 + 4) = v18;
  v22 = *(_DWORD *)(v17 + 12);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x197E4F3FCLL);
  }
  v23 = *(_BYTE *)(*(_QWORD *)v17 + 720 * (v22 - 1) + 9) & 1;
  *(_BYTE *)(v21 + 56) = 0;
  v24 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v21, (uint64_t)v13, 0, v23, a5, a6, a7, a8);
  *(_DWORD *)(v17 + 7368) = v24;
  if (v24 > 540)
  {
    if (v24 == 541)
    {
      v25 = JSC::Parser<JSC::Lexer<unsigned char>>::parseClassDeclaration<JSC::ASTBuilder>((uint64_t)v837, v8, 0, 0);
      goto LABEL_13;
    }
    if (v24 != 191488)
    {
      if (v24 != 544)
        goto LABEL_354;
      v112 = (uint64_t)v837;
      v113 = v8;
      v114 = 1;
LABEL_86:
      v25 = JSC::Parser<JSC::Lexer<unsigned char>>::parseVariableDeclaration<JSC::ASTBuilder>(v112, v113, v114, 0);
LABEL_13:
      v26 = v25;
LABEL_14:
      if (!v26)
        goto LABEL_477;
      v27 = *(uint64_t **)(v8 + 8);
      v28 = *v27;
      if ((unint64_t)(v27[1] - *v27) <= 0x2F)
      {
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v8 + 8));
        v28 = *v27;
      }
      *v27 = v28 + 48;
      *(_DWORD *)(v28 + 8) = v844[0];
      *(int32x2_t *)(v28 + 12) = vrev64_s32(*(int32x2_t *)((char *)v844 + 4));
      *(_DWORD *)(v28 + 20) = -1;
      *(_BYTE *)(v28 + 24) = 0;
      *(_DWORD *)(v28 + 28) = -1;
      *(_QWORD *)v28 = &off_1E3589CF0;
      *(_QWORD *)(v28 + 32) = 0;
      *(_QWORD *)(v28 + 40) = v26;
LABEL_18:
      v16 = v836;
LABEL_19:
      *(_BYTE *)(v28 + 24) = 1;
      v29 = *(_QWORD *)(v28 + 8);
      v30 = *(_DWORD *)(v28 + 16);
      *(_QWORD *)&v842 = v29;
      DWORD2(v842) = v30;
      v31 = v837[940];
      if (v31 && (v29 & 0x80000000) == 0)
        JSC::DebuggerPausePositions::appendPause(v31, (uint64_t)&v842);
      goto LABEL_67;
    }
    v141 = (uint64_t)v837;
    v142 = *((_DWORD *)v837 + 1850);
    v143 = *((_DWORD *)v837 + 1853);
    v144 = *((_DWORD *)v837 + 1851);
    *((_DWORD *)v837 + 1861) = v142;
    *(_DWORD *)(v141 + 7448) = v143;
    *(_DWORD *)(v141 + 7452) = v144;
    v145 = *(_QWORD *)(v141 + 7288);
    *(_DWORD *)(v145 + 4) = v142;
    v146 = *(_DWORD *)(v141 + 12);
    if (!v146)
    {
      __break(0xC471u);
      JUMPOUT(0x197E4F4B4);
    }
    v147 = *(_BYTE *)(*(_QWORD *)v141 + 720 * (v146 - 1) + 9) & 1;
    *(_BYTE *)(v145 + 56) = 0;
    v148 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v145, (uint64_t)v13, 0, v147, a5, a6, a7, a8);
    *(_DWORD *)(v141 + 7368) = v148;
    v842 = 0uLL;
    if (v148 != 12)
    {
LABEL_113:
      if (v148 != 20 && (v148 & 0x100000) == 0)
      {
        if (!v837[920])
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>((uint64_t)v837, 1, "Expected 'from' before exported module name");
      }
      else
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError((uint64_t)v837);
      }
      v28 = 0;
      goto LABEL_158;
    }
    v199 = *(_QWORD *)(v837[902] + 41952);
    v200 = *(_QWORD *)v837[922];
    if (v200 != *(_QWORD *)(v199 + 888) || v10[40])
    {
      v201 = 0;
LABEL_162:
      if (v200 != *(_QWORD *)(v199 + 1360) || v10[40])
      {
        v148 = 12;
        goto LABEL_164;
      }
      v453 = (uint64_t)v837;
      v454 = *((_DWORD *)v837 + 1850);
      v455 = *((_DWORD *)v837 + 1853);
      v456 = *((_DWORD *)v837 + 1851);
      *((_DWORD *)v837 + 1861) = v454;
      *(_DWORD *)(v453 + 7448) = v455;
      *(_DWORD *)(v453 + 7452) = v456;
      v457 = *(_QWORD *)(v453 + 7288);
      *(_DWORD *)(v457 + 4) = v454;
      v458 = *(_DWORD *)(v453 + 12);
      if (!v458)
      {
        __break(0xC471u);
        JUMPOUT(0x197E4F49CLL);
      }
      v459 = (uint64_t)v837;
      v460 = *(_BYTE *)(*v837 + 720 * (v458 - 1) + 9) & 1;
      *(_BYTE *)(v457 + 56) = 0;
      *(_DWORD *)(v459 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v457, (uint64_t)v835, 0, v460, a5, a6, a7, a8);
      v467 = JSC::Parser<JSC::Lexer<unsigned char>>::parseModuleName<JSC::ASTBuilder>(v459, v8, v461, v462, v463, v464, v465, v466);
      if (v467)
      {
        v468 = v467;
        if (BYTE5(qword_1ECF4C7A0) && (v469 = v837[911], !*(_BYTE *)(v469 + 56)) && *v835 == 530)
        {
          v762 = v837;
          v763 = *((_DWORD *)v837 + 1850);
          v764 = *((_DWORD *)v837 + 1853);
          v765 = *((_DWORD *)v837 + 1851);
          *((_DWORD *)v837 + 1861) = v763;
          v762[1862] = v764;
          v762[1863] = v765;
          *(_DWORD *)(v469 + 4) = v763;
          v766 = v762[3];
          if (!v766)
          {
            __break(0xC471u);
            JUMPOUT(0x197E4F4A4);
          }
          v767 = (uint64_t)v837;
          v768 = *(_BYTE *)(*v837 + 720 * (v766 - 1) + 9) & 1;
          *(_BYTE *)(v469 + 56) = 0;
          *(_DWORD *)(v767 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v469, (uint64_t)v835, 0, v768, a5, a6, a7, a8);
          v470 = JSC::Parser<JSC::Lexer<unsigned char>>::parseImportAttributes<JSC::ASTBuilder>(v767, *(uint64_t **)(v8 + 8), v769, v770, v771, v772, v773, v774);
          if (!v470)
          {
            if (*v835 != 20 && (*v835 & 0x100000) == 0)
            {
              if (!v837[920])
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>((uint64_t)v837, 1, "Unable to parse import attributes");
              goto LABEL_601;
            }
            goto LABEL_600;
          }
        }
        else
        {
          v470 = 0;
        }
        if (JSC::Parser<JSC::Lexer<unsigned char>>::autoSemiColon((uint64_t)v837, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        {
          if (v201)
          {
            if (!JSC::Parser<JSC::Lexer<unsigned char>>::exportName(v837[939], *v201, a3, a4, a5, a6, a7, a8))
            {
              if (!v837[920])
              {
                v841[0] = *v201;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],WTF::UniquedStringImpl *,char const(&)[2]>((uint64_t)v837, (uint64_t *)v841);
              }
              goto LABEL_601;
            }
            ExportSpecifierList = JSC::ASTBuilder::createExportSpecifierList(*(JSC::ASTBuilder **)(v8 + 8));
            JSC::ASTBuilder::createExportSpecifier(*(JSC::ParserArena **)(v8 + 8), (uint64_t)&v842, *(_QWORD *)(v837[902] + 41952) + 112, (uint64_t)v201);
            JSC::ASTBuilder::appendExportSpecifier((uint64_t)ExportSpecifierList, v472);
            JSC::ASTBuilder::createExportNamedDeclaration(*(JSC::ParserArena **)(v8 + 8), (uint64_t)v844, (uint64_t)ExportSpecifierList, v468, v470);
          }
          else
          {
            JSC::ASTBuilder::createExportAllDeclaration(*(_QWORD *)(v8 + 8), (uint64_t)v844, v468, v470);
          }
          v28 = v473;
          goto LABEL_602;
        }
        if (*v835 != 20 && (*v835 & 0x100000) == 0)
        {
          if (!v837[920])
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>((uint64_t)v837, 1, "Expected a ';' following a targeted export declaration");
          goto LABEL_601;
        }
      }
      else if (*v835 != 20 && (*v835 & 0x100000) == 0)
      {
        if (!v837[920])
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>((uint64_t)v837, 1, "Cannot parse the 'from' clause");
        goto LABEL_601;
      }
    }
    else
    {
      v440 = (uint64_t)v837;
      v441 = *((_DWORD *)v837 + 1850);
      v442 = *((_DWORD *)v837 + 1853);
      v443 = *((_DWORD *)v837 + 1851);
      *((_DWORD *)v837 + 1861) = v441;
      *(_DWORD *)(v440 + 7448) = v442;
      *(_DWORD *)(v440 + 7452) = v443;
      v444 = *(_QWORD *)(v440 + 7288);
      *(_DWORD *)(v444 + 4) = v441;
      v445 = *(_DWORD *)(v440 + 12);
      if (!v445)
      {
        __break(0xC471u);
        JUMPOUT(0x197E4F4BCLL);
      }
      v446 = (uint64_t)v837;
      v447 = *(_BYTE *)(*v837 + 720 * (v445 - 1) + 9) & 1;
      *(_BYTE *)(v444 + 56) = 0;
      v448 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v444, (uint64_t)v835, 0, v447, a5, a6, a7, a8);
      *(_DWORD *)(v446 + 7368) = v448;
      v842 = *v14;
      if (v448 == 12 || (v448 & 0x200) != 0)
      {
        v201 = (WTF::StringImpl **)v837[922];
        goto LABEL_520;
      }
      if (v448 == 14)
      {
        v201 = (WTF::StringImpl **)v837[922];
        v449 = (unint64_t)*v201;
        if (*v201)
        {
          v450 = *(unsigned int *)(v449 + 16);
          v451 = *(unsigned __int16 **)(v449 + 8);
          v449 = *(unsigned int *)(v449 + 4);
          v452 = (v450 >> 2) & 1;
        }
        else
        {
          v451 = 0;
          v452 = 1;
        }
        if (WTF::hasUnpairedSurrogate(v451, v449 | (v452 << 32)))
        {
          if (!v837[920])
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[65]>((uint64_t)v837);
          goto LABEL_601;
        }
LABEL_520:
        v650 = (uint64_t)v837;
        v651 = *((_DWORD *)v837 + 1850);
        v652 = *((_DWORD *)v837 + 1853);
        v653 = *((_DWORD *)v837 + 1851);
        *((_DWORD *)v837 + 1861) = v651;
        *(_DWORD *)(v650 + 7448) = v652;
        *(_DWORD *)(v650 + 7452) = v653;
        v654 = *(_QWORD *)(v650 + 7288);
        *(_DWORD *)(v654 + 4) = v651;
        v655 = *(_DWORD *)(v650 + 12);
        if (!v655)
        {
          __break(0xC471u);
          JUMPOUT(0x197E4F4ACLL);
        }
        v656 = (uint64_t)v837;
        v657 = *(_BYTE *)(*v837 + 720 * (v655 - 1) + 9) & 1;
        *(_BYTE *)(v654 + 56) = 0;
        v148 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v654, (uint64_t)v835, 0, v657, a5, a6, a7, a8);
        *(_DWORD *)(v656 + 7368) = v148;
        if (v148 == 12)
        {
          v199 = *(_QWORD *)(v837[902] + 41952);
          v200 = *(_QWORD *)v837[922];
          v13 = v835;
          goto LABEL_162;
        }
        v13 = v835;
LABEL_164:
        v16 = v836;
        goto LABEL_113;
      }
      if (v448 != 20 && (v448 & 0x100000) == 0)
      {
        if (!v837[920])
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>((uint64_t)v837, "Expected an exported name or a module export name string for the export declaration");
LABEL_601:
        v28 = 0;
LABEL_602:
        v13 = v835;
        v16 = v836;
        goto LABEL_158;
      }
    }
LABEL_600:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError((uint64_t)v837);
    goto LABEL_601;
  }
  switch(v24)
  {
    case 517:
      v115 = (uint64_t)v837;
      v116 = *((_DWORD *)v837 + 1850);
      v117 = *((_DWORD *)v837 + 1853);
      v118 = *((_DWORD *)v837 + 1851);
      *((_DWORD *)v837 + 1861) = v116;
      *(_DWORD *)(v115 + 7448) = v117;
      *(_DWORD *)(v115 + 7452) = v118;
      v119 = *(_QWORD *)(v115 + 7288);
      *(_DWORD *)(v119 + 4) = v116;
      v120 = *(_DWORD *)(v115 + 12);
      if (!v120)
      {
        __break(0xC471u);
        JUMPOUT(0x197E4F514);
      }
      v121 = *(_BYTE *)(*(_QWORD *)v115 + 720 * (v120 - 1) + 9) & 1;
      *(_BYTE *)(v119 + 56) = 0;
      v122 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v119, (uint64_t)v13, 0, v121, a5, a6, a7, a8);
      v128 = v122;
      *(_DWORD *)(v115 + 7368) = v122;
      if (v122 == 523)
      {
        v564 = (uint64_t)v837;
        *(_OWORD *)v841 = *((_OWORD *)v837 + 456);
        LODWORD(v831) = *((_DWORD *)v837 + 1829);
        v843 = v837[917];
        v842 = *(_OWORD *)(v837 + 915);
        LODWORD(v830) = *v10;
        LODWORD(v829) = v10[1];
        v827 = *(_DWORD *)(v8 + 1052);
        v565 = (WTF::AtomStringImpl *)*((unsigned int *)v837 + 1852);
        v566 = *((unsigned int *)v837 + 1851);
        v567 = v837[911];
        v568 = *(_DWORD *)v567;
        LODWORD(v826) = *(_DWORD *)(v567 + 4);
        v824 = *(unsigned __int8 *)(v567 + 56);
        LODWORD(v825) = v568;
        v569 = *((_DWORD *)v837 + 1850);
        v570 = *((_DWORD *)v837 + 1853);
        *((_DWORD *)v837 + 1861) = v569;
        *(_DWORD *)(v564 + 7448) = v570;
        *(_DWORD *)(v564 + 7452) = v566;
        *(_DWORD *)(v567 + 4) = v569;
        v571 = *(_DWORD *)(v564 + 12);
        if (!v571)
        {
          __break(0xC471u);
          JUMPOUT(0x197E4F50CLL);
        }
        v572 = *(_BYTE *)(*(_QWORD *)v564 + 720 * (v571 - 1) + 9) & 1;
        *(_BYTE *)(v567 + 56) = 0;
        v573 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v567, (uint64_t)v835, 0, v572, v124, v125, v126, v127);
        *(_DWORD *)(v564 + 7368) = v573;
        if (v573 == 191488)
        {
          v579 = (uint64_t)v837;
          v580 = *((_DWORD *)v837 + 1850);
          v581 = *((_DWORD *)v837 + 1853);
          v582 = *((_DWORD *)v837 + 1851);
          *((_DWORD *)v837 + 1861) = v580;
          *(_DWORD *)(v579 + 7448) = v581;
          *(_DWORD *)(v579 + 7452) = v582;
          v583 = *(_QWORD *)(v579 + 7288);
          *(_DWORD *)(v583 + 4) = v580;
          v584 = *(_DWORD *)(v579 + 12);
          if (!v584)
          {
            __break(0xC471u);
            JUMPOUT(0x197E4F4FCLL);
          }
          v585 = *(_BYTE *)(*v837 + 720 * (v584 - 1) + 9) & 1;
          *(_BYTE *)(v583 + 56) = 0;
          v586 = v835;
          v573 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v583, (uint64_t)v835, 0, v585, v575, v576, v577, v578);
          v13 = v586;
          v587 = v565;
          goto LABEL_464;
        }
        v587 = v565;
LABEL_465:
        if (v573 == 12)
          v595 = v837[922];
        else
          v595 = 0;
        v596 = (uint64_t)v837;
        JSC::Lexer<unsigned char>::setOffset(v837[911], v587, v566, v574, v575, v576, v577, v578);
        v601 = *(_QWORD *)(v596 + 7288);
        *(_DWORD *)v601 = (_DWORD)v825;
        *(_BYTE *)(v601 + 56) = v824;
        v602 = *(_DWORD *)(v596 + 7400);
        v603 = *(_DWORD *)(v596 + 7412);
        v604 = *(_DWORD *)(v596 + 7404);
        *(_DWORD *)(v596 + 7444) = v602;
        *(_DWORD *)(v596 + 7448) = v603;
        *(_DWORD *)(v596 + 7452) = v604;
        *(_DWORD *)(v601 + 4) = v602;
        v605 = *(_DWORD *)(v596 + 12);
        if (!v605)
        {
          __break(0xC471u);
          JUMPOUT(0x197E4F504);
        }
        *(_DWORD *)(v596 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v601, (uint64_t)v835, 0, *(_BYTE *)(*(_QWORD *)v596 + 720 * (v605 - 1) + 9) & 1, v597, v598, v599, v600);
        *(_DWORD *)(*(_QWORD *)(v596 + 7288) + 4) = (_DWORD)v826;
        *(_OWORD *)(v596 + 7296) = *(_OWORD *)v841;
        v609 = v827;
        *(_DWORD *)(v596 + 7312) = v827;
        *(_DWORD *)(v596 + 7316) = v831;
        *(_OWORD *)(v596 + 7320) = v842;
        *(_QWORD *)(v596 + 7336) = v843;
        *v10 = v830;
        v10[1] = v829;
        *(_DWORD *)(v8 + 1052) = v609;
        v610 = *(WTF::StringImpl **)(v596 + 7360);
        *(_QWORD *)(v596 + 7360) = 0;
        if (v610)
        {
          if (*(_DWORD *)v610 == 2)
          {
            WTF::StringImpl::~StringImpl(v610, v606, v607, v608, v124, v125, v126, v127);
            WTF::fastFree(v642, v643, v644, v645, v646, v647, v648, v649);
          }
          else
          {
            *(_DWORD *)v610 -= 2;
          }
        }
        if (!v595)
          v595 = *(_QWORD *)(v837[902] + 41952) + 104;
        *(_QWORD *)&v831 = v595;
        if (v128 != 523)
        {
          v13 = v835;
          goto LABEL_482;
        }
        v611 = (uint64_t)v837;
        v612 = *((_DWORD *)v837 + 1864);
        *((_DWORD *)v837 + 1864) = 1;
        v138 = JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionDeclaration<JSC::ASTBuilder>(v611, v8, 0, 1, 1, 0, v126, v127);
        *(_DWORD *)(v611 + 7456) = v612;
LABEL_476:
        v13 = v835;
        if (!v138)
        {
LABEL_477:
          if (*v13 != 20 && (*v13 & 0x100000) == 0)
          {
            if (!v837[920])
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>((uint64_t)v837, "Cannot parse the declaration");
            goto LABEL_359;
          }
          goto LABEL_358;
        }
        goto LABEL_139;
      }
      if (v122 != 12)
      {
        if (v122 != 541)
        {
          v129 = *(_QWORD *)(v837[902] + 41952);
          goto LABEL_99;
        }
        v588 = (uint64_t)v837;
        *(_OWORD *)v841 = *((_OWORD *)v837 + 456);
        LODWORD(v831) = *((_DWORD *)v837 + 1829);
        v843 = v837[917];
        v842 = *(_OWORD *)(v837 + 915);
        LODWORD(v830) = *v10;
        LODWORD(v829) = v10[1];
        v827 = *(_DWORD *)(v8 + 1052);
        v587 = (WTF::AtomStringImpl *)*((unsigned int *)v837 + 1852);
        v566 = *((unsigned int *)v837 + 1851);
        v589 = v837[911];
        v590 = *(_DWORD *)v589;
        LODWORD(v826) = *(_DWORD *)(v589 + 4);
        v824 = *(unsigned __int8 *)(v589 + 56);
        LODWORD(v825) = v590;
        v591 = *((_DWORD *)v837 + 1850);
        v592 = *((_DWORD *)v837 + 1853);
        *((_DWORD *)v837 + 1861) = v591;
        *(_DWORD *)(v588 + 7448) = v592;
        *(_DWORD *)(v588 + 7452) = v566;
        *(_DWORD *)(v589 + 4) = v591;
        v593 = *(_DWORD *)(v588 + 12);
        if (!v593)
        {
          __break(0xC471u);
          JUMPOUT(0x197E4F4C4);
        }
        v594 = *(_BYTE *)(*(_QWORD *)v588 + 720 * (v593 - 1) + 9) & 1;
        *(_BYTE *)(v589 + 56) = 0;
        v573 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v589, (uint64_t)v13, 0, v594, v124, v125, v126, v127);
LABEL_464:
        *v13 = v573;
        goto LABEL_465;
      }
      v129 = *(_QWORD *)(v837[902] + 41952);
      if (*(_QWORD *)v837[922] != *(_QWORD *)(v129 + 896) || v10[40])
      {
LABEL_99:
        *(_QWORD *)&v831 = v129 + 104;
      }
      else
      {
        v150 = (uint64_t)v837;
        v151 = v837 + 912;
        *(_OWORD *)v841 = *((_OWORD *)v837 + 456);
        LODWORD(v829) = *((_DWORD *)v837 + 1829);
        v843 = v837[917];
        v842 = *(_OWORD *)(v837 + 915);
        v827 = *v10;
        LODWORD(v826) = v10[1];
        v152 = *(_DWORD *)(v8 + 1052);
        v153 = (WTF::AtomStringImpl *)*((unsigned int *)v837 + 1852);
        v154 = *((unsigned int *)v837 + 1851);
        v155 = v837[911];
        v156 = *(_DWORD *)v155;
        v157 = *(_DWORD *)(v155 + 4);
        v158 = *(_BYTE *)(v155 + 56);
        v159 = *((_DWORD *)v837 + 1850);
        v160 = *((_DWORD *)v837 + 1853);
        *((_DWORD *)v837 + 1861) = v159;
        *(_DWORD *)(v150 + 7448) = v160;
        *(_DWORD *)(v150 + 7452) = v154;
        *(_DWORD *)(v155 + 4) = v159;
        v161 = *(_DWORD *)(v150 + 12);
        if (!v161)
        {
          __break(0xC471u);
          JUMPOUT(0x197E4F4ECLL);
        }
        v162 = v8;
        v163 = *(_BYTE *)(*(_QWORD *)v150 + 720 * (v161 - 1) + 9) & 1;
        *(_BYTE *)(v155 + 56) = 0;
        v164 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v155, (uint64_t)v835, 0, v163, v124, v125, v126, v127);
        *(_DWORD *)(v150 + 7368) = v164;
        if (v164 == 523 && (v170 = v837[911], !*(_BYTE *)(v170 + 56)))
        {
          v714 = v837;
          v715 = *((_DWORD *)v837 + 1850);
          v716 = *((_DWORD *)v837 + 1853);
          v717 = *((_DWORD *)v837 + 1851);
          *((_DWORD *)v837 + 1861) = v715;
          v714[1862] = v716;
          v714[1863] = v717;
          *(_DWORD *)(v170 + 4) = v715;
          v718 = v714[3];
          if (!v718)
          {
            __break(0xC471u);
            JUMPOUT(0x197E4F4DCLL);
          }
          v719 = (uint64_t)v837;
          v720 = *(_BYTE *)(*v837 + 720 * (v718 - 1) + 9) & 1;
          *(_BYTE *)(v170 + 56) = 0;
          v721 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v170, (uint64_t)v835, 0, v720, v166, v167, v168, v169);
          *(_DWORD *)(v719 + 7368) = v721;
          if (v721 == 191488)
          {
            v722 = (uint64_t)v837;
            v723 = *((_DWORD *)v837 + 1850);
            v724 = *((_DWORD *)v837 + 1853);
            v725 = *((_DWORD *)v837 + 1851);
            *((_DWORD *)v837 + 1861) = v723;
            *(_DWORD *)(v722 + 7448) = v724;
            *(_DWORD *)(v722 + 7452) = v725;
            v726 = *(_QWORD *)(v722 + 7288);
            *(_DWORD *)(v726 + 4) = v723;
            v727 = *(_DWORD *)(v722 + 12);
            if (!v727)
            {
              __break(0xC471u);
              JUMPOUT(0x197E4F4E4);
            }
            v728 = (uint64_t)v837;
            v729 = *(_BYTE *)(*v837 + 720 * (v727 - 1) + 9) & 1;
            *(_BYTE *)(v726 + 56) = 0;
            v721 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v726, (uint64_t)v835, 0, v729, v166, v167, v168, v169);
            *(_DWORD *)(v728 + 7368) = v721;
          }
          if (v721 == 12)
            *(_QWORD *)&v831 = v837[922];
          else
            *(_QWORD *)&v831 = 0;
          LODWORD(v830) = 1;
        }
        else
        {
          *(_QWORD *)&v831 = 0;
          LODWORD(v830) = 0;
        }
        v171 = (uint64_t)v837;
        JSC::Lexer<unsigned char>::setOffset(v837[911], v153, v154, v165, v166, v167, v168, v169);
        v176 = *(_QWORD *)(v171 + 7288);
        *(_DWORD *)v176 = v156;
        *(_BYTE *)(v176 + 56) = v158;
        v177 = *(_DWORD *)(v171 + 7400);
        v178 = *(_DWORD *)(v171 + 7412);
        v179 = *(_DWORD *)(v171 + 7404);
        *(_DWORD *)(v171 + 7444) = v177;
        *(_DWORD *)(v171 + 7448) = v178;
        *(_DWORD *)(v171 + 7452) = v179;
        *(_DWORD *)(v176 + 4) = v177;
        v180 = *(_DWORD *)(v171 + 12);
        if (!v180)
        {
          __break(0xC471u);
          JUMPOUT(0x197E4F4D4);
        }
        *(_DWORD *)(v171 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v176, (uint64_t)v835, 0, *(_BYTE *)(*(_QWORD *)v171 + 720 * (v180 - 1) + 9) & 1, v172, v173, v174, v175);
        *(_DWORD *)(*(_QWORD *)(v171 + 7288) + 4) = v157;
        *(_OWORD *)v151 = *(_OWORD *)v841;
        *(_DWORD *)(v171 + 7312) = v152;
        *(_DWORD *)(v171 + 7316) = (_DWORD)v829;
        *(_OWORD *)(v151 + 3) = v842;
        v151[5] = v843;
        v183 = v834;
        *v834 = v827;
        v183[1] = v826;
        *(_DWORD *)(v162 + 1052) = v152;
        v184 = *(WTF::StringImpl **)(v171 + 7360);
        *(_QWORD *)(v171 + 7360) = 0;
        if (v184)
        {
          if (*(_DWORD *)v184 == 2)
          {
            WTF::StringImpl::~StringImpl(v184, v181, v182, v123, v124, v125, v126, v127);
            WTF::fastFree(v730, v731, v732, v733, v734, v735, v736, v737);
          }
          else
          {
            *(_DWORD *)v184 -= 2;
          }
        }
        if (!(_QWORD)v831)
          *(_QWORD *)&v831 = *(_QWORD *)(v837[902] + 41952) + 104;
        v8 = v162;
        v10 = v834;
        v13 = v835;
        v12 = v832;
        v14 = v833;
        if ((v830 & 1) != 0)
        {
LABEL_482:
          if (*v13 == 541)
          {
            v138 = JSC::Parser<JSC::Lexer<unsigned char>>::parseClassDeclaration<JSC::ASTBuilder>((uint64_t)v837, v8, 1, 1);
          }
          else
          {
            v630 = (uint64_t)v837;
            v631 = *((unsigned int *)v837 + 1855);
            v632 = *((_DWORD *)v837 + 1850);
            v633 = *((_DWORD *)v837 + 1853);
            v634 = *((_DWORD *)v837 + 1851);
            *((_DWORD *)v837 + 1861) = v632;
            *(_DWORD *)(v630 + 7448) = v633;
            *(_DWORD *)(v630 + 7452) = v634;
            v635 = *(_QWORD *)(v630 + 7288);
            *(_DWORD *)(v635 + 4) = v632;
            v636 = *(_DWORD *)(v630 + 12);
            if (!v636)
            {
              __break(0xC471u);
              JUMPOUT(0x197E4F4F4);
            }
            v637 = (uint64_t)v837;
            v638 = *(_BYTE *)(*v837 + 720 * (v636 - 1) + 9) & 1;
            *(_BYTE *)(v635 + 56) = 0;
            *(_DWORD *)(v637 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v635, (uint64_t)v835, 0, v638, v124, v125, v126, v127);
            v639 = *(_DWORD *)(v637 + 7456);
            *(_DWORD *)(v637 + 7456) = 1;
            v138 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAsyncFunctionDeclaration<JSC::ASTBuilder>(v637, v8, v631, 1, 1, 0, v640, v641);
            *(_DWORD *)(v637 + 7456) = v639;
          }
          goto LABEL_476;
        }
      }
      *(_OWORD *)v841 = *v14;
      v130 = *(__n128 *)v841;
      v131 = (uint64_t)v837;
      v839 = (WTF::StringImpl *)v837[927];
      v840 = *((_DWORD *)v837 + 1856);
      LODWORD(v842) = 0;
      *((_QWORD *)&v842 + 1) = v837[937];
      v843 = (uint64_t)v837;
      v837[937] = (uint64_t)&v842;
      JSC::Parser<JSC::Lexer<unsigned char>>::parseAssignmentExpression<JSC::ASTBuilder>(v131, (_QWORD *)v8, (uint64_t)&v842, v123, v124, v125, v126, v127, v130);
      *(_QWORD *)(v843 + 7496) = *((_QWORD *)&v842 + 1);
      if (v132)
      {
        v133 = v132;
        if (JSC::Parser<JSC::Lexer<unsigned char>>::declareVariable(v131, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(v131 + 7216) + 41952) + 104), 2, 2, a5, a6, a7, a8) >= 2)
        {
          if (*(_QWORD *)(v131 + 7360))
            goto LABEL_359;
        }
        else
        {
          JSC::ASTBuilder::createAssignResolve(v8, (uint64_t)v841, (_DWORD **)(*(_QWORD *)(*(_QWORD *)(v131 + 7216) + 41952) + 104), v133, (uint64_t *)&v839, (uint64_t *)&v839, v828, 1);
          v135 = v134;
          v136 = *(_DWORD *)(v131 + 7432);
          v137 = *(uint64_t **)(v8 + 8);
          v138 = *v137;
          if ((unint64_t)(v137[1] - *v137) <= 0x2F)
          {
            JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v8 + 8));
            v138 = *v137;
          }
          *v137 = v138 + 48;
          *(_BYTE *)(v138 + 24) = 0;
          *(_QWORD *)v138 = &off_1E35899B8;
          *(_QWORD *)(v138 + 32) = 0;
          *(_QWORD *)(v138 + 40) = v135;
          v139 = v840;
          *(_DWORD *)(v138 + 28) = v136;
          *(_QWORD *)(v138 + 8) = v839;
          *(_DWORD *)(v138 + 16) = v139;
          *(_DWORD *)(v138 + 20) = -1;
          v140 = *v13;
          if (*v13 == 17)
          {
            v185 = (uint64_t)v837;
            v186 = *((_DWORD *)v837 + 1850);
            v187 = *((_DWORD *)v837 + 1853);
            v188 = *((_DWORD *)v837 + 1851);
            *((_DWORD *)v837 + 1861) = v186;
            *(_DWORD *)(v185 + 7448) = v187;
            *(_DWORD *)(v185 + 7452) = v188;
            v189 = *(_QWORD *)(v185 + 7288);
            *(_DWORD *)(v189 + 4) = v186;
            v190 = *(_DWORD *)(v185 + 12);
            if (!v190)
            {
              __break(0xC471u);
              JUMPOUT(0x197E4F4CCLL);
            }
            v191 = *(_BYTE *)(*(_QWORD *)v185 + 720 * (v190 - 1) + 9) & 1;
            *(_BYTE *)(v189 + 56) = 0;
            *(_DWORD *)(v185 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v189, (uint64_t)v13, 0, v191, a5, a6, a7, a8);
          }
          else if (v140 != 1 && v140 != 20 && !*(_BYTE *)(v837[911] + 56))
          {
            if ((v140 & 0x100000) == 0)
            {
              if (!v837[920])
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>((uint64_t)v837, 1, "Expected a ';' following a targeted export declaration");
              goto LABEL_359;
            }
            goto LABEL_358;
          }
LABEL_139:
          v192 = v837[939];
          v193 = *(WTF **)(*(_QWORD *)(v837[902] + 41952) + 192);
          if (v193)
            *(_DWORD *)v193 += 2;
          v841[0] = v193;
          WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add((uint64_t *)(v192 + 8), (WTF::AtomStringImpl *)v841, a3, a4, a5, a6, a7, a8, (uint64_t)&v842);
          v194 = v843;
          v195 = v841[0];
          v841[0] = 0;
          if (v195)
          {
            if (*(_DWORD *)v195 == 2)
            {
              WTF::StringImpl::~StringImpl(v195, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v257, v258, v259, v260, v261, v262, v263, v264);
            }
            else
            {
              *(_DWORD *)v195 -= 2;
            }
          }
          if (v194)
          {
            v196 = v831;
            JSC::ModuleScopeData::exportBinding(v837[939], *(WTF::StringImpl **)v831, (_QWORD *)(*(_QWORD *)(v837[902] + 41952) + 192), a4, a5, a6, a7, a8);
            v197 = *(uint64_t **)(v8 + 8);
            v28 = *v197;
            if ((unint64_t)(v197[1] - *v197) <= 0x37)
            {
              JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v8 + 8));
              v28 = *v197;
            }
            *v197 = v28 + 56;
            *(_DWORD *)(v28 + 8) = v844[0];
            *(int32x2_t *)(v28 + 12) = vrev64_s32(*(int32x2_t *)((char *)v844 + 4));
            *(_DWORD *)(v28 + 20) = -1;
            *(_BYTE *)(v28 + 24) = 0;
            *(_DWORD *)(v28 + 28) = -1;
            *(_QWORD *)v28 = &off_1E3589C48;
            *(_QWORD *)(v28 + 32) = 0;
            *(_QWORD *)(v28 + 40) = v138;
            *(_QWORD *)(v28 + 48) = v196;
            goto LABEL_18;
          }
          if (v837[920])
            goto LABEL_359;
        }
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>((uint64_t)v837, 0, "Only one 'default' export is allowed");
        goto LABEL_359;
      }
      if (*v13 != 20 && (*v13 & 0x100000) == 0)
      {
        if (!v837[920])
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[24]>((uint64_t)v837);
        goto LABEL_359;
      }
      goto LABEL_358;
    case 518:
    case 519:
    case 522:
      goto LABEL_354;
    case 520:
      v112 = (uint64_t)v837;
      v113 = v8;
      v114 = 0;
      goto LABEL_86;
    case 521:
      v112 = (uint64_t)v837;
      v113 = v8;
      v114 = 2;
      goto LABEL_86;
    case 523:
      v202 = (uint64_t)v837;
      v203 = *((_DWORD *)v837 + 1864);
      *((_DWORD *)v837 + 1864) = 1;
      v26 = JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionDeclaration<JSC::ASTBuilder>(v202, v8, 0, 0, 0, 0, a7, a8);
      *(_DWORD *)(v202 + 7456) = v203;
      v13 = v835;
      goto LABEL_14;
    default:
      if (v24)
      {
        if (v24 == 12 && *(_QWORD *)v837[922] == *(_QWORD *)(*(_QWORD *)(v837[902] + 41952) + 896) && !v10[40])
        {
          v474 = (uint64_t)v837;
          v475 = *((unsigned int *)v837 + 1855);
          v476 = *((_DWORD *)v837 + 1850);
          v477 = *((_DWORD *)v837 + 1853);
          v478 = *((_DWORD *)v837 + 1851);
          *((_DWORD *)v837 + 1861) = v476;
          *(_DWORD *)(v474 + 7448) = v477;
          *(_DWORD *)(v474 + 7452) = v478;
          v479 = *(_QWORD *)(v474 + 7288);
          *(_DWORD *)(v479 + 4) = v476;
          v480 = *(_DWORD *)(v474 + 12);
          if (!v480)
          {
            __break(0xC471u);
            JUMPOUT(0x197E4F51CLL);
          }
          v481 = *(_BYTE *)(*(_QWORD *)v474 + 720 * (v480 - 1) + 9) & 1;
          *(_BYTE *)(v479 + 56) = 0;
          v482 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v479, (uint64_t)v835, 0, v481, a5, a6, a7, a8);
          *(_DWORD *)(v474 + 7368) = v482;
          if (v482 != 523 || *(_BYTE *)(*(_QWORD *)(v474 + 7288) + 56))
          {
            if (!*(_QWORD *)(v474 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[88]>((uint64_t)v837);
            goto LABEL_359;
          }
          v483 = *(_DWORD *)(v474 + 7456);
          *(_DWORD *)(v474 + 7456) = 1;
          v26 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAsyncFunctionDeclaration<JSC::ASTBuilder>(v474, v8, v475, 0, 0, 0, a7, a8);
          *(_DWORD *)(v474 + 7456) = v483;
          v13 = v835;
          goto LABEL_14;
        }
LABEL_354:
        if (v24 != 20 && (v24 & 0x100000) == 0)
        {
          if (!v837[920])
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>((uint64_t)v837, 1, "Expected either a declaration or a variable statement");
          goto LABEL_359;
        }
LABEL_358:
        JSC::Parser<JSC::Lexer<unsigned char>>::logError((uint64_t)v837);
        goto LABEL_359;
      }
      v204 = (uint64_t)v837;
      v205 = *((_DWORD *)v837 + 1850);
      v206 = *((_DWORD *)v837 + 1853);
      v207 = *((_DWORD *)v837 + 1851);
      *((_DWORD *)v837 + 1861) = v205;
      *(_DWORD *)(v204 + 7448) = v206;
      *(_DWORD *)(v204 + 7452) = v207;
      v208 = *(_QWORD *)(v204 + 7288);
      *(_DWORD *)(v208 + 4) = v205;
      v209 = *(_DWORD *)(v204 + 12);
      if (!v209)
      {
        __break(0xC471u);
        JUMPOUT(0x197E4F404);
      }
      v210 = *(_BYTE *)(*(_QWORD *)v204 + 720 * (v209 - 1) + 9) & 1;
      *(_BYTE *)(v208 + 56) = 0;
      *(_DWORD *)(v204 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v208, (uint64_t)v13, 0, v210, a5, a6, a7, a8);
      v211 = JSC::ASTBuilder::createExportSpecifierList(*(JSC::ASTBuilder **)(v8 + 8));
      v841[0] = 0;
      v841[1] = 0;
      v213 = *(_DWORD *)(v204 + 7368);
      v830 = (uint64_t)v211;
      if (v213 == 1)
      {
        LODWORD(v826) = 0;
        v827 = 0;
LABEL_199:
        v265 = (uint64_t)v837;
        v266 = *((_DWORD *)v837 + 1850);
        v267 = *((_DWORD *)v837 + 1853);
        v268 = *((_DWORD *)v837 + 1851);
        *((_DWORD *)v837 + 1861) = v266;
        *(_DWORD *)(v265 + 7448) = v267;
        *(_DWORD *)(v265 + 7452) = v268;
        v269 = *(_QWORD *)(v265 + 7288);
        *(_DWORD *)(v269 + 4) = v266;
        v270 = *(_DWORD *)(v265 + 12);
        if (!v270)
        {
          __break(0xC471u);
          JUMPOUT(0x197E4F3ECLL);
        }
        v271 = *(_BYTE *)(*(_QWORD *)v265 + 720 * (v270 - 1) + 9) & 1;
        *(_BYTE *)(v269 + 56) = 0;
        v272 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v269, (uint64_t)v13, 0, v271, a5, a6, a7, a8);
        *(_DWORD *)(v265 + 7368) = v272;
        if (v272 == 12 && *(_QWORD *)v837[922] == *(_QWORD *)(*(_QWORD *)(v837[902] + 41952) + 1360) && !v10[40])
        {
          v694 = (uint64_t)v837;
          v695 = *((_DWORD *)v837 + 1850);
          v696 = *((_DWORD *)v837 + 1853);
          v697 = *((_DWORD *)v837 + 1851);
          *((_DWORD *)v837 + 1861) = v695;
          *(_DWORD *)(v694 + 7448) = v696;
          *(_DWORD *)(v694 + 7452) = v697;
          v698 = *(_QWORD *)(v694 + 7288);
          *(_DWORD *)(v698 + 4) = v695;
          v699 = *(_DWORD *)(v694 + 12);
          if (!v699)
          {
            __break(0xC471u);
            JUMPOUT(0x197E4F3F4);
          }
          v700 = (uint64_t)v837;
          v701 = *(_BYTE *)(*v837 + 720 * (v699 - 1) + 9) & 1;
          *(_BYTE *)(v698 + 56) = 0;
          *(_DWORD *)(v700 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v698, (uint64_t)v835, 0, v701, a5, a6, a7, a8);
          v708 = JSC::Parser<JSC::Lexer<unsigned char>>::parseModuleName<JSC::ASTBuilder>(v700, v8, v702, v703, v704, v705, v706, v707);
          if (!v708)
          {
            if (*v835 != 20 && (*v835 & 0x100000) == 0)
            {
              if (!v837[920])
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>((uint64_t)v837, 1, "Cannot parse the 'from' clause");
              goto LABEL_637;
            }
            goto LABEL_636;
          }
          v709 = v708;
          if (BYTE5(qword_1ECF4C7A0) && (v710 = v837[911], !*(_BYTE *)(v710 + 56)) && *v835 == 530)
          {
            v789 = v837;
            v790 = *((_DWORD *)v837 + 1850);
            v791 = *((_DWORD *)v837 + 1853);
            v792 = *((_DWORD *)v837 + 1851);
            *((_DWORD *)v837 + 1861) = v790;
            v789[1862] = v791;
            v789[1863] = v792;
            *(_DWORD *)(v710 + 4) = v790;
            v793 = v789[3];
            if (!v793)
            {
              __break(0xC471u);
              JUMPOUT(0x197E4F544);
            }
            v794 = (uint64_t)v837;
            v795 = *(_BYTE *)(*v837 + 720 * (v793 - 1) + 9) & 1;
            *(_BYTE *)(v710 + 56) = 0;
            *(_DWORD *)(v794 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v710, (uint64_t)v835, 0, v795, a5, a6, a7, a8);
            v711 = JSC::Parser<JSC::Lexer<unsigned char>>::parseImportAttributes<JSC::ASTBuilder>(v794, *(uint64_t **)(v8 + 8), v796, v797, v798, v799, v800, v801);
            if (!v711)
            {
              if (*v835 != 20 && (*v835 & 0x100000) == 0)
              {
                if (!v837[920])
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>((uint64_t)v837, 1, "Unable to parse import attributes");
                goto LABEL_637;
              }
LABEL_636:
              JSC::Parser<JSC::Lexer<unsigned char>>::logError((uint64_t)v837);
LABEL_637:
              v28 = 0;
              goto LABEL_638;
            }
          }
          else
          {
            v711 = 0;
          }
          v712 = JSC::Parser<JSC::Lexer<unsigned char>>::autoSemiColon((uint64_t)v837, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v13 = v835;
          v16 = v836;
          if (v712)
          {
            JSC::ASTBuilder::createExportNamedDeclaration(*(JSC::ParserArena **)(v8 + 8), (uint64_t)v844, v830, v709, v711);
            v28 = v713;
            goto LABEL_209;
          }
        }
        else
        {
          if (v827)
          {
            if (!v837[920])
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>((uint64_t)v837, "Cannot use module export names if they reference variable names in the current module");
            goto LABEL_637;
          }
          if (JSC::Parser<JSC::Lexer<unsigned char>>::autoSemiColon((uint64_t)v837, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
          {
            if (!(_DWORD)v826)
            {
              v273 = v830;
              if (HIDWORD(v841[1]))
              {
                v274 = v841[0];
                v275 = (WTF *)((char *)v841[0] + 16 * HIDWORD(v841[1]));
                do
                {
                  v277 = *(WTF::StringImpl ***)v274;
                  v276 = (_QWORD *)*((_QWORD *)v274 + 1);
                  v274 = (WTF *)((char *)v274 + 16);
                  JSC::ModuleScopeData::exportBinding(v837[939], *v277, v276, a4, a5, a6, a7, a8);
                }
                while (v274 != v275);
              }
              JSC::ASTBuilder::createExportNamedDeclaration(*(JSC::ParserArena **)(v8 + 8), (uint64_t)v844, v273, 0, 0);
              v28 = v278;
              v13 = v835;
              goto LABEL_209;
            }
            if (!v837[920])
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>((uint64_t)v837, 0, "Cannot use keyword as exported variable name");
            goto LABEL_637;
          }
        }
        if (*v13 != 20 && (*v13 & 0x100000) == 0)
        {
          if (!v837[920])
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>((uint64_t)v837, 1, "Expected a ';' following a targeted export declaration");
          goto LABEL_637;
        }
        goto LABEL_636;
      }
      LODWORD(v826) = 0;
      v827 = 0;
      v829 = v211 + 1;
      while (1)
      {
        if (v213 == 12 || (v213 & 0x200) != 0)
        {
          v214 = v12;
          v215 = *((_DWORD *)v837 + 1850);
          *(_QWORD *)&v212 = *(_QWORD *)(v10 + 60);
          v216 = (WTF::StringImpl **)v837[922];
          if ((v213 & 0x200) != 0)
            LODWORD(v826) = 1;
          goto LABEL_174;
        }
        v214 = v12;
        if (v213 != 14)
          break;
        v216 = (WTF::StringImpl **)v837[922];
        v400 = *v216;
        if (*v216)
        {
          v401 = *((unsigned int *)v400 + 4);
          v402 = (unsigned __int16 *)*((_QWORD *)v400 + 1);
          v400 = (WTF::StringImpl *)*((unsigned int *)v400 + 1);
          v403 = (v401 >> 2) & 1;
        }
        else
        {
          v402 = 0;
          v403 = 1;
        }
        v215 = *((_DWORD *)v837 + 1850);
        *(_QWORD *)&v212 = *(_QWORD *)(v10 + 60);
        v831 = v212;
        if (WTF::hasUnpairedSurrogate(v402, (unint64_t)v400 | (v403 << 32)))
        {
          v658 = v14;
          v409 = v10;
          v659 = v8;
          if (v837[920])
            goto LABEL_525;
          goto LABEL_592;
        }
        v827 = 1;
        v212 = v831;
LABEL_174:
        v217 = (uint64_t)v837;
        v218 = *((_DWORD *)v837 + 1853);
        *((_DWORD *)v837 + 1861) = v215;
        *(_DWORD *)(v217 + 7448) = v218;
        v831 = v212;
        *(_DWORD *)(v217 + 7452) = v212;
        v219 = *(_QWORD *)(v217 + 7288);
        *(_DWORD *)(v219 + 4) = v215;
        v220 = *(_DWORD *)(v217 + 12);
        if (!v220)
        {
          __break(0xC471u);
          JUMPOUT(0x197E4F53CLL);
        }
        v221 = *(_BYTE *)(*(_QWORD *)v217 + 720 * (v220 - 1) + 9) & 1;
        *(_BYTE *)(v219 + 56) = 0;
        v222 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v219, (uint64_t)v835, 0, v221, a5, a6, a7, a8);
        *(_DWORD *)(v217 + 7368) = v222;
        v229 = v216;
        if (v222 == 12)
        {
          v229 = v216;
          if (**(_QWORD **)(v217 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v217 + 7216) + 41952) + 888))
          {
            v229 = v216;
            if (!v10[40])
            {
              v404 = *(_DWORD *)(v217 + 7400);
              v405 = *(_DWORD *)(v217 + 7412);
              v406 = *(_DWORD *)(v217 + 7404);
              *(_DWORD *)(v217 + 7444) = v404;
              *(_DWORD *)(v217 + 7448) = v405;
              *(_DWORD *)(v217 + 7452) = v406;
              v407 = *(_QWORD *)(v217 + 7288);
              *(_DWORD *)(v407 + 4) = v404;
              v408 = *(_DWORD *)(v217 + 12);
              if (!v408)
              {
                __break(0xC471u);
                JUMPOUT(0x197E4F52CLL);
              }
              v409 = v10;
              v410 = *(_BYTE *)(*(_QWORD *)v217 + 720 * (v408 - 1) + 9) & 1;
              *(_BYTE *)(v407 + 56) = 0;
              v411 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v407, (uint64_t)v835, 0, v410, v225, v226, v227, v228);
              *(_DWORD *)(v217 + 7368) = v411;
              if (v411 == 12 || (v411 & 0x200) != 0)
              {
                v217 = (uint64_t)v837;
                v229 = (WTF::StringImpl **)v837[922];
              }
              else
              {
                v658 = v14;
                v659 = v8;
                if (v411 != 14)
                {
                  if (v411 == 20 || (v411 & 0x100000) != 0)
                  {
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError((uint64_t)v837);
                  }
                  else if (!v837[920])
                  {
                    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>((uint64_t)v837, "Expected an exported name or a module export name string for the export declaration");
                  }
                  goto LABEL_525;
                }
                v229 = (WTF::StringImpl **)v837[922];
                v803 = *v229;
                if (*v229)
                {
                  v804 = (unsigned __int16 *)*((_QWORD *)v803 + 1);
                  v805 = *((unsigned int *)v803 + 1) | ((unint64_t)((*((_DWORD *)v803 + 4) >> 2) & 1) << 32);
                }
                else
                {
                  v804 = 0;
                  v805 = 0x100000000;
                }
                hasUnpairedSurrogate = WTF::hasUnpairedSurrogate(v804, v805);
                v217 = (uint64_t)v837;
                if (hasUnpairedSurrogate)
                {
                  if (v837[920])
                  {
LABEL_525:
                    if (*v835 == 20 || (*v835 & 0x100000) != 0)
                    {
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError((uint64_t)v837);
                    }
                    else if (!v837[920])
                    {
                      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>((uint64_t)v837, "Cannot parse the named export");
                    }
                    v28 = 0;
                    v12 = v214;
                    v8 = v659;
                    v10 = v409;
                    v13 = v835;
                    v14 = v658;
                    goto LABEL_639;
                  }
LABEL_592:
                  JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[65]>((uint64_t)v837);
                  goto LABEL_525;
                }
              }
              v412 = *(_DWORD *)(v217 + 7400);
              v413 = *(_DWORD *)(v217 + 7412);
              v414 = *(_DWORD *)(v217 + 7404);
              *(_DWORD *)(v217 + 7444) = v412;
              *(_DWORD *)(v217 + 7448) = v413;
              *(_DWORD *)(v217 + 7452) = v414;
              v415 = *(_QWORD *)(v217 + 7288);
              *(_DWORD *)(v415 + 4) = v412;
              v416 = *(_DWORD *)(v217 + 12);
              if (!v416)
              {
                __break(0xC471u);
                JUMPOUT(0x197E4F534);
              }
              v417 = *(_BYTE *)(*(_QWORD *)v217 + 720 * (v416 - 1) + 9) & 1;
              *(_BYTE *)(v415 + 56) = 0;
              *(_DWORD *)(v217 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v415, (uint64_t)v835, 0, v417, a5, a6, a7, a8);
              v10 = v409;
            }
          }
        }
        v230 = *(_QWORD *)(v217 + 7512);
        v231 = *v229;
        if (*v229)
          *(_DWORD *)v231 += 2;
        v839 = v231;
        WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add((uint64_t *)(v230 + 8), (WTF::AtomStringImpl *)&v839, v223, v224, v225, v226, v227, v228, (uint64_t)&v842);
        v232 = v843;
        v233 = v839;
        v839 = 0;
        if (v233)
        {
          if (*(_DWORD *)v233 == 2)
          {
            WTF::StringImpl::~StringImpl(v233, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v248, v249, v250, v251, v252, v253, v254, v255);
          }
          else
          {
            *(_DWORD *)v233 -= 2;
          }
        }
        if (!v232)
        {
          v658 = v14;
          v409 = v10;
          v659 = v8;
          if (!v837[920])
          {
            *(_QWORD *)&v842 = *v229;
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],WTF::UniquedStringImpl *,char const(&)[2]>((uint64_t)v837, (uint64_t *)&v842);
          }
          goto LABEL_525;
        }
        *(_QWORD *)&v842 = v216;
        *((_QWORD *)&v842 + 1) = v229;
        v234 = HIDWORD(v841[1]);
        if (HIDWORD(v841[1]) == LODWORD(v841[1]))
        {
          WTF::Vector<std::pair<JSC::Identifier const*,JSC::Identifier const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::Identifier const*,JSC::Identifier const*>>((uint64_t)v841, (unint64_t)&v842);
        }
        else
        {
          *((_OWORD *)v841[0] + HIDWORD(v841[1])) = v842;
          HIDWORD(v841[1]) = v234 + 1;
        }
        v235 = *(uint64_t **)(v8 + 8);
        v236 = *v235;
        v237 = (int32x2_t)v831;
        if ((unint64_t)(v235[1] - *v235) <= 0x2F)
        {
          JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(v8 + 8));
          v237 = (int32x2_t)v831;
          v236 = *v235;
        }
        *v235 = v236 + 48;
        *(_DWORD *)(v236 + 8) = v215;
        *(int32x2_t *)(v236 + 12) = vrev64_s32(v237);
        *(_DWORD *)(v236 + 20) = -1;
        *(_BYTE *)(v236 + 24) = 0;
        *(_QWORD *)v236 = &off_1E357B250;
        *(_QWORD *)(v236 + 32) = v216;
        *(_QWORD *)(v236 + 40) = v229;
        *(_QWORD *)&v842 = v236;
        v238 = v830;
        v239 = *(unsigned int *)(v830 + 20);
        if ((_DWORD)v239 == *(_DWORD *)(v830 + 16))
        {
          v256 = (_QWORD *)WTF::Vector<JSC::ExportSpecifierNode *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v829, v239 + 1, (unint64_t)&v842);
          v239 = *(unsigned int *)(v238 + 20);
          *(_QWORD *)(*(_QWORD *)(v238 + 8) + 8 * v239) = *v256;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v829 + 8 * v239) = v236;
        }
        v12 = v214;
        v13 = v835;
        v16 = v836;
        *(_DWORD *)(v238 + 20) = v239 + 1;
        v240 = *v13;
        if (*v13 != 6)
        {
          if (v240 == 1)
            goto LABEL_199;
          if (v240 == 20 || (v240 & 0x100000) != 0)
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError((uint64_t)v837);
          }
          else if (!v837[920])
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[12]>((uint64_t)v837, "export list");
          }
          v28 = 0;
          goto LABEL_209;
        }
        v241 = (uint64_t)v837;
        v242 = *((_DWORD *)v837 + 1850);
        v243 = *((_DWORD *)v837 + 1853);
        v244 = *((_DWORD *)v837 + 1851);
        *((_DWORD *)v837 + 1861) = v242;
        *(_DWORD *)(v241 + 7448) = v243;
        *(_DWORD *)(v241 + 7452) = v244;
        v245 = *(_QWORD *)(v241 + 7288);
        *(_DWORD *)(v245 + 4) = v242;
        v246 = *(_DWORD *)(v241 + 12);
        if (!v246)
        {
          __break(0xC471u);
          JUMPOUT(0x197E4F524);
        }
        v247 = *(_BYTE *)(*(_QWORD *)v241 + 720 * (v246 - 1) + 9) & 1;
        *(_BYTE *)(v245 + 56) = 0;
        v213 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v245, (uint64_t)v13, 0, v247, a5, a6, a7, a8);
        *(_DWORD *)(v241 + 7368) = v213;
        if (v213 == 1)
          goto LABEL_199;
      }
      if (v213 == 20 || (v213 & 0x100000) != 0)
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError((uint64_t)v837);
      }
      else if (!v837[920])
      {
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[83]>((uint64_t)v837);
      }
      v28 = 0;
LABEL_638:
      v13 = v835;
LABEL_639:
      v16 = v836;
LABEL_209:
      if (v841[0])
        WTF::fastFree((unint64_t)v841[0], a2, a3, a4, a5, a6, a7, a8);
LABEL_158:
      if (v28)
        goto LABEL_19;
LABEL_359:
      if (v837[920])
        return 0;
      v485 = *(_QWORD *)(v837[939] + 16);
      if (!v485)
      {
        v488 = 0;
        LODWORD(v486) = 0;
LABEL_433:
        v487 = (WTF::StringImpl **)(v485 + 24 * v486);
        goto LABEL_367;
      }
      v486 = *(unsigned int *)(v485 - 4);
      v487 = (WTF::StringImpl **)(v485 + 24 * v486);
      if (!*(_DWORD *)(v485 - 12))
      {
        v488 = (WTF::StringImpl **)(v485 + 24 * v486);
        goto LABEL_433;
      }
      v488 = *(WTF::StringImpl ***)(v837[939] + 16);
      if ((_DWORD)v486)
      {
        v489 = 24 * v486;
        v488 = *(WTF::StringImpl ***)(v837[939] + 16);
        while ((unint64_t)*v488 + 1 <= 1)
        {
          v488 += 3;
          v489 -= 24;
          if (!v489)
          {
            v488 = v487;
            break;
          }
        }
      }
LABEL_367:
      if (v485)
        v490 = (WTF::StringImpl **)(v485 + 24 * *(unsigned int *)(v485 - 4));
      else
        v490 = 0;
      if (v490 == v488)
        return v12;
      v491 = *((_DWORD *)v837 + 3);
      while (2)
      {
        if (!v491)
        {
          __break(0xC471u);
          JUMPOUT(0x197E4F564);
        }
        v492 = *v837;
        v493 = *v488;
        if (*v488)
          *(_DWORD *)v493 += 2;
        v494 = (uint64_t *)(v492 + 720 * (v491 - 1) + 120);
        v495 = *v494;
        if (*v494)
        {
          v496 = *((_DWORD *)v493 + 4);
          if ((v496 & 0x20) != 0)
            v496 = *((_DWORD *)v493 + 8);
          v497 = *(_DWORD *)(v495 - 8);
          v498 = v497 & (v496 >> 8);
          v499 = *(WTF::StringImpl **)(v495 + 16 * v498);
          if (v499 != v493)
          {
            v500 = 1;
            while (v499)
            {
              v498 = ((_DWORD)v498 + v500) & v497;
              v499 = *(WTF::StringImpl **)(v495 + 16 * v498);
              ++v500;
              if (v499 == v493)
                goto LABEL_383;
            }
            v498 = *(unsigned int *)(v495 - 4);
          }
LABEL_383:
          v501 = v495 + 16 * v498;
        }
        else
        {
          v501 = 0;
        }
        if (v493)
        {
          if (*(_DWORD *)v493 == 2)
          {
            WTF::StringImpl::~StringImpl(v493, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v523, v524, v525, v526, v527, v528, v529, v530);
          }
          else
          {
            *(_DWORD *)v493 -= 2;
          }
        }
        v502 = *v494;
        if (*v494)
          v502 += 16 * *(unsigned int *)(v502 - 4);
        if (v501 == v502)
        {
          v491 = *((_DWORD *)v837 + 3);
          goto LABEL_391;
        }
        v491 = *((_DWORD *)v837 + 3);
        if ((*(_WORD *)(v501 + 8) & 4) != 0)
        {
          if (!v491)
          {
            __break(0xC471u);
            JUMPOUT(0x197E4F56CLL);
          }
          v517 = (uint64_t *)(*v837 + 720 * (v491 - 1) + 120);
          goto LABEL_412;
        }
LABEL_391:
        if (!v491)
        {
          __break(0xC471u);
          JUMPOUT(0x197E4F55CLL);
        }
        v503 = (uint64_t *)(*v837 + 720 * (v491 - 1) + 144);
        v504 = *v488;
        if (*v488)
        {
          v505 = *(_DWORD *)v504;
          *(_DWORD *)v504 += 2;
          v506 = *v503;
          if (!v506)
          {
            if (v505)
            {
              *(_DWORD *)v504 = v505;
            }
            else
            {
              WTF::StringImpl::~StringImpl(v504, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v532, v533, v534, v535, v536, v537, v538, v539);
            }
            goto LABEL_427;
          }
        }
        else
        {
          v506 = *v503;
          if (!v506)
            goto LABEL_427;
        }
        v507 = *((_DWORD *)v504 + 4);
        if ((v507 & 0x20) != 0)
          v507 = *((_DWORD *)v504 + 8);
        v508 = *(_DWORD *)(v506 - 8);
        v509 = v508 & (v507 >> 8);
        v510 = *(WTF::StringImpl **)(v506 + 16 * v509);
        if (v510 == v504)
        {
          v516 = *(_DWORD *)v504 - 2;
          if (*(_DWORD *)v504 == 2)
          {
            WTF::StringImpl::~StringImpl(v504, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v548, v549, v550, v551, v552, v553, v554, v555);
          }
          else
          {
LABEL_409:
            *(_DWORD *)v504 = v516;
          }
LABEL_410:
          v491 = *((_DWORD *)v837 + 3);
          if (!v491)
          {
            __break(0xC471u);
            JUMPOUT(0x197E4F554);
          }
          v517 = (uint64_t *)(*v837 + 720 * (v491 - 1) + 144);
LABEL_412:
          v518 = *v517;
          if (!v518)
            goto LABEL_442;
          v519 = *v488;
          v520 = *((_DWORD *)*v488 + 4);
          if ((v520 & 0x20) != 0)
            v520 = *((_DWORD *)v519 + 8);
          v521 = *(_DWORD *)(v518 - 8);
          v513 = v521 & (v520 >> 8);
          v514 = *(WTF::StringImpl **)(v518 + 16 * v513);
          if (v514 != v519)
          {
            v515 = 1;
            while (v514)
            {
              v513 = ((_DWORD)v513 + v515) & v521;
              v514 = *(WTF::StringImpl **)(v518 + 16 * v513);
              ++v515;
              if (v514 == v519)
                goto LABEL_416;
            }
            v513 = *(unsigned int *)(v518 - 4);
          }
LABEL_416:
          if (v513 == *(_DWORD *)(v518 - 4))
          {
LABEL_442:
            __break(0xC471u);
            JUMPOUT(0x197E4E0F8);
          }
          *(_WORD *)(v518 + 16 * v513 + 8) |= 0x10u;
          v522 = v488 + 3;
          v488 = v487;
          if (v522 != v487)
          {
            v488 = v522;
            while ((unint64_t)*v488 + 1 <= 1)
            {
              v488 += 3;
              if (v488 == v487)
              {
                v488 = v487;
                break;
              }
            }
          }
          if (v488 == v490)
            return v12;
          continue;
        }
        break;
      }
      v511 = 1;
      do
      {
        v512 = v510;
        if (!v510)
        {
          if (!v504)
            goto LABEL_427;
          if (*(_DWORD *)v504 != 2)
          {
            *(_DWORD *)v504 -= 2;
            goto LABEL_427;
          }
          goto LABEL_440;
        }
        v509 = (v509 + v511) & v508;
        v510 = *(WTF::StringImpl **)(v506 + 16 * v509);
        ++v511;
      }
      while (v510 != v504);
      if (!v504)
        goto LABEL_410;
      v516 = *(_DWORD *)v504 - 2;
      if (*(_DWORD *)v504 != 2)
        goto LABEL_409;
LABEL_440:
      WTF::StringImpl::~StringImpl(v504, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v540, v541, v542, v543, v544, v545, v546, v547);
      if (v512)
        goto LABEL_410;
LABEL_427:
      if (!v837[920])
      {
        *(_QWORD *)&v842 = *v488;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[19],WTF::UniquedStringImpl *,char const(&)[50]>((uint64_t)v837, (uint64_t *)&v842);
      }
      return 0;
  }
}

_QWORD *JSC::Parser<JSC::Lexer<unsigned char>>::parseGeneratorFunctionSourceElements<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, WTF::AtomStringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t GeneratorFunctionBody;
  double ExprStatement;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  int v60;
  __int16 v61;
  __int16 v62;
  _BYTE v63[40];
  uint64_t v64;
  _QWORD v65[2];
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  int v70;
  uint64_t v71;
  int v72;
  _OWORD v73[2];

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD **)v11;
  if (*(_QWORD *)(v11 + 8) - *(_QWORD *)v11 <= 0xFuLL)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v12 = *(_QWORD **)v11;
  }
  *(_QWORD *)v11 = v12 + 2;
  *v12 = 0;
  v12[1] = 0;
  v13 = *(_DWORD *)(a1 + 7408);
  v73[0] = *(_OWORD *)(a1 + 7400);
  v71 = *(_QWORD *)(a1 + 7416);
  v72 = *(_DWORD *)(a1 + 7424);
  v14 = *(_DWORD *)(a1 + 7404);
  v70 = 0;
  v69 = 0u;
  v68 = 0u;
  v67 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
  JSC::Parser<JSC::Lexer<unsigned char>>::createGeneratorParameters<JSC::ASTBuilder>(a1, a2, (_DWORD *)&v68 + 2, a4, a5, a6, a7, a8);
  v15 = *(_DWORD *)(a1 + 7400);
  LODWORD(v69) = v13;
  DWORD2(v69) = v15;
  v16 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  v18 = v17;
  v65[0] = v16;
  v65[1] = v17;
  v66 = a1;
  if (*(_DWORD *)(v16 + 12) <= v17)
  {
    __break(0xC471u);
    goto LABEL_22;
  }
  v19 = v16;
  v20 = v17;
  *(_DWORD *)(*(_QWORD *)v16 + 720 * v17 + 10) = *(_DWORD *)(*(_QWORD *)v16
                                                                           + 720 * v17
                                                                           + 10) & 0xFE8F007F | 0x408780;
  JSC::Parser<JSC::Lexer<unsigned char>>::resetImplementationVisibilityIfNeeded((uint64_t *)a1);
  if (*(_DWORD *)(v19 + 12) <= v18)
  {
    __break(0xC471u);
    JUMPOUT(0x197E4F8CCLL);
  }
  v26 = *(_QWORD *)v19 + 720 * v20;
  *(_BYTE *)(v26 + 15) = 0;
  *(_DWORD *)(v26 + 20) = *(_DWORD *)(a1 + 7484);
  v64 = *(_QWORD *)(a1 + 7216);
  if (JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::SyntaxChecker>(a1, (uint64_t)&v64, 0, v21, v22, v23, v24, v25))
  {
    v66 = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v63, (uint64_t *)a1, 1, v29, v30, v31, v32, v33);
    std::tuple<JSC::VariableEnvironment,WTF::Vector<JSC::FunctionMetadataNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~tuple((uint64_t)v63, v34, v35, v36, v37, v38, v39, v40);
    JSC::Parser<JSC::Lexer<unsigned char>>::AutoPopScopeRef::~AutoPopScopeRef((uint64_t)v65, v41, v42, v43, v44, v45, v46, v47);
    v48 = *(_DWORD *)(a1 + 12);
    if (v48)
    {
      v61 = *(_WORD *)(*(_QWORD *)a1 + 720 * (v48 - 1) + 8);
      *(_QWORD *)&v68 = JSC::ASTBuilder::createFunctionMetadata(a2, (uint64_t)v73, a1 + 7400, v13 - v14, *(_DWORD *)(a1 + 7408) - *(_DWORD *)(a1 + 7404), v13, v13, v13, v61, SHIBYTE(v61), v62, *(_DWORD *)(a1 + 7484), SDWORD2(v68), 1, 0);
      v49 = *(_DWORD *)(a1 + 7380);
      HIDWORD(v69) = *(_DWORD *)(a1 + 7400);
      v70 = v13 - v14;
      DWORD1(v69) = v49;
      GeneratorFunctionBody = JSC::ASTBuilder::createGeneratorFunctionBody(a2, (uint64_t)v73, (uint64_t)&v67, a3, v50, v51, v52, v53);
      ExprStatement = JSC::ASTBuilder::createExprStatement(*(JSC::ParserArena **)(a2 + 8), (uint64_t)v73, GeneratorFunctionBody, (uint64_t)&v71, *(_DWORD *)(a1 + 7444));
      v57 = v56;
      if (((*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v56 + 40))(v56, ExprStatement) & 1) == 0)
      {
        if (*v12)
        {
          v58 = v12 + 1;
          *(_QWORD *)(v12[1] + 32) = v57;
        }
        else
        {
          *v12 = v57;
          v58 = v12 + 1;
        }
        *v58 = v57;
      }
      return v12;
    }
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x197E4F8C4);
  }
  v60 = *(_DWORD *)(a1 + 7368);
  if (v60 == 20 || (v60 & 0x100000) != 0)
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
  }
  else if (!*(_QWORD *)(a1 + 7360))
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of a generator");
  }
  JSC::Parser<JSC::Lexer<unsigned char>>::AutoPopScopeRef::~AutoPopScopeRef((uint64_t)v65, v27, v28, v29, v30, v31, v32, v33);
  return 0;
}

_QWORD *JSC::Parser<JSC::Lexer<unsigned char>>::parseAsyncGeneratorFunctionSourceElements<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  _BYTE *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t FunctionExpr;
  double ExprStatement;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  int v59;
  __int16 v60;
  __int16 v61;
  _BYTE v62[40];
  uint64_t v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  int v69;
  uint64_t v70;
  int v71;
  __int128 v72;

  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD **)v10;
  if (*(_QWORD *)(v10 + 8) - *(_QWORD *)v10 <= 0xFuLL)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v11 = *(_QWORD **)v10;
  }
  *(_QWORD *)v10 = v11 + 2;
  *v11 = 0;
  v11[1] = 0;
  v12 = *(_DWORD *)(a1 + 7408);
  v72 = *(_OWORD *)(a1 + 7400);
  v70 = *(_QWORD *)(a1 + 7416);
  v71 = *(_DWORD *)(a1 + 7424);
  v13 = *(_DWORD *)(a1 + 7404);
  v69 = 0;
  v68 = 0u;
  v67 = 0u;
  v66 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
  JSC::Parser<JSC::Lexer<unsigned char>>::createGeneratorParameters<JSC::ASTBuilder>(a1, a2, (_DWORD *)&v67 + 2, a4, a5, a6, a7, a8);
  v14 = *(_DWORD *)(a1 + 7400);
  LODWORD(v68) = v12;
  DWORD2(v68) = v14;
  v15 = (_BYTE *)(a1 + 7474);
  v16 = *(_BYTE *)(a1 + 7474);
  *(_BYTE *)(a1 + 7474) = 15;
  v17 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  v64[0] = v17;
  v64[1] = v18;
  v65 = a1;
  if (*(_DWORD *)(v17 + 12) <= v18)
  {
    __break(0xC471u);
    goto LABEL_22;
  }
  JSC::Scope::setSourceParseMode(*(_QWORD *)v17 + 720 * v18, *v15);
  JSC::Parser<JSC::Lexer<unsigned char>>::resetImplementationVisibilityIfNeeded((uint64_t *)a1);
  v63 = *(_QWORD *)(a1 + 7216);
  if (*(_QWORD *)(a1 + 7520))
  {
    if (JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::ASTBuilder>(a1, a2, 0, v19, v20, v21, v22, v23))
    {
      goto LABEL_6;
    }
  }
  else if (JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::SyntaxChecker>(a1, (uint64_t)&v63, 0, v19, v20, v21, v22, v23))
  {
LABEL_6:
    v65 = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::popScopeInternal((uint64_t)v62, (uint64_t *)a1, 1, v26, v27, v28, v29, v30);
    std::tuple<JSC::VariableEnvironment,WTF::Vector<JSC::FunctionMetadataNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~tuple((uint64_t)v62, v31, v32, v33, v34, v35, v36, v37);
    JSC::Parser<JSC::Lexer<unsigned char>>::AutoPopScopeRef::~AutoPopScopeRef((uint64_t)v64, v38, v39, v40, v41, v42, v43, v44);
    v45 = *(_DWORD *)(a1 + 12);
    if (v45)
    {
      v46 = v12 - v13;
      v60 = *(_WORD *)(*(_QWORD *)a1 + 720 * (v45 - 1) + 8);
      *(_QWORD *)&v67 = JSC::ASTBuilder::createFunctionMetadata(a2, (uint64_t)&v72, a1 + 7400, v46, *(_DWORD *)(a1 + 7408) - *(_DWORD *)(a1 + 7404), v12, v12, v12, v60, SHIBYTE(v60), v61, *(_DWORD *)(a1 + 7484), SDWORD2(v67), 15, 0);
      v47 = *(_DWORD *)(a1 + 7380);
      HIDWORD(v68) = *(_DWORD *)(a1 + 7400);
      v69 = v46;
      DWORD1(v68) = v47;
      FunctionExpr = JSC::ASTBuilder::createFunctionExpr(a2, (uint64_t)&v72, (uint64_t)&v66, v48, v49, v50, v51, v52);
      ExprStatement = JSC::ASTBuilder::createExprStatement(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v72, FunctionExpr, (uint64_t)&v70, *(_DWORD *)(a1 + 7444));
      v56 = v55;
      if (((*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v55 + 40))(v55, ExprStatement) & 1) == 0)
      {
        if (*v11)
        {
          v57 = v11 + 1;
          *(_QWORD *)(v11[1] + 32) = v56;
        }
        else
        {
          *v11 = v56;
          v57 = v11 + 1;
        }
        *v57 = v56;
      }
      goto LABEL_11;
    }
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x197E4FB90);
  }
  v59 = *(_DWORD *)(a1 + 7368);
  if (v59 == 20 || (v59 & 0x100000) != 0)
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
  }
  else if (!*(_QWORD *)(a1 + 7360))
  {
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of async function");
  }
  JSC::Parser<JSC::Lexer<unsigned char>>::AutoPopScopeRef::~AutoPopScopeRef((uint64_t)v64, v24, v25, v26, v27, v28, v29, v30);
  v11 = 0;
LABEL_11:
  *v15 = v16;
  return v11;
}

_QWORD *JSC::Parser<JSC::Lexer<unsigned char>>::parseSingleFunction<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD **)v11;
  if (*(_QWORD *)(v11 + 8) - *(_QWORD *)v11 <= 0xFuLL)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v12 = *(_QWORD **)v11;
  }
  *(_QWORD *)v11 = v12 + 2;
  *v12 = 0;
  v12[1] = 0;
  v13 = *(_DWORD *)(a1 + 7368);
  if (v13 == 523)
  {
    v14 = (_DWORD *)JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionDeclaration<JSC::ASTBuilder>(a1, a2, 0, 1, 0, a3, a7, a8);
    goto LABEL_5;
  }
  if (v13 != 12
    || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896)
    || *(_BYTE *)(a1 + 7384))
  {
    goto LABEL_16;
  }
  v18 = *(unsigned int *)(a1 + 7420);
  v19 = *(_DWORD *)(a1 + 7400);
  v20 = *(_DWORD *)(a1 + 7412);
  v21 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v19;
  *(_DWORD *)(a1 + 7448) = v20;
  *(_DWORD *)(a1 + 7452) = v21;
  result = *(_QWORD **)(a1 + 7288);
  *((_DWORD *)result + 1) = v19;
  v22 = *(_DWORD *)(a1 + 12);
  if (!v22)
  {
    __break(0xC471u);
    return result;
  }
  v23 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v22 - 1) + 9) & 1;
  *((_BYTE *)result + 56) = 0;
  v24 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)result, a1 + 7368, 0, v23, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v24;
  if (v24 != 523 || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
  {
    if (v24 != 20 && (v24 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25]>(a1, "Cannot parse the async function");
      return 0;
    }
LABEL_16:
    JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
    return 0;
  }
  v14 = (_DWORD *)JSC::Parser<JSC::Lexer<unsigned char>>::parseAsyncFunctionDeclaration<JSC::ASTBuilder>(a1, a2, v18, 1, 0, a3, v25, v26);
LABEL_5:
  v15 = v14;
  if (v14)
  {
    v14[5] = *(_DWORD *)(a1 + 7448);
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 40))(v14) & 1) == 0)
    {
      if (*v12)
      {
        v16 = v12 + 1;
        *(_QWORD *)(v12[1] + 32) = v15;
      }
      else
      {
        *v12 = v15;
        v16 = v12 + 1;
      }
      *v16 = v15;
    }
  }
  if (*(_QWORD *)(a1 + 7360))
    return 0;
  else
    return v12;
}

_QWORD *JSC::Parser<JSC::Lexer<unsigned char>>::parseClassFieldInitializerSourceElements<JSC::ASTBuilder>(uint64_t a1, JSC::ParserArena **a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ParserArena **v9;
  JSC::ParserArena *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  WTF::StringImpl *v19;
  _BYTE *v20;
  WTF::AtomStringImpl *v21;
  int v22;
  uint64_t v23;
  int v24;
  JSC::ParserArena **v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  void (****v41)(JSC::DefineFieldNode *__hidden);
  void (***v42)(JSC::DefineFieldNode *__hidden);
  void (**v43)(JSC::DefineFieldNode *__hidden);
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  void (****v46)(JSC::DefineFieldNode *__hidden);
  int v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  char v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t FunctionExpr;
  uint64_t v98;
  void (***v99)(JSC::DefineFieldNode *__hidden);
  JSC::ParserArena *v100;
  int v101;
  int v102;
  _BYTE *v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  char *v113;
  _QWORD *v114;
  _DWORD *v115;
  uint64_t v116;
  int v117;
  int v118;
  JSC::ParserArena **v119;
  JSC::ParserArena **v120;
  int v121;
  int v122;
  uint64_t *v123;
  __int128 v124;
  __int128 v125;
  int v126;
  uint64_t v127;
  int v128;
  _OWORD v129[2];

  v9 = a2;
  v11 = a2[1];
  v12 = *(_QWORD **)v11;
  if (*((_QWORD *)v11 + 1) - *(_QWORD *)v11 <= 0xFuLL)
  {
    JSC::ParserArena::allocateFreeablePool(a2[1]);
    v12 = *(_QWORD **)v11;
  }
  *(_QWORD *)v11 = v12 + 2;
  *v12 = 0;
  v12[1] = 0;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197E50340);
  }
  v14 = *(_QWORD *)a1 + 720 * (v13 - 1);
  *(_DWORD *)(v14 + 10) |= 0x8000000u;
  v15 = *a3;
  if (*a3)
    v16 = (uint64_t)(*a3 + 2);
  else
    v16 = 0;
  if (v15)
    v17 = (uint64_t)&(*a3)[10 * *v15 + 2];
  else
    v17 = 0;
  if (v16 != v17)
  {
    v114 = v12;
    v115 = (_DWORD *)(a1 + 7368);
    v112 = (uint64_t *)(a1 + 7444);
    v113 = (char *)(a1 + 7474);
    v18 = (_BYTE *)(v16 + 32);
    v116 = v17;
    do
    {
      v20 = v18 - 32;
      v19 = (WTF::StringImpl *)*((_QWORD *)v18 - 4);
      if (v19)
        *(_DWORD *)v19 += 2;
      v22 = *((_DWORD *)v18 - 6);
      v21 = (WTF::AtomStringImpl *)*((unsigned int *)v18 - 5);
      v23 = *((unsigned int *)v18 - 4);
      v24 = v18[4];
      if (v24 == 3)
      {
        v68 = *((_DWORD *)v18 - 6);
        JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), v21, v23, a4, a5, a6, a7, a8);
        v73 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)v73 = v68;
        *(_BYTE *)(v73 + 56) = 0;
        v74 = *(_DWORD *)(a1 + 7400);
        v75 = *(_DWORD *)(a1 + 7412);
        v76 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v74;
        *(_DWORD *)(a1 + 7448) = v75;
        *(_DWORD *)(a1 + 7452) = v76;
        *(_DWORD *)(v73 + 4) = v74;
        v77 = *(_DWORD *)(a1 + 12);
        if (!v77)
        {
          __break(0xC471u);
          JUMPOUT(0x197E50350);
        }
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v73, (uint64_t)v115, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v77 - 1) + 9) & 1, v69, v70, v71, v72);
        v82 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v82 + 4) = v68;
        v129[0] = *(_OWORD *)(a1 + 7400);
        v127 = *(_QWORD *)(a1 + 7416);
        v128 = *(_DWORD *)(a1 + 7424);
        v83 = *(_DWORD *)(a1 + 7408);
        v84 = *(_DWORD *)(a1 + 7400);
        v85 = *(_DWORD *)(a1 + 7412);
        v86 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v84;
        *(_DWORD *)(a1 + 7448) = v85;
        *(_DWORD *)(a1 + 7452) = v86;
        *(_DWORD *)(v82 + 4) = v84;
        v87 = *(_DWORD *)(a1 + 12);
        if (!v87)
        {
LABEL_67:
          __break(0xC471u);
          JUMPOUT(0x197E50338);
        }
        v88 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v87 - 1) + 9) & 1;
        *(_BYTE *)(v82 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v82, (uint64_t)v115, 0, v88, v78, v79, v80, v81);
        v126 = 0;
        v125 = 0u;
        v124 = 0u;
        v123 = *(uint64_t **)(*(_QWORD *)(a1 + 7216) + 41952);
        v89 = *v113;
        *v113 = 20;
        if ((JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionInfo<JSC::ASTBuilder>(a1, (WTF::StringImpl *)v9, 0, 0, 0, 0, v83, &v123, 0, 0) & 1) == 0)
        {
          if (*v115 == 20 || (*v115 & 0x100000) != 0)
          {
            JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
            v103 = (_BYTE *)(a1 + 7474);
          }
          else
          {
            v103 = (_BYTE *)(a1 + 7474);
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, "Cannot parse static block function");
          }
          *v103 = v89;
          if (v19)
          {
            if (*(_DWORD *)v19 != 2)
            {
              v12 = 0;
              *(_DWORD *)v19 -= 2;
              return v12;
            }
            WTF::StringImpl::~StringImpl(v19, v90, v91, v92, v93, v94, v95, v96);
            WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
          }
          return 0;
        }
        FunctionExpr = JSC::ASTBuilder::createFunctionExpr((uint64_t)v9, (uint64_t)v129, (uint64_t)&v123, v92, v93, v94, v95, v96);
        JSC::ASTBuilder::makeStaticBlockFunctionCallNode(v9[1], (uint64_t)v129, FunctionExpr, v112, &v127, v112);
        JSC::ASTBuilder::createExprStatement(v9[1], (uint64_t)v129, v98, (uint64_t)&v127, *(_DWORD *)v112);
        v42 = v99;
        *v113 = v89;
        v43 = *v99;
      }
      else
      {
        if (*v18)
        {
          v117 = *((_DWORD *)v18 - 5);
          v118 = *((_DWORD *)v18 - 4);
          v121 = *((_DWORD *)v18 - 6);
          v25 = v9;
          v26 = *((_DWORD *)v18 - 3);
          v27 = *((int *)v18 - 2);
          v28 = *((int *)v18 - 1);
          v29 = *(_QWORD *)(a1 + 7288);
          *(_BYTE *)(v29 + 150) = 0;
          v30 = *(WTF::StringImpl **)(v29 + 152);
          *(_QWORD *)(v29 + 152) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
            {
              WTF::StringImpl::~StringImpl(v30, v21, v23, a4, a5, a6, a7, a8);
              WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
            }
            else
            {
              *(_DWORD *)v30 -= 2;
            }
          }
          v31 = *(_QWORD *)(v29 + 88);
          v32 = *(_QWORD *)(v29 + 96);
          *(_QWORD *)(v29 + 80) = v31 + v27;
          *(_QWORD *)(v29 + 112) = v31 + v28;
          *(_DWORD *)(v29 + 20) = 0;
          *(_DWORD *)(v29 + 36) = 0;
          if (v31 + v27 >= v32)
            v33 = 0;
          else
            v33 = *(_BYTE *)(v31 + v27);
          v9 = v25;
          *(_BYTE *)(v29 + 176) = v33;
          v34 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)v34 = v26;
          *(_BYTE *)(v34 + 56) = 0;
          v35 = *(_DWORD *)(a1 + 7400);
          v36 = *(_DWORD *)(a1 + 7412);
          v37 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v35;
          *(_DWORD *)(a1 + 7448) = v36;
          *(_DWORD *)(a1 + 7452) = v37;
          *(_DWORD *)(v34 + 4) = v35;
          v38 = *(_DWORD *)(a1 + 12);
          v12 = v114;
          if (!v38)
            goto LABEL_67;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v34, (uint64_t)v115, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v38 - 1) + 9) & 1, a5, a6, a7, a8);
          *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v26;
          v39 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpression<JSC::ASTBuilder>(a1, (uint64_t)v9);
          v22 = v121;
          LODWORD(v21) = v117;
          LODWORD(v23) = v118;
        }
        else
        {
          v39 = 0;
        }
        if (v24 == 2)
        {
          v119 = v9;
          v47 = *(_DWORD *)(a1 + 12);
          if (!v47)
          {
            __break(0xC471u);
            JUMPOUT(0x197E50348);
          }
          v48 = (int)v21;
          v49 = v23;
          v50 = v22;
          JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v47 - 1), (uint64_t)v19);
          v40 = 1;
          v22 = v50;
          LODWORD(v23) = v49;
          LODWORD(v21) = v48;
          v9 = v119;
        }
        else if (v24 == 1)
        {
          v40 = 2;
        }
        else
        {
          v40 = 0;
        }
        v41 = (void (****)(JSC::DefineFieldNode *__hidden))v9[1];
        v42 = *v41;
        if ((unint64_t)((char *)v41[1] - (char *)*v41) <= 0x3F)
        {
          v100 = v9[1];
          v122 = v22;
          v101 = v23;
          v120 = v9;
          v102 = (int)v21;
          JSC::ParserArena::allocateFreeablePool(v100);
          LODWORD(v21) = v102;
          v9 = v120;
          LODWORD(v23) = v101;
          v22 = v122;
          v42 = *v41;
        }
        *v41 = v42 + 8;
        *((_DWORD *)v42 + 2) = v22;
        *((_DWORD *)v42 + 3) = (_DWORD)v21;
        *((_DWORD *)v42 + 4) = v23;
        *((_DWORD *)v42 + 5) = -1;
        *((_BYTE *)v42 + 24) = 0;
        *((_DWORD *)v42 + 7) = -1;
        v42[4] = 0;
        *v42 = &off_1E358B080;
        if (v19)
          *(_DWORD *)v19 += 2;
        v42[5] = (void (**)(JSC::DefineFieldNode *__hidden))v19;
        v42[6] = (void (**)(JSC::DefineFieldNode *__hidden))v39;
        v43 = &off_1E358B080;
        *((_DWORD *)v42 + 14) = v40;
      }
      if ((((uint64_t (*)(_QWORD))v43[5])(v42) & 1) == 0)
      {
        v46 = (void (****)(JSC::DefineFieldNode *__hidden))v12;
        if (*v12)
          v46 = (void (****)(JSC::DefineFieldNode *__hidden))(v12[1] + 32);
        *v46 = v42;
        v12[1] = v42;
      }
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
        {
          WTF::StringImpl::~StringImpl(v19, v44, v45, a4, a5, a6, a7, a8);
          WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
        }
        else
        {
          *(_DWORD *)v19 -= 2;
        }
      }
      v18 += 40;
    }
    while (v20 + 40 != (_BYTE *)v116);
  }
  *(_DWORD *)(a1 + 7368) = 20;
  return v12;
}

uint64_t *JSC::Parser<JSC::Lexer<unsigned char>>::parseSourceElements<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 *v14;
  int v15;
  int v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  int *v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  int v72;
  uint64_t v73;
  WTF::AtomStringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  char v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  WTF::AtomStringImpl *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  __int128 *v101;
  uint64_t v102;
  __int128 v103;
  const char *v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  WTF::AtomStringImpl *v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  int v162;
  WTF::AtomStringImpl *v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  WTF::StringImpl *v167;
  int v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  int v178;
  int v179;
  WTF::AtomStringImpl *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  WTF::StringImpl *v189;
  WTF::StringImpl **v191;
  uint64_t v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  WTF::AtomStringImpl *v219;
  unsigned int v220;
  unsigned int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  int v233;
  int v234;
  int v235;
  uint64_t v236;
  __int128 v237;
  uint64_t v238;
  __int128 v239;
  int v240;
  _QWORD *v241;
  __int128 v242;
  uint64_t v243;
  __int128 v244;

  v11 = (unsigned __int8 *)(a1 + 7344);
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(uint64_t **)v12;
  if (*(_QWORD *)(v12 + 8) - *(_QWORD *)v12 <= 0xFuLL)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v13 = *(uint64_t **)v12;
  }
  *(_QWORD *)v12 = v13 + 2;
  *v13 = 0;
  v13[1] = 0;
  v241 = 0;
  v240 = 0;
  v14 = (__int128 *)(a1 + 7296);
  v239 = *(_OWORD *)(a1 + 7296);
  v15 = *(_DWORD *)(a1 + 7316);
  v237 = *(_OWORD *)(a1 + 7320);
  v238 = *(_QWORD *)(a1 + 7336);
  v234 = *v11;
  v235 = v15;
  v16 = v11[1];
  v232 = *(_DWORD *)(a2 + 1052);
  v233 = v16;
  v17 = *(int *)(a1 + 7408);
  v230 = *(int *)(a1 + 7404);
  v231 = v17;
  v18 = *(int **)(a1 + 7288);
  v19 = v18[1];
  v228 = *v18;
  v229 = v19;
  v227 = *((unsigned __int8 *)v18 + 56);
  v20 = *(_DWORD *)(a1 + 7456);
  *(_DWORD *)(a1 + 7456) = v20 + 1;
  if ((unint64_t)&v218 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
LABEL_58:
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v11[8] = 1;
    }
    goto LABEL_37;
  }
  v236 = a1 + 7320;
  v21 = (int *)(a1 + 7368);
  v22 = a3 == 0;
  while (1)
  {
    v23 = *v21;
    if (*v21 <= 522)
    {
      if (v23 == 12)
        goto LABEL_7;
      if (v23 != 521)
        goto LABEL_20;
      v31 = JSC::Parser<JSC::Lexer<unsigned char>>::parseVariableDeclaration<JSC::ASTBuilder>(a1, a2, 2u, 1u);
      if (!v31)
        goto LABEL_37;
      v26 = v31;
      *(_DWORD *)(v31 + 20) = *(_DWORD *)(a1 + 7448);
      goto LABEL_13;
    }
    if (v23 <= 543)
    {
      if (v23 == 523)
      {
        v34 = JSC::Parser<JSC::Lexer<unsigned char>>::parseFunctionDeclaration<JSC::ASTBuilder>(a1, a2, 0, 1, 0, 0, a7, a8);
      }
      else
      {
        if (v23 != 541)
          goto LABEL_20;
        v34 = JSC::Parser<JSC::Lexer<unsigned char>>::parseClassDeclaration<JSC::ASTBuilder>(a1, a2, 1, 0);
      }
      goto LABEL_36;
    }
    if (v23 == 544)
    {
      v32 = *(_DWORD *)(a1 + 12);
      if (!v32)
      {
        __break(0xC471u);
        JUMPOUT(0x197E50F78);
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v32 - 1) + 9) & 1) == 0)
      {
        v244 = *v14;
        v35 = *(_DWORD *)(a1 + 7316);
        v242 = *(_OWORD *)v236;
        v243 = *(_QWORD *)(v236 + 16);
        v36 = *v11;
        v223 = v35;
        v224 = v36;
        v37 = *(_DWORD *)(a2 + 1052);
        v225 = v11[1];
        v226 = v37;
        v219 = (WTF::AtomStringImpl *)*(int *)(a1 + 7408);
        v38 = *(int *)(a1 + 7404);
        v39 = *(_QWORD *)(a1 + 7288);
        v40 = *(_DWORD *)(v39 + 4);
        v220 = *(_DWORD *)v39;
        v221 = *(unsigned __int8 *)(v39 + 56);
        v222 = v40;
        v41 = *(_DWORD *)(a1 + 7400);
        v42 = *(_DWORD *)(a1 + 7412);
        *(_DWORD *)(a1 + 7444) = v41;
        *(_DWORD *)(a1 + 7448) = v42;
        *(_DWORD *)(a1 + 7452) = v38;
        *(_DWORD *)(v39 + 4) = v41;
        *(_BYTE *)(v39 + 56) = 0;
        v43 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v39, a1 + 7368, 0, 0, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v43;
        if (v43 == 12
          || (v168 = v43, (v43 - 544) < 3)
          || !v43
          || v43 == 1048592
          && ((v169 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952), v170 = **(_QWORD **)(a1 + 7376), v170 == v169[41])
           || v170 == v169[62]
           || v170 == v169[16]))
        {
          v51 = *(_QWORD *)(a1 + 7288);
          *(_BYTE *)(v51 + 150) = 0;
          v52 = *(WTF::StringImpl **)(v51 + 152);
          *(_QWORD *)(v51 + 152) = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
            {
              WTF::StringImpl::~StringImpl(v52, v44, v45, v46, v47, v48, v49, v50);
              WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
            }
            else
            {
              *(_DWORD *)v52 -= 2;
            }
          }
          v53 = *(_QWORD *)(v51 + 88);
          v54 = *(_QWORD *)(v51 + 96);
          v55 = (char *)v219 + v53;
          *(_QWORD *)(v51 + 80) = (char *)v219 + v53;
          *(_QWORD *)(v51 + 112) = v53 + v38;
          *(_DWORD *)(v51 + 20) = 0;
          *(_DWORD *)(v51 + 36) = 0;
          if ((unint64_t)v55 >= v54)
            v56 = 0;
          else
            v56 = *v55;
          *(_BYTE *)(v51 + 176) = v56;
          v57 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)v57 = v220;
          *(_BYTE *)(v57 + 56) = v221;
          v58 = *(_DWORD *)(a1 + 7400);
          v59 = *(_DWORD *)(a1 + 7412);
          v60 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v58;
          *(_DWORD *)(a1 + 7448) = v59;
          *(_DWORD *)(a1 + 7452) = v60;
          *(_DWORD *)(v57 + 4) = v58;
          v61 = *(_DWORD *)(a1 + 12);
          if (!v61)
          {
            __break(0xC471u);
            JUMPOUT(0x197E50F68);
          }
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v57, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v61 - 1) + 9) & 1, v47, v48, v49, v50);
          *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v222;
          *v14 = v244;
          v69 = v226;
          *(_DWORD *)(a1 + 7312) = v226;
          *(_DWORD *)(a1 + 7316) = v223;
          v70 = v236;
          *(_OWORD *)v236 = v242;
          *(_QWORD *)(v70 + 16) = v243;
          *v11 = v224;
          v11[1] = v225;
          *(_DWORD *)(a2 + 1052) = v69;
          v71 = *(WTF::StringImpl **)(a1 + 7360);
          *(_QWORD *)(a1 + 7360) = 0;
          if (v71)
          {
            if (*(_DWORD *)v71 == 2)
            {
              WTF::StringImpl::~StringImpl(v71, v62, v63, v64, v65, v66, v67, v68);
              WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
            }
            else
            {
              *(_DWORD *)v71 -= 2;
            }
          }
        }
        else
        {
          JSC::Lexer<unsigned char>::setOffset(*(_QWORD *)(a1 + 7288), v219, v38, v46, v47, v48, v49, v50);
          v175 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)v175 = v220;
          *(_BYTE *)(v175 + 56) = v221;
          v176 = *(_DWORD *)(a1 + 7400);
          v177 = *(_DWORD *)(a1 + 7412);
          v178 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v176;
          *(_DWORD *)(a1 + 7448) = v177;
          *(_DWORD *)(a1 + 7452) = v178;
          *(_DWORD *)(v175 + 4) = v176;
          v179 = *(_DWORD *)(a1 + 12);
          if (!v179)
          {
            __break(0xC471u);
            JUMPOUT(0x197E50F70);
          }
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v175, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v179 - 1) + 9) & 1, v171, v172, v173, v174);
          *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v222;
          *v14 = v244;
          v187 = v226;
          *(_DWORD *)(a1 + 7312) = v226;
          *(_DWORD *)(a1 + 7316) = v223;
          v188 = v236;
          *(_OWORD *)v236 = v242;
          *(_QWORD *)(v188 + 16) = v243;
          *v11 = v224;
          v11[1] = v225;
          *(_DWORD *)(a2 + 1052) = v187;
          v189 = *(WTF::StringImpl **)(a1 + 7360);
          *(_QWORD *)(a1 + 7360) = 0;
          if (v189)
          {
            if (*(_DWORD *)v189 == 2)
            {
              WTF::StringImpl::~StringImpl(v189, v180, v181, v182, v183, v184, v185, v186);
              WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
            }
            else
            {
              *(_DWORD *)v189 -= 2;
            }
          }
          if (v168 != 4)
          {
            v33 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpressionOrLabelStatement<JSC::ASTBuilder>(a1, (void *)a2, 1, v182, v183, v184, v185, v186);
LABEL_46:
            v26 = v33;
            if (!v33)
              goto LABEL_37;
LABEL_12:
            v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 96))(v26);
            *(_DWORD *)(v26 + 20) = *(_DWORD *)(a1 + 7448);
            if ((v27 & 1) != 0)
            {
LABEL_14:
              *(_DWORD *)(a1 + 7456) = v20;
              goto LABEL_21;
            }
LABEL_13:
            *(_BYTE *)(v26 + 24) = 1;
            v28 = *(_QWORD *)(a1 + 7520);
            if (v28)
            {
              v98 = *(_QWORD *)(v26 + 8);
              if ((v98 & 0x80000000) == 0)
              {
                v99 = *(_DWORD *)(v26 + 16);
                LODWORD(v242) = 2;
                *(_QWORD *)((char *)&v242 + 4) = v98;
                HIDWORD(v242) = v99;
                v100 = *(unsigned int *)(v28 + 12);
                if ((_DWORD)v100 == *(_DWORD *)(v28 + 8))
                {
                  v101 = (__int128 *)WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28, v100 + 1, (unint64_t)&v242);
                  v100 = *(unsigned int *)(v28 + 12);
                  v102 = *(_QWORD *)v28;
                  v103 = *v101;
                }
                else
                {
                  v102 = *(_QWORD *)v28;
                  v103 = v242;
                }
                *(_OWORD *)(v102 + 16 * v100) = v103;
                ++*(_DWORD *)(v28 + 12);
              }
            }
            goto LABEL_14;
          }
        }
      }
      v33 = JSC::Parser<JSC::Lexer<unsigned char>>::parseVariableDeclaration<JSC::ASTBuilder>(a1, a2, 1u, 1u);
      goto LABEL_46;
    }
    if ((v23 - 545) < 2)
      goto LABEL_8;
    if (v23 == 1048592)
      break;
LABEL_20:
    --*(_DWORD *)(a1 + 7456);
    v26 = JSC::Parser<JSC::Lexer<unsigned char>>::parseStatement<JSC::ASTBuilder>(a1, a2, &v241, &v240, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7456) = v20;
    if (!v26)
      goto LABEL_38;
LABEL_21:
    if (!v22 || !v241)
    {
      v22 = 0;
      goto LABEL_23;
    }
    if (v240 != 12 || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 24) != *v241)
    {
      v241 = 0;
      v22 = 1;
LABEL_23:
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26) & 1) == 0)
      {
        v29 = v13;
        if (*v13)
          v29 = (uint64_t *)(v13[1] + 32);
        *v29 = v26;
        v13[1] = v26;
      }
      goto LABEL_27;
    }
    v72 = *(_DWORD *)(a1 + 12);
    if (!v72)
    {
      __break(0xC471u);
      JUMPOUT(0x197E50F98);
    }
    v73 = *(_QWORD *)a1 + 720 * (v72 - 1);
    *(_BYTE *)(v73 + 9) |= 1u;
    if ((JSC::Parser<JSC::Lexer<unsigned char>>::isValidStrictMode(a1) & 1) != 0)
      goto LABEL_64;
    v191 = *(WTF::StringImpl ***)(a1 + 7328);
    v192 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
    v193 = *(WTF::StringImpl **)(v192 + 880);
    if (v191)
    {
      v194 = *v191;
      if (v193 == v194)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot name a function 'arguments' in strict mode");
        return 0;
      }
      if (*(WTF::StringImpl **)(v192 + 1248) == v194)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot name a function 'eval' in strict mode");
        return 0;
      }
    }
    if (JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredVariable((uint64_t *)a1, v193, v75, v76, v77, v78, v79, v80))
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a variable named 'arguments' in strict mode");
      return 0;
    }
    if (JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredVariable((uint64_t *)a1, *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 1248), v195, v196, v197, v198, v199, v200))
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a variable named 'eval' in strict mode");
      return 0;
    }
    v201 = *(_DWORD *)(a1 + 12);
    if (!v201)
    {
      __break(0xC471u);
      JUMPOUT(0x197E50F88);
    }
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v201 - 1) + 13) & 4) != 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, "'use strict' directive not allowed inside a function with a non-simple parameter list");
      return 0;
    }
    if ((JSC::Parser<JSC::Lexer<unsigned char>>::isValidStrictMode(a1) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 0, "Invalid parameters or function name in strict mode");
      return 0;
    }
LABEL_64:
    v81 = *(_QWORD *)(a1 + 7288);
    *(_BYTE *)(v81 + 150) = 0;
    v82 = *(WTF::StringImpl **)(v81 + 152);
    *(_QWORD *)(v81 + 152) = 0;
    if (v82)
    {
      if (*(_DWORD *)v82 == 2)
      {
        WTF::StringImpl::~StringImpl(v82, v74, v75, v76, v77, v78, v79, v80);
        WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
      }
      else
      {
        *(_DWORD *)v82 -= 2;
      }
    }
    v83 = *(_QWORD *)(v81 + 88);
    v84 = *(_QWORD *)(v81 + 96);
    v85 = v230;
    v86 = (char *)(v83 + v231);
    *(_QWORD *)(v81 + 80) = v83 + v231;
    *(_QWORD *)(v81 + 112) = v83 + v85;
    *(_DWORD *)(v81 + 20) = 0;
    *(_DWORD *)(v81 + 36) = 0;
    if ((unint64_t)v86 >= v84)
      v87 = 0;
    else
      v87 = *v86;
    *(_BYTE *)(v81 + 176) = v87;
    v88 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v88 = v228;
    *(_BYTE *)(v88 + 56) = v227;
    v89 = *(_DWORD *)(a1 + 7400);
    v90 = *(_DWORD *)(a1 + 7412);
    v91 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v89;
    *(_DWORD *)(a1 + 7448) = v90;
    *(_DWORD *)(a1 + 7452) = v91;
    *(_DWORD *)(v88 + 4) = v89;
    v92 = *(_DWORD *)(a1 + 12);
    if (!v92)
    {
      __break(0xC471u);
      JUMPOUT(0x197E50F90);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v88, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v92 - 1) + 9) & 1, v77, v78, v79, v80);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v229;
    *v14 = v239;
    v95 = v232;
    *(_DWORD *)(a1 + 7312) = v232;
    *(_DWORD *)(a1 + 7316) = v235;
    v96 = v236;
    *(_OWORD *)v236 = v237;
    *(_QWORD *)(v96 + 16) = v238;
    *v11 = v234;
    v11[1] = v233;
    *(_DWORD *)(a2 + 1052) = v95;
    v97 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (!v97)
      goto LABEL_86;
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v93, v94, a4, a5, a6, a7, a8);
      WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
      if (*(_QWORD *)(a1 + 7360))
        return 0;
LABEL_86:
      v22 = 0;
      goto LABEL_27;
    }
    v22 = 0;
    *(_DWORD *)v97 -= 2;
LABEL_27:
    v20 = *(_DWORD *)(a1 + 7456);
    *(_DWORD *)(a1 + 7456) = v20 + 1;
    if ((unint64_t)&v218 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
      goto LABEL_58;
  }
  if (JSC::Parser<JSC::Lexer<unsigned char>>::matchAllowedEscapedContextualKeyword(a1))
  {
LABEL_7:
    if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896) && !v11[40])
    {
      v244 = *v14;
      v137 = *(_DWORD *)(a1 + 7316);
      v242 = *(_OWORD *)v236;
      v243 = *(_QWORD *)(v236 + 16);
      v225 = *v11;
      v226 = v137;
      v138 = v11[1];
      v223 = *(_DWORD *)(a2 + 1052);
      v224 = v138;
      v139 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
      v140 = *(unsigned int *)(a1 + 7404);
      v141 = *(_QWORD *)(a1 + 7288);
      v142 = *(_DWORD *)(v141 + 4);
      v221 = *(_DWORD *)v141;
      v222 = v142;
      v220 = *(unsigned __int8 *)(v141 + 56);
      LODWORD(v219) = *(_DWORD *)(a1 + 7420);
      v143 = *(_DWORD *)(a1 + 7400);
      v144 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v143;
      *(_DWORD *)(a1 + 7448) = v144;
      *(_DWORD *)(a1 + 7452) = v140;
      *(_DWORD *)(v141 + 4) = v143;
      v145 = *(_DWORD *)(a1 + 12);
      if (!v145)
      {
        __break(0xC471u);
        JUMPOUT(0x197E50FA0);
      }
      v146 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v145 - 1) + 9) & 1;
      *(_BYTE *)(v141 + 56) = 0;
      v152 = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v141, a1 + 7368, 0, v146, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v152;
      v153 = *(_QWORD *)(a1 + 7288);
      if (v152 == 523 && !*(_BYTE *)(v153 + 56))
      {
        v34 = JSC::Parser<JSC::Lexer<unsigned char>>::parseAsyncFunctionDeclaration<JSC::ASTBuilder>(a1, a2, v219, 1, 0, 0, v150, v151);
LABEL_36:
        v26 = v34;
        if (!v34)
          goto LABEL_37;
        *(_DWORD *)(v34 + 20) = *(_DWORD *)(a1 + 7448);
        goto LABEL_14;
      }
      JSC::Lexer<unsigned char>::setOffset(v153, v139, v140, v147, v148, v149, v150, v151);
      v158 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v158 = v221;
      *(_BYTE *)(v158 + 56) = v220;
      v159 = *(_DWORD *)(a1 + 7400);
      v160 = *(_DWORD *)(a1 + 7412);
      v161 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v159;
      *(_DWORD *)(a1 + 7448) = v160;
      *(_DWORD *)(a1 + 7452) = v161;
      *(_DWORD *)(v158 + 4) = v159;
      v162 = *(_DWORD *)(a1 + 12);
      if (!v162)
      {
        __break(0xC471u);
        JUMPOUT(0x197E50F80);
      }
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v158, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v162 - 1) + 9) & 1, v154, v155, v156, v157);
      v165 = v223;
      *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v222;
      *v14 = v244;
      *(_DWORD *)(a1 + 7312) = v165;
      *(_DWORD *)(a1 + 7316) = v226;
      v166 = v236;
      *(_OWORD *)v236 = v242;
      *(_QWORD *)(v166 + 16) = v243;
      *v11 = v225;
      v11[1] = v224;
      *(_DWORD *)(a2 + 1052) = v165;
      v167 = *(WTF::StringImpl **)(a1 + 7360);
      *(_QWORD *)(a1 + 7360) = 0;
      if (v167)
      {
        if (*(_DWORD *)v167 == 2)
        {
          WTF::StringImpl::~StringImpl(v167, v163, v164, a4, a5, a6, a7, a8);
          WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
        }
        else
        {
          *(_DWORD *)v167 -= 2;
        }
      }
    }
LABEL_8:
    v24 = *(_DWORD *)(a1 + 12);
    if (!v24)
    {
      __break(0xC471u);
      JUMPOUT(0x197E50F60);
    }
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v24 - 1) + 12) & 0x10) == 0)
      goto LABEL_10;
    if (*v21 == 546)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_37;
      v104 = "Cannot use 'await' within static block";
    }
    else
    {
      if (*v21 != 545)
      {
LABEL_10:
        v25 = JSC::Parser<JSC::Lexer<unsigned char>>::parseExpressionOrLabelStatement<JSC::ASTBuilder>(a1, (void *)a2, 1, a4, a5, a6, a7, a8);
        if (!v25)
          goto LABEL_37;
        v26 = v25;
        goto LABEL_12;
      }
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_37;
      v104 = "Cannot use 'yield' within static block";
    }
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[43]>(a1, 1, v104);
    goto LABEL_37;
  }
  JSC::Parser<JSC::Lexer<unsigned char>>::logError(a1);
LABEL_37:
  *(_DWORD *)(a1 + 7456) = v20;
LABEL_38:
  if (*(_QWORD *)(a1 + 7360))
    return 0;
  else
    return v13;
}

void JSC::Scope::finalizeSloppyModeFunctionHoisting(JSC::Scope *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int *v22;
  int v23;
  int *v24;
  WTF::StringImpl *v25;
  __int16 v26;
  uint64_t *v27;
  int v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  char v63;
  __int16 v64;

  v9 = *((_QWORD *)this + 86);
  if (!v9)
  {
    v10 = 0;
    v11 = 0;
LABEL_3:
    v12 = (uint64_t *)(v9 + 16 * v11);
    goto LABEL_4;
  }
  v11 = *(unsigned int *)(v9 - 4);
  v12 = (uint64_t *)(v9 + 16 * v11);
  if (!*(_DWORD *)(v9 - 12))
  {
    v10 = (uint64_t *)(v9 + 16 * v11);
    goto LABEL_3;
  }
  v10 = (uint64_t *)*((_QWORD *)this + 86);
  if ((_DWORD)v11)
  {
    v14 = 16 * v11;
    v10 = (uint64_t *)*((_QWORD *)this + 86);
    while ((unint64_t)(*v10 + 1) <= 1)
    {
      v10 += 2;
      v14 -= 16;
      if (!v14)
      {
        v10 = v12;
        break;
      }
    }
  }
LABEL_4:
  if (v9)
    v13 = (uint64_t *)(v9 + 16 * *(unsigned int *)(v9 - 4));
  else
    v13 = 0;
  if (v13 != v10)
  {
    while (1)
    {
      v15 = *v10;
      v16 = *(int **)(*v10 + 40);
      if (v16)
        break;
      v18 = *((_QWORD *)this + 18);
      if (v18)
        goto LABEL_18;
LABEL_27:
      v61 = (WTF::StringImpl *)v16;
      v64 = 0;
      WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::add<JSC::VariableEnvironmentEntry>((uint64_t)this + 120, &v61, &v64, (uint64_t)&v62);
      v25 = v61;
      v61 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
        {
          WTF::StringImpl::~StringImpl(v25, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
        }
        else
        {
          *(_DWORD *)v25 -= 2;
        }
      }
      v26 = *(_WORD *)(v62 + 8);
      if (v63)
      {
        v26 |= 0x200u;
      }
      else if ((*(_WORD *)(v62 + 8) & 0x100) != 0)
      {
        goto LABEL_33;
      }
      *(_WORD *)(v62 + 8) = v26 | 4;
      *(_WORD *)(v15 + 33) |= 0x200u;
LABEL_33:
      v27 = v10 + 2;
      v10 = v12;
      if (v27 != v12)
      {
        v10 = v27;
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          v10 += 2;
          if (v10 == v12)
          {
            v10 = v12;
            break;
          }
        }
      }
      if (v10 == v13)
        return;
    }
    v17 = *v16;
    *v16 += 2;
    v18 = *((_QWORD *)this + 18);
    if (v18)
    {
LABEL_18:
      v19 = v16[4];
      if ((v19 & 0x20) != 0)
        v19 = v16[8];
      v20 = *(_DWORD *)(v18 - 8);
      v21 = v20 & (v19 >> 8);
      v22 = *(int **)(v18 + 16 * v21);
      if (v22 == v16)
      {
        v28 = *v16 - 2;
        if (*v16 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
        }
        else
        {
LABEL_44:
          *v16 = v28;
        }
        goto LABEL_33;
      }
      v23 = 1;
      do
      {
        v24 = v22;
        if (!v22)
        {
          if (!v16)
            goto LABEL_27;
          v17 = *v16 - 2;
          if (*v16 != 2)
            goto LABEL_26;
          goto LABEL_52;
        }
        v21 = (v21 + v23) & v20;
        v22 = *(int **)(v18 + 16 * v21);
        ++v23;
      }
      while (v22 != v16);
      if (!v16)
        goto LABEL_33;
      v28 = *v16 - 2;
      if (*v16 != 2)
        goto LABEL_44;
LABEL_52:
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
      if (v24)
        goto LABEL_33;
    }
    else
    {
      if (v17)
      {
LABEL_26:
        *v16 = v17 + 2;
        goto LABEL_27;
      }
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    v17 = *v16;
    goto LABEL_26;
  }
}

void JSC::Scope::getCapturedVars(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  int v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  WTF::StringImpl *v59;
  _BYTE v60[24];

  if ((*(_BYTE *)(a1 + 10) & 0xA) != 0)
  {
    v52 = *(_QWORD *)(a1 + 120);
    if (v52)
    {
      v53 = *(unsigned int *)(v52 - 4);
      v54 = (_QWORD *)(v52 + 16 * v53);
      if (*(_DWORD *)(v52 - 12))
      {
        v55 = *(_QWORD **)(a1 + 120);
        if ((_DWORD)v53)
        {
          v56 = 16 * v53;
          v55 = *(_QWORD **)(a1 + 120);
          while ((unint64_t)(*v55 + 1) <= 1)
          {
            v55 += 2;
            v56 -= 16;
            if (!v56)
            {
              v55 = v54;
              goto LABEL_56;
            }
          }
        }
        goto LABEL_56;
      }
      v55 = (_QWORD *)(v52 + 16 * v53);
    }
    else
    {
      v55 = 0;
      v53 = 0;
    }
    v54 = (_QWORD *)(v52 + 16 * v53);
LABEL_56:
    if (v52)
      v57 = (_QWORD *)(v52 + 16 * *(unsigned int *)(v52 - 4));
    else
      v57 = 0;
    while (v55 != v57)
    {
      WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add(a2, (uint64_t)v55, a4, a5, a6, a7, a8, (uint64_t)v60);
      v58 = v55 + 2;
      v55 = v54;
      if (v58 != v54)
      {
        v55 = v58;
        while ((unint64_t)(*v55 + 1) <= 1)
        {
          v55 += 2;
          if (v55 == v54)
          {
            v55 = v54;
            break;
          }
        }
      }
    }
    return;
  }
  v10 = *(_QWORD *)(a1 + 696);
  if (!v10)
  {
    v13 = 0;
    v11 = 0;
LABEL_46:
    v12 = (WTF::StringImpl **)(v10 + 8 * v11);
    goto LABEL_9;
  }
  v11 = *(unsigned int *)(v10 - 4);
  v12 = (WTF::StringImpl **)(v10 + 8 * v11);
  if (!*(_DWORD *)(v10 - 12))
  {
    v13 = (WTF::StringImpl **)(v10 + 8 * v11);
    goto LABEL_46;
  }
  v13 = *(WTF::StringImpl ***)(a1 + 696);
  if ((_DWORD)v11)
  {
    v14 = 8 * v11;
    v13 = *(WTF::StringImpl ***)(a1 + 696);
    while ((unint64_t)*v13 + 1 <= 1)
    {
      ++v13;
      v14 -= 8;
      if (!v14)
      {
        v13 = v12;
        break;
      }
    }
  }
LABEL_9:
  if (v10)
    v15 = (WTF::StringImpl **)(v10 + 8 * *(unsigned int *)(v10 - 4));
  else
    v15 = 0;
  if (v15 != v13)
  {
    while (1)
    {
      v16 = *v13;
      if (!*v13)
        break;
      v17 = *(_DWORD *)v16;
      *(_DWORD *)v16 += 2;
      v18 = *(_QWORD *)(a1 + 120);
      if (v18)
        goto LABEL_14;
      if (!v17)
      {
        v27 = v16;
LABEL_42:
        WTF::StringImpl::~StringImpl(v27, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
        goto LABEL_25;
      }
      *(_DWORD *)v16 = v17;
LABEL_25:
      v26 = v13 + 1;
      v13 = v12;
      if (v26 != v12)
      {
        v13 = v26;
        while ((unint64_t)*v13 + 1 <= 1)
        {
          if (++v13 == v12)
          {
            v13 = v12;
            break;
          }
        }
      }
      if (v13 == v15)
        return;
    }
    v18 = *(_QWORD *)(a1 + 120);
    if (!v18)
      goto LABEL_25;
LABEL_14:
    v19 = *((_DWORD *)v16 + 4);
    if ((v19 & 0x20) != 0)
      v19 = *((_DWORD *)v16 + 8);
    v20 = *(_DWORD *)(v18 - 8);
    v21 = v20 & (v19 >> 8);
    v22 = *(WTF::StringImpl **)(v18 + 16 * v21);
    if (v22 != v16)
    {
      v23 = 1;
      do
      {
        v24 = v22;
        if (!v22)
        {
          if (!v16)
            goto LABEL_25;
          if (*(_DWORD *)v16 != 2)
          {
            *(_DWORD *)v16 -= 2;
            goto LABEL_25;
          }
          goto LABEL_43;
        }
        v21 = (v21 + v23) & v20;
        v22 = *(WTF::StringImpl **)(v18 + 16 * v21);
        ++v23;
      }
      while (v22 != v16);
      if (!v16)
        goto LABEL_38;
      v25 = *(_DWORD *)v16 - 2;
      if (*(_DWORD *)v16 != 2)
        goto LABEL_36;
LABEL_43:
      WTF::StringImpl::~StringImpl(v16, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      if (v24)
        goto LABEL_37;
      goto LABEL_25;
    }
    v25 = *(_DWORD *)v16 - 2;
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
LABEL_36:
      *(_DWORD *)v16 = v25;
    }
LABEL_37:
    *(_DWORD *)v16 += 2;
LABEL_38:
    v59 = v16;
    WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add(a2, (WTF::AtomStringImpl *)&v59, a3, a4, a5, a6, a7, a8, (uint64_t)v60);
    v27 = v59;
    v59 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        goto LABEL_42;
      *(_DWORD *)v27 -= 2;
    }
    goto LABEL_25;
  }
}

uint64_t JSC::Scope::usedVariablesContains(unsigned int *a1, int a2, uint64_t a3)
{
  unsigned int *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v18;

  if (!a2)
    return 0;
  v3 = &a1[18 * a2];
  v4 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v5 = (v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8);
  while (1)
  {
    v6 = a1[1];
    if (v6 != 8)
      break;
    v7 = *a1;
    if ((_DWORD)v7)
    {
      if (*((_QWORD *)a1 + 1) == a3)
        return 1;
      v8 = 0;
      while (v7 - 1 != v8)
      {
        v9 = *(_QWORD *)&a1[2 * v8++ + 4];
        if (v9 == a3)
        {
          if (v8 >= v7)
            break;
          return 1;
        }
      }
    }
LABEL_5:
    a1 += 18;
    if (a1 == v3)
      return 0;
  }
  v11 = ((9 * v5) ^ ((9 * v5) >> 15)) + ~(((9 * v5) ^ ((9 * v5) >> 15)) << 27);
  v12 = (v11 >> 31) ^ v11;
  v13 = *((_QWORD *)a1 + 1);
  v14 = v6 - 1;
  v15 = v14 & v12;
  v16 = *(_QWORD *)(v13 + 8 * v15);
  if (v16 != -1 && v16 != a3)
  {
    v18 = 1;
    do
    {
      v15 = (v15 + v18) & v14;
      v16 = *(_QWORD *)(v13 + 8 * v15);
      ++v18;
    }
    while (v16 != -1 && v16 != a3);
  }
  if (v16 != a3)
    goto LABEL_5;
  return 1;
}

uint64_t JSC::Lexer<unsigned char>::lexExpectIdentifier(unsigned int *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  WTF::StringImpl *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  _DWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  _QWORD *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  unsigned __int8 v88;

  v11 = (unsigned __int8 *)*((_QWORD *)a1 + 10);
  v12 = *((_QWORD *)a1 + 12);
  if ((unint64_t)v11 < v12 && (*v11 | 0x20u) - 97 <= 0x19)
  {
    v13 = a1[22];
    v14 = a1[28] - v13;
    v15 = *a1 | ((unint64_t)(v11 - v13) << 32);
    v16 = v11 + 1;
    do
    {
      if ((unint64_t)v16 >= v12)
      {
        v17 = 0;
        goto LABEL_17;
      }
      v18 = *v16++;
      v17 = v18;
      v19 = (v18 | 0x20) - 97;
    }
    while (v18 - 48 < 0xA || v19 < 0x1A);
    if ((v17 & 0x80) != 0)
      goto LABEL_20;
    if ((v17 - 36) <= 0x3B && ((1 << (v17 - 36)) & 0x900000000000001) != 0)
      goto LABEL_20;
    v12 = (unint64_t)(v16 - 1);
LABEL_17:
    *((_BYTE *)a1 + 176) = v17;
    *((_QWORD *)a1 + 10) = v12;
    if ((a3 & 4) != 0)
    {
      v22 = 0;
LABEL_19:
      *(_QWORD *)(a2 + 8) = v22;
      *(_DWORD *)(a2 + 32) = *a1;
      v23 = a1[22];
      *(_DWORD *)(a2 + 36) = a1[28] - v23;
      *(_DWORD *)(a2 + 40) = (_DWORD)v11 - v23;
      *(_DWORD *)(a2 + 44) = a1[20] - v23;
      *(_QWORD *)(a2 + 48) = v15;
      *(_DWORD *)(a2 + 56) = v14;
      v24 = a1[22];
      v25 = a1[20] - v24;
      v26 = a1[28] - v24;
      *(_QWORD *)(a2 + 60) = *a1 | (unint64_t)(v25 << 32);
      *(_DWORD *)(a2 + 68) = v26;
      a1[15] = 12;
      return 12;
    }
    v28 = (WTF::StringImpl *)(v12 - (_QWORD)v11);
    if ((uint64_t)(v12 - (_QWORD)v11) >= 0)
    {
      v17 = *((_QWORD *)a1 + 24);
      if ((unsigned __int8 *)v12 == v11)
      {
        v22 = (uint64_t *)(*(_QWORD *)(v17 + 41952) + 8);
        goto LABEL_19;
      }
      v8 = *((_QWORD *)a1 + 23);
      LODWORD(v12) = (char)*v11;
      if ((v12 & 0x80000000) != 0)
        goto LABEL_57;
      v29 = *v11;
      if (v28 == (WTF::StringImpl *)1)
      {
        v22 = *(uint64_t **)(v8 + 24 + 8 * v29);
        if (v22)
          goto LABEL_19;
        if (*(_BYTE *)(v17 + 44265))
        {
          v30 = *(WTF::StringImpl **)(*(_QWORD *)(v17 + 8 * v29 + 42216) + 8);
          if ((v30 & 1) != 0)
            v31 = 0;
          else
            v31 = *(_DWORD **)(*(_QWORD *)(v17 + 8 * v29 + 42216) + 8);
          *v31 += 2;
        }
        else
        {
          v88 = *v11;
          WTF::AtomStringImpl::add((uint64_t)&v88, 1uLL, a4, a5, a6, a7, a8, &v87);
          v30 = v87;
        }
        v32 = (*(_QWORD *)v8)++;
        v33 = v32 >> 6;
        v34 = *(unsigned int *)(v8 + 20);
        if (v32 >> 6 >= v34)
        {
          v86 = v30;
          v28 = (WTF::StringImpl *)(v8 + 8);
          v56 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
          v87 = v56;
          v57 = *(unsigned int *)(v8 + 20);
          if ((_DWORD)v57 == *(_DWORD *)(v8 + 16))
          {
            v60 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 8, v57 + 1, (unint64_t)&v87);
            v57 = *(unsigned int *)(v8 + 20);
            *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v57) = *v60;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v28 + 8 * v57) = v56;
          }
          v34 = (v57 + 1);
          *(_DWORD *)(v8 + 20) = v34;
          v32 = *(_QWORD *)v8 - 1;
          v33 = v32 >> 6;
          v30 = v86;
        }
        if (v33 >= v34)
        {
          __break(0xC471u);
          JUMPOUT(0x197E51B54);
        }
        v35 = *(_QWORD *)(v8 + 8);
        v36 = *(_QWORD *)(v35 + 8 * v33);
        v37 = v32 & 0x3F;
        *(_QWORD *)(v36 + 8 * v37) = v30;
        v12 = v32 >> 6;
        if (v32 >> 6 >= v34)
        {
          __break(0xC471u);
          JUMPOUT(0x197E51B5CLL);
        }
        v17 = (char)*v11;
        if ((v17 & 0x80000000) == 0)
        {
          *(_QWORD *)(v8 + 24 + 8 * *v11) = *(_QWORD *)(v35 + 8 * v12) + 8 * v37;
          v22 = (uint64_t *)(*(_QWORD *)(v35 + 8 * v12) + 8 * v37);
          goto LABEL_19;
        }
      }
      else
      {
        v38 = v8 + 1048;
        v22 = *(uint64_t **)(v8 + 1048 + 8 * v29);
        if (v22 && WTF::equalInternal<unsigned char>(*v22, (unint64_t)v11, (uint64_t)v28))
          goto LABEL_19;
        WTF::AtomStringImpl::add((uint64_t)v11, (unint64_t)v28, a4, a5, a6, a7, a8, &v87);
        v28 = v87;
        v41 = *(_DWORD *)v87;
        *(_DWORD *)v87 += 2;
        if (v41)
        {
          *(_DWORD *)v28 = v41;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v28, v39, v40, a4, a5, a6, a7, a8);
          WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
        }
        v42 = (*(_QWORD *)v8)++;
        v43 = v42 >> 6;
        v44 = *(unsigned int *)(v8 + 20);
        if (v42 >> 6 >= v44)
        {
          v58 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
          v87 = v58;
          v59 = *(unsigned int *)(v8 + 20);
          if ((_DWORD)v59 == *(_DWORD *)(v8 + 16))
          {
            v61 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 8, v59 + 1, (unint64_t)&v87);
            v59 = *(unsigned int *)(v8 + 20);
            *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v59) = *v61;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v59) = v58;
          }
          v44 = (v59 + 1);
          *(_DWORD *)(v8 + 20) = v44;
          v42 = *(_QWORD *)v8 - 1;
          v43 = v42 >> 6;
          v38 = v8 + 1048;
        }
        if (v43 >= v44)
        {
          __break(0xC471u);
          JUMPOUT(0x197E51B64);
        }
        v45 = *(_QWORD *)(v8 + 8);
        v46 = *(_QWORD *)(v45 + 8 * v43);
        v47 = v42 & 0x3F;
        *(_QWORD *)(v46 + 8 * v47) = v28;
        v17 = v42 >> 6;
        if (v17 >= v44)
        {
          __break(0xC471u);
          JUMPOUT(0x197E51B6CLL);
        }
        LODWORD(v12) = (char)*v11;
        if ((v12 & 0x80000000) == 0)
        {
          *(_QWORD *)(v38 + 8 * *v11) = *(_QWORD *)(v45 + 8 * v17) + 8 * v47;
LABEL_45:
          v22 = (uint64_t *)(*(_QWORD *)(v45 + 8 * v17) + 8 * v47);
          goto LABEL_19;
        }
      }
    }
    __break(1u);
LABEL_57:
    if (v28 == (WTF::StringImpl *)1)
    {
      JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v17 + 41968), v12, a4, a5, a6, a7, a8, &v87);
      v69 = v87;
    }
    else
    {
      WTF::AtomStringImpl::add((uint64_t)v11, (unint64_t)v28, a4, a5, a6, a7, a8, &v87);
      v69 = v87;
      v70 = *(_DWORD *)v87;
      *(_DWORD *)v87 += 2;
      if (v70)
      {
        *(_DWORD *)v69 = v70;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v69, v62, v63, v64, v65, v66, v67, v68);
        WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
      }
    }
    v71 = (*(_QWORD *)v8)++;
    v72 = v71 >> 6;
    v73 = *(unsigned int *)(v8 + 20);
    if (v71 >> 6 >= v73)
    {
      v83 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
      v87 = v83;
      v84 = *(unsigned int *)(v8 + 20);
      if ((_DWORD)v84 == *(_DWORD *)(v8 + 16))
      {
        v85 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 8, v84 + 1, (unint64_t)&v87);
        v84 = *(unsigned int *)(v8 + 20);
        *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v84) = *v85;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v84) = v83;
      }
      v73 = (v84 + 1);
      *(_DWORD *)(v8 + 20) = v73;
      v71 = *(_QWORD *)v8 - 1;
      v72 = v71 >> 6;
    }
    if (v72 >= v73
      || (v45 = *(_QWORD *)(v8 + 8),
          v74 = *(_QWORD *)(v45 + 8 * v72),
          v47 = v71 & 0x3F,
          *(_QWORD *)(v74 + 8 * v47) = v69,
          v17 = v71 >> 6,
          v17 >= v73))
    {
      __break(0xC471u);
      JUMPOUT(0x197E51A9CLL);
    }
    goto LABEL_45;
  }
LABEL_20:
  *((_BYTE *)a1 + 56) = 0;
  return JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  char *v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  WTF::PrintStream *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::PrintStream *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *Range;
  uint64_t v44;
  char v45;

  v3 = *(_DWORD *)(a1 + 7368);
  if (v3 > 545)
  {
    switch(v3)
    {
      case 1048576:
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v44 = v4;
        v5 = "Unrecognized token '";
        return WTF::PrintStream::print<char [21],WTF::StringView,char [2]>(a2, v5, (uint64_t)&Range);
      case 1048577:
        goto LABEL_34;
      case 1048578:
      case 1048580:
      case 1048581:
      case 1048582:
      case 1048584:
      case 1048587:
      case 1048588:
      case 1048589:
      case 1048590:
      case 1048591:
        goto LABEL_10;
      case 1048579:
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v44 = v27;
        result = WTF::PrintStream::print<char [40],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
        break;
      case 1048583:
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v44 = v28;
        result = WTF::PrintStream::print<char [27],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
        break;
      case 1048585:
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v44 = v29;
        result = WTF::PrintStream::print<char [26],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
        break;
      case 1048586:
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v44 = v30;
        result = WTF::PrintStream::print<char [23],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
        break;
      case 1048592:
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v44 = v31;
        result = WTF::PrintStream::print<char [50],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
        break;
      case 1048593:
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v44 = v32;
        result = WTF::PrintStream::print<char [28],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
        break;
      case 1048594:
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v44 = v33;
        result = WTF::PrintStream::print<char [44],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
        break;
      default:
        switch(v3)
        {
          case 3145728:
          case 3145730:
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v44 = v8;
            result = WTF::PrintStream::print<char [43],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
            break;
          case 3145729:
          case 3145731:
          case 3145735:
            goto LABEL_10;
          case 3145732:
            goto LABEL_44;
          case 3145733:
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v44 = v38;
            result = WTF::PrintStream::print<char [31],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
            break;
          case 3145734:
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v44 = v39;
            v25 = "Invalid use of octal: '";
            return WTF::PrintStream::print<char [24],WTF::StringView,char [2]>(a2, v25, (uint64_t)&Range);
          case 3145736:
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v44 = v40;
            result = WTF::PrintStream::print<char [30],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
            break;
          default:
            if (v3 == 546)
              goto LABEL_30;
            goto LABEL_10;
        }
        break;
    }
    return result;
  }
  switch(v3)
  {
    case 9:
    case 10:
      Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
      v44 = v6;
      return WTF::PrintStream::print<char [20],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
    case 11:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      goto LABEL_10;
    case 12:
LABEL_30:
      Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
      v44 = v24;
      v25 = "Unexpected identifier '";
      return WTF::PrintStream::print<char [24],WTF::StringView,char [2]>(a2, v25, (uint64_t)&Range);
    case 13:
      Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
      v44 = v34;
      return WTF::PrintStream::print<char [25],WTF::StringView>(a2, (uint64_t)&Range);
    case 14:
      Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
      v44 = v35;
      return WTF::PrintStream::print<char [27],WTF::StringView>(a2, (uint64_t)&Range);
    case 20:
LABEL_44:
      v36 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v36, "%s");
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    default:
      if (v3 == 531)
      {
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v44 = v41;
        return WTF::PrintStream::print<char [34],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
      }
      if (v3 == 532)
      {
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v44 = v42;
        return WTF::PrintStream::print<char [34],WTF::StringView,char [17]>(a2, (uint64_t)&Range);
      }
LABEL_10:
      if ((v3 & 0x200) != 0)
      {
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v44 = v37;
        v5 = "Unexpected keyword '";
        return WTF::PrintStream::print<char [21],WTF::StringView,char [2]>(a2, v5, (uint64_t)&Range);
      }
      v9 = *(unsigned int *)(a1 + 7408);
      v10 = *(_DWORD *)(a1 + 7412);
      a1 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(*(_QWORD *)(a1 + 7288) + 64) + 24))(**(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64));
      if (v11 <= v9)
      {
        v14 = 0x100000000;
        v12 = "";
      }
      else
      {
        v12 = (char *)a1;
        v13 = v10 - v9;
        if ((int)v11 - (int)v9 > (v10 - v9) || (v13 = v11 - v9, (_DWORD)v9))
        {
          v14 = v13;
          v15 = v11 - v9;
          if ((v11 & 0xFF00000000) != 0)
          {
            if (v15 >= v14)
            {
              v12 = (char *)(a1 + v9);
              v14 |= 0x100000000uLL;
              goto LABEL_18;
            }
LABEL_33:
            __break(1u);
LABEL_34:
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v44 = v26;
            return WTF::PrintStream::print<char [32],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
          }
          if (v15 < v14)
            goto LABEL_33;
          v12 = (char *)(a1 + 2 * v9);
        }
        else
        {
          v14 = v11;
        }
      }
LABEL_18:
      v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v16, "%s", "Unexpected token '");
      if (v12)
      {
        if ((v14 & 0xFF00000000) != 0)
          WTF::StringImpl::utf8ForCharacters(v12, v14, (uint64_t)&Range, v22);
        else
          WTF::StringImpl::utf8ForCharacters((uint64_t)v12, v14, 0, v17, v18, v19, v20, v21, (uint64_t)&Range);
      }
      else
      {
        v23 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v23 = 1;
        *(_QWORD *)(v23 + 8) = 0;
        *(_BYTE *)(v23 + 16) = 0;
        Range = (const char *)v23;
        LODWORD(v44) = 0;
      }
      WTF::printExpectedCStringHelper(v16, "StringView", &Range);
      if ((_DWORD)v44 != -1)
        ((void (*)(char *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v44])(&v45, &Range);
      WTF::PrintStream::printf(v16, "%s");
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  }
}

uint64_t WTF::PrintStream::print<char [43],WTF::StringView,char [2]>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", "Incomplete unicode escape in identifier: '");
  v11 = *(char **)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v15, v10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v5, v6, v7, v8, v9, (uint64_t)&v15);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v15 = v13;
    v16 = 0;
  }
  WTF::printExpectedCStringHelper(v4, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  WTF::PrintStream::printf(v4, "%s", "'");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [31],WTF::StringView,char [2]>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", "Unterminated numeric literal '");
  v11 = *(char **)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v15, v10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v5, v6, v7, v8, v9, (uint64_t)&v15);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v15 = v13;
    v16 = 0;
  }
  WTF::printExpectedCStringHelper(v4, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  WTF::PrintStream::printf(v4, "%s", "'");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [30],WTF::StringView,char [2]>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", "Unterminated string literal '");
  v11 = *(char **)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v15, v10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v5, v6, v7, v8, v9, (uint64_t)&v15);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v15 = v13;
    v16 = 0;
  }
  WTF::printExpectedCStringHelper(v4, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  WTF::PrintStream::printf(v4, "%s", "'");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [32],WTF::StringView,char [2]>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", "Invalid escape in identifier: '");
  v11 = *(char **)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v15, v10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v5, v6, v7, v8, v9, (uint64_t)&v15);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v15 = v13;
    v16 = 0;
  }
  WTF::printExpectedCStringHelper(v4, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  WTF::PrintStream::printf(v4, "%s", "'");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [50],WTF::StringView,char [2]>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", "Unexpected escaped characters in keyword token: '");
  v11 = *(char **)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v15, v10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v5, v6, v7, v8, v9, (uint64_t)&v15);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v15 = v13;
    v16 = 0;
  }
  WTF::printExpectedCStringHelper(v4, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  WTF::PrintStream::printf(v4, "%s", "'");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [40],WTF::StringView,char [2]>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", "Invalid unicode escape in identifier: '");
  v11 = *(char **)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v15, v10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v5, v6, v7, v8, v9, (uint64_t)&v15);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v15 = v13;
    v16 = 0;
  }
  WTF::printExpectedCStringHelper(v4, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  WTF::PrintStream::printf(v4, "%s", "'");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [27],WTF::StringView,char [2]>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", "Invalid numeric literal: '");
  v11 = *(char **)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v15, v10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v5, v6, v7, v8, v9, (uint64_t)&v15);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v15 = v13;
    v16 = 0;
  }
  WTF::printExpectedCStringHelper(v4, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  WTF::PrintStream::printf(v4, "%s", "'");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [24],WTF::StringView,char [2]>(uint64_t a1, const char *a2, uint64_t a3)
{
  WTF::PrintStream *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  float v13;

  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v6, "%s", a2);
  WTF::printInternal(v6, *(char **)a3, *(_QWORD *)(a3 + 8), v7, v8, v9, v10, v11, v12, v13);
  WTF::PrintStream::printf(v6, "%s", "'");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [26],WTF::StringView,char [2]>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", "Invalid string literal: '");
  v11 = *(char **)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v15, v10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v5, v6, v7, v8, v9, (uint64_t)&v15);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v15 = v13;
    v16 = 0;
  }
  WTF::printExpectedCStringHelper(v4, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  WTF::PrintStream::printf(v4, "%s", "'");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [28],WTF::StringView,char [2]>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", "Invalid unicode encoding: '");
  v11 = *(char **)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v15, v10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v5, v6, v7, v8, v9, (uint64_t)&v15);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v15 = v13;
    v16 = 0;
  }
  WTF::printExpectedCStringHelper(v4, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  WTF::PrintStream::printf(v4, "%s", "'");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [44],WTF::StringView,char [2]>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", "Invalid unicode code point in identifier: '");
  v11 = *(char **)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v15, v10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v5, v6, v7, v8, v9, (uint64_t)&v15);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v15 = v13;
    v16 = 0;
  }
  WTF::printExpectedCStringHelper(v4, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  WTF::PrintStream::printf(v4, "%s", "'");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [21],WTF::StringView,char [2]>(uint64_t a1, const char *a2, uint64_t a3)
{
  WTF::PrintStream *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  char v19;

  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v6, "%s", a2);
  v13 = *(char **)a3;
  if (*(_QWORD *)a3)
  {
    v14 = *(_QWORD *)(a3 + 8);
    if ((*(_QWORD *)(a3 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v13, v14, (uint64_t)&v17, v12);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v13, v14, 0, v7, v8, v9, v10, v11, (uint64_t)&v17);
  }
  else
  {
    v15 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 8) = 0;
    *(_BYTE *)(v15 + 16) = 0;
    v17 = v15;
    v18 = 0;
  }
  WTF::printExpectedCStringHelper(v6, "StringView", &v17);
  if (v18 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v18])(&v19, &v17);
  WTF::PrintStream::printf(v6, "%s", "'");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [27],WTF::StringView>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", "Unexpected string literal ");
  v11 = *(char **)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v15, v10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v5, v6, v7, v8, v9, (uint64_t)&v15);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v15 = v13;
    v16 = 0;
  }
  WTF::printExpectedCStringHelper(v4, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [20],WTF::StringView,char [2]>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", "Unexpected number '");
  v11 = *(char **)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v15, v10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v5, v6, v7, v8, v9, (uint64_t)&v15);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v15 = v13;
    v16 = 0;
  }
  WTF::printExpectedCStringHelper(v4, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  WTF::PrintStream::printf(v4, "%s", "'");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [34],WTF::StringView,char [17]>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", "Unexpected use of reserved word '");
  v11 = *(char **)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v15, v10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v5, v6, v7, v8, v9, (uint64_t)&v15);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v15 = v13;
    v16 = 0;
  }
  WTF::printExpectedCStringHelper(v4, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  WTF::PrintStream::printf(v4, "%s", "' in strict mode");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [34],WTF::StringView,char [2]>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", "Unexpected use of reserved word '");
  v11 = *(char **)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v15, v10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v5, v6, v7, v8, v9, (uint64_t)&v15);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v15 = v13;
    v16 = 0;
  }
  WTF::printExpectedCStringHelper(v4, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  WTF::PrintStream::printf(v4, "%s", "'");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [23],WTF::StringView,char [2]>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", "Invalid private name '");
  v11 = *(char **)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v15, v10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v5, v6, v7, v8, v9, (uint64_t)&v15);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v15 = v13;
    v16 = 0;
  }
  WTF::printExpectedCStringHelper(v4, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  WTF::PrintStream::printf(v4, "%s", "'");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t WTF::PrintStream::print<char [25],WTF::StringView>(uint64_t a1, uint64_t a2)
{
  WTF::PrintStream *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;

  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", "Unexpected private name ");
  v11 = *(char **)a2;
  if (*(_QWORD *)a2)
  {
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
      WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v15, v10);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v5, v6, v7, v8, v9, (uint64_t)&v15);
  }
  else
  {
    v13 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 16) = 0;
    v15 = v13;
    v16 = 0;
  }
  WTF::printExpectedCStringHelper(v4, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

void JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a2)
    *(_DWORD *)a2 += 2;
  v9 = *(WTF::StringImpl **)(a1 + 7360);
  *(_QWORD *)(a1 + 7360) = a2;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      a2 = *(WTF::AtomStringImpl **)(a1 + 7360);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  if (!a2 || !*((_DWORD *)a2 + 1))
  {
    v17 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v17 = 0x1200000002;
    *(_QWORD *)(v17 + 8) = "Unparseable script";
    *(_DWORD *)(v17 + 16) = 4;
    v18 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = v17;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  WTF *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v25 = off_1E3572250;
    v26 = (WTF *)v28;
    v27 = xmmword_199122F80;
    v28[0] = 0;
    JSC::Parser<JSC::Lexer<unsigned char>>::printUnexpectedTokenText(a1, (uint64_t)&v25);
    WTF::String::fromUTF8WithLatin1Fallback(v26, v27, &v24);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v24, v2, v3, v4, v5, v6, v7);
    v15 = v24;
    v24 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, v8, v9, v10, v11, v12, v13, v14);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
    if (v26 != (WTF *)v28)
      WTF::fastFree((unint64_t)v26, v8, v9, v10, v11, v12, v13, v14);
  }
}

unint64_t JSC::DebuggerPausePositions::appendPause(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v2 = result;
  LODWORD(v6) = 2;
  *(_QWORD *)((char *)&v6 + 4) = *(_QWORD *)a2;
  HIDWORD(v6) = *(_DWORD *)(a2 + 8);
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 == *(_DWORD *)(result + 8))
  {
    result = WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v3 + 1, (unint64_t)&v6);
    v3 = *(unsigned int *)(v2 + 12);
    v4 = *(_QWORD *)v2;
    v5 = *(_OWORD *)result;
  }
  else
  {
    v4 = *(_QWORD *)result;
    v5 = v6;
  }
  *(_OWORD *)(v4 + 16 * v3) = v5;
  ++*(_DWORD *)(v2 + 12);
  return result;
}

unint64_t JSC::DebuggerPausePositions::appendEntry(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v2 = result;
  LODWORD(v6) = 1;
  *(_QWORD *)((char *)&v6 + 4) = *(_QWORD *)a2;
  HIDWORD(v6) = *(_DWORD *)(a2 + 8);
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 == *(_DWORD *)(result + 8))
  {
    result = WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v3 + 1, (unint64_t)&v6);
    v3 = *(unsigned int *)(v2 + 12);
    v4 = *(_QWORD *)v2;
    v5 = *(_OWORD *)result;
  }
  else
  {
    v4 = *(_QWORD *)result;
    v5 = v6;
  }
  *(_OWORD *)(v4 + 16 * v3) = v5;
  ++*(_DWORD *)(v2 + 12);
  return result;
}

unint64_t JSC::DebuggerPausePositions::appendLeave(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v2 = result;
  LODWORD(v6) = 3;
  *(_QWORD *)((char *)&v6 + 4) = *(_QWORD *)a2;
  HIDWORD(v6) = *(_DWORD *)(a2 + 8);
  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3 == *(_DWORD *)(result + 8))
  {
    result = WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v3 + 1, (unint64_t)&v6);
    v3 = *(unsigned int *)(v2 + 12);
    v4 = *(_QWORD *)v2;
    v5 = *(_OWORD *)result;
  }
  else
  {
    v4 = *(_QWORD *)result;
    v5 = v6;
  }
  *(_OWORD *)(v4 + 16 * v3) = v5;
  ++*(_DWORD *)(v2 + 12);
  return result;
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::isValidStrictMode(uint64_t a1)
{
  unint64_t v1;
  int v2;
  unint64_t v4;

  v1 = *(unsigned int *)(a1 + 12);
  if (v1 <= (int)v1 - 1)
    goto LABEL_9;
  v2 = *(_DWORD *)(*(_QWORD *)a1 + 720 * ((int)v1 - 1) + 10);
  if ((v2 & 0x800000) != 0)
  {
    if ((v2 & 0x4400) == 0 || (_DWORD)v1 == 1)
      return 1;
    v4 = (int)v1 - 2;
    if (v4 < v1)
      return *(unsigned __int8 *)(*(_QWORD *)a1 + 720 * (int)v4 + 12) >> 7;
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x197E5375CLL);
  }
  return 0;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::declareParameter(uint64_t *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  __int16 v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl **v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  uint64_t v57;
  __int128 v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  WTF::StringImpl *v65;
  int v67;
  WTF::StringImpl *v68;
  void *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  WTF::StringImpl *v75;
  int v77;
  int v79;
  _DWORD *v80;
  WTF *v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v103;
  uint64_t v104;
  unsigned int *v106;
  _DWORD *v107;

  v8 = *((_DWORD *)a1 + 3);
  if (!v8)
  {
    __break(0xC471u);
    return;
  }
  v10 = v8 - 1;
  v11 = *a1;
  v12 = *a1 + 720 * (v8 - 1);
  v13 = (uint64_t *)(v12 + 120);
  v14 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 41952) + 880);
  v15 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v15 += 2;
  v16 = *v13;
  if (*v13)
    goto LABEL_6;
  v17 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)(v17 + 16) = 0;
  v17 += 16;
  *(_WORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_WORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_WORD *)(v17 + 40) = 0;
  *(_QWORD *)(v17 + 48) = 0;
  *(_WORD *)(v17 + 56) = 0;
  *(_QWORD *)(v17 + 64) = 0;
  *(_WORD *)(v17 + 72) = 0;
  *(_QWORD *)(v17 + 80) = 0;
  *(_WORD *)(v17 + 88) = 0;
  *(_QWORD *)(v17 + 96) = 0;
  *(_WORD *)(v17 + 104) = 0;
  *(_QWORD *)(v17 + 112) = 0;
  *(_WORD *)(v17 + 120) = 0;
  *v13 = v17;
  *(_DWORD *)(v17 - 4) = 8;
  *(_DWORD *)(*v13 - 8) = 7;
  *(_DWORD *)(*v13 - 16) = 0;
  *(_DWORD *)(*v13 - 12) = 0;
  v16 = *v13;
  if (*v13)
LABEL_6:
    v18 = *(_DWORD *)(v16 - 8);
  else
    v18 = 0;
  v19 = *((_DWORD *)v15 + 4);
  if ((v19 & 0x20) != 0)
    v19 = *((_DWORD *)v15 + 8);
  v20 = v18 & (v19 >> 8);
  v21 = v16 + 16 * v20;
  v22 = *(WTF::StringImpl **)v21;
  if (!*(_QWORD *)v21)
    goto LABEL_10;
  v46 = 0;
  v47 = 1;
  do
  {
    if (v22 == v15)
    {
      v29 = 1;
      goto LABEL_18;
    }
    if (v22 == (WTF::StringImpl *)-1)
      v46 = v21;
    v20 = (v20 + v47) & v18;
    v21 = v16 + 16 * v20;
    v22 = *(WTF::StringImpl **)v21;
    ++v47;
  }
  while (*(_QWORD *)v21);
  if (v46)
  {
    *(_QWORD *)v46 = 0;
    *(_WORD *)(v46 + 8) = 0;
    --*(_DWORD *)(*v13 - 16);
    v21 = v46;
  }
  if (v15)
LABEL_10:
    *(_DWORD *)v15 += 2;
  *(_QWORD *)v21 = v15;
  *(_WORD *)(v21 + 8) = 0;
  v23 = *v13;
  if (*v13)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v13;
  if (*v13)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_17;
LABEL_56:
    v21 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(v13, (WTF::StringImpl **)v21);
    goto LABEL_17;
  }
  if (3 * v28 <= 4 * v27)
    goto LABEL_56;
LABEL_17:
  v29 = 0;
LABEL_18:
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  v31 = (!v29 || (*(_WORD *)(v21 + 8) & 0x100) == 0)
     && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 41952) + 1248) != *(_QWORD *)a2
     && v14 != v15;
  *(_WORD *)(v21 + 8) = *(_WORD *)(v21 + 8) & 0xFEFB | 0x100;
  v32 = v11 + 720 * v10;
  v35 = *(_DWORD *)(v32 + 10);
  v34 = (unsigned int *)(v32 + 10);
  v33 = v35;
  if ((*(_DWORD *)&v31 & (v35 >> 23)) != 0)
    v36 = 0x800000;
  else
    v36 = 0;
  v37 = v36 | v33 & 0xFF7FFFFF;
  v39 = (unsigned int *)((char *)v34 + 38);
  v38 = *(unsigned int *)((char *)v34 + 38);
  *v34 = v37;
  v40 = *(WTF::StringImpl **)a2;
  v41 = *(unsigned int *)((char *)v34 + 42);
  if ((_DWORD)v41 == 8)
  {
    if ((_DWORD)v38)
    {
      v42 = v38;
      v43 = (WTF::StringImpl **)(v11 + 720 * v10 + 56);
      v44 = v43;
      v45 = v38;
      while (*v44 != v40)
      {
        ++v44;
        if (!--v45)
        {
          if (v38 <= 7)
            goto LABEL_37;
          v56 = (_OWORD *)WTF::fastMalloc((WTF *)0x200);
          v57 = 0;
          *(_QWORD *)&v58 = -1;
          *((_QWORD *)&v58 + 1) = -1;
          *v56 = v58;
          v56[1] = v58;
          v56[2] = v58;
          v56[3] = v58;
          v56[4] = v58;
          v56[5] = v58;
          v56[6] = v58;
          v56[7] = v58;
          v56[8] = v58;
          v56[9] = v58;
          v56[10] = v58;
          v56[11] = v58;
          v56[12] = v58;
          v56[13] = v58;
          v56[14] = v58;
          v56[15] = v58;
          v56[16] = v58;
          v56[17] = v58;
          v56[18] = v58;
          v56[19] = v58;
          v56[20] = v58;
          v56[21] = v58;
          v56[22] = v58;
          v56[23] = v58;
          v56[24] = v58;
          v56[25] = v58;
          v56[26] = v58;
          v56[27] = v58;
          v56[28] = v58;
          v56[29] = v58;
          v56[30] = v58;
          v56[31] = v58;
          *(unsigned int *)((char *)v34 + 42) = 64;
          do
          {
            v59 = v43[v57];
            if (v59 != (WTF::StringImpl *)-1)
            {
              v60 = ((unint64_t)v59 + ~((_QWORD)v59 << 32)) ^ (((unint64_t)v59 + ~((_QWORD)v59 << 32)) >> 22);
              v61 = 9 * ((v60 + ~(v60 << 13)) ^ ((v60 + ~(v60 << 13)) >> 8));
              v62 = (v61 ^ (v61 >> 15)) + ~((v61 ^ (v61 >> 15)) << 27);
              v63 = v62 ^ (v62 >> 31);
              v64 = v63 & 0x3F;
              v65 = (WTF::StringImpl *)*((_QWORD *)v56 + v64);
              if (v65 != (WTF::StringImpl *)-1 && v65 != v59)
              {
                LOBYTE(v64) = v63 & 0x3F;
                v67 = 1;
                do
                {
                  v64 = ((_BYTE)v64 + (_BYTE)v67) & 0x3F;
                  v68 = (WTF::StringImpl *)*((_QWORD *)v56 + v64);
                  ++v67;
                }
                while (v68 != (WTF::StringImpl *)-1 && v68 != v59);
              }
              *((_QWORD *)v56 + v64) = v59;
            }
            ++v57;
          }
          while (v57 != 8);
          LODWORD(v38) = *v39;
          *v43 = (WTF::StringImpl *)v56;
          v41 = 64;
          goto LABEL_72;
        }
      }
      goto LABEL_39;
    }
    v42 = 0;
LABEL_37:
    *(_QWORD *)(v11 + 720 * v10 + 8 * v42 + 56) = v40;
  }
  else
  {
LABEL_72:
    if (3 * (int)v41 <= (4 * v38))
    {
      v106 = v34;
      v107 = (unsigned int *)((char *)v34 + 38);
      v79 = 2 * v41;
      v80 = (unsigned int *)((char *)v34 + 42);
      v81 = (WTF *)(8 * (2 * v41));
      v82 = v11 + 720 * v10;
      v85 = *(_QWORD *)(v82 + 56);
      v84 = (_QWORD *)(v82 + 56);
      v83 = v85;
      v86 = v41;
      v70 = (void *)WTF::fastMalloc(v81);
      memset(v70, 255, (size_t)v81);
      *v80 = v79;
      if ((_DWORD)v86)
      {
        v94 = 0;
        v95 = v79 - 1;
        do
        {
          v96 = *(_QWORD *)(v83 + 8 * v94);
          if (v96 != -1)
          {
            v97 = (~(v96 << 32) + v96) ^ ((unint64_t)(~(v96 << 32) + v96) >> 22);
            v98 = 9 * ((v97 + ~(v97 << 13)) ^ ((v97 + ~(v97 << 13)) >> 8));
            v99 = (v98 ^ (v98 >> 15)) + ~((v98 ^ (v98 >> 15)) << 27);
            v100 = v95 & ((v99 >> 31) ^ v99);
            v101 = *((_QWORD *)v70 + v100);
            if (v101 != -1 && v101 != v96)
            {
              v103 = 1;
              do
              {
                v100 = ((_DWORD)v100 + v103) & v95;
                v104 = *((_QWORD *)v70 + v100);
                ++v103;
              }
              while (v104 != -1 && v104 != v96);
            }
            *((_QWORD *)v70 + v100) = v96;
          }
          ++v94;
        }
        while (v94 != v86);
      }
      WTF::fastFree(v83, v87, v88, v89, v90, v91, v92, v93);
      LODWORD(v41) = *v80;
      *v84 = v70;
      v34 = v106;
      v39 = v107;
    }
    else
    {
      v70 = *(void **)(v11 + 720 * v10 + 56);
    }
    v71 = ((unint64_t)v40 + ~((_QWORD)v40 << 32)) ^ (((unint64_t)v40 + ~((_QWORD)v40 << 32)) >> 22);
    v72 = 9 * ((v71 + ~(v71 << 13)) ^ ((v71 + ~(v71 << 13)) >> 8));
    v73 = (v72 ^ (v72 >> 15)) + ~((v72 ^ (v72 >> 15)) << 27);
    v74 = v41 - 1;
    v38 = v74 & ((v73 >> 31) ^ v73);
    v75 = (WTF::StringImpl *)*((_QWORD *)v70 + v38);
    if (v75 != (WTF::StringImpl *)-1 && v75 != v40)
    {
      v77 = 1;
      do
      {
        v38 = ((_DWORD)v38 + v77) & v74;
        v75 = (WTF::StringImpl *)*((_QWORD *)v70 + v38);
        ++v77;
      }
      while (v75 != (WTF::StringImpl *)-1 && v75 != v40);
    }
    if (v75 == v40)
      goto LABEL_39;
    *((_QWORD *)v70 + v38) = v40;
    LODWORD(v38) = *v39;
  }
  *v39 = v38 + 1;
LABEL_39:
  if (v14 == v15)
    *v34 |= 1u;
}

void JSC::Parser<JSC::Lexer<unsigned char>>::declareRestOrNormalParameter(uint64_t a1, WTF::AtomStringImpl *a2, WTF::AtomStringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  __int16 v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  _DWORD *v39;
  char *v40;
  int *v41;
  int v42;
  uint64_t v43;
  char **v44;
  char **v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t casual;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  WTF::AtomStringImpl **v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  WTF::AtomStringImpl *v69;
  uint64_t v70;
  WTF::AtomStringImpl **v71;
  uint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  __int128 v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  int v84;
  char *v85;
  void *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  int v93;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v113;
  uint64_t v114;
  unsigned int v116;
  uint64_t v117;
  unint64_t *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  WTF::AtomStringImpl *v122;
  uint64_t v123;
  WTF::AtomStringImpl **v124;
  int v125;
  const char **v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  char *v130;
  char **v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  _QWORD *v137;
  int v138;
  int v139;
  WTF::AtomStringImpl **v140;
  WTF::AtomStringImpl **v141;
  WTF::AtomStringImpl *v142;
  WTF::AtomStringImpl *v143;
  uint64_t v144;
  uint64_t v145;
  const char *Range;
  uint64_t v147;

  v8 = *(_DWORD *)(a1 + 12);
  if (!v8)
    goto LABEL_169;
  v9 = a1;
  v10 = v8 - 1;
  v11 = *(_QWORD *)a1;
  v12 = (uint64_t *)(*(_QWORD *)a1 + 720 * (v8 - 1));
  v13 = v12 + 15;
  v14 = *(char **)(*(_QWORD *)(*v12 + 41952) + 880);
  v15 = *(char **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v15 += 2;
  v16 = *v13;
  if (*v13)
    goto LABEL_5;
  v48 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v48)
  {
    v49 = (_BYTE *)(v48 + 9776);
    *(_BYTE *)(v48 + 9776) = 1;
    v50 = *(unsigned int *)(v48 + 9792);
    if ((_DWORD)v50)
    {
      *(_DWORD *)(v48 + 9792) = v50 - *(_DWORD *)(v48 + 9796);
      casual = *(_QWORD *)(v48 + 9784) - v50;
LABEL_51:
      *v49 = 0;
      goto LABEL_52;
    }
    v66 = *(_QWORD *)(v48 + 9816);
    v67 = *(_QWORD *)(v48 + 9800);
    if (v66)
    {
LABEL_66:
      v68 = __clz(v66);
      *(_QWORD *)(v48 + 9816) = v66 & ~(0x8000000000000000 >> v68);
      casual = v67 + 16 * v68;
      goto LABEL_51;
    }
    if (*(_BYTE *)(v48 + 9781) == 6)
    {
      v116 = *(_DWORD *)(v48 + 9812);
      v117 = *(unsigned int *)(v48 + 9808);
      if (v117 < v116)
      {
        *(_QWORD *)&v49[8 * v117 + 56] = 0;
        v118 = (unint64_t *)(v48 + 8 * v117 + 9840);
        v119 = v116 - 1 - v117;
        while (v119)
        {
          v67 += 1024;
          v121 = *v118++;
          v120 = v121;
          LODWORD(v117) = v117 + 1;
          --v119;
          if (v121)
          {
            v66 = __rbit64(v120);
            *(_DWORD *)(v48 + 9808) = v117;
            *(_QWORD *)(v48 + 9800) = v67;
            v9 = a1;
            goto LABEL_66;
          }
        }
        *(_DWORD *)(v48 + 9808) = v116;
        v9 = a1;
      }
    }
    *v49 = 0;
  }
  v122 = a2;
  v123 = v9;
  v124 = a3;
  casual = bmalloc_allocate_casual(144, 1);
  a3 = v124;
  a2 = v122;
  v9 = v123;
LABEL_52:
  *(_QWORD *)(casual + 16) = 0;
  v52 = casual + 16;
  *(_WORD *)(v52 + 8) = 0;
  *(_QWORD *)(v52 + 16) = 0;
  *(_WORD *)(v52 + 24) = 0;
  *(_QWORD *)(v52 + 32) = 0;
  *(_WORD *)(v52 + 40) = 0;
  *(_QWORD *)(v52 + 48) = 0;
  *(_WORD *)(v52 + 56) = 0;
  *(_QWORD *)(v52 + 64) = 0;
  *(_WORD *)(v52 + 72) = 0;
  *(_QWORD *)(v52 + 80) = 0;
  *(_WORD *)(v52 + 88) = 0;
  *(_QWORD *)(v52 + 96) = 0;
  *(_WORD *)(v52 + 104) = 0;
  *(_QWORD *)(v52 + 112) = 0;
  *(_WORD *)(v52 + 120) = 0;
  *v13 = v52;
  *(_DWORD *)(v52 - 4) = 8;
  *(_DWORD *)(*v13 - 8) = 7;
  *(_DWORD *)(*v13 - 16) = 0;
  *(_DWORD *)(*v13 - 12) = 0;
  v16 = *v13;
  if (!*v13)
  {
    v17 = 0;
    goto LABEL_6;
  }
LABEL_5:
  v17 = *(_DWORD *)(v16 - 8);
LABEL_6:
  v18 = *((_DWORD *)v15 + 4);
  if ((v18 & 0x20) != 0)
    v18 = *((_DWORD *)v15 + 8);
  v19 = v17 & (v18 >> 8);
  v20 = v16 + 16 * v19;
  v21 = *(WTF::StringImpl **)v20;
  if (!*(_QWORD *)v20)
    goto LABEL_9;
  v53 = 0;
  v54 = 1;
  do
  {
    if (v21 == (WTF::StringImpl *)v15)
    {
      v28 = 1;
      goto LABEL_17;
    }
    if (v21 == (WTF::StringImpl *)-1)
      v53 = v20;
    v19 = (v19 + v54) & v17;
    v20 = v16 + 16 * v19;
    v21 = *(WTF::StringImpl **)v20;
    ++v54;
  }
  while (*(_QWORD *)v20);
  if (v53)
  {
    *(_QWORD *)v53 = 0;
    *(_WORD *)(v53 + 8) = 0;
    --*(_DWORD *)(*v13 - 16);
    v20 = v53;
  }
  if (v15)
LABEL_9:
    *(_DWORD *)v15 += 2;
  *(_QWORD *)v20 = v15;
  *(_WORD *)(v20 + 8) = 0;
  v22 = *v13;
  if (*v13)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v13;
  if (*v13)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_16;
LABEL_68:
    v69 = a2;
    v70 = v9;
    v71 = a3;
    v72 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(v12 + 15, (WTF::StringImpl **)v20);
    a3 = v71;
    a2 = v69;
    v9 = v70;
    v20 = v72;
    goto LABEL_16;
  }
  if (3 * v27 <= 4 * v26)
    goto LABEL_68;
LABEL_16:
  v28 = 0;
LABEL_17:
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      v55 = v9;
      v56 = a2;
      v57 = a3;
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      a3 = v57;
      a2 = v56;
      v9 = v55;
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  if (v28 && (*(_WORD *)(v20 + 8) & 0x100) != 0)
  {
    v31 = 0;
    v29 = 1;
  }
  else
  {
    v29 = 0;
    v31 = *(_QWORD *)(*(_QWORD *)(*v12 + 41952) + 1248) != *(_QWORD *)a2 && v14 != v15;
  }
  *(_WORD *)(v20 + 8) = *(_WORD *)(v20 + 8) & 0xFEFB | 0x100;
  v32 = v11 + 720 * v10;
  v35 = *(_DWORD *)(v32 + 10);
  v34 = (unsigned int *)(v32 + 10);
  v33 = v35;
  if ((*(_DWORD *)&v31 & (v35 >> 23)) != 0)
    v36 = 0x800000;
  else
    v36 = 0;
  v37 = v36 | v33 & 0xFF7FFFFF;
  v39 = (unsigned int *)((char *)v34 + 38);
  v38 = *(unsigned int *)((char *)v34 + 38);
  *v34 = v37;
  v40 = *(char **)a2;
  v41 = (int *)((char *)v34 + 42);
  v42 = *(unsigned int *)((char *)v34 + 42);
  if (v42 != 8)
  {
LABEL_84:
    if (3 * v42 <= (4 * v38))
    {
      v139 = v29;
      v141 = a3;
      v143 = a2;
      v145 = v9;
      v95 = v11 + 720 * v10;
      v96 = *(_QWORD *)(v95 + 56);
      v137 = (_QWORD *)(v95 + 56);
      v87 = (void *)WTF::fastMalloc((WTF *)(8 * (2 * v42)));
      memset(v87, 255, 8 * (2 * v42));
      *v41 = 2 * v42;
      if (v42)
      {
        v104 = 0;
        v105 = 2 * v42 - 1;
        do
        {
          v106 = *(_QWORD *)(v96 + 8 * v104);
          if (v106 != -1)
          {
            v107 = (~(v106 << 32) + v106) ^ ((unint64_t)(~(v106 << 32) + v106) >> 22);
            v108 = 9 * ((v107 + ~(v107 << 13)) ^ ((v107 + ~(v107 << 13)) >> 8));
            v109 = (v108 ^ (v108 >> 15)) + ~((v108 ^ (v108 >> 15)) << 27);
            v110 = v105 & ((v109 >> 31) ^ v109);
            v111 = *((_QWORD *)v87 + v110);
            if (v111 != -1 && v111 != v106)
            {
              v113 = 1;
              do
              {
                v110 = ((_DWORD)v110 + v113) & v105;
                v114 = *((_QWORD *)v87 + v110);
                ++v113;
              }
              while (v114 != -1 && v114 != v106);
            }
            *((_QWORD *)v87 + v110) = v106;
          }
          ++v104;
        }
        while (v104 != v42);
      }
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
      v42 = *v41;
      *v137 = v87;
      a2 = v143;
      v9 = v145;
      a3 = v141;
      v29 = v139;
    }
    else
    {
      v87 = *(void **)(v11 + 720 * v10 + 56);
    }
    v88 = (unint64_t)&v40[~((_QWORD)v40 << 32)] ^ ((unint64_t)&v40[~((_QWORD)v40 << 32)] >> 22);
    v89 = 9 * ((v88 + ~(v88 << 13)) ^ ((v88 + ~(v88 << 13)) >> 8));
    v90 = (v89 ^ (v89 >> 15)) + ~((v89 ^ (v89 >> 15)) << 27);
    v38 = (v42 - 1) & ((v90 >> 31) ^ v90);
    v91 = (char *)*((_QWORD *)v87 + v38);
    if (v91 != (char *)-1 && v91 != v40)
    {
      v93 = 1;
      do
      {
        v38 = ((_DWORD)v38 + v93) & (v42 - 1);
        v91 = (char *)*((_QWORD *)v87 + v38);
        ++v93;
      }
      while (v91 != (char *)-1 && v91 != v40);
    }
    if (v91 == v40)
      goto LABEL_38;
    *((_QWORD *)v87 + v38) = v40;
    LODWORD(v38) = *v39;
LABEL_37:
    *v39 = v38 + 1;
    goto LABEL_38;
  }
  if (!(_DWORD)v38)
  {
    v43 = 0;
LABEL_36:
    *(_QWORD *)(v11 + 720 * v10 + 8 * v43 + 56) = v40;
    goto LABEL_37;
  }
  v43 = v38;
  v44 = (char **)(v11 + 720 * v10 + 56);
  v45 = v44;
  v46 = v38;
  while (*v45 != v40)
  {
    ++v45;
    if (!--v46)
    {
      if (v38 <= 7)
        goto LABEL_36;
      v142 = a2;
      v144 = v9;
      v140 = a3;
      v138 = v29;
      v73 = (_OWORD *)WTF::fastMalloc((WTF *)0x200);
      v29 = v138;
      a3 = v140;
      a2 = v142;
      v9 = v144;
      v74 = 0;
      *(_QWORD *)&v75 = -1;
      *((_QWORD *)&v75 + 1) = -1;
      *v73 = v75;
      v73[1] = v75;
      v73[2] = v75;
      v73[3] = v75;
      v73[4] = v75;
      v73[5] = v75;
      v73[6] = v75;
      v73[7] = v75;
      v73[8] = v75;
      v73[9] = v75;
      v73[10] = v75;
      v73[11] = v75;
      v73[12] = v75;
      v73[13] = v75;
      v73[14] = v75;
      v73[15] = v75;
      v73[16] = v75;
      v73[17] = v75;
      v73[18] = v75;
      v73[19] = v75;
      v73[20] = v75;
      v73[21] = v75;
      v73[22] = v75;
      v73[23] = v75;
      v73[24] = v75;
      v73[25] = v75;
      v73[26] = v75;
      v73[27] = v75;
      v73[28] = v75;
      v73[29] = v75;
      v73[30] = v75;
      v73[31] = v75;
      *v41 = 64;
      do
      {
        v76 = v44[v74];
        if (v76 != (char *)-1)
        {
          v77 = (unint64_t)&v76[~((_QWORD)v76 << 32)] ^ ((unint64_t)&v76[~((_QWORD)v76 << 32)] >> 22);
          v78 = 9 * ((v77 + ~(v77 << 13)) ^ ((v77 + ~(v77 << 13)) >> 8));
          v79 = (v78 ^ (v78 >> 15)) + ~((v78 ^ (v78 >> 15)) << 27);
          v80 = v79 ^ (v79 >> 31);
          v81 = v80 & 0x3F;
          v82 = (char *)*((_QWORD *)v73 + v81);
          if (v82 != (char *)-1 && v82 != v76)
          {
            LOBYTE(v81) = v80 & 0x3F;
            v84 = 1;
            do
            {
              v81 = ((_BYTE)v81 + (_BYTE)v84) & 0x3F;
              v85 = (char *)*((_QWORD *)v73 + v81);
              ++v84;
            }
            while (v85 != (char *)-1 && v85 != v76);
          }
          *((_QWORD *)v73 + v81) = v76;
        }
        ++v74;
      }
      while (v74 != 8);
      LODWORD(v38) = *v39;
      *v44 = (char *)v73;
      v42 = 64;
      goto LABEL_84;
    }
  }
LABEL_38:
  if (v14 == v15)
    *v34 |= 1u;
  if (v29)
    v47 = ((v31 & 1) == 0) | 2;
  else
    v47 = (v31 & 1) == 0;
  if ((v47 & 1) == 0)
    goto LABEL_44;
  v125 = *(_DWORD *)(v9 + 12);
  if (!v125)
  {
LABEL_169:
    __break(0xC471u);
    JUMPOUT(0x197E546ACLL);
  }
  v126 = (const char **)a2;
  v127 = v9;
  v128 = v125 - 1;
  if ((*(_BYTE *)(*(_QWORD *)v9 + 720 * v128 + 9) & 1) == 0)
  {
LABEL_44:
    if ((v47 & 2) != 0)
    {
      if (a3)
        *a3 = a2;
    }
    return;
  }
  v129 = *(_QWORD *)(*(_QWORD *)(v9 + 7216) + 41952);
  v130 = *(char **)a2;
  if (*(char **)(v129 + 1248) == v130 || *(char **)(v129 + 880) == v130)
  {
    if (!*(_QWORD *)(v9 + 7360))
    {
      Range = v130;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(v9, "Cannot destructure to a parameter name '", (uint64_t *)&Range);
    }
  }
  else
  {
    v131 = *(char ***)(v9 + 7328);
    if (v131 && v130 == *v131)
    {
      if (!*(_QWORD *)(v9 + 7360))
      {
        Range = v130;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[35],WTF::UniquedStringImpl *,char const(&)[51]>(v9, (uint64_t *)&Range);
      }
    }
    else
    {
      v132 = *(_DWORD *)(v9 + 7368);
      if (v132 == 532)
      {
        if (!*(_QWORD *)(v9 + 7360))
        {
          Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(v9 + 7288) + 64), *(_DWORD *)(v9 + 7408), *(_DWORD *)(v9 + 7412));
          v147 = v133;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[15],char const(&)[16]>(v127, (uint64_t)&Range);
        }
        return;
      }
      if ((v132 - 531) <= 1)
      {
        if (!*(_QWORD *)(v9 + 7360))
        {
          Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(v9 + 7288) + 64), *(_DWORD *)(v9 + 7408), *(_DWORD *)(v9 + 7412));
          v147 = v134;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[15]>(v127, (uint64_t)&Range);
        }
        return;
      }
      if ((v132 & 0x200) == 0)
        goto LABEL_144;
      if ((v132 - 544) < 3)
      {
        if (v132 == 546)
        {
          if (*(_BYTE *)(v9 + 7344)
            && (*(_DWORD *)(*(_QWORD *)v9 + 720 * v128 + 10) & 0x102000) == 0
            && *(_DWORD *)(v9 + 7480) != 1)
          {
LABEL_144:
            if (*(_BYTE *)(*(_QWORD *)(v9 + 7288) + 148)
              || !JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredParameter((uint64_t *)v9, (WTF::StringImpl *)v130, (uint64_t)a3, a4, a5, a6, a7, a8))
            {
              if (!*(_QWORD *)(v127 + 7360))
              {
                Range = *v126;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[35],WTF::UniquedStringImpl *,char const(&)[17]>(v127, (uint64_t *)&Range);
              }
            }
            else if (!*(_QWORD *)(v127 + 7360))
            {
              Range = *v126;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[35],WTF::UniquedStringImpl *,char const(&)[49]>(v127, (uint64_t *)&Range);
            }
            return;
          }
          if (*(_QWORD *)(v9 + 7360))
            return;
          Range = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(v9);
          v136 = "Cannot use 'await' as a ";
        }
        else
        {
          if (v132 == 544)
          {
            if (!*(_QWORD *)(v9 + 7360))
            {
              Range = "in strict mode";
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const(&)[15],char const(&)[2],char const*>(v9, &Range);
            }
            return;
          }
          if (*(_QWORD *)(v9 + 7360))
            return;
          Range = JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierYieldReason(v9);
          v136 = "Cannot use 'yield' as a ";
        }
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const(&)[15],char const(&)[2],char const*>(v127, v136, &Range);
        return;
      }
      if (!*(_QWORD *)(v9 + 7360))
      {
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(v9 + 7288) + 64), *(_DWORD *)(v9 + 7408), *(_DWORD *)(v9 + 7412));
        v147 = v135;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const(&)[15]>(v127, (uint64_t)&Range);
      }
    }
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[41],WTF::UniquedStringImpl *,char const(&)[17]>(uint64_t a1, const char *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  char v38;
  void (**v39)(WTF::StringPrintStream *__hidden);
  WTF *v40;
  __int128 v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v39 = off_1E3572250;
    v40 = (WTF *)v42;
    v41 = xmmword_199122F80;
    v42[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v39, "%s", a2);
    v11 = *a3;
    if (*a3)
    {
      v12 = *(char **)(v11 + 8);
      v13 = *(unsigned int *)(v11 + 4);
      if ((*(_BYTE *)(v11 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v12, v13, (uint64_t)&v36, v10);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v12, v13, 0, v5, v6, v7, v8, v9, (uint64_t)&v36);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v39, "StringImpl*", &v36);
      if (v37 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v37])(&v38, &v36);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v39, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v39, "%s", "' in strict mode");
    WTF::PrintStream::printf((WTF::PrintStream *)&v39, "%s", ".");
    v39[5]((WTF::StringPrintStream *)&v39);
    WTF::String::fromUTF8WithLatin1Fallback(v40, v41, &v36);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v36, v14, v15, v16, v17, v18, v19);
    v27 = v36;
    v36 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v27 -= 2;
      }
    }
    if (v40 != (WTF *)v42)
      WTF::fastFree((unint64_t)v40, v20, v21, v22, v23, v24, v25, v26);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[35],WTF::UniquedStringImpl *,char const(&)[51]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot declare a parameter named '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' as it shadows the name of a strict mode function");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[15],char const(&)[16]>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot use the reserved word '");
    v10 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v11 = *(_QWORD *)(a2 + 8);
      if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
        WTF::StringImpl::utf8ForCharacters(v10, v11, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v10, v11, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
    }
    else
    {
      v12 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 16) = 0;
      v35 = (WTF::StringImpl *)v12;
      v36 = 0;
    }
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringView", &v35);
    if (v36 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "parameter name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", " in strict mode");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const(&)[15]>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot use the reserved word '");
    v10 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v11 = *(_QWORD *)(a2 + 8);
      if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
        WTF::StringImpl::utf8ForCharacters(v10, v11, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v10, v11, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
    }
    else
    {
      v12 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 16) = 0;
      v35 = (WTF::StringImpl *)v12;
      v36 = 0;
    }
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringView", &v35);
    if (v36 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "parameter name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const(&)[15]>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot use the keyword '");
    v10 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v11 = *(_QWORD *)(a2 + 8);
      if ((*(_QWORD *)(a2 + 8) & 0xFF00000000) != 0)
        WTF::StringImpl::utf8ForCharacters(v10, v11, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v10, v11, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
    }
    else
    {
      v12 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 16) = 0;
      v35 = (WTF::StringImpl *)v12;
      v36 = 0;
    }
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringView", &v35);
    if (v36 != -1)
      ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "parameter name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const(&)[15],char const(&)[2],char const*>(uint64_t a1, const char **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  void (**v27)(WTF::StringPrintStream *__hidden);
  WTF *v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v27 = off_1E3572250;
    v28 = (WTF *)v30;
    v29 = xmmword_199122F80;
    v30[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", "Cannot use 'let' as a ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", "parameter name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", " ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v27, "%s", ".");
    v27[5]((WTF::StringPrintStream *)&v27);
    WTF::String::fromUTF8WithLatin1Fallback(v28, v29, &v26);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v26, v4, v5, v6, v7, v8, v9);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v28 != (WTF *)v30)
      WTF::fastFree((unint64_t)v28, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const(&)[15],char const(&)[2],char const*>(uint64_t a1, const char *a2, const char **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  void (**v28)(WTF::StringPrintStream *__hidden);
  WTF *v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v28 = off_1E3572250;
    v29 = (WTF *)v31;
    v30 = xmmword_199122F80;
    v31[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", "parameter name");
    WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", " ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", *a3);
    WTF::PrintStream::printf((WTF::PrintStream *)&v28, "%s", ".");
    v28[5]((WTF::StringPrintStream *)&v28);
    WTF::String::fromUTF8WithLatin1Fallback(v29, v30, &v27);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v27, v5, v6, v7, v8, v9, v10);
    v18 = v27;
    v27 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v29 != (WTF *)v31)
      WTF::fastFree((unint64_t)v29, v11, v12, v13, v14, v15, v16, v17);
  }
}

const char *JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierAwaitReason(uint64_t a1)
{
  int v1;
  int v2;

  if (!*(_BYTE *)(a1 + 7344))
    return "in an async function";
  v1 = *(_DWORD *)(a1 + 12);
  if (!v1)
    goto LABEL_9;
  v2 = *(_DWORD *)(*(_QWORD *)a1 + 720 * (v1 - 1) + 10);
  if ((v2 & 0x2000) != 0)
    return "in an async function";
  if ((v2 & 0x100000) == 0)
  {
    if (*(_DWORD *)(a1 + 7480) == 1)
      return "in a module";
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x197E55350);
  }
  return "in a static block";
}

const char *JSC::Parser<JSC::Lexer<unsigned char>>::disallowedIdentifierYieldReason(uint64_t a1)
{
  int v1;
  unsigned int v2;

  v1 = *(_DWORD *)(a1 + 12);
  if (!v1)
    goto LABEL_6;
  v2 = v1 - 1;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v2 + 9) & 1) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v2 + 11) & 2) != 0)
      return "in a generator function";
LABEL_6:
    __break(0xC471u);
    JUMPOUT(0x197E553C0);
  }
  return "in strict mode";
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[35],WTF::UniquedStringImpl *,char const(&)[49]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot declare a parameter named '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' in strict mode as it has already been declared");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[35],WTF::UniquedStringImpl *,char const(&)[17]>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 7360))
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Cannot declare a parameter named '");
    v10 = *a2;
    if (*a2)
    {
      v11 = *(char **)(v10 + 8);
      v12 = *(unsigned int *)(v10 + 4);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        WTF::StringImpl::utf8ForCharacters(v11, v12, (uint64_t)&v35, v9);
      else
        WTF::StringImpl::utf8ForCharacters((uint64_t)v11, v12, 0, v4, v5, v6, v7, v8, (uint64_t)&v35);
      WTF::printExpectedCStringHelper((WTF::PrintStream *)&v38, "StringImpl*", &v35);
      if (v36 != -1)
        ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v36])(&v37, &v35);
    }
    else
    {
      WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "(null StringImpl*)");
    }
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "' in strict mode");
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", ".");
    v38[5]((WTF::StringPrintStream *)&v38);
    WTF::String::fromUTF8WithLatin1Fallback(v39, v40, &v35);
    JSC::Parser<JSC::Lexer<unsigned char>>::setErrorMessage(a1, v35, v13, v14, v15, v16, v17, v18);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v19, v20, v21, v22, v23, v24, v25);
  }
}

uint64_t JSC::Parser<JSC::Lexer<unsigned char>>::breakIsValid(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v1 = *((_DWORD *)a1 + 3);
  if (!v1)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x197E557B0);
  }
  v2 = v1 - 1;
  v3 = *a1;
  v4 = v1 - 1;
  while (1)
  {
    if (*(_DWORD *)(v3 + 720 * v2 + 24) || *(_DWORD *)(v3 + 720 * v2 + 28))
      return 1;
    if (!v4 || (*(_BYTE *)(v3 + 720 * v2 + 12) & 0x60) != 0)
      return 0;
    v4 = v2 - 1;
    v2 = (v2 - 1);
    if (v1 <= v4)
      goto LABEL_8;
  }
}

BOOL JSC::Parser<JSC::Lexer<unsigned char>>::continueIsValid(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  _BOOL8 result;

  v1 = *((_DWORD *)a1 + 3);
  if (!v1)
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x197E5581CLL);
  }
  v2 = v1 - 1;
  v3 = *a1;
  v4 = v1 - 1;
  while (1)
  {
    v5 = *(_DWORD *)(v3 + 720 * v2 + 24);
    result = v5 != 0;
    if (!v4 || v5)
      return result;
    if ((*(_BYTE *)(v3 + 720 * v2 + 12) & 0x60) != 0)
      return 0;
    v4 = v2 - 1;
    v2 = (v2 - 1);
    if (v1 <= v4)
      goto LABEL_7;
  }
}

double JSC::Scope::pushLabel(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  double result;
  unint64_t v19;
  __int128 v20;

  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
    v6 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v6 = v6 + 16;
    *(_QWORD *)(v6 + 8) = 2;
    v14 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v6;
    if (v14)
    {
      v15 = *(_QWORD *)v14;
      if (v14 + 16 != *(_QWORD *)v14 && v15 != 0)
      {
        *(_QWORD *)v14 = 0;
        *(_DWORD *)(v14 + 8) = 0;
        v19 = v14;
        WTF::fastFree(v15, v7, v8, v9, v10, v11, v12, v13);
        v14 = v19;
      }
      WTF::fastFree(v14, v7, v8, v9, v10, v11, v12, v13);
      v6 = *(_QWORD *)(a1 + 40);
    }
  }
  *(_QWORD *)&v20 = *a2;
  BYTE8(v20) = a3;
  v17 = *(unsigned int *)(v6 + 12);
  if ((_DWORD)v17 == *(_DWORD *)(v6 + 8))
  {
    *(_QWORD *)&result = WTF::Vector<JSC::ScopeLabelInfo,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ScopeLabelInfo>(v6, (unint64_t)&v20).n128_u64[0];
  }
  else
  {
    result = *(double *)&v20;
    *(_OWORD *)(*(_QWORD *)v6 + 16 * v17) = v20;
    ++*(_DWORD *)(v6 + 12);
  }
  return result;
}

BOOL JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierLet(uint64_t a1, int a2, _QWORD *a3)
{
  int v3;

  if (a2 != 544 && (a2 != 1048592 || *a3 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 328)))
    return 0;
  v3 = *(_DWORD *)(a1 + 12);
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x197E55964);
  }
  return (*(_BYTE *)(*(_QWORD *)a1 + 720 * (v3 - 1) + 9) & 1) == 0;
}

BOOL JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(_BOOL8 result, int a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;

  if (a2 != 545 && (a2 != 1048592 || *a3 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 7216) + 41952) + 496)))
    return 0;
  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    v4 = v3 - 1;
    if ((*(_BYTE *)(*(_QWORD *)result + 720 * v4 + 9) & 1) == 0)
      return (*(_BYTE *)(*(_QWORD *)result + 720 * v4 + 11) & 2) == 0;
    return 0;
  }
  __break(0xC471u);
  return result;
}

BOOL JSC::Parser<JSC::Lexer<unsigned char>>::autoSemiColon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v9 = *(_DWORD *)(a1 + 7368);
  if (v9 == 17)
  {
    v12 = *(_DWORD *)(a1 + 7400);
    v13 = *(_DWORD *)(a1 + 7412);
    v14 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v12;
    *(_DWORD *)(a1 + 7448) = v13;
    *(_DWORD *)(a1 + 7452) = v14;
    v15 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v15 + 4) = v12;
    v16 = *(_DWORD *)(a1 + 12);
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x197E55A88);
    }
    v17 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v16 - 1) + 9) & 1;
    *(_BYTE *)(v15 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator((unsigned int *)v15, a1 + 7368, 0, v17, a5, a6, a7, a8);
  }
  else if (v9 != 1 && v9 != 20)
  {
    return *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56) != 0;
  }
  return 1;
}

BOOL JSC::Parser<JSC::Lexer<unsigned char>>::isDisallowedIdentifierAwait(uint64_t a1, int a2, _QWORD *a3)
{
  int v3;

  if (a2 != 546 && (a2 != 1048592 || *a3 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128)))
    return 0;
  if (*(_BYTE *)(a1 + 7344))
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (!v3)
    {
      __break(0xC471u);
      JUMPOUT(0x197E55B18);
    }
    if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v3 - 1) + 10) & 0x102000) == 0)
      return *(_DWORD *)(a1 + 7480) == 1;
  }
  return 1;
}

BOOL JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierAwait(_BOOL8 result, int a2, _QWORD *a3)
{
  int v3;

  if (a2 != 546 && (a2 != 1048592 || *a3 != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 7216) + 41952) + 128))
    || !*(_BYTE *)(result + 7344))
  {
    return 0;
  }
  v3 = *(_DWORD *)(result + 12);
  if (v3)
  {
    if ((*(_DWORD *)(*(_QWORD *)result + 720 * (v3 - 1) + 10) & 0x102000) != 0)
      return 0;
    return *(_DWORD *)(result + 7480) != 1;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

BOOL JSC::Parser<JSC::Lexer<unsigned char>>::matchAllowedEscapedContextualKeyword(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  int v5;
  unsigned int v6;
  int v7;

  v1 = *(_QWORD **)(*(_QWORD *)(a1 + 7216) + 41952);
  v2 = **(_QWORD **)(a1 + 7376);
  if (v2 == v1[41])
  {
    v3 = *(_DWORD *)(a1 + 12);
    if (!v3)
      goto LABEL_18;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v3 - 1) + 9) & 1) == 0)
      return 1;
  }
  if (v2 != v1[16] || !*(_BYTE *)(a1 + 7344))
    goto LABEL_6;
  v7 = *(_DWORD *)(a1 + 12);
  if (!v7)
  {
LABEL_18:
    __break(0xC471u);
    JUMPOUT(0x197E55C94);
  }
  if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v7 - 1) + 10) & 0x102000) == 0 && *(_DWORD *)(a1 + 7480) != 1)
    return 1;
  if (v2 != v1[62])
    return 0;
LABEL_6:
  v5 = *(_DWORD *)(a1 + 12);
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x197E55C9CLL);
  }
  v6 = v5 - 1;
  return (*(_BYTE *)(*(_QWORD *)a1 + 720 * v6 + 9) & 1) == 0 && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v6 + 11) & 2) == 0;
}

void JSC::Lexer<unsigned char>::setOffset(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = a3;
  v9 = (int)a2;
  *(_BYTE *)(a1 + 150) = 0;
  v11 = *(WTF::StringImpl **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 96);
  v14 = (char *)(v12 + v9);
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 112) = v12 + v8;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  if ((unint64_t)v14 >= v13)
    v15 = 0;
  else
    v15 = *v14;
  *(_BYTE *)(a1 + 176) = v15;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::Parser(uint64_t a1, JSC::VM *a2, int *a3, char a4, int a5, int a6, int a7, int a8, int a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, char a16)
{
  BOOL v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  JSC::SourceProviderCache *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl **v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 10;
  *(_QWORD *)(a1 + 7216) = a2;
  *(_QWORD *)(a1 + 7224) = a3;
  *(_OWORD *)(a1 + 7232) = 0u;
  *(_OWORD *)(a1 + 7248) = 0u;
  *(_OWORD *)(a1 + 7264) = 0u;
  *(_OWORD *)(a1 + 7280) = 0u;
  *(_OWORD *)(a1 + 7296) = 0u;
  *(_QWORD *)(a1 + 7312) = 0x100000000;
  *(_QWORD *)(a1 + 7320) = 0;
  *(_QWORD *)(a1 + 7336) = 0;
  *(_QWORD *)(a1 + 7328) = 0;
  v23 = 1;
  *(_WORD *)(a1 + 7344) = 1;
  *(_BYTE *)(a1 + 7352) = 0;
  *(_QWORD *)(a1 + 7360) = 0;
  *(_DWORD *)(a1 + 7368) = 0x100000;
  *(_OWORD *)(a1 + 7376) = 0u;
  *(_OWORD *)(a1 + 7392) = 0u;
  *(_QWORD *)(a1 + 7408) = 0;
  *(_QWORD *)(a1 + 7432) = -1;
  *(_QWORD *)(a1 + 7424) = -1;
  *(_QWORD *)(a1 + 7416) = -1;
  *(_BYTE *)(a1 + 7440) = 1;
  *(_OWORD *)(a1 + 7444) = xmmword_199123900;
  *(_QWORD *)(a1 + 7464) = 0;
  *(_BYTE *)(a1 + 7472) = a4;
  *(_BYTE *)(a1 + 7473) = a5 == 1;
  *(_BYTE *)(a1 + 7474) = a8;
  *(_DWORD *)(a1 + 7476) = a9;
  *(_DWORD *)(a1 + 7480) = a7;
  *(_DWORD *)(a1 + 7484) = a10;
  *(_BYTE *)(a1 + 7488) = 0;
  *(_BYTE *)(a1 + 7505) = 0;
  *(_QWORD *)(a1 + 7512) = 0;
  *(_QWORD *)(a1 + 7520) = a15;
  *(_QWORD *)(a1 + 7528) = 0;
  *(_BYTE *)(a1 + 7536) = a16;
  *(_WORD *)(a1 + 7537) = 0;
  *(_BYTE *)(a1 + 7539) = 0;
  v24 = WTF::fastMalloc((WTF *)0xD0);
  *(_OWORD *)(v24 + 8) = 0u;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_OWORD *)(v24 + 40) = 0u;
  *(_QWORD *)(v24 + 128) = 0;
  *(_QWORD *)(v24 + 136) = 0;
  *(_QWORD *)(v24 + 120) = 0;
  *(_QWORD *)(v24 + 141) = 0;
  *(_QWORD *)(v24 + 160) = 0;
  *(_QWORD *)(v24 + 168) = 0;
  *(_QWORD *)(v24 + 152) = 0;
  *(_QWORD *)(v24 + 192) = a2;
  if (a5 != 1)
    v23 = byte_1ECF4C6C1 != 0;
  *(_BYTE *)(v24 + 200) = v23;
  *(_DWORD *)(v24 + 204) = a7;
  v32 = *(_QWORD *)(a1 + 7288);
  *(_QWORD *)(a1 + 7288) = v24;
  if (v32)
  {
    v33 = JSC::Lexer<unsigned char>::~Lexer(v32, v25, v26, v27, v28, v29, v30, v31);
    WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    v24 = *(_QWORD *)(a1 + 7288);
  }
  JSC::Lexer<char16_t>::setCode(v24, a3, a1 + 7232);
  *(_DWORD *)(a1 + 7400) = a3[4] + 1;
  v41 = a3[2];
  *(_DWORD *)(a1 + 7408) = v41;
  *(_DWORD *)(a1 + 7412) = v41;
  *(_DWORD *)(a1 + 7404) = v41;
  v48 = (_DWORD *)JSC::VM::addSourceProviderCache(a2, *(JSC::SourceProvider **)a3, v42, v43, v44, v45, v46, v47);
  v56 = v48;
  if (v48)
    ++*v48;
  v57 = *(JSC::SourceProviderCache **)(a1 + 7464);
  *(_QWORD *)(a1 + 7464) = v56;
  if (v57)
  {
    if (*(_DWORD *)v57 == 1)
    {
      JSC::SourceProviderCache::~SourceProviderCache(v57, v49, v50, v51, v52, v53, v54, v55);
      WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
    }
    else
    {
      --*(_DWORD *)v57;
    }
  }
  *(_QWORD *)(a1 + 7496) = 0;
  v58 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  v60 = v59;
  if (*(_DWORD *)(v58 + 12) <= v59)
    goto LABEL_51;
  v61 = v58;
  v62 = v59;
  JSC::Scope::setSourceParseMode(*(_QWORD *)v58 + 720 * v59, a8);
  if (*(_DWORD *)(v61 + 12) <= v60)
  {
    __break(0xC471u);
    JUMPOUT(0x197E56190);
  }
  if (a13)
    v67 = 0x2000000;
  else
    v67 = 0;
  *(_DWORD *)(*(_QWORD *)v61 + 720 * v62 + 10) = *(_DWORD *)(*(_QWORD *)v61 + 720 * v62 + 10) & 0xFDFFFFFF | v67;
  v68 = *(_DWORD *)(v61 + 12);
  if (a13)
  {
    if (v68 > v60)
    {
      *(_BYTE *)(*(_QWORD *)v61 + 720 * v62 + 14) = a14;
      goto LABEL_16;
    }
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x197E56188);
  }
LABEL_16:
  if (v68 <= v60)
  {
    __break(0xC471u);
    JUMPOUT(0x197E56198);
  }
  v69 = *(_QWORD *)v61;
  if ((*(_BYTE *)(*(_QWORD *)v61 + 720 * v62 + 11) & 1) != 0)
    *(_BYTE *)(v69 + 720 * v62 + 15) = a11;
  *(_BYTE *)(v69 + 720 * v62 + 16) = a12;
  if (a12)
    *(_DWORD *)(v69 + 720 * v62 + 20) = 0;
  if (a6 == 1)
    *(_BYTE *)(v69 + 720 * v62 + 9) |= 1u;
  if (((1 << a8) & 0x6000) != 0)
  {
    v85 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v85 = 1;
    *(_QWORD *)(v85 + 8) = 0;
    *(_QWORD *)(v85 + 16) = 0;
    v107 = 0;
    v93 = *(_QWORD *)(a1 + 7512);
    *(_QWORD *)(a1 + 7512) = v85;
    if (v93)
    {
      if (*(_DWORD *)v93 == 1)
      {
        v94 = *(_QWORD *)(v93 + 16);
        if (v94)
          WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::deallocateTable(v94, v86, v87, v88, v89, v90, v91, v92);
        v95 = *(_QWORD *)(v93 + 8);
        if (v95)
        {
          v96 = *(unsigned int *)(v95 - 4);
          if ((_DWORD)v96)
          {
            v97 = *(WTF::StringImpl ***)(v93 + 8);
            do
            {
              v98 = *v97;
              if (*v97 != (WTF::StringImpl *)-1)
              {
                *v97 = 0;
                if (v98)
                {
                  if (*(_DWORD *)v98 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v98, v86, v87, v88, v89, v90, v91, v92);
                    WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
                  }
                  else
                  {
                    *(_DWORD *)v98 -= 2;
                  }
                }
              }
              ++v97;
              --v96;
            }
            while (v96);
          }
          WTF::fastFree(v95 - 16, v86, v87, v88, v89, v90, v91, v92);
        }
        WTF::fastFree(v93, v86, v87, v88, v89, v90, v91, v92);
      }
      else
      {
        --*(_DWORD *)v93;
      }
    }
    WTF::Ref<JSC::ModuleScopeData,WTF::RawPtrTraits<JSC::ModuleScopeData>,WTF::DefaultRefDerefTraits<JSC::ModuleScopeData>>::~Ref(&v107, v86, v87, v88, v89, v90, v91, v92);
  }
  v70 = *(_DWORD *)(a1 + 7400);
  v71 = *(_DWORD *)(a1 + 7412);
  v72 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v70;
  *(_DWORD *)(a1 + 7448) = v71;
  *(_DWORD *)(a1 + 7452) = v72;
  v73 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v73 + 4) = v70;
  v74 = *(_DWORD *)(a1 + 12);
  if (!v74)
  {
    __break(0xC471u);
    JUMPOUT(0x197E561A0);
  }
  v75 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v74 - 1) + 9) & 1;
  *(_BYTE *)(v73 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v73, a1 + 7368, 0, v75, v63, v64, v65, v66);
  return a1;
}

{
  return JSC::Parser<JSC::Lexer<char16_t>>::Parser(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::~Parser(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  JSC::SourceProviderCache *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v9 = *(WTF **)(a1 + 7512);
  *(_QWORD *)(a1 + 7512) = 0;
  if (v9)
    WTF::RefCounted<JSC::ModuleScopeData>::deref(v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(JSC::SourceProviderCache **)(a1 + 7464);
  *(_QWORD *)(a1 + 7464) = 0;
  if (v10)
    WTF::RefCounted<JSC::SourceProviderCache>::deref(v10, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(WTF::StringImpl **)(a1 + 7360);
  *(_QWORD *)(a1 + 7360) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = *(_QWORD *)(a1 + 7288);
  *(_QWORD *)(a1 + 7288) = 0;
  if (v12)
  {
    v13 = JSC::Lexer<unsigned char>::~Lexer(v12, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  JSC::ParserArena::~ParserArena((JSC::ParserArena *)(a1 + 7232), a2, a3, a4, a5, a6, a7, a8);
  v28 = *(_DWORD *)(a1 + 12);
  if (v28)
    WTF::VectorTypeOperations<JSC::Scope>::destruct(*(unsigned int **)a1, (unsigned int *)(*(_QWORD *)a1 + 720 * v28), v22, v23, v24, v25, v26, v27);
  v29 = *(unsigned int **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v29)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree((unint64_t)v29, v21, v22, v23, v24, v25, v26, v27);
  }
  return a1;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::AutoPopScopeRef::~AutoPopScopeRef(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  _BYTE v18[24];
  WTF *v19;
  int v20;

  v8 = *(uint64_t **)(result + 16);
  if (v8)
  {
    v17 = result;
    *(_QWORD *)(result + 16) = 0;
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v18, v8, 0, a4, a5, a6, a7, a8);
    v16 = v19;
    if (v19)
    {
      v19 = 0;
      v20 = 0;
      WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
    }
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v18, (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
    return v17;
  }
  return result;
}

void JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t *v34;
  int *v35;
  unint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int *v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  int *v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int *v55;
  int v56;
  char v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t *v139;
  uint64_t v140;
  uint64_t v142;
  WTF::StringImpl ***v143;
  unint64_t v144;
  WTF::StringImpl **v145;
  uint64_t v146;
  uint64_t v147;
  WTF::StringImpl **v148;
  uint64_t v149;
  WTF::StringImpl ***v150;
  unint64_t v151;
  WTF::StringImpl **v152;
  uint64_t v153;
  uint64_t v154;
  WTF::StringImpl **v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  WTF::StringImpl **v167;
  int v168;
  uint64_t v169;
  unsigned int *v170;
  unsigned int *v171;
  unint64_t v172;
  unint64_t v173;
  unsigned int v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  WTF::StringImpl **v179;
  WTF::StringImpl *v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  WTF::StringImpl **v190;
  WTF::StringImpl *v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 v208;
  uint64_t v209;
  unsigned int v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  unsigned int v220;
  unsigned int v221;
  uint64_t v223;
  WTF::StringImpl **v224;
  WTF::StringImpl *v225;
  unint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  WTF::StringImpl **v235;
  WTF::StringImpl *v236;
  unint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  int v246;
  uint64_t v247;
  unsigned int v248;
  unsigned int v249;
  uint64_t v250;
  int v252;
  uint64_t v254;
  WTF::StringImpl ***v255;
  unint64_t v256;
  WTF::StringImpl **v257;
  uint64_t v258;
  uint64_t v259;
  WTF::StringImpl **v260;
  uint64_t v261;
  WTF::StringImpl ***v262;
  unint64_t v263;
  WTF::StringImpl **v264;
  uint64_t v265;
  uint64_t v266;
  WTF::StringImpl **v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _BYTE *v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  uint64_t v284;
  WTF::StringImpl **v285;
  WTF::StringImpl *v286;
  unint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  WTF::StringImpl **v296;
  WTF::StringImpl *v297;
  unint64_t v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  void *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v322;
  uint64_t v323;
  uint64_t *v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  WTF::StringImpl **v329;
  WTF::StringImpl *v330;
  uint64_t v331;
  unsigned int v332;
  unsigned int v333;
  uint64_t v334;
  WTF::StringImpl *v335;
  int v336;
  unint64_t v337;
  void *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  WTF::StringImpl **v346;
  WTF::StringImpl *v347;
  unint64_t v348;
  void *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  WTF::StringImpl **v357;
  WTF::StringImpl *v358;
  unint64_t v359;
  void *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unsigned int v368;
  unsigned int v369;
  uint64_t v370;
  int v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  JSC::Scope *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unsigned int *v380;
  unint64_t *v381;
  int *v382;
  uint64_t v383;
  uint64_t *v384;
  unsigned int v385;
  uint64_t v386;
  int *v387;
  _BYTE v388[32];

  v8 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v8)
  {
    __break(0xC471u);
    JUMPOUT(0x197E57BB0);
  }
  v11 = v8 - 1;
  v12 = *a2;
  v13 = *a2 + 720 * (v8 - 1);
  v15 = *(_BYTE *)(v13 + 10);
  v14 = v13 + 10;
  v375 = *a2 + 720 * (v8 - 1);
  v16 = (WTF::AtomStringImpl *)(v375 + 144);
  v386 = v14;
  v385 = a3;
  if ((v15 & 0xA) == 0)
  {
    v17 = *(_QWORD *)v16;
    if (*(_QWORD *)v16)
      v18 = *(_DWORD *)(v17 - 12);
    else
      v18 = 0;
    v19 = *(_QWORD **)(v12 + 720 * v11 + 160);
    if (v19)
    {
      v19 = (_QWORD *)*v19;
      if (v19)
        LODWORD(v19) = *((_DWORD *)v19 - 3);
    }
    if (v18 + (_DWORD)v19)
    {
      v164 = *(_QWORD *)(v12 + 720 * v11 + 696);
      if (v164)
      {
        if (*(_DWORD *)(v164 - 12))
        {
          v165 = *(unsigned int *)(v164 - 4);
          if ((_DWORD)v165)
          {
            v166 = 8 * v165;
            v167 = *(WTF::StringImpl ***)(v12 + 720 * v11 + 696);
            while ((unint64_t)*v167 + 1 <= 1)
            {
              ++v167;
              v166 -= 8;
              if (!v166)
                goto LABEL_7;
            }
          }
          else
          {
            v167 = *(WTF::StringImpl ***)(v12 + 720 * v11 + 696);
          }
          v329 = (WTF::StringImpl **)(v164 + 8 * v165);
          if (v167 != v329)
          {
            v330 = *v167;
LABEL_422:
            if (v330)
            {
              *(_DWORD *)v330 += 2;
              v331 = *(_QWORD *)v16;
              if (*(_QWORD *)v16)
              {
                v332 = *((_DWORD *)v330 + 4);
                if ((v332 & 0x20) != 0)
                  v332 = *((_DWORD *)v330 + 8);
                v333 = *(_DWORD *)(v331 - 8);
                v334 = v333 & (v332 >> 8);
                v335 = *(WTF::StringImpl **)(v331 + 16 * v334);
                if (v335 != v330)
                {
                  v336 = 1;
                  while (v335)
                  {
                    v334 = ((_DWORD)v334 + v336) & v333;
                    v335 = *(WTF::StringImpl **)(v331 + 16 * v334);
                    ++v336;
                    if (v335 == v330)
                      goto LABEL_432;
                  }
                  v334 = *(unsigned int *)(v331 - 4);
                }
LABEL_432:
                if (v334 != *(_DWORD *)(v331 - 4))
                  *(_WORD *)(v331 + 16 * v334 + 8) |= 1u;
              }
              if (*(_DWORD *)v330 == 2)
              {
                WTF::StringImpl::~StringImpl(v330, v16, a3, v14, a5, a6, a7, a8);
                WTF::fastFree(v337, v338, v339, v340, v341, v342, v343, v344);
                a3 = v385;
                v14 = v386;
                v16 = (WTF::AtomStringImpl *)(v375 + 144);
              }
              else
              {
                *(_DWORD *)v330 -= 2;
              }
              goto LABEL_436;
            }
            v367 = *(_QWORD *)v16;
            if (*(_QWORD *)v16)
            {
              v368 = MEMORY[0x10];
              if ((MEMORY[0x10] & 0x20) != 0)
                v368 = MEMORY[0x20];
              v369 = *(_DWORD *)(v367 - 8);
              v370 = v369 & (v368 >> 8);
              if (*(_QWORD *)(v367 + 16 * v370))
              {
                v371 = 1;
                do
                  v370 = ((_DWORD)v370 + v371++) & v369;
                while (*(_QWORD *)(v367 + 16 * v370));
              }
              if (v370 != *(_DWORD *)(v367 - 4))
                *(_WORD *)(v367 + 16 * v370 + 8) |= 1u;
            }
            v16 = (WTF::AtomStringImpl *)(v375 + 144);
            v14 = v386;
            a3 = v385;
LABEL_436:
            while (++v167 != v329)
            {
              v330 = *v167;
              if ((unint64_t)*v167 + 1 > 1)
              {
                if (v167 != v329)
                  goto LABEL_422;
                break;
              }
            }
            v17 = *(_QWORD *)v16;
          }
        }
      }
    }
LABEL_7:
    if (v17)
    {
      v20 = *(unsigned int *)(v17 - 4);
      v21 = v17 + 16 * v20;
      if (*(_DWORD *)(v17 - 12))
      {
        v22 = v17;
        if ((_DWORD)v20)
        {
          v23 = 16 * v20;
          v22 = v17;
          while ((unint64_t)(*(_QWORD *)v22 + 1) <= 1)
          {
            v22 += 16;
            v23 -= 16;
            if (!v23)
            {
              v22 = v21;
              goto LABEL_14;
            }
          }
        }
        goto LABEL_14;
      }
      v22 = v17 + 16 * v20;
    }
    else
    {
      v22 = 0;
      v20 = 0;
    }
    v21 = v17 + 16 * v20;
    if (!v17)
    {
      v24 = 0;
LABEL_15:
      if (v24 != v22)
      {
        v162 = v12 + 720 * v11;
        do
        {
          if ((*(_WORD *)(v22 + 8) & 1) != 0)
          {
            v209 = *(_QWORD *)(v162 + 696);
            if (v209)
            {
              v210 = *(_DWORD *)(v209 - 8);
              v211 = ~(*(_QWORD *)v22 << 32) + *(_QWORD *)v22;
              v212 = (v211 ^ (v211 >> 22)) + ~((v211 ^ (v211 >> 22)) << 13);
              v213 = (9 * (v212 ^ (v212 >> 8))) ^ ((9 * (v212 ^ (v212 >> 8))) >> 15);
              v214 = v210 & (((v213 + ~(v213 << 27)) >> 31) ^ ((_DWORD)v213 + ~((_DWORD)v213 << 27)));
              v215 = *(_QWORD *)(v209 + 8 * v214);
              if (v215 != *(_QWORD *)v22)
              {
                v252 = 1;
                while (v215)
                {
                  v214 = ((_DWORD)v214 + v252) & v210;
                  v215 = *(_QWORD *)(v209 + 8 * v214);
                  ++v252;
                  if (v215 == *(_QWORD *)v22)
                    goto LABEL_246;
                }
                v214 = *(unsigned int *)(v209 - 4);
              }
LABEL_246:
              if (v214 != *(_DWORD *)(v209 - 4))
              {
                *(_QWORD *)(v209 + 8 * v214) = -1;
                v216 = (uint64_t *)(v162 + 696);
                ++*(_DWORD *)(*(_QWORD *)(v162 + 696) - 16);
                v217 = *(_QWORD *)(v162 + 696);
                v218 = v217 ? *(_DWORD *)(v217 - 12) - 1 : -1;
                *(_DWORD *)(v217 - 12) = v218;
                v219 = *v216;
                if (*v216)
                {
                  v220 = 6 * *(_DWORD *)(v219 - 12);
                  v221 = *(_DWORD *)(v219 - 4);
                  if (v220 < v221 && v221 >= 9)
                  {
                    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(v216, v221 >> 1, 0, v14, a5, a6, a7, a8);
                    a3 = v385;
                    v14 = v386;
                    v16 = (WTF::AtomStringImpl *)(v375 + 144);
                  }
                }
              }
            }
          }
          v163 = v22 + 16;
          v22 = v21;
          if (v163 != v21)
          {
            v22 = v163;
            while ((unint64_t)(*(_QWORD *)v22 + 1) <= 1)
            {
              v22 += 16;
              if (v22 == v21)
              {
                v22 = v21;
                break;
              }
            }
          }
        }
        while (v22 != v24);
      }
      goto LABEL_16;
    }
LABEL_14:
    v24 = v17 + 16 * *(unsigned int *)(v17 - 4);
    goto LABEL_15;
  }
  v273 = v12 + 720 * v11;
  v275 = *(unsigned __int8 *)(v273 + 152);
  v274 = (_BYTE *)(v273 + 152);
  if (v275)
    goto LABEL_16;
  *v274 = 1;
  v276 = *(_QWORD *)v16;
  if (*(_QWORD *)v16)
  {
    v277 = *(unsigned int *)(v276 - 4);
    v278 = v276 + 16 * v277;
    if (*(_DWORD *)(v276 - 12))
    {
      v279 = *(_QWORD *)v16;
      if ((_DWORD)v277)
      {
        v280 = 16 * v277;
        v279 = *(_QWORD *)v16;
        while ((unint64_t)(*(_QWORD *)v279 + 1) <= 1)
        {
          v279 += 16;
          v280 -= 16;
          if (!v280)
          {
            v279 = v278;
            goto LABEL_348;
          }
        }
      }
      goto LABEL_348;
    }
    v279 = v276 + 16 * v277;
  }
  else
  {
    v279 = 0;
    v277 = 0;
  }
  v278 = v276 + 16 * v277;
LABEL_348:
  if (v276)
    v276 += 16 * *(unsigned int *)(v276 - 4);
  while (v279 != v276)
  {
    *(_WORD *)(v279 + 8) |= 1u;
    v281 = v279 + 16;
    v279 = v278;
    if (v281 != v278)
    {
      v279 = v281;
      while ((unint64_t)(*(_QWORD *)v279 + 1) <= 1)
      {
        v279 += 16;
        if (v279 == v278)
        {
          v279 = v278;
          break;
        }
      }
    }
  }
LABEL_16:
  v25 = *((unsigned int *)a2 + 3);
  if (v25 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197E57BB8);
  }
  v26 = v25 - 2;
  v27 = *a2;
  v28 = *(_DWORD *)v14;
  if ((*(_DWORD *)v14 & 2) != 0)
  {
    *(_DWORD *)(v27 + 720 * v26 + 10) |= 2u;
    v28 = *(_DWORD *)v14;
  }
  if ((v28 & 4) != 0)
    *(_DWORD *)(v27 + 720 * v26 + 10) |= 4u;
  v383 = a1;
  v384 = a2;
  v29 = *(unsigned int *)(v27 + 720 * v26 + 180);
  if (!(_DWORD)v29)
  {
    __break(0xC471u);
    JUMPOUT(0x197E57BC0);
  }
  v376 = (JSC::Scope *)(v27 + 720 * v26);
  v30 = v12 + 720 * v11;
  v31 = *(_DWORD *)(v30 + 180);
  if (v31)
  {
    v33 = *(_QWORD *)(v30 + 168);
    v377 = v33 + 72 * v31;
    v378 = v12;
    v34 = (uint64_t *)(v12 + 720 * v11 + 120);
    v32 = (unsigned int *)(*(_QWORD *)(v27 + 720 * v26 + 168) + 72 * (v29 - 1));
    v35 = (int *)(v32 + 1);
    v36 = (unint64_t *)(v32 + 2);
    v380 = v32;
    v381 = (unint64_t *)(v32 + 2);
    v382 = (int *)(v32 + 1);
    v379 = v11;
    while (1)
    {
      v37 = *(unsigned int *)(v33 + 4);
      v38 = (_QWORD *)(v33 + 8);
      if ((_DWORD)v37 != 8)
        v38 = (_QWORD *)*v38;
      v39 = 0;
      while ((_DWORD)v37 != v39)
      {
        v40 = v39;
        v41 = v38[v39++];
        if (v41 != -1)
        {
          v42 = v40;
          goto LABEL_30;
        }
      }
      v42 = *(unsigned int *)(v33 + 4);
LABEL_30:
      if ((_DWORD)v37 != (_DWORD)v42)
        break;
LABEL_113:
      v33 += 72;
      v12 = v378;
      v11 = v379;
      if (v33 == v377)
        goto LABEL_123;
    }
    v43 = v42 | (v37 << 32);
    while (1)
    {
      v387 = 0;
      v44 = (int *)v38[v43];
      v387 = v44;
      if (v44)
        *v44 += 2;
      v45 = *v34;
      if (!*v34)
        goto LABEL_44;
      v46 = v44[4];
      if ((v46 & 0x20) != 0)
        v46 = v44[8];
      v47 = *(_DWORD *)(v45 - 8);
      v48 = v47 & (v46 >> 8);
      v49 = *(int **)(v45 + 16 * v48);
      if (v49 != v44)
        break;
LABEL_42:
      if (*v44 == 2)
      {
        v106 = v26;
        v107 = v27;
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, v16, a3, v14, v26, v27, a7, a8);
        WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
LABEL_96:
        v36 = v381;
        v35 = v382;
        v27 = v107;
        v32 = v380;
        v26 = v106;
        a3 = v385;
        v14 = v386;
        v16 = (WTF::AtomStringImpl *)(v375 + 144);
        goto LABEL_71;
      }
      *v44 -= 2;
LABEL_71:
      if (HIDWORD(v43) <= (v42 + 1))
        v66 = (v42 + 1);
      else
        v66 = HIDWORD(v43);
      while ((_DWORD)v66 - 1 != (_DWORD)v42)
      {
        v42 = (v42 + 1);
        if (v38[v42] != -1)
        {
          LODWORD(v66) = v42;
          goto LABEL_77;
        }
      }
      v42 = v66;
LABEL_77:
      v43 = v42 | v43 & 0xFFFFFFFF00000000;
      LODWORD(v42) = v66;
      if ((_DWORD)v37 == (_DWORD)v66)
        goto LABEL_113;
    }
    v50 = 1;
    while (v49)
    {
      v48 = (v48 + v50) & v47;
      v49 = *(int **)(v45 + 16 * v48);
      ++v50;
      if (v49 == v44)
      {
        if (!v44)
          goto LABEL_71;
        goto LABEL_42;
      }
    }
LABEL_44:
    if (v44)
      *v44 += 2;
    v51 = *(_QWORD *)v16;
    if (*(_QWORD *)v16)
    {
      v52 = v44[4];
      if ((v52 & 0x20) != 0)
        v52 = v44[8];
      v53 = *(_DWORD *)(v51 - 8);
      v54 = v53 & (v52 >> 8);
      v55 = *(int **)(v51 + 16 * v54);
      if (v55 == v44)
      {
LABEL_54:
        v57 = 1;
        goto LABEL_57;
      }
      v56 = 1;
      while (v55)
      {
        v54 = (v54 + v56) & v53;
        v55 = *(int **)(v51 + 16 * v54);
        ++v56;
        if (v55 == v44)
        {
          if (!v44)
            goto LABEL_71;
          goto LABEL_54;
        }
      }
    }
    if (!v44)
      goto LABEL_61;
    v57 = 0;
LABEL_57:
    v58 = *v44 - 2;
    if (*v44 == 2)
    {
      v67 = v26;
      v68 = v27;
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, v16, a3, v14, v26, v27, a7, a8);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
      v36 = v381;
      v35 = v382;
      v27 = v68;
      v32 = v380;
      v26 = v67;
      a3 = v385;
      v14 = v386;
      v16 = (WTF::AtomStringImpl *)(v375 + 144);
      v58 = *v44;
    }
    else
    {
      *v44 = v58;
    }
    v59 = v58 - 2;
    if (v59)
    {
      *v44 = v59;
      if ((v57 & 1) != 0)
        goto LABEL_71;
    }
    else
    {
      v77 = v26;
      v78 = v27;
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v44, v16, a3, v14, v26, v27, a7, a8);
      WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
      v36 = v381;
      v35 = v382;
      v27 = v78;
      v32 = v380;
      v26 = v77;
      a3 = v385;
      v14 = v386;
      v16 = (WTF::AtomStringImpl *)(v375 + 144);
      if ((v57 & 1) != 0)
        goto LABEL_71;
    }
LABEL_61:
    v60 = (uint64_t)v387;
    if ((~*(_DWORD *)v14 & 0x1400000) == 0
      && (*(_DWORD *)v14 & 0x1000) == 0
      && v387 == *(int **)(*(_QWORD *)(*(_QWORD *)v376 + 41952) + 880))
    {
      goto LABEL_71;
    }
    v61 = *v35;
    v62 = *v32;
    if (*v35 == 8)
    {
      if (v62)
      {
        v63 = *v32;
        v64 = v36;
        v65 = v63;
        while ((int *)*v64 != v387)
        {
          ++v64;
          if (!--v65)
          {
            if (v62 <= 7)
              goto LABEL_68;
            v205 = v26;
            v206 = v27;
            v207 = (_OWORD *)WTF::fastMalloc((WTF *)0x200);
            v36 = v381;
            v35 = v382;
            v27 = v206;
            v32 = v380;
            v26 = v205;
            v14 = v386;
            v16 = (WTF::AtomStringImpl *)(v375 + 144);
            v102 = 0;
            *(_QWORD *)&v208 = -1;
            *((_QWORD *)&v208 + 1) = -1;
            *v207 = v208;
            v207[1] = v208;
            v207[2] = v208;
            v207[3] = v208;
            v207[4] = v208;
            v207[5] = v208;
            v207[6] = v208;
            v207[7] = v208;
            v207[8] = v208;
            v207[9] = v208;
            v207[10] = v208;
            v207[11] = v208;
            v207[12] = v208;
            v207[13] = v208;
            v207[14] = v208;
            v207[15] = v208;
            v207[16] = v208;
            v207[17] = v208;
            v207[18] = v208;
            v207[19] = v208;
            v207[20] = v208;
            v207[21] = v208;
            v207[22] = v208;
            v207[23] = v208;
            v207[24] = v208;
            v207[25] = v208;
            v207[26] = v208;
            v207[27] = v208;
            v207[28] = v208;
            v207[29] = v208;
            v207[30] = v208;
            v207[31] = v208;
            *v382 = 64;
            do
            {
              v94 = v381[v102];
              if (v94 != -1)
              {
                v95 = (~(v94 << 32) + v94) ^ ((~(v94 << 32) + v94) >> 22);
                v96 = 9 * ((v95 + ~(v95 << 13)) ^ ((v95 + ~(v95 << 13)) >> 8));
                v97 = (v96 ^ (v96 >> 15)) + ~((v96 ^ (v96 >> 15)) << 27);
                v98 = v97 ^ (v97 >> 31);
                v99 = v98 & 0x3F;
                v100 = *((_QWORD *)v207 + v99);
                if (v100 != -1 && v100 != v94)
                {
                  LOBYTE(v99) = v98 & 0x3F;
                  v103 = 1;
                  do
                  {
                    v99 = ((_BYTE)v99 + (_BYTE)v103) & 0x3F;
                    v104 = *((_QWORD *)v207 + v99);
                    ++v103;
                  }
                  while (v104 != -1 && v104 != v94);
                }
                *((_QWORD *)v207 + v99) = v94;
              }
              ++v102;
            }
            while (v102 != 8);
            v62 = *v380;
            *v381 = (unint64_t)v207;
            v61 = 64;
            a3 = v385;
            goto LABEL_86;
          }
        }
LABEL_70:
        if ((_DWORD)a3 && (*(_DWORD *)v14 & 0x408000) != 0x8000)
        {
          v106 = v26;
          v107 = v27;
          WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(v27 + 720 * v26 + 696), (uint64_t *)&v387, v14, v26, v27, a7, a8, (uint64_t)v388);
          goto LABEL_96;
        }
        goto LABEL_71;
      }
      v63 = 0;
LABEL_68:
      v36[v63] = (unint64_t)v387;
    }
    else
    {
LABEL_86:
      if (3 * v61 <= 4 * v62)
      {
        v373 = v27;
        v374 = v26;
        v372 = *v36;
        v87 = (void *)WTF::fastMalloc((WTF *)(8 * (2 * v61)));
        memset(v87, 255, 8 * (2 * v61));
        *v382 = 2 * v61;
        if (v61)
        {
          v313 = 0;
          v314 = 2 * v61 - 1;
          do
          {
            v315 = *(_QWORD *)(v372 + 8 * v313);
            if (v315 != -1)
            {
              v316 = (~(v315 << 32) + v315) ^ ((unint64_t)(~(v315 << 32) + v315) >> 22);
              v317 = 9 * ((v316 + ~(v316 << 13)) ^ ((v316 + ~(v316 << 13)) >> 8));
              v318 = (v317 ^ (v317 >> 15)) + ~((v317 ^ (v317 >> 15)) << 27);
              v319 = v314 & ((v318 >> 31) ^ v318);
              v320 = *((_QWORD *)v87 + v319);
              if (v320 != -1 && v320 != v315)
              {
                v322 = 1;
                do
                {
                  v319 = ((_DWORD)v319 + v322) & v314;
                  v323 = *((_QWORD *)v87 + v319);
                  ++v322;
                }
                while (v323 != -1 && v323 != v315);
              }
              *((_QWORD *)v87 + v319) = v315;
            }
            ++v313;
          }
          while (v313 != v61);
        }
        WTF::fastFree(v372, v306, v307, v308, v309, v310, v311, v312);
        v36 = v381;
        v35 = v382;
        v61 = *v382;
        *v381 = (unint64_t)v87;
        v16 = (WTF::AtomStringImpl *)(v375 + 144);
        v14 = v386;
        a3 = v385;
        v27 = v373;
        v26 = v374;
      }
      else
      {
        v87 = (void *)*v36;
      }
      v88 = (~(v60 << 32) + v60) ^ ((unint64_t)(~(v60 << 32) + v60) >> 22);
      v89 = 9 * ((v88 + ~(v88 << 13)) ^ ((v88 + ~(v88 << 13)) >> 8));
      v90 = (v89 ^ (v89 >> 15)) + ~((v89 ^ (v89 >> 15)) << 27);
      v91 = (v61 - 1) & ((v90 >> 31) ^ v90);
      v92 = *((_QWORD *)v87 + v91);
      if (v92 != -1 && v92 != v60)
      {
        v204 = 1;
        do
        {
          v91 = ((_DWORD)v91 + v204) & (v61 - 1);
          v92 = *((_QWORD *)v87 + v91);
          ++v204;
        }
        while (v92 != -1 && v92 != v60);
      }
      if (v92 == v60)
        goto LABEL_70;
      *((_QWORD *)v87 + v91) = v60;
      v62 = *v32;
    }
    *v32 = v62 + 1;
    goto LABEL_70;
  }
LABEL_123:
  v117 = v384;
  if ((a3 & 1) != 0 && (*(_BYTE *)(v14 + 2) & 0x40) == 0)
  {
    v200 = *(_QWORD *)(v12 + 720 * v11 + 696);
    if (v200)
    {
      if (*(_DWORD *)(v200 - 12))
      {
        v201 = *(unsigned int *)(v200 - 4);
        if ((_DWORD)v201)
        {
          v202 = 8 * v201;
          v203 = *(uint64_t **)(v12 + 720 * v11 + 696);
          while ((unint64_t)(*v203 + 1) <= 1)
          {
            ++v203;
            v202 -= 8;
            if (!v202)
              goto LABEL_124;
          }
        }
        else
        {
          v203 = *(uint64_t **)(v12 + 720 * v11 + 696);
        }
        v325 = (uint64_t *)(v200 + 8 * v201);
        if (v203 != v325)
        {
          v326 = (uint64_t *)(v27 + 720 * v26 + 696);
LABEL_414:
          v327 = v26;
          v328 = v27;
          WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add(v326, v203, v14, v26, v27, a7, a8, (uint64_t)v388);
          v27 = v328;
          v26 = v327;
          v14 = v386;
          v16 = (WTF::AtomStringImpl *)(v375 + 144);
          while (++v203 != v325)
          {
            if ((unint64_t)(*v203 + 1) > 1)
            {
              if (v203 != v325)
                goto LABEL_414;
              break;
            }
          }
        }
      }
    }
  }
LABEL_124:
  v118 = *(_QWORD *)(v12 + 720 * v11 + 688);
  if (v118 && *(_DWORD *)(v118 - 12))
  {
    v271 = v26;
    v272 = v27;
    JSC::Scope::bubbleSloppyModeFunctionHoistingCandidates((JSC::Scope *)v375, v376);
    v27 = v272;
    v26 = v271;
    v14 = v386;
    v16 = (WTF::AtomStringImpl *)(v375 + 144);
  }
  v119 = *(_DWORD *)v14;
  if ((*(_DWORD *)v14 & 0x800) != 0)
  {
    if ((v119 & 2) != 0)
      *(_BYTE *)(v12 + 720 * v11 + 32) |= 1u;
    v168 = *(_DWORD *)(v375 + 180);
    if (v168)
    {
      v169 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v375 + 41952) + 880);
      v170 = *(unsigned int **)(v375 + 168);
      v171 = &v170[18 * v168];
      v172 = (~(v169 << 32) + v169) ^ ((unint64_t)(~(v169 << 32) + v169) >> 22);
      v173 = (v172 + ~(v172 << 13)) ^ ((v172 + ~(v172 << 13)) >> 8);
      do
      {
        v174 = v170[1];
        if (v174 == 8)
        {
          v175 = *v170;
          if ((_DWORD)v175)
          {
            if (*((_QWORD *)v170 + 1) == v169)
              goto LABEL_285;
            v176 = 0;
            while (v175 - 1 != v176)
            {
              v177 = *(_QWORD *)&v170[2 * v176++ + 4];
              if (v177 == v169)
              {
                if (v176 >= v175)
                  break;
                goto LABEL_285;
              }
            }
          }
        }
        else
        {
          v245 = ((9 * v173) ^ ((9 * v173) >> 15)) + ~(((9 * v173) ^ ((9 * v173) >> 15)) << 27);
          v246 = (v245 >> 31) ^ v245;
          v247 = *((_QWORD *)v170 + 1);
          v248 = v174 - 1;
          v249 = v248 & v246;
          v250 = *(_QWORD *)(v247 + 8 * v249);
          if (v250 != -1 && v250 != v169)
          {
            v282 = 1;
            do
            {
              v249 = (v249 + v282) & v248;
              v250 = *(_QWORD *)(v247 + 8 * v249);
              ++v282;
            }
            while (v250 != -1 && v250 != v169);
          }
          if (v250 == v169)
          {
LABEL_285:
            *(_BYTE *)(v12 + 720 * v11 + 32) |= 2u;
            break;
          }
        }
        v170 += 18;
      }
      while (v170 != v171);
    }
  }
  if ((v119 & 0x401000) != 0x400000)
  {
    *(_BYTE *)(v27 + 720 * v26 + 32) |= *(_BYTE *)(v12 + 720 * v11 + 32);
    v119 = *(_DWORD *)v14;
  }
  if ((v119 & 0x400008) == 8)
    *(_DWORD *)(v27 + 720 * v26 + 10) |= 8u;
  v120 = *(_QWORD *)v16;
  *(_QWORD *)v16 = 0;
  v121 = v12 + 720 * v11;
  v122 = *(_BYTE *)(v121 + 152);
  v123 = *(_QWORD *)(v121 + 160);
  *(_QWORD *)(v121 + 160) = 0;
  v124 = *(_QWORD *)(v121 + 704);
  *(_QWORD *)(v121 + 704) = 0;
  *(_QWORD *)v383 = v120;
  *(_BYTE *)(v383 + 8) = v122;
  *(_QWORD *)(v383 + 16) = v123;
  *(_QWORD *)(v383 + 24) = v124;
  v125 = *(_QWORD *)(v121 + 712);
  *(_QWORD *)(v121 + 712) = 0;
  *(_QWORD *)(v383 + 32) = v125;
  v126 = *((unsigned int *)v384 + 3);
  if (!(_DWORD)v126)
  {
    __break(0xC471u);
    JUMPOUT(0x197E57BC8);
  }
  v127 = v126 - 1;
  v128 = *v384;
  v129 = *v384 + 720 * (v126 - 1);
  v130 = *(_QWORD *)(v129 + 704);
  if (v130)
  {
    *(_QWORD *)(v129 + 704) = 0;
    *(_DWORD *)(v128 + 720 * v127 + 712) = 0;
    WTF::fastFree(v130, v16, a3, v14, v26, v27, a7, a8);
  }
  v131 = *(_QWORD *)(v128 + 720 * v127 + 696);
  if (v131)
    WTF::fastFree(v131 - 16, v16, a3, v14, v26, v27, a7, a8);
  v132 = *(_QWORD *)(v128 + 720 * v127 + 688);
  if (v132)
    WTF::fastFree(v132 - 16, v16, a3, v14, v26, v27, a7, a8);
  if (*(_DWORD *)(v128 + 720 * v127 + 620) != 8)
    WTF::fastFree(*(_QWORD *)(v128 + 720 * v127 + 624), v16, a3, v14, v26, v27, a7, a8);
  v133 = v128 + 720 * v127;
  v136 = *(_QWORD *)(v133 + 168);
  v135 = v133 + 168;
  v134 = v136;
  v137 = *(unsigned int *)(v135 + 12);
  if ((_DWORD)v137)
  {
    v138 = 72 * v137;
    v139 = (unint64_t *)(v134 + 8);
    do
    {
      if (*((_DWORD *)v139 - 1) != 8)
        WTF::fastFree(*v139, v16, a3, v14, v26, v27, a7, a8);
      v139 += 9;
      v138 -= 72;
    }
    while (v138);
    v134 = *(_QWORD *)v135;
  }
  v140 = v128 + 720 * v127 + 184;
  if (v140 == v134 && v134 != 0)
  {
    v142 = v128 + 720 * v127;
    v143 = (WTF::StringImpl ***)(v142 + 144);
    v144 = *(_QWORD *)(v142 + 160);
    *(_QWORD *)(v142 + 160) = 0;
    if (!v144)
      goto LABEL_156;
    v145 = *(WTF::StringImpl ***)v144;
    if (*(_QWORD *)v144)
    {
      v223 = *((unsigned int *)v145 - 1);
      if ((_DWORD)v223)
      {
        v224 = *(WTF::StringImpl ***)v144;
        do
        {
          v225 = *v224;
          if (*v224 != (WTF::StringImpl *)-1)
          {
            if (v225)
            {
              *v224 = 0;
              if (*(_DWORD *)v225 == 2)
              {
                WTF::StringImpl::~StringImpl(v225, v16, a3, v14, v26, v27, a7, a8);
                WTF::fastFree(v226, v227, v228, v229, v230, v231, v232, v233);
              }
              else
              {
                *(_DWORD *)v225 -= 2;
              }
            }
            else
            {
              *v224 = 0;
            }
          }
          v224 += 2;
          --v223;
        }
        while (v223);
      }
      WTF::fastFree((unint64_t)(v145 - 2), v16, a3, v14, v26, v27, a7, a8);
      v117 = v384;
    }
    v146 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v146)
    {
      pas_try_deallocate_slow_no_cache(v144, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_156;
    }
    if (!(v144 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v144 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v144)) & 1) != 0)
    {
LABEL_154:
      v147 = *(unsigned int *)(v146 + 8000);
      if (v147 >= 0x3E7)
      {
        pas_thread_local_cache_append_deallocation_slow(v146, v144, (os_unfair_lock_s *)5, v14, v26, v27, a7, a8);
      }
      else
      {
        *(_QWORD *)(v146 + 8 * v147) = v144 | 0x5000000000000;
        *(_DWORD *)(v146 + 8000) = v147 + 1;
      }
LABEL_156:
      v148 = *v143;
      if (*v143)
      {
        v178 = *((unsigned int *)v148 - 1);
        if ((_DWORD)v178)
        {
          v179 = v148;
          do
          {
            v180 = *v179;
            if (*v179 != (WTF::StringImpl *)-1)
            {
              if (v180)
              {
                *v179 = 0;
                if (*(_DWORD *)v180 == 2)
                {
                  WTF::StringImpl::~StringImpl(v180, v16, a3, v14, v26, v27, a7, a8);
                  WTF::fastFree(v181, v182, v183, v184, v185, v186, v187, v188);
                }
                else
                {
                  *(_DWORD *)v180 -= 2;
                }
              }
              else
              {
                *v179 = 0;
              }
            }
            v179 += 2;
            --v178;
          }
          while (v178);
        }
        WTF::fastFree((unint64_t)(v148 - 2), v16, a3, v14, v26, v27, a7, a8);
      }
      v149 = v128 + 720 * v127;
      v150 = (WTF::StringImpl ***)(v149 + 120);
      v151 = *(_QWORD *)(v149 + 136);
      *(_QWORD *)(v149 + 136) = 0;
      if (!v151)
      {
LABEL_164:
        v155 = *v150;
        if (*v150)
        {
          v189 = *((unsigned int *)v155 - 1);
          if ((_DWORD)v189)
          {
            v190 = v155;
            do
            {
              v191 = *v190;
              if (*v190 != (WTF::StringImpl *)-1)
              {
                if (v191)
                {
                  *v190 = 0;
                  if (*(_DWORD *)v191 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v191, v16, a3, v14, v26, v27, a7, a8);
                    WTF::fastFree(v192, v193, v194, v195, v196, v197, v198, v199);
                  }
                  else
                  {
                    *(_DWORD *)v191 -= 2;
                  }
                }
                else
                {
                  *v190 = 0;
                }
              }
              v190 += 2;
              --v189;
            }
            while (v189);
          }
          WTF::fastFree((unint64_t)(v155 - 2), v16, a3, v14, v26, v27, a7, a8);
        }
        if (*(_DWORD *)(v128 + 720 * v127 + 52) != 8)
          WTF::fastFree(*(_QWORD *)(v128 + 720 * v127 + 56), v16, a3, v14, v26, v27, a7, a8);
        v156 = v128 + 720 * v127;
        v157 = *(_QWORD *)(v156 + 40);
        *(_QWORD *)(v156 + 40) = 0;
        if (v157)
        {
          v158 = *(_QWORD *)v157;
          if (v157 + 16 != *(_QWORD *)v157 && v158 != 0)
          {
            *(_QWORD *)v157 = 0;
            *(_DWORD *)(v157 + 8) = 0;
            WTF::fastFree(v158, v16, a3, v14, v26, v27, a7, a8);
          }
          v160 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
          if (v160)
          {
            if (!(v157 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v157 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v157)) & 1) != 0)
            {
              goto LABEL_176;
            }
            if (v157 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v157 >> 24)
            {
              v14 = 0;
              goto LABEL_339;
            }
            v14 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v157 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v157) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v14 != 1)
            {
LABEL_339:
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v160, v157, 1, v14, v26, v27, a7, a8);
              goto LABEL_178;
            }
LABEL_176:
            v161 = *(unsigned int *)(v160 + 8000);
            if (v161 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v160, v157, (os_unfair_lock_s *)5, v14, v26, v27, a7, a8);
            }
            else
            {
              *(_QWORD *)(v160 + 8 * v161) = v157 | 0x5000000000000;
              *(_DWORD *)(v160 + 8000) = v161 + 1;
            }
            goto LABEL_178;
          }
          goto LABEL_363;
        }
        goto LABEL_178;
      }
      v152 = *(WTF::StringImpl ***)v151;
      if (*(_QWORD *)v151)
      {
        v234 = *((unsigned int *)v152 - 1);
        if ((_DWORD)v234)
        {
          v235 = *(WTF::StringImpl ***)v151;
          do
          {
            v236 = *v235;
            if (*v235 != (WTF::StringImpl *)-1)
            {
              if (v236)
              {
                *v235 = 0;
                if (*(_DWORD *)v236 == 2)
                {
                  WTF::StringImpl::~StringImpl(v236, v16, a3, v14, v26, v27, a7, a8);
                  WTF::fastFree(v237, v238, v239, v240, v241, v242, v243, v244);
                }
                else
                {
                  *(_DWORD *)v236 -= 2;
                }
              }
              else
              {
                *v235 = 0;
              }
            }
            v235 += 2;
            --v234;
          }
          while (v234);
        }
        WTF::fastFree((unint64_t)(v152 - 2), v16, a3, v14, v26, v27, a7, a8);
        v117 = v384;
      }
      v153 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v153)
      {
        pas_try_deallocate_slow_no_cache(v151, (uint64_t)&bmalloc_heap_config, 1);
        goto LABEL_164;
      }
      if (!(v151 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v151 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v151)) & 1) != 0)
      {
LABEL_162:
        v154 = *(unsigned int *)(v153 + 8000);
        if (v154 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v153, v151, (os_unfair_lock_s *)5, v14, v26, v27, a7, a8);
        }
        else
        {
          *(_QWORD *)(v153 + 8 * v154) = v151 | 0x5000000000000;
          *(_DWORD *)(v153 + 8000) = v154 + 1;
        }
        goto LABEL_164;
      }
      if (v151 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v151 >> 24)
      {
        v14 = 0;
      }
      else
      {
        v14 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v151 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v151) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v14 == 1)
          goto LABEL_162;
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v153, v151, 1, v14, v26, v27, a7, a8);
      goto LABEL_164;
    }
    if (v144 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v144 >> 24)
    {
      v14 = 0;
    }
    else
    {
      v14 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v144 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v144) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)v14 == 1)
        goto LABEL_154;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v146, v144, 1, v14, v26, v27, a7, a8);
    goto LABEL_156;
  }
  if (v140 != v134 && v134 != 0)
  {
    *(_QWORD *)v135 = 0;
    *(_DWORD *)(v128 + 720 * v127 + 176) = 0;
    WTF::fastFree(v134, v16, a3, v14, v26, v27, a7, a8);
  }
  v254 = v128 + 720 * v127;
  v255 = (WTF::StringImpl ***)(v254 + 144);
  v256 = *(_QWORD *)(v254 + 160);
  *(_QWORD *)(v254 + 160) = 0;
  if (v256)
  {
    v257 = *(WTF::StringImpl ***)v256;
    if (*(_QWORD *)v256)
    {
      v345 = *((unsigned int *)v257 - 1);
      if ((_DWORD)v345)
      {
        v346 = *(WTF::StringImpl ***)v256;
        do
        {
          v347 = *v346;
          if (*v346 != (WTF::StringImpl *)-1)
          {
            *v346 = 0;
            if (v347)
            {
              if (*(_DWORD *)v347 == 2)
              {
                WTF::StringImpl::~StringImpl(v347, v16, a3, v14, v26, v27, a7, a8);
                WTF::fastFree(v348, v349, v350, v351, v352, v353, v354, v355);
              }
              else
              {
                *(_DWORD *)v347 -= 2;
              }
            }
          }
          v346 += 2;
          --v345;
        }
        while (v345);
      }
      WTF::fastFree((unint64_t)(v257 - 2), v16, a3, v14, v26, v27, a7, a8);
      v117 = v384;
    }
    v258 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v258)
    {
      pas_try_deallocate_slow_no_cache(v256, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_302;
    }
    if (!(v256 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v256 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v256)) & 1) != 0)
    {
      goto LABEL_300;
    }
    if (v256 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v256 >> 24)
    {
      v14 = 0;
      v117 = v384;
    }
    else
    {
      v14 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v256 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v256) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      v117 = v384;
      if ((_DWORD)v14 == 1)
      {
LABEL_300:
        v259 = *(unsigned int *)(v258 + 8000);
        if (v259 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v258, v256, (os_unfair_lock_s *)5, v14, v26, v27, a7, a8);
        }
        else
        {
          *(_QWORD *)(v258 + 8 * v259) = v256 | 0x5000000000000;
          *(_DWORD *)(v258 + 8000) = v259 + 1;
        }
        goto LABEL_302;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v258, v256, 1, v14, v26, v27, a7, a8);
  }
LABEL_302:
  v260 = *v255;
  if (v260)
  {
    v284 = *((unsigned int *)v260 - 1);
    if ((_DWORD)v284)
    {
      v285 = v260;
      do
      {
        v286 = *v285;
        if (*v285 != (WTF::StringImpl *)-1)
        {
          *v285 = 0;
          if (v286)
          {
            if (*(_DWORD *)v286 == 2)
            {
              WTF::StringImpl::~StringImpl(v286, v16, a3, v14, v26, v27, a7, a8);
              WTF::fastFree(v287, v288, v289, v290, v291, v292, v293, v294);
            }
            else
            {
              *(_DWORD *)v286 -= 2;
            }
          }
        }
        v285 += 2;
        --v284;
      }
      while (v284);
    }
    WTF::fastFree((unint64_t)(v260 - 2), v16, a3, v14, v26, v27, a7, a8);
  }
  v261 = v128 + 720 * v127;
  v262 = (WTF::StringImpl ***)(v261 + 120);
  v263 = *(_QWORD *)(v261 + 136);
  *(_QWORD *)(v261 + 136) = 0;
  if (v263)
  {
    v264 = *(WTF::StringImpl ***)v263;
    if (*(_QWORD *)v263)
    {
      v356 = *((unsigned int *)v264 - 1);
      if ((_DWORD)v356)
      {
        v357 = *(WTF::StringImpl ***)v263;
        do
        {
          v358 = *v357;
          if (*v357 != (WTF::StringImpl *)-1)
          {
            *v357 = 0;
            if (v358)
            {
              if (*(_DWORD *)v358 == 2)
              {
                WTF::StringImpl::~StringImpl(v358, v16, a3, v14, v26, v27, a7, a8);
                WTF::fastFree(v359, v360, v361, v362, v363, v364, v365, v366);
              }
              else
              {
                *(_DWORD *)v358 -= 2;
              }
            }
          }
          v357 += 2;
          --v356;
        }
        while (v356);
      }
      WTF::fastFree((unint64_t)(v264 - 2), v16, a3, v14, v26, v27, a7, a8);
      v117 = v384;
    }
    v265 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v265)
    {
      pas_try_deallocate_slow_no_cache(v263, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_310;
    }
    if (!(v263 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v263 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v263)) & 1) != 0)
    {
      goto LABEL_308;
    }
    if (v263 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v263 >> 24)
    {
      v14 = 0;
      v117 = v384;
    }
    else
    {
      v14 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v263 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v263) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      v117 = v384;
      if ((_DWORD)v14 == 1)
      {
LABEL_308:
        v266 = *(unsigned int *)(v265 + 8000);
        if (v266 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v265, v263, (os_unfair_lock_s *)5, v14, v26, v27, a7, a8);
        }
        else
        {
          *(_QWORD *)(v265 + 8 * v266) = v263 | 0x5000000000000;
          *(_DWORD *)(v265 + 8000) = v266 + 1;
        }
        goto LABEL_310;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v265, v263, 1, v14, v26, v27, a7, a8);
  }
LABEL_310:
  v267 = *v262;
  if (v267)
  {
    v295 = *((unsigned int *)v267 - 1);
    if ((_DWORD)v295)
    {
      v296 = v267;
      do
      {
        v297 = *v296;
        if (*v296 != (WTF::StringImpl *)-1)
        {
          *v296 = 0;
          if (v297)
          {
            if (*(_DWORD *)v297 == 2)
            {
              WTF::StringImpl::~StringImpl(v297, v16, a3, v14, v26, v27, a7, a8);
              WTF::fastFree(v298, v299, v300, v301, v302, v303, v304, v305);
            }
            else
            {
              *(_DWORD *)v297 -= 2;
            }
          }
        }
        v296 += 2;
        --v295;
      }
      while (v295);
    }
    WTF::fastFree((unint64_t)(v267 - 2), v16, a3, v14, v26, v27, a7, a8);
  }
  if (*(_DWORD *)(v128 + 720 * v127 + 52) != 8)
    WTF::fastFree(*(_QWORD *)(v128 + 720 * v127 + 56), v16, a3, v14, v26, v27, a7, a8);
  v268 = v128 + 720 * v127;
  v157 = *(_QWORD *)(v268 + 40);
  *(_QWORD *)(v268 + 40) = 0;
  if (v157)
  {
    v269 = *(_QWORD *)v157;
    if (v157 + 16 != *(_QWORD *)v157 && v269 != 0)
    {
      *(_QWORD *)v157 = 0;
      *(_DWORD *)(v157 + 8) = 0;
      WTF::fastFree(v269, v16, a3, v14, v26, v27, a7, a8);
    }
    v160 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v160)
    {
      if (!(v157 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v157 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v157)) & 1) != 0)
      {
        goto LABEL_176;
      }
      if (v157 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v157 >> 24)
      {
        v14 = 0;
        v117 = v384;
        goto LABEL_339;
      }
      v14 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v157 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v157) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      v117 = v384;
      if ((_DWORD)v14 != 1)
        goto LABEL_339;
      goto LABEL_176;
    }
LABEL_363:
    pas_try_deallocate_slow_no_cache(v157, (uint64_t)&bmalloc_heap_config, 1);
  }
LABEL_178:
  *((_DWORD *)v117 + 3) = v127;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::declareVariable(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  int v27;
  int v29;
  uint64_t *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  __int16 v46;
  __int16 v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  int v50;
  WTF::StringImpl **v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  unsigned int v72;
  WTF::StringImpl *v73;
  int v75;
  __int16 v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  BOOL hasLexicallyDeclaredVariable;
  BOOL v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  if (!(_DWORD)a3)
    return JSC::Parser<JSC::Lexer<unsigned char>>::declareHoistedVariable((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = a4;
  v11 = a3;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148)
    && *(_DWORD *)(a1 + 7456) == 1
    && ((JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredParameter((uint64_t *)a1, *(WTF::StringImpl **)a2, a3, a4, a5, a6, a7, a8) & 1) != 0|| (JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredVariable((uint64_t *)a1, *(WTF::StringImpl **)a2, v12, v13, v14, v15, v16, v17) & 1) != 0))
  {
    return 2;
  }
  v18 = *(_DWORD *)(a1 + 12);
  if (!v18)
  {
LABEL_103:
    __break(0xC471u);
    JUMPOUT(0x197E5816CLL);
  }
  v19 = v18 - 1;
  v20 = *(_QWORD *)a1;
  while (1)
  {
    v21 = *(_DWORD *)(v20 + 720 * v19 + 10);
    if ((v21 & 0x80) != 0)
      break;
    if (v18 <= --v19)
      goto LABEL_103;
  }
  if (v18 <= v19)
  {
    __break(0xC471u);
    JUMPOUT(0x197E581ACLL);
  }
  if ((v21 & 0x80000) != 0)
  {
    if (v18 > v19 - 1)
    {
      v78 = v20 + 720 * (v19 - 1);
      v79 = *(WTF::StringImpl **)a2;
      if (*(_QWORD *)a2)
      {
        *(_DWORD *)v79 += 2;
        hasLexicallyDeclaredVariable = JSC::Scope::hasLexicallyDeclaredVariable(v78, v79, a3, a4, a5, a6, a7, a8);
        v81 = hasLexicallyDeclaredVariable;
        if (*(_DWORD *)v79 == 2)
        {
          WTF::StringImpl::~StringImpl(v79, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
          if (!v81)
            goto LABEL_91;
        }
        else
        {
          *(_DWORD *)v79 -= 2;
          if (!hasLexicallyDeclaredVariable)
          {
LABEL_91:
            v18 = *(_DWORD *)(a1 + 12);
            goto LABEL_11;
          }
        }
      }
      else if (!JSC::Scope::hasLexicallyDeclaredVariable(v78, 0, a3, a4, a5, a6, a7, a8))
      {
        goto LABEL_91;
      }
      return 2;
    }
    goto LABEL_103;
  }
LABEL_11:
  if (v18 <= v19)
  {
    __break(0xC471u);
    JUMPOUT(0x197E581B4);
  }
  v22 = v19;
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 720 * v19) + 41952);
  v25 = *(_QWORD *)(v24 + 1248) == *(_QWORD *)a2 || *(_QWORD *)(v24 + 880) == *(_QWORD *)a2;
  v26 = v23 + 720 * v22;
  v27 = *(_DWORD *)(v26 + 10);
  if ((v27 & 0x800000) == 0 || v25)
    v29 = 0;
  else
    v29 = 0x800000;
  *(_DWORD *)(v26 + 10) = v29 | v27 & 0xFF7FFFFF;
  v30 = (uint64_t *)(v26 + 144);
  v31 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v31 += 2;
  v32 = *v30;
  if (*v30)
    goto LABEL_24;
  v33 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)(v33 + 16) = 0;
  v33 += 16;
  *(_WORD *)(v33 + 8) = 0;
  *(_QWORD *)(v33 + 16) = 0;
  *(_WORD *)(v33 + 24) = 0;
  *(_QWORD *)(v33 + 32) = 0;
  *(_WORD *)(v33 + 40) = 0;
  *(_QWORD *)(v33 + 48) = 0;
  *(_WORD *)(v33 + 56) = 0;
  *(_QWORD *)(v33 + 64) = 0;
  *(_WORD *)(v33 + 72) = 0;
  *(_QWORD *)(v33 + 80) = 0;
  *(_WORD *)(v33 + 88) = 0;
  *(_QWORD *)(v33 + 96) = 0;
  *(_WORD *)(v33 + 104) = 0;
  *(_QWORD *)(v33 + 112) = 0;
  *(_WORD *)(v33 + 120) = 0;
  *v30 = v33;
  *(_DWORD *)(v33 - 4) = 8;
  *(_DWORD *)(*v30 - 8) = 7;
  *(_DWORD *)(*v30 - 16) = 0;
  *(_DWORD *)(*v30 - 12) = 0;
  v32 = *v30;
  if (*v30)
LABEL_24:
    v34 = *(_DWORD *)(v32 - 8);
  else
    v34 = 0;
  v35 = *((_DWORD *)v31 + 4);
  if ((v35 & 0x20) != 0)
    v35 = *((_DWORD *)v31 + 8);
  v36 = v34 & (v35 >> 8);
  v37 = v32 + 16 * v36;
  v38 = *(WTF::StringImpl **)v37;
  if (!*(_QWORD *)v37)
    goto LABEL_28;
  v57 = 0;
  v58 = 1;
  do
  {
    if (v38 == v31)
    {
      v45 = 1;
      goto LABEL_36;
    }
    if (v38 == (WTF::StringImpl *)-1)
      v57 = v37;
    v36 = (v36 + v58) & v34;
    v37 = v32 + 16 * v36;
    v38 = *(WTF::StringImpl **)v37;
    ++v58;
  }
  while (*(_QWORD *)v37);
  if (v57)
  {
    *(_QWORD *)v57 = 0;
    *(_WORD *)(v57 + 8) = 0;
    --*(_DWORD *)(*v30 - 16);
    v37 = v57;
  }
  if (v31)
LABEL_28:
    *(_DWORD *)v31 += 2;
  *(_QWORD *)v37 = v31;
  *(_WORD *)(v37 + 8) = 0;
  v39 = *v30;
  if (*v30)
    v40 = *(_DWORD *)(v39 - 12) + 1;
  else
    v40 = 1;
  *(_DWORD *)(v39 - 12) = v40;
  v41 = *v30;
  if (*v30)
    v42 = *(_DWORD *)(v41 - 12);
  else
    v42 = 0;
  v43 = (*(_DWORD *)(v41 - 16) + v42);
  v44 = *(unsigned int *)(v41 - 4);
  if (v44 > 0x400)
  {
    if (v44 > 2 * v43)
      goto LABEL_35;
LABEL_71:
    v37 = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::expand(v30, (WTF::StringImpl **)v37);
    goto LABEL_35;
  }
  if (3 * v44 <= 4 * v43)
    goto LABEL_71;
LABEL_35:
  v45 = 0;
LABEL_36:
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  if (v11 == 2)
    v46 = 2;
  else
    v46 = 8;
  v47 = *(_WORD *)(v37 + 8) | v46;
  *(_WORD *)(v37 + 8) = v47;
  if (v10)
  {
    if (v10 != 1)
      goto LABEL_44;
    v77 = 96;
  }
  else
  {
    v77 = 32;
  }
  *(_WORD *)(v37 + 8) = v77 | v47;
LABEL_44:
  if ((v45 & 1) == 0)
  {
    v48 = *(WTF::StringImpl **)a2;
    v49 = v23 + 720 * v22;
    v50 = *(_DWORD *)(v49 + 620);
    v51 = (WTF::StringImpl **)(v49 + 624);
    if (v50 == 8)
    {
      v52 = *(unsigned int *)(v23 + 720 * v22 + 616);
      if (!(_DWORD)v52)
      {
LABEL_47:
        v53 = 0;
        goto LABEL_48;
      }
      if (*v51 != v48)
      {
        v55 = 0;
        while (v52 - 1 != v55)
        {
          v56 = *(WTF::StringImpl **)(v23 + 720 * v22 + 632 + 8 * v55++);
          if (v56 == v48)
          {
            if (v55 >= v52)
              goto LABEL_47;
            goto LABEL_57;
          }
        }
        goto LABEL_47;
      }
    }
    else
    {
      v67 = *v51;
      v68 = ((unint64_t)v48 + ~((_QWORD)v48 << 32)) ^ (((unint64_t)v48 + ~((_QWORD)v48 << 32)) >> 22);
      v69 = 9 * ((v68 + ~(v68 << 13)) ^ ((v68 + ~(v68 << 13)) >> 8));
      v70 = (v69 ^ (v69 >> 15)) + ~((v69 ^ (v69 >> 15)) << 27);
      v71 = v50 - 1;
      v72 = v71 & ((v70 >> 31) ^ v70);
      v73 = (WTF::StringImpl *)*((_QWORD *)v67 + v72);
      if (v73 != (WTF::StringImpl *)-1 && v73 != v48)
      {
        v75 = 1;
        do
        {
          v72 = (v72 + v75) & v71;
          v73 = (WTF::StringImpl *)*((_QWORD *)v67 + v72);
          ++v75;
        }
        while (v73 != (WTF::StringImpl *)-1 && v73 != v48);
      }
      if (v73 != v48)
        goto LABEL_47;
    }
  }
LABEL_57:
  v53 = 2;
LABEL_48:
  if (v25)
    return v53 | 1;
  else
    return v53;
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::declareFunction(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  WTF::StringImpl *v17;
  BOOL hasLexicallyDeclaredVariable;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  WTF::StringImpl **v39;

  v10 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 1864) != 1)
  {
    if (!v10)
      goto LABEL_36;
    v12 = *a2;
    v11 = v10 - 1;
LABEL_4:
    v14 = *(_DWORD *)(v12 + 720 * v11 + 10);
    if ((v14 & 0x80) != 0)
    {
LABEL_5:
      if (v10 <= v11)
      {
        __break(0xC471u);
        JUMPOUT(0x197E58380);
      }
      if ((v14 & 0x80000) == 0)
        goto LABEL_7;
      v38 = v11;
      v39 = a3;
      if (v10 <= (int)v11 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197E583A0);
      }
      v16 = v12 + 720 * (v11 - 1);
      v17 = *a3;
      if (*a3)
      {
        *(_DWORD *)v17 += 2;
        hasLexicallyDeclaredVariable = JSC::Scope::hasLexicallyDeclaredVariable(v16, v17, (uint64_t)a3, a4, a5, a6, a7, a8);
        v26 = hasLexicallyDeclaredVariable;
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::~StringImpl(v17, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
          if (v26)
            goto LABEL_19;
        }
        else
        {
          *(_DWORD *)v17 -= 2;
          if (hasLexicallyDeclaredVariable)
          {
LABEL_19:
            result = 2;
            v11 = v38;
            goto LABEL_9;
          }
        }
      }
      else if (JSC::Scope::hasLexicallyDeclaredVariable(v16, 0, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        goto LABEL_19;
      }
      v10 = *((_DWORD *)a2 + 3);
      v11 = v38;
      a3 = v39;
LABEL_7:
      if (v10 <= v11)
      {
        __break(0xC471u);
        JUMPOUT(0x197E58388);
      }
      result = JSC::Scope::declareFunctionAsLet(*a2 + 720 * v11, a3, *((_BYTE *)a2 + 7474) == 0);
      goto LABEL_9;
    }
    v37 = v11 - 1;
    while (v10 > v37)
    {
      v11 = v37;
      v14 = *(_DWORD *)(v12 + 720 * v37-- + 10);
      if ((v14 & 0x80) != 0)
        goto LABEL_5;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x197E58398);
  }
  if (!v10)
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x197E58378);
  }
  v11 = v10 - 1;
  v12 = *a2;
  v13 = *(_DWORD *)(*a2 + 720 * v11 + 10);
  if ((v13 & 0x20000) != 0)
    goto LABEL_4;
  if ((v13 & 0x40) == 0)
  {
    v27 = v10 - 2;
    while (v10 > v27)
    {
      v11 = v27;
      v28 = v12 + 720 * v27--;
      if ((*(_BYTE *)(v28 + 10) & 0x40) != 0)
        goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_11:
  if (v10 <= v11)
  {
    __break(0xC471u);
    JUMPOUT(0x197E58390);
  }
  result = JSC::Scope::declareFunctionAsVar(v12 + 720 * v11, a3);
LABEL_9:
  *(_BYTE *)a1 = result;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = v11;
  return result;
}

void JSC::Parser<JSC::Lexer<char16_t>>::parseInner(uint64_t a1@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int **a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  _BYTE *v11;
  int v12;
  int v13;
  int v17;
  uint64_t v19;
  int *v20;
  int v21;
  int v22;
  _BOOL4 v23;
  uint64_t FormalParameterList;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  WTF::StringImpl *v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  _BYTE *v76;
  int v77;
  __int16 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF *v99;
  WTF::StringImpl *v100;
  WTF *v101;
  WTF *v103;
  WTF *v104;
  WTF *v105;
  uint64_t v106;
  WTF::StringImpl **v107;
  WTF::StringImpl *v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  int *v131;
  uint64_t v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  int *v136;
  int v137;
  char v138;
  int v139;
  int v140;
  WTF::StringImpl *v141;
  char hasDeclaredVariable;
  char v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  _QWORD **v169;
  uint64_t v170;
  WTF::StringImpl ****v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  WTF::AtomStringImpl *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  WTF::StringImpl **v187;
  WTF::StringImpl **v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  WTF::AtomStringImpl *v203;
  __int128 v204;
  WTF *v205[5];
  uint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  JSC::ParserArena *v212;
  JSC::ASTBuilder *v213;
  uint64_t v214;
  uint64_t v215;
  WTF *v216;
  uint64_t v217;
  _BYTE v218[480];
  WTF *v219;
  uint64_t v220;
  _BYTE v221[400];
  WTF *v222;
  uint64_t v223;
  _BYTE v224[80];
  WTF *v225;
  uint64_t v226;
  _DWORD v227[42];
  _QWORD *v228;
  WTF::StringImpl *v229;
  __int16 v230[8];

  v228 = (_QWORD *)a6;
  v10 = *(_QWORD *)(a1 + 7224);
  v212 = *(JSC::ParserArena **)(a1 + 7216);
  v213 = (JSC::ASTBuilder *)(a1 + 7232);
  v11 = (_BYTE *)(a1 + 7474);
  v214 = v10;
  v215 = 0;
  v216 = (WTF *)v218;
  v217 = 10;
  v219 = (WTF *)v221;
  v220 = 10;
  v222 = (WTF *)v224;
  v223 = 10;
  v225 = (WTF *)v227;
  v226 = 10;
  v227[40] = 0;
  v12 = *(unsigned __int8 *)(a1 + 7474);
  v13 = *(_DWORD *)(a1 + 12);
  v210 = a1;
  v211 = (v13 - 1);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197E58FB4);
  }
  *(_DWORD *)(*(_QWORD *)a1 + 720 * (v13 - 1) + 10) |= 0x8080u;
  if (*(_DWORD *)(v210 + 12) <= v211)
  {
    __break(0xC471u);
    JUMPOUT(0x197E58FBCLL);
  }
  v17 = a3;
  v19 = *(_QWORD *)v210 + 720 * v211;
  v22 = *(_DWORD *)(v19 + 10);
  v20 = (int *)(v19 + 10);
  v21 = v22;
  if ((v22 & 0x2000000) != 0 && v228 && *v228 && *(_DWORD *)(*v228 - 12))
  {
    *v20 = v21 | 0x8000000;
    if (*(_DWORD *)(v210 + 12) <= v211)
    {
      __break(0xC471u);
      goto LABEL_206;
    }
    v169 = (_QWORD **)v228;
    if (v228)
    {
      v170 = *(_QWORD *)v210 + 720 * v211;
      v172 = *(_QWORD *)(v170 + 160);
      v171 = (WTF::StringImpl ****)(v170 + 160);
      if (!v172)
      {
        v173 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        *v173 = 0;
        *(_QWORD *)&v204 = v173;
        std::unique_ptr<JSC::VariableEnvironment::RareData>::operator=[abi:sn180100](v171, (WTF::AtomStringImpl *)&v204, v174, v175, v176, v177, v178, v179);
        std::unique_ptr<JSC::VariableEnvironment::RareData>::~unique_ptr[abi:sn180100]((WTF::StringImpl ****)&v204, v180, v181, v182, v183, v184, v185, v186);
      }
      v200 = (uint64_t)*v169;
      v187 = (WTF::StringImpl **)WTF::HashMap<JSC::FunctionMetadataNode *,JSC::Scope::NeedsDuplicateDeclarationCheck,WTF::DefaultHash<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::FunctionMetadataNode *>,WTF::HashTraits<JSC::Scope::NeedsDuplicateDeclarationCheck>,WTF::HashTableTraits>::begin(*v169);
      v188 = v187;
      v203 = a2;
      v201 = v200 ? v200 + 16 * *(unsigned int *)(v200 - 4) : 0;
      if ((WTF::StringImpl **)v201 != v187)
      {
        do
        {
          v189 = *v188;
          if (*v188)
            *(_DWORD *)v189 += 2;
          v229 = v189;
          v230[0] = *((_WORD *)v188 + 4);
          WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::add<JSC::PrivateNameEntry&>((uint64_t *)*v171, &v229, v230, (uint64_t)&v204);
          v190 = v229;
          v229 = 0;
          if (v190)
          {
            if (*(_DWORD *)v190 == 2)
            {
              WTF::StringImpl::~StringImpl(v190, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
              WTF::fastFree(v191, v192, v193, v194, v195, v196, v197, v198);
            }
            else
            {
              *(_DWORD *)v190 -= 2;
            }
          }
          while (1)
          {
            v188 += 2;
            if (v188 == (WTF::StringImpl **)v203)
              break;
            if ((unint64_t)*v188 + 1 > 1)
              goto LABEL_176;
          }
          v188 = (WTF::StringImpl **)v203;
LABEL_176:
          ;
        }
        while (v188 != (WTF::StringImpl **)v201);
      }
    }
  }
  v202 = *(_DWORD *)(a1 + 7316);
  *(_DWORD *)(a1 + 7316) = 1;
  v23 = v12 == 8 && *(_DWORD *)(a1 + 7368) != 0;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148))
  {
    v204 = 0u;
    memset(v205, 0, 28);
    if (((1 << v12) & 0x8182) != 0)
    {
      FormalParameterList = JSC::Parser<JSC::Lexer<unsigned char>>::createGeneratorParameters<JSC::ASTBuilder>(a1, (uint64_t)&v212, v205, a4, (uint64_t)a5, a6, a7, a8);
    }
    else if (v12 == 19)
    {
      FormalParameterList = JSC::ASTBuilder::createFormalParameterList(v213);
    }
    else
    {
      FormalParameterList = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionParameters<JSC::ASTBuilder,JSC::ParserFunctionInfo<JSC::ASTBuilder>>(a1, &v212, (uint64_t)&v204, a4, (uint64_t)a5, a6, a7, a8);
    }
    v199 = FormalParameterList;
    if (((1 << v12) & 0x840) != 0 && !*(_QWORD *)(a1 + 7360))
    {
      if (*(_DWORD *)(a1 + 7368) != 38)
      {
        std::experimental::fundamentals_v3::expected<JSC::Parser<JSC::Lexer<unsigned char>>::ParseInnerResult,WTF::String>::expected<WTF::ASCIILiteral>(a9, (uint64_t)"Parser error", 13);
        goto LABEL_76;
      }
      v119 = *(_DWORD *)(a1 + 7400);
      v120 = *(_DWORD *)(a1 + 7412);
      v121 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v119;
      *(_DWORD *)(a1 + 7448) = v120;
      *(_DWORD *)(a1 + 7452) = v121;
      v122 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v122 + 4) = v119;
      v123 = *(_DWORD *)(a1 + 12);
      if (!v123)
      {
        __break(0xC471u);
        JUMPOUT(0x197E5900CLL);
      }
      v124 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v123 - 1) + 9) & 1;
      *(_BYTE *)(v122 + 56) = 0;
      v125 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v122, a1 + 7368, 0, v124, (uint64_t)a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v125;
      v23 = v125 != 0;
    }
  }
  else
  {
    v199 = 0;
  }
  if (*(_DWORD *)(a1 + 7476) == 1 && *(_QWORD *)a2)
  {
    if (*(_DWORD *)(v210 + 12) <= v211)
    {
      __break(0xC471u);
      JUMPOUT(0x197E5901CLL);
    }
    JSC::Scope::declareCallee(*(_QWORD *)v210 + 720 * v211, (WTF::StringImpl **)a2);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148))
    --*(_DWORD *)(a1 + 7456);
  if (*(_QWORD *)(a1 + 7360))
  {
    v27 = 0;
  }
  else
  {
    v25 = 1 << v12;
    if (((1 << v12) & 0xE00) != 0)
    {
      v26 = JSC::Parser<JSC::Lexer<char16_t>>::parseAsyncFunctionSourceElements<JSC::ASTBuilder>(a1, (uint64_t)&v212, v23, a4, (uint64_t)a5, a6, a7, a8);
    }
    else if (v23)
    {
      v26 = JSC::Parser<JSC::Lexer<char16_t>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::ASTBuilder>(a1, (uint64_t)&v212);
    }
    else if ((v25 & 0x6000) != 0)
    {
      v26 = JSC::Parser<JSC::Lexer<char16_t>>::parseModuleSourceElements<JSC::ASTBuilder>(a1, (uint64_t)&v212, a3, a4, (uint64_t)a5, a6, a7, a8);
    }
    else if ((v25 & 0x40004) != 0)
    {
      v26 = JSC::Parser<JSC::Lexer<char16_t>>::parseGeneratorFunctionSourceElements<JSC::ASTBuilder>(a1, (uint64_t)&v212, (WTF::AtomStringImpl **)a2, a4, (uint64_t)a5, a6, a7, a8);
    }
    else if ((v25 & 0x30000) != 0)
    {
      v26 = JSC::Parser<JSC::Lexer<char16_t>>::parseAsyncGeneratorFunctionSourceElements<JSC::ASTBuilder>(a1, (uint64_t)&v212, a3, a4, (uint64_t)a5, a6, a7, a8);
    }
    else if (v17 == 1)
    {
      v26 = JSC::Parser<JSC::Lexer<char16_t>>::parseSingleFunction<JSC::ASTBuilder>(a1, (uint64_t)&v212, a4, a4, (uint64_t)a5, a6, a7, a8);
    }
    else if (v12 == 19)
    {
      v26 = JSC::Parser<JSC::Lexer<char16_t>>::parseClassFieldInitializerSourceElements<JSC::ASTBuilder>(a1, (uint64_t)&v212, a5, a4, (uint64_t)a5, a6, a7, a8);
    }
    else
    {
      v26 = JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::ASTBuilder>(a1, (uint64_t)&v212, 0, a4, (uint64_t)a5, a6, a7, a8);
    }
    v27 = v26;
  }
  if (*(_DWORD *)(a1 + 7368) != 20)
    goto LABEL_99;
  v28 = *(_DWORD *)(a1 + 7400);
  v29 = *(_DWORD *)(a1 + 7412);
  v30 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v28;
  *(_DWORD *)(a1 + 7448) = v29;
  *(_DWORD *)(a1 + 7452) = v30;
  v31 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v31 + 4) = v28;
  v32 = *(_DWORD *)(a1 + 12);
  if (!v32)
  {
    __break(0xC471u);
    JUMPOUT(0x197E58FC4);
  }
  v33 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v32 - 1) + 9) & 1;
  *(_BYTE *)(v31 + 56) = 0;
  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v31, a1 + 7368, 0, v33, (uint64_t)a5, a6, a7, a8);
  if (!v27)
  {
LABEL_99:
    v118 = *(_QWORD *)(a1 + 7360);
    if (v118)
    {
      *(_DWORD *)v118 += 2;
    }
    else
    {
      v118 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v118 = 0xC00000002;
      *(_QWORD *)(v118 + 8) = "Parser error";
      *(_DWORD *)(v118 + 16) = 4;
    }
    *(_QWORD *)a9 = v118;
    *(_DWORD *)(a9 + 88) = 1;
    goto LABEL_76;
  }
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 148) && v11[64])
  {
    v229 = 0;
    if (*(_DWORD *)(v210 + 12) <= v211)
    {
      __break(0xC471u);
      JUMPOUT(0x197E5902CLL);
    }
    v126 = *(_QWORD *)v210 + 720 * v211;
    *(_QWORD *)&v204 = &v228;
    *((_QWORD *)&v204 + 1) = &v210;
    v205[0] = (WTF *)&v229;
    JSC::Scope::forEachUsedVariable<JSC::Parser<JSC::Lexer<char16_t>>::parseInner(JSC::Identifier const&,JSC::ParsingContext,std::optional<int>,WTF::FixedVector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition> const*,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits> const*)::{lambda(WTF::UniquedStringImpl*)#1}>(*(_QWORD *)(v126 + 168), *(_DWORD *)(v126 + 180), (uint64_t)&v204);
    v127 = v229;
    if (v229)
    {
      v128 = *(_DWORD *)v229;
      *(_DWORD *)v229 += 2;
      *(_QWORD *)a9 = v127;
      *(_DWORD *)(a9 + 88) = 1;
      v229 = 0;
      if (v128)
      {
        *(_DWORD *)v127 = v128;
        goto LABEL_76;
      }
      WTF::StringImpl::~StringImpl(v127, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
LABEL_98:
      WTF::fastFree(v117, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_76;
    }
  }
  if (*(_DWORD *)(v210 + 12) <= v211)
  {
    __break(0xC471u);
    JUMPOUT(0x197E58FCCLL);
  }
  JSC::Scope::finalizeSloppyModeFunctionHoisting((JSC::Scope *)(*(_QWORD *)v210 + 720 * v211), a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  v229 = 0;
  if (*(_DWORD *)(v210 + 12) <= v211)
  {
    __break(0xC471u);
    JUMPOUT(0x197E58FD4);
  }
  JSC::Scope::getCapturedVars(*(_QWORD *)v210 + 720 * v211, (uint64_t *)&v229, v34, v35, v36, v37, v38, v39);
  v47 = v211;
  if (*(_DWORD *)(v210 + 12) <= v211)
  {
    __break(0xC471u);
    JUMPOUT(0x197E58FDCLL);
  }
  v48 = v229;
  if (!v229)
  {
    v51 = 0;
    v49 = 0;
LABEL_87:
    v50 = (WTF::StringImpl *)((char *)v229 + 8 * v49);
    goto LABEL_39;
  }
  v49 = *((unsigned int *)v229 - 1);
  v50 = (WTF::StringImpl *)((char *)v229 + 8 * v49);
  if (!*((_DWORD *)v229 - 3))
  {
    v51 = (WTF::StringImpl *)((char *)v229 + 8 * v49);
    goto LABEL_87;
  }
  v51 = v229;
  if ((_DWORD)v49)
  {
    v52 = 8 * v49;
    v51 = v229;
    while ((unint64_t)(*(_QWORD *)v51 + 1) <= 1)
    {
      v51 = (WTF::StringImpl *)((char *)v51 + 8);
      v52 -= 8;
      if (!v52)
      {
        v51 = v50;
        break;
      }
    }
  }
LABEL_39:
  if (v229)
    v48 = (WTF::StringImpl *)((char *)v229 + 8 * *((unsigned int *)v229 - 1));
  v53 = *(_QWORD *)v210;
  if (v48 != v51)
  {
    v54 = (uint64_t *)(v53 + 720 * v211 + 120);
    while (1)
    {
      v55 = *v54;
      if (!*v54)
        break;
      v56 = *(_QWORD *)v51;
      v57 = *(_DWORD *)(*(_QWORD *)v51 + 16);
      if ((v57 & 0x20) != 0)
        v57 = *(_DWORD *)(v56 + 32);
      v58 = *(_DWORD *)(v55 - 8);
      v59 = v58 & (v57 >> 8);
      v40 = *(_QWORD *)(v55 + 16 * v59);
      if (v40 != v56)
      {
        v60 = 1;
        while (v40)
        {
          v59 = ((_DWORD)v59 + v60) & v58;
          v40 = *(_QWORD *)(v55 + 16 * v59);
          ++v60;
          if (v40 == v56)
            goto LABEL_52;
        }
        v59 = *(unsigned int *)(v55 - 4);
      }
LABEL_52:
      if (v59 == *(_DWORD *)(v55 - 4))
        break;
      *(_WORD *)(v55 + 16 * v59 + 8) |= 1u;
      v61 = (WTF::StringImpl *)((char *)v51 + 8);
      v51 = v50;
      if (v61 != v50)
      {
        v51 = v61;
        while ((unint64_t)(*(_QWORD *)v51 + 1) <= 1)
        {
          v51 = (WTF::StringImpl *)((char *)v51 + 8);
          if (v51 == v50)
          {
            v51 = v50;
            break;
          }
        }
      }
      if (v51 == v48)
        goto LABEL_59;
    }
    __break(0xC471u);
LABEL_206:
    JUMPOUT(0x197E589C4);
  }
LABEL_59:
  JSC::Scope::finalizeLexicalEnvironment((JSC::Scope *)(v53 + 720 * v47), v40, v41, v42, v43, v44, v45, v46);
  if (((1 << v12) & 0x70E04) != 0)
  {
    v70 = (uint64_t *)v210;
    v71 = v211;
    v72 = *(_DWORD *)(v210 + 12);
    if (v72 <= v211)
    {
      __break(0xC471u);
      JUMPOUT(0x197E59024);
    }
    v168 = JSC::Scope::usedVariablesContains(*(unsigned int **)(*(_QWORD *)v210 + 720 * v211 + 168), *(_DWORD *)(*(_QWORD *)v210 + 720 * v211 + 180), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 880));
    v69 = v215;
    if (v168)
    {
      v69 = v215 | 2;
      LODWORD(v215) = v215 | 2;
    }
  }
  else
  {
    v69 = v215;
    v70 = (uint64_t *)v210;
    v71 = v211;
    v72 = *(_DWORD *)(v210 + 12);
  }
  if (v72 <= v71)
  {
    __break(0xC471u);
    JUMPOUT(0x197E58FECLL);
  }
  v73 = *v70;
  v74 = *v70 + 720 * v71;
  v76 = (_BYTE *)(v74 + 10);
  v75 = *(_DWORD *)(v74 + 10);
  if ((v75 & 1) != 0)
    v69 = (unsigned __int16)v69 | 0x20;
  if (v11[63])
    v69 |= 0x800u;
  v77 = v69 | (v75 >> 22) & 0x10;
  if ((v75 & 4) != 0)
    v78 = v77 | 0x1000;
  else
    v78 = v77;
  if (!v11[65])
    goto LABEL_70;
  v129 = v71;
  v130 = *(_QWORD *)(*(_QWORD *)v74 + 41952);
  v131 = *(int **)(v130 + 880);
  if (v131)
  {
    *v131 += 4;
    v132 = *(_QWORD *)(v73 + 720 * v129 + 144);
    if (!v132)
      goto LABEL_128;
  }
  else
  {
    v132 = *(_QWORD *)(v73 + 720 * v129 + 144);
    if (!v132)
      goto LABEL_133;
  }
  v133 = *(_DWORD *)(v132 - 8);
  v134 = v131[4];
  if ((v134 & 0x20) != 0)
    v134 = v131[8];
  v135 = v133 & (v134 >> 8);
  v136 = *(int **)(v132 + 16 * v135);
  if (v136 == v131)
  {
LABEL_125:
    v138 = 1;
    goto LABEL_129;
  }
  v137 = 1;
  while (v136)
  {
    v135 = (v135 + v137) & v133;
    v136 = *(int **)(v132 + 16 * v135);
    ++v137;
    if (v136 == v131)
    {
      if (!v131)
        goto LABEL_146;
      goto LABEL_125;
    }
  }
  if (!v131)
    goto LABEL_133;
LABEL_128:
  v138 = 0;
LABEL_129:
  v139 = *v131 - 2;
  if (*v131 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v131, v62, v63, v64, v65, v66, v67, v68);
    WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
    v139 = *v131;
  }
  else
  {
    *v131 = v139;
  }
  v140 = v139 - 2;
  if (v140)
  {
    *v131 = v140;
    if ((v138 & 1) != 0)
      goto LABEL_146;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v131, v62, v63, v64, v65, v66, v67, v68);
    WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
    if ((v138 & 1) != 0)
      goto LABEL_146;
  }
LABEL_133:
  v141 = *(WTF::StringImpl **)(v130 + 880);
  if (!v141)
  {
    if ((JSC::Scope::hasDeclaredVariable(v74, 0, v63, v64, v65, v66, v67, v68) & 1) != 0)
      goto LABEL_146;
    goto LABEL_136;
  }
  *(_DWORD *)v141 += 2;
  hasDeclaredVariable = JSC::Scope::hasDeclaredVariable(v74, v141, v63, v64, v65, v66, v67, v68);
  v143 = hasDeclaredVariable;
  if (*(_DWORD *)v141 == 2)
  {
    WTF::StringImpl::~StringImpl(v141, v62, v63, v64, v65, v66, v67, v68);
    WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
    if ((v143 & 1) != 0)
      goto LABEL_146;
LABEL_136:
    if ((*v76 & 1) == 0)
      goto LABEL_70;
    goto LABEL_146;
  }
  *(_DWORD *)v141 -= 2;
  if ((hasDeclaredVariable & 1) == 0)
    goto LABEL_136;
LABEL_146:
  v78 |= 2u;
LABEL_70:
  *(_QWORD *)&v204 = v199;
  *((_QWORD *)&v204 + 1) = v27;
  if (*(_DWORD *)(v210 + 12) <= v211)
  {
    __break(0xC471u);
    JUMPOUT(0x197E58FF4);
  }
  v79 = *(_QWORD *)v210 + 720 * v211;
  v80 = *(_QWORD *)(v79 + 704);
  *(_QWORD *)(v79 + 704) = 0;
  v81 = *(_QWORD *)(v79 + 712);
  *(_QWORD *)(v79 + 712) = 0;
  v82 = v211;
  if (*(_DWORD *)(v210 + 12) <= v211)
  {
    __break(0xC471u);
    JUMPOUT(0x197E58FFCLL);
  }
  v83 = *(_QWORD *)v210 + 720 * v211;
  v84 = *(_QWORD *)(v83 + 120);
  *(_QWORD *)(v83 + 120) = 0;
  v85 = *(_BYTE *)(v83 + 128);
  LOBYTE(v205[3]) = v85;
  v86 = *(_QWORD *)(v83 + 136);
  *(_QWORD *)(v83 + 136) = 0;
  if (*(_DWORD *)(v210 + 12) <= v82)
  {
    __break(0xC471u);
    JUMPOUT(0x197E59004);
  }
  v87 = *(_QWORD *)v210 + 720 * v82;
  v88 = *(_QWORD *)(v87 + 144);
  *(_QWORD *)(v87 + 144) = 0;
  v207 = *(_BYTE *)(v87 + 152);
  v89 = v207;
  v90 = *(_QWORD *)(v87 + 160);
  *(_QWORD *)(v87 + 160) = 0;
  LOWORD(v209) = v78;
  HIDWORD(v209) = HIDWORD(v215);
  *(_OWORD *)a9 = v204;
  v205[0] = 0;
  v205[1] = 0;
  *(_QWORD *)(a9 + 16) = v80;
  *(_QWORD *)(a9 + 24) = v81;
  *(_QWORD *)(a9 + 32) = v84;
  *(_BYTE *)(a9 + 40) = v85;
  v205[2] = 0;
  v205[4] = 0;
  v206 = 0;
  *(_QWORD *)(a9 + 48) = v86;
  *(_QWORD *)(a9 + 56) = v88;
  *(_BYTE *)(a9 + 64) = v89;
  v208 = 0;
  v91 = v209;
  *(_QWORD *)(a9 + 72) = v90;
  *(_QWORD *)(a9 + 80) = v91;
  *(_DWORD *)(a9 + 88) = 0;
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v206, v62, v63, v64, v65, v66, v67, v68);
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)&v205[2], v92, v93, v94, v95, v96, v97, v98);
  v99 = v205[0];
  if (v205[0])
  {
    v205[0] = 0;
    LODWORD(v205[1]) = 0;
    WTF::fastFree((unint64_t)v99, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
  v100 = v229;
  if (v229)
  {
    v106 = *((unsigned int *)v229 - 1);
    if ((_DWORD)v106)
    {
      v107 = (WTF::StringImpl **)v229;
      do
      {
        v108 = *v107;
        if (*v107 != (WTF::StringImpl *)-1)
        {
          *v107 = 0;
          if (v108)
          {
            if (*(_DWORD *)v108 == 2)
            {
              WTF::StringImpl::~StringImpl(v108, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
              WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
            }
            else
            {
              *(_DWORD *)v108 -= 2;
            }
          }
        }
        ++v107;
        --v106;
      }
      while (v106);
    }
    v117 = (unint64_t)v100 - 16;
    goto LABEL_98;
  }
LABEL_76:
  *(_DWORD *)(a1 + 7316) = v202;
  v101 = v225;
  if (v227 != (_DWORD *)v225 && v225 != 0)
  {
    v225 = 0;
    LODWORD(v226) = 0;
    WTF::fastFree((unint64_t)v101, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
  v103 = v222;
  if (v224 != (_BYTE *)v222 && v222)
  {
    v222 = 0;
    LODWORD(v223) = 0;
    WTF::fastFree((unint64_t)v103, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
  v104 = v219;
  if (v221 != (_BYTE *)v219 && v219)
  {
    v219 = 0;
    LODWORD(v220) = 0;
    WTF::fastFree((unint64_t)v104, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
  v105 = v216;
  if (v218 != (_BYTE *)v216)
  {
    if (v216)
    {
      v216 = 0;
      LODWORD(v217) = 0;
      WTF::fastFree((unint64_t)v105, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionParameters<JSC::ASTBuilder,JSC::ParserFunctionInfo<JSC::ASTBuilder>>(uint64_t a1, JSC::ParserArena **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v9;
  int v10;
  JSC::ParserArena *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  int v44;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  __int128 *v58;
  int v59;
  uint64_t v60;
  WTF::AtomStringImpl **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::AtomStringImpl **v68;
  _QWORD *v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  unint64_t v80;
  const char *v81;
  const char *v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  JSC::ParserArena *v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  unint64_t v110;
  const char *v111;
  WTF::AtomStringImpl ***v112;
  const char *v113;
  const char *v115;
  JSC::FunctionParameters *v116;
  JSC::ExpressionNode *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  JSC::FunctionParameters *v125;
  JSC::DestructuringPatternNode *v126;
  JSC::ExpressionNode *v127;
  JSC::DestructuringPatternNode *v128;
  _BOOL4 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  BOOL isAllowedIdentifierLet;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  BOOL isAllowedIdentifierYield;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  char v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  JSC::ExpressionNode *v164;
  JSC::DestructuringPatternNode *v165;
  JSC::DestructuringPatternNode *v166;
  int v167;
  uint64_t v168;
  char v169;
  int v170;
  int v171;
  int v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  JSC::ParserArena *v181;
  int v182;
  int v183;
  int v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  JSC::ParserArena *v191;
  int v192;
  int v193;
  int v194;
  const char *v195;
  int v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  const char *v203;
  const char *v204;
  _BYTE *v205;
  int v206;
  int v207;
  JSC::ParserArena *v208;
  int *v210;
  const char *v211;
  unsigned __int8 v212;
  __int128 v213;

  v8 = a1 + 7344;
  v9 = *(unsigned __int8 *)(a1 + 7474);
  v10 = 1 << v9;
  if (((1 << v9) & 0x7000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197E59BE4);
  }
  v13 = a2[1];
  v14 = *(_QWORD *)v13;
  if (*((_QWORD *)v13 + 1) - *(_QWORD *)v13 <= 0x4FuLL)
  {
    JSC::ParserArena::allocateFreeablePool(a2[1]);
    v14 = *(_QWORD *)v13;
  }
  *(_QWORD *)v13 = v14 + 80;
  *(_QWORD *)&v213 = v14;
  v15 = (_QWORD *)((char *)v13 + 40);
  v16 = *((unsigned int *)v13 + 13);
  if ((_DWORD)v16 == *((_DWORD *)v13 + 12))
  {
    v69 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)&v213);
    v16 = *((unsigned int *)v13 + 13);
    *(_QWORD *)(*((_QWORD *)v13 + 5) + 8 * v16) = *v69;
  }
  else
  {
    *(_QWORD *)(*v15 + 8 * v16) = v14;
  }
  *((_DWORD *)v13 + 13) = v16 + 1;
  *(_QWORD *)v14 = &off_1E357AA40;
  *(_QWORD *)(v14 + 8) = v14 + 24;
  *(_QWORD *)(v14 + 16) = 3;
  *(_BYTE *)(v14 + 72) = 1;
  if (v9 == 20)
    return v14;
  v17 = *(_DWORD *)(a1 + 7316);
  *(_DWORD *)(a1 + 7316) = 0;
  v210 = (int *)(a1 + 7368);
  LODWORD(v18) = *(_DWORD *)(a1 + 7368);
  if ((v10 & 0x840) == 0)
  {
    if ((_DWORD)v18 == 2)
    {
      v19 = *(_DWORD *)(a1 + 7400);
      v20 = *(_DWORD *)(a1 + 7412);
      v21 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v19;
      *(_DWORD *)(a1 + 7448) = v20;
      *(_DWORD *)(a1 + 7452) = v21;
      v22 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v22 + 4) = v19;
      v23 = *(_DWORD *)(a1 + 12);
      if (!v23)
      {
        __break(0xC471u);
        JUMPOUT(0x197E5A76CLL);
      }
      v24 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v23 - 1) + 9) & 1;
      *(_BYTE *)(v22 + 56) = 0;
      v25 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v22, (uint64_t)v210, 0, v24, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v25;
      if (v9 == 3)
      {
        if (v25 == 3)
        {
          v100 = *(_DWORD *)(a1 + 7400);
          v101 = *(_DWORD *)(a1 + 7412);
          v102 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v100;
          *(_DWORD *)(a1 + 7448) = v101;
          *(_DWORD *)(a1 + 7452) = v102;
          v103 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v103 + 4) = v100;
          v104 = *(_DWORD *)(a1 + 12);
          if (!v104)
          {
            __break(0xC471u);
            JUMPOUT(0x197E5A8C0);
          }
          v105 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v104 - 1) + 9) & 1;
          *(_BYTE *)(v103 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v103, (uint64_t)v210, 0, v105, v26, v27, v28, v29);
          *(_DWORD *)(a3 + 16) = 0;
          goto LABEL_87;
        }
        if (v25 == 20 || (v25 & 0x100000) != 0)
          goto LABEL_159;
        if (*(_QWORD *)(a1 + 7360))
        {
LABEL_160:
          v14 = 0;
          goto LABEL_87;
        }
        v115 = "getter functions must have no parameters";
LABEL_174:
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, v115);
        goto LABEL_160;
      }
      if (v9 != 4)
      {
        if (v25 != 3)
        {
          v206 = 1 << v9;
          v205 = (_BYTE *)v8;
          v207 = v17;
          v30 = 0;
          v31 = 0;
          v212 = 0;
          v211 = 0;
          while (1)
          {
            if (v25 == 37)
            {
              v83 = *(_DWORD *)(a1 + 7400);
              v84 = *(_DWORD *)(a1 + 7412);
              v85 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v83;
              *(_DWORD *)(a1 + 7448) = v84;
              *(_DWORD *)(a1 + 7452) = v85;
              v86 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v86 + 4) = v83;
              v87 = *(_DWORD *)(a1 + 12);
              if (!v87)
              {
                __break(0xC471u);
                JUMPOUT(0x197E5A75CLL);
              }
              v88 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v87 - 1) + 9) & 1;
              *(_BYTE *)(v86 + 56) = 0;
              v89 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v86, (uint64_t)v210, 0, v88, v26, v27, v28, v29);
              *(_DWORD *)(a1 + 7368) = v89;
              if (v89 == 546
                || v89 == 1048592
                && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
              {
                if (!*v205)
                  goto LABEL_413;
                v200 = *(_DWORD *)(a1 + 12);
                if (!v200)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E5A754);
                }
                if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v200 - 1) + 10) & 0x102000) != 0
                  || *(_DWORD *)(a1 + 7480) == 1)
                {
LABEL_413:
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a parameter name in an async function");
                  goto LABEL_217;
                }
              }
              v90 = JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 4, 1, (char ***)&v211, (char *)&v212, 0, 0);
              if (*(_QWORD *)(a1 + 7360))
                goto LABEL_217;
              v91 = v90;
              v92 = a2[1];
              v39 = *(_QWORD *)v92;
              if (*((_QWORD *)v92 + 1) - *(_QWORD *)v92 <= 0x17uLL)
              {
                v181 = a2[1];
                JSC::ParserArena::allocateFreeablePool(v181);
                v92 = v181;
                v39 = *(_QWORD *)v181;
                v43 = *(_QWORD *)(a1 + 7360);
              }
              else
              {
                v43 = 0;
              }
              *(_QWORD *)v92 = v39 + 24;
              *(_QWORD *)v39 = &off_1E358B820;
              *(_QWORD *)(v39 + 8) = v91;
              *(_DWORD *)(v39 + 16) = v31;
              if (*v210 == 6)
              {
                if (!v43)
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Rest parameter should be the last parameter in a function declaration");
                goto LABEL_217;
              }
              v41 = 0;
              v42 = 1;
            }
            else
            {
              if (v25 == 3)
              {
                v17 = v207;
                goto LABEL_85;
              }
              v32 = JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 4, 1, (char ***)&v211, (char *)&v212, 0, 0);
              if (!v32)
              {
                if (*v210 == 20 || (*v210 & 0x100000) != 0)
                {
                  JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
                }
                else if (!*(_QWORD *)(a1 + 7360))
                {
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
                }
                goto LABEL_217;
              }
              v39 = v32;
              JSC::Parser<JSC::Lexer<char16_t>>::parseDefaultValueForDestructuringPattern<JSC::ASTBuilder>(a1, a2, v33, v34, v35, v36, v37, v38);
              v41 = v40;
              v42 = 0;
              v30 |= v40 != 0;
              v43 = *(_QWORD *)(a1 + 7360);
            }
            if (v43)
              goto LABEL_217;
            if (v211)
            {
              if ((v30 & 1) != 0)
              {
                *(_QWORD *)&v213 = *(_QWORD *)v211;
                v195 = "' not allowed in function with default parameter values";
                goto LABEL_290;
              }
              if (v212)
              {
                *(_QWORD *)&v213 = *(_QWORD *)v211;
                v195 = "' not allowed in function with destructuring parameters";
LABEL_290:
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[56]>(a1, (uint64_t *)&v213, v195);
                goto LABEL_217;
              }
              if (v42)
              {
                *(_QWORD *)&v213 = *(_QWORD *)v211;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[48]>(a1, (uint64_t *)&v213);
                goto LABEL_217;
              }
              if ((v206 & 0x160438) != 0)
              {
                *(_QWORD *)&v213 = *(_QWORD *)v211;
                JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[26]>(a1, (uint64_t *)&v213);
LABEL_217:
                if (*v210 == 20 || (*v210 & 0x100000) != 0)
                {
                  JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
                  v14 = 0;
                  v17 = v207;
                  goto LABEL_87;
                }
                v17 = v207;
                if (!*(_QWORD *)(a1 + 7360))
                {
                  *(_QWORD *)&v213 = JSC::stringForFunctionMode();
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],char const*>(a1, (const char **)&v213);
                }
                goto LABEL_160;
              }
              v44 = 0;
            }
            else
            {
              v44 = v212;
            }
            if (v41)
              v45 = 1;
            else
              v45 = v42;
            if ((v45 & 1) == 0 && !v44)
              goto LABEL_26;
            v59 = *(_DWORD *)(a1 + 12);
            if (!v59)
            {
              __break(0xC471u);
              JUMPOUT(0x197E5A764);
            }
            v60 = *(_QWORD *)a1 + 720 * (v59 - 1);
            *(_DWORD *)(v60 + 10) = *(_DWORD *)(v60 + 10) & 0xFB7FFFFF | 0x4000000;
            if (v41)
            {
              v47 = 0;
              v46 = 0;
            }
            else
            {
LABEL_26:
              v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
              v47 = 1;
            }
            *(_BYTE *)(v14 + 72) &= v46;
            *(_QWORD *)&v213 = v39;
            *((_QWORD *)&v213 + 1) = v41;
            v48 = *(unsigned int *)(v14 + 20);
            if ((_DWORD)v48 == *(_DWORD *)(v14 + 16))
            {
              v58 = (__int128 *)WTF::Vector<std::pair<JSC::DestructuringPatternNode *,JSC::ExpressionNode *>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14 + 8, v48 + 1, (unint64_t)&v213);
              v48 = *(unsigned int *)(v14 + 20);
              v49 = *(_QWORD *)(v14 + 8);
              v50 = *v58;
            }
            else
            {
              v49 = *(_QWORD *)(v14 + 8);
              v50 = v213;
            }
            *(_OWORD *)(v49 + 16 * v48) = v50;
            ++*(_DWORD *)(v14 + 20);
            if ((v47 & 1) == 0)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39))
              {
                v61 = *(WTF::AtomStringImpl ***)(v39 + 32);
                if ((*(unsigned int (**)(uint64_t *))(*v41 + 152))(v41))
                {
                  JSC::FunctionMetadataNode::setEcmaName(v41[4], *v61, v62, v63, v64, v65, v66, v67);
                }
                else if ((*(unsigned int (**)(uint64_t *))(*v41 + 176))(v41))
                {
                  v68 = (WTF::AtomStringImpl **)v41[20];
                  if (!*v68)
                    v68 = v61;
                  v41[21] = (uint64_t)v68;
                }
              }
              else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v39 + 48))(v39))
              {
                v112 = *(WTF::AtomStringImpl ****)(v39 + 32);
                if (((unsigned int (*)(WTF::AtomStringImpl ***))(*v112)[14])(v112))
                  JSC::ASTBuilder::tryInferNameInPatternWithIdentifier(v112[4], v41);
              }
            }
            if ((v42 & 1) != 0)
            {
              v51 = *v210;
LABEL_84:
              v17 = v207;
              if (v51 == 3)
                goto LABEL_85;
              if (v51 != 20 && (v51 & 0x100000) == 0)
              {
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ')' or a ',' after a parameter declaration");
                goto LABEL_160;
              }
LABEL_159:
              JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
              goto LABEL_160;
            }
            if ((v30 & 1) == 0)
              ++*(_DWORD *)(a3 + 16);
            v51 = *v210;
            if (*v210 != 6)
              goto LABEL_84;
            v52 = *(_DWORD *)(a1 + 7400);
            v53 = *(_DWORD *)(a1 + 7412);
            v54 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v52;
            *(_DWORD *)(a1 + 7448) = v53;
            *(_DWORD *)(a1 + 7452) = v54;
            v55 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v55 + 4) = v52;
            v56 = *(_DWORD *)(a1 + 12);
            if (!v56)
            {
              __break(0xC471u);
              JUMPOUT(0x197E5A52CLL);
            }
            v57 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v56 - 1) + 9) & 1;
            *(_BYTE *)(v55 + 56) = 0;
            v25 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v55, (uint64_t)v210, 0, v57, v26, v27, v28, v29);
            *(_DWORD *)(a1 + 7368) = v25;
            ++v31;
          }
        }
        *(_DWORD *)(a3 + 16) = 0;
LABEL_85:
        v93 = *(_DWORD *)(a1 + 7400);
        v94 = *(_DWORD *)(a1 + 7412);
        v95 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v93;
        *(_DWORD *)(a1 + 7448) = v94;
        *(_DWORD *)(a1 + 7452) = v95;
        v96 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v96 + 4) = v93;
        v97 = *(_DWORD *)(a1 + 12);
        if (!v97)
        {
          __break(0xC471u);
          JUMPOUT(0x197E5A794);
        }
        v98 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v97 - 1) + 9) & 1;
        *(_BYTE *)(v96 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v96, (uint64_t)v210, 0, v98, v26, v27, v28, v29);
        goto LABEL_87;
      }
      if (v25 != 3)
      {
        *(_QWORD *)&v213 = 0;
        v212 = 0;
        v118 = JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 4, 1, (char ***)&v213, (char *)&v212, 0, 0);
        if (v118)
        {
          v125 = (JSC::FunctionParameters *)v118;
          JSC::Parser<JSC::Lexer<char16_t>>::parseDefaultValueForDestructuringPattern<JSC::ASTBuilder>(a1, a2, v119, v120, v121, v122, v123, v124);
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_160;
          if (v126 || v212)
          {
            v10 = v17;
            if ((_QWORD)v213)
            {
              v211 = *(const char **)v213;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[57]>(a1, (uint64_t *)&v211);
              goto LABEL_267;
            }
            v179 = *(_DWORD *)(a1 + 12);
            if (!v179)
            {
              __break(0xC471u);
              JUMPOUT(0x197E5A940);
            }
            v180 = *(_QWORD *)a1 + 720 * (v179 - 1);
            *(_DWORD *)(v180 + 10) = *(_DWORD *)(v180 + 10) & 0xFB7FFFFF | 0x4000000;
            v128 = v126;
          }
          else
          {
            v10 = v17;
            v128 = 0;
          }
          v129 = v126 == 0;
          JSC::ASTBuilder::appendParameter((JSC::ASTBuilder *)v14, v125, v128, v127);
          *(_DWORD *)(a3 + 16) = v129;
          v134 = *v210;
          if (*v210 == 3)
          {
            v135 = *(_DWORD *)(a1 + 7400);
            v136 = *(_DWORD *)(a1 + 7412);
            v137 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v135;
            *(_DWORD *)(a1 + 7448) = v136;
            *(_DWORD *)(a1 + 7452) = v137;
            v138 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v138 + 4) = v135;
            v139 = *(_DWORD *)(a1 + 12);
            if (!v139)
            {
              __break(0xC471u);
              JUMPOUT(0x197E5A930);
            }
LABEL_204:
            v140 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v139 - 1) + 9) & 1;
            *(_BYTE *)(v138 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v138, (uint64_t)v210, 0, v140, v130, v131, v132, v133);
            goto LABEL_205;
          }
          if (v134 == 6)
          {
            v17 = v10;
            if (*(_QWORD *)(a1 + 7360))
              goto LABEL_160;
            goto LABEL_257;
          }
          if (v134 != 20 && (v134 & 0x100000) == 0)
          {
            v17 = v10;
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ')' after a parameter declaration");
            goto LABEL_160;
          }
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_267:
          v17 = v10;
          goto LABEL_160;
        }
        if (*v210 == 20 || (*v210 & 0x100000) != 0)
          goto LABEL_159;
      }
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_160;
LABEL_257:
      v115 = "setter functions must have one parameter";
      goto LABEL_174;
    }
    v70 = *(_DWORD *)(a1 + 12);
    if (!v70)
    {
      __break(0xC471u);
      goto LABEL_370;
    }
    v71 = v70 - 1;
    v72 = *(_QWORD *)a1;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v71 + 9) & 1) != 0 && (_DWORD)v18 == 532)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_160;
      v73 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
      v8 = *(unsigned int *)(a1 + 7408);
      v14 = *(unsigned int *)(a1 + 7412);
      v74 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73);
      if (v18 <= v8)
      {
        v75 = 0x100000000;
        v74 = "";
        goto LABEL_73;
      }
      LODWORD(v75) = v14 - v8;
      if ((int)v18 - (int)v8 <= (v14 - v8))
      {
        LODWORD(v75) = v18 - v8;
        if (!(_DWORD)v8)
        {
          v75 = v18;
          goto LABEL_73;
        }
      }
      v75 = v75;
      v76 = v18 - v8;
      if ((v18 & 0xFF00000000) != 0)
      {
        if (v76 >= v75)
        {
          v74 += v8;
          v75 = v75 | 0x100000000;
LABEL_73:
          *(_QWORD *)&v213 = v74;
          *((_QWORD *)&v213 + 1) = v75;
          v82 = "getter";
          switch(v9)
          {
            case 0:
              v82 = "function";
              break;
            case 1:
            case 2:
              v82 = "generator function";
              break;
            case 3:
              break;
            case 4:
              v82 = "setter";
              break;
            case 5:
              v82 = "method";
              break;
            case 6:
              v82 = "arrow function";
              break;
            case 7:
            case 9:
              v82 = "async function";
              break;
            case 8:
            case 11:
              v82 = "async arrow function";
              break;
            case 10:
              v82 = "async method";
              break;
            case 12:
            case 13:
            case 14:
            case 19:
              __break(0xC471u);
              JUMPOUT(0x197E5A3ACLL);
            case 15:
            case 16:
              v82 = "async generator function";
              break;
            case 17:
              v82 = "async generator method";
              break;
            case 18:
              v82 = "generator method";
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197E5A5F8);
          }
          v211 = v82;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6],char const(&)[16]>(a1, (uint64_t)&v213, &v211);
          goto LABEL_160;
        }
      }
      else if (v76 >= v75)
      {
        v74 += 2 * v8;
        goto LABEL_73;
      }
      goto LABEL_370;
    }
    if ((v18 - 531) <= 1)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_160;
      v77 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
      v8 = *(unsigned int *)(a1 + 7408);
      v14 = *(unsigned int *)(a1 + 7412);
      v78 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 24))(v77);
      if (v18 <= v8)
      {
        v79 = 0x100000000;
        v78 = "";
        goto LABEL_103;
      }
      LODWORD(v79) = v14 - v8;
      if ((int)v18 - (int)v8 <= (v14 - v8))
      {
        LODWORD(v79) = v18 - v8;
        if (!(_DWORD)v8)
        {
          v79 = v18;
          goto LABEL_103;
        }
      }
      v79 = v79;
      v80 = v18 - v8;
      if ((v18 & 0xFF00000000) != 0)
      {
        if (v80 >= v79)
        {
          v78 += v8;
          v79 = v79 | 0x100000000;
LABEL_103:
          *(_QWORD *)&v213 = v78;
          *((_QWORD *)&v213 + 1) = v79;
          v106 = "getter";
          switch(v9)
          {
            case 0:
              v106 = "function";
              break;
            case 1:
            case 2:
              v106 = "generator function";
              break;
            case 3:
              break;
            case 4:
              v106 = "setter";
              break;
            case 5:
              v106 = "method";
              break;
            case 6:
              v106 = "arrow function";
              break;
            case 7:
            case 9:
              v106 = "async function";
              break;
            case 8:
            case 11:
              v106 = "async arrow function";
              break;
            case 10:
              v106 = "async method";
              break;
            case 12:
            case 13:
            case 14:
            case 19:
              __break(0xC471u);
              JUMPOUT(0x197E5A450);
            case 15:
            case 16:
              v106 = "async generator function";
              break;
            case 17:
              v106 = "async generator method";
              break;
            case 18:
              v106 = "generator method";
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197E5A6A4);
          }
          v211 = v106;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&v213, &v211);
          goto LABEL_160;
        }
      }
      else if (v80 >= v79)
      {
        v78 += 2 * v8;
        goto LABEL_103;
      }
LABEL_370:
      __break(1u);
LABEL_371:
      if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
        goto LABEL_178;
LABEL_296:
      v196 = *(_DWORD *)(a1 + 12);
      if (!v196)
      {
        __break(0xC471u);
        JUMPOUT(0x197E5A958);
      }
      v197 = v196 - 1;
      v198 = *(_QWORD *)a1;
      if ((_DWORD)v18 == 532 && (*(_BYTE *)(*(_QWORD *)a1 + 720 * v197 + 9) & 1) != 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v213 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
          *((_QWORD *)&v213 + 1) = v199;
          v211 = JSC::stringForFunctionMode();
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6],char const(&)[16]>(a1, (uint64_t)&v213, &v211);
        }
        goto LABEL_334;
      }
      if ((v18 - 531) <= 1)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v213 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
          *((_QWORD *)&v213 + 1) = v201;
          v211 = JSC::stringForFunctionMode();
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[31],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&v213, &v211);
        }
        goto LABEL_334;
      }
      if ((v18 & 0x200) == 0)
        goto LABEL_329;
      if ((v18 - 544) >= 3)
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          *(_QWORD *)&v213 = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
          *((_QWORD *)&v213 + 1) = v202;
          v211 = JSC::stringForFunctionMode();
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&v213, &v211);
        }
        goto LABEL_334;
      }
      if ((_DWORD)v18 == 546)
      {
        if (!*(_BYTE *)v8 || (*(_DWORD *)(v198 + 720 * v197 + 10) & 0x102000) != 0 || *(_DWORD *)(a1 + 7480) == 1)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_334;
          *(_QWORD *)&v213 = JSC::stringForFunctionMode();
          v211 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
          v203 = "Cannot use 'await' as a ";
LABEL_363:
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[6],char const(&)[2],char const*>(a1, v203, (const char **)&v213, &v211);
          goto LABEL_334;
        }
      }
      else
      {
        if ((_DWORD)v18 == 544)
        {
          if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v197 + 9) & 1) != 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              *(_QWORD *)&v213 = JSC::stringForFunctionMode();
              v211 = "in strict mode";
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[6],char const(&)[2],char const*>(a1, (const char **)&v213, &v211);
            }
            goto LABEL_334;
          }
          goto LABEL_329;
        }
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v197 + 9) & 1) != 0 || (*(_BYTE *)(v198 + 720 * v197 + 11) & 2) != 0)
        {
          if (*(_QWORD *)(a1 + 7360))
            goto LABEL_334;
          *(_QWORD *)&v213 = JSC::stringForFunctionMode();
          v211 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(a1);
          v203 = "Cannot use 'yield' as a ";
          goto LABEL_363;
        }
      }
LABEL_329:
      if ((_DWORD)v18 == 20 || (v18 & 0x100000) != 0)
        goto LABEL_333;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected an arrow function input parameter");
      goto LABEL_334;
    }
    if ((v18 & 0x200) == 0)
      goto LABEL_67;
    if ((v18 - 544) >= 3)
    {
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_160;
      v107 = **(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64);
      v8 = *(unsigned int *)(a1 + 7408);
      v14 = *(unsigned int *)(a1 + 7412);
      v108 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v107 + 24))(v107);
      if (v18 <= v8)
      {
        v109 = 0x100000000;
        v108 = "";
      }
      else
      {
        LODWORD(v109) = v14 - v8;
        if ((int)v18 - (int)v8 > (v14 - v8) || (LODWORD(v109) = v18 - v8, (_DWORD)v8))
        {
          v109 = v109;
          v110 = v18 - v8;
          if ((v18 & 0xFF00000000) != 0)
          {
            if (v110 < v109)
              goto LABEL_370;
            v108 += v8;
            v109 = v109 | 0x100000000;
          }
          else
          {
            if (v110 < v109)
              goto LABEL_370;
            v108 += 2 * v8;
          }
        }
        else
        {
          v109 = v18;
        }
      }
      *(_QWORD *)&v213 = v108;
      *((_QWORD *)&v213 + 1) = v109;
      v111 = "getter";
      switch(v9)
      {
        case 0:
          v111 = "function";
          break;
        case 1:
        case 2:
          v111 = "generator function";
          break;
        case 3:
          break;
        case 4:
          v111 = "setter";
          break;
        case 5:
          v111 = "method";
          break;
        case 6:
          v111 = "arrow function";
          break;
        case 7:
        case 9:
          v111 = "async function";
          break;
        case 8:
        case 11:
          v111 = "async arrow function";
          break;
        case 10:
          v111 = "async method";
          break;
        case 12:
        case 13:
        case 14:
        case 19:
          __break(0xC471u);
          JUMPOUT(0x197E5A684);
        case 15:
        case 16:
          v111 = "async generator function";
          break;
        case 17:
          v111 = "async generator method";
          break;
        case 18:
          v111 = "generator method";
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x197E5A7B4);
      }
      v211 = v111;
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],WTF::StringView,char const(&)[8],char const*,char const(&)[6]>(a1, (uint64_t)&v213, &v211);
      goto LABEL_160;
    }
    if ((_DWORD)v18 == 546)
    {
      if (*(_BYTE *)v8 && (*(_DWORD *)(v72 + 720 * v71 + 10) & 0x102000) == 0 && *(_DWORD *)(a1 + 7480) != 1)
        goto LABEL_67;
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_160;
      *(_QWORD *)&v213 = JSC::stringForFunctionMode();
      v211 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierAwaitReason(a1);
      v113 = "Cannot use 'await' as a ";
    }
    else
    {
      if ((_DWORD)v18 == 544)
      {
        if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v71 + 9) & 1) != 0)
        {
          if (!*(_QWORD *)(a1 + 7360))
          {
            *(_QWORD *)&v213 = JSC::stringForFunctionMode();
            v211 = "in strict mode";
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[23],char const*,char const(&)[6],char const(&)[2],char const*>(a1, (const char **)&v213, &v211);
          }
          goto LABEL_160;
        }
        goto LABEL_67;
      }
      if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * v71 + 9) & 1) == 0 && (*(_BYTE *)(v72 + 720 * v71 + 11) & 2) == 0)
      {
LABEL_67:
        if ((_DWORD)v18 == 20 || (v18 & 0x100000) != 0)
          goto LABEL_159;
        if (!*(_QWORD *)(a1 + 7360))
        {
          v81 = "getter";
          switch(v9)
          {
            case 0:
              v81 = "function";
              break;
            case 1:
            case 2:
              v81 = "generator function";
              break;
            case 3:
              break;
            case 4:
              v81 = "setter";
              break;
            case 5:
              v81 = "method";
              break;
            case 6:
              v81 = "arrow function";
              break;
            case 7:
            case 9:
              v81 = "async function";
              break;
            case 8:
            case 11:
              v81 = "async arrow function";
              break;
            case 10:
              v81 = "async method";
              break;
            case 12:
            case 13:
            case 14:
            case 19:
              __break(0xC471u);
              JUMPOUT(0x197E5A664);
            case 15:
            case 16:
              v81 = "async generator function";
              break;
            case 17:
              v81 = "async generator method";
              break;
            case 18:
              v81 = "generator method";
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197E5A78CLL);
          }
          *(_QWORD *)&v213 = v81;
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],char const*,char const(&)[18]>(a1, (const char **)&v213);
        }
        goto LABEL_160;
      }
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_160;
      *(_QWORD *)&v213 = JSC::stringForFunctionMode();
      v211 = JSC::Parser<JSC::Lexer<char16_t>>::disallowedIdentifierYieldReason(a1);
      v113 = "Cannot use 'yield' as a ";
    }
    JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[25],char const*,char const(&)[6],char const(&)[2],char const*>(a1, v113, (const char **)&v213, &v211);
    goto LABEL_160;
  }
  if ((_DWORD)v18 == 12)
  {
LABEL_178:
    *(_DWORD *)(a3 + 16) = 1;
    v116 = (JSC::FunctionParameters *)JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 4, 1, 0, 0, 0, 0);
    if (!v116)
    {
      if (*v210 == 20 || (*v210 & 0x100000) != 0)
        goto LABEL_159;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
      goto LABEL_160;
    }
    JSC::ASTBuilder::appendParameter((JSC::ASTBuilder *)v14, v116, 0, v117);
    goto LABEL_87;
  }
  v10 = v17;
  isAllowedIdentifierLet = JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, v18, *(_QWORD **)(a1 + 7376));
  LODWORD(v18) = *(_DWORD *)(a1 + 7368);
  if (isAllowedIdentifierLet
    || (isAllowedIdentifierYield = JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, v18, *(_QWORD **)(a1 + 7376)), LODWORD(v18) = *(_DWORD *)(a1 + 7368), isAllowedIdentifierYield))
  {
    if ((_DWORD)v18 != 2)
      goto LABEL_178;
  }
  else if ((_DWORD)v18 != 2)
  {
    if ((_DWORD)v18 != 546)
    {
      if ((_DWORD)v18 != 1048592)
        goto LABEL_296;
      goto LABEL_371;
    }
    goto LABEL_178;
  }
  v147 = *(_DWORD *)(a1 + 7400);
  v148 = *(_DWORD *)(a1 + 7412);
  v149 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v147;
  *(_DWORD *)(a1 + 7448) = v148;
  *(_DWORD *)(a1 + 7452) = v149;
  v150 = *(_QWORD *)(a1 + 7288);
  *(_DWORD *)(v150 + 4) = v147;
  v151 = *(_DWORD *)(a1 + 12);
  if (!v151)
  {
    __break(0xC471u);
    JUMPOUT(0x197E5A938);
  }
  v152 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v151 - 1) + 9) & 1;
  *(_BYTE *)(v150 + 56) = 0;
  v153 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v150, (uint64_t)v210, 0, v152, v142, v143, v144, v145);
  *(_DWORD *)(a1 + 7368) = v153;
  if (v153 == 3)
  {
    *(_DWORD *)(a3 + 16) = 0;
LABEL_281:
    v192 = *(_DWORD *)(a1 + 7400);
    v193 = *(_DWORD *)(a1 + 7412);
    v194 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v192;
    *(_DWORD *)(a1 + 7448) = v193;
    *(_DWORD *)(a1 + 7452) = v194;
    v138 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v138 + 4) = v192;
    v139 = *(_DWORD *)(a1 + 12);
    if (!v139)
    {
      __break(0xC471u);
      JUMPOUT(0x197E5A2E4);
    }
    goto LABEL_204;
  }
  v154 = 0;
  v155 = 0;
  v212 = 0;
  *(_QWORD *)&v213 = 0;
  while (1)
  {
    if (v153 == 37)
    {
      v182 = *(_DWORD *)(a1 + 7400);
      v183 = *(_DWORD *)(a1 + 7412);
      v184 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v182;
      *(_DWORD *)(a1 + 7448) = v183;
      *(_DWORD *)(a1 + 7452) = v184;
      v185 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v185 + 4) = v182;
      v186 = *(_DWORD *)(a1 + 12);
      if (!v186)
      {
        __break(0xC471u);
        JUMPOUT(0x197E5A950);
      }
      v187 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v186 - 1) + 9) & 1;
      *(_BYTE *)(v185 + 56) = 0;
      v188 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v185, (uint64_t)v210, 0, v187, v130, v131, v132, v133);
      *(_DWORD *)(a1 + 7368) = v188;
      if (JSC::Parser<JSC::Lexer<char16_t>>::isDisallowedIdentifierAwait(a1, v188, *(_QWORD **)(a1 + 7376)))
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use 'await' as a parameter name in an async function");
        goto LABEL_323;
      }
      v189 = JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 4, 1, (char ***)&v213, (char *)&v212, 0, 0);
      if (*(_QWORD *)(a1 + 7360))
        goto LABEL_323;
      v190 = v189;
      v191 = a2[1];
      v163 = *(_QWORD *)v191;
      v208 = v191;
      if (*((_QWORD *)v191 + 1) - *(_QWORD *)v191 <= 0x17uLL)
      {
        JSC::ParserArena::allocateFreeablePool(v191);
        v163 = *(_QWORD *)v208;
        v168 = *(_QWORD *)(a1 + 7360);
      }
      else
      {
        v168 = 0;
      }
      *(_QWORD *)v208 = v163 + 24;
      *(_QWORD *)v163 = &off_1E358B820;
      *(_QWORD *)(v163 + 8) = v190;
      *(_DWORD *)(v163 + 16) = v155;
      if (*v210 == 6)
      {
        if (!v168)
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Rest parameter should be the last parameter in a function declaration");
        goto LABEL_323;
      }
      v166 = 0;
      v167 = 1;
    }
    else
    {
      if (v153 == 3)
        goto LABEL_281;
      v156 = JSC::Parser<JSC::Lexer<char16_t>>::parseDestructuringPattern<JSC::ASTBuilder>(a1, a2, 4, 1, (char ***)&v213, (char *)&v212, 0, 0);
      if (!v156)
      {
        if (*v210 == 20 || (*v210 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse parameter pattern");
        }
        goto LABEL_323;
      }
      v163 = v156;
      JSC::Parser<JSC::Lexer<char16_t>>::parseDefaultValueForDestructuringPattern<JSC::ASTBuilder>(a1, a2, v157, v158, v159, v160, v161, v162);
      v166 = v165;
      v167 = 0;
      v154 |= v165 != 0;
      v168 = *(_QWORD *)(a1 + 7360);
    }
    if (v168)
      goto LABEL_323;
    if ((_QWORD)v213)
    {
      if ((v154 & 1) != 0)
      {
        v211 = *(const char **)v213;
        v204 = "' not allowed in function with default parameter values";
      }
      else
      {
        if (!v212)
        {
          v211 = *(const char **)v213;
          if (v167)
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[48]>(a1, (uint64_t *)&v211);
          else
            JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[35]>(a1, (uint64_t *)&v211);
          goto LABEL_323;
        }
        v211 = *(const char **)v213;
        v204 = "' not allowed in function with destructuring parameters";
      }
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[22],WTF::UniquedStringImpl *,char const(&)[56]>(a1, (uint64_t *)&v211, v204);
LABEL_323:
      if (*v210 == 20 || (*v210 & 0x100000) != 0)
        goto LABEL_333;
      if (!*(_QWORD *)(a1 + 7360))
      {
        *(_QWORD *)&v213 = JSC::stringForFunctionMode();
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[34],char const*>(a1, (const char **)&v213);
      }
      goto LABEL_334;
    }
    if (v166)
      v169 = 1;
    else
      v169 = v167;
    if ((v169 & 1) != 0 || v212)
    {
      v177 = *(_DWORD *)(a1 + 12);
      if (!v177)
      {
        __break(0xC471u);
        JUMPOUT(0x197E5A948);
      }
      v178 = *(_QWORD *)a1 + 720 * (v177 - 1);
      *(_DWORD *)(v178 + 10) = *(_DWORD *)(v178 + 10) & 0xFB7FFFFF | 0x4000000;
    }
    JSC::ASTBuilder::appendParameter((JSC::ASTBuilder *)v14, (JSC::FunctionParameters *)v163, v166, v164);
    if ((v167 & 1) != 0)
      break;
    if ((v154 & 1) == 0)
      ++*(_DWORD *)(a3 + 16);
    v170 = *v210;
    if (*v210 != 6)
      goto LABEL_280;
    v171 = *(_DWORD *)(a1 + 7400);
    v172 = *(_DWORD *)(a1 + 7412);
    v173 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v171;
    *(_DWORD *)(a1 + 7448) = v172;
    *(_DWORD *)(a1 + 7452) = v173;
    v174 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v174 + 4) = v171;
    v175 = *(_DWORD *)(a1 + 12);
    if (!v175)
    {
      __break(0xC471u);
      JUMPOUT(0x197E5A928);
    }
    v176 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v175 - 1) + 9) & 1;
    *(_BYTE *)(v174 + 56) = 0;
    v153 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v174, (uint64_t)v210, 0, v176, v130, v131, v132, v133);
    *(_DWORD *)(a1 + 7368) = v153;
    ++v155;
  }
  v170 = *v210;
LABEL_280:
  if (v170 == 3)
    goto LABEL_281;
  if (v170 != 20 && (v170 & 0x100000) == 0)
  {
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ')' or a ',' after a parameter declaration");
    goto LABEL_334;
  }
LABEL_333:
  JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_334:
  v14 = 0;
LABEL_205:
  v17 = v10;
LABEL_87:
  *(_DWORD *)(a1 + 7316) = v17;
  return v14;
}

_QWORD *JSC::Parser<JSC::Lexer<char16_t>>::parseAsyncFunctionSourceElements<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t AsyncFunctionBody;
  double ExprStatement;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  int v63;
  int v64;
  __int16 v65;
  __int16 v66;
  _BYTE v67[40];
  _QWORD v68[2];
  _QWORD v69[2];
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  int v74;
  uint64_t v75;
  int v76;
  _OWORD v77[2];

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD **)v11;
  if (*(_QWORD *)(v11 + 8) - *(_QWORD *)v11 <= 0xFuLL)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v12 = *(_QWORD **)v11;
  }
  *(_QWORD *)v11 = v12 + 2;
  *v12 = 0;
  v12[1] = 0;
  v13 = *(_DWORD *)(a1 + 7408);
  v77[0] = *(_OWORD *)(a1 + 7400);
  v75 = *(_QWORD *)(a1 + 7416);
  v76 = *(_DWORD *)(a1 + 7424);
  v14 = *(_DWORD *)(a1 + 7404);
  v74 = 0;
  v73 = 0u;
  v72 = 0u;
  v71 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
  JSC::Parser<JSC::Lexer<unsigned char>>::createGeneratorParameters<JSC::ASTBuilder>(a1, a2, (_DWORD *)&v72 + 2, a4, a5, a6, a7, a8);
  v15 = *(_DWORD *)(a1 + 7400);
  LODWORD(v73) = v13;
  DWORD2(v73) = v15;
  v16 = (char *)(a1 + 7474);
  v17 = *(unsigned __int8 *)(a1 + 7474);
  if (v17 == 11)
    v18 = 8;
  else
    v18 = 7;
  if (((1 << v17) & 0x30000) != 0)
    v19 = 15;
  else
    v19 = v18;
  *v16 = v19;
  v20 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  v69[0] = v20;
  v69[1] = v21;
  v70 = a1;
  if (*(_DWORD *)(v20 + 12) <= v21)
  {
    __break(0xC471u);
    goto LABEL_39;
  }
  JSC::Scope::setSourceParseMode(*(_QWORD *)v20 + 720 * v21, *v16);
  JSC::Parser<JSC::Lexer<unsigned char>>::resetImplementationVisibilityIfNeeded((uint64_t *)a1);
  v68[0] = *(_QWORD *)(a1 + 7216);
  v27 = *(_QWORD *)(a1 + 7520);
  if (a3)
  {
    if (v27)
    {
      if (JSC::Parser<JSC::Lexer<char16_t>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::ASTBuilder>(a1, a2))
      {
        goto LABEL_13;
      }
    }
    else if (JSC::Parser<JSC::Lexer<char16_t>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::SyntaxChecker>(a1, (uint64_t)v68))
    {
      goto LABEL_13;
    }
    v63 = *(_DWORD *)(a1 + 7368);
    if (v63 != 20 && (v63 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of async arrow function");
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (!v27)
  {
    if (JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::SyntaxChecker>(a1, (uint64_t)v68, 0, v22, v23, v24, v25, v26))goto LABEL_13;
LABEL_29:
    v64 = *(_DWORD *)(a1 + 7368);
    if (v64 != 20 && (v64 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of async function");
      goto LABEL_34;
    }
LABEL_33:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_34:
    JSC::Parser<JSC::Lexer<char16_t>>::AutoPopScopeRef::~AutoPopScopeRef((uint64_t)v69, v28, v29, v30, v31, v32, v33, v34);
    v12 = 0;
    goto LABEL_20;
  }
  if (!JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::ASTBuilder>(a1, a2, 0, v22, v23, v24, v25, v26))
    goto LABEL_29;
LABEL_13:
  v70 = 0;
  JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v67, (uint64_t *)a1, 1, v30, v31, v32, v33, v34);
  std::tuple<JSC::VariableEnvironment,WTF::Vector<JSC::FunctionMetadataNode *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~tuple((uint64_t)v67, v35, v36, v37, v38, v39, v40, v41);
  JSC::Parser<JSC::Lexer<char16_t>>::AutoPopScopeRef::~AutoPopScopeRef((uint64_t)v69, v42, v43, v44, v45, v46, v47, v48);
  v49 = *(_DWORD *)(a1 + 12);
  if (!v49)
  {
    __break(0xC471u);
LABEL_39:
    JUMPOUT(0x197E5ADE8);
  }
  v50 = v13 - v14;
  v65 = *(_WORD *)(*(_QWORD *)a1 + 720 * (v49 - 1) + 8);
  *(_QWORD *)&v72 = JSC::ASTBuilder::createFunctionMetadata(a2, (uint64_t)v77, a1 + 7400, v50, *(_DWORD *)(a1 + 7408) - *(_DWORD *)(a1 + 7404), v13, v13, v13, v65, SHIBYTE(v65), v66, *(_DWORD *)(a1 + 7484), SDWORD2(v72), *v16, a3);
  v55 = 7380;
  if (a3)
    v55 = 7412;
  v56 = *(_DWORD *)(a1 + v55);
  HIDWORD(v73) = *(_DWORD *)(a1 + 7400);
  v74 = v50;
  DWORD1(v73) = v56;
  AsyncFunctionBody = JSC::ASTBuilder::createAsyncFunctionBody(a2, (uint64_t)v77, (uint64_t)&v71, v19, v51, v52, v53, v54);
  ExprStatement = JSC::ASTBuilder::createExprStatement(*(JSC::ParserArena **)(a2 + 8), (uint64_t)v77, AsyncFunctionBody, (uint64_t)&v75, *(_DWORD *)(a1 + 7444));
  v60 = v59;
  if (((*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v59 + 40))(v59, ExprStatement) & 1) == 0)
  {
    if (*v12)
    {
      v61 = v12 + 1;
      *(_QWORD *)(v12[1] + 32) = v60;
    }
    else
    {
      *v12 = v60;
      v61 = v12 + 1;
    }
    *v61 = v60;
  }
LABEL_20:
  *v16 = v17;
  return v12;
}

_QWORD *JSC::Parser<JSC::Lexer<char16_t>>::parseArrowFunctionSingleExpressionBodySourceElements<JSC::ASTBuilder>(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  JSC::ParserArena *v13;
  uint64_t v14;
  void (**v15)(JSC::ReturnNode *__hidden);
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if ((unint64_t)&v21 < *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 93104))
  {
    if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[16]>(a1);
      v12 = 0;
      *(_BYTE *)(a1 + 7352) = 1;
      return v12;
    }
    return 0;
  }
  v4 = *(_DWORD *)(a1 + 7416);
  v5 = *(_DWORD *)(a1 + 7420);
  v6 = *(_DWORD *)(a1 + 7424);
  LODWORD(v22) = 0;
  v23 = *(_QWORD *)(a1 + 7496);
  v24 = a1;
  *(_QWORD *)(a1 + 7496) = &v22;
  v7 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1, a2, &v22);
  *(_QWORD *)(v24 + 7496) = v23;
  if (!v7)
  {
    v20 = *(_DWORD *)(a1 + 7368);
    if (v20 == 20 || (v20 & 0x100000) != 0)
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    }
    else if (!*(_QWORD *)(a1 + 7360))
    {
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the arrow function expression");
    }
    return 0;
  }
  v8 = v7;
  *(_DWORD *)(v7 + 20) = *(_DWORD *)(a1 + 7448);
  v9 = *(_DWORD *)(a1 + 7428);
  v10 = *(_QWORD *)(a1 + 7432);
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD **)v11;
  if (*(_QWORD *)(v11 + 8) - *(_QWORD *)v11 <= 0xFuLL)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v12 = *(_QWORD **)v11;
  }
  *(_QWORD *)v11 = v12 + 2;
  *v12 = 0;
  v12[1] = 0;
  v13 = *(JSC::ParserArena **)(a2 + 8);
  v14 = *(_QWORD *)v13;
  if (*((_QWORD *)v13 + 1) - *(_QWORD *)v13 <= 0x57uLL)
  {
    JSC::ParserArena::allocateFreeablePool(v13);
    v14 = *(_QWORD *)v13;
  }
  *(_QWORD *)v13 = v14 + 88;
  *(_QWORD *)(v14 + 32) = 0;
  v15 = &off_1E358A520;
  *(_QWORD *)v14 = &off_1E358A520;
  *(_QWORD *)(v14 + 80) = v8;
  *(_DWORD *)(v14 + 40) = v9;
  *(_QWORD *)(v14 + 44) = v10;
  *(_DWORD *)(v14 + 52) = v4;
  *(_DWORD *)(v14 + 56) = v5;
  *(_DWORD *)(v14 + 60) = v6;
  *(_DWORD *)(v14 + 64) = v9;
  *(_QWORD *)(v14 + 68) = v10;
  *(_DWORD *)(v14 + 28) = v9;
  *(_DWORD *)(v14 + 8) = v4;
  *(_DWORD *)(v14 + 12) = v5;
  *(_DWORD *)(v14 + 16) = v6;
  *(_DWORD *)(v14 + 20) = *(_DWORD *)(a1 + 7448);
  *(_BYTE *)(v14 + 24) = 1;
  v16 = *(_QWORD *)(v14 + 8);
  v22 = v16;
  LODWORD(v23) = v6;
  v17 = *(_QWORD *)(a1 + 7520);
  if (v17 && (v16 & 0x80000000) == 0)
  {
    JSC::DebuggerPausePositions::appendPause(v17, (uint64_t)&v22);
    v15 = *(void (***)(JSC::ReturnNode *__hidden))v14;
  }
  if ((((uint64_t (*)(uint64_t))v15[5])(v14) & 1) == 0)
  {
    if (*v12)
    {
      v18 = v12 + 1;
      *(_QWORD *)(v12[1] + 32) = v14;
    }
    else
    {
      *v12 = v14;
      v18 = v12 + 1;
    }
    *v18 = v14;
  }
  return v12;
}

uint64_t *JSC::Parser<JSC::Lexer<char16_t>>::parseModuleSourceElements<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int32x2_t v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _DWORD *v62;
  int v63;
  WTF::StringImpl *v64;
  int v65;
  uint64_t *v66;
  uint64_t v67;
  int32x2_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  _OWORD *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  __int128 v87;
  __int128 v88;
  int v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  char v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  WTF::AtomStringImpl *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  unint64_t v111;
  __int16 *v112;
  __int16 v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  int v118;
  WTF::AtomStringImpl *v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  WTF *v150;
  WTF *v151;
  _QWORD *v152;
  WTF::StringImpl **v153;
  uint64_t *v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  int v158;
  int v159;
  int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  __int128 v171;
  WTF::AtomStringImpl *v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  int v176;
  int v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  WTF::StringImpl **v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  int v194;
  int v195;
  int v196;
  WTF::AtomStringImpl *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  WTF::StringImpl *v204;
  int v205;
  int v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  int v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  int v229;
  int v230;
  int v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  int v235;
  int v236;
  int v237;
  int v238;
  unint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  int v274;
  int v275;
  int v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  int v280;
  int v281;
  int v282;
  int v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unsigned __int16 *v289;
  uint64_t v290;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  int v298;
  int v299;
  int v300;
  WTF::AtomStringImpl *v301;
  uint64_t v302;
  uint64_t v303;
  WTF::StringImpl *v304;
  uint64_t v305;
  int v306;
  int v307;
  int v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  WTF::StringImpl **v324;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  unint64_t v332;
  __int128 v333;
  __int128 v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  char v338;
  int v339;
  int v340;
  int v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  int v345;
  int v346;
  int v347;
  uint64_t v348;
  int v349;
  uint64_t v351;
  uint64_t v352;
  WTF::StringImpl **v353;
  WTF::StringImpl **v354;
  uint64_t v355;
  WTF::StringImpl **v356;
  int v357;
  int hasDeclaredVariable;
  WTF::AtomStringImpl *v359;
  int v360;
  uint64_t *v361;
  WTF::StringImpl *v362;
  int v363;
  uint64_t v364;
  unsigned int v365;
  int v366;
  unsigned int v367;
  WTF::StringImpl *v368;
  int v369;
  WTF::StringImpl *v370;
  int v371;
  int v372;
  uint64_t *v373;
  uint64_t v374;
  WTF::StringImpl *v375;
  unsigned int v376;
  unsigned int v377;
  uint64_t v378;
  WTF::StringImpl *v379;
  int v380;
  WTF::StringImpl **v381;
  unint64_t v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  void *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  void *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  __int128 v407;
  __int128 v408;
  int v409;
  int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  int v417;
  int v418;
  int v419;
  int v420;
  WTF::AtomStringImpl *v421;
  uint64_t v422;
  uint64_t v423;
  WTF::StringImpl *v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  int v430;
  int v431;
  uint64_t v432;
  int v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  void *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  int v447;
  int v448;
  uint64_t v449;
  int v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  void *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  int v471;
  int v472;
  int v473;
  int v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  const char *v482;
  int v483;
  int v484;
  int v485;
  int v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  int v494;
  int v495;
  int v496;
  int v497;
  uint64_t v498;
  int v499;
  int v500;
  int v501;
  int v502;
  uint64_t v503;
  int v504;
  uint64_t v505;
  unint64_t v506;
  void *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  _DWORD *v514;
  unsigned __int16 *v515;
  unint64_t v516;
  int v517;
  int v518;
  int v519;
  int v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  int v528;
  int v529;
  int v530;
  uint64_t v531;
  int v532;
  uint64_t v533;
  int v534;
  unint64_t v535;
  unint64_t v536;
  unsigned __int16 *v537;
  uint64_t v538;
  int v539;
  int v540;
  int v541;
  uint64_t v542;
  int v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  _QWORD *ExportSpecifierList;
  uint64_t v557;
  uint64_t v558;
  int v559;
  int v560;
  int v561;
  uint64_t v562;
  int v563;
  uint64_t v564;
  int v565;
  int v566;
  int v567;
  int v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  char v576;
  int v577;
  char v578;
  int v579;
  int v580;
  unsigned int v581;
  int v582;
  int v583;
  unsigned int v584;
  int v585;
  uint64_t v586;
  char v587;
  int v588;
  int v589;
  int v590;
  char v591;
  char v592;
  __int128 *v593;
  _OWORD *v594;
  _QWORD *v595;
  char v596;
  int v597;
  char v598;
  int32x2_t v599;
  char v600;
  int32x2_t v601;
  int v602;
  uint64_t v603;
  WTF *v604[2];
  __int128 v605;
  uint64_t v606;
  __int128 v607;
  _QWORD v608[2];

  v10 = a1 + 7344;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(uint64_t **)v11;
  if (*(_QWORD *)(v11 + 8) - *(_QWORD *)v11 <= 0xFuLL)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v12 = *(uint64_t **)v11;
  }
  *(_QWORD *)v11 = v12 + 2;
  v13 = (int *)(a1 + 7368);
  v593 = (__int128 *)(a1 + 7400);
  *v12 = 0;
  v12[1] = 0;
  v603 = *(_QWORD *)(a1 + 7216);
  v14 = a1 + 7296;
  v594 = (_OWORD *)(a1 + 7296);
  while (1)
  {
    while (*v13 != 540)
    {
      if (*v13 == 539)
      {
        v87 = *(_OWORD *)(a1 + 7296);
        v590 = *(_DWORD *)(a1 + 7316);
        v606 = *(_QWORD *)(a1 + 7336);
        v88 = *(_OWORD *)(v14 + 24);
        *(_OWORD *)v604 = v87;
        v605 = v88;
        v596 = *(_BYTE *)v10;
        v600 = *(_BYTE *)(v10 + 1);
        v89 = *(_DWORD *)(a2 + 1052);
        v90 = (WTF::AtomStringImpl *)*(int *)(a1 + 7408);
        v91 = v14;
        v92 = *(int *)(a1 + 7404);
        v93 = *(_QWORD *)(a1 + 7288);
        v94 = *(_DWORD *)v93;
        v582 = *(_DWORD *)(v93 + 4);
        v95 = *(_BYTE *)(v93 + 56);
        v96 = *(_DWORD *)(a1 + 7400);
        v97 = *(_DWORD *)(a1 + 7412);
        *(_DWORD *)(a1 + 7444) = v96;
        *(_DWORD *)(a1 + 7448) = v97;
        *(_DWORD *)(a1 + 7452) = v92;
        *(_DWORD *)(v93 + 4) = v96;
        v98 = *(_DWORD *)(a1 + 12);
        if (!v98)
        {
          __break(0xC471u);
          JUMPOUT(0x197E5D7E8);
        }
        v586 = v91 + 24;
        v99 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v98 - 1) + 9) & 1;
        *(_BYTE *)(v93 + 56) = 0;
        v100 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v93, a1 + 7368, 0, v99, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v100;
        if (v100 == 2)
        {
          JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), v90, v92, v103, v104, v105, v106, v107);
          v296 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)v296 = v94;
          *(_BYTE *)(v296 + 56) = v95;
          v297 = *(_DWORD *)(a1 + 7400);
          v298 = *(_DWORD *)(a1 + 7412);
          v299 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v297;
          *(_DWORD *)(a1 + 7448) = v298;
          *(_DWORD *)(a1 + 7452) = v299;
          *(_DWORD *)(v296 + 4) = v297;
          v300 = *(_DWORD *)(a1 + 12);
          if (!v300)
          {
            __break(0xC471u);
            JUMPOUT(0x197E5D830);
          }
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v296, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v300 - 1) + 9) & 1, v292, v293, v294, v295);
          *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v582;
          v14 = a1 + 7296;
          *v594 = *(_OWORD *)v604;
          *(_DWORD *)(a1 + 7312) = v89;
          *(_DWORD *)(a1 + 7316) = v590;
          *(_OWORD *)v586 = v605;
          *(_QWORD *)(v586 + 16) = v606;
          *(_BYTE *)v10 = v596;
          *(_BYTE *)(v10 + 1) = v600;
          *(_DWORD *)(a2 + 1052) = v89;
          v304 = *(WTF::StringImpl **)(a1 + 7360);
          *(_QWORD *)(a1 + 7360) = 0;
          if (v304)
          {
            if (*(_DWORD *)v304 == 2)
            {
              WTF::StringImpl::~StringImpl(v304, v301, v302, v303, a5, a6, a7, a8);
              WTF::fastFree(v463, v464, v465, v466, v467, v468, v469, v470);
            }
            else
            {
              *(_DWORD *)v304 -= 2;
            }
          }
        }
        else
        {
          v577 = v100;
          v579 = v89;
          v108 = *(_QWORD *)(a1 + 7288);
          *(_BYTE *)(v108 + 150) = 0;
          v109 = *(WTF::StringImpl **)(v108 + 152);
          *(_QWORD *)(v108 + 152) = 0;
          if (v109)
          {
            if (*(_DWORD *)v109 == 2)
            {
              WTF::StringImpl::~StringImpl(v109, v101, v102, v103, v104, v105, v106, v107);
              WTF::fastFree(v239, v240, v241, v242, v243, v244, v245, v246);
            }
            else
            {
              *(_DWORD *)v109 -= 2;
            }
          }
          v110 = *(_QWORD *)(v108 + 88);
          v111 = *(_QWORD *)(v108 + 96);
          v112 = (__int16 *)(v110 + 2 * (_QWORD)v90);
          *(_QWORD *)(v108 + 80) = v112;
          *(_QWORD *)(v108 + 112) = v110 + 2 * v92;
          *(_DWORD *)(v108 + 20) = 0;
          *(_DWORD *)(v108 + 36) = 0;
          if ((unint64_t)v112 >= v111)
            v113 = 0;
          else
            v113 = *v112;
          v14 = a1 + 7296;
          *(_WORD *)(v108 + 176) = v113;
          v114 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)v114 = v94;
          *(_BYTE *)(v114 + 56) = v95;
          v115 = *(_DWORD *)(a1 + 7400);
          v116 = *(_DWORD *)(a1 + 7412);
          v117 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v115;
          *(_DWORD *)(a1 + 7448) = v116;
          *(_DWORD *)(a1 + 7452) = v117;
          *(_DWORD *)(v114 + 4) = v115;
          v118 = *(_DWORD *)(a1 + 12);
          if (!v118)
          {
            __break(0xC471u);
            JUMPOUT(0x197E5D7F0);
          }
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v114, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v118 - 1) + 9) & 1, v104, v105, v106, v107);
          *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v582;
          *v594 = *(_OWORD *)v604;
          *(_DWORD *)(a1 + 7312) = v579;
          *(_DWORD *)(a1 + 7316) = v590;
          *(_OWORD *)v586 = v605;
          *(_QWORD *)(v586 + 16) = v606;
          *(_BYTE *)v10 = v596;
          *(_BYTE *)(v10 + 1) = v600;
          *(_DWORD *)(a2 + 1052) = v579;
          v122 = *(WTF::StringImpl **)(a1 + 7360);
          *(_QWORD *)(a1 + 7360) = 0;
          if (v122)
          {
            if (*(_DWORD *)v122 == 2)
            {
              WTF::StringImpl::~StringImpl(v122, v119, v120, v121, a5, a6, a7, a8);
              WTF::fastFree(v247, v248, v249, v250, v251, v252, v253, v254);
            }
            else
            {
              *(_DWORD *)v122 -= 2;
            }
          }
          if (v577 != 19)
          {
            v607 = *v593;
            v123 = *(_DWORD *)(a1 + 7400);
            v124 = *(_DWORD *)(a1 + 7412);
            v125 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v123;
            *(_DWORD *)(a1 + 7448) = v124;
            *(_DWORD *)(a1 + 7452) = v125;
            v126 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v126 + 4) = v123;
            v127 = *(_DWORD *)(a1 + 12);
            if (!v127)
            {
              __break(0xC471u);
              JUMPOUT(0x197E5D7F8);
            }
            v128 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v127 - 1) + 9) & 1;
            *(_BYTE *)(v126 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v126, a1 + 7368, 0, v128, a5, a6, a7, a8);
            v130 = *(_QWORD *)(a2 + 8);
            v131 = *(_QWORD **)v130;
            if (*(_QWORD *)(v130 + 8) - *(_QWORD *)v130 <= 0x2FuLL)
            {
              JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
              v131 = *(_QWORD **)v130;
            }
            *(_QWORD *)v130 = v131 + 6;
            v608[0] = v131;
            v132 = *(unsigned int *)(v130 + 52);
            if ((_DWORD)v132 == *(_DWORD *)(v130 + 48))
            {
              WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserArenaDeletable *&>(v130 + 40, (unint64_t)v608);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)(v130 + 40) + 8 * v132) = v131;
              *(_DWORD *)(v130 + 52) = v132 + 1;
            }
            v131[3] = 0;
            v131[4] = 0;
            v131[5] = 0;
            *v131 = &off_1E357B270;
            v131[1] = v131 + 3;
            v131[2] = 3;
            v133 = *v13;
            if (*v13 == 12)
            {
LABEL_75:
              v134 = JSC::Parser<JSC::Lexer<char16_t>>::parseImportClauseItem<JSC::ASTBuilder>(a1, a2, 2, v16, a5, a6, a7, a8);
              if (!v134)
              {
                v14 = a1 + 7296;
                if (*v13 == 20 || (*v13 & 0x100000) != 0)
                {
                  JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
                }
                else if (!*(_QWORD *)(a1 + 7360))
                {
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse the default import");
                }
                goto LABEL_84;
              }
              JSC::ASTBuilder::appendImportSpecifier(v131, v134);
              v135 = *v13;
              if (*v13 != 6)
              {
LABEL_77:
                if (v135 != 12
                  || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 1360)
                  || *(_BYTE *)(v10 + 40))
                {
                  if (v135 != 20 && (v135 & 0x100000) == 0)
                  {
                    v14 = a1 + 7296;
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected 'from' before imported module name");
                    goto LABEL_84;
                  }
                  goto LABEL_223;
                }
                v205 = *(_DWORD *)(a1 + 7400);
                v206 = *(_DWORD *)(a1 + 7412);
                v207 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v205;
                *(_DWORD *)(a1 + 7448) = v206;
                *(_DWORD *)(a1 + 7452) = v207;
                v208 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v208 + 4) = v205;
                v209 = *(_DWORD *)(a1 + 12);
                if (!v209)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E5D818);
                }
                v210 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v209 - 1) + 9) & 1;
                *(_BYTE *)(v208 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v208, a1 + 7368, 0, v210, a5, a6, a7, a8);
                v217 = JSC::Parser<JSC::Lexer<char16_t>>::parseModuleName<JSC::ASTBuilder>(a1, a2, v211, v212, v213, v214, v215, v216);
                if (v217)
                {
                  v219 = v217;
                  if (!BYTE5(qword_1ECF4C7A0) || (v220 = *(_QWORD *)(a1 + 7288), *(_BYTE *)(v220 + 56)) || *v13 != 530)
                  {
                    v221 = 0;
                    goto LABEL_137;
                  }
                  v517 = *(_DWORD *)(a1 + 7400);
                  v518 = *(_DWORD *)(a1 + 7412);
                  v519 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v517;
                  *(_DWORD *)(a1 + 7448) = v518;
                  *(_DWORD *)(a1 + 7452) = v519;
                  *(_DWORD *)(v220 + 4) = v517;
                  v520 = *(_DWORD *)(a1 + 12);
                  if (!v520)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E5D878);
                  }
                  v521 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v520 - 1) + 9) & 1;
                  *(_BYTE *)(v220 + 56) = 0;
                  *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v220, a1 + 7368, 0, v521, a5, a6, a7, a8);
                  v221 = JSC::Parser<JSC::Lexer<char16_t>>::parseImportAttributes<JSC::ASTBuilder>(a1, *(uint64_t **)(a2 + 8), v522, v523, v524, v525, v526, v527);
                  if (!v221)
                  {
LABEL_406:
                    if (*v13 != 20 && (*v13 & 0x100000) == 0)
                    {
                      v14 = a1 + 7296;
                      if (!*(_QWORD *)(a1 + 7360))
                      {
                        v482 = "Unable to parse import attributes";
                        goto LABEL_417;
                      }
                      goto LABEL_84;
                    }
LABEL_223:
                    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
                    v14 = a1 + 7296;
                    goto LABEL_84;
                  }
LABEL_137:
                  if (!JSC::Parser<JSC::Lexer<char16_t>>::autoSemiColon(a1, v218, v15, v16, a5, a6, a7, a8))
                  {
                    if (*v13 == 20 || (*v13 & 0x100000) != 0)
                      goto LABEL_223;
                    v222 = *(_QWORD *)(a1 + 7360);
LABEL_391:
                    v14 = a1 + 7296;
                    if (!v222)
                      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' following a targeted import declaration");
                    goto LABEL_84;
                  }
                  goto LABEL_252;
                }
                if (*v13 == 20 || (*v13 & 0x100000) != 0)
                  goto LABEL_223;
                v437 = *(_QWORD *)(a1 + 7360);
LABEL_381:
                v14 = a1 + 7296;
                if (!v437)
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse the module name");
                goto LABEL_84;
              }
              v229 = *(_DWORD *)(a1 + 7400);
              v230 = *(_DWORD *)(a1 + 7412);
              v231 = *(_DWORD *)(a1 + 7404);
              *(_DWORD *)(a1 + 7444) = v229;
              *(_DWORD *)(a1 + 7448) = v230;
              *(_DWORD *)(a1 + 7452) = v231;
              v232 = *(_QWORD *)(a1 + 7288);
              *(_DWORD *)(v232 + 4) = v229;
              v233 = *(_DWORD *)(a1 + 12);
              if (!v233)
              {
                __break(0xC471u);
                JUMPOUT(0x197E5D828);
              }
              v234 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v233 - 1) + 9) & 1;
              *(_BYTE *)(v232 + 56) = 0;
              v235 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v232, a1 + 7368, 0, v234, a5, a6, a7, a8);
              *(_DWORD *)(a1 + 7368) = v235;
LABEL_148:
              if (!v235)
              {
                v236 = *(_DWORD *)(a1 + 7400);
                v237 = *(_DWORD *)(a1 + 7412);
                v238 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v236;
                *(_DWORD *)(a1 + 7448) = v237;
                *(_DWORD *)(a1 + 7452) = v238;
                v26 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v26 + 4) = v236;
                v27 = *(_DWORD *)(a1 + 12);
                if (!v27)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E5BE28);
                }
                while (1)
                {
                  v19 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v27 - 1) + 9) & 1;
                  *(_BYTE *)(v26 + 56) = 0;
                  v20 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v26, a1 + 7368, 0, v19, a5, a6, a7, a8);
                  *(_DWORD *)(a1 + 7368) = v20;
                  if (v20 == 1)
                    goto LABEL_142;
                  if (v20 != 12 && (v20 & 0x200) == 0 && v20 != 14)
                  {
                    if (v20 == 20 || (v20 & 0x100000) != 0)
                      goto LABEL_223;
                    v14 = a1 + 7296;
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected an imported name or a module export name string for the import declaration");
                    goto LABEL_84;
                  }
                  v21 = JSC::Parser<JSC::Lexer<char16_t>>::parseImportClauseItem<JSC::ASTBuilder>(a1, a2, 1, v16, a5, a6, a7, a8);
                  if (!v21)
                  {
                    if (*v13 == 20 || (*v13 & 0x100000) != 0)
                      goto LABEL_223;
                    v14 = a1 + 7296;
                    if (!*(_QWORD *)(a1 + 7360))
                      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse the named import");
                    goto LABEL_84;
                  }
                  JSC::ASTBuilder::appendImportSpecifier(v131, v21);
                  v22 = *v13;
                  if (*v13 != 6)
                    break;
                  v23 = *(_DWORD *)(a1 + 7400);
                  v24 = *(_DWORD *)(a1 + 7412);
                  v25 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v23;
                  *(_DWORD *)(a1 + 7448) = v24;
                  *(_DWORD *)(a1 + 7452) = v25;
                  v26 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v26 + 4) = v23;
                  v27 = *(_DWORD *)(a1 + 12);
                  if (!v27)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E5D7E0);
                  }
                }
                if (v22 == 1)
                {
LABEL_142:
                  v223 = *(_DWORD *)(a1 + 7400);
                  v224 = *(_DWORD *)(a1 + 7412);
                  v225 = *(_DWORD *)(a1 + 7404);
                  *(_DWORD *)(a1 + 7444) = v223;
                  *(_DWORD *)(a1 + 7448) = v224;
                  *(_DWORD *)(a1 + 7452) = v225;
                  v226 = *(_QWORD *)(a1 + 7288);
                  *(_DWORD *)(v226 + 4) = v223;
                  v227 = *(_DWORD *)(a1 + 12);
                  if (!v227)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197E5D820);
                  }
                  v228 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v227 - 1) + 9) & 1;
                  *(_BYTE *)(v226 + 56) = 0;
                  v135 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v226, a1 + 7368, 0, v228, a5, a6, a7, a8);
                  *(_DWORD *)(a1 + 7368) = v135;
                  goto LABEL_77;
                }
                if (v22 == 20 || (v22 & 0x100000) != 0)
                  goto LABEL_223;
                v14 = a1 + 7296;
                if (!*(_QWORD *)(a1 + 7360))
                  JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[12]>(a1, "import list");
                goto LABEL_84;
              }
              if (v235 != 191488)
              {
                if (v235 != 20 && (v235 & 0x100000) == 0)
                {
                  v14 = a1 + 7296;
                  if (!*(_QWORD *)(a1 + 7360))
                    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected namespace import or import list");
                  goto LABEL_84;
                }
                goto LABEL_223;
              }
              v427 = JSC::Parser<JSC::Lexer<char16_t>>::parseImportClauseItem<JSC::ASTBuilder>(a1, a2, 0, v16, a5, a6, a7, a8);
              if (v427)
              {
                JSC::ASTBuilder::appendImportSpecifier(v131, v427);
                v135 = *v13;
                goto LABEL_77;
              }
              if (*v13 == 20 || (*v13 & 0x100000) != 0)
                goto LABEL_223;
              v14 = a1 + 7296;
              if (!*(_QWORD *)(a1 + 7360))
              {
                v482 = "Cannot parse the namespace import";
LABEL_417:
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, v482);
              }
LABEL_84:
              v17 = 0;
            }
            else
            {
              if (v133 != 14)
              {
                if (JSC::Parser<JSC::Lexer<char16_t>>::isAllowedIdentifierLet(a1, v133, *(_QWORD **)(a1 + 7376)))
                  goto LABEL_75;
                if (JSC::Parser<JSC::Lexer<unsigned char>>::isAllowedIdentifierYield(a1, *(_DWORD *)(a1 + 7368), *(_QWORD **)(a1 + 7376)))
                {
                  goto LABEL_75;
                }
                v235 = *v13;
                if (*v13 == 546)
                  goto LABEL_75;
                if (v235 == 1048592)
                {
                  if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 128))
                    goto LABEL_75;
                  goto LABEL_223;
                }
                goto LABEL_148;
              }
              v326 = JSC::Parser<JSC::Lexer<char16_t>>::parseModuleName<JSC::ASTBuilder>(a1, a2, v129, v16, a5, a6, a7, a8);
              if (!v326)
              {
                if (*v13 == 20 || (*v13 & 0x100000) != 0)
                  goto LABEL_223;
                v437 = *(_QWORD *)(a1 + 7360);
                goto LABEL_381;
              }
              v219 = v326;
              if (BYTE5(qword_1ECF4C7A0) && (v328 = *(_QWORD *)(a1 + 7288), !*(_BYTE *)(v328 + 56)) && *v13 == 530)
              {
                v471 = *(_DWORD *)(a1 + 7400);
                v472 = *(_DWORD *)(a1 + 7412);
                v473 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v471;
                *(_DWORD *)(a1 + 7448) = v472;
                *(_DWORD *)(a1 + 7452) = v473;
                *(_DWORD *)(v328 + 4) = v471;
                v474 = *(_DWORD *)(a1 + 12);
                if (!v474)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E5D860);
                }
                v475 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v474 - 1) + 9) & 1;
                *(_BYTE *)(v328 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v328, a1 + 7368, 0, v475, a5, a6, a7, a8);
                v221 = JSC::Parser<JSC::Lexer<char16_t>>::parseImportAttributes<JSC::ASTBuilder>(a1, *(uint64_t **)(a2 + 8), v476, v477, v478, v479, v480, v481);
                if (!v221)
                  goto LABEL_406;
              }
              else
              {
                v221 = 0;
              }
              if (!JSC::Parser<JSC::Lexer<char16_t>>::autoSemiColon(a1, v327, v15, v16, a5, a6, a7, a8))
              {
                if (*v13 == 20 || (*v13 & 0x100000) != 0)
                  goto LABEL_223;
                v222 = *(_QWORD *)(a1 + 7360);
                goto LABEL_391;
              }
LABEL_252:
              JSC::ASTBuilder::createImportDeclaration(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v607, (uint64_t)v131, v219, v221);
              v17 = v329;
              v14 = a1 + 7296;
              if (v329)
              {
                *(_BYTE *)(v329 + 24) = 1;
                v330 = *(_QWORD *)(v329 + 8);
                v331 = *(_DWORD *)(v329 + 16);
                *(_QWORD *)&v607 = v330;
                DWORD2(v607) = v331;
                v332 = *(_QWORD *)(a1 + 7520);
                if (v332)
                {
                  if ((v330 & 0x80000000) == 0)
                    JSC::DebuggerPausePositions::appendPause(v332, (uint64_t)&v607);
                }
              }
            }
LABEL_10:
            if (!v17)
              goto LABEL_265;
            goto LABEL_11;
          }
        }
      }
      *(_QWORD *)&v605 = 0;
      LODWORD(v607) = 0;
      if (*(_BYTE *)(v10 + 130) != 13)
      {
        v17 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatementListItem<JSC::ASTBuilder>(a1, a2, &v605, &v607, a5, a6, a7, a8);
        goto LABEL_10;
      }
      if (!JSC::Parser<JSC::Lexer<char16_t>>::parseStatementListItem<JSC::SyntaxChecker>(a1, (uint64_t)&v603, &v605, &v607, a5, a6, a7, a8))goto LABEL_265;
    }
    v607 = *v593;
    v28 = *(_DWORD *)(a1 + 7400);
    v29 = *(_DWORD *)(a1 + 7412);
    v30 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v28;
    *(_DWORD *)(a1 + 7448) = v29;
    *(_DWORD *)(a1 + 7452) = v30;
    v31 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v31 + 4) = v28;
    v32 = *(_DWORD *)(a1 + 12);
    if (!v32)
    {
      __break(0xC471u);
      JUMPOUT(0x197E5D8A0);
    }
    v33 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v32 - 1) + 9) & 1;
    *(_BYTE *)(v31 + 56) = 0;
    v34 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v31, a1 + 7368, 0, v33, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v34;
    if (!v34)
    {
      v35 = *(_DWORD *)(a1 + 7400);
      v36 = *(_DWORD *)(a1 + 7412);
      v37 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v35;
      *(_DWORD *)(a1 + 7448) = v36;
      *(_DWORD *)(a1 + 7452) = v37;
      v38 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v38 + 4) = v35;
      v39 = *(_DWORD *)(a1 + 12);
      if (!v39)
      {
        __break(0xC471u);
        JUMPOUT(0x197E5D8A8);
      }
      v40 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v39 - 1) + 9) & 1;
      *(_BYTE *)(v38 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v38, a1 + 7368, 0, v40, a5, a6, a7, a8);
      v42 = *(_QWORD *)(a2 + 8);
      v43 = *(_QWORD *)v42;
      if (*(_QWORD *)(v42 + 8) - *(_QWORD *)v42 <= 0x2FuLL)
      {
        JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
        v43 = *(_QWORD *)v42;
      }
      *(_QWORD *)v42 = v43 + 48;
      *(_QWORD *)&v605 = v43;
      v44 = *(unsigned int *)(v42 + 52);
      if ((_DWORD)v44 == *(_DWORD *)(v42 + 48))
      {
        WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserArenaDeletable *&>(v42 + 40, (unint64_t)&v605);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(v42 + 40) + 8 * v44) = v43;
        *(_DWORD *)(v42 + 52) = v44 + 1;
      }
      *(_QWORD *)(v43 + 32) = 0;
      *(_QWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 8) = v43 + 24;
      v595 = (_QWORD *)(v43 + 8);
      *(_QWORD *)v43 = &off_1E357B230;
      *(_QWORD *)(v43 + 16) = 3;
      v604[0] = 0;
      v604[1] = 0;
      v45 = *v13;
      if (*v13 != 1)
      {
        v585 = 0;
        v589 = 0;
        while (1)
        {
          if (v45 == 12 || (v45 & 0x200) != 0)
          {
            v46 = *(_DWORD *)(a1 + 7400);
            v47 = *(int32x2_t *)(v10 + 60);
            v48 = *(_QWORD **)(a1 + 7376);
            if ((v45 & 0x200) != 0)
              v585 = 1;
          }
          else
          {
            if (v45 != 14)
            {
              if (v45 == 20 || (v45 & 0x100000) != 0)
                goto LABEL_440;
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[83]>(a1);
              goto LABEL_441;
            }
            v48 = *(_QWORD **)(a1 + 7376);
            v287 = *v48;
            if (*v48)
            {
              v288 = *(unsigned int *)(v287 + 16);
              v289 = *(unsigned __int16 **)(v287 + 8);
              v287 = *(unsigned int *)(v287 + 4);
              v290 = (v288 >> 2) & 1;
            }
            else
            {
              v289 = 0;
              v290 = 1;
            }
            v46 = *(_DWORD *)(a1 + 7400);
            v601 = *(int32x2_t *)(v10 + 60);
            if (WTF::hasUnpairedSurrogate(v289, v287 | (v290 << 32)))
            {
LABEL_456:
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[65]>(a1);
              goto LABEL_364;
            }
            v589 = 1;
            v47 = v601;
          }
          v49 = *(_DWORD *)(a1 + 7412);
          *(_DWORD *)(a1 + 7444) = v46;
          *(_DWORD *)(a1 + 7448) = v49;
          v599 = v47;
          *(_DWORD *)(a1 + 7452) = v47.i32[0];
          v50 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v50 + 4) = v46;
          v51 = *(_DWORD *)(a1 + 12);
          if (!v51)
          {
            __break(0xC471u);
            JUMPOUT(0x197E5D7D0);
          }
          v52 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v51 - 1) + 9) & 1;
          *(_BYTE *)(v50 + 56) = 0;
          v53 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v50, a1 + 7368, 0, v52, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v53;
          v60 = v48;
          if (v53 == 12)
          {
            v60 = v48;
            if (**(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 888))
            {
              v60 = v48;
              if (!*(_BYTE *)(v10 + 40))
              {
                v274 = *(_DWORD *)(a1 + 7400);
                v275 = *(_DWORD *)(a1 + 7412);
                v276 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v274;
                *(_DWORD *)(a1 + 7448) = v275;
                *(_DWORD *)(a1 + 7452) = v276;
                v277 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v277 + 4) = v274;
                v278 = *(_DWORD *)(a1 + 12);
                if (!v278)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E5D8C0);
                }
                v279 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v278 - 1) + 9) & 1;
                *(_BYTE *)(v277 + 56) = 0;
                v280 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v277, a1 + 7368, 0, v279, v56, v57, v58, v59);
                *(_DWORD *)(a1 + 7368) = v280;
                if (v280 == 12 || (v280 & 0x200) != 0)
                {
                  v60 = *(_QWORD **)(a1 + 7376);
                }
                else
                {
                  if (v280 != 14)
                  {
                    if (v280 == 20 || (v280 & 0x100000) != 0)
                    {
                      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
                    }
                    else if (!*(_QWORD *)(a1 + 7360))
                    {
                      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected an exported name or a module export name string for the export declaration");
                    }
                    goto LABEL_364;
                  }
                  v60 = *(_QWORD **)(a1 + 7376);
                  v514 = (_DWORD *)*v60;
                  if (*v60)
                  {
                    v515 = (unsigned __int16 *)*((_QWORD *)v514 + 1);
                    v516 = v514[1] | ((unint64_t)((v514[4] >> 2) & 1) << 32);
                  }
                  else
                  {
                    v515 = 0;
                    v516 = 0x100000000;
                  }
                  if (WTF::hasUnpairedSurrogate(v515, v516))
                    goto LABEL_456;
                }
                v281 = *(_DWORD *)(a1 + 7400);
                v282 = *(_DWORD *)(a1 + 7412);
                v283 = *(_DWORD *)(a1 + 7404);
                *(_DWORD *)(a1 + 7444) = v281;
                *(_DWORD *)(a1 + 7448) = v282;
                *(_DWORD *)(a1 + 7452) = v283;
                v284 = *(_QWORD *)(a1 + 7288);
                *(_DWORD *)(v284 + 4) = v281;
                v285 = *(_DWORD *)(a1 + 12);
                if (!v285)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197E5D8C8);
                }
                v286 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v285 - 1) + 9) & 1;
                *(_BYTE *)(v284 + 56) = 0;
                *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v284, a1 + 7368, 0, v286, a5, a6, a7, a8);
              }
            }
          }
          v61 = *(_QWORD *)(a1 + 7512);
          v62 = (_DWORD *)*v60;
          if (*v60)
            *v62 += 2;
          v608[0] = v62;
          WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add((uint64_t *)(v61 + 8), (WTF::AtomStringImpl *)v608, v54, v55, v56, v57, v58, v59, (uint64_t)&v605);
          v63 = v606;
          v64 = (WTF::StringImpl *)v608[0];
          v608[0] = 0;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2)
            {
              WTF::StringImpl::~StringImpl(v64, v41, v15, v16, a5, a6, a7, a8);
              WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
            }
            else
            {
              *(_DWORD *)v64 -= 2;
            }
          }
          if (!v63)
          {
            if (!*(_QWORD *)(a1 + 7360))
            {
              *(_QWORD *)&v605 = *v60;
              JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)&v605);
            }
LABEL_364:
            v14 = a1 + 7296;
            if (*v13 == 20 || (*v13 & 0x100000) != 0)
            {
              JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
              v17 = 0;
              goto LABEL_101;
            }
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse the named export");
            goto LABEL_181;
          }
          *(_QWORD *)&v605 = v48;
          *((_QWORD *)&v605 + 1) = v60;
          v65 = HIDWORD(v604[1]);
          if (HIDWORD(v604[1]) == LODWORD(v604[1]))
          {
            v77 = (_OWORD *)WTF::Vector<std::pair<JSC::Identifier const*,JSC::Identifier const*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v604, HIDWORD(v604[1]) + 1, (unint64_t)&v605);
            v65 = HIDWORD(v604[1]);
            *((_OWORD *)v604[0] + HIDWORD(v604[1])) = *v77;
          }
          else
          {
            *((_OWORD *)v604[0] + HIDWORD(v604[1])) = v605;
          }
          HIDWORD(v604[1]) = v65 + 1;
          v66 = *(uint64_t **)(a2 + 8);
          v67 = *v66;
          v68 = v599;
          if ((unint64_t)(v66[1] - *v66) <= 0x2F)
          {
            JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
            v68 = v599;
            v67 = *v66;
          }
          *v66 = v67 + 48;
          *(_DWORD *)(v67 + 8) = v46;
          *(int32x2_t *)(v67 + 12) = vrev64_s32(v68);
          *(_DWORD *)(v67 + 20) = -1;
          *(_BYTE *)(v67 + 24) = 0;
          *(_QWORD *)v67 = &off_1E357B250;
          *(_QWORD *)(v67 + 32) = v48;
          *(_QWORD *)(v67 + 40) = v60;
          *(_QWORD *)&v605 = v67;
          v69 = *(unsigned int *)(v43 + 20);
          if ((_DWORD)v69 == *(_DWORD *)(v43 + 16))
          {
            v86 = (_QWORD *)WTF::Vector<JSC::ExportSpecifierNode *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v595, v69 + 1, (unint64_t)&v605);
            v69 = *(unsigned int *)(v43 + 20);
            *(_QWORD *)(*(_QWORD *)(v43 + 8) + 8 * v69) = *v86;
          }
          else
          {
            *(_QWORD *)(*v595 + 8 * v69) = v67;
          }
          *(_DWORD *)(v43 + 20) = v69 + 1;
          v70 = *v13;
          if (*v13 != 6)
            break;
          v71 = *(_DWORD *)(a1 + 7400);
          v72 = *(_DWORD *)(a1 + 7412);
          v73 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v71;
          *(_DWORD *)(a1 + 7448) = v72;
          *(_DWORD *)(a1 + 7452) = v73;
          v74 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v74 + 4) = v71;
          v75 = *(_DWORD *)(a1 + 12);
          if (!v75)
          {
            __break(0xC471u);
            JUMPOUT(0x197E5D7D8);
          }
          v76 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v75 - 1) + 9) & 1;
          *(_BYTE *)(v74 + 56) = 0;
          v45 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v74, a1 + 7368, 0, v76, a5, a6, a7, a8);
          *(_DWORD *)(a1 + 7368) = v45;
          if (v45 == 1)
            goto LABEL_86;
        }
        if (v70 == 1)
          goto LABEL_86;
        if (v70 != 20 && (v70 & 0x100000) == 0)
        {
          v14 = a1 + 7296;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[11],char const(&)[2],char const(&)[6],char const(&)[4],char const(&)[5],char const(&)[12]>(a1, "export list");
          goto LABEL_181;
        }
        goto LABEL_440;
      }
      v585 = 0;
      v589 = 0;
LABEL_86:
      v137 = *(_DWORD *)(a1 + 7400);
      v138 = *(_DWORD *)(a1 + 7412);
      v139 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v137;
      *(_DWORD *)(a1 + 7448) = v138;
      *(_DWORD *)(a1 + 7452) = v139;
      v140 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v140 + 4) = v137;
      v141 = *(_DWORD *)(a1 + 12);
      if (!v141)
      {
        __break(0xC471u);
        JUMPOUT(0x197E5D8B0);
      }
      v142 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v141 - 1) + 9) & 1;
      *(_BYTE *)(v140 + 56) = 0;
      v143 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v140, a1 + 7368, 0, v142, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v143;
      if (v143 == 12
        && **(_QWORD **)(a1 + 7376) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 1360)
        && !*(_BYTE *)(v10 + 40))
      {
        v446 = *(_DWORD *)(a1 + 7400);
        v447 = *(_DWORD *)(a1 + 7412);
        v448 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v446;
        *(_DWORD *)(a1 + 7448) = v447;
        *(_DWORD *)(a1 + 7452) = v448;
        v449 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v449 + 4) = v446;
        v450 = *(_DWORD *)(a1 + 12);
        if (!v450)
        {
          __break(0xC471u);
          JUMPOUT(0x197E5D8D8);
        }
        v451 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v450 - 1) + 9) & 1;
        *(_BYTE *)(v449 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v449, a1 + 7368, 0, v451, a5, a6, a7, a8);
        v458 = JSC::Parser<JSC::Lexer<char16_t>>::parseModuleName<JSC::ASTBuilder>(a1, a2, v452, v453, v454, v455, v456, v457);
        if (!v458)
        {
          if (*v13 == 20 || (*v13 & 0x100000) != 0)
            goto LABEL_440;
          v14 = a1 + 7296;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the 'from' clause");
LABEL_181:
          v17 = 0;
LABEL_101:
          if (v604[0])
            WTF::fastFree((unint64_t)v604[0], v41, v15, v16, a5, a6, a7, a8);
          goto LABEL_103;
        }
        v459 = v458;
        if (BYTE5(qword_1ECF4C7A0) && (v460 = *(_QWORD *)(a1 + 7288), !*(_BYTE *)(v460 + 56)) && *v13 == 530)
        {
          v483 = *(_DWORD *)(a1 + 7400);
          v484 = *(_DWORD *)(a1 + 7412);
          v485 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v483;
          *(_DWORD *)(a1 + 7448) = v484;
          *(_DWORD *)(a1 + 7452) = v485;
          *(_DWORD *)(v460 + 4) = v483;
          v486 = *(_DWORD *)(a1 + 12);
          if (!v486)
          {
            __break(0xC471u);
            JUMPOUT(0x197E5D8E0);
          }
          v487 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v486 - 1) + 9) & 1;
          *(_BYTE *)(v460 + 56) = 0;
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v460, a1 + 7368, 0, v487, a5, a6, a7, a8);
          v461 = JSC::Parser<JSC::Lexer<char16_t>>::parseImportAttributes<JSC::ASTBuilder>(a1, *(uint64_t **)(a2 + 8), v488, v489, v490, v491, v492, v493);
          if (!v461)
          {
            if (*v13 != 20 && (*v13 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Unable to parse import attributes");
              goto LABEL_441;
            }
LABEL_440:
            JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_441:
            v17 = 0;
            goto LABEL_100;
          }
        }
        else
        {
          v461 = 0;
        }
        if (JSC::Parser<JSC::Lexer<char16_t>>::autoSemiColon(a1, (uint64_t)v41, v15, v16, a5, a6, a7, a8))
        {
          JSC::ASTBuilder::createExportNamedDeclaration(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v607, v43, v459, v461);
          v17 = v462;
LABEL_100:
          v14 = a1 + 7296;
          goto LABEL_101;
        }
        v143 = *v13;
LABEL_157:
        v14 = a1 + 7296;
        if (v143 == 20 || (v143 & 0x100000) != 0)
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
        }
        else if (!*(_QWORD *)(a1 + 7360))
        {
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' following a targeted export declaration");
        }
        goto LABEL_181;
      }
      if (v589)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, "Cannot use module export names if they reference variable names in the current module");
        goto LABEL_441;
      }
      if (v143 == 17)
      {
        v144 = *(_DWORD *)(a1 + 7400);
        v145 = *(_DWORD *)(a1 + 7412);
        v146 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v144;
        *(_DWORD *)(a1 + 7448) = v145;
        *(_DWORD *)(a1 + 7452) = v146;
        v147 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v147 + 4) = v144;
        v148 = *(_DWORD *)(a1 + 12);
        if (!v148)
        {
          __break(0xC471u);
          JUMPOUT(0x197E5D8B8);
        }
        v149 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v148 - 1) + 9) & 1;
        *(_BYTE *)(v147 + 56) = 0;
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v147, a1 + 7368, 0, v149, a5, a6, a7, a8);
      }
      else if (v143 != 1 && v143 != 20 && !*(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
      {
        goto LABEL_157;
      }
      if (!v585)
      {
        if (HIDWORD(v604[1]))
        {
          v150 = v604[0];
          v151 = (WTF *)((char *)v604[0] + 16 * HIDWORD(v604[1]));
          do
          {
            v153 = *(WTF::StringImpl ***)v150;
            v152 = (_QWORD *)*((_QWORD *)v150 + 1);
            v150 = (WTF *)((char *)v150 + 16);
            JSC::ModuleScopeData::exportBinding(*(_QWORD *)(a1 + 7512), *v153, v152, v16, a5, a6, a7, a8);
          }
          while (v150 != v151);
        }
        v154 = *(uint64_t **)(a2 + 8);
        v17 = *v154;
        if ((unint64_t)(v154[1] - *v154) <= 0x3F)
        {
          JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
          v17 = *v154;
        }
        *v154 = v17 + 64;
        *(_DWORD *)(v17 + 8) = v607;
        *(int32x2_t *)(v17 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v607 + 4));
        *(_DWORD *)(v17 + 20) = -1;
        *(_BYTE *)(v17 + 24) = 0;
        *(_DWORD *)(v17 + 28) = -1;
        *(_QWORD *)v17 = &off_1E3589D98;
        *(_QWORD *)(v17 + 32) = 0;
        *(_QWORD *)(v17 + 40) = v43;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        goto LABEL_100;
      }
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot use keyword as exported variable name");
      goto LABEL_441;
    }
    if (v34 <= 540)
      break;
    if (v34 != 191488)
    {
      if (v34 == 541)
      {
        v258 = JSC::Parser<JSC::Lexer<char16_t>>::parseClassDeclaration<JSC::ASTBuilder>(a1, a2, 0, 0);
      }
      else
      {
        if (v34 != 544)
        {
LABEL_260:
          if (v34 == 20 || (v34 & 0x100000) != 0)
            goto LABEL_264;
          if (!*(_QWORD *)(a1 + 7360))
            JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected either a declaration or a variable statement");
          goto LABEL_265;
        }
        v255 = a1;
        v256 = a2;
        v257 = 1;
LABEL_164:
        v258 = JSC::Parser<JSC::Lexer<char16_t>>::parseVariableDeclaration<JSC::ASTBuilder>(v255, v256, v257, 0);
      }
      v15 = v258;
LABEL_166:
      if (!v15)
        goto LABEL_205;
      JSC::ASTBuilder::createExportLocalDeclaration(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v607, v15);
      v17 = v259;
      goto LABEL_103;
    }
    v314 = *(_DWORD *)(a1 + 7400);
    v315 = *(_DWORD *)(a1 + 7412);
    v316 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v314;
    *(_DWORD *)(a1 + 7448) = v315;
    *(_DWORD *)(a1 + 7452) = v316;
    v317 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v317 + 4) = v314;
    v318 = *(_DWORD *)(a1 + 12);
    if (!v318)
    {
      __break(0xC471u);
      JUMPOUT(0x197E5D838);
    }
    v319 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v318 - 1) + 9) & 1;
    *(_BYTE *)(v317 + 56) = 0;
    v320 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v317, a1 + 7368, 0, v319, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 7368) = v320;
    v605 = 0uLL;
    if (v320 != 12)
      goto LABEL_242;
    v321 = v14;
    v322 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
    v323 = **(_QWORD **)(a1 + 7376);
    if (v323 == *(_QWORD *)(v322 + 888))
    {
      if (*(_BYTE *)(v10 + 40))
      {
        v324 = 0;
      }
      else
      {
        v528 = *(_DWORD *)(a1 + 7400);
        v529 = *(_DWORD *)(a1 + 7412);
        v530 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v528;
        *(_DWORD *)(a1 + 7448) = v529;
        *(_DWORD *)(a1 + 7452) = v530;
        v531 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v531 + 4) = v528;
        v532 = *(_DWORD *)(a1 + 12);
        if (!v532)
        {
          __break(0xC471u);
          JUMPOUT(0x197E5D880);
        }
        v533 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v532 - 1) + 9) & 1;
        *(_BYTE *)(v531 + 56) = 0;
        v534 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v531, a1 + 7368, 0, v533, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v534;
        v605 = *v593;
        if (v534 == 12 || (v534 & 0x200) != 0)
        {
          v324 = *(WTF::StringImpl ***)(a1 + 7376);
        }
        else
        {
          if (v534 != 14)
          {
            if (v534 != 20 && (v534 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Expected an exported name or a module export name string for the export declaration");
              goto LABEL_516;
            }
            goto LABEL_515;
          }
          v324 = *(WTF::StringImpl ***)(a1 + 7376);
          v535 = (unint64_t)*v324;
          if (*v324)
          {
            v536 = *(unsigned int *)(v535 + 16);
            v537 = *(unsigned __int16 **)(v535 + 8);
            v535 = *(unsigned int *)(v535 + 4);
            v538 = (v536 >> 2) & 1;
          }
          else
          {
            v537 = 0;
            v538 = 1;
          }
          if (WTF::hasUnpairedSurrogate(v537, v535 | (v538 << 32)))
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[65]>(a1);
            goto LABEL_516;
          }
        }
        v559 = *(_DWORD *)(a1 + 7400);
        v560 = *(_DWORD *)(a1 + 7412);
        v561 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v559;
        *(_DWORD *)(a1 + 7448) = v560;
        *(_DWORD *)(a1 + 7452) = v561;
        v562 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v562 + 4) = v559;
        v563 = *(_DWORD *)(a1 + 12);
        if (!v563)
        {
          __break(0xC471u);
          JUMPOUT(0x197E5D890);
        }
        v564 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v563 - 1) + 9) & 1;
        *(_BYTE *)(v562 + 56) = 0;
        v320 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v562, a1 + 7368, 0, v564, a5, a6, a7, a8);
        *(_DWORD *)(a1 + 7368) = v320;
        if (v320 != 12)
          goto LABEL_241;
        v322 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
        v323 = **(_QWORD **)(a1 + 7376);
      }
    }
    else
    {
      v324 = 0;
    }
    if (v323 != *(_QWORD *)(v322 + 1360))
    {
      v320 = 12;
LABEL_241:
      v14 = v321;
LABEL_242:
      if (v320 != 20 && (v320 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected 'from' before exported module name");
      }
      else
      {
        JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
      }
      v17 = 0;
      goto LABEL_103;
    }
    if (*(_BYTE *)(v10 + 40))
    {
      v320 = 12;
      goto LABEL_241;
    }
    v539 = *(_DWORD *)(a1 + 7400);
    v540 = *(_DWORD *)(a1 + 7412);
    v541 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v539;
    *(_DWORD *)(a1 + 7448) = v540;
    *(_DWORD *)(a1 + 7452) = v541;
    v542 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v542 + 4) = v539;
    v543 = *(_DWORD *)(a1 + 12);
    if (!v543)
    {
      __break(0xC471u);
      JUMPOUT(0x197E5D888);
    }
    v544 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v543 - 1) + 9) & 1;
    *(_BYTE *)(v542 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v542, a1 + 7368, 0, v544, a5, a6, a7, a8);
    v551 = JSC::Parser<JSC::Lexer<char16_t>>::parseModuleName<JSC::ASTBuilder>(a1, a2, v545, v546, v547, v548, v549, v550);
    if (!v551)
    {
      if (*v13 != 20 && (*v13 & 0x100000) == 0)
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the 'from' clause");
        goto LABEL_516;
      }
LABEL_515:
      JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
LABEL_516:
      v17 = 0;
      goto LABEL_517;
    }
    v553 = v551;
    if (BYTE5(qword_1ECF4C7A0) && (v554 = *(_QWORD *)(a1 + 7288), !*(_BYTE *)(v554 + 56)) && *v13 == 530)
    {
      v565 = *(_DWORD *)(a1 + 7400);
      v566 = *(_DWORD *)(a1 + 7412);
      v567 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v565;
      *(_DWORD *)(a1 + 7448) = v566;
      *(_DWORD *)(a1 + 7452) = v567;
      *(_DWORD *)(v554 + 4) = v565;
      v568 = *(_DWORD *)(a1 + 12);
      if (!v568)
      {
        __break(0xC471u);
        JUMPOUT(0x197E5D898);
      }
      v569 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v568 - 1) + 9) & 1;
      *(_BYTE *)(v554 + 56) = 0;
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v554, a1 + 7368, 0, v569, a5, a6, a7, a8);
      v555 = JSC::Parser<JSC::Lexer<char16_t>>::parseImportAttributes<JSC::ASTBuilder>(a1, *(uint64_t **)(a2 + 8), v570, v571, v572, v573, v574, v575);
      if (!v555)
      {
        if (*v13 == 20 || (*v13 & 0x100000) != 0)
          goto LABEL_515;
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Unable to parse import attributes");
        goto LABEL_516;
      }
    }
    else
    {
      v555 = 0;
    }
    if (!JSC::Parser<JSC::Lexer<char16_t>>::autoSemiColon(a1, v552, v15, v16, a5, a6, a7, a8))
    {
      if (*v13 == 20 || (*v13 & 0x100000) != 0)
        goto LABEL_515;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' following a targeted export declaration");
      goto LABEL_516;
    }
    if (v324)
    {
      if (!JSC::Parser<JSC::Lexer<unsigned char>>::exportName(*(_QWORD *)(a1 + 7512), *v324, v15, v16, a5, a6, a7, a8))
      {
        if (!*(_QWORD *)(a1 + 7360))
        {
          v604[0] = *v324;
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[33],WTF::UniquedStringImpl *,char const(&)[2]>(a1, (uint64_t *)v604);
        }
        goto LABEL_516;
      }
      ExportSpecifierList = JSC::ASTBuilder::createExportSpecifierList(*(JSC::ASTBuilder **)(a2 + 8));
      JSC::ASTBuilder::createExportSpecifier(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v605, *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 112, (uint64_t)v324);
      JSC::ASTBuilder::appendExportSpecifier((uint64_t)ExportSpecifierList, v557);
      JSC::ASTBuilder::createExportNamedDeclaration(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v607, (uint64_t)ExportSpecifierList, v553, v555);
    }
    else
    {
      JSC::ASTBuilder::createExportAllDeclaration(*(_QWORD *)(a2 + 8), (uint64_t)&v607, v553, v555);
    }
    v17 = v558;
LABEL_517:
    v14 = v321;
LABEL_103:
    if (!v17)
      goto LABEL_265;
    *(_BYTE *)(v17 + 24) = 1;
    v155 = *(_QWORD *)(v17 + 8);
    v156 = *(_DWORD *)(v17 + 16);
    *(_QWORD *)&v605 = v155;
    DWORD2(v605) = v156;
    v157 = *(_QWORD *)(a1 + 7520);
    if (v157 && (v155 & 0x80000000) == 0)
      JSC::DebuggerPausePositions::appendPause(v157, (uint64_t)&v605);
LABEL_11:
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17) & 1) == 0)
    {
      v18 = v12;
      if (*v12)
        v18 = (uint64_t *)(v12[1] + 32);
      *v18 = v17;
      v12[1] = v17;
    }
  }
  switch(v34)
  {
    case 517:
      v158 = *(_DWORD *)(a1 + 7400);
      v159 = *(_DWORD *)(a1 + 7412);
      v160 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v158;
      *(_DWORD *)(a1 + 7448) = v159;
      *(_DWORD *)(a1 + 7452) = v160;
      v161 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v161 + 4) = v158;
      v162 = *(_DWORD *)(a1 + 12);
      if (!v162)
      {
        __break(0xC471u);
        JUMPOUT(0x197E5D800);
      }
      v163 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v162 - 1) + 9) & 1;
      *(_BYTE *)(v161 + 56) = 0;
      v164 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v161, a1 + 7368, 0, v163, a5, a6, a7, a8);
      v169 = v164;
      *(_DWORD *)(a1 + 7368) = v164;
      if (v164 == 523)
      {
        v333 = *(_OWORD *)(a1 + 7296);
        v602 = *(_DWORD *)(a1 + 7316);
        v606 = *(_QWORD *)(a1 + 7336);
        v334 = *(_OWORD *)(a1 + 7320);
        *(_OWORD *)v604 = v333;
        v605 = v334;
        v598 = *(_BYTE *)v10;
        v592 = *(_BYTE *)(v10 + 1);
        v335 = *(_DWORD *)(a2 + 1052);
        v336 = *(unsigned int *)(a1 + 7404);
        v337 = *(_QWORD *)(a1 + 7288);
        v584 = *(_DWORD *)(a1 + 7408);
        v588 = *(_DWORD *)(v337 + 4);
        v581 = *(_DWORD *)v337;
        v338 = *(_BYTE *)(v337 + 56);
        v339 = *(_DWORD *)(a1 + 7400);
        v340 = *(_DWORD *)(a1 + 7412);
        *(_DWORD *)(a1 + 7444) = v339;
        *(_DWORD *)(a1 + 7448) = v340;
        *(_DWORD *)(a1 + 7452) = v336;
        *(_DWORD *)(v337 + 4) = v339;
        v341 = *(_DWORD *)(a1 + 12);
        if (!v341)
        {
          __break(0xC471u);
          JUMPOUT(0x197E5D840);
        }
        v342 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v341 - 1) + 9) & 1;
        *(_BYTE *)(v337 + 56) = 0;
        v343 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v337, a1 + 7368, 0, v342, v165, v166, v167, v168);
        *(_DWORD *)(a1 + 7368) = v343;
        if (v343 != 191488)
        {
LABEL_333:
          if (v343 == 12)
            v187 = *(WTF::StringImpl ***)(a1 + 7376);
          else
            v187 = 0;
          JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), (WTF::AtomStringImpl *)v584, v336, v344, v165, v166, v167, v168);
          v416 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)v416 = v581;
          *(_BYTE *)(v416 + 56) = v338;
          v417 = *(_DWORD *)(a1 + 7400);
          v418 = *(_DWORD *)(a1 + 7412);
          v419 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v417;
          *(_DWORD *)(a1 + 7448) = v418;
          *(_DWORD *)(a1 + 7452) = v419;
          *(_DWORD *)(v416 + 4) = v417;
          v420 = *(_DWORD *)(a1 + 12);
          if (!v420)
          {
            __break(0xC471u);
            JUMPOUT(0x197E5D850);
          }
          *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v416, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v420 - 1) + 9) & 1, v412, v413, v414, v415);
          *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v588;
          *(_OWORD *)(a1 + 7296) = *(_OWORD *)v604;
          *(_DWORD *)(a1 + 7312) = v335;
          *(_DWORD *)(a1 + 7316) = v602;
          *(_OWORD *)(a1 + 7320) = v605;
          *(_QWORD *)(a1 + 7336) = v606;
          *(_BYTE *)v10 = v598;
          *(_BYTE *)(v10 + 1) = v592;
          *(_DWORD *)(a2 + 1052) = v335;
          v424 = *(WTF::StringImpl **)(a1 + 7360);
          *(_QWORD *)(a1 + 7360) = 0;
          if (v424)
          {
            if (*(_DWORD *)v424 == 2)
            {
              WTF::StringImpl::~StringImpl(v424, v421, v422, v423, v200, v201, v202, v203);
              WTF::fastFree(v438, v439, v440, v441, v442, v443, v444, v445);
            }
            else
            {
              *(_DWORD *)v424 -= 2;
            }
          }
          if (!v187)
            v187 = (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 104);
          if (v169 == 523)
          {
            v425 = *(_DWORD *)(a1 + 7456);
            *(_DWORD *)(a1 + 7456) = 1;
            v426 = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionDeclaration<JSC::ASTBuilder>(a1, a2, 0, 1, 1, 0, v202, v203);
          }
          else
          {
LABEL_345:
            if (*v13 == 541)
            {
              v264 = JSC::Parser<JSC::Lexer<char16_t>>::parseClassDeclaration<JSC::ASTBuilder>(a1, a2, 1, 1);
              goto LABEL_174;
            }
            v428 = *(unsigned int *)(a1 + 7420);
            v429 = *(_DWORD *)(a1 + 7400);
            v430 = *(_DWORD *)(a1 + 7412);
            v431 = *(_DWORD *)(a1 + 7404);
            *(_DWORD *)(a1 + 7444) = v429;
            *(_DWORD *)(a1 + 7448) = v430;
            *(_DWORD *)(a1 + 7452) = v431;
            v432 = *(_QWORD *)(a1 + 7288);
            *(_DWORD *)(v432 + 4) = v429;
            v433 = *(_DWORD *)(a1 + 12);
            if (!v433)
            {
              __break(0xC471u);
              JUMPOUT(0x197E5D858);
            }
            v434 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v433 - 1) + 9) & 1;
            *(_BYTE *)(v432 + 56) = 0;
            *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v432, a1 + 7368, 0, v434, v200, v201, v202, v203);
            v425 = *(_DWORD *)(a1 + 7456);
            *(_DWORD *)(a1 + 7456) = 1;
            v426 = JSC::Parser<JSC::Lexer<char16_t>>::parseAsyncFunctionDeclaration<JSC::ASTBuilder>(a1, a2, v428, 1, 1, 0, v435, v436);
          }
          v264 = v426;
          *(_DWORD *)(a1 + 7456) = v425;
LABEL_174:
          if (!v264)
          {
LABEL_205:
            if (*v13 != 20 && (*v13 & 0x100000) == 0)
            {
              if (!*(_QWORD *)(a1 + 7360))
                JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse the declaration");
              goto LABEL_265;
            }
            goto LABEL_264;
          }
          if (!JSC::Parser<JSC::Lexer<unsigned char>>::exportName(*(_QWORD *)(a1 + 7512), *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 192), v15, v16, a5, a6, a7, a8))
          {
LABEL_351:
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Only one 'default' export is allowed");
            goto LABEL_265;
          }
          JSC::ModuleScopeData::exportBinding(*(_QWORD *)(a1 + 7512), *v187, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 192), v16, a5, a6, a7, a8);
          JSC::ASTBuilder::createExportDefaultDeclaration(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v607, v264, (uint64_t)v187);
          v17 = v272;
          v14 = a1 + 7296;
          goto LABEL_103;
        }
        v345 = *(_DWORD *)(a1 + 7400);
        v346 = *(_DWORD *)(a1 + 7412);
        v347 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v345;
        *(_DWORD *)(a1 + 7448) = v346;
        *(_DWORD *)(a1 + 7452) = v347;
        v348 = *(_QWORD *)(a1 + 7288);
        *(_DWORD *)(v348 + 4) = v345;
        v349 = *(_DWORD *)(a1 + 12);
        if (!v349)
        {
          __break(0xC471u);
          JUMPOUT(0x197E5C6ACLL);
        }
LABEL_332:
        v411 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v349 - 1) + 9) & 1;
        *(_BYTE *)(v348 + 56) = 0;
        v343 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v348, a1 + 7368, 0, v411, v165, v166, v167, v168);
        *v13 = v343;
        goto LABEL_333;
      }
      if (v164 != 12)
      {
        if (v164 != 541)
        {
          v170 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
LABEL_170:
          v187 = (WTF::StringImpl **)(v170 + 104);
          goto LABEL_171;
        }
        v407 = *(_OWORD *)(a1 + 7296);
        v602 = *(_DWORD *)(a1 + 7316);
        v606 = *(_QWORD *)(a1 + 7336);
        v408 = *(_OWORD *)(a1 + 7320);
        *(_OWORD *)v604 = v407;
        v605 = v408;
        v598 = *(_BYTE *)v10;
        v592 = *(_BYTE *)(v10 + 1);
        v335 = *(_DWORD *)(a2 + 1052);
        v336 = *(unsigned int *)(a1 + 7404);
        v348 = *(_QWORD *)(a1 + 7288);
        v584 = *(_DWORD *)(a1 + 7408);
        v588 = *(_DWORD *)(v348 + 4);
        v581 = *(_DWORD *)v348;
        v338 = *(_BYTE *)(v348 + 56);
        v409 = *(_DWORD *)(a1 + 7400);
        v410 = *(_DWORD *)(a1 + 7412);
        *(_DWORD *)(a1 + 7444) = v409;
        *(_DWORD *)(a1 + 7448) = v410;
        *(_DWORD *)(a1 + 7452) = v336;
        *(_DWORD *)(v348 + 4) = v409;
        v349 = *(_DWORD *)(a1 + 12);
        if (!v349)
        {
          __break(0xC471u);
          JUMPOUT(0x197E5D848);
        }
        goto LABEL_332;
      }
      v170 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
      if (**(_QWORD **)(a1 + 7376) != *(_QWORD *)(v170 + 896) || *(_BYTE *)(v10 + 40))
        goto LABEL_170;
      v597 = *(_DWORD *)(a1 + 7316);
      v171 = *(_OWORD *)(a1 + 7320);
      *(_OWORD *)v604 = *(_OWORD *)(a1 + 7296);
      v605 = v171;
      v606 = *(_QWORD *)(a1 + 7336);
      v591 = *(_BYTE *)v10;
      v583 = *(_DWORD *)(a2 + 1052);
      v587 = *(_BYTE *)(v10 + 1);
      v172 = (WTF::AtomStringImpl *)*(unsigned int *)(a1 + 7408);
      v173 = *(unsigned int *)(a1 + 7404);
      v174 = *(_QWORD *)(a1 + 7288);
      v175 = *(_DWORD *)v174;
      v578 = *(_BYTE *)(v174 + 56);
      v580 = *(_DWORD *)(v174 + 4);
      v176 = *(_DWORD *)(a1 + 7400);
      v177 = *(_DWORD *)(a1 + 7412);
      *(_DWORD *)(a1 + 7444) = v176;
      *(_DWORD *)(a1 + 7448) = v177;
      *(_DWORD *)(a1 + 7452) = v173;
      *(_DWORD *)(v174 + 4) = v176;
      v178 = *(_DWORD *)(a1 + 12);
      if (!v178)
      {
        __break(0xC471u);
        JUMPOUT(0x197E5D808);
      }
      v179 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v178 - 1) + 9) & 1;
      *(_BYTE *)(v174 + 56) = 0;
      v180 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v174, a1 + 7368, 0, v179, v165, v166, v167, v168);
      *(_DWORD *)(a1 + 7368) = v180;
      if (v180 == 523 && (v186 = *(_QWORD *)(a1 + 7288), !*(_BYTE *)(v186 + 56)))
      {
        v494 = *(_DWORD *)(a1 + 7400);
        v495 = *(_DWORD *)(a1 + 7412);
        v496 = *(_DWORD *)(a1 + 7404);
        *(_DWORD *)(a1 + 7444) = v494;
        *(_DWORD *)(a1 + 7448) = v495;
        *(_DWORD *)(a1 + 7452) = v496;
        *(_DWORD *)(v186 + 4) = v494;
        v497 = *(_DWORD *)(a1 + 12);
        if (!v497)
        {
          __break(0xC471u);
          JUMPOUT(0x197E5D868);
        }
        v498 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v497 - 1) + 9) & 1;
        *(_BYTE *)(v186 + 56) = 0;
        v499 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v186, a1 + 7368, 0, v498, v182, v183, v184, v185);
        *(_DWORD *)(a1 + 7368) = v499;
        if (v499 == 191488)
        {
          v500 = *(_DWORD *)(a1 + 7400);
          v501 = *(_DWORD *)(a1 + 7412);
          v502 = *(_DWORD *)(a1 + 7404);
          *(_DWORD *)(a1 + 7444) = v500;
          *(_DWORD *)(a1 + 7448) = v501;
          *(_DWORD *)(a1 + 7452) = v502;
          v503 = *(_QWORD *)(a1 + 7288);
          *(_DWORD *)(v503 + 4) = v500;
          v504 = *(_DWORD *)(a1 + 12);
          if (!v504)
          {
            __break(0xC471u);
            JUMPOUT(0x197E5D870);
          }
          v505 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v504 - 1) + 9) & 1;
          *(_BYTE *)(v503 + 56) = 0;
          v499 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v503, a1 + 7368, 0, v505, v182, v183, v184, v185);
          *(_DWORD *)(a1 + 7368) = v499;
        }
        if (v499 == 12)
          v187 = *(WTF::StringImpl ***)(a1 + 7376);
        else
          v187 = 0;
        v576 = 1;
      }
      else
      {
        v187 = 0;
        v576 = 0;
      }
      JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), v172, v173, v181, v182, v183, v184, v185);
      v192 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v192 = v175;
      *(_BYTE *)(v192 + 56) = v578;
      v193 = *(_DWORD *)(a1 + 7400);
      v194 = *(_DWORD *)(a1 + 7412);
      v195 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v193;
      *(_DWORD *)(a1 + 7448) = v194;
      *(_DWORD *)(a1 + 7452) = v195;
      *(_DWORD *)(v192 + 4) = v193;
      v196 = *(_DWORD *)(a1 + 12);
      if (!v196)
      {
        __break(0xC471u);
        JUMPOUT(0x197E5D810);
      }
      *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v192, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v196 - 1) + 9) & 1, v188, v189, v190, v191);
      *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v580;
      *(_OWORD *)(a1 + 7296) = *(_OWORD *)v604;
      *(_DWORD *)(a1 + 7312) = v583;
      *(_DWORD *)(a1 + 7316) = v597;
      *(_OWORD *)(a1 + 7320) = v605;
      *(_QWORD *)(a1 + 7336) = v606;
      *(_BYTE *)v10 = v591;
      *(_BYTE *)(v10 + 1) = v587;
      *(_DWORD *)(a2 + 1052) = v583;
      v204 = *(WTF::StringImpl **)(a1 + 7360);
      *(_QWORD *)(a1 + 7360) = 0;
      if (v204)
      {
        if (*(_DWORD *)v204 == 2)
        {
          WTF::StringImpl::~StringImpl(v204, v197, v198, v199, v200, v201, v202, v203);
          WTF::fastFree(v506, v507, v508, v509, v510, v511, v512, v513);
        }
        else
        {
          *(_DWORD *)v204 -= 2;
        }
      }
      if (!v187)
        v187 = (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 104);
      if ((v576 & 1) != 0)
        goto LABEL_345;
LABEL_171:
      v605 = *v593;
      v604[0] = *(WTF **)(a1 + 7416);
      LODWORD(v604[1]) = *(_DWORD *)(a1 + 7424);
      v260 = JSC::Parser<JSC::Lexer<char16_t>>::parseAssignmentExpression<JSC::ASTBuilder>(a1);
      if (v260)
      {
        v261 = (_QWORD *)v260;
        if (JSC::Parser<JSC::Lexer<char16_t>>::declareVariable(a1, (WTF::AtomStringImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 104), 2, 2, a5, a6, a7, a8) >= 2)goto LABEL_351;
        JSC::ASTBuilder::createAssignResolve(a2, (uint64_t)&v605, (_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 104), v261, (uint64_t *)v604, (uint64_t *)v604, (uint64_t *)(a1 + 7428), 1);
        JSC::ASTBuilder::createExprStatement(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v605, v262, (uint64_t)v604, *(_DWORD *)(a1 + 7432));
        v264 = v263;
        if (!JSC::Parser<JSC::Lexer<char16_t>>::autoSemiColon(a1, v265, v266, v267, v268, v269, v270, v271))
        {
          if (*v13 != 20 && (*v13 & 0x100000) == 0)
          {
            if (!*(_QWORD *)(a1 + 7360))
              JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Expected a ';' following a targeted export declaration");
            goto LABEL_265;
          }
LABEL_264:
          JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
          goto LABEL_265;
        }
        goto LABEL_174;
      }
      if (*v13 == 20 || (*v13 & 0x100000) != 0)
        goto LABEL_264;
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[24]>(a1);
LABEL_265:
      if (*(_QWORD *)(a1 + 7360))
        return 0;
      v351 = *(_QWORD *)(*(_QWORD *)(a1 + 7512) + 16);
      if (!v351)
      {
        v354 = 0;
        LODWORD(v352) = 0;
LABEL_321:
        v353 = (WTF::StringImpl **)(v351 + 24 * v352);
        goto LABEL_273;
      }
      v352 = *(unsigned int *)(v351 - 4);
      v353 = (WTF::StringImpl **)(v351 + 24 * v352);
      if (!*(_DWORD *)(v351 - 12))
      {
        v354 = (WTF::StringImpl **)(v351 + 24 * v352);
        goto LABEL_321;
      }
      v354 = *(WTF::StringImpl ***)(*(_QWORD *)(a1 + 7512) + 16);
      if ((_DWORD)v352)
      {
        v355 = 24 * v352;
        v354 = *(WTF::StringImpl ***)(*(_QWORD *)(a1 + 7512) + 16);
        while ((unint64_t)*v354 + 1 <= 1)
        {
          v354 += 3;
          v355 -= 24;
          if (!v355)
          {
            v354 = v353;
            break;
          }
        }
      }
LABEL_273:
      if (v351)
        v356 = (WTF::StringImpl **)(v351 + 24 * *(unsigned int *)(v351 - 4));
      else
        v356 = 0;
      if (v356 == v354)
        return v12;
      while (2)
      {
        v357 = *(_DWORD *)(a1 + 12);
        if (!v357)
        {
          __break(0xC471u);
          JUMPOUT(0x197E5D8F8);
        }
        hasDeclaredVariable = JSC::Scope::hasDeclaredVariable(*(_QWORD *)a1 + 720 * (v357 - 1), *v354, v15, v16, a5, a6, a7, a8);
        v360 = *(_DWORD *)(a1 + 12);
        if (hasDeclaredVariable)
        {
          if (!v360)
          {
            __break(0xC471u);
            JUMPOUT(0x197E5D900);
          }
          v373 = (uint64_t *)(*(_QWORD *)a1 + 720 * (v360 - 1) + 120);
          goto LABEL_295;
        }
        if (!v360)
        {
          __break(0xC471u);
          JUMPOUT(0x197E5D8E8);
        }
        v361 = (uint64_t *)(*(_QWORD *)a1 + 720 * (v360 - 1) + 144);
        v362 = *v354;
        if (*v354)
        {
          v363 = *(_DWORD *)v362;
          *(_DWORD *)v362 += 2;
          v364 = *v361;
          if (!v364)
          {
            if (v363)
            {
              *(_DWORD *)v362 = v363;
            }
            else
            {
              WTF::StringImpl::~StringImpl(v362, v359, v15, v16, a5, a6, a7, a8);
              WTF::fastFree(v383, v384, v385, v386, v387, v388, v389, v390);
            }
            goto LABEL_314;
          }
        }
        else
        {
          v364 = *v361;
          if (!v364)
            goto LABEL_314;
        }
        v365 = *((_DWORD *)v362 + 4);
        if ((v365 & 0x20) != 0)
          v365 = *((_DWORD *)v362 + 8);
        v366 = *(_DWORD *)(v364 - 8);
        v367 = v366 & (v365 >> 8);
        v368 = *(WTF::StringImpl **)(v364 + 16 * v367);
        if (v368 == v362)
        {
          v371 = *(_DWORD *)v362 - 2;
          if (*(_DWORD *)v362 == 2)
          {
            WTF::StringImpl::~StringImpl(v362, v359, v15, v16, a5, a6, a7, a8);
            WTF::fastFree(v399, v400, v401, v402, v403, v404, v405, v406);
          }
          else
          {
LABEL_292:
            *(_DWORD *)v362 = v371;
          }
LABEL_293:
          v372 = *(_DWORD *)(a1 + 12);
          if (!v372)
          {
            __break(0xC471u);
            JUMPOUT(0x197E5D8F0);
          }
          v373 = (uint64_t *)(*(_QWORD *)a1 + 720 * (v372 - 1) + 144);
LABEL_295:
          v374 = *v373;
          if (!v374)
            goto LABEL_324;
          v375 = *v354;
          v376 = *((_DWORD *)*v354 + 4);
          if ((v376 & 0x20) != 0)
            v376 = *((_DWORD *)v375 + 8);
          v377 = *(_DWORD *)(v374 - 8);
          v378 = v377 & (v376 >> 8);
          v379 = *(WTF::StringImpl **)(v374 + 16 * v378);
          if (v379 != v375)
          {
            v380 = 1;
            while (v379)
            {
              v378 = ((_DWORD)v378 + v380) & v377;
              v379 = *(WTF::StringImpl **)(v374 + 16 * v378);
              ++v380;
              if (v379 == v375)
                goto LABEL_304;
            }
            v378 = *(unsigned int *)(v374 - 4);
          }
LABEL_304:
          if (v378 == *(_DWORD *)(v374 - 4))
          {
LABEL_324:
            __break(0xC471u);
            JUMPOUT(0x197E5C978);
          }
          *(_WORD *)(v374 + 16 * v378 + 8) |= 0x10u;
          v381 = v354 + 3;
          v354 = v353;
          if (v381 != v353)
          {
            v354 = v381;
            while ((unint64_t)*v354 + 1 <= 1)
            {
              v354 += 3;
              if (v354 == v353)
              {
                v354 = v353;
                break;
              }
            }
          }
          if (v354 == v356)
            return v12;
          continue;
        }
        break;
      }
      v369 = 1;
      do
      {
        v370 = v368;
        if (!v368)
        {
          if (!v362)
            goto LABEL_314;
          if (*(_DWORD *)v362 != 2)
          {
            *(_DWORD *)v362 -= 2;
            goto LABEL_314;
          }
          goto LABEL_328;
        }
        v367 = (v367 + v369) & v366;
        v368 = *(WTF::StringImpl **)(v364 + 16 * v367);
        ++v369;
      }
      while (v368 != v362);
      if (!v362)
        goto LABEL_293;
      v371 = *(_DWORD *)v362 - 2;
      if (*(_DWORD *)v362 != 2)
        goto LABEL_292;
LABEL_328:
      WTF::StringImpl::~StringImpl(v362, v359, v15, v16, a5, a6, a7, a8);
      WTF::fastFree(v391, v392, v393, v394, v395, v396, v397, v398);
      if (v370)
        goto LABEL_293;
LABEL_314:
      if (!*(_QWORD *)(a1 + 7360))
      {
        *(_QWORD *)&v605 = *v354;
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[19],WTF::UniquedStringImpl *,char const(&)[50]>(a1, (uint64_t *)&v605);
      }
      return 0;
    case 518:
    case 519:
    case 522:
      goto LABEL_260;
    case 520:
      v255 = a1;
      v256 = a2;
      v257 = 0;
      goto LABEL_164;
    case 521:
      v255 = a1;
      v256 = a2;
      v257 = 2;
      goto LABEL_164;
    case 523:
      v273 = *(_DWORD *)(a1 + 7456);
      *(_DWORD *)(a1 + 7456) = 1;
      v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionDeclaration<JSC::ASTBuilder>(a1, a2, 0, 0, 0, 0, a7, a8);
      *(_DWORD *)(a1 + 7456) = v273;
      goto LABEL_166;
    default:
      if (v34 != 12
        || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896)
        || *(_BYTE *)(v10 + 40))
      {
        goto LABEL_260;
      }
      v305 = *(unsigned int *)(a1 + 7420);
      v306 = *(_DWORD *)(a1 + 7400);
      v307 = *(_DWORD *)(a1 + 7412);
      v308 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v306;
      *(_DWORD *)(a1 + 7448) = v307;
      *(_DWORD *)(a1 + 7452) = v308;
      v309 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)(v309 + 4) = v306;
      v310 = *(_DWORD *)(a1 + 12);
      if (!v310)
      {
        __break(0xC471u);
        JUMPOUT(0x197E5D8D0);
      }
      v311 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v310 - 1) + 9) & 1;
      *(_BYTE *)(v309 + 56) = 0;
      v312 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v309, a1 + 7368, 0, v311, a5, a6, a7, a8);
      *(_DWORD *)(a1 + 7368) = v312;
      if (v312 != 523 || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
      {
        if (!*(_QWORD *)(a1 + 7360))
          JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[88]>(a1);
        goto LABEL_265;
      }
      v313 = *(_DWORD *)(a1 + 7456);
      *(_DWORD *)(a1 + 7456) = 1;
      v15 = JSC::Parser<JSC::Lexer<char16_t>>::parseAsyncFunctionDeclaration<JSC::ASTBuilder>(a1, a2, v305, 0, 0, 0, a7, a8);
      *(_DWORD *)(a1 + 7456) = v313;
      goto LABEL_166;
  }
}

_QWORD *JSC::Parser<JSC::Lexer<char16_t>>::parseGeneratorFunctionSourceElements<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, WTF::AtomStringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int32x2_t *v51;
  int v52;
  int v53;
  uint64_t v54;
  char v55;
  char v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  _QWORD *v64;
  uint64_t v65;
  int v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  char v75;
  int32x2_t *v76;
  _QWORD *v77;
  int v78;
  uint64_t GeneratorFunctionBody;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  char v99;
  char v100;
  char v101;
  int v102;
  int v103;
  int v104;
  WTF::AtomStringImpl **v105;
  int v106;
  _BYTE v107[24];
  WTF *v108;
  int v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  int v113;
  __int128 v114;
  _QWORD v115[3];
  WTF *v116;
  int v117;

  v11 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD **)v11;
  v12 = *(_QWORD *)(v11 + 8);
  if ((unint64_t)(v12 - *(_QWORD *)v11) <= 0xF)
  {
    if (v12)
    {
      v86 = (_QWORD *)(v11 + 24);
      v87 = v12 - 8000;
      v110 = v12 - 8000;
      v88 = *(unsigned int *)(v11 + 36);
      if ((_DWORD)v88 == *(_DWORD *)(v11 + 32))
      {
        v96 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v86, v88 + 1, (unint64_t)&v110);
        v88 = *(unsigned int *)(v11 + 36);
        *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8 * v88) = *v96;
      }
      else
      {
        *(_QWORD *)(*v86 + 8 * v88) = v87;
      }
      *(_DWORD *)(v11 + 36) = v88 + 1;
    }
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x1F40);
    *(_QWORD *)(v11 + 8) = v13 + 1000;
  }
  *(_QWORD *)v11 = v13 + 2;
  *v13 = 0;
  v13[1] = 0;
  v14 = *(_DWORD *)(a1 + 7408);
  v114 = *(_OWORD *)(a1 + 7400);
  v15 = *(_QWORD *)(a1 + 7416);
  v16 = *(_DWORD *)(a1 + 7424);
  v17 = *(_DWORD *)(a1 + 7404);
  v113 = 0;
  v112 = 0u;
  v111 = 0u;
  v110 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
  JSC::Parser<JSC::Lexer<unsigned char>>::createGeneratorParameters<JSC::ASTBuilder>(a1, a2, (_DWORD *)&v111 + 2, a4, a5, a6, a7, a8);
  v18 = *(_DWORD *)(a1 + 7400);
  LODWORD(v112) = v14;
  DWORD2(v112) = v18;
  v19 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  if (*(_DWORD *)(v19 + 12) <= v20)
  {
    __break(0xC471u);
    goto LABEL_56;
  }
  *(_DWORD *)(*(_QWORD *)v19 + 720 * v20 + 10) = *(_DWORD *)(*(_QWORD *)v19 + 720 * v20 + 10) & 0xFE8F007F | 0x408780;
  v26 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v26)
  {
    __break(0xC471u);
    JUMPOUT(0x197E5DEFCLL);
  }
  if ((_DWORD)v26 != 1)
  {
    v27 = v26 - 1;
    v28 = *(_QWORD *)a1;
    if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v26 - 1) + 10) & 0x400000) != 0)
    {
      v29 = 720 * v26;
      while (1)
      {
        v30 = v29 - 720;
        if (v29 == 720)
          break;
        v31 = *(_BYTE *)(v28 + v29 - 1428);
        v29 -= 720;
        if ((v31 & 0x40) != 0)
        {
          if (*(_BYTE *)(v28 + v30 - 712) != 2)
            *(_BYTE *)(v28 + 720 * v27 + 8) = 0;
          break;
        }
      }
    }
  }
  if (*(_DWORD *)(v19 + 12) <= v20)
  {
    __break(0xC471u);
    JUMPOUT(0x197E5DF04);
  }
  v32 = *(_QWORD *)v19 + 720 * v20;
  *(_BYTE *)(v32 + 15) = 0;
  *(_DWORD *)(v32 + 20) = *(_DWORD *)(a1 + 7484);
  v115[0] = *(_QWORD *)(a1 + 7216);
  if (JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::SyntaxChecker>(a1, (uint64_t)v115, 0, v21, v22, v23, v24, v25))
  {
    JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v107, (uint64_t *)a1, 1, v33, v34, v35, v36, v37);
    v45 = v108;
    if (v108)
    {
      v108 = 0;
      v109 = 0;
      WTF::fastFree((unint64_t)v45, v38, v39, v40, v41, v42, v43, v44);
    }
    v105 = a3;
    v106 = v16;
    JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v107, (WTF::AtomStringImpl *)v38, v39, v40, v41, v42, v43, v44);
    v50 = *(_DWORD *)(a1 + 12);
    if (v50)
    {
      v51 = (int32x2_t *)(a1 + 7404);
      v52 = *(_DWORD *)(a1 + 7408);
      v53 = *(_DWORD *)(a1 + 7404);
      v54 = *(_QWORD *)a1 + 720 * (v50 - 1);
      v55 = *(_BYTE *)(v54 + 8);
      v56 = *(_BYTE *)(v54 + 9);
      v57 = *(_DWORD *)(a1 + 7484);
      v58 = DWORD2(v111);
      v59 = *(_QWORD *)(a2 + 8);
      v61 = *(_QWORD *)v59;
      v60 = *(_QWORD *)(v59 + 8);
      if ((unint64_t)(v60 - *(_QWORD *)v59) <= 0x8F)
      {
        v89 = v55;
        v99 = v56;
        v102 = *(_DWORD *)(a1 + 7484);
        v104 = DWORD2(v111);
        if (v60)
        {
          v90 = (_QWORD *)(v59 + 24);
          v91 = v60 - 8000;
          v115[0] = v60 - 8000;
          v92 = *(unsigned int *)(v59 + 36);
          if ((_DWORD)v92 == *(_DWORD *)(v59 + 32))
          {
            v97 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v90, v92 + 1, (unint64_t)v115);
            v92 = *(unsigned int *)(v59 + 36);
            *(_QWORD *)(*(_QWORD *)(v59 + 24) + 8 * v92) = *v97;
          }
          else
          {
            *(_QWORD *)(*v90 + 8 * v92) = v91;
          }
          *(_DWORD *)(v59 + 36) = v92 + 1;
        }
        v61 = WTF::fastMalloc((WTF *)0x1F40);
        *(_QWORD *)(v59 + 8) = v61 + 8000;
        LOBYTE(v57) = v102;
        v58 = v104;
        v56 = v99;
        v55 = v89;
        v51 = (int32x2_t *)(a1 + 7404);
      }
      v62 = v14 - v17;
      v63 = v52 - v53;
      *(_QWORD *)v59 = v61 + 144;
      v115[0] = v61;
      v64 = (_QWORD *)(v59 + 40);
      v65 = *(unsigned int *)(v59 + 52);
      if ((_DWORD)v65 == *(_DWORD *)(v59 + 48))
      {
        v101 = v57;
        v103 = v58;
        v75 = v56;
        v100 = v55;
        v76 = v51;
        v77 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, v65 + 1, (unint64_t)v115);
        v51 = v76;
        v55 = v100;
        LOBYTE(v57) = v101;
        v56 = v75;
        v65 = *(unsigned int *)(v59 + 52);
        *(_QWORD *)(*(_QWORD *)(v59 + 40) + 8 * v65) = *v77;
        v58 = v103;
      }
      else
      {
        *(_QWORD *)(*v64 + 8 * v65) = v61;
      }
      *(_DWORD *)(v59 + 52) = v65 + 1;
      *(_DWORD *)(v61 + 16) = *(_DWORD *)(a1 + 7400);
      *(int32x2_t *)(v61 + 20) = vrev64_s32(*v51);
      *(_DWORD *)(v61 + 28) = -1;
      *(_BYTE *)(v61 + 32) = 0;
      *(_QWORD *)v61 = &off_1E3596470;
      *(_QWORD *)(v61 + 8) = &unk_1E3596490;
      *(_WORD *)(v61 + 33) = v55 & 3 | (4 * (v56 & 3)) & 0xEF | (16 * (v57 & 1)) | *(_WORD *)(v61 + 33) & 0xF800;
      *(_BYTE *)(v61 + 35) = 1;
      *(_QWORD *)(v61 + 40) = 0;
      *(_QWORD *)(v61 + 48) = 0;
      *(_DWORD *)(v61 + 56) = v62;
      *(_DWORD *)(v61 + 60) = v63;
      *(_DWORD *)(v61 + 64) = v14;
      *(_DWORD *)(v61 + 68) = v14;
      *(_DWORD *)(v61 + 72) = v14;
      *(_QWORD *)(v61 + 80) = 0;
      *(_QWORD *)(v61 + 88) = 0;
      *(_QWORD *)(v61 + 96) = -1;
      *(_QWORD *)(v61 + 104) = 0;
      *(_QWORD *)(v61 + 112) = 0;
      *(_QWORD *)(v61 + 120) = -1;
      *(_DWORD *)(v61 + 128) = DWORD2(v114);
      *(_DWORD *)(v61 + 132) = v58;
      *(_DWORD *)(v61 + 136) = 0;
      *(_QWORD *)&v111 = v61;
      v78 = *(_DWORD *)(a1 + 7380);
      HIDWORD(v112) = *(_DWORD *)(a1 + 7400);
      v113 = v62;
      DWORD1(v112) = v78;
      GeneratorFunctionBody = JSC::ASTBuilder::createGeneratorFunctionBody(a2, (uint64_t)&v114, (uint64_t)&v110, v105, v46, v47, v48, v49);
      v80 = *(_DWORD *)(a1 + 7444);
      v81 = *(_QWORD *)(a2 + 8);
      v82 = *(_QWORD *)v81;
      v83 = *(_QWORD *)(v81 + 8);
      if ((unint64_t)(v83 - *(_QWORD *)v81) <= 0x2F)
      {
        if (v83)
        {
          v93 = (_QWORD *)(v81 + 24);
          v94 = v83 - 8000;
          v115[0] = v83 - 8000;
          v95 = *(unsigned int *)(v81 + 36);
          if ((_DWORD)v95 == *(_DWORD *)(v81 + 32))
          {
            v98 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v95 + 1, (unint64_t)v115);
            v95 = *(unsigned int *)(v81 + 36);
            *(_QWORD *)(*(_QWORD *)(v81 + 24) + 8 * v95) = *v98;
          }
          else
          {
            *(_QWORD *)(*v93 + 8 * v95) = v94;
          }
          *(_DWORD *)(v81 + 36) = v95 + 1;
        }
        v82 = WTF::fastMalloc((WTF *)0x1F40);
        *(_QWORD *)(v81 + 8) = v82 + 8000;
      }
      *(_QWORD *)v81 = v82 + 48;
      *(_BYTE *)(v82 + 24) = 0;
      *(_QWORD *)v82 = &off_1E35899B8;
      *(_QWORD *)(v82 + 32) = 0;
      *(_QWORD *)(v82 + 40) = GeneratorFunctionBody;
      *(_DWORD *)(v82 + 28) = v80;
      *(_QWORD *)(v82 + 8) = v15;
      *(_DWORD *)(v82 + 16) = v106;
      *(_DWORD *)(v82 + 20) = -1;
      if (*v13)
      {
        v84 = v13 + 1;
        *(_QWORD *)(v13[1] + 32) = v82;
      }
      else
      {
        *v13 = v82;
        v84 = v13 + 1;
      }
      *v84 = v82;
      return v13;
    }
    __break(0xC471u);
LABEL_56:
    JUMPOUT(0x197E5DEF4);
  }
  v66 = *(_DWORD *)(a1 + 7368);
  if (v66 == 20 || (v66 & 0x100000) != 0)
  {
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
  }
  else if (!*(_QWORD *)(a1 + 7360))
  {
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of a generator");
  }
  JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v115, (uint64_t *)a1, 0, v33, v34, v35, v36, v37);
  v74 = v116;
  if (v116)
  {
    v116 = 0;
    v117 = 0;
    WTF::fastFree((unint64_t)v74, v67, v68, v69, v70, v71, v72, v73);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v115, (WTF::AtomStringImpl *)v67, v68, v69, v70, v71, v72, v73);
  return 0;
}

_QWORD *JSC::Parser<JSC::Lexer<char16_t>>::parseAsyncGeneratorFunctionSourceElements<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int32x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  __int8 v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  char v55;
  char v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  _QWORD *v64;
  uint64_t v65;
  int v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  char v75;
  char v76;
  _QWORD *v77;
  int v78;
  uint64_t FunctionExpr;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  char v98;
  char v99;
  int32x2_t *v100;
  char v101;
  int v102;
  int v103;
  int v104;
  int v105;
  __int8 v106;
  _BYTE v107[24];
  WTF *v108;
  int v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  int v113;
  __int128 v114;
  _QWORD v115[3];
  WTF *v116;
  int v117;

  v10 = (int32x2_t *)(a1 + 7404);
  v11 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD **)v11;
  v12 = *(_QWORD *)(v11 + 8);
  if ((unint64_t)(v12 - *(_QWORD *)v11) <= 0xF)
  {
    if (v12)
    {
      v86 = (_QWORD *)(v11 + 24);
      v87 = v12 - 8000;
      v110 = v12 - 8000;
      v88 = *(unsigned int *)(v11 + 36);
      if ((_DWORD)v88 == *(_DWORD *)(v11 + 32))
      {
        v95 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v86, v88 + 1, (unint64_t)&v110);
        v88 = *(unsigned int *)(v11 + 36);
        *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8 * v88) = *v95;
      }
      else
      {
        *(_QWORD *)(*v86 + 8 * v88) = v87;
      }
      *(_DWORD *)(v11 + 36) = v88 + 1;
    }
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x1F40);
    *(_QWORD *)(v11 + 8) = v13 + 1000;
  }
  *(_QWORD *)v11 = v13 + 2;
  *v13 = 0;
  v13[1] = 0;
  v14 = *(_DWORD *)(a1 + 7408);
  v114 = *(_OWORD *)(a1 + 7400);
  v15 = *(_QWORD *)(a1 + 7416);
  v16 = *(_DWORD *)(a1 + 7424);
  v17 = *(_DWORD *)(a1 + 7404);
  v113 = 0;
  v112 = 0u;
  v111 = 0u;
  v110 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
  JSC::Parser<JSC::Lexer<unsigned char>>::createGeneratorParameters<JSC::ASTBuilder>(a1, a2, (_DWORD *)&v111 + 2, a4, a5, a6, a7, a8);
  v18 = *(_DWORD *)(a1 + 7400);
  LODWORD(v112) = v14;
  DWORD2(v112) = v18;
  v19 = v10[8].i8[6];
  v10[8].i8[6] = 15;
  v20 = JSC::Parser<JSC::Lexer<unsigned char>>::pushScope(a1);
  if (*(_DWORD *)(v20 + 12) <= v21)
  {
    __break(0xC471u);
    goto LABEL_56;
  }
  JSC::Scope::setSourceParseMode(*(_QWORD *)v20 + 720 * v21, v10[8].u8[6]);
  v27 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v27)
  {
    __break(0xC471u);
    JUMPOUT(0x197E5E4A0);
  }
  if ((_DWORD)v27 != 1)
  {
    v28 = v27 - 1;
    v29 = *(_QWORD *)a1;
    if ((*(_DWORD *)(*(_QWORD *)a1 + 720 * (v27 - 1) + 10) & 0x400000) != 0)
    {
      v30 = 720 * v27;
      while (1)
      {
        v31 = v30 - 720;
        if (v30 == 720)
          break;
        v32 = *(_BYTE *)(v29 + v30 - 1428);
        v30 -= 720;
        if ((v32 & 0x40) != 0)
        {
          if (*(_BYTE *)(v29 + v31 - 712) != 2)
            *(_BYTE *)(v29 + 720 * v28 + 8) = 0;
          break;
        }
      }
    }
  }
  v115[0] = *(_QWORD *)(a1 + 7216);
  if (*(_QWORD *)(a1 + 7520))
  {
    if (JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::ASTBuilder>(a1, a2, 0, v22, v23, v24, v25, v26))
    {
LABEL_13:
      JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v107, (uint64_t *)a1, 1, v33, v34, v35, v36, v37);
      v45 = v108;
      if (v108)
      {
        v108 = 0;
        v109 = 0;
        WTF::fastFree((unint64_t)v45, v38, v39, v40, v41, v42, v43, v44);
      }
      v105 = v16;
      v106 = v19;
      JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v107, (WTF::AtomStringImpl *)v38, v39, v40, v41, v42, v43, v44);
      v51 = *(_DWORD *)(a1 + 12);
      if (v51)
      {
        v52 = *(_DWORD *)(a1 + 7408);
        v53 = *(_DWORD *)(a1 + 7404);
        v54 = *(_QWORD *)a1 + 720 * (v51 - 1);
        v55 = *(_BYTE *)(v54 + 8);
        v56 = *(_BYTE *)(v54 + 9);
        v57 = *(_DWORD *)(a1 + 7484);
        v58 = DWORD2(v111);
        v59 = *(_QWORD *)(a2 + 8);
        v61 = *(_QWORD *)v59;
        v60 = *(_QWORD *)(v59 + 8);
        if ((unint64_t)(v60 - *(_QWORD *)v59) <= 0x8F)
        {
          v98 = v55;
          v99 = v56;
          v102 = *(_DWORD *)(a1 + 7484);
          v104 = DWORD2(v111);
          if (v60)
          {
            v89 = (_QWORD *)(v59 + 24);
            v90 = v60 - 8000;
            v115[0] = v60 - 8000;
            v91 = *(unsigned int *)(v59 + 36);
            if ((_DWORD)v91 == *(_DWORD *)(v59 + 32))
            {
              v96 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v89, v91 + 1, (unint64_t)v115);
              v91 = *(unsigned int *)(v59 + 36);
              *(_QWORD *)(*(_QWORD *)(v59 + 24) + 8 * v91) = *v96;
            }
            else
            {
              *(_QWORD *)(*v89 + 8 * v91) = v90;
            }
            *(_DWORD *)(v59 + 36) = v91 + 1;
          }
          v61 = WTF::fastMalloc((WTF *)0x1F40);
          *(_QWORD *)(v59 + 8) = v61 + 8000;
          v56 = v99;
          LOBYTE(v57) = v102;
          v58 = v104;
          v55 = v98;
        }
        v62 = v14 - v17;
        v63 = v52 - v53;
        *(_QWORD *)v59 = v61 + 144;
        v115[0] = v61;
        v64 = (_QWORD *)(v59 + 40);
        v65 = *(unsigned int *)(v59 + 52);
        if ((_DWORD)v65 == *(_DWORD *)(v59 + 48))
        {
          v101 = v57;
          v103 = v58;
          v100 = v10;
          v75 = v56;
          v76 = v55;
          v77 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, v65 + 1, (unint64_t)v115);
          v55 = v76;
          v56 = v75;
          v10 = v100;
          v65 = *(unsigned int *)(v59 + 52);
          *(_QWORD *)(*(_QWORD *)(v59 + 40) + 8 * v65) = *v77;
          LOBYTE(v57) = v101;
          v58 = v103;
        }
        else
        {
          *(_QWORD *)(*v64 + 8 * v65) = v61;
        }
        *(_DWORD *)(v59 + 52) = v65 + 1;
        *(_DWORD *)(v61 + 16) = *(_DWORD *)(a1 + 7400);
        *(int32x2_t *)(v61 + 20) = vrev64_s32(*v10);
        *(_DWORD *)(v61 + 28) = -1;
        *(_BYTE *)(v61 + 32) = 0;
        *(_QWORD *)v61 = &off_1E3596470;
        *(_QWORD *)(v61 + 8) = &unk_1E3596490;
        *(_WORD *)(v61 + 33) = v55 & 3 | (4 * (v56 & 3)) & 0xEF | (16 * (v57 & 1)) | *(_WORD *)(v61 + 33) & 0xF800;
        *(_BYTE *)(v61 + 35) = 15;
        *(_QWORD *)(v61 + 40) = 0;
        *(_QWORD *)(v61 + 48) = 0;
        *(_DWORD *)(v61 + 56) = v62;
        *(_DWORD *)(v61 + 60) = v63;
        *(_DWORD *)(v61 + 64) = v14;
        *(_DWORD *)(v61 + 68) = v14;
        *(_DWORD *)(v61 + 72) = v14;
        *(_QWORD *)(v61 + 80) = 0;
        *(_QWORD *)(v61 + 88) = 0;
        *(_QWORD *)(v61 + 96) = -1;
        *(_QWORD *)(v61 + 104) = 0;
        *(_QWORD *)(v61 + 112) = 0;
        *(_QWORD *)(v61 + 120) = -1;
        *(_DWORD *)(v61 + 128) = DWORD2(v114);
        *(_DWORD *)(v61 + 132) = v58;
        *(_DWORD *)(v61 + 136) = 0;
        *(_QWORD *)&v111 = v61;
        v78 = *(_DWORD *)(a1 + 7380);
        HIDWORD(v112) = *(_DWORD *)(a1 + 7400);
        v113 = v62;
        DWORD1(v112) = v78;
        FunctionExpr = JSC::ASTBuilder::createFunctionExpr(a2, (uint64_t)&v114, (uint64_t)&v110, v46, v47, v48, v49, v50);
        v80 = *(_DWORD *)(a1 + 7444);
        v81 = *(_QWORD *)(a2 + 8);
        v82 = *(_QWORD *)v81;
        v83 = *(_QWORD *)(v81 + 8);
        if ((unint64_t)(v83 - *(_QWORD *)v81) < 0x30)
        {
          if (v83)
          {
            v92 = (_QWORD *)(v81 + 24);
            v93 = v83 - 8000;
            v115[0] = v83 - 8000;
            v94 = *(unsigned int *)(v81 + 36);
            if ((_DWORD)v94 == *(_DWORD *)(v81 + 32))
            {
              v97 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v92, v94 + 1, (unint64_t)v115);
              v94 = *(unsigned int *)(v81 + 36);
              *(_QWORD *)(*(_QWORD *)(v81 + 24) + 8 * v94) = *v97;
            }
            else
            {
              *(_QWORD *)(*v92 + 8 * v94) = v93;
            }
            *(_DWORD *)(v81 + 36) = v94 + 1;
          }
          v82 = WTF::fastMalloc((WTF *)0x1F40);
          *(_QWORD *)(v81 + 8) = v82 + 8000;
        }
        *(_QWORD *)v81 = v82 + 48;
        *(_BYTE *)(v82 + 24) = 0;
        *(_QWORD *)v82 = &off_1E35899B8;
        *(_QWORD *)(v82 + 32) = 0;
        *(_QWORD *)(v82 + 40) = FunctionExpr;
        *(_DWORD *)(v82 + 28) = v80;
        *(_QWORD *)(v82 + 8) = v15;
        *(_DWORD *)(v82 + 16) = v105;
        *(_DWORD *)(v82 + 20) = -1;
        if (*v13)
        {
          v84 = v13 + 1;
          *(_QWORD *)(v13[1] + 32) = v82;
        }
        else
        {
          *v13 = v82;
          v84 = v13 + 1;
        }
        v19 = v106;
        *v84 = v82;
        goto LABEL_34;
      }
      __break(0xC471u);
LABEL_56:
      JUMPOUT(0x197E5E498);
    }
  }
  else if (JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::SyntaxChecker>(a1, (uint64_t)v115, 0, v22, v23, v24, v25, v26))
  {
    goto LABEL_13;
  }
  v66 = *(_DWORD *)(a1 + 7368);
  if (v66 == 20 || (v66 & 0x100000) != 0)
  {
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
  }
  else if (!*(_QWORD *)(a1 + 7360))
  {
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse the body of async function");
  }
  JSC::Parser<JSC::Lexer<char16_t>>::popScopeInternal((uint64_t)v115, (uint64_t *)a1, 0, v33, v34, v35, v36, v37);
  v74 = v116;
  if (v116)
  {
    v116 = 0;
    v117 = 0;
    WTF::fastFree((unint64_t)v74, v67, v68, v69, v70, v71, v72, v73);
  }
  JSC::VariableEnvironment::~VariableEnvironment((JSC::VariableEnvironment *)v115, (WTF::AtomStringImpl *)v67, v68, v69, v70, v71, v72, v73);
  v13 = 0;
LABEL_34:
  v10[8].i8[6] = v19;
  return v13;
}

_QWORD *JSC::Parser<JSC::Lexer<char16_t>>::parseSingleFunction<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD **)v11;
  if (*(_QWORD *)(v11 + 8) - *(_QWORD *)v11 <= 0xFuLL)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v12 = *(_QWORD **)v11;
  }
  *(_QWORD *)v11 = v12 + 2;
  *v12 = 0;
  v12[1] = 0;
  v13 = *(_DWORD *)(a1 + 7368);
  if (v13 == 523)
  {
    v14 = (_DWORD *)JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionDeclaration<JSC::ASTBuilder>(a1, a2, 0, 1, 0, a3, a7, a8);
    goto LABEL_5;
  }
  if (v13 != 12
    || **(_QWORD **)(a1 + 7376) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 896)
    || *(_BYTE *)(a1 + 7384))
  {
    goto LABEL_16;
  }
  v18 = *(unsigned int *)(a1 + 7420);
  v19 = *(_DWORD *)(a1 + 7400);
  v20 = *(_DWORD *)(a1 + 7412);
  v21 = *(_DWORD *)(a1 + 7404);
  *(_DWORD *)(a1 + 7444) = v19;
  *(_DWORD *)(a1 + 7448) = v20;
  *(_DWORD *)(a1 + 7452) = v21;
  result = *(_QWORD **)(a1 + 7288);
  *((_DWORD *)result + 1) = v19;
  v22 = *(_DWORD *)(a1 + 12);
  if (!v22)
  {
    __break(0xC471u);
    return result;
  }
  v23 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v22 - 1) + 9) & 1;
  *((_BYTE *)result + 56) = 0;
  v24 = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)result, a1 + 7368, 0, v23, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 7368) = v24;
  if (v24 != 523 || *(_BYTE *)(*(_QWORD *)(a1 + 7288) + 56))
  {
    if (v24 != 20 && (v24 & 0x100000) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[25]>(a1, "Cannot parse the async function");
      return 0;
    }
LABEL_16:
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    return 0;
  }
  v14 = (_DWORD *)JSC::Parser<JSC::Lexer<char16_t>>::parseAsyncFunctionDeclaration<JSC::ASTBuilder>(a1, a2, v18, 1, 0, a3, v25, v26);
LABEL_5:
  v15 = v14;
  if (v14)
  {
    v14[5] = *(_DWORD *)(a1 + 7448);
    if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 40))(v14) & 1) == 0)
    {
      if (*v12)
      {
        v16 = v12 + 1;
        *(_QWORD *)(v12[1] + 32) = v15;
      }
      else
      {
        *v12 = v15;
        v16 = v12 + 1;
      }
      *v16 = v15;
    }
  }
  if (*(_QWORD *)(a1 + 7360))
    return 0;
  else
    return v12;
}

uint64_t *JSC::Parser<JSC::Lexer<char16_t>>::parseClassFieldInitializerSourceElements<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  char v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t FunctionExpr;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  char *v90;
  unint64_t v91;
  __int128 v92;
  __int128 v93;
  int v94;
  uint64_t v95;
  int v96;
  __int128 v97;
  _DWORD *v98;
  _BYTE v99[29];

  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(uint64_t **)v11;
  if (*(_QWORD *)(v11 + 8) - *(_QWORD *)v11 <= 0xFuLL)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v12 = *(uint64_t **)v11;
  }
  *(_QWORD *)v11 = v12 + 2;
  *v12 = 0;
  v12[1] = 0;
  v13 = *(_DWORD *)(a1 + 12);
  if (!v13)
  {
    __break(0xC471u);
    goto LABEL_57;
  }
  v14 = *(_QWORD *)a1 + 720 * (v13 - 1);
  *(_DWORD *)(v14 + 10) |= 0x8000000u;
  v15 = *a3;
  if (*a3)
    v16 = (uint64_t)(*a3 + 2);
  else
    v16 = 0;
  if (v15)
    v17 = (uint64_t)&(*a3)[10 * *v15 + 2];
  else
    v17 = 0;
  if (v16 == v17)
  {
LABEL_36:
    *(_DWORD *)(a1 + 7368) = 20;
    return v12;
  }
  v18 = (_DWORD *)(a1 + 7368);
  v89 = (uint64_t *)(a1 + 7444);
  v90 = (char *)(a1 + 7474);
  while (1)
  {
    v19 = *(_DWORD **)v16;
    if (*(_QWORD *)v16)
      *v19 += 2;
    v98 = v19;
    *(_OWORD *)&v99[13] = *(_OWORD *)(v16 + 21);
    *(_OWORD *)v99 = *(_OWORD *)(v16 + 8);
    v20 = *(_DWORD *)v99;
    v21 = v99[28];
    if (v99[28] != 3)
    {
      v91 = __PAIR64__(*(unsigned int *)&v99[8], *(unsigned int *)v99);
      *(_QWORD *)&v92 = *(unsigned int *)&v99[4];
      if (!v99[24])
      {
        v58 = 0;
LABEL_29:
        if (v21 == 2)
        {
          v59 = *(_DWORD *)(a1 + 12);
          if (!v59)
          {
            __break(0xC471u);
            JUMPOUT(0x197E5EB70);
          }
          JSC::Scope::useVariable(*(_QWORD *)a1 + 720 * (v59 - 1), (uint64_t)v19);
          v60 = 1;
        }
        else if (v21 == 1)
        {
          v60 = 2;
        }
        else
        {
          v60 = 0;
        }
        v54 = JSC::ASTBuilder::createDefineField(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v91, &v98, v58, v60);
        goto LABEL_18;
      }
      v61 = *(_DWORD *)&v99[12];
      JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), (WTF::AtomStringImpl *)*(unsigned int *)&v99[16], *(unsigned int *)&v99[20], a4, a5, a6, a7, a8);
      v66 = *(_QWORD *)(a1 + 7288);
      *(_DWORD *)v66 = v61;
      *(_BYTE *)(v66 + 56) = 0;
      v67 = *(_DWORD *)(a1 + 7400);
      v68 = *(_DWORD *)(a1 + 7412);
      v69 = *(_DWORD *)(a1 + 7404);
      *(_DWORD *)(a1 + 7444) = v67;
      *(_DWORD *)(a1 + 7448) = v68;
      *(_DWORD *)(a1 + 7452) = v69;
      *(_DWORD *)(v66 + 4) = v67;
      v70 = *(_DWORD *)(a1 + 12);
      if (v70)
      {
        *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v66, (uint64_t)v18, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v70 - 1) + 9) & 1, v62, v63, v64, v65);
        *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v61;
        v58 = JSC::Parser<JSC::Lexer<char16_t>>::parseExpression<JSC::ASTBuilder>(a1, a2);
        goto LABEL_29;
      }
      __break(0xC471u);
LABEL_57:
      JUMPOUT(0x197E5EB58);
    }
    JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), (WTF::AtomStringImpl *)*(unsigned int *)&v99[4], *(unsigned int *)&v99[8], a4, a5, a6, a7, a8);
    v26 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v26 = v20;
    *(_BYTE *)(v26 + 56) = 0;
    v27 = *(_DWORD *)(a1 + 7400);
    v28 = *(_DWORD *)(a1 + 7412);
    v29 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v27;
    *(_DWORD *)(a1 + 7448) = v28;
    *(_DWORD *)(a1 + 7452) = v29;
    *(_DWORD *)(v26 + 4) = v27;
    v30 = *(_DWORD *)(a1 + 12);
    if (!v30)
    {
      __break(0xC471u);
      JUMPOUT(0x197E5EB60);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v26, (uint64_t)v18, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v30 - 1) + 9) & 1, v22, v23, v24, v25);
    v35 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)(v35 + 4) = v20;
    v97 = *(_OWORD *)(a1 + 7400);
    v95 = *(_QWORD *)(a1 + 7416);
    v96 = *(_DWORD *)(a1 + 7424);
    v36 = *(_DWORD *)(a1 + 7408);
    v37 = *(_DWORD *)(a1 + 7400);
    v38 = *(_DWORD *)(a1 + 7412);
    v39 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v37;
    *(_DWORD *)(a1 + 7448) = v38;
    *(_DWORD *)(a1 + 7452) = v39;
    *(_DWORD *)(v35 + 4) = v37;
    v40 = *(_DWORD *)(a1 + 12);
    if (!v40)
    {
      __break(0xC471u);
      JUMPOUT(0x197E5EB68);
    }
    v41 = *(_BYTE *)(*(_QWORD *)a1 + 720 * (v40 - 1) + 9) & 1;
    *(_BYTE *)(v35 + 56) = 0;
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v35, (uint64_t)v18, 0, v41, v31, v32, v33, v34);
    v94 = 0;
    v92 = 0u;
    v93 = 0u;
    v91 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
    v42 = *v90;
    *v90 = 20;
    if ((JSC::Parser<JSC::Lexer<char16_t>>::parseFunctionInfo<JSC::ASTBuilder>(a1, a2, 0, 0, 0, 0, v36, (uint64_t)&v91, 0, 0) & 1) == 0)break;
    FunctionExpr = JSC::ASTBuilder::createFunctionExpr(a2, (uint64_t)&v97, (uint64_t)&v91, v45, v46, v47, v48, v49);
    JSC::ASTBuilder::makeStaticBlockFunctionCallNode(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v97, FunctionExpr, v89, &v95, v89);
    v52.n128_f64[0] = JSC::ASTBuilder::createExprStatement(*(JSC::ParserArena **)(a2 + 8), (uint64_t)&v97, v51, (uint64_t)&v95, *(_DWORD *)v89);
    v54 = v53;
    *v90 = v42;
LABEL_18:
    if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v54 + 40))(v54, v52) & 1) == 0)
    {
      v57 = v12;
      if (*v12)
        v57 = (uint64_t *)(v12[1] + 32);
      *v57 = v54;
      v12[1] = v54;
    }
    if (v19)
    {
      if (*v19 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, v55, v56, a4, a5, a6, a7, a8);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      else
      {
        *v19 -= 2;
      }
    }
    v16 += 40;
    if (v16 == v17)
      goto LABEL_36;
  }
  if (*v18 == 20 || (*v18 & 0x100000) != 0)
  {
    JSC::Parser<JSC::Lexer<char16_t>>::logError(a1);
    v80 = (_BYTE *)(a1 + 7474);
  }
  else
  {
    v80 = (_BYTE *)(a1 + 7474);
    if (!*(_QWORD *)(a1 + 7360))
      JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 1, "Cannot parse static block function");
  }
  *v80 = v42;
  if (v19)
  {
    if (*v19 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v19, v43, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    }
    else
    {
      *v19 -= 2;
    }
  }
  return 0;
}

uint64_t *JSC::Parser<JSC::Lexer<char16_t>>::parseSourceElements<JSC::ASTBuilder>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int *v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  int v69;
  char v70;
  char v71;
  int v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  int v76;
  _QWORD *v77;

  v11 = (char *)(a1 + 7344);
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(uint64_t **)v12;
  if (*(_QWORD *)(v12 + 8) - *(_QWORD *)v12 <= 0xFuLL)
  {
    JSC::ParserArena::allocateFreeablePool(*(JSC::ParserArena **)(a2 + 8));
    v13 = *(uint64_t **)v12;
  }
  *(_QWORD *)v12 = v13 + 2;
  *v13 = 0;
  v13[1] = 0;
  v77 = 0;
  v76 = 0;
  v75 = *(_OWORD *)(a1 + 7296);
  v73 = *(_OWORD *)(a1 + 7320);
  v74 = *(_QWORD *)(a1 + 7336);
  v71 = *v11;
  v72 = *(_DWORD *)(a1 + 7316);
  v69 = *(_DWORD *)(a2 + 1052);
  v70 = v11[1];
  v14 = *(unsigned int *)(a1 + 7404);
  v15 = *(int **)(a1 + 7288);
  v16 = *v15;
  v67 = v15[1];
  v68 = *(_DWORD *)(a1 + 7408);
  v17 = *((_BYTE *)v15 + 56);
  v18 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatementListItem<JSC::ASTBuilder>(a1, a2, &v77, &v76, a5, a6, a7, a8);
  if (!v18)
  {
LABEL_22:
    if (*(_QWORD *)(a1 + 7360))
      return 0;
    else
      return v13;
  }
  v19 = v18;
  v20 = a3 == 0;
  while (1)
  {
    if (!v20 || !v77)
    {
      v20 = 0;
      goto LABEL_7;
    }
    if (v76 != 12 || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 24) != *v77)
    {
      v77 = 0;
      v20 = 1;
LABEL_7:
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19) & 1) == 0)
      {
        v25 = v13;
        if (*v13)
          v25 = (uint64_t *)(v13[1] + 32);
        *v25 = v19;
        v13[1] = v19;
      }
      goto LABEL_11;
    }
    v26 = *(_DWORD *)(a1 + 12);
    if (!v26)
      goto LABEL_51;
    v27 = *(_QWORD *)a1 + 720 * (v26 - 1);
    *(_BYTE *)(v27 + 9) |= 1u;
    if ((JSC::Parser<JSC::Lexer<unsigned char>>::isValidStrictMode(a1) & 1) == 0)
      break;
LABEL_18:
    JSC::Lexer<char16_t>::setOffset(*(_QWORD *)(a1 + 7288), (WTF::AtomStringImpl *)v68, v14, v29, v30, v31, v32, v33);
    v38 = *(_QWORD *)(a1 + 7288);
    *(_DWORD *)v38 = v16;
    *(_BYTE *)(v38 + 56) = v17;
    v39 = *(_DWORD *)(a1 + 7400);
    v40 = *(_DWORD *)(a1 + 7412);
    v41 = *(_DWORD *)(a1 + 7404);
    *(_DWORD *)(a1 + 7444) = v39;
    *(_DWORD *)(a1 + 7448) = v40;
    *(_DWORD *)(a1 + 7452) = v41;
    *(_DWORD *)(v38 + 4) = v39;
    v42 = *(_DWORD *)(a1 + 12);
    if (!v42)
    {
      __break(0xC471u);
      JUMPOUT(0x197E5EF9CLL);
    }
    *(_DWORD *)(a1 + 7368) = JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator((unsigned int *)v38, a1 + 7368, 0, *(_BYTE *)(*(_QWORD *)a1 + 720 * (v42 - 1) + 9) & 1, v34, v35, v36, v37);
    *(_DWORD *)(*(_QWORD *)(a1 + 7288) + 4) = v67;
    *(_OWORD *)(a1 + 7296) = v75;
    *(_DWORD *)(a1 + 7312) = v69;
    *(_DWORD *)(a1 + 7316) = v72;
    *(_OWORD *)(a1 + 7320) = v73;
    *(_QWORD *)(a1 + 7336) = v74;
    *v11 = v71;
    v11[1] = v70;
    *(_DWORD *)(a2 + 1052) = v69;
    v46 = *(WTF::StringImpl **)(a1 + 7360);
    *(_QWORD *)(a1 + 7360) = 0;
    if (!v46)
      goto LABEL_37;
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v43, v44, v45, v21, v22, v23, v24);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
      if (*(_QWORD *)(a1 + 7360))
        return 0;
LABEL_37:
      v20 = 0;
      goto LABEL_11;
    }
    v20 = 0;
    *(_DWORD *)v46 -= 2;
LABEL_11:
    v19 = JSC::Parser<JSC::Lexer<char16_t>>::parseStatementListItem<JSC::ASTBuilder>(a1, a2, &v77, &v76, v21, v22, v23, v24);
    if (!v19)
      goto LABEL_22;
  }
  v48 = *(WTF::StringImpl ***)(a1 + 7328);
  v49 = *(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952);
  v50 = *(WTF::StringImpl **)(v49 + 880);
  if (!v48)
  {
LABEL_29:
    if (JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredVariable((uint64_t *)a1, v50, v28, v29, v30, v31, v32, v33))
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a variable named 'arguments' in strict mode");
      return 0;
    }
    if (JSC::Parser<JSC::Lexer<unsigned char>>::hasDeclaredVariable((uint64_t *)a1, *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a1 + 7216) + 41952) + 1248), v52, v53, v54, v55, v56, v57))
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot declare a variable named 'eval' in strict mode");
      return 0;
    }
    v58 = *(_DWORD *)(a1 + 12);
    if (!v58)
    {
LABEL_51:
      __break(0xC471u);
      JUMPOUT(0x197E5EF94);
    }
    if ((*(_BYTE *)(*(_QWORD *)a1 + 720 * (v58 - 1) + 13) & 4) != 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<unsigned char>>::logError<char const(&)[86]>(a1, "'use strict' directive not allowed inside a function with a non-simple parameter list");
      return 0;
    }
    if ((JSC::Parser<JSC::Lexer<unsigned char>>::isValidStrictMode(a1) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Invalid parameters or function name in strict mode");
      return 0;
    }
    goto LABEL_18;
  }
  v51 = *v48;
  if (v50 != v51)
  {
    if (*(WTF::StringImpl **)(v49 + 1248) == v51)
    {
      if (!*(_QWORD *)(a1 + 7360))
        JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot name a function 'eval' in strict mode");
      return 0;
    }
    goto LABEL_29;
  }
  if (!*(_QWORD *)(a1 + 7360))
    JSC::Parser<JSC::Lexer<char16_t>>::logError<char const(&)[43]>(a1, 0, "Cannot name a function 'arguments' in strict mode");
  return 0;
}

void JSC::Scope::forEachUsedVariable<JSC::Parser<JSC::Lexer<char16_t>>::parseInner(JSC::Identifier const&,JSC::ParsingContext,std::optional<int>,WTF::FixedVector<JSC::UnlinkedFunctionExecutable::ClassElementDefinition> const*,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits> const*)::{lambda(WTF::UniquedStringImpl*)#1}>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  char v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  char v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;

  if (a2)
  {
    v4 = a1;
    v5 = a1 + 72 * a2;
    while (1)
    {
      v6 = *(unsigned int *)(v4 + 4);
      v7 = (_QWORD *)(v4 + 8);
      if ((_DWORD)v6 != 8)
        v7 = (_QWORD *)*v7;
      v8 = 0;
      while ((_DWORD)v6 != v8)
      {
        v9 = v8;
        v10 = v7[v8++];
        if (v10 != -1)
        {
          v11 = v9;
          goto LABEL_9;
        }
      }
      v11 = *(unsigned int *)(v4 + 4);
LABEL_9:
      if ((_DWORD)v6 != (_DWORD)v11)
        break;
LABEL_25:
      v4 += 72;
      if (v4 == v5)
        return;
    }
    v12 = v11 | (v6 << 32);
    while (1)
    {
      v13 = v7[v12];
      if (*(_DWORD *)(v13 + 4))
      {
        v14 = *(unsigned __int8 **)(v13 + 8);
        v15 = (*(_BYTE *)(v13 + 16) & 4) != 0 ? *v14 : *(unsigned __int16 *)v14;
        if (v15 == 35)
        {
          v17 = **(uint64_t ***)a3;
          if (!v17
            || (WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::PrivateNameEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::PrivateNameEntryHashTraits,WTF::HashTableTraits>::contains<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>(*v17, v7[v12]) & 1) == 0)
          {
            v18 = *(uint64_t **)(a3 + 8);
            v19 = *v18;
            v20 = *((_DWORD *)v18 + 2);
            if (*(_DWORD *)(v19 + 12) <= v20)
            {
              __break(0xC471u);
              return;
            }
            v21 = *(_QWORD *)v19 + 720 * v20;
            v22 = *(_DWORD *)v13;
            *(_DWORD *)v13 += 2;
            v23 = WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::contains(*(_QWORD *)(v21 + 144), v13);
            if (v22)
            {
              *(_DWORD *)v13 = v22;
            }
            else
            {
              v42 = v23;
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v13, v24, v25, v26, v27, v28, v29, v30);
              WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
              v23 = v42;
            }
            if ((v23 & 1) == 0)
              break;
          }
        }
      }
      if (HIDWORD(v12) <= (v11 + 1))
        v16 = (v11 + 1);
      else
        v16 = HIDWORD(v12);
      while ((_DWORD)v16 - 1 != (_DWORD)v11)
      {
        v11 = (v11 + 1);
        if (v7[v11] != -1)
        {
          LODWORD(v16) = v11;
          goto LABEL_21;
        }
      }
      v11 = v16;
LABEL_21:
      v12 = v11 | v12 & 0xFFFFFFFF00000000;
      LODWORD(v11) = v16;
      if ((_DWORD)v6 == (_DWORD)v16)
        goto LABEL_25;
    }
    WTF::makeString<WTF::ASCIILiteral,WTF::StringView,char>((int8x16_t *)"Cannot reference undeclared private names: \"", 45, *(_BYTE **)(v13 + 8), *(unsigned int *)(v13 + 4) | ((unint64_t)((*(_DWORD *)(v13 + 16) >> 2) & 1) << 32), 34, (int **)&v67);
    v38 = *(WTF::StringImpl ***)(a3 + 16);
    v39 = v67;
    v67 = 0;
    v40 = *v38;
    *v38 = v39;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, v31, v32, v33, v34, v35, v36, v37);
        WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
      }
      else
      {
        *(_DWORD *)v40 -= 2;
      }
    }
    v41 = v67;
    v67 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::~StringImpl(v41, v31, v32, v33, v34, v35, v36, v37);
        WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
      }
      else
      {
        *(_DWORD *)v41 -= 2;
      }
    }
  }
}

uint64_t JSC::Lexer<char16_t>::lexExpectIdentifier(unsigned int *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::AtomStringImpl *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  _QWORD *v46;
  WTF::StringImpl *v47;
  _QWORD *v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;

  v14 = (WTF::AtomStringImpl *)*((_QWORD *)a1 + 10);
  v15 = *((_QWORD *)a1 + 12);
  if ((unint64_t)v14 >= v15 || (*(unsigned __int16 *)v14 | 0x20u) - 97 > 0x19)
    goto LABEL_19;
  v16 = *((_QWORD *)a1 + 11);
  v17 = (unint64_t)(*((_QWORD *)a1 + 14) - v16) >> 1;
  v18 = *a1 | ((unint64_t)(((unint64_t)v14 - v16) >> 1) << 32);
  v19 = 2;
  do
  {
    v20 = v19;
    v21 = (unsigned __int16 *)((char *)v14 + v19);
    if ((unint64_t)v14 + v19 >= v15)
    {
      LOWORD(v22) = 0;
      goto LABEL_16;
    }
    v22 = *v21;
    v19 += 2;
  }
  while (v22 - 48 < 0xA || (v22 | 0x20) - 97 < 0x1A);
  if (v22 <= 0x7F && (v22 - 36 > 0x3B || ((1 << (v22 - 36)) & 0x900000000000001) == 0))
  {
LABEL_16:
    *((_WORD *)a1 + 88) = v22;
    *((_QWORD *)a1 + 10) = v21;
    if ((a3 & 4) != 0)
    {
      v25 = 0;
      goto LABEL_18;
    }
    if (v20 <= -2)
      goto LABEL_45;
    v9 = (_QWORD *)*((_QWORD *)a1 + 24);
    if (!v20)
    {
      v25 = (uint64_t *)(v9[5244] + 8);
      goto LABEL_18;
    }
    v31 = v20 >> 1;
    v8 = *((_QWORD *)a1 + 23);
    v32 = *(unsigned __int16 *)v14;
    if (v32 >= 0x80)
    {
      JSC::Identifier::add8(*((_QWORD *)a1 + 24), v14, v31, a4, a5, a6, a7, a8, (unint64_t *)&v66);
      WTF::SegmentedVector<JSC::Identifier,64ul>::append<JSC::Identifier>(v8, (uint64_t *)&v66);
      v56 = v66;
      v66 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
        {
          WTF::StringImpl::~StringImpl(v56, v49, v50, v51, v52, v53, v54, v55);
          WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
        }
        else
        {
          *(_DWORD *)v56 -= 2;
        }
      }
      v57 = *(_QWORD *)v8 - 1;
      if (v57 >> 6 < *(unsigned int *)(v8 + 20))
      {
        v25 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * (v57 >> 6)) + 8 * (v57 & 0x3F));
        goto LABEL_18;
      }
    }
    else
    {
      if (v20 == 2)
      {
        v10 = (WTF::StringImpl *)(v8 + 24);
        v25 = *(uint64_t **)(v8 + 24 + 8 * v32);
        if (!v25)
        {
          JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(v9 + 5246), *(_WORD *)v14, a4, a5, a6, a7, a8, &v66);
          v11 = v66;
          v40 = (*(_QWORD *)v8)++;
          v41 = v40 >> 6;
          v42 = *(unsigned int *)(v8 + 20);
          if (v40 >> 6 < v42)
            goto LABEL_34;
          v9 = (_QWORD *)(v8 + 8);
          v47 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
          v66 = v47;
          v20 = *(unsigned int *)(v8 + 20);
          if ((_DWORD)v20 != *(_DWORD *)(v8 + 16))
          {
            *(_QWORD *)(*v9 + 8 * v20) = v47;
            goto LABEL_44;
          }
          goto LABEL_46;
        }
        goto LABEL_18;
      }
      v11 = (WTF::StringImpl *)(v8 + 1048);
      v25 = *(uint64_t **)(v8 + 1048 + 8 * v32);
      if (v25 && WTF::equalInternal<char16_t>(*v25, (unint64_t)v14, v20 >> 1))
      {
LABEL_18:
        *(_QWORD *)(a2 + 8) = v25;
        *(_DWORD *)(a2 + 32) = *a1;
        v26 = *((_QWORD *)a1 + 11);
        *(_DWORD *)(a2 + 36) = (unint64_t)(*((_QWORD *)a1 + 14) - v26) >> 1;
        *(_DWORD *)(a2 + 40) = ((unint64_t)v14 - v26) >> 1;
        *(_DWORD *)(a2 + 44) = (unint64_t)(*((_QWORD *)a1 + 10) - v26) >> 1;
        *(_QWORD *)(a2 + 48) = v18;
        *(_DWORD *)(a2 + 56) = v17;
        v27 = *((_QWORD *)a1 + 11);
        v28 = (unint64_t)(*((_QWORD *)a1 + 10) - v27) >> 1;
        v29 = (unint64_t)(*((_QWORD *)a1 + 14) - v27) >> 1;
        *(_QWORD *)(a2 + 60) = *a1 | ((unint64_t)v28 << 32);
        *(_DWORD *)(a2 + 68) = v29;
        a1[15] = 12;
        return 12;
      }
      JSC::Identifier::add8((uint64_t)v9, v14, v31, a4, a5, a6, a7, a8, (unint64_t *)&v66);
      v10 = v66;
      v33 = (*(_QWORD *)v8)++;
      v34 = v33 >> 6;
      v35 = *(unsigned int *)(v8 + 20);
      if (v33 >> 6 >= v35)
      {
        v9 = (_QWORD *)(v8 + 8);
        v44 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x200);
        v66 = v44;
        v45 = *(unsigned int *)(v8 + 20);
        if ((_DWORD)v45 == *(_DWORD *)(v8 + 16))
        {
          v46 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 8, v45 + 1, (unint64_t)&v66);
          v45 = *(unsigned int *)(v8 + 20);
          *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v45) = *v46;
        }
        else
        {
          *(_QWORD *)(*v9 + 8 * v45) = v44;
        }
        v35 = (v45 + 1);
        *(_DWORD *)(v8 + 20) = v35;
        v33 = *(_QWORD *)v8 - 1;
        v34 = v33 >> 6;
      }
      if (v34 < v35)
      {
        v36 = *(_QWORD *)(v8 + 8);
        v37 = *(_QWORD *)(v36 + 8 * v34);
        v38 = v33 & 0x3F;
        *(_QWORD *)(v37 + 8 * v38) = v10;
        v39 = v33 >> 6;
        if (v39 >= v35)
        {
          __break(0xC471u);
          JUMPOUT(0x197E5F628);
        }
        v20 = *(unsigned __int16 *)v14;
        if ((unint64_t)v20 < 0x80)
        {
          *((_QWORD *)v11 + v20) = *(_QWORD *)(v36 + 8 * v39) + 8 * v38;
LABEL_31:
          v25 = (uint64_t *)(*(_QWORD *)(v36 + 8 * v39) + 8 * v38);
          goto LABEL_18;
        }
        do
        {
LABEL_45:
          __break(1u);
LABEL_46:
          v48 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9, v20 + 1, (unint64_t)&v66);
          v20 = *(unsigned int *)(v8 + 20);
          *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8 * v20) = *v48;
LABEL_44:
          v42 = (v20 + 1);
          *(_DWORD *)(v8 + 20) = v42;
          v40 = *(_QWORD *)v8 - 1;
          v41 = v40 >> 6;
LABEL_34:
          if (v41 >= v42)
          {
            __break(0xC471u);
            JUMPOUT(0x197E5F630);
          }
          v36 = *(_QWORD *)(v8 + 8);
          v43 = *(_QWORD *)(v36 + 8 * v41);
          v38 = v40 & 0x3F;
          *(_QWORD *)(v43 + 8 * v38) = v11;
          v39 = v40 >> 6;
          if (v39 >= v42)
          {
            __break(0xC471u);
            JUMPOUT(0x197E5F638);
          }
          v20 = *(unsigned __int16 *)v14;
        }
        while ((unint64_t)v20 >= 0x80);
        *((_QWORD *)v10 + v20) = *(_QWORD *)(v36 + 8 * v39) + 8 * v38;
        goto LABEL_31;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x197E5F620);
  }
LABEL_19:
  *((_BYTE *)a1 + 56) = 0;
  return JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::Parser<JSC::Lexer<char16_t>>::printUnexpectedTokenText(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  char *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  WTF::PrintStream *v20;
  WTF::PrintStream *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::PrintStream *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *Range;
  uint64_t v49;
  char v50;

  v3 = *(_DWORD *)(a1 + 7368);
  if (v3 > 545)
  {
    switch(v3)
    {
      case 1048576:
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v49 = v11;
        v12 = "Unrecognized token '";
        return WTF::PrintStream::print<char [21],WTF::StringView,char [2]>(a2, v12, (uint64_t)&Range);
      case 1048577:
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v49 = v34;
        return WTF::PrintStream::print<char [32],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
      case 1048578:
      case 1048580:
      case 1048581:
      case 1048582:
      case 1048584:
      case 1048587:
      case 1048588:
      case 1048589:
      case 1048590:
      case 1048591:
LABEL_15:
        if ((v3 & 0x200) != 0)
        {
          Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
          v49 = v42;
          v12 = "Unexpected keyword '";
          return WTF::PrintStream::print<char [21],WTF::StringView,char [2]>(a2, v12, (uint64_t)&Range);
        }
        else
        {
          v15 = *(unsigned int *)(a1 + 7408);
          v16 = *(_DWORD *)(a1 + 7412);
          a1 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(*(_QWORD *)(a1 + 7288) + 64) + 24))(**(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64));
          if (v17 <= v15)
          {
            v9 = 0x100000000;
            v7 = "";
          }
          else
          {
            v7 = (char *)a1;
            v18 = v16 - v15;
            if ((int)v17 - (int)v15 > (v16 - v15) || (v18 = v17 - v15, (_DWORD)v15))
            {
              v9 = v18;
              v19 = v17 - v15;
              if ((v17 & 0xFF00000000) != 0)
              {
                if (v19 < v9)
                  goto LABEL_43;
                v7 = (char *)(a1 + v15);
                v9 |= 0x100000000uLL;
              }
              else
              {
                if (v19 < v9)
                  goto LABEL_43;
                v7 = (char *)(a1 + 2 * v15);
              }
            }
            else
            {
              v9 = v17;
            }
          }
          v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
          v21 = v20;
          v22 = "Unexpected token '";
LABEL_24:
          WTF::PrintStream::printf(v20, "%s", v22);
          if (v7)
          {
            if ((v9 & 0xFF00000000) != 0)
              WTF::StringImpl::utf8ForCharacters(v7, v9, (uint64_t)&Range, v28);
            else
              WTF::StringImpl::utf8ForCharacters((uint64_t)v7, v9, 0, v23, v24, v25, v26, v27, (uint64_t)&Range);
          }
          else
          {
            v29 = WTF::fastMalloc((WTF *)0x11);
            *(_DWORD *)v29 = 1;
            *(_QWORD *)(v29 + 8) = 0;
            *(_BYTE *)(v29 + 16) = 0;
            Range = (const char *)v29;
            LODWORD(v49) = 0;
          }
          WTF::printExpectedCStringHelper(v21, "StringView", &Range);
          if ((_DWORD)v49 != -1)
            ((void (*)(char *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v49])(&v50, &Range);
          WTF::PrintStream::printf(v21, "%s");
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        }
      case 1048579:
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v49 = v35;
        return WTF::PrintStream::print<char [40],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
      case 1048583:
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v49 = v36;
        return WTF::PrintStream::print<char [27],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
      case 1048585:
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v49 = v37;
        return WTF::PrintStream::print<char [26],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
      case 1048586:
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v49 = v38;
        return WTF::PrintStream::print<char [23],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
      case 1048592:
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v49 = v39;
        return WTF::PrintStream::print<char [50],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
      case 1048593:
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v49 = v40;
        return WTF::PrintStream::print<char [28],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
      case 1048594:
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v49 = v41;
        return WTF::PrintStream::print<char [44],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
      default:
        switch(v3)
        {
          case 3145728:
          case 3145730:
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v49 = v13;
            return WTF::PrintStream::print<char [43],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
          case 3145729:
          case 3145731:
          case 3145735:
            goto LABEL_15;
          case 3145732:
LABEL_47:
            v33 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v33, "%s");
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
          case 3145733:
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v49 = v43;
            return WTF::PrintStream::print<char [31],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
          case 3145734:
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v49 = v44;
            return WTF::PrintStream::print<char [24],WTF::StringView,char [2]>(a2, "Invalid use of octal: '", (uint64_t)&Range);
          case 3145736:
            Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
            v49 = v45;
            return WTF::PrintStream::print<char [30],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
          default:
            if (v3 != 546)
              goto LABEL_15;
LABEL_3:
            v4 = *(unsigned int *)(a1 + 7408);
            v5 = *(_DWORD *)(a1 + 7412);
            a1 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(*(_QWORD *)(a1 + 7288) + 64) + 24))(**(_QWORD **)(*(_QWORD *)(a1 + 7288) + 64));
            if (v6 <= v4)
            {
              v9 = 0x100000000;
              v7 = "";
            }
            else
            {
              v7 = (char *)a1;
              v8 = v5 - v4;
              if ((int)v6 - (int)v4 > (v5 - v4) || (v8 = v6 - v4, (_DWORD)v4))
              {
                v9 = v8;
                v10 = v6 - v4;
                if ((v6 & 0xFF00000000) != 0)
                {
                  if (v10 < v9)
                    goto LABEL_43;
                  v7 = (char *)(a1 + v4);
                  v9 |= 0x100000000uLL;
                }
                else
                {
                  if (v10 < v9)
                  {
LABEL_43:
                    __break(1u);
LABEL_44:
                    Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
                    v49 = v30;
                    return WTF::PrintStream::print<char [20],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
                  }
                  v7 = (char *)(a1 + 2 * v4);
                }
              }
              else
              {
                v9 = v6;
              }
            }
            v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
            v21 = v20;
            v22 = "Unexpected identifier '";
            goto LABEL_24;
        }
    }
  }
  switch(v3)
  {
    case 9:
    case 10:
      goto LABEL_44;
    case 11:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      goto LABEL_15;
    case 12:
      goto LABEL_3;
    case 13:
      Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
      v49 = v31;
      return WTF::PrintStream::print<char [25],WTF::StringView>(a2, (uint64_t)&Range);
    case 14:
      Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
      v49 = v32;
      return WTF::PrintStream::print<char [27],WTF::StringView>(a2, (uint64_t)&Range);
    case 20:
      goto LABEL_47;
    default:
      if (v3 == 531)
      {
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v49 = v46;
        result = WTF::PrintStream::print<char [34],WTF::StringView,char [2]>(a2, (uint64_t)&Range);
      }
      else
      {
        if (v3 != 532)
          goto LABEL_15;
        Range = JSC::SourceProvider::getRange(**(JSC::SourceProvider ***)(*(_QWORD *)(a1 + 7288) + 64), *(_DWORD *)(a1 + 7408), *(_DWORD *)(a1 + 7412));
        v49 = v47;
        result = WTF::PrintStream::print<char [34],WTF::StringView,char [17]>(a2, (uint64_t)&Range);
      }
      break;
  }
  return result;
}

