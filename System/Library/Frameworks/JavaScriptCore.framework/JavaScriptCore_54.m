void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,unsigned int>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, uint64_t a5, JSC::Wasm::Type *a6, uint64_t a7, _DWORD *a8, double a9, float a10)
{
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  double v28;
  float v29;
  float v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  double v42;
  float v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF::PrintStream *v65;
  float v66;
  double v67;
  const WTF::String *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  const WTF::String *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  float v82;
  const WTF::String *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  float v90;
  const WTF::String *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  float v98;
  const WTF::String *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  float v106;
  const WTF::String *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  float v114;
  WTF::AtomStringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  int v184;
  char v185;
  void (**v186)(WTF::StringPrintStream *__hidden);
  WTF *v187;
  __int128 v188;
  _BYTE v189[128];
  void (**v190)(WTF::StringPrintStream *__hidden);
  WTF *v191;
  __int128 v192;
  _BYTE v193[128];
  uint64_t v194;

  v194 = *MEMORY[0x1E0C80C00];
  v186 = off_1E3572250;
  v187 = (WTF *)v189;
  v188 = xmmword_199122F80;
  v189[0] = 0;
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  if (*(_QWORD *)a3)
  {
    v16 = *(_QWORD *)(a3 + 8);
    v17 = v16 != 0;
    v18 = v16 - 1;
    if (!v17)
      v18 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v18, (uint64_t)&v183, a10);
  }
  else
  {
    v19 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0;
    *(_BYTE *)(v19 + 16) = 0;
    v183 = (WTF::StringImpl *)v19;
    v184 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v190, "StringView", &v183);
  if (v184 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v184])(&v182, &v183);
  v190[5]((WTF::StringPrintStream *)&v190);
  v190[5]((WTF::StringPrintStream *)&v190);
  v27 = v191;
  if (!v191)
  {
    v182 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v182);
  v27 = v191;
  if (v191 != (WTF *)v193)
LABEL_12:
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v181, a2, a4, v28, v29);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  if (*(_QWORD *)a5)
  {
    v31 = *(_QWORD *)(a5 + 8);
    v17 = v31 != 0;
    v32 = v31 - 1;
    if (!v17)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v32, (uint64_t)&v183, v30);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v183 = (WTF::StringImpl *)v33;
    v184 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v190, "StringView", &v183);
  if (v184 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v184])(&v180, &v183);
  v190[5]((WTF::StringPrintStream *)&v190);
  v190[5]((WTF::StringPrintStream *)&v190);
  v41 = v191;
  if (!v191)
  {
    v180 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v180);
  v41 = v191;
  if (v191 != (WTF *)v193)
LABEL_24:
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::typeToStringModuleRelative((uint64_t *)&v179, a2, a6, v42, v43);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  if (*(_QWORD *)a7)
  {
    v45 = *(_QWORD *)(a7 + 8);
    v17 = v45 != 0;
    v46 = v45 - 1;
    if (!v17)
      v46 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a7, v46, (uint64_t)&v183, v44);
  }
  else
  {
    v47 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v47 = 1;
    *(_QWORD *)(v47 + 8) = 0;
    *(_BYTE *)(v47 + 16) = 0;
    v183 = (WTF::StringImpl *)v47;
    v184 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v190, "StringView", &v183);
  if (v184 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v184])(&v178, &v183);
  v190[5]((WTF::StringPrintStream *)&v190);
  v190[5]((WTF::StringPrintStream *)&v190);
  v55 = v191;
  if (!v191)
  {
    v183 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v183);
  v55 = v191;
  if (v191 != (WTF *)v193)
LABEL_36:
    WTF::fastFree((unint64_t)v55, v48, v49, v50, v51, v52, v53, v54);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v190, "%u", *a8);
  v190[5]((WTF::StringPrintStream *)&v190);
  v63 = v191;
  if (!v191)
  {
    v178 = 0;
    goto LABEL_41;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v178);
  v63 = v191;
  if (v191 != (WTF *)v193)
LABEL_41:
    WTF::fastFree((unint64_t)v63, v56, v57, v58, v59, v60, v61, v62);
  v64 = (WTF *)((uint64_t (*)(_QWORD))v186[4])(&v186);
  v65 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v64 + 32))(v64);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v190, v66);
  WTF::printExpectedCStringHelper(v65, "StringView", &v190);
  if ((_DWORD)v191 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v191])(&v185, &v190);
  v67 = (*(double (**)(WTF *))(*(_QWORD *)v64 + 40))(v64);
  WTF::printInternal(v64, (WTF::PrintStream *)&v182, v68, v69, v70, v71, v72, v73, v67, v74);
  WTF::printInternal(v64, (WTF::PrintStream *)&v181, v75, v76, v77, v78, v79, v80, v81, v82);
  WTF::printInternal(v64, (WTF::PrintStream *)&v180, v83, v84, v85, v86, v87, v88, v89, v90);
  WTF::printInternal(v64, (WTF::PrintStream *)&v179, v91, v92, v93, v94, v95, v96, v97, v98);
  WTF::printInternal(v64, (WTF::PrintStream *)&v183, v99, v100, v101, v102, v103, v104, v105, v106);
  WTF::printInternal(v64, (WTF::PrintStream *)&v178, v107, v108, v109, v110, v111, v112, v113, v114);
  v186[5]((WTF::StringPrintStream *)&v186);
  v122 = v178;
  v178 = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
    {
      WTF::StringImpl::~StringImpl(v122, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
    }
    else
    {
      *(_DWORD *)v122 -= 2;
    }
  }
  v123 = v183;
  v183 = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
    {
      WTF::StringImpl::~StringImpl(v123, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
    }
    else
    {
      *(_DWORD *)v123 -= 2;
    }
  }
  v124 = v179;
  v179 = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
    {
      WTF::StringImpl::~StringImpl(v124, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
    }
    else
    {
      *(_DWORD *)v124 -= 2;
    }
  }
  v125 = v180;
  v180 = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
  v126 = v181;
  v181 = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
    {
      WTF::StringImpl::~StringImpl(v126, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
    }
    else
    {
      *(_DWORD *)v126 -= 2;
    }
  }
  v127 = v182;
  v182 = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
    {
      WTF::StringImpl::~StringImpl(v127, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
    }
    else
    {
      *(_DWORD *)v127 -= 2;
    }
  }
  v128 = v187;
  if (v187)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v187, v188, (uint64_t *)&v190);
    v128 = v187;
    *a1 = v190;
    if (v128 == (WTF *)v189)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v128, v115, v116, v117, v118, v119, v120, v121);
}

void WTF::Vector<JSC::Wasm::OMGIRGenerator::ControlData *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  const void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(const void **)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      memcpy(v6, v4, 8 * v5);
      if (v4)
      {
        if (*(const void **)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::OMGIRGenerator>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::OMGIRGenerator::ControlData,JSC::B3::Variable *,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(_BYTE *a1, unsigned __int8 a2, uint64_t a3, _DWORD *a4, uint64_t a5, double a6, float a7)
{
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  int v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  void (**v57)(WTF::StringPrintStream *__hidden);
  char *v58;
  unint64_t *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  void (**v62[2])(WTF::StringPrintStream *__hidden);
  void (**v63)(WTF::StringPrintStream *__hidden);
  unsigned int v64;
  unsigned int v65;
  const char *v66;
  uint64_t v67;

  if (a2 <= 0x37u)
  {
    switch(a2)
    {
      case 0x19u:
      case 0x23u:
      case 0x2Eu:
        goto LABEL_10;
      case 0x1Au:
      case 0x1Cu:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x26u:
      case 0x27u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Fu:
      case 0x31u:
        goto LABEL_8;
      case 0x1Bu:
      case 0x1Du:
      case 0x24u:
      case 0x25u:
      case 0x32u:
        goto LABEL_13;
      case 0x22u:
LABEL_12:
        v9 = 0;
        v65 = 0;
        goto LABEL_16;
      case 0x28u:
LABEL_44:
        v9 = 4;
        goto LABEL_15;
      case 0x30u:
        goto LABEL_14;
      default:
        switch(a2)
        {
          case 2u:
            goto LABEL_14;
          case 7u:
            goto LABEL_44;
          case 8u:
          case 0x10u:
            goto LABEL_12;
          case 0xDu:
          case 0xEu:
            goto LABEL_13;
          default:
            goto LABEL_8;
        }
    }
  }
  if (a2 > 0x45u)
  {
    if (a2 - 70 >= 2)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x198E07C1CLL);
    }
LABEL_13:
    v9 = 3;
    goto LABEL_15;
  }
  if (a2 == 56)
  {
LABEL_14:
    v9 = 1;
    goto LABEL_15;
  }
  if (a2 == 61)
    goto LABEL_13;
  if (a2 != 64)
    goto LABEL_8;
LABEL_10:
  v9 = 2;
LABEL_15:
  v65 = v9;
LABEL_16:
  if (*(_DWORD *)(*(_QWORD *)(a3 + 14960) + 104) == -1)
  {
    v55 = "simd memory instructions need a memory defined in the module";
    v56 = 61;
LABEL_50:
    v66 = v55;
    v67 = v56;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(v62, (uint64_t)&v66, a6, a7);
    v57 = v62[0];
    goto LABEL_51;
  }
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)a3;
  v12 = v10 - *(_QWORD *)a3;
  if (v10 > *(_QWORD *)a3)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = *(_QWORD *)(a3 + 8);
    v17 = 5;
    if (v12 < 5)
      v17 = v10 - *(_QWORD *)a3;
    v18 = v17 - 1;
    *(_QWORD *)a3 = v11 + 1;
    v19 = v16 + v11;
    while (1)
    {
      v20 = *(char *)(v19 + v13);
      v15 |= (v20 & 0x7F) << v14;
      if ((v20 & 0x80000000) == 0)
        break;
      if (v18 == v13)
        goto LABEL_53;
      v21 = v11 + v13 + 2;
      *(_QWORD *)a3 = v21;
      ++v13;
      v14 += 7;
      if (v12 == v13)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v64 = v15;
    if ((_DWORD)v13 != 4 || v20 < 0x10u)
    {
      if (v10 <= v11 + v13 + 1)
        goto LABEL_55;
      v19 = 0;
      v22 = 0;
      v23 = 0;
      *a4 = 0;
      v24 = ~v13 + v12;
      v25 = 5;
      if (v24 < 5)
        v25 = v24;
      v26 = v11 + v13;
      *(_QWORD *)a3 = v11 + v13 + 2;
      v27 = v11 - v10;
      v28 = v16 + v11;
      v29 = v25 - 1;
      v30 = v27 + v13;
      while (1)
      {
        LODWORD(v21) = *(char *)(v28 + v19 + v13 + 1);
        v23 |= (v21 & 0x7F) << v22;
        *a4 = v23;
        if ((v21 & 0x80000000) == 0)
          break;
        if (v29 == v19)
          goto LABEL_55;
        v31 = v26 + v19;
        v32 = v30 + v19++;
        v21 = v31 + 3;
        *(_QWORD *)a3 = v21;
        v22 += 7;
        if (v32 == -2)
          goto LABEL_33;
      }
LABEL_34:
      if ((_DWORD)v19 == 4 && v21 >= 0x10u)
      {
LABEL_55:
        v58 = "can't get simd memory op offset";
        v59 = (unint64_t *)a3;
        v60 = 32;
        goto LABEL_56;
      }
      if (v15 > v9)
      {
        v66 = "alignment: ";
        v67 = 12;
        v62[0] = (void (**)(WTF::StringPrintStream *__hidden))" can't be larger than max alignment for simd operation: ";
        v62[1] = (void (**)(WTF::StringPrintStream *__hidden))57;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v63, (uint64_t)&v66, &v64, (uint64_t)v62, &v65, a6, a7);
        v57 = v63;
        goto LABEL_51;
      }
      v33 = *(_DWORD *)(a3 + 68);
      if (!v33)
      {
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a3, 26, "simd memory op pointer", 23, &v66, a7);
        goto LABEL_48;
      }
      v34 = *(_QWORD *)(a3 + 56) + 24 * v33;
      v35 = *(_QWORD *)(v34 - 8);
      v36 = *(_OWORD *)(v34 - 24);
      *(_DWORD *)(a3 + 68) = v33 - 1;
      *(_OWORD *)a5 = v36;
      *(_QWORD *)(a5 + 16) = v35;
      v37 = *(_QWORD *)(a3 + 48);
      v66 = "WasmFunctionParser.h:";
      LODWORD(v67) = 21;
      LODWORD(v62[0]) = 830;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v66, (unsigned int *)v62, (int **)&v61);
      v45 = v61;
      if (!v61)
      {
        __break(0xC471u);
        JUMPOUT(0x198E07F90);
      }
      v46 = *(_DWORD *)(v37 + 512);
      if (!v46)
      {
        __break(0xC471u);
        JUMPOUT(0x198E07F98);
      }
      *(_DWORD *)(v37 + 512) = v46 - 1;
      v61 = 0;
      if (*(_DWORD *)v45 == 2)
      {
        WTF::StringImpl::~StringImpl(v45, v38, v39, v40, v41, v42, v43, v44);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v45 -= 2;
      }
      if (*(_BYTE *)a5 == 0xFF)
      {
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      v55 = "pointer must be i32";
      v56 = 20;
      goto LABEL_50;
    }
  }
LABEL_53:
  v58 = "can't get simd memory op alignment";
  v59 = (unint64_t *)a3;
  v60 = 35;
LABEL_56:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v58, v59, v60, &v66, a7);
LABEL_48:
  v57 = (void (**)(WTF::StringPrintStream *__hidden))v66;
LABEL_51:
  *(_QWORD *)a1 = v57;
  a1[8] = 1;
}

uint64_t JSC::Wasm::OMGIRGenerator::addSIMDRelOp(_BYTE *a1, _QWORD *a2, char a3, uint64_t a4, uint64_t a5, unsigned int a6, WTF **a7)
{
  const char *v13;
  int v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  char **v20;
  uint64_t v21;
  JSC::B3::Value *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  char **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t Space;
  uint64_t v34;
  uint64_t v35;
  WTF *PushVariable;
  uint64_t v37;
  JSC::B3::Value *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char **v46;
  _BYTE *v47;
  WTF **v48;
  unint64_t v49;
  int v50;
  uint64_t v51;

  if ((a3 & 0x3Fu) - 1 > 3)
  {
    if (a6 >= 0xD || ((0x160Bu >> a6) & 1) == 0)
    {
      result = 504;
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    if (a6 >= 0xE)
    {
      v14 = 159;
      goto LABEL_9;
    }
    v13 = (const char *)&unk_19915AE30;
  }
  v14 = v13[a6];
LABEL_9:
  v15 = a2[11];
  v16 = (JSC::B3::Value *)a2[7];
  v50 = v14;
  if (*a2)
    v17 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
  else
    v17 = 0;
  v18 = WTF::fastMalloc((WTF *)0x30);
  v19 = *(_DWORD *)(a4 + 4);
  *(_DWORD *)(v18 + 8) = -1;
  *(_WORD *)(v18 + 12) = 10;
  *(_DWORD *)(v18 + 16) = v19;
  *(_BYTE *)(v18 + 20) = 0;
  v49 = v17;
  *(_QWORD *)(v18 + 24) = v17;
  *(_QWORD *)(v18 + 32) = 0;
  *(_QWORD *)v18 = off_1E357F0F8;
  *(_QWORD *)(v18 + 40) = a4;
  JSC::B3::Procedure::addValueImpl(v16, (JSC::B3::Value *)v18);
  v51 = v18;
  v20 = (char **)(v15 + 8);
  v21 = *(unsigned int *)(v15 + 20);
  v47 = a1;
  v48 = a7;
  v46 = (char **)(v15 + 8);
  v22 = v16;
  if ((_DWORD)v21 == *(_DWORD *)(v15 + 16))
  {
    v43 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v20, v21 + 1, (unint64_t)&v51);
    v21 = *(unsigned int *)(v15 + 20);
    *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8 * v21) = *(_QWORD *)v43;
    v23 = v51;
  }
  else
  {
    *(_QWORD *)&(*v20)[8 * v21] = v18;
    v23 = v18;
  }
  v24 = a3;
  *(_DWORD *)(v15 + 20) = v21 + 1;
  *(_QWORD *)(v23 + 32) = v15;
  v25 = a2[11];
  v26 = (JSC::B3::Value *)a2[7];
  if (*a2)
    v27 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
  else
    v27 = 0;
  v28 = WTF::fastMalloc((WTF *)0x30);
  v29 = *(_DWORD *)(a5 + 4);
  *(_DWORD *)(v28 + 8) = -1;
  *(_WORD *)(v28 + 12) = 10;
  *(_DWORD *)(v28 + 16) = v29;
  *(_BYTE *)(v28 + 20) = 0;
  *(_QWORD *)(v28 + 24) = v27;
  *(_QWORD *)(v28 + 32) = 0;
  *(_QWORD *)v28 = off_1E357F0F8;
  *(_QWORD *)(v28 + 40) = a5;
  JSC::B3::Procedure::addValueImpl(v26, (JSC::B3::Value *)v28);
  v51 = v28;
  v30 = (char **)(v25 + 8);
  v31 = *(unsigned int *)(v25 + 20);
  if ((_DWORD)v31 == *(_DWORD *)(v25 + 16))
  {
    v44 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30, v31 + 1, (unint64_t)&v51);
    v31 = *(unsigned int *)(v25 + 20);
    *(_QWORD *)(*(_QWORD *)(v25 + 8) + 8 * v31) = *(_QWORD *)v44;
    v32 = v51;
  }
  else
  {
    *(_QWORD *)&(*v30)[8 * v31] = v28;
    v32 = v28;
  }
  *(_DWORD *)(v25 + 20) = v31 + 1;
  *(_QWORD *)(v32 + 32) = v25;
  Space = JSC::B3::Value::allocateSpace(v50, 48);
  *(_QWORD *)Space = off_1E357F5F0;
  *(_DWORD *)(Space + 8) = -1;
  *(_WORD *)(Space + 12) = v50;
  *(_DWORD *)(Space + 16) = 5;
  *(_BYTE *)(Space + 20) = 2;
  *(_QWORD *)(Space + 24) = v49;
  *(_QWORD *)(Space + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)Space, 2, v18, v28);
  *(_QWORD *)Space = off_1E357EA50;
  *(_BYTE *)(Space + 40) = v24;
  *(_BYTE *)(Space + 41) = 0;
  JSC::B3::Procedure::addValueImpl(v22, (JSC::B3::Value *)Space);
  v51 = Space;
  v34 = *(unsigned int *)(v15 + 20);
  if ((_DWORD)v34 == *(_DWORD *)(v15 + 16))
  {
    v45 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v46, v34 + 1, (unint64_t)&v51);
    v34 = *(unsigned int *)(v15 + 20);
    *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8 * v34) = *(_QWORD *)v45;
    v35 = v51;
  }
  else
  {
    *(_QWORD *)&(*v46)[8 * v34] = Space;
    v35 = Space;
  }
  *(_DWORD *)(v15 + 20) = v34 + 1;
  *(_QWORD *)(v35 + 32) = v15;
  PushVariable = JSC::Wasm::OMGIRGenerator::getPushVariable((uint64_t)a2, *(_DWORD *)(Space + 16));
  v37 = a2[11];
  v38 = (JSC::B3::Value *)a2[7];
  if (*a2)
    v39 = *(_QWORD *)(*a2 + 15000) | ((unint64_t)*(unsigned __int8 *)(*a2 + 14992) << 32);
  else
    v39 = 0;
  v40 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v40 + 8) = -1;
  *(_WORD *)(v40 + 12) = 9;
  *(_DWORD *)(v40 + 16) = 0;
  *(_BYTE *)(v40 + 20) = 1;
  *(_QWORD *)(v40 + 24) = v39;
  *(_QWORD *)(v40 + 32) = 0;
  *(_QWORD *)v40 = off_1E357F0F8;
  *(_QWORD *)(v40 + 40) = PushVariable;
  *(_QWORD *)(v40 + 48) = Space;
  JSC::B3::Procedure::addValueImpl(v38, (JSC::B3::Value *)v40);
  v51 = v40;
  result = v37 + 8;
  v42 = *(unsigned int *)(v37 + 20);
  if ((_DWORD)v42 == *(_DWORD *)(v37 + 16))
  {
    result = (uint64_t)WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v42 + 1, (unint64_t)&v51);
    v42 = *(unsigned int *)(v37 + 20);
    *(_QWORD *)(*(_QWORD *)(v37 + 8) + 8 * v42) = *(_QWORD *)result;
    v40 = v51;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)result + 8 * v42) = v40;
  }
  *(_DWORD *)(v37 + 20) = v42 + 1;
  *(_QWORD *)(v40 + 32) = v37;
  *v48 = PushVariable;
  *v47 = 0;
  v47[8] = 0;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addCallIndirect(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)2, a3, a4, a5, a6, a7, a8);
}

double JSC::B3::Value::allocate<JSC::B3::MemoryValue,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin,JSC::B3::MemoryValue*>(uint64_t a1, uint64_t a2)
{
  uint64_t Space;
  double result;

  Space = JSC::B3::Value::allocateSpace(67, 64);
  *(_DWORD *)(Space + 8) = -1;
  *(_WORD *)(Space + 12) = 67;
  *(_DWORD *)(Space + 16) = 2;
  *(_BYTE *)(Space + 20) = 1;
  *(_QWORD *)(Space + 24) = a1;
  *(_QWORD *)(Space + 32) = 0;
  *(_QWORD *)(Space + 64) = a2;
  *(_QWORD *)Space = off_1E357E4C8;
  *(_DWORD *)(Space + 40) = 0;
  result = NAN;
  *(_OWORD *)(Space + 44) = xmmword_19914F690;
  return result;
}

JSC::B3::Value *JSC::B3::Procedure::add<JSC::B3::Const64Value,JSC::B3::Origin,unsigned long>(JSC::B3::Value *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 4;
  *(_DWORD *)(v6 + 16) = 2;
  *(_BYTE *)(v6 + 20) = 0;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)v6 = off_1E357DA88;
  *(_QWORD *)(v6 + 40) = a3;
  return JSC::B3::Procedure::addValueImpl(a1, (JSC::B3::Value *)v6);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addCallIndirect(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_1>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)3, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addCallIndirect(unsigned int,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::CallLinkInfoBase::CallType)::$_2>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)6, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addCallRef(JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::B3::Variable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::Vector<JSC::B3::Variable *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)4, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(WTF::PrintStream &,JSC::B3::Origin),JSC::Wasm::parseAndCompileOMG(JSC::Wasm::CompilationContext &,JSC::Wasm::OptimizingJITCallee &,JSC::Wasm::FunctionData const&,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::Wasm::CalleeGroup &,JSC::Wasm::ModuleInformation const&,JSC::MemoryMode,JSC::Wasm::CompilationMode,unsigned int,std::optional<BOOL>,unsigned int,JSC::Wasm::TierUpCount *)::$_0>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  WTF::PrintStream *v5;
  char *String;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  WTF::PrintStream *v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;

  if (a3)
  {
    v3 = a3;
    v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v5, "%s", "Wasm: ");
    String = (char *)JSC::Wasm::makeString();
    v8 = v7;
    v9 = v3;
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 32))(v5);
    WTF::PrintStream::printf(v10, "%s", "{opcode: ");
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
    if (String)
    {
      v13 = v8 - 1;
      if (!v8)
        v13 = 0;
      WTF::StringImpl::utf8ForCharacters(String, v13, (uint64_t)&v15, v12);
    }
    else
    {
      v14 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = 0;
      *(_BYTE *)(v14 + 16) = 0;
      v15 = v14;
      v16 = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v15);
    if (v16 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
    WTF::PrintStream::printf(v10, "%s", ", location: ");
    WTF::PrintStream::printf(v10, "%p", (const void *)v9);
    WTF::PrintStream::printf(v10, "%s", "}");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v5 + 40))(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::emitChecksForModOrDiv(JSC::B3::Opcode,JSC::B3::Value *,JSC::B3::Value *)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)9, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::emitChecksForModOrDiv(JSC::B3::Opcode,JSC::B3::Value *,JSC::B3::Value *)::$_1>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)0xA, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI32Ctz(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  int v10;
  int v11;
  JSC::AssemblerBuffer *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(_BYTE **)(a3 + 8);
    v10 = *v9 & 0x1F;
    v11 = v10 | (32 * (v9[16] & 0x1F)) | 0x5AC00000;
    v12 = (JSC::AssemblerBuffer *)(a2 + 14);
    v13 = a2[50];
    if (v13 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v13 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v13) = v11;
    v14 = a2[50];
    v15 = v14 + 4;
    a2[50] = v14 + 4;
    if ((v14 + 8) > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v15 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v15) = v10 | (32 * v10) | 0x5AC01000;
    a2[50] += 4;
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI64Ctz(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  int v10;
  unsigned int v11;
  JSC::AssemblerBuffer *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(_BYTE **)(a3 + 8);
    v10 = *v9 & 0x1F;
    v11 = v10 | (32 * (v9[16] & 0x1F)) | 0xDAC00000;
    v12 = (JSC::AssemblerBuffer *)(a2 + 14);
    v13 = a2[50];
    if (v13 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v13 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v13) = v11;
    v14 = a2[50];
    v15 = v14 + 4;
    a2[50] = v14 + 4;
    if ((v14 + 8) > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v15 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v15) = v10 | (32 * v10) | 0xDAC01000;
    a2[50] += 4;
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI32Popcnt(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a3 + 20) <= 1u || !*(_DWORD *)(a3 + 52))
  {
    __break(0xC471u);
    JUMPOUT(0x198E08988);
  }
  JSC::MacroAssemblerARM64::countPopulation32(a2, *(_BYTE *)(*(_QWORD *)(a3 + 8) + 16) & 0x7F, **(_BYTE **)(a3 + 8) & 0x7F, **(char **)(a3 + 40), a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::countPopulation32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  char v10;
  JSC::AssemblerBuffer *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = (JSC::AssemblerBuffer *)(a1 + 14);
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = v8 | (32 * (v10 & 0x1F)) | 0x1E270000;
  v14 = a1[50];
  v15 = v14 + 4;
  a1[50] = v14 + 4;
  v16 = v8 | (32 * v8);
  if ((v14 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v15 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v15) = v16 | 0x4E205800;
  v17 = a1[50];
  v18 = v17 + 4;
  a1[50] = v17 + 4;
  v19 = v16 | 0x4E31B800;
  if ((v17 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v18 = a1[50];
  }
  v20 = 32 * v8;
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v18) = v19;
  v21 = a1[50];
  v22 = v21 + 4;
  a1[50] = v21 + 4;
  if ((v21 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v22 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v22) = v20 | v9 & 0x1F | 0x1E260000;
  a1[50] += 4;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI64Popcnt(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a3 + 20) <= 1u || !*(_DWORD *)(a3 + 52))
  {
    __break(0xC471u);
    JUMPOUT(0x198E08B2CLL);
  }
  JSC::MacroAssemblerARM64::countPopulation64(a2, *(_BYTE *)(*(_QWORD *)(a3 + 8) + 16) & 0x7F, **(_BYTE **)(a3 + 8) & 0x7F, **(char **)(a3 + 40), a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::countPopulation64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  char v10;
  JSC::AssemblerBuffer *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = (JSC::AssemblerBuffer *)(a1 + 14);
  v13 = a1[50];
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v13) = v8 | (32 * (v10 & 0x1F)) | 0x9E670000;
  v14 = a1[50];
  v15 = v14 + 4;
  a1[50] = v14 + 4;
  v16 = v8 | (32 * v8);
  if ((v14 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v15 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v15) = v16 | 0x4E205800;
  v17 = a1[50];
  v18 = v17 + 4;
  a1[50] = v17 + 4;
  v19 = v16 | 0x4E31B800;
  if ((v17 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v18 = a1[50];
  }
  v20 = 32 * v8;
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v18) = v19;
  v21 = a1[50];
  v22 = v21 + 4;
  a1[50] = v21 + 4;
  if ((v21 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v22 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v22) = v20 | v9 & 0x1F | 0x9E660000;
  a1[50] += 4;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addF64ConvertUI64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  unsigned int v10;
  char v11;
  char v12;
  char v13;
  unsigned int v14;

  v9 = *(char **)(a3 + 8);
  v10 = *(_DWORD *)(a3 + 20);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (v10 <= 1)
  {
    __break(0xC471u);
  }
  else
  {
    v12 = v9[16];
    v13 = *v9;
    v14 = *(_DWORD *)(a2 + 200);
    if (v14 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v14 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = ((v13 & 0x7F) - 32) | (32 * (v12 & 0x1F)) | 0x9E630000;
    *(_DWORD *)(a2 + 200) += 4;
    *(_BYTE *)(a2 + 212) = v11;
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addF32ConvertUI64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  unsigned int v10;
  char v11;
  char v12;
  char v13;
  unsigned int v14;

  v9 = *(char **)(a3 + 8);
  v10 = *(_DWORD *)(a3 + 20);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (v10 <= 1)
  {
    __break(0xC471u);
  }
  else
  {
    v12 = v9[16];
    v13 = *v9;
    v14 = *(_DWORD *)(a2 + 200);
    if (v14 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v14 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = ((v13 & 0x7F) - 32) | (32 * (v12 & 0x1F)) | 0x9E230000;
    *(_DWORD *)(a2 + 200) += 4;
    *(_BYTE *)(a2 + 212) = v11;
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addF64Nearest(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  char v10;
  char v11;
  unsigned int v12;

  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(char **)(a3 + 8);
    v10 = v9[16];
    v11 = *v9;
    v12 = a2[50];
    if (v12 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v12) = (32 * (v10 & 0x7F) - 1024) | ((v11 & 0x7F) - 32) | 0x1E644000;
    a2[50] += 4;
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addF32Nearest(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  char v10;
  char v11;
  unsigned int v12;

  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(char **)(a3 + 8);
    v10 = v9[16];
    v11 = *v9;
    v12 = a2[50];
    if (v12 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v12) = (32 * (v10 & 0x7F) - 1024) | ((v11 & 0x7F) - 32) | 0x1E244000;
    a2[50] += 4;
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addF64Trunc(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  char v10;
  char v11;
  unsigned int v12;

  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(char **)(a3 + 8);
    v10 = v9[16];
    v11 = *v9;
    v12 = a2[50];
    if (v12 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v12) = (32 * (v10 & 0x7F) - 1024) | ((v11 & 0x7F) - 32) | 0x1E65C000;
    a2[50] += 4;
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addF32Trunc(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  char v10;
  char v11;
  unsigned int v12;

  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(char **)(a3 + 8);
    v10 = v9[16];
    v11 = *v9;
    v12 = a2[50];
    if (v12 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v12) = (32 * (v10 & 0x7F) - 1024) | ((v11 & 0x7F) - 32) | 0x1E25C000;
    a2[50] += 4;
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI32TruncSF64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)7, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI32TruncSF64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_1>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  char v10;
  char v11;
  unsigned int v12;

  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(char **)(a3 + 8);
    v10 = v9[16];
    v11 = *v9;
    v12 = a2[50];
    if (v12 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v12) = ((v11 & 0x1F | (32 * (v10 & 0x7F))) - 1024) | 0x1E780000;
    a2[50] += 4;
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI32TruncSF32(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)7, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI32TruncSF32(JSC::B3::Variable *,JSC::B3::Variable *&)::$_1>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  char v10;
  char v11;
  unsigned int v12;

  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(char **)(a3 + 8);
    v10 = v9[16];
    v11 = *v9;
    v12 = a2[50];
    if (v12 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v12) = ((v11 & 0x1F | (32 * (v10 & 0x7F))) - 1024) | 0x1E380000;
    a2[50] += 4;
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI32TruncUF64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)7, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI32TruncUF64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_1>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  char v10;
  char v11;
  unsigned int v12;

  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(char **)(a3 + 8);
    v10 = v9[16];
    v11 = *v9;
    v12 = a2[50];
    if (v12 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v12) = ((v11 & 0x1F | (32 * (v10 & 0x7F))) - 1024) | 0x1E790000;
    a2[50] += 4;
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI32TruncUF32(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)7, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI32TruncUF32(JSC::B3::Variable *,JSC::B3::Variable *&)::$_1>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  char v10;
  char v11;
  unsigned int v12;

  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(char **)(a3 + 8);
    v10 = v9[16];
    v11 = *v9;
    v12 = a2[50];
    if (v12 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v12) = ((v11 & 0x1F | (32 * (v10 & 0x7F))) - 1024) | 0x1E390000;
    a2[50] += 4;
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI64TruncSF64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)7, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI64TruncSF64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_1>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  char v10;
  char v11;
  unsigned int v12;

  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(char **)(a3 + 8);
    v10 = v9[16];
    v11 = *v9;
    v12 = a2[50];
    if (v12 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v12) = ((v11 & 0x1F | (32 * (v10 & 0x7F))) - 1024) | 0x9E780000;
    a2[50] += 4;
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI64TruncUF64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)7, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI64TruncUF64(JSC::B3::Variable *,JSC::B3::Variable *&)::$_1>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  unsigned int v10;
  char v11;
  char v12;
  char v13;
  unsigned int v14;

  v9 = *(char **)(a3 + 8);
  v10 = *(_DWORD *)(a3 + 20);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (v10 <= 1)
  {
    __break(0xC471u);
  }
  else
  {
    v12 = v9[16];
    v13 = *v9;
    v14 = *(_DWORD *)(a2 + 200);
    if (v14 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v14 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = ((v13 & 0x1F | (32 * (v12 & 0x7F))) - 1024) | 0x9E790000;
    *(_DWORD *)(a2 + 200) += 4;
    *(_BYTE *)(a2 + 212) = v11;
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI64TruncSF32(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)7, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI64TruncSF32(JSC::B3::Variable *,JSC::B3::Variable *&)::$_1>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  char v10;
  char v11;
  unsigned int v12;

  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(char **)(a3 + 8);
    v10 = v9[16];
    v11 = *v9;
    v12 = a2[50];
    if (v12 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v12) = ((v11 & 0x1F | (32 * (v10 & 0x7F))) - 1024) | 0x9E380000;
    a2[50] += 4;
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI64TruncUF32(JSC::B3::Variable *,JSC::B3::Variable *&)::$_0>::run(int a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::Wasm::OMGIRGenerator::emitExceptionCheck(a2, (JSC::ARM64LogicalImmediate *)7, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::Wasm::OMGIRGenerator::addI64TruncUF32(JSC::B3::Variable *,JSC::B3::Variable *&)::$_1>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  unsigned int v10;
  char v11;
  char v12;
  char v13;
  unsigned int v14;

  v9 = *(char **)(a3 + 8);
  v10 = *(_DWORD *)(a3 + 20);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (v10 <= 1)
  {
    __break(0xC471u);
  }
  else
  {
    v12 = v9[16];
    v13 = *v9;
    v14 = *(_DWORD *)(a2 + 200);
    if (v14 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v14 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = ((v13 & 0x1F | (32 * (v12 & 0x7F))) - 1024) | 0x9E390000;
    *(_DWORD *)(a2 + 200) += 4;
    *(_BYTE *)(a2 + 212) = v11;
  }
}

JSC::FunctionAllowlist *std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::$_0 &&>>()
{
  return JSC::FunctionAllowlist::FunctionAllowlist((JSC::FunctionAllowlist *)&JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::omgAllowlist, (const char *)qword_1ECF4C318);
}

uint64_t WTF::dataLog<char [49],unsigned int,char [3],char const*,char [7],char const*,char [2]>(_DWORD *a1, const char **a2, const char **a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "Generated OMG code for WebAssembly OMG function[");
  WTF::PrintStream::printf(v8, "%u", *a1);
  WTF::PrintStream::printf(v8, "%s", "] ");
  WTF::PrintStream::printf(v8, "%s", *a2);
  WTF::PrintStream::printf(v8, "%s", " name ");
  WTF::PrintStream::printf(v8, "%s", *a3);
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::ScopedLambdaFunctor<void ()(JSC::B3::Air::Inst &),JSC::Wasm::OMGPlan::dumpDisassembly(JSC::Wasm::CompilationContext &,JSC::LinkBuffer &,unsigned int,JSC::Wasm::TypeDefinition const&,unsigned int)::$_0>::implFunction(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  JSC::B3::Value *v5;
  const JSC::B3::Procedure *v6;
  unint64_t v7;
  char v8;
  char **v9;
  char *v10;

  v2 = *(_QWORD *)(a2 + 112);
  if (v2)
  {
    v3 = result;
    if (v2 != **(_QWORD **)(result + 16))
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 24) + 160) + 197))
      {
        WTF::dataLog<char const*>(*(const char ***)(result + 32));
        v5 = *(JSC::B3::Value **)(a2 + 112);
        v6 = *(const JSC::B3::Procedure **)(*(_QWORD *)(v3 + 24) + 24);
        v7 = atomic_load(&WTF::initializeLogFile(void)::once);
        if (v7 != -1)
        {
          v10 = &v8;
          v9 = &v10;
          std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
        }
        JSC::B3::Value::deepDump(v5, v6, (WTF::PrintStream *)WTF::s_file);
        result = WTF::dataLog<char [16]>("\n");
        **(_QWORD **)(v3 + 16) = *(_QWORD *)(a2 + 112);
      }
    }
  }
  return result;
}

uint64_t WTF::dataLog<char [60],unsigned int,char [3],char const*,char [7],char const*,char [2]>(_DWORD *a1, const char **a2, const char **a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "Generated OMG code for WebAssembly OMGforOSREntry function[");
  WTF::PrintStream::printf(v8, "%u", *a1);
  WTF::PrintStream::printf(v8, "%s", "] ");
  WTF::PrintStream::printf(v8, "%s", *a2);
  WTF::PrintStream::printf(v8, "%s", " name ");
  WTF::PrintStream::printf(v8, "%s", *a3);
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::ScopedLambdaFunctor<void ()(JSC::B3::Air::Inst &),JSC::Wasm::OSREntryPlan::dumpDisassembly(JSC::Wasm::CompilationContext &,JSC::LinkBuffer &,unsigned int,JSC::Wasm::TypeDefinition const&,unsigned int)::$_0>::implFunction(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  JSC::B3::Value *v5;
  const JSC::B3::Procedure *v6;
  unint64_t v7;
  char v8;
  char **v9;
  char *v10;

  v2 = *(_QWORD *)(a2 + 112);
  if (v2)
  {
    v3 = result;
    if (v2 != **(_QWORD **)(result + 16))
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 24) + 160) + 197))
      {
        WTF::dataLog<char const*>(*(const char ***)(result + 32));
        v5 = *(JSC::B3::Value **)(a2 + 112);
        v6 = *(const JSC::B3::Procedure **)(*(_QWORD *)(v3 + 24) + 24);
        v7 = atomic_load(&WTF::initializeLogFile(void)::once);
        if (v7 != -1)
        {
          v10 = &v8;
          v9 = &v10;
          std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
        }
        JSC::B3::Value::deepDump(v5, v6, (WTF::PrintStream *)WTF::s_file);
        result = WTF::dataLog<char [16]>("\n");
        **(_QWORD **)(v3 + 16) = *(_QWORD *)(a2 + 112);
      }
    }
  }
  return result;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::WasmOpcodeCounter::singleton(void)::$_0 &&>>()
{
  bzero(&JSC::Wasm::WasmOpcodeCounter::singleton(void)::counter, 0xBB0uLL);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair*,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  __n128 *v22;
  __n128 *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __n128 *v27;
  unint64_t v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 *v32;
  __n128 *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  __n128 *v37;
  unint64_t v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  unint64_t v42;
  unint64_t v43;
  __n128 *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __n128 *v48;
  __n128 *v49;
  __n128 *v50;
  unint64_t v51;
  __n128 *v52;
  unint64_t v53;
  __n128 *v54;
  __n128 *v55;
  unint64_t v56;
  __n128 *v57;
  unint64_t v58;
  __n128 *v59;
  BOOL v60;
  __n128 v61;
  unint64_t v62;
  __n128 *v63;
  unint64_t v64;
  __n128 *v65;
  unint64_t v66;
  __n128 *v67;
  __n128 *v68;
  unint64_t v69;
  __n128 *v70;
  unint64_t v71;
  __n128 *v72;
  unint64_t v73;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v81;
  uint64_t v82;
  __n128 *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  __n128 *v89;
  int64_t v90;
  int64_t v91;
  uint64_t v92;
  __n128 *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  __n128 *v97;
  unint64_t v98;
  __n128 *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  __n128 *v107;
  __n128 *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  __n128 *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __n128 *v121;
  __n128 *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  __n128 *v126;
  __n128 *v128;
  unint64_t v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair*>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v3;
  __n128 v4;
  __n128 *v5;
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  __n128 *v11;
  __n128 *v12;
  unint64_t v13;
  unint64_t v14;
  __n128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __n128 *v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;

  v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      if (a1->n128_u64[1] < a2[-1].n128_u64[1])
      {
        v4 = *a1;
        *a1 = a2[-1];
        a2[-1] = v4;
      }
      return 1;
    case 3:
      v11 = a1 + 1;
      v12 = a2 - 1;
      v13 = a1[1].n128_u64[1];
      v14 = a2[-1].n128_u64[1];
      if (a1->n128_u64[1] >= v13)
        goto LABEL_42;
      if (v13 >= v14)
      {
        v34 = *a1;
        *a1 = *v11;
        *v11 = v34;
        if (a1[1].n128_u64[1] >= a2[-1].n128_u64[1])
          return 1;
        v15 = *v11;
        *v11 = *v12;
      }
      else
      {
        v15 = *a1;
        *a1 = *v12;
      }
      *v12 = v15;
      return 1;
    case 4:
      v11 = a1 + 1;
      v12 = a1 + 2;
      v16 = a1->n128_u64[1];
      v17 = a1[1].n128_u64[1];
      v18 = a1[2].n128_u64[1];
      if (v16 >= v17)
      {
        if (v17 < v18)
        {
          v22 = *v11;
          *v11 = *v12;
          *v12 = v22;
          if (v16 < a1[1].n128_u64[1])
          {
            v23 = *a1;
            *a1 = *v11;
            *v11 = v23;
          }
        }
      }
      else
      {
        if (v17 >= v18)
        {
          v35 = *a1;
          *a1 = *v11;
          *v11 = v35;
          if (a1[1].n128_u64[1] >= v18)
            goto LABEL_40;
          v19 = *v11;
          *v11 = *v12;
        }
        else
        {
          v19 = *a1;
          *a1 = *v12;
        }
        *v12 = v19;
      }
LABEL_40:
      if (a1[2].n128_u64[1] < a2[-1].n128_u64[1])
      {
        v36 = *v12;
        *v12 = a2[-1];
        a2[-1] = v36;
        v13 = a1[1].n128_u64[1];
        v14 = a1[2].n128_u64[1];
LABEL_42:
        if (v13 < v14)
        {
          v37 = *v11;
          *v11 = *v12;
          *v12 = v37;
          if (a1->n128_u64[1] < a1[1].n128_u64[1])
          {
            v38 = *a1;
            *a1 = *v11;
            *v11 = v38;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v5 = a1 + 2;
      v6 = a1 + 1;
      v7 = a1->n128_u64[1];
      v8 = a1[1].n128_u64[1];
      v9 = a1[2].n128_u64[1];
      if (v7 >= v8)
      {
        if (v8 < v9)
        {
          v20 = *v6;
          *v6 = *v5;
          *v5 = v20;
          if (v7 < a1[1].n128_u64[1])
          {
            v21 = *a1;
            *a1 = *v6;
            *v6 = v21;
          }
        }
      }
      else
      {
        if (v8 >= v9)
        {
          v24 = *a1;
          *a1 = *v6;
          *v6 = v24;
          if (a1[1].n128_u64[1] >= v9)
            goto LABEL_23;
          v10 = *v6;
          *v6 = *v5;
        }
        else
        {
          v10 = *a1;
          *a1 = *v5;
        }
        *v5 = v10;
      }
LABEL_23:
      v25 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v26 = 0;
      v27 = 0;
      break;
  }
  while (1)
  {
    v28 = v5->n128_u64[1];
    v29 = v25->n128_u64[1];
    if (v28 < v29)
    {
      v30 = v25->n128_u64[0];
      v31 = v26;
      while (1)
      {
        *(__n128 *)((char *)a1 + v31 + 48) = *(__n128 *)((char *)a1 + v31 + 32);
        if (v31 == -32)
          break;
        v32 = *(unint64_t *)((char *)&a1[1].n128_u64[1] + v31);
        v31 -= 16;
        if (v32 >= v29)
        {
          v33 = (__n128 *)((char *)a1 + v31 + 48);
          goto LABEL_31;
        }
      }
      v33 = a1;
LABEL_31:
      v33->n128_u64[0] = v30;
      v33->n128_u64[1] = v29;
      if (++v27 == 8)
        return &v25[1] == a2;
    }
    v5 = v25;
    v26 += 16;
    if (++v25 == a2)
      return 1;
  }
}

__n128 std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair*>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  unint64_t v6;
  unint64_t v7;

  v6 = a2->n128_u64[1];
  v7 = a3->n128_u64[1];
  if (a1->n128_u64[1] >= v6)
  {
    if (v6 < v7)
    {
      result = *a2;
      *a2 = *a3;
      *a3 = result;
      if (a1->n128_u64[1] < a2->n128_u64[1])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v6 < v7)
    {
      result = *a1;
      *a1 = *a3;
LABEL_9:
      *a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    *a1 = *a2;
    *a2 = result;
    if (a2->n128_u64[1] < a3->n128_u64[1])
    {
      result = *a2;
      *a2 = *a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (a3->n128_u64[1] < a4->n128_u64[1])
  {
    result = *a3;
    *a3 = *a4;
    *a4 = result;
    if (a2->n128_u64[1] < a3->n128_u64[1])
    {
      result = *a2;
      *a2 = *a3;
      *a3 = result;
      if (a1->n128_u64[1] < a2->n128_u64[1])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  if (a4->n128_u64[1] < a5->n128_u64[1])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a3->n128_u64[1] < a4->n128_u64[1])
    {
      result = *a3;
      *a3 = *a4;
      *a4 = result;
      if (a2->n128_u64[1] < a3->n128_u64[1])
      {
        result = *a2;
        *a2 = *a3;
        *a3 = result;
        if (a1->n128_u64[1] < a2->n128_u64[1])
        {
          result = *a1;
          *a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::dataLog<char const*,char [2],int,char [6],JSC::Wasm::ExtSIMDOpTypeDump,char [3],unsigned long long,char [2]>(const char **a1, _DWORD *a2, int *a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  int v11;
  const char *v12;
  WTF::PrintStream *v13;
  char v15;
  char **v16;
  char *v17;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v10, "%s", *a1);
  WTF::PrintStream::printf(v10, "%s", "<");
  WTF::PrintStream::printf(v10, "%d", *a2);
  WTF::PrintStream::printf(v10, "%s", ">    ");
  v11 = *a3;
  v12 = "I8x16Eq";
  switch(v11)
  {
    case 0:
      v12 = "V128Load";
      goto LABEL_248;
    case 1:
      v12 = "V128Load8x8S";
      goto LABEL_248;
    case 2:
      v12 = "V128Load8x8U";
      goto LABEL_248;
    case 3:
      v12 = "V128Load16x4S";
      goto LABEL_248;
    case 4:
      v12 = "V128Load16x4U";
      goto LABEL_248;
    case 5:
      v12 = "V128Load32x2S";
      goto LABEL_248;
    case 6:
      v12 = "V128Load32x2U";
      goto LABEL_248;
    case 7:
      v12 = "V128Load8Splat";
      goto LABEL_248;
    case 8:
      v12 = "V128Load16Splat";
      goto LABEL_248;
    case 9:
      v12 = "V128Load32Splat";
      goto LABEL_248;
    case 10:
      v12 = "V128Load64Splat";
      goto LABEL_248;
    case 11:
      v12 = "V128Store";
      goto LABEL_248;
    case 12:
      v12 = "V128Const";
      goto LABEL_248;
    case 13:
      v12 = "I8x16Shuffle";
      goto LABEL_248;
    case 14:
      v12 = "I8x16Swizzle";
      goto LABEL_248;
    case 15:
      v12 = "I8x16Splat";
      goto LABEL_248;
    case 16:
      v12 = "I16x8Splat";
      goto LABEL_248;
    case 17:
      v12 = "I32x4Splat";
      goto LABEL_248;
    case 18:
      v12 = "I64x2Splat";
      goto LABEL_248;
    case 19:
      v12 = "F32x4Splat";
      goto LABEL_248;
    case 20:
      v12 = "F64x2Splat";
      goto LABEL_248;
    case 21:
      v12 = "I8x16ExtractLaneS";
      goto LABEL_248;
    case 22:
      v12 = "I8x16ExtractLaneU";
      goto LABEL_248;
    case 23:
      v12 = "I8x16ReplaceLane";
      goto LABEL_248;
    case 24:
      v12 = "I16x8ExtractLaneS";
      goto LABEL_248;
    case 25:
      v12 = "I16x8ExtractLaneU";
      goto LABEL_248;
    case 26:
      v12 = "I16x8ReplaceLane";
      goto LABEL_248;
    case 27:
      v12 = "I32x4ExtractLane";
      goto LABEL_248;
    case 28:
      v12 = "I32x4ReplaceLane";
      goto LABEL_248;
    case 29:
      v12 = "I64x2ExtractLane";
      goto LABEL_248;
    case 30:
      v12 = "I64x2ReplaceLane";
      goto LABEL_248;
    case 31:
      v12 = "F32x4ExtractLane";
      goto LABEL_248;
    case 32:
      v12 = "F32x4ReplaceLane";
      goto LABEL_248;
    case 33:
      v12 = "F64x2ExtractLane";
      goto LABEL_248;
    case 34:
      v12 = "F64x2ReplaceLane";
      goto LABEL_248;
    case 35:
      goto LABEL_248;
    case 36:
      v12 = "I8x16Ne";
      goto LABEL_248;
    case 37:
      v12 = "I8x16LtS";
      goto LABEL_248;
    case 38:
      v12 = "I8x16LtU";
      goto LABEL_248;
    case 39:
      v12 = "I8x16GtS";
      goto LABEL_248;
    case 40:
      v12 = "I8x16GtU";
      goto LABEL_248;
    case 41:
      v12 = "I8x16LeS";
      goto LABEL_248;
    case 42:
      v12 = "I8x16LeU";
      goto LABEL_248;
    case 43:
      v12 = "I8x16GeS";
      goto LABEL_248;
    case 44:
      v12 = "I8x16GeU";
      goto LABEL_248;
    case 45:
      v12 = "I16x8Eq";
      goto LABEL_248;
    case 46:
      v12 = "I16x8Ne";
      goto LABEL_248;
    case 47:
      v12 = "I16x8LtS";
      goto LABEL_248;
    case 48:
      v12 = "I16x8LtU";
      goto LABEL_248;
    case 49:
      v12 = "I16x8GtS";
      goto LABEL_248;
    case 50:
      v12 = "I16x8GtU";
      goto LABEL_248;
    case 51:
      v12 = "I16x8LeS";
      goto LABEL_248;
    case 52:
      v12 = "I16x8LeU";
      goto LABEL_248;
    case 53:
      v12 = "I16x8GeS";
      goto LABEL_248;
    case 54:
      v12 = "I16x8GeU";
      goto LABEL_248;
    case 55:
      v12 = "I32x4Eq";
      goto LABEL_248;
    case 56:
      v12 = "I32x4Ne";
      goto LABEL_248;
    case 57:
      v12 = "I32x4LtS";
      goto LABEL_248;
    case 58:
      v12 = "I32x4LtU";
      goto LABEL_248;
    case 59:
      v12 = "I32x4GtS";
      goto LABEL_248;
    case 60:
      v12 = "I32x4GtU";
      goto LABEL_248;
    case 61:
      v12 = "I32x4LeS";
      goto LABEL_248;
    case 62:
      v12 = "I32x4LeU";
      goto LABEL_248;
    case 63:
      v12 = "I32x4GeS";
      goto LABEL_248;
    case 64:
      v12 = "I32x4GeU";
      goto LABEL_248;
    case 65:
      v12 = "F32x4Eq";
      goto LABEL_248;
    case 66:
      v12 = "F32x4Ne";
      goto LABEL_248;
    case 67:
      v12 = "F32x4Lt";
      goto LABEL_248;
    case 68:
      v12 = "F32x4Gt";
      goto LABEL_248;
    case 69:
      v12 = "F32x4Le";
      goto LABEL_248;
    case 70:
      v12 = "F32x4Ge";
      goto LABEL_248;
    case 71:
      v12 = "F64x2Eq";
      goto LABEL_248;
    case 72:
      v12 = "F64x2Ne";
      goto LABEL_248;
    case 73:
      v12 = "F64x2Lt";
      goto LABEL_248;
    case 74:
      v12 = "F64x2Gt";
      goto LABEL_248;
    case 75:
      v12 = "F64x2Le";
      goto LABEL_248;
    case 76:
      v12 = "F64x2Ge";
      goto LABEL_248;
    case 77:
      v12 = "V128Not";
      goto LABEL_248;
    case 78:
      v12 = "V128And";
      goto LABEL_248;
    case 79:
      v12 = "V128Andnot";
      goto LABEL_248;
    case 80:
      v12 = "V128Or";
      goto LABEL_248;
    case 81:
      v12 = "V128Xor";
      goto LABEL_248;
    case 82:
      v12 = "V128Bitselect";
      goto LABEL_248;
    case 83:
      v12 = "V128AnyTrue";
      goto LABEL_248;
    case 84:
      v12 = "V128Load8Lane";
      goto LABEL_248;
    case 85:
      v12 = "V128Load16Lane";
      goto LABEL_248;
    case 86:
      v12 = "V128Load32Lane";
      goto LABEL_248;
    case 87:
      v12 = "V128Load64Lane";
      goto LABEL_248;
    case 88:
      v12 = "V128Store8Lane";
      goto LABEL_248;
    case 89:
      v12 = "V128Store16Lane";
      goto LABEL_248;
    case 90:
      v12 = "V128Store32Lane";
      goto LABEL_248;
    case 91:
      v12 = "V128Store64Lane";
      goto LABEL_248;
    case 92:
      v12 = "V128Load32Zero";
      goto LABEL_248;
    case 93:
      v12 = "V128Load64Zero";
      goto LABEL_248;
    case 94:
      v12 = "F32x4DemoteF64x2Zero";
      goto LABEL_248;
    case 95:
      v12 = "F64x2PromoteLowF32x4";
      goto LABEL_248;
    case 96:
      v12 = "I8x16Abs";
      goto LABEL_248;
    case 97:
      v12 = "I8x16Neg";
      goto LABEL_248;
    case 98:
      v12 = "I8x16Popcnt";
      goto LABEL_248;
    case 99:
      v12 = "I8x16AllTrue";
      goto LABEL_248;
    case 100:
      v12 = "I8x16Bitmask";
      goto LABEL_248;
    case 101:
      v12 = "I8x16NarrowI16x8S";
      goto LABEL_248;
    case 102:
      v12 = "I8x16NarrowI16x8U";
      goto LABEL_248;
    case 103:
      v12 = "F32x4Ceil";
      goto LABEL_248;
    case 104:
      v12 = "F32x4Floor";
      goto LABEL_248;
    case 105:
      v12 = "F32x4Trunc";
      goto LABEL_248;
    case 106:
      v12 = "F32x4Nearest";
      goto LABEL_248;
    case 107:
      v12 = "I8x16Shl";
      goto LABEL_248;
    case 108:
      v12 = "I8x16ShrS";
      goto LABEL_248;
    case 109:
      v12 = "I8x16ShrU";
      goto LABEL_248;
    case 110:
      v12 = "I8x16Add";
      goto LABEL_248;
    case 111:
      v12 = "I8x16AddSatS";
      goto LABEL_248;
    case 112:
      v12 = "I8x16AddSatU";
      goto LABEL_248;
    case 113:
      v12 = "I8x16Sub";
      goto LABEL_248;
    case 114:
      v12 = "I8x16SubSatS";
      goto LABEL_248;
    case 115:
      v12 = "I8x16SubSatU";
      goto LABEL_248;
    case 116:
      v12 = "F64x2Ceil";
      goto LABEL_248;
    case 117:
      v12 = "F64x2Floor";
      goto LABEL_248;
    case 118:
      v12 = "I8x16MinS";
      goto LABEL_248;
    case 119:
      v12 = "I8x16MinU";
      goto LABEL_248;
    case 120:
      v12 = "I8x16MaxS";
      goto LABEL_248;
    case 121:
      v12 = "I8x16MaxU";
      goto LABEL_248;
    case 122:
      v12 = "F64x2Trunc";
      goto LABEL_248;
    case 123:
      v12 = "I8x16AvgrU";
      goto LABEL_248;
    case 124:
      v12 = "I16x8ExtaddPairwiseI8x16S";
      goto LABEL_248;
    case 125:
      v12 = "I16x8ExtaddPairwiseI8x16U";
      goto LABEL_248;
    case 126:
      v12 = "I32x4ExtaddPairwiseI16x8S";
      goto LABEL_248;
    case 127:
      v12 = "I32x4ExtaddPairwiseI16x8U";
      goto LABEL_248;
    case 128:
      v12 = "I16x8Abs";
      goto LABEL_248;
    case 129:
      v12 = "I16x8Neg";
      goto LABEL_248;
    case 130:
      v12 = "I16x8Q15mulrSatS";
      goto LABEL_248;
    case 131:
      v12 = "I16x8AllTrue";
      goto LABEL_248;
    case 132:
      v12 = "I16x8Bitmask";
      goto LABEL_248;
    case 133:
      v12 = "I16x8NarrowI32x4S";
      goto LABEL_248;
    case 134:
      v12 = "I16x8NarrowI32x4U";
      goto LABEL_248;
    case 135:
      v12 = "I16x8ExtendLowI8x16S";
      goto LABEL_248;
    case 136:
      v12 = "I16x8ExtendHighI8x16S";
      goto LABEL_248;
    case 137:
      v12 = "I16x8ExtendLowI8x16U";
      goto LABEL_248;
    case 138:
      v12 = "I16x8ExtendHighI8x16U";
      goto LABEL_248;
    case 139:
      v12 = "I16x8Shl";
      goto LABEL_248;
    case 140:
      v12 = "I16x8ShrS";
      goto LABEL_248;
    case 141:
      v12 = "I16x8ShrU";
      goto LABEL_248;
    case 142:
      v12 = "I16x8Add";
      goto LABEL_248;
    case 143:
      v12 = "I16x8AddSatS";
      goto LABEL_248;
    case 144:
      v12 = "I16x8AddSatU";
      goto LABEL_248;
    case 145:
      v12 = "I16x8Sub";
      goto LABEL_248;
    case 146:
      v12 = "I16x8SubSatS";
      goto LABEL_248;
    case 147:
      v12 = "I16x8SubSatU";
      goto LABEL_248;
    case 148:
      v12 = "F64x2Nearest";
      goto LABEL_248;
    case 149:
      v12 = "I16x8Mul";
      goto LABEL_248;
    case 150:
      v12 = "I16x8MinS";
      goto LABEL_248;
    case 151:
      v12 = "I16x8MinU";
      goto LABEL_248;
    case 152:
      v12 = "I16x8MaxS";
      goto LABEL_248;
    case 153:
      v12 = "I16x8MaxU";
      goto LABEL_248;
    case 155:
      v12 = "I16x8AvgrU";
      goto LABEL_248;
    case 156:
      v12 = "I16x8ExtmulLowI8x16S";
      goto LABEL_248;
    case 157:
      v12 = "I16x8ExtmulHighI8x16S";
      goto LABEL_248;
    case 158:
      v12 = "I16x8ExtmulLowI8x16U";
      goto LABEL_248;
    case 159:
      v12 = "I16x8ExtmulHighI8x16U";
      goto LABEL_248;
    case 160:
      v12 = "I32x4Abs";
      goto LABEL_248;
    case 161:
      v12 = "I32x4Neg";
      goto LABEL_248;
    case 163:
      v12 = "I32x4AllTrue";
      goto LABEL_248;
    case 164:
      v12 = "I32x4Bitmask";
      goto LABEL_248;
    case 167:
      v12 = "I32x4ExtendLowI16x8S";
      goto LABEL_248;
    case 168:
      v12 = "I32x4ExtendHighI16x8S";
      goto LABEL_248;
    case 169:
      v12 = "I32x4ExtendLowI16x8U";
      goto LABEL_248;
    case 170:
      v12 = "I32x4ExtendHighI16x8U";
      goto LABEL_248;
    case 171:
      v12 = "I32x4Shl";
      goto LABEL_248;
    case 172:
      v12 = "I32x4ShrS";
      goto LABEL_248;
    case 173:
      v12 = "I32x4ShrU";
      goto LABEL_248;
    case 174:
      v12 = "I32x4Add";
      goto LABEL_248;
    case 177:
      v12 = "I32x4Sub";
      goto LABEL_248;
    case 181:
      v12 = "I32x4Mul";
      goto LABEL_248;
    case 182:
      v12 = "I32x4MinS";
      goto LABEL_248;
    case 183:
      v12 = "I32x4MinU";
      goto LABEL_248;
    case 184:
      v12 = "I32x4MaxS";
      goto LABEL_248;
    case 185:
      v12 = "I32x4MaxU";
      goto LABEL_248;
    case 186:
      v12 = "I32x4DotI16x8S";
      goto LABEL_248;
    case 188:
      v12 = "I32x4ExtmulLowI16x8S";
      goto LABEL_248;
    case 189:
      v12 = "I32x4ExtmulHighI16x8S";
      goto LABEL_248;
    case 190:
      v12 = "I32x4ExtmulLowI16x8U";
      goto LABEL_248;
    case 191:
      v12 = "I32x4ExtmulHighI16x8U";
      goto LABEL_248;
    case 192:
      v12 = "I64x2Abs";
      goto LABEL_248;
    case 193:
      v12 = "I64x2Neg";
      goto LABEL_248;
    case 195:
      v12 = "I64x2AllTrue";
      goto LABEL_248;
    case 196:
      v12 = "I64x2Bitmask";
      goto LABEL_248;
    case 199:
      v12 = "I64x2ExtendLowI32x4S";
      goto LABEL_248;
    case 200:
      v12 = "I64x2ExtendHighI32x4S";
      goto LABEL_248;
    case 201:
      v12 = "I64x2ExtendLowI32x4U";
      goto LABEL_248;
    case 202:
      v12 = "I64x2ExtendHighI32x4U";
      goto LABEL_248;
    case 203:
      v12 = "I64x2Shl";
      goto LABEL_248;
    case 204:
      v12 = "I64x2ShrS";
      goto LABEL_248;
    case 205:
      v12 = "I64x2ShrU";
      goto LABEL_248;
    case 206:
      v12 = "I64x2Add";
      goto LABEL_248;
    case 209:
      v12 = "I64x2Sub";
      goto LABEL_248;
    case 213:
      v12 = "I64x2Mul";
      goto LABEL_248;
    case 214:
      v12 = "I64x2Eq";
      goto LABEL_248;
    case 215:
      v12 = "I64x2Ne";
      goto LABEL_248;
    case 216:
      v12 = "I64x2LtS";
      goto LABEL_248;
    case 217:
      v12 = "I64x2GtS";
      goto LABEL_248;
    case 218:
      v12 = "I64x2LeU";
      goto LABEL_248;
    case 219:
      v12 = "I64x2GeU";
      goto LABEL_248;
    case 220:
      v12 = "I64x2ExtmulLowI32x4S";
      goto LABEL_248;
    case 221:
      v12 = "I64x2ExtmulHighI32x4S";
      goto LABEL_248;
    case 222:
      v12 = "I64x2ExtmulLowI32x4U";
      goto LABEL_248;
    case 223:
      v12 = "I64x2ExtmulHighI32x4U";
      goto LABEL_248;
    case 224:
      v12 = "F32x4Abs";
      goto LABEL_248;
    case 225:
      v12 = "F32x4Neg";
      goto LABEL_248;
    case 227:
      v12 = "F32x4Sqrt";
      goto LABEL_248;
    case 228:
      v12 = "F32x4Add";
      goto LABEL_248;
    case 229:
      v12 = "F32x4Sub";
      goto LABEL_248;
    case 230:
      v12 = "F32x4Mul";
      goto LABEL_248;
    case 231:
      v12 = "F32x4Div";
      goto LABEL_248;
    case 232:
      v12 = "F32x4Min";
      goto LABEL_248;
    case 233:
      v12 = "F32x4Max";
      goto LABEL_248;
    case 234:
      v12 = "F32x4Pmin";
      goto LABEL_248;
    case 235:
      v12 = "F32x4Pmax";
      goto LABEL_248;
    case 236:
      v12 = "F64x2Abs";
      goto LABEL_248;
    case 237:
      v12 = "F64x2Neg";
      goto LABEL_248;
    case 239:
      v12 = "F64x2Sqrt";
      goto LABEL_248;
    case 240:
      v12 = "F64x2Add";
      goto LABEL_248;
    case 241:
      v12 = "F64x2Sub";
      goto LABEL_248;
    case 242:
      v12 = "F64x2Mul";
      goto LABEL_248;
    case 243:
      v12 = "F64x2Div";
      goto LABEL_248;
    case 244:
      v12 = "F64x2Min";
      goto LABEL_248;
    case 245:
      v12 = "F64x2Max";
      goto LABEL_248;
    case 246:
      v12 = "F64x2Pmin";
      goto LABEL_248;
    case 247:
      v12 = "F64x2Pmax";
      goto LABEL_248;
    case 248:
      v12 = "I32x4TruncSatF32x4S";
      goto LABEL_248;
    case 249:
      v12 = "I32x4TruncSatF32x4U";
      goto LABEL_248;
    case 250:
      v12 = "F32x4ConvertI32x4S";
      goto LABEL_248;
    case 251:
      v12 = "F32x4ConvertI32x4U";
      goto LABEL_248;
    case 252:
      v12 = "I32x4TruncSatF64x2SZero";
      goto LABEL_248;
    case 253:
      v12 = "I32x4TruncSatF64x2UZero";
      goto LABEL_248;
    case 254:
      v12 = "F64x2ConvertLowI32x4S";
      goto LABEL_248;
    case 255:
      v12 = "F64x2ConvertLowI32x4U";
      goto LABEL_248;
    case 256:
      v12 = "I8x16RelaxedSwizzle";
      goto LABEL_248;
    case 257:
      v12 = "I32x4RelaxedTruncF32x4S";
      goto LABEL_248;
    case 258:
      v12 = "I32x4RelaxedTruncF32x4U";
      goto LABEL_248;
    case 259:
      v12 = "I32x4RelaxedTruncF64x2SZero";
      goto LABEL_248;
    case 260:
      v12 = "I32x4RelaxedTruncF64x2UZero";
      goto LABEL_248;
    case 261:
      v12 = "F32x4RelaxedMAdd";
      goto LABEL_248;
    case 262:
      v12 = "F32x4RelaxedNMAdd";
      goto LABEL_248;
    case 263:
      v12 = "F64x2RelaxedMAdd";
      goto LABEL_248;
    case 264:
      v12 = "F64x2RelaxedNMAdd";
LABEL_248:
      v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
      WTF::PrintStream::printf(v13, "%s", v12);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
      break;
    default:
      break;
  }
  WTF::PrintStream::printf(v10, "%s", ": ");
  WTF::PrintStream::printf(v10, "%llu", *a4);
  WTF::PrintStream::printf(v10, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair*,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  __n128 *v22;
  __n128 *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __n128 *v27;
  unint64_t v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 *v32;
  __n128 *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  __n128 *v37;
  unint64_t v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  unint64_t v42;
  unint64_t v43;
  __n128 *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __n128 *v48;
  __n128 *v49;
  __n128 *v50;
  unint64_t v51;
  __n128 *v52;
  unint64_t v53;
  __n128 *v54;
  __n128 *v55;
  unint64_t v56;
  __n128 *v57;
  unint64_t v58;
  __n128 *v59;
  BOOL v60;
  __n128 v61;
  unint64_t v62;
  __n128 *v63;
  unint64_t v64;
  __n128 *v65;
  unint64_t v66;
  __n128 *v67;
  __n128 *v68;
  unint64_t v69;
  __n128 *v70;
  unint64_t v71;
  __n128 *v72;
  unint64_t v73;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v81;
  uint64_t v82;
  __n128 *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  __n128 *v89;
  int64_t v90;
  int64_t v91;
  uint64_t v92;
  __n128 *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  __n128 *v97;
  unint64_t v98;
  __n128 *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  __n128 *v107;
  __n128 *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  __n128 *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __n128 *v121;
  __n128 *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  __n128 *v126;
  __n128 *v128;
  unint64_t v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair*>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v3;
  __n128 v4;
  __n128 *v5;
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  __n128 *v11;
  __n128 *v12;
  unint64_t v13;
  unint64_t v14;
  __n128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __n128 *v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;

  v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      if (a1->n128_u64[1] < a2[-1].n128_u64[1])
      {
        v4 = *a1;
        *a1 = a2[-1];
        a2[-1] = v4;
      }
      return 1;
    case 3:
      v11 = a1 + 1;
      v12 = a2 - 1;
      v13 = a1[1].n128_u64[1];
      v14 = a2[-1].n128_u64[1];
      if (a1->n128_u64[1] >= v13)
        goto LABEL_42;
      if (v13 >= v14)
      {
        v34 = *a1;
        *a1 = *v11;
        *v11 = v34;
        if (a1[1].n128_u64[1] >= a2[-1].n128_u64[1])
          return 1;
        v15 = *v11;
        *v11 = *v12;
      }
      else
      {
        v15 = *a1;
        *a1 = *v12;
      }
      *v12 = v15;
      return 1;
    case 4:
      v11 = a1 + 1;
      v12 = a1 + 2;
      v16 = a1->n128_u64[1];
      v17 = a1[1].n128_u64[1];
      v18 = a1[2].n128_u64[1];
      if (v16 >= v17)
      {
        if (v17 < v18)
        {
          v22 = *v11;
          *v11 = *v12;
          *v12 = v22;
          if (v16 < a1[1].n128_u64[1])
          {
            v23 = *a1;
            *a1 = *v11;
            *v11 = v23;
          }
        }
      }
      else
      {
        if (v17 >= v18)
        {
          v35 = *a1;
          *a1 = *v11;
          *v11 = v35;
          if (a1[1].n128_u64[1] >= v18)
            goto LABEL_40;
          v19 = *v11;
          *v11 = *v12;
        }
        else
        {
          v19 = *a1;
          *a1 = *v12;
        }
        *v12 = v19;
      }
LABEL_40:
      if (a1[2].n128_u64[1] < a2[-1].n128_u64[1])
      {
        v36 = *v12;
        *v12 = a2[-1];
        a2[-1] = v36;
        v13 = a1[1].n128_u64[1];
        v14 = a1[2].n128_u64[1];
LABEL_42:
        if (v13 < v14)
        {
          v37 = *v11;
          *v11 = *v12;
          *v12 = v37;
          if (a1->n128_u64[1] < a1[1].n128_u64[1])
          {
            v38 = *a1;
            *a1 = *v11;
            *v11 = v38;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v5 = a1 + 2;
      v6 = a1 + 1;
      v7 = a1->n128_u64[1];
      v8 = a1[1].n128_u64[1];
      v9 = a1[2].n128_u64[1];
      if (v7 >= v8)
      {
        if (v8 < v9)
        {
          v20 = *v6;
          *v6 = *v5;
          *v5 = v20;
          if (v7 < a1[1].n128_u64[1])
          {
            v21 = *a1;
            *a1 = *v6;
            *v6 = v21;
          }
        }
      }
      else
      {
        if (v8 >= v9)
        {
          v24 = *a1;
          *a1 = *v6;
          *v6 = v24;
          if (a1[1].n128_u64[1] >= v9)
            goto LABEL_23;
          v10 = *v6;
          *v6 = *v5;
        }
        else
        {
          v10 = *a1;
          *a1 = *v5;
        }
        *v5 = v10;
      }
LABEL_23:
      v25 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v26 = 0;
      v27 = 0;
      break;
  }
  while (1)
  {
    v28 = v5->n128_u64[1];
    v29 = v25->n128_u64[1];
    if (v28 < v29)
    {
      v30 = v25->n128_u64[0];
      v31 = v26;
      while (1)
      {
        *(__n128 *)((char *)a1 + v31 + 48) = *(__n128 *)((char *)a1 + v31 + 32);
        if (v31 == -32)
          break;
        v32 = *(unint64_t *)((char *)&a1[1].n128_u64[1] + v31);
        v31 -= 16;
        if (v32 >= v29)
        {
          v33 = (__n128 *)((char *)a1 + v31 + 48);
          goto LABEL_31;
        }
      }
      v33 = a1;
LABEL_31:
      v33->n128_u64[0] = v30;
      v33->n128_u64[1] = v29;
      if (++v27 == 8)
        return &v25[1] == a2;
    }
    v5 = v25;
    v26 += 16;
    if (++v25 == a2)
      return 1;
  }
}

uint64_t WTF::dataLog<char const*,char [2],int,char [6],JSC::Wasm::ExtAtomicOpTypeDump,char [3],unsigned long long,char [2]>(const char **a1, _DWORD *a2, int *a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  int v11;
  const char *v12;
  WTF::PrintStream *v13;
  char v15;
  char **v16;
  char *v17;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v10, "%s", *a1);
  WTF::PrintStream::printf(v10, "%s", "<");
  WTF::PrintStream::printf(v10, "%d", *a2);
  WTF::PrintStream::printf(v10, "%s", ">    ");
  v11 = *a3;
  v12 = "I32AtomicLoad";
  switch(v11)
  {
    case 0:
      v12 = "MemoryAtomicNotify";
      goto LABEL_70;
    case 1:
      v12 = "MemoryAtomicWait32";
      goto LABEL_70;
    case 2:
      v12 = "MemoryAtomicWait64";
      goto LABEL_70;
    case 3:
      v12 = "AtomicFence";
      goto LABEL_70;
    case 16:
      goto LABEL_70;
    case 17:
      v12 = "I64AtomicLoad";
      goto LABEL_70;
    case 18:
      v12 = "I32AtomicLoad8U";
      goto LABEL_70;
    case 19:
      v12 = "I32AtomicLoad16U";
      goto LABEL_70;
    case 20:
      v12 = "I64AtomicLoad8U";
      goto LABEL_70;
    case 21:
      v12 = "I64AtomicLoad16U";
      goto LABEL_70;
    case 22:
      v12 = "I64AtomicLoad32U";
      goto LABEL_70;
    case 23:
      v12 = "I32AtomicStore";
      goto LABEL_70;
    case 24:
      v12 = "I64AtomicStore";
      goto LABEL_70;
    case 25:
      v12 = "I32AtomicStore8U";
      goto LABEL_70;
    case 26:
      v12 = "I32AtomicStore16U";
      goto LABEL_70;
    case 27:
      v12 = "I64AtomicStore8U";
      goto LABEL_70;
    case 28:
      v12 = "I64AtomicStore16U";
      goto LABEL_70;
    case 29:
      v12 = "I64AtomicStore32U";
      goto LABEL_70;
    case 30:
      v12 = "I32AtomicRmwAdd";
      goto LABEL_70;
    case 31:
      v12 = "I64AtomicRmwAdd";
      goto LABEL_70;
    case 32:
      v12 = "I32AtomicRmw8AddU";
      goto LABEL_70;
    case 33:
      v12 = "I32AtomicRmw16AddU";
      goto LABEL_70;
    case 34:
      v12 = "I64AtomicRmw8AddU";
      goto LABEL_70;
    case 35:
      v12 = "I64AtomicRmw16AddU";
      goto LABEL_70;
    case 36:
      v12 = "I64AtomicRmw32AddU";
      goto LABEL_70;
    case 37:
      v12 = "I32AtomicRmwSub";
      goto LABEL_70;
    case 38:
      v12 = "I64AtomicRmwSub";
      goto LABEL_70;
    case 39:
      v12 = "I32AtomicRmw8SubU";
      goto LABEL_70;
    case 40:
      v12 = "I32AtomicRmw16SubU";
      goto LABEL_70;
    case 41:
      v12 = "I64AtomicRmw8SubU";
      goto LABEL_70;
    case 42:
      v12 = "I64AtomicRmw16SubU";
      goto LABEL_70;
    case 43:
      v12 = "I64AtomicRmw32SubU";
      goto LABEL_70;
    case 44:
      v12 = "I32AtomicRmwAnd";
      goto LABEL_70;
    case 45:
      v12 = "I64AtomicRmwAnd";
      goto LABEL_70;
    case 46:
      v12 = "I32AtomicRmw8AndU";
      goto LABEL_70;
    case 47:
      v12 = "I32AtomicRmw16AndU";
      goto LABEL_70;
    case 48:
      v12 = "I64AtomicRmw8AndU";
      goto LABEL_70;
    case 49:
      v12 = "I64AtomicRmw16AndU";
      goto LABEL_70;
    case 50:
      v12 = "I64AtomicRmw32AndU";
      goto LABEL_70;
    case 51:
      v12 = "I32AtomicRmwOr";
      goto LABEL_70;
    case 52:
      v12 = "I64AtomicRmwOr";
      goto LABEL_70;
    case 53:
      v12 = "I32AtomicRmw8OrU";
      goto LABEL_70;
    case 54:
      v12 = "I32AtomicRmw16OrU";
      goto LABEL_70;
    case 55:
      v12 = "I64AtomicRmw8OrU";
      goto LABEL_70;
    case 56:
      v12 = "I64AtomicRmw16OrU";
      goto LABEL_70;
    case 57:
      v12 = "I64AtomicRmw32OrU";
      goto LABEL_70;
    case 58:
      v12 = "I32AtomicRmwXor";
      goto LABEL_70;
    case 59:
      v12 = "I64AtomicRmwXor";
      goto LABEL_70;
    case 60:
      v12 = "I32AtomicRmw8XorU";
      goto LABEL_70;
    case 61:
      v12 = "I32AtomicRmw16XorU";
      goto LABEL_70;
    case 62:
      v12 = "I64AtomicRmw8XorU";
      goto LABEL_70;
    case 63:
      v12 = "I64AtomicRmw16XorU";
      goto LABEL_70;
    case 64:
      v12 = "I64AtomicRmw32XorU";
      goto LABEL_70;
    case 65:
      v12 = "I32AtomicRmwXchg";
      goto LABEL_70;
    case 66:
      v12 = "I64AtomicRmwXchg";
      goto LABEL_70;
    case 67:
      v12 = "I32AtomicRmw8XchgU";
      goto LABEL_70;
    case 68:
      v12 = "I32AtomicRmw16XchgU";
      goto LABEL_70;
    case 69:
      v12 = "I64AtomicRmw8XchgU";
      goto LABEL_70;
    case 70:
      v12 = "I64AtomicRmw16XchgU";
      goto LABEL_70;
    case 71:
      v12 = "I64AtomicRmw32XchgU";
      goto LABEL_70;
    case 72:
      v12 = "I32AtomicRmwCmpxchg";
      goto LABEL_70;
    case 73:
      v12 = "I64AtomicRmwCmpxchg";
      goto LABEL_70;
    case 74:
      v12 = "I32AtomicRmw8CmpxchgU";
      goto LABEL_70;
    case 75:
      v12 = "I32AtomicRmw16CmpxchgU";
      goto LABEL_70;
    case 76:
      v12 = "I64AtomicRmw8CmpxchgU";
      goto LABEL_70;
    case 77:
      v12 = "I64AtomicRmw16CmpxchgU";
      goto LABEL_70;
    case 78:
      v12 = "I64AtomicRmw32CmpxchgU";
LABEL_70:
      v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
      WTF::PrintStream::printf(v13, "%s", v12);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
      break;
    default:
      break;
  }
  WTF::PrintStream::printf(v10, "%s", ": ");
  WTF::PrintStream::printf(v10, "%llu", *a4);
  WTF::PrintStream::printf(v10, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair*,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  __n128 *v22;
  __n128 *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __n128 *v27;
  unint64_t v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 *v32;
  __n128 *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  __n128 *v37;
  unint64_t v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  unint64_t v42;
  unint64_t v43;
  __n128 *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __n128 *v48;
  __n128 *v49;
  __n128 *v50;
  unint64_t v51;
  __n128 *v52;
  unint64_t v53;
  __n128 *v54;
  __n128 *v55;
  unint64_t v56;
  __n128 *v57;
  unint64_t v58;
  __n128 *v59;
  BOOL v60;
  __n128 v61;
  unint64_t v62;
  __n128 *v63;
  unint64_t v64;
  __n128 *v65;
  unint64_t v66;
  __n128 *v67;
  __n128 *v68;
  unint64_t v69;
  __n128 *v70;
  unint64_t v71;
  __n128 *v72;
  unint64_t v73;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v81;
  uint64_t v82;
  __n128 *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  __n128 *v89;
  int64_t v90;
  int64_t v91;
  uint64_t v92;
  __n128 *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  __n128 *v97;
  unint64_t v98;
  __n128 *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  __n128 *v107;
  __n128 *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  __n128 *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __n128 *v121;
  __n128 *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  __n128 *v126;
  __n128 *v128;
  unint64_t v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair*>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v3;
  __n128 v4;
  __n128 *v5;
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  __n128 *v11;
  __n128 *v12;
  unint64_t v13;
  unint64_t v14;
  __n128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __n128 *v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;

  v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      if (a1->n128_u64[1] < a2[-1].n128_u64[1])
      {
        v4 = *a1;
        *a1 = a2[-1];
        a2[-1] = v4;
      }
      return 1;
    case 3:
      v11 = a1 + 1;
      v12 = a2 - 1;
      v13 = a1[1].n128_u64[1];
      v14 = a2[-1].n128_u64[1];
      if (a1->n128_u64[1] >= v13)
        goto LABEL_42;
      if (v13 >= v14)
      {
        v34 = *a1;
        *a1 = *v11;
        *v11 = v34;
        if (a1[1].n128_u64[1] >= a2[-1].n128_u64[1])
          return 1;
        v15 = *v11;
        *v11 = *v12;
      }
      else
      {
        v15 = *a1;
        *a1 = *v12;
      }
      *v12 = v15;
      return 1;
    case 4:
      v11 = a1 + 1;
      v12 = a1 + 2;
      v16 = a1->n128_u64[1];
      v17 = a1[1].n128_u64[1];
      v18 = a1[2].n128_u64[1];
      if (v16 >= v17)
      {
        if (v17 < v18)
        {
          v22 = *v11;
          *v11 = *v12;
          *v12 = v22;
          if (v16 < a1[1].n128_u64[1])
          {
            v23 = *a1;
            *a1 = *v11;
            *v11 = v23;
          }
        }
      }
      else
      {
        if (v17 >= v18)
        {
          v35 = *a1;
          *a1 = *v11;
          *v11 = v35;
          if (a1[1].n128_u64[1] >= v18)
            goto LABEL_40;
          v19 = *v11;
          *v11 = *v12;
        }
        else
        {
          v19 = *a1;
          *a1 = *v12;
        }
        *v12 = v19;
      }
LABEL_40:
      if (a1[2].n128_u64[1] < a2[-1].n128_u64[1])
      {
        v36 = *v12;
        *v12 = a2[-1];
        a2[-1] = v36;
        v13 = a1[1].n128_u64[1];
        v14 = a1[2].n128_u64[1];
LABEL_42:
        if (v13 < v14)
        {
          v37 = *v11;
          *v11 = *v12;
          *v12 = v37;
          if (a1->n128_u64[1] < a1[1].n128_u64[1])
          {
            v38 = *a1;
            *a1 = *v11;
            *v11 = v38;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v5 = a1 + 2;
      v6 = a1 + 1;
      v7 = a1->n128_u64[1];
      v8 = a1[1].n128_u64[1];
      v9 = a1[2].n128_u64[1];
      if (v7 >= v8)
      {
        if (v8 < v9)
        {
          v20 = *v6;
          *v6 = *v5;
          *v5 = v20;
          if (v7 < a1[1].n128_u64[1])
          {
            v21 = *a1;
            *a1 = *v6;
            *v6 = v21;
          }
        }
      }
      else
      {
        if (v8 >= v9)
        {
          v24 = *a1;
          *a1 = *v6;
          *v6 = v24;
          if (a1[1].n128_u64[1] >= v9)
            goto LABEL_23;
          v10 = *v6;
          *v6 = *v5;
        }
        else
        {
          v10 = *a1;
          *a1 = *v5;
        }
        *v5 = v10;
      }
LABEL_23:
      v25 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v26 = 0;
      v27 = 0;
      break;
  }
  while (1)
  {
    v28 = v5->n128_u64[1];
    v29 = v25->n128_u64[1];
    if (v28 < v29)
    {
      v30 = v25->n128_u64[0];
      v31 = v26;
      while (1)
      {
        *(__n128 *)((char *)a1 + v31 + 48) = *(__n128 *)((char *)a1 + v31 + 32);
        if (v31 == -32)
          break;
        v32 = *(unint64_t *)((char *)&a1[1].n128_u64[1] + v31);
        v31 -= 16;
        if (v32 >= v29)
        {
          v33 = (__n128 *)((char *)a1 + v31 + 48);
          goto LABEL_31;
        }
      }
      v33 = a1;
LABEL_31:
      v33->n128_u64[0] = v30;
      v33->n128_u64[1] = v29;
      if (++v27 == 8)
        return &v25[1] == a2;
    }
    v5 = v25;
    v26 += 16;
    if (++v25 == a2)
      return 1;
  }
}

uint64_t WTF::dataLog<char const*,char [2],int,char [6],JSC::Wasm::ExtGCOpTypeDump,char [3],unsigned long long,char [2]>(const char **a1, _DWORD *a2, int *a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  uint64_t v11;
  const char *v12;
  WTF::PrintStream *v13;
  char v15;
  char **v16;
  char *v17;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v10, "%s", *a1);
  WTF::PrintStream::printf(v10, "%s", "<");
  WTF::PrintStream::printf(v10, "%d", *a2);
  WTF::PrintStream::printf(v10, "%s", ">    ");
  v11 = *a3;
  if (v11 <= 0x1E)
  {
    v12 = off_1E35B6D08[v11];
    v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
    WTF::PrintStream::printf(v13, "%s", v12);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
  }
  WTF::PrintStream::printf(v10, "%s", ": ");
  WTF::PrintStream::printf(v10, "%llu", *a4);
  WTF::PrintStream::printf(v10, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair*,false>(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  __n128 *v22;
  __n128 *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __n128 *v27;
  unint64_t v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 *v32;
  __n128 *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  __n128 *v37;
  unint64_t v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  unint64_t v42;
  unint64_t v43;
  __n128 *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  __n128 *v48;
  __n128 *v49;
  __n128 *v50;
  unint64_t v51;
  __n128 *v52;
  unint64_t v53;
  __n128 *v54;
  __n128 *v55;
  unint64_t v56;
  __n128 *v57;
  unint64_t v58;
  __n128 *v59;
  BOOL v60;
  __n128 v61;
  unint64_t v62;
  __n128 *v63;
  unint64_t v64;
  __n128 *v65;
  unint64_t v66;
  __n128 *v67;
  __n128 *v68;
  unint64_t v69;
  __n128 *v70;
  unint64_t v71;
  __n128 *v72;
  unint64_t v73;
  __n128 *v74;
  unint64_t v75;
  unint64_t v76;
  __n128 *v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v81;
  uint64_t v82;
  __n128 *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  __n128 *v89;
  int64_t v90;
  int64_t v91;
  uint64_t v92;
  __n128 *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  __n128 *v97;
  unint64_t v98;
  __n128 *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  __n128 *v107;
  __n128 *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  __n128 *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __n128 *v121;
  __n128 *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  __n128 *v126;
  __n128 *v128;
  unint64_t v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  __n128 v138;
  __n128 v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair*>(__n128 *a1, __n128 *a2, __n128 a3)
{
  uint64_t v3;
  __n128 v4;
  __n128 *v5;
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  __n128 *v11;
  __n128 *v12;
  unint64_t v13;
  unint64_t v14;
  __n128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __n128 *v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;

  v3 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      if (a1->n128_u64[1] < a2[-1].n128_u64[1])
      {
        v4 = *a1;
        *a1 = a2[-1];
        a2[-1] = v4;
      }
      return 1;
    case 3:
      v11 = a1 + 1;
      v12 = a2 - 1;
      v13 = a1[1].n128_u64[1];
      v14 = a2[-1].n128_u64[1];
      if (a1->n128_u64[1] >= v13)
        goto LABEL_42;
      if (v13 >= v14)
      {
        v34 = *a1;
        *a1 = *v11;
        *v11 = v34;
        if (a1[1].n128_u64[1] >= a2[-1].n128_u64[1])
          return 1;
        v15 = *v11;
        *v11 = *v12;
      }
      else
      {
        v15 = *a1;
        *a1 = *v12;
      }
      *v12 = v15;
      return 1;
    case 4:
      v11 = a1 + 1;
      v12 = a1 + 2;
      v16 = a1->n128_u64[1];
      v17 = a1[1].n128_u64[1];
      v18 = a1[2].n128_u64[1];
      if (v16 >= v17)
      {
        if (v17 < v18)
        {
          v22 = *v11;
          *v11 = *v12;
          *v12 = v22;
          if (v16 < a1[1].n128_u64[1])
          {
            v23 = *a1;
            *a1 = *v11;
            *v11 = v23;
          }
        }
      }
      else
      {
        if (v17 >= v18)
        {
          v35 = *a1;
          *a1 = *v11;
          *v11 = v35;
          if (a1[1].n128_u64[1] >= v18)
            goto LABEL_40;
          v19 = *v11;
          *v11 = *v12;
        }
        else
        {
          v19 = *a1;
          *a1 = *v12;
        }
        *v12 = v19;
      }
LABEL_40:
      if (a1[2].n128_u64[1] < a2[-1].n128_u64[1])
      {
        v36 = *v12;
        *v12 = a2[-1];
        a2[-1] = v36;
        v13 = a1[1].n128_u64[1];
        v14 = a1[2].n128_u64[1];
LABEL_42:
        if (v13 < v14)
        {
          v37 = *v11;
          *v11 = *v12;
          *v12 = v37;
          if (a1->n128_u64[1] < a1[1].n128_u64[1])
          {
            v38 = *a1;
            *a1 = *v11;
            *v11 = v38;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair*>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v5 = a1 + 2;
      v6 = a1 + 1;
      v7 = a1->n128_u64[1];
      v8 = a1[1].n128_u64[1];
      v9 = a1[2].n128_u64[1];
      if (v7 >= v8)
      {
        if (v8 < v9)
        {
          v20 = *v6;
          *v6 = *v5;
          *v5 = v20;
          if (v7 < a1[1].n128_u64[1])
          {
            v21 = *a1;
            *a1 = *v6;
            *v6 = v21;
          }
        }
      }
      else
      {
        if (v8 >= v9)
        {
          v24 = *a1;
          *a1 = *v6;
          *v6 = v24;
          if (a1[1].n128_u64[1] >= v9)
            goto LABEL_23;
          v10 = *v6;
          *v6 = *v5;
        }
        else
        {
          v10 = *a1;
          *a1 = *v5;
        }
        *v5 = v10;
      }
LABEL_23:
      v25 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v26 = 0;
      v27 = 0;
      break;
  }
  while (1)
  {
    v28 = v5->n128_u64[1];
    v29 = v25->n128_u64[1];
    if (v28 < v29)
    {
      v30 = v25->n128_u64[0];
      v31 = v26;
      while (1)
      {
        *(__n128 *)((char *)a1 + v31 + 48) = *(__n128 *)((char *)a1 + v31 + 32);
        if (v31 == -32)
          break;
        v32 = *(unint64_t *)((char *)&a1[1].n128_u64[1] + v31);
        v31 -= 16;
        if (v32 >= v29)
        {
          v33 = (__n128 *)((char *)a1 + v31 + 48);
          goto LABEL_31;
        }
      }
      v33 = a1;
LABEL_31:
      v33->n128_u64[0] = v30;
      v33->n128_u64[1] = v29;
      if (++v27 == 8)
        return &v25[1] == a2;
    }
    v5 = v25;
    v26 += 16;
    if (++v25 == a2)
      return 1;
  }
}

uint64_t WTF::dataLog<char const*,char [2],int,char [6],JSC::Wasm::OpTypeDump,char [3],unsigned long long,char [2]>(const char **a1, _DWORD *a2, unsigned __int8 *a3, _QWORD *a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  int v11;
  const char *v12;
  WTF::PrintStream *v13;
  char v15;
  char **v16;
  char *v17;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v10, "%s", *a1);
  WTF::PrintStream::printf(v10, "%s", "<");
  WTF::PrintStream::printf(v10, "%d", *a2);
  WTF::PrintStream::printf(v10, "%s", ">    ");
  v11 = *a3;
  v12 = "I32Const";
  switch(v11)
  {
    case 0:
      v12 = "Unreachable";
      goto LABEL_203;
    case 1:
      v12 = "Nop";
      goto LABEL_203;
    case 2:
      v12 = "Block";
      goto LABEL_203;
    case 3:
      v12 = "Loop";
      goto LABEL_203;
    case 4:
      v12 = "If";
      goto LABEL_203;
    case 5:
      v12 = "Else";
      goto LABEL_203;
    case 6:
      v12 = "Try";
      goto LABEL_203;
    case 7:
      v12 = "Catch";
      goto LABEL_203;
    case 8:
      v12 = "Throw";
      goto LABEL_203;
    case 9:
      v12 = "Rethrow";
      goto LABEL_203;
    case 11:
      v12 = "End";
      goto LABEL_203;
    case 12:
      v12 = "Br";
      goto LABEL_203;
    case 13:
      v12 = "BrIf";
      goto LABEL_203;
    case 14:
      v12 = "BrTable";
      goto LABEL_203;
    case 15:
      v12 = "Return";
      goto LABEL_203;
    case 16:
      v12 = "Call";
      goto LABEL_203;
    case 17:
      v12 = "CallIndirect";
      goto LABEL_203;
    case 18:
      v12 = "TailCall";
      goto LABEL_203;
    case 19:
      v12 = "TailCallIndirect";
      goto LABEL_203;
    case 20:
      v12 = "CallRef";
      goto LABEL_203;
    case 24:
      v12 = "Delegate";
      goto LABEL_203;
    case 25:
      v12 = "CatchAll";
      goto LABEL_203;
    case 26:
      v12 = "Drop";
      goto LABEL_203;
    case 27:
      v12 = "Select";
      goto LABEL_203;
    case 28:
      v12 = "AnnotatedSelect";
      goto LABEL_203;
    case 32:
      v12 = "GetLocal";
      goto LABEL_203;
    case 33:
      v12 = "SetLocal";
      goto LABEL_203;
    case 34:
      v12 = "TeeLocal";
      goto LABEL_203;
    case 35:
      v12 = "GetGlobal";
      goto LABEL_203;
    case 36:
      v12 = "SetGlobal";
      goto LABEL_203;
    case 37:
      v12 = "TableGet";
      goto LABEL_203;
    case 38:
      v12 = "TableSet";
      goto LABEL_203;
    case 40:
      v12 = "I32Load";
      goto LABEL_203;
    case 41:
      v12 = "I64Load";
      goto LABEL_203;
    case 42:
      v12 = "F32Load";
      goto LABEL_203;
    case 43:
      v12 = "F64Load";
      goto LABEL_203;
    case 44:
      v12 = "I32Load8S";
      goto LABEL_203;
    case 45:
      v12 = "I32Load8U";
      goto LABEL_203;
    case 46:
      v12 = "I32Load16S";
      goto LABEL_203;
    case 47:
      v12 = "I32Load16U";
      goto LABEL_203;
    case 48:
      v12 = "I64Load8S";
      goto LABEL_203;
    case 49:
      v12 = "I64Load8U";
      goto LABEL_203;
    case 50:
      v12 = "I64Load16S";
      goto LABEL_203;
    case 51:
      v12 = "I64Load16U";
      goto LABEL_203;
    case 52:
      v12 = "I64Load32S";
      goto LABEL_203;
    case 53:
      v12 = "I64Load32U";
      goto LABEL_203;
    case 54:
      v12 = "I32Store";
      goto LABEL_203;
    case 55:
      v12 = "I64Store";
      goto LABEL_203;
    case 56:
      v12 = "F32Store";
      goto LABEL_203;
    case 57:
      v12 = "F64Store";
      goto LABEL_203;
    case 58:
      v12 = "I32Store8";
      goto LABEL_203;
    case 59:
      v12 = "I32Store16";
      goto LABEL_203;
    case 60:
      v12 = "I64Store8";
      goto LABEL_203;
    case 61:
      v12 = "I64Store16";
      goto LABEL_203;
    case 62:
      v12 = "I64Store32";
      goto LABEL_203;
    case 63:
      v12 = "CurrentMemory";
      goto LABEL_203;
    case 64:
      v12 = "GrowMemory";
      goto LABEL_203;
    case 65:
      goto LABEL_203;
    case 66:
      v12 = "I64Const";
      goto LABEL_203;
    case 67:
      v12 = "F32Const";
      goto LABEL_203;
    case 68:
      v12 = "F64Const";
      goto LABEL_203;
    case 69:
      v12 = "I32Eqz";
      goto LABEL_203;
    case 70:
      v12 = "I32Eq";
      goto LABEL_203;
    case 71:
      v12 = "I32Ne";
      goto LABEL_203;
    case 72:
      v12 = "I32LtS";
      goto LABEL_203;
    case 73:
      v12 = "I32LtU";
      goto LABEL_203;
    case 74:
      v12 = "I32GtS";
      goto LABEL_203;
    case 75:
      v12 = "I32GtU";
      goto LABEL_203;
    case 76:
      v12 = "I32LeS";
      goto LABEL_203;
    case 77:
      v12 = "I32LeU";
      goto LABEL_203;
    case 78:
      v12 = "I32GeS";
      goto LABEL_203;
    case 79:
      v12 = "I32GeU";
      goto LABEL_203;
    case 80:
      v12 = "I64Eqz";
      goto LABEL_203;
    case 81:
      v12 = "I64Eq";
      goto LABEL_203;
    case 82:
      v12 = "I64Ne";
      goto LABEL_203;
    case 83:
      v12 = "I64LtS";
      goto LABEL_203;
    case 84:
      v12 = "I64LtU";
      goto LABEL_203;
    case 85:
      v12 = "I64GtS";
      goto LABEL_203;
    case 86:
      v12 = "I64GtU";
      goto LABEL_203;
    case 87:
      v12 = "I64LeS";
      goto LABEL_203;
    case 88:
      v12 = "I64LeU";
      goto LABEL_203;
    case 89:
      v12 = "I64GeS";
      goto LABEL_203;
    case 90:
      v12 = "I64GeU";
      goto LABEL_203;
    case 91:
      v12 = "F32Eq";
      goto LABEL_203;
    case 92:
      v12 = "F32Ne";
      goto LABEL_203;
    case 93:
      v12 = "F32Lt";
      goto LABEL_203;
    case 94:
      v12 = "F32Gt";
      goto LABEL_203;
    case 95:
      v12 = "F32Le";
      goto LABEL_203;
    case 96:
      v12 = "F32Ge";
      goto LABEL_203;
    case 97:
      v12 = "F64Eq";
      goto LABEL_203;
    case 98:
      v12 = "F64Ne";
      goto LABEL_203;
    case 99:
      v12 = "F64Lt";
      goto LABEL_203;
    case 100:
      v12 = "F64Gt";
      goto LABEL_203;
    case 101:
      v12 = "F64Le";
      goto LABEL_203;
    case 102:
      v12 = "F64Ge";
      goto LABEL_203;
    case 103:
      v12 = "I32Clz";
      goto LABEL_203;
    case 104:
      v12 = "I32Ctz";
      goto LABEL_203;
    case 105:
      v12 = "I32Popcnt";
      goto LABEL_203;
    case 106:
      v12 = "I32Add";
      goto LABEL_203;
    case 107:
      v12 = "I32Sub";
      goto LABEL_203;
    case 108:
      v12 = "I32Mul";
      goto LABEL_203;
    case 109:
      v12 = "I32DivS";
      goto LABEL_203;
    case 110:
      v12 = "I32DivU";
      goto LABEL_203;
    case 111:
      v12 = "I32RemS";
      goto LABEL_203;
    case 112:
      v12 = "I32RemU";
      goto LABEL_203;
    case 113:
      v12 = "I32And";
      goto LABEL_203;
    case 114:
      v12 = "I32Or";
      goto LABEL_203;
    case 115:
      v12 = "I32Xor";
      goto LABEL_203;
    case 116:
      v12 = "I32Shl";
      goto LABEL_203;
    case 117:
      v12 = "I32ShrS";
      goto LABEL_203;
    case 118:
      v12 = "I32ShrU";
      goto LABEL_203;
    case 119:
      v12 = "I32Rotl";
      goto LABEL_203;
    case 120:
      v12 = "I32Rotr";
      goto LABEL_203;
    case 121:
      v12 = "I64Clz";
      goto LABEL_203;
    case 122:
      v12 = "I64Ctz";
      goto LABEL_203;
    case 123:
      v12 = "I64Popcnt";
      goto LABEL_203;
    case 124:
      v12 = "I64Add";
      goto LABEL_203;
    case 125:
      v12 = "I64Sub";
      goto LABEL_203;
    case 126:
      v12 = "I64Mul";
      goto LABEL_203;
    case 127:
      v12 = "I64DivS";
      goto LABEL_203;
    case 128:
      v12 = "I64DivU";
      goto LABEL_203;
    case 129:
      v12 = "I64RemS";
      goto LABEL_203;
    case 130:
      v12 = "I64RemU";
      goto LABEL_203;
    case 131:
      v12 = "I64And";
      goto LABEL_203;
    case 132:
      v12 = "I64Or";
      goto LABEL_203;
    case 133:
      v12 = "I64Xor";
      goto LABEL_203;
    case 134:
      v12 = "I64Shl";
      goto LABEL_203;
    case 135:
      v12 = "I64ShrS";
      goto LABEL_203;
    case 136:
      v12 = "I64ShrU";
      goto LABEL_203;
    case 137:
      v12 = "I64Rotl";
      goto LABEL_203;
    case 138:
      v12 = "I64Rotr";
      goto LABEL_203;
    case 139:
      v12 = "F32Abs";
      goto LABEL_203;
    case 140:
      v12 = "F32Neg";
      goto LABEL_203;
    case 141:
      v12 = "F32Ceil";
      goto LABEL_203;
    case 142:
      v12 = "F32Floor";
      goto LABEL_203;
    case 143:
      v12 = "F32Trunc";
      goto LABEL_203;
    case 144:
      v12 = "F32Nearest";
      goto LABEL_203;
    case 145:
      v12 = "F32Sqrt";
      goto LABEL_203;
    case 146:
      v12 = "F32Add";
      goto LABEL_203;
    case 147:
      v12 = "F32Sub";
      goto LABEL_203;
    case 148:
      v12 = "F32Mul";
      goto LABEL_203;
    case 149:
      v12 = "F32Div";
      goto LABEL_203;
    case 150:
      v12 = "F32Min";
      goto LABEL_203;
    case 151:
      v12 = "F32Max";
      goto LABEL_203;
    case 152:
      v12 = "F32Copysign";
      goto LABEL_203;
    case 153:
      v12 = "F64Abs";
      goto LABEL_203;
    case 154:
      v12 = "F64Neg";
      goto LABEL_203;
    case 155:
      v12 = "F64Ceil";
      goto LABEL_203;
    case 156:
      v12 = "F64Floor";
      goto LABEL_203;
    case 157:
      v12 = "F64Trunc";
      goto LABEL_203;
    case 158:
      v12 = "F64Nearest";
      goto LABEL_203;
    case 159:
      v12 = "F64Sqrt";
      goto LABEL_203;
    case 160:
      v12 = "F64Add";
      goto LABEL_203;
    case 161:
      v12 = "F64Sub";
      goto LABEL_203;
    case 162:
      v12 = "F64Mul";
      goto LABEL_203;
    case 163:
      v12 = "F64Div";
      goto LABEL_203;
    case 164:
      v12 = "F64Min";
      goto LABEL_203;
    case 165:
      v12 = "F64Max";
      goto LABEL_203;
    case 166:
      v12 = "F64Copysign";
      goto LABEL_203;
    case 167:
      v12 = "I32WrapI64";
      goto LABEL_203;
    case 168:
      v12 = "I32TruncSF32";
      goto LABEL_203;
    case 169:
      v12 = "I32TruncUF32";
      goto LABEL_203;
    case 170:
      v12 = "I32TruncSF64";
      goto LABEL_203;
    case 171:
      v12 = "I32TruncUF64";
      goto LABEL_203;
    case 172:
      v12 = "I64ExtendSI32";
      goto LABEL_203;
    case 173:
      v12 = "I64ExtendUI32";
      goto LABEL_203;
    case 174:
      v12 = "I64TruncSF32";
      goto LABEL_203;
    case 175:
      v12 = "I64TruncUF32";
      goto LABEL_203;
    case 176:
      v12 = "I64TruncSF64";
      goto LABEL_203;
    case 177:
      v12 = "I64TruncUF64";
      goto LABEL_203;
    case 178:
      v12 = "F32ConvertSI32";
      goto LABEL_203;
    case 179:
      v12 = "F32ConvertUI32";
      goto LABEL_203;
    case 180:
      v12 = "F32ConvertSI64";
      goto LABEL_203;
    case 181:
      v12 = "F32ConvertUI64";
      goto LABEL_203;
    case 182:
      v12 = "F32DemoteF64";
      goto LABEL_203;
    case 183:
      v12 = "F64ConvertSI32";
      goto LABEL_203;
    case 184:
      v12 = "F64ConvertUI32";
      goto LABEL_203;
    case 185:
      v12 = "F64ConvertSI64";
      goto LABEL_203;
    case 186:
      v12 = "F64ConvertUI64";
      goto LABEL_203;
    case 187:
      v12 = "F64PromoteF32";
      goto LABEL_203;
    case 188:
      v12 = "I32ReinterpretF32";
      goto LABEL_203;
    case 189:
      v12 = "I64ReinterpretF64";
      goto LABEL_203;
    case 190:
      v12 = "F32ReinterpretI32";
      goto LABEL_203;
    case 191:
      v12 = "F64ReinterpretI64";
      goto LABEL_203;
    case 192:
      v12 = "I32Extend8S";
      goto LABEL_203;
    case 193:
      v12 = "I32Extend16S";
      goto LABEL_203;
    case 194:
      v12 = "I64Extend8S";
      goto LABEL_203;
    case 195:
      v12 = "I64Extend16S";
      goto LABEL_203;
    case 196:
      v12 = "I64Extend32S";
      goto LABEL_203;
    case 208:
      v12 = "RefNull";
      goto LABEL_203;
    case 209:
      v12 = "RefIsNull";
      goto LABEL_203;
    case 210:
      v12 = "RefFunc";
      goto LABEL_203;
    case 211:
      v12 = "RefEq";
      goto LABEL_203;
    case 212:
      v12 = "RefAsNonNull";
      goto LABEL_203;
    case 213:
      v12 = "BrOnNull";
      goto LABEL_203;
    case 214:
      v12 = "BrOnNonNull";
      goto LABEL_203;
    case 251:
      v12 = "ExtGC";
      goto LABEL_203;
    case 252:
      v12 = "Ext1";
      goto LABEL_203;
    case 253:
      v12 = "ExtSIMD";
      goto LABEL_203;
    case 254:
      v12 = "ExtAtomic";
LABEL_203:
      v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 32))(v10);
      WTF::PrintStream::printf(v13, "%s", v12);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v10 + 40))(v10);
      break;
    default:
      break;
  }
  WTF::PrintStream::printf(v10, "%s", ": ");
  WTF::PrintStream::printf(v10, "%llu", *a4);
  WTF::PrintStream::printf(v10, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::WasmOpcodeCounter::registerDispatch(void)::$_0 &&>>()
{
  uint64_t v0;
  const char *v1;
  const char *v2;
  int out_token;

  v0 = getpid();
  WTF::dataLogF((WTF *)"<WASM.OP.STAT><%d> Registering callback for wasm opcode statistics.\n", v1, v0);
  out_token = 0;
  return notify_register_dispatch("com.apple.WebKit.wasm.op.stat", &out_token, MEMORY[0x1E0C80D38], &__block_literal_global_4);
}

void ___ZZN3JSC4Wasm17WasmOpcodeCounter16registerDispatchEvENK3__0clEv_block_invoke()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  int v3;
  char *v4;
  unint64_t v5;
  int v6;
  char *v7;
  unint64_t v8;
  int v9;
  char *v10;
  unint64_t v11;
  int v12;
  char *v13;
  unint64_t v14;
  int v15;
  char *v16;
  unint64_t v17;
  int v18;
  char *v19;
  unint64_t v20;
  int v21;
  char *v22;
  unint64_t v23;
  int v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  char *v29;
  __n128 *v30;
  __n128 v31;
  unint64_t v32;
  BOOL v33;
  int v34;
  char v35;
  __n128 *v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  const char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 *v48;
  unint64_t *v49;
  int v50;
  __n128 v51;
  unsigned int v52;
  __n128 *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  const char *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  __n128 *v74;
  unint64_t *v75;
  int v76;
  unsigned int v77;
  __n128 *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  int v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float v88;
  const char *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  __n128 *v98;
  unint64_t *v99;
  int v100;
  unsigned int v101;
  __n128 *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  int v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float v112;
  const char *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __n128 *v121;
  unint64_t *v122;
  unsigned __int8 v123;
  int v124;
  __n128 v125;
  const char **v126;
  uint64_t v127;
  const char *v128;

  v0 = atomic_load(&JSC::Wasm::WasmOpcodeCounter::singleton(void)::onceKey);
  if (v0 != -1)
  {
    v126 = &v128;
    v125.n128_u64[0] = (unint64_t)&v126;
    std::__call_once(&JSC::Wasm::WasmOpcodeCounter::singleton(void)::onceKey, &v125, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::WasmOpcodeCounter::singleton(void)::$_0 &&>>);
  }
  v127 = 0;
  v128 = "<WASM.EXT.SIMD.OP.STAT>";
  v126 = 0;
  do
    v1 = __ldaxr(JSC::Wasm::WasmOpcodeCounter::singleton(void)::counter);
  while (__stlxr(v1, JSC::Wasm::WasmOpcodeCounter::singleton(void)::counter));
  v2 = v1 != 0;
  v125.n128_u32[0] = 0;
  v125.n128_u64[1] = v1;
  v3 = HIDWORD(v127);
  if (HIDWORD(v127) == (_DWORD)v127)
  {
    v4 = WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
    v3 = HIDWORD(v127);
    *(_OWORD *)&v126[2 * HIDWORD(v127)] = *(_OWORD *)v4;
  }
  else
  {
    *(__n128 *)&v126[2 * HIDWORD(v127)] = v125;
  }
  HIDWORD(v127) = v3 + 1;
  do
    v5 = __ldaxr(&qword_1EE343138);
  while (__stlxr(v5, &qword_1EE343138));
  if (v5)
    ++v2;
  v125.n128_u32[0] = 1;
  v125.n128_u64[1] = v5;
  v6 = HIDWORD(v127);
  if (HIDWORD(v127) == (_DWORD)v127)
  {
    v7 = WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
    v6 = HIDWORD(v127);
    *(_OWORD *)&v126[2 * HIDWORD(v127)] = *(_OWORD *)v7;
  }
  else
  {
    *(__n128 *)&v126[2 * HIDWORD(v127)] = v125;
  }
  HIDWORD(v127) = v6 + 1;
  do
    v8 = __ldaxr(&qword_1EE343140);
  while (__stlxr(v8, &qword_1EE343140));
  if (v8)
    ++v2;
  v125.n128_u32[0] = 2;
  v125.n128_u64[1] = v8;
  v9 = HIDWORD(v127);
  if (HIDWORD(v127) == (_DWORD)v127)
  {
    v10 = WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
    v9 = HIDWORD(v127);
    *(_OWORD *)&v126[2 * HIDWORD(v127)] = *(_OWORD *)v10;
  }
  else
  {
    *(__n128 *)&v126[2 * HIDWORD(v127)] = v125;
  }
  HIDWORD(v127) = v9 + 1;
  do
    v11 = __ldaxr(&qword_1EE343148);
  while (__stlxr(v11, &qword_1EE343148));
  if (v11)
    ++v2;
  v125.n128_u32[0] = 3;
  v125.n128_u64[1] = v11;
  v12 = HIDWORD(v127);
  if (HIDWORD(v127) == (_DWORD)v127)
  {
    v13 = WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
    v12 = HIDWORD(v127);
    *(_OWORD *)&v126[2 * HIDWORD(v127)] = *(_OWORD *)v13;
  }
  else
  {
    *(__n128 *)&v126[2 * HIDWORD(v127)] = v125;
  }
  HIDWORD(v127) = v12 + 1;
  do
    v14 = __ldaxr(&qword_1EE343150);
  while (__stlxr(v14, &qword_1EE343150));
  if (v14)
    ++v2;
  v125.n128_u32[0] = 4;
  v125.n128_u64[1] = v14;
  v15 = HIDWORD(v127);
  if (HIDWORD(v127) == (_DWORD)v127)
  {
    v16 = WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
    v15 = HIDWORD(v127);
    *(_OWORD *)&v126[2 * HIDWORD(v127)] = *(_OWORD *)v16;
  }
  else
  {
    *(__n128 *)&v126[2 * HIDWORD(v127)] = v125;
  }
  HIDWORD(v127) = v15 + 1;
  do
    v17 = __ldaxr(&qword_1EE343158);
  while (__stlxr(v17, &qword_1EE343158));
  if (v17)
    ++v2;
  v125.n128_u32[0] = 5;
  v125.n128_u64[1] = v17;
  v18 = HIDWORD(v127);
  if (HIDWORD(v127) == (_DWORD)v127)
  {
    v19 = WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
    v18 = HIDWORD(v127);
    *(_OWORD *)&v126[2 * HIDWORD(v127)] = *(_OWORD *)v19;
  }
  else
  {
    *(__n128 *)&v126[2 * HIDWORD(v127)] = v125;
  }
  HIDWORD(v127) = v18 + 1;
  do
    v20 = __ldaxr(&qword_1EE343160);
  while (__stlxr(v20, &qword_1EE343160));
  if (v20)
    ++v2;
  v125.n128_u32[0] = 6;
  v125.n128_u64[1] = v20;
  v21 = HIDWORD(v127);
  if (HIDWORD(v127) == (_DWORD)v127)
  {
    v22 = WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
    v21 = HIDWORD(v127);
    *(_OWORD *)&v126[2 * HIDWORD(v127)] = *(_OWORD *)v22;
  }
  else
  {
    *(__n128 *)&v126[2 * HIDWORD(v127)] = v125;
  }
  HIDWORD(v127) = v21 + 1;
  do
    v23 = __ldaxr(&qword_1EE343168);
  while (__stlxr(v23, &qword_1EE343168));
  if (v23)
    ++v2;
  v125.n128_u32[0] = 7;
  v125.n128_u64[1] = v23;
  v24 = HIDWORD(v127);
  if (HIDWORD(v127) == (_DWORD)v127)
  {
    v25 = WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
    v24 = HIDWORD(v127);
    *(_OWORD *)&v126[2 * HIDWORD(v127)] = *(_OWORD *)v25;
  }
  else
  {
    *(__n128 *)&v126[2 * HIDWORD(v127)] = v125;
  }
  HIDWORD(v127) = v24 + 1;
  do
    v26 = __ldaxr(qword_1EE343170);
  while (__stlxr(v26, qword_1EE343170));
  if (v26)
    v27 = v2 + 1;
  else
    v27 = v2;
  v125.n128_u32[0] = 8;
  v125.n128_u64[1] = v26;
  v28 = HIDWORD(v127);
  if (HIDWORD(v127) == (_DWORD)v127)
  {
    v29 = WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
    v28 = HIDWORD(v127);
    v30 = (__n128 *)v126;
    v31 = *(__n128 *)v29;
    *(_OWORD *)&v126[2 * HIDWORD(v127)] = *(_OWORD *)v29;
  }
  else
  {
    v30 = (__n128 *)v126;
    v31 = v125;
    *(__n128 *)&v126[2 * HIDWORD(v127)] = v125;
  }
  v32 = 126 - 2 * __clz((v28 + 1));
  v33 = __CFADD__(v28, 1);
  v34 = v28 + 1;
  v35 = v33;
  HIDWORD(v127) = v34;
  v36 = &v30[v34];
  if (v33)
    v37 = 0;
  else
    v37 = v32;
  std::__introsort<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtSIMDOpType,JSC::Wasm::ExtSIMDOpTypeDump,BOOL ()(JSC::Wasm::ExtSIMDOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtSIMDOpType) const&,char const*,char const*)::Pair*,false>(v30, &v30[v34], v37, 1, v31);
  v38 = getpid();
  v125.n128_u32[0] = v38;
  v39 = (double)v27 / 245.0 * 100.0;
  WTF::dataLogF((WTF *)"%s<%d> %s use coverage %.2f%%.\n", v40, v128, v38, "wasm extended SIMD opcode", v39);
  if ((v35 & 1) != 0)
    goto LABEL_75;
  v48 = v30;
  do
  {
    v49 = &v48->n128_u64[1];
    v50 = v48->n128_u32[0];
    ++v48;
    v124 = v50;
    WTF::dataLog<char const*,char [2],int,char [6],JSC::Wasm::ExtSIMDOpTypeDump,char [3],unsigned long long,char [2]>(&v128, &v125, &v124, v49);
  }
  while (v48 != v36);
  if (v30)
LABEL_75:
    WTF::fastFree((unint64_t)v30, v41, v42, v43, v44, v45, v46, v47);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v127 = 0;
  v128 = "<WASM.EXT.ATOMIC.OP.STAT>";
  v126 = 0;
  do
  {
    if ((v55 - 16) < 0x3F || v55 <= 3)
    {
      v57 = &JSC::Wasm::WasmOpcodeCounter::singleton(void)::counter[v55 + 9];
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58, v57));
      if (v58)
        ++v54;
      v125.n128_u32[0] = v55;
      v125.n128_u64[1] = v58;
      v59 = HIDWORD(v127);
      if (HIDWORD(v127) == (_DWORD)v127)
      {
        v60 = WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
        v59 = HIDWORD(v127);
        v53 = (__n128 *)v126;
        v51 = *(__n128 *)v60;
        *(_OWORD *)&v126[2 * HIDWORD(v127)] = *(_OWORD *)v60;
      }
      else
      {
        v53 = (__n128 *)v126;
        v51 = v125;
        *(__n128 *)&v126[2 * HIDWORD(v127)] = v125;
      }
      v52 = v59 + 1;
      HIDWORD(v127) = v59 + 1;
    }
    ++v55;
  }
  while (v55 != 79);
  v61 = 126 - 2 * __clz(v52);
  if (v52)
    v62 = v61;
  else
    v62 = 0;
  std::__introsort<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtAtomicOpType,JSC::Wasm::ExtAtomicOpTypeDump,BOOL ()(JSC::Wasm::ExtAtomicOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtAtomicOpType) const&,char const*,char const*)::Pair*,false>(v53, &v53[v52], v62, 1, v51);
  v63 = getpid();
  v125.n128_u32[0] = v63;
  v64 = (double)v54 / 67.0 * 100.0;
  WTF::dataLogF((WTF *)"%s<%d> %s use coverage %.2f%%.\n", v65, v128, v63, "wasm extended atomic opcode", v64);
  if (v52)
  {
    v74 = v53;
    do
    {
      v75 = &v74->n128_u64[1];
      v76 = v74->n128_u32[0];
      ++v74;
      v124 = v76;
      WTF::dataLog<char const*,char [2],int,char [6],JSC::Wasm::ExtAtomicOpTypeDump,char [3],unsigned long long,char [2]>(&v128, &v125, &v124, v75);
    }
    while (v74 != &v53[v52]);
  }
  if (v53)
  {
    v126 = 0;
    LODWORD(v127) = 0;
    WTF::fastFree((unint64_t)v53, v66, v67, v68, v69, v70, v71, v72);
  }
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v127 = 0;
  v128 = "<WASM.GC.OP.STAT>";
  v126 = 0;
  do
  {
    if (v80 <= 0x1E)
    {
      v81 = &JSC::Wasm::WasmOpcodeCounter::singleton(void)::counter[v80 + 88];
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82, v81));
      if (v82)
        ++v79;
      v125.n128_u32[0] = v80;
      v125.n128_u64[1] = v82;
      v83 = HIDWORD(v127);
      if (HIDWORD(v127) == (_DWORD)v127)
      {
        v84 = WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
        v83 = HIDWORD(v127);
        v78 = (__n128 *)v126;
        v73 = *(__n128 *)v84;
        *(_OWORD *)&v126[2 * HIDWORD(v127)] = *(_OWORD *)v84;
      }
      else
      {
        v78 = (__n128 *)v126;
        v73 = v125;
        *(__n128 *)&v126[2 * HIDWORD(v127)] = v125;
      }
      v77 = v83 + 1;
      HIDWORD(v127) = v83 + 1;
    }
    ++v80;
  }
  while (v80 != 31);
  v85 = 126 - 2 * __clz(v77);
  if (v77)
    v86 = v85;
  else
    v86 = 0;
  std::__introsort<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::ExtGCOpType,JSC::Wasm::ExtGCOpTypeDump,BOOL ()(JSC::Wasm::ExtGCOpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::ExtGCOpType) const&,char const*,char const*)::Pair*,false>(v78, &v78[v77], v86, 1, v73);
  v87 = getpid();
  v125.n128_u32[0] = v87;
  v88 = (double)v79 / 31.0 * 100.0;
  WTF::dataLogF((WTF *)"%s<%d> %s use coverage %.2f%%.\n", v89, v128, v87, "wasm GC opcode", v88);
  if (v77)
  {
    v98 = v78;
    do
    {
      v99 = &v98->n128_u64[1];
      v100 = v98->n128_u32[0];
      ++v98;
      v124 = v100;
      WTF::dataLog<char const*,char [2],int,char [6],JSC::Wasm::ExtGCOpTypeDump,char [3],unsigned long long,char [2]>(&v128, &v125, &v124, v99);
    }
    while (v98 != &v78[v77]);
  }
  if (v78)
  {
    v126 = 0;
    LODWORD(v127) = 0;
    WTF::fastFree((unint64_t)v78, v90, v91, v92, v93, v94, v95, v96);
  }
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v127 = 0;
  v128 = "<WASM.BASE.OP.STAT>";
  v126 = 0;
  do
  {
    if (v104 - 40 < 0x9D
      || v104 <= 0x26u && ((1 << v104) & 0x7F1F1FFBFFLL) != 0
      || v104 - 208 <= 0x2E
      && ((1 << (v104 + 48)) & 0x78000000007FLL) != 0)
    {
      v105 = &JSC::Wasm::WasmOpcodeCounter::singleton(void)::counter[v104 + 119];
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106, v105));
      if (v106)
        ++v103;
      v125.n128_u8[0] = v104;
      v125.n128_u64[1] = v106;
      v107 = HIDWORD(v127);
      if (HIDWORD(v127) == (_DWORD)v127)
      {
        v108 = WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v126, HIDWORD(v127) + 1, (unint64_t)&v125);
        v107 = HIDWORD(v127);
        v102 = (__n128 *)v126;
        v97 = *(__n128 *)v108;
        *(_OWORD *)&v126[2 * HIDWORD(v127)] = *(_OWORD *)v108;
      }
      else
      {
        v102 = (__n128 *)v126;
        v97 = v125;
        *(__n128 *)&v126[2 * HIDWORD(v127)] = v125;
      }
      v101 = v107 + 1;
      HIDWORD(v127) = v107 + 1;
    }
    ++v104;
  }
  while (v104 != 255);
  v109 = 126 - 2 * __clz(v101);
  if (v101)
    v110 = v109;
  else
    v110 = 0;
  std::__introsort<std::_ClassicAlgPolicy,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::{lambda(void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair &)#1} &,void JSC::Wasm::WasmOpcodeCounter::dump<JSC::Wasm::OpType,JSC::Wasm::OpTypeDump,BOOL ()(JSC::Wasm::OpType)>(WTF::Atomic<unsigned long long> *,unsigned long,unsigned long,BOOL ()(JSC::Wasm::OpType) const&,char const*,char const*)::Pair*,false>(v102, &v102[v101], v110, 1, v97);
  v111 = getpid();
  v125.n128_u32[0] = v111;
  v112 = (double)v103 / 200.0 * 100.0;
  WTF::dataLogF((WTF *)"%s<%d> %s use coverage %.2f%%.\n", v113, v128, v111, "wasm base opcode", v112);
  if (v101)
  {
    v121 = v102;
    do
    {
      v122 = &v121->n128_u64[1];
      v123 = v121->n128_u8[0];
      ++v121;
      LOBYTE(v124) = v123;
      WTF::dataLog<char const*,char [2],int,char [6],JSC::Wasm::OpTypeDump,char [3],unsigned long long,char [2]>(&v128, &v125, (unsigned __int8 *)&v124, v122);
    }
    while (v121 != &v102[v101]);
  }
  if (v102)
  {
    v126 = 0;
    LODWORD(v127) = 0;
    WTF::fastFree((unint64_t)v102, v114, v115, v116, v117, v118, v119, v120);
  }
}

uint64_t WTF::dataLog<char [22],unsigned int,char [3],JSC::B3::Type,char [2],JSC::Wasm::OSREntryValue,char [2]>(_DWORD *a1, unsigned int *a2, JSC::B3::ValueRep *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  unsigned int v9;
  const char *v10;
  WTF::PrintStream *v11;
  char v13;
  char **v14;
  char *v15;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v15 = &v13;
    v14 = &v15;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v14, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "OMG OSR entry values[");
  WTF::PrintStream::printf(v8, "%u", *a1);
  WTF::PrintStream::printf(v8, "%s", "] ");
  v9 = *a2;
  if (*a2 >= 0x80000000)
    v9 = 0x80000000;
  v10 = "Void";
  switch(v9)
  {
    case 0u:
      break;
    case 1u:
      v10 = "Int32";
      break;
    case 2u:
      v10 = "Int64";
      break;
    case 3u:
      v10 = "Float";
      break;
    case 4u:
      v10 = "Double";
      break;
    case 5u:
      v10 = "V128";
      break;
    default:
      if (v9 != 0x80000000)
      {
        __break(0xC471u);
        JUMPOUT(0x198E10340);
      }
      v10 = "Tuple";
      break;
  }
  v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  WTF::PrintStream::printf(v11, "%s", v10);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", " ");
  JSC::B3::ValueRep::dump(a3, v8);
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [23],unsigned int,char [25],JSC::Wasm::TierUpCount,char [2],WTF::RawPointer,char [2]>(_DWORD *a1, uint64_t a2, const void **a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", "Consider OMGPlan for [");
  WTF::PrintStream::printf(v8, "%u", *a1);
  WTF::PrintStream::printf(v8, "%s", "] with executeCounter = ");
  WTF::PrintStream::printf(v8, "%lf/%lf, %d", *(float *)(a2 + 4) + (double)*(int *)a2, (double)*(int *)(a2 + 8), *(_DWORD *)a2);
  WTF::PrintStream::printImpl<char [2],WTF::RawPointer,char [2]>(v8, " ", a3, "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<char [65],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "delayOMGCompile replacement in place, delaying indefinitely for ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [61],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "delayOMGCompile trigger in place, delaying indefinitely for ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [28],unsigned int,char [13],unsigned int,char [24],JSC::Wasm::TierUpCount,char [2],WTF::RawPointer,char [2]>(_DWORD *a1, _DWORD *a2, uint64_t a3, const void **a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v10, "%s", "Consider OSREntryPlan for [");
  WTF::PrintStream::printf(v10, "%u", *a1);
  WTF::PrintStream::printf(v10, "%s", "] loopIndex#");
  WTF::PrintStream::printf(v10, "%u", *a2);
  WTF::PrintStream::printf(v10, "%s", " with executeCounter = ");
  WTF::PrintStream::printf(v10, "%lf/%lf, %d", *(float *)(a3 + 4) + (double)*(int *)a3, (double)*(int *)(a3 + 8), *(_DWORD *)a3);
  WTF::PrintStream::printImpl<char [2],WTF::RawPointer,char [2]>(v10, " ", a4, "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

uint64_t WTF::dataLog<char [37],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "delayOMGCompile still compiling for ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<char [19],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "triggerOMGOSR for ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

_QWORD *WTF::Vector<std::pair<JSC::VM *,WTF::RefPtr<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::VM *,WTF::RefPtr<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>>>>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;

  result = (_QWORD *)WTF::Vector<std::pair<JSC::VM *,WTF::RefPtr<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  *v6 = *result;
  v7 = result[1];
  result[1] = 0;
  v6[1] = v7;
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<std::pair<JSC::VM *,WTF::RefPtr<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<std::pair<JSC::VM *,WTF::RefPtr<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<std::pair<JSC::VM *,WTF::RefPtr<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<std::pair<JSC::VM *,WTF::RefPtr<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::Wasm::Plan &)>>>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  const void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(const void **)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<JSC::FTL::ValueFromBlock,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    memcpy(*(void **)a1, v3, 16 * v4);
    if ((const void *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(const void **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

void JSC::Wasm::SectionParser::parseType(JSC::Wasm::SectionParser *this, unint64_t a2)
{
  double v4;
  float v5;
  uint64_t v6;
  char v7;
  double v8;
  float v9;
  uint64_t v10;
  char v11;
  const JSC::Wasm::Type *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  char v22;
  int v23;
  int v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int *v111;
  unint64_t v112;
  WTF::AtomStringImpl *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int *v120;
  WTF *v121;
  uint64_t v122;
  WTF *v123;
  unsigned int *v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int *v131;
  int v132;
  unsigned int *v133;
  WTF *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int *v142;
  char v143;
  WTF *v144;
  JSC::Wasm::TypeInformation *v145;
  WTF *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  JSC::Wasm::TypeDefinition *v150;
  unsigned int v151;

  v151 = 0;
  if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v151))
  {
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v146, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "can't get Type section's count", 31, v4, v5);
    goto LABEL_144;
  }
  if (v151 > 0xF4240)
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v146, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "Type section's count is too big ", 33, v151, " maximum ", 10, v4, v5, 1000000);
    goto LABEL_144;
  }
  v6 = *(_QWORD *)(a2 + 56);
  if (*(_DWORD *)(v6 + 96))
  {
    __break(0xC471u);
    goto LABEL_147;
  }
  if (*(_DWORD *)(v6 + 280))
  {
    __break(0xC471u);
    JUMPOUT(0x198E112F4);
  }
  if (!v151)
    goto LABEL_56;
  v7 = WTF::VectorBufferBase<unsigned long long,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(v6 + 88, v151);
  LODWORD(v10) = v151;
  if ((v7 & 1) == 0)
  {
    v135 = *(_QWORD *)a2;
    v136 = *(_QWORD *)(a2 + 48);
    v137 = "can't allocate enough memory for Type section's ";
    v138 = " entries";
    v139 = 49;
    v140 = 9;
    goto LABEL_143;
  }
  if (!v151)
    goto LABEL_56;
  v11 = WTF::VectorBufferBase<unsigned long long,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(*(_QWORD *)(a2 + 56) + 272, v151);
  v10 = v151;
  if ((v11 & 1) == 0)
  {
    v135 = *(_QWORD *)a2;
    v136 = *(_QWORD *)(a2 + 48);
    v137 = "can't allocate enough memory for Type section's ";
    v138 = " canonical RTT entries";
    v139 = 49;
    v140 = 23;
    goto LABEL_143;
  }
  if (!v151)
  {
LABEL_56:
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 8) = 0;
    return;
  }
  v15 = 0;
  v16 = 0;
  v17 = (uint64_t *)(a2 + 32);
  while (1)
  {
    v18 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
      goto LABEL_142;
    v19 = v18 + 1;
    *(_QWORD *)a2 = v18 + 1;
    v20 = *(char *)(*(_QWORD *)(a2 + 8) + v18);
    if ((v20 & 0x80000000) != 0)
      break;
    v150 = 0;
    v21 = BYTE2(dword_1ECF4C7B0);
    if (BYTE2(dword_1ECF4C7B0))
    {
      v21 = *(_DWORD *)(*(_QWORD *)(a2 + 56) + 100);
      v23 = v21 + 1;
      v22 = 1;
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    v148 = *v17;
    v24 = v20 | (v20 >> 6 << 7);
    v149 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(a2 + 32) = v22;
    *(_DWORD *)(a2 + 36) = v21;
    *(_DWORD *)(a2 + 40) = v23;
    if (v24 == 224)
    {
      JSC::Wasm::SectionParser::parseFunctionType((uint64_t)&v146, a2, v16, (unsigned int **)&v150, v12, v8, v9, v10, v13, v14);
LABEL_17:
      if ((_BYTE)v147)
        goto LABEL_126;
      std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v146, v25, v26, v27, v28, v29, v30, v31);
      goto LABEL_19;
    }
    if (v24 > 0xDDu)
    {
      if (v24 == 222)
      {
        if (!BYTE2(dword_1ECF4C7B0))
        {
          v91 = *(_QWORD *)(a2 + 48);
          v92 = v16;
          v93 = "th type failed to parse because array types are not enabled";
LABEL_54:
          JSC::Wasm::SectionParser::fail<unsigned int,char const*>(&v146, v19, v91, v92, v93);
LABEL_55:
          LODWORD(v35) = 0;
          *(_QWORD *)this = v146;
          *((_BYTE *)this + 8) = 1;
          goto LABEL_25;
        }
        JSC::Wasm::SectionParser::parseArrayType((uint64_t)&v146, (uint64_t *)a2, v16, (unsigned int **)&v150, v8, v9);
      }
      else
      {
        if (v24 != 223)
        {
LABEL_77:
          JSC::Wasm::SectionParser::fail<unsigned int,char const*,signed char>(&v146, v19, *(_QWORD *)(a2 + 48), v16, (char)v24);
          goto LABEL_55;
        }
        if (!BYTE2(dword_1ECF4C7B0))
        {
          v91 = *(_QWORD *)(a2 + 48);
          v92 = v16;
          v93 = "th type failed to parse because struct types are not enabled";
          goto LABEL_54;
        }
        JSC::Wasm::SectionParser::parseStructType((uint64_t)&v146, (uint64_t *)a2, v16, (unsigned int **)&v150, (uint64_t)v12, v8, v9, v10, v13, v14);
      }
      goto LABEL_17;
    }
    if (v24 - 207 < 2)
    {
      if (!BYTE2(dword_1ECF4C7B0))
      {
        v91 = *(_QWORD *)(a2 + 48);
        v92 = v16;
        v93 = "th type failed to parse because sub types are not enabled";
        goto LABEL_54;
      }
      JSC::Wasm::SectionParser::parseSubtype((uint64_t)&v146, a2, v16, (unsigned int **)&v150, 0, v24 == 207, v13, v14, v8, v9);
      goto LABEL_17;
    }
    if (v24 != 206)
      goto LABEL_77;
    if (!BYTE2(dword_1ECF4C7B0))
    {
      v91 = *(_QWORD *)(a2 + 48);
      v92 = v16;
      v93 = "th type failed to parse because rec types are not enabled";
      goto LABEL_54;
    }
    JSC::Wasm::SectionParser::parseRecursionGroup((uint64_t)&v146, a2, v16, (unsigned int **)&v150, v12, v8, v9, v10, v13, v14);
    if ((_BYTE)v147)
      goto LABEL_126;
    std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v146, v25, v26, v27, v28, v29, v30, v31);
    if (++v15 > 0xF4240)
    {
      JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned long>(&v146, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), v8, v9);
      goto LABEL_63;
    }
LABEL_19:
    v35 = (unsigned int *)v150;
    if (!v150)
    {
      JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v146, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "can't allocate enough memory for Type section's ", 49, v16, "th signature", 13, v8, v9);
      goto LABEL_128;
    }
    if (!BYTE2(dword_1ECF4C7B0))
    {
      v36 = *(_QWORD *)(a2 + 56);
      v146 = v150;
      v150 = 0;
      v37 = *(unsigned int *)(v36 + 100);
      if ((_DWORD)v37 == *(_DWORD *)(v36 + 96))
      {
        WTF::Vector<WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>>(v36 + 88, (unint64_t)&v146);
      }
      else
      {
        v38 = *(_QWORD *)(v36 + 88);
        v146 = 0;
        *(_QWORD *)(v38 + 8 * v37) = v35;
        *(_DWORD *)(v36 + 100) = v37 + 1;
      }
      v39 = (unsigned int *)v146;
      v146 = 0;
      if (v39)
      {
        do
        {
          v43 = __ldaxr(v39);
          v44 = --v43 == 0;
        }
        while (__stlxr(v43, v39));
LABEL_33:
        if (v44)
        {
          atomic_store(1u, v39);
          WTF::fastFree((unint64_t)v39, v32, v33, v34, (uint64_t)v12, v10, v13, v14);
        }
      }
      goto LABEL_24;
    }
    if (*((_DWORD *)v150 + 8) == 3)
      goto LABEL_24;
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v150))
    {
      v146 = 0;
      v147 = 0;
      v142 = v35;
      if (WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)1,unsigned long>((uint64_t)&v146, (unint64_t)&v142))
      {
        JSC::Wasm::TypeInformation::typeDefinitionForRecursionGroup((uint64_t *)&v146, v63, v64, v65, v66, v67, (unsigned int **)&v145);
        JSC::Wasm::TypeInformation::typeDefinitionForProjection(v145, 0, v70, v71, v72, v73, v74, (unsigned int **)&v144);
        v75 = v144;
        JSC::Wasm::TypeInformation::registerCanonicalRTTForType(v144, v76, v77, v78, v79, v80, v81, v82);
        v83 = *(_QWORD *)(a2 + 56);
        JSC::Wasm::TypeInformation::getCanonicalRTT(v75, v84, v85, v86, v87, v88, v89, &v142);
        v90 = *(unsigned int *)(v83 + 284);
        if ((_DWORD)v90 == *(_DWORD *)(v83 + 280))
        {
          WTF::Vector<WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>>(v83 + 272, (unint64_t)&v142);
        }
        else
        {
          v125 = *(_QWORD *)(v83 + 272);
          v126 = v142;
          v142 = 0;
          *(_QWORD *)(v125 + 8 * v90) = v126;
          *(_DWORD *)(v83 + 284) = v90 + 1;
        }
        v127 = v142;
        v142 = 0;
        if (v127)
        {
          do
          {
            v47 = __ldaxr(v127);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v127));
          if (!v48)
          {
            atomic_store(1u, v127);
            WTF::fastFree((unint64_t)v127, v32, v33, v34, (uint64_t)v12, v10, v13, v14);
          }
        }
        if (*((_DWORD *)v150 + 8) == 5)
        {
          v109 = *(_QWORD *)(a2 + 56);
          v110 = *(unsigned int *)(v109 + 284);
          if (!(_DWORD)v110)
          {
            __break(0xC471u);
LABEL_147:
            JUMPOUT(0x198E112D4);
          }
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v109 + 272) + 8 * v110 - 8) + 8) >= 0x40u)
          {
            JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v142, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "subtype depth for Type section's ", 34, v16, "th signature exceeded the limits of ", 37, v8, v9, 63);
            *(_QWORD *)this = v142;
            v132 = 1;
            *((_BYTE *)this + 8) = 1;
          }
          else
          {
            v111 = (unsigned int *)v144;
            v112 = JSC::Wasm::TypeDefinition::unroll((unint64_t)v144);
            JSC::Wasm::SectionParser::checkSubtypeValidity((JSC::Wasm::SectionParser *)&v142, (const JSC::Wasm::TypeDefinition *)a2, v112);
            if (!v143)
            {
              std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v142, v113, v114, v115, v116, v117, v118, v119);
              goto LABEL_118;
            }
            v141 = v142;
            v142 = 0;
            *(_QWORD *)this = v141;
            v132 = 1;
            *((_BYTE *)this + 8) = 1;
            std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v142, v113, v114, v115, v116, v117, v118, v119);
          }
        }
        else
        {
          v111 = (unsigned int *)v144;
LABEL_118:
          v128 = *(_QWORD *)(a2 + 56);
          v142 = v111;
          v144 = 0;
          v129 = *(unsigned int *)(v128 + 100);
          if ((_DWORD)v129 == *(_DWORD *)(v128 + 96))
          {
            WTF::Vector<WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>>(v128 + 88, (unint64_t)&v142);
          }
          else
          {
            v130 = *(_QWORD *)(v128 + 88);
            v142 = 0;
            *(_QWORD *)(v130 + 8 * v129) = v111;
            *(_DWORD *)(v128 + 100) = v129 + 1;
          }
          v131 = v142;
          v142 = 0;
          if (v131)
          {
            do
            {
              v54 = __ldaxr(v131);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v131));
            if (!v55)
            {
              atomic_store(1u, v131);
              WTF::fastFree((unint64_t)v131, v32, v33, v34, (uint64_t)v12, v10, v13, v14);
            }
          }
          v132 = 0;
        }
        v133 = (unsigned int *)v144;
        v144 = 0;
        if (v133)
        {
          do
          {
            v49 = __ldaxr(v133);
            v50 = v49 - 1;
          }
          while (__stlxr(v50, v133));
          if (!v50)
          {
            atomic_store(1u, v133);
            WTF::fastFree((unint64_t)v133, v32, v33, v34, (uint64_t)v12, v10, v13, v14);
          }
        }
        v120 = (unsigned int *)v145;
        v145 = 0;
        if (v120)
        {
          do
          {
            v51 = __ldaxr(v120);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v120));
          if (!v52)
          {
            atomic_store(1u, v120);
            WTF::fastFree((unint64_t)v120, v32, v33, v34, (uint64_t)v12, v10, v13, v14);
          }
        }
      }
      else
      {
        JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v142, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "can't allocate enough memory for Type section's ", 49, v16, "th signature", 13, v68, v69);
        *(_QWORD *)this = v142;
        v132 = 1;
        *((_BYTE *)this + 8) = 1;
      }
      v121 = v146;
      if (v146)
      {
        v146 = 0;
        LODWORD(v147) = 0;
        WTF::fastFree((unint64_t)v121, v32, v33, v34, (uint64_t)v12, v10, v13, v14);
      }
      if (!v132)
        goto LABEL_24;
LABEL_110:
      LODWORD(v35) = 0;
      goto LABEL_25;
    }
    JSC::Wasm::TypeInformation::registerCanonicalRTTForType((JSC::Wasm::TypeInformation *)v35, v56, v57, v58, v59, v60, v61, v62);
    v94 = *(_QWORD *)(a2 + 56);
    JSC::Wasm::TypeInformation::getCanonicalRTT(v150, v95, v96, v97, v98, v99, v100, (unsigned int **)&v146);
    v101 = *(unsigned int *)(v94 + 284);
    if ((_DWORD)v101 == *(_DWORD *)(v94 + 280))
    {
      WTF::Vector<WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>>(v94 + 272, (unint64_t)&v146);
    }
    else
    {
      v122 = *(_QWORD *)(v94 + 272);
      v123 = v146;
      v146 = 0;
      *(_QWORD *)(v122 + 8 * v101) = v123;
      *(_DWORD *)(v94 + 284) = v101 + 1;
    }
    v124 = (unsigned int *)v146;
    v146 = 0;
    if (v124)
    {
      do
      {
        v45 = __ldaxr(v124);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v124));
      if (!v46)
      {
        atomic_store(1u, v124);
        WTF::fastFree((unint64_t)v124, v32, v33, v34, (uint64_t)v12, v10, v13, v14);
      }
    }
    v102 = v150;
    if (*((_DWORD *)v150 + 8) != 5)
      goto LABEL_90;
    v103 = *(_QWORD *)(a2 + 56);
    v104 = *(unsigned int *)(v103 + 284);
    if (!(_DWORD)v104)
    {
      __break(0xC471u);
      JUMPOUT(0x198E114D8);
    }
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v103 + 272) + 8 * v104 - 8) + 8) < 0x40u)
    {
      v105 = JSC::Wasm::TypeDefinition::unroll((unint64_t)v150);
      JSC::Wasm::SectionParser::checkSubtypeValidity((JSC::Wasm::SectionParser *)&v146, (const JSC::Wasm::TypeDefinition *)a2, v105);
      if (!(_BYTE)v147)
      {
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v146, v25, v26, v27, v28, v29, v30, v31);
        v102 = v150;
LABEL_90:
        v106 = *(_QWORD *)(a2 + 56);
        v146 = v102;
        v150 = 0;
        v107 = *(unsigned int *)(v106 + 100);
        if ((_DWORD)v107 == *(_DWORD *)(v106 + 96))
        {
          WTF::Vector<WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>>(v106 + 88, (unint64_t)&v146);
        }
        else
        {
          v108 = *(_QWORD *)(v106 + 88);
          v146 = 0;
          *(_QWORD *)(v108 + 8 * v107) = v102;
          *(_DWORD *)(v106 + 100) = v107 + 1;
        }
        v39 = (unsigned int *)v146;
        v146 = 0;
        if (v39)
        {
          do
          {
            v53 = __ldaxr(v39);
            v44 = --v53 == 0;
          }
          while (__stlxr(v53, v39));
          goto LABEL_33;
        }
LABEL_24:
        LODWORD(v35) = 1;
        goto LABEL_25;
      }
LABEL_126:
      v134 = v146;
      v146 = 0;
      *(_QWORD *)this = v134;
      *((_BYTE *)this + 8) = 1;
      std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v146, v25, v26, v27, v28, v29, v30, v31);
      goto LABEL_110;
    }
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v146, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "subtype depth for Type section's ", 34, v16, "th signature exceeded the limits of ", 37, v8, v9, 63);
LABEL_63:
    LODWORD(v35) = 0;
LABEL_128:
    *(_QWORD *)this = v146;
    *((_BYTE *)this + 8) = 1;
LABEL_25:
    *v17 = v148;
    *(_DWORD *)(a2 + 40) = v149;
    v40 = (unsigned int *)v150;
    v150 = 0;
    if (v40)
    {
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        atomic_store(1u, v40);
        WTF::fastFree((unint64_t)v40, v32, v33, v34, (uint64_t)v12, v10, v13, v14);
      }
    }
    if (!(_DWORD)v35)
      return;
    v16 = (v16 + 1);
    if (v16 >= v151)
      goto LABEL_56;
  }
  v18 = v19;
LABEL_142:
  v136 = *(_QWORD *)(a2 + 48);
  v137 = "can't get ";
  v138 = "th Type's type";
  v135 = v18;
  v139 = 11;
  LODWORD(v10) = v16;
  v140 = 15;
LABEL_143:
  JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v146, v135, v136, v137, v139, v10, v138, v140, v8, v9);
LABEL_144:
  *(_QWORD *)this = v146;
  *((_BYTE *)this + 8) = 1;
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(_QWORD *a1, uint64_t a2, uint64_t a3, char *__src, uint64_t a5, int a6, char *a7, uint64_t a8, double a9, float a10, uint64_t a11)
{
  int v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  uint64_t v22;
  _BYTE *v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  float v43;
  unsigned int v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  int *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  const char *v125;
  int v126;
  const char *v127;
  WTF *v128;
  __int128 v129;
  _BYTE v130[128];
  uint64_t v131;

  v12 = a6;
  v14 = a1;
  v15 = 0;
  v16 = a11;
  v131 = *MEMORY[0x1E0C80C00];
  v17 = a3 + a2;
  do
  {
    v18 = (v17 % 0xA) | 0x30;
    v130[v15-- - 8] = v18;
    v19 = v17 > 9;
    v17 /= 0xAuLL;
  }
  while (v19);
  if (v15 + 26 >= 27)
    __break(1u);
  if (v15)
  {
    v114 = __src;
    if ((unint64_t)-v15 >> 31)
    {
      __break(0xC471u);
LABEL_69:
      JUMPOUT(0x198E11A18);
    }
    v22 = WTF::fastCompactMalloc((WTF *)(20 - v15));
    v23 = (_BYTE *)(v22 + 20);
    *(_DWORD *)v22 = 2;
    *(_DWORD *)(v22 + 4) = -(int)v15;
    *(_QWORD *)(v22 + 8) = v22 + 20;
    v24 = (WTF::StringImpl *)v22;
    *(_DWORD *)(v22 + 16) = 4;
    if (v15 == -1)
      *v23 = v18;
    else
      memcpy(v23, &v130[v15 - 7], -v15);
    v14 = a1;
    v16 = a11;
    v12 = a6;
    __src = v114;
  }
  else
  {
    v24 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v127 = (const char *)off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  if (__src)
  {
    v25 = a5 - 1;
    if (!a5)
      v25 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v25, (uint64_t)&v125, a10);
  }
  else
  {
    v26 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v26 = 1;
    *(_QWORD *)(v26 + 8) = 0;
    *(_BYTE *)(v26 + 16) = 0;
    v125 = (const char *)v26;
    v126 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v127, "StringView", &v125);
  if (v126 != -1)
    ((void (*)(WTF::StringImpl **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v126])(&v124, &v125);
  (*((void (**)(const char **))v127 + 5))(&v127);
  (*((void (**)(const char **))v127 + 5))(&v127);
  v34 = v128;
  if (!v128)
  {
    v118 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v118);
  v34 = v128;
  if (v128 != (WTF *)v130)
LABEL_22:
    WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
  v127 = (const char *)off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v127, "%u", v12);
  (*((void (**)(const char **))v127 + 5))(&v127);
  v42 = v128;
  if (!v128)
  {
    v117 = 0;
    goto LABEL_27;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v117);
  v42 = v128;
  if (v128 != (WTF *)v130)
LABEL_27:
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  v127 = (const char *)off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  if (a7)
  {
    v44 = a8 - 1;
    if (!a8)
      v44 = 0;
    WTF::StringImpl::utf8ForCharacters(a7, v44, (uint64_t)&v125, v43);
  }
  else
  {
    v45 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v45 = 1;
    *(_QWORD *)(v45 + 8) = 0;
    *(_BYTE *)(v45 + 16) = 0;
    v125 = (const char *)v45;
    v126 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v127, "StringView", &v125);
  if (v126 != -1)
    ((void (*)(WTF::StringImpl **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v126])(&v124, &v125);
  (*((void (**)(const char **))v127 + 5))(&v127);
  (*((void (**)(const char **))v127 + 5))(&v127);
  v53 = v128;
  if (!v128)
  {
    v116 = 0;
    goto LABEL_39;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v116);
  v53 = v128;
  if (v128 != (WTF *)v130)
LABEL_39:
    WTF::fastFree((unint64_t)v53, v46, v47, v48, v49, v50, v51, v52);
  v127 = (const char *)off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v127, "%lu", v16);
  (*((void (**)(const char **))v127 + 5))(&v127);
  v61 = v128;
  if (!v128)
  {
    v115 = 0;
    goto LABEL_44;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v115);
  v61 = v128;
  if (v128 != (WTF *)v130)
LABEL_44:
    WTF::fastFree((unint64_t)v61, v54, v55, v56, v57, v58, v59, v60);
  v127 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v128) = 41;
  v124 = v24;
  v125 = ": ";
  v126 = 2;
  v122 = v117;
  v123 = v118;
  v120 = v115;
  v121 = v116;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v127, (uint64_t *)&v124, (uint64_t)&v125, (uint64_t *)&v123, (uint64_t *)&v122, (uint64_t *)&v121, (uint64_t *)&v120, &v119);
  if (!v119)
  {
    __break(0xC471u);
    goto LABEL_69;
  }
  *v14 = v119;
  v119 = 0;
  v69 = v115;
  v115 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  v70 = v116;
  v116 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v117;
  v117 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v118;
  v118 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  if (*(_DWORD *)v24 == 2)
  {
    WTF::StringImpl::~StringImpl(v24, v62, v63, v64, v65, v66, v67, v68);
    WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
  }
  else
  {
    *(_DWORD *)v24 -= 2;
  }
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2, uint64_t a3, char *__src, uint64_t a5, int a6, char *a7, uint64_t a8, double a9, float a10)
{
  uint64_t v10;
  char *v11;
  int v12;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  int *v23;
  _BYTE *v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  float v43;
  unsigned int v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  int *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  int *v104;
  const char *v105;
  int v106;
  const char *v107;
  WTF *v108;
  __int128 v109;
  _BYTE v110[128];
  uint64_t v111;

  v10 = a8;
  v11 = a7;
  v12 = a6;
  v15 = a1;
  v16 = 0;
  v111 = *MEMORY[0x1E0C80C00];
  v17 = a3 + a2;
  do
  {
    v18 = (v17 % 0xA) | 0x30;
    v110[v16-- - 8] = v18;
    v19 = v17 > 9;
    v17 /= 0xAuLL;
  }
  while (v19);
  if (v16 + 26 >= 27)
    __break(1u);
  if (v16)
  {
    if ((unint64_t)-v16 >> 31)
    {
      __break(0xC471u);
LABEL_60:
      JUMPOUT(0x198E11EBCLL);
    }
    v23 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v16));
    v24 = v23 + 5;
    *v23 = 2;
    v23[1] = -(int)v16;
    *((_QWORD *)v23 + 1) = v23 + 5;
    v23[4] = 4;
    if (v16 == -1)
      *v24 = v18;
    else
      memcpy(v24, &v110[v16 - 7], -v16);
    v15 = a1;
    v10 = a8;
    v12 = a6;
    v11 = a7;
  }
  else
  {
    v23 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  if (__src)
  {
    v25 = a5 - 1;
    if (!a5)
      v25 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v25, (uint64_t)&v105, a10);
  }
  else
  {
    v26 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v26 = 1;
    *(_QWORD *)(v26 + 8) = 0;
    *(_BYTE *)(v26 + 16) = 0;
    v105 = (const char *)v26;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v107, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(int **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v104, &v105);
  (*((void (**)(const char **))v107 + 5))(&v107);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v34 = v108;
  if (!v108)
  {
    v99 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v99);
  v34 = v108;
  if (v108 != (WTF *)v110)
LABEL_22:
    WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v107, "%u", v12);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v42 = v108;
  if (!v108)
  {
    v98 = 0;
    goto LABEL_27;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v98);
  v42 = v108;
  if (v108 != (WTF *)v110)
LABEL_27:
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  v107 = (const char *)off_1E3572250;
  v108 = (WTF *)v110;
  v109 = xmmword_199122F80;
  v110[0] = 0;
  if (v11)
  {
    v44 = v10 - 1;
    if (!v10)
      v44 = 0;
    WTF::StringImpl::utf8ForCharacters(v11, v44, (uint64_t)&v105, v43);
  }
  else
  {
    v45 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v45 = 1;
    *(_QWORD *)(v45 + 8) = 0;
    *(_BYTE *)(v45 + 16) = 0;
    v105 = (const char *)v45;
    v106 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v107, "StringView", &v105);
  if (v106 != -1)
    ((void (*)(int **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v106])(&v104, &v105);
  (*((void (**)(const char **))v107 + 5))(&v107);
  (*((void (**)(const char **))v107 + 5))(&v107);
  v53 = v108;
  if (!v108)
  {
    v97 = 0;
    goto LABEL_39;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v108, v109, (uint64_t *)&v97);
  v53 = v108;
  if (v108 != (WTF *)v110)
LABEL_39:
    WTF::fastFree((unint64_t)v53, v46, v47, v48, v49, v50, v51, v52);
  v107 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v108) = 41;
  v104 = v23;
  v105 = ": ";
  v106 = 2;
  v102 = v98;
  v103 = v99;
  v101 = v97;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v107, (uint64_t *)&v104, (uint64_t)&v105, (uint64_t *)&v103, (uint64_t *)&v102, (uint64_t *)&v101, &v100);
  if (!v100)
  {
    __break(0xC471u);
    goto LABEL_60;
  }
  *v15 = v100;
  v100 = 0;
  v61 = v97;
  v97 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  v62 = v98;
  v98 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  v63 = v99;
  v99 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  if (*v23 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v23, v54, v55, v56, v57, v58, v59, v60);
    WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
  }
  else
  {
    *v23 -= 2;
  }
}

void JSC::Wasm::SectionParser::parseFunctionType(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int **a4, const JSC::Wasm::Type *a5, double a6, float a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  char v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t i;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  unint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  WTF *v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  unsigned int *v70;
  unint64_t v71;
  _QWORD *v72;
  BOOL v73;
  unsigned int v74;
  void *v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  WTF *v102;
  uint64_t v103;
  _BYTE v104[256];
  WTF *v105;
  uint64_t v106;
  _BYTE v107[256];
  unsigned int *v108[2];

  v12 = a3;
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)a2;
  v17 = v15 - v16;
  if (v15 <= v16)
    goto LABEL_137;
  v19 = 0;
  v20 = 0;
  LODWORD(v21) = 0;
  v22 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = v16 + 1;
  v23 = v22 + v16;
  v24 = v16 - v15;
  while (1)
  {
    v25 = *(char *)(v23 + v19);
    v21 = (WTF::StringImpl *)(((v25 & 0x7F) << v20) | v21);
    if ((v25 & 0x80000000) == 0)
      break;
    if (v17 >= 5)
      v63 = 5;
    else
      v63 = v17;
    if (v63 - 1 == v19)
    {
      v16 += v19 + 1;
      goto LABEL_137;
    }
    *(_QWORD *)a2 = v16 + v19++ + 2;
    v20 += 7;
    if (!(v24 + v19))
      goto LABEL_58;
  }
  v16 += v19 + 1;
  if ((_DWORD)v19 == 4 && *(unsigned __int8 *)(v23 + v19) >= 0x10u)
  {
LABEL_137:
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int>(&v105, v16, *(_QWORD *)(a2 + 48), "can't get Type's argument count at index ", 42, a3, a6, a7);
    goto LABEL_109;
  }
  if (v21 >= 0x3E9)
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>((int **)&v105, v16, *(_QWORD *)(a2 + 48), "argument count of Type at index ", 33, a3, v21, (WTF::StringImpl *)0x3E8, a6, a7);
LABEL_109:
    *(_QWORD *)a1 = v105;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v101 = a3;
  v10 = (WTF *)v107;
  v105 = (WTF *)v107;
  v11 = 16;
  v106 = 16;
  if (v21 >= 0x11)
  {
    WTF::tryFastMalloc((WTF *)(16 * (_QWORD)v21), &v102);
    if (v102)
    {
      v105 = v102;
      LODWORD(v106) = (_DWORD)v21;
      HIDWORD(v106) = (_DWORD)v21;
      goto LABEL_8;
    }
    v35 = *(_QWORD *)a2;
    v36 = *(_QWORD *)(a2 + 48);
    v37 = "can't allocate enough memory for Type section's ";
    v38 = "th signature";
    v39 = 49;
    v40 = v101;
    v41 = 13;
LABEL_24:
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v102, v35, v36, v37, v39, v40, v38, v41, a6, a7);
    goto LABEL_25;
  }
  HIDWORD(v106) = (_DWORD)v21;
  if ((_DWORD)v21)
  {
LABEL_8:
    for (i = 0; (WTF::StringImpl *)i != v21; ++i)
    {
      v27 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16)
        || (v28 = *(_QWORD *)(a2 + 56),
            *(_QWORD *)a2 = v27 + 1,
            v29 = *(char *)(*(_QWORD *)(a2 + 8) + v27),
            (v29 & 0x80000000) != 0)
        || (v30 = v29 | (v29 >> 6 << 7),
            !JSC::Wasm::isValidTypeKind<signed char>((char)(v29 | ((v29 >> 6) << 7)))))
      {
LABEL_23:
        v35 = *(_QWORD *)a2;
        v36 = *(_QWORD *)(a2 + 48);
        v37 = "can't get ";
        v38 = "th argument Type";
        v39 = 11;
        v40 = i;
        v41 = 17;
        goto LABEL_24;
      }
      if (!BYTE1(dword_1ECF4C7B0))
      {
        if ((v30 + 29) < 2u)
          goto LABEL_23;
LABEL_15:
        v31 = 0;
        goto LABEL_16;
      }
      v31 = (char)v30;
      v32 = (char)v30 + 22;
      if (v32 <= 9 && (((1 << v32) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
      {
        v33 = 227;
        goto LABEL_84;
      }
      if ((v30 + 29) >= 2u)
        goto LABEL_15;
      LODWORD(v102) = 0;
      if (!WTF::LEBDecoder::decodeInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (int *)&v102))
        goto LABEL_23;
      v31 = (int)v102;
      if ((v102 & 0x80000000) != 0)
      {
        if ((unint64_t)((int)v102 + 22) > 9
          || ((1 << (v102 + 22)) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
        {
          goto LABEL_23;
        }
      }
      else
      {
        if (v102 >= *(_DWORD *)(v28 + 100))
        {
          if (!*(_BYTE *)(a2 + 32))
            goto LABEL_23;
          v74 = *(_DWORD *)(a2 + 36);
          if (v102 < v74 || v102 >= *(_DWORD *)(a2 + 40))
            goto LABEL_23;
        }
        else if (!*(_BYTE *)(a2 + 32) || (v74 = *(_DWORD *)(a2 + 36), v102 < v74))
        {
          v31 = *(_QWORD *)(*(_QWORD *)(v28 + 88) + 8 * v102);
          goto LABEL_16;
        }
        JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(v102 - v74), (uint64_t)a4, (uint64_t)a5, v12, a9, a10, (unsigned int **)&v102);
        v31 = (unint64_t)v102;
        v102 = 0;
        if (v31)
        {
          do
          {
            v77 = __ldaxr((unsigned int *)v31);
            v78 = v77 - 1;
          }
          while (__stlxr(v78, (unsigned int *)v31));
          if (!v78)
          {
            atomic_store(1u, (unsigned int *)v31);
            WTF::fastFree(v31, v75, v76, (uint64_t)a4, (uint64_t)a5, v12, a9, a10);
          }
        }
      }
LABEL_16:
      v33 = v30;
      if (v30 - 252 >= 4)
      {
        if (v30 - 239 < 2)
        {
          if (BYTE1(dword_1ECF4C7B0))
            goto LABEL_23;
        }
        else
        {
          if (v30 != 251)
          {
            if (v30 - 227 > 1)
              goto LABEL_23;
LABEL_84:
            if (BYTE1(dword_1ECF4C7B0))
              v73 = v31 == 0;
            else
              v73 = 1;
            if (v73)
              goto LABEL_23;
            goto LABEL_17;
          }
          if (!HIBYTE(dword_1ECF4C7B0))
            goto LABEL_23;
          v33 = 251;
        }
      }
LABEL_17:
      if (i >= HIDWORD(v106))
      {
LABEL_149:
        __break(0xC471u);
        JUMPOUT(0x198E12710);
      }
      v34 = (uint64_t *)((char *)v105 + 16 * i);
      *v34 = v33;
      v34[1] = v31;
    }
  }
  v51 = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)a2;
  v17 = v51 - *(_QWORD *)a2;
  if (v51 <= *(_QWORD *)a2)
    goto LABEL_139;
  v19 = 0;
  v20 = 0;
  LODWORD(v21) = 0;
  v52 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = v16 + 1;
  v23 = v52 + v16;
  v24 = v16 - v51;
LABEL_34:
  v53 = *(char *)(v23 + v19);
  v21 = (WTF::StringImpl *)(((v53 & 0x7F) << v20) | v21);
  if (v53 < 0)
  {
    while (1)
    {
      v64 = v17 >= 5 ? 5 : v17;
      if (v64 - 1 == v19)
        break;
      *(_QWORD *)a2 = v16 + v19++ + 2;
      v20 += 7;
      if (v24 + v19)
        goto LABEL_34;
LABEL_58:
      __break(1u);
    }
    v16 += v19 + 1;
    goto LABEL_139;
  }
  v16 += v19 + 1;
  if ((_DWORD)v19 == 4 && *(unsigned __int8 *)(v23 + v19) >= 0x10u)
  {
LABEL_139:
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int>(&v102, v16, *(_QWORD *)(a2 + 48), "can't get Type's return count at index ", 40, v101, a6, a7);
    goto LABEL_25;
  }
  if (v21 < 0x3E9)
  {
    v102 = (WTF *)v104;
    v103 = v11;
    if (v21 >= 0x11)
    {
      WTF::tryFastMalloc((WTF *)(16 * (_QWORD)v21), v108);
      if (!v108[0])
      {
        v85 = *(_QWORD *)a2;
        v86 = *(_QWORD *)(a2 + 48);
        v87 = "can't allocate enough memory for Type section's ";
        v88 = "th signature";
        v89 = 49;
        v90 = v101;
        v91 = 13;
LABEL_126:
        JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(v108, v85, v86, v87, v89, v90, v88, v91, a6, a7);
        *(unsigned int **)a1 = v108[0];
        *(_BYTE *)(a1 + 8) = 1;
        goto LABEL_48;
      }
      v102 = (WTF *)v108[0];
      LODWORD(v103) = (_DWORD)v21;
      HIDWORD(v103) = (_DWORD)v21;
    }
    else
    {
      HIDWORD(v103) = (_DWORD)v21;
      if (!(_DWORD)v21)
      {
LABEL_39:
        JSC::Wasm::TypeInformation::typeDefinitionForFunction((uint64_t *)&v102, (uint64_t *)&v105, (uint64_t)a4, a5, v12, a9, a10, v108);
        v54 = v108[0];
        v108[0] = 0;
        v55 = *a4;
        *a4 = v54;
        if (v55)
        {
          do
          {
            v56 = __ldaxr(v55);
            v57 = v56 - 1;
          }
          while (__stlxr(v57, v55));
          if (!v57)
          {
            atomic_store(1u, v55);
            WTF::fastFree((unint64_t)v55, v42, v43, v44, v45, v46, v47, v48);
          }
          v58 = v108[0];
          v108[0] = 0;
          if (v58)
          {
            do
            {
              v59 = __ldaxr(v58);
              v60 = v59 - 1;
            }
            while (__stlxr(v60, v58));
            if (!v60)
            {
              atomic_store(1u, v58);
              WTF::fastFree((unint64_t)v58, v42, v43, v44, v45, v46, v47, v48);
            }
          }
        }
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 8) = 0;
LABEL_48:
        v61 = v102;
        if (v104 != (_BYTE *)v102 && v102 != 0)
        {
          v102 = 0;
          LODWORD(v103) = 0;
          WTF::fastFree((unint64_t)v61, v42, v43, v44, v45, v46, v47, v48);
        }
        goto LABEL_26;
      }
    }
    v65 = 0;
    while (1)
    {
      v66 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16)
        || (v67 = *(_QWORD *)(a2 + 56),
            *(_QWORD *)a2 = v66 + 1,
            v68 = *(char *)(*(_QWORD *)(a2 + 8) + v66),
            (v68 & 0x80000000) != 0)
        || (v69 = v68 | (v68 >> 6 << 7),
            !JSC::Wasm::isValidTypeKind<signed char>((char)(v68 | ((v68 >> 6) << 7)))))
      {
LABEL_125:
        v85 = *(_QWORD *)a2;
        v86 = *(_QWORD *)(a2 + 48);
        v87 = "can't get ";
        v88 = "th Type's return value";
        v89 = 11;
        v90 = v65;
        v91 = 23;
        goto LABEL_126;
      }
      if (!BYTE1(dword_1ECF4C7B0))
      {
        if ((v69 + 29) < 2u)
          goto LABEL_125;
LABEL_76:
        v70 = 0;
        goto LABEL_77;
      }
      v70 = (unsigned int *)(char)v69;
      v71 = (char)v69 + 22;
      if (v71 <= 9 && (((1 << v71) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
      {
        LOBYTE(v69) = -29;
        goto LABEL_77;
      }
      if ((v69 + 29) >= 2u)
        goto LABEL_76;
      LODWORD(v108[0]) = 0;
      if (!WTF::LEBDecoder::decodeInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (int *)v108))
        goto LABEL_125;
      v70 = (unsigned int *)SLODWORD(v108[0]);
      if (((uint64_t)v108[0] & 0x80000000) != 0)
      {
        if ((unint64_t)(SLODWORD(v108[0]) + 22) > 9
          || ((1 << (LOBYTE(v108[0]) + 22)) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
        {
          goto LABEL_125;
        }
      }
      else
      {
        if (LODWORD(v108[0]) >= *(_DWORD *)(v67 + 100))
        {
          if (!*(_BYTE *)(a2 + 32))
            goto LABEL_125;
          v84 = *(_DWORD *)(a2 + 36);
          if (LODWORD(v108[0]) < v84 || LODWORD(v108[0]) >= *(_DWORD *)(a2 + 40))
            goto LABEL_125;
        }
        else if (!*(_BYTE *)(a2 + 32) || (v84 = *(_DWORD *)(a2 + 36), LODWORD(v108[0]) < v84))
        {
          v70 = *(unsigned int **)(*(_QWORD *)(v67 + 88) + 8 * LODWORD(v108[0]));
          goto LABEL_77;
        }
        JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(LODWORD(v108[0]) - v84), v79, v80, v81, v82, v83, v108);
        v70 = v108[0];
        v108[0] = 0;
        if (v70)
        {
          do
          {
            v99 = __ldaxr(v70);
            v100 = v99 - 1;
          }
          while (__stlxr(v100, v70));
          if (!v100)
          {
            atomic_store(1u, v70);
            WTF::fastFree((unint64_t)v70, v92, v93, v94, v95, v96, v97, v98);
          }
        }
      }
LABEL_77:
      if (!JSC::Wasm::isValueType(v69, (uint64_t)v70))
        goto LABEL_125;
      if (v65 >= HIDWORD(v103))
        goto LABEL_149;
      v72 = (_QWORD *)((char *)v102 + 16 * v65);
      *v72 = v69;
      v72[1] = v70;
      if ((WTF::StringImpl *)++v65 == v21)
        goto LABEL_39;
    }
  }
  JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>((int **)&v102, v16, *(_QWORD *)(a2 + 48), "return count of Type at index ", 31, v101, v21, (WTF::StringImpl *)0x3E8, a6, a7);
LABEL_25:
  *(_QWORD *)a1 = v102;
  *(_BYTE *)(a1 + 8) = 1;
LABEL_26:
  v49 = v105;
  if (v10 != v105 && v105 != 0)
  {
    v105 = 0;
    LODWORD(v106) = 0;
    WTF::fastFree((unint64_t)v49, v42, v43, v44, v45, v46, v47, v48);
  }
}

void JSC::Wasm::SectionParser::fail<unsigned int,char const*>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  BOOL v11;
  int *v12;
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  const char *v66;
  int v67;
  int8x16_t *v68;
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v8 = 0;
  v72 = *MEMORY[0x1E0C80C00];
  v9 = a3 + a2;
  do
  {
    v10 = (v9 % 0xA) | 0x30;
    v71[v8-- - 8] = v10;
    v11 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v11);
  if (v8 + 26 >= 27)
    __break(1u);
  if (v8)
  {
    if ((unint64_t)-v8 >> 31)
    {
      __break(0xC471u);
LABEL_36:
      JUMPOUT(0x198E129FCLL);
    }
    v12 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v8));
    v13 = v12 + 5;
    *v12 = 2;
    v12[1] = -(int)v8;
    *((_QWORD *)v12 + 1) = v12 + 5;
    v12[4] = 4;
    if (v8 == -1)
      *v13 = v10;
    else
      memcpy(v13, &v71[v8 - 7], -v8);
  }
  else
  {
    v12 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v68 = (int8x16_t *)off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%u", a4);
  ((void (*)(int8x16_t **))v68[2].i64[1])(&v68);
  v21 = v69;
  if (!v69)
  {
    v64 = 0;
    goto LABEL_14;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v64);
  v21 = v69;
  if (v69 != (WTF *)v71)
LABEL_14:
    WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
  v68 = (int8x16_t *)off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", a5);
  ((void (*)(int8x16_t **))v68[2].i64[1])(&v68);
  v29 = v69;
  if (!v69)
  {
    v63 = 0;
    goto LABEL_19;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v63);
  v29 = v69;
  if (v69 != (WTF *)v71)
LABEL_19:
    WTF::fastFree((unint64_t)v29, v22, v23, v24, v25, v26, v27, v28);
  v68 = (int8x16_t *)"WebAssembly.Module doesn't parse at byte ";
  LODWORD(v69) = 41;
  v66 = ": ";
  v67 = 2;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v65, &v68, (uint64_t)v12, (uint64_t)&v66, (uint64_t)v64, (uint64_t)v63);
  if (!v65)
  {
    __break(0xC471u);
    goto LABEL_36;
  }
  *a1 = v65;
  v37 = v63;
  v63 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  v38 = v64;
  v64 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  if (*v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v30, v31, v32, v33, v34, v35, v36);
    WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
  }
  else
  {
    *v12 -= 2;
  }
}

void JSC::Wasm::SectionParser::parseStructType(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int **a4, uint64_t a5, double a6, float a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  char v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  float v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  _QWORD *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  unsigned __int8 *v40;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  WTF::StringImpl *v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76[2];
  uint64_t v77;
  char v78;
  __int128 v79;
  unsigned int v80;
  uint64_t v81;

  v10 = a3;
  v81 = *MEMORY[0x1E0C80C00];
  v13 = a2[2];
  v14 = *a2;
  v15 = v13 - v14;
  if (v13 <= v14)
    goto LABEL_69;
  v17 = 0;
  v18 = 0;
  LODWORD(v19) = 0;
  v20 = a2[1];
  if (v15 >= 5)
    v15 = 5;
  v21 = v15 - 1;
  *a2 = v14 + 1;
  v22 = v20 + v14;
  v23 = v14 - v13;
  do
  {
    LODWORD(v24) = *(char *)(v22 + v17);
    v19 = (WTF::StringImpl *)(((v24 & 0x7F) << v18) | v19);
    if ((v24 & 0x80000000) == 0)
      goto LABEL_9;
    if (v21 == v17)
    {
      v14 += v17 + 1;
LABEL_69:
      v66 = a2[6];
      v67 = "can't get ";
      v68 = "th struct type's field count";
      v69 = 11;
      v70 = 29;
      goto LABEL_65;
    }
    v24 = v14 + v17 + 2;
    *a2 = v24;
    ++v17;
    v18 += 7;
  }
  while (v23 + v17);
  __break(1u);
LABEL_9:
  v14 += v17 + 1;
  if ((_DWORD)v17 == 4 && v24 >= 0x10u)
    goto LABEL_69;
  if (v19 >= 0x2711)
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>((int **)v76, v14, a2[6], "number of fields for struct type at position ", 46, a3, v19, (WTF::StringImpl *)0x2710, a6, a7);
LABEL_66:
    *(void **)a1 = v76[0];
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v71 = a3;
  v74 = 0;
  v75 = 0;
  if (!(_DWORD)v19)
  {
LABEL_30:
    v38 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
    if (v38 != -1)
    {
      v76[0] = &v78;
      v72 = (WTF::StringImpl *)v76;
      std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v72, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
    }
    v39 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
    v40 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
    if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
    {
      __clrex();
    }
    else if (!__stxr(1u, v40))
    {
      goto LABEL_42;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v40);
LABEL_42:
    v72 = (WTF::StringImpl *)&v74;
    WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::StructParameterTypes>,JSC::Wasm::StructParameterTypes const&,JSC::Wasm::StructParameterTypes const&>(v39, (unsigned __int8 ***)&v72, (uint64_t)&v72, (uint64_t)a4, a5, v10, a9, a10, (uint64_t)v76);
    v49 = *(unsigned int **)v76[0];
    if (*(_QWORD *)v76[0])
    {
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 + 1, v49));
    }
    v51 = __ldxr(v40);
    if (v51 == 1)
    {
      if (!__stlxr(0, v40))
      {
LABEL_49:
        v52 = *a4;
        *a4 = v49;
        if (v52)
        {
          do
          {
            v53 = __ldaxr(v52);
            v54 = v53 - 1;
          }
          while (__stlxr(v54, v52));
          if (!v54)
          {
            atomic_store(1u, v52);
            WTF::fastFree((unint64_t)v52, v42, v43, v44, v45, v46, v47, v48);
          }
        }
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 8) = 0;
        v25 = v74;
        if (!v74)
          return;
        goto LABEL_54;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v40, 0, v43, v44, v45, v46, v47, v48);
    goto LABEL_49;
  }
  WTF::tryFastMalloc((WTF *)(32 * (_QWORD)v19), v76);
  v25 = v76[0];
  if (!v76[0])
  {
    v14 = *a2;
    v66 = a2[6];
    v67 = "can't allocate enough memory for struct fields ";
    v68 = " entries";
    v69 = 48;
    LODWORD(v10) = (_DWORD)v19;
    v70 = 9;
LABEL_65:
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(v76, v14, v66, v67, v69, v10, v68, v70, a6, a7);
    goto LABEL_66;
  }
  LODWORD(v75) = (_DWORD)v19;
  v74 = v76[0];
  bzero(v76[0], 32 * (_QWORD)v19);
  v28 = 0;
  LODWORD(v29) = 0;
  HIDWORD(v75) = (_DWORD)v19;
  v30 = v25;
  while (1)
  {
    v76[0] = 0;
    v76[1] = 0;
    LODWORD(v77) = 0;
    JSC::Wasm::SectionParser::parseStorageType(&v72, (uint64_t)a2, (uint64_t)v76, *(double *)&v26, v27);
    if (v73)
      break;
    v34 = *a2;
    if (*a2 >= (unint64_t)a2[2])
    {
      JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v72, v34, a2[6], v71, (int)v28);
      goto LABEL_38;
    }
    v35 = v34 + 1;
    *a2 = v34 + 1;
    v36 = *(unsigned __int8 *)(a2[1] + v34);
    if (v36 >= 2)
    {
      v63 = 15;
      do
      {
        *((_BYTE *)&v79 + v63--) = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v36 & 0xF];
        v64 = v36 > 0xF;
        v36 >>= 4;
      }
      while (v64);
      if (v63 + 2 < 16)
      {
        v65 = (char *)&v79 + v63 + 1;
      }
      else
      {
        v65 = (char *)&v79 + 14;
        memset((char *)&v79 + 14, 48, v63 - 13);
      }
      v80 = &v80 - (_DWORD)v65;
      JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,WTF::HexNumberBuffer>(&v72, v35, a2[6], "invalid Field's mutability: 0x", 31, &v79, v33, v27);
      goto LABEL_38;
    }
    v26 = v76[0];
    *(_OWORD *)v30 = *(_OWORD *)v76;
    v30[2] = v77;
    *((_BYTE *)v30 + 24) = v36;
    if ((_DWORD)v77 == 1)
    {
      if (LOBYTE(v76[0]) == 248)
      {
        v37 = 1;
        goto LABEL_26;
      }
      if (LOBYTE(v76[0]) == 247)
      {
        v37 = 2;
        goto LABEL_26;
      }
    }
    v37 = 4;
    switch(LOBYTE(v76[0]))
    {
      case 0xEA:
      case 0xEB:
      case 0xEF:
      case 0xF0:
      case 0xFC:
      case 0xFE:
        goto LABEL_25;
      case 0xEC:
      case 0xED:
      case 0xEE:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
        goto LABEL_29;
      case 0xFB:
        v37 = 16;
        break;
      case 0xFD:
      case 0xFF:
        break;
      default:
        if (LOBYTE(v76[0]) - 227 >= 2)
LABEL_29:
          v37 = 0;
        else
LABEL_25:
          v37 = 8;
        break;
    }
LABEL_26:
    v29 = v37 + v29;
    if (HIDWORD(v29))
    {
      JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v72, *a2, a2[6], "struct layout is too big", 25, *(double *)&v26, v27);
      goto LABEL_38;
    }
    v28 = (WTF::StringImpl *)((char *)v28 + 1);
    v30 += 4;
    if (v19 == v28)
      goto LABEL_30;
  }
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v31, v32, (uint64_t)a4, a5, v10, a9, a10);
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v72, *a2, a2[6], "can't get ", 11, (int)v28, "th field Type", 14, v33, v27);
LABEL_38:
  *(_QWORD *)a1 = v72;
  *(_BYTE *)(a1 + 8) = 1;
  if (v25)
  {
LABEL_54:
    v74 = 0;
    LODWORD(v75) = 0;
    WTF::fastFree((unint64_t)v25, v42, v43, v44, v45, v46, v47, v48);
  }
}

void JSC::Wasm::SectionParser::parseArrayType(uint64_t a1, uint64_t *a2, int a3, unsigned int **a4, double a5, float a6)
{
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unsigned __int8 *v24;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  WTF::StringImpl *v54[2];
  uint64_t v55;
  char v56;
  _QWORD v57[3];
  char v58;
  __int128 v59;
  unsigned int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v52 = 0uLL;
  LODWORD(v53) = 0;
  JSC::Wasm::SectionParser::parseStorageType(v54, (uint64_t)a2, (uint64_t)&v52, a5, a6);
  if (LOBYTE(v54[1]))
  {
    if (v54[0])
    {
      if (*(_DWORD *)v54[0] == 2)
      {
        WTF::StringImpl::~StringImpl(v54[0], v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
      }
      else
      {
        *(_DWORD *)v54[0] -= 2;
      }
    }
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(v54, *a2, a2[6], "can't get array's element Type", 31, v17, v18);
    goto LABEL_6;
  }
  v19 = *a2;
  if (*a2 >= (unint64_t)a2[2])
  {
    JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral>(v54, v19, a2[6], a3);
LABEL_6:
    *(WTF::StringImpl **)a1 = v54[0];
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v20 = v19 + 1;
  *a2 = v19 + 1;
  v21 = *(unsigned __int8 *)(a2[1] + v19);
  if (v21 >= 2)
  {
    v47 = 15;
    do
    {
      *((_BYTE *)&v59 + v47--) = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v21 & 0xF];
      v48 = v21 > 0xF;
      v21 >>= 4;
    }
    while (v48);
    if (v47 + 2 < 16)
    {
      v49 = (char *)&v59 + v47 + 1;
    }
    else
    {
      v49 = (char *)&v59 + 14;
      memset((char *)&v59 + 14, 48, v47 - 13);
    }
    v60 = &v60 - (_DWORD)v49;
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,WTF::HexNumberBuffer>(v54, v20, a2[6], "invalid array mutability: 0x", 29, &v59, v17, v18);
    goto LABEL_6;
  }
  v50 = v52;
  v51 = v53;
  v22 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v22 != -1)
  {
    v54[0] = (WTF::StringImpl *)&v58;
    v57[0] = v54;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, v57, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v23 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v24 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v24))
  {
    goto LABEL_15;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v24);
LABEL_15:
  *(_OWORD *)v54 = v50;
  v55 = v51;
  v56 = v21;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::ArrayParameterTypes>,JSC::Wasm::ArrayParameterTypes const&,JSC::Wasm::ArrayParameterTypes const&>(v23, (unsigned __int8 *)v54, (uint64_t)v54, v12, v13, v14, v15, v16, (uint64_t)v57);
  v33 = *(unsigned int **)v57[0];
  if (*(_QWORD *)v57[0])
  {
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
  }
  v35 = __ldxr(v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stlxr(0, v24))
LABEL_21:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v24, 0, v27, v28, v29, v30, v31, v32);
  v36 = *a4;
  *a4 = v33;
  if (v36)
  {
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v36);
      WTF::fastFree((unint64_t)v36, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::SectionParser::parseRecursionGroup(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int **a4, const JSC::Wasm::Type *a5, double a6, float a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  _QWORD *v33;
  unsigned int v34;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t *v40;
  unsigned __int8 *v41;
  void *v43;
  double v44;
  float v45;
  unsigned int *v46;
  unsigned int v47;
  int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  void **v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unsigned int v60;
  void **v61;
  void *v62;
  uint64_t v63;
  int v64;
  WTF *v65;
  unint64_t v66;
  uint64_t *v67;
  unsigned __int8 *v68;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  int v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  char **v83;
  uint64_t v84;
  char *v85;
  char *v86;
  WTF *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  char **v92;
  uint64_t v93;
  char *v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  WTF *i;
  int v107;
  char *v108;
  int v109;
  WTF **v110;
  WTF *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  const JSC::Wasm::TypeDefinition *v117;
  uint64_t v118;
  const JSC::Wasm::Type *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  float v124;
  uint64_t v126;
  unsigned int v127;
  int v128;
  int v129;
  _QWORD *v130;
  int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int v134;
  WTF *v135;
  unint64_t v136;
  uint64_t *v137;
  unsigned __int8 *v138;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int v167;
  unint64_t v168;
  JSC::Wasm::SectionParser ***v169;
  _DWORD *v170;
  unint64_t v171;
  const JSC::Wasm::TypeDefinition *v172;
  uint64_t v173;
  const JSC::Wasm::Type *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  double v178;
  float v179;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  const JSC::Wasm::TypeDefinition *v184;
  uint64_t v185;
  const JSC::Wasm::Type *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  float v191;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unsigned int v196;
  WTF *v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int *v212;
  unsigned int v213;
  unsigned int v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int *v219;
  unsigned int v220;
  unsigned int v221;
  char *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int *v231;
  unsigned int v232;
  unsigned int *v233;
  unsigned int v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  unsigned int v244;
  unsigned int v245;
  unint64_t v246;
  uint64_t v249;
  int v250;
  WTF *v251;
  uint64_t v252;
  WTF *v253;
  int v254;
  WTF *v255;
  char v256;
  char v257;

  v10 = a3;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)a2;
  v14 = v12 - v13;
  if (v12 <= v13)
    goto LABEL_292;
  v15 = 0;
  v16 = 0;
  LODWORD(v17) = 0;
  v18 = *(_QWORD *)(a2 + 8);
  if (v14 >= 5)
    v14 = 5;
  v19 = v14 - 1;
  *(_QWORD *)a2 = v13 + 1;
  v20 = v18 + v13;
  v21 = v13 - v12;
  do
  {
    LODWORD(v22) = *(char *)(v20 + v15);
    v17 = (WTF::StringImpl *)(((v22 & 0x7F) << v16) | v17);
    if ((v22 & 0x80000000) == 0)
      goto LABEL_9;
    if (v19 == v15)
    {
      v13 += v15 + 1;
LABEL_292:
      JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v255, v13, *(_QWORD *)(a2 + 48), "can't get ", 11, a3, "th recursion group's type count", 32, a6, a7);
      goto LABEL_245;
    }
    v22 = v13 + v15 + 2;
    *(_QWORD *)a2 = v22;
    ++v15;
    v16 += 7;
  }
  while (v21 + v15);
  __break(1u);
LABEL_9:
  v13 += v15 + 1;
  if ((_DWORD)v15 == 4 && v22 >= 0x10u)
    goto LABEL_292;
  if (v17 >= 0xF4241)
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>((int **)&v255, v13, *(_QWORD *)(a2 + 48), "number of types for recursion group at position ", 49, a3, v17, (WTF::StringImpl *)0xF4240, a6, a7);
LABEL_245:
    *(_QWORD *)a1 = v255;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v251 = 0;
  v252 = 0;
  if ((_DWORD)v17)
  {
    WTF::tryFastMalloc((WTF *)(8 * v17), &v255);
    if (!v255)
    {
      JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v255, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "can't allocate enough memory for recursion group ", 50, (int)v17, " entries", 9, a6, a7);
      *(_QWORD *)a1 = v255;
      *(_BYTE *)(a1 + 8) = 1;
      goto LABEL_230;
    }
    LODWORD(v252) = (_DWORD)v17;
    v251 = v255;
  }
  v23 = a2 + 32;
  v24 = *(_DWORD *)(*(_QWORD *)(a2 + 56) + 100);
  v249 = *(_QWORD *)(a2 + 32);
  v250 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a2 + 32) = 1;
  *(_DWORD *)(a2 + 36) = v24;
  *(_DWORD *)(a2 + 40) = v24 + (_DWORD)v17;
  if (!(_DWORD)v17)
  {
    v246 = a2 + 32;
    v31 = 0;
    goto LABEL_40;
  }
  v25 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
  {
    v246 = a2 + 32;
    LODWORD(v126) = 0;
    v31 = 0;
LABEL_262:
    v198 = *(_QWORD *)(a2 + 48);
    v199 = "can't get recursion group's ";
    v200 = "th Type's type";
    v201 = 29;
    v202 = v126;
    v203 = 15;
LABEL_263:
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v255, v25, v198, v199, v201, v202, v200, v203, a6, a7);
    goto LABEL_264;
  }
  v26 = v25 + 1;
  *(_QWORD *)a2 = v25 + 1;
  v27 = *(char *)(*(_QWORD *)(a2 + 8) + v25);
  if ((v27 & 0x80000000) != 0)
  {
    v246 = a2 + 32;
    LODWORD(v126) = 0;
    v31 = 0;
LABEL_301:
    v25 = v26;
    goto LABEL_262;
  }
  v28 = v27 | (v27 >> 6 << 7);
  v253 = 0;
  if (v28 <= 0xDEu)
  {
    if (v28 - 207 < 2)
    {
      JSC::Wasm::SectionParser::parseSubtype((uint64_t)&v255, a2, 0, (unsigned int **)&v253, (const JSC::Wasm::Type *)HIDWORD(v252), v28 == 207, a9, a10, a6, a7);
      goto LABEL_27;
    }
    if (v28 == 222)
    {
      JSC::Wasm::SectionParser::parseArrayType((uint64_t)&v255, (uint64_t *)a2, 0, (unsigned int **)&v253, a6, a7);
      goto LABEL_27;
    }
LABEL_165:
    JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,signed char>(&v255, v25 + 1, *(_QWORD *)(a2 + 48), 0, (char)v28);
    goto LABEL_166;
  }
  if (v28 != 223)
  {
    if (v28 == 224)
    {
      JSC::Wasm::SectionParser::parseFunctionType((uint64_t)&v255, a2, 0, (unsigned int **)&v253, a5, a6, a7, v10, a9, a10);
      goto LABEL_27;
    }
    goto LABEL_165;
  }
  JSC::Wasm::SectionParser::parseStructType((uint64_t)&v255, (uint64_t *)a2, 0, (unsigned int **)&v253, (uint64_t)a5, a6, a7, v10, a9, a10);
LABEL_27:
  if (v256)
  {
LABEL_166:
    v31 = 0;
    v35 = 0;
    *(_QWORD *)a1 = v255;
    *(_BYTE *)(a1 + 8) = 1;
LABEL_35:
    v36 = (unsigned int *)v253;
    v253 = 0;
    if (!v36)
      goto LABEL_38;
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v36);
      WTF::fastFree((unint64_t)v36, (void *)v29, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
      if ((v35 & 1) == 0)
        goto LABEL_226;
    }
    else
    {
LABEL_38:
      if (!v35)
        goto LABEL_226;
    }
  }
  else
  {
    if (!v253)
    {
      JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v255, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "can't allocate enough memory for recursion group's ", 52, 0, "th signature", 13, a6, a7);
      goto LABEL_166;
    }
    v255 = v253;
    v32 = HIDWORD(v252);
    if (HIDWORD(v252) == (_DWORD)v252)
    {
      v33 = (_QWORD *)WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v251, HIDWORD(v252) + 1, (unint64_t)&v255);
      v32 = HIDWORD(v252);
      *((_QWORD *)v251 + HIDWORD(v252)) = *v33;
    }
    else
    {
      *((_QWORD *)v251 + HIDWORD(v252)) = v253;
    }
    HIDWORD(v252) = v32 + 1;
    v31 = v253;
    if (v253)
    {
      do
        v34 = __ldaxr((unsigned int *)v31);
      while (__stlxr(v34 + 1, (unsigned int *)v31));
      v35 = 1;
      goto LABEL_35;
    }
  }
  v246 = a2 + 32;
  if ((_DWORD)v17 != 1)
  {
    v126 = 1;
    do
    {
      v25 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
        goto LABEL_262;
      v26 = v25 + 1;
      *(_QWORD *)a2 = v25 + 1;
      v127 = *(char *)(*(_QWORD *)(a2 + 8) + v25);
      if ((v127 & 0x80000000) != 0)
        goto LABEL_301;
      v128 = v127 | (v127 >> 6 << 7);
      v253 = 0;
      if (v128 > 0xDEu)
      {
        if (v128 == 223)
        {
          JSC::Wasm::SectionParser::parseStructType((uint64_t)&v255, (uint64_t *)a2, v126, (unsigned int **)&v253, (uint64_t)a5, a6, a7, v10, a9, a10);
        }
        else
        {
          if (v128 != 224)
            goto LABEL_159;
          JSC::Wasm::SectionParser::parseFunctionType((uint64_t)&v255, a2, v126, (unsigned int **)&v253, a5, a6, a7, v10, a9, a10);
        }
      }
      else if (v128 - 207 >= 2)
      {
        if (v128 != 222)
        {
LABEL_159:
          JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,signed char>(&v255, v25 + 1, *(_QWORD *)(a2 + 48), v126, (char)v128);
LABEL_160:
          v131 = 0;
          *(_QWORD *)a1 = v255;
          *(_BYTE *)(a1 + 8) = 1;
          goto LABEL_153;
        }
        JSC::Wasm::SectionParser::parseArrayType((uint64_t)&v255, (uint64_t *)a2, v126, (unsigned int **)&v253, a6, a7);
      }
      else
      {
        JSC::Wasm::SectionParser::parseSubtype((uint64_t)&v255, a2, v126, (unsigned int **)&v253, (const JSC::Wasm::Type *)HIDWORD(v252), v128 == 207, a9, a10, a6, a7);
      }
      if (v256)
        goto LABEL_160;
      if (!v253)
      {
        JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v255, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "can't allocate enough memory for recursion group's ", 52, v126, "th signature", 13, a6, a7);
        goto LABEL_160;
      }
      v255 = v253;
      v129 = HIDWORD(v252);
      if (HIDWORD(v252) == (_DWORD)v252)
      {
        v130 = (_QWORD *)WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v251, HIDWORD(v252) + 1, (unint64_t)&v255);
        v129 = HIDWORD(v252);
        *((_QWORD *)v251 + HIDWORD(v252)) = *v130;
      }
      else
      {
        *((_QWORD *)v251 + HIDWORD(v252)) = v253;
      }
      HIDWORD(v252) = v129 + 1;
      v131 = 1;
LABEL_153:
      v132 = (unsigned int *)v253;
      v253 = 0;
      if (!v132)
        goto LABEL_156;
      do
      {
        v133 = __ldaxr(v132);
        v134 = v133 - 1;
      }
      while (__stlxr(v134, v132));
      if (!v134)
      {
        atomic_store(1u, v132);
        WTF::fastFree((unint64_t)v132, (void *)v29, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
        if (!v131)
          goto LABEL_265;
      }
      else
      {
LABEL_156:
        if (!v131)
          goto LABEL_265;
      }
      v126 = (v126 + 1);
    }
    while ((_DWORD)v126 != (_DWORD)v17);
  }
LABEL_40:
  v39 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v39 != -1)
  {
    v255 = (WTF *)&v257;
    v253 = (WTF *)&v255;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v253, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v40 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v41 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
    goto LABEL_45;
  }
  if (__stxr(1u, v41))
LABEL_45:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v41);
  v253 = (WTF *)&v251;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::RecursionGroupParameterTypes>,JSC::Wasm::RecursionGroupParameterTypes const&,JSC::Wasm::RecursionGroupParameterTypes const&>(v40, (uint64_t **)&v253, (uint64_t)&v253, (uint64_t)a4, (uint64_t)a5, v10, a9, a10, (uint64_t)&v255);
  v46 = *(unsigned int **)v255;
  if (*(_QWORD *)v255)
  {
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 + 1, v46));
  }
  v48 = __ldxr(v41);
  if (v48 == 1)
  {
    if (!__stlxr(0, v41))
      goto LABEL_53;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v41, 0, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
LABEL_53:
  v49 = *a4;
  *a4 = v46;
  if (v49)
  {
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
    {
      atomic_store(1u, v49);
      WTF::fastFree((unint64_t)v49, v43, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
    }
  }
  v52 = *(_QWORD *)(a2 + 56);
  v53 = *(_DWORD *)(v52 + 96);
  v54 = v53 + v17;
  if (__CFADD__(v53, (_DWORD)v17))
    goto LABEL_247;
  if (v53 >= v54)
    goto LABEL_64;
  v55 = (void **)(v52 + 88);
  v56 = *(void **)(v52 + 88);
  v57 = *(unsigned int *)(v52 + 100);
  if (!WTF::VectorBufferBase<unsigned long long,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(v52 + 88, v54))
  {
LABEL_247:
    if (v17 <= 1)
      v222 = "index";
    else
      v222 = "indices";
    if (v17 <= 1)
      v223 = 6;
    else
      v223 = 8;
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v255, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), (int)v17, " type ", 7, v222, v223, v44, v45);
LABEL_264:
    *(_QWORD *)a1 = v255;
    *(_BYTE *)(a1 + 8) = 1;
LABEL_265:
    v23 = v246;
    goto LABEL_226;
  }
  memcpy(*v55, v56, 8 * v57);
  if (v56)
  {
    if (*v55 == v56)
    {
      *(_QWORD *)(v52 + 88) = 0;
      *(_DWORD *)(v52 + 96) = 0;
    }
    WTF::fastFree((unint64_t)v56, v58, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
  }
LABEL_64:
  v59 = *(_QWORD *)(a2 + 56);
  v60 = *(_DWORD *)(v59 + 280);
  v29 = v60 + v17;
  if (__CFADD__(v60, (_DWORD)v17))
    goto LABEL_254;
  if (v60 >= v29)
    goto LABEL_71;
  v61 = (void **)(v59 + 272);
  v62 = *(void **)(v59 + 272);
  v63 = *(unsigned int *)(v59 + 284);
  if (!WTF::VectorBufferBase<unsigned long long,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(v59 + 272, v29))
  {
LABEL_254:
    if (v17 <= 1)
      v224 = "";
    else
      v224 = "s";
    if (v17 <= 1)
      v225 = 1;
    else
      v225 = 2;
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::ASCIILiteral>(&v255, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), (int)v17, " RTT", 5, v224, v225, v44, v45);
    *(_QWORD *)a1 = v255;
    *(_BYTE *)(a1 + 8) = 1;
    goto LABEL_265;
  }
  memcpy(*v61, v62, 8 * v63);
  if (v62)
  {
    if (*v61 == v62)
    {
      *(_QWORD *)(v59 + 272) = 0;
      *(_DWORD *)(v59 + 280) = 0;
    }
    WTF::fastFree((unint64_t)v62, (void *)v29, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
  }
LABEL_71:
  if (v17 < 2)
  {
    if (!(_DWORD)v17)
    {
      v23 = v246;
      goto LABEL_225;
    }
    for (i = v31; ; i = *v110)
    {
      v107 = *((_DWORD *)i + 8);
      if (v107 == 2)
      {
        if (!*((_BYTE *)i + 16))
          goto LABEL_175;
        goto LABEL_168;
      }
      if (v107 == 1)
      {
        if (!*((_BYTE *)i + 20))
          goto LABEL_175;
        goto LABEL_168;
      }
      if (!v107)
        break;
      v108 = (char *)i + 8;
      if (v107 != 5)
        v108 = 0;
      v109 = *((_DWORD *)v108 + 2);
      v110 = *(WTF ***)v108;
      if (v109)
      {
        v111 = v110[1];
        if (*((_DWORD *)v111 + 8) == 4 && !**((_QWORD **)v111 + 1))
          goto LABEL_168;
      }
    }
    if (!*((_BYTE *)i + 24))
    {
LABEL_175:
      JSC::Wasm::TypeInformation::registerCanonicalRTTForType(v31, v29, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
      v140 = *(_QWORD *)(a2 + 56);
      if (!BYTE2(dword_1ECF4C7B0))
        goto LABEL_176;
      JSC::Wasm::TypeInformation::tryGetCanonicalRTT(v31, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10, (uint64_t)&v255);
      if (v256)
      {
        v231 = (unsigned int *)v255;
        if (v255)
        {
          do
            v232 = __ldaxr(v231);
          while (__stlxr(v232 + 1, v231));
          v253 = (WTF *)v231;
          if (v256)
          {
            v233 = (unsigned int *)v255;
            v255 = 0;
            if (v233)
            {
              do
              {
                v234 = __ldaxr(v233);
                v235 = v234 - 1;
              }
              while (__stlxr(v235, v233));
              if (!v235)
              {
                atomic_store(1u, v233);
                WTF::fastFree((unint64_t)v233, (void *)v29, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
              }
            }
          }
        }
        else
        {
LABEL_176:
          v253 = 0;
        }
        v23 = v246;
        v141 = *(unsigned int *)(v140 + 284);
        if ((_DWORD)v141 == *(_DWORD *)(v140 + 280))
        {
          v142 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v140 + 272), v141 + 1, (unint64_t)&v253);
          v143 = *(unsigned int *)(v140 + 284);
          v144 = *(_QWORD *)(v140 + 272);
          v145 = *(_QWORD *)v142;
          *(_QWORD *)v142 = 0;
          *(_QWORD *)(v144 + 8 * v143) = v145;
          v146 = (unsigned int *)v253;
          *(_DWORD *)(v140 + 284) = v143 + 1;
          v253 = 0;
          if (v146)
          {
            do
            {
              v147 = __ldaxr(v146);
              v148 = v147 - 1;
            }
            while (__stlxr(v148, v146));
            if (!v148)
            {
              atomic_store(1u, v146);
              WTF::fastFree((unint64_t)v146, (void *)v29, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
            }
          }
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v140 + 272) + 8 * v141) = v253;
          *(_DWORD *)(v140 + 284) = v141 + 1;
        }
        if (*((_DWORD *)v31 + 8) != 5 || !*((_DWORD *)v31 + 4))
          goto LABEL_222;
        v183 = JSC::Wasm::TypeDefinition::unroll(*(_QWORD *)(*((_QWORD *)v31 + 1) + 8));
        if (*(_DWORD *)(v183 + 32) != 5 || *(_BYTE *)(v183 + 20) != 0)
        {
          v240 = *(_QWORD *)a2;
          v241 = *(_QWORD *)(a2 + 48);
          v242 = "cannot declare subtype of final supertype";
          v243 = 42;
          goto LABEL_294;
        }
        if ((JSC::Wasm::SectionParser::checkStructuralSubtype(**((JSC::Wasm::SectionParser ***)v31 + 1), (unsigned int **)v183, v184, v185, v186, v187, v188, v189) & 1) != 0)
        {
LABEL_222:
          v193 = *(_QWORD *)(a2 + 56);
          v255 = v31;
          v194 = *(unsigned int *)(v193 + 100);
          if ((_DWORD)v194 == *(_DWORD *)(v193 + 96))
          {
            v215 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v193 + 88), v194 + 1, (unint64_t)&v255);
            v216 = *(unsigned int *)(v193 + 100);
            v217 = *(_QWORD *)(v193 + 88);
            v218 = *(_QWORD *)v215;
            *(_QWORD *)v215 = 0;
            *(_QWORD *)(v217 + 8 * v216) = v218;
            v219 = (unsigned int *)v255;
            *(_DWORD *)(v193 + 100) = v216 + 1;
            v255 = 0;
            if (v219)
            {
              do
              {
                v220 = __ldaxr(v219);
                v221 = v220 - 1;
              }
              while (__stlxr(v221, v219));
              if (!v221)
              {
                atomic_store(1u, v219);
                WTF::fastFree((unint64_t)v219, (void *)v29, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
              }
            }
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v193 + 88) + 8 * v194) = v31;
            *(_DWORD *)(v193 + 100) = v194 + 1;
          }
          v31 = 0;
          goto LABEL_225;
        }
        v240 = *(_QWORD *)a2;
        v241 = *(_QWORD *)(a2 + 48);
        v242 = "structural type is not a subtype of the specified supertype";
        v243 = 60;
LABEL_294:
        JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v255, v240, v241, v242, v243, v190, v191);
        *(_QWORD *)a1 = v255;
        *(_BYTE *)(a1 + 8) = 1;
LABEL_295:
        *(_QWORD *)v23 = v249;
        *(_DWORD *)(v23 + 8) = v250;
        goto LABEL_227;
      }
LABEL_298:
      std::__throw_bad_optional_access[abi:sn180100]();
LABEL_299:
      __break(0xC471u);
      JUMPOUT(0x198E14464);
    }
LABEL_168:
    v135 = (WTF *)*a4;
    v136 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
    if (v136 != -1)
    {
      v255 = (WTF *)&v257;
      v253 = (WTF *)&v255;
      std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v253, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
    }
    v137 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
    v138 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
    if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
    {
      __clrex();
      v23 = v246;
    }
    else
    {
      v23 = v246;
      if (!__stxr(1u, v138))
        goto LABEL_184;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v138);
LABEL_184:
    v253 = v135;
    v254 = 0;
    WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::ProjectionParameterTypes>,JSC::Wasm::ProjectionParameterTypes const&,JSC::Wasm::ProjectionParameterTypes const&>(v137, (uint64_t)&v253, (uint64_t)&v253, (uint64_t)a4, (uint64_t)a5, v10, a9, a10, (uint64_t)&v255);
    v156 = *(unsigned int **)v255;
    if (*(_QWORD *)v255)
    {
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 + 1, v156));
    }
    v158 = __ldxr(v138);
    if (v158 == 1)
    {
      if (!__stlxr(0, v138))
      {
LABEL_191:
        if (!v156)
        {
          v204 = *(_QWORD *)a2;
          v205 = *(_QWORD *)(a2 + 48);
          v206 = "can't allocate enough memory for recursion group's 0th projection";
          v207 = 66;
          goto LABEL_235;
        }
        JSC::Wasm::TypeInformation::registerCanonicalRTTForType((JSC::Wasm::TypeInformation *)v156, v149, v150, v151, v152, v153, v154, v155);
        v159 = *(_QWORD *)(a2 + 56);
        if (!BYTE2(dword_1ECF4C7B0))
          goto LABEL_193;
        JSC::Wasm::TypeInformation::tryGetCanonicalRTT((JSC::Wasm::TypeInformation *)v156, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10, (uint64_t)&v255);
        if (!v256)
          goto LABEL_298;
        v226 = (unsigned int *)v255;
        if (v255)
        {
          do
            v227 = __ldaxr(v226);
          while (__stlxr(v227 + 1, v226));
          v253 = (WTF *)v226;
          if (v256)
          {
            v228 = (unsigned int *)v255;
            v255 = 0;
            if (v228)
            {
              do
              {
                v229 = __ldaxr(v228);
                v230 = v229 - 1;
              }
              while (__stlxr(v230, v228));
              if (!v230)
              {
                atomic_store(1u, v228);
                WTF::fastFree((unint64_t)v228, (void *)v29, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
              }
            }
          }
        }
        else
        {
LABEL_193:
          v253 = 0;
        }
        v160 = *(unsigned int *)(v159 + 284);
        if ((_DWORD)v160 == *(_DWORD *)(v159 + 280))
        {
          v161 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v159 + 272), v160 + 1, (unint64_t)&v253);
          v162 = *(unsigned int *)(v159 + 284);
          v163 = *(_QWORD *)(v159 + 272);
          v164 = *(_QWORD *)v161;
          *(_QWORD *)v161 = 0;
          *(_QWORD *)(v163 + 8 * v162) = v164;
          v165 = (unsigned int *)v253;
          *(_DWORD *)(v159 + 284) = v162 + 1;
          v253 = 0;
          if (v165)
          {
            do
            {
              v166 = __ldaxr(v165);
              v167 = v166 - 1;
            }
            while (__stlxr(v167, v165));
            if (!v167)
            {
              atomic_store(1u, v165);
              WTF::fastFree((unint64_t)v165, (void *)v29, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
            }
          }
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v159 + 272) + 8 * v160) = v253;
          *(_DWORD *)(v159 + 284) = v160 + 1;
        }
        if (*((_DWORD *)v31 + 8) == 5)
        {
          v168 = JSC::Wasm::TypeDefinition::unroll((unint64_t)v156);
          v169 = (JSC::Wasm::SectionParser ***)(v168 + 8);
          v170 = *(_DWORD *)(v168 + 32) == 5 ? (_DWORD *)(v168 + 8) : 0;
          if (v170[2])
          {
            v171 = JSC::Wasm::TypeDefinition::unroll(*(_QWORD *)(*(_QWORD *)v170 + 8));
            if (*(_DWORD *)(v171 + 32) != 5 || *(_BYTE *)(v171 + 20) != 0)
            {
              v236 = *(_QWORD *)a2;
              v237 = *(_QWORD *)(a2 + 48);
              v238 = "cannot declare subtype of final supertype";
              v239 = 42;
LABEL_287:
              JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v255, v236, v237, v238, v239, v178, v179);
              *(_QWORD *)a1 = v255;
              *(_BYTE *)(a1 + 8) = 1;
              do
              {
                v244 = __ldaxr(v156);
                v245 = v244 - 1;
              }
              while (__stlxr(v245, v156));
              if (!v245)
              {
                atomic_store(1u, v156);
                WTF::fastFree((unint64_t)v156, (void *)v29, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
              }
              goto LABEL_295;
            }
            if ((JSC::Wasm::SectionParser::checkStructuralSubtype(**v169, (unsigned int **)v171, v172, v173, v174, v175, v176, v177) & 1) == 0)
            {
              v236 = *(_QWORD *)a2;
              v237 = *(_QWORD *)(a2 + 48);
              v238 = "structural type is not a subtype of the specified supertype";
              v239 = 60;
              goto LABEL_287;
            }
          }
        }
        v181 = *(_QWORD *)(a2 + 56);
        v255 = (WTF *)v156;
        v182 = *(unsigned int *)(v181 + 100);
        if ((_DWORD)v182 == *(_DWORD *)(v181 + 96))
        {
          v208 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v181 + 88), v182 + 1, (unint64_t)&v255);
          v209 = *(unsigned int *)(v181 + 100);
          v210 = *(_QWORD *)(v181 + 88);
          v211 = *(_QWORD *)v208;
          *(_QWORD *)v208 = 0;
          *(_QWORD *)(v210 + 8 * v209) = v211;
          v212 = (unsigned int *)v255;
          *(_DWORD *)(v181 + 100) = v209 + 1;
          v255 = 0;
          if (v212)
          {
            do
            {
              v213 = __ldaxr(v212);
              v214 = v213 - 1;
            }
            while (__stlxr(v214, v212));
            if (!v214)
            {
              atomic_store(1u, v212);
              WTF::fastFree((unint64_t)v212, (void *)v29, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
            }
          }
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v181 + 88) + 8 * v182) = v156;
          *(_DWORD *)(v181 + 100) = v182 + 1;
        }
LABEL_225:
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 8) = 0;
        goto LABEL_226;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v138, 0, v150, v151, v152, v153, v154, v155);
    goto LABEL_191;
  }
  v64 = 0;
  do
  {
    v65 = (WTF *)*a4;
    v66 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
    if (v66 != -1)
    {
      v255 = (WTF *)&v257;
      v253 = (WTF *)&v255;
      std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v253, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
    }
    v67 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
    v68 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
    if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
    {
      __clrex();
    }
    else if (!__stxr(1u, v68))
    {
      goto LABEL_79;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v68);
LABEL_79:
    v253 = v65;
    v254 = v64;
    WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::ProjectionParameterTypes>,JSC::Wasm::ProjectionParameterTypes const&,JSC::Wasm::ProjectionParameterTypes const&>(v67, (uint64_t)&v253, (uint64_t)&v253, (uint64_t)a4, (uint64_t)a5, v10, a9, a10, (uint64_t)&v255);
    v77 = *(unsigned int **)v255;
    if (*(_QWORD *)v255)
    {
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 + 1, v77));
    }
    v79 = __ldxr(v68);
    if (v79 != 1)
    {
      __clrex();
LABEL_85:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v68, 0, v71, v72, v73, v74, v75, v76);
      goto LABEL_86;
    }
    if (__stlxr(0, v68))
      goto LABEL_85;
LABEL_86:
    if (!v77)
    {
      v25 = *(_QWORD *)a2;
      v198 = *(_QWORD *)(a2 + 48);
      v199 = "can't allocate enough memory for recursion group's ";
      v200 = "th projection";
      v201 = 52;
      v202 = v64;
      v203 = 14;
      goto LABEL_263;
    }
    JSC::Wasm::TypeInformation::registerCanonicalRTTForType((JSC::Wasm::TypeInformation *)v77, v70, v71, v72, v73, v74, v75, v76);
    v82 = *(_QWORD *)(a2 + 56);
    if (!BYTE2(dword_1ECF4C7B0))
      goto LABEL_88;
    JSC::Wasm::TypeInformation::tryGetCanonicalRTT((JSC::Wasm::TypeInformation *)v77, v81, (uint64_t)a4, (uint64_t)a5, v10, a9, a10, (uint64_t)&v255);
    if (!v256)
      goto LABEL_298;
    v101 = (unsigned int *)v255;
    if (v255)
    {
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 + 1, v101));
      v253 = (WTF *)v101;
      if (v256)
      {
        v103 = (unsigned int *)v255;
        v255 = 0;
        if (v103)
        {
          do
          {
            v104 = __ldaxr(v103);
            v105 = v104 - 1;
          }
          while (__stlxr(v105, v103));
          if (!v105)
          {
            atomic_store(1u, v103);
            WTF::fastFree((unint64_t)v103, v80, v81, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
          }
        }
      }
    }
    else
    {
LABEL_88:
      v253 = 0;
    }
    v83 = (char **)(v82 + 272);
    v84 = *(unsigned int *)(v82 + 284);
    if ((_DWORD)v84 == *(_DWORD *)(v82 + 280))
    {
      v85 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v83, v84 + 1, (unint64_t)&v253);
      v84 = *(unsigned int *)(v82 + 284);
      v86 = *(char **)(v82 + 272);
      v87 = *(WTF **)v85;
      *(_QWORD *)v85 = 0;
    }
    else
    {
      v86 = *v83;
      v87 = v253;
      v253 = 0;
    }
    *(_QWORD *)&v86[8 * v84] = v87;
    *(_DWORD *)(v82 + 284) = v84 + 1;
    v88 = (unsigned int *)v253;
    v253 = 0;
    if (v88)
    {
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (!v90)
      {
        atomic_store(1u, v88);
        WTF::fastFree((unint64_t)v88, v80, v81, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
      }
    }
    v91 = *(_QWORD *)(a2 + 56);
    v92 = (char **)(v91 + 88);
    v255 = (WTF *)v77;
    v93 = *(unsigned int *)(v91 + 100);
    if ((_DWORD)v93 == *(_DWORD *)(v91 + 96))
    {
      v98 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v92, v93 + 1, (unint64_t)&v255);
      v93 = *(unsigned int *)(v91 + 100);
      v99 = *(_QWORD *)(v91 + 88);
      v100 = *(_QWORD *)v98;
      *(_QWORD *)v98 = 0;
      *(_QWORD *)(v99 + 8 * v93) = v100;
    }
    else
    {
      v94 = *v92;
      v255 = 0;
      *(_QWORD *)&v94[8 * v93] = v77;
    }
    *(_DWORD *)(v91 + 100) = v93 + 1;
    v95 = (unsigned int *)v255;
    v255 = 0;
    if (v95)
    {
      do
      {
        v96 = __ldaxr(v95);
        v97 = v96 - 1;
      }
      while (__stlxr(v97, v95));
      if (!v97)
      {
        atomic_store(1u, v95);
        WTF::fastFree((unint64_t)v95, v80, v81, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
      }
    }
    ++v64;
  }
  while (v64 != (_DWORD)v17);
  v112 = 0;
  v23 = v246;
  while (1)
  {
    v113 = *(_QWORD *)(a2 + 56);
    if (v112 >= *(unsigned int *)(v113 + 100))
      goto LABEL_299;
    v114 = JSC::Wasm::TypeDefinition::unroll(*(_QWORD *)(*(_QWORD *)(v113 + 88) + 8 * v112));
    if (*(_DWORD *)(v114 + 32) == 5)
    {
      v115 = v114;
      if (*(_DWORD *)(v114 + 16))
      {
        v116 = JSC::Wasm::TypeDefinition::unroll(*(_QWORD *)(*(_QWORD *)(v114 + 8) + 8));
        if (*(_DWORD *)(v116 + 32) != 5 || *(_BYTE *)(v116 + 20) != 0)
        {
          v204 = *(_QWORD *)a2;
          v205 = *(_QWORD *)(a2 + 48);
          v206 = "cannot declare subtype of final supertype";
          v207 = 42;
          goto LABEL_235;
        }
        if ((JSC::Wasm::SectionParser::checkStructuralSubtype(**(JSC::Wasm::SectionParser ***)(v115 + 8), (unsigned int **)v116, v117, v118, v119, v120, v121, v122) & 1) == 0)break;
      }
    }
    if (v17 == (WTF::StringImpl *)++v112)
      goto LABEL_225;
  }
  v204 = *(_QWORD *)a2;
  v205 = *(_QWORD *)(a2 + 48);
  v206 = "structural type is not a subtype of the specified supertype";
  v207 = 60;
LABEL_235:
  JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v255, v204, v205, v206, v207, v123, v124);
  *(_QWORD *)a1 = v255;
  *(_BYTE *)(a1 + 8) = 1;
LABEL_226:
  *(_QWORD *)v23 = v249;
  *(_DWORD *)(v23 + 8) = v250;
  if (v31)
  {
    do
    {
LABEL_227:
      v195 = __ldaxr((unsigned int *)v31);
      v196 = v195 - 1;
    }
    while (__stlxr(v196, (unsigned int *)v31));
    if (!v196)
    {
      atomic_store(1u, (unsigned int *)v31);
      WTF::fastFree((unint64_t)v31, (void *)v29, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
    }
  }
LABEL_230:
  v197 = v251;
  if (v251)
  {
    v251 = 0;
    LODWORD(v252) = 0;
    WTF::fastFree((unint64_t)v197, (void *)v29, v30, (uint64_t)a4, (uint64_t)a5, v10, a9, a10);
  }
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned long>(_QWORD *a1, uint64_t a2, uint64_t a3, double a4, float a5)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int *v10;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  const char *v64;
  int v65;
  int8x16_t *v66;
  WTF *v67;
  __int128 v68;
  _BYTE v69[128];
  uint64_t v70;

  v6 = 0;
  v70 = *MEMORY[0x1E0C80C00];
  v7 = a3 + a2;
  do
  {
    v8 = (v7 % 0xA) | 0x30;
    v69[v6-- - 8] = v8;
    v9 = v7 > 9;
    v7 /= 0xAuLL;
  }
  while (v9);
  if (v6 + 26 >= 27)
    __break(1u);
  if (v6)
  {
    if ((unint64_t)-v6 >> 31)
    {
      __break(0xC471u);
LABEL_38:
      JUMPOUT(0x198E1479CLL);
    }
    v10 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v6));
    v11 = v10 + 5;
    *v10 = 2;
    v10[1] = -(int)v6;
    *((_QWORD *)v10 + 1) = v10 + 5;
    v10[4] = 4;
    if (v6 == -1)
      *v11 = v8;
    else
      memcpy(v11, &v69[v6 - 7], -v6);
  }
  else
  {
    v10 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v66 = (int8x16_t *)off_1E3572250;
  v67 = (WTF *)v69;
  v68 = xmmword_199122F80;
  v69[0] = 0;
  WTF::StringImpl::utf8ForCharacters("number of recursion groups exceeded the limit of ", 0x31uLL, (uint64_t)&v64, a5);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v66, "StringView", &v64);
  if (v65 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v65])(&v63, &v64);
  ((void (*)(int8x16_t **))v66[2].i64[1])(&v66);
  ((void (*)(int8x16_t **))v66[2].i64[1])(&v66);
  v19 = v67;
  if (!v67)
  {
    v62 = 0;
    goto LABEL_16;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v67, v68, (uint64_t *)&v62);
  v19 = v67;
  if (v67 != (WTF *)v69)
LABEL_16:
    WTF::fastFree((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
  v66 = (int8x16_t *)off_1E3572250;
  v67 = (WTF *)v69;
  v68 = xmmword_199122F80;
  v69[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v66, "%lu", 1000000);
  ((void (*)(int8x16_t **))v66[2].i64[1])(&v66);
  v27 = v67;
  if (!v67)
  {
    v61 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v67, v68, (uint64_t *)&v61);
  v27 = v67;
  if (v67 != (WTF *)v69)
LABEL_21:
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  v66 = (int8x16_t *)"WebAssembly.Module doesn't parse at byte ";
  LODWORD(v67) = 41;
  v64 = ": ";
  v65 = 2;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v63, &v66, (uint64_t)v10, (uint64_t)&v64, (uint64_t)v62, (uint64_t)v61);
  if (!v63)
  {
    __break(0xC471u);
    goto LABEL_38;
  }
  *a1 = v63;
  v35 = v61;
  v61 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  v36 = v62;
  v62 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  if (*v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v28, v29, v30, v31, v32, v33, v34);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    *v10 -= 2;
  }
}

void JSC::Wasm::SectionParser::parseSubtype(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int **a4, const JSC::Wasm::Type *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  uint64_t *v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v18;
  char v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  unint64_t v56;
  uint64_t *v57;
  unsigned __int8 *v58;
  WTF *v60;
  unint64_t v61;
  uint64_t *v62;
  unsigned __int8 *v63;
  unsigned int *v65;
  unsigned int v66;
  int v67;
  unsigned int *v68;
  unsigned int v69;
  BOOL v70;
  unsigned int *v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  WTF *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  WTF *v82;
  uint64_t v83;
  WTF *v84;
  WTF **v85;
  WTF *v86;
  char v87;
  WTF *v88;
  char v89;
  char v90;

  v11 = (uint64_t *)a2;
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)a2;
  v15 = v13 - *(_QWORD *)a2;
  if (v13 <= *(_QWORD *)a2)
  {
    a2 = *(_QWORD *)a2;
  }
  else
  {
    v16 = a6;
    v18 = 0;
    v19 = 0;
    LODWORD(v20) = 0;
    v21 = *(_QWORD *)(a2 + 8);
    v22 = 5;
    if (v15 < 5)
      v22 = v13 - *(_QWORD *)a2;
    v23 = v22 - 1;
    *(_QWORD *)a2 = v14 + 1;
    while (1)
    {
      v24 = *(char *)(v21 + v14 + v18);
      v20 = (WTF::StringImpl *)(((v24 & 0x7F) << v19) | v20);
      if ((v24 & 0x80000000) == 0)
        break;
      if (v23 == v18)
      {
        a2 = v14 + v18 + 1;
        goto LABEL_89;
      }
      *(_QWORD *)a2 = v14 + v18++ + 2;
      v19 += 7;
      if (v15 == v18)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
    }
    a2 = v14 + v18 + 1;
    if ((_DWORD)v18 != 4 || *(unsigned __int8 *)(v21 + v14 + v18) < 0x10u)
    {
      if (v20 >= 2)
      {
        JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>((int **)&v88, a2, v11[6], "number of supertypes for subtype at position ", 46, a3, v20, (WTF::StringImpl *)1, a9, a10);
        *(_QWORD *)a1 = v88;
        *(_BYTE *)(a1 + 8) = 1;
        return;
      }
      if ((_DWORD)v20 == 1)
      {
        if (v13 <= a2)
          goto LABEL_91;
        v25 = 0;
        v26 = 0;
        LODWORD(v27) = 0;
        v28 = ~v18 + v15;
        if (v28 >= 5)
          v28 = 5;
        v29 = v28 - 1;
        *v11 = v14 + v18 + 2;
        v30 = v21 + v14;
        while (1)
        {
          v31 = *(char *)(v30 + v25 + v18 + 1);
          a2 = (v31 & 0x7F) << v26;
          v27 = a2 | v27;
          if ((v31 & 0x80000000) == 0)
            break;
          if (v29 == v25)
          {
            a2 = v14 + v18 + v25 + 2;
            goto LABEL_91;
          }
          *v11 = v14 + v18 + v25 + 3;
          v32 = v14 - v13 + v18 + v25++;
          v26 += 7;
          if (v32 == -2)
            goto LABEL_19;
        }
        a2 = v14 + v18 + v25 + 2;
        if ((_DWORD)v25 == 4 && *(unsigned __int8 *)(v30 + v25 + v18 + 1) >= 0x10u)
        {
LABEL_91:
          v79 = v11[6];
          v80 = "can't get subtype's supertype index";
          v81 = 36;
LABEL_99:
          JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v88, a2, v79, v80, v81, a9, a10);
          goto LABEL_100;
        }
        v34 = v11[7];
        v35 = *(unsigned int *)(v34 + 100);
        if (v35 + (unint64_t)a5 <= v27)
        {
          v79 = v11[6];
          v80 = "supertype index is a forward reference";
          v81 = 39;
          goto LABEL_99;
        }
        if (v27 >= v35)
        {
          JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(v27 - v35), (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (unsigned int **)&v88);
          v33 = (unsigned int *)v88;
          v88 = 0;
          if (v33)
          {
            do
            {
              v39 = __ldaxr(v33);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v33));
            if (!v40)
            {
              atomic_store(1u, v33);
              WTF::fastFree((unint64_t)v33, v36, v37, v38, (uint64_t)a5, a6, a7, a8);
            }
          }
          a2 = *v11;
          v13 = v11[2];
        }
        else
        {
          v33 = *(unsigned int **)(*(_QWORD *)(v34 + 88) + 8 * v27);
        }
      }
      else
      {
LABEL_20:
        v33 = 0;
      }
      if (a2 < v13)
      {
        *v11 = a2 + 1;
        v41 = *(char *)(v11[1] + a2);
        if ((v41 & 0x80000000) == 0)
        {
          v42 = v41 | (v41 >> 6 << 7);
          v84 = 0;
          switch(v42)
          {
            case 0xDEu:
              JSC::Wasm::SectionParser::parseArrayType((uint64_t)&v88, v11, a3, (unsigned int **)&v84, a9, a10);
              break;
            case 0xDFu:
              JSC::Wasm::SectionParser::parseStructType((uint64_t)&v88, v11, a3, (unsigned int **)&v84, (uint64_t)a5, a9, a10, a6, a7, a8);
              break;
            case 0xE0u:
              JSC::Wasm::SectionParser::parseFunctionType((uint64_t)&v88, (uint64_t)v11, a3, (unsigned int **)&v84, a5, a9, a10, a6, a7, a8);
              break;
            default:
              JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,signed char>(&v88, a2 + 1, v11[6], "invalid structural type definition for subtype ", 48, (char)v42, a9, a10);
              goto LABEL_48;
          }
          if (!v89)
          {
            if (!(_DWORD)v20 && v16)
            {
              WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>::operator=(a4, (unsigned int **)&v84, v44, v45, v46, v47, v48, v49);
LABEL_80:
              *(_BYTE *)a1 = 0;
              *(_BYTE *)(a1 + 8) = 0;
LABEL_81:
              v76 = (unsigned int *)v84;
              v84 = 0;
              if (v76)
              {
                do
                {
                  v77 = __ldaxr(v76);
                  v78 = v77 - 1;
                }
                while (__stlxr(v78, v76));
                if (!v78)
                {
                  atomic_store(1u, v76);
                  WTF::fastFree((unint64_t)v76, v43, v44, v45, v46, v47, v48, v49);
                }
              }
              return;
            }
            if ((_DWORD)v20)
            {
              v82 = (WTF *)WTF::fastMalloc((WTF *)8);
              *(_QWORD *)v82 = v33;
              v83 = 0x100000001;
              v55 = v84;
              v56 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
              if (v56 != -1)
              {
                v88 = (WTF *)&v90;
                v85 = &v88;
                std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v85, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
              }
              v57 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
              v58 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
              if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
              {
                __clrex();
              }
              else if (!__stxr(1u, v58))
              {
                goto LABEL_55;
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v58);
LABEL_55:
              v85 = &v82;
              v86 = v55;
              v87 = v16;
              WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::SubtypeParameterTypes>,JSC::Wasm::SubtypeParameterTypes const&,JSC::Wasm::SubtypeParameterTypes const&>(v57, &v85, (uint64_t)&v85, v50, v51, v52, v53, v54, (uint64_t)&v88);
              v65 = *(unsigned int **)v88;
              if (*(_QWORD *)v88)
              {
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 + 1, v65));
              }
              v67 = __ldxr(v58);
              if (v67 == 1)
              {
                if (!__stlxr(0, v58))
                {
LABEL_62:
                  v68 = *a4;
                  *a4 = v65;
                  if (v68)
                  {
                    do
                    {
                      v69 = __ldaxr(v68);
                      v70 = --v69 == 0;
                    }
                    while (__stlxr(v69, v68));
                    goto LABEL_76;
                  }
                  goto LABEL_78;
                }
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v58, 0, v44, v45, v46, v47, v48, v49);
              goto LABEL_62;
            }
            v82 = 0;
            v83 = 0;
            v60 = v84;
            v61 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
            if (v61 != -1)
            {
              v88 = (WTF *)&v90;
              v85 = &v88;
              std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v85, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
            }
            v62 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
            v63 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
            if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
            {
              __clrex();
            }
            else if (!__stxr(1u, v63))
            {
              goto LABEL_67;
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v63);
LABEL_67:
            v85 = &v82;
            v86 = v60;
            v87 = v16;
            WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::SubtypeParameterTypes>,JSC::Wasm::SubtypeParameterTypes const&,JSC::Wasm::SubtypeParameterTypes const&>(v62, &v85, (uint64_t)&v85, v45, v46, v47, v48, v49, (uint64_t)&v88);
            v71 = *(unsigned int **)v88;
            if (*(_QWORD *)v88)
            {
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 + 1, v71));
            }
            v73 = __ldxr(v63);
            if (v73 == 1)
            {
              if (!__stlxr(0, v63))
              {
LABEL_74:
                v68 = *a4;
                *a4 = v71;
                if (v68)
                {
                  do
                  {
                    v74 = __ldaxr(v68);
                    v70 = --v74 == 0;
                  }
                  while (__stlxr(v74, v68));
LABEL_76:
                  if (v70)
                  {
                    atomic_store(1u, v68);
                    WTF::fastFree((unint64_t)v68, v43, v44, v45, v46, v47, v48, v49);
                  }
                }
LABEL_78:
                v75 = v82;
                if (v82)
                {
                  v82 = 0;
                  LODWORD(v83) = 0;
                  WTF::fastFree((unint64_t)v75, v43, v44, v45, v46, v47, v48, v49);
                }
                goto LABEL_80;
              }
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v63, 0, v44, v45, v46, v47, v48, v49);
            goto LABEL_74;
          }
LABEL_48:
          *(_QWORD *)a1 = v88;
          *(_BYTE *)(a1 + 8) = 1;
          goto LABEL_81;
        }
        ++a2;
      }
      v79 = v11[6];
      v80 = "can't get subtype's underlying Type's type";
      v81 = 43;
      goto LABEL_99;
    }
  }
LABEL_89:
  JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v88, a2, v11[6], "can't get ", 11, a3, "th subtype's supertype count", 29, a9, a10);
LABEL_100:
  *(_QWORD *)a1 = v88;
  *(_BYTE *)(a1 + 8) = 1;
}

void JSC::Wasm::SectionParser::fail<unsigned int,char const*,signed char>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  BOOL v11;
  int *v12;
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  int *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  const char *v87;
  int v88;
  int *v89;
  const char *v90;
  WTF *v91;
  __int128 v92;
  _BYTE v93[128];
  uint64_t v94;

  v8 = 0;
  v94 = *MEMORY[0x1E0C80C00];
  v9 = a3 + a2;
  do
  {
    v10 = (v9 % 0xA) | 0x30;
    v93[v8-- - 8] = v10;
    v11 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v11);
  if (v8 + 26 >= 27)
    __break(1u);
  if (v8)
  {
    if ((unint64_t)-v8 >> 31)
    {
      __break(0xC471u);
LABEL_45:
      JUMPOUT(0x198E15174);
    }
    v12 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v8));
    v13 = v12 + 5;
    *v12 = 2;
    v12[1] = -(int)v8;
    *((_QWORD *)v12 + 1) = v12 + 5;
    v12[4] = 4;
    if (v8 == -1)
      *v13 = v10;
    else
      memcpy(v13, &v93[v8 - 7], -v8);
  }
  else
  {
    v12 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v90 = (const char *)off_1E3572250;
  v91 = (WTF *)v93;
  v92 = xmmword_199122F80;
  v93[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v90, "%u", a4);
  (*((void (**)(const char **))v90 + 5))(&v90);
  v21 = v91;
  if (!v91)
  {
    v82 = 0;
    goto LABEL_14;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v91, v92, (uint64_t *)&v82);
  v21 = v91;
  if (v91 != (WTF *)v93)
LABEL_14:
    WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
  v90 = (const char *)off_1E3572250;
  v91 = (WTF *)v93;
  v92 = xmmword_199122F80;
  v93[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v90, "%s", "th Type is non-Func, non-Struct, and non-Array ");
  (*((void (**)(const char **))v90 + 5))(&v90);
  v29 = v91;
  if (!v91)
  {
    v81 = 0;
    goto LABEL_19;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v91, v92, (uint64_t *)&v81);
  v29 = v91;
  if (v91 != (WTF *)v93)
LABEL_19:
    WTF::fastFree((unint64_t)v29, v22, v23, v24, v25, v26, v27, v28);
  v90 = (const char *)off_1E3572250;
  v91 = (WTF *)v93;
  v92 = xmmword_199122F80;
  v93[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v90, "%d", a5);
  (*((void (**)(const char **))v90 + 5))(&v90);
  v37 = v91;
  if (!v91)
  {
    v80 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v91, v92, (uint64_t *)&v80);
  v37 = v91;
  if (v91 != (WTF *)v93)
LABEL_24:
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  v89 = v12;
  v90 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v91) = 41;
  v88 = 2;
  v86 = v82;
  v87 = ": ";
  v84 = v80;
  v85 = v81;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v90, (uint64_t *)&v89, (uint64_t)&v87, (uint64_t *)&v86, (uint64_t *)&v85, (uint64_t *)&v84, &v83);
  if (!v83)
  {
    __break(0xC471u);
    goto LABEL_45;
  }
  *a1 = v83;
  v83 = 0;
  v45 = v80;
  v80 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl(v45, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v45 -= 2;
    }
  }
  v46 = v81;
  v81 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = v82;
  v82 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  if (*v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v38, v39, v40, v41, v42, v43, v44);
    WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
  }
  else
  {
    *v12 -= 2;
  }
}

void JSC::Wasm::SectionParser::checkSubtypeValidity(JSC::Wasm::SectionParser *this, const JSC::Wasm::TypeDefinition *a2, uint64_t a3)
{
  JSC::Wasm::SectionParser ***v4;
  _DWORD *v5;
  unint64_t v7;
  const JSC::Wasm::TypeDefinition *v8;
  uint64_t v9;
  const JSC::Wasm::Type *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  float v15;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (JSC::Wasm::SectionParser ***)(a3 + 8);
  if (*(_DWORD *)(a3 + 32) == 5)
    v5 = (_DWORD *)(a3 + 8);
  else
    v5 = 0;
  if (v5[2])
  {
    v7 = JSC::Wasm::TypeDefinition::unroll(*(_QWORD *)(*(_QWORD *)v5 + 8));
    if (*(_DWORD *)(v7 + 32) != 5 || *(_BYTE *)(v7 + 20) != 0)
    {
      v17 = *(_QWORD *)a2;
      v18 = *((_QWORD *)a2 + 6);
      v19 = "cannot declare subtype of final supertype";
      v20 = 42;
LABEL_14:
      JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v21, v17, v18, v19, v20, v14, v15);
      *(_QWORD *)this = v21;
      *((_BYTE *)this + 8) = 1;
      return;
    }
    if ((JSC::Wasm::SectionParser::checkStructuralSubtype(**v4, (unsigned int **)v7, v8, v9, v10, v11, v12, v13) & 1) == 0)
    {
      v17 = *(_QWORD *)a2;
      v18 = *((_QWORD *)a2 + 6);
      v19 = "structural type is not a subtype of the specified supertype";
      v20 = 60;
      goto LABEL_14;
    }
  }
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
}

void JSC::Wasm::SectionParser::parseImport(JSC::Wasm::SectionParser *this, uint64_t *a2)
{
  double v4;
  float v5;
  int v6;
  _DWORD *v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  const void *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  const void *v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  double v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 v61;
  __int128 v62;
  int v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  unint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  JSC::Wasm::SectionParser *v94;
  void *v95;
  int v96;
  int v97;
  void *v98;
  int v99;
  int v100;
  void *v101;
  int v102;
  int v103;
  void *v104;
  int v105;
  int v106;
  uint64_t v107;
  char v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  void *v112;
  int v113;
  int v114;
  void *v115;
  int v116;
  int v117;
  void *v118;
  int v119;
  int v120;
  void *v121;
  int v122;
  int v123;
  void *v124;
  int v125;
  int v126;
  void *v127;
  int v128;
  int v129;
  void *v130;
  int v131;
  int v132;
  void *v133;
  int v134;
  int v135;
  void *v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141[3];

  v141[0] = 0;
  if (!WTF::LEBDecoder::decodeUInt32(a2[1], a2[2], a2, v141))
  {
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v109, *a2, a2[6], "can't get Import section's count", 33, v4, v5);
LABEL_130:
    *(_QWORD *)this = v109;
    *((_BYTE *)this + 8) = 1;
    return;
  }
  v6 = v141[0];
  if (v141[0] > 0x186A0)
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v109, *a2, a2[6], "Import section's count is too big ", 35, v141[0], " maximum ", 10, v4, v5, 100000);
    goto LABEL_130;
  }
  v7 = (_DWORD *)a2[7];
  if (v7[54])
  {
    __break(0xC471u);
    JUMPOUT(0x198E15C38);
  }
  if (v7[4])
  {
    __break(0xC471u);
    JUMPOUT(0x198E15C58);
  }
  if (v7[8])
  {
    __break(0xC471u);
    JUMPOUT(0x198E15C78);
  }
  if (v7[16])
  {
    __break(0xC471u);
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }
  v94 = this;
  if (!v141[0])
  {
LABEL_67:
    *(_DWORD *)(a2[7] + 224) = *(_DWORD *)(a2[7] + 220);
    *(_BYTE *)v94 = 0;
    *((_BYTE *)v94 + 8) = 0;
    return;
  }
  v8 = WTF::VectorBufferBase<JSC::Wasm::GlobalInformation,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>((uint64_t)(v7 + 52), v141[0]);
  v6 = v141[0];
  if ((v8 & 1) == 0)
  {
LABEL_136:
    v87 = *a2;
    v88 = a2[6];
    v89 = " globals";
LABEL_138:
    v90 = 9;
LABEL_139:
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v109, v87, v88, "can't allocate enough memory for ", 34, v6, v89, v90, v4, v5);
    *(_QWORD *)v94 = v109;
    *((_BYTE *)v94 + 8) = 1;
    return;
  }
  if (!v141[0])
    goto LABEL_67;
  v9 = WTF::VectorBufferBase<JSC::Wasm::Import,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(a2[7] + 8, v141[0]);
  v6 = v141[0];
  if ((v9 & 1) == 0)
  {
    v87 = *a2;
    v88 = a2[6];
    v89 = " imports";
    goto LABEL_138;
  }
  if (!v141[0])
    goto LABEL_67;
  v10 = WTF::VectorBufferBase<unsigned long long,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(a2[7] + 24, v141[0]);
  v6 = v141[0];
  if ((v10 & 1) == 0)
  {
    v87 = *a2;
    v88 = a2[6];
    v89 = " import function signatures";
    v90 = 28;
    goto LABEL_139;
  }
  if (!v141[0])
    goto LABEL_67;
  v11 = WTF::VectorBufferBase<unsigned long long,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(a2[7] + 56, v141[0]);
  v6 = v141[0];
  if ((v11 & 1) == 0)
  {
    v87 = *a2;
    v88 = a2[6];
    v89 = " import exception signatures";
    v90 = 29;
    goto LABEL_139;
  }
  if (!v141[0])
    goto LABEL_67;
  v12 = 0;
  while (1)
  {
    v140 = 0;
    v138 = 0;
    v139 = 0;
    v136 = 0;
    v137 = 0;
    if (!WTF::LEBDecoder::decodeUInt32(a2[1], a2[2], a2, (_DWORD *)&v140 + 1))
    {
      JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v109, *a2, a2[6], "can't get ", 11, v12, "th Import's module name length", 31, v4, v5);
      goto LABEL_81;
    }
    v13 = HIDWORD(v140);
    if (!HIDWORD(v140))
    {
      v22 = 0;
      goto LABEL_31;
    }
    v14 = a2[2];
    v15 = *a2;
    v16 = v14 >= HIDWORD(v140);
    v17 = v14 - HIDWORD(v140);
    if (!v16)
      goto LABEL_80;
    if (HIDWORD(v140) > 0x186A0)
      goto LABEL_80;
    if (v15 > v17)
      goto LABEL_80;
    v18 = WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>((uint64_t)&v138, (WTF *)HIDWORD(v140));
    v15 = *a2;
    if (!v18)
      goto LABEL_80;
    v19 = a2[2];
    v16 = v19 >= v15;
    v20 = v19 - v15;
    if (!v16 || v20 < v13)
      goto LABEL_135;
    v21 = (const void *)(a2[1] + v15);
    WTF::Unicode::checkUTF8((uint64_t)v21, v13, (uint64_t)&v109);
    if (*((_QWORD *)&v109 + 1) != v13)
      break;
    if (v139 < v13)
      WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v138, (WTF *)v13);
    HIDWORD(v139) = v13;
    v22 = v138;
    memcpy(v138, v21, v13);
    *a2 += v13;
LABEL_31:
    if (!WTF::LEBDecoder::decodeUInt32(a2[1], a2[2], a2, &v140))
    {
      v133 = 0;
      v134 = 0;
      v135 = v13;
      if ((_DWORD)v13)
      {
        v29 = (void *)WTF::fastMalloc((WTF *)v13);
        v134 = v13;
        v133 = v29;
        memcpy(v29, v22, v13);
      }
      else
      {
        v29 = 0;
      }
      JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>(&v109, *a2, a2[6], v12, "th Import's field name length in module '", 42, (uint64_t)&v133, v4, v5);
      *(_QWORD *)v94 = v109;
      *((_BYTE *)v94 + 8) = 1;
      if (!v29)
        goto LABEL_76;
LABEL_75:
      WTF::fastFree((unint64_t)v29, v65, v66, v67, v68, v69, v70, v71);
      goto LABEL_76;
    }
    v23 = v140;
    if ((_DWORD)v140)
    {
      v24 = a2[2];
      v16 = v24 >= v140;
      v25 = v24 - v140;
      if (!v16
        || v140 > 0x186A0
        || *a2 > v25
        || !WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>((uint64_t)&v136, (WTF *)v140))
      {
LABEL_68:
        v63 = HIDWORD(v140);
        v130 = 0;
        v131 = 0;
        v132 = v13;
        if ((_DWORD)v13)
        {
          v64 = (void *)WTF::fastMalloc((WTF *)v13);
          v131 = v13;
          v130 = v64;
          memcpy(v64, v22, v13);
        }
        else
        {
          v64 = 0;
        }
        JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>(&v109, *a2, a2[6], v12, v63, (uint64_t)&v130, v4, v5);
        *(_QWORD *)v94 = v109;
        *((_BYTE *)v94 + 8) = 1;
        if (v64)
        {
          v130 = 0;
          v131 = 0;
          WTF::fastFree((unint64_t)v64, v65, v66, v67, v68, v69, v70, v71);
        }
        v29 = v136;
        goto LABEL_73;
      }
      v26 = a2[2];
      v16 = v26 >= *a2;
      v27 = v26 - *a2;
      if (!v16 || v27 < v23)
        goto LABEL_135;
      v28 = (const void *)(a2[1] + *a2);
      WTF::Unicode::checkUTF8((uint64_t)v28, v23, (uint64_t)&v109);
      if (*((_QWORD *)&v109 + 1) != v23)
        goto LABEL_68;
      if (v137 < v23)
        WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v136, (WTF *)v23);
      HIDWORD(v137) = v23;
      v29 = v136;
      memcpy(v136, v28, v23);
      v30 = *a2 + v23;
      *a2 = v30;
    }
    else
    {
      v29 = 0;
      v30 = *a2;
    }
    v31 = a2[2];
    if (v30 >= v31 || (v32 = v30 + 1, *a2 = v30 + 1, v33 = a2[1], v34 = *(unsigned __int8 *)(v33 + v30), v34 >= 5))
    {
      v127 = 0;
      v128 = 0;
      v129 = v13;
      if ((_DWORD)v13)
      {
        v72 = (void *)WTF::fastMalloc((WTF *)v13);
        v128 = v13;
        v127 = v72;
        memcpy(v72, v22, v13);
      }
      else
      {
        v72 = 0;
      }
      v124 = 0;
      v125 = 0;
      v126 = v23;
      if ((_DWORD)v23)
      {
        v73 = (void *)WTF::fastMalloc((WTF *)v23);
        v125 = v23;
        v124 = v73;
        memcpy(v73, v29, v23);
      }
      else
      {
        v73 = 0;
      }
      JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>(&v109, *a2, a2[6], v12, "th Import's kind in module '", 29, (uint64_t)&v127, (uint64_t)&v124, v4, v5);
      *(_QWORD *)v94 = v109;
      *((_BYTE *)v94 + 8) = 1;
      if (v73)
      {
        v124 = 0;
        v125 = 0;
        WTF::fastFree((unint64_t)v73, v65, v66, v67, v68, v69, v70, v71);
      }
      if (v72)
      {
        v127 = 0;
        v128 = 0;
        goto LABEL_91;
      }
LABEL_73:
      if (!v29)
        goto LABEL_76;
      v136 = 0;
      LODWORD(v137) = 0;
      goto LABEL_75;
    }
    if (!*(_BYTE *)(v33 + v30))
    {
      LODWORD(v107) = 0;
      if (WTF::LEBDecoder::decodeUInt32(v33, v31, a2, &v107))
      {
        v37 = v107;
        v38 = a2[7];
        v39 = *(unsigned int *)(v38 + 100);
        if (v107 < v39)
        {
          *(_QWORD *)&v109 = 0;
          v40 = *(_QWORD *)(*(_QWORD *)(v38 + 88) + 8 * v107);
          *(_QWORD *)&v109 = v40;
          v41 = *(unsigned int *)(v38 + 36);
          if ((_DWORD)v41 == *(_DWORD *)(v38 + 32))
          {
            WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long &>(v38 + 24, (unint64_t)&v109);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v38 + 24) + 8 * v41) = v40;
            *(_DWORD *)(v38 + 36) = v41 + 1;
          }
          goto LABEL_52;
        }
        v115 = 0;
        v116 = 0;
        v117 = v13;
        if ((_DWORD)v13)
        {
          v83 = (void *)WTF::fastMalloc((WTF *)v13);
          v116 = v13;
          v115 = v83;
          memcpy(v83, v22, v13);
        }
        else
        {
          v83 = 0;
        }
        v112 = 0;
        v113 = 0;
        v114 = v23;
        if ((_DWORD)v23)
        {
          v84 = (void *)WTF::fastMalloc((WTF *)v23);
          v113 = v23;
          v112 = v84;
          memcpy(v84, v29, v23);
        }
        else
        {
          v84 = 0;
        }
        JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>((int **)&v109, (WTF::AtomStringImpl *)*a2, a2[6], (uint64_t)"invalid function signature for ", 32, v12, v37, v39, v35, v36, (WTF::StringImpl *)&v115, (uint64_t)&v112);
        *(_QWORD *)v94 = v109;
        *((_BYTE *)v94 + 8) = 1;
        if (v84)
        {
          v112 = 0;
          v113 = 0;
          WTF::fastFree((unint64_t)v84, v65, v66, v67, v68, v69, v70, v71);
        }
        if (!v83)
          goto LABEL_73;
        v115 = 0;
        v116 = 0;
        goto LABEL_124;
      }
      v121 = 0;
      v122 = 0;
      v123 = v13;
      if ((_DWORD)v13)
      {
        v72 = (void *)WTF::fastMalloc((WTF *)v13);
        v122 = v13;
        v121 = v72;
        memcpy(v72, v22, v13);
      }
      else
      {
        v72 = 0;
      }
      v118 = 0;
      v119 = 0;
      v120 = v23;
      if ((_DWORD)v23)
      {
        v82 = (void *)WTF::fastMalloc((WTF *)v23);
        v119 = v23;
        v118 = v82;
        memcpy(v82, v29, v23);
      }
      else
      {
        v82 = 0;
      }
      JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>(&v109, *a2, a2[6], v12, "th Import's function signature in module '", 43, (uint64_t)&v121, (uint64_t)&v118, v35, v36);
      *(_QWORD *)v94 = v109;
      *((_BYTE *)v94 + 8) = 1;
      if (v82)
      {
        v118 = 0;
        v119 = 0;
        WTF::fastFree((unint64_t)v82, v65, v66, v67, v68, v69, v70, v71);
      }
      if (!v72)
        goto LABEL_73;
      v121 = 0;
      v122 = 0;
LABEL_91:
      v74 = (unint64_t)v72;
LABEL_92:
      WTF::fastFree(v74, v65, v66, v67, v68, v69, v70, v71);
      goto LABEL_73;
    }
    switch(*(_BYTE *)(v33 + v30))
    {
      case 1:
        LODWORD(v41) = *(_DWORD *)(a2[7] + 204);
        JSC::Wasm::SectionParser::parseTableHelper((JSC::Wasm::SectionParser *)&v109, (uint64_t)a2, 1, v4, v5);
        if (BYTE8(v109))
          goto LABEL_142;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v109, v52, v53, v54, v55, v56, v57, v58);
        goto LABEL_52;
      case 2:
        JSC::Wasm::SectionParser::parseMemoryHelper((JSC::Wasm::SectionParser *)&v109, a2, 1, v4, v5);
        if (!BYTE8(v109))
        {
          std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v109, v52, v53, v54, v55, v56, v57, v58);
LABEL_66:
          LODWORD(v41) = 0;
          goto LABEL_52;
        }
LABEL_142:
        v91 = v109;
        *(_QWORD *)&v109 = 0;
        *(_QWORD *)v94 = v91;
        *((_BYTE *)v94 + 8) = 1;
        v86 = (uint64_t *)&v109;
        goto LABEL_127;
      case 3:
        WORD4(v110) = 0;
        v111 = 0uLL;
        JSC::Wasm::SectionParser::parseGlobalType(&v107, (uint64_t)a2, (uint64_t)&v109, v4, v5);
        if (!v108)
        {
          std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v107, v52, v53, v54, v55, v56, v57, v58);
          if (v109 == 1)
            BYTE9(v110) = v109;
          v59 = a2[7];
          LODWORD(v41) = *(_DWORD *)(v59 + 220);
          if ((_DWORD)v41 == *(_DWORD *)(v59 + 216))
          {
            WTF::Vector<JSC::Wasm::GlobalInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::GlobalInformation>(v59 + 208, (unint64_t)&v109);
          }
          else
          {
            v60 = (_OWORD *)(*(_QWORD *)(v59 + 208) + 48 * v41);
            v61 = v109;
            v62 = v111;
            v60[1] = v110;
            v60[2] = v62;
            *v60 = v61;
            ++*(_DWORD *)(v59 + 220);
          }
          goto LABEL_52;
        }
        v85 = v107;
        v107 = 0;
        *(_QWORD *)v94 = v85;
        *((_BYTE *)v94 + 8) = 1;
        v86 = &v107;
LABEL_127:
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v86, v52, v53, v54, v55, v56, v57, v58);
        goto LABEL_73;
      case 4:
        if (v32 >= v31)
        {
          JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v109, v30 + 1, a2[6], "can't get ", 11, v12, "th Import exception's tag type", 31, v4, v5);
          goto LABEL_147;
        }
        v75 = v30 + 2;
        *a2 = v75;
        if (*(_BYTE *)(v33 + v32))
        {
          JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>(&v109, v75, a2[6], v12, "th Import exception has tag type ", 34, *(unsigned __int8 *)(v33 + v32));
LABEL_147:
          *(_QWORD *)v94 = v109;
          *((_BYTE *)v94 + 8) = 1;
          goto LABEL_73;
        }
        LODWORD(v107) = 0;
        if (!WTF::LEBDecoder::decodeUInt32(v33, v31, a2, &v107))
        {
          v104 = 0;
          v105 = 0;
          v106 = v13;
          if ((_DWORD)v13)
          {
            v72 = (void *)WTF::fastMalloc((WTF *)v13);
            v105 = v13;
            v104 = v72;
            memcpy(v72, v22, v13);
          }
          else
          {
            v72 = 0;
          }
          v101 = 0;
          v102 = 0;
          v103 = v23;
          if ((_DWORD)v23)
          {
            v92 = (void *)WTF::fastMalloc((WTF *)v23);
            v102 = v23;
            v101 = v92;
            memcpy(v92, v29, v23);
          }
          else
          {
            v92 = 0;
          }
          JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>(&v109, *a2, a2[6], v12, "th Import's exception signature in module '", 44, (uint64_t)&v104, (uint64_t)&v101, v76, v77);
          *(_QWORD *)v94 = v109;
          *((_BYTE *)v94 + 8) = 1;
          if (v92)
          {
            v101 = 0;
            v102 = 0;
            WTF::fastFree((unint64_t)v92, v65, v66, v67, v68, v69, v70, v71);
          }
          if (!v72)
            goto LABEL_73;
          v104 = 0;
          v105 = 0;
          goto LABEL_91;
        }
        v78 = v107;
        v79 = a2[7];
        v80 = *(unsigned int *)(v79 + 100);
        if (v107 >= v80)
        {
          v98 = 0;
          v99 = 0;
          v100 = v13;
          if ((_DWORD)v13)
          {
            v83 = (void *)WTF::fastMalloc((WTF *)v13);
            v99 = v13;
            v98 = v83;
            memcpy(v83, v22, v13);
          }
          else
          {
            v83 = 0;
          }
          v95 = 0;
          v96 = 0;
          v97 = v23;
          if ((_DWORD)v23)
          {
            v93 = (void *)WTF::fastMalloc((WTF *)v23);
            v96 = v23;
            v95 = v93;
            memcpy(v93, v29, v23);
          }
          else
          {
            v93 = 0;
          }
          JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>((int **)&v109, (WTF::AtomStringImpl *)*a2, a2[6], (uint64_t)"invalid exception signature for ", 33, v12, v78, v80, v76, v77, (WTF::StringImpl *)&v98, (uint64_t)&v95);
          *(_QWORD *)v94 = v109;
          *((_BYTE *)v94 + 8) = 1;
          if (v93)
          {
            v95 = 0;
            v96 = 0;
            WTF::fastFree((unint64_t)v93, v65, v66, v67, v68, v69, v70, v71);
          }
          if (!v83)
            goto LABEL_73;
          v98 = 0;
          v99 = 0;
LABEL_124:
          v74 = (unint64_t)v83;
          goto LABEL_92;
        }
        *(_QWORD *)&v109 = 0;
        v81 = *(_QWORD *)(*(_QWORD *)(v79 + 88) + 8 * v107);
        *(_QWORD *)&v109 = v81;
        v41 = *(unsigned int *)(v79 + 68);
        if ((_DWORD)v41 == *(_DWORD *)(v79 + 64))
        {
          WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long &>(v79 + 56, (unint64_t)&v109);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v79 + 56) + 8 * v41) = v81;
          *(_DWORD *)(v79 + 68) = v41 + 1;
        }
LABEL_52:
        v42 = a2[7];
        v138 = 0;
        *(_QWORD *)&v109 = v22;
        v43 = v139;
        LODWORD(v139) = 0;
        *((_QWORD *)&v109 + 1) = __PAIR64__(v13, v43);
        *(_QWORD *)&v110 = v29;
        *((_QWORD *)&v110 + 1) = __PAIR64__(v23, v137);
        LOBYTE(v111) = v34;
        DWORD1(v111) = v41;
        v44 = *(_DWORD *)(v42 + 20);
        if (v44 == *(_DWORD *)(v42 + 16))
        {
          WTF::Vector<JSC::Wasm::Import,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Import>(v42 + 8, (unint64_t)&v109);
        }
        else
        {
          JSC::Wasm::Import::Import(*(_QWORD *)(v42 + 8) + 40 * v44, (uint64_t)&v109);
          ++*(_DWORD *)(v42 + 20);
        }
        JSC::Wasm::Import::~Import((JSC::Wasm::Import *)&v109, v45, v46, v47, v48, v49, v50, v51);
        v12 = (v12 + 1);
        if (v12 >= v141[0])
          goto LABEL_67;
        break;
      default:
        goto LABEL_66;
    }
  }
  v15 = *a2;
LABEL_80:
  JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v109, v15, a2[6], "can't get ", 11, v12, "th Import's module name of length ", 35, v4, v5, SHIDWORD(v140));
LABEL_81:
  *(_QWORD *)v94 = v109;
  *((_BYTE *)v94 + 8) = 1;
LABEL_76:
  if (v138)
    WTF::fastFree((unint64_t)v138, v65, v66, v67, v68, v69, v70, v71);
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, char *__src, uint64_t a5, int a6, char *a7, uint64_t a8, double a9, float a10, int a11)
{
  int v12;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  uint64_t v22;
  _BYTE *v23;
  WTF::StringImpl *v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  float v43;
  unsigned int v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  int *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  const char *v125;
  int v126;
  const char *v127;
  WTF *v128;
  __int128 v129;
  _BYTE v130[128];
  uint64_t v131;

  v12 = a6;
  v14 = a1;
  v15 = 0;
  v16 = a11;
  v131 = *MEMORY[0x1E0C80C00];
  v17 = a3 + a2;
  do
  {
    v18 = (v17 % 0xA) | 0x30;
    v130[v15-- - 8] = v18;
    v19 = v17 > 9;
    v17 /= 0xAuLL;
  }
  while (v19);
  if (v15 + 26 >= 27)
    __break(1u);
  if (v15)
  {
    v114 = a5;
    if ((unint64_t)-v15 >> 31)
    {
      __break(0xC471u);
LABEL_69:
      JUMPOUT(0x198E164F0);
    }
    v22 = WTF::fastCompactMalloc((WTF *)(20 - v15));
    v23 = (_BYTE *)(v22 + 20);
    *(_DWORD *)v22 = 2;
    *(_DWORD *)(v22 + 4) = -(int)v15;
    *(_QWORD *)(v22 + 8) = v22 + 20;
    v24 = (WTF::StringImpl *)v22;
    *(_DWORD *)(v22 + 16) = 4;
    if (v15 == -1)
      *v23 = v18;
    else
      memcpy(v23, &v130[v15 - 7], -v15);
    v14 = a1;
    v16 = a11;
    v12 = a6;
    a5 = v114;
  }
  else
  {
    v24 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v127 = (const char *)off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  if (__src)
  {
    v25 = a5 - 1;
    if (!a5)
      v25 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v25, (uint64_t)&v125, a10);
  }
  else
  {
    v26 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v26 = 1;
    *(_QWORD *)(v26 + 8) = 0;
    *(_BYTE *)(v26 + 16) = 0;
    v125 = (const char *)v26;
    v126 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v127, "StringView", &v125);
  if (v126 != -1)
    ((void (*)(WTF::StringImpl **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v126])(&v124, &v125);
  (*((void (**)(const char **))v127 + 5))(&v127);
  (*((void (**)(const char **))v127 + 5))(&v127);
  v34 = v128;
  if (!v128)
  {
    v118 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v118);
  v34 = v128;
  if (v128 != (WTF *)v130)
LABEL_22:
    WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
  v127 = (const char *)off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v127, "%u", v12);
  (*((void (**)(const char **))v127 + 5))(&v127);
  v42 = v128;
  if (!v128)
  {
    v117 = 0;
    goto LABEL_27;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v117);
  v42 = v128;
  if (v128 != (WTF *)v130)
LABEL_27:
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  v127 = (const char *)off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  if (a7)
  {
    v44 = a8 - 1;
    if (!a8)
      v44 = 0;
    WTF::StringImpl::utf8ForCharacters(a7, v44, (uint64_t)&v125, v43);
  }
  else
  {
    v45 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v45 = 1;
    *(_QWORD *)(v45 + 8) = 0;
    *(_BYTE *)(v45 + 16) = 0;
    v125 = (const char *)v45;
    v126 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v127, "StringView", &v125);
  if (v126 != -1)
    ((void (*)(WTF::StringImpl **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v126])(&v124, &v125);
  (*((void (**)(const char **))v127 + 5))(&v127);
  (*((void (**)(const char **))v127 + 5))(&v127);
  v53 = v128;
  if (!v128)
  {
    v116 = 0;
    goto LABEL_39;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v116);
  v53 = v128;
  if (v128 != (WTF *)v130)
LABEL_39:
    WTF::fastFree((unint64_t)v53, v46, v47, v48, v49, v50, v51, v52);
  v127 = (const char *)off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v127, "%u", v16);
  (*((void (**)(const char **))v127 + 5))(&v127);
  v61 = v128;
  if (!v128)
  {
    v115 = 0;
    goto LABEL_44;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v115);
  v61 = v128;
  if (v128 != (WTF *)v130)
LABEL_44:
    WTF::fastFree((unint64_t)v61, v54, v55, v56, v57, v58, v59, v60);
  v127 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v128) = 41;
  v124 = v24;
  v125 = ": ";
  v126 = 2;
  v122 = v117;
  v123 = v118;
  v120 = v115;
  v121 = v116;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v127, (uint64_t *)&v124, (uint64_t)&v125, (uint64_t *)&v123, (uint64_t *)&v122, (uint64_t *)&v121, (uint64_t *)&v120, &v119);
  if (!v119)
  {
    __break(0xC471u);
    goto LABEL_69;
  }
  *v14 = v119;
  v119 = 0;
  v69 = v115;
  v115 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  v70 = v116;
  v116 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v117;
  v117 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v118;
  v118 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  if (*(_DWORD *)v24 == 2)
  {
    WTF::StringImpl::~StringImpl(v24, v62, v63, v64, v65, v66, v67, v68);
    WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
  }
  else
  {
    *(_DWORD *)v24 -= 2;
  }
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, char *a5, uint64_t a6, uint64_t a7, double a8, float a9)
{
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int *v18;
  _BYTE *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  float v36;
  unsigned int v37;
  int8x16_t *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  float v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  int8x16_t *v122;
  int v123;
  const char *v124;
  WTF *v125;
  __int128 v126;
  _BYTE v127[128];
  uint64_t v128;

  v14 = 0;
  v128 = *MEMORY[0x1E0C80C00];
  v15 = a3 + a2;
  do
  {
    v16 = (v15 % 0xA) | 0x30;
    v127[v14-- - 8] = v16;
    v17 = v15 > 9;
    v15 /= 0xAuLL;
  }
  while (v17);
  if (v14 + 26 >= 27)
    __break(1u);
  if (v14)
  {
    if ((unint64_t)-v14 >> 31)
    {
      __break(0xC471u);
LABEL_69:
      JUMPOUT(0x198E16A38);
    }
    v18 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v14));
    v19 = v18 + 5;
    *v18 = 2;
    v18[1] = -(int)v14;
    *((_QWORD *)v18 + 1) = v18 + 5;
    v18[4] = 4;
    if (v14 == -1)
      *v19 = v16;
    else
      memcpy(v19, &v127[v14 - 7], -v14);
  }
  else
  {
    v18 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v124 = (const char *)off_1E3572250;
  v125 = (WTF *)v127;
  v126 = xmmword_199122F80;
  v127[0] = 0;
  WTF::StringImpl::utf8ForCharacters("can't get ", 0xAuLL, (uint64_t)&v122, a9);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v124, "StringView", &v122);
  if (v123 != -1)
    ((void (*)(uint64_t *, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v123])(&v121, &v122);
  (*((void (**)(const char **))v124 + 5))(&v124);
  (*((void (**)(const char **))v124 + 5))(&v124);
  v27 = v125;
  if (!v125)
  {
    v120 = 0;
    goto LABEL_16;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v125, v126, (uint64_t *)&v120);
  v27 = v125;
  if (v125 != (WTF *)v127)
LABEL_16:
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  v124 = (const char *)off_1E3572250;
  v125 = (WTF *)v127;
  v126 = xmmword_199122F80;
  v127[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v124, "%u", a4);
  (*((void (**)(const char **))v124 + 5))(&v124);
  v35 = v125;
  if (!v125)
  {
    v119 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v125, v126, (uint64_t *)&v119);
  v35 = v125;
  if (v125 != (WTF *)v127)
LABEL_21:
    WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
  v124 = (const char *)off_1E3572250;
  v125 = (WTF *)v127;
  v126 = xmmword_199122F80;
  v127[0] = 0;
  if (a5)
  {
    v37 = a6 - 1;
    if (!a6)
      v37 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v37, (uint64_t)&v122, v36);
  }
  else
  {
    v38 = (int8x16_t *)WTF::fastMalloc((WTF *)0x11);
    v38->i32[0] = 1;
    v38->i64[1] = 0;
    v38[1].i8[0] = 0;
    v122 = v38;
    v123 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v124, "StringView", &v122);
  if (v123 != -1)
    ((void (*)(uint64_t *, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v123])(&v121, &v122);
  (*((void (**)(const char **))v124 + 5))(&v124);
  (*((void (**)(const char **))v124 + 5))(&v124);
  v46 = v125;
  if (!v125)
  {
    v118 = 0;
    goto LABEL_33;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v125, v126, (uint64_t *)&v118);
  v46 = v125;
  if (v125 != (WTF *)v127)
LABEL_33:
    WTF::fastFree((unint64_t)v46, v39, v40, v41, v42, v43, v44, v45);
  JSC::Wasm::makeString(a7, (int **)&v117);
  v124 = (const char *)off_1E3572250;
  v125 = (WTF *)v127;
  v126 = xmmword_199122F80;
  v127[0] = 0;
  WTF::StringImpl::utf8ForCharacters("'", 1uLL, (uint64_t)&v122, v47);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v124, "StringView", &v122);
  if (v123 != -1)
    ((void (*)(uint64_t *, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v123])(&v121, &v122);
  (*((void (**)(const char **))v124 + 5))(&v124);
  (*((void (**)(const char **))v124 + 5))(&v124);
  v55 = v125;
  if (!v125)
  {
    v116 = 0;
    goto LABEL_40;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v125, v126, (uint64_t *)&v116);
  v55 = v125;
  if (v125 != (WTF *)v127)
LABEL_40:
    WTF::fastFree((unint64_t)v55, v48, v49, v50, v51, v52, v53, v54);
  v124 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v125) = 41;
  v122 = (int8x16_t *)": ";
  v123 = 2;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v121, (uint64_t)&v124, (uint64_t)v18, &v122, (uint64_t)v120, (uint64_t)v119, (uint64_t)v118, (uint64_t)v117, (uint64_t)v116);
  if (!v121)
  {
    __break(0xC471u);
    goto LABEL_69;
  }
  *a1 = v121;
  v63 = v116;
  v116 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  v64 = v117;
  v117 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
    }
    else
    {
      *(_DWORD *)v64 -= 2;
    }
  }
  v65 = v118;
  v118 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = v119;
  v119 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = v120;
  v120 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
    {
      WTF::StringImpl::~StringImpl(v67, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
    else
    {
      *(_DWORD *)v67 -= 2;
    }
  }
  if (*v18 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v18, v56, v57, v58, v59, v60, v61, v62);
    WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
  }
  else
  {
    *v18 -= 2;
  }
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, double a7, float a8)
{
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int *v16;
  _BYTE *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  float v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  float v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  float v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  WTF::AtomStringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  int *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  int *v162;
  int8x16_t *v163;
  int v164;
  int8x16_t *v165;
  WTF *v166;
  __int128 v167;
  _BYTE v168[128];
  uint64_t v169;

  v12 = 0;
  v169 = *MEMORY[0x1E0C80C00];
  v13 = a3 + a2;
  do
  {
    v14 = (v13 % 0xA) | 0x30;
    v168[v12-- - 8] = v14;
    v15 = v13 > 9;
    v13 /= 0xAuLL;
  }
  while (v15);
  if (v12 + 26 >= 27)
    __break(1u);
  if (v12)
  {
    if ((unint64_t)-v12 >> 31)
    {
      __break(0xC471u);
LABEL_84:
      JUMPOUT(0x198E170E4);
    }
    v16 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v12));
    v17 = v16 + 5;
    *v16 = 2;
    v16[1] = -(int)v12;
    *((_QWORD *)v16 + 1) = v16 + 5;
    v16[4] = 4;
    if (v12 == -1)
      *v17 = v14;
    else
      memcpy(v17, &v168[v12 - 7], -v12);
  }
  else
  {
    v16 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v165 = (int8x16_t *)off_1E3572250;
  v166 = (WTF *)v168;
  v167 = xmmword_199122F80;
  v168[0] = 0;
  WTF::StringImpl::utf8ForCharacters("can't get ", 0xAuLL, (uint64_t)&v163, a8);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v165, "StringView", &v163);
  if (v164 != -1)
    ((void (*)(int **, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v164])(&v162, &v163);
  ((void (*)(int8x16_t **))v165[2].i64[1])(&v165);
  ((void (*)(int8x16_t **))v165[2].i64[1])(&v165);
  v25 = v166;
  if (!v166)
  {
    v153 = 0;
    goto LABEL_16;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v166, v167, (uint64_t *)&v153);
  v25 = v166;
  if (v166 != (WTF *)v168)
LABEL_16:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v165 = (int8x16_t *)off_1E3572250;
  v166 = (WTF *)v168;
  v167 = xmmword_199122F80;
  v168[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v165, "%u", a4);
  ((void (*)(int8x16_t **))v165[2].i64[1])(&v165);
  v33 = v166;
  if (!v166)
  {
    v152 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v166, v167, (uint64_t *)&v152);
  v33 = v166;
  if (v166 != (WTF *)v168)
LABEL_21:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  v165 = (int8x16_t *)off_1E3572250;
  v166 = (WTF *)v168;
  v167 = xmmword_199122F80;
  v168[0] = 0;
  WTF::StringImpl::utf8ForCharacters("th Import's field name of length ", 0x21uLL, (uint64_t)&v163, v34);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v165, "StringView", &v163);
  if (v164 != -1)
    ((void (*)(int **, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v164])(&v162, &v163);
  ((void (*)(int8x16_t **))v165[2].i64[1])(&v165);
  ((void (*)(int8x16_t **))v165[2].i64[1])(&v165);
  v42 = v166;
  if (!v166)
  {
    v151 = 0;
    goto LABEL_28;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v166, v167, (uint64_t *)&v151);
  v42 = v166;
  if (v166 != (WTF *)v168)
LABEL_28:
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  v165 = (int8x16_t *)off_1E3572250;
  v166 = (WTF *)v168;
  v167 = xmmword_199122F80;
  v168[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v165, "%u", a5);
  ((void (*)(int8x16_t **))v165[2].i64[1])(&v165);
  v50 = v166;
  if (!v166)
  {
    v150 = 0;
    goto LABEL_33;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v166, v167, (uint64_t *)&v150);
  v50 = v166;
  if (v166 != (WTF *)v168)
LABEL_33:
    WTF::fastFree((unint64_t)v50, v43, v44, v45, v46, v47, v48, v49);
  v165 = (int8x16_t *)off_1E3572250;
  v166 = (WTF *)v168;
  v167 = xmmword_199122F80;
  v168[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" in module '", 0xCuLL, (uint64_t)&v163, v51);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v165, "StringView", &v163);
  if (v164 != -1)
    ((void (*)(int **, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v164])(&v162, &v163);
  ((void (*)(int8x16_t **))v165[2].i64[1])(&v165);
  ((void (*)(int8x16_t **))v165[2].i64[1])(&v165);
  v59 = v166;
  if (!v166)
  {
    v149 = 0;
    goto LABEL_40;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v166, v167, (uint64_t *)&v149);
  v59 = v166;
  if (v166 != (WTF *)v168)
LABEL_40:
    WTF::fastFree((unint64_t)v59, v52, v53, v54, v55, v56, v57, v58);
  JSC::Wasm::makeString(a6, (int **)&v148);
  v165 = (int8x16_t *)off_1E3572250;
  v166 = (WTF *)v168;
  v167 = xmmword_199122F80;
  v168[0] = 0;
  WTF::StringImpl::utf8ForCharacters("'", 1uLL, (uint64_t)&v163, v60);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v165, "StringView", &v163);
  if (v164 != -1)
    ((void (*)(int **, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v164])(&v162, &v163);
  ((void (*)(int8x16_t **))v165[2].i64[1])(&v165);
  ((void (*)(int8x16_t **))v165[2].i64[1])(&v165);
  v68 = v166;
  if (!v166)
  {
    v147 = 0;
    goto LABEL_47;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v166, v167, (uint64_t *)&v147);
  v68 = v166;
  if (v166 != (WTF *)v168)
LABEL_47:
    WTF::fastFree((unint64_t)v68, v61, v62, v63, v64, v65, v66, v67);
  v165 = (int8x16_t *)"WebAssembly.Module doesn't parse at byte ";
  LODWORD(v166) = 41;
  v162 = v16;
  v163 = (int8x16_t *)": ";
  v164 = 2;
  v160 = v152;
  v161 = v153;
  v158 = v150;
  v159 = v151;
  v156 = v148;
  v157 = v149;
  v155 = v147;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v154, &v165, (uint64_t *)&v162, &v163, (uint64_t *)&v161, (uint64_t *)&v160, (uint64_t *)&v159, (uint64_t *)&v158, (uint64_t *)&v157, (uint64_t *)&v156, (uint64_t *)&v155);
  if (!v154)
  {
    __break(0xC471u);
    goto LABEL_84;
  }
  *a1 = v154;
  v76 = v147;
  v147 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v76 -= 2;
    }
  }
  v77 = v148;
  v148 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
    {
      WTF::StringImpl::~StringImpl(v77, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v77 -= 2;
    }
  }
  v78 = v149;
  v149 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  v79 = v150;
  v150 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  v80 = v151;
  v151 = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
    {
      WTF::StringImpl::~StringImpl(v80, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
    }
    else
    {
      *(_DWORD *)v80 -= 2;
    }
  }
  v81 = v152;
  v152 = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
    {
      WTF::StringImpl::~StringImpl(v81, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
    }
    else
    {
      *(_DWORD *)v81 -= 2;
    }
  }
  v82 = v153;
  v153 = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
    }
    else
    {
      *(_DWORD *)v82 -= 2;
    }
  }
  if (*v16 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v69, v70, v71, v72, v73, v74, v75);
    WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
  }
  else
  {
    *v16 -= 2;
  }
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  uint64_t v24;
  _BYTE *v25;
  WTF::StringImpl *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  float v43;
  unsigned int v44;
  int8x16_t *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  float v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  float v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  int *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  int8x16_t *v167;
  int v168;
  int8x16_t *v169;
  WTF *v170;
  __int128 v171;
  _BYTE v172[128];
  uint64_t v173;

  v10 = a8;
  v11 = a7;
  v12 = a6;
  v13 = a5;
  v15 = a1;
  v16 = 0;
  v173 = *MEMORY[0x1E0C80C00];
  v17 = a3 + a2;
  do
  {
    v18 = (v17 % 0xA) | 0x30;
    v172[v16-- - 8] = v18;
    v19 = v17 > 9;
    v17 /= 0xAuLL;
  }
  while (v19);
  if (v16 + 26 >= 27)
    __break(1u);
  if (v16)
  {
    if ((unint64_t)-v16 >> 31)
    {
      __break(0xC471u);
LABEL_85:
      JUMPOUT(0x198E17794);
    }
    v24 = WTF::fastCompactMalloc((WTF *)(20 - v16));
    v25 = (_BYTE *)(v24 + 20);
    *(_DWORD *)v24 = 2;
    *(_DWORD *)(v24 + 4) = -(int)v16;
    *(_QWORD *)(v24 + 8) = v24 + 20;
    v26 = (WTF::StringImpl *)v24;
    *(_DWORD *)(v24 + 16) = 4;
    if (v16 == -1)
      *v25 = v18;
    else
      memcpy(v25, &v172[v16 - 7], -v16);
    v15 = a1;
    v10 = a8;
    v11 = a7;
    v12 = a6;
    v13 = a5;
  }
  else
  {
    v26 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v169 = (int8x16_t *)off_1E3572250;
  v170 = (WTF *)v172;
  v171 = xmmword_199122F80;
  v172[0] = 0;
  WTF::StringImpl::utf8ForCharacters("can't get ", 0xAuLL, (uint64_t)&v167, a10);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v169, "StringView", &v167);
  if (v168 != -1)
    ((void (*)(WTF::StringImpl **, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v168])(&v166, &v167);
  ((void (*)(int8x16_t **))v169[2].i64[1])(&v169);
  ((void (*)(int8x16_t **))v169[2].i64[1])(&v169);
  v34 = v170;
  if (!v170)
  {
    v157 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v170, v171, (uint64_t *)&v157);
  v34 = v170;
  if (v170 != (WTF *)v172)
LABEL_17:
    WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
  v169 = (int8x16_t *)off_1E3572250;
  v170 = (WTF *)v172;
  v171 = xmmword_199122F80;
  v172[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v169, "%u", a4);
  ((void (*)(int8x16_t **))v169[2].i64[1])(&v169);
  v42 = v170;
  if (!v170)
  {
    v156 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v170, v171, (uint64_t *)&v156);
  v42 = v170;
  if (v170 != (WTF *)v172)
LABEL_22:
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  v169 = (int8x16_t *)off_1E3572250;
  v170 = (WTF *)v172;
  v171 = xmmword_199122F80;
  v172[0] = 0;
  if (v13)
  {
    v44 = v12 - 1;
    if (!v12)
      v44 = 0;
    WTF::StringImpl::utf8ForCharacters(v13, v44, (uint64_t)&v167, v43);
  }
  else
  {
    v45 = (int8x16_t *)WTF::fastMalloc((WTF *)0x11);
    v45->i32[0] = 1;
    v45->i64[1] = 0;
    v45[1].i8[0] = 0;
    v167 = v45;
    v168 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v169, "StringView", &v167);
  if (v168 != -1)
    ((void (*)(WTF::StringImpl **, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v168])(&v166, &v167);
  ((void (*)(int8x16_t **))v169[2].i64[1])(&v169);
  ((void (*)(int8x16_t **))v169[2].i64[1])(&v169);
  v53 = v170;
  if (!v170)
  {
    v155 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v170, v171, (uint64_t *)&v155);
  v53 = v170;
  if (v170 != (WTF *)v172)
LABEL_34:
    WTF::fastFree((unint64_t)v53, v46, v47, v48, v49, v50, v51, v52);
  JSC::Wasm::makeString(v11, (int **)&v154);
  v169 = (int8x16_t *)off_1E3572250;
  v170 = (WTF *)v172;
  v171 = xmmword_199122F80;
  v172[0] = 0;
  WTF::StringImpl::utf8ForCharacters("' field '", 9uLL, (uint64_t)&v167, v54);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v169, "StringView", &v167);
  if (v168 != -1)
    ((void (*)(WTF::StringImpl **, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v168])(&v166, &v167);
  ((void (*)(int8x16_t **))v169[2].i64[1])(&v169);
  ((void (*)(int8x16_t **))v169[2].i64[1])(&v169);
  v62 = v170;
  if (!v170)
  {
    v153 = 0;
    goto LABEL_41;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v170, v171, (uint64_t *)&v153);
  v62 = v170;
  if (v170 != (WTF *)v172)
LABEL_41:
    WTF::fastFree((unint64_t)v62, v55, v56, v57, v58, v59, v60, v61);
  JSC::Wasm::makeString(v10, (int **)&v152);
  v169 = (int8x16_t *)off_1E3572250;
  v170 = (WTF *)v172;
  v171 = xmmword_199122F80;
  v172[0] = 0;
  WTF::StringImpl::utf8ForCharacters("'", 1uLL, (uint64_t)&v167, v63);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v169, "StringView", &v167);
  if (v168 != -1)
    ((void (*)(WTF::StringImpl **, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v168])(&v166, &v167);
  ((void (*)(int8x16_t **))v169[2].i64[1])(&v169);
  ((void (*)(int8x16_t **))v169[2].i64[1])(&v169);
  v71 = v170;
  if (!v170)
  {
    v151 = 0;
    goto LABEL_48;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v170, v171, (uint64_t *)&v151);
  v71 = v170;
  if (v170 != (WTF *)v172)
LABEL_48:
    WTF::fastFree((unint64_t)v71, v64, v65, v66, v67, v68, v69, v70);
  v169 = (int8x16_t *)"WebAssembly.Module doesn't parse at byte ";
  LODWORD(v170) = 41;
  v166 = v26;
  v167 = (int8x16_t *)": ";
  v168 = 2;
  v164 = v156;
  v165 = v157;
  v162 = v154;
  v163 = v155;
  v160 = v152;
  v161 = v153;
  v159 = v151;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v158, &v169, (uint64_t *)&v166, &v167, (uint64_t *)&v165, (uint64_t *)&v164, (uint64_t *)&v163, (uint64_t *)&v162, (uint64_t *)&v161, (uint64_t *)&v160, (uint64_t *)&v159);
  if (!v158)
  {
    __break(0xC471u);
    goto LABEL_85;
  }
  *v15 = v158;
  v79 = v151;
  v151 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v72, v73, v74, v75, v76, v77, v78);
      WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  v80 = v152;
  v152 = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
    {
      WTF::StringImpl::~StringImpl(v80, v72, v73, v74, v75, v76, v77, v78);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v80 -= 2;
    }
  }
  v81 = v153;
  v153 = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
    {
      WTF::StringImpl::~StringImpl(v81, v72, v73, v74, v75, v76, v77, v78);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v81 -= 2;
    }
  }
  v82 = v154;
  v154 = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, v72, v73, v74, v75, v76, v77, v78);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v82 -= 2;
    }
  }
  v83 = v155;
  v155 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
    {
      WTF::StringImpl::~StringImpl(v83, v72, v73, v74, v75, v76, v77, v78);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v83 -= 2;
    }
  }
  v84 = v156;
  v156 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v72, v73, v74, v75, v76, v77, v78);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = v157;
  v157 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v72, v73, v74, v75, v76, v77, v78);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  if (*(_DWORD *)v26 == 2)
  {
    WTF::StringImpl::~StringImpl(v26, v72, v73, v74, v75, v76, v77, v78);
    WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
  }
  else
  {
    *(_DWORD *)v26 -= 2;
  }
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>(int **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t __src, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10, WTF::StringImpl *a11, uint64_t a12)
{
  int *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int v24;
  int v25;
  uint64_t v26;
  _BYTE *v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  float v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  float v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  float v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  float v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  float v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF *v106;
  WTF::StringImpl *v107;
  int v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int *v119;
  _WORD *v120;
  int8x16_t *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  __int128 v125;
  char *v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  char *v130;
  char *v131;
  char *v132;
  __int16 v133;
  _DWORD *v134;
  char *v135;
  int8x16_t *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  __int128 v140;
  char *v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  char *v145;
  char *v146;
  char *v147;
  __int16 v148;
  uint64_t v149;
  char *v150;
  int8x16_t *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  __int128 v155;
  char *v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  char *v160;
  char *v161;
  char *v162;
  __int16 v163;
  uint64_t v164;
  char *v165;
  int8x16_t *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  __int128 v170;
  char *v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  char *v175;
  char *v176;
  char *v177;
  __int16 v178;
  uint64_t v179;
  char *v180;
  int8x16_t *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  __int128 v185;
  char *v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  char *v190;
  char *v191;
  char *v192;
  __int16 v193;
  uint64_t v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  unint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  void *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  _BYTE *v302;
  _BYTE *v303;
  size_t v304;
  _WORD *v305;
  _BYTE *v306;
  _BYTE *v307;
  size_t v308;
  uint64_t v309;
  _BYTE *v310;
  _BYTE *v311;
  size_t v312;
  uint64_t v313;
  _BYTE *v314;
  _BYTE *v315;
  size_t v316;
  uint64_t v317;
  _BYTE *v318;
  _BYTE *v319;
  size_t v320;
  uint64_t v321;
  _BYTE *v322;
  WTF::StringImpl *v323;
  _BYTE *v324;
  size_t v325;
  unsigned __int128 *v326;
  unsigned __int128 *v327;
  unsigned __int128 v328;
  unsigned __int128 *v329;
  unsigned __int128 *v330;
  unsigned __int128 v331;
  unsigned __int128 *v332;
  unsigned __int128 *v333;
  unsigned __int128 v334;
  unsigned __int128 *v335;
  unsigned __int128 *v336;
  unsigned __int128 v337;
  unsigned __int128 *v338;
  unsigned __int128 *v339;
  unsigned __int128 v340;
  unsigned __int128 *v341;
  unsigned __int128 *v342;
  unsigned __int128 v343;
  char v344;
  char v345;
  char v346;
  char v347;
  char v348;
  char v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int **v354;
  WTF::StringImpl *v355;
  WTF::StringImpl *v356;
  WTF::StringImpl *v357;
  uint64_t v358;
  WTF::StringImpl *v359;
  WTF::StringImpl *v360;
  WTF::StringImpl *v361;
  WTF::StringImpl *v362;
  WTF::StringImpl *v363;
  WTF::StringImpl *v364;
  WTF::StringImpl *v365;
  WTF::StringImpl *v366;
  WTF::StringImpl *v367;
  WTF::StringImpl *v368;
  WTF::StringImpl *v369;
  uint64_t v370;
  int v371;
  char v372;
  void (**v373)(WTF::StringPrintStream *__hidden);
  WTF *v374;
  __int128 v375;
  _BYTE v376[128];
  uint64_t v377;
  int8x16x2_t v378;
  int8x16x2_t v379;
  int8x16x2_t v380;
  int8x16x2_t v381;
  int8x16x2_t v382;
  int8x16x2_t v383;
  int8x16x2_t v384;
  int8x16x2_t v385;
  int8x16x2_t v386;
  int8x16x2_t v387;
  int8x16x2_t v388;
  int8x16x2_t v389;
  int8x16x2_t v390;
  int8x16x2_t v391;
  int8x16x2_t v392;

  v15 = (WTF::StringImpl *)a8;
  v16 = (WTF::StringImpl *)a7;
  v17 = (WTF::StringImpl *)a6;
  v18 = (WTF::StringImpl *)__src;
  v19 = 0;
  v20 = a11;
  v377 = *MEMORY[0x1E0C80C00];
  v21 = (unint64_t)a2 + a3;
  do
  {
    v22 = (v21 % 0xA) | 0x30;
    *((_BYTE *)v19 + (_QWORD)&v375 + 8) = v22;
    v19 = (WTF::StringImpl *)((char *)v19 - 1);
    v23 = v21 > 9;
    v21 /= 0xAuLL;
  }
  while (v23);
  if ((uint64_t)v19 + 26 >= 27)
  {
    __break(1u);
    goto LABEL_232;
  }
  v354 = a1;
  if (v19)
  {
    v358 = a5;
    if ((unint64_t)-(uint64_t)v19 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198E188B0);
    }
    v24 = a7;
    v25 = a8;
    v26 = WTF::fastCompactMalloc((WTF *)(20 - (_QWORD)v19));
    v27 = (_BYTE *)(v26 + 20);
    *(_DWORD *)v26 = 2;
    *(_DWORD *)(v26 + 4) = -(int)v19;
    *(_QWORD *)(v26 + 8) = v26 + 20;
    v12 = (int *)v26;
    *(_DWORD *)(v26 + 16) = 4;
    if (v19 == (WTF::StringImpl *)-1)
      *v27 = v22;
    else
      memcpy(v27, (char *)v19 + (_QWORD)&v375 + 9, -(uint64_t)v19);
    LODWORD(v15) = v25;
    LODWORD(v16) = v24;
    a5 = v358;
  }
  else
  {
    v12 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v373 = off_1E3572250;
  v374 = (WTF *)v376;
  v375 = xmmword_199122F80;
  v376[0] = 0;
  if (v18)
  {
    v28 = a5 - 1;
    if (!a5)
      v28 = 0;
    WTF::StringImpl::utf8ForCharacters((char *)v18, v28, (uint64_t)&v370, a10);
  }
  else
  {
    v29 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) = 0;
    v370 = v29;
    v371 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v373, "StringView", &v370);
  if (v371 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v371])(&v372, &v370);
  v373[5]((WTF::StringPrintStream *)&v373);
  v373[5]((WTF::StringPrintStream *)&v373);
  v37 = v374;
  if (!v374)
  {
    v369 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v374, v375, (uint64_t *)&v369);
  v37 = v374;
  if (v374 != (WTF *)v376)
LABEL_22:
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  v373 = off_1E3572250;
  v374 = (WTF *)v376;
  v375 = xmmword_199122F80;
  v376[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v373, "%u", (_DWORD)v17);
  v373[5]((WTF::StringPrintStream *)&v373);
  v45 = v374;
  if (!v374)
  {
    v368 = 0;
    goto LABEL_27;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v374, v375, (uint64_t *)&v368);
  v45 = v374;
  if (v374 != (WTF *)v376)
LABEL_27:
    WTF::fastFree((unint64_t)v45, v38, v39, v40, v41, v42, v43, v44);
  v373 = off_1E3572250;
  v374 = (WTF *)v376;
  v375 = xmmword_199122F80;
  v376[0] = 0;
  WTF::StringImpl::utf8ForCharacters("th Import, ", 0xBuLL, (uint64_t)&v370, v46);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v373, "StringView", &v370);
  if (v371 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v371])(&v372, &v370);
  v373[5]((WTF::StringPrintStream *)&v373);
  v373[5]((WTF::StringPrintStream *)&v373);
  v54 = v374;
  if (!v374)
  {
    v367 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v374, v375, (uint64_t *)&v367);
  v54 = v374;
  if (v374 != (WTF *)v376)
LABEL_34:
    WTF::fastFree((unint64_t)v54, v47, v48, v49, v50, v51, v52, v53);
  v373 = off_1E3572250;
  v374 = (WTF *)v376;
  v375 = xmmword_199122F80;
  v376[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v373, "%u", (_DWORD)v16);
  v373[5]((WTF::StringPrintStream *)&v373);
  v62 = v374;
  if (!v374)
  {
    v366 = 0;
    goto LABEL_39;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v374, v375, (uint64_t *)&v366);
  v62 = v374;
  if (v374 != (WTF *)v376)
LABEL_39:
    WTF::fastFree((unint64_t)v62, v55, v56, v57, v58, v59, v60, v61);
  v373 = off_1E3572250;
  v374 = (WTF *)v376;
  v375 = xmmword_199122F80;
  v376[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" is out of range of ", 0x14uLL, (uint64_t)&v370, v63);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v373, "StringView", &v370);
  if (v371 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v371])(&v372, &v370);
  v373[5]((WTF::StringPrintStream *)&v373);
  v373[5]((WTF::StringPrintStream *)&v373);
  v71 = v374;
  if (!v374)
  {
    v365 = 0;
    goto LABEL_46;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v374, v375, (uint64_t *)&v365);
  v71 = v374;
  if (v374 != (WTF *)v376)
LABEL_46:
    WTF::fastFree((unint64_t)v71, v64, v65, v66, v67, v68, v69, v70);
  v373 = off_1E3572250;
  v374 = (WTF *)v376;
  v375 = xmmword_199122F80;
  v376[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v373, "%u", (_DWORD)v15);
  v373[5]((WTF::StringPrintStream *)&v373);
  v79 = v374;
  if (!v374)
  {
    v364 = 0;
    goto LABEL_51;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v374, v375, (uint64_t *)&v364);
  v79 = v374;
  if (v374 != (WTF *)v376)
LABEL_51:
    WTF::fastFree((unint64_t)v79, v72, v73, v74, v75, v76, v77, v78);
  v373 = off_1E3572250;
  v374 = (WTF *)v376;
  v375 = xmmword_199122F80;
  v376[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" in module '", 0xCuLL, (uint64_t)&v370, v80);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v373, "StringView", &v370);
  if (v371 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v371])(&v372, &v370);
  v373[5]((WTF::StringPrintStream *)&v373);
  v373[5]((WTF::StringPrintStream *)&v373);
  v88 = v374;
  if (!v374)
  {
    v363 = 0;
    goto LABEL_58;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v374, v375, (uint64_t *)&v363);
  v88 = v374;
  if (v374 != (WTF *)v376)
LABEL_58:
    WTF::fastFree((unint64_t)v88, v81, v82, v83, v84, v85, v86, v87);
  JSC::Wasm::makeString((uint64_t)a11, (int **)&v362);
  v373 = off_1E3572250;
  v374 = (WTF *)v376;
  v375 = xmmword_199122F80;
  v376[0] = 0;
  WTF::StringImpl::utf8ForCharacters("' field '", 9uLL, (uint64_t)&v370, v89);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v373, "StringView", &v370);
  if (v371 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v371])(&v372, &v370);
  v373[5]((WTF::StringPrintStream *)&v373);
  v373[5]((WTF::StringPrintStream *)&v373);
  v97 = v374;
  if (!v374)
  {
    v361 = 0;
    goto LABEL_65;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v374, v375, (uint64_t *)&v361);
  v97 = v374;
  if (v374 != (WTF *)v376)
LABEL_65:
    WTF::fastFree((unint64_t)v97, v90, v91, v92, v93, v94, v95, v96);
  JSC::Wasm::makeString(a12, (int **)&v360);
  v373 = off_1E3572250;
  v374 = (WTF *)v376;
  v375 = xmmword_199122F80;
  v376[0] = 0;
  WTF::StringImpl::utf8ForCharacters("'", 1uLL, (uint64_t)&v370, v98);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v373, "StringView", &v370);
  if (v371 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v371])(&v372, &v370);
  v373[5]((WTF::StringPrintStream *)&v373);
  v373[5]((WTF::StringPrintStream *)&v373);
  v106 = v374;
  if (!v374)
  {
    v359 = 0;
    goto LABEL_72;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v374, v375, (uint64_t *)&v359);
  v106 = v374;
  if (v374 != (WTF *)v376)
LABEL_72:
    WTF::fastFree((unint64_t)v106, v99, v100, v101, v102, v103, v104, v105);
  v15 = v368;
  v18 = v369;
  v19 = v366;
  v20 = v367;
  v17 = v362;
  v107 = v363;
  v16 = v360;
  v13 = v361;
  if (v369)
  {
    v108 = *((_DWORD *)v369 + 1);
    if (v368)
      goto LABEL_75;
  }
  else
  {
    v108 = 0;
    if (v368)
    {
LABEL_75:
      v109 = *((_DWORD *)v368 + 1);
      if (v367)
        goto LABEL_76;
      goto LABEL_278;
    }
  }
  v109 = 0;
  if (v367)
  {
LABEL_76:
    v110 = *((_DWORD *)v367 + 1);
    if (v366)
      goto LABEL_77;
    goto LABEL_279;
  }
LABEL_278:
  v110 = 0;
  if (v366)
  {
LABEL_77:
    v111 = *((_DWORD *)v366 + 1);
    if (v365)
      goto LABEL_78;
    goto LABEL_280;
  }
LABEL_279:
  v111 = 0;
  if (v365)
  {
LABEL_78:
    v112 = *((unsigned int *)v365 + 1);
    if (v364)
      goto LABEL_79;
    goto LABEL_281;
  }
LABEL_280:
  v112 = 0;
  if (v364)
  {
LABEL_79:
    v113 = *((_DWORD *)v364 + 1);
    if (v363)
      goto LABEL_80;
    goto LABEL_282;
  }
LABEL_281:
  v113 = 0;
  if (v363)
  {
LABEL_80:
    v114 = *((_DWORD *)v363 + 1);
    if (v362)
      goto LABEL_81;
    goto LABEL_283;
  }
LABEL_282:
  v114 = 0;
  if (v362)
  {
LABEL_81:
    v115 = *((_DWORD *)v362 + 1);
    if (v361)
      goto LABEL_82;
LABEL_284:
    v116 = 0;
    if (v360)
      goto LABEL_83;
LABEL_285:
    v117 = 0;
    goto LABEL_84;
  }
LABEL_283:
  v115 = 0;
  if (!v361)
    goto LABEL_284;
LABEL_82:
  v116 = *((_DWORD *)v361 + 1);
  if (!v360)
    goto LABEL_285;
LABEL_83:
  v117 = *((_DWORD *)v360 + 1);
LABEL_84:
  v355 = v359;
  v356 = v364;
  v357 = v365;
  if (v359)
    v118 = *((_DWORD *)v359 + 1);
  else
    v118 = 0;
  WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(v12[1], 2, v108, v109, v110, v111, v112, v113, (uint64_t)&v373, v114, v115, v116, v117, v118);
  if ((_BYTE)v373)
    goto LABEL_293;
  v14 = (HIDWORD(v373) + 41);
  if (__OFADD__(HIDWORD(v373), 41))
    goto LABEL_293;
  v353 = (uint64_t)v107;
  if ((v12[4] & 4) == 0
    || v18 && (*((_BYTE *)v18 + 16) & 4) == 0
    || v15 && (*((_BYTE *)v15 + 16) & 4) == 0
    || v20 && (*((_BYTE *)v20 + 16) & 4) == 0
    || v19 && (*((_BYTE *)v19 + 16) & 4) == 0
    || v357 && (*((_BYTE *)v357 + 16) & 4) == 0
    || v356 && (*((_BYTE *)v356 + 16) & 4) == 0
    || v107 && (*((_BYTE *)v107 + 16) & 4) == 0
    || v17 && (*((_BYTE *)v17 + 16) & 4) == 0
    || v13 && (*((_BYTE *)v13 + 16) & 4) == 0
    || v16 && (*((_BYTE *)v16 + 16) & 4) == 0)
  {
    goto LABEL_111;
  }
  if (!v355)
  {
    v350 = (uint64_t)v17;
    v351 = (uint64_t)v13;
    v352 = (uint64_t)v16;
    if (HIDWORD(v373) == -41)
      goto LABEL_294;
    v355 = 0;
    if ((v14 & 0x80000000) != 0)
      goto LABEL_293;
    goto LABEL_234;
  }
  if ((*((_BYTE *)v355 + 16) & 4) == 0)
  {
LABEL_111:
    if (HIDWORD(v373) != -41)
    {
      if (v14 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v14 + 20), &v373);
        v119 = (int *)v373;
        if (v373)
        {
          *(_DWORD *)v373 = 2;
          v119[1] = v14;
          *(_OWORD *)(v119 + 5) = xmmword_19915A580;
          *((_QWORD *)v119 + 1) = v119 + 5;
          v119[4] = 0;
          v120 = (_WORD *)v119 + 51;
          *(_OWORD *)(v119 + 9) = xmmword_19915A590;
          *(_OWORD *)(v119 + 13) = xmmword_19915A5A0;
          *(_OWORD *)(v119 + 17) = xmmword_19915A5B0;
          *(_OWORD *)(v119 + 21) = xmmword_19915A5C0;
          *((_WORD *)v119 + 50) = 32;
          v121 = (int8x16_t *)*((_QWORD *)v12 + 1);
          v122 = v12[1];
          if ((v12[4] & 4) != 0)
          {
            v123 = (char *)&v120[v122];
            if (v122 >= 0x40)
            {
              v124 = (char *)&v120[v122 & 0xFFFFFFC0];
              v125 = 0uLL;
              v126 = (char *)v119 + 102;
              do
              {
                v378.val[0] = *v121;
                v127 = v121[1];
                v383.val[0] = v121[2];
                v128 = v121[3];
                v121 += 4;
                v129 = v128;
                v383.val[1] = 0uLL;
                v388.val[0] = v127;
                v378.val[1] = 0uLL;
                v130 = v126;
                vst2q_s8(v130, v378);
                v130 += 32;
                v388.val[1] = 0uLL;
                vst2q_s8(v130, v388);
                v131 = v126 + 64;
                vst2q_s8(v131, v383);
                v132 = v126 + 96;
                vst2q_s8(v132, *(int8x16x2_t *)(&v125 - 1));
                v126 += 128;
              }
              while (v126 != v124);
            }
            else
            {
              v124 = (char *)v119 + 102;
            }
            while (v124 != v123)
            {
              v133 = v121->u8[0];
              v121 = (int8x16_t *)((char *)v121 + 1);
              *(_WORD *)v124 = v133;
              v124 += 2;
            }
          }
          else if ((_DWORD)v122 == 1)
          {
            *v120 = v121->i16[0];
          }
          else if ((_DWORD)v122)
          {
            memcpy((char *)v119 + 102, v121, 2 * v122);
          }
          v134 = &v120[v12[1]];
          *v134 = 2097210;
          v135 = (char *)(v134 + 1);
          if (v18)
          {
            v136 = (int8x16_t *)*((_QWORD *)v18 + 1);
            v137 = *((unsigned int *)v18 + 1);
            if ((*((_BYTE *)v18 + 16) & 4) != 0)
            {
              v138 = &v135[2 * v137];
              if (v137 >= 0x40)
              {
                v139 = &v135[2 * (v137 & 0xFFFFFFC0)];
                v140 = 0uLL;
                v141 = v135;
                do
                {
                  v379.val[0] = *v136;
                  v142 = v136[1];
                  v384.val[0] = v136[2];
                  v143 = v136[3];
                  v136 += 4;
                  v144 = v143;
                  v384.val[1] = 0uLL;
                  v389.val[0] = v142;
                  v379.val[1] = 0uLL;
                  v145 = v141;
                  vst2q_s8(v145, v379);
                  v145 += 32;
                  v389.val[1] = 0uLL;
                  vst2q_s8(v145, v389);
                  v146 = v141 + 64;
                  vst2q_s8(v146, v384);
                  v147 = v141 + 96;
                  vst2q_s8(v147, *(int8x16x2_t *)(&v140 - 1));
                  v141 += 128;
                }
                while (v141 != v139);
              }
              else
              {
                v139 = v135;
              }
              while (v139 != v138)
              {
                v148 = v136->u8[0];
                v136 = (int8x16_t *)((char *)v136 + 1);
                *(_WORD *)v139 = v148;
                v139 += 2;
              }
            }
            else if ((_DWORD)v137 == 1)
            {
              *(_WORD *)v135 = v136->i16[0];
            }
            else if ((_DWORD)v137)
            {
              memcpy(v135, v136, 2 * v137);
            }
            v149 = *((unsigned int *)v18 + 1);
          }
          else
          {
            v149 = 0;
          }
          v150 = &v135[2 * v149];
          if (v15)
          {
            v151 = (int8x16_t *)*((_QWORD *)v15 + 1);
            v152 = *((unsigned int *)v15 + 1);
            if ((*((_BYTE *)v15 + 16) & 4) != 0)
            {
              v153 = &v150[2 * v152];
              if (v152 >= 0x40)
              {
                v154 = &v150[2 * (v152 & 0xFFFFFFC0)];
                v155 = 0uLL;
                v156 = v150;
                do
                {
                  v380.val[0] = *v151;
                  v157 = v151[1];
                  v385.val[0] = v151[2];
                  v158 = v151[3];
                  v151 += 4;
                  v159 = v158;
                  v385.val[1] = 0uLL;
                  v390.val[0] = v157;
                  v380.val[1] = 0uLL;
                  v160 = v156;
                  vst2q_s8(v160, v380);
                  v160 += 32;
                  v390.val[1] = 0uLL;
                  vst2q_s8(v160, v390);
                  v161 = v156 + 64;
                  vst2q_s8(v161, v385);
                  v162 = v156 + 96;
                  vst2q_s8(v162, *(int8x16x2_t *)(&v155 - 1));
                  v156 += 128;
                }
                while (v156 != v154);
              }
              else
              {
                v154 = v150;
              }
              while (v154 != v153)
              {
                v163 = v151->u8[0];
                v151 = (int8x16_t *)((char *)v151 + 1);
                *(_WORD *)v154 = v163;
                v154 += 2;
              }
            }
            else if ((_DWORD)v152 == 1)
            {
              *(_WORD *)v150 = v151->i16[0];
            }
            else if ((_DWORD)v152)
            {
              memcpy(v150, v151, 2 * v152);
            }
            v164 = *((unsigned int *)v15 + 1);
          }
          else
          {
            v164 = 0;
          }
          v165 = &v150[2 * v164];
          if (v20)
          {
            v166 = (int8x16_t *)*((_QWORD *)v20 + 1);
            v167 = *((unsigned int *)v20 + 1);
            if ((*((_BYTE *)v20 + 16) & 4) != 0)
            {
              v168 = &v165[2 * v167];
              if (v167 >= 0x40)
              {
                v169 = &v165[2 * (v167 & 0xFFFFFFC0)];
                v170 = 0uLL;
                v171 = v165;
                do
                {
                  v381.val[0] = *v166;
                  v172 = v166[1];
                  v386.val[0] = v166[2];
                  v173 = v166[3];
                  v166 += 4;
                  v174 = v173;
                  v386.val[1] = 0uLL;
                  v391.val[0] = v172;
                  v381.val[1] = 0uLL;
                  v175 = v171;
                  vst2q_s8(v175, v381);
                  v175 += 32;
                  v391.val[1] = 0uLL;
                  vst2q_s8(v175, v391);
                  v176 = v171 + 64;
                  vst2q_s8(v176, v386);
                  v177 = v171 + 96;
                  vst2q_s8(v177, *(int8x16x2_t *)(&v170 - 1));
                  v171 += 128;
                }
                while (v171 != v169);
              }
              else
              {
                v169 = v165;
              }
              while (v169 != v168)
              {
                v178 = v166->u8[0];
                v166 = (int8x16_t *)((char *)v166 + 1);
                *(_WORD *)v169 = v178;
                v169 += 2;
              }
            }
            else if ((_DWORD)v167 == 1)
            {
              *(_WORD *)v165 = v166->i16[0];
            }
            else if ((_DWORD)v167)
            {
              memcpy(v165, v166, 2 * v167);
            }
            v179 = *((unsigned int *)v20 + 1);
          }
          else
          {
            v179 = 0;
          }
          v180 = &v165[2 * v179];
          if (v19)
          {
            v181 = (int8x16_t *)*((_QWORD *)v19 + 1);
            v182 = *((unsigned int *)v19 + 1);
            if ((*((_BYTE *)v19 + 16) & 4) != 0)
            {
              v183 = &v180[2 * v182];
              if (v182 >= 0x40)
              {
                v184 = &v180[2 * (v182 & 0xFFFFFFC0)];
                v185 = 0uLL;
                v186 = v180;
                do
                {
                  v382.val[0] = *v181;
                  v187 = v181[1];
                  v387.val[0] = v181[2];
                  v188 = v181[3];
                  v181 += 4;
                  v189 = v188;
                  v387.val[1] = 0uLL;
                  v392.val[0] = v187;
                  v382.val[1] = 0uLL;
                  v190 = v186;
                  vst2q_s8(v190, v382);
                  v190 += 32;
                  v392.val[1] = 0uLL;
                  vst2q_s8(v190, v392);
                  v191 = v186 + 64;
                  vst2q_s8(v191, v387);
                  v192 = v186 + 96;
                  vst2q_s8(v192, *(int8x16x2_t *)(&v185 - 1));
                  v186 += 128;
                }
                while (v186 != v184);
              }
              else
              {
                v184 = v180;
              }
              while (v184 != v183)
              {
                v193 = v181->u8[0];
                v181 = (int8x16_t *)((char *)v181 + 1);
                *(_WORD *)v184 = v193;
                v184 += 2;
              }
            }
            else if ((_DWORD)v182 == 1)
            {
              *(_WORD *)v180 = v181->i16[0];
            }
            else if ((_DWORD)v182)
            {
              memcpy(v180, v181, 2 * v182);
            }
            v194 = *((unsigned int *)v19 + 1);
          }
          else
          {
            v194 = 0;
          }
          WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v180[2 * v194], (uint64_t)v357, (uint64_t)v356, v353, (uint64_t)v17, (uint64_t)v13, (uint64_t)v16, (uint64_t)v355);
          goto LABEL_178;
        }
      }
LABEL_293:
      __break(0xC471u);
      JUMPOUT(0x198E18890);
    }
LABEL_294:
    v119 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_178;
  }
LABEL_232:
  v350 = (uint64_t)v17;
  v351 = (uint64_t)v13;
  v352 = (uint64_t)v16;
  if (!(_DWORD)v14)
    goto LABEL_294;
  if ((v14 & 0x80000000) != 0)
    goto LABEL_293;
LABEL_234:
  WTF::tryFastCompactMalloc((WTF *)(v14 + 20), &v373);
  v119 = (int *)v373;
  if (!v373)
    goto LABEL_293;
  *(_OWORD *)((char *)v373 + 20) = *(_OWORD *)"WebAssembly.Module doesn't parse at byte ";
  *v119 = 2;
  v119[1] = v14;
  *((_QWORD *)v119 + 1) = v119 + 5;
  v119[4] = 4;
  qmemcpy(v119 + 9, "le doesn't parse at byte ", 25);
  v302 = (char *)v119 + 61;
  v303 = (_BYTE *)*((_QWORD *)v12 + 1);
  v304 = v12[1];
  if ((v12[4] & 4) != 0)
  {
    if ((_DWORD)v304 == 1)
    {
      *v302 = *v303;
    }
    else if ((_DWORD)v304)
    {
      memcpy((char *)v119 + 61, v303, v304);
    }
  }
  else
  {
    if (v304 < 0x10)
    {
      v326 = (unsigned __int128 *)((char *)v119 + 61);
    }
    else
    {
      v326 = (unsigned __int128 *)&v302[v304 & 0xFFFFFFF0];
      v327 = (unsigned __int128 *)((char *)v119 + 61);
      do
      {
        v328 = (unsigned __int128)vld2q_s8(v303);
        v303 += 32;
        *v327++ = v328;
      }
      while (v327 != v326);
    }
    while (v326 != (unsigned __int128 *)&v302[v304])
    {
      v344 = *v303;
      v303 += 2;
      *(_BYTE *)v326 = v344;
      v326 = (unsigned __int128 *)((char *)v326 + 1);
    }
  }
  v305 = &v302[v12[1]];
  *v305 = 8250;
  v306 = v305 + 1;
  if (v18)
  {
    v307 = (_BYTE *)*((_QWORD *)v18 + 1);
    v308 = *((unsigned int *)v18 + 1);
    if ((*((_BYTE *)v18 + 16) & 4) != 0)
    {
      if ((_DWORD)v308 == 1)
      {
        *v306 = *v307;
      }
      else if ((_DWORD)v308)
      {
        memcpy(v306, v307, v308);
      }
    }
    else
    {
      if (v308 < 0x10)
      {
        v329 = (unsigned __int128 *)v306;
      }
      else
      {
        v329 = (unsigned __int128 *)&v306[v308 & 0xFFFFFFF0];
        v330 = (unsigned __int128 *)v306;
        do
        {
          v331 = (unsigned __int128)vld2q_s8(v307);
          v307 += 32;
          *v330++ = v331;
        }
        while (v330 != v329);
      }
      while (v329 != (unsigned __int128 *)&v306[v308])
      {
        v345 = *v307;
        v307 += 2;
        *(_BYTE *)v329 = v345;
        v329 = (unsigned __int128 *)((char *)v329 + 1);
      }
    }
    v309 = *((unsigned int *)v18 + 1);
  }
  else
  {
    v309 = 0;
  }
  v310 = &v306[v309];
  if (v15)
  {
    v311 = (_BYTE *)*((_QWORD *)v15 + 1);
    v312 = *((unsigned int *)v15 + 1);
    if ((*((_BYTE *)v15 + 16) & 4) != 0)
    {
      if ((_DWORD)v312 == 1)
      {
        *v310 = *v311;
      }
      else if ((_DWORD)v312)
      {
        memcpy(v310, v311, v312);
      }
    }
    else
    {
      if (v312 < 0x10)
      {
        v332 = (unsigned __int128 *)v310;
      }
      else
      {
        v332 = (unsigned __int128 *)&v310[v312 & 0xFFFFFFF0];
        v333 = (unsigned __int128 *)v310;
        do
        {
          v334 = (unsigned __int128)vld2q_s8(v311);
          v311 += 32;
          *v333++ = v334;
        }
        while (v333 != v332);
      }
      while (v332 != (unsigned __int128 *)&v310[v312])
      {
        v346 = *v311;
        v311 += 2;
        *(_BYTE *)v332 = v346;
        v332 = (unsigned __int128 *)((char *)v332 + 1);
      }
    }
    v313 = *((unsigned int *)v15 + 1);
  }
  else
  {
    v313 = 0;
  }
  v314 = &v310[v313];
  if (v20)
  {
    v315 = (_BYTE *)*((_QWORD *)v20 + 1);
    v316 = *((unsigned int *)v20 + 1);
    if ((*((_BYTE *)v20 + 16) & 4) != 0)
    {
      if ((_DWORD)v316 == 1)
      {
        *v314 = *v315;
      }
      else if ((_DWORD)v316)
      {
        memcpy(v314, v315, v316);
      }
    }
    else
    {
      if (v316 < 0x10)
      {
        v335 = (unsigned __int128 *)v314;
      }
      else
      {
        v335 = (unsigned __int128 *)&v314[v316 & 0xFFFFFFF0];
        v336 = (unsigned __int128 *)v314;
        do
        {
          v337 = (unsigned __int128)vld2q_s8(v315);
          v315 += 32;
          *v336++ = v337;
        }
        while (v336 != v335);
      }
      while (v335 != (unsigned __int128 *)&v314[v316])
      {
        v347 = *v315;
        v315 += 2;
        *(_BYTE *)v335 = v347;
        v335 = (unsigned __int128 *)((char *)v335 + 1);
      }
    }
    v317 = *((unsigned int *)v20 + 1);
  }
  else
  {
    v317 = 0;
  }
  v318 = &v314[v317];
  if (v19)
  {
    v319 = (_BYTE *)*((_QWORD *)v19 + 1);
    v320 = *((unsigned int *)v19 + 1);
    if ((*((_BYTE *)v19 + 16) & 4) != 0)
    {
      if ((_DWORD)v320 == 1)
      {
        *v318 = *v319;
      }
      else if ((_DWORD)v320)
      {
        memcpy(v318, v319, v320);
      }
    }
    else
    {
      if (v320 < 0x10)
      {
        v338 = (unsigned __int128 *)v318;
      }
      else
      {
        v338 = (unsigned __int128 *)&v318[v320 & 0xFFFFFFF0];
        v339 = (unsigned __int128 *)v318;
        do
        {
          v340 = (unsigned __int128)vld2q_s8(v319);
          v319 += 32;
          *v339++ = v340;
        }
        while (v339 != v338);
      }
      while (v338 != (unsigned __int128 *)&v318[v320])
      {
        v348 = *v319;
        v319 += 2;
        *(_BYTE *)v338 = v348;
        v338 = (unsigned __int128 *)((char *)v338 + 1);
      }
    }
    v321 = *((unsigned int *)v19 + 1);
  }
  else
  {
    v321 = 0;
  }
  v322 = &v318[v321];
  v323 = v357;
  if (v357)
  {
    v324 = (_BYTE *)*((_QWORD *)v357 + 1);
    v325 = *((unsigned int *)v357 + 1);
    if ((*((_BYTE *)v357 + 16) & 4) != 0)
    {
      if ((_DWORD)v325 == 1)
      {
        *v322 = *v324;
      }
      else if ((_DWORD)v325)
      {
        memcpy(v322, v324, v325);
      }
    }
    else
    {
      if (v325 < 0x10)
      {
        v341 = (unsigned __int128 *)v322;
      }
      else
      {
        v341 = (unsigned __int128 *)&v322[v325 & 0xFFFFFFF0];
        v342 = (unsigned __int128 *)v322;
        do
        {
          v343 = (unsigned __int128)vld2q_s8(v324);
          v324 += 32;
          *v342++ = v343;
        }
        while (v342 != v341);
      }
      while (v341 != (unsigned __int128 *)&v322[v325])
      {
        v349 = *v324;
        v324 += 2;
        *(_BYTE *)v341 = v349;
        v341 = (unsigned __int128 *)((char *)v341 + 1);
      }
    }
    v323 = (WTF::StringImpl *)*((unsigned int *)v357 + 1);
  }
  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)v323 + (_QWORD)v322, (uint64_t)v356, v353, v350, v351, v352, (uint64_t)v355);
LABEL_178:
  *v354 = v119;
  v195 = v359;
  v359 = 0;
  if (v195)
  {
    if (*(_DWORD *)v195 == 2)
    {
      WTF::StringImpl::~StringImpl(v195, a2, a3, __src, a5, a6, a7, a8);
      WTF::fastFree(v214, v215, v216, v217, v218, v219, v220, v221);
    }
    else
    {
      *(_DWORD *)v195 -= 2;
    }
  }
  v196 = v360;
  v360 = 0;
  if (v196)
  {
    if (*(_DWORD *)v196 == 2)
    {
      WTF::StringImpl::~StringImpl(v196, a2, a3, __src, a5, a6, a7, a8);
      WTF::fastFree(v222, v223, v224, v225, v226, v227, v228, v229);
    }
    else
    {
      *(_DWORD *)v196 -= 2;
    }
  }
  v197 = v361;
  v361 = 0;
  if (v197)
  {
    if (*(_DWORD *)v197 == 2)
    {
      WTF::StringImpl::~StringImpl(v197, a2, a3, __src, a5, a6, a7, a8);
      WTF::fastFree(v230, v231, v232, v233, v234, v235, v236, v237);
    }
    else
    {
      *(_DWORD *)v197 -= 2;
    }
  }
  v198 = v362;
  v362 = 0;
  if (v198)
  {
    if (*(_DWORD *)v198 == 2)
    {
      WTF::StringImpl::~StringImpl(v198, a2, a3, __src, a5, a6, a7, a8);
      WTF::fastFree(v238, v239, v240, v241, v242, v243, v244, v245);
    }
    else
    {
      *(_DWORD *)v198 -= 2;
    }
  }
  v199 = v363;
  v363 = 0;
  if (v199)
  {
    if (*(_DWORD *)v199 == 2)
    {
      WTF::StringImpl::~StringImpl(v199, a2, a3, __src, a5, a6, a7, a8);
      WTF::fastFree(v246, v247, v248, v249, v250, v251, v252, v253);
    }
    else
    {
      *(_DWORD *)v199 -= 2;
    }
  }
  v200 = v364;
  v364 = 0;
  if (v200)
  {
    if (*(_DWORD *)v200 == 2)
    {
      WTF::StringImpl::~StringImpl(v200, a2, a3, __src, a5, a6, a7, a8);
      WTF::fastFree(v254, v255, v256, v257, v258, v259, v260, v261);
    }
    else
    {
      *(_DWORD *)v200 -= 2;
    }
  }
  v201 = v365;
  v365 = 0;
  if (v201)
  {
    if (*(_DWORD *)v201 == 2)
    {
      WTF::StringImpl::~StringImpl(v201, a2, a3, __src, a5, a6, a7, a8);
      WTF::fastFree(v262, v263, v264, v265, v266, v267, v268, v269);
    }
    else
    {
      *(_DWORD *)v201 -= 2;
    }
  }
  v202 = v366;
  v366 = 0;
  if (v202)
  {
    if (*(_DWORD *)v202 == 2)
    {
      WTF::StringImpl::~StringImpl(v202, a2, a3, __src, a5, a6, a7, a8);
      WTF::fastFree(v270, v271, v272, v273, v274, v275, v276, v277);
    }
    else
    {
      *(_DWORD *)v202 -= 2;
    }
  }
  v203 = v367;
  v367 = 0;
  if (v203)
  {
    if (*(_DWORD *)v203 == 2)
    {
      WTF::StringImpl::~StringImpl(v203, a2, a3, __src, a5, a6, a7, a8);
      WTF::fastFree(v278, v279, v280, v281, v282, v283, v284, v285);
    }
    else
    {
      *(_DWORD *)v203 -= 2;
    }
  }
  v204 = v368;
  v368 = 0;
  if (v204)
  {
    if (*(_DWORD *)v204 == 2)
    {
      WTF::StringImpl::~StringImpl(v204, a2, a3, __src, a5, a6, a7, a8);
      WTF::fastFree(v286, v287, v288, v289, v290, v291, v292, v293);
    }
    else
    {
      *(_DWORD *)v204 -= 2;
    }
  }
  v205 = v369;
  v369 = 0;
  if (v205)
  {
    if (*(_DWORD *)v205 == 2)
    {
      WTF::StringImpl::~StringImpl(v205, a2, a3, __src, a5, a6, a7, a8);
      WTF::fastFree(v294, v295, v296, v297, v298, v299, v300, v301);
    }
    else
    {
      *(_DWORD *)v205 -= 2;
    }
  }
  if (*v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, a2, a3, __src, a5, a6, a7, a8);
    WTF::fastFree(v206, v207, v208, v209, v210, v211, v212, v213);
  }
  else
  {
    *v12 -= 2;
  }
}

void JSC::Wasm::SectionParser::parseTableHelper(JSC::Wasm::SectionParser *this, uint64_t a2, char a3, double a4, float a5)
{
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char isSubtype;
  uint64_t v34;
  unsigned int v35;
  unint64_t v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  float v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  WTF *v79;
  WTF *v80[2];
  __int128 v81;
  __int128 v82;
  WTF *v83;
  char v84;
  __int128 v85;
  __int16 v86;
  uint64_t v87;
  char v88;
  BOOL v89;
  WTF *v90;
  unsigned int v91;
  uint64_t v92;

  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_DWORD *)(v7 + 204);
  if (v8 > 0xF423F)
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(v80, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "Table count of ", 16, v8, " is too big, maximum ", 22, a4, a5, 1000000);
LABEL_77:
    *(WTF **)this = v80[0];
    *((_BYTE *)this + 8) = 1;
    return;
  }
  v92 = 0;
  v9 = *(_QWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)a2 >= v10 || (v11 = *(_QWORD *)(a2 + 8), v12 = *(char *)(v11 + v9), (v12 & 0x80000000) != 0))
  {
    v61 = *(_QWORD *)(a2 + 48);
    v62 = "can't parse Table information";
    v63 = 30;
LABEL_76:
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(v80, v9, v61, v62, v63, a4, a5);
    goto LABEL_77;
  }
  if ((a3 & 1) == 0
    && (v12 | ((v12 >> 6) << 7)) == 0xC0
    && BYTE1(dword_1ECF4C7B0) != 0)
  {
    v37 = v9 + 1;
    *(_QWORD *)a2 = v9 + 1;
    if (v9 + 1 < v10)
    {
      v9 += 2;
      *(_QWORD *)a2 = v9;
      if (!*(_BYTE *)(v11 + v37))
      {
        v14 = 1;
        goto LABEL_6;
      }
      v37 = v9;
    }
    v61 = *(_QWORD *)(a2 + 48);
    v62 = "can't parse explicitly initialized Table's reserved byte";
    v9 = v37;
    v63 = 57;
    goto LABEL_76;
  }
  v14 = 0;
LABEL_6:
  if (v9 >= v10)
    goto LABEL_75;
  *(_QWORD *)a2 = v9 + 1;
  v15 = *(char *)(v11 + v9);
  if ((v15 & 0x80000000) != 0)
    goto LABEL_75;
  v16 = v15 | (v15 >> 6 << 7);
  if (!JSC::Wasm::isValidTypeKind<signed char>((char)(v15 | ((v15 >> 6) << 7))))
    goto LABEL_75;
  if (!BYTE1(dword_1ECF4C7B0))
  {
    if ((v16 + 29) < 2u)
      goto LABEL_75;
    goto LABEL_12;
  }
  v17 = (char)v16;
  v18 = (char)v16 + 22;
  if (v18 <= 9 && (((1 << v18) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
  {
    LOBYTE(v16) = -29;
    goto LABEL_13;
  }
  if ((v16 + 29) >= 2u)
  {
LABEL_12:
    v17 = 0;
    goto LABEL_13;
  }
  LODWORD(v80[0]) = 0;
  if (!WTF::LEBDecoder::decodeInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (int *)v80))
    goto LABEL_75;
  v17 = SLODWORD(v80[0]);
  if (((uint64_t)v80[0] & 0x80000000) != 0)
  {
    if ((unint64_t)(SLODWORD(v80[0]) + 22) > 9
      || ((1 << (LOBYTE(v80[0]) + 22)) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
    {
      goto LABEL_75;
    }
  }
  else
  {
    if (LODWORD(v80[0]) >= *(_DWORD *)(v7 + 100))
    {
      if (!*(_BYTE *)(a2 + 32))
        goto LABEL_75;
      v60 = *(_DWORD *)(a2 + 36);
      if (LODWORD(v80[0]) < v60 || LODWORD(v80[0]) >= *(_DWORD *)(a2 + 40))
        goto LABEL_75;
    }
    else if (!*(_BYTE *)(a2 + 32) || (v60 = *(_DWORD *)(a2 + 36), LODWORD(v80[0]) < v60))
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v7 + 88) + 8 * LODWORD(v80[0]));
      goto LABEL_13;
    }
    JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(LODWORD(v80[0]) - v60), v55, v56, v57, v58, v59, (unsigned int **)v80);
    v17 = (unint64_t)v80[0];
    v80[0] = 0;
    if (v17)
    {
      do
      {
        v77 = __ldaxr((unsigned int *)v17);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, (unsigned int *)v17));
      if (!v78)
      {
        atomic_store(1u, (unsigned int *)v17);
        WTF::fastFree(v17, v70, v71, v72, v73, v74, v75, v76);
      }
    }
  }
LABEL_13:
  if (!JSC::Wasm::isValueType(v16, v17))
  {
LABEL_75:
    v9 = *(_QWORD *)a2;
    v61 = *(_QWORD *)(a2 + 48);
    v62 = "can't parse Table type";
    v63 = 23;
    goto LABEL_76;
  }
  if (BYTE1(dword_1ECF4C7B0))
    v19 = 29;
  else
    v19 = 17;
  if ((v19 + v16) >= 2u)
  {
    v64 = *(_QWORD *)a2;
    v65 = *(_QWORD *)(a2 + 48);
    v66 = "Table type should be a ref type, got ";
    v67 = 38;
LABEL_69:
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,JSC::Wasm::Type>(v80, v64, v65, v66, v67, v16, v17, a4, a5);
    goto LABEL_77;
  }
  if ((v16 + 15) <= 0xFDu && !BYTE1(dword_1ECF4C7B0))
  {
    v64 = *(_QWORD *)a2;
    v65 = *(_QWORD *)(a2 + 48);
    v66 = "Table type should be funcref or anyref, got ";
    v67 = 45;
    goto LABEL_69;
  }
  if (v16 == 228)
    v20 = v14;
  else
    v20 = 1;
  if ((v20 & 1) == 0)
  {
    v9 = *(_QWORD *)a2;
    v61 = *(_QWORD *)(a2 + 48);
    v62 = "Table's type must be defaultable";
    v63 = 33;
    goto LABEL_76;
  }
  v91 = 0;
  LOBYTE(v90) = 0;
  BYTE4(v90) = 0;
  JSC::Wasm::SectionParser::parseResizableLimits((uint64_t)&v87, a2, (int *)&v91, (uint64_t)&v90, &v89, 1, a4, a5);
  if (v88)
  {
    v68 = v87;
    v87 = 0;
    *(_QWORD *)this = v68;
    *((_BYTE *)this + 8) = 1;
LABEL_36:
    std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v87, v21, v22, v23, v24, v25, v26, v27);
    return;
  }
  v30 = v91;
  if (v91 >= 0x989681)
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(v80, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "Table's initial page count of ", 31, v91, " is too big, maximum ", 22, v28.n128_f64[0], v29, 10000000);
    v69 = v80[0];
LABEL_72:
    *(_QWORD *)this = v69;
    *((_BYTE *)this + 8) = 1;
    goto LABEL_36;
  }
  if (!v14)
  {
LABEL_27:
    if (BYTE1(dword_1ECF4C7B0))
      v31 = 227;
    else
      v31 = 240;
    if (BYTE1(dword_1ECF4C7B0))
      v32 = -16;
    else
      v32 = 0;
    isSubtype = JSC::Wasm::isSubtype(v16, v17, v31, v32, v24, v30, v26, v27);
    v34 = *(_QWORD *)(a2 + 56);
    LODWORD(v80[0]) = v91;
    *(WTF **)((char *)v80 + 4) = v90;
    BYTE4(v80[1]) = a3;
    BYTE5(v80[1]) = 1;
    BYTE6(v80[1]) = isSubtype;
    *(_QWORD *)&v81 = v16;
    *((_QWORD *)&v81 + 1) = v17;
    LOBYTE(v82) = v14;
    *((_QWORD *)&v82 + 1) = v92;
    v35 = *(_DWORD *)(v34 + 204);
    if (v35 == *(_DWORD *)(v34 + 200))
    {
      WTF::Vector<JSC::Wasm::TableInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::TableInformation>(v34 + 192, (unint64_t)v80);
    }
    else
    {
      v52 = (_OWORD *)(*(_QWORD *)(v34 + 192) + 48 * v35);
      v53 = *(_OWORD *)v80;
      v54 = v82;
      v52[1] = v81;
      v52[2] = v54;
      *v52 = v53;
      ++*(_DWORD *)(v34 + 204);
    }
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 8) = 0;
    goto LABEL_36;
  }
  v86 = 0;
  JSC::Wasm::SectionParser::parseInitExpr((uint64_t)&v83, a2, (unsigned __int8 *)&v86 + 1, &v86, &v92, &v85, v16, v17, v28, v29, (__n128 *)v80);
  if (v84)
  {
    v79 = v83;
    v83 = 0;
    *(_QWORD *)this = v79;
    *((_BYTE *)this + 8) = 1;
    std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v83, v38, v39, v40, v41, v42, v43, v44);
    goto LABEL_36;
  }
  std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v83, v38, v39, v40, v41, v42, v43, v44);
  v45 = (char)v80[0];
  if ((JSC::Wasm::isSubtype(v80[0], (unint64_t)v80[1], v16, v17, v46, v47, v48, v49) & 1) == 0)
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,JSC::Wasm::TypeKind,WTF::ASCIILiteral,JSC::Wasm::TypeKind>(&v83, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "Table init_expr opcode of type ", 32, v45, " doesn't match table's type ", 29, v50, v51, v16);
    v69 = v83;
    goto LABEL_72;
  }
  if ((_BYTE)v86)
  {
    LOBYTE(v14) = 4;
    goto LABEL_27;
  }
  switch(HIBYTE(v86))
  {
    case 0x23u:
      LOBYTE(v14) = 1;
      goto LABEL_27;
    case 0xD0u:
      LOBYTE(v14) = 3;
      goto LABEL_27;
    case 0xD2u:
      LOBYTE(v14) = 2;
      goto LABEL_27;
  }
  __break(0xC471u);
}

void JSC::Wasm::SectionParser::parseMemoryHelper(JSC::Wasm::SectionParser *this, uint64_t *a2, char a3, double a4, float a5)
{
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  float v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  unsigned int v28;
  char v29;
  unsigned int v30;
  char v31;

  if (*(_DWORD *)(a2[7] + 104) != -1)
  {
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v26, *a2, a2[6], "there can at most be one Memory section for now", 48, a4, a5);
    *(_QWORD *)this = v26;
    *((_BYTE *)this + 8) = 1;
    return;
  }
  v31 = 0;
  v30 = 0;
  LOBYTE(v28) = 0;
  v29 = 0;
  JSC::Wasm::SectionParser::parseResizableLimits((uint64_t)&v26, (uint64_t)a2, (int *)&v30, (uint64_t)&v28, (BOOL *)&v31, 0, a4, a5);
  if ((_BYTE)v27)
  {
    v20 = v26;
    v26 = 0;
LABEL_13:
    *(_QWORD *)this = v20;
    *((_BYTE *)this + 8) = 1;
    std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v26, v8, v9, v10, v11, v12, v13, v14);
    return;
  }
  v17 = v30;
  if (v30 > 0x10000)
  {
    v21 = *a2;
    v22 = a2[6];
    v23 = "Memory's initial page count of ";
    v24 = v30;
LABEL_12:
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v25, v21, v22, v23, 32, v24, " is invalid", 12, v15, v16);
    v20 = v25;
    goto LABEL_13;
  }
  if (!v29)
  {
    v18 = -1;
    goto LABEL_6;
  }
  v18 = v28;
  if (v28 >= 0x10001)
  {
    v21 = *a2;
    v22 = a2[6];
    v23 = "Memory's maximum page count of ";
    v24 = v28;
    goto LABEL_12;
  }
LABEL_6:
  std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v26, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::MemoryInformation::MemoryInformation((uint64_t)&v26, v17, v18, v31, a3);
  v19 = a2[7];
  *(_QWORD *)(v19 + 104) = v26;
  *(_WORD *)(v19 + 112) = v27;
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
}

void JSC::Wasm::SectionParser::parseGlobalType(_BYTE *a1, uint64_t a2, uint64_t a3, double a4, float a5)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  WTF *v38;
  __int128 v39;
  unsigned int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
    goto LABEL_30;
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)a2 = v7 + 1;
  v9 = *(char *)(*(_QWORD *)(a2 + 8) + v7);
  if ((v9 & 0x80000000) != 0)
    goto LABEL_30;
  v11 = v9 | (v9 >> 6 << 7);
  if (!JSC::Wasm::isValidTypeKind<signed char>((char)(v9 | ((v9 >> 6) << 7))))
    goto LABEL_30;
  if (!BYTE1(dword_1ECF4C7B0))
  {
    if ((v11 + 29) < 2u)
      goto LABEL_30;
    goto LABEL_7;
  }
  v12 = (char)v11;
  v13 = (char)v11 + 22;
  if (v13 <= 9 && (((1 << v13) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
  {
    LOBYTE(v11) = -29;
    goto LABEL_8;
  }
  if ((v11 + 29) >= 2u)
  {
LABEL_7:
    v12 = 0;
    goto LABEL_8;
  }
  LODWORD(v38) = 0;
  if (!WTF::LEBDecoder::decodeInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (int *)&v38))
    goto LABEL_30;
  v12 = (int)v38;
  if ((v38 & 0x80000000) != 0)
  {
    if ((unint64_t)((int)v38 + 22) > 9
      || ((1 << (v38 + 22)) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
    {
      goto LABEL_30;
    }
  }
  else
  {
    if (v38 >= *(_DWORD *)(v8 + 100))
    {
      if (!*(_BYTE *)(a2 + 32))
        goto LABEL_30;
      v22 = *(_DWORD *)(a2 + 36);
      if (v38 < v22 || v38 >= *(_DWORD *)(a2 + 40))
        goto LABEL_30;
    }
    else if (!*(_BYTE *)(a2 + 32) || (v22 = *(_DWORD *)(a2 + 36), v38 < v22))
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 8 * v38);
      goto LABEL_8;
    }
    JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(v38 - v22), v17, v18, v19, v20, v21, (unsigned int **)&v38);
    v12 = (unint64_t)v38;
    v38 = 0;
    if (v12)
    {
      do
      {
        v36 = __ldaxr((unsigned int *)v12);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, (unsigned int *)v12));
      if (!v37)
      {
        atomic_store(1u, (unsigned int *)v12);
        WTF::fastFree(v12, v29, v30, v31, v32, v33, v34, v35);
      }
    }
  }
LABEL_8:
  if (!JSC::Wasm::isValueType(v11, v12))
  {
LABEL_30:
    v14 = *(_QWORD *)a2;
    v26 = *(_QWORD *)(a2 + 48);
    v27 = "can't get Global's value type";
    v28 = 30;
LABEL_31:
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v38, v14, v26, v27, v28, a4, a5);
    goto LABEL_32;
  }
  *(_QWORD *)(a3 + 8) = v11;
  *(_QWORD *)(a3 + 16) = v12;
  v14 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
  {
    v26 = *(_QWORD *)(a2 + 48);
    v27 = "can't get Global type's mutability";
    v28 = 35;
    goto LABEL_31;
  }
  v15 = v14 + 1;
  *(_QWORD *)a2 = v14 + 1;
  v16 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v14);
  if (v16 < 2)
  {
    *(_BYTE *)a3 = v16;
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  v23 = 15;
  do
  {
    *((_BYTE *)&v39 + v23--) = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v16 & 0xF];
    v24 = v16 > 0xF;
    v16 >>= 4;
  }
  while (v24);
  if (v23 + 2 < 16)
  {
    v25 = (char *)&v39 + v23 + 1;
  }
  else
  {
    v25 = (char *)&v39 + 14;
    memset((char *)&v39 + 14, 48, v23 - 13);
  }
  v40 = &v40 - (_DWORD)v25;
  JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,WTF::HexNumberBuffer>(&v38, v15, *(_QWORD *)(a2 + 48), "invalid Global's mutability: 0x", 32, &v39, a4, a5);
LABEL_32:
  *(_QWORD *)a1 = v38;
  a1[8] = 1;
}

void JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, char *a5, uint64_t a6, int a7)
{
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int *v16;
  _BYTE *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  float v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  float v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  int *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  int *v114;
  const char *v115;
  int v116;
  const char *v117;
  WTF *v118;
  __int128 v119;
  _BYTE v120[128];
  uint64_t v121;

  v12 = 0;
  v121 = *MEMORY[0x1E0C80C00];
  v13 = a3 + a2;
  do
  {
    v14 = (v13 % 0xA) | 0x30;
    v120[v12-- - 8] = v14;
    v15 = v13 > 9;
    v13 /= 0xAuLL;
  }
  while (v15);
  if (v12 + 26 >= 27)
    __break(1u);
  if (v12)
  {
    if ((unint64_t)-v12 >> 31)
    {
      __break(0xC471u);
LABEL_63:
      JUMPOUT(0x198E19A08);
    }
    v16 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v12));
    v17 = v16 + 5;
    *v16 = 2;
    v16[1] = -(int)v12;
    *((_QWORD *)v16 + 1) = v16 + 5;
    v16[4] = 4;
    if (v12 == -1)
      *v17 = v14;
    else
      memcpy(v17, &v120[v12 - 7], -v12);
  }
  else
  {
    v16 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v117 = (const char *)off_1E3572250;
  v118 = (WTF *)v120;
  v119 = xmmword_199122F80;
  v120[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v117, "%u", a4);
  (*((void (**)(const char **))v117 + 5))(&v117);
  v25 = v118;
  if (!v118)
  {
    v108 = 0;
    goto LABEL_14;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v118, v119, (uint64_t *)&v108);
  v25 = v118;
  if (v118 != (WTF *)v120)
LABEL_14:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v117 = (const char *)off_1E3572250;
  v118 = (WTF *)v120;
  v119 = xmmword_199122F80;
  v120[0] = 0;
  if (a5)
  {
    v27 = a6 - 1;
    if (!a6)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v27, (uint64_t)&v115, v26);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v115 = (const char *)v28;
    v116 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v117, "StringView", &v115);
  if (v116 != -1)
    ((void (*)(int **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v116])(&v114, &v115);
  (*((void (**)(const char **))v117 + 5))(&v117);
  (*((void (**)(const char **))v117 + 5))(&v117);
  v36 = v118;
  if (!v118)
  {
    v107 = 0;
    goto LABEL_26;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v118, v119, (uint64_t *)&v107);
  v36 = v118;
  if (v118 != (WTF *)v120)
LABEL_26:
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  v117 = (const char *)off_1E3572250;
  v118 = (WTF *)v120;
  v119 = xmmword_199122F80;
  v120[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v117, "%u", a7);
  (*((void (**)(const char **))v117 + 5))(&v117);
  v44 = v118;
  if (!v118)
  {
    v106 = 0;
    goto LABEL_31;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v118, v119, (uint64_t *)&v106);
  v44 = v118;
  if (v118 != (WTF *)v120)
LABEL_31:
    WTF::fastFree((unint64_t)v44, v37, v38, v39, v40, v41, v42, v43);
  v117 = (const char *)off_1E3572250;
  v118 = (WTF *)v120;
  v119 = xmmword_199122F80;
  v120[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" but the only supported tag type is 0", 0x25uLL, (uint64_t)&v115, v45);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v117, "StringView", &v115);
  if (v116 != -1)
    ((void (*)(int **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v116])(&v114, &v115);
  (*((void (**)(const char **))v117 + 5))(&v117);
  (*((void (**)(const char **))v117 + 5))(&v117);
  v53 = v118;
  if (!v118)
  {
    v105 = 0;
    goto LABEL_38;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v118, v119, (uint64_t *)&v105);
  v53 = v118;
  if (v118 != (WTF *)v120)
LABEL_38:
    WTF::fastFree((unint64_t)v53, v46, v47, v48, v49, v50, v51, v52);
  v117 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v118) = 41;
  v114 = v16;
  v115 = ": ";
  v116 = 2;
  v112 = v107;
  v113 = v108;
  v110 = v105;
  v111 = v106;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v117, (uint64_t *)&v114, (uint64_t)&v115, (uint64_t *)&v113, (uint64_t *)&v112, (uint64_t *)&v111, (uint64_t *)&v110, &v109);
  if (!v109)
  {
    __break(0xC471u);
    goto LABEL_63;
  }
  *a1 = v109;
  v109 = 0;
  v61 = v105;
  v105 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
  v62 = v106;
  v106 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  v63 = v107;
  v107 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  v64 = v108;
  v108 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, v54, v55, v56, v57, v58, v59, v60);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v64 -= 2;
    }
  }
  if (*v16 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v54, v55, v56, v57, v58, v59, v60);
    WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
  }
  else
  {
    *v16 -= 2;
  }
}

void JSC::Wasm::Import::~Import(JSC::Wasm::Import *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;

  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Wasm::SectionParser::parseFunction(JSC::Wasm::SectionParser *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;
  unint64_t StatusReg;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  void *ptr[2];
  char v43;
  uint64_t v44;
  int v45;

  v45 = 0;
  if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v45))
  {
LABEL_47:
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v41, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "can't get Function section's count", 35, *(double *)&v10, v11);
LABEL_40:
    *(_QWORD *)this = v41;
    *((_BYTE *)this + 8) = 1;
    return;
  }
  v12 = v45;
  if (v45 >= 0xF4241)
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v41, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "Function section's count is too big ", 37, v45, " maximum ", 10, *(double *)&v10, v11, 1000000);
    goto LABEL_40;
  }
  v13 = *(_QWORD *)(a2 + 56);
  if (*(_DWORD *)(v13 + 48))
  {
    __break(0xC471u);
    JUMPOUT(0x198E19E28);
  }
  if (*(_DWORD *)(v13 + 128))
  {
    __break(0xC471u);
    JUMPOUT(0x198E19E48);
  }
  if (!v45)
    goto LABEL_36;
  v14 = WTF::VectorBufferBase<unsigned long long,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(v13 + 40, v45);
  v12 = v45;
  if ((v14 & 1) == 0)
  {
    v19 = *(_QWORD *)a2;
    v36 = *(_QWORD *)(a2 + 48);
    v37 = "can't allocate enough memory for ";
    v38 = " Function signatures";
    v39 = 34;
    v40 = 21;
LABEL_55:
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v41, v19, v36, v37, v39, v12, v38, v40, *(double *)&v10, v11);
    goto LABEL_40;
  }
  if (!v45)
    goto LABEL_36;
  v15 = WTF::VectorBufferBase<JSC::Wasm::Import,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(*(_QWORD *)(a2 + 56) + 120, v45);
  v12 = v45;
  if ((v15 & 1) == 0)
  {
    v19 = *(_QWORD *)a2;
    v36 = *(_QWORD *)(a2 + 48);
    v37 = "can't allocate enough memory for ";
    v38 = "Function locations";
    v39 = 34;
    v40 = 19;
    goto LABEL_55;
  }
  if (v45)
  {
    v16 = 0;
    v10 = 0uLL;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (2)
    {
      v18 = *(_QWORD *)(a2 + 16);
      v19 = *(_QWORD *)a2;
      v20 = v18 - *(_QWORD *)a2;
      if (v18 > *(_QWORD *)a2)
      {
        v21 = 0;
        v22 = 0;
        LODWORD(v8) = 0;
        v23 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a2 = v19 + 1;
        v24 = v23 + v19;
        v25 = v19 - v18;
        while (1)
        {
          v26 = *(char *)(v24 + v21);
          v8 = ((v26 & 0x7F) << v22) | v8;
          if ((v26 & 0x80000000) == 0)
            break;
          if (v20 >= 5)
            v35 = 5;
          else
            v35 = v20;
          if (v35 - 1 == v21)
            goto LABEL_53;
          *(_QWORD *)a2 = v19 + v21++ + 2;
          v22 += 7;
          if (!(v25 + v21))
          {
            __break(1u);
            goto LABEL_47;
          }
        }
        if ((_DWORD)v21 == 4 && *(unsigned __int8 *)(v24 + v21) >= 0x10u)
        {
LABEL_53:
          v19 += v21 + 1;
          break;
        }
        v27 = *(_QWORD *)(a2 + 56);
        if (v8 >= *(_DWORD *)(v27 + 100))
        {
          JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned int>(&v41, v19 + v21 + 1, *(_QWORD *)(a2 + 48), v16, "th Function type number is invalid ", 36, v8);
          goto LABEL_40;
        }
        v44 = 0;
        v28 = *(_QWORD *)(*(_QWORD *)(v27 + 88) + 8 * v8);
        v44 = v28;
        v29 = *(unsigned int *)(v27 + 52);
        if ((_DWORD)v29 == *(_DWORD *)(v27 + 48))
        {
          WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long &>(v27 + 40, (unint64_t)&v44);
          v10 = 0uLL;
          v27 = *(_QWORD *)(a2 + 56);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v27 + 40) + 8 * v29) = v28;
          *(_DWORD *)(v27 + 52) = v29 + 1;
        }
        v41 = v10;
        *(_OWORD *)ptr = v10;
        v43 &= 0xF0u;
        v30 = *(_DWORD *)(v27 + 132);
        if (v30 == *(_DWORD *)(v27 + 128))
        {
          WTF::Vector<JSC::Wasm::FunctionData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::FunctionData>(v27 + 120, (unint64_t)&v41);
          v10 = 0uLL;
        }
        else
        {
          v31 = *(_QWORD *)(v27 + 120) + 40 * v30;
          *(_OWORD *)v31 = v10;
          *(_OWORD *)(v31 + 16) = v10;
          v32 = ptr[0];
          ptr[0] = 0;
          *(_QWORD *)(v31 + 16) = v32;
          *(_DWORD *)(v31 + 24) = ptr[1];
          LODWORD(v32) = HIDWORD(ptr[1]);
          HIDWORD(ptr[1]) = 0;
          *(_DWORD *)(v31 + 28) = (_DWORD)v32;
          *(_BYTE *)(v31 + 32) = v43;
          ++*(_DWORD *)(v27 + 132);
        }
        v4 = (unint64_t)ptr[0];
        if (!ptr[0])
          goto LABEL_27;
        ptr[0] = 0;
        LODWORD(ptr[1]) = 0;
        v33 = *(_QWORD *)(StatusReg + 752);
        if (v33)
        {
          if (!(v4 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v4 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v4)) & 1) != 0)
          {
            goto LABEL_24;
          }
          if (v4 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v4 >> 24)
          {
            v6 = 0;
          }
          else
          {
            v6 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v4 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v4) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v6 == 1)
            {
LABEL_24:
              v34 = *(unsigned int *)(v33 + 8000);
              if (v34 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v33, v4, (os_unfair_lock_s *)5, v6, v7, v12, v8, v9);
              }
              else
              {
                *(_QWORD *)(v33 + 8 * v34) = v4 | 0x5000000000000;
                *(_DWORD *)(v33 + 8000) = v34 + 1;
              }
              goto LABEL_26;
            }
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v33, v4, 1, v6, v7, v12, v8, v9);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v4, (uint64_t)&bmalloc_heap_config, 1);
        }
LABEL_26:
        v10 = 0uLL;
LABEL_27:
        if (++v16 < v45)
          continue;
        goto LABEL_36;
      }
      break;
    }
    v36 = *(_QWORD *)(a2 + 48);
    v37 = "can't get ";
    v38 = "th Function's type number";
    v39 = 11;
    LODWORD(v12) = v16;
    v40 = 26;
    goto LABEL_55;
  }
LABEL_36:
  JSC::Wasm::ModuleInformation::initializeFunctionTrackers(*(JSC::Wasm::ModuleInformation **)(a2 + 56), v4, v5, v6, v7, v12, v8, v9);
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
}

void JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, char *a5, uint64_t a6, int a7)
{
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int *v16;
  _BYTE *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  float v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  int *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  int *v94;
  const char *v95;
  int v96;
  const char *v97;
  WTF *v98;
  __int128 v99;
  _BYTE v100[128];
  uint64_t v101;

  v12 = 0;
  v101 = *MEMORY[0x1E0C80C00];
  v13 = a3 + a2;
  do
  {
    v14 = (v13 % 0xA) | 0x30;
    v100[v12-- - 8] = v14;
    v15 = v13 > 9;
    v13 /= 0xAuLL;
  }
  while (v15);
  if (v12 + 26 >= 27)
    __break(1u);
  if (v12)
  {
    if ((unint64_t)-v12 >> 31)
    {
      __break(0xC471u);
LABEL_52:
      JUMPOUT(0x198E1A2ECLL);
    }
    v16 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v12));
    v17 = v16 + 5;
    *v16 = 2;
    v16[1] = -(int)v12;
    *((_QWORD *)v16 + 1) = v16 + 5;
    v16[4] = 4;
    if (v12 == -1)
      *v17 = v14;
    else
      memcpy(v17, &v100[v12 - 7], -v12);
  }
  else
  {
    v16 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v97 = (const char *)off_1E3572250;
  v98 = (WTF *)v100;
  v99 = xmmword_199122F80;
  v100[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v97, "%u", a4);
  (*((void (**)(const char **))v97 + 5))(&v97);
  v25 = v98;
  if (!v98)
  {
    v89 = 0;
    goto LABEL_14;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v98, v99, (uint64_t *)&v89);
  v25 = v98;
  if (v98 != (WTF *)v100)
LABEL_14:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v97 = (const char *)off_1E3572250;
  v98 = (WTF *)v100;
  v99 = xmmword_199122F80;
  v100[0] = 0;
  if (a5)
  {
    v27 = a6 - 1;
    if (!a6)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v27, (uint64_t)&v95, v26);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v95 = (const char *)v28;
    v96 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v97, "StringView", &v95);
  if (v96 != -1)
    ((void (*)(int **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v96])(&v94, &v95);
  (*((void (**)(const char **))v97 + 5))(&v97);
  (*((void (**)(const char **))v97 + 5))(&v97);
  v36 = v98;
  if (!v98)
  {
    v88 = 0;
    goto LABEL_26;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v98, v99, (uint64_t *)&v88);
  v36 = v98;
  if (v98 != (WTF *)v100)
LABEL_26:
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  v97 = (const char *)off_1E3572250;
  v98 = (WTF *)v100;
  v99 = xmmword_199122F80;
  v100[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v97, "%u", a7);
  (*((void (**)(const char **))v97 + 5))(&v97);
  v44 = v98;
  if (!v98)
  {
    v87 = 0;
    goto LABEL_31;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v98, v99, (uint64_t *)&v87);
  v44 = v98;
  if (v98 != (WTF *)v100)
LABEL_31:
    WTF::fastFree((unint64_t)v44, v37, v38, v39, v40, v41, v42, v43);
  v97 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v98) = 41;
  v94 = v16;
  v95 = ": ";
  v96 = 2;
  v92 = v88;
  v93 = v89;
  v91 = v87;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v97, (uint64_t *)&v94, (uint64_t)&v95, (uint64_t *)&v93, (uint64_t *)&v92, (uint64_t *)&v91, &v90);
  if (!v90)
  {
    __break(0xC471u);
    goto LABEL_52;
  }
  *a1 = v90;
  v90 = 0;
  v52 = v87;
  v87 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  v53 = v88;
  v88 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
  }
  v54 = v89;
  v89 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  if (*v16 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v45, v46, v47, v48, v49, v50, v51);
    WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
  }
  else
  {
    *v16 -= 2;
  }
}

void JSC::Wasm::ModuleInformation::initializeFunctionTrackers(JSC::Wasm::ModuleInformation *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  WTF::BitVector *v10;
  WTF::BitVector *v11;
  WTF::BitVector::OutOfLineBits *v12;
  WTF::BitVector::OutOfLineBits *v13;
  unint64_t v14;

  v9 = *((unsigned int *)this + 13) + (unint64_t)*((unsigned int *)this + 9);
  v14 = 0x8000000000000000;
  if (v9 >= 0x40)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v14, v9, 0);
  v10 = (JSC::Wasm::ModuleInformation *)((char *)this + 320);
  if ((*((_QWORD *)this + 40) & 0x8000000000000000) != 0 && (v14 & 0x8000000000000000) != 0)
  {
    *(_QWORD *)v10 = v14;
  }
  else
  {
    WTF::BitVector::setSlow(v10, (const WTF::BitVector *)&v14, a3, a4, a5, a6, a7, a8);
    if ((v14 & 0x8000000000000000) == 0)
      WTF::BitVector::OutOfLineBits::destroy((WTF::BitVector::OutOfLineBits *)(2 * v14), v12);
  }
  v14 = 0x8000000000000000;
  if (v9 >= 0x40)
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v14, v9, 0);
  v11 = (JSC::Wasm::ModuleInformation *)((char *)this + 328);
  if ((*((_QWORD *)this + 41) & 0x8000000000000000) != 0 && (v14 & 0x8000000000000000) != 0)
  {
    *(_QWORD *)v11 = v14;
  }
  else
  {
    WTF::BitVector::setSlow(v11, (const WTF::BitVector *)&v14, a3, a4, a5, a6, a7, a8);
    if ((v14 & 0x8000000000000000) == 0)
      WTF::BitVector::OutOfLineBits::destroy((WTF::BitVector::OutOfLineBits *)(2 * v14), v13);
  }
}

void JSC::Wasm::SectionParser::parseResizableLimits(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, BOOL *a5, int a6, double a7, float a8)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v19;
  BOOL v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  unsigned int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  if (v10 >= v11)
  {
    v23 = *(_QWORD *)(a2 + 48);
    v24 = "can't parse resizable limits flags";
    v22 = v10;
    v25 = 35;
    goto LABEL_28;
  }
  v12 = v10 + 1;
  *(_QWORD *)a2 = v10 + 1;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(unsigned __int8 *)(v13 + v10);
  if (v14 > 3 || (_DWORD)v14 == 2)
  {
    v19 = 15;
    do
    {
      *((_BYTE *)&v28 + v19--) = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::lowercaseHexDigits[v14 & 0xF];
      v20 = v14 > 0xF;
      v14 >>= 4;
    }
    while (v20);
    if (v19 + 2 < 16)
    {
      v21 = (char *)&v28 + v19 + 1;
    }
    else
    {
      v21 = (char *)&v28 + 14;
      memset((char *)&v28 + 14, 48, v19 - 13);
    }
    v29 = &v29 - (_DWORD)v21;
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,WTF::HexNumberBuffer>(&v27, v12, *(_QWORD *)(a2 + 48), "resizable limits flag should be 0x00, 0x01, or 0x03 but 0x", 59, &v28, a7, a8);
    goto LABEL_22;
  }
  if (a6 && (_DWORD)v14 == 3)
  {
    v23 = *(_QWORD *)(a2 + 48);
    v24 = "can't use shared limits for non memory";
    v22 = v10 + 1;
    v25 = 39;
    goto LABEL_28;
  }
  if (!WTF::LEBDecoder::decodeUInt32(v13, v11, (uint64_t *)a2, a3))
  {
    v22 = *(_QWORD *)a2;
    v23 = *(_QWORD *)(a2 + 48);
    v24 = "can't parse resizable limits initial page count";
LABEL_27:
    v25 = 48;
    goto LABEL_28;
  }
  *a5 = (_DWORD)v14 == 3;
  if ((_DWORD)v14 == 3)
  {
    if (BYTE3(qword_1ECF4C789))
      goto LABEL_11;
    v22 = *(_QWORD *)a2;
    v23 = *(_QWORD *)(a2 + 48);
    v24 = "shared memory is not enabled";
    v25 = 29;
LABEL_28:
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v27, v22, v23, v24, v25, a7, a8);
    goto LABEL_22;
  }
  if ((_DWORD)v14)
  {
LABEL_11:
    v26 = 0;
    if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v26))
    {
      if (*a3 <= v26)
      {
        *(_DWORD *)a4 = v26;
        *(_BYTE *)(a4 + 4) = 1;
        goto LABEL_14;
      }
      JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v27, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "resizable limits has an initial page count of ", 47, *a3, " which is greater than its maximum ", 36, a7, a8, v26);
LABEL_22:
      *(_QWORD *)a1 = v27;
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
    v22 = *(_QWORD *)a2;
    v23 = *(_QWORD *)(a2 + 48);
    v24 = "can't parse resizable limits maximum page count";
    goto LABEL_27;
  }
LABEL_14:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,WTF::HexNumberBuffer>(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, __int128 *a6, double a7, float a8)
{
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int *v16;
  _BYTE *v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  float v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  int v73;
  char v74;
  int8x16_t *v75;
  WTF *v76;
  __int128 v77;
  _BYTE v78[128];
  __int128 v79;
  unsigned int v80;
  uint64_t v81;

  v12 = 0;
  v81 = *MEMORY[0x1E0C80C00];
  v13 = a3 + a2;
  do
  {
    v14 = (v13 % 0xA) | 0x30;
    v78[v12-- - 8] = v14;
    v15 = v13 > 9;
    v13 /= 0xAuLL;
  }
  while (v15);
  if (v12 + 26 >= 27)
    __break(1u);
  if (v12)
  {
    if ((unint64_t)-v12 >> 31)
    {
      __break(0xC471u);
LABEL_45:
      JUMPOUT(0x198E1A9F8);
    }
    v16 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v12));
    v17 = v16 + 5;
    *v16 = 2;
    v16[1] = -(int)v12;
    *((_QWORD *)v16 + 1) = v16 + 5;
    v16[4] = 4;
    if (v12 == -1)
      *v17 = v14;
    else
      memcpy(v17, &v78[v12 - 7], -v12);
  }
  else
  {
    v16 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v75 = (int8x16_t *)off_1E3572250;
  v76 = (WTF *)v78;
  v77 = xmmword_199122F80;
  v78[0] = 0;
  if (a4)
  {
    v18 = a5 - 1;
    if (!a5)
      v18 = 0;
    WTF::StringImpl::utf8ForCharacters(a4, v18, (uint64_t)&v79, a8);
  }
  else
  {
    v19 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0;
    *(_BYTE *)(v19 + 16) = 0;
    *(_QWORD *)&v79 = v19;
    DWORD2(v79) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v75, "StringView", &v79);
  if (DWORD2(v79) != -1)
    ((void (*)(uint64_t *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[DWORD2(v79)])(&v72, &v79);
  ((void (*)(int8x16_t **))v75[2].i64[1])(&v75);
  ((void (*)(int8x16_t **))v75[2].i64[1])(&v75);
  v27 = v76;
  if (!v76)
  {
    v71 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v76, v77, (uint64_t *)&v71);
  v27 = v76;
  if (v76 != (WTF *)v78)
LABEL_21:
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  v75 = (int8x16_t *)off_1E3572250;
  v76 = (WTF *)v78;
  v77 = xmmword_199122F80;
  v78[0] = 0;
  v79 = *a6;
  v80 = *((_DWORD *)a6 + 4);
  WTF::StringImpl::utf8ForCharacters((char *)&v80 - v80, v80, (uint64_t)&v72, v28);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v75, "StringView", &v72);
  if (v73 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v73])(&v74, &v72);
  ((void (*)(int8x16_t **))v75[2].i64[1])(&v75);
  ((void (*)(int8x16_t **))v75[2].i64[1])(&v75);
  v36 = v76;
  if (!v76)
  {
    v70 = 0;
    goto LABEL_28;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v76, v77, (uint64_t *)&v70);
  v36 = v76;
  if (v76 != (WTF *)v78)
LABEL_28:
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  v75 = (int8x16_t *)"WebAssembly.Module doesn't parse at byte ";
  LODWORD(v76) = 41;
  *(_QWORD *)&v79 = ": ";
  DWORD2(v79) = 2;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v72, &v75, (uint64_t)v16, (uint64_t)&v79, (uint64_t)v71, (uint64_t)v70);
  if (!v72)
  {
    __break(0xC471u);
    goto LABEL_45;
  }
  *a1 = v72;
  v44 = v70;
  v70 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v37, v38, v39, v40, v41, v42, v43);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
  v45 = v71;
  v71 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl(v45, v37, v38, v39, v40, v41, v42, v43);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v45 -= 2;
    }
  }
  if (*v16 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v37, v38, v39, v40, v41, v42, v43);
    WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
  }
  else
  {
    *v16 -= 2;
  }
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,JSC::Wasm::Type>(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, float a9)
{
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int *v16;
  _BYTE *v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  _QWORD v72[2];
  const char *v73;
  int v74;
  int8x16_t *v75;
  WTF *v76;
  __int128 v77;
  _BYTE v78[128];
  uint64_t v79;

  v12 = 0;
  v79 = *MEMORY[0x1E0C80C00];
  v72[0] = a6;
  v72[1] = a7;
  v13 = a3 + a2;
  do
  {
    v14 = (v13 % 0xA) | 0x30;
    v78[v12-- - 8] = v14;
    v15 = v13 > 9;
    v13 /= 0xAuLL;
  }
  while (v15);
  if (v12 + 26 >= 27)
    __break(1u);
  if (v12)
  {
    if ((unint64_t)-v12 >> 31)
    {
      __break(0xC471u);
LABEL_43:
      JUMPOUT(0x198E1AD54);
    }
    v16 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v12));
    v17 = v16 + 5;
    *v16 = 2;
    v16[1] = -(int)v12;
    *((_QWORD *)v16 + 1) = v16 + 5;
    v16[4] = 4;
    if (v12 == -1)
      *v17 = v14;
    else
      memcpy(v17, &v78[v12 - 7], -v12);
  }
  else
  {
    v16 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v75 = (int8x16_t *)off_1E3572250;
  v76 = (WTF *)v78;
  v77 = xmmword_199122F80;
  v78[0] = 0;
  if (a4)
  {
    v18 = a5 - 1;
    if (!a5)
      v18 = 0;
    WTF::StringImpl::utf8ForCharacters(a4, v18, (uint64_t)&v73, a9);
  }
  else
  {
    v19 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0;
    *(_BYTE *)(v19 + 16) = 0;
    v73 = (const char *)v19;
    v74 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v75, "StringView", &v73);
  if (v74 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v74])(&v71, &v73);
  ((void (*)(int8x16_t **))v75[2].i64[1])(&v75);
  ((void (*)(int8x16_t **))v75[2].i64[1])(&v75);
  v27 = v76;
  if (!v76)
  {
    v70 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v76, v77, (uint64_t *)&v70);
  v27 = v76;
  if (v76 != (WTF *)v78)
LABEL_21:
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  v75 = (int8x16_t *)off_1E3572250;
  v76 = (WTF *)v78;
  v77 = xmmword_199122F80;
  v78[0] = 0;
  JSC::Wasm::Type::dump((uint64_t)v72, (WTF::PrintStream *)&v75);
  ((void (*)(int8x16_t **))v75[2].i64[1])(&v75);
  v35 = v76;
  if (!v76)
  {
    v69 = 0;
    goto LABEL_26;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v76, v77, (uint64_t *)&v69);
  v35 = v76;
  if (v76 != (WTF *)v78)
LABEL_26:
    WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
  v75 = (int8x16_t *)"WebAssembly.Module doesn't parse at byte ";
  LODWORD(v76) = 41;
  v73 = ": ";
  v74 = 2;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v71, &v75, (uint64_t)v16, (uint64_t)&v73, (uint64_t)v70, (uint64_t)v69);
  if (!v71)
  {
    __break(0xC471u);
    goto LABEL_43;
  }
  *a1 = v71;
  v43 = v69;
  v69 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v70;
  v70 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
  if (*v16 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v36, v37, v38, v39, v40, v41, v42);
    WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
  }
  else
  {
    *v16 -= 2;
  }
}

void JSC::Wasm::SectionParser::parseInitExpr(uint64_t a1, uint64_t a2, unsigned __int8 *a3, _BYTE *a4, uint64_t *a5, _OWORD *a6, unint64_t a7, unint64_t a8, __n128 a9, float a10, __n128 *a11)
{
  uint64_t v11;
  unint64_t v14;
  unsigned __int8 *v19;
  int v20;
  WTF *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __int128 *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  WTF *v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  unsigned __int8 v83;
  _BOOL4 isValueType;
  char v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  unint64_t v103;
  WTF *v104;
  unsigned int *v105;
  unsigned __int8 v106;
  WTF *v107;
  unsigned int *v108;
  WTF *v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
  {
    v37 = *(_QWORD *)(a2 + 48);
    v38 = "can't get init_expr's opcode";
    v22 = *(_QWORD *)a2;
LABEL_121:
    v39 = 29;
LABEL_113:
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v108, v22, v37, v38, v39, a9.n128_f64[0], a10);
    goto LABEL_91;
  }
  v19 = a3;
  *(_QWORD *)a2 = v14 + 1;
  v20 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v14);
  *a3 = v20;
  if (v20 != 65)
  {
    if (v20 <= 65)
    {
      if (v20 == 35)
      {
        LODWORD(v107) = 0;
        if (WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v107))
        {
          v33 = v107;
          v34 = *(_QWORD *)(a2 + 56);
          if (*(_DWORD *)(v34 + 220) <= v107)
          {
            JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v108, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "get_global's index ", 20, (int)v107, " exceeds the number of globals ", 32, a9.n128_f64[0], a10, *(unsigned int *)(v34 + 220));
          }
          else if (BYTE2(dword_1ECF4C7B0) || (v35 = *(_DWORD *)(v34 + 224), v107 < v35))
          {
            v36 = *(_QWORD *)(v34 + 208);
            if (!*(_BYTE *)(v36 + 48 * v107))
            {
              a9 = *(__n128 *)(v36 + 48 * v107 + 8);
              *a11 = a9;
              *a5 = v33;
              goto LABEL_20;
            }
            JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v108, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "get_global import kind index ", 30, (int)v107, " is mutable ", 13, a9.n128_f64[0], a10);
          }
          else
          {
            JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v108, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "get_global import kind index ", 30, (int)v107, " exceeds the first internal global ", 36, a9.n128_f64[0], a10, v35);
          }
          goto LABEL_91;
        }
        v22 = *(_QWORD *)a2;
        v37 = *(_QWORD *)(a2 + 48);
        v38 = "can't get get_global's index";
        goto LABEL_121;
      }
      goto LABEL_88;
    }
    if (v20 <= 207)
    {
      if (v20 != 66)
      {
        if (v20 == 67)
        {
          v74 = *(_QWORD *)(a2 + 16);
          v22 = *(_QWORD *)a2;
          v75 = *(_QWORD *)a2 + 4;
          if (v74 >= v75)
          {
            v76 = *(unsigned int *)(*(_QWORD *)(a2 + 8) + v22);
            *(_QWORD *)a2 = v75;
            *a5 = v76;
            v31 = &JSC::Wasm::Types::F32;
            goto LABEL_19;
          }
          v37 = *(_QWORD *)(a2 + 48);
          v38 = "can't get constant value for init_expr's f32.const";
          goto LABEL_36;
        }
        if (v20 == 68)
        {
          v47 = *(_QWORD *)(a2 + 16);
          v22 = *(_QWORD *)a2;
          v48 = *(_QWORD *)a2 + 8;
          if (v47 >= v48)
          {
            v49 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + v22);
            *(_QWORD *)a2 = v48;
            *a5 = v49;
            v31 = &JSC::Wasm::Types::F64;
            goto LABEL_19;
          }
          v37 = *(_QWORD *)(a2 + 48);
          v38 = "can't get constant value for init_expr's f64.const";
          goto LABEL_36;
        }
        goto LABEL_88;
      }
      v108 = 0;
      if (WTF::LEBDecoder::decodeInt64(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (uint64_t *)&v108))
      {
        *a5 = (uint64_t)v108;
        v31 = &JSC::Wasm::Types::I64;
        goto LABEL_19;
      }
      v50 = *(_QWORD *)a2;
      v52 = *(_QWORD *)(a2 + 48);
      v53 = "can't get constant value for init_expr's i64.const";
      v54 = 51;
    }
    else
    {
      if (v20 <= 250)
      {
        if (v20 != 208)
        {
          if (v20 == 210)
          {
            LODWORD(v107) = 0;
            if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v107))
            {
              v22 = *(_QWORD *)a2;
              v37 = *(_QWORD *)(a2 + 48);
              v38 = "can't get ref.func index";
              v39 = 25;
              goto LABEL_113;
            }
            v40 = *(_QWORD *)(a2 + 56);
            if (*(unsigned int *)(v40 + 52) + (unint64_t)*(unsigned int *)(v40 + 36) <= v107)
            {
              JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v108, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "ref.func index ", 16, (int)v107, " exceeds the number of functions ", 34, a9.n128_f64[0], a10, *(unsigned int *)(v40 + 52) + (unint64_t)*(unsigned int *)(v40 + 36));
              goto LABEL_91;
            }
            JSC::Wasm::ModuleInformation::addReferencedFunction(v40, v107);
            if (!BYTE1(dword_1ECF4C7B0))
            {
              a9.n128_u64[0] = JSC::Wasm::Types::Funcref;
              *a11 = (__n128)JSC::Wasm::Types::Funcref;
              v42 = v107;
              goto LABEL_48;
            }
            v41 = *(_QWORD *)(a2 + 56);
            v42 = v107;
            v43 = *(unsigned int *)(v41 + 36);
            if (v43 > v107)
            {
              v45 = (_QWORD *)(v41 + 24);
              v44 = v107;
              goto LABEL_47;
            }
            v44 = v107 - v43;
            if (v44 < *(unsigned int *)(v41 + 52))
            {
              v45 = (_QWORD *)(v41 + 40);
LABEL_47:
              v46 = *(_QWORD *)(*v45 + 8 * v44);
              a11->n128_u8[0] = -28;
              a11->n128_u64[1] = v46;
LABEL_48:
              *a5 = v42;
              goto LABEL_20;
            }
            __break(0xC471u);
LABEL_169:
            JUMPOUT(0x198E1B898);
          }
LABEL_88:
          v22 = *(_QWORD *)a2;
          v71 = *(_QWORD *)(a2 + 48);
          v72 = "unknown init_expr opcode ";
          v73 = 26;
LABEL_89:
          v32 = v20;
          goto LABEL_90;
        }
        v66 = *(_QWORD *)(a2 + 56);
        if (BYTE1(dword_1ECF4C7B0))
        {
          LODWORD(v108) = 0;
          if (!WTF::LEBDecoder::decodeInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (int *)&v108))
          {
LABEL_112:
            v22 = *(_QWORD *)a2;
            v37 = *(_QWORD *)(a2 + 48);
            v38 = "ref.null heaptype must be funcref, externref or type_idx";
            v39 = 57;
            goto LABEL_113;
          }
          v67 = v66;
          v68 = (int)v108;
          if ((v108 & 0x80000000) != 0)
          {
            if ((unint64_t)((int)v108 + 22) > 9
              || ((1 << (v108 + 22)) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
            {
              goto LABEL_112;
            }
          }
          else
          {
            if (v108 >= *(_DWORD *)(v67 + 100)
              && (!*(_BYTE *)(a2 + 32)
               || v108 < *(_DWORD *)(a2 + 36)
               || v108 >= *(_DWORD *)(a2 + 40)))
            {
              goto LABEL_112;
            }
            if (!BYTE1(dword_1ECF4C7B0))
            {
              v70 = -29;
              v68 = v108;
              goto LABEL_107;
            }
            v69 = *(_QWORD *)(a2 + 56);
            if (*(_DWORD *)(v69 + 100) <= v108)
            {
              __break(0xC471u);
              goto LABEL_169;
            }
            v68 = *(_QWORD *)(*(_QWORD *)(v69 + 88) + 8 * v108);
          }
          v70 = -29;
LABEL_107:
          a11->n128_u64[0] = v70;
          a11->n128_u64[1] = v68;
          v42 = 2;
          goto LABEL_48;
        }
        v104 = *(WTF **)(a2 + 56);
        v78 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16)
          || (*(_QWORD *)a2 = v78 + 1, v79 = *(char *)(*(_QWORD *)(a2 + 8) + v78), (v79 & 0x80000000) != 0)
          || (v80 = v79 | (v79 >> 6 << 7),
              !JSC::Wasm::isValidTypeKind<signed char>((char)(v79 | ((v79 >> 6) << 7)))))
        {
LABEL_154:
          v22 = *(_QWORD *)a2;
          v37 = *(_QWORD *)(a2 + 48);
          v38 = "ref.null type must be a reference type";
          v39 = 39;
          goto LABEL_113;
        }
        if (BYTE1(dword_1ECF4C7B0))
        {
          v81 = (char)v80;
          v82 = (char)v80 + 22;
          if (v82 <= 9 && (((1 << v82) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
          {
            LOBYTE(v80) = -29;
            goto LABEL_102;
          }
          if ((v80 + 29) < 2u)
          {
            LODWORD(v108) = 0;
            if (!WTF::LEBDecoder::decodeInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (int *)&v108))
              goto LABEL_154;
            v81 = (int)v108;
            if ((v108 & 0x80000000) != 0)
            {
              if ((unint64_t)((int)v108 + 22) > 9
                || ((1 << (v108 + 22)) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
              {
                goto LABEL_154;
              }
              goto LABEL_102;
            }
            if (v108 >= *((_DWORD *)v104 + 25))
            {
              if (!*(_BYTE *)(a2 + 32))
                goto LABEL_154;
              v92 = *(_DWORD *)(a2 + 36);
              if (v108 < v92 || v108 >= *(_DWORD *)(a2 + 40))
                goto LABEL_154;
            }
            else if (!*(_BYTE *)(a2 + 32) || (v92 = *(_DWORD *)(a2 + 36), v108 < v92))
            {
              v81 = *(_QWORD *)(*((_QWORD *)v104 + 11) + 8 * v108);
              goto LABEL_102;
            }
            JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(v108 - v92), v87, v88, v89, v90, v91, &v108);
            v100 = v108;
            v108 = 0;
            v105 = v100;
            if (v100)
            {
              do
              {
                v101 = __ldaxr(v105);
                v102 = v101 - 1;
              }
              while (__stlxr(v102, v105));
              if (!v102)
              {
                v103 = (unint64_t)v105;
                atomic_store(1u, v105);
                WTF::fastFree(v103, v93, v94, v95, v96, v97, v98, v99);
              }
            }
            v81 = (uint64_t)v105;
LABEL_102:
            v106 = v80;
            v83 = v80;
            v68 = v81;
            isValueType = JSC::Wasm::isValueType(v83, v81);
            v70 = v106;
            if (isValueType)
            {
              v85 = BYTE1(dword_1ECF4C7B0) ? 29 : 17;
              if ((v85 + v106) < 2u)
                goto LABEL_107;
            }
            goto LABEL_154;
          }
        }
        else if ((v80 + 29) < 2u)
        {
          goto LABEL_154;
        }
        v81 = 0;
        goto LABEL_102;
      }
      if (v20 == 251)
      {
        if (!BYTE2(dword_1ECF4C7B0))
        {
          v22 = *(_QWORD *)a2;
          v37 = *(_QWORD *)(a2 + 48);
          v38 = "Wasm GC is not enabled";
          v39 = 23;
          goto LABEL_113;
        }
        if (byte_1ECF4C7B6)
          goto LABEL_20;
        v22 = *(_QWORD *)a2;
        v71 = *(_QWORD *)(a2 + 48);
        v72 = "unknown init_expr opcode ";
        v73 = 26;
        v32 = 251;
LABEL_90:
        JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned char>(&v108, v22, v71, v72, v73, v32, a9.n128_f64[0], a10);
LABEL_91:
        v55 = (WTF *)v108;
        goto LABEL_92;
      }
      if (v20 != 253)
        goto LABEL_88;
      if (!HIBYTE(dword_1ECF4C7B0))
      {
        v22 = *(_QWORD *)a2;
        v37 = *(_QWORD *)(a2 + 48);
        v38 = "SIMD must be enabled";
        v39 = 21;
        goto LABEL_113;
      }
      v22 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
      {
        v37 = *(_QWORD *)(a2 + 48);
        v38 = "can't get init_expr's simd opcode";
        v39 = 34;
        goto LABEL_113;
      }
      *(_QWORD *)a2 = v22 + 1;
      v20 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v22);
      *a3 = v20;
      if (v20 != 12)
      {
        v22 = *(_QWORD *)a2;
        v71 = *(_QWORD *)(a2 + 48);
        v72 = "unknown init_expr simd opcode ";
        v73 = 31;
        goto LABEL_89;
      }
      v50 = *(_QWORD *)a2;
      v51 = *(_QWORD *)a2 + 16;
      if (*(_QWORD *)(a2 + 16) >= v51)
      {
        v77 = *(_OWORD *)(*(_QWORD *)(a2 + 8) + v50);
        *(_QWORD *)a2 = v51;
        *a6 = v77;
        v31 = &JSC::Wasm::Types::V128;
        goto LABEL_19;
      }
      v52 = *(_QWORD *)(a2 + 48);
      v53 = "get constant value for init_expr's v128.const";
      v54 = 46;
    }
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v107, v50, v52, v53, v54, a9.n128_f64[0], a10);
    v55 = v107;
LABEL_92:
    *(_QWORD *)a1 = v55;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v21 = *(WTF **)(a2 + 16);
  v22 = *(_QWORD *)a2;
  v23 = (unint64_t)v21 - *(_QWORD *)a2;
  if ((unint64_t)v21 <= *(_QWORD *)a2)
  {
LABEL_35:
    v37 = *(_QWORD *)(a2 + 48);
    v38 = "can't get constant value for init_expr's i32.const";
LABEL_36:
    v39 = 51;
    goto LABEL_113;
  }
  v24 = 0;
  LODWORD(v25) = 0;
  v26 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = v22 + 1;
  v27 = v26 + v22;
  v28 = v22 - (_QWORD)v21;
  LODWORD(v21) = 7;
  do
  {
    LODWORD(v11) = *(char *)(v27 + v24);
    LODWORD(v25) = ((v11 & 0x7F) << (v21 - 7)) | v25;
    if ((v11 & 0x80000000) == 0)
      goto LABEL_12;
    if (v23 >= 5)
      v29 = 5;
    else
      v29 = v23;
    if (v29 - 1 == v24)
    {
      v22 += v24 + 1;
      goto LABEL_35;
    }
    v11 = v22 + v24 + 2;
    *(_QWORD *)a2 = v11;
    ++v24;
    LODWORD(v21) = (_DWORD)v21 + 7;
  }
  while (v28 + v24);
  while (1)
  {
    do
    {
      __break(1u);
LABEL_12:
      if ((_DWORD)v24 != 4)
        goto LABEL_13;
      v22 += v24 + 1;
      if ((v11 & 0x40) != 0)
      {
        if ((v11 & 0xF8) != 0x78)
          goto LABEL_35;
LABEL_13:
        if ((v11 & 0x40) != 0)
          v30 = v25 | (-1 << (char)v21);
        else
          v30 = v25;
        if (v21 <= 0x1F)
          LODWORD(v25) = v30;
        goto LABEL_18;
      }
      if (v11 > 7u)
        goto LABEL_35;
LABEL_18:
      *a5 = (int)v25;
      v31 = &JSC::Wasm::Types::I32;
LABEL_19:
      a9 = (__n128)*v31;
      *a11 = (__n128)*v31;
LABEL_20:
      v22 = *(_QWORD *)a2;
      v21 = *(WTF **)(a2 + 16);
      if (*(_QWORD *)a2 >= (unint64_t)v21)
      {
        v37 = *(_QWORD *)(a2 + 48);
        v38 = "can't get init_expr's end opcode";
        v39 = 33;
        goto LABEL_113;
      }
      v25 = *(_QWORD *)(a2 + 8);
      v32 = *(unsigned __int8 *)(v25 + v22);
      if (v32 == 11 && *v19 != 251)
      {
        *(_QWORD *)a2 = v22 + 1;
        *a4 = 0;
        goto LABEL_24;
      }
      v24 = byte_1ECF4C7B6;
      if (!byte_1ECF4C7B6)
      {
        v71 = *(_QWORD *)(a2 + 48);
        v72 = "init_expr should end with end, ended with ";
        v73 = 43;
        goto LABEL_90;
      }
      v107 = 0;
      v22 = (uint64_t)v21 - v14;
    }
    while ((unint64_t)v21 < v14);
    JSC::Wasm::parseExtendedConstExpr(v25 + v14, v22);
    if ((_BYTE)v109)
      break;
    std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v108, v56, v57, v58, v59, v60, v61, v62);
    v63 = v107;
    *(_QWORD *)a2 = (char *)v107 + v14;
    v25 = *(_QWORD *)(a2 + 16);
    v21 = (WTF *)(v25 - v14);
    if (v25 >= v14)
    {
      v19 = *(unsigned __int8 **)(a2 + 56);
      v25 = *(_QWORD *)(a2 + 8);
      if (v63 == (WTF *)-1)
      {
        v63 = v21;
LABEL_68:
        v64 = (char *)(v25 + v14);
        v108 = (unsigned int *)(v25 + v14);
        v109 = v63;
        v65 = *((unsigned int *)v19 + 75);
        if ((_DWORD)v65 == *((_DWORD *)v19 + 74))
        {
          if ((WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,std::span<unsigned char const,18446744073709551615ul>>((uint64_t)(v19 + 288), (uint64_t)&v108) & 1) == 0)
          {
            v22 = *(_QWORD *)a2;
            v37 = *(_QWORD *)(a2 + 48);
            v38 = "could not allocate memory for init expr";
            v39 = 40;
            goto LABEL_113;
          }
        }
        else
        {
          WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(*((_QWORD *)v19 + 36) + 16 * v65, v64, v63);
          ++*((_DWORD *)v19 + 75);
        }
        *a5 = *(unsigned int *)(*(_QWORD *)(a2 + 56) + 300) - 1;
        *a4 = 1;
        a11->n128_u64[0] = a7;
        a11->n128_u64[1] = a8;
LABEL_24:
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 8) = 0;
        return;
      }
      if (v21 >= v63)
        goto LABEL_68;
    }
  }
  v86 = v108;
  v108 = 0;
  *(_QWORD *)a1 = v86;
  *(_BYTE *)(a1 + 8) = 1;
  std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v108, v56, v57, v58, v59, v60, v61, v62);
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,JSC::Wasm::TypeKind,WTF::ASCIILiteral,JSC::Wasm::TypeKind>(_QWORD *a1, uint64_t a2, uint64_t a3, char *__src, uint64_t a5, int a6, char *a7, uint64_t a8, double a9, float a10, char a11)
{
  uint64_t v11;
  int v13;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  uint64_t v24;
  _BYTE *v25;
  unsigned int v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  const char *String;
  float v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  char *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  const char *v50;
  uint64_t v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  int *v90;
  uint64_t v91[2];
  uint64_t v92[2];
  const char *v93;
  uint64_t v94;
  const char *v95;
  WTF *v96;
  __int128 v97;
  _BYTE v98[128];
  uint64_t v99;

  v11 = a8;
  v13 = a6;
  v15 = a1;
  v16 = 0;
  v17 = a11;
  v99 = *MEMORY[0x1E0C80C00];
  v18 = a3 + a2;
  do
  {
    v19 = (v18 % 0xA) | 0x30;
    v98[v16-- - 8] = v19;
    v20 = v18 > 9;
    v18 /= 0xAuLL;
  }
  while (v20);
  if (v16 + 26 >= 27)
    __break(1u);
  if (v16)
  {
    v86 = __src;
    if ((unint64_t)-v16 >> 31)
    {
      __break(0xC471u);
LABEL_52:
      JUMPOUT(0x198E1BCD0);
    }
    v24 = WTF::fastCompactMalloc((WTF *)(20 - v16));
    v25 = (_BYTE *)(v24 + 20);
    *(_DWORD *)v24 = 2;
    *(_DWORD *)(v24 + 4) = -(int)v16;
    *(_QWORD *)(v24 + 8) = v24 + 20;
    *(_DWORD *)(v24 + 16) = 4;
    v89 = (WTF::StringImpl *)v24;
    if (v16 == -1)
      *v25 = v19;
    else
      memcpy(v25, &v98[v16 - 7], -v16);
    v15 = a1;
    v17 = a11;
    v11 = a8;
    v13 = a6;
    __src = v86;
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    v89 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
  }
  v95 = (const char *)off_1E3572250;
  v96 = (WTF *)v98;
  v97 = xmmword_199122F80;
  v98[0] = 0;
  if (__src)
  {
    v26 = a5 - 1;
    if (!a5)
      v26 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v26, (uint64_t)&v93, a10);
  }
  else
  {
    v27 = (char *)WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v27 = 1;
    *((_QWORD *)v27 + 1) = 0;
    v27[16] = 0;
    v93 = v27;
    LODWORD(v94) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v95, "StringView", &v93);
  if ((_DWORD)v94 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v94])(v92, &v93);
  (*((void (**)(const char **))v95 + 5))(&v95);
  (*((void (**)(const char **))v95 + 5))(&v95);
  v35 = v96;
  if (!v96)
  {
    v88 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v96, v97, (uint64_t *)&v88);
  v35 = v96;
  if (v96 != (WTF *)v98)
LABEL_22:
    WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
  String = JSC::Wasm::makeString(v13);
  v39 = v38;
  v95 = (const char *)off_1E3572250;
  v96 = (WTF *)v98;
  v97 = xmmword_199122F80;
  v98[0] = 0;
  if (a7)
  {
    v40 = v11 - 1;
    if (!v11)
      v40 = 0;
    WTF::StringImpl::utf8ForCharacters(a7, v40, (uint64_t)&v93, v37);
  }
  else
  {
    v41 = (char *)WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v41 = 1;
    *((_QWORD *)v41 + 1) = 0;
    v41[16] = 0;
    v93 = v41;
    LODWORD(v94) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v95, "StringView", &v93);
  if ((_DWORD)v94 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v94])(v92, &v93);
  (*((void (**)(const char **))v95 + 5))(&v95);
  (*((void (**)(const char **))v95 + 5))(&v95);
  v49 = v96;
  if (!v96)
  {
    v87 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v96, v97, (uint64_t *)&v87);
  v49 = v96;
  if (v96 != (WTF *)v98)
LABEL_34:
    WTF::fastFree((unint64_t)v49, v42, v43, v44, v45, v46, v47, v48);
  v50 = JSC::Wasm::makeString(v17);
  v95 = "WebAssembly.Module doesn't parse at byte ";
  v96 = (WTF *)42;
  v93 = ": ";
  v94 = 3;
  v92[0] = (uint64_t)String;
  v92[1] = v39;
  v91[0] = (uint64_t)v50;
  v91[1] = v51;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t *)&v95, (uint64_t *)&v89, (uint64_t *)&v93, (uint64_t *)&v88, v92, (uint64_t *)&v87, v91, &v90);
  if (!v90)
  {
    __break(0xC471u);
    goto LABEL_52;
  }
  *v15 = v90;
  v90 = 0;
  v59 = v87;
  v87 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  v60 = v88;
  v88 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = v89;
  v89 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
    {
      WTF::StringImpl::~StringImpl(v61, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v61 -= 2;
    }
  }
}

void JSC::Wasm::SectionParser::parseTable(JSC::Wasm::SectionParser *this, uint64_t *a2, double a3, float a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - v7;
  if (v6 <= v7)
  {
LABEL_16:
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v17, v7, a2[6], "can't get Table's count", 24, a3, a4);
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = a2[1];
    if (v8 >= 5)
      v8 = 5;
    v13 = v8 - 1;
    *a2 = v7 + 1;
    v14 = v12 + v7;
    v15 = v7 - v6;
    while (1)
    {
      LODWORD(v16) = *(char *)(v14 + v9);
      v11 |= (v16 & 0x7F) << v10;
      if ((v16 & 0x80000000) == 0)
        break;
      if (v13 == v9)
        goto LABEL_15;
      v16 = v7 + v9 + 2;
      *a2 = v16;
      ++v9;
      v10 += 7;
      if (!(v15 + v9))
      {
        __break(1u);
        break;
      }
    }
    if ((_DWORD)v9 == 4 && v16 >= 0x10u)
    {
LABEL_15:
      v7 += v9 + 1;
      goto LABEL_16;
    }
    if (!v11)
    {
LABEL_13:
      *(_BYTE *)this = 0;
      *((_BYTE *)this + 8) = 0;
      return;
    }
    while (1)
    {
      JSC::Wasm::SectionParser::parseTableHelper((JSC::Wasm::SectionParser *)&v17, (uint64_t)a2, 0, a3, a4);
      if (v18)
        break;
      if (!--v11)
        goto LABEL_13;
    }
  }
  *(_QWORD *)this = v17;
  *((_BYTE *)this + 8) = 1;
}

void JSC::Wasm::SectionParser::parseMemory(JSC::Wasm::SectionParser *this, uint64_t *a2, double a3, float a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - v7;
  if (v6 <= v7)
    goto LABEL_19;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  if (v8 >= 5)
    v8 = 5;
  v13 = v8 - 1;
  *a2 = v7 + 1;
  v14 = v12 + v7;
  v15 = v7 - v6;
  while (1)
  {
    LODWORD(v16) = *(char *)(v14 + v9);
    v11 |= (v16 & 0x7F) << v10;
    if ((v16 & 0x80000000) == 0)
      break;
    if (v13 == v9)
    {
      v7 += v9 + 1;
      goto LABEL_19;
    }
    v16 = v7 + v9 + 2;
    *a2 = v16;
    ++v9;
    v10 += 7;
    if (!(v15 + v9))
    {
      __break(1u);
      break;
    }
  }
  v7 += v9 + 1;
  if ((_DWORD)v9 == 4 && v16 >= 0x10u)
  {
LABEL_19:
    v17 = a2[6];
    v18 = "can't parse Memory section's count";
    v19 = 35;
  }
  else
  {
    if (!v11)
    {
      *(_BYTE *)this = 0;
      *((_BYTE *)this + 8) = 0;
      return;
    }
    if (v11 == 1)
    {
      JSC::Wasm::SectionParser::parseMemoryHelper(this, a2, 0, a3, a4);
      return;
    }
    v17 = a2[6];
    v18 = "Memory section has more than one memory, WebAssembly currently only allows zero or one";
    v19 = 87;
  }
  JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v20, v7, v17, v18, v19, a3, a4);
  *(_QWORD *)this = v20;
  *((_BYTE *)this + 8) = 1;
}

void JSC::Wasm::SectionParser::parseGlobal(JSC::Wasm::SectionParser *this, uint64_t a2)
{
  __int128 v4;
  float v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  signed __int8 v26;
  double v27;
  float v28;
  uint64_t v29;
  unsigned int v30;
  _OWORD *v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  __n128 *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  __n128 v40;
  uint64_t v41;
  __int128 v42;
  unsigned __int8 v43;
  char v44[16];
  __int128 v45;
  unsigned int v46[5];
  unsigned int v47;

  v47 = 0;
  if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v47))
  {
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(v44, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "can't get Global section's count", 33, *(double *)&v4, v5);
    goto LABEL_29;
  }
  v6 = v47;
  if (v47 >= 0xF4241)
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(v44, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "Global section's count is too big ", 35, v47, " maximum ", 10, *(double *)&v4, v5, 1000000);
    goto LABEL_29;
  }
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_DWORD *)(v7 + 224);
  v9 = *(_DWORD *)(v7 + 216);
  if (__CFADD__(v9, v47)
    || !WTF::Vector<JSC::Wasm::GlobalInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(v7 + 208, v9 + v47))
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(v44, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), v8 + v6, *(double *)&v4, v5);
LABEL_29:
    v33 = *(_QWORD *)v44;
    goto LABEL_30;
  }
  if (!v47)
  {
LABEL_27:
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 8) = 0;
    return;
  }
  v10 = 0;
  while (1)
  {
    WORD4(v45) = 0;
    memset(v46, 0, 16);
    v43 = 0;
    v42 = 0uLL;
    v41 = 0;
    JSC::Wasm::SectionParser::parseGlobalType(&v40, a2, (uint64_t)v44, *(double *)&v4, v5);
    if (v40.n128_u8[8])
    {
      v34 = v40.n128_u64[0];
      v40.n128_u64[0] = 0;
      *(_QWORD *)this = v34;
      *((_BYTE *)this + 8) = 1;
      v35 = &v40;
LABEL_34:
      std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v35, v11, v12, v13, v14, v15, v16, v17);
      return;
    }
    std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v40, v11, v12, v13, v14, v15, v16, v17);
    v39 = 0;
    JSC::Wasm::SectionParser::parseInitExpr((uint64_t)&v37, a2, &v43, &v39, &v41, &v42, *(unint64_t *)&v44[8], v45, v18, v19, &v40);
    if (v38)
    {
      v36 = v37;
      v37 = 0;
      *(_QWORD *)this = v36;
      *((_BYTE *)this + 8) = 1;
      v35 = (__n128 *)&v37;
      goto LABEL_34;
    }
    std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v37, v11, v12, v13, v14, v15, v16, v17);
    if (v40.n128_u8[0] == 251)
      *(_OWORD *)v46 = v42;
    else
      *(_QWORD *)v46 = v41;
    if (v39)
    {
      v25 = 5;
    }
    else
    {
      v24 = v43 == 210 ? 2 : 3;
      v25 = v43 == 35 ? 1 : v24;
    }
    BYTE8(v45) = v25;
    v26 = v40.n128_u8[0];
    if ((JSC::Wasm::isSubtype(v40.n128_u8[0], v40.n128_u64[1], *(uint64_t *)&v44[8], v45, v20, v21, v22, v23) & 1) == 0)
      break;
    if (v43 == 210)
      JSC::Wasm::ModuleInformation::addDeclaredFunction(*(JSC::Wasm::ModuleInformation **)(a2 + 56), v46[0]);
    v29 = *(_QWORD *)(a2 + 56);
    v30 = *(_DWORD *)(v29 + 220);
    if (v30 == *(_DWORD *)(v29 + 216))
    {
      *(_QWORD *)&v4 = WTF::Vector<JSC::Wasm::GlobalInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::GlobalInformation>(v29 + 208, (unint64_t)v44).n128_u64[0];
    }
    else
    {
      v31 = (_OWORD *)(*(_QWORD *)(v29 + 208) + 48 * v30);
      v4 = *(_OWORD *)v44;
      v5 = *(float *)&v45;
      v32 = *(_OWORD *)v46;
      v31[1] = v45;
      v31[2] = v32;
      *v31 = v4;
      ++*(_DWORD *)(v29 + 220);
    }
    if (++v10 >= v47)
      goto LABEL_27;
  }
  JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,JSC::Wasm::TypeKind,WTF::ASCIILiteral,JSC::Wasm::TypeKind>(&v37, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "Global init_expr opcode of type ", 33, v26, " doesn't match global's type ", 30, v27, v28, v44[8]);
  v33 = v37;
LABEL_30:
  *(_QWORD *)this = v33;
  *((_BYTE *)this + 8) = 1;
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, float a6)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  BOOL v11;
  int *v12;
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  float v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  int *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  int *v88;
  const char *v89;
  int v90;
  const char *v91;
  WTF *v92;
  __int128 v93;
  _BYTE v94[128];
  uint64_t v95;

  v8 = 0;
  v95 = *MEMORY[0x1E0C80C00];
  v9 = a3 + a2;
  do
  {
    v10 = (v9 % 0xA) | 0x30;
    v94[v8-- - 8] = v10;
    v11 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v11);
  if (v8 + 26 >= 27)
    __break(1u);
  if (v8)
  {
    if ((unint64_t)-v8 >> 31)
    {
      __break(0xC471u);
LABEL_49:
      JUMPOUT(0x198E1C634);
    }
    v12 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v8));
    v13 = v12 + 5;
    *v12 = 2;
    v12[1] = -(int)v8;
    *((_QWORD *)v12 + 1) = v12 + 5;
    v12[4] = 4;
    if (v8 == -1)
      *v13 = v10;
    else
      memcpy(v13, &v94[v8 - 7], -v8);
  }
  else
  {
    v12 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v91 = (const char *)off_1E3572250;
  v92 = (WTF *)v94;
  v93 = xmmword_199122F80;
  v94[0] = 0;
  WTF::StringImpl::utf8ForCharacters("can't allocate memory for ", 0x1AuLL, (uint64_t)&v89, a6);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v91, "StringView", &v89);
  if (v90 != -1)
    ((void (*)(int **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v90])(&v88, &v89);
  (*((void (**)(const char **))v91 + 5))(&v91);
  (*((void (**)(const char **))v91 + 5))(&v91);
  v21 = v92;
  if (!v92)
  {
    v83 = 0;
    goto LABEL_16;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v92, v93, (uint64_t *)&v83);
  v21 = v92;
  if (v92 != (WTF *)v94)
LABEL_16:
    WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
  v91 = (const char *)off_1E3572250;
  v92 = (WTF *)v94;
  v93 = xmmword_199122F80;
  v94[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v91, "%lu", a4);
  (*((void (**)(const char **))v91 + 5))(&v91);
  v29 = v92;
  if (!v92)
  {
    v82 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v92, v93, (uint64_t *)&v82);
  v29 = v92;
  if (v92 != (WTF *)v94)
LABEL_21:
    WTF::fastFree((unint64_t)v29, v22, v23, v24, v25, v26, v27, v28);
  v91 = (const char *)off_1E3572250;
  v92 = (WTF *)v94;
  v93 = xmmword_199122F80;
  v94[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" globals", 8uLL, (uint64_t)&v89, v30);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v91, "StringView", &v89);
  if (v90 != -1)
    ((void (*)(int **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v90])(&v88, &v89);
  (*((void (**)(const char **))v91 + 5))(&v91);
  (*((void (**)(const char **))v91 + 5))(&v91);
  v38 = v92;
  if (!v92)
  {
    v81 = 0;
    goto LABEL_28;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v92, v93, (uint64_t *)&v81);
  v38 = v92;
  if (v92 != (WTF *)v94)
LABEL_28:
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  v91 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v92) = 41;
  v88 = v12;
  v89 = ": ";
  v90 = 2;
  v86 = v82;
  v87 = v83;
  v85 = v81;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v91, (uint64_t *)&v88, (uint64_t)&v89, (uint64_t *)&v87, (uint64_t *)&v86, (uint64_t *)&v85, &v84);
  if (!v84)
  {
    __break(0xC471u);
    goto LABEL_49;
  }
  *a1 = v84;
  v84 = 0;
  v46 = v81;
  v81 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = v82;
  v82 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = v83;
  v83 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  if (*v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v39, v40, v41, v42, v43, v44, v45);
    WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
  }
  else
  {
    *v12 -= 2;
  }
}

void JSC::Wasm::ModuleInformation::addDeclaredFunction(JSC::Wasm::ModuleInformation *this, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v3 = *((_QWORD *)this + 38);
  if (v3 < 0)
    v4 = 63;
  else
    v4 = *(_QWORD *)(2 * v3);
  v5 = (uint64_t *)((char *)this + 304);
  if (v4 <= a2)
  {
    WTF::BitVector::resizeOutOfLine((JSC::Wasm::ModuleInformation *)((char *)this + 304), a2 + 1, 0);
    v3 = *v5;
  }
  if (v3 >= 0)
    v6 = 2 * v3 + 8;
  else
    v6 = (uint64_t)v5;
  *(_QWORD *)(v6 + ((v2 >> 3) & 0x1FFFFFF8)) |= 1 << v2;
}

void JSC::Wasm::SectionParser::parseExport(JSC::Wasm::SectionParser *this, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  void (**v15)(WTF::StringPrintStream *__hidden);
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  const void *v25;
  const void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const WTF::StringImpl *v35;
  const WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  float v43;
  double v44;
  float v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  double v50;
  float v51;
  int v52;
  unsigned int *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void (**v62)(WTF::StringPrintStream *__hidden);
  int v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int *v77;
  unint64_t v78;
  void *v79;
  unint64_t v80;
  void *v81;
  int v82;
  int v83;
  void *v84;
  int v85;
  int v86;
  void *v87;
  int v88;
  int v89;
  void *v90;
  int v91;
  int v92;
  void *v93;
  int v94;
  int v95;
  void *v96;
  int v97;
  int v98;
  void *v99;
  int v100;
  int v101;
  WTF::StringImpl *v102;
  unsigned int v103[3];
  uint64_t v104;
  unsigned int v105;
  WTF::StringImpl **v106;
  unsigned int v107;
  void (**v108)(WTF::StringPrintStream *__hidden);
  unint64_t v109;
  uint64_t v110;

  v107 = 0;
  if (!WTF::LEBDecoder::decodeUInt32(a2[1], a2[2], a2, &v107))
  {
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v108, *a2, a2[6], "can't get Export section's count", 33, v10, v11);
LABEL_87:
    *(_QWORD *)this = v108;
    *((_BYTE *)this + 8) = 1;
    return;
  }
  v12 = v107;
  if (v107 > 0x186A0)
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v108, *a2, a2[6], "Export section's count is too big ", 35, v107, " maximum ", 10, v10, v11, 100000);
    goto LABEL_87;
  }
  v13 = a2[7];
  if (*(_DWORD *)(v13 + 144))
  {
    __break(0xC471u);
LABEL_89:
    __break(1u);
LABEL_90:
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v108, *a2, a2[6], "can't allocate enough memory for ", 34, v107, " exports", 9, v10, v11);
    goto LABEL_87;
  }
  if (!v107)
  {
    v106 = 0;
    goto LABEL_51;
  }
  v14 = 24 * v107;
  WTF::tryFastMalloc((WTF *)(24 * v107), &v108);
  v15 = v108;
  if (!v108)
    goto LABEL_90;
  *(_DWORD *)(v13 + 144) = v14 / 0x18;
  *(_QWORD *)(v13 + 136) = v15;
  v106 = 0;
  if (!v107)
  {
LABEL_51:
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 8) = 0;
    goto LABEL_52;
  }
  v16 = 0;
  while (1)
  {
    v105 = 0;
    v104 = 0;
    memset(v103, 0, sizeof(v103));
    if (!WTF::LEBDecoder::decodeUInt32(a2[1], a2[2], a2, &v105))
      break;
    v17 = v105;
    if (v105)
    {
      v18 = a2[2];
      v19 = *a2;
      v20 = v18 >= v105;
      v21 = v18 - v105;
      if (!v20)
        goto LABEL_45;
      if (v105 > 0x186A0)
        goto LABEL_45;
      if (v19 > v21)
        goto LABEL_45;
      v22 = WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>((uint64_t)&v103[1], (WTF *)v105);
      v19 = *a2;
      if (!v22)
        goto LABEL_45;
      v23 = a2[2];
      v20 = v23 >= v19;
      v24 = v23 - v19;
      if (!v20 || v24 < v17)
        goto LABEL_89;
      v25 = (const void *)(a2[1] + v19);
      WTF::Unicode::checkUTF8((uint64_t)v25, v17, (uint64_t)&v108);
      if (v109 != v17)
      {
        v19 = *a2;
LABEL_45:
        JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v108, v19, a2[6], "can't get ", 11, v16, "th Export's field name of length ", 34, v10, v11, v105);
        *(_QWORD *)this = v108;
        v63 = 1;
        *((_BYTE *)this + 8) = 1;
        v26 = *(const void **)&v103[1];
        goto LABEL_39;
      }
      if (v104 < v17)
        WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v103[1], (WTF *)v17);
      HIDWORD(v104) = v17;
      v26 = *(const void **)&v103[1];
      memcpy(*(void **)&v103[1], v25, v17);
      *a2 += v17;
      v27 = (void *)WTF::fastMalloc((WTF *)v17);
      memcpy(v27, v26, v17);
      WTF::makeString<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((int **)&v102, (uint64_t)v27, v17);
      WTF::fastFree((unint64_t)v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      WTF::makeString<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((int **)&v102, 0, 0);
      v26 = 0;
    }
    if (WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains((uint64_t *)&v106, &v102, v35))
    {
      v99 = 0;
      v100 = 0;
      v101 = v17;
      if ((_DWORD)v17)
      {
        v79 = (void *)WTF::fastMalloc((WTF *)v17);
        v100 = v17;
        v99 = v79;
        memcpy(v79, v26, v17);
      }
      else
      {
        v79 = 0;
      }
      JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>(&v108, *a2, a2[6], (uint64_t)&v99, v42, v43);
      *(_QWORD *)this = v108;
      *((_BYTE *)this + 8) = 1;
      if (!v79)
        goto LABEL_70;
      v99 = 0;
      v100 = 0;
LABEL_68:
      v80 = (unint64_t)v79;
LABEL_69:
      WTF::fastFree(v80, v4, v5, v6, v7, v12, v8, v9);
      goto LABEL_70;
    }
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)&v106, &v102, v36, v37, v38, v39, v40, v41, (uint64_t)&v108);
    v46 = *a2;
    v47 = a2[2];
    if (*a2 >= v47)
      goto LABEL_64;
    *a2 = v46 + 1;
    v48 = a2[1];
    v49 = *(unsigned __int8 *)(v48 + v46);
    if (v49 >= 5)
    {
      ++v46;
LABEL_64:
      v96 = 0;
      v97 = 0;
      v98 = v17;
      if ((_DWORD)v17)
      {
        v79 = (void *)WTF::fastMalloc((WTF *)v17);
        v97 = v17;
        v96 = v79;
        memcpy(v79, v26, v17);
        v46 = *a2;
      }
      else
      {
        v79 = 0;
      }
      JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>(&v108, v46, a2[6], v16, "th Export's kind, named '", 26, (uint64_t)&v96, v44, v45);
      *(_QWORD *)this = v108;
      *((_BYTE *)this + 8) = 1;
      if (!v79)
        goto LABEL_70;
      v96 = 0;
      v97 = 0;
      goto LABEL_68;
    }
    if (!WTF::LEBDecoder::decodeUInt32(v48, v47, a2, v103))
    {
      v93 = 0;
      v94 = 0;
      v95 = v17;
      if ((_DWORD)v17)
      {
        v79 = (void *)WTF::fastMalloc((WTF *)v17);
        v94 = v17;
        v93 = v79;
        memcpy(v79, v26, v17);
      }
      else
      {
        v79 = 0;
      }
      JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>(&v108, *a2, a2[6], v16, "th Export's kind index, named '", 32, (uint64_t)&v93, v50, v51);
      *(_QWORD *)this = v108;
      *((_BYTE *)this + 8) = 1;
      if (!v79)
        goto LABEL_70;
      v93 = 0;
      v94 = 0;
      goto LABEL_68;
    }
    if (v49)
    {
      switch(v49)
      {
        case 1u:
          v12 = v103[0];
          v73 = *(_DWORD *)(a2[7] + 204);
          if (v103[0] < v73)
            goto LABEL_29;
          JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v108, *a2, a2[6], "can't export Table ", 20, v103[0], " there are ", 12, v50, v51, v73, " Tables", 8);
          goto LABEL_93;
        case 2u:
          if (*(_DWORD *)(a2[7] + 104) == -1)
          {
            JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v108, *a2, a2[6], "can't export a non-existent Memory", 35, v50, v51);
          }
          else
          {
            v12 = v103[0];
            if (!v103[0])
              goto LABEL_29;
            JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v108, *a2, a2[6], "can't export Memory ", 21, v103[0], " only one Table is currently supported", 39, v50, v51);
          }
LABEL_93:
          *(_QWORD *)this = v108;
          v63 = 1;
          *((_BYTE *)this + 8) = 1;
          goto LABEL_36;
        case 3u:
          v74 = a2[7];
          v75 = *(unsigned int *)(v74 + 220);
          if (v75 > v103[0])
          {
            v76 = *(_QWORD *)(v74 + 208);
            if (*(_BYTE *)(v76 + 48 * v103[0]) == 1)
              *(_BYTE *)(v76 + 48 * v103[0] + 25) = 1;
            goto LABEL_29;
          }
          v82 = v103[0];
          v87 = 0;
          v88 = 0;
          v89 = v17;
          if ((_DWORD)v17)
          {
            v81 = (void *)WTF::fastMalloc((WTF *)v17);
            v88 = v17;
            v87 = v81;
            memcpy(v81, v26, v17);
          }
          else
          {
            v81 = 0;
          }
          JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>(&v108, *a2, a2[6], v16, "th Export has invalid global number ", 37, v82, v9, " it exceeds the globals count ", 31, v75, (uint64_t)&v87);
          *(_QWORD *)this = v108;
          *((_BYTE *)this + 8) = 1;
          if (v81)
          {
            v87 = 0;
            v88 = 0;
            goto LABEL_84;
          }
          goto LABEL_70;
        case 4u:
          v77 = (unsigned int *)a2[7];
          v78 = v77[21] + (unint64_t)v77[17];
          if (v78 > v103[0])
          {
            JSC::Wasm::ModuleInformation::addDeclaredException((JSC::Wasm::ModuleInformation *)v77, v103[0]);
            goto LABEL_29;
          }
          v83 = v103[0];
          v84 = 0;
          v85 = 0;
          v86 = v17;
          if ((_DWORD)v17)
          {
            v79 = (void *)WTF::fastMalloc((WTF *)v17);
            v85 = v17;
            v84 = v79;
            memcpy(v79, v26, v17);
          }
          else
          {
            v79 = 0;
          }
          JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>(&v108, *a2, a2[6], v16, "th Export has invalid exception number ", 40, v83, v9, " it exceeds the exception index space ", 39, v78, (uint64_t)&v84);
          *(_QWORD *)this = v108;
          *((_BYTE *)this + 8) = 1;
          if (!v79)
            goto LABEL_70;
          v84 = 0;
          v85 = 0;
          break;
        default:
          goto LABEL_29;
      }
      goto LABEL_68;
    }
    v52 = v103[0];
    v53 = (unsigned int *)a2[7];
    v54 = v53[13] + (unint64_t)v53[9];
    if (v54 > v103[0])
    {
      JSC::Wasm::ModuleInformation::addDeclaredFunction((JSC::Wasm::ModuleInformation *)v53, v103[0]);
LABEL_29:
      v55 = a2[7];
      v56 = (uint64_t *)(v55 + 136);
      v108 = (void (**)(WTF::StringPrintStream *__hidden))v26;
      v57 = v104;
      *(_QWORD *)&v103[1] = 0;
      v104 = 0;
      v109 = __PAIR64__(v17, v57);
      LOBYTE(v110) = v49;
      HIDWORD(v110) = v103[0];
      v58 = *(_DWORD *)(v55 + 148);
      if (v58 == *(_DWORD *)(v55 + 144))
      {
        WTF::Vector<JSC::Wasm::Export,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Export>((uint64_t)v56, (unint64_t)&v108);
      }
      else
      {
        v59 = *v56;
        v60 = *v56 + 24 * v58;
        *(_QWORD *)v60 = 0;
        *(_QWORD *)(v60 + 8) = 0;
        *(_DWORD *)(v60 + 12) = v17;
        if ((_DWORD)v17)
        {
          v61 = (void *)WTF::fastMalloc((WTF *)v17);
          *(_DWORD *)(v60 + 8) = v17;
          *(_QWORD *)v60 = v61;
          memcpy(v61, v108, HIDWORD(v109));
        }
        *(_QWORD *)(v59 + 24 * v58 + 16) = v110;
        ++*(_DWORD *)(v55 + 148);
      }
      v62 = v108;
      if (v108)
      {
        v108 = 0;
        LODWORD(v109) = 0;
        WTF::fastFree((unint64_t)v62, v4, v5, v6, v7, v12, v8, v9);
      }
      v26 = 0;
      v63 = 0;
      goto LABEL_36;
    }
    v90 = 0;
    v91 = 0;
    v92 = v17;
    if ((_DWORD)v17)
    {
      v81 = (void *)WTF::fastMalloc((WTF *)v17);
      v91 = v17;
      v90 = v81;
      memcpy(v81, v26, v17);
    }
    else
    {
      v81 = 0;
    }
    JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>(&v108, *a2, a2[6], v16, "th Export has invalid function number ", 39, v52, v9, " it exceeds the function index space ", 38, v54, (uint64_t)&v90);
    *(_QWORD *)this = v108;
    *((_BYTE *)this + 8) = 1;
    if (v81)
    {
      v90 = 0;
      v91 = 0;
LABEL_84:
      v80 = (unint64_t)v81;
      goto LABEL_69;
    }
LABEL_70:
    v63 = 1;
LABEL_36:
    v64 = v102;
    v102 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
      {
        WTF::StringImpl::~StringImpl(v64, (WTF::AtomStringImpl *)v4, v5, v6, v7, v12, v8, v9);
        WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
      }
      else
      {
        *(_DWORD *)v64 -= 2;
      }
    }
LABEL_39:
    if (v26)
    {
      *(_QWORD *)&v103[1] = 0;
      LODWORD(v104) = 0;
      WTF::fastFree((unint64_t)v26, v4, v5, v6, v7, v12, v8, v9);
    }
    if (v63)
      goto LABEL_52;
    if (++v16 >= v107)
      goto LABEL_51;
  }
  JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v108, *a2, a2[6], "can't get ", 11, v16, "th Export's field name length", 30, v10, v11);
  *(_QWORD *)this = v108;
  *((_BYTE *)this + 8) = 1;
LABEL_52:
  WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>::~HashSet(&v106, (WTF::AtomStringImpl *)v4, v5, v6, v7, v12, v8, v9);
}

uint64_t WTF::makeString<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(int **a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13[3];
  BOOL v14;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  if (a3)
  {
    v8 = a3;
    do
    {
      v13[0] = v7;
      result = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>(a2, v8, v13);
      if ((_DWORD)result == -1)
        break;
      v7 = v13[0];
      v10 = result < 0x10000 ? 1 : 2;
      v5 += v10;
      v6 |= result;
    }
    while (v13[0] < v8);
    if (v7 > v8)
    {
      __break(1u);
LABEL_18:
      __break(0xC471u);
      return result;
    }
  }
  if (v5 >> 31)
    v11 = 0;
  else
    v11 = v5;
  v13[0] = a2;
  v13[1] = v7;
  if (v5 >> 31)
    v12 = 0;
  else
    v12 = v5;
  v13[2] = v12;
  v14 = v6 < 0x80;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>(v11, v6 < 0x80, (uint64_t)v13, a1);
  if (!*a1)
    goto LABEL_18;
  return result;
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, float a6)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  BOOL v11;
  int *v12;
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  float v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  int *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  int *v80;
  const char *v81;
  int v82;
  const char *v83;
  WTF *v84;
  __int128 v85;
  _BYTE v86[128];
  uint64_t v87;

  v8 = 0;
  v87 = *MEMORY[0x1E0C80C00];
  v9 = a3 + a2;
  do
  {
    v10 = (v9 % 0xA) | 0x30;
    v86[v8-- - 8] = v10;
    v11 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v11);
  if (v8 + 26 >= 27)
    __break(1u);
  if (v8)
  {
    if ((unint64_t)-v8 >> 31)
    {
      __break(0xC471u);
LABEL_44:
      JUMPOUT(0x198E1D48CLL);
    }
    v12 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v8));
    v13 = v12 + 5;
    *v12 = 2;
    v12[1] = -(int)v8;
    *((_QWORD *)v12 + 1) = v12 + 5;
    v12[4] = 4;
    if (v8 == -1)
      *v13 = v10;
    else
      memcpy(v13, &v86[v8 - 7], -v8);
  }
  else
  {
    v12 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v83 = (const char *)off_1E3572250;
  v84 = (WTF *)v86;
  v85 = xmmword_199122F80;
  v86[0] = 0;
  WTF::StringImpl::utf8ForCharacters("duplicate export: '", 0x13uLL, (uint64_t)&v81, a6);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v83, "StringView", &v81);
  if (v82 != -1)
    ((void (*)(int **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v82])(&v80, &v81);
  (*((void (**)(const char **))v83 + 5))(&v83);
  (*((void (**)(const char **))v83 + 5))(&v83);
  v21 = v84;
  if (!v84)
  {
    v75 = 0;
    goto LABEL_16;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v84, v85, (uint64_t *)&v75);
  v21 = v84;
  if (v84 != (WTF *)v86)
LABEL_16:
    WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
  JSC::Wasm::makeString(a4, (int **)&v74);
  v83 = (const char *)off_1E3572250;
  v84 = (WTF *)v86;
  v85 = xmmword_199122F80;
  v86[0] = 0;
  WTF::StringImpl::utf8ForCharacters("'", 1uLL, (uint64_t)&v81, v22);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v83, "StringView", &v81);
  if (v82 != -1)
    ((void (*)(int **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v82])(&v80, &v81);
  (*((void (**)(const char **))v83 + 5))(&v83);
  (*((void (**)(const char **))v83 + 5))(&v83);
  v30 = v84;
  if (!v84)
  {
    v73 = 0;
    goto LABEL_23;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v84, v85, (uint64_t *)&v73);
  v30 = v84;
  if (v84 != (WTF *)v86)
LABEL_23:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  v83 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v84) = 41;
  v80 = v12;
  v81 = ": ";
  v82 = 2;
  v78 = v74;
  v79 = v75;
  v77 = v73;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v83, (uint64_t *)&v80, (uint64_t)&v81, (uint64_t *)&v79, (uint64_t *)&v78, (uint64_t *)&v77, &v76);
  if (!v76)
  {
    __break(0xC471u);
    goto LABEL_44;
  }
  *a1 = v76;
  v76 = 0;
  v38 = v73;
  v73 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  v39 = v74;
  v74 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
  v40 = v75;
  v75 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
  }
  if (*v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v31, v32, v33, v34, v35, v36, v37);
    WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
  }
  else
  {
    *v12 -= 2;
  }
}

void JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, int a4, char *a5, uint64_t a6, int a7, uint64_t a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  uint64_t v23;
  _BYTE *v24;
  WTF::StringImpl *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  float v34;
  unsigned int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  float v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF *v71;
  float v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  float v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF *v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  uint64_t v187;
  int v188;
  char v189;
  void (**v190)(WTF::StringPrintStream *__hidden);
  WTF *v191;
  __int128 v192;
  _BYTE v193[128];
  uint64_t v194;

  v12 = a7;
  v13 = a6;
  v14 = a5;
  v15 = 0;
  v16 = a9;
  v194 = *MEMORY[0x1E0C80C00];
  v17 = a3 + a2;
  do
  {
    v18 = (v17 % 0xA) | 0x30;
    v193[v15-- - 8] = v18;
    v19 = v17 > 9;
    v17 /= 0xAuLL;
  }
  while (v19);
  if (v15 + 26 >= 27)
    __break(1u);
  if (v15)
  {
    v178 = a4;
    if ((unint64_t)-v15 >> 31)
    {
      __break(0xC471u);
LABEL_104:
      JUMPOUT(0x198E1DC28);
    }
    v23 = WTF::fastCompactMalloc((WTF *)(20 - v15));
    v24 = (_BYTE *)(v23 + 20);
    *(_DWORD *)v23 = 2;
    *(_DWORD *)(v23 + 4) = -(int)v15;
    *(_QWORD *)(v23 + 8) = v23 + 20;
    v25 = (WTF::StringImpl *)v23;
    *(_DWORD *)(v23 + 16) = 4;
    if (v15 == -1)
      *v24 = v18;
    else
      memcpy(v24, &v193[v15 - 7], -v15);
    v12 = a7;
    v16 = a9;
    v13 = a6;
    v14 = a5;
    a4 = v178;
  }
  else
  {
    v25 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v190, "%u", a4);
  v190[5]((WTF::StringPrintStream *)&v190);
  v33 = v191;
  if (!v191)
  {
    v186 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v186);
  v33 = v191;
  if (v191 != (WTF *)v193)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  if (v14)
  {
    v35 = v13 - 1;
    if (!v13)
      v35 = 0;
    WTF::StringImpl::utf8ForCharacters(v14, v35, (uint64_t)&v187, v34);
  }
  else
  {
    v36 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v36 = 1;
    *(_QWORD *)(v36 + 8) = 0;
    *(_BYTE *)(v36 + 16) = 0;
    v187 = v36;
    v188 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v190, "StringView", &v187);
  if (v188 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v188])(&v189, &v187);
  v190[5]((WTF::StringPrintStream *)&v190);
  v190[5]((WTF::StringPrintStream *)&v190);
  v44 = v191;
  if (!v191)
  {
    v185 = 0;
    goto LABEL_27;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v185);
  v44 = v191;
  if (v191 != (WTF *)v193)
LABEL_27:
    WTF::fastFree((unint64_t)v44, v37, v38, v39, v40, v41, v42, v43);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v190, "%u", v12);
  v190[5]((WTF::StringPrintStream *)&v190);
  v52 = v191;
  if (!v191)
  {
    v184 = 0;
    goto LABEL_32;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v184);
  v52 = v191;
  if (v191 != (WTF *)v193)
LABEL_32:
    WTF::fastFree((unint64_t)v52, v45, v46, v47, v48, v49, v50, v51);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  if (v16)
  {
    v54 = a10 - 1;
    if (!a10)
      v54 = 0;
    WTF::StringImpl::utf8ForCharacters(v16, v54, (uint64_t)&v187, v53);
  }
  else
  {
    v55 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v55 = 1;
    *(_QWORD *)(v55 + 8) = 0;
    *(_BYTE *)(v55 + 16) = 0;
    v187 = v55;
    v188 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v190, "StringView", &v187);
  if (v188 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v188])(&v189, &v187);
  v190[5]((WTF::StringPrintStream *)&v190);
  v190[5]((WTF::StringPrintStream *)&v190);
  v63 = v191;
  if (!v191)
  {
    v183 = 0;
    goto LABEL_44;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v183);
  v63 = v191;
  if (v191 != (WTF *)v193)
LABEL_44:
    WTF::fastFree((unint64_t)v63, v56, v57, v58, v59, v60, v61, v62);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v190, "%lu", a11);
  v190[5]((WTF::StringPrintStream *)&v190);
  v71 = v191;
  if (!v191)
  {
    v182 = 0;
    goto LABEL_49;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v182);
  v71 = v191;
  if (v191 != (WTF *)v193)
LABEL_49:
    WTF::fastFree((unint64_t)v71, v64, v65, v66, v67, v68, v69, v70);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  WTF::StringImpl::utf8ForCharacters(", named '", 9uLL, (uint64_t)&v187, v72);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v190, "StringView", &v187);
  if (v188 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v188])(&v189, &v187);
  v190[5]((WTF::StringPrintStream *)&v190);
  v190[5]((WTF::StringPrintStream *)&v190);
  v80 = v191;
  if (!v191)
  {
    v181 = 0;
    goto LABEL_56;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v181);
  v80 = v191;
  if (v191 != (WTF *)v193)
LABEL_56:
    WTF::fastFree((unint64_t)v80, v73, v74, v75, v76, v77, v78, v79);
  JSC::Wasm::makeString(a12, (int **)&v180);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  WTF::StringImpl::utf8ForCharacters("'", 1uLL, (uint64_t)&v187, v81);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v190, "StringView", &v187);
  if (v188 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v188])(&v189, &v187);
  v190[5]((WTF::StringPrintStream *)&v190);
  v190[5]((WTF::StringPrintStream *)&v190);
  v89 = v191;
  if (!v191)
  {
    v179 = 0;
    goto LABEL_63;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v179);
  v89 = v191;
  if (v191 != (WTF *)v193)
LABEL_63:
    WTF::fastFree((unint64_t)v89, v82, v83, v84, v85, v86, v87, v88);
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((int **)&v190, (int8x16_t *)"WebAssembly.Module doesn't parse at byte ", 42, (uint64_t)v25, (int8x16_t *)": ", 3, (uint64_t)v186, (uint64_t)v185, (uint64_t)v184, (uint64_t)v183, (uint64_t)v182, (uint64_t)v181, (uint64_t)v180, (uint64_t)v179);
  if (!v190)
  {
    __break(0xC471u);
    goto LABEL_104;
  }
  *a1 = v190;
  v97 = v179;
  v179 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v180;
  v180 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  v99 = v181;
  v181 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = v182;
  v182 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = v183;
  v183 = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
    }
    else
    {
      *(_DWORD *)v101 -= 2;
    }
  }
  v102 = v184;
  v184 = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
    {
      WTF::StringImpl::~StringImpl(v102, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
    }
    else
    {
      *(_DWORD *)v102 -= 2;
    }
  }
  v103 = v185;
  v185 = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
    }
    else
    {
      *(_DWORD *)v103 -= 2;
    }
  }
  v104 = v186;
  v186 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  if (*(_DWORD *)v25 == 2)
  {
    WTF::StringImpl::~StringImpl(v25, v90, v91, v92, v93, v94, v95, v96);
    WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
  }
  else
  {
    *(_DWORD *)v25 -= 2;
  }
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2, uint64_t a3, char *__src, uint64_t a5, int a6, char *a7, uint64_t a8, double a9, float a10, int a11, char *a12, uint64_t a13)
{
  int v14;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  uint64_t v24;
  _BYTE *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  int8x16_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  float v45;
  unsigned int v46;
  int8x16_t *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  float v64;
  unsigned int v65;
  int8x16_t *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  uint64_t v142;
  int8x16_t *v143;
  int v144;
  const char *v145;
  WTF *v146;
  __int128 v147;
  _BYTE v148[128];
  uint64_t v149;

  v14 = a6;
  v16 = a1;
  v17 = 0;
  v18 = a12;
  v149 = *MEMORY[0x1E0C80C00];
  v19 = a3 + a2;
  do
  {
    v20 = (v19 % 0xA) | 0x30;
    v148[v17-- - 8] = v20;
    v21 = v19 > 9;
    v19 /= 0xAuLL;
  }
  while (v21);
  if (v17 + 26 >= 27)
    __break(1u);
  if (v17)
  {
    v136 = __src;
    if ((unint64_t)-v17 >> 31)
    {
      __break(0xC471u);
LABEL_85:
      JUMPOUT(0x198E1E260);
    }
    v24 = WTF::fastCompactMalloc((WTF *)(20 - v17));
    v25 = (_BYTE *)(v24 + 20);
    *(_DWORD *)v24 = 2;
    *(_DWORD *)(v24 + 4) = -(int)v17;
    *(_QWORD *)(v24 + 8) = v24 + 20;
    v26 = (WTF::StringImpl *)v24;
    *(_DWORD *)(v24 + 16) = 4;
    if (v17 == -1)
      *v25 = v20;
    else
      memcpy(v25, &v148[v17 - 7], -v17);
    v16 = a1;
    v18 = a12;
    v14 = a6;
    __src = v136;
  }
  else
  {
    v26 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v145 = (const char *)off_1E3572250;
  v146 = (WTF *)v148;
  v147 = xmmword_199122F80;
  v148[0] = 0;
  if (__src)
  {
    v27 = a5 - 1;
    if (!a5)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v27, (uint64_t)&v143, a10);
  }
  else
  {
    v28 = (int8x16_t *)WTF::fastMalloc((WTF *)0x11);
    v28->i32[0] = 1;
    v28->i64[1] = 0;
    v28[1].i8[0] = 0;
    v143 = v28;
    v144 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v145, "StringView", &v143);
  if (v144 != -1)
    ((void (*)(uint64_t *, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v144])(&v142, &v143);
  (*((void (**)(const char **))v145 + 5))(&v145);
  (*((void (**)(const char **))v145 + 5))(&v145);
  v36 = v146;
  if (!v146)
  {
    v141 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v146, v147, (uint64_t *)&v141);
  v36 = v146;
  if (v146 != (WTF *)v148)
LABEL_22:
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  v145 = (const char *)off_1E3572250;
  v146 = (WTF *)v148;
  v147 = xmmword_199122F80;
  v148[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v145, "%u", v14);
  (*((void (**)(const char **))v145 + 5))(&v145);
  v44 = v146;
  if (!v146)
  {
    v140 = 0;
    goto LABEL_27;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v146, v147, (uint64_t *)&v140);
  v44 = v146;
  if (v146 != (WTF *)v148)
LABEL_27:
    WTF::fastFree((unint64_t)v44, v37, v38, v39, v40, v41, v42, v43);
  v145 = (const char *)off_1E3572250;
  v146 = (WTF *)v148;
  v147 = xmmword_199122F80;
  v148[0] = 0;
  if (a7)
  {
    v46 = a8 - 1;
    if (!a8)
      v46 = 0;
    WTF::StringImpl::utf8ForCharacters(a7, v46, (uint64_t)&v143, v45);
  }
  else
  {
    v47 = (int8x16_t *)WTF::fastMalloc((WTF *)0x11);
    v47->i32[0] = 1;
    v47->i64[1] = 0;
    v47[1].i8[0] = 0;
    v143 = v47;
    v144 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v145, "StringView", &v143);
  if (v144 != -1)
    ((void (*)(uint64_t *, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v144])(&v142, &v143);
  (*((void (**)(const char **))v145 + 5))(&v145);
  (*((void (**)(const char **))v145 + 5))(&v145);
  v55 = v146;
  if (!v146)
  {
    v139 = 0;
    goto LABEL_39;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v146, v147, (uint64_t *)&v139);
  v55 = v146;
  if (v146 != (WTF *)v148)
LABEL_39:
    WTF::fastFree((unint64_t)v55, v48, v49, v50, v51, v52, v53, v54);
  v145 = (const char *)off_1E3572250;
  v146 = (WTF *)v148;
  v147 = xmmword_199122F80;
  v148[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v145, "%u", a11);
  (*((void (**)(const char **))v145 + 5))(&v145);
  v63 = v146;
  if (!v146)
  {
    v138 = 0;
    goto LABEL_44;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v146, v147, (uint64_t *)&v138);
  v63 = v146;
  if (v146 != (WTF *)v148)
LABEL_44:
    WTF::fastFree((unint64_t)v63, v56, v57, v58, v59, v60, v61, v62);
  v145 = (const char *)off_1E3572250;
  v146 = (WTF *)v148;
  v147 = xmmword_199122F80;
  v148[0] = 0;
  if (v18)
  {
    v65 = a13 - 1;
    if (!a13)
      v65 = 0;
    WTF::StringImpl::utf8ForCharacters(v18, v65, (uint64_t)&v143, v64);
  }
  else
  {
    v66 = (int8x16_t *)WTF::fastMalloc((WTF *)0x11);
    v66->i32[0] = 1;
    v66->i64[1] = 0;
    v66[1].i8[0] = 0;
    v143 = v66;
    v144 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v145, "StringView", &v143);
  if (v144 != -1)
    ((void (*)(uint64_t *, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v144])(&v142, &v143);
  (*((void (**)(const char **))v145 + 5))(&v145);
  (*((void (**)(const char **))v145 + 5))(&v145);
  v74 = v146;
  if (!v146)
  {
    v137 = 0;
    goto LABEL_56;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v146, v147, (uint64_t *)&v137);
  v74 = v146;
  if (v146 != (WTF *)v148)
LABEL_56:
    WTF::fastFree((unint64_t)v74, v67, v68, v69, v70, v71, v72, v73);
  v145 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v146) = 41;
  v143 = (int8x16_t *)": ";
  v144 = 2;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v142, (uint64_t)&v145, (uint64_t)v26, &v143, (uint64_t)v141, (uint64_t)v140, (uint64_t)v139, (uint64_t)v138, (uint64_t)v137);
  if (!v142)
  {
    __break(0xC471u);
    goto LABEL_85;
  }
  *v16 = v142;
  v82 = v137;
  v137 = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
    {
      WTF::StringImpl::~StringImpl(v82, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v82 -= 2;
    }
  }
  v83 = v138;
  v138 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
    {
      WTF::StringImpl::~StringImpl(v83, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
    else
    {
      *(_DWORD *)v83 -= 2;
    }
  }
  v84 = v139;
  v139 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = v140;
  v140 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v141;
  v141 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v75, v76, v77, v78, v79, v80, v81);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  if (*(_DWORD *)v26 == 2)
  {
    WTF::StringImpl::~StringImpl(v26, v75, v76, v77, v78, v79, v80, v81);
    WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
  }
  else
  {
    *(_DWORD *)v26 -= 2;
  }
}

void JSC::Wasm::ModuleInformation::addDeclaredException(JSC::Wasm::ModuleInformation *this, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a2;
  v3 = *((_QWORD *)this + 39);
  if (v3 < 0)
    v4 = 63;
  else
    v4 = *(_QWORD *)(2 * v3);
  v5 = (uint64_t *)((char *)this + 312);
  if (v4 <= a2)
  {
    WTF::BitVector::resizeOutOfLine((JSC::Wasm::ModuleInformation *)((char *)this + 312), a2 + 1, 0);
    v3 = *v5;
  }
  if (v3 >= 0)
    v6 = 2 * v3 + 8;
  else
    v6 = (uint64_t)v5;
  *(_QWORD *)(v6 + ((v2 >> 3) & 0x1FFFFFF8)) |= 1 << v2;
}

void JSC::Wasm::SectionParser::parseStart(JSC::Wasm::SectionParser *this, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, float a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  JSC::Wasm::TypeDefinition *v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  WTF *v37;
  JSC::Wasm::TypeDefinition *i;
  int v39;
  char *v40;
  int v41;
  JSC::Wasm::TypeDefinition **v42;
  JSC::Wasm::TypeDefinition *v43;
  unint64_t CachedUnrolling;
  uint64_t v45;
  uint64_t v46;
  const JSC::Wasm::Type *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  const JSC::Wasm::TypeDefinition *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::Wasm::TypeInformation *v58;
  uint64_t *v59;
  int v60;
  uint64_t v61;

  v11 = a2[2];
  v12 = *a2;
  v13 = v11 - *a2;
  if (v11 <= *a2)
    goto LABEL_41;
  v14 = 0;
  v15 = 0;
  LODWORD(v16) = 0;
  v17 = a2[1];
  if (v13 >= 5)
    v13 = 5;
  v18 = v13 - 1;
  *a2 = v12 + 1;
  v19 = v17 + v12;
  v20 = v12 - v11;
  while (1)
  {
    LODWORD(v21) = *(char *)(v19 + v14);
    v16 = ((v21 & 0x7F) << v15) | v16;
    if ((v21 & 0x80000000) == 0)
      break;
    if (v18 == v14)
    {
      v12 += v14 + 1;
      goto LABEL_41;
    }
    v21 = v12 + v14 + 2;
    *a2 = v21;
    ++v14;
    v15 += 7;
    if (!(v20 + v14))
    {
      __break(1u);
      break;
    }
  }
  v12 += v14 + 1;
  if ((_DWORD)v14 == 4 && v21 >= 0x10u)
  {
LABEL_41:
    v32 = a2[6];
    v33 = "can't get Start index";
    v34 = v12;
    v35 = 22;
  }
  else
  {
    v22 = a2[7];
    v23 = *(unsigned int *)(v22 + 36);
    v24 = *(unsigned int *)(v22 + 52);
    if (v24 + v23 <= v16)
    {
      JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v61, v12, a2[6], "Start index ", 13, v16, " exceeds function index space ", 31, a6, a7, v24 + v23);
      goto LABEL_29;
    }
    if (v23 > v16)
    {
      v26 = (_QWORD *)(v22 + 24);
      v25 = v16;
    }
    else
    {
      v25 = v16 - v23;
      if (v16 - v23 >= v24)
      {
        __break(0xC471u);
        return;
      }
      v26 = (_QWORD *)(v22 + 40);
    }
    v27 = *(JSC::Wasm::TypeDefinition **)(*v26 + 8 * v25);
    if (*((_DWORD *)v27 + 8) == 4)
    {
      v59 = a2;
      v60 = v16;
      v58 = *(JSC::Wasm::TypeInformation **)(*v26 + 8 * v25);
      v36 = (unsigned int *)*((_QWORD *)v27 + 1);
      v37 = *(WTF **)v36;
      v27 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v36 + 8) + 8 * v36[2]);
      for (i = v27; ; i = *v42)
      {
        v39 = *((_DWORD *)i + 8);
        if (v39 == 2)
        {
          if (!*((_BYTE *)i + 16))
            goto LABEL_50;
          goto LABEL_47;
        }
        if (v39 == 1)
        {
          if (!*((_BYTE *)i + 20))
            goto LABEL_50;
          goto LABEL_47;
        }
        if (!v39)
          break;
        v40 = (char *)i + 8;
        if (v39 != 5)
          v40 = 0;
        v41 = *((_DWORD *)v40 + 2);
        v42 = *(JSC::Wasm::TypeDefinition ***)v40;
        if (v41)
        {
          v43 = v42[1];
          if (*((_DWORD *)v43 + 8) == 4 && !**((_QWORD **)v43 + 1))
            goto LABEL_47;
        }
      }
      if (!*((_BYTE *)i + 24))
        goto LABEL_50;
LABEL_47:
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v58, (unint64_t)a2, a3, a4, a5, v16, a9, a10);
      if (v51)
      {
        v27 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v27 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v27, v37, v45, v46, v47, v48, v49, v50);
        JSC::Wasm::TypeInformation::addCachedUnrolling(v58, v27, v52, v53, v54, v55, v56, v57);
      }
LABEL_50:
      a2 = v59;
      LODWORD(v16) = v60;
    }
    v28 = *((_DWORD *)v27 + 8);
    if (v28 == 5)
    {
      v27 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v27 + 1);
      v28 = *((_DWORD *)v27 + 8);
    }
    if (v28)
      v29 = 0;
    else
      v29 = (char *)v27 + 8;
    if (*((_DWORD *)v29 + 2))
    {
      v31 = *a2;
      v32 = a2[6];
      v33 = "Start function can't have arguments";
    }
    else
    {
      if (!*((_DWORD *)v29 + 3))
      {
        v30 = a2[7];
        *(_DWORD *)(v30 + 152) = v16;
        *(_BYTE *)(v30 + 156) = 1;
        *(_BYTE *)this = 0;
        *((_BYTE *)this + 8) = 0;
        return;
      }
      v31 = *a2;
      v32 = a2[6];
      v33 = "Start function can't return a value";
    }
    v34 = v31;
    v35 = 36;
  }
  JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v61, v34, v32, v33, v35, a6, a7);
LABEL_29:
  *(_QWORD *)this = v61;
  *((_BYTE *)this + 8) = 1;
}

void JSC::Wasm::SectionParser::parseElement(JSC::Wasm::SectionParser *this, uint64_t a2)
{
  __n128 v4;
  float v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  float v23;
  int64x2_t v24;
  int v25;
  __n128 v26;
  unint64_t v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  int64x2_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int32x2_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  __n128 v65;
  float v66;
  double v67;
  float v68;
  int64x2_t v69;
  uint64_t v70;
  unint64_t v71;
  __n128 v72;
  float v73;
  int v74;
  int32x2_t v75;
  int64x2_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  char v162;
  uint64_t v163;
  char v164;
  _OWORD v165[3];
  __int128 v166;
  __int128 v167;
  unsigned int v168;
  uint64_t v169;
  int v170;
  int v171;
  unsigned int v172[3];

  v172[0] = 0;
  if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, v172))
  {
    v111 = *(_QWORD *)a2;
    v112 = *(_QWORD *)(a2 + 48);
    v113 = "can't get Element section's count";
    v114 = 34;
LABEL_136:
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(v165, v111, v112, v113, v114, v4.n128_f64[0], v5);
    goto LABEL_43;
  }
  if (v172[0] >= 0x989681)
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(v165, *(_QWORD *)a2, *(_QWORD *)(a2 + 48), "Element section's count is too big ", 36, v172[0], " maximum ", 10, v4.n128_f64[0], v5, 10000000);
    goto LABEL_43;
  }
  v6 = *(_QWORD *)(a2 + 56);
  if (*(_DWORD *)(v6 + 184))
  {
    __break(0xC471u);
    JUMPOUT(0x198E1F18CLL);
  }
  if (!v172[0])
    goto LABEL_40;
  v7 = 80 * v172[0];
  WTF::tryFastMalloc((WTF *)(80 * v172[0]), v165);
  v8 = *(_QWORD *)&v165[0];
  if (!*(_QWORD *)&v165[0])
  {
    v56 = v172[0];
    v51 = *(_QWORD *)a2;
    v52 = *(_QWORD *)(a2 + 48);
    v53 = "can't allocate memory for ";
    v54 = " Elements";
    v55 = 27;
    v57 = 10;
LABEL_42:
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(v165, v51, v52, v53, v55, v56, v54, v57, v4.n128_f64[0], v5);
LABEL_43:
    *(_QWORD *)this = *(_QWORD *)&v165[0];
    *((_BYTE *)this + 8) = 1;
    return;
  }
  *(_DWORD *)(v6 + 184) = v7 / 0x50;
  *(_QWORD *)(v6 + 176) = v8;
  if (!v172[0])
  {
LABEL_40:
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 8) = 0;
    return;
  }
  v9 = 0;
  while (2)
  {
    v171 = 0;
    if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v171))
    {
      v51 = *(_QWORD *)a2;
      v52 = *(_QWORD *)(a2 + 48);
      v53 = "can't get ";
      v54 = "th Element reserved byte, which should be element flags";
      v55 = 11;
      v56 = v9;
      v57 = 56;
      goto LABEL_42;
    }
    switch(v171)
    {
      case 0:
        if (BYTE1(dword_1ECF4C7B0))
          v13 = 227;
        else
          v13 = 240;
        if (BYTE1(dword_1ECF4C7B0))
          v14 = -16;
        else
          v14 = 0;
        JSC::Wasm::SectionParser::validateElementTableIdx((uint64_t)v165, (uint64_t *)a2, 0, v13, v14, v10, v11, v12, v4.n128_f64[0], v5);
        if (BYTE8(v165[0]))
          goto LABEL_134;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        LOBYTE(v169) = 0;
        LOBYTE(v170) = 0;
        JSC::Wasm::SectionParser::parseI32InitExpr((uint64_t)v165, (uint64_t *)a2, (uint64_t)&v169, "Element init_expr must produce an i32", 38, v22, v23);
        if (BYTE8(v165[0]))
          goto LABEL_134;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        v168 = 0;
        JSC::Wasm::SectionParser::parseIndexCountForElementSection((JSC::Wasm::SectionParser *)v165, (unsigned int *)a2, (int *)&v168, v9);
        if (BYTE8(v165[0]))
          goto LABEL_134;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        v26.n128_u64[0] = (unint64_t)vdup_n_s32(BYTE1(dword_1ECF4C7B0) == 0);
        LOBYTE(v165[0]) = 0;
        v24.i64[0] = v26.n128_u32[0];
        v24.i64[1] = v26.n128_u32[1];
        v25 = 227;
        *(int8x16_t *)((char *)v165 + 8) = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v24, 0x3FuLL)), (int8x16_t)xmmword_19915A120, (int8x16_t)xmmword_19915AE50);
        *((_QWORD *)&v165[1] + 1) = 0x100000000;
        *(_QWORD *)&v165[2] = v169;
        DWORD2(v165[2]) = v170;
        v26.n128_u64[0] = 0;
        v166 = 0u;
        v167 = 0u;
        v27 = v168;
        if (v168)
          goto LABEL_20;
        goto LABEL_24;
      case 1:
        JSC::Wasm::SectionParser::parseElementKind((JSC::Wasm::SectionParser *)v165, (unsigned __int8 *)a2, &v168, v4.n128_f64[0], v5);
        if (BYTE8(v165[0]))
          goto LABEL_134;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        LODWORD(v169) = 0;
        JSC::Wasm::SectionParser::parseIndexCountForElementSection((JSC::Wasm::SectionParser *)v165, (unsigned int *)a2, (int *)&v169, v9);
        if (BYTE8(v165[0]))
          goto LABEL_134;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        v58 = vdup_n_s32(BYTE1(dword_1ECF4C7B0) == 0);
        v59 = 1;
        goto LABEL_30;
      case 2:
        v168 = 0;
        if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v168))
          goto LABEL_169;
        if (BYTE1(dword_1ECF4C7B0))
          v63 = 227;
        else
          v63 = 240;
        if (BYTE1(dword_1ECF4C7B0))
          v64 = -16;
        else
          v64 = 0;
        JSC::Wasm::SectionParser::validateElementTableIdx((uint64_t)v165, (uint64_t *)a2, v168, v63, v64, v60, v61, v62, v4.n128_f64[0], v5);
        if (BYTE8(v165[0]))
          goto LABEL_134;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        LOBYTE(v169) = 0;
        LOBYTE(v170) = 0;
        JSC::Wasm::SectionParser::parseI32InitExpr((uint64_t)v165, (uint64_t *)a2, (uint64_t)&v169, "Element init_expr must produce an i32", 38, v65, v66);
        if (BYTE8(v165[0]))
          goto LABEL_134;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        JSC::Wasm::SectionParser::parseElementKind((JSC::Wasm::SectionParser *)v165, (unsigned __int8 *)a2, &v162, v67, v68);
        if (BYTE8(v165[0]))
          goto LABEL_134;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        v161 = 0;
        JSC::Wasm::SectionParser::parseIndexCountForElementSection((JSC::Wasm::SectionParser *)v165, (unsigned int *)a2, (int *)&v161, v9);
        if (BYTE8(v165[0]))
          goto LABEL_134;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        v26.n128_u64[0] = (unint64_t)vdup_n_s32(BYTE1(dword_1ECF4C7B0) == 0);
        LOBYTE(v165[0]) = 0;
        v69.i64[0] = v26.n128_u32[0];
        v69.i64[1] = v26.n128_u32[1];
        v25 = 227;
        *(int8x16_t *)((char *)v165 + 8) = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v69, 0x3FuLL)), (int8x16_t)xmmword_19915A120, (int8x16_t)xmmword_19915AE50);
        *((_QWORD *)&v165[1] + 1) = v168 | 0x100000000;
        *(_QWORD *)&v165[2] = v169;
        DWORD2(v165[2]) = v170;
        v26.n128_u64[0] = 0;
        v166 = 0u;
        v167 = 0u;
        v27 = v161;
        if (!v161)
          goto LABEL_24;
        goto LABEL_20;
      case 3:
        JSC::Wasm::SectionParser::parseElementKind((JSC::Wasm::SectionParser *)v165, (unsigned __int8 *)a2, &v168, v4.n128_f64[0], v5);
        if (BYTE8(v165[0]))
          goto LABEL_134;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        LODWORD(v169) = 0;
        JSC::Wasm::SectionParser::parseIndexCountForElementSection((JSC::Wasm::SectionParser *)v165, (unsigned int *)a2, (int *)&v169, v9);
        if (BYTE8(v165[0]))
          goto LABEL_134;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        v58 = vdup_n_s32(BYTE1(dword_1ECF4C7B0) == 0);
        v59 = 2;
LABEL_30:
        LOBYTE(v165[0]) = v59;
        v49.i64[0] = v58.u32[0];
        v49.i64[1] = v58.u32[1];
        v25 = 227;
        *(int8x16_t *)((char *)v165 + 8) = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v49, 0x3FuLL)), (int8x16_t)xmmword_19915A120, (int8x16_t)xmmword_19915AE50);
        v26.n128_u64[0] = 0;
        v166 = 0u;
        v167 = 0u;
        memset((char *)&v165[1] + 8, 0, 20);
        v27 = v169;
        if (!(_DWORD)v169)
          goto LABEL_24;
LABEL_20:
        WTF::tryFastMalloc((WTF *)v27, &v163);
        if (!v163)
          goto LABEL_84;
        DWORD2(v166) = v27;
        *(_QWORD *)&v166 = v163;
        if (v27 >> 29)
          goto LABEL_84;
        WTF::tryFastMalloc((WTF *)(8 * v27), &v163);
        if (!v163)
          goto LABEL_84;
        DWORD2(v167) = v27;
        *(_QWORD *)&v167 = v163;
LABEL_24:
        JSC::Wasm::SectionParser::parseElementSegmentVectorOfIndexes((uint64_t)&v163, (uint64_t *)a2, (uint64_t)&v166, (uint64_t)&v167, v27, v9, v26.n128_f64[0], *(float *)&v25);
        goto LABEL_25;
      case 4:
        if (BYTE1(dword_1ECF4C7B0))
          v70 = 227;
        else
          v70 = 240;
        if (BYTE1(dword_1ECF4C7B0))
          v71 = -16;
        else
          v71 = 0;
        JSC::Wasm::SectionParser::validateElementTableIdx((uint64_t)v165, (uint64_t *)a2, 0, v70, v71, v10, v11, v12, v4.n128_f64[0], v5);
        if (BYTE8(v165[0]))
          goto LABEL_134;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        LOBYTE(v169) = 0;
        LOBYTE(v170) = 0;
        JSC::Wasm::SectionParser::parseI32InitExpr((uint64_t)v165, (uint64_t *)a2, (uint64_t)&v169, "Element init_expr must produce an i32", 38, v72, v73);
        if (BYTE8(v165[0]))
          goto LABEL_134;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        v168 = 0;
        JSC::Wasm::SectionParser::parseIndexCountForElementSection((JSC::Wasm::SectionParser *)v165, (unsigned int *)a2, (int *)&v168, v9);
        if (BYTE8(v165[0]))
          goto LABEL_134;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        v74 = BYTE1(dword_1ECF4C7B0);
        v75 = vdup_n_s32(BYTE1(dword_1ECF4C7B0) == 0);
        LOBYTE(v165[0]) = 0;
        v76.i64[0] = v75.u32[0];
        v76.i64[1] = v75.u32[1];
        v25 = 227;
        *(int8x16_t *)((char *)v165 + 8) = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v76, 0x3FuLL)), (int8x16_t)xmmword_19915A120, (int8x16_t)xmmword_19915AE50);
        *((_QWORD *)&v165[1] + 1) = 0x100000000;
        *(_QWORD *)&v165[2] = v169;
        DWORD2(v165[2]) = v170;
        v26 = 0uLL;
        v166 = 0u;
        v167 = 0u;
        v27 = v168;
        if (!v168)
          goto LABEL_77;
        WTF::tryFastMalloc((WTF *)v168, &v163);
        if (v163)
        {
          DWORD2(v166) = v27;
          *(_QWORD *)&v166 = v163;
          if (!(v27 >> 29))
          {
            WTF::tryFastMalloc((WTF *)(8 * v27), &v163);
            if (v163)
            {
              DWORD2(v167) = v27;
              *(_QWORD *)&v167 = v163;
              v74 = BYTE1(dword_1ECF4C7B0);
LABEL_77:
              if (v74)
                v77 = 227;
              else
                v77 = 240;
              if (v74)
                v78 = -16;
              else
                v78 = 0;
              JSC::Wasm::SectionParser::parseElementSegmentVectorOfExpressions(&v163, (uint64_t *)a2, v77, v78, (uint64_t)&v166, (uint64_t)&v167, v27, v9, v26, *(float *)&v25);
LABEL_25:
              if (!v164)
              {
                std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v163, v28, v29, v30, v31, v32, v33, v34);
                v42 = *(_QWORD *)(a2 + 56);
                v43 = *(_DWORD *)(v42 + 188);
                if (v43 == *(_DWORD *)(v42 + 184))
                  goto LABEL_39;
                goto LABEL_27;
              }
LABEL_141:
              v115 = v163;
              v163 = 0;
              *(_QWORD *)this = v115;
              *((_BYTE *)this + 8) = 1;
              std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v163, v28, v29, v30, v31, v32, v33, v34);
LABEL_86:
              JSC::Wasm::Element::~Element((JSC::Wasm::Element *)v165, v82, v83, v84, v85, v86, v87, v88);
              return;
            }
          }
        }
LABEL_84:
        v79 = *(_QWORD *)a2;
        v80 = *(_QWORD *)(a2 + 48);
        v81 = v27;
        goto LABEL_85;
      case 5:
        v89 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
          goto LABEL_185;
        v90 = *(_QWORD *)(a2 + 56);
        *(_QWORD *)a2 = v89 + 1;
        v91 = *(char *)(*(_QWORD *)(a2 + 8) + v89);
        if ((v91 & 0x80000000) != 0)
          goto LABEL_185;
        LODWORD(v92) = v91 | (v91 >> 6 << 7);
        if (!JSC::Wasm::isValidTypeKind<signed char>((char)(v91 | ((v91 >> 6) << 7))))
          goto LABEL_185;
        if (!BYTE1(dword_1ECF4C7B0))
        {
          if ((v92 + 29) < 2u)
            goto LABEL_185;
LABEL_93:
          v93 = 0;
          goto LABEL_94;
        }
        v93 = (char)v92;
        v94 = (char)v92 + 22;
        if (v94 <= 9 && (((1 << v94) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
        {
          LOBYTE(v92) = -29;
          goto LABEL_94;
        }
        if ((v92 + 29) >= 2u)
          goto LABEL_93;
        LODWORD(v165[0]) = 0;
        if (!WTF::LEBDecoder::decodeInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (int *)v165))
          goto LABEL_185;
        v93 = SLODWORD(v165[0]);
        if ((v165[0] & 0x80000000) != 0)
        {
          if ((unint64_t)(SLODWORD(v165[0]) + 22) > 9
            || ((1 << (LOBYTE(v165[0]) + 22)) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
          {
            goto LABEL_185;
          }
        }
        else
        {
          if (LODWORD(v165[0]) >= *(_DWORD *)(v90 + 100))
          {
            if (!*(_BYTE *)(a2 + 32))
              goto LABEL_185;
            v121 = *(_DWORD *)(a2 + 36);
            if (LODWORD(v165[0]) < v121 || LODWORD(v165[0]) >= *(_DWORD *)(a2 + 40))
              goto LABEL_185;
          }
          else if (!*(_BYTE *)(a2 + 32) || (v121 = *(_DWORD *)(a2 + 36), LODWORD(v165[0]) < v121))
          {
            v93 = *(_QWORD *)(*(_QWORD *)(v90 + 88) + 8 * LODWORD(v165[0]));
            goto LABEL_94;
          }
          JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(LODWORD(v165[0]) - v121), v116, v117, v118, v119, v120, (unsigned int **)v165);
          v93 = *(_QWORD *)&v165[0];
          *(_QWORD *)&v165[0] = 0;
          if (v93)
          {
            do
            {
              v141 = __ldaxr((unsigned int *)v93);
              v142 = v141 - 1;
            }
            while (__stlxr(v142, (unsigned int *)v93));
            if (!v142)
            {
              atomic_store(1u, (unsigned int *)v93);
              WTF::fastFree(v93, v134, v135, v136, v137, v138, v139, v140);
            }
          }
        }
LABEL_94:
        v92 = v92;
        if (!JSC::Wasm::isValueType(v92, v93))
          goto LABEL_185;
        v95 = BYTE1(dword_1ECF4C7B0) ? 29 : 17;
        if ((v95 + v92) >= 2u)
          goto LABEL_185;
        LODWORD(v169) = 0;
        JSC::Wasm::SectionParser::parseIndexCountForElementSection((JSC::Wasm::SectionParser *)v165, (unsigned int *)a2, (int *)&v169, v9);
        if (BYTE8(v165[0]))
          goto LABEL_134;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        v96 = 1;
        goto LABEL_32;
      case 6:
        v168 = 0;
        if (!WTF::LEBDecoder::decodeUInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, &v168))
        {
LABEL_169:
          v51 = *(_QWORD *)a2;
          v52 = *(_QWORD *)(a2 + 48);
          v53 = "can't get ";
          v54 = "th Element table index";
          v55 = 11;
          v56 = v9;
          v57 = 23;
          goto LABEL_42;
        }
        LOBYTE(v169) = 0;
        LOBYTE(v170) = 0;
        JSC::Wasm::SectionParser::parseI32InitExpr((uint64_t)v165, (uint64_t *)a2, (uint64_t)&v169, "Element init_expr must produce an i32", 38, v4, v5);
        if (BYTE8(v165[0]))
          goto LABEL_134;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        v97 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16)
          || (v98 = *(_QWORD *)(a2 + 56),
              *(_QWORD *)a2 = v97 + 1,
              v99 = *(char *)(*(_QWORD *)(a2 + 8) + v97),
              (v99 & 0x80000000) != 0)
          || (LODWORD(v92) = v99 | (v99 >> 6 << 7),
              !JSC::Wasm::isValidTypeKind<signed char>((char)(v99 | ((v99 >> 6) << 7)))))
        {
LABEL_185:
          v111 = *(_QWORD *)a2;
          v112 = *(_QWORD *)(a2 + 48);
          v113 = "can't parse reftype in elem section";
          v114 = 36;
          goto LABEL_136;
        }
        if (!BYTE1(dword_1ECF4C7B0))
        {
          if ((v92 + 29) < 2u)
            goto LABEL_185;
LABEL_109:
          v93 = 0;
          goto LABEL_110;
        }
        v93 = (char)v92;
        v100 = (char)v92 + 22;
        if (v100 <= 9 && (((1 << v100) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
        {
          LOBYTE(v92) = -29;
          goto LABEL_110;
        }
        if ((v92 + 29) >= 2u)
          goto LABEL_109;
        LODWORD(v165[0]) = 0;
        if (!WTF::LEBDecoder::decodeInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (int *)v165))
          goto LABEL_185;
        v93 = SLODWORD(v165[0]);
        if ((v165[0] & 0x80000000) != 0)
        {
          if ((unint64_t)(SLODWORD(v165[0]) + 22) > 9
            || ((1 << (LOBYTE(v165[0]) + 22)) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
          {
            goto LABEL_185;
          }
        }
        else
        {
          if (LODWORD(v165[0]) >= *(_DWORD *)(v98 + 100))
          {
            if (!*(_BYTE *)(a2 + 32))
              goto LABEL_185;
            v133 = *(_DWORD *)(a2 + 36);
            if (LODWORD(v165[0]) < v133 || LODWORD(v165[0]) >= *(_DWORD *)(a2 + 40))
              goto LABEL_185;
          }
          else if (!*(_BYTE *)(a2 + 32) || (v133 = *(_DWORD *)(a2 + 36), LODWORD(v165[0]) < v133))
          {
            v93 = *(_QWORD *)(*(_QWORD *)(v98 + 88) + 8 * LODWORD(v165[0]));
            goto LABEL_110;
          }
          JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(LODWORD(v165[0]) - v133), v128, v129, v130, v131, v132, (unsigned int **)v165);
          v93 = *(_QWORD *)&v165[0];
          *(_QWORD *)&v165[0] = 0;
          if (v93)
          {
            do
            {
              v159 = __ldaxr((unsigned int *)v93);
              v160 = v159 - 1;
            }
            while (__stlxr(v160, (unsigned int *)v93));
            if (!v160)
            {
              atomic_store(1u, (unsigned int *)v93);
              WTF::fastFree(v93, v152, v153, v154, v155, v156, v157, v158);
            }
          }
        }
LABEL_110:
        v92 = v92;
        if (!JSC::Wasm::isValueType(v92, v93))
          goto LABEL_185;
        v104 = BYTE1(dword_1ECF4C7B0) ? 29 : 17;
        if ((v104 + v92) >= 2u)
          goto LABEL_185;
        JSC::Wasm::SectionParser::validateElementTableIdx((uint64_t)v165, (uint64_t *)a2, v168, v92, v93, v101, v102, v103, v4.n128_f64[0], v5);
        if (!BYTE8(v165[0]))
        {
          std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
          v161 = 0;
          JSC::Wasm::SectionParser::parseIndexCountForElementSection((JSC::Wasm::SectionParser *)v165, (unsigned int *)a2, (int *)&v161, v9);
          if (!BYTE8(v165[0]))
          {
            std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
            LOBYTE(v165[0]) = 0;
            *((_QWORD *)&v165[0] + 1) = v92;
            *(_QWORD *)&v165[1] = v93;
            *((_QWORD *)&v165[1] + 1) = v168 | 0x100000000;
            *(_QWORD *)&v165[2] = v169;
            DWORD2(v165[2]) = v170;
            v26 = 0uLL;
            v166 = 0u;
            v167 = 0u;
            v50 = v161;
            if (v161)
            {
LABEL_33:
              WTF::tryFastMalloc((WTF *)v50, &v163);
              if (!v163
                || (DWORD2(v166) = v50, *(_QWORD *)&v166 = v163, v50 >> 29)
                || (WTF::tryFastMalloc((WTF *)(8 * v50), &v163), !v163))
              {
                v79 = *(_QWORD *)a2;
                v80 = *(_QWORD *)(a2 + 48);
                v81 = v50;
LABEL_85:
                JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v163, v79, v80, "can't allocate memory for ", 27, v81, " Element init_exprs", 20, v26.n128_f64[0], *(float *)&v25);
                *(_QWORD *)this = v163;
                *((_BYTE *)this + 8) = 1;
                goto LABEL_86;
              }
              DWORD2(v167) = v50;
              *(_QWORD *)&v167 = v163;
            }
LABEL_37:
            JSC::Wasm::SectionParser::parseElementSegmentVectorOfExpressions(&v163, (uint64_t *)a2, v92, v93, (uint64_t)&v166, (uint64_t)&v167, v50, v9, v26, *(float *)&v25);
            if (v164)
              goto LABEL_141;
            std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v163, v28, v29, v30, v31, v32, v33, v34);
            v42 = *(_QWORD *)(a2 + 56);
            v43 = *(_DWORD *)(v42 + 188);
            if (v43 == *(_DWORD *)(v42 + 184))
            {
LABEL_39:
              WTF::Vector<JSC::Wasm::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Element>(v42 + 176, (unint64_t)v165);
              goto LABEL_28;
            }
LABEL_27:
            v44 = *(_QWORD *)(v42 + 176) + 80 * v43;
            v45 = v165[0];
            v46 = v165[1];
            *(_OWORD *)(v44 + 25) = *(_OWORD *)((char *)&v165[1] + 9);
            *(_OWORD *)v44 = v45;
            *(_OWORD *)(v44 + 16) = v46;
            *(_QWORD *)(v44 + 48) = 0;
            *(_QWORD *)(v44 + 56) = 0;
            v47 = v166;
            *(_QWORD *)&v166 = 0;
            *(_QWORD *)(v44 + 48) = v47;
            LODWORD(v47) = DWORD2(v166);
            DWORD2(v166) = 0;
            *(_DWORD *)(v44 + 56) = v47;
            LODWORD(v47) = HIDWORD(v166);
            HIDWORD(v166) = 0;
            *(_DWORD *)(v44 + 60) = v47;
            *(_QWORD *)(v44 + 64) = 0;
            *(_QWORD *)(v44 + 72) = 0;
            v48 = v167;
            *(_QWORD *)&v167 = 0;
            *(_QWORD *)(v44 + 64) = v48;
            LODWORD(v48) = DWORD2(v167);
            DWORD2(v167) = 0;
            *(_DWORD *)(v44 + 72) = v48;
            LODWORD(v48) = HIDWORD(v167);
            HIDWORD(v167) = 0;
            *(_DWORD *)(v44 + 76) = v48;
            ++*(_DWORD *)(v42 + 188);
LABEL_28:
            JSC::Wasm::Element::~Element((JSC::Wasm::Element *)v165, v35, v36, v37, v38, v39, v40, v41);
            if (++v9 >= v172[0])
              goto LABEL_40;
            continue;
          }
        }
LABEL_134:
        v110 = *(_QWORD *)&v165[0];
        *(_QWORD *)&v165[0] = 0;
        *(_QWORD *)this = v110;
        *((_BYTE *)this + 8) = 1;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        return;
      case 7:
        v105 = *(_QWORD *)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
          goto LABEL_185;
        v106 = *(_QWORD *)(a2 + 56);
        *(_QWORD *)a2 = v105 + 1;
        v107 = *(char *)(*(_QWORD *)(a2 + 8) + v105);
        if ((v107 & 0x80000000) != 0)
          goto LABEL_185;
        LODWORD(v92) = v107 | (v107 >> 6 << 7);
        if (!JSC::Wasm::isValidTypeKind<signed char>((char)(v107 | ((v107 >> 6) << 7))))
          goto LABEL_185;
        if (!BYTE1(dword_1ECF4C7B0))
        {
          if ((v92 + 29) < 2u)
            goto LABEL_185;
LABEL_125:
          v93 = 0;
          goto LABEL_126;
        }
        v93 = (char)v92;
        v108 = (char)v92 + 22;
        if (v108 <= 9 && (((1 << v108) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
        {
          LOBYTE(v92) = -29;
          goto LABEL_126;
        }
        if ((v92 + 29) >= 2u)
          goto LABEL_125;
        LODWORD(v165[0]) = 0;
        if (!WTF::LEBDecoder::decodeInt32(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t *)a2, (int *)v165))
          goto LABEL_185;
        v93 = SLODWORD(v165[0]);
        if ((v165[0] & 0x80000000) != 0)
        {
          if ((unint64_t)(SLODWORD(v165[0]) + 22) > 9
            || ((1 << (LOBYTE(v165[0]) + 22)) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
          {
            goto LABEL_185;
          }
        }
        else
        {
          if (LODWORD(v165[0]) >= *(_DWORD *)(v106 + 100))
          {
            if (!*(_BYTE *)(a2 + 32))
              goto LABEL_185;
            v127 = *(_DWORD *)(a2 + 36);
            if (LODWORD(v165[0]) < v127 || LODWORD(v165[0]) >= *(_DWORD *)(a2 + 40))
              goto LABEL_185;
          }
          else if (!*(_BYTE *)(a2 + 32) || (v127 = *(_DWORD *)(a2 + 36), LODWORD(v165[0]) < v127))
          {
            v93 = *(_QWORD *)(*(_QWORD *)(v106 + 88) + 8 * LODWORD(v165[0]));
            goto LABEL_126;
          }
          JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(LODWORD(v165[0]) - v127), v122, v123, v124, v125, v126, (unsigned int **)v165);
          v93 = *(_QWORD *)&v165[0];
          *(_QWORD *)&v165[0] = 0;
          if (v93)
          {
            do
            {
              v150 = __ldaxr((unsigned int *)v93);
              v151 = v150 - 1;
            }
            while (__stlxr(v151, (unsigned int *)v93));
            if (!v151)
            {
              atomic_store(1u, (unsigned int *)v93);
              WTF::fastFree(v93, v143, v144, v145, v146, v147, v148, v149);
            }
          }
        }
LABEL_126:
        v92 = v92;
        if (!JSC::Wasm::isValueType(v92, v93))
          goto LABEL_185;
        v109 = BYTE1(dword_1ECF4C7B0) ? 29 : 17;
        if ((v109 + v92) >= 2u)
          goto LABEL_185;
        LODWORD(v169) = 0;
        JSC::Wasm::SectionParser::parseIndexCountForElementSection((JSC::Wasm::SectionParser *)v165, (unsigned int *)a2, (int *)&v169, v9);
        if (BYTE8(v165[0]))
          goto LABEL_134;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)v165, v15, v16, v17, v18, v19, v20, v21);
        v96 = 2;
LABEL_32:
        LOBYTE(v165[0]) = v96;
        *((_QWORD *)&v165[0] + 1) = v92;
        v165[1] = v93;
        v26 = 0uLL;
        v166 = 0u;
        v167 = 0u;
        *(_QWORD *)&v165[2] = 0;
        DWORD2(v165[2]) = 0;
        v50 = v169;
        if ((_DWORD)v169)
          goto LABEL_33;
        goto LABEL_37;
      default:
        v51 = *(_QWORD *)a2;
        v52 = *(_QWORD *)(a2 + 48);
        v53 = "can't get ";
        v54 = "th Element reserved byte";
        v55 = 11;
        v56 = v9;
        v57 = 25;
        goto LABEL_42;
    }
  }
}

void JSC::Wasm::SectionParser::validateElementTableIdx(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  uint64_t v13;
  uint64_t v16;
  double v17;
  float v18;
  uint64_t v19;

  v13 = a2[7];
  if (*(_DWORD *)(v13 + 204) <= a3)
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v19, *a2, a2[6], "Element section for Table ", 27, a3, " exceeds available Table ", 26, a9, a10, *(_DWORD *)(v13 + 204));
LABEL_7:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v16 = *(_QWORD *)(v13 + 192) + 48 * a3;
  if ((JSC::Wasm::isSubtype(a4, a5, *(_QWORD *)(v16 + 16), *(_QWORD *)(v16 + 24), a5, a6, a7, a8) & 1) == 0)
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral>(&v19, *a2, a2[6], a3, a4, a5, v17, v18);
    goto LABEL_7;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::SectionParser::parseIndexCountForElementSection(JSC::Wasm::SectionParser *this, unsigned int *a2, int *a3, int a4)
{
  double v8;
  float v9;
  uint64_t v10;
  int v11;

  v11 = 0;
  if (!WTF::LEBDecoder::decodeUInt32(*((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), (uint64_t *)a2, &v11))
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v10, *(_QWORD *)a2, *((_QWORD *)a2 + 6), "can't get ", 11, a4, "th index count for Element section", 35, v8, v9);
LABEL_7:
    *(_QWORD *)this = v10;
    *((_BYTE *)this + 8) = 1;
    return;
  }
  if (v11 == -1)
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v10, *(_QWORD *)a2, *((_QWORD *)a2 + 6), "Element section's ", 19, a4, "th index count is too big ", 27, v8, v9, -1);
    goto LABEL_7;
  }
  *a3 = v11;
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
}

void JSC::Wasm::SectionParser::parseElementSegmentVectorOfIndexes(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, int a6, double a7, float a8)
{
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (**v34)(WTF::StringPrintStream *__hidden);
  unsigned int v35;

  if (a5)
  {
    v13 = 0;
    while (1)
    {
      v14 = a2[2];
      v15 = *a2;
      v16 = v14 - *a2;
      if (v14 <= *a2)
        break;
      v17 = 0;
      v18 = 0;
      LODWORD(v19) = 0;
      v20 = a2[1];
      *a2 = v15 + 1;
      v21 = v20 + v15;
      v22 = v15 - v14;
      while (1)
      {
        LODWORD(v23) = *(char *)(v21 + v17);
        v19 = ((v23 & 0x7F) << v18) | v19;
        if ((v23 & 0x80000000) == 0)
          break;
        if (v16 >= 5)
          v32 = 5;
        else
          v32 = v16;
        if (v32 - 1 == v17)
          goto LABEL_34;
        v23 = v15 + v17 + 2;
        *a2 = v23;
        ++v17;
        v18 += 7;
        if (!(v22 + v17))
        {
          __break(1u);
          goto LABEL_33;
        }
      }
      v35 = v19;
      if ((_DWORD)v17 != 4)
        goto LABEL_7;
LABEL_33:
      if (v23 >= 0x10u)
      {
LABEL_34:
        v15 += v17 + 1;
        break;
      }
LABEL_7:
      v24 = (unsigned int *)a2[7];
      v25 = v24[13] + (unint64_t)v24[9];
      if (v25 <= v19)
      {
        JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v34, v15 + v17 + 1, a2[6], a6, v13, v19, v25, a7, a8);
        goto LABEL_32;
      }
      v26 = *((_QWORD *)v24 + 38);
      if (v26 < 0)
        v27 = 63;
      else
        v27 = *(_QWORD *)(2 * v26);
      v28 = (uint64_t *)(v24 + 76);
      if (v27 <= v19)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(v24 + 76), v19 + 1, 0);
        v26 = *v28;
      }
      if (v26 >= 0)
        v29 = 2 * v26 + 8;
      else
        v29 = (uint64_t)v28;
      *(_QWORD *)(v29 + ((v19 >> 3) & 0x1FFFFFF8)) |= 1 << v19;
      LOBYTE(v34) = 1;
      v30 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v30 == *(_DWORD *)(a3 + 8))
      {
        WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::JSEntrypointInterpreterCalleeMetadata>(a3, (unint64_t)&v34);
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)a3 + v30) = 1;
        *(_DWORD *)(a3 + 12) = v30 + 1;
      }
      v31 = *(unsigned int *)(a4 + 12);
      if ((_DWORD)v31 == *(_DWORD *)(a4 + 8))
      {
        WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(a4, &v35);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v31) = v19;
        *(_DWORD *)(a4 + 12) = v31 + 1;
      }
      if (++v13 == a5)
        goto LABEL_28;
    }
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v34, v15, a2[6], "can't get Element section's ", 29, a6, "th element's ", 14, a7, a8, v13, "th index", 9);
LABEL_32:
    *(_QWORD *)a1 = v34;
    *(_BYTE *)(a1 + 8) = 1;
  }
  else
  {
LABEL_28:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
}

void JSC::Wasm::SectionParser::parseElementKind(JSC::Wasm::SectionParser *this, unsigned __int8 *a2, _BYTE *a3, double a4, float a5)
{
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v7 = *(_QWORD *)a2;
  if (v7 >= *((_QWORD *)a2 + 2))
  {
    v8 = *((_QWORD *)a2 + 6);
    v9 = "can't get element kind";
    v10 = 23;
    goto LABEL_6;
  }
  *(_QWORD *)a2 = v7 + 1;
  if (*(_BYTE *)(*((_QWORD *)a2 + 1) + v7))
  {
    v8 = *((_QWORD *)a2 + 6);
    v9 = "element kind must be zero";
    ++v7;
    v10 = 26;
LABEL_6:
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v11, v7, v8, v9, v10, a4, a5);
    *(_QWORD *)this = v11;
    *((_BYTE *)this + 8) = 1;
    return;
  }
  *a3 = 0;
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
}

void JSC::Wasm::SectionParser::parseElementSegmentVectorOfExpressions(_BYTE *a1, uint64_t *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8, __n128 a9, float a10)
{
  int v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  signed __int8 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int *v32;
  char v33;
  __int128 v34;
  char v35;
  __n128 v36;
  unsigned __int8 v37;
  uint64_t v38;
  char v39;

  if (!a7)
  {
LABEL_29:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  v10 = a7;
  while (1)
  {
    v39 = 0;
    v38 = 0;
    v37 = 0;
    v35 = 0;
    JSC::Wasm::SectionParser::parseInitExpr((uint64_t)&v32, (uint64_t)a2, &v37, &v35, &v38, &v34, a3, a4, a9, a10, &v36);
    if (v33)
      goto LABEL_31;
    v20 = v36.n128_u8[0];
    if ((JSC::Wasm::isSubtype(v36.n128_u8[0], v36.n128_u64[1], a3, a4, v16, v17, v18, v19) & 1) == 0)
    {
      JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,JSC::Wasm::TypeKind,WTF::ASCIILiteral,JSC::Wasm::TypeKind>(&v32, *a2, a2[6], (WTF::StringImpl *)a8, (WTF::StringImpl *)v20, (int8x16_t *)(char)a3, a9.n128_f64[0], a10);
LABEL_31:
      *(_QWORD *)a1 = v32;
      a1[8] = 1;
      return;
    }
    if (!v35)
      break;
    v39 = 3;
LABEL_7:
    v21 = *(unsigned int *)(a5 + 12);
    if ((_DWORD)v21 == *(_DWORD *)(a5 + 8))
    {
      v22 = WTF::Vector<JSC::Wasm::JSEntrypointInterpreterCalleeMetadata,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a5, (WTF *)(v21 + 1), (unint64_t)&v39);
      v21 = *(unsigned int *)(a5 + 12);
      *(_BYTE *)(*(_QWORD *)a5 + v21) = *v22;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)a5 + v21) = v39;
    }
    *(_DWORD *)(a5 + 12) = v21 + 1;
    v23 = *(unsigned int *)(a6 + 12);
    if ((_DWORD)v23 == *(_DWORD *)(a6 + 8))
    {
      WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long long &>(a6, (unint64_t)&v38);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a6 + 8 * v23) = v38;
      *(_DWORD *)(a6 + 12) = v23 + 1;
    }
    if (!--v10)
      goto LABEL_29;
  }
  switch(v37)
  {
    case 0xD2u:
      v39 = 1;
      v24 = a2[7];
      v25 = *(_QWORD *)(v24 + 304);
      if (v25 < 0)
        v26 = 63;
      else
        v26 = *(_QWORD *)(2 * v25);
      v27 = v38;
      v28 = (uint64_t *)(v24 + 304);
      if (v26 <= v38)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)(v24 + 304), v38 + 1, 0);
        v25 = *v28;
      }
      if (v25 >= 0)
        v29 = 2 * v25 + 8;
      else
        v29 = (uint64_t)v28;
      *(_QWORD *)(v29 + ((v27 >> 3) & 0x1FFFFFF8)) |= 1 << v27;
      goto LABEL_7;
    case 0xD0u:
      v39 = 2;
      goto LABEL_7;
    case 0x23u:
      v39 = 0;
      goto LABEL_7;
  }
  __break(0xC471u);
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned char>(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, int a6, double a7, float a8)
{
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int *v16;
  _BYTE *v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  const char *v72;
  int v73;
  int8x16_t *v74;
  WTF *v75;
  __int128 v76;
  _BYTE v77[128];
  uint64_t v78;

  v12 = 0;
  v78 = *MEMORY[0x1E0C80C00];
  v13 = a3 + a2;
  do
  {
    v14 = (v13 % 0xA) | 0x30;
    v77[v12-- - 8] = v14;
    v15 = v13 > 9;
    v13 /= 0xAuLL;
  }
  while (v15);
  if (v12 + 26 >= 27)
    __break(1u);
  if (v12)
  {
    if ((unint64_t)-v12 >> 31)
    {
      __break(0xC471u);
LABEL_43:
      JUMPOUT(0x198E2001CLL);
    }
    v16 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v12));
    v17 = v16 + 5;
    *v16 = 2;
    v16[1] = -(int)v12;
    *((_QWORD *)v16 + 1) = v16 + 5;
    v16[4] = 4;
    if (v12 == -1)
      *v17 = v14;
    else
      memcpy(v17, &v77[v12 - 7], -v12);
  }
  else
  {
    v16 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v74 = (int8x16_t *)off_1E3572250;
  v75 = (WTF *)v77;
  v76 = xmmword_199122F80;
  v77[0] = 0;
  if (a4)
  {
    v18 = a5 - 1;
    if (!a5)
      v18 = 0;
    WTF::StringImpl::utf8ForCharacters(a4, v18, (uint64_t)&v72, a8);
  }
  else
  {
    v19 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0;
    *(_BYTE *)(v19 + 16) = 0;
    v72 = (const char *)v19;
    v73 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v74, "StringView", &v72);
  if (v73 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v73])(&v71, &v72);
  ((void (*)(int8x16_t **))v74[2].i64[1])(&v74);
  ((void (*)(int8x16_t **))v74[2].i64[1])(&v74);
  v27 = v75;
  if (!v75)
  {
    v70 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v75, v76, (uint64_t *)&v70);
  v27 = v75;
  if (v75 != (WTF *)v77)
LABEL_21:
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  v74 = (int8x16_t *)off_1E3572250;
  v75 = (WTF *)v77;
  v76 = xmmword_199122F80;
  v77[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v74, "%u", a6);
  ((void (*)(int8x16_t **))v74[2].i64[1])(&v74);
  v35 = v75;
  if (!v75)
  {
    v69 = 0;
    goto LABEL_26;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v75, v76, (uint64_t *)&v69);
  v35 = v75;
  if (v75 != (WTF *)v77)
LABEL_26:
    WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
  v74 = (int8x16_t *)"WebAssembly.Module doesn't parse at byte ";
  LODWORD(v75) = 41;
  v72 = ": ";
  v73 = 2;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v71, &v74, (uint64_t)v16, (uint64_t)&v72, (uint64_t)v70, (uint64_t)v69);
  if (!v71)
  {
    __break(0xC471u);
    goto LABEL_43;
  }
  *a1 = v71;
  v43 = v69;
  v69 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v70;
  v70 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
  if (*v16 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v36, v37, v38, v39, v40, v41, v42);
    WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
  }
  else
  {
    *v16 -= 2;
  }
}

uint64_t JSC::Wasm::ModuleInformation::addReferencedFunction(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *(_QWORD *)(this + 320);
  v3 = (unint64_t *)(2 * v2);
  if (v2 < 0)
    v4 = 63;
  else
    v4 = *v3;
  if (v4 > a2)
  {
    v5 = 1 << a2;
    v6 = v3 + 1;
    if (v2 >= 0)
      v7 = v6;
    else
      v7 = (_QWORD *)(this + 320);
    v8 = (_QWORD *)((char *)v7 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8));
    while (1)
    {
      v9 = *v8;
      if ((*v8 & v5) != 0)
        break;
      v10 = __ldxr(v8);
      if (v10 == v9)
      {
        if (!__stxr(v9 | v5, v8))
          return this;
      }
      else
      {
        __clrex();
      }
    }
  }
  return this;
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, double a7, float a8)
{
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int *v14;
  _BYTE *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  float v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  float v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  _QWORD v124[2];
  int8x16_t *v125;
  int v126;
  const char *v127;
  WTF *v128;
  __int128 v129;
  _BYTE v130[128];
  uint64_t v131;

  v10 = 0;
  v131 = *MEMORY[0x1E0C80C00];
  v124[0] = a5;
  v124[1] = a6;
  v11 = a3 + a2;
  do
  {
    v12 = (v11 % 0xA) | 0x30;
    v130[v10-- - 8] = v12;
    v13 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v13);
  if (v10 + 26 >= 27)
    __break(1u);
  if (v10)
  {
    if ((unint64_t)-v10 >> 31)
    {
      __break(0xC471u);
LABEL_69:
      JUMPOUT(0x198E205F8);
    }
    v14 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v10));
    v15 = v14 + 5;
    *v14 = 2;
    v14[1] = -(int)v10;
    *((_QWORD *)v14 + 1) = v14 + 5;
    v14[4] = 4;
    if (v10 == -1)
      *v15 = v12;
    else
      memcpy(v15, &v130[v10 - 7], -v10);
  }
  else
  {
    v14 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v127 = (const char *)off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  WTF::StringImpl::utf8ForCharacters("Table ", 6uLL, (uint64_t)&v125, a8);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v127, "StringView", &v125);
  if (v126 != -1)
    ((void (*)(uint64_t *, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v126])(&v123, &v125);
  (*((void (**)(const char **))v127 + 5))(&v127);
  (*((void (**)(const char **))v127 + 5))(&v127);
  v23 = v128;
  if (!v128)
  {
    v122 = 0;
    goto LABEL_16;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v122);
  v23 = v128;
  if (v128 != (WTF *)v130)
LABEL_16:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v127 = (const char *)off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v127, "%u", a4);
  (*((void (**)(const char **))v127 + 5))(&v127);
  v31 = v128;
  if (!v128)
  {
    v121 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v121);
  v31 = v128;
  if (v128 != (WTF *)v130)
LABEL_21:
    WTF::fastFree((unint64_t)v31, v24, v25, v26, v27, v28, v29, v30);
  v127 = (const char *)off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" must have type '", 0x11uLL, (uint64_t)&v125, v32);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v127, "StringView", &v125);
  if (v126 != -1)
    ((void (*)(uint64_t *, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v126])(&v123, &v125);
  (*((void (**)(const char **))v127 + 5))(&v127);
  (*((void (**)(const char **))v127 + 5))(&v127);
  v40 = v128;
  if (!v128)
  {
    v120 = 0;
    goto LABEL_28;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v120);
  v40 = v128;
  if (v128 != (WTF *)v130)
LABEL_28:
    WTF::fastFree((unint64_t)v40, v33, v34, v35, v36, v37, v38, v39);
  v127 = (const char *)off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  JSC::Wasm::Type::dump((uint64_t)v124, (WTF::PrintStream *)&v127);
  (*((void (**)(const char **))v127 + 5))(&v127);
  v48 = v128;
  if (!v128)
  {
    v119 = 0;
    goto LABEL_33;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v119);
  v48 = v128;
  if (v128 != (WTF *)v130)
LABEL_33:
    WTF::fastFree((unint64_t)v48, v41, v42, v43, v44, v45, v46, v47);
  v127 = (const char *)off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  WTF::StringImpl::utf8ForCharacters("' to have an element section", 0x1CuLL, (uint64_t)&v125, v49);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v127, "StringView", &v125);
  if (v126 != -1)
    ((void (*)(uint64_t *, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v126])(&v123, &v125);
  (*((void (**)(const char **))v127 + 5))(&v127);
  (*((void (**)(const char **))v127 + 5))(&v127);
  v57 = v128;
  if (!v128)
  {
    v118 = 0;
    goto LABEL_40;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v118);
  v57 = v128;
  if (v128 != (WTF *)v130)
LABEL_40:
    WTF::fastFree((unint64_t)v57, v50, v51, v52, v53, v54, v55, v56);
  v127 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v128) = 41;
  v125 = (int8x16_t *)": ";
  v126 = 2;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v123, (uint64_t)&v127, (uint64_t)v14, &v125, (uint64_t)v122, (uint64_t)v121, (uint64_t)v120, (uint64_t)v119, (uint64_t)v118);
  if (!v123)
  {
    __break(0xC471u);
    goto LABEL_69;
  }
  *a1 = v123;
  v65 = v118;
  v118 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = v119;
  v119 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = v120;
  v120 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
    {
      WTF::StringImpl::~StringImpl(v67, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
    }
    else
    {
      *(_DWORD *)v67 -= 2;
    }
  }
  v68 = v121;
  v121 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
  v69 = v122;
  v122 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  if (*v14 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, v58, v59, v60, v61, v62, v63, v64);
    WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
  }
  else
  {
    *v14 -= 2;
  }
}

void JSC::Wasm::SectionParser::parseI32InitExpr(uint64_t a1, uint64_t *a2, uint64_t a3, char *a4, uint64_t a5, __n128 a6, float a7)
{
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __n128 v26;
  uint64_t v27;
  __int16 v28;

  v28 = 0;
  v27 = 0;
  JSC::Wasm::SectionParser::parseInitExpr((uint64_t)&v23, (uint64_t)a2, (unsigned __int8 *)&v28 + 1, &v28, &v27, &v25, 0xFFuLL, 0, a6, a7, &v26);
  if (v24)
  {
    v22 = v23;
    v23 = 0;
    *(_QWORD *)a1 = v22;
    *(_BYTE *)(a1 + 8) = 1;
    std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v23, v12, v13, v14, v15, v16, v17, v18);
  }
  else if (v26.n128_u8[0] == 255)
  {
    if (HIBYTE(v28) == 35 || HIBYTE(v28) == 65)
    {
      if (HIBYTE(v28) == 65)
        v21 = v27 | 0x100000000;
      else
        v21 = v27;
      if ((_BYTE)v28)
        v21 = v27 | 0x200000000;
      if (!*(_BYTE *)(a3 + 8))
        *(_BYTE *)(a3 + 8) = 1;
      *(_QWORD *)a3 = v21;
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v23, *a2, a2[6], a4, a5, v19, v20);
    *(_QWORD *)a1 = v23;
    *(_BYTE *)(a1 + 8) = 1;
  }
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, int a6, double a7, float a8)
{
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int *v16;
  _BYTE *v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  const char *v72;
  int v73;
  int8x16_t *v74;
  WTF *v75;
  __int128 v76;
  _BYTE v77[128];
  uint64_t v78;

  v12 = 0;
  v78 = *MEMORY[0x1E0C80C00];
  v13 = a3 + a2;
  do
  {
    v14 = (v13 % 0xA) | 0x30;
    v77[v12-- - 8] = v14;
    v15 = v13 > 9;
    v13 /= 0xAuLL;
  }
  while (v15);
  if (v12 + 26 >= 27)
    __break(1u);
  if (v12)
  {
    if ((unint64_t)-v12 >> 31)
    {
      __break(0xC471u);
LABEL_43:
      JUMPOUT(0x198E20AA0);
    }
    v16 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v12));
    v17 = v16 + 5;
    *v16 = 2;
    v16[1] = -(int)v12;
    *((_QWORD *)v16 + 1) = v16 + 5;
    v16[4] = 4;
    if (v12 == -1)
      *v17 = v14;
    else
      memcpy(v17, &v77[v12 - 7], -v12);
  }
  else
  {
    v16 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v74 = (int8x16_t *)off_1E3572250;
  v75 = (WTF *)v77;
  v76 = xmmword_199122F80;
  v77[0] = 0;
  if (a4)
  {
    v18 = a5 - 1;
    if (!a5)
      v18 = 0;
    WTF::StringImpl::utf8ForCharacters(a4, v18, (uint64_t)&v72, a8);
  }
  else
  {
    v19 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0;
    *(_BYTE *)(v19 + 16) = 0;
    v72 = (const char *)v19;
    v73 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v74, "StringView", &v72);
  if (v73 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v73])(&v71, &v72);
  ((void (*)(int8x16_t **))v74[2].i64[1])(&v74);
  ((void (*)(int8x16_t **))v74[2].i64[1])(&v74);
  v27 = v75;
  if (!v75)
  {
    v70 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v75, v76, (uint64_t *)&v70);
  v27 = v75;
  if (v75 != (WTF *)v77)
LABEL_21:
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  v74 = (int8x16_t *)off_1E3572250;
  v75 = (WTF *)v77;
  v76 = xmmword_199122F80;
  v77[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v74, "%u", a6);
  ((void (*)(int8x16_t **))v74[2].i64[1])(&v74);
  v35 = v75;
  if (!v75)
  {
    v69 = 0;
    goto LABEL_26;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v75, v76, (uint64_t *)&v69);
  v35 = v75;
  if (v75 != (WTF *)v77)
LABEL_26:
    WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
  v74 = (int8x16_t *)"WebAssembly.Module doesn't parse at byte ";
  LODWORD(v75) = 41;
  v72 = ": ";
  v73 = 2;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v71, &v74, (uint64_t)v16, (uint64_t)&v72, (uint64_t)v70, (uint64_t)v69);
  if (!v71)
  {
    __break(0xC471u);
    goto LABEL_43;
  }
  *a1 = v71;
  v43 = v69;
  v69 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v70;
  v70 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
  if (*v16 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v36, v37, v38, v39, v40, v41, v42);
    WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
  }
  else
  {
    *v16 -= 2;
  }
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(int **a1, uint64_t a2, uint64_t a3, char *__src, uint64_t a5, int a6, WTF::StringImpl *a7, WTF::StringImpl *a8, double a9, float a10)
{
  int *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  int **v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  int v21;
  uint64_t v23;
  _BYTE *v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  float v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  float v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF *v76;
  int v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  int v83;
  int v84;
  int v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  _WORD *v95;
  int8x16_t *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  __int128 v100;
  char *v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  char *v105;
  char *v106;
  char *v107;
  __int16 v108;
  _DWORD *v109;
  char *v110;
  int8x16_t *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  __int128 v115;
  char *v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  char *v120;
  char *v121;
  char *v122;
  __int16 v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  _BYTE *v188;
  size_t v189;
  _BYTE *v190;
  unsigned __int128 *v191;
  unsigned __int128 *v192;
  unsigned __int128 v193;
  char v194;
  uint64_t v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  uint64_t v202;
  int v203;
  char v204;
  void (**v205)(WTF::StringPrintStream *__hidden);
  WTF *v206;
  __int128 v207;
  _BYTE v208[128];
  uint64_t v209;
  int8x16x2_t v210;
  int8x16x2_t v211;
  int8x16x2_t v212;
  int8x16x2_t v213;
  int8x16x2_t v214;
  int8x16x2_t v215;

  v11 = a8;
  v12 = a7;
  v13 = a6;
  v15 = a1;
  v16 = 0;
  v209 = *MEMORY[0x1E0C80C00];
  v17 = a3 + a2;
  do
  {
    v18 = (v17 % 0xA) | 0x30;
    v208[v16-- - 8] = v18;
    v19 = v17 > 9;
    v17 /= 0xAuLL;
  }
  while (v19);
  if (v16 + 26 >= 27)
  {
    __break(1u);
    goto LABEL_146;
  }
  if (v16)
  {
    v195 = a5;
    if ((unint64_t)-v16 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198E214A4);
    }
    v21 = (int)a7;
    v12 = a8;
    v23 = WTF::fastCompactMalloc((WTF *)(20 - v16));
    v24 = (_BYTE *)(v23 + 20);
    *(_DWORD *)v23 = 2;
    *(_DWORD *)(v23 + 4) = -(int)v16;
    *(_QWORD *)(v23 + 8) = v23 + 20;
    v10 = (int *)v23;
    *(_DWORD *)(v23 + 16) = 4;
    if (v16 == -1)
      *v24 = v18;
    else
      memcpy(v24, &v208[v16 - 7], -v16);
    v15 = a1;
    v11 = v12;
    LODWORD(v12) = v21;
    v13 = a6;
    a5 = v195;
  }
  else
  {
    v10 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v205 = off_1E3572250;
  v206 = (WTF *)v208;
  v207 = xmmword_199122F80;
  v208[0] = 0;
  if (__src)
  {
    v25 = a5 - 1;
    if (!a5)
      v25 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v25, (uint64_t)&v202, a10);
  }
  else
  {
    v26 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v26 = 1;
    *(_QWORD *)(v26 + 8) = 0;
    *(_BYTE *)(v26 + 16) = 0;
    v202 = v26;
    v203 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v205, "StringView", &v202);
  if (v203 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v203])(&v204, &v202);
  v205[5]((WTF::StringPrintStream *)&v205);
  v205[5]((WTF::StringPrintStream *)&v205);
  v34 = v206;
  if (!v206)
  {
    v201 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v206, v207, (uint64_t *)&v201);
  v34 = v206;
  if (v206 != (WTF *)v208)
LABEL_22:
    WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
  v205 = off_1E3572250;
  v206 = (WTF *)v208;
  v207 = xmmword_199122F80;
  v208[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v205, "%u", v13);
  v205[5]((WTF::StringPrintStream *)&v205);
  v42 = v206;
  if (!v206)
  {
    v200 = 0;
    goto LABEL_27;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v206, v207, (uint64_t *)&v200);
  v42 = v206;
  if (v206 != (WTF *)v208)
LABEL_27:
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  v205 = off_1E3572250;
  v206 = (WTF *)v208;
  v207 = xmmword_199122F80;
  v208[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" is too big ", 0xCuLL, (uint64_t)&v202, v43);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v205, "StringView", &v202);
  if (v203 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v203])(&v204, &v202);
  v205[5]((WTF::StringPrintStream *)&v205);
  v205[5]((WTF::StringPrintStream *)&v205);
  v51 = v206;
  if (!v206)
  {
    v199 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v206, v207, (uint64_t *)&v199);
  v51 = v206;
  if (v206 != (WTF *)v208)
LABEL_34:
    WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
  v205 = off_1E3572250;
  v206 = (WTF *)v208;
  v207 = xmmword_199122F80;
  v208[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v205, "%u", (_DWORD)v12);
  v205[5]((WTF::StringPrintStream *)&v205);
  v59 = v206;
  if (!v206)
  {
    v198 = 0;
    goto LABEL_39;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v206, v207, (uint64_t *)&v198);
  v59 = v206;
  if (v206 != (WTF *)v208)
LABEL_39:
    WTF::fastFree((unint64_t)v59, v52, v53, v54, v55, v56, v57, v58);
  v205 = off_1E3572250;
  v206 = (WTF *)v208;
  v207 = xmmword_199122F80;
  v208[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" maximum ", 9uLL, (uint64_t)&v202, v60);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v205, "StringView", &v202);
  if (v203 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v203])(&v204, &v202);
  v205[5]((WTF::StringPrintStream *)&v205);
  v205[5]((WTF::StringPrintStream *)&v205);
  v68 = v206;
  if (!v206)
  {
    v197 = 0;
    goto LABEL_46;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v206, v207, (uint64_t *)&v197);
  v68 = v206;
  if (v206 != (WTF *)v208)
LABEL_46:
    WTF::fastFree((unint64_t)v68, v61, v62, v63, v64, v65, v66, v67);
  v205 = off_1E3572250;
  v206 = (WTF *)v208;
  v207 = xmmword_199122F80;
  v208[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v205, "%lu", v11);
  v205[5]((WTF::StringPrintStream *)&v205);
  v76 = v206;
  if (!v206)
  {
    v196 = 0;
    goto LABEL_51;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v206, v207, (uint64_t *)&v196);
  v76 = v206;
  if (v206 != (WTF *)v208)
LABEL_51:
    WTF::fastFree((unint64_t)v76, v69, v70, v71, v72, v73, v74, v75);
  v11 = v200;
  __src = (char *)v201;
  v12 = v199;
  if (v201)
  {
    v77 = *((_DWORD *)v201 + 1);
    goto LABEL_54;
  }
LABEL_146:
  v77 = 0;
LABEL_54:
  v78 = v198;
  if (v11)
    v79 = *((_DWORD *)v11 + 1);
  else
    v79 = 0;
  v80 = v197;
  if (v12)
    v81 = *((_DWORD *)v12 + 1);
  else
    v81 = 0;
  v82 = v196;
  if (v198)
    v83 = *((_DWORD *)v198 + 1);
  else
    v83 = 0;
  if (v197)
  {
    v84 = *((_DWORD *)v197 + 1);
    if (v196)
    {
LABEL_62:
      v85 = *((_DWORD *)v196 + 1);
      goto LABEL_63;
    }
  }
  else
  {
    v84 = 0;
    if (v196)
      goto LABEL_62;
  }
  v85 = 0;
LABEL_63:
  WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(41, v10[1], 2, v77, v79, v81, v83, v84, (uint64_t)&v202, v85);
  if ((_BYTE)v202)
    goto LABEL_154;
  if ((v10[4] & 4) == 0
    || __src && (__src[16] & 4) == 0
    || v11 && (*((_BYTE *)v11 + 16) & 4) == 0
    || v12 && (*((_BYTE *)v12 + 16) & 4) == 0
    || v78 && (*((_BYTE *)v78 + 16) & 4) == 0
    || v80 && (*((_BYTE *)v80 + 16) & 4) == 0)
  {
    v93 = HIDWORD(v202);
    goto LABEL_76;
  }
  if (v82)
  {
    v93 = HIDWORD(v202);
    if ((*((_BYTE *)v82 + 16) & 4) == 0)
    {
LABEL_76:
      if ((_DWORD)v93)
      {
        if (v93 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v93 + 20), &v205);
          v94 = (int *)v205;
          if (v205)
          {
            *(_DWORD *)v205 = 2;
            v94[1] = v93;
            *(_OWORD *)(v94 + 5) = xmmword_19915A580;
            *((_QWORD *)v94 + 1) = v94 + 5;
            v94[4] = 0;
            v95 = (_WORD *)v94 + 51;
            *(_OWORD *)(v94 + 9) = xmmword_19915A590;
            *(_OWORD *)(v94 + 13) = xmmword_19915A5A0;
            *(_OWORD *)(v94 + 17) = xmmword_19915A5B0;
            *(_OWORD *)(v94 + 21) = xmmword_19915A5C0;
            *((_WORD *)v94 + 50) = 32;
            v96 = (int8x16_t *)*((_QWORD *)v10 + 1);
            v97 = v10[1];
            if ((v10[4] & 4) != 0)
            {
              v98 = (char *)&v95[v97];
              if (v97 >= 0x40)
              {
                v99 = (char *)&v95[v97 & 0xFFFFFFC0];
                v100 = 0uLL;
                v101 = (char *)v94 + 102;
                do
                {
                  v210.val[0] = *v96;
                  v102 = v96[1];
                  v212.val[0] = v96[2];
                  v103 = v96[3];
                  v96 += 4;
                  v104 = v103;
                  v212.val[1] = 0uLL;
                  v214.val[0] = v102;
                  v210.val[1] = 0uLL;
                  v105 = v101;
                  vst2q_s8(v105, v210);
                  v105 += 32;
                  v214.val[1] = 0uLL;
                  vst2q_s8(v105, v214);
                  v106 = v101 + 64;
                  vst2q_s8(v106, v212);
                  v107 = v101 + 96;
                  vst2q_s8(v107, *(int8x16x2_t *)(&v100 - 1));
                  v101 += 128;
                }
                while (v101 != v99);
              }
              else
              {
                v99 = (char *)v94 + 102;
              }
              while (v99 != v98)
              {
                v108 = v96->u8[0];
                v96 = (int8x16_t *)((char *)v96 + 1);
                *(_WORD *)v99 = v108;
                v99 += 2;
              }
            }
            else if ((_DWORD)v97 == 1)
            {
              *v95 = v96->i16[0];
            }
            else if ((_DWORD)v97)
            {
              memcpy((char *)v94 + 102, v96, 2 * v97);
            }
            v109 = &v95[v10[1]];
            *v109 = 2097210;
            v110 = (char *)(v109 + 1);
            if (__src)
            {
              v111 = (int8x16_t *)*((_QWORD *)__src + 1);
              v112 = *((unsigned int *)__src + 1);
              if ((__src[16] & 4) != 0)
              {
                v113 = &v110[2 * v112];
                if (v112 >= 0x40)
                {
                  v114 = &v110[2 * (v112 & 0xFFFFFFC0)];
                  v115 = 0uLL;
                  v116 = v110;
                  do
                  {
                    v211.val[0] = *v111;
                    v117 = v111[1];
                    v213.val[0] = v111[2];
                    v118 = v111[3];
                    v111 += 4;
                    v119 = v118;
                    v213.val[1] = 0uLL;
                    v215.val[0] = v117;
                    v211.val[1] = 0uLL;
                    v120 = v116;
                    vst2q_s8(v120, v211);
                    v120 += 32;
                    v215.val[1] = 0uLL;
                    vst2q_s8(v120, v215);
                    v121 = v116 + 64;
                    vst2q_s8(v121, v213);
                    v122 = v116 + 96;
                    vst2q_s8(v122, *(int8x16x2_t *)(&v115 - 1));
                    v116 += 128;
                  }
                  while (v116 != v114);
                }
                else
                {
                  v114 = v110;
                }
                while (v114 != v113)
                {
                  v123 = v111->u8[0];
                  v111 = (int8x16_t *)((char *)v111 + 1);
                  *(_WORD *)v114 = v123;
                  v114 += 2;
                }
              }
              else if ((_DWORD)v112 == 1)
              {
                *(_WORD *)v110 = v111->i16[0];
              }
              else if ((_DWORD)v112)
              {
                memcpy(v110, v111, 2 * v112);
              }
              v124 = *((unsigned int *)__src + 1);
            }
            else
            {
              v124 = 0;
            }
            WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v110[2 * v124], (uint64_t)v11, (uint64_t)v12, (uint64_t)v78, (uint64_t)v80, (uint64_t)v82);
            goto LABEL_104;
          }
        }
LABEL_154:
        __break(0xC471u);
        JUMPOUT(0x198E2147CLL);
      }
LABEL_155:
      v94 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_104;
    }
    if (!HIDWORD(v202))
      goto LABEL_155;
    if (v202 < 0)
      goto LABEL_154;
  }
  else
  {
    v93 = HIDWORD(v202);
    if (!HIDWORD(v202))
      goto LABEL_155;
    v82 = 0;
    if (v202 < 0)
      goto LABEL_154;
  }
  WTF::tryFastCompactMalloc((WTF *)(v93 + 20), &v205);
  v94 = (int *)v205;
  if (!v205)
    goto LABEL_154;
  *(_OWORD *)((char *)v205 + 20) = *(_OWORD *)"WebAssembly.Module doesn't parse at byte ";
  *v94 = 2;
  v94[1] = v93;
  *((_QWORD *)v94 + 1) = v94 + 5;
  v94[4] = 4;
  qmemcpy(v94 + 9, "le doesn't parse at byte ", 25);
  v187 = (char *)v94 + 61;
  v188 = (_BYTE *)*((_QWORD *)v10 + 1);
  v189 = v10[1];
  if ((v10[4] & 4) != 0)
  {
    if ((_DWORD)v189 == 1)
    {
      *v187 = *v188;
    }
    else if ((_DWORD)v189)
    {
      memcpy((char *)v94 + 61, v188, v189);
    }
  }
  else
  {
    if (v189 < 0x10)
    {
      v191 = (unsigned __int128 *)((char *)v94 + 61);
    }
    else
    {
      v191 = (unsigned __int128 *)&v187[v189 & 0xFFFFFFF0];
      v192 = (unsigned __int128 *)((char *)v94 + 61);
      do
      {
        v193 = (unsigned __int128)vld2q_s8(v188);
        v188 += 32;
        *v192++ = v193;
      }
      while (v192 != v191);
    }
    while (v191 != (unsigned __int128 *)&v187[v189])
    {
      v194 = *v188;
      v188 += 2;
      *(_BYTE *)v191 = v194;
      v191 = (unsigned __int128 *)((char *)v191 + 1);
    }
  }
  v190 = &v187[v10[1]];
  *(_WORD *)v190 = 8250;
  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v190 + 2, (uint64_t)__src, (uint64_t)v11, (uint64_t)v12, (uint64_t)v78, (uint64_t)v80, (uint64_t)v82);
LABEL_104:
  *v15 = v94;
  v125 = v196;
  v196 = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
  v126 = v197;
  v197 = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
    {
      WTF::StringImpl::~StringImpl(v126, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
    }
    else
    {
      *(_DWORD *)v126 -= 2;
    }
  }
  v127 = v198;
  v198 = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
    {
      WTF::StringImpl::~StringImpl(v127, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
    }
    else
    {
      *(_DWORD *)v127 -= 2;
    }
  }
  v128 = v199;
  v199 = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
    {
      WTF::StringImpl::~StringImpl(v128, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
    }
    else
    {
      *(_DWORD *)v128 -= 2;
    }
  }
  v129 = v200;
  v200 = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
    {
      WTF::StringImpl::~StringImpl(v129, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
    }
    else
    {
      *(_DWORD *)v129 -= 2;
    }
  }
  v130 = v201;
  v201 = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
    {
      WTF::StringImpl::~StringImpl(v130, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
    }
    else
    {
      *(_DWORD *)v130 -= 2;
    }
  }
  if (*v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v86, v87, v88, v89, v90, v91, v92);
    WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
  }
  else
  {
    *v10 -= 2;
  }
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,signed char>(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, int a6, double a7, float a8)
{
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int *v16;
  _BYTE *v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  const char *v72;
  int v73;
  int8x16_t *v74;
  WTF *v75;
  __int128 v76;
  _BYTE v77[128];
  uint64_t v78;

  v12 = 0;
  v78 = *MEMORY[0x1E0C80C00];
  v13 = a3 + a2;
  do
  {
    v14 = (v13 % 0xA) | 0x30;
    v77[v12-- - 8] = v14;
    v15 = v13 > 9;
    v13 /= 0xAuLL;
  }
  while (v15);
  if (v12 + 26 >= 27)
    __break(1u);
  if (v12)
  {
    if ((unint64_t)-v12 >> 31)
    {
      __break(0xC471u);
LABEL_43:
      JUMPOUT(0x198E2184CLL);
    }
    v16 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v12));
    v17 = v16 + 5;
    *v16 = 2;
    v16[1] = -(int)v12;
    *((_QWORD *)v16 + 1) = v16 + 5;
    v16[4] = 4;
    if (v12 == -1)
      *v17 = v14;
    else
      memcpy(v17, &v77[v12 - 7], -v12);
  }
  else
  {
    v16 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v74 = (int8x16_t *)off_1E3572250;
  v75 = (WTF *)v77;
  v76 = xmmword_199122F80;
  v77[0] = 0;
  if (a4)
  {
    v18 = a5 - 1;
    if (!a5)
      v18 = 0;
    WTF::StringImpl::utf8ForCharacters(a4, v18, (uint64_t)&v72, a8);
  }
  else
  {
    v19 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0;
    *(_BYTE *)(v19 + 16) = 0;
    v72 = (const char *)v19;
    v73 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v74, "StringView", &v72);
  if (v73 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v73])(&v71, &v72);
  ((void (*)(int8x16_t **))v74[2].i64[1])(&v74);
  ((void (*)(int8x16_t **))v74[2].i64[1])(&v74);
  v27 = v75;
  if (!v75)
  {
    v70 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v75, v76, (uint64_t *)&v70);
  v27 = v75;
  if (v75 != (WTF *)v77)
LABEL_21:
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  v74 = (int8x16_t *)off_1E3572250;
  v75 = (WTF *)v77;
  v76 = xmmword_199122F80;
  v77[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v74, "%d", a6);
  ((void (*)(int8x16_t **))v74[2].i64[1])(&v74);
  v35 = v75;
  if (!v75)
  {
    v69 = 0;
    goto LABEL_26;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v75, v76, (uint64_t *)&v69);
  v35 = v75;
  if (v75 != (WTF *)v77)
LABEL_26:
    WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
  v74 = (int8x16_t *)"WebAssembly.Module doesn't parse at byte ";
  LODWORD(v75) = 41;
  v72 = ": ";
  v73 = 2;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v71, &v74, (uint64_t)v16, (uint64_t)&v72, (uint64_t)v70, (uint64_t)v69);
  if (!v71)
  {
    __break(0xC471u);
    goto LABEL_43;
  }
  *a1 = v71;
  v43 = v69;
  v69 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v70;
  v70 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
  if (*v16 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v36, v37, v38, v39, v40, v41, v42);
    WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
  }
  else
  {
    *v16 -= 2;
  }
}

void JSC::Wasm::SectionParser::parseStorageType(_BYTE *a1, uint64_t a2, uint64_t a3, double a4, float a5)
{
  unint64_t v7;
  int v8;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  WTF *v65;

  v7 = *(_QWORD *)a2;
  if (v7 >= *(_QWORD *)(a2 + 16))
    goto LABEL_26;
  v8 = *(char *)(*(_QWORD *)(a2 + 8) + v7);
  if (v8 < 0)
    goto LABEL_26;
  if (!JSC::Wasm::isValidTypeKind<signed char>((char)((2 * v8) & 0x80 | v8)))
  {
    v22 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 < *(_QWORD *)(a2 + 16))
    {
      v23 = v22 + 1;
      *(_QWORD *)a2 = v22 + 1;
      v24 = *(char *)(*(_QWORD *)(a2 + 8) + v22);
      if ((v24 & 0x80000000) == 0)
      {
        v25 = v24 | (v24 >> 6 << 7);
        if (((char)v25 + 9) < 2)
        {
          *(_QWORD *)(a3 + 8) = 0;
          *(_QWORD *)(a3 + 1) = 0;
          *(_BYTE *)a3 = v25;
          *(_DWORD *)(a3 + 16) = 1;
          goto LABEL_17;
        }
        JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,signed char>(&v65, v23, *(_QWORD *)(a2 + 48), "expected a packed type but got ", 32, (char)v25, a4, a5);
        goto LABEL_19;
      }
      v22 = v23;
    }
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v65, v22, *(_QWORD *)(a2 + 48), "invalid type in struct field or array element", 46, a4, a5);
LABEL_19:
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
      {
        WTF::StringImpl::~StringImpl(v65, v26, v27, v28, v29, v30, v31, v32);
        WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
      }
      else
      {
        *(_DWORD *)v65 -= 2;
      }
    }
    goto LABEL_25;
  }
  v10 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
    goto LABEL_25;
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)a2 = v10 + 1;
  v12 = *(char *)(*(_QWORD *)(a2 + 8) + v10);
  if ((v12 & 0x80000000) != 0)
    goto LABEL_25;
  v13 = v12 | (v12 >> 6 << 7);
  if (!JSC::Wasm::isValidTypeKind<signed char>((char)(v12 | ((v12 >> 6) << 7))))
    goto LABEL_25;
  if (!BYTE1(dword_1ECF4C7B0))
  {
    if ((v13 + 29) < 2u)
      goto LABEL_25;
    goto LABEL_10;
  }
  v19 = (char)v13;
  v20 = (char)v13 + 22;
  if (v20 <= 9 && (((1 << v20) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
  {
    v21 = 227;
LABEL_31:
    if (BYTE1(dword_1ECF4C7B0))
      v41 = v19 == 0;
    else
      v41 = 1;
    if (!v41)
      goto LABEL_12;
    goto LABEL_25;
  }
  if ((v13 + 29) < 2u)
  {
    v42 = *(_QWORD *)(a2 + 16);
    v43 = *(_QWORD *)a2;
    v44 = v42 - *(_QWORD *)a2;
    if (v42 <= *(_QWORD *)a2)
      goto LABEL_25;
    v45 = 0;
    LODWORD(v19) = 0;
    v46 = *(_QWORD *)(a2 + 8);
    v47 = 5;
    if (v44 < 5)
      v47 = v44;
    v48 = v47 - 1;
    *(_QWORD *)a2 = v43 + 1;
    v49 = v46 + v43;
    v50 = v43 + 2;
    v51 = 7;
    while (1)
    {
      v52 = *(char *)(v49 + v45);
      LODWORD(v19) = ((v52 & 0x7F) << (v51 - 7)) | v19;
      if ((v52 & 0x80000000) == 0)
        break;
      if (v48 == v45)
        goto LABEL_25;
      LOBYTE(v52) = v50 + v45;
      *(_QWORD *)a2 = v50 + v45;
      v51 += 7;
      if (v44 == ++v45)
      {
        __break(1u);
        break;
      }
    }
    if ((_DWORD)v45 == 4)
    {
      if ((v52 & 0x40) == 0)
      {
        if (v52 > 7u)
          goto LABEL_25;
        goto LABEL_48;
      }
      if ((v52 & 0xF8) != 0x78)
        goto LABEL_25;
    }
    if (v51 <= 0x1F && (v52 & 0x40) != 0)
    {
      LODWORD(v19) = v19 | (-1 << v51);
      goto LABEL_68;
    }
LABEL_48:
    if ((v19 & 0x80000000) == 0)
    {
      if (v19 >= *(_DWORD *)(v11 + 100))
      {
        if (!*(_BYTE *)(a2 + 32))
          goto LABEL_25;
        v53 = *(_DWORD *)(a2 + 36);
        if (v19 < v53 || v19 >= *(_DWORD *)(a2 + 40))
          goto LABEL_25;
      }
      else if (!*(_BYTE *)(a2 + 32) || (v53 = *(_DWORD *)(a2 + 36), v19 < v53))
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v11 + 88) + 8 * v19);
        goto LABEL_11;
      }
      JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(v19 - v53), v14, v15, v16, v17, v18, (unsigned int **)&v65);
      v19 = (unint64_t)v65;
      v65 = 0;
      if (v19)
      {
        do
        {
          v61 = __ldaxr((unsigned int *)v19);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, (unsigned int *)v19));
        if (!v62)
        {
          atomic_store(1u, (unsigned int *)v19);
          v64 = v19;
          WTF::fastFree(v19, v54, v55, v56, v57, v58, v59, v60);
          v19 = v64;
        }
      }
      goto LABEL_11;
    }
LABEL_68:
    v19 = (int)v19;
    v63 = (int)v19 + 22;
    if (v63 > 9 || ((1 << v63) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
      goto LABEL_25;
    goto LABEL_11;
  }
LABEL_10:
  v19 = 0;
LABEL_11:
  v21 = v13;
  if (v13 - 252 < 4)
  {
LABEL_12:
    *(_QWORD *)a3 = v21;
    *(_QWORD *)(a3 + 8) = v19;
    *(_DWORD *)(a3 + 16) = 0;
LABEL_17:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  if (v13 - 239 < 2)
  {
    if (!BYTE1(dword_1ECF4C7B0))
      goto LABEL_12;
  }
  else if (v13 == 251)
  {
    if (HIBYTE(dword_1ECF4C7B0))
    {
      v21 = 251;
      goto LABEL_12;
    }
  }
  else if (v13 - 227 < 2)
  {
    goto LABEL_31;
  }
LABEL_25:
  v7 = *(_QWORD *)a2;
LABEL_26:
  JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v65, v7, *(_QWORD *)(a2 + 48), "invalid type in struct field or array element", 46, a4, a5);
  *(_QWORD *)a1 = v65;
  a1[8] = 1;
}

void JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  BOOL v11;
  int *v12;
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  float v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  float v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  int *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  int *v108;
  const char *v109;
  int v110;
  const char *v111;
  WTF *v112;
  __int128 v113;
  _BYTE v114[128];
  uint64_t v115;

  v8 = 0;
  v115 = *MEMORY[0x1E0C80C00];
  v9 = a3 + a2;
  do
  {
    v10 = (v9 % 0xA) | 0x30;
    v114[v8-- - 8] = v10;
    v11 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v11);
  if (v8 + 26 >= 27)
    __break(1u);
  if (v8)
  {
    if ((unint64_t)-v8 >> 31)
    {
      __break(0xC471u);
LABEL_58:
      JUMPOUT(0x198E220F8);
    }
    v12 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v8));
    v13 = v12 + 5;
    *v12 = 2;
    v12[1] = -(int)v8;
    *((_QWORD *)v12 + 1) = v12 + 5;
    v12[4] = 4;
    if (v8 == -1)
      *v13 = v10;
    else
      memcpy(v13, &v114[v8 - 7], -v8);
  }
  else
  {
    v12 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v111 = (const char *)off_1E3572250;
  v112 = (WTF *)v114;
  v113 = xmmword_199122F80;
  v114[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v111, "%u", a4);
  (*((void (**)(const char **))v111 + 5))(&v111);
  v21 = v112;
  if (!v112)
  {
    v102 = 0;
    goto LABEL_14;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v112, v113, (uint64_t *)&v102);
  v21 = v112;
  if (v112 != (WTF *)v114)
LABEL_14:
    WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
  v111 = (const char *)off_1E3572250;
  v112 = (WTF *)v114;
  v113 = xmmword_199122F80;
  v114[0] = 0;
  WTF::StringImpl::utf8ForCharacters("can't get ", 0xAuLL, (uint64_t)&v109, v22);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v111, "StringView", &v109);
  if (v110 != -1)
    ((void (*)(int **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v110])(&v108, &v109);
  (*((void (**)(const char **))v111 + 5))(&v111);
  (*((void (**)(const char **))v111 + 5))(&v111);
  v30 = v112;
  if (!v112)
  {
    v101 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v112, v113, (uint64_t *)&v101);
  v30 = v112;
  if (v112 != (WTF *)v114)
LABEL_21:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  v111 = (const char *)off_1E3572250;
  v112 = (WTF *)v114;
  v113 = xmmword_199122F80;
  v114[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v111, "%u", a5);
  (*((void (**)(const char **))v111 + 5))(&v111);
  v38 = v112;
  if (!v112)
  {
    v100 = 0;
    goto LABEL_26;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v112, v113, (uint64_t *)&v100);
  v38 = v112;
  if (v112 != (WTF *)v114)
LABEL_26:
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  v111 = (const char *)off_1E3572250;
  v112 = (WTF *)v114;
  v113 = xmmword_199122F80;
  v114[0] = 0;
  WTF::StringImpl::utf8ForCharacters("th field mutability", 0x13uLL, (uint64_t)&v109, v39);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v111, "StringView", &v109);
  if (v110 != -1)
    ((void (*)(int **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v110])(&v108, &v109);
  (*((void (**)(const char **))v111 + 5))(&v111);
  (*((void (**)(const char **))v111 + 5))(&v111);
  v47 = v112;
  if (!v112)
  {
    v99 = 0;
    goto LABEL_33;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v112, v113, (uint64_t *)&v99);
  v47 = v112;
  if (v112 != (WTF *)v114)
LABEL_33:
    WTF::fastFree((unint64_t)v47, v40, v41, v42, v43, v44, v45, v46);
  v111 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v112) = 41;
  v108 = v12;
  v109 = ": ";
  v110 = 2;
  v106 = v101;
  v107 = v102;
  v104 = v99;
  v105 = v100;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v111, (uint64_t *)&v108, (uint64_t)&v109, (uint64_t *)&v107, (uint64_t *)&v106, (uint64_t *)&v105, (uint64_t *)&v104, &v103);
  if (!v103)
  {
    __break(0xC471u);
    goto LABEL_58;
  }
  *a1 = v103;
  v103 = 0;
  v55 = v99;
  v99 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
    {
      WTF::StringImpl::~StringImpl(v55, v48, v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v55 -= 2;
    }
  }
  v56 = v100;
  v100 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
    {
      WTF::StringImpl::~StringImpl(v56, v48, v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v56 -= 2;
    }
  }
  v57 = v101;
  v101 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::~StringImpl(v57, v48, v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v57 -= 2;
    }
  }
  v58 = v102;
  v102 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v48, v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  if (*v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v48, v49, v50, v51, v52, v53, v54);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
  }
  else
  {
    *v12 -= 2;
  }
}

void JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int *v10;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  float v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  const char *v65;
  int v66;
  int8x16_t *v67;
  WTF *v68;
  __int128 v69;
  _BYTE v70[128];
  uint64_t v71;

  v6 = 0;
  v71 = *MEMORY[0x1E0C80C00];
  v7 = a3 + a2;
  do
  {
    v8 = (v7 % 0xA) | 0x30;
    v70[v6-- - 8] = v8;
    v9 = v7 > 9;
    v7 /= 0xAuLL;
  }
  while (v9);
  if (v6 + 26 >= 27)
    __break(1u);
  if (v6)
  {
    if ((unint64_t)-v6 >> 31)
    {
      __break(0xC471u);
LABEL_38:
      JUMPOUT(0x198E22420);
    }
    v10 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v6));
    v11 = v10 + 5;
    *v10 = 2;
    v10[1] = -(int)v6;
    *((_QWORD *)v10 + 1) = v10 + 5;
    v10[4] = 4;
    if (v6 == -1)
      *v11 = v8;
    else
      memcpy(v11, &v70[v6 - 7], -v6);
  }
  else
  {
    v10 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v67 = (int8x16_t *)off_1E3572250;
  v68 = (WTF *)v70;
  v69 = xmmword_199122F80;
  v70[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v67, "%u", a4);
  ((void (*)(int8x16_t **))v67[2].i64[1])(&v67);
  v19 = v68;
  if (!v68)
  {
    v63 = 0;
    goto LABEL_14;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v68, v69, (uint64_t *)&v63);
  v19 = v68;
  if (v68 != (WTF *)v70)
LABEL_14:
    WTF::fastFree((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
  v67 = (int8x16_t *)off_1E3572250;
  v68 = (WTF *)v70;
  v69 = xmmword_199122F80;
  v70[0] = 0;
  WTF::StringImpl::utf8ForCharacters("can't get array's mutability", 0x1CuLL, (uint64_t)&v65, v20);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v67, "StringView", &v65);
  if (v66 != -1)
    ((void (*)(uint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v66])(&v64, &v65);
  ((void (*)(int8x16_t **))v67[2].i64[1])(&v67);
  ((void (*)(int8x16_t **))v67[2].i64[1])(&v67);
  v28 = v68;
  if (!v68)
  {
    v62 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v68, v69, (uint64_t *)&v62);
  v28 = v68;
  if (v68 != (WTF *)v70)
LABEL_21:
    WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
  v67 = (int8x16_t *)"WebAssembly.Module doesn't parse at byte ";
  LODWORD(v68) = 41;
  v65 = ": ";
  v66 = 2;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v64, &v67, (uint64_t)v10, (uint64_t)&v65, (uint64_t)v63, (uint64_t)v62);
  if (!v64)
  {
    __break(0xC471u);
    goto LABEL_38;
  }
  *a1 = v64;
  v36 = v62;
  v62 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  v37 = v63;
  v63 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  if (*v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v29, v30, v31, v32, v33, v34, v35);
    WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
  }
  else
  {
    *v10 -= 2;
  }
}

void JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,signed char>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  BOOL v11;
  int *v12;
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  float v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  int *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  int *v88;
  const char *v89;
  int v90;
  const char *v91;
  WTF *v92;
  __int128 v93;
  _BYTE v94[128];
  uint64_t v95;

  v8 = 0;
  v95 = *MEMORY[0x1E0C80C00];
  v9 = a3 + a2;
  do
  {
    v10 = (v9 % 0xA) | 0x30;
    v94[v8-- - 8] = v10;
    v11 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v11);
  if (v8 + 26 >= 27)
    __break(1u);
  if (v8)
  {
    if ((unint64_t)-v8 >> 31)
    {
      __break(0xC471u);
LABEL_47:
      JUMPOUT(0x198E22804);
    }
    v12 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v8));
    v13 = v12 + 5;
    *v12 = 2;
    v12[1] = -(int)v8;
    *((_QWORD *)v12 + 1) = v12 + 5;
    v12[4] = 4;
    if (v8 == -1)
      *v13 = v10;
    else
      memcpy(v13, &v94[v8 - 7], -v8);
  }
  else
  {
    v12 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v91 = (const char *)off_1E3572250;
  v92 = (WTF *)v94;
  v93 = xmmword_199122F80;
  v94[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v91, "%u", a4);
  (*((void (**)(const char **))v91 + 5))(&v91);
  v21 = v92;
  if (!v92)
  {
    v83 = 0;
    goto LABEL_14;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v92, v93, (uint64_t *)&v83);
  v21 = v92;
  if (v92 != (WTF *)v94)
LABEL_14:
    WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
  v91 = (const char *)off_1E3572250;
  v92 = (WTF *)v94;
  v93 = xmmword_199122F80;
  v94[0] = 0;
  WTF::StringImpl::utf8ForCharacters("th Type is non-Func, non-Struct, and non-Array ", 0x2FuLL, (uint64_t)&v89, v22);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v91, "StringView", &v89);
  if (v90 != -1)
    ((void (*)(int **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v90])(&v88, &v89);
  (*((void (**)(const char **))v91 + 5))(&v91);
  (*((void (**)(const char **))v91 + 5))(&v91);
  v30 = v92;
  if (!v92)
  {
    v82 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v92, v93, (uint64_t *)&v82);
  v30 = v92;
  if (v92 != (WTF *)v94)
LABEL_21:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  v91 = (const char *)off_1E3572250;
  v92 = (WTF *)v94;
  v93 = xmmword_199122F80;
  v94[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v91, "%d", a5);
  (*((void (**)(const char **))v91 + 5))(&v91);
  v38 = v92;
  if (!v92)
  {
    v81 = 0;
    goto LABEL_26;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v92, v93, (uint64_t *)&v81);
  v38 = v92;
  if (v92 != (WTF *)v94)
LABEL_26:
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  v91 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v92) = 41;
  v88 = v12;
  v89 = ": ";
  v90 = 2;
  v86 = v82;
  v87 = v83;
  v85 = v81;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v91, (uint64_t *)&v88, (uint64_t)&v89, (uint64_t *)&v87, (uint64_t *)&v86, (uint64_t *)&v85, &v84);
  if (!v84)
  {
    __break(0xC471u);
    goto LABEL_47;
  }
  *a1 = v84;
  v84 = 0;
  v46 = v81;
  v81 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = v82;
  v82 = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = v83;
  v83 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  if (*v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v39, v40, v41, v42, v43, v44, v45);
    WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
  }
  else
  {
    *v12 -= 2;
  }
}

unsigned int **WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>::operator=(unsigned int **a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v9 = *a2;
  if (*a2)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = *a1;
  *a1 = v9;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, char *a5, uint64_t a6, char *a7, uint64_t a8, double a9, float a10)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  uint64_t v24;
  _BYTE *v25;
  WTF::StringImpl *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  float v43;
  unsigned int v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  float v54;
  unsigned int v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  int *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  const char *v127;
  int v128;
  const char *v129;
  WTF *v130;
  __int128 v131;
  _BYTE v132[128];
  uint64_t v133;

  v10 = a8;
  v11 = a7;
  v12 = a6;
  v13 = a5;
  v15 = a1;
  v16 = 0;
  v133 = *MEMORY[0x1E0C80C00];
  v17 = a3 + a2;
  do
  {
    v18 = (v17 % 0xA) | 0x30;
    v132[v16-- - 8] = v18;
    v19 = v17 > 9;
    v17 /= 0xAuLL;
  }
  while (v19);
  if (v16 + 26 >= 27)
    __break(1u);
  if (v16)
  {
    if ((unint64_t)-v16 >> 31)
    {
      __break(0xC471u);
LABEL_71:
      JUMPOUT(0x198E22DF0);
    }
    v24 = WTF::fastCompactMalloc((WTF *)(20 - v16));
    v25 = (_BYTE *)(v24 + 20);
    *(_DWORD *)v24 = 2;
    *(_DWORD *)(v24 + 4) = -(int)v16;
    *(_QWORD *)(v24 + 8) = v24 + 20;
    v26 = (WTF::StringImpl *)v24;
    *(_DWORD *)(v24 + 16) = 4;
    if (v16 == -1)
      *v25 = v18;
    else
      memcpy(v25, &v132[v16 - 7], -v16);
    v15 = a1;
    v10 = a8;
    v12 = a6;
    v11 = a7;
    v13 = a5;
  }
  else
  {
    v26 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v129 = (const char *)off_1E3572250;
  v130 = (WTF *)v132;
  v131 = xmmword_199122F80;
  v132[0] = 0;
  WTF::StringImpl::utf8ForCharacters("can't allocate enough memory for recursion group's ", 0x33uLL, (uint64_t)&v127, a10);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v129, "StringView", &v127);
  if (v128 != -1)
    ((void (*)(WTF::StringImpl **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v128])(&v126, &v127);
  (*((void (**)(const char **))v129 + 5))(&v129);
  (*((void (**)(const char **))v129 + 5))(&v129);
  v34 = v130;
  if (!v130)
  {
    v120 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v130, v131, (uint64_t *)&v120);
  v34 = v130;
  if (v130 != (WTF *)v132)
LABEL_17:
    WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
  v129 = (const char *)off_1E3572250;
  v130 = (WTF *)v132;
  v131 = xmmword_199122F80;
  v132[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v129, "%u", a4);
  (*((void (**)(const char **))v129 + 5))(&v129);
  v42 = v130;
  if (!v130)
  {
    v119 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v130, v131, (uint64_t *)&v119);
  v42 = v130;
  if (v130 != (WTF *)v132)
LABEL_22:
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  v129 = (const char *)off_1E3572250;
  v130 = (WTF *)v132;
  v131 = xmmword_199122F80;
  v132[0] = 0;
  if (v13)
  {
    v44 = v12 - 1;
    if (!v12)
      v44 = 0;
    WTF::StringImpl::utf8ForCharacters(v13, v44, (uint64_t)&v127, v43);
  }
  else
  {
    v45 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v45 = 1;
    *(_QWORD *)(v45 + 8) = 0;
    *(_BYTE *)(v45 + 16) = 0;
    v127 = (const char *)v45;
    v128 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v129, "StringView", &v127);
  if (v128 != -1)
    ((void (*)(WTF::StringImpl **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v128])(&v126, &v127);
  (*((void (**)(const char **))v129 + 5))(&v129);
  (*((void (**)(const char **))v129 + 5))(&v129);
  v53 = v130;
  if (!v130)
  {
    v118 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v130, v131, (uint64_t *)&v118);
  v53 = v130;
  if (v130 != (WTF *)v132)
LABEL_34:
    WTF::fastFree((unint64_t)v53, v46, v47, v48, v49, v50, v51, v52);
  v129 = (const char *)off_1E3572250;
  v130 = (WTF *)v132;
  v131 = xmmword_199122F80;
  v132[0] = 0;
  if (v11)
  {
    v55 = v10 - 1;
    if (!v10)
      v55 = 0;
    WTF::StringImpl::utf8ForCharacters(v11, v55, (uint64_t)&v127, v54);
  }
  else
  {
    v56 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v56 = 1;
    *(_QWORD *)(v56 + 8) = 0;
    *(_BYTE *)(v56 + 16) = 0;
    v127 = (const char *)v56;
    v128 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v129, "StringView", &v127);
  if (v128 != -1)
    ((void (*)(WTF::StringImpl **, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v128])(&v126, &v127);
  (*((void (**)(const char **))v129 + 5))(&v129);
  (*((void (**)(const char **))v129 + 5))(&v129);
  v64 = v130;
  if (!v130)
  {
    v117 = 0;
    goto LABEL_46;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v130, v131, (uint64_t *)&v117);
  v64 = v130;
  if (v130 != (WTF *)v132)
LABEL_46:
    WTF::fastFree((unint64_t)v64, v57, v58, v59, v60, v61, v62, v63);
  v129 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v130) = 41;
  v126 = v26;
  v127 = ": ";
  v128 = 2;
  v124 = v119;
  v125 = v120;
  v122 = v117;
  v123 = v118;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v129, (uint64_t *)&v126, (uint64_t)&v127, (uint64_t *)&v125, (uint64_t *)&v124, (uint64_t *)&v123, (uint64_t *)&v122, &v121);
  if (!v121)
  {
    __break(0xC471u);
    goto LABEL_71;
  }
  *v15 = v121;
  v121 = 0;
  v72 = v117;
  v117 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v65, v66, v67, v68, v69, v70, v71);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v118;
  v118 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v65, v66, v67, v68, v69, v70, v71);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v119;
  v119 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v65, v66, v67, v68, v69, v70, v71);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  v75 = v120;
  v120 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, v65, v66, v67, v68, v69, v70, v71);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
  if (*(_DWORD *)v26 == 2)
  {
    WTF::StringImpl::~StringImpl(v26, v65, v66, v67, v68, v69, v70, v71);
    WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
  }
  else
  {
    *(_DWORD *)v26 -= 2;
  }
}

uint64_t JSC::Wasm::SectionParser::checkStructuralSubtype(JSC::Wasm::SectionParser *this, unsigned int **a2, const JSC::Wasm::TypeDefinition *a3, uint64_t a4, const JSC::Wasm::Type *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const JSC::Wasm::TypeDefinition *v8;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  char v33;
  char v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  char v44;
  unsigned int *v45;
  WTF *v46;
  JSC::Wasm::TypeDefinition ***v47;
  JSC::Wasm::TypeDefinition ***i;
  int v49;
  JSC::Wasm::TypeDefinition ***v50;
  int v51;
  JSC::Wasm::TypeDefinition ****v52;
  JSC::Wasm::TypeDefinition ***v53;
  unint64_t CachedUnrolling;
  uint64_t v55;
  uint64_t v56;
  char v57;
  const JSC::Wasm::TypeDefinition *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;

  v8 = (const JSC::Wasm::TypeDefinition *)a2;
  if (*((_DWORD *)a2 + 8) == 4)
  {
    v45 = a2[1];
    v46 = *(WTF **)v45;
    v47 = *(JSC::Wasm::TypeDefinition ****)(*(_QWORD *)(*(_QWORD *)v45 + 8) + 8 * v45[2]);
    for (i = v47; ; i = *v52)
    {
      v49 = *((_DWORD *)i + 8);
      if (v49 == 2)
      {
        if (!*((_BYTE *)i + 16))
          goto LABEL_109;
        goto LABEL_106;
      }
      if (v49 == 1)
        break;
      if (!v49)
      {
        if (!*((_BYTE *)i + 24))
          goto LABEL_109;
        goto LABEL_106;
      }
      v50 = i + 1;
      if (v49 != 5)
        v50 = 0;
      v51 = *((_DWORD *)v50 + 2);
      v52 = (JSC::Wasm::TypeDefinition ****)*v50;
      if (v51)
      {
        v53 = v52[1];
        if (*((_DWORD *)v53 + 8) == 4 && !*v53[1])
          goto LABEL_106;
      }
    }
    if (!*((_BYTE *)i + 20))
      goto LABEL_109;
LABEL_106:
    CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)a2, (unint64_t)a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
    if (v57)
    {
      v8 = (const JSC::Wasm::TypeDefinition *)CachedUnrolling;
      goto LABEL_2;
    }
    v47 = (JSC::Wasm::TypeDefinition ***)JSC::Wasm::TypeDefinition::replacePlaceholders(v47, v46, v55, v56, a5, a6, a7, a8);
    JSC::Wasm::TypeInformation::addCachedUnrolling(v8, (WTF *)v47, v58, v59, v60, v61, v62, v63);
LABEL_109:
    v8 = (const JSC::Wasm::TypeDefinition *)v47;
  }
LABEL_2:
  if (*((_DWORD *)v8 + 8) == 5)
    v8 = (const JSC::Wasm::TypeDefinition *)**((_QWORD **)v8 + 1);
  v10 = *((_DWORD *)this + 8);
  if (v10 != 2)
  {
    if (v10 == 1)
    {
      if (*((_DWORD *)v8 + 8) == 1)
      {
        v21 = *((unsigned int *)v8 + 4);
        if (*((unsigned int *)this + 4) >= v21)
        {
          if (*((_DWORD *)v8 + 4))
          {
            v22 = 0;
            v23 = 0;
            while (1)
            {
              v24 = (uint64_t *)(*((_QWORD *)this + 1) + v22);
              v25 = *((unsigned __int8 *)v24 + 24);
              v26 = *((_QWORD *)v8 + 1) + v22;
              if (v25 != *(unsigned __int8 *)(v26 + 24))
                break;
              v28 = *v24;
              v27 = v24[1];
              v29 = *((_DWORD *)v24 + 4);
              v30 = *(_QWORD *)v26;
              v31 = *(_QWORD *)(v26 + 8);
              v32 = *(_DWORD *)(v26 + 16);
              if (v25)
              {
                if (v25 == 1)
                {
                  if (v32 == 1)
                  {
                    result = 0;
                    if (v29 != 1 || v30 != v28)
                      return result;
                  }
                  else
                  {
                    if (v29)
                      return 0;
                    if (v32)
                      v31 = MEMORY[8];
                    if (v30 != v28)
                      return 0;
                    if (v28 - 239 < 2 || v28 == 227)
                    {
                      if (v31 == v27)
                        v33 = ((v28 + 29) < 0xEu) & (0x3001u >> (v28 + 29));
                      else
                        v33 = 0;
                      if ((v33 & 1) == 0)
                        return 0;
                    }
                    else
                    {
                      if (v31 == v27)
                        v34 = ((v28 + 29) < 0xEu) & (0x3001u >> (v28 + 29));
                      else
                        v34 = 1;
                      if ((v34 & 1) != 0)
                        return 0;
                    }
                  }
                }
              }
              else if (v29 == 1)
              {
                result = 0;
                if (v32 != 1 || v28 != v30)
                  return result;
              }
              else
              {
                if (v32 == 1)
                  return 0;
                if (v29)
                  v27 = MEMORY[8];
                if (v32)
                  v31 = MEMORY[8];
                result = JSC::Wasm::isSubtype(v28, v27, v30, v31, (uint64_t)a5, a6, a7, a8);
                if (!(_DWORD)result)
                  return result;
                v21 = *((unsigned int *)v8 + 4);
              }
              ++v23;
              v22 += 32;
              result = 1;
              if (v23 >= v21)
                return result;
            }
            return 0;
          }
          return 1;
        }
      }
    }
    else if (!v10 && !*((_DWORD *)v8 + 8))
    {
      v11 = *((_DWORD *)this + 4);
      if (v11 == *((_DWORD *)v8 + 4))
      {
        v12 = *((_DWORD *)this + 5);
        if (v12 == *((_DWORD *)v8 + 5))
        {
          if (v11)
          {
            v13 = 0;
            while (1)
            {
              v14 = (uint64_t *)(*((_QWORD *)v8 + 1) + 16 * (v13 + *((_DWORD *)v8 + 5)));
              v15 = *v14;
              v16 = v14[1];
              v17 = *((_QWORD *)this + 1) + 16 * (v13 + *((_DWORD *)this + 5));
              if ((JSC::Wasm::isSubtype(v15, v16, *(_QWORD *)v17, *(_QWORD *)(v17 + 8), (uint64_t)a5, a6, a7, a8) & 1) == 0)
                return 0;
              if (++v13 >= *((_DWORD *)this + 4))
              {
                v12 = *((_DWORD *)this + 5);
                break;
              }
            }
          }
          if (v12)
          {
            v18 = 0;
            v19 = 0;
            do
            {
              result = JSC::Wasm::isSubtype(*(_QWORD *)(*((_QWORD *)this + 1) + v18), *(_QWORD *)(*((_QWORD *)this + 1) + v18 + 8), *(_QWORD *)(*((_QWORD *)v8 + 1) + v18), *(_QWORD *)(*((_QWORD *)v8 + 1) + v18 + 8), (uint64_t)a5, a6, a7, a8);
              if ((result & 1) == 0)
                break;
              ++v19;
              v18 += 16;
            }
            while (v19 < *((unsigned int *)this + 5));
            return result;
          }
          return 1;
        }
      }
    }
    return 0;
  }
  if (*((_DWORD *)v8 + 8) != 2)
    return 0;
  v35 = (uint64_t *)*((_QWORD *)this + 1);
  v36 = *((unsigned __int8 *)v35 + 24);
  v37 = *((_QWORD *)v8 + 1);
  if (v36 != *(unsigned __int8 *)(v37 + 24))
    return 0;
  v39 = *v35;
  v38 = v35[1];
  v40 = *((_DWORD *)v35 + 4);
  v41 = *(_QWORD *)v37;
  v42 = *(_QWORD *)(v37 + 8);
  v43 = *(_DWORD *)(v37 + 16);
  if (v36)
  {
    if (v36 != 1)
      return 1;
    if (v43 == 1)
    {
      result = 0;
      if (v40 != 1 || v41 != v39)
        return result;
      return 1;
    }
    if (!v40)
    {
      if (v43)
        v42 = MEMORY[8];
      if (v41 == v39)
      {
        if (v39 - 239 < 2 || v39 == 227)
        {
          if (v42 == v38)
            v44 = ((v39 + 29) < 0xEu) & (0x3001u >> (v39 + 29));
          else
            v44 = 0;
          if ((v44 & 1) != 0)
            return 1;
        }
        else
        {
          if (v42 == v38)
            v64 = ((v39 + 29) < 0xEu) & (0x3001u >> (v39 + 29));
          else
            v64 = 1;
          if ((v64 & 1) == 0)
            return 1;
        }
      }
    }
    return 0;
  }
  if (v40 == 1)
  {
    result = 0;
    if (v43 != 1 || v39 != v41)
      return result;
    return 1;
  }
  if (v43 == 1)
    return 0;
  if (v40)
    v38 = MEMORY[8];
  if (v43)
    v42 = MEMORY[8];
  result = JSC::Wasm::isSubtype(v39, v38, v41, v42, (uint64_t)a5, a6, a7, a8);
  if ((_DWORD)result)
    return 1;
  return result;
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,JSC::Wasm::TypeKind,WTF::ASCIILiteral,JSC::Wasm::TypeKind>(int **a1, uint64_t a2, uint64_t a3, WTF::StringImpl *a4, WTF::StringImpl *a5, int8x16_t *a6, double a7, float a8)
{
  int *v8;
  uint64_t v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  _BYTE *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  float v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  const char *String;
  uint64_t v47;
  float v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  int *v70;
  _WORD *v71;
  int8x16_t *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  unsigned int v76;
  _BYTE *v77;
  _BYTE *v78;
  size_t v79;
  __int128 v80;
  char *v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  char *v85;
  char *v86;
  char *v87;
  __int16 v88;
  _DWORD *v89;
  char *v90;
  int8x16_t *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  __int128 v95;
  char *v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  char *v100;
  char *v101;
  char *v102;
  __int16 v103;
  uint64_t v104;
  char *v105;
  int8x16_t *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  __int128 v110;
  char *v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  char *v115;
  char *v116;
  char *v117;
  __int16 v118;
  uint64_t v119;
  char *v120;
  int **v121;
  int8x16_t *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  __int128 v126;
  char *v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  char *v131;
  char *v132;
  char *v133;
  __int16 v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _WORD *v180;
  _BYTE *v181;
  _BYTE *v182;
  size_t v183;
  uint64_t v184;
  _BYTE *v185;
  _BYTE *v186;
  size_t v187;
  uint64_t v188;
  unsigned __int128 *v189;
  unsigned __int128 *v190;
  unsigned __int128 v191;
  unsigned __int128 *v192;
  unsigned __int128 *v193;
  unsigned __int128 v194;
  unsigned __int128 *v195;
  unsigned __int128 *v196;
  unsigned __int128 v197;
  char v198;
  char v199;
  char v200;
  int8x16_t *__src;
  int **v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  int v207;
  unsigned int v208;
  int v209;
  char v210;
  void (**v211)(WTF::StringPrintStream *__hidden);
  WTF *v212;
  __int128 v213;
  _BYTE v214[128];
  uint64_t v215;
  int8x16x2_t v216;
  int8x16x2_t v217;
  int8x16x2_t v218;
  int8x16x2_t v219;
  int8x16x2_t v220;
  int8x16x2_t v221;
  int8x16x2_t v222;
  int8x16x2_t v223;
  int8x16x2_t v224;
  int8x16x2_t v225;
  int8x16x2_t v226;
  int8x16x2_t v227;

  v16 = 0;
  v215 = *MEMORY[0x1E0C80C00];
  v17 = a3 + a2;
  do
  {
    v18 = (v17 % 0xA) | 0x30;
    v214[v16-- - 8] = (v17 % 0xA) | 0x30;
    v19 = v17 > 9;
    v17 /= 0xAuLL;
  }
  while (v19);
  if (v16 + 26 >= 27)
  {
    __break(1u);
    goto LABEL_158;
  }
  if (v16)
  {
    if ((unint64_t)-v16 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198E23D3CLL);
    }
    v8 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v16));
    v20 = v8 + 5;
    *v8 = 2;
    v8[1] = -(int)v16;
    *((_QWORD *)v8 + 1) = v8 + 5;
    v8[4] = 4;
    if (v16 == -1)
      *v20 = v18;
    else
      memcpy(v20, &v214[v16 - 7], -v16);
  }
  else
  {
    v8 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v211 = off_1E3572250;
  v212 = (WTF *)v214;
  v213 = xmmword_199122F80;
  v214[0] = 0;
  WTF::StringImpl::utf8ForCharacters("Element section's ", 0x12uLL, (uint64_t)&v207, a8);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v211, "StringView", &v207);
  if (v209 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v209])(&v210, &v207);
  v211[5]((WTF::StringPrintStream *)&v211);
  v211[5]((WTF::StringPrintStream *)&v211);
  v28 = v212;
  if (!v212)
  {
    v206 = 0;
    goto LABEL_16;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v212, v213, (uint64_t *)&v206);
  v28 = v212;
  if (v212 != (WTF *)v214)
LABEL_16:
    WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
  v211 = off_1E3572250;
  v212 = (WTF *)v214;
  v213 = xmmword_199122F80;
  v214[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v211, "%u", (_DWORD)a4);
  v211[5]((WTF::StringPrintStream *)&v211);
  v36 = v212;
  if (!v212)
  {
    v205 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v212, v213, (uint64_t *)&v205);
  v36 = v212;
  if (v212 != (WTF *)v214)
LABEL_21:
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  v211 = off_1E3572250;
  v212 = (WTF *)v214;
  v213 = xmmword_199122F80;
  v214[0] = 0;
  WTF::StringImpl::utf8ForCharacters("th element's init_expr opcode of type ", 0x26uLL, (uint64_t)&v207, v37);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v211, "StringView", &v207);
  if (v209 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v209])(&v210, &v207);
  v211[5]((WTF::StringPrintStream *)&v211);
  v211[5]((WTF::StringPrintStream *)&v211);
  v45 = v212;
  if (!v212)
  {
    v204 = 0;
    goto LABEL_28;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v212, v213, (uint64_t *)&v204);
  v45 = v212;
  if (v212 != (WTF *)v214)
LABEL_28:
    WTF::fastFree((unint64_t)v45, v38, v39, v40, v41, v42, v43, v44);
  String = JSC::Wasm::makeString((int)a5);
  v9 = v47;
  v211 = off_1E3572250;
  v212 = (WTF *)v214;
  v213 = xmmword_199122F80;
  v214[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" doesn't match element's type ", 0x1EuLL, (uint64_t)&v207, v48);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v211, "StringView", &v207);
  if (v209 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v209])(&v210, &v207);
  v211[5]((WTF::StringPrintStream *)&v211);
  v211[5]((WTF::StringPrintStream *)&v211);
  v56 = v212;
  __src = (int8x16_t *)String;
  v202 = a1;
  if (v212)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v212, v213, (uint64_t *)&v203);
    v56 = v212;
    if (v212 == (WTF *)v214)
      goto LABEL_36;
  }
  else
  {
    v203 = 0;
  }
  WTF::fastFree((unint64_t)v56, v49, v50, v51, v52, v53, v54, v55);
LABEL_36:
  a6 = (int8x16_t *)JSC::Wasm::makeString((int)a6);
  v11 = v205;
  a5 = v206;
  a4 = v203;
  v18 = (uint64_t)v204;
  if (v9)
  {
    if ((unint64_t)--v9 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198E23D08);
    }
  }
  if (v57)
  {
    v10 = v57 - 1;
    if ((unint64_t)(v57 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198E23D34);
    }
  }
  else
  {
    v10 = 0;
  }
  if (!v206)
  {
LABEL_158:
    v58 = 0;
    if (v11)
      goto LABEL_41;
    goto LABEL_159;
  }
  v58 = *((_DWORD *)v206 + 1);
  if (v205)
  {
LABEL_41:
    v59 = *((_DWORD *)v11 + 1);
    goto LABEL_42;
  }
LABEL_159:
  v59 = 0;
LABEL_42:
  if (v18)
  {
    v60 = *(_DWORD *)(v18 + 4);
    if (a4)
    {
LABEL_44:
      v61 = *((_DWORD *)a4 + 1);
      goto LABEL_45;
    }
  }
  else
  {
    v60 = 0;
    if (a4)
      goto LABEL_44;
  }
  v61 = 0;
LABEL_45:
  WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(41, v8[1], 2, v58, v59, v60, v9, v61, (uint64_t)&v207, v10);
  if ((_BYTE)v207)
    goto LABEL_168;
  if ((v8[4] & 4) != 0
    && (!a5 || (*((_BYTE *)a5 + 16) & 4) != 0)
    && (!v11 || (*((_BYTE *)v11 + 16) & 4) != 0)
    && (!v18 || (*(_BYTE *)(v18 + 16) & 4) != 0)
    && (!a4 || (*((_BYTE *)a4 + 16) & 4) != 0))
  {
    v76 = v208;
    if (v208)
    {
      if ((v208 & 0x80000000) != 0
        || (WTF::tryFastCompactMalloc((WTF *)(v208 + 20), &v211), (v70 = (int *)v211) == 0))
      {
LABEL_168:
        __break(0xC471u);
        JUMPOUT(0x198E23CDCLL);
      }
      *(_OWORD *)((char *)v211 + 20) = *(_OWORD *)"WebAssembly.Module doesn't parse at byte ";
      *v70 = 2;
      v70[1] = v76;
      *((_QWORD *)v70 + 1) = v70 + 5;
      v70[4] = 4;
      qmemcpy(v70 + 9, "le doesn't parse at byte ", 25);
      v77 = (char *)v70 + 61;
      v78 = (_BYTE *)*((_QWORD *)v8 + 1);
      v79 = v8[1];
      if ((v8[4] & 4) != 0)
      {
        if ((_DWORD)v79 == 1)
        {
          *v77 = *v78;
        }
        else if ((_DWORD)v79)
        {
          memcpy((char *)v70 + 61, v78, v79);
        }
      }
      else
      {
        if (v79 < 0x10)
        {
          v189 = (unsigned __int128 *)((char *)v70 + 61);
        }
        else
        {
          v189 = (unsigned __int128 *)&v77[v79 & 0xFFFFFFF0];
          v190 = (unsigned __int128 *)((char *)v70 + 61);
          do
          {
            v191 = (unsigned __int128)vld2q_s8(v78);
            v78 += 32;
            *v190++ = v191;
          }
          while (v190 != v189);
        }
        while (v189 != (unsigned __int128 *)&v77[v79])
        {
          v198 = *v78;
          v78 += 2;
          *(_BYTE *)v189 = v198;
          v189 = (unsigned __int128 *)((char *)v189 + 1);
        }
      }
      v180 = &v77[v8[1]];
      *v180 = 8250;
      v181 = v180 + 1;
      if (a5)
      {
        v182 = (_BYTE *)*((_QWORD *)a5 + 1);
        v183 = *((unsigned int *)a5 + 1);
        if ((*((_BYTE *)a5 + 16) & 4) != 0)
        {
          if ((_DWORD)v183 == 1)
          {
            *v181 = *v182;
          }
          else if ((_DWORD)v183)
          {
            memcpy(v181, v182, v183);
          }
        }
        else
        {
          if (v183 < 0x10)
          {
            v192 = (unsigned __int128 *)v181;
          }
          else
          {
            v192 = (unsigned __int128 *)&v181[v183 & 0xFFFFFFF0];
            v193 = (unsigned __int128 *)v181;
            do
            {
              v194 = (unsigned __int128)vld2q_s8(v182);
              v182 += 32;
              *v193++ = v194;
            }
            while (v193 != v192);
          }
          while (v192 != (unsigned __int128 *)&v181[v183])
          {
            v199 = *v182;
            v182 += 2;
            *(_BYTE *)v192 = v199;
            v192 = (unsigned __int128 *)((char *)v192 + 1);
          }
        }
        v184 = *((unsigned int *)a5 + 1);
      }
      else
      {
        v184 = 0;
      }
      v185 = &v181[v184];
      if (v11)
      {
        v186 = (_BYTE *)*((_QWORD *)v11 + 1);
        v187 = *((unsigned int *)v11 + 1);
        if ((*((_BYTE *)v11 + 16) & 4) != 0)
        {
          if ((_DWORD)v187 == 1)
          {
            *v185 = *v186;
          }
          else if ((_DWORD)v187)
          {
            memcpy(v185, v186, v187);
          }
        }
        else
        {
          if (v187 < 0x10)
          {
            v195 = (unsigned __int128 *)v185;
          }
          else
          {
            v195 = (unsigned __int128 *)&v185[v187 & 0xFFFFFFF0];
            v196 = (unsigned __int128 *)v185;
            do
            {
              v197 = (unsigned __int128)vld2q_s8(v186);
              v186 += 32;
              *v196++ = v197;
            }
            while (v196 != v195);
          }
          while (v195 != (unsigned __int128 *)&v185[v187])
          {
            v200 = *v186;
            v186 += 2;
            *(_BYTE *)v195 = v200;
            v195 = (unsigned __int128 *)((char *)v195 + 1);
          }
        }
        v188 = *((unsigned int *)v11 + 1);
      }
      else
      {
        v188 = 0;
      }
      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v185[v188], v18, __src->i8, v9, (uint64_t)a4, a6->i8, v10);
LABEL_152:
      v121 = v202;
      goto LABEL_115;
    }
LABEL_162:
    v70 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_152;
  }
  v69 = v208;
  if (!v208)
    goto LABEL_162;
  if (v208 > 0x7FFFFFEF)
    goto LABEL_168;
  WTF::tryFastCompactMalloc((WTF *)(2 * v208 + 20), &v211);
  v70 = (int *)v211;
  if (!v211)
    goto LABEL_168;
  *(_DWORD *)v211 = 2;
  v70[1] = v69;
  *(_OWORD *)(v70 + 5) = xmmword_19915A580;
  *((_QWORD *)v70 + 1) = v70 + 5;
  v70[4] = 0;
  v71 = (_WORD *)v70 + 51;
  *(_OWORD *)(v70 + 9) = xmmword_19915A590;
  *(_OWORD *)(v70 + 13) = xmmword_19915A5A0;
  *(_OWORD *)(v70 + 17) = xmmword_19915A5B0;
  *(_OWORD *)(v70 + 21) = xmmword_19915A5C0;
  *((_WORD *)v70 + 50) = 32;
  v72 = (int8x16_t *)*((_QWORD *)v8 + 1);
  v73 = v8[1];
  if ((v8[4] & 4) != 0)
  {
    v74 = (char *)&v71[v73];
    if (v73 >= 0x40)
    {
      v75 = (char *)&v71[v73 & 0xFFFFFFC0];
      v80 = 0uLL;
      v81 = (char *)v70 + 102;
      do
      {
        v216.val[0] = *v72;
        v82 = v72[1];
        v220.val[0] = v72[2];
        v83 = v72[3];
        v72 += 4;
        v84 = v83;
        v220.val[1] = 0uLL;
        v224.val[0] = v82;
        v216.val[1] = 0uLL;
        v85 = v81;
        vst2q_s8(v85, v216);
        v85 += 32;
        v224.val[1] = 0uLL;
        vst2q_s8(v85, v224);
        v86 = v81 + 64;
        vst2q_s8(v86, v220);
        v87 = v81 + 96;
        vst2q_s8(v87, *(int8x16x2_t *)(&v80 - 1));
        v81 += 128;
      }
      while (v81 != v75);
    }
    else
    {
      v75 = (char *)v70 + 102;
    }
    while (v75 != v74)
    {
      v88 = v72->u8[0];
      v72 = (int8x16_t *)((char *)v72 + 1);
      *(_WORD *)v75 = v88;
      v75 += 2;
    }
  }
  else if ((_DWORD)v73 == 1)
  {
    *v71 = v72->i16[0];
  }
  else if ((_DWORD)v73)
  {
    memcpy((char *)v70 + 102, v72, 2 * v73);
  }
  v89 = &v71[v8[1]];
  *v89 = 2097210;
  v90 = (char *)(v89 + 1);
  if (a5)
  {
    v91 = (int8x16_t *)*((_QWORD *)a5 + 1);
    v92 = *((unsigned int *)a5 + 1);
    if ((*((_BYTE *)a5 + 16) & 4) != 0)
    {
      v93 = &v90[2 * v92];
      if (v92 >= 0x40)
      {
        v94 = &v90[2 * (v92 & 0xFFFFFFC0)];
        v95 = 0uLL;
        v96 = v90;
        do
        {
          v217.val[0] = *v91;
          v97 = v91[1];
          v221.val[0] = v91[2];
          v98 = v91[3];
          v91 += 4;
          v99 = v98;
          v221.val[1] = 0uLL;
          v225.val[0] = v97;
          v217.val[1] = 0uLL;
          v100 = v96;
          vst2q_s8(v100, v217);
          v100 += 32;
          v225.val[1] = 0uLL;
          vst2q_s8(v100, v225);
          v101 = v96 + 64;
          vst2q_s8(v101, v221);
          v102 = v96 + 96;
          vst2q_s8(v102, *(int8x16x2_t *)(&v95 - 1));
          v96 += 128;
        }
        while (v96 != v94);
      }
      else
      {
        v94 = v90;
      }
      while (v94 != v93)
      {
        v103 = v91->u8[0];
        v91 = (int8x16_t *)((char *)v91 + 1);
        *(_WORD *)v94 = v103;
        v94 += 2;
      }
    }
    else if ((_DWORD)v92 == 1)
    {
      *(_WORD *)v90 = v91->i16[0];
    }
    else if ((_DWORD)v92)
    {
      memcpy(v90, v91, 2 * v92);
    }
    v104 = *((unsigned int *)a5 + 1);
  }
  else
  {
    v104 = 0;
  }
  v105 = &v90[2 * v104];
  if (v11)
  {
    v106 = (int8x16_t *)*((_QWORD *)v11 + 1);
    v107 = *((unsigned int *)v11 + 1);
    if ((*((_BYTE *)v11 + 16) & 4) != 0)
    {
      v108 = &v105[2 * v107];
      if (v107 >= 0x40)
      {
        v109 = &v105[2 * (v107 & 0xFFFFFFC0)];
        v110 = 0uLL;
        v111 = v105;
        do
        {
          v218.val[0] = *v106;
          v112 = v106[1];
          v222.val[0] = v106[2];
          v113 = v106[3];
          v106 += 4;
          v114 = v113;
          v222.val[1] = 0uLL;
          v226.val[0] = v112;
          v218.val[1] = 0uLL;
          v115 = v111;
          vst2q_s8(v115, v218);
          v115 += 32;
          v226.val[1] = 0uLL;
          vst2q_s8(v115, v226);
          v116 = v111 + 64;
          vst2q_s8(v116, v222);
          v117 = v111 + 96;
          vst2q_s8(v117, *(int8x16x2_t *)(&v110 - 1));
          v111 += 128;
        }
        while (v111 != v109);
      }
      else
      {
        v109 = v105;
      }
      while (v109 != v108)
      {
        v118 = v106->u8[0];
        v106 = (int8x16_t *)((char *)v106 + 1);
        *(_WORD *)v109 = v118;
        v109 += 2;
      }
    }
    else if ((_DWORD)v107 == 1)
    {
      *(_WORD *)v105 = v106->i16[0];
    }
    else if ((_DWORD)v107)
    {
      memcpy(v105, v106, 2 * v107);
    }
    v119 = *((unsigned int *)v11 + 1);
  }
  else
  {
    v119 = 0;
  }
  v120 = &v105[2 * v119];
  v121 = v202;
  if (v18)
  {
    v122 = *(int8x16_t **)(v18 + 8);
    v123 = *(unsigned int *)(v18 + 4);
    if ((*(_BYTE *)(v18 + 16) & 4) != 0)
    {
      v124 = &v120[2 * v123];
      if (v123 >= 0x40)
      {
        v125 = &v120[2 * (v123 & 0xFFFFFFC0)];
        v126 = 0uLL;
        v127 = v120;
        do
        {
          v219.val[0] = *v122;
          v128 = v122[1];
          v223.val[0] = v122[2];
          v129 = v122[3];
          v122 += 4;
          v130 = v129;
          v223.val[1] = 0uLL;
          v227.val[0] = v128;
          v219.val[1] = 0uLL;
          v131 = v127;
          vst2q_s8(v131, v219);
          v131 += 32;
          v227.val[1] = 0uLL;
          vst2q_s8(v131, v227);
          v132 = v127 + 64;
          vst2q_s8(v132, v223);
          v133 = v127 + 96;
          vst2q_s8(v133, *(int8x16x2_t *)(&v126 - 1));
          v127 += 128;
        }
        while (v127 != v125);
      }
      else
      {
        v125 = v120;
      }
      while (v125 != v124)
      {
        v134 = v122->u8[0];
        v122 = (int8x16_t *)((char *)v122 + 1);
        *(_WORD *)v125 = v134;
        v125 += 2;
      }
    }
    else if ((_DWORD)v123 == 1)
    {
      *(_WORD *)v120 = v122->i16[0];
    }
    else if ((_DWORD)v123)
    {
      memcpy(v120, v122, 2 * v123);
    }
    v135 = *(unsigned int *)(v18 + 4);
  }
  else
  {
    v135 = 0;
  }
  WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v120[2 * v135], __src, v9, (uint64_t)a4, a6, v10);
LABEL_115:
  *v121 = v70;
  v136 = v203;
  v203 = 0;
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
    {
      WTF::StringImpl::~StringImpl(v136, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
    }
    else
    {
      *(_DWORD *)v136 -= 2;
    }
  }
  v137 = v204;
  v204 = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 2)
    {
      WTF::StringImpl::~StringImpl(v137, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
    }
    else
    {
      *(_DWORD *)v137 -= 2;
    }
  }
  v138 = v205;
  v205 = 0;
  if (v138)
  {
    if (*(_DWORD *)v138 == 2)
    {
      WTF::StringImpl::~StringImpl(v138, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v164, v165, v166, v167, v168, v169, v170, v171);
    }
    else
    {
      *(_DWORD *)v138 -= 2;
    }
  }
  v139 = v206;
  v206 = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
    {
      WTF::StringImpl::~StringImpl(v139, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v172, v173, v174, v175, v176, v177, v178, v179);
    }
    else
    {
      *(_DWORD *)v139 -= 2;
    }
  }
  if (*v8 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v8, v62, v63, v64, v65, v66, v67, v68);
    WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
  }
  else
  {
    *v8 -= 2;
  }
}

void JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, double a8, float a9)
{
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int *v18;
  _BYTE *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  float v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  float v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  float v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  WTF::AtomStringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  int v182;
  int v183;
  char v184;
  void (**v185)(WTF::StringPrintStream *__hidden);
  WTF *v186;
  __int128 v187;
  _BYTE v188[128];
  uint64_t v189;

  v14 = 0;
  v189 = *MEMORY[0x1E0C80C00];
  v15 = a3 + a2;
  do
  {
    v16 = (v15 % 0xA) | 0x30;
    v188[v14-- - 8] = v16;
    v17 = v15 > 9;
    v15 /= 0xAuLL;
  }
  while (v17);
  if (v14 + 26 >= 27)
    __break(1u);
  if (v14)
  {
    if ((unint64_t)-v14 >> 31)
    {
      __break(0xC471u);
LABEL_98:
      JUMPOUT(0x198E24568);
    }
    v18 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v14));
    v19 = v18 + 5;
    *v18 = 2;
    v18[1] = -(int)v14;
    *((_QWORD *)v18 + 1) = v18 + 5;
    v18[4] = 4;
    if (v14 == -1)
      *v19 = v16;
    else
      memcpy(v19, &v188[v14 - 7], -v14);
  }
  else
  {
    v18 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v185 = off_1E3572250;
  v186 = (WTF *)v188;
  v187 = xmmword_199122F80;
  v188[0] = 0;
  WTF::StringImpl::utf8ForCharacters("Element section's ", 0x12uLL, (uint64_t)&v182, a9);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v185, "StringView", &v182);
  if (v183 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v183])(&v184, &v182);
  v185[5]((WTF::StringPrintStream *)&v185);
  v185[5]((WTF::StringPrintStream *)&v185);
  v27 = v186;
  if (!v186)
  {
    v181 = 0;
    goto LABEL_16;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v186, v187, (uint64_t *)&v181);
  v27 = v186;
  if (v186 != (WTF *)v188)
LABEL_16:
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  v185 = off_1E3572250;
  v186 = (WTF *)v188;
  v187 = xmmword_199122F80;
  v188[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v185, "%u", a4);
  v185[5]((WTF::StringPrintStream *)&v185);
  v35 = v186;
  if (!v186)
  {
    v180 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v186, v187, (uint64_t *)&v180);
  v35 = v186;
  if (v186 != (WTF *)v188)
LABEL_21:
    WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
  v185 = off_1E3572250;
  v186 = (WTF *)v188;
  v187 = xmmword_199122F80;
  v188[0] = 0;
  WTF::StringImpl::utf8ForCharacters("th element's ", 0xDuLL, (uint64_t)&v182, v36);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v185, "StringView", &v182);
  if (v183 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v183])(&v184, &v182);
  v185[5]((WTF::StringPrintStream *)&v185);
  v185[5]((WTF::StringPrintStream *)&v185);
  v44 = v186;
  if (!v186)
  {
    v179 = 0;
    goto LABEL_28;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v186, v187, (uint64_t *)&v179);
  v44 = v186;
  if (v186 != (WTF *)v188)
LABEL_28:
    WTF::fastFree((unint64_t)v44, v37, v38, v39, v40, v41, v42, v43);
  v185 = off_1E3572250;
  v186 = (WTF *)v188;
  v187 = xmmword_199122F80;
  v188[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v185, "%u", a5);
  v185[5]((WTF::StringPrintStream *)&v185);
  v52 = v186;
  if (!v186)
  {
    v178 = 0;
    goto LABEL_33;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v186, v187, (uint64_t *)&v178);
  v52 = v186;
  if (v186 != (WTF *)v188)
LABEL_33:
    WTF::fastFree((unint64_t)v52, v45, v46, v47, v48, v49, v50, v51);
  v185 = off_1E3572250;
  v186 = (WTF *)v188;
  v187 = xmmword_199122F80;
  v188[0] = 0;
  WTF::StringImpl::utf8ForCharacters("th index is ", 0xCuLL, (uint64_t)&v182, v53);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v185, "StringView", &v182);
  if (v183 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v183])(&v184, &v182);
  v185[5]((WTF::StringPrintStream *)&v185);
  v185[5]((WTF::StringPrintStream *)&v185);
  v61 = v186;
  if (!v186)
  {
    v177 = 0;
    goto LABEL_40;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v186, v187, (uint64_t *)&v177);
  v61 = v186;
  if (v186 != (WTF *)v188)
LABEL_40:
    WTF::fastFree((unint64_t)v61, v54, v55, v56, v57, v58, v59, v60);
  v185 = off_1E3572250;
  v186 = (WTF *)v188;
  v187 = xmmword_199122F80;
  v188[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v185, "%u", a6);
  v185[5]((WTF::StringPrintStream *)&v185);
  v69 = v186;
  if (!v186)
  {
    v176 = 0;
    goto LABEL_45;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v186, v187, (uint64_t *)&v176);
  v69 = v186;
  if (v186 != (WTF *)v188)
LABEL_45:
    WTF::fastFree((unint64_t)v69, v62, v63, v64, v65, v66, v67, v68);
  v185 = off_1E3572250;
  v186 = (WTF *)v188;
  v187 = xmmword_199122F80;
  v188[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" which exceeds the function index space size of ", 0x30uLL, (uint64_t)&v182, v70);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v185, "StringView", &v182);
  if (v183 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v183])(&v184, &v182);
  v185[5]((WTF::StringPrintStream *)&v185);
  v185[5]((WTF::StringPrintStream *)&v185);
  v78 = v186;
  if (!v186)
  {
    v175 = 0;
    goto LABEL_52;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v186, v187, (uint64_t *)&v175);
  v78 = v186;
  if (v186 != (WTF *)v188)
LABEL_52:
    WTF::fastFree((unint64_t)v78, v71, v72, v73, v74, v75, v76, v77);
  v185 = off_1E3572250;
  v186 = (WTF *)v188;
  v187 = xmmword_199122F80;
  v188[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v185, "%lu", a7);
  v185[5]((WTF::StringPrintStream *)&v185);
  v86 = v186;
  if (!v186)
  {
    v174 = 0;
    goto LABEL_57;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v186, v187, (uint64_t *)&v174);
  v86 = v186;
  if (v186 != (WTF *)v188)
LABEL_57:
    WTF::fastFree((unint64_t)v86, v79, v80, v81, v82, v83, v84, v85);
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((int **)&v185, (int8x16_t *)"WebAssembly.Module doesn't parse at byte ", 42, (uint64_t)v18, (int8x16_t *)": ", 3, (uint64_t)v181, (uint64_t)v180, (uint64_t)v179, (uint64_t)v178, (uint64_t)v177, (uint64_t)v176, (uint64_t)v175, (uint64_t)v174);
  if (!v185)
  {
    __break(0xC471u);
    goto LABEL_98;
  }
  *a1 = v185;
  v94 = v174;
  v174 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v87, v88, v89, v90, v91, v92, v93);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = v175;
  v175 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v87, v88, v89, v90, v91, v92, v93);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v96 = v176;
  v176 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v87, v88, v89, v90, v91, v92, v93);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v177;
  v177 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v87, v88, v89, v90, v91, v92, v93);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v178;
  v178 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v87, v88, v89, v90, v91, v92, v93);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  v99 = v179;
  v179 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v87, v88, v89, v90, v91, v92, v93);
      WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = v180;
  v180 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v87, v88, v89, v90, v91, v92, v93);
      WTF::fastFree(v158, v159, v160, v161, v162, v163, v164, v165);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = v181;
  v181 = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, v87, v88, v89, v90, v91, v92, v93);
      WTF::fastFree(v166, v167, v168, v169, v170, v171, v172, v173);
    }
    else
    {
      *(_DWORD *)v101 -= 2;
    }
  }
  if (*v18 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v18, v87, v88, v89, v90, v91, v92, v93);
    WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
  }
  else
  {
    *v18 -= 2;
  }
}

void JSC::Wasm::SectionParser::parseData(JSC::Wasm::SectionParser *this, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  double v6;
  float v7;
  unsigned int v8;
  unint64_t v9;
  __n128 v10;
  float v11;
  uint64_t v12;
  int v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  float v25;
  int v26;
  double v27;
  float v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  float v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  unsigned int v65[3];
  int v66;
  uint64_t v67;
  void (*v68)(void);
  uint64_t v69;
  char v70;
  int v71;
  unsigned int v72;

  v72 = 0;
  if (!WTF::LEBDecoder::decodeUInt32(a2[1], a2[2], a2, &v72))
  {
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v67, *a2, a2[6], "can't get Data section's count", 31, v6, v7);
    goto LABEL_59;
  }
  v8 = v72;
  if (v72 >= 0x186A1)
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v67, *a2, a2[6], "Data section's count is too big ", 33, v72, " maximum ", 10, v6, v7, 100000);
    goto LABEL_59;
  }
  v9 = a2[7];
  if (*(_BYTE *)(v9 + 268) && v72 != *(_DWORD *)(v9 + 264))
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v67, *a2, a2[6], "Data section's count ", 22, v72, " is different from Data Count section's count ", 47, v6, v7, *(_DWORD *)(v9 + 264));
    goto LABEL_59;
  }
  if (*(_DWORD *)(v9 + 168))
  {
    __break(0xC471u);
    JUMPOUT(0x198E24BACLL);
  }
  if (!v72)
    goto LABEL_36;
  WTF::tryFastMalloc((WTF *)(16 * v72), &v67);
  v12 = v67;
  if (!v67)
  {
    v54 = v72;
    v49 = *a2;
    v50 = a2[6];
    v51 = "can't allocate enough memory for Data section's ";
    v52 = " segments";
    v53 = 49;
    v55 = 10;
LABEL_58:
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v67, v49, v50, v51, v53, v54, v52, v55, v10.n128_f64[0], v11);
    goto LABEL_59;
  }
  *(_DWORD *)(v9 + 168) = v8;
  *(_QWORD *)(v9 + 160) = v12;
  if (!v72)
  {
LABEL_36:
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 8) = 0;
    return;
  }
  v13 = 0;
  while (1)
  {
    v71 = -1;
    if (!WTF::LEBDecoder::decodeUInt32(a2[1], a2[2], a2, &v71))
    {
      v49 = *a2;
      v50 = a2[6];
      v51 = "can't get ";
      v52 = "th Data segment's flag";
      v53 = 11;
      goto LABEL_57;
    }
    if (!v71)
    {
      if (*(_DWORD *)(a2[7] + 104) == -1)
        goto LABEL_70;
      LOBYTE(v69) = 0;
      v70 = 0;
      JSC::Wasm::SectionParser::parseI32InitExpr((uint64_t)&v67, a2, (uint64_t)&v69, "Data init_expr must produce an i32", 35, v10, v11);
      if ((_BYTE)v68)
      {
LABEL_68:
        v62 = v67;
        v67 = 0;
        *(_QWORD *)this = v62;
        v36 = 1;
        *((_BYTE *)this + 8) = 1;
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v67, v14, v15, v16, v17, v18, v19, v20);
        goto LABEL_26;
      }
      std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v67, v14, v15, v16, v17, v18, v19, v20);
      v66 = 0;
      if (WTF::LEBDecoder::decodeUInt32(a2[1], a2[2], a2, &v66))
      {
        v26 = v66;
        if (v66 < 0x40000001)
        {
          if (!v70)
            goto LABEL_69;
          v9 = v9 & 0xFFFFFFFF00000000 | 1;
          JSC::Wasm::Segment::create(v69, v9, v66, 0, v66, v21, v22, v23, &v67);
          if (v67)
          {
            if (v66)
            {
              v29 = 0;
              while (1)
              {
                v30 = *a2;
                if (*a2 >= (unint64_t)a2[2])
                  goto LABEL_60;
                *a2 = v30 + 1;
                *(_BYTE *)(v67 + v29++ + 20) = *(_BYTE *)(a2[1] + v30);
                if (v29 >= v66)
                  goto LABEL_21;
              }
            }
            goto LABEL_21;
          }
          v63 = v66;
          goto LABEL_72;
        }
        goto LABEL_66;
      }
      goto LABEL_64;
    }
    if (v71 != 1)
      break;
    v65[0] = 0;
    if (WTF::LEBDecoder::decodeUInt32(a2[1], a2[2], a2, v65))
    {
      v26 = v65[0];
      if (v65[0] < 0x40000001)
      {
        v2 &= 0xFFFFFFFF00000000;
        JSC::Wasm::Segment::create(0, v2, v65[0], 1, v65[0], v40, v41, v42, &v67);
        if (v67)
        {
          if (!v65[0])
            goto LABEL_21;
          v39 = 0;
          while (1)
          {
            v38 = *a2;
            if (*a2 >= (unint64_t)a2[2])
              break;
            *a2 = v38 + 1;
            *(_BYTE *)(v67 + v39++ + 20) = *(_BYTE *)(a2[1] + v38);
            if (v39 >= v65[0])
              goto LABEL_21;
          }
          JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v69, v38, a2[6], "can't get ", 11, v39, "th data byte from ", 19, v43, v44, v13, "th Data segment", 16);
        }
        else
        {
          JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v69, *a2, a2[6], "can't allocate enough memory for ", 34, v13, "th Data segment of size ", 25, v43, v44, v65[0]);
        }
        v56 = v69;
        goto LABEL_62;
      }
      goto LABEL_66;
    }
LABEL_64:
    v57 = *a2;
    v58 = a2[6];
    v59 = "th Data segment's data byte length";
    v60 = v13;
    v61 = 35;
LABEL_65:
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v67, v57, v58, "can't get ", 11, v60, v59, v61, v24.n128_f64[0], v25);
LABEL_67:
    *(_QWORD *)this = v67;
    v36 = 1;
    *((_BYTE *)this + 8) = 1;
LABEL_26:
    if (v36 != 16)
      return;
    if (++v13 >= v72)
      goto LABEL_36;
  }
  if (v71 != 2)
  {
    v49 = *a2;
    v50 = a2[6];
    v51 = "unknown ";
    v52 = "th Data segment's flag";
    v53 = 9;
LABEL_57:
    v54 = v13;
    v55 = 23;
    goto LABEL_58;
  }
  v66 = 0;
  if (!WTF::LEBDecoder::decodeUInt32(a2[1], a2[2], a2, &v66))
  {
    v57 = *a2;
    v58 = a2[6];
    v59 = "th Data segment's index";
    v60 = v13;
    v61 = 24;
    goto LABEL_65;
  }
  v45 = *(_DWORD *)(a2[7] + 104) != -1;
  if (v66 >= v45)
  {
    JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v67, *a2, a2[6], v13, v66, v45);
    goto LABEL_67;
  }
  LOBYTE(v69) = 0;
  v70 = 0;
  JSC::Wasm::SectionParser::parseI32InitExpr((uint64_t)&v67, a2, (uint64_t)&v69, "Data init_expr must produce an i32", 35, v24, v25);
  if ((_BYTE)v68)
    goto LABEL_68;
  std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v67, v14, v15, v16, v17, v18, v19, v20);
  v64 = 0;
  if (!WTF::LEBDecoder::decodeUInt32(a2[1], a2[2], a2, &v64))
    goto LABEL_64;
  v26 = v64;
  if (v64 >= 0x40000001)
  {
LABEL_66:
    JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v67, *a2, a2[6], v13, v26);
    goto LABEL_67;
  }
  if (v70)
  {
    v3 = v3 & 0xFFFFFFFF00000000 | 1;
    JSC::Wasm::Segment::create(v69, v3, v64, 0, v64, v46, v47, v48, &v67);
    if (v67)
    {
      if (v64)
      {
        v29 = 0;
        while (1)
        {
          v30 = *a2;
          if (*a2 >= (unint64_t)a2[2])
            break;
          *a2 = v30 + 1;
          *(_BYTE *)(v67 + v29++ + 20) = *(_BYTE *)(a2[1] + v30);
          if (v29 >= v64)
            goto LABEL_21;
        }
LABEL_60:
        JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(v65, v30, a2[6], "can't get ", 11, v29, "th data byte from ", 19, v27, v28, v13, "th Data segment", 16);
LABEL_61:
        v56 = *(_QWORD *)v65;
LABEL_62:
        *(_QWORD *)this = v56;
        v36 = 1;
        *((_BYTE *)this + 8) = 1;
LABEL_24:
        v37 = v67;
        v67 = 0;
        if (v37)
          v68();
        goto LABEL_26;
      }
LABEL_21:
      v31 = a2[7];
      v32 = *(unsigned int *)(v31 + 172);
      if ((_DWORD)v32 == *(_DWORD *)(v31 + 168))
      {
        WTF::Vector<std::unique_ptr<JSC::Wasm::Segment,void (*)(JSC::Wasm::Segment*)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<JSC::Wasm::Segment,void (*)(JSC::Wasm::Segment*)>>(v31 + 160, (unint64_t)&v67);
      }
      else
      {
        v33 = v32 + 1;
        v34 = (_QWORD *)(*(_QWORD *)(v31 + 160) + 16 * v32);
        v35 = v67;
        v67 = 0;
        *v34 = v35;
        v34[1] = v68;
        *(_DWORD *)(v31 + 172) = v33;
      }
      v36 = 16;
      goto LABEL_24;
    }
    v63 = v64;
LABEL_72:
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(v65, *a2, a2[6], "can't allocate enough memory for ", 34, v13, "th Data segment of size ", 25, v27, v28, v63);
    goto LABEL_61;
  }
LABEL_69:
  __break(1u);
LABEL_70:
  JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v67, *a2, a2[6], v13, 0, 0);
LABEL_59:
  *(_QWORD *)this = v67;
  *((_BYTE *)this + 8) = 1;
}

void JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int *v14;
  _BYTE *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  float v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  float v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  int8x16_t *v124;
  int v125;
  const char *v126;
  WTF *v127;
  __int128 v128;
  _BYTE v129[128];
  uint64_t v130;

  v10 = 0;
  v130 = *MEMORY[0x1E0C80C00];
  v11 = a3 + a2;
  do
  {
    v12 = (v11 % 0xA) | 0x30;
    v129[v10-- - 8] = v12;
    v13 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v13);
  if (v10 + 26 >= 27)
    __break(1u);
  if (v10)
  {
    if ((unint64_t)-v10 >> 31)
    {
      __break(0xC471u);
LABEL_67:
      JUMPOUT(0x198E251C8);
    }
    v14 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v10));
    v15 = v14 + 5;
    *v14 = 2;
    v14[1] = -(int)v10;
    *((_QWORD *)v14 + 1) = v14 + 5;
    v14[4] = 4;
    if (v10 == -1)
      *v15 = v12;
    else
      memcpy(v15, &v129[v10 - 7], -v10);
  }
  else
  {
    v14 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v126 = (const char *)off_1E3572250;
  v127 = (WTF *)v129;
  v128 = xmmword_199122F80;
  v129[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v126, "%u", a4);
  (*((void (**)(const char **))v126 + 5))(&v126);
  v23 = v127;
  if (!v127)
  {
    v122 = 0;
    goto LABEL_14;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v127, v128, (uint64_t *)&v122);
  v23 = v127;
  if (v127 != (WTF *)v129)
LABEL_14:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v126 = (const char *)off_1E3572250;
  v127 = (WTF *)v129;
  v128 = xmmword_199122F80;
  v129[0] = 0;
  WTF::StringImpl::utf8ForCharacters("th Data segment has index ", 0x1AuLL, (uint64_t)&v124, v24);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v126, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(uint64_t *, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v123, &v124);
  (*((void (**)(const char **))v126 + 5))(&v126);
  (*((void (**)(const char **))v126 + 5))(&v126);
  v32 = v127;
  if (!v127)
  {
    v121 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v127, v128, (uint64_t *)&v121);
  v32 = v127;
  if (v127 != (WTF *)v129)
LABEL_21:
    WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
  v126 = (const char *)off_1E3572250;
  v127 = (WTF *)v129;
  v128 = xmmword_199122F80;
  v129[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v126, "%u", a5);
  (*((void (**)(const char **))v126 + 5))(&v126);
  v40 = v127;
  if (!v127)
  {
    v120 = 0;
    goto LABEL_26;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v127, v128, (uint64_t *)&v120);
  v40 = v127;
  if (v127 != (WTF *)v129)
LABEL_26:
    WTF::fastFree((unint64_t)v40, v33, v34, v35, v36, v37, v38, v39);
  v126 = (const char *)off_1E3572250;
  v127 = (WTF *)v129;
  v128 = xmmword_199122F80;
  v129[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" which exceeds the number of Memories ", 0x26uLL, (uint64_t)&v124, v41);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v126, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(uint64_t *, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v123, &v124);
  (*((void (**)(const char **))v126 + 5))(&v126);
  (*((void (**)(const char **))v126 + 5))(&v126);
  v49 = v127;
  if (!v127)
  {
    v119 = 0;
    goto LABEL_33;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v127, v128, (uint64_t *)&v119);
  v49 = v127;
  if (v127 != (WTF *)v129)
LABEL_33:
    WTF::fastFree((unint64_t)v49, v42, v43, v44, v45, v46, v47, v48);
  v126 = (const char *)off_1E3572250;
  v127 = (WTF *)v129;
  v128 = xmmword_199122F80;
  v129[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v126, "%u", a6);
  (*((void (**)(const char **))v126 + 5))(&v126);
  v57 = v127;
  if (!v127)
  {
    v118 = 0;
    goto LABEL_38;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v127, v128, (uint64_t *)&v118);
  v57 = v127;
  if (v127 != (WTF *)v129)
LABEL_38:
    WTF::fastFree((unint64_t)v57, v50, v51, v52, v53, v54, v55, v56);
  v126 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v127) = 41;
  v124 = (int8x16_t *)": ";
  v125 = 2;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v123, (uint64_t)&v126, (uint64_t)v14, &v124, (uint64_t)v122, (uint64_t)v121, (uint64_t)v120, (uint64_t)v119, (uint64_t)v118);
  if (!v123)
  {
    __break(0xC471u);
    goto LABEL_67;
  }
  *a1 = v123;
  v65 = v118;
  v118 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = v119;
  v119 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = v120;
  v120 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
    {
      WTF::StringImpl::~StringImpl(v67, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
    }
    else
    {
      *(_DWORD *)v67 -= 2;
    }
  }
  v68 = v121;
  v121 = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
    {
      WTF::StringImpl::~StringImpl(v68, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v68 -= 2;
    }
  }
  v69 = v122;
  v122 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  if (*v14 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, v58, v59, v60, v61, v62, v63, v64);
    WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
  }
  else
  {
    *v14 -= 2;
  }
}

void JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  BOOL v11;
  int *v12;
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  float v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  float v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  int8x16_t *v122;
  int v123;
  const char *v124;
  WTF *v125;
  __int128 v126;
  _BYTE v127[128];
  uint64_t v128;

  v8 = 0;
  v128 = *MEMORY[0x1E0C80C00];
  v9 = a3 + a2;
  do
  {
    v10 = (v9 % 0xA) | 0x30;
    v127[v8-- - 8] = v10;
    v11 = v9 > 9;
    v9 /= 0xAuLL;
  }
  while (v11);
  if (v8 + 26 >= 27)
    __break(1u);
  if (v8)
  {
    if ((unint64_t)-v8 >> 31)
    {
      __break(0xC471u);
LABEL_67:
      JUMPOUT(0x198E256FCLL);
    }
    v12 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v8));
    v13 = v12 + 5;
    *v12 = 2;
    v12[1] = -(int)v8;
    *((_QWORD *)v12 + 1) = v12 + 5;
    v12[4] = 4;
    if (v8 == -1)
      *v13 = v10;
    else
      memcpy(v13, &v127[v8 - 7], -v8);
  }
  else
  {
    v12 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  v124 = (const char *)off_1E3572250;
  v125 = (WTF *)v127;
  v126 = xmmword_199122F80;
  v127[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v124, "%u", a4);
  (*((void (**)(const char **))v124 + 5))(&v124);
  v21 = v125;
  if (!v125)
  {
    v120 = 0;
    goto LABEL_14;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v125, v126, (uint64_t *)&v120);
  v21 = v125;
  if (v125 != (WTF *)v127)
LABEL_14:
    WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
  v124 = (const char *)off_1E3572250;
  v125 = (WTF *)v127;
  v126 = xmmword_199122F80;
  v127[0] = 0;
  WTF::StringImpl::utf8ForCharacters("th Data segment's data byte length is too big ", 0x2EuLL, (uint64_t)&v122, v22);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v124, "StringView", &v122);
  if (v123 != -1)
    ((void (*)(uint64_t *, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v123])(&v121, &v122);
  (*((void (**)(const char **))v124 + 5))(&v124);
  (*((void (**)(const char **))v124 + 5))(&v124);
  v30 = v125;
  if (!v125)
  {
    v119 = 0;
    goto LABEL_21;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v125, v126, (uint64_t *)&v119);
  v30 = v125;
  if (v125 != (WTF *)v127)
LABEL_21:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  v124 = (const char *)off_1E3572250;
  v125 = (WTF *)v127;
  v126 = xmmword_199122F80;
  v127[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v124, "%u", a5);
  (*((void (**)(const char **))v124 + 5))(&v124);
  v38 = v125;
  if (!v125)
  {
    v118 = 0;
    goto LABEL_26;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v125, v126, (uint64_t *)&v118);
  v38 = v125;
  if (v125 != (WTF *)v127)
LABEL_26:
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  v124 = (const char *)off_1E3572250;
  v125 = (WTF *)v127;
  v126 = xmmword_199122F80;
  v127[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" maximum ", 9uLL, (uint64_t)&v122, v39);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v124, "StringView", &v122);
  if (v123 != -1)
    ((void (*)(uint64_t *, int8x16_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v123])(&v121, &v122);
  (*((void (**)(const char **))v124 + 5))(&v124);
  (*((void (**)(const char **))v124 + 5))(&v124);
  v47 = v125;
  if (!v125)
  {
    v117 = 0;
    goto LABEL_33;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v125, v126, (uint64_t *)&v117);
  v47 = v125;
  if (v125 != (WTF *)v127)
LABEL_33:
    WTF::fastFree((unint64_t)v47, v40, v41, v42, v43, v44, v45, v46);
  v124 = (const char *)off_1E3572250;
  v125 = (WTF *)v127;
  v126 = xmmword_199122F80;
  v127[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v124, "%lu", 0x40000000);
  (*((void (**)(const char **))v124 + 5))(&v124);
  v55 = v125;
  if (!v125)
  {
    v116 = 0;
    goto LABEL_38;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v125, v126, (uint64_t *)&v116);
  v55 = v125;
  if (v125 != (WTF *)v127)
LABEL_38:
    WTF::fastFree((unint64_t)v55, v48, v49, v50, v51, v52, v53, v54);
  v124 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v125) = 41;
  v122 = (int8x16_t *)": ";
  v123 = 2;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v121, (uint64_t)&v124, (uint64_t)v12, &v122, (uint64_t)v120, (uint64_t)v119, (uint64_t)v118, (uint64_t)v117, (uint64_t)v116);
  if (!v121)
  {
    __break(0xC471u);
    goto LABEL_67;
  }
  *a1 = v121;
  v63 = v116;
  v116 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
  }
  v64 = v117;
  v117 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
    }
    else
    {
      *(_DWORD *)v64 -= 2;
    }
  }
  v65 = v118;
  v118 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  v66 = v119;
  v119 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
    {
      WTF::StringImpl::~StringImpl(v66, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v66 -= 2;
    }
  }
  v67 = v120;
  v120 = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
    {
      WTF::StringImpl::~StringImpl(v67, v56, v57, v58, v59, v60, v61, v62);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
    else
    {
      *(_DWORD *)v67 -= 2;
    }
  }
  if (*v12 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v56, v57, v58, v59, v60, v61, v62);
    WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
  }
  else
  {
    *v12 -= 2;
  }
}

void JSC::Wasm::SectionParser::parseDataCount(JSC::Wasm::SectionParser *this, uint64_t *a2, double a3, float a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - v7;
  if (v6 <= v7)
    goto LABEL_17;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  if (v8 >= 5)
    v8 = 5;
  v13 = v8 - 1;
  *a2 = v7 + 1;
  v14 = v12 + v7;
  v15 = v7 - v6;
  while (1)
  {
    LODWORD(v16) = *(char *)(v14 + v9);
    v11 |= (v16 & 0x7F) << v10;
    if ((v16 & 0x80000000) == 0)
      break;
    if (v13 == v9)
    {
      v7 += v9 + 1;
      goto LABEL_17;
    }
    v16 = v7 + v9 + 2;
    *a2 = v16;
    ++v9;
    v10 += 7;
    if (!(v15 + v9))
    {
      __break(1u);
      break;
    }
  }
  v7 += v9 + 1;
  if ((_DWORD)v9 == 4 && v16 >= 0x10u)
  {
LABEL_17:
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v18, v7, a2[6], "can't get Data Count section's count", 37, a3, a4);
  }
  else
  {
    if (v11 < 0x186A1)
    {
      v17 = a2[7];
      *(_DWORD *)(v17 + 264) = v11;
      *(_BYTE *)(v17 + 268) = 1;
      *(_BYTE *)this = 0;
      *((_BYTE *)this + 8) = 0;
      return;
    }
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v18, v7, a2[6], "Data Count section's count is too big ", 39, v11, " maximum ", 10, a3, a4, 100000);
  }
  *(_QWORD *)this = v18;
  *((_BYTE *)this + 8) = 1;
}

void JSC::Wasm::SectionParser::parseException(JSC::Wasm::SectionParser *this, uint64_t *a2, double a3, float a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const JSC::Wasm::Type *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  WTF *v43;
  JSC::Wasm::TypeDefinition ***v44;
  JSC::Wasm::TypeDefinition ***i;
  int v46;
  JSC::Wasm::TypeDefinition ***v47;
  int v48;
  JSC::Wasm::TypeDefinition ****v49;
  JSC::Wasm::TypeDefinition ***v50;
  unint64_t CachedUnrolling;
  uint64_t v52;
  char v53;
  const JSC::Wasm::TypeDefinition *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - v7;
  if (v6 <= v7)
    goto LABEL_74;
  v9 = 0;
  v10 = 0;
  LODWORD(v11) = 0;
  v12 = a2[1];
  if (v8 >= 5)
    v8 = 5;
  v13 = v8 - 1;
  *a2 = v7 + 1;
  v14 = v12 + v7;
  v15 = v7 - v6;
  while (1)
  {
    LODWORD(v16) = *(char *)(v14 + v9);
    v11 = ((v16 & 0x7F) << v10) | v11;
    if ((v16 & 0x80000000) == 0)
      break;
    if (v13 == v9)
    {
      v7 += v9 + 1;
      goto LABEL_74;
    }
    v16 = v7 + v9 + 2;
    *a2 = v16;
    ++v9;
    v10 += 7;
    if (!(v15 + v9))
    {
LABEL_8:
      __break(1u);
      break;
    }
  }
  v7 += v9 + 1;
  if ((_DWORD)v9 == 4 && v16 >= 0x10u)
  {
LABEL_74:
    JSC::Wasm::ConstExprGenerator::fail<WTF::ASCIILiteral>(&v68, v7, a2[6], "can't get Exception section's count", 36, a3, a4);
  }
  else if (v11 >= 0x186A1)
  {
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(&v68, v7, a2[6], "Export section's count is too big ", 35, v11, " maximum ", 10, a3, a4, 100000);
  }
  else
  {
    v17 = a2[7];
    if (*(_DWORD *)(v17 + 80))
    {
      __break(0xC471u);
      JUMPOUT(0x198E25C94);
    }
    if (!(_DWORD)v11)
    {
LABEL_61:
      *(_BYTE *)this = 0;
      *((_BYTE *)this + 8) = 0;
      return;
    }
    if (WTF::VectorBufferBase<unsigned long long,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(v17 + 72, v11))
    {
      v23 = 0;
      while (1)
      {
        v7 = *a2;
        v24 = a2[2];
        v25 = *a2 - v24;
        if (*a2 >= v24)
          break;
        v26 = v7 + 1;
        *a2 = v7 + 1;
        v27 = a2[1];
        v28 = *(unsigned __int8 *)(v27 + v7);
        if (*(_BYTE *)(v27 + v7))
        {
          JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral>(&v68, v7 + 1, a2[6], v23, "th Exception has tag type ", 27, v28);
          goto LABEL_64;
        }
        v29 = v24 - v26;
        if (v24 <= v26)
        {
LABEL_60:
          v60 = a2[6];
          v61 = "can't get ";
          v62 = "th Exception's type number";
          v7 = v26;
          v63 = 11;
          v64 = v23;
          v65 = 27;
          goto LABEL_70;
        }
        v9 = 0;
        v30 = 0;
        v31 = 0;
        if (v29 >= 5)
          v29 = 5;
        v32 = v29 - 1;
        *a2 = v7 + 2;
        v33 = v27 + v7 + 1;
        v34 = v25 + 1;
        while (1)
        {
          v35 = *(char *)(v33 + v9);
          v31 |= (v35 & 0x7F) << v30;
          if ((v35 & 0x80000000) == 0)
            break;
          if (v32 == v9)
            goto LABEL_59;
          v16 = v7 + v9 + 3;
          *a2 = v16;
          ++v9;
          v30 += 7;
          if (!(v34 + v9))
            goto LABEL_8;
        }
        if ((_DWORD)v9 == 4 && *(unsigned __int8 *)(v33 + v9) >= 0x10u)
        {
LABEL_59:
          v26 = v7 + v9 + 2;
          goto LABEL_60;
        }
        v36 = a2[7];
        if (v31 >= *(_DWORD *)(v36 + 100))
        {
          JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned int>(&v68, v7 + v9 + 2, a2[6], v23, "th Exception type number is invalid ", 37, v31);
          goto LABEL_64;
        }
        v68 = 0;
        v37 = *(_QWORD *)(*(_QWORD *)(v36 + 88) + 8 * v31);
        v68 = v37;
        if (*(_DWORD *)(v37 + 32) == 4)
        {
          v42 = *(unsigned int **)(v37 + 8);
          v43 = *(WTF **)v42;
          v44 = *(JSC::Wasm::TypeDefinition ****)(*(_QWORD *)(*(_QWORD *)v42 + 8) + 8 * v42[2]);
          for (i = v44; ; i = *v49)
          {
            v46 = *((_DWORD *)i + 8);
            if (v46 == 2)
            {
              if (!*((_BYTE *)i + 16))
                goto LABEL_57;
              goto LABEL_54;
            }
            if (v46 == 1)
            {
              if (!*((_BYTE *)i + 20))
                goto LABEL_57;
              goto LABEL_54;
            }
            if (!v46)
              break;
            v47 = i + 1;
            if (v46 != 5)
              v47 = 0;
            v48 = *((_DWORD *)v47 + 2);
            v49 = (JSC::Wasm::TypeDefinition ****)*v47;
            if (v48)
            {
              v50 = v49[1];
              if (*((_DWORD *)v50 + 8) == 4 && !*v50[1])
                goto LABEL_54;
            }
          }
          if (!*((_BYTE *)i + 24))
            goto LABEL_57;
LABEL_54:
          CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v37, v7, v18, v19, (uint64_t)v20, v21, v28, v22);
          if (v53)
          {
            v37 = CachedUnrolling;
            goto LABEL_28;
          }
          v44 = (JSC::Wasm::TypeDefinition ***)JSC::Wasm::TypeDefinition::replacePlaceholders(v44, v43, v18, v19, v20, v21, v52, v22);
          JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v37, (WTF *)v44, v54, v55, v56, v57, v58, v59);
LABEL_57:
          v37 = (unint64_t)v44;
        }
LABEL_28:
        v38 = *(_DWORD *)(v37 + 32);
        if (v38 == 5)
        {
          v37 = **(_QWORD **)(v37 + 8);
          v38 = *(_DWORD *)(v37 + 32);
        }
        if (v38)
          v39 = 0;
        else
          v39 = v37 + 8;
        if (*(_DWORD *)(v39 + 12))
        {
          JSC::Wasm::SectionParser::fail<unsigned int,WTF::ASCIILiteral,unsigned int>(&v67, *a2, a2[6], v23, "th Exception type cannot have a non-void return type ", 54, v31);
          v66 = v67;
          goto LABEL_66;
        }
        v40 = a2[7];
        v41 = *(unsigned int *)(v40 + 84);
        if ((_DWORD)v41 == *(_DWORD *)(v40 + 80))
        {
          WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long &>(v40 + 72, (unint64_t)&v68);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(v40 + 72) + 8 * v41) = v68;
          *(_DWORD *)(v40 + 84) = v41 + 1;
        }
        if (++v23 == (_DWORD)v11)
          goto LABEL_61;
      }
      v60 = a2[6];
      v61 = "can't get ";
      v62 = "th Exception tag type";
      v63 = 11;
      v64 = v23;
      v65 = 22;
    }
    else
    {
      v7 = *a2;
      v60 = a2[6];
      v61 = "can't allocate enough memory for ";
      v62 = " exceptions";
      v63 = 34;
      v64 = v11;
      v65 = 12;
    }
LABEL_70:
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v68, v7, v60, v61, v63, v64, v62, v65, a3, a4);
  }
LABEL_64:
  v66 = v68;
LABEL_66:
  *(_QWORD *)this = v66;
  *((_BYTE *)this + 8) = 1;
}

void JSC::Wasm::SectionParser::parseCustom(JSC::Wasm::SectionParser *this, uint64_t *a2, double a3, float a4)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  WTF *v38;
  unint64_t v39;
  unint64_t v40;
  WTF *v41;
  const void *v42;
  int v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  uint64_t v47;
  _DWORD *v48;
  _QWORD *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v72;
  unint64_t v73;
  unsigned int v74;
  WTF::StringImpl *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  JSC::Wasm::ModuleInformation *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  WTF *v92;
  WTF *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  WTF *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  char v119;
  JSC::Wasm::ModuleInformation *v120;
  int v121;
  WTF *v122;
  WTF *v123;
  WTF *v124;
  void *v125;
  char v126;
  int v127;
  int v128;
  unsigned int *v129;
  WTF *v130[2];
  WTF *v131[2];
  char v132;
  JSC::Wasm::ModuleInformation **v133;

  v6 = 0.0;
  *(_OWORD *)v130 = 0u;
  *(_OWORD *)v131 = 0u;
  v7 = a2[7];
  v8 = *(unsigned int *)(v7 + 244);
  v9 = (v8 + 1);
  if (*(_DWORD *)(v7 + 240) < v9)
  {
    if (v9 >> 27)
      goto LABEL_103;
    v10 = *(_QWORD *)(v7 + 232);
    WTF::tryFastMalloc((WTF *)(32 * v9), &v122);
    v18 = v122;
    if (!v122)
      goto LABEL_103;
    *(_DWORD *)(v7 + 240) = v9;
    *(_QWORD *)(v7 + 232) = v18;
    if ((_DWORD)v8)
    {
      v19 = 32 * v8;
      v20 = v10 + 16;
      do
      {
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v18 + 1) = 0;
        v21 = *(_QWORD *)(v20 - 16);
        *(_QWORD *)(v20 - 16) = 0;
        *(_QWORD *)v18 = v21;
        LODWORD(v21) = *(_DWORD *)(v20 - 8);
        *(_DWORD *)(v20 - 8) = 0;
        *((_DWORD *)v18 + 2) = v21;
        LODWORD(v21) = *(_DWORD *)(v20 - 4);
        *(_DWORD *)(v20 - 4) = 0;
        *((_DWORD *)v18 + 3) = v21;
        *((_QWORD *)v18 + 2) = 0;
        *((_QWORD *)v18 + 3) = 0;
        v22 = *(_QWORD *)v20;
        *(_QWORD *)v20 = 0;
        *((_QWORD *)v18 + 2) = v22;
        LODWORD(v22) = *(_DWORD *)(v20 + 8);
        *(_DWORD *)(v20 + 8) = 0;
        *((_DWORD *)v18 + 6) = v22;
        LODWORD(v22) = *(_DWORD *)(v20 + 12);
        *(_DWORD *)(v20 + 12) = 0;
        *((_DWORD *)v18 + 7) = v22;
        v23 = *(_QWORD *)v20;
        if (*(_QWORD *)v20)
        {
          *(_QWORD *)v20 = 0;
          *(_DWORD *)(v20 + 8) = 0;
          WTF::fastFree(v23, v11, v12, v13, v14, v15, v16, v17);
        }
        v24 = *(_QWORD *)(v20 - 16);
        if (v24)
        {
          *(_QWORD *)(v20 - 16) = 0;
          *(_DWORD *)(v20 - 8) = 0;
          WTF::fastFree(v24, v11, v12, v13, v14, v15, v16, v17);
        }
        v20 += 32;
        v18 = (WTF *)((char *)v18 + 32);
        v19 -= 32;
      }
      while (v19);
    }
    if (v10)
    {
      if (*(_QWORD *)(v7 + 232) == v10)
      {
        *(_QWORD *)(v7 + 232) = 0;
        *(_DWORD *)(v7 + 240) = 0;
      }
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  v25 = a2[2];
  v26 = *a2;
  v27 = v25 - *a2;
  if (v25 <= *a2)
    goto LABEL_108;
  v28 = 0;
  v29 = 0;
  LODWORD(v30) = 0;
  v31 = a2[1];
  if (v27 >= 5)
    v27 = 5;
  v32 = v27 - 1;
  *a2 = v26 + 1;
  v33 = v31 + v26;
  while (1)
  {
    v34 = *(char *)(v33 + v28);
    v30 = ((v34 & 0x7F) << v29) | v30;
    if ((v34 & 0x80000000) == 0)
      break;
    if (v32 == v28)
    {
      v26 += v28 + 1;
      goto LABEL_108;
    }
    *a2 = v26 + v28++ + 2;
    v29 += 7;
    if (!(v26 - v25 + v28))
      goto LABEL_102;
  }
  v26 += v28 + 1;
  if ((_DWORD)v28 == 4 && *(unsigned __int8 *)(v33 + v28) >= 0x10u)
  {
LABEL_108:
    v111 = a2[6];
    v112 = "can't get ";
    v113 = "th custom section's name length";
    v114 = 11;
    v115 = v9;
    v116 = 32;
    goto LABEL_104;
  }
  if (!(_DWORD)v30)
    goto LABEL_39;
  v35 = v25 >= v30;
  v36 = v25 - v30;
  if (!v35)
    goto LABEL_56;
  if (v30 > 0x186A0 || v26 > v36)
    goto LABEL_56;
  WTF::tryFastMalloc((WTF *)v30, &v122);
  v38 = v122;
  v26 = *a2;
  if (!v122)
    goto LABEL_56;
  LODWORD(v130[1]) = v30;
  v130[0] = v122;
  v39 = a2[2];
  v35 = v39 >= v26;
  v40 = v39 - v26;
  if (!v35 || v40 < v30)
    goto LABEL_102;
  v41 = 0;
  v42 = (const void *)(a2[1] + v26);
  do
  {
    v122 = v41;
    if (WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v42, v30, (unint64_t *)&v122) == -1)break;
    v41 = v122;
  }
  while ((unint64_t)v122 < v30);
  if ((unint64_t)v41 > v30)
  {
LABEL_102:
    __break(1u);
LABEL_103:
    v26 = *a2;
    v111 = a2[6];
    v112 = "can't allocate enough memory for ";
    v113 = "th custom section";
    v114 = 34;
    v115 = v9;
    v116 = 18;
LABEL_104:
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v122, v26, v111, v112, v114, v115, v113, v116, v6, a4);
    goto LABEL_57;
  }
  if (v41 != (WTF *)v30)
  {
    v26 = *a2;
LABEL_56:
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v122, v26, a2[6], "nameLen get ", 13, v9, "th custom section's name of length ", 36, v6, a4, v30);
    goto LABEL_57;
  }
  HIDWORD(v130[1]) = v30;
  memcpy(v38, v42, v30);
  v26 = *a2 + v30;
  *a2 = v26;
  v25 = a2[2];
LABEL_39:
  v43 = v25 - v26;
  v44 = (WTF *)(v25 - v26);
  if ((_DWORD)v25 != (_DWORD)v26)
  {
    WTF::tryFastMalloc(v44, &v122);
    v45 = v122;
    if (v122)
    {
      LODWORD(v131[1]) = v43;
      v131[0] = v122;
      goto LABEL_42;
    }
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v122, *a2, a2[6], "can't allocate enough memory for ", 34, v9, "th custom section's ", 21, v6, a4, v43, " bytes", 7);
LABEL_57:
    *(_QWORD *)this = v122;
    *((_BYTE *)this + 8) = 1;
    goto LABEL_96;
  }
  v45 = 0;
LABEL_42:
  HIDWORD(v131[1]) = v43;
  if (v43)
  {
    v46 = 0;
    while (1)
    {
      v47 = *a2;
      if (*a2 >= (unint64_t)a2[2])
        break;
      *a2 = v47 + 1;
      *((_BYTE *)v46 + (_QWORD)v45) = *(_BYTE *)(a2[1] + v47);
      v46 = (WTF *)((char *)v46 + 1);
      if (v44 == v46)
      {
        LODWORD(v30) = HIDWORD(v130[1]);
        goto LABEL_47;
      }
    }
    JSC::Wasm::SectionParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v122, v47, a2[6], "can't get ", 11, (int)v46, "th data byte from ", 19, v6, a4, v9, "th custom section", 18);
    goto LABEL_57;
  }
LABEL_47:
  v48 = (_DWORD *)WTF::fastMalloc((WTF *)4);
  *v48 = 1701667182;
  v49 = (_QWORD *)WTF::fastMalloc((WTF *)0x19);
  v58 = (unint64_t)v49;
  qmemcpy(v49, "metadata.code.branch_hint", 25);
  if ((_DWORD)v30 == 25)
  {
    if (*(_QWORD *)v130[0] == *v49
      && *((_QWORD *)v130[0] + 1) == v49[1]
      && *((_QWORD *)v130[0] + 2) == v49[2]
      && *((unsigned __int8 *)v130[0] + 24) == (unint64_t)*((unsigned __int8 *)v49 + 24))
    {
      v72 = (unsigned int *)a2[7];
      v122 = 0;
      v123 = v45;
      v124 = v44;
      v73 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
      if (v73 != -1)
      {
        v120 = (JSC::Wasm::ModuleInformation *)&v132;
        v133 = &v120;
        std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v133, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
      }
      v125 = JSC::Wasm::TypeInformation::singleton(void)::theOne;
      v126 = 0;
      v127 = 0;
      v128 = 0;
      do
        v74 = __ldaxr(v72);
      while (__stlxr(v74 + 1, v72));
      v129 = v72;
      JSC::Wasm::BranchHintsSectionParser::parse((JSC::Wasm::BranchHintsSectionParser *)&v122, v54, v56, (uint64_t)&v118, v57);
      if (v119)
      {
        v75 = v118;
        v118 = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
          {
            WTF::StringImpl::~StringImpl(v75, v50, v51, v52, v53, v54, v55, v56);
            WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
          }
          else
          {
            *(_DWORD *)v75 -= 2;
          }
        }
      }
      v76 = v129;
      v129 = 0;
      if (v76)
      {
        do
        {
          v77 = __ldaxr(v76);
          v78 = v77 - 1;
        }
        while (__stlxr(v78, v76));
        if (!v78)
        {
          atomic_store(1u, v76);
          v120 = (JSC::Wasm::ModuleInformation *)v76;
          WTF::ThreadSafeRefCounted<JSC::Wasm::ModuleInformation,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v120);
        }
      }
    }
    goto LABEL_92;
  }
  if ((_DWORD)v30 == 4 && *(_DWORD *)v130[0] == *v48)
  {
    v59 = a2[7];
    v122 = 0;
    v123 = v45;
    v124 = v44;
    v60 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
    if (v60 != -1)
    {
      v120 = (JSC::Wasm::ModuleInformation *)&v132;
      v133 = &v120;
      std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v133, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
    }
    v125 = JSC::Wasm::TypeInformation::singleton(void)::theOne;
    v126 = 0;
    v127 = 0;
    v128 = 0;
    v129 = (unsigned int *)v59;
    JSC::Wasm::NameSectionParser::parse((JSC::Wasm::NameSectionParser *)&v122, (uint64_t)&v120);
    v61 = v121;
    if (v121)
    {
      if (!BYTE6(qword_1ECF4C789))
        goto LABEL_90;
      if (v121 != 1)
      {
        v117 = std::__throw_bad_variant_access[abi:sn180100]();
        JSC::Wasm::StreamingCompiler::StreamingCompiler(v117);
        return;
      }
      WTF::dataLog<char [31],WTF::String,char [2]>((WTF::PrintStream *)&v120);
    }
    else
    {
      v79 = a2[7];
      v80 = v120;
      v120 = 0;
      v81 = *(unsigned int **)(v79 + 248);
      *(_QWORD *)(v79 + 248) = v80;
      if (v81)
      {
        do
        {
          v82 = __ldaxr(v81);
          v83 = v82 - 1;
        }
        while (__stlxr(v83, v81));
        if (!v83)
        {
          atomic_store(1u, v81);
          v133 = (JSC::Wasm::ModuleInformation **)v81;
          WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)&v133, v50, v51, v52, v53, v54, v55, v56);
        }
      }
    }
    v61 = v121;
LABEL_90:
    if (v61 != -1)
      ((void (*)(JSC::Wasm::ModuleInformation ***, JSC::Wasm::ModuleInformation **))off_1E35B6E80[v61])(&v133, &v120);
  }
LABEL_92:
  v84 = a2[7];
  v85 = (_QWORD *)(v84 + 232);
  v86 = *(unsigned int *)(v84 + 244);
  if ((_DWORD)v86 == *(_DWORD *)(v84 + 240))
  {
    v87 = WTF::Vector<JSC::Wasm::CustomSection,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)v130);
    v88 = *(_QWORD *)(v84 + 232) + 32 * *(unsigned int *)(v84 + 244);
    *(_QWORD *)v88 = 0;
    *(_QWORD *)(v88 + 8) = 0;
    v89 = *(_QWORD *)v87;
    *(_QWORD *)v87 = 0;
    *(_QWORD *)v88 = v89;
    LODWORD(v89) = *(_DWORD *)(v87 + 8);
    *(_DWORD *)(v87 + 8) = 0;
    *(_DWORD *)(v88 + 8) = v89;
    LODWORD(v89) = *(_DWORD *)(v87 + 12);
    *(_DWORD *)(v87 + 12) = 0;
    *(_DWORD *)(v88 + 12) = v89;
    *(_QWORD *)(v88 + 16) = 0;
    *(_QWORD *)(v88 + 24) = 0;
    v90 = *(_QWORD *)(v87 + 16);
    *(_QWORD *)(v87 + 16) = 0;
    *(_QWORD *)(v88 + 16) = v90;
    LODWORD(v90) = *(_DWORD *)(v87 + 24);
    *(_DWORD *)(v87 + 24) = 0;
    *(_DWORD *)(v88 + 24) = v90;
    v91 = *(_DWORD *)(v87 + 28);
    *(_DWORD *)(v87 + 28) = 0;
  }
  else
  {
    v88 = *v85 + 32 * v86;
    v92 = v130[0];
    v130[0] = 0;
    *(_QWORD *)v88 = v92;
    LODWORD(v92) = v130[1];
    LODWORD(v130[1]) = 0;
    *(_DWORD *)(v88 + 8) = (_DWORD)v92;
    LODWORD(v92) = HIDWORD(v130[1]);
    HIDWORD(v130[1]) = 0;
    *(_DWORD *)(v88 + 12) = (_DWORD)v92;
    *(_QWORD *)(v88 + 24) = 0;
    v93 = v131[0];
    v131[0] = 0;
    *(_QWORD *)(v88 + 16) = v93;
    LODWORD(v93) = v131[1];
    LODWORD(v131[1]) = 0;
    *(_DWORD *)(v88 + 24) = (_DWORD)v93;
    v91 = HIDWORD(v131[1]);
    HIDWORD(v131[1]) = 0;
  }
  *(_DWORD *)(v88 + 28) = v91;
  ++*(_DWORD *)(v84 + 244);
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
  WTF::fastFree(v58, v50, v51, v52, v53, v54, v55, v56);
  WTF::fastFree((unint64_t)v48, v94, v95, v96, v97, v98, v99, v100);
LABEL_96:
  v101 = v131[0];
  if (v131[0])
  {
    v131[0] = 0;
    LODWORD(v131[1]) = 0;
    WTF::fastFree((unint64_t)v101, v62, v63, v64, v65, v66, v67, v68);
  }
  v102 = v130[0];
  if (v130[0])
  {
    v130[0] = 0;
    LODWORD(v130[1]) = 0;
    WTF::fastFree((unint64_t)v102, v62, v63, v64, v65, v66, v67, v68);
  }
}

uint64_t JSC::Wasm::StreamingCompiler::StreamingCompiler(uint64_t a1, uint64_t a2, char a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  JSC::Wasm::ModuleInformation *v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E35B6E10;
  *(_QWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 25) = 0;
  v11 = (JSC::Wasm::ModuleInformation *)WTF::fastMalloc((WTF *)0x150);
  v12 = (unsigned int *)JSC::Wasm::ModuleInformation::ModuleInformation(v11);
  *(_QWORD *)(a1 + 48) = v12;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = a1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  CC_SHA1_Init((CC_SHA1_CTX *)(a1 + 136));
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  if ((_QWORD)xmmword_1ECF4C290)
    WTF::dataLog<char [88],char [2]>("Wasm streaming parser created, but we can only dump source in debug builds.", "\n");
  v14 = 0;
  *(_QWORD *)(a1 + 256) = 0;
  v57 = 0;
  v58 = 0;
  if (a4)
  {
    if ((a4 & 8) != 0)
      v27 = (a4 - 112) | 1;
    else
      v27 = a4 & 0xFFFFFFFFFFFFC000;
    if ((v27 & 1) != 0)
      v28 = (_QWORD *)(v27 + 47);
    else
      v28 = (_QWORD *)(*(_QWORD *)v27 + 32);
    v14 = (_QWORD *)v28[2];
    if (!v14)
    {
      v55 = v27;
      while (1)
      {
        v41 = v28;
        v42 = (_QWORD *)v28[3];
        if (!v42)
          break;
        v28[3] = v42[2];
        v14 = (_QWORD *)v42[4];
        v42[3] = 257;
        v42[4] = 0;
        if (v14)
          goto LABEL_27;
      }
      v43 = v28[1];
      v44 = v28[6];
      if (!v43)
      {
        v45 = *(_QWORD **)(v44 + 488);
        *v41 = v44 + 480;
        v41[1] = v45;
        *v45 = v41;
        *(_QWORD *)(v44 + 488) = v41;
      }
      *(_QWORD *)(v44 + 1072) += 1024;
      v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
      JSC::WeakBlock::WeakBlock((uint64_t)v46, v55);
      JSC::Heap::didAllocate((JSC::Heap *)(v41[6] + 192), 0x400uLL, v47, v48, v49, v50, v51, v52);
      v28 = v41;
      v53 = v41 + 4;
      v54 = v41[5];
      if (v54)
        v53 = (_QWORD *)(v54 + 16);
      *v53 = v46;
      v41[5] = v46;
      v46[1] = v54;
      v46[2] = 0;
      v14 = (_QWORD *)v46[4];
      v46[3] = 257;
      v46[4] = 0;
    }
LABEL_27:
    v28[2] = *v14;
    *v14 = a4;
    v14[1] = 0;
    v14[2] = 0;
  }
  v56 = v14;
  WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Weak<JSC::JSCell>>((uint64_t)&v57, (unint64_t)&v56);
  if (v56)
  {
    v56[1] = 3;
    if (!a6)
      goto LABEL_20;
  }
  else if (!a6)
  {
    goto LABEL_20;
  }
  if ((a6 & 8) != 0)
    v15 = (a6 - 112) | 1;
  else
    v15 = a6 & 0xFFFFFFFFFFFFC000;
  if ((v15 & 1) != 0)
    v16 = (_QWORD *)(v15 + 47);
  else
    v16 = (_QWORD *)(*(_QWORD *)v15 + 32);
  v17 = (_QWORD *)v16[2];
  if (!v17)
  {
    while (1)
    {
      v29 = (_QWORD *)v16[3];
      if (!v29)
        break;
      v16[3] = v29[2];
      v17 = (_QWORD *)v29[4];
      v29[3] = 257;
      v29[4] = 0;
      if (v17)
        goto LABEL_16;
    }
    v30 = v16[6];
    if (!v16[1])
    {
      v31 = *(_QWORD **)(v30 + 488);
      *v16 = v30 + 480;
      v16[1] = v31;
      *v31 = v16;
      *(_QWORD *)(v30 + 488) = v16;
    }
    *(_QWORD *)(v30 + 1072) += 1024;
    v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
    JSC::WeakBlock::WeakBlock((uint64_t)v32, v15);
    JSC::Heap::didAllocate((JSC::Heap *)(v16[6] + 192), 0x400uLL, v33, v34, v35, v36, v37, v38);
    v39 = v16 + 4;
    v40 = v16[5];
    if (v40)
      v39 = (_QWORD *)(v40 + 16);
    *v39 = v32;
    v16[5] = v32;
    v32[1] = v40;
    v32[2] = 0;
    v17 = (_QWORD *)v32[4];
    v32[3] = 257;
    v32[4] = 0;
  }
LABEL_16:
  v16[2] = *v17;
  *v17 = a6;
  v17[1] = 0;
  v17[2] = 0;
  v56 = v17;
  v18 = HIDWORD(v58);
  if (HIDWORD(v58) == (_DWORD)v58)
  {
    WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Weak<JSC::JSCell>>((uint64_t)&v57, (unint64_t)&v56);
    if (v56)
      v56[1] = 3;
  }
  else
  {
    *(_QWORD *)(v57 + 8 * HIDWORD(v58)) = v17;
    HIDWORD(v58) = v18 + 1;
  }
LABEL_20:
  *(_QWORD *)(a1 + 40) = JSC::DeferredWorkTimer::addPendingWork(*(_QWORD *)(a2 + 41888), a2, a5, (uint64_t)&v57);
  WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v57, v19, v20, v21, v22, v23, v24, v25);
  return a1;
}

JSC::Wasm::StreamingParser *JSC::Wasm::StreamingParser::StreamingParser(JSC::Wasm::StreamingParser *this, JSC::Wasm::ModuleInformation *a2, JSC::Wasm::StreamingParserClient *a3)
{
  unsigned int v4;

  do
    v4 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v4 + 1, (unsigned int *)a2));
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  CC_SHA1_Init((CC_SHA1_CTX *)((char *)this + 80));
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 48) = 0;
  if ((_QWORD)xmmword_1ECF4C290)
    WTF::dataLog<char [88],char [2]>("Wasm streaming parser created, but we can only dump source in debug builds.", "\n");
  return this;
}

void JSC::Wasm::StreamingCompiler::~StreamingCompiler(JSC::Wasm::StreamingCompiler *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _BYTE *v10;
  JSC::Wasm::ModuleInformation *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::Wasm::ModuleInformation *v32;

  v9 = *((_QWORD *)this + 5);
  if (v9)
  {
    *((_QWORD *)this + 5) = 0;
    v10 = *(_BYTE **)(*((_QWORD *)this + 2) + 41888);
    v11 = (JSC::Wasm::ModuleInformation *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v11 = off_1E35B6EC0;
    v32 = v11;
    JSC::DeferredWorkTimer::scheduleWorkSoon(v10, v9, (uint64_t *)&v32);
    if (v32)
      (*(void (**)(JSC::Wasm::ModuleInformation *))(*(_QWORD *)v32 + 8))(v32);
  }
  v12 = (unsigned int *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v12 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  v17 = *((_QWORD *)this + 9);
  if (v17)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
  }
  v18 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      v32 = (JSC::Wasm::ModuleInformation *)v18;
      WTF::ThreadSafeRefCounted<JSC::Wasm::ModuleInformation,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v32);
    }
  }
  v21 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      v32 = (JSC::Wasm::ModuleInformation *)v21;
      WTF::ThreadSafeRefCounted<JSC::Wasm::ModuleInformation,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v32);
    }
  }
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::Wasm::StreamingCompiler::~StreamingCompiler(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t JSC::Wasm::StreamingCompiler::create@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t result;

  v12 = WTF::fastMalloc((WTF *)0x108);
  result = JSC::Wasm::StreamingCompiler::StreamingCompiler(v12, a1, a2, a3, a4, a5);
  *a6 = result;
  return result;
}

uint64_t JSC::Wasm::StreamingCompiler::didReceiveFunctionData(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  char v8;
  JSC::Wasm::ModuleInformation *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  char v39;
  JSC::Wasm::ModuleInformation **v40;
  JSC::Wasm::ModuleInformation *v41;

  if (!*(_QWORD *)(a1 + 256))
  {
    v4 = WTF::fastMalloc((WTF *)0x1B8);
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(unsigned int **)(a1 + 48);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v38 = v6;
    v8 = *(_BYTE *)(a1 + 24);
    v9 = (JSC::Wasm::ModuleInformation *)WTF::fastMalloc((WTF *)0x10);
    *((_DWORD *)v9 + 2) = 1;
    *(_QWORD *)v9 = off_1E35B5C50;
    v41 = v9;
    JSC::Wasm::LLIntPlan::LLIntPlan(v4, v5, (uint64_t *)&v38, v8, (uint64_t *)&v41);
    v10 = *(unsigned int **)(a1 + 256);
    *(_QWORD *)(a1 + 256) = v4;
    if (v10)
    {
      v11 = v10 + 2;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v10 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    v14 = (unsigned int *)v41;
    v41 = 0;
    if (v14)
    {
      v15 = v14 + 2;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
      }
    }
    v18 = v38;
    v38 = 0;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        v41 = (JSC::Wasm::ModuleInformation *)v18;
        WTF::ThreadSafeRefCounted<JSC::Wasm::ModuleInformation,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v41);
      }
    }
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 256) + 56))
    {
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 132);
      *(_BYTE *)(a1 + 27) = 1;
    }
  }
  if (*(_BYTE *)(a1 + 27))
  {
    v21 = WTF::fastMalloc((WTF *)0x58);
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(unsigned int **)(a1 + 48);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
    v25 = *(_QWORD *)(a1 + 256);
    v26 = (unsigned int *)(v25 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
    v28 = (unsigned int *)(a1 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 + 1, v28));
    v30 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v30 + 8) = 1;
    *(_QWORD *)v30 = &off_1E35B6EE8;
    *(_QWORD *)(v30 + 16) = a1;
    *(_DWORD *)(v21 + 8) = 1;
    *(_WORD *)(v21 + 12) = 0;
    *(_QWORD *)(v21 + 40) = v22;
    *(_BYTE *)(v21 + 14) = 0;
    *(_QWORD *)(v21 + 16) = v23;
    *(_QWORD *)(v21 + 24) = v21 + 40;
    *(_BYTE *)(v21 + 64) = 0;
    *(_QWORD *)(v21 + 48) = v30;
    *(_QWORD *)(v21 + 56) = 0;
    *(_QWORD *)(v21 + 32) = 0x100000001;
    *(_QWORD *)v21 = off_1E35B6E48;
    *(_QWORD *)(v21 + 72) = v25;
    *(_DWORD *)(v21 + 80) = a2;
    *(_BYTE *)(v21 + 84) = 0;
    v31 = atomic_load(&JSC::Wasm::ensureWorklist(void)::initializeWorklist);
    if (v31 != -1)
    {
      v41 = (JSC::Wasm::ModuleInformation *)&v39;
      v40 = &v41;
      std::__call_once(&JSC::Wasm::ensureWorklist(void)::initializeWorklist, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::ensureWorklist(void)::$_0 &&>>);
    }
    v37 = (unsigned int *)v21;
    JSC::Wasm::Worklist::enqueue(JSC::Wasm::globalWorklist, &v37);
    v32 = v37;
    v37 = 0;
    if (v32)
    {
      v34 = v32 + 2;
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, v32 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
      }
    }
  }
  return 1;
}

void JSC::Wasm::StreamingCompiler::didFinishParsing(JSC::Wasm::StreamingCompiler *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  char v6;
  JSC::Wasm::ModuleInformation *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  JSC::Wasm::ModuleInformation *v20;

  if (!*((_QWORD *)this + 32))
  {
    v2 = WTF::fastMalloc((WTF *)0x1B8);
    v3 = *((_QWORD *)this + 2);
    v4 = (unsigned int *)*((_QWORD *)this + 6);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v19 = v4;
    v6 = *((_BYTE *)this + 24);
    v7 = (JSC::Wasm::ModuleInformation *)WTF::fastMalloc((WTF *)0x10);
    *((_DWORD *)v7 + 2) = 1;
    *(_QWORD *)v7 = off_1E35B5C50;
    v20 = v7;
    JSC::Wasm::LLIntPlan::LLIntPlan(v2, v3, (uint64_t *)&v19, v6, (uint64_t *)&v20);
    v8 = (unsigned int *)*((_QWORD *)this + 32);
    *((_QWORD *)this + 32) = v2;
    if (v8)
    {
      v9 = v8 + 2;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v8 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
      }
    }
    v12 = (unsigned int *)v20;
    v20 = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
    v16 = v19;
    v19 = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        v20 = (JSC::Wasm::ModuleInformation *)v16;
        WTF::ThreadSafeRefCounted<JSC::Wasm::ModuleInformation,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v20);
      }
    }
  }
}

JSC::Wasm::Module *JSC::Wasm::StreamingCompiler::didComplete(JSC::Wasm::StreamingCompiler *this)
{
  JSC::Wasm::LLIntPlan *v2;
  JSC::Wasm::Module *result;
  int v4;
  JSC::Wasm::Module *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  int v11;
  _BYTE v12[8];
  int v13;
  JSC::Wasm::Module *v14;
  JSC::Wasm::Module *v15;
  int v16;
  char v17;

  v2 = (JSC::Wasm::LLIntPlan *)*((_QWORD *)this + 32);
  if (*((_QWORD *)v2 + 7))
  {
    WTF::String::isolatedCopy((_DWORD *)v2 + 14, (uint64_t *)&v15);
    result = v15;
    v4 = 1;
  }
  else
  {
    v5 = (JSC::Wasm::Module *)WTF::fastMalloc((WTF *)0x40);
    result = JSC::Wasm::Module::Module(v5, v2);
    v4 = 0;
  }
  v15 = result;
  v16 = v4;
  v6 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (*((_BYTE *)this + 24))
  {
    if (*((_BYTE *)this + 24) != 1)
      goto LABEL_14;
    v7 = *(_BYTE **)(*((_QWORD *)this + 2) + 41888);
    v12[0] = 0;
    v13 = -1;
    ((void (*)(JSC::Wasm::Module **, _BYTE *, JSC::Wasm::Module **))off_1E35B6EA0[v4])(&v14, v12, &v15);
    v13 = v4;
    v8 = WTF::fastMalloc((WTF *)0x18);
    v9 = v8;
    v10 = &off_1E35B6F10;
  }
  else
  {
    v7 = *(_BYTE **)(*((_QWORD *)this + 2) + 41888);
    v12[0] = 0;
    v13 = -1;
    ((void (*)(JSC::Wasm::Module **, _BYTE *, JSC::Wasm::Module **))off_1E35B6EA0[v4])(&v14, v12, &v15);
    v13 = v4;
    v8 = WTF::fastMalloc((WTF *)0x18);
    v9 = v8;
    v10 = &off_1E35B6F38;
  }
  *(_QWORD *)v8 = v10;
  *(_BYTE *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = -1;
  v11 = v13;
  if (v13 != -1)
  {
    ((void (*)(JSC::Wasm::Module **, uint64_t, _BYTE *))off_1E35B6EA0[v13])(&v14, v8 + 8, v12);
    *(_DWORD *)(v9 + 16) = v11;
  }
  v14 = (JSC::Wasm::Module *)v9;
  JSC::DeferredWorkTimer::scheduleWorkSoon(v7, v6, (uint64_t *)&v14);
  result = v14;
  if (v14)
    result = (JSC::Wasm::Module *)(*(uint64_t (**)(JSC::Wasm::Module *))(*(_QWORD *)v14 + 8))(v14);
  if (v13 != -1)
    result = (JSC::Wasm::Module *)((uint64_t (*)(char *, _BYTE *))off_1E35B6E90[v13])(&v17, v12);
LABEL_14:
  if (v16 != -1)
    return (JSC::Wasm::Module *)((uint64_t (*)(_BYTE *, JSC::Wasm::Module **))off_1E35B6E90[v16])(v12, &v15);
  return result;
}

void JSC::Wasm::StreamingCompiler::finalize(JSC::Wasm::StreamingCompiler *this, unint64_t a2, double a3, float a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  JSC::Heap **v14;
  unint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v29;
  int v30;
  JSC::DeferredWorkTimer::TicketData *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t (*v63)(_QWORD *);
  _QWORD *v64;
  WTF::StringImpl *v65;
  _QWORD v66[3];

  if (JSC::Wasm::StreamingParser::finalize((JSC::Wasm::StreamingCompiler *)((char *)this + 56), a3, a4) == 7)
  {
    v12 = (unsigned __int8 *)this + 28;
    if (__ldaxr((unsigned __int8 *)this + 28))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
LABEL_9:
      *((_BYTE *)this + 26) = 1;
      if (*((_BYTE *)this + 25) || *((_DWORD *)this + 8))
      {
LABEL_49:
        v62 = __ldxr(v12);
        if (v62 == 1)
        {
          if (!__stlxr(0, v12))
            return;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 28, 0, v6, v7, v8, v9, v10, v11);
        return;
      }
      v26 = (unsigned __int8 *)*((_QWORD *)this + 32);
      v27 = v26 + 13;
      if (__ldaxr(v26 + 13))
      {
        __clrex();
      }
      else if (!__stxr(1u, v27))
      {
        goto LABEL_43;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v26 + 13));
LABEL_43:
      JSC::Wasm::EntryPlan::complete((JSC::Wasm::EntryPlan *)v26);
      v61 = __ldxr(v27);
      if (v61 == 1)
      {
        if (!__stlxr(0, v27))
          goto LABEL_48;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v26 + 13, 0, v55, v56, v57, v58, v59, v60);
LABEL_48:
      JSC::Wasm::StreamingCompiler::didComplete(this);
      goto LABEL_49;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 28);
    goto LABEL_9;
  }
  v14 = *(JSC::Heap ***)(a2 + 56);
  WTF::String::isolatedCopy((_DWORD *)this + 22, (uint64_t *)&v65);
  v15 = *(_QWORD *)(a2 + 1296);
  if ((v15 & 1) != 0)
  {
    v63 = *(uint64_t (**)(_QWORD *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a2 & 8) != 0)
      v64 = (_QWORD *)(a2 - 16);
    else
      v64 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    v66[0] = *v64;
    v66[1] = a2;
    v66[2] = a2 + 1296;
    v15 = v63(v66);
  }
  v23 = JSC::ErrorInstance::create(v14, v15, &v65, 0, (uint64_t)JSC::defaultSourceAppender, 0, 0, 1);
  v24 = (unsigned __int8 *)this + 28;
  if (__ldaxr((unsigned __int8 *)this + 28))
  {
    __clrex();
  }
  else if (!__stxr(1u, v24))
  {
    goto LABEL_15;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 28);
LABEL_15:
  v29 = *((unsigned __int8 *)this + 25);
  if (!*((_BYTE *)this + 25))
    *((_BYTE *)this + 25) = 1;
  v30 = __ldxr(v24);
  if (v30 == 1)
  {
    if (!__stlxr(0, v24))
    {
      if (!v29)
        goto LABEL_23;
      goto LABEL_36;
    }
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 28, 0, v17, v18, v19, v20, v21, v22);
  if (!v29)
  {
LABEL_23:
    v31 = (JSC::DeferredWorkTimer::TicketData *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    v32 = JSC::DeferredWorkTimer::TicketData::target(v31);
    if ((JSC::DeferredWorkTimer::TicketData::isCancelled(v31) & 1) == 0)
    {
      v40 = *((_QWORD *)v31 + 2);
      if (v40)
      {
        *(_QWORD *)(v40 + 8) = 3;
        *((_QWORD *)v31 + 2) = 0;
      }
      v41 = (unsigned int *)*((_QWORD *)v31 + 1);
      *((_QWORD *)v31 + 1) = 0;
      if (v41)
      {
        v42 = v41 + 2;
        v43 = *v41;
        if ((_DWORD)v43)
        {
          v44 = 8 * v43;
          do
          {
            if (*(_QWORD *)v42)
            {
              *(_QWORD *)(*(_QWORD *)v42 + 8) = 3;
              *(_QWORD *)v42 = 0;
            }
            v42 += 2;
            v44 -= 8;
          }
          while (v44);
        }
        WTF::fastFree((unint64_t)v41, v33, v34, v35, v36, v37, v38, v39);
      }
      v45 = *((_QWORD *)v31 + 3);
      if (v45)
      {
        *(_QWORD *)(v45 + 8) = 3;
        *((_QWORD *)v31 + 3) = 0;
      }
    }
    JSC::JSPromise::reject(v32, (uint64_t *)a2, v23, v35, v36, v37, v38, v39);
  }
LABEL_36:
  v46 = v65;
  v65 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
}

uint64_t JSC::Wasm::StreamingParser::finalize(JSC::Wasm::StreamingParser *this, double a2, float a3)
{
  int v4;
  double v5;
  float v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  char v38;

  JSC::Wasm::StreamingParser::addBytes((uint64_t)this, 0, 0, 1, a2, a3);
  result = *((unsigned __int8 *)this + 193);
  if ((_DWORD)result != 1)
  {
    if ((result - 2) >= 5 && (_DWORD)result != 0)
      return result;
    goto LABEL_7;
  }
  v9 = *(_QWORD *)this;
  v10 = *(unsigned int *)(*(_QWORD *)this + 132);
  if ((_DWORD)v10 != *((_DWORD *)this + 46))
  {
    result = JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>((uint64_t)this, "Number of functions parsed (", 29, *((_DWORD *)this + 45), ") does not match the number of declared functions (", 52, v10, v4, v5, v6, ")", 2);
    goto LABEL_8;
  }
  if (*(_BYTE *)(v9 + 268))
  {
    v11 = *(unsigned int *)(v9 + 172);
    v12 = *(_DWORD *)(v9 + 264);
    if ((_DWORD)v11 != v12)
    {
      result = JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,unsigned int>((uint64_t)this, "Data section's count ", 22, v11, " is different from Data Count section's count ", 47, v12, v5, v6);
      goto LABEL_8;
    }
  }
  if (*((_DWORD *)this + 7))
  {
LABEL_7:
    result = JSC::Wasm::StreamingParser::failOnState((uint64_t)this, v5, v6);
LABEL_8:
    *((_BYTE *)this + 193) = result;
    return result;
  }
  if (HIBYTE(word_1ECF4C720))
  {
    v13 = *(_QWORD *)(v9 + 248);
    WTF::SHA1::computeHexDigest((CC_SHA1_CTX *)((char *)this + 80), (uint64_t *)&v36);
    v14 = v36;
    v36 = 0;
    v37 = v14;
    v38 = 1;
    JSC::Wasm::NameSection::setHash(v13, &v37, v15, v16, v17, v18, v19, v20);
    std::optional<WTF::CString>::~optional((uint64_t)&v37, v21, v22, v23, v24, v25, v26, v27);
    v35 = v36;
    v36 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
        WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
      else
        --*(_DWORD *)v35;
    }
  }
  *((_BYTE *)this + 193) = 7;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  return *((unsigned __int8 *)this + 193);
}

void JSC::Wasm::StreamingCompiler::fail(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v11;
  int v13;
  int v14;
  JSC::DeferredWorkTimer::TicketData *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v11 = (unsigned __int8 *)(a1 + 28);
  if (__ldaxr((unsigned __int8 *)(a1 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 28);
LABEL_5:
  v13 = *(unsigned __int8 *)(a1 + 25);
  if (!*(_BYTE *)(a1 + 25))
    *(_BYTE *)(a1 + 25) = 1;
  v14 = __ldxr(v11);
  if (v14 != 1)
  {
    __clrex();
LABEL_12:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
    if (v13)
      return;
    goto LABEL_13;
  }
  if (__stlxr(0, v11))
    goto LABEL_12;
  if (v13)
    return;
LABEL_13:
  v15 = *(JSC::DeferredWorkTimer::TicketData **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  v16 = JSC::DeferredWorkTimer::TicketData::target(v15);
  if ((JSC::DeferredWorkTimer::TicketData::isCancelled(v15) & 1) == 0)
  {
    v24 = *((_QWORD *)v15 + 2);
    if (v24)
    {
      *(_QWORD *)(v24 + 8) = 3;
      *((_QWORD *)v15 + 2) = 0;
    }
    v25 = (unsigned int *)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = 0;
    if (v25)
    {
      v26 = v25 + 2;
      v27 = *v25;
      if ((_DWORD)v27)
      {
        v28 = 8 * v27;
        do
        {
          if (*(_QWORD *)v26)
          {
            *(_QWORD *)(*(_QWORD *)v26 + 8) = 3;
            *(_QWORD *)v26 = 0;
          }
          v26 += 2;
          v28 -= 8;
        }
        while (v28);
      }
      WTF::fastFree((unint64_t)v25, v17, v18, v19, v20, v21, v22, v23);
    }
    v29 = *((_QWORD *)v15 + 3);
    if (v29)
    {
      *(_QWORD *)(v29 + 8) = 3;
      *((_QWORD *)v15 + 3) = 0;
    }
  }
  JSC::JSPromise::reject(v16, a2, a3, v19, v20, v21, v22, v23);
}

void JSC::Wasm::StreamingCompiler::cancel(JSC::Wasm::StreamingCompiler *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v11;
  int v12;
  JSC::DeferredWorkTimer::TicketData *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = (unsigned __int8 *)this + 28;
  if (__ldaxr((unsigned __int8 *)this + 28))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 28);
LABEL_5:
  v11 = *((unsigned __int8 *)this + 25);
  if (!*((_BYTE *)this + 25))
    *((_BYTE *)this + 25) = 1;
  v12 = __ldxr(v9);
  if (v12 != 1)
  {
    __clrex();
LABEL_12:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
    if (v11)
      return;
    goto LABEL_13;
  }
  if (__stlxr(0, v9))
    goto LABEL_12;
  if (v11)
    return;
LABEL_13:
  v13 = (JSC::DeferredWorkTimer::TicketData *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if ((JSC::DeferredWorkTimer::TicketData::isCancelled(v13) & 1) == 0)
  {
    v21 = *((_QWORD *)v13 + 2);
    if (v21)
    {
      *(_QWORD *)(v21 + 8) = 3;
      *((_QWORD *)v13 + 2) = 0;
    }
    v22 = (unsigned int *)*((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = 0;
    if (v22)
    {
      v23 = v22 + 2;
      v24 = *v22;
      if ((_DWORD)v24)
      {
        v25 = 8 * v24;
        do
        {
          if (*(_QWORD *)v23)
          {
            *(_QWORD *)(*(_QWORD *)v23 + 8) = 3;
            *(_QWORD *)v23 = 0;
          }
          v23 += 2;
          v25 -= 8;
        }
        while (v25);
      }
      WTF::fastFree((unint64_t)v22, v14, v15, v16, v17, v18, v19, v20);
    }
    v26 = *((_QWORD *)v13 + 3);
    if (v26)
    {
      *(_QWORD *)(v26 + 8) = 3;
      *((_QWORD *)v13 + 3) = 0;
    }
  }
}

uint64_t JSC::Wasm::StreamingParser::parseModuleHeader(uint64_t a1, uint64_t a2, unsigned int a3, double a4, float a5)
{
  int v5;

  if (!a3)
    goto LABEL_17;
  if (*(_BYTE *)a2)
    goto LABEL_11;
  if (a3 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x198E277BCLL);
  }
  if (*(_BYTE *)(a2 + 1) != 97)
    goto LABEL_11;
  if (a3 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x198E277C4);
  }
  if (*(_BYTE *)(a2 + 2) != 115)
    goto LABEL_11;
  if (a3 <= 3)
  {
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x198E277B4);
  }
  if (*(_BYTE *)(a2 + 3) != 109)
  {
LABEL_11:
    JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral>(a1, "module doesn't start with '\\0asm'", 34, a4, a5);
    return 8;
  }
  v5 = *(_DWORD *)(a2 + 4);
  if (v5 == 1)
    return 1;
  JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(a1, v5, a4, a5);
  return 8;
}

void JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral>(uint64_t a1, char *__src, uint64_t a3, double a4, float a5)
{
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  WTF *v58;
  __int128 v59;
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 56);
  v57 = (const char *)off_1E3572250;
  v58 = (WTF *)v60;
  v59 = xmmword_199122F80;
  v60[0] = 0;
  if (__src)
  {
    v7 = a3 - 1;
    if (!a3)
      v7 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v7, (uint64_t)&v55, a5);
  }
  else
  {
    v8 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = 0;
    *(_BYTE *)(v8 + 16) = 0;
    v55 = (const char *)v8;
    LODWORD(v56) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v57, "StringView", &v55);
  if ((_DWORD)v56 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v56])(&v54, &v55);
  (*((void (**)(const char **))v57 + 5))(&v57);
  (*((void (**)(const char **))v57 + 5))(&v57);
  v16 = v58;
  if (!v58)
  {
    v52 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v58, v59, (uint64_t *)&v52);
  v16 = v58;
  if (v58 != (WTF *)v60)
LABEL_12:
    WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
  v57 = "WebAssembly.Module doesn't parse at byte ";
  v58 = (WTF *)42;
  v55 = ": ";
  v56 = 3;
  v54 = v6;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String>((uint64_t)&v57, &v54, (uint64_t)&v55, (uint64_t *)&v52, (int **)&v53);
  v24 = v53;
  if (v53)
  {
    v53 = 0;
    v25 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v24;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        v35 = v53;
        v53 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
          {
            WTF::StringImpl::~StringImpl(v35, v17, v18, v19, v20, v21, v22, v23);
            WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
          }
          else
          {
            *(_DWORD *)v35 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v25 -= 2;
        v53 = 0;
      }
    }
    v26 = v52;
    v52 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(uint64_t a1, int a2, double a3, float a4)
{
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  float v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  unint64_t v111;
  const char *v112;
  int v113;
  const char *v114;
  WTF *v115;
  __int128 v116;
  _BYTE v117[128];
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 56);
  v114 = (const char *)off_1E3572250;
  v115 = (WTF *)v117;
  v116 = xmmword_199122F80;
  v117[0] = 0;
  WTF::StringImpl::utf8ForCharacters("unexpected version number ", 0x1AuLL, (uint64_t)&v112, a4);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v114, "StringView", &v112);
  if (v113 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v113])(&v111, &v112);
  (*((void (**)(const char **))v114 + 5))(&v114);
  (*((void (**)(const char **))v114 + 5))(&v114);
  v14 = v115;
  if (!v115)
  {
    v105 = 0;
    goto LABEL_7;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v115, v116, (uint64_t *)&v105);
  v14 = v115;
  if (v115 != (WTF *)v117)
LABEL_7:
    WTF::fastFree((unint64_t)v14, v7, v8, v9, v10, v11, v12, v13);
  v114 = (const char *)off_1E3572250;
  v115 = (WTF *)v117;
  v116 = xmmword_199122F80;
  v117[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v114, "%u", a2);
  (*((void (**)(const char **))v114 + 5))(&v114);
  v22 = v115;
  if (!v115)
  {
    v104 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v115, v116, (uint64_t *)&v104);
  v22 = v115;
  if (v115 != (WTF *)v117)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  v114 = (const char *)off_1E3572250;
  v115 = (WTF *)v117;
  v116 = xmmword_199122F80;
  v117[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" expected ", 0xAuLL, (uint64_t)&v112, v23);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v114, "StringView", &v112);
  if (v113 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v113])(&v111, &v112);
  (*((void (**)(const char **))v114 + 5))(&v114);
  (*((void (**)(const char **))v114 + 5))(&v114);
  v31 = v115;
  if (!v115)
  {
    v103 = 0;
    goto LABEL_19;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v115, v116, (uint64_t *)&v103);
  v31 = v115;
  if (v115 != (WTF *)v117)
LABEL_19:
    WTF::fastFree((unint64_t)v31, v24, v25, v26, v27, v28, v29, v30);
  v114 = (const char *)off_1E3572250;
  v115 = (WTF *)v117;
  v116 = xmmword_199122F80;
  v117[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v114, "%u", 1);
  (*((void (**)(const char **))v114 + 5))(&v114);
  v39 = v115;
  if (!v115)
  {
    v102 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v115, v116, (uint64_t *)&v102);
  v39 = v115;
  if (v115 != (WTF *)v117)
LABEL_24:
    WTF::fastFree((unint64_t)v39, v32, v33, v34, v35, v36, v37, v38);
  v114 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v115) = 41;
  v111 = v6;
  v112 = ": ";
  v113 = 2;
  v109 = v104;
  v110 = v105;
  v107 = v102;
  v108 = v103;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v114, &v111, (uint64_t)&v112, (uint64_t *)&v110, (uint64_t *)&v109, (uint64_t *)&v108, (uint64_t *)&v107, (int **)&v106);
  v47 = v106;
  if (v106)
  {
    v106 = 0;
    v48 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v47;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, v40, v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
        v61 = v106;
        v106 = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
          {
            WTF::StringImpl::~StringImpl(v61, v40, v41, v42, v43, v44, v45, v46);
            WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
          }
          else
          {
            *(_DWORD *)v61 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v48 -= 2;
        v106 = 0;
      }
    }
    v49 = v102;
    v102 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v40, v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    v50 = v103;
    v103 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v40, v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
      }
      else
      {
        *(_DWORD *)v50 -= 2;
      }
    }
    v51 = v104;
    v104 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v40, v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
    v52 = v105;
    v105 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::~StringImpl(v52, v40, v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
      }
      else
      {
        *(_DWORD *)v52 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::Wasm::StreamingParser::parseSectionID(uint64_t a1, _BYTE *a2, int a3, double a4, float a5)
{
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  double v10;
  float v11;
  char *v13;
  uint64_t v14;

  if (a3)
  {
    v6 = (char)*a2;
    if (v6 < 0)
    {
      v13 = "can't get section byte";
      v14 = 23;
      goto LABEL_11;
    }
    if (*a2)
    {
      v7 = v6 & ~(v6 >> 31);
      if (v7 < 0xE)
        goto LABEL_5;
      v13 = "invalid section";
      v14 = 16;
LABEL_11:
      JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral>(a1, v13, v14, a4, a5);
      return 8;
    }
  }
  v7 = 14;
LABEL_5:
  v8 = *(unsigned __int8 *)(a1 + 195);
  v9 = JSC::Wasm::orderingNumber(*(unsigned __int8 *)(a1 + 195));
  if (v9 >= JSC::Wasm::orderingNumber(v7))
  {
    JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,JSC::Wasm::Section,WTF::ASCIILiteral,JSC::Wasm::Section>(a1, v8, v7, v10, v11);
    return 8;
  }
  *(_BYTE *)(a1 + 194) = v7;
  if (v7 <= 0xD)
    *(_BYTE *)(a1 + 195) = v7;
  return 2;
}

void JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,JSC::Wasm::Section,WTF::ASCIILiteral,JSC::Wasm::Section>(uint64_t a1, int a2, int a3, double a4, float a5)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  float v17;
  __int128 v18;
  const char *v19;
  const char *v20;
  unsigned int v21;
  const char *v22;
  const char *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  int8x16_t *v32;
  unsigned int v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  BOOL v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  unint64_t v52;
  _WORD *v53;
  unsigned int v55;
  _DWORD *v56;
  char *v57;
  int8x16_t *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  uint64_t v65;
  __int128 v66;
  char *v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  char *v71;
  char *v72;
  char *v73;
  __int16 v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int8x16_t *__src;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  int v106;
  int v107;
  char v108;
  void (**v109)(WTF::StringPrintStream *__hidden);
  WTF *v110;
  __int128 v111;
  _BYTE v112[128];
  uint64_t v113;
  int8x16x2_t v114;
  int8x16x2_t v115;
  int8x16x2_t v116;

  v113 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 56);
  v109 = off_1E3572250;
  v110 = (WTF *)v112;
  v111 = xmmword_199122F80;
  v112[0] = 0;
  WTF::StringImpl::utf8ForCharacters("invalid section order, ", 0x17uLL, (uint64_t)&v106, a5);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v109, "StringView", &v106);
  if (v107 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v107])(&v108, &v106);
  v109[5]((WTF::StringPrintStream *)&v109);
  v109[5]((WTF::StringPrintStream *)&v109);
  v16 = v110;
  if (!v110)
  {
    v105 = 0;
    goto LABEL_7;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v110, v111, (uint64_t *)&v105);
  v16 = v110;
  if (v110 != (WTF *)v112)
LABEL_7:
    WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
  v18 = xmmword_199122F80;
  switch(a2)
  {
    case 1:
      v19 = "Type";
      goto LABEL_21;
    case 2:
      v20 = "Import";
      goto LABEL_26;
    case 3:
      __src = (int8x16_t *)"Function";
      v21 = 8;
      break;
    case 4:
      v22 = "Table";
      goto LABEL_17;
    case 5:
      v20 = "Memory";
      goto LABEL_26;
    case 6:
      v20 = "Global";
      goto LABEL_26;
    case 7:
      v20 = "Export";
      goto LABEL_26;
    case 8:
      v22 = "Start";
LABEL_17:
      __src = (int8x16_t *)v22;
      v21 = 5;
      break;
    case 9:
      __src = (int8x16_t *)"Element";
      v21 = 7;
      break;
    case 10:
      v19 = "Code";
      goto LABEL_21;
    case 11:
      v19 = "Data";
LABEL_21:
      __src = (int8x16_t *)v19;
      v21 = 4;
      break;
    case 12:
      v23 = "DataCount";
      goto LABEL_24;
    case 13:
      v23 = "Exception";
LABEL_24:
      __src = (int8x16_t *)v23;
      v21 = 9;
      break;
    case 14:
      v20 = "Custom";
LABEL_26:
      __src = (int8x16_t *)v20;
      v21 = 6;
      break;
    default:
      __src = (int8x16_t *)"Begin";
      v21 = 5;
      v18 = xmmword_199122F80;
      break;
  }
  v109 = off_1E3572250;
  v110 = (WTF *)v112;
  v111 = v18;
  v112[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" followed by ", 0xDuLL, (uint64_t)&v106, v17);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v109, "StringView", &v106);
  if (v107 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v107])(&v108, &v106);
  v109[5]((WTF::StringPrintStream *)&v109);
  v109[5]((WTF::StringPrintStream *)&v109);
  v31 = v110;
  if (!v110)
  {
    v104 = 0;
    goto LABEL_33;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v110, v111, (uint64_t *)&v104);
  v31 = v110;
  if (v110 != (WTF *)v112)
LABEL_33:
    WTF::fastFree((unint64_t)v31, v24, v25, v26, v27, v28, v29, v30);
  switch(a3)
  {
    case 1:
      v32 = (int8x16_t *)"Type";
      goto LABEL_46;
    case 2:
      v32 = (int8x16_t *)"Import";
      goto LABEL_51;
    case 3:
      v32 = (int8x16_t *)"Function";
      v33 = 8;
      break;
    case 4:
      v32 = (int8x16_t *)"Table";
      goto LABEL_54;
    case 5:
      v32 = (int8x16_t *)"Memory";
      goto LABEL_51;
    case 6:
      v32 = (int8x16_t *)"Global";
      goto LABEL_51;
    case 7:
      v32 = (int8x16_t *)"Export";
      goto LABEL_51;
    case 8:
      v32 = (int8x16_t *)"Start";
      goto LABEL_54;
    case 9:
      v32 = (int8x16_t *)"Element";
      v33 = 7;
      break;
    case 10:
      v32 = (int8x16_t *)"Code";
      goto LABEL_46;
    case 11:
      v32 = (int8x16_t *)"Data";
LABEL_46:
      v33 = 4;
      break;
    case 12:
      v32 = (int8x16_t *)"DataCount";
      goto LABEL_49;
    case 13:
      v32 = (int8x16_t *)"Exception";
LABEL_49:
      v33 = 9;
      break;
    case 14:
      v32 = (int8x16_t *)"Custom";
LABEL_51:
      v33 = 6;
      break;
    default:
      v32 = (int8x16_t *)"Begin";
LABEL_54:
      v33 = 5;
      break;
  }
  v34 = 0;
  v35 = v104;
  v36 = v105;
  v37 = v8;
  do
  {
    ++v34;
    v38 = v37 > 9;
    v37 /= 0xAuLL;
  }
  while (v38);
  if (v105)
  {
    v39 = *((_DWORD *)v105 + 1);
    if (v104)
      goto LABEL_59;
LABEL_128:
    v40 = 0;
    goto LABEL_60;
  }
  v39 = 0;
  if (!v104)
    goto LABEL_128;
LABEL_59:
  v40 = *((_DWORD *)v104 + 1);
  if (v40 < 0)
    goto LABEL_131;
LABEL_60:
  v41 = __OFADD__(v40, v33);
  v42 = v40 + v33;
  if (v41)
    goto LABEL_131;
  v41 = __OFADD__(v21, v42);
  v43 = v21 + v42;
  v44 = v41;
  if (v39 < 0)
    goto LABEL_131;
  if (v44)
    goto LABEL_131;
  v41 = __OFADD__(v39, v43);
  v45 = v39 + v43;
  if (v41)
    goto LABEL_131;
  v41 = __OFADD__(v45, 2);
  v46 = v45 + 2;
  v47 = v41;
  if (v34 < 0)
    goto LABEL_131;
  if (v47)
    goto LABEL_131;
  v41 = __OFADD__(v34, v46);
  v48 = v34 + v46;
  if (v41)
    goto LABEL_131;
  v49 = (v48 + 41);
  if (__OFADD__(v48, 41))
    goto LABEL_131;
  if (v105 && (*((_BYTE *)v105 + 16) & 4) == 0 || v104 && (*((_BYTE *)v104 + 16) & 4) == 0)
  {
    if (v48 != -41)
    {
      if (v49 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v49 + 20), &v109);
        v50 = (int *)v109;
        if (v109)
        {
          v51 = 0;
          *(_DWORD *)v109 = 2;
          v50[1] = v49;
          *(_OWORD *)(v50 + 5) = xmmword_19915A580;
          *((_QWORD *)v50 + 1) = v50 + 5;
          v50[4] = 0;
          *(_OWORD *)(v50 + 9) = xmmword_19915A590;
          *(_OWORD *)(v50 + 13) = xmmword_19915A5A0;
          *(_OWORD *)(v50 + 17) = xmmword_19915A5B0;
          *((_WORD *)v50 + 50) = 32;
          v52 = v8;
          *(_OWORD *)(v50 + 21) = xmmword_19915A5C0;
          do
          {
            v112[v51-- - 8] = (v52 % 0xA) | 0x30;
            v38 = v52 > 9;
            v52 /= 0xAuLL;
          }
          while (v38);
          if (v51 + 26 <= 25)
          {
            v53 = (_WORD *)v50 + 51;
            do
              *v53++ = v112[v51 - 7];
            while (!__CFADD__(v51++, 1));
          }
          v55 = 0;
          do
          {
            ++v55;
            v38 = v8 > 9;
            v8 /= 0xAuLL;
          }
          while (v38);
          v56 = (int *)((char *)v50 + 2 * v55 + 102);
          *v56 = 2097210;
          v57 = (char *)(v56 + 1);
          if (v36)
          {
            v58 = (int8x16_t *)*((_QWORD *)v36 + 1);
            v59 = *((unsigned int *)v36 + 1);
            if ((*((_BYTE *)v36 + 16) & 4) != 0)
            {
              v60 = &v57[2 * v59];
              if (v59 >= 0x40)
              {
                v61 = &v57[2 * (v59 & 0xFFFFFFC0)];
                v66 = 0uLL;
                v67 = v57;
                do
                {
                  v114.val[0] = *v58;
                  v68 = v58[1];
                  v115.val[0] = v58[2];
                  v69 = v58[3];
                  v58 += 4;
                  v70 = v69;
                  v115.val[1] = 0uLL;
                  v116.val[0] = v68;
                  v114.val[1] = 0uLL;
                  v71 = v67;
                  vst2q_s8(v71, v114);
                  v71 += 32;
                  v116.val[1] = 0uLL;
                  vst2q_s8(v71, v116);
                  v72 = v67 + 64;
                  vst2q_s8(v72, v115);
                  v73 = v67 + 96;
                  vst2q_s8(v73, *(int8x16x2_t *)(&v66 - 1));
                  v67 += 128;
                }
                while (v67 != v61);
              }
              else
              {
                v61 = v57;
              }
              while (v61 != v60)
              {
                v74 = v58->u8[0];
                v58 = (int8x16_t *)((char *)v58 + 1);
                *(_WORD *)v61 = v74;
                v61 += 2;
              }
            }
            else if ((_DWORD)v59 == 1)
            {
              *(_WORD *)v57 = v58->i16[0];
            }
            else if ((_DWORD)v59)
            {
              memcpy(v57, v58, 2 * v59);
            }
            v75 = *((unsigned int *)v36 + 1);
          }
          else
          {
            v75 = 0;
          }
          WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v57[2 * v75], __src, v21, (uint64_t)v35, v32, v33);
          goto LABEL_113;
        }
      }
LABEL_131:
      __break(0xC471u);
      JUMPOUT(0x198E286E4);
    }
LABEL_129:
    v50 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_113;
  }
  if (v48 == -41)
    goto LABEL_129;
  if ((v49 & 0x80000000) != 0)
    goto LABEL_131;
  WTF::tryFastCompactMalloc((WTF *)(v49 + 20), &v109);
  v50 = (int *)v109;
  if (!v109)
    goto LABEL_131;
  v62 = 0;
  *(_OWORD *)((char *)v109 + 20) = *(_OWORD *)"WebAssembly.Module doesn't parse at byte ";
  *v50 = 2;
  v50[1] = v49;
  *((_QWORD *)v50 + 1) = v50 + 5;
  v50[4] = 4;
  qmemcpy(v50 + 9, "le doesn't parse at byte ", 25);
  v63 = v8;
  do
  {
    v112[v62-- - 8] = (v63 % 0xA) | 0x30;
    v38 = v63 > 9;
    v63 /= 0xAuLL;
  }
  while (v38);
  if (v62 + 26 <= 25)
    memcpy((char *)v50 + 61, &v112[v62 - 7], -v62);
  v64 = 0;
  do
  {
    ++v64;
    v38 = v8 > 9;
    v8 /= 0xAuLL;
  }
  while (v38);
  v65 = (uint64_t)v50 + v64 + 61;
  *(_WORD *)v65 = 8250;
  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)(v65 + 2), (uint64_t)v36, __src->i8, v21, (uint64_t)v35, v32->i8, v33);
LABEL_113:
  v76 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v50;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, (WTF::AtomStringImpl *)v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
    }
    else
    {
      *(_DWORD *)v76 -= 2;
    }
  }
  v77 = v104;
  v104 = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
    {
      WTF::StringImpl::~StringImpl(v77, (WTF::AtomStringImpl *)v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
    }
    else
    {
      *(_DWORD *)v77 -= 2;
    }
  }
  v78 = v105;
  v105 = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, (WTF::AtomStringImpl *)v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
}

uint64_t JSC::Wasm::StreamingParser::parseCodeSectionSize(JSC::Wasm::StreamingParser *this, int a2, double a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *((unsigned int *)this + 44);
  v5 = *(_QWORD *)this;
  *(_DWORD *)(*(_QWORD *)this + 228) = v4;
  *((_DWORD *)this + 45) = a2;
  *((_DWORD *)this + 46) = 0;
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 9) = v6;
  if (a2 == -1)
  {
    JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,unsigned int>((uint64_t)this, a3, a4);
    return 8;
  }
  v7 = *(unsigned int *)(v5 + 132);
  if ((_DWORD)v7 != a2)
  {
    JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>((uint64_t)this, a2, v7, a3, a4);
    return 8;
  }
  if (a2)
    return 5;
  if (v6 + v4 != *((_QWORD *)this + 8))
  {
    JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,JSC::Wasm::Section,WTF::ASCIILiteral>((uint64_t)this, "parsing ended before the end of ", 33, *((unsigned __int8 *)this + 194), " section", 9, a3, a4);
    return 8;
  }
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), *((unsigned __int8 *)this + 194)))
  {
    return 1;
  }
  else
  {
    return 8;
  }
}

void JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,unsigned int>(uint64_t a1, double a2, float a3)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  WTF *v72;
  __int128 v73;
  _BYTE v74[128];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 56);
  v71 = (const char *)off_1E3572250;
  v72 = (WTF *)v74;
  v73 = xmmword_199122F80;
  v74[0] = 0;
  WTF::StringImpl::utf8ForCharacters("Code section's count is too big ", 0x20uLL, (uint64_t)&v69, a3);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v71, "StringView", &v69);
  if ((_DWORD)v70 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v70])(&v68, &v69);
  (*((void (**)(const char **))v71 + 5))(&v71);
  (*((void (**)(const char **))v71 + 5))(&v71);
  v12 = v72;
  if (!v72)
  {
    v66 = 0;
    goto LABEL_7;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v72, v73, (uint64_t *)&v66);
  v12 = v72;
  if (v72 != (WTF *)v74)
LABEL_7:
    WTF::fastFree((unint64_t)v12, v5, v6, v7, v8, v9, v10, v11);
  v71 = (const char *)off_1E3572250;
  v72 = (WTF *)v74;
  v73 = xmmword_199122F80;
  v74[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v71, "%u", -1);
  (*((void (**)(const char **))v71 + 5))(&v71);
  v20 = v72;
  if (!v72)
  {
    v65 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v72, v73, (uint64_t *)&v65);
  v20 = v72;
  if (v72 != (WTF *)v74)
LABEL_12:
    WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
  v71 = "WebAssembly.Module doesn't parse at byte ";
  v72 = (WTF *)42;
  v69 = ": ";
  v70 = 3;
  v68 = v4;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::String>((uint64_t)&v71, &v68, (uint64_t)&v69, (uint64_t *)&v66, (uint64_t *)&v65, (int **)&v67);
  v28 = v67;
  if (v67)
  {
    v67 = 0;
    v29 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v28;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
        v40 = v67;
        v67 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
          {
            WTF::StringImpl::~StringImpl(v40, v21, v22, v23, v24, v25, v26, v27);
            WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
          }
          else
          {
            *(_DWORD *)v40 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v29 -= 2;
        v67 = 0;
      }
    }
    v30 = v65;
    v65 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::~StringImpl(v30, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
      }
      else
      {
        *(_DWORD *)v30 -= 2;
      }
    }
    v31 = v66;
    v66 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>(uint64_t a1, int a2, uint64_t a3, double a4, float a5)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  float v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  unint64_t v113;
  const char *v114;
  int v115;
  const char *v116;
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 56);
  v116 = (const char *)off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::StringImpl::utf8ForCharacters("Code section count ", 0x13uLL, (uint64_t)&v114, a5);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v116, "StringView", &v114);
  if (v115 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v115])(&v113, &v114);
  (*((void (**)(const char **))v116 + 5))(&v116);
  (*((void (**)(const char **))v116 + 5))(&v116);
  v16 = v117;
  if (!v117)
  {
    v107 = 0;
    goto LABEL_7;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v107);
  v16 = v117;
  if (v117 != (WTF *)v119)
LABEL_7:
    WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
  v116 = (const char *)off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%u", a2);
  (*((void (**)(const char **))v116 + 5))(&v116);
  v24 = v117;
  if (!v117)
  {
    v106 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v106);
  v24 = v117;
  if (v117 != (WTF *)v119)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  v116 = (const char *)off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" exceeds the declared number of functions ", 0x2AuLL, (uint64_t)&v114, v25);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v116, "StringView", &v114);
  if (v115 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v115])(&v113, &v114);
  (*((void (**)(const char **))v116 + 5))(&v116);
  (*((void (**)(const char **))v116 + 5))(&v116);
  v33 = v117;
  if (!v117)
  {
    v105 = 0;
    goto LABEL_19;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v105);
  v33 = v117;
  if (v117 != (WTF *)v119)
LABEL_19:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  v116 = (const char *)off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%lu", a3);
  (*((void (**)(const char **))v116 + 5))(&v116);
  v41 = v117;
  if (!v117)
  {
    v104 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v104);
  v41 = v117;
  if (v117 != (WTF *)v119)
LABEL_24:
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  v116 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v117) = 41;
  v113 = v8;
  v114 = ": ";
  v115 = 2;
  v111 = v106;
  v112 = v107;
  v109 = v104;
  v110 = v105;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v116, &v113, (uint64_t)&v114, (uint64_t *)&v112, (uint64_t *)&v111, (uint64_t *)&v110, (uint64_t *)&v109, (int **)&v108);
  v49 = v108;
  if (v108)
  {
    v108 = 0;
    v50 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v49;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
        v63 = v108;
        v108 = 0;
        if (v63)
        {
          if (*(_DWORD *)v63 == 2)
          {
            WTF::StringImpl::~StringImpl(v63, v42, v43, v44, v45, v46, v47, v48);
            WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
          }
          else
          {
            *(_DWORD *)v63 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v50 -= 2;
        v108 = 0;
      }
    }
    v51 = v104;
    v104 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
    v52 = v105;
    v105 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::~StringImpl(v52, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
      }
      else
      {
        *(_DWORD *)v52 -= 2;
      }
    }
    v53 = v106;
    v106 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
      {
        WTF::StringImpl::~StringImpl(v53, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
      }
      else
      {
        *(_DWORD *)v53 -= 2;
      }
    }
    v54 = v107;
    v107 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::~StringImpl(v54, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
      }
      else
      {
        *(_DWORD *)v54 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,JSC::Wasm::Section,WTF::ASCIILiteral>(uint64_t a1, char *__src, uint64_t a3, int a4, char *a5, uint64_t a6, double a7, float a8)
{
  unint64_t v12;
  unsigned int v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  int64x2_t v23;
  __int128 v24;
  const char *v25;
  unsigned int v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int64x2_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int64x2_t v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  int64x2_t v86;
  const char *v87;
  uint64_t v88;
  const char *v89;
  WTF *v90;
  __int128 v91;
  _BYTE v92[128];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 56);
  v89 = (const char *)off_1E3572250;
  v90 = (WTF *)v92;
  v91 = xmmword_199122F80;
  v92[0] = 0;
  if (__src)
  {
    v13 = a3 - 1;
    if (!a3)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v13, (uint64_t)&v87, a8);
  }
  else
  {
    v14 = (char *)WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *((_QWORD *)v14 + 1) = 0;
    v14[16] = 0;
    v87 = v14;
    LODWORD(v88) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v89, "StringView", &v87);
  if ((_DWORD)v88 != -1)
    ((void (*)(int64x2_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v88])(&v86, &v87);
  (*((void (**)(const char **))v89 + 5))(&v89);
  (*((void (**)(const char **))v89 + 5))(&v89);
  v22 = v90;
  if (!v90)
  {
    v83 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v90, v91, (uint64_t *)&v83);
  v22 = v90;
  if (v90 != (WTF *)v92)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  v24 = xmmword_199122F80;
  switch(a4)
  {
    case 1:
      v23 = vdupq_n_s64(5uLL);
      v25 = "Type";
      goto LABEL_28;
    case 2:
      v23 = vdupq_n_s64(7uLL);
      v25 = "Import";
      goto LABEL_28;
    case 3:
      v23 = vdupq_n_s64(9uLL);
      v25 = "Function";
      goto LABEL_28;
    case 4:
      v23 = vdupq_n_s64(6uLL);
      v25 = "Table";
      goto LABEL_28;
    case 5:
      v23 = vdupq_n_s64(7uLL);
      v25 = "Memory";
      goto LABEL_28;
    case 6:
      v23 = vdupq_n_s64(7uLL);
      v25 = "Global";
      goto LABEL_28;
    case 7:
      v23 = vdupq_n_s64(7uLL);
      v25 = "Export";
      goto LABEL_28;
    case 8:
      v23 = vdupq_n_s64(6uLL);
      v25 = "Start";
      goto LABEL_28;
    case 9:
      v23 = vdupq_n_s64(8uLL);
      v25 = "Element";
      goto LABEL_28;
    case 10:
      v23 = vdupq_n_s64(5uLL);
      v25 = "Code";
      goto LABEL_28;
    case 11:
      v23 = vdupq_n_s64(5uLL);
      v25 = "Data";
      goto LABEL_28;
    case 12:
      v23 = vdupq_n_s64(0xAuLL);
      v25 = "DataCount";
      goto LABEL_28;
    case 13:
      v23 = vdupq_n_s64(0xAuLL);
      v25 = "Exception";
      goto LABEL_28;
    case 14:
      v23 = vdupq_n_s64(7uLL);
      v25 = "Custom";
LABEL_28:
      v23.i64[0] = (uint64_t)v25;
      v81 = v23;
      break;
    default:
      v72 = vdupq_n_s64(6uLL);
      v72.i64[0] = (uint64_t)"Begin";
      v81 = v72;
      v24 = xmmword_199122F80;
      break;
  }
  v89 = (const char *)off_1E3572250;
  v90 = (WTF *)v92;
  v91 = v24;
  v92[0] = 0;
  if (a5)
  {
    v26 = a6 - 1;
    if (!a6)
      v26 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v26, (uint64_t)&v87, *(float *)v23.i32);
  }
  else
  {
    v27 = (char *)WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v27 = 1;
    *((_QWORD *)v27 + 1) = 0;
    v27[16] = 0;
    v87 = v27;
    LODWORD(v88) = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v89, "StringView", &v87);
  if ((_DWORD)v88 != -1)
    ((void (*)(int64x2_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v88])(&v86, &v87);
  (*((void (**)(const char **))v89 + 5))(&v89);
  (*((void (**)(const char **))v89 + 5))(&v89);
  v35 = v90;
  if (!v90)
  {
    v82 = 0;
    goto LABEL_40;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v90, v91, (uint64_t *)&v82);
  v35 = v90;
  if (v90 != (WTF *)v92)
LABEL_40:
    WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
  v89 = "WebAssembly.Module doesn't parse at byte ";
  v90 = (WTF *)42;
  v87 = ": ";
  v88 = 3;
  v86 = v81;
  v85 = v12;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t *)&v89, &v85, (uint64_t *)&v87, (uint64_t *)&v83, v86.i64, (uint64_t *)&v82, (int **)&v84);
  v43 = v84;
  if (!v84)
  {
    __break(0xC471u);
    JUMPOUT(0x198E29348);
  }
  v84 = 0;
  v44 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v43;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      v55 = v84;
      v84 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
        {
          WTF::StringImpl::~StringImpl(v55, v36, v37, v38, v39, v40, v41, v42);
          WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
        }
        else
        {
          *(_DWORD *)v55 -= 2;
        }
      }
    }
    else
    {
      *(_DWORD *)v44 -= 2;
      v84 = 0;
    }
  }
  v45 = v82;
  v82 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl(v45, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v45 -= 2;
    }
  }
  v46 = v83;
  v83 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
}

void JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(uint64_t a1, char *__src, uint64_t a3, int a4, char *a5, uint64_t a6, double a7, float a8)
{
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  const char *v103;
  int v104;
  const char *v105;
  WTF *v106;
  __int128 v107;
  _BYTE v108[128];
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 56);
  v105 = (const char *)off_1E3572250;
  v106 = (WTF *)v108;
  v107 = xmmword_199122F80;
  v108[0] = 0;
  if (__src)
  {
    v13 = a3 - 1;
    if (!a3)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v13, (uint64_t)&v103, a8);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v103 = (const char *)v14;
    v104 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v105, "StringView", &v103);
  if (v104 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v104])(&v102, &v103);
  (*((void (**)(const char **))v105 + 5))(&v105);
  (*((void (**)(const char **))v105 + 5))(&v105);
  v22 = v106;
  if (!v106)
  {
    v97 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v106, v107, (uint64_t *)&v97);
  v22 = v106;
  if (v106 != (WTF *)v108)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  v105 = (const char *)off_1E3572250;
  v106 = (WTF *)v108;
  v107 = xmmword_199122F80;
  v108[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v105, "%u", a4);
  (*((void (**)(const char **))v105 + 5))(&v105);
  v30 = v106;
  if (!v106)
  {
    v96 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v106, v107, (uint64_t *)&v96);
  v30 = v106;
  if (v106 != (WTF *)v108)
LABEL_17:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  v105 = (const char *)off_1E3572250;
  v106 = (WTF *)v108;
  v107 = xmmword_199122F80;
  v108[0] = 0;
  if (a5)
  {
    v32 = a6 - 1;
    if (!a6)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v32, (uint64_t)&v103, v31);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v103 = (const char *)v33;
    v104 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v105, "StringView", &v103);
  if (v104 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v104])(&v102, &v103);
  (*((void (**)(const char **))v105 + 5))(&v105);
  (*((void (**)(const char **))v105 + 5))(&v105);
  v41 = v106;
  if (!v106)
  {
    v95 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v106, v107, (uint64_t *)&v95);
  v41 = v106;
  if (v106 != (WTF *)v108)
LABEL_29:
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  v105 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v106) = 41;
  v102 = v12;
  v103 = ": ";
  v104 = 2;
  v100 = v96;
  v101 = v97;
  v99 = v95;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v105, &v102, (uint64_t)&v103, (uint64_t *)&v101, (uint64_t *)&v100, (uint64_t *)&v99, (int **)&v98);
  v49 = v98;
  if (v98)
  {
    v98 = 0;
    v50 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v49;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
        v62 = v98;
        v98 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
          {
            WTF::StringImpl::~StringImpl(v62, v42, v43, v44, v45, v46, v47, v48);
            WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
          }
          else
          {
            *(_DWORD *)v62 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v50 -= 2;
        v98 = 0;
      }
    }
    v51 = v95;
    v95 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
    v52 = v96;
    v96 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::~StringImpl(v52, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      else
      {
        *(_DWORD *)v52 -= 2;
      }
    }
    v53 = v97;
    v97 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
      {
        WTF::StringImpl::~StringImpl(v53, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
      }
      else
      {
        *(_DWORD *)v53 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::Wasm::StreamingParser::parseSectionPayload(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v22;
  unsigned int v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::Wasm::ModuleInformation *v31;
  char v32;
  uint64_t v33[7];
  unsigned int *v34;

  JSC::Wasm::SectionParser::SectionParser((uint64_t)v33, a2, a3, *(_QWORD *)(a1 + 56), *(unsigned int **)a1);
  switch(*(_BYTE *)(a1 + 194))
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x198E298C8);
    case 1:
      JSC::Wasm::SectionParser::parseType((JSC::Wasm::SectionParser *)&v31, (unint64_t)v33);
      goto LABEL_9;
    case 2:
      JSC::Wasm::SectionParser::parseImport((JSC::Wasm::SectionParser *)&v31, v33);
      goto LABEL_9;
    case 3:
      JSC::Wasm::SectionParser::parseFunction((JSC::Wasm::SectionParser *)&v31, (uint64_t)v33);
      goto LABEL_9;
    case 4:
      JSC::Wasm::SectionParser::parseTable((JSC::Wasm::SectionParser *)&v31, v33, v10, v11);
      goto LABEL_9;
    case 5:
      JSC::Wasm::SectionParser::parseMemory((JSC::Wasm::SectionParser *)&v31, v33, v10, v11);
      goto LABEL_9;
    case 6:
      JSC::Wasm::SectionParser::parseGlobal((JSC::Wasm::SectionParser *)&v31, (uint64_t)v33);
      goto LABEL_9;
    case 7:
      JSC::Wasm::SectionParser::parseExport((JSC::Wasm::SectionParser *)&v31, v33);
      goto LABEL_9;
    case 8:
      JSC::Wasm::SectionParser::parseStart((JSC::Wasm::SectionParser *)&v31, v33, v4, v5, v6, v10, v11, v7, v8, v9);
      goto LABEL_9;
    case 9:
      JSC::Wasm::SectionParser::parseElement((JSC::Wasm::SectionParser *)&v31, (uint64_t)v33);
      goto LABEL_9;
    case 0xA:
      __break(0xC471u);
      JUMPOUT(0x198E29918);
    case 0xB:
      JSC::Wasm::SectionParser::parseData((JSC::Wasm::SectionParser *)&v31, v33);
      goto LABEL_9;
    case 0xC:
      JSC::Wasm::SectionParser::parseDataCount((JSC::Wasm::SectionParser *)&v31, v33, v10, v11);
      goto LABEL_9;
    case 0xD:
      JSC::Wasm::SectionParser::parseException((JSC::Wasm::SectionParser *)&v31, v33, v10, v11);
      goto LABEL_9;
    case 0xE:
      JSC::Wasm::SectionParser::parseCustom((JSC::Wasm::SectionParser *)&v31, v33, v10, v11);
LABEL_9:
      if (v32)
      {
        WTF::String::operator=((unint64_t *)(a1 + 32), (WTF::AtomStringImpl *)&v31, v13, v14, v15, v16, v17, v18);
        std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v31, v24, v25, v26, v27, v28, v29, v30);
        goto LABEL_30;
      }
      std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v31, v12, v13, v14, v15, v16, v17, v18);
LABEL_11:
      if (v33[2] != v33[0])
      {
        JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,JSC::Wasm::Section,WTF::ASCIILiteral>(a1, "parsing ended before the end of ", 33, *(unsigned __int8 *)(a1 + 194), " section", 9, v10, v11);
LABEL_30:
        v19 = 8;
        goto LABEL_15;
      }
      if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 194)))
      {
        v19 = 1;
      }
      else
      {
        v19 = 8;
      }
LABEL_15:
      v20 = v34;
      v34 = 0;
      if (v20)
      {
        do
        {
          v22 = __ldaxr(v20);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v20));
        if (!v23)
        {
          atomic_store(1u, v20);
          v31 = (JSC::Wasm::ModuleInformation *)v20;
          WTF::ThreadSafeRefCounted<JSC::Wasm::ModuleInformation,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v31);
        }
      }
      return v19;
    default:
      goto LABEL_11;
  }
}

uint64_t JSC::Wasm::SectionParser::SectionParser(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  unint64_t v8;
  unsigned int v9;
  char v11;
  char **v12;
  char *v13;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  v8 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v8 != -1)
  {
    v13 = &v11;
    v12 = &v13;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  *(_QWORD *)(a1 + 24) = JSC::Wasm::TypeInformation::singleton(void)::theOne;
  *(_BYTE *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a4;
  do
    v9 = __ldaxr(a5);
  while (__stlxr(v9 + 1, a5));
  *(_QWORD *)(a1 + 56) = a5;
  return a1;
}

void *JSC::Wasm::StreamingParser::consume(void *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5, WTF *this)
{
  WTF *v6;
  uint64_t v8;
  size_t v9;
  char *v10;
  const void **v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  BOOL v16;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  const void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t *v35;
  const void *v36;
  unint64_t *v38;
  uint64_t v39;
  _QWORD v40[2];

  v6 = this;
  v8 = (uint64_t)result;
  v9 = *(unsigned int *)(a2 + 28);
  v10 = (char *)this - v9;
  if (this == (WTF *)v9)
    goto LABEL_25;
  if ((unint64_t)this < v9)
  {
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>((uint64_t)v40, *(char **)(a2 + 16), this);
    result = memmove(*(void **)(a2 + 16), (char *)v6 + *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 28) - (_QWORD)v6);
    *(_DWORD *)(a2 + 28) -= (_DWORD)v6;
    *(_QWORD *)(a2 + 64) += v6;
    *(_QWORD *)v8 = v40[0];
    *(_QWORD *)(v8 + 8) = v40[1];
LABEL_26:
    *(_BYTE *)(v8 + 16) = 1;
    return result;
  }
  v12 = (const void **)(a2 + 16);
  v13 = *a5;
  v14 = (char *)(a4 - *a5);
  v15 = (unint64_t)&v14[v9];
  if (&v14[v9] >= (char *)this)
  {
    if (a4 < v13)
      goto LABEL_34;
    if (v10 != (char *)-1)
    {
      v16 = v14 >= v10;
      v14 = (char *)this - v9;
      if (!v16)
        goto LABEL_34;
    }
    if (!v14)
      goto LABEL_24;
    v38 = a5;
    v39 = (uint64_t)result;
    v18 = &v14[v9];
    v19 = *(unsigned int *)(a2 + 24);
    if ((unint64_t)&v14[v9] > v19)
    {
      v20 = v19 + (v19 >> 2);
      if (v20 >= 0x10)
        v21 = v20 + 1;
      else
        v21 = 16;
      if (v21 <= (unint64_t)v18)
        v22 = (unint64_t)&v14[v9];
      else
        v22 = v21;
      if (HIDWORD(v22))
      {
        __break(0xC471u);
        JUMPOUT(0x198E29CB8);
      }
      v23 = *v12;
      v24 = (void *)WTF::fastMalloc((WTF *)v22);
      *(_DWORD *)(a2 + 24) = v22;
      *(_QWORD *)(a2 + 16) = v24;
      memcpy(v24, v23, v9);
      if (v23)
      {
        if (*v12 == v23)
        {
          *(_QWORD *)(a2 + 16) = 0;
          *(_DWORD *)(a2 + 24) = 0;
        }
        WTF::fastFree((unint64_t)v23, v25, v26, v27, v28, v29, v30, v31);
      }
    }
    v32 = *(unsigned int *)(a2 + 28);
    if ((unint64_t)v18 >= v32)
    {
      result = memcpy((char *)*v12 + v32, (const void *)(a3 + v13), (size_t)v14);
      v6 = this;
      a5 = v38;
      v13 = *v38;
      LODWORD(v9) = (_DWORD)v14 + v9;
      v8 = v39;
LABEL_24:
      *a5 = (unint64_t)&v10[v13];
LABEL_25:
      v33 = *(_QWORD *)(a2 + 16);
      v34 = *(_DWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 64) += v6;
      *(_QWORD *)v8 = v33;
      *(_DWORD *)(v8 + 8) = v34;
      *(_DWORD *)(v8 + 12) = v9;
      goto LABEL_26;
    }
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x198E29CB0);
  }
  if (a4 < v13)
  {
LABEL_34:
    __break(1u);
    goto LABEL_37;
  }
  if (v14)
  {
    v35 = a5;
    v36 = (const void *)(a3 + v13);
    if (v15 > *(unsigned int *)(a2 + 24))
    {
      v36 = (const void *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(a2 + 16, (WTF *)&v14[v9], (uint64_t)v36);
      v9 = *(unsigned int *)(a2 + 28);
    }
    if (v15 < v9)
      goto LABEL_37;
    result = memcpy((void *)(*(_QWORD *)(a2 + 16) + v9), v36, (size_t)v14);
    *(_DWORD *)(a2 + 28) = v15;
    a5 = v35;
  }
  *a5 = a4;
  *(_BYTE *)v8 = 0;
  *(_BYTE *)(v8 + 16) = 0;
  return result;
}

char *JSC::Wasm::StreamingParser::consumeVarUInt32(char *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5, char a6)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char *v10;
  const void **v11;
  size_t v12;
  unint64_t *v13;
  size_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  int v27;
  uint64_t v28;
  char v29;
  const void *v30;
  char v31;

  v10 = result;
  v11 = (const void **)(a2 + 16);
  v12 = *(unsigned int *)(a2 + 28);
  if (v12 > 4)
    goto LABEL_12;
  v13 = a5;
  v8 = *a5;
  v6 = (char *)(a4 - *a5);
  v7 = (unint64_t)&v6[v12];
  if ((unint64_t)&v6[v12] < 5)
    goto LABEL_23;
  if (a4 >= v8)
  {
    v15 = 5 - v12;
    if ((unint64_t)v6 >= 5 - v12)
    {
      if (*(_DWORD *)(a2 + 24) <= 4u)
      {
        v6 = *(char **)(a2 + 16);
        v7 = 16;
        v16 = (void *)WTF::fastMalloc((WTF *)0x10);
        *(_DWORD *)(a2 + 24) = 16;
        *(_QWORD *)(a2 + 16) = v16;
        memcpy(v16, v6, v12);
        if (v6)
        {
          if (*v11 == v6)
          {
            *(_QWORD *)(a2 + 16) = 0;
            *(_DWORD *)(a2 + 24) = 0;
          }
          WTF::fastFree((unint64_t)v6, v17, v18, v19, v20, v21, v22, v23);
        }
      }
      v24 = *(unsigned int *)(a2 + 28);
      if (v24 < 6)
      {
        memcpy((void *)(*(_QWORD *)(a2 + 16) + v24), (const void *)(a3 + v8), 5 - v12);
        v12 = 5;
        *(_DWORD *)(a2 + 28) = 5;
        *v13 += v15;
        goto LABEL_12;
      }
LABEL_36:
      __break(0xC471u);
      JUMPOUT(0x198E29F08);
    }
  }
  do
  {
LABEL_22:
    __break(1u);
LABEL_23:
    ;
  }
  while (a4 < v8);
  v29 = a6;
  if (a4 != v8)
  {
    v30 = (const void *)(a3 + v8);
    if (v7 > *(unsigned int *)(a2 + 24))
    {
      v30 = (const void *)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)v11, (WTF *)v7, (uint64_t)v30);
      v12 = *(unsigned int *)(a2 + 28);
    }
    if (v7 < v12)
      goto LABEL_36;
    result = (char *)memcpy((void *)(*(_QWORD *)(a2 + 16) + v12), v30, (size_t)v6);
    *(_DWORD *)(a2 + 28) = v7;
    a4 = *v13;
    v12 = v7;
  }
  *v13 = (unint64_t)&v6[a4];
  if ((v29 & 1) == 0)
  {
    v31 = *(_BYTE *)(a2 + 193);
LABEL_33:
    *v10 = v31;
    v27 = 1;
    goto LABEL_16;
  }
  if (!(_DWORD)v12)
  {
LABEL_35:
    v31 = 8;
    goto LABEL_33;
  }
LABEL_12:
  a3 = 0;
  v25 = 0;
  LODWORD(v13) = 0;
  result = (char *)*v11;
  while (1)
  {
    v26 = result[a3];
    v13 = (unint64_t *)(((v26 & 0x7F) << v25) | v13);
    if ((v26 & 0x80000000) == 0)
      break;
    if (v12 >= 5uLL)
      v28 = 5;
    else
      v28 = v12;
    if (v28 - 1 == a3)
      goto LABEL_35;
    ++a3;
    v25 += 7;
    if (v12 == a3)
      goto LABEL_22;
  }
  if (a3 == 4 && result[a3] >= 0x10u)
    goto LABEL_35;
  result = (char *)memmove(result, &result[a3 + 1], ~a3 + v12);
  v27 = 0;
  *(_DWORD *)(a2 + 28) += ~(_DWORD)a3;
  *(_QWORD *)(a2 + 64) += a3 + 1;
  *(_DWORD *)v10 = (_DWORD)v13;
LABEL_16:
  *((_DWORD *)v10 + 1) = v27;
  return result;
}

uint64_t JSC::Wasm::StreamingParser::addBytes(uint64_t a1, const void *a2, unint64_t a3, char a4, double a5, float a6)
{
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t result;
  double v14;
  float v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  float v33;
  int v34;
  int v35;
  double v36;
  float v37;
  unint64_t v38;
  char v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  float v48;
  unsigned int v49[2];
  uint64_t v50;
  char v51;
  unint64_t v52;

  if (*(_BYTE *)(a1 + 193) == 8)
    return 8;
  v8 = *(_QWORD *)(a1 + 48);
  v10 = __CFADD__(v8, a3);
  v9 = v8 + a3;
  if (v10)
  {
    *(_BYTE *)(a1 + 40) = 1;
LABEL_53:
    JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,unsigned long>(a1, a5, a6);
    result = 8;
    goto LABEL_45;
  }
  *(_QWORD *)(a1 + 48) = v9;
  if (*(_BYTE *)(a1 + 40))
    v10 = 1;
  else
    v10 = v9 >= 0x40000001;
  if (v10)
    goto LABEL_53;
  if (HIBYTE(word_1ECF4C720))
    WTF::SHA1::addBytes((CC_SHA1_CTX *)(a1 + 80), a2, a3);
  v52 = 0;
  while (2)
  {
    result = *(unsigned __int8 *)(a1 + 193);
    switch(*(_BYTE *)(a1 + 193))
    {
      case 0:
        JSC::Wasm::StreamingParser::consume(v49, a1, (uint64_t)a2, a3, &v52, (WTF *)8);
        if (!v51)
          return *(unsigned __int8 *)(a1 + 193);
        v38 = *(_QWORD *)v49;
        v39 = JSC::Wasm::StreamingParser::parseModuleHeader(a1, *(uint64_t *)v49, HIDWORD(v50), v47, v48);
        goto LABEL_25;
      case 1:
        JSC::Wasm::StreamingParser::consume(v49, a1, (uint64_t)a2, a3, &v52, (WTF *)1);
        if (!v51)
          return *(unsigned __int8 *)(a1 + 193);
        v38 = *(_QWORD *)v49;
        v39 = JSC::Wasm::StreamingParser::parseSectionID(a1, *(_BYTE **)v49, SHIDWORD(v50), v36, v37);
        goto LABEL_25;
      case 2:
        JSC::Wasm::StreamingParser::consumeVarUInt32((char *)v49, a1, (uint64_t)a2, a3, &v52, a4);
        v16 = v49[1];
        if (v49[1])
          goto LABEL_42;
        *(_DWORD *)(a1 + 176) = v49[0];
        if (*(_BYTE *)(a1 + 194) == 10)
          v18 = 4;
        else
          v18 = 3;
        goto LABEL_21;
      case 3:
        JSC::Wasm::StreamingParser::consume(v49, a1, (uint64_t)a2, a3, &v52, (WTF *)*(unsigned int *)(a1 + 176));
        if (!v51)
          return *(unsigned __int8 *)(a1 + 193);
        v38 = *(_QWORD *)v49;
        v39 = JSC::Wasm::StreamingParser::parseSectionPayload(a1, *(uint64_t *)v49, HIDWORD(v50));
LABEL_25:
        *(_BYTE *)(a1 + 193) = v39;
        if (v38)
          WTF::fastFree(v38, v40, v41, v42, v43, v44, v45, v46);
        goto LABEL_22;
      case 4:
        JSC::Wasm::StreamingParser::consumeVarUInt32((char *)v49, a1, (uint64_t)a2, a3, &v52, a4);
        v16 = v49[1];
        if (v49[1])
          goto LABEL_42;
        *(_BYTE *)(a1 + 193) = JSC::Wasm::StreamingParser::parseCodeSectionSize((JSC::Wasm::StreamingParser *)a1, v49[0], v14, v15);
        goto LABEL_22;
      case 5:
        JSC::Wasm::StreamingParser::consumeVarUInt32((char *)v49, a1, (uint64_t)a2, a3, &v52, a4);
        v16 = v49[1];
        if (!v49[1])
        {
          v17 = v49[0];
          *(_DWORD *)(a1 + 188) = v49[0];
          if (v17 < 0x74CBB2)
          {
            v18 = 6;
            goto LABEL_21;
          }
LABEL_48:
          JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(a1, "Code function's size ", 22, v17, " is too big", 12, v14, v15);
LABEL_49:
          v18 = 8;
LABEL_21:
          *(_BYTE *)(a1 + 193) = v18;
LABEL_22:
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 64);
          continue;
        }
LABEL_42:
        if (v16 != 1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_48;
        }
        result = LOBYTE(v49[0]);
        if (LOBYTE(v49[0]) == 8)
          result = JSC::Wasm::StreamingParser::failOnState(a1, v14, v15);
LABEL_45:
        *(_BYTE *)(a1 + 193) = result;
        return result;
      case 6:
        JSC::Wasm::StreamingParser::consume(v49, a1, (uint64_t)a2, a3, &v52, (WTF *)*(unsigned int *)(a1 + 188));
        if (!v51)
          return *(unsigned __int8 *)(a1 + 193);
        v25 = (void *)*(unsigned int *)(a1 + 184);
        if (*(_DWORD *)(*(_QWORD *)a1 + 132) <= v25)
        {
          __break(0xC471u);
          JUMPOUT(0x198E2A300);
        }
        v26 = *(_QWORD *)(*(_QWORD *)a1 + 120) + 40 * v25;
        v27 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)v26 = v27;
        *(_QWORD *)(v26 + 8) = v27 + *(unsigned int *)(a1 + 188);
        v29 = (uint64_t *)(v26 + 16);
        v28 = *(_QWORD *)(v26 + 16);
        if (v28)
        {
          *v29 = 0;
          *(_DWORD *)(v26 + 24) = 0;
          WTF::fastFree(v28, v25, v19, v20, v21, v22, v23, v24);
          v25 = (void *)*(unsigned int *)(a1 + 184);
        }
        v30 = *(_QWORD *)v49;
        *(_QWORD *)v49 = 0;
        *v29 = v30;
        v31 = v50;
        LODWORD(v50) = 0;
        *(_QWORD *)(v26 + 24) = v31;
        if (!(*(unsigned int (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v25, v26))goto LABEL_49;
        v34 = *(_DWORD *)(a1 + 180);
        v35 = *(_DWORD *)(a1 + 184) + 1;
        *(_DWORD *)(a1 + 184) = v35;
        if (v35 != v34)
        {
          v18 = 5;
          goto LABEL_21;
        }
        if (*(_QWORD *)(a1 + 72) + *(unsigned int *)(a1 + 176) != *(_QWORD *)(a1 + 56) + *(unsigned int *)(a1 + 188))
        {
          JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,JSC::Wasm::Section,WTF::ASCIILiteral>(a1, "parsing ended before the end of ", 33, *(unsigned __int8 *)(a1 + 194), " section", 9, v32, v33);
          goto LABEL_49;
        }
        if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 194)))
        {
          v18 = 1;
        }
        else
        {
          v18 = 8;
        }
        goto LABEL_21;
      case 7:
      case 8:
        return result;
      default:
        goto LABEL_22;
    }
  }
}

void JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,unsigned long>(uint64_t a1, double a2, float a3)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  WTF *v72;
  __int128 v73;
  _BYTE v74[128];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 56);
  v71 = (const char *)off_1E3572250;
  v72 = (WTF *)v74;
  v73 = xmmword_199122F80;
  v74[0] = 0;
  WTF::StringImpl::utf8ForCharacters("module size is too large, maximum ", 0x22uLL, (uint64_t)&v69, a3);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v71, "StringView", &v69);
  if ((_DWORD)v70 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v70])(&v68, &v69);
  (*((void (**)(const char **))v71 + 5))(&v71);
  (*((void (**)(const char **))v71 + 5))(&v71);
  v12 = v72;
  if (!v72)
  {
    v66 = 0;
    goto LABEL_7;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v72, v73, (uint64_t *)&v66);
  v12 = v72;
  if (v72 != (WTF *)v74)
LABEL_7:
    WTF::fastFree((unint64_t)v12, v5, v6, v7, v8, v9, v10, v11);
  v71 = (const char *)off_1E3572250;
  v72 = (WTF *)v74;
  v73 = xmmword_199122F80;
  v74[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v71, "%lu", 0x40000000);
  (*((void (**)(const char **))v71 + 5))(&v71);
  v20 = v72;
  if (!v72)
  {
    v65 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v72, v73, (uint64_t *)&v65);
  v20 = v72;
  if (v72 != (WTF *)v74)
LABEL_12:
    WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
  v71 = "WebAssembly.Module doesn't parse at byte ";
  v72 = (WTF *)42;
  v69 = ": ";
  v70 = 3;
  v68 = v4;
  WTF::tryMakeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::String>((uint64_t)&v71, &v68, (uint64_t)&v69, (uint64_t *)&v66, (uint64_t *)&v65, (int **)&v67);
  v28 = v67;
  if (v67)
  {
    v67 = 0;
    v29 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v28;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
        v40 = v67;
        v67 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
          {
            WTF::StringImpl::~StringImpl(v40, v21, v22, v23, v24, v25, v26, v27);
            WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
          }
          else
          {
            *(_DWORD *)v40 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v29 -= 2;
        v67 = 0;
      }
    }
    v30 = v65;
    v65 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::~StringImpl(v30, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
      }
      else
      {
        *(_DWORD *)v30 -= 2;
      }
    }
    v31 = v66;
    v66 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::Wasm::StreamingParser::failOnState(uint64_t a1, double a2, float a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(unsigned __int8 *)(a1 + 193);
  switch(*(_BYTE *)(a1 + 193))
  {
    case 0:
      v3 = 8;
      JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(a1, "expected a module of at least ", 31, 8, " bytes", 7, a2, a3);
      return v3;
    case 1:
      v4 = "can't get section byte";
      v5 = 23;
      goto LABEL_7;
    case 2:
      JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,JSC::Wasm::Section,WTF::ASCIILiteral>(a1, "can't get ", 11, *(unsigned __int8 *)(a1 + 194), " section's length", 18, a2, a3);
      goto LABEL_11;
    case 3:
      JSC::Wasm::StreamingParser::fail<JSC::Wasm::Section,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(a1, *(unsigned __int8 *)(a1 + 194), *(_DWORD *)(a1 + 176), a2, a3);
      goto LABEL_11;
    case 4:
      v4 = "can't get Code section's count";
      v5 = 31;
LABEL_7:
      JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral>(a1, v4, v5, a2, a3);
      goto LABEL_11;
    case 5:
      v6 = *(_DWORD *)(a1 + 184);
      v7 = "can't get ";
      v8 = "th Code function's size";
      v9 = 11;
      v10 = 24;
      goto LABEL_10;
    case 6:
      v6 = *(_DWORD *)(a1 + 188);
      v7 = "Code function's size ";
      v8 = " exceeds the module's remaining size";
      v9 = 22;
      v10 = 37;
LABEL_10:
      JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(a1, v7, v9, v6, v8, v10, a2, a3);
LABEL_11:
      v3 = 8;
      break;
    default:
      return v3;
  }
  return v3;
}

void JSC::Wasm::StreamingParser::fail<JSC::Wasm::Section,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(uint64_t a1, int a2, int a3, double a4, float a5)
{
  char v7;
  const char *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  float v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  int v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  WTF::StringImpl *v40;
  BOOL v41;
  int v42;
  int v43;
  int v44;
  BOOL v45;
  int v46;
  BOOL v47;
  int v48;
  int v49;
  int v50;
  BOOL v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  _BOOL4 v56;
  int *v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  _WORD *v61;
  uint64_t v62;
  unint64_t v63;
  _WORD *v64;
  unsigned int v66;
  _DWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  int v111;
  int v112;
  char v113;
  void (**v114)(WTF::StringPrintStream *__hidden);
  WTF *v115;
  __int128 v116;
  _BYTE v117[128];
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v7 = a2 - 1;
  if ((a2 - 1) > 0xD)
  {
    v8 = "Begin";
    v9 = 5;
  }
  else
  {
    v8 = off_1E35B6F50[v7];
    v9 = qword_19915AF10[v7];
  }
  v10 = *(_QWORD *)(a1 + 56);
  v114 = off_1E3572250;
  v115 = (WTF *)v117;
  v116 = xmmword_199122F80;
  v117[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" section of size ", 0x11uLL, (uint64_t)&v111, a5);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v114, "StringView", &v111);
  if (v112 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v112])(&v113, &v111);
  v114[5]((WTF::StringPrintStream *)&v114);
  v114[5]((WTF::StringPrintStream *)&v114);
  v18 = v115;
  if (!v115)
  {
    v110 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v115, v116, (uint64_t *)&v110);
  v18 = v115;
  if (v115 != (WTF *)v117)
LABEL_10:
    WTF::fastFree((unint64_t)v18, v11, v12, v13, v14, v15, v16, v17);
  v114 = off_1E3572250;
  v115 = (WTF *)v117;
  v116 = xmmword_199122F80;
  v117[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v114, "%u", a3);
  v114[5]((WTF::StringPrintStream *)&v114);
  v26 = v115;
  if (!v115)
  {
    v109 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v115, v116, (uint64_t *)&v109);
  v26 = v115;
  if (v115 != (WTF *)v117)
LABEL_15:
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  v114 = off_1E3572250;
  v115 = (WTF *)v117;
  v116 = xmmword_199122F80;
  v117[0] = 0;
  WTF::StringImpl::utf8ForCharacters(" would overflow Module's size", 0x1DuLL, (uint64_t)&v111, v27);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v114, "StringView", &v111);
  if (v112 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v112])(&v113, &v111);
  v114[5]((WTF::StringPrintStream *)&v114);
  v114[5]((WTF::StringPrintStream *)&v114);
  v35 = v115;
  if (v115)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v115, v116, (uint64_t *)&v108);
    v35 = v115;
    if (v115 == (WTF *)v117)
      goto LABEL_23;
  }
  else
  {
    v108 = 0;
  }
  WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
LABEL_23:
  v36 = 0;
  v38 = v109;
  v37 = v110;
  v39 = v10;
  v40 = v108;
  do
  {
    ++v36;
    v41 = v39 > 9;
    v39 /= 0xAuLL;
  }
  while (v41);
  if (v110)
  {
    v42 = *((_DWORD *)v110 + 1);
    if (v109)
      goto LABEL_27;
LABEL_95:
    v43 = 0;
    if (v108)
      goto LABEL_28;
LABEL_96:
    v44 = 0;
    goto LABEL_29;
  }
  v42 = 0;
  if (!v109)
    goto LABEL_95;
LABEL_27:
  v43 = *((_DWORD *)v109 + 1);
  if (!v108)
    goto LABEL_96;
LABEL_28:
  v44 = *((_DWORD *)v108 + 1);
LABEL_29:
  if ((v44 | v43) < 0)
    goto LABEL_100;
  v45 = __OFADD__(v43, v44);
  v46 = v43 + v44;
  v47 = v45;
  if (v42 < 0)
    goto LABEL_100;
  if (v47)
    goto LABEL_100;
  v45 = __OFADD__(v42, v46);
  v48 = v42 + v46;
  if (v45)
    goto LABEL_100;
  v45 = __OFADD__((_DWORD)v9, v48);
  v49 = v9 + v48;
  if (v45)
    goto LABEL_100;
  v45 = __OFADD__(v49, 2);
  v50 = v49 + 2;
  v51 = v45;
  if (v36 < 0)
    goto LABEL_100;
  if (v51)
    goto LABEL_100;
  v45 = __OFADD__(v36, v50);
  v52 = v36 + v50;
  if (v45)
    goto LABEL_100;
  v53 = v52 + 41;
  if (__OFADD__(v52, 41))
    goto LABEL_100;
  if (v110 && (*((_BYTE *)v110 + 16) & 4) == 0)
  {
    if (v52 != -41)
    {
      v54 = v53;
LABEL_64:
      if (v53 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v54 + 20), &v114);
        v57 = (int *)v114;
        if (v114)
        {
          v62 = 0;
          *(_DWORD *)v114 = 2;
          v57[1] = v53;
          *(_OWORD *)(v57 + 5) = xmmword_19915A580;
          *((_QWORD *)v57 + 1) = v57 + 5;
          v57[4] = 0;
          *(_OWORD *)(v57 + 9) = xmmword_19915A590;
          *(_OWORD *)(v57 + 13) = xmmword_19915A5A0;
          *(_OWORD *)(v57 + 17) = xmmword_19915A5B0;
          *((_WORD *)v57 + 50) = 32;
          v63 = v10;
          *(_OWORD *)(v57 + 21) = xmmword_19915A5C0;
          do
          {
            v117[v62-- - 8] = (v63 % 0xA) | 0x30;
            v41 = v63 > 9;
            v63 /= 0xAuLL;
          }
          while (v41);
          if (v62 + 26 <= 25)
          {
            v64 = (_WORD *)v57 + 51;
            do
              *v64++ = v117[v62 - 7];
            while (!__CFADD__(v62++, 1));
          }
          v66 = 0;
          do
          {
            ++v66;
            v41 = v10 > 9;
            v10 /= 0xAuLL;
          }
          while (v41);
          v67 = (int *)((char *)v57 + 2 * v66 + 102);
          *v67 = 2097210;
          v68 = (char *)v67 + 2 * v9 + 4;
          v69 = 2 * v66 + 106;
          v70 = 2 * v9;
          do
          {
            v71 = *(unsigned __int8 *)v8++;
            *(_WORD *)((char *)v57 + v69) = v71;
            v69 += 2;
            v70 -= 2;
          }
          while (v70);
          WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v68, (uint64_t)v37, (uint64_t)v38, (uint64_t)v40);
          goto LABEL_77;
        }
      }
LABEL_100:
      __break(0xC471u);
      JUMPOUT(0x198E2AD64);
    }
LABEL_101:
    v57 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_77;
  }
  if (v109)
  {
    v55 = *((_DWORD *)v109 + 4);
    if (!v108 || (v55 & 4) == 0)
    {
      v54 = v53;
      v56 = v53 == 0;
      if ((v55 & 4) != 0)
        goto LABEL_52;
LABEL_63:
      if (!v56)
        goto LABEL_64;
      goto LABEL_101;
    }
  }
  else if (!v108)
  {
    if (v52 == -41)
      goto LABEL_101;
    v38 = 0;
    v40 = 0;
    v54 = v53;
    if ((v53 & 0x80000000) != 0)
      goto LABEL_100;
    goto LABEL_54;
  }
  v54 = v53;
  v56 = v53 == 0;
  if ((*((_BYTE *)v108 + 16) & 4) == 0)
    goto LABEL_63;
LABEL_52:
  if (v56)
    goto LABEL_101;
  if ((v53 & 0x80000000) != 0)
    goto LABEL_100;
LABEL_54:
  WTF::tryFastCompactMalloc((WTF *)(v54 + 20), &v114);
  v57 = (int *)v114;
  if (!v114)
    goto LABEL_100;
  v58 = 0;
  *(_OWORD *)((char *)v114 + 20) = *(_OWORD *)"WebAssembly.Module doesn't parse at byte ";
  *v57 = 2;
  v57[1] = v53;
  *((_QWORD *)v57 + 1) = v57 + 5;
  v57[4] = 4;
  qmemcpy(v57 + 9, "le doesn't parse at byte ", 25);
  v59 = v10;
  do
  {
    v117[v58-- - 8] = (v59 % 0xA) | 0x30;
    v41 = v59 > 9;
    v59 /= 0xAuLL;
  }
  while (v41);
  if (v58 + 26 <= 25)
    memcpy((char *)v57 + 61, &v117[v58 - 7], -v58);
  v60 = 0;
  do
  {
    ++v60;
    v41 = v10 > 9;
    v10 /= 0xAuLL;
  }
  while (v41);
  v61 = (_WORD *)((char *)v57 + v60 + 61);
  *v61++ = 8250;
  memcpy(v61, v8, v9);
  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((_BYTE *)v61 + v9, (uint64_t)v37, (uint64_t)v38, (uint64_t)v40);
LABEL_77:
  v72 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v57;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, (WTF::AtomStringImpl *)v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v108;
  v108 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, (WTF::AtomStringImpl *)v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v109;
  v109 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, (WTF::AtomStringImpl *)v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  v75 = v110;
  v110 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, (WTF::AtomStringImpl *)v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
}

uint64_t JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>(uint64_t a1, char *__src, uint64_t a3, int a4, char *a5, uint64_t a6, uint64_t a7, int a8, double a9, float a10, char *a11, uint64_t a12)
{
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  float v36;
  unsigned int v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  float v55;
  unsigned int v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  uint64_t result;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  unint64_t v149;
  const char *v150;
  int v151;
  const char *v152;
  WTF *v153;
  __int128 v154;
  _BYTE v155[128];
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v17 = *(_QWORD *)(a1 + 56);
  v152 = (const char *)off_1E3572250;
  v153 = (WTF *)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  if (__src)
  {
    v18 = a3 - 1;
    if (!a3)
      v18 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v18, (uint64_t)&v150, a10);
  }
  else
  {
    v19 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0;
    *(_BYTE *)(v19 + 16) = 0;
    v150 = (const char *)v19;
    v151 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v152, "StringView", &v150);
  if (v151 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v151])(&v149, &v150);
  (*((void (**)(const char **))v152 + 5))(&v152);
  (*((void (**)(const char **))v152 + 5))(&v152);
  v27 = v153;
  if (!v153)
  {
    v142 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v153, v154, (uint64_t *)&v142);
  v27 = v153;
  if (v153 != (WTF *)v155)
LABEL_12:
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  v152 = (const char *)off_1E3572250;
  v153 = (WTF *)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%u", a4);
  (*((void (**)(const char **))v152 + 5))(&v152);
  v35 = v153;
  if (!v153)
  {
    v141 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v153, v154, (uint64_t *)&v141);
  v35 = v153;
  if (v153 != (WTF *)v155)
LABEL_17:
    WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
  v152 = (const char *)off_1E3572250;
  v153 = (WTF *)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  if (a5)
  {
    v37 = a6 - 1;
    if (!a6)
      v37 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v37, (uint64_t)&v150, v36);
  }
  else
  {
    v38 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v38 = 1;
    *(_QWORD *)(v38 + 8) = 0;
    *(_BYTE *)(v38 + 16) = 0;
    v150 = (const char *)v38;
    v151 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v152, "StringView", &v150);
  if (v151 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v151])(&v149, &v150);
  (*((void (**)(const char **))v152 + 5))(&v152);
  (*((void (**)(const char **))v152 + 5))(&v152);
  v46 = v153;
  if (!v153)
  {
    v140 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v153, v154, (uint64_t *)&v140);
  v46 = v153;
  if (v153 != (WTF *)v155)
LABEL_29:
    WTF::fastFree((unint64_t)v46, v39, v40, v41, v42, v43, v44, v45);
  v152 = (const char *)off_1E3572250;
  v153 = (WTF *)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%lu", a7);
  (*((void (**)(const char **))v152 + 5))(&v152);
  v54 = v153;
  if (!v153)
  {
    v139 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v153, v154, (uint64_t *)&v139);
  v54 = v153;
  if (v153 != (WTF *)v155)
LABEL_34:
    WTF::fastFree((unint64_t)v54, v47, v48, v49, v50, v51, v52, v53);
  v152 = (const char *)off_1E3572250;
  v153 = (WTF *)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  if (a11)
  {
    v56 = a12 - 1;
    if (!a12)
      v56 = 0;
    WTF::StringImpl::utf8ForCharacters(a11, v56, (uint64_t)&v150, v55);
  }
  else
  {
    v57 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v57 = 1;
    *(_QWORD *)(v57 + 8) = 0;
    *(_BYTE *)(v57 + 16) = 0;
    v150 = (const char *)v57;
    v151 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v152, "StringView", &v150);
  if (v151 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v151])(&v149, &v150);
  (*((void (**)(const char **))v152 + 5))(&v152);
  (*((void (**)(const char **))v152 + 5))(&v152);
  v65 = v153;
  if (!v153)
  {
    v138 = 0;
    goto LABEL_46;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v153, v154, (uint64_t *)&v138);
  v65 = v153;
  if (v153 != (WTF *)v155)
LABEL_46:
    WTF::fastFree((unint64_t)v65, v58, v59, v60, v61, v62, v63, v64);
  v152 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v153) = 41;
  v149 = v17;
  v150 = ": ";
  v151 = 2;
  v147 = v141;
  v148 = v142;
  v145 = v139;
  v146 = v140;
  v144 = v138;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v152, &v149, (uint64_t)&v150, (uint64_t *)&v148, (uint64_t *)&v147, (uint64_t *)&v146, (uint64_t *)&v145, (uint64_t *)&v144, (int **)&v143);
  v74 = v143;
  if (v143)
  {
    v143 = 0;
    v75 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v74;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
      {
        WTF::StringImpl::~StringImpl(v75, v67, v68, v69, v70, v71, v72, v73);
        WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
        v89 = v143;
        v143 = 0;
        if (v89)
        {
          if (*(_DWORD *)v89 == 2)
          {
            WTF::StringImpl::~StringImpl(v89, v67, v68, v69, v70, v71, v72, v73);
            WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
          }
          else
          {
            *(_DWORD *)v89 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v75 -= 2;
        v143 = 0;
      }
    }
    v76 = v138;
    v138 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
      {
        WTF::StringImpl::~StringImpl(v76, v67, v68, v69, v70, v71, v72, v73);
        WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
      }
      else
      {
        *(_DWORD *)v76 -= 2;
      }
    }
    v77 = v139;
    v139 = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
      {
        WTF::StringImpl::~StringImpl(v77, v67, v68, v69, v70, v71, v72, v73);
        WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
      }
      else
      {
        *(_DWORD *)v77 -= 2;
      }
    }
    v78 = v140;
    v140 = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
      {
        WTF::StringImpl::~StringImpl(v78, v67, v68, v69, v70, v71, v72, v73);
        WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
      }
      else
      {
        *(_DWORD *)v78 -= 2;
      }
    }
    v79 = v141;
    v141 = 0;
    if (v79)
    {
      if (*(_DWORD *)v79 == 2)
      {
        WTF::StringImpl::~StringImpl(v79, v67, v68, v69, v70, v71, v72, v73);
        WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
      }
      else
      {
        *(_DWORD *)v79 -= 2;
      }
    }
    v80 = v142;
    v142 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
      {
        WTF::StringImpl::~StringImpl(v80, v67, v68, v69, v70, v71, v72, v73);
        WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
      }
      else
      {
        *(_DWORD *)v80 -= 2;
      }
    }
    return 8;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::Wasm::StreamingParser::fail<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,unsigned int>(uint64_t a1, char *__src, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, int a7, double a8, float a9)
{
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  float v33;
  unsigned int v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  uint64_t result;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  unint64_t v124;
  const char *v125;
  int v126;
  const char *v127;
  WTF *v128;
  __int128 v129;
  _BYTE v130[128];
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(a1 + 56);
  v127 = (const char *)off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  if (__src)
  {
    v15 = a3 - 1;
    if (!a3)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(__src, v15, (uint64_t)&v125, a9);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v125 = (const char *)v16;
    v126 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v127, "StringView", &v125);
  if (v126 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v126])(&v124, &v125);
  (*((void (**)(const char **))v127 + 5))(&v127);
  (*((void (**)(const char **))v127 + 5))(&v127);
  v24 = v128;
  if (!v128)
  {
    v118 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v118);
  v24 = v128;
  if (v128 != (WTF *)v130)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  v127 = (const char *)off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v127, "%lu", a4);
  (*((void (**)(const char **))v127 + 5))(&v127);
  v32 = v128;
  if (!v128)
  {
    v117 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v117);
  v32 = v128;
  if (v128 != (WTF *)v130)
LABEL_17:
    WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
  v127 = (const char *)off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  if (a5)
  {
    v34 = a6 - 1;
    if (!a6)
      v34 = 0;
    WTF::StringImpl::utf8ForCharacters(a5, v34, (uint64_t)&v125, v33);
  }
  else
  {
    v35 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v35 = 1;
    *(_QWORD *)(v35 + 8) = 0;
    *(_BYTE *)(v35 + 16) = 0;
    v125 = (const char *)v35;
    v126 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v127, "StringView", &v125);
  if (v126 != -1)
    ((void (*)(unint64_t *, const char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v126])(&v124, &v125);
  (*((void (**)(const char **))v127 + 5))(&v127);
  (*((void (**)(const char **))v127 + 5))(&v127);
  v43 = v128;
  if (!v128)
  {
    v116 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v116);
  v43 = v128;
  if (v128 != (WTF *)v130)
LABEL_29:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  v127 = (const char *)off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v127, "%u", a7);
  (*((void (**)(const char **))v127 + 5))(&v127);
  v51 = v128;
  if (!v128)
  {
    v115 = 0;
    goto LABEL_34;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v115);
  v51 = v128;
  if (v128 != (WTF *)v130)
LABEL_34:
    WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
  v127 = "WebAssembly.Module doesn't parse at byte ";
  LODWORD(v128) = 41;
  v124 = v14;
  v125 = ": ";
  v126 = 2;
  v122 = v117;
  v123 = v118;
  v120 = v115;
  v121 = v116;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v127, &v124, (uint64_t)&v125, (uint64_t *)&v123, (uint64_t *)&v122, (uint64_t *)&v121, (uint64_t *)&v120, (int **)&v119);
  v60 = v119;
  if (v119)
  {
    v119 = 0;
    v61 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v60;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
      {
        WTF::StringImpl::~StringImpl(v61, v53, v54, v55, v56, v57, v58, v59);
        WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
        v74 = v119;
        v119 = 0;
        if (v74)
        {
          if (*(_DWORD *)v74 == 2)
          {
            WTF::StringImpl::~StringImpl(v74, v53, v54, v55, v56, v57, v58, v59);
            WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
          }
          else
          {
            *(_DWORD *)v74 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v61 -= 2;
        v119 = 0;
      }
    }
    v62 = v115;
    v115 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
      {
        WTF::StringImpl::~StringImpl(v62, v53, v54, v55, v56, v57, v58, v59);
        WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
      }
      else
      {
        *(_DWORD *)v62 -= 2;
      }
    }
    v63 = v116;
    v116 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
      {
        WTF::StringImpl::~StringImpl(v63, v53, v54, v55, v56, v57, v58, v59);
        WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
      }
      else
      {
        *(_DWORD *)v63 -= 2;
      }
    }
    v64 = v117;
    v117 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
      {
        WTF::StringImpl::~StringImpl(v64, v53, v54, v55, v56, v57, v58, v59);
        WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
      }
      else
      {
        *(_DWORD *)v64 -= 2;
      }
    }
    v65 = v118;
    v118 = 0;
    if (v65)
    {
      if (*(_DWORD *)v65 == 2)
      {
        WTF::StringImpl::~StringImpl(v65, v53, v54, v55, v56, v57, v58, v59);
        WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
      }
      else
      {
        *(_DWORD *)v65 -= 2;
      }
    }
    return 8;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void JSC::Wasm::StreamingPlan::work(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const JSC::Wasm::Type *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  JSC::Wasm::LLIntPlan::compileFunction(*(JSC::Wasm::LLIntPlan **)(a1 + 72), (void *)*(unsigned int *)(a1 + 80), a3, a4, a5, a6, a7, a8);
  v16 = (unsigned __int8 *)(a1 + 13);
  if (__ldaxr((unsigned __int8 *)(a1 + 13)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 13);
LABEL_5:
  *(_BYTE *)(a1 + 84) = 1;
  JSC::Wasm::Plan::runCompletionTasks((JSC::Wasm::Plan *)a1, v9, v10, v11, v12, v13, v14, v15);
  v24 = __ldxr(v16);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v16))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 13), 0, v18, v19, v20, v21, v22, v23);
}

void JSC::Wasm::StreamingPlan::complete(JSC::Wasm::Plan *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *((_BYTE *)this + 84) = 1;
  JSC::Wasm::Plan::runCompletionTasks(this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::Wasm::Table::operator delete(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 13) != 1)
  {
    if (*(_BYTE *)(a1 + 13))
    {
      __break(0xC471u);
      JUMPOUT(0x198E2B868);
    }
    goto LABEL_6;
  }
  if (!*(_BYTE *)(a1 + 32))
  {
LABEL_6:
    v9 = *(_QWORD *)(a1 + 48);
    goto LABEL_7;
  }
  v9 = 0;
  *(_QWORD *)(a1 + 48) = 0;
LABEL_7:
  WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(a1, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t JSC::Wasm::Table::tryCreate@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (result >= 0x989680)
  {
    *a6 = 0;
  }
  else
  {
    v10 = (void *)result;
    if (a3 == 1)
    {
      if ((a2 & 0xFF00000000) != 0 && (_DWORD)a2 == (_DWORD)result)
        return JSC::Wasm::FuncRefTable::createFixedSized((void *)result, a4, a5, a6);
      v15 = WTF::fastMalloc((WTF *)0x38);
      result = JSC::Wasm::FuncRefTable::FuncRefTable(v15, v10, a2, a4, a5, v16, v17, v18);
      goto LABEL_9;
    }
    if (!a3)
    {
      v11 = WTF::fastMalloc((WTF *)0x38);
      result = JSC::Wasm::ExternRefTable::ExternRefTable(v11, (int)v10, a2, a4, a5, v12, v13, v14);
LABEL_9:
      *a6 = result;
      return result;
    }
    result = 108;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::Wasm::FuncRefTable::createFixedSized@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v8 = ((_DWORD)a1 - 1) | (((_DWORD)a1 - 1) >> 1) | ((((_DWORD)a1 - 1) | (((_DWORD)a1 - 1) >> 1)) >> 2);
  v9 = v8 | (v8 >> 4) | ((v8 | (v8 >> 4)) >> 8);
  v10 = WTF::fastMalloc((WTF *)(48 * ((v9 | HIWORD(v9)) + 1) + 56));
  result = JSC::Wasm::FuncRefTable::FuncRefTable(v10, a1, a1 | 0x100000000, a2, a3, v11, v12, v13);
  *a4 = result;
  return result;
}

uint64_t JSC::Wasm::Table::grow(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v8 = *(_QWORD *)(a1 + 40);
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x198E2BE20);
  }
  if (a2)
  {
    v11 = a3;
    v12 = (unsigned __int8 *)(v8 + 4);
    while (1)
    {
      v13 = *v12;
      if ((v13 & 0x40) != 0)
        break;
      v14 = __ldaxr(v12);
      if (v14 == v13)
      {
        if (!__stxr(v13 | 0x40, v12))
          goto LABEL_12;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v12);
LABEL_12:
    LODWORD(v18) = *(_DWORD *)(a1 + 4);
    v15 = v18 + a2;
    if (__CFADD__((_DWORD)v18, a2)
      || ((v19 = *(_QWORD *)(a1 + 8), v15 > v19) ? (v20 = (v19 & 0xFF00000000) == 0) : (v20 = 1),
          v20 ? (v21 = v15 > 0x98967F) : (v21 = 1),
          v21))
    {
      v16 = 0;
      LOBYTE(v15) = 0;
    }
    else
    {
      v22 = v19 >> 40;
      v23 = *(_QWORD *)(a1 + 40);
      if ((v23 & 8) != 0)
        v24 = (uint64_t *)(v23 - 16);
      else
        v24 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFC000 | 8);
      v25 = *v24;
      if (v22 == 1)
      {
        v34 = (v18 - 1) | ((v18 - 1) >> 1) | ((((_DWORD)v18 - 1) | ((v18 - 1) >> 1)) >> 2);
        v35 = v34 | (v34 >> 4) | ((v34 | (v34 >> 4)) >> 8);
        v36 = (v15 - 1) | ((v15 - 1) >> 1) | (((v15 - 1) | ((v15 - 1) >> 1)) >> 2);
        v37 = v36 | (v36 >> 4) | ((v36 | (v36 >> 4)) >> 8);
        v38 = v37 | HIWORD(v37);
        if (v15 > (v35 | HIWORD(v35)) + 1)
        {
          *(_QWORD *)(a1 + 48) = WTF::fastRealloc(*(_QWORD *)(a1 + 48), (48 * v38 + 48), a3, a4, a5, a6, a7, a8);
          LODWORD(v18) = *(_DWORD *)(a1 + 4);
        }
        v39 = (v38 + 1);
        if (v18 < v39)
        {
          v40 = v18;
          if ((v11 & 0xFFFE000000000002) != 0)
          {
            v48 = *(_QWORD *)(a1 + 48);
            v49 = v39 - v18;
            v50 = 48 * v40;
            do
            {
              v51 = v48 + v50;
              *(_OWORD *)(v51 + 16) = 0uLL;
              *(_OWORD *)(v51 + 32) = 0uLL;
              *(_OWORD *)v51 = 0uLL;
              *(_QWORD *)(v51 + 16) = &JSC::Wasm::NullWasmCallee;
              *(_QWORD *)(v51 + 32) = 0;
              *(_QWORD *)(v51 + 40) = 2;
              v48 = *(_QWORD *)(a1 + 48);
              *(_QWORD *)(v48 + v50 + 40) = v11;
              v50 += 48;
              --v49;
            }
            while (v49);
          }
          else if (v11)
          {
            v41 = v39 - v18;
            v42 = 48 * v40;
            v43 = 0uLL;
            do
            {
              v44 = *(_QWORD *)(a1 + 48) + v42;
              *(_OWORD *)(v44 + 16) = v43;
              *(_OWORD *)(v44 + 32) = v43;
              *(_OWORD *)v44 = v43;
              *(_QWORD *)(v44 + 16) = &JSC::Wasm::NullWasmCallee;
              *(_QWORD *)(v44 + 32) = 0;
              *(_QWORD *)(v44 + 40) = 2;
              v45 = *(_QWORD *)(a1 + 40);
              *(_QWORD *)(*(_QWORD *)(a1 + 48) + v42 + 40) = v11;
              if (v45 && *(_DWORD *)(v25 + 760) >= *(unsigned __int8 *)(v45 + 7))
              {
                v61 = v42;
                v63 = v41;
                JSC::Heap::writeBarrierSlowPath(v25 + 192, v45);
                v43 = 0uLL;
                v42 = v61;
                v41 = v63;
              }
              v42 += 48;
              --v41;
            }
            while (v41);
          }
          else
          {
            v52 = *(_QWORD *)(a1 + 48);
            v53 = v39 - v18;
            v54 = 48 * v40;
            do
            {
              v55 = v52 + v54;
              *(_OWORD *)(v55 + 16) = 0uLL;
              *(_OWORD *)(v55 + 32) = 0uLL;
              *(_OWORD *)v55 = 0uLL;
              *(_QWORD *)(v55 + 16) = &JSC::Wasm::NullWasmCallee;
              *(_QWORD *)(v55 + 32) = 0;
              *(_QWORD *)(v55 + 40) = 2;
              v52 = *(_QWORD *)(a1 + 48);
              *(_QWORD *)(v52 + v54 + 40) = 0;
              v54 += 48;
              --v53;
            }
            while (v53);
          }
        }
      }
      else if (!(_BYTE)v22)
      {
        v26 = (v18 - 1) | ((v18 - 1) >> 1) | ((((_DWORD)v18 - 1) | ((v18 - 1) >> 1)) >> 2);
        v27 = v26 | (v26 >> 4) | ((v26 | (v26 >> 4)) >> 8);
        v28 = (v15 - 1) | ((v15 - 1) >> 1) | (((v15 - 1) | ((v15 - 1) >> 1)) >> 2);
        v29 = v28 | (v28 >> 4) | ((v28 | (v28 >> 4)) >> 8);
        v30 = v29 | HIWORD(v29);
        if (v15 > (v27 | HIWORD(v27)) + 1)
        {
          *(_QWORD *)(a1 + 48) = WTF::fastRealloc(*(_QWORD *)(a1 + 48), (8 * v30 + 8), a3, a4, a5, a6, a7, a8);
          LODWORD(v18) = *(_DWORD *)(a1 + 4);
        }
        v31 = (v30 + 1);
        if (v18 < v31)
        {
          v18 = v18;
          if ((v11 & 0xFFFE000000000002) != 0)
          {
            v46 = v31 - v18;
            v47 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 8 * v18);
            do
            {
              *v47++ = v11;
              --v46;
            }
            while (v46);
          }
          else if (v11)
          {
            v32 = *(_QWORD *)(a1 + 40);
            if (v32)
            {
              v33 = v31 - 1;
              while (1)
              {
                *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v18) = v11;
                if (v32 && *(_DWORD *)(v25 + 760) >= *(unsigned __int8 *)(v32 + 7))
                {
                  v60 = v33;
                  v62 = v18;
                  JSC::Heap::writeBarrierSlowPath(v25 + 192, v32);
                  v33 = v60;
                  v18 = v62;
                }
                if (v33 == v18)
                  break;
                ++v18;
                v32 = *(_QWORD *)(a1 + 40);
              }
            }
            else
            {
              v56 = v31 - v18;
              v57 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 8 * v18);
              do
              {
                *v57++ = v11;
                --v56;
              }
              while (v56);
            }
          }
          else
          {
            bzero((void *)(*(_QWORD *)(a1 + 48) + 8 * v18), 8 * (v31 - v18));
          }
        }
      }
      *(_DWORD *)(a1 + 4) = v15;
      LODWORD(v11) = v15 >> 8;
      v16 = 1;
    }
    while (1)
    {
      v58 = *v12;
      if ((v58 & 0xC0) != 0x40)
        break;
      v59 = __ldxr(v12);
      if (v59 == v58)
      {
        if (!__stxr(v58 & 0xBF, v12))
          return v15 | ((v11 & 0xFFFFFF) << 8) | (v16 << 32);
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v15 = *(_DWORD *)(a1 + 4);
    LODWORD(v11) = v15 >> 8;
    v16 = 1;
  }
  return v15 | ((v11 & 0xFFFFFF) << 8) | (v16 << 32);
}

uint64_t JSC::Wasm::Table::copy(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  if (*(_BYTE *)(result + 13))
  {
    __break(0xC471u);
    JUMPOUT(0x198E2BECCLL);
  }
  if (*(_BYTE *)(a2 + 13))
  {
    __break(0xC471u);
    JUMPOUT(0x198E2BEECLL);
  }
  if (*(_DWORD *)(a2 + 4) <= a4)
  {
    __break(0xC471u);
    JUMPOUT(0x198E2BF0CLL);
  }
  if (!*(_QWORD *)(a2 + 40))
  {
    __break(0xC471u);
    JUMPOUT(0x198E2BF2CLL);
  }
  if (*(_DWORD *)(result + 4) <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198E2BF4CLL);
  }
  v5 = *(_QWORD *)(result + 40);
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x198E2BF6CLL);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * a4);
  v7 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFC000 | 8);
  if ((v5 & 8) != 0)
    v7 = (uint64_t *)(v5 - 16);
  v8 = *v7;
  *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * a3) = v6;
  if (v6 && (v6 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v8 + 760) >= *(unsigned __int8 *)(v5 + 7))
    return JSC::Heap::writeBarrierSlowPath(v8 + 192, v5);
  return result;
}

void JSC::Wasm::Table::visitAggregate(JSC::Wasm::Table *this, JSC::AbstractSlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t i;
  int v19;
  int v20;

  v8 = *((_QWORD *)this + 5);
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x198E2C0ECLL);
  }
  v11 = (unsigned __int8 *)(v8 + 4);
  while (1)
  {
    v12 = *v11;
    if ((v12 & 0x40) != 0)
      break;
    v13 = __ldaxr(v11);
    if (v13 == v12)
    {
      if (!__stxr(v12 | 0x40, v11))
        goto LABEL_9;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
LABEL_9:
  if (*((_BYTE *)this + 13))
  {
    if (*((_BYTE *)this + 13) == 1)
    {
      v14 = *((unsigned int *)this + 1);
      if ((_DWORD)v14)
      {
        v15 = 0;
        v16 = 40;
        do
        {
          if ((*(_QWORD *)(*((_QWORD *)this + 6) + v16) & 0xFFFE000000000002) == 0)
          {
            (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
            v14 = *((unsigned int *)this + 1);
          }
          ++v15;
          v16 += 48;
        }
        while (v15 < v14);
      }
    }
  }
  else
  {
    v17 = *((unsigned int *)this + 1);
    if ((_DWORD)v17)
    {
      for (i = 0; i < v17; ++i)
      {
        if ((*(_QWORD *)(*((_QWORD *)this + 6) + 8 * i) & 0xFFFE000000000002) == 0)
        {
          (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
          v17 = *((unsigned int *)this + 1);
        }
      }
    }
  }
  while (1)
  {
    v19 = *v11;
    if ((v19 & 0xC0) != 0x40)
      break;
    v20 = __ldxr(v11);
    if (v20 == v19)
    {
      if (!__stxr(v19 & 0xBF, v11))
        return;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::Wasm::Table::visitAggregate(JSC::Wasm::Table *this, JSC::SlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t i;
  unint64_t v16;
  unsigned int v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  unsigned int v23;
  uint64_t v24;

  v8 = *((_QWORD *)this + 5);
  if (v8)
  {
    v24 = *((_QWORD *)this + 5);
    v11 = (unsigned __int8 *)(v8 + 4);
    while (1)
    {
      v12 = *v11;
      if ((v12 & 0x40) != 0)
        break;
      v13 = __ldaxr(v11);
      if (v13 == v12)
      {
        if (!__stxr(v12 | 0x40, v11))
          goto LABEL_9;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
LABEL_9:
    if (*((_BYTE *)this + 13) == 1)
    {
      if (*((_DWORD *)this + 1))
      {
        v14 = 0;
        for (i = 40; ; i += 48)
        {
          v16 = *(_QWORD *)(*((_QWORD *)this + 6) + i);
          if ((v16 & 0xFFFE000000000002) != 0 || v16 == 0)
            goto LABEL_19;
          if ((v16 & 8) != 0)
          {
            v18 = 0;
            if ((*(_BYTE *)(v16 - 79) & 1) == 0)
            {
LABEL_34:
              JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, v18, a4, a5, a6, a7, a8);
              goto LABEL_19;
            }
          }
          else
          {
            v18 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), a3, a4, a5, a6, a7, a8);
            if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + v18 + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
              goto LABEL_34;
          }
          if (*((_QWORD *)a2 + 21))
            goto LABEL_34;
LABEL_19:
          if (++v14 >= (unint64_t)*((unsigned int *)this + 1))
            return (uint64_t)WTF::Locker<JSC::JSCellLock,void>::~Locker(&v24, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        }
      }
      return (uint64_t)WTF::Locker<JSC::JSCellLock,void>::~Locker(&v24, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    }
    if (*((_BYTE *)this + 13) || !*((_DWORD *)this + 1))
      return (uint64_t)WTF::Locker<JSC::JSCellLock,void>::~Locker(&v24, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v20 = 0;
    while (1)
    {
      v21 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v20);
      if ((v21 & 0xFFFE000000000002) != 0 || v21 == 0)
        goto LABEL_31;
      if ((v21 & 8) != 0)
      {
        v23 = 0;
        if ((*(_BYTE *)(v21 - 79) & 1) == 0)
        {
LABEL_36:
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v21, v23, a4, a5, a6, a7, a8);
          goto LABEL_31;
        }
      }
      else
      {
        v23 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v21 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), a3, a4, a5, a6, a7, a8);
        if (((*(_QWORD *)((v21 & 0xFFFFFFFFFFFFC000) + v23 + 8 * ((v21 >> 10) & 0xF) + 0x28) >> (v21 >> 4)) & 1) == 0)
          goto LABEL_36;
      }
      if (*((_QWORD *)a2 + 21))
        goto LABEL_36;
LABEL_31:
      if (++v20 >= (unint64_t)*((unsigned int *)this + 1))
        return (uint64_t)WTF::Locker<JSC::JSCellLock,void>::~Locker(&v24, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  result = 209;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Wasm::ExternRefTable::ExternRefTable(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 13) = 0;
  *(_QWORD *)(a1 + 24) = a5;
  v10 = (a3 & 0xFF00000000) != 0 && (_DWORD)a3 == a2;
  *(_BYTE *)(a1 + 32) = v10;
  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 4) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (BYTE1(dword_1ECF4C7B0))
  {
    if ((a4 + 29) <= 1u && a5 == -17)
      goto LABEL_15;
  }
  else if (a4 == 239)
  {
    goto LABEL_15;
  }
  if (!BYTE2(dword_1ECF4C7B0)
    || !JSC::Wasm::isSubtype(a4, a5, 227, 0xFFFFFFFFFFFFFFEELL, a5, a6, a7, a8))
  {
    result = 237;
    __break(0xC471u);
    return result;
  }
  a2 = *(_DWORD *)(a1 + 4);
LABEL_15:
  v11 = (a2 - 1) | ((a2 - 1) >> 1) | (((a2 - 1) | ((a2 - 1) >> 1)) >> 2);
  v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
  v13 = WTF::fastMalloc((WTF *)(8 * ((v12 | HIWORD(v12)) + 1)));
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
  WTF::fastFree(0, v22, v23, v24, v25, v26, v27, v28);
  v29 = (*(_DWORD *)(a1 + 4) - 1) | ((*(_DWORD *)(a1 + 4) - 1) >> 1);
  v30 = v29 | (v29 >> 2) | ((v29 | (v29 >> 2)) >> 4);
  v31 = v30 | (v30 >> 8) | ((v30 | (v30 >> 8)) >> 16);
  v32 = __CFADD__(v31, 1);
  v33 = v31 + 1;
  if (!v32)
    memset_pattern16(*(void **)(a1 + 48), &unk_199153030, 8 * v33);
  return a1;
}

uint64_t JSC::Wasm::FuncRefTable::FuncRefTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  unsigned int v26;
  unsigned int v27;

  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 13) = 1;
  *(_QWORD *)(a1 + 24) = a5;
  v10 = (a3 & 0xFF00000000) != 0 && (_DWORD)a3 == (_DWORD)a2;
  *(_BYTE *)(a1 + 32) = v10;
  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 4) = (_DWORD)a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (BYTE1(dword_1ECF4C7B0) || a4 == 240)
  {
    if (v10)
    {
      v11 = 0;
      v12 = a1 + 56;
    }
    else
    {
      v26 = ((_DWORD)a2 - 1) | (((_DWORD)a2 - 1) >> 1) | ((((_DWORD)a2 - 1) | (((_DWORD)a2 - 1) >> 1)) >> 2);
      v27 = v26 | (v26 >> 4) | ((v26 | (v26 >> 4)) >> 8);
      v12 = WTF::fastMalloc((WTF *)(48 * ((v27 | HIWORD(v27)) + 1)));
      v11 = *(_QWORD *)(a1 + 48);
    }
    *(_QWORD *)(a1 + 48) = v12;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(0, v13, v14, v15, v16, v17, v18, v19);
    v20 = (*(_DWORD *)(a1 + 4) - 1) | ((*(_DWORD *)(a1 + 4) - 1) >> 1);
    v21 = v20 | (v20 >> 2) | ((v20 | (v20 >> 2)) >> 4);
    if ((v21 | (v21 >> 8) | ((v21 | (v21 >> 8)) >> 16)) != 0xFFFFFFFF)
    {
      v22 = 0;
      v23 = 0;
      do
      {
        v24 = *(_QWORD *)(a1 + 48) + v22;
        *(_OWORD *)(v24 + 16) = 0uLL;
        *(_OWORD *)(v24 + 32) = 0uLL;
        *(_OWORD *)v24 = 0uLL;
        *(_QWORD *)(v24 + 16) = &JSC::Wasm::NullWasmCallee;
        *(_QWORD *)(v24 + 32) = 0;
        *(_QWORD *)(v24 + 40) = 2;
        ++v23;
        LODWORD(v24) = (*(_DWORD *)(a1 + 4) - 1) | ((*(_DWORD *)(a1 + 4) - 1) >> 1);
        LODWORD(v24) = v24 | (v24 >> 2) | ((v24 | (v24 >> 2)) >> 4);
        v22 += 48;
      }
      while (v23 < (v24 | (v24 >> 8) | ((v24 | (v24 >> 8)) >> 16))
                  + 1);
    }
    return a1;
  }
  else
  {
    result = 259;
    __break(0xC471u);
  }
  return result;
}

void JSC::Wasm::FuncRefTable::~FuncRefTable(JSC::Wasm::FuncRefTable *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  if (*((_BYTE *)this + 32))
  {
    v9 = 0;
    *((_QWORD *)this + 6) = 0;
  }
  else
  {
    v9 = *((_QWORD *)this + 6);
  }
  WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v9;

  if (*((_BYTE *)this + 32))
  {
    v9 = 0;
    *((_QWORD *)this + 6) = 0;
  }
  else
  {
    v9 = *((_QWORD *)this + 6);
  }
  WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::Wasm::FuncRefTable::copyFunction(uint64_t this, const JSC::Wasm::FuncRefTable *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;

  v4 = *((_QWORD *)a2 + 6);
  v5 = *(_QWORD *)(v4 + 48 * a4 + 40);
  if (v5 == 2)
  {
    v6 = (_QWORD *)(*(_QWORD *)(this + 48) + 48 * a3);
    *v6 = 0;
    v6[1] = 0;
    v6[2] = &JSC::Wasm::NullWasmCallee;
    v6[3] = 0;
    v6[4] = 0;
    v6[5] = 2;
  }
  else
  {
    if (*(_DWORD *)(this + 4) <= a3)
    {
      __break(0xC471u);
      JUMPOUT(0x198E2C6E0);
    }
    if (!*(_QWORD *)(this + 40))
    {
      __break(0xC471u);
      JUMPOUT(0x198E2C700);
    }
    v7 = (__int128 *)(v4 + 48 * a4);
    v8 = *((_QWORD *)v7 + 4);
    v9 = *v7;
    v10 = v7[1];
    v11 = *(_QWORD *)(this + 48) + 48 * a3;
    *(_OWORD *)v11 = v9;
    *(_OWORD *)(v11 + 16) = v10;
    *(_QWORD *)(v11 + 32) = v8;
    v12 = (_QWORD *)(v11 + 40);
    if (v5)
    {
      v13 = *(_QWORD *)(this + 40);
      v14 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v13 & 8) != 0)
        v14 = (uint64_t *)(v13 - 16);
      v15 = *v14;
      *v12 = v5;
      v16 = (v5 & 0xFFFE000000000002) != 0 || v13 == 0;
      if (!v16 && *(_DWORD *)(v15 + 760) >= *(unsigned __int8 *)(v13 + 7))
        return JSC::Heap::writeBarrierSlowPath(v15 + 192, v13);
    }
    else
    {
      *v12 = 2;
    }
  }
  return this;
}

uint64_t JSC::Wasm::throwExceptionFromWasmThunkGenerator@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v70;
  int v71[6];
  uint64_t v72;
  JSC::ExecutableAllocator *v73;
  _DWORD v74[8];
  _DWORD v75[6];
  _DWORD v76[39];
  char v77;
  uint64_t v78;
  char v79;
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v74, 0);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [37]>((uint64_t)v74);
  JSC::MacroAssemblerARM64::move(v74, 19, 0, v2, v3, v4, v5, v6);
  JSC::MacroAssemblerARM64::load64((uint64_t)v74, 0x800000000, 2, v7, v8, v9, v10, v11);
  JSC::MacroAssemblerARM64::load64((uint64_t)v74, 0x3000000002, 2, v12, v13, v14, v15, v16);
  JSC::AssemblyHelpers::copyCalleeSavesToEntryFrameCalleeSavesBufferImpl((char *)v74, 2);
  JSC::DeleteByVariant::~DeleteByVariant((JSC::DeleteByVariant *)v74);
  JSC::ARM64Assembler::label(v75, v17, v18, v19, v20, v21, v22, v23, v71);
  if (!v77)
  {
    __break(0xC471u);
    JUMPOUT(0x198E2C938);
  }
  *(_DWORD *)(v78 + 208) &= ~v80;
  JSC::MacroAssemblerARM64::moveWithFixedWidth(v74, 0, v79, v24, v25, v26, v27, v28);
  v76[38] = 0;
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v76, 3594453504, v29, v30, v31, v32, v33, v34);
  JSC::ARM64Assembler::label(v75, v35, v36, v37, v38, v39, v40, v41, &v70);
  v42 = v70;
  JSC::MacroAssemblerARM64::farJump(v74, 0, 10924, v43, v44, v45, v46, v47);
  JSC::MacroAssemblerARM64::breakpoint((JSC::MacroAssemblerARM64 *)v74, 50289, v48, v49, v50, v51, v52, v53);
  v54 = 1;
  JSC::LinkBuffer::LinkBuffer((uint64_t)v71, (uint64_t)v74, -1, 12, 1);
  JSC::LinkBuffer::link<(WTF::PtrTag)64323,void * (*)(JSC::Wasm::Instance *,JSC::Wasm::ExceptionType),void>(v72, v73, v42, 1);
  if (byte_1ECF4C288 | HIBYTE(word_1ECF4C286))
    goto LABEL_10;
  if (byte_1ECF4C28E || byte_1ECF4C289)
  {
    v54 = byte_1ECF4C28E != 0;
LABEL_10:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v71, v54, "throwExceptionFromWasmThunk", 28, "Throw exception from Wasm", a1);
    goto LABEL_8;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v71, "throwExceptionFromWasmThunk", 28, a1);
LABEL_8:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v71, v55, v56, v57, v58, v59, v60, v61);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v74, v62, v63, v64, v65, v66, v67, v68);
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [37]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "throwExceptionFromWasmThunkGenerator");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

void JSC::LinkBuffer::link<(WTF::PtrTag)64323,void * (*)(JSC::Wasm::Instance *,JSC::Wasm::ExceptionType),void>(uint64_t a1, JSC::ExecutableAllocator *a2, int a3, char a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  if (a3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((a3 & 0xFFFFFFFC) + a1 - 4);
  v5 = a3 - v4;
  if ((a4 & 2) != 0)
  {
    if ((a4 & 4) != 0)
    {
      v6 = v5;
      JSC::ARM64Assembler::linkJump(a2, &v6, (unint64_t)operationWasmToJSException);
    }
    else
    {
      JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>((JSC::ExecutableAllocator *)((char *)a2 + v5 - 4), (unint64_t)a2 + v5 - 4, (unint64_t)operationWasmToJSException);
    }
  }
  else
  {
    v7 = v5 - 16;
    JSC::ARM64Assembler::linkPointer((uint64_t)a2, &v7, (unint64_t)operationWasmToJSException);
  }
}

uint64_t JSC::Wasm::crashDueToBBQStackOverflowGenerator@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v50;
  int v51[6];
  uint64_t v52;
  JSC::ExecutableAllocator *v53;
  _DWORD v54[8];
  _DWORD v55[6];
  _DWORD v56[39];
  char v57;
  uint64_t v58;
  char v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v54, 0);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v54, "crashDueToBBQStackOverflow");
  JSC::ARM64Assembler::label(v55, v2, v3, v4, v5, v6, v7, v8, v51);
  if (!v57)
  {
    __break(0xC471u);
    JUMPOUT(0x198E2CD50);
  }
  *(_DWORD *)(v58 + 208) &= ~v60;
  JSC::MacroAssemblerARM64::moveWithFixedWidth(v54, 0, v59, v9, v10, v11, v12, v13);
  v56[38] = 0;
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v56, 3594453504, v14, v15, v16, v17, v18, v19);
  JSC::ARM64Assembler::label(v55, v20, v21, v22, v23, v24, v25, v26, &v50);
  v27 = v50;
  JSC::MacroAssemblerARM64::breakpoint((JSC::MacroAssemblerARM64 *)v54, 50289, v28, v29, v30, v31, v32, v33);
  v34 = 1;
  JSC::LinkBuffer::LinkBuffer((uint64_t)v51, (uint64_t)v54, -1, 12, 1);
  JSC::LinkBuffer::link<(WTF::PtrTag)64323,void (*)(void),void>(v52, v53, v27, 1, (unint64_t)operationCrashDueToBBQStackOverflow);
  if (byte_1ECF4C288 | HIBYTE(word_1ECF4C286))
    goto LABEL_10;
  if (byte_1ECF4C28E || byte_1ECF4C289)
  {
    v34 = byte_1ECF4C28E != 0;
LABEL_10:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v51, v34, "crashDueToBBQStackOverflow", 27, "Throw stack overflow from Wasm", a1);
    goto LABEL_8;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v51, "crashDueToBBQStackOverflow", 27, a1);
LABEL_8:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v51, v35, v36, v37, v38, v39, v40, v41);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v54, v42, v43, v44, v45, v46, v47, v48);
}

void JSC::LinkBuffer::link<(WTF::PtrTag)64323,void (*)(void),void>(uint64_t a1, JSC::ExecutableAllocator *a2, int a3, char a4, unint64_t a5)
{
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  if (a3 < 4)
    v5 = 0;
  else
    v5 = *(_DWORD *)((a3 & 0xFFFFFFFC) + a1 - 4);
  v6 = a3 - v5;
  if ((a4 & 2) != 0)
  {
    if ((a4 & 4) != 0)
    {
      v7 = v6;
      JSC::ARM64Assembler::linkJump(a2, &v7, a5);
    }
    else
    {
      JSC::ARM64Assembler::linkJumpOrCall<(JSC::ARM64Assembler::BranchType)1,(JSC::MachineCodeCopyMode)1>((JSC::ExecutableAllocator *)((char *)a2 + v6 - 4), (unint64_t)a2 + v6 - 4, a5);
    }
  }
  else
  {
    v8 = v6 - 16;
    JSC::ARM64Assembler::linkPointer((uint64_t)a2, &v8, a5);
  }
}

uint64_t JSC::Wasm::crashDueToOMGStackOverflowGenerator@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v50;
  int v51[6];
  uint64_t v52;
  JSC::ExecutableAllocator *v53;
  _DWORD v54[8];
  _DWORD v55[6];
  _DWORD v56[39];
  char v57;
  uint64_t v58;
  char v59;
  int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v54, 0);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v54, "crashDueToOMGStackOverflow");
  JSC::ARM64Assembler::label(v55, v2, v3, v4, v5, v6, v7, v8, v51);
  if (!v57)
  {
    __break(0xC471u);
    JUMPOUT(0x198E2CFB8);
  }
  *(_DWORD *)(v58 + 208) &= ~v60;
  JSC::MacroAssemblerARM64::moveWithFixedWidth(v54, 0, v59, v9, v10, v11, v12, v13);
  v56[38] = 0;
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v56, 3594453504, v14, v15, v16, v17, v18, v19);
  JSC::ARM64Assembler::label(v55, v20, v21, v22, v23, v24, v25, v26, &v50);
  v27 = v50;
  JSC::MacroAssemblerARM64::breakpoint((JSC::MacroAssemblerARM64 *)v54, 50289, v28, v29, v30, v31, v32, v33);
  v34 = 1;
  JSC::LinkBuffer::LinkBuffer((uint64_t)v51, (uint64_t)v54, -1, 12, 1);
  JSC::LinkBuffer::link<(WTF::PtrTag)64323,void (*)(void),void>(v52, v53, v27, 1, (unint64_t)operationCrashDueToOMGStackOverflow);
  if (byte_1ECF4C288 | HIBYTE(word_1ECF4C286))
    goto LABEL_10;
  if (byte_1ECF4C28E || byte_1ECF4C289)
  {
    v34 = byte_1ECF4C28E != 0;
LABEL_10:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v51, v34, "crashDueToBBQStackOverflow", 27, "Throw stack overflow from Wasm", a1);
    goto LABEL_8;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v51, "crashDueToBBQStackOverflow", 27, a1);
LABEL_8:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v51, v35, v36, v37, v38, v39, v40, v41);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v54, v42, v43, v44, v45, v46, v47, v48);
}

uint64_t JSC::Wasm::throwStackOverflowFromWasmThunkGenerator@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  JSC::RegisterSetBuilder *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49[28];
  unsigned int v50[88];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v4 = JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v50, 0);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v50, "throwStackOverflowFromWasmThunkGenerator");
  v5 = JSC::RegisterSetBuilder::calleeSaveRegisters(v4);
  JSC::MacroAssemblerARM64::add64((uint64_t)v50, -((8* (vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v5))) + vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)v5)))+ 15) & 0x7F0), 29, 31, v6, v7, v8, v9);
  v10 = 1;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(v50, (JSC::ARM64LogicalImmediate *)0xB, 1, v11, v12, v13, v14, v15);
  JSC::Wasm::Thunks::stub((uint64_t *)JSC::Wasm::thunks, a1, (void (*)(uint64_t))JSC::Wasm::throwExceptionFromWasmThunkGenerator, v16, v17, v18, v19, v20, v49);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>((uint64_t)v50, v49[0], v21, v22, v23, v24, v25, v26);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v49, v27, v28, v29, v30, v31, v32, v33);
  JSC::LinkBuffer::LinkBuffer((uint64_t)v49, (uint64_t)v50, -1, 12, 1);
  if (byte_1ECF4C288 | HIBYTE(word_1ECF4C286))
    goto LABEL_9;
  if (byte_1ECF4C28E || byte_1ECF4C289)
  {
    v10 = byte_1ECF4C28E != 0;
LABEL_9:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v49, v10, "throwStackOverflowFromWasmThunk", 32, "Throw stack overflow from Wasm", a2);
    goto LABEL_7;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v49, "throwStackOverflowFromWasmThunk", 32, a2);
LABEL_7:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v49, v34, v35, v36, v37, v38, v39, v40);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v50, v41, v42, v43, v44, v45, v46, v47);
}

void JSC::Wasm::Thunks::stub(uint64_t *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::ExecutableMemoryHandle *v39;
  _QWORD v40[2];
  char v41;
  void (*v42)(uint64_t);

  v42 = a3;
  v38 = 0;
  v39 = 0;
  WTF::HashMap<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::add<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>(a1, (uint64_t *)&v42, &v38, a4, a5, a6, a7, a8, (uint64_t)v40);
  v19 = (unsigned int *)v39;
  v39 = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v19, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
  }
  if (v41)
  {
    v42(a2);
    WTF::HashMap<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::inlineSet<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (* const&)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>&>(a1, (uint64_t *)&v42, a9, v22, v23, v24, v25, v26, (uint64_t)v40);
  }
  else
  {
    v27 = v40[0];
    *a9 = *(_QWORD *)(v40[0] + 8);
    v28 = *(unsigned int **)(v27 + 16);
    if (v28)
    {
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 + 1, v28));
    }
    a9[1] = (uint64_t)v28;
  }
}

uint64_t JSC::Wasm::catchInWasmThunkGenerator@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _WORD *v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint8x8_t v128;
  __int32 v129;
  uint8x8_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  void *v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  WTF *v162;
  WTF *v164;
  char v165;
  char v166;
  uint64_t v167;
  _BYTE *v168;
  uint64_t v169;
  _WORD *v170;
  _DWORD v171[2];
  char v172;
  __int16 v173;
  char v174;
  _DWORD v175[2];
  char v176;
  __int16 v177;
  char v178;
  WTF *v179;
  uint64_t v180;
  _BYTE v181[24];
  unsigned int v182[3];
  int v183;
  void *__dst;
  uint64_t v185;
  _WORD v186[104];
  _DWORD v187[8];
  _DWORD v188[6];
  _DWORD v189[39];
  char v190;
  uint64_t v191;
  char v192;
  int v193;
  char v194;
  uint64_t v195;

  v195 = *MEMORY[0x1E0C80C00];
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v187, 0);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v187, "catch runway");
  JSC::MacroAssemblerARM64::load64((uint64_t)v187, 0x180000001DLL, 0, v2, v3, v4, v5, v6);
  JSC::MacroAssemblerARM64::move(v187, 0, 3, v7, v8, v9, v10, v11);
  JSC::MacroAssemblerARM64::and64((uint64_t)v187, (JSC::ARM64LogicalImmediate *)0xFFFE000000000007, 3);
  JSC::MacroAssemblerARM64::branch64((uint64_t)v187, 0, 3, 3, v12, v13, v14, v15, (uint64_t)v182);
  v16 = (WTF *)v181;
  v179 = (WTF *)v181;
  v180 = 2;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v187, 1, 0, 8, v17, v18, v19, v20, (uint64_t)&__dst, (int8x8_t)2);
  JSC::MacroAssemblerARM64::and64((uint64_t)v187, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFFFFFC000, 0);
  JSC::MacroAssemblerARM64::load64((uint64_t)v187, 0x800000000, 0, v21, v22, v23, v24, v25);
  JSC::ARM64Assembler::label(v188, v26, v27, v28, v29, v30, v31, v32, &v183);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v189, 335544320, v33, v34, v35, v36, v37, v38);
  if (v194)
    v45 = 69;
  else
    v45 = 65;
  v175[0] = v183;
  v175[1] = 0;
  v176 = v45;
  v177 = 15;
  v178 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v179, v175, v39, v40, v41, v42, v43, v44);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&__dst, (uint64_t)v187, v46, v47, v48, v49, v50, v51);
  JSC::MacroAssemblerARM64::load64((uint64_t)v187, 0xFFFFFFF000000000, 0, v52, v53, v54, v55, v56);
  JSC::ARM64Assembler::label(v188, v57, v58, v59, v60, v61, v62, v63, &v183);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v189, 335544320, v64, v65, v66, v67, v68, v69);
  if (v194)
    v76 = 69;
  else
    v76 = 65;
  v171[0] = v183;
  v171[1] = 0;
  v172 = v76;
  v173 = 15;
  v174 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v179, v171, v70, v71, v72, v73, v74, v75);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v182, (uint64_t)v187, v77, v78, v79, v80, v81, v82);
  JSC::MacroAssemblerARM64::load64((uint64_t)v187, 0x100000001DLL, 0, v83, v84, v85, v86, v87);
  JSC::MacroAssemblerARM64::load64((uint64_t)v187, 0x800000000, 0, v88, v89, v90, v91, v92);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v179, (uint64_t)v187, v93, v94, v95, v96, v97, v98);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [42]>((uint64_t)v187);
  JSC::AssemblyHelpers::restoreCalleeSavesFromVMEntryFrameCalleeSavesBuffer((char *)v187, 0, 3, v99, v100, v101, v102, v103);
  JSC::MacroAssemblerARM64::load64((uint64_t)v187, 0x1617000000000, 29, v104, v105, v106, v107, v108);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v187, "Configure wasm context instance");
  JSC::MacroAssemblerARM64::load64((uint64_t)v187, 0x100000001DLL, 19, v109, v110, v111, v112, v113);
  JSC::DeleteByVariant::~DeleteByVariant((JSC::DeleteByVariant *)v187);
  v121 = v186;
  __dst = v186;
  v186[0] = 19;
  v185 = 0x100000001;
  v122 = 1;
LABEL_14:
  v123 = 0;
  v124 = 0;
  v125 = v122;
  while ((*((_BYTE *)__dst + v123 + 1) & 0x40) == 0)
  {
    v124 |= 1 << *((_BYTE *)__dst + v123 + 1);
    v123 += 2;
    if (2 * v122 == v123)
    {
      v126 = 0;
      while (1)
      {
        v127 = *((_BYTE *)__dst + v126) & 0x7F;
        if (v127 >= 0x40)
          goto LABEL_38;
        v124 &= ~(1 << v127);
        v126 += 2;
        if (2 * v122 == v126)
        {
          v128 = (uint8x8_t)vcnt_s8((int8x8_t)v124);
          v128.i16[0] = vaddlv_u8(v128);
          v129 = v128.i32[0];
          v130 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v124));
          v130.i16[0] = vaddlv_u8(v130);
          if (v130.i32[0] + v129)
          {
            v131 = 0;
            if (v122 <= 1uLL)
              v125 = 1;
            v132 = 2 * v125;
            while (1)
            {
              v133 = *((_BYTE *)__dst + v131 + 1);
              if ((v133 & 0x7Fu) >= 0x40)
                goto LABEL_38;
              if (((v124 >> (v133 & 0x7F)) & 1) != 0)
              {
                JSC::MacroAssemblerARM64::move(v187, *((char *)__dst + v131), v133, v116, v117, v118, v119, v120);
                memmove((char *)__dst + v131, (char *)__dst + v131 + 2, 2 * HIDWORD(v185) - v131 - 2);
                v122 = --HIDWORD(v185);
                goto LABEL_27;
              }
              v131 += 2;
              if (v132 == v131)
                goto LABEL_27;
            }
          }
          v170 = v121;
          v164 = v16;
          v165 = *(_BYTE *)__dst;
          v166 = *((_BYTE *)__dst + 1);
          JSC::MacroAssemblerARM64::swap((uint64_t)v187, *(char *)__dst, v166, v116, v117, v118, v119, v120);
          memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v185) - 2);
          v167 = --HIDWORD(v185);
          if (HIDWORD(v185))
          {
            v168 = __dst;
            v169 = 2 * v167;
            while (*v168 != v166)
            {
              v168 += 2;
              v169 -= 2;
              if (!v169)
                goto LABEL_45;
            }
            *v168 = v165;
          }
LABEL_45:
          WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,1u>(std::array<JSC::ARM64Registers::RegisterID,1u>,std::array<JSC::ARM64Registers::RegisterID,1u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v183, 0);
          v122 = HIDWORD(v185);
          v16 = v164;
          v121 = v170;
LABEL_27:
          if (!v122)
          {
            v134 = __dst;
            if (v121 != __dst && __dst)
            {
              __dst = 0;
              LODWORD(v185) = 0;
              WTF::fastFree((unint64_t)v134, v114, v115, v116, v117, v118, v119, v120);
            }
            if (!v190)
            {
              __break(0xC471u);
              JUMPOUT(0x198E2D74CLL);
            }
            *(_DWORD *)(v191 + 208) &= ~v193;
            v135 = v192;
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v187, (uint64_t)operationWasmRetrieveAndClearExceptionIfCatchable, v192, v116, v117, v118, v119, v120);
            v189[38] = 0;
            JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v189, (32 * (v135 & 0x1F)) | 0xD63F0000, v136, v137, v138, v139, v140, v141);
            v142 = 1;
            JSC::MacroAssemblerARM64::farJump(v187, 1, 10924, v143, v144, v145, v146, v147);
            JSC::LinkBuffer::LinkBuffer((uint64_t)&__dst, (uint64_t)v187, -1, 12, 1);
            if (byte_1ECF4C288 | HIBYTE(word_1ECF4C286))
              goto LABEL_40;
            v122 = byte_1ECF4C28E;
            if (!byte_1ECF4C28E && !byte_1ECF4C289)
            {
              JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, "catchInWasmThunk", 17, a1);
              goto LABEL_34;
            }
            goto LABEL_39;
          }
          goto LABEL_14;
        }
      }
    }
  }
LABEL_38:
  __break(1u);
LABEL_39:
  v142 = v122 != 0;
LABEL_40:
  JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)&__dst, v142, "catchInWasmThunk", 17, "Wasm catch runway", a1);
LABEL_34:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&__dst, v148, v149, v150, v151, v152, v153, v154);
  v162 = v179;
  if (v16 != v179 && v179)
  {
    v179 = 0;
    LODWORD(v180) = 0;
    WTF::fastFree((unint64_t)v162, v155, v156, v157, v158, v159, v160, v161);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v187, v155, v156, v157, v158, v159, v160, v161);
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [42]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "restore callee saves from vm entry buffer");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

uint64_t JSC::Wasm::triggerOMGEntryTierUpThunkGeneratorImpl(_QWORD *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::RegisterSetBuilder *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const JSC::RegisterSet *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v74[2];
  _QWORD v75[28];
  _DWORD v76[14];
  _DWORD v77[74];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v76, 0);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)v76, "triggerOMGEntryTierUpThunkGenerator");
  JSC::AssemblyHelpers::emitFunctionPrologue((JSC::AssemblyHelpers *)v76, v4, v5, v6, v7, v8, v9, v10);
  if (a2)
    v12 = JSC::RegisterSetBuilder::allRegisters(v11);
  else
    v12 = JSC::RegisterSetBuilder::allScalarRegisters(v11);
  v13 = JSC::RegisterSetBuilder::registersToSaveForCCall(v12);
  v74[0] = v14 | v13;
  v74[1] = v14;
  v20 = (const JSC::RegisterSet *)JSC::ScratchRegisterAllocator::preserveRegistersToStackForCall((JSC::ScratchRegisterAllocator *)v76, (JSC::AssemblyHelpers *)v74, 0, v15, v16, v17, v18, v19);
  JSC::MacroAssemblerARM64::move(v76, 19, 0, v21, v22, v23, v24, v25);
  v26 = 1;
  JSC::MacroAssemblerARM64::move(v76, 8, 1, v27, v28, v29, v30, v31);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v76, (uint64_t)operationWasmTriggerTierUpNow, 2, v32, v33, v34, v35, v36);
  v77[38] = 0;
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v77, 3594453056, v37, v38, v39, v40, v41, v42);
  v75[0] = 0;
  v75[1] = 0;
  JSC::ScratchRegisterAllocator::restoreRegistersFromStackForCall((JSC::ScratchRegisterAllocator *)v76, (JSC::AssemblyHelpers *)v74, (const JSC::RegisterSet *)v75, v20, 0, v43, v44, v45);
  JSC::AssemblyHelpers::emitFunctionEpilogue((JSC::AssemblyHelpers *)v76, v46, v47, v48, v49, v50, v51, v52);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v77, 3596551104, v53, v54, v55, v56, v57, v58);
  JSC::LinkBuffer::LinkBuffer((uint64_t)v75, (uint64_t)v76, -1, 12, 1);
  if (byte_1ECF4C288 | HIBYTE(word_1ECF4C286))
    goto LABEL_12;
  if (byte_1ECF4C28E || byte_1ECF4C289)
  {
    v26 = byte_1ECF4C28E != 0;
LABEL_12:
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)26129>((uint64_t)v75, v26, "triggerOMGEntryTierUpThunk", 27, "Trigger OMG entry tier up", a1);
    goto LABEL_9;
  }
  JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v75, "triggerOMGEntryTierUpThunk", 27, a1);
LABEL_9:
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v75, v59, v60, v61, v62, v63, v64, v65);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v76, v66, v67, v68, v69, v70, v71, v72);
}

void JSC::AssemblyHelpers::emitFunctionPrologue(JSC::AssemblyHelpers *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v9 = (JSC::AssemblyHelpers *)((char *)this + 56);
  v10 = *((_DWORD *)this + 50);
  if (v10 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblyHelpers *)((char *)this + 56), a2, a3, a4, a5, a6, a7, a8);
    v10 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v10) = -1447068675;
  v11 = *((_DWORD *)this + 50);
  v12 = v11 + 4;
  *((_DWORD *)this + 50) = v11 + 4;
  if ((v11 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v9, a2, a3, a4, a5, a6, a7, a8);
    v12 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v12) = -1862269955;
  *((_DWORD *)this + 50) += 4;
}

uint64_t JSC::Wasm::triggerOMGEntryTierUpThunkGeneratorSIMD@<X0>(_QWORD *a1@<X8>)
{
  return JSC::Wasm::triggerOMGEntryTierUpThunkGeneratorImpl(a1, 1);
}

uint64_t JSC::Wasm::triggerOMGEntryTierUpThunkGeneratorNoSIMD@<X0>(_QWORD *a1@<X8>)
{
  return JSC::Wasm::triggerOMGEntryTierUpThunkGeneratorImpl(a1, 0);
}

void JSC::Wasm::Thunks::stub(uint64_t *a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  char v22;

  v11 = (unsigned __int8 *)(a1 + 1);
  v21 = v11;
  v22 = 1;
  if (__ldaxr(v11))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
LABEL_5:
  JSC::Wasm::Thunks::stub(a1, (uint64_t)&v21, a2, a3, a4, a5, a6, a7, a8);
  if (!v22)
    return;
  v19 = v21;
  v20 = __ldxr(v21);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v21))
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v19, 0, v13, v14, v15, v16, v17, v18);
}

void WTF::HashMap<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::add<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),WTF::KeyValuePair<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>>,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashMap<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>>::rehash(a1, 8u, 0), (v13 = *a1) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
  v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
  v20 = v15 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
  v21 = (uint64_t *)(v13 + 24 * v20);
  v22 = *v21;
  if (*v21)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v22 == v16)
      {
        if ((v14 & 1) != 0)
          v31 = 0;
        else
          v31 = *(_DWORD *)(v13 - 4);
        v37 = 0;
        v38 = v13 + 24 * v31;
        goto LABEL_36;
      }
      if (v22 == -1)
        v23 = v21;
      v20 = (v20 + v24) & v15;
      v21 = (uint64_t *)(v13 + 24 * v20);
      v22 = *v21;
      ++v24;
    }
    while (*v21);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      v23[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v16 = *a2;
      v21 = v23;
    }
  }
  *v21 = v16;
  v21[1] = *a3;
  v25 = a3[1];
  a3[1] = 0;
  v26 = (unsigned int *)v21[2];
  v21[2] = v25;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v26, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
  }
  v29 = *a1;
  if (*a1)
    v30 = *(_DWORD *)(v29 - 12) + 1;
  else
    v30 = 1;
  *(_DWORD *)(v29 - 12) = v30;
  v32 = *a1;
  if (*a1)
    v33 = *(_DWORD *)(v32 - 12);
  else
    v33 = 0;
  v34 = (*(_DWORD *)(v32 - 16) + v33);
  v35 = *(unsigned int *)(v32 - 4);
  if (v35 > 0x400)
  {
    if (v35 <= 2 * v34)
      goto LABEL_27;
  }
  else if (3 * v35 <= 4 * v34)
  {
    if (!(_DWORD)v35)
    {
      v36 = 8;
LABEL_32:
      v21 = WTF::HashTable<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),WTF::KeyValuePair<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>>,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashMap<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>>::rehash(a1, v36, v21);
      v32 = *a1;
      if (*a1)
        LODWORD(v35) = *(_DWORD *)(v32 - 4);
      else
        LODWORD(v35) = 0;
      goto LABEL_35;
    }
LABEL_27:
    v36 = (_DWORD)v35 << (6 * *(_DWORD *)(v32 - 12) >= (2 * v35));
    goto LABEL_32;
  }
LABEL_35:
  v38 = v32 + 24 * v35;
  v37 = 1;
LABEL_36:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v38;
  *(_BYTE *)(a9 + 16) = v37;
}

void JSC::Wasm::StreamingPlan::~StreamingPlan(JSC::Wasm::StreamingPlan *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  JSC::Wasm::StreamingPlan *v12;

  v8 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      v12 = this;
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
      this = v12;
    }
  }
  JSC::Wasm::Plan::~Plan(this, a2, a3, a4, a5, a6, a7, a8);
}

{
  unsigned int *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v18 = v9 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  JSC::Wasm::Plan::~Plan(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
}

BOOL JSC::Wasm::StreamingPlan::hasWork(JSC::Wasm::StreamingPlan *this)
{
  return *((_BYTE *)this + 84) == 0;
}

uint64_t JSC::Wasm::StreamingPlan::multiThreaded(JSC::Wasm::StreamingPlan *this)
{
  return 0;
}

uint64_t JSC::Wasm::StreamingPlan::isComplete(JSC::Wasm::StreamingPlan *this)
{
  return *((unsigned __int8 *)this + 84);
}

uint64_t WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(uint64_t a1, WTF *this)
{
  int v2;
  const void *v4;
  size_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__dst;

  if (*(unsigned int *)(a1 + 8) < (unint64_t)this)
  {
    v2 = (int)this;
    v4 = *(const void **)a1;
    v5 = *(unsigned int *)(a1 + 12);
    WTF::tryFastMalloc(this, &__dst);
    result = (uint64_t)__dst;
    if (!__dst)
      return result;
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = result;
    memcpy((void *)result, v4, v5);
    if (v4)
    {
      if (*(const void **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v4, v7, v8, v9, v10, v11, v12, v13);
    }
  }
  return 1;
}

void WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (HIDWORD(v5))
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(const void **)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (void *)WTF::fastMalloc((WTF *)v5);
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      memcpy(v9, v7, v8);
      if (v7)
      {
        if (*(const void **)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

BOOL JSC::Wasm::isValueType(unsigned __int8 a1, uint64_t a2)
{
  BOOL v3;

  if (a1 > 0xFBu)
    return a1 - 252 < 4;
  if (a1 - 227 < 2)
  {
    if (BYTE1(dword_1ECF4C7B0))
      v3 = a2 == 0;
    else
      v3 = 1;
  }
  else
  {
    if (a1 - 239 < 2)
      return BYTE1(dword_1ECF4C7B0) == 0;
    if (a1 != 251)
      return 0;
    v3 = HIBYTE(dword_1ECF4C7B0) == 0;
  }
  return !v3;
}

unsigned int **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC4Wasm11NameSectionENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSH_SI_EEEEEEDcSM_DpT0_(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return WTF::Ref<JSC::Wasm::NameSection,WTF::RawPtrTraits<JSC::Wasm::NameSection>,WTF::DefaultRefDerefTraits<JSC::Wasm::NameSection>>::~Ref(a2, a2, a3, a4, a5, a6, a7, a8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN3JSC4Wasm11NameSectionENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSH_SI_EEEEEEDcSM_DpT0_(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::~StringImpl(v8, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN3JSC4Wasm6ModuleENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSH_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN3JSC4Wasm6ModuleENS8_12RawPtrTraitsISC_EENS8_21DefaultRefDerefTraitsISC_EEEENS8_6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISJ_LNS0_6_TraitE1EEEEEvRSK_OT_EUlRSQ_OT0_E_JRNS0_6__baseILSN_1EJSH_SI_EEEOSY_EEEDcSQ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t JSC::Wasm::orderingNumber(uint64_t result)
{
  if ((result - 1) < 0xD)
    return dword_19915AF80[(char)(result - 1)];
  return result;
}

_BYTE *WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(_BYTE *result, int8x16_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int **i;
  int v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  BOOL v15;
  int v16;
  char v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int8x16_t *v26;
  size_t v27;
  uint64_t v28;
  int8x16_t *v29;
  _BYTE *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  int8x16_t *v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  size_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  _BYTE *v50;
  size_t v51;
  uint64_t v52;
  _BYTE *v53;
  size_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  char *v62;
  char *v63;
  char *v64;
  __int16 v65;
  uint64_t v66;
  unsigned __int128 *v67;
  unsigned __int128 *v68;
  unsigned __int128 v69;
  unsigned __int128 *v70;
  unsigned __int128 *v71;
  unsigned __int128 *v72;
  unsigned __int128 v73;
  _BYTE *v74;
  _BYTE *v75;
  unsigned __int128 v76;
  char v77;
  char v78;
  char v79;
  int **v80;
  _DWORD *v81;
  int8x16x2_t v82;
  int8x16x2_t v83;
  int8x16x2_t v84;
  int8x16x2_t v85;
  int8x16x2_t v86;
  int8x16x2_t v87;

  i = (int **)result;
  if (a3)
  {
    v10 = *(_DWORD *)(a3 + 4);
    if (a5)
      goto LABEL_3;
LABEL_88:
    v11 = 0;
    if (a6)
      goto LABEL_4;
LABEL_89:
    v12 = 0;
    goto LABEL_5;
  }
  v10 = 0;
  if (!a5)
    goto LABEL_88;
LABEL_3:
  v11 = *(_DWORD *)(a5 + 4);
  if (!a6)
    goto LABEL_89;
LABEL_4:
  v12 = *(_DWORD *)(a6 + 4);
LABEL_5:
  if ((v12 | v11) < 0)
    goto LABEL_85;
  v13 = 0;
  v14 = *(_DWORD *)(a4 + 8);
  v15 = __OFADD__(v11, v12);
  v16 = v11 + v12;
  v17 = v15;
  if (v14 < 0 || (v17 & 1) != 0)
    goto LABEL_84;
  v13 = 0;
  v15 = __OFADD__(v14, v16);
  v18 = v14 + v16;
  v19 = v15;
  if (v10 < 0 || v19)
    goto LABEL_84;
  v13 = 0;
  v20 = *((_DWORD *)a2 + 2);
  v15 = __OFADD__(v10, v18);
  v21 = v10 + v18;
  v22 = v15;
  if (v20 < 0 || v22)
    goto LABEL_84;
  v23 = (v20 + v21);
  if (__OFADD__(v20, v21))
    goto LABEL_85;
  if (a3 && (*(_BYTE *)(a3 + 16) & 4) == 0)
  {
    v24 = 0;
    goto LABEL_29;
  }
  if (a5)
  {
    v25 = *(_DWORD *)(a5 + 16);
    v24 = (v25 >> 2) & 1;
    if (a6 && (v25 & 4) != 0)
      goto LABEL_28;
  }
  else
  {
    if (a6)
    {
LABEL_28:
      v24 = (*(unsigned __int8 *)(a6 + 16) >> 2) & 1;
      goto LABEL_29;
    }
    v24 = 1;
  }
LABEL_29:
  v26 = *a2;
  v27 = *((unsigned int *)a2 + 2);
  v29 = *(int8x16_t **)a4;
  v28 = *(_QWORD *)(a4 + 8);
  v80 = (int **)result;
  if (!v24)
  {
    if (!(_DWORD)v23)
      goto LABEL_92;
    if (v23 <= 0x7FFFFFEF)
    {
      result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(2 * v23 + 20), &v81);
      v13 = v81;
      if (v81)
      {
        v31 = (char *)(v81 + 5);
        *v81 = 2;
        v13[1] = v23;
        *((_QWORD *)v13 + 1) = v13 + 5;
        v13[4] = 0;
        v32 = (char *)v13 + 2 * v27 + 20;
        if ((v27 & 0xFFFFFFC0) != 0)
        {
          v33 = &v31[2 * (v27 & 0xFFFFFFC0)];
          v34 = 0uLL;
          do
          {
            v82.val[0] = *v26;
            v35 = v26[1];
            v84.val[0] = v26[2];
            v36 = v26[3];
            v26 += 4;
            v37 = v36;
            v84.val[1] = 0uLL;
            v86.val[0] = v35;
            v82.val[1] = 0uLL;
            v38 = v31;
            vst2q_s8(v38, v82);
            v38 += 32;
            v86.val[1] = 0uLL;
            vst2q_s8(v38, v86);
            v39 = v31 + 64;
            vst2q_s8(v39, v84);
            v40 = v31 + 96;
            vst2q_s8(v40, *(int8x16x2_t *)(&v34 - 1));
            v31 += 128;
          }
          while (v31 != v33);
          v31 = v33;
        }
        while (v31 != v32)
        {
          v41 = v26->u8[0];
          v26 = (int8x16_t *)((char *)v26 + 1);
          *(_WORD *)v31 = v41;
          v31 += 2;
        }
        if (a3)
        {
          v42 = *(int8x16_t **)(a3 + 8);
          v43 = *(unsigned int *)(a3 + 4);
          if ((*(_BYTE *)(a3 + 16) & 4) != 0)
          {
            v55 = &v32[2 * v43];
            if (v43 >= 0x40)
            {
              v56 = &v32[2 * (v43 & 0xFFFFFFC0)];
              v57 = 0uLL;
              v58 = (uint64_t)v13 + 2 * v27 + 20;
              do
              {
                v83.val[0] = *v42;
                v59 = v42[1];
                v85.val[0] = v42[2];
                v60 = v42[3];
                v42 += 4;
                v61 = v60;
                v85.val[1] = 0uLL;
                v87.val[0] = v59;
                v83.val[1] = 0uLL;
                v62 = (char *)v58;
                vst2q_s8(v62, v83);
                v62 += 32;
                v87.val[1] = 0uLL;
                vst2q_s8(v62, v87);
                v63 = (char *)(v58 + 64);
                vst2q_s8(v63, v85);
                v64 = (char *)(v58 + 96);
                vst2q_s8(v64, *(int8x16x2_t *)(&v57 - 1));
                v58 += 128;
              }
              while ((char *)v58 != v56);
            }
            else
            {
              v56 = (char *)v13 + 2 * v27 + 20;
            }
            while (v56 != v55)
            {
              v65 = v42->u8[0];
              v42 = (int8x16_t *)((char *)v42 + 1);
              *(_WORD *)v56 = v65;
              v56 += 2;
            }
          }
          else if ((_DWORD)v43 == 1)
          {
            *(_WORD *)v32 = v42->i16[0];
          }
          else if ((_DWORD)v43)
          {
            memcpy((char *)v13 + 2 * v27 + 20, v42, 2 * v43);
          }
          v66 = *(unsigned int *)(a3 + 4);
        }
        else
        {
          v66 = 0;
        }
        result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v32[2 * v66], v29, v28, a5, a6);
      }
      goto LABEL_83;
    }
LABEL_85:
    v13 = 0;
    goto LABEL_84;
  }
  if (!(_DWORD)v23)
  {
LABEL_92:
    v13 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_84;
  }
  if ((v23 & 0x80000000) != 0)
    goto LABEL_85;
  result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v23 + 20), &v81);
  v13 = v81;
  if (!v81)
    goto LABEL_83;
  v30 = v81 + 5;
  *v81 = 2;
  v13[1] = v23;
  *((_QWORD *)v13 + 1) = v13 + 5;
  v13[4] = 4;
  if ((_DWORD)v27 == 1)
  {
    *v30 = v26->i8[0];
  }
  else if ((_DWORD)v27)
  {
    result = memcpy(v13 + 5, v26, v27);
  }
  v44 = &v30[v27];
  if (a3)
  {
    v45 = *(_BYTE **)(a3 + 8);
    v46 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      if ((_DWORD)v46 == 1)
      {
        *v44 = *v45;
      }
      else if ((_DWORD)v46)
      {
        result = memcpy(v44, v45, v46);
      }
    }
    else
    {
      if (v46 < 0x10)
      {
        v67 = (unsigned __int128 *)v44;
      }
      else
      {
        v67 = (unsigned __int128 *)&v44[v46 & 0xFFFFFFF0];
        v68 = (unsigned __int128 *)v44;
        do
        {
          v69 = (unsigned __int128)vld2q_s8(v45);
          v45 += 32;
          *v68++ = v69;
        }
        while (v68 != v67);
      }
      while (v67 != (unsigned __int128 *)&v44[v46])
      {
        v78 = *v45;
        v45 += 2;
        *(_BYTE *)v67 = v78;
        v67 = (unsigned __int128 *)((char *)v67 + 1);
      }
    }
    v47 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v47 = 0;
  }
  v48 = &v44[v47];
  if ((_DWORD)v28 == 1)
  {
    *v48 = v29->i8[0];
    i = v80;
  }
  else
  {
    i = v80;
    if ((_DWORD)v28)
      result = memcpy(v48, v29, v28);
  }
  v49 = &v48[v28];
  if (!a5)
  {
    v52 = 0;
    if (!a6)
      goto LABEL_84;
    goto LABEL_69;
  }
  v50 = *(_BYTE **)(a5 + 8);
  v51 = *(unsigned int *)(a5 + 4);
  if ((*(_BYTE *)(a5 + 16) & 4) != 0)
  {
    if ((_DWORD)v51 == 1)
    {
      *v49 = *v50;
    }
    else if ((_DWORD)v51)
    {
      result = memcpy(v49, v50, v51);
    }
  }
  else
  {
    v70 = (unsigned __int128 *)&v49[v51];
    if (v51 < 0x10)
    {
      v71 = (unsigned __int128 *)v49;
    }
    else
    {
      v71 = (unsigned __int128 *)&v49[v51 & 0xFFFFFFF0];
      v72 = (unsigned __int128 *)v49;
      do
      {
        v73 = (unsigned __int128)vld2q_s8(v50);
        v50 += 32;
        *v72++ = v73;
      }
      while (v72 != v71);
    }
    for (i = v80; v71 != v70; v71 = (unsigned __int128 *)((char *)v71 + 1))
    {
      v79 = *v50;
      v50 += 2;
      *(_BYTE *)v71 = v79;
    }
  }
  v52 = *(unsigned int *)(a5 + 4);
  if (a6)
  {
LABEL_69:
    result = &v49[v52];
    v53 = *(_BYTE **)(a6 + 8);
    v54 = *(unsigned int *)(a6 + 4);
    if ((*(_BYTE *)(a6 + 16) & 4) != 0)
    {
      if ((_DWORD)v54 == 1)
      {
        *result = *v53;
      }
      else if ((_DWORD)v54)
      {
        result = memcpy(result, v53, v54);
      }
      goto LABEL_84;
    }
    v74 = &result[v54];
    if (v54 >= 0x10)
    {
      v75 = &result[v54 & 0xFFFFFFF0];
      do
      {
        v76 = (unsigned __int128)vld2q_s8(v53);
        v53 += 32;
        *(_OWORD *)result = v76;
        result += 16;
      }
      while (result != v75);
      result = v75;
    }
    while (result != v74)
    {
      v77 = *v53;
      v53 += 2;
      *result++ = v77;
    }
LABEL_83:
    i = v80;
  }
LABEL_84:
  *i = v13;
  return result;
}

BOOL WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)1,unsigned long>(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  if (v3)
  {
    v4 = *(unsigned int *)(a1 + 12);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *(_QWORD *)v3;
    *(_DWORD *)(a1 + 12) = v4 + 1;
  }
  return v3 != 0;
}

char *WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a3;
  v5 = *(char **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 > a2)
        a2 = v9;
      if (a2 <= v7)
      {
        v17 = *(char **)a1;
        return &v17[v3 - (_QWORD)v5];
      }
      if (WTF::VectorBufferBase<unsigned long long,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(a1, a2))
      {
        memcpy(*(void **)a1, v5, 8 * v6);
        v17 = *(char **)a1;
        if (v5)
        {
          if (v17 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v10, v11, v12, v13, v14, v15, v16);
          v17 = *(char **)a1;
        }
        return &v17[v3 - (_QWORD)v5];
      }
      return 0;
    }
  }
  v18 = *(unsigned int *)(a1 + 8);
  v19 = v18 + (v18 >> 2);
  if (v19 >= 0x10)
    v20 = v19 + 1;
  else
    v20 = 16;
  if (v20 > a2)
    a2 = v20;
  if (a2 > v18)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (!WTF::VectorBufferBase<unsigned long long,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(a1, a2))return 0;
    memcpy(*(void **)a1, v5, 8 * v21);
    if (v5)
    {
      if (*(char **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v22, v23, v24, v25, v26, v27, v28);
    }
  }
  return (char *)v3;
}

char *WTF::Vector<WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<JSC::Wasm::RTT const,WTF::RawPtrTraits<JSC::Wasm::RTT const>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT const>>>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  result = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(char **)a1;
  v6 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)&v5[8 * v4] = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::VectorBufferBase<JSC::Wasm::GlobalInformation,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  _QWORD v8[5];

  if (a2 > 0x5555555)
    return 0;
  v8[3] = v2;
  v8[4] = v3;
  v5 = 48 * a2;
  WTF::tryFastMalloc((WTF *)(48 * a2), v8);
  v6 = v8[0];
  if (!v8[0])
    return 0;
  *(_DWORD *)(a1 + 8) = v5 / 0x30;
  *(_QWORD *)a1 = v6;
  return 1;
}

uint64_t WTF::VectorBufferBase<JSC::Wasm::Import,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  _QWORD v8[5];

  if (a2 > 0x6666666)
    return 0;
  v8[3] = v2;
  v8[4] = v3;
  v5 = 40 * a2;
  WTF::tryFastMalloc((WTF *)(40 * a2), v8);
  v6 = v8[0];
  if (!v8[0])
    return 0;
  *(_DWORD *)(a1 + 8) = v5 / 0x28;
  *(_QWORD *)a1 = v6;
  return 1;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(uint64_t result, uint64_t a2, uint64_t a3, int8x16_t **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *i;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int *v20;
  BOOL v21;
  int v22;
  char v23;
  int v24;
  BOOL v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  _OWORD *v37;
  size_t v38;
  int8x16_t *v39;
  _QWORD *v41;
  _BYTE *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  int8x16_t v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  char *v51;
  char *v52;
  __int16 v53;
  int8x16_t *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  size_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unsigned int v63;
  __int128 v64;
  uint64_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  char *v69;
  char *v70;
  char *v71;
  __int16 v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  __int128 v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  char *v81;
  char *v82;
  char *v83;
  __int16 v84;
  unsigned __int128 *v85;
  unsigned __int128 *v86;
  unsigned __int128 *v87;
  unsigned __int128 v88;
  char v89;
  _QWORD *v91;
  int8x16_t *v92;
  _DWORD *v94;
  int8x16x2_t v95;
  int8x16x2_t v96;
  int8x16x2_t v97;
  int8x16x2_t v98;
  int8x16x2_t v99;
  int8x16x2_t v100;
  int8x16x2_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;

  i = (_QWORD *)result;
  if (a3)
  {
    v14 = *(_DWORD *)(a3 + 4);
    if (a5)
      goto LABEL_3;
LABEL_101:
    v15 = 0;
    if (a6)
      goto LABEL_4;
    goto LABEL_102;
  }
  v14 = 0;
  if (!a5)
    goto LABEL_101;
LABEL_3:
  v15 = *(_DWORD *)(a5 + 4);
  if (a6)
  {
LABEL_4:
    v16 = *(_DWORD *)(a6 + 4);
    goto LABEL_5;
  }
LABEL_102:
  v16 = 0;
LABEL_5:
  if (a7)
  {
    v17 = *(_DWORD *)(a7 + 4);
    if (a8)
      goto LABEL_7;
LABEL_104:
    v18 = 0;
    if (a9)
      goto LABEL_8;
LABEL_105:
    v19 = 0;
    goto LABEL_9;
  }
  v17 = 0;
  if (!a8)
    goto LABEL_104;
LABEL_7:
  v18 = *(_DWORD *)(a8 + 4);
  if (!a9)
    goto LABEL_105;
LABEL_8:
  v19 = *(_DWORD *)(a9 + 4);
LABEL_9:
  if ((v19 | v18) < 0)
    goto LABEL_98;
  v20 = 0;
  v21 = __OFADD__(v18, v19);
  v22 = v18 + v19;
  v23 = v21;
  if (v17 < 0 || (v23 & 1) != 0)
    goto LABEL_97;
  v20 = 0;
  v21 = __OFADD__(v17, v22);
  v24 = v17 + v22;
  v25 = v21;
  if (v16 < 0 || v25)
    goto LABEL_97;
  v20 = 0;
  v21 = __OFADD__(v16, v24);
  v26 = v16 + v24;
  v27 = v21;
  if (v15 < 0 || v27)
    goto LABEL_97;
  v20 = 0;
  v28 = *((_DWORD *)a4 + 2);
  v21 = __OFADD__(v15, v26);
  v29 = v15 + v26;
  v30 = v21;
  if (v28 < 0 || v30)
    goto LABEL_97;
  v20 = 0;
  v21 = __OFADD__(v28, v29);
  v31 = v28 + v29;
  v32 = v21;
  if (v14 < 0)
    goto LABEL_97;
  if (v32)
    goto LABEL_97;
  v20 = 0;
  v21 = __OFADD__(v14, v31);
  v33 = v14 + v31;
  if (v21)
    goto LABEL_97;
  v34 = *(_DWORD *)(a2 + 8);
  if (v34 < 0)
    goto LABEL_97;
  v35 = (v34 + v33);
  if (__OFADD__(v34, v33))
    goto LABEL_98;
  if (a3 && (*(_BYTE *)(a3 + 16) & 4) == 0
    || a5 && (*(_BYTE *)(a5 + 16) & 4) == 0
    || a6 && (*(_BYTE *)(a6 + 16) & 4) == 0
    || a7 && (*(_BYTE *)(a7 + 16) & 4) == 0)
  {
    v36 = 0;
    goto LABEL_47;
  }
  if (a8)
  {
    v63 = *(_DWORD *)(a8 + 16);
    v36 = (v63 >> 2) & 1;
    if (a9 && (v63 & 4) != 0)
      goto LABEL_82;
  }
  else
  {
    if (a9)
    {
LABEL_82:
      v36 = (*(unsigned __int8 *)(a9 + 16) >> 2) & 1;
      goto LABEL_47;
    }
    v36 = 1;
  }
LABEL_47:
  v37 = *(_OWORD **)a2;
  v38 = *(unsigned int *)(a2 + 8);
  v39 = *a4;
  v92 = a4[1];
  if (v36)
  {
    if ((_DWORD)v35)
    {
      if ((v35 & 0x80000000) == 0)
      {
        v41 = (_QWORD *)result;
        result = WTF::tryFastCompactMalloc((WTF *)(v35 + 20), &v94);
        v20 = v94;
        if (v94)
        {
          v42 = v94 + 5;
          *v94 = 2;
          v20[1] = v35;
          *((_QWORD *)v20 + 1) = v20 + 5;
          v20[4] = 4;
          if ((_DWORD)v38 == 1)
          {
            *v42 = *(_BYTE *)v37;
          }
          else if ((_DWORD)v38)
          {
            memcpy(v20 + 5, v37, v38);
          }
          v57 = &v42[v38];
          if (a3)
          {
            v58 = *(_BYTE **)(a3 + 8);
            v59 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              i = v41;
              if ((_DWORD)v59 == 1)
              {
                *v57 = *v58;
              }
              else if ((_DWORD)v59)
              {
                memcpy(v57, v58, v59);
              }
            }
            else
            {
              v85 = (unsigned __int128 *)&v57[v59];
              if (v59 < 0x10)
              {
                v86 = (unsigned __int128 *)&v42[v38];
              }
              else
              {
                v86 = (unsigned __int128 *)&v57[v59 & 0xFFFFFFF0];
                v87 = (unsigned __int128 *)&v42[v38];
                do
                {
                  v88 = (unsigned __int128)vld2q_s8(v58);
                  v58 += 32;
                  *v87++ = v88;
                }
                while (v87 != v86);
              }
              for (i = v41; v86 != v85; v86 = (unsigned __int128 *)((char *)v86 + 1))
              {
                v89 = *v58;
                v58 += 2;
                *(_BYTE *)v86 = v89;
              }
            }
            v60 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v60 = 0;
            i = v41;
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v57[v60], v39->i8, v92, a5, a6, a7, a8, a9);
        }
        goto LABEL_97;
      }
LABEL_98:
      v20 = 0;
      goto LABEL_97;
    }
LABEL_108:
    v20 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_97;
  }
  if (!(_DWORD)v35)
    goto LABEL_108;
  if (v35 > 0x7FFFFFEF)
    goto LABEL_98;
  v91 = (_QWORD *)result;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * v35 + 20), &v94);
  v20 = v94;
  if (v94)
  {
    v43 = (char *)(v94 + 5);
    *v94 = 2;
    v20[1] = v35;
    *((_QWORD *)v20 + 1) = v20 + 5;
    v20[4] = 0;
    v44 = (char *)v20 + 2 * v38 + 20;
    if ((v38 & 0xFFFFFFC0) != 0)
    {
      v45 = &v43[2 * (v38 & 0xFFFFFFC0)];
      v46 = 0uLL;
      do
      {
        v95.val[0] = (int8x16_t)*v37;
        v47 = *((int8x16_t *)v37 + 1);
        v98.val[0] = (int8x16_t)v37[2];
        v48 = v37[3];
        v37 += 4;
        v49 = v48;
        v98.val[1] = 0uLL;
        v101.val[0] = v47;
        v95.val[1] = 0uLL;
        v50 = v43;
        vst2q_s8(v50, v95);
        v50 += 32;
        v101.val[1] = 0uLL;
        vst2q_s8(v50, v101);
        v51 = v43 + 64;
        vst2q_s8(v51, v98);
        v52 = v43 + 96;
        vst2q_s8(v52, *(int8x16x2_t *)(&v46 - 1));
        v43 += 128;
      }
      while (v43 != v45);
      v43 = v45;
    }
    while (v43 != v44)
    {
      v53 = *(unsigned __int8 *)v37;
      v37 = (_OWORD *)((char *)v37 + 1);
      *(_WORD *)v43 = v53;
      v43 += 2;
    }
    if (a3)
    {
      v54 = *(int8x16_t **)(a3 + 8);
      v55 = *(unsigned int *)(a3 + 4);
      v56 = a6;
      if ((*(_BYTE *)(a3 + 16) & 4) != 0)
      {
        v61 = &v44[2 * v55];
        if (v55 >= 0x40)
        {
          v62 = &v44[2 * (v55 & 0xFFFFFFC0)];
          v64 = 0uLL;
          v65 = (uint64_t)v20 + 2 * v38 + 20;
          do
          {
            v96.val[0] = *v54;
            v66 = v54[1];
            v99.val[0] = v54[2];
            v67 = v54[3];
            v54 += 4;
            v68 = v67;
            v99.val[1] = 0uLL;
            v102.val[0] = v66;
            v96.val[1] = 0uLL;
            v69 = (char *)v65;
            vst2q_s8(v69, v96);
            v69 += 32;
            v102.val[1] = 0uLL;
            vst2q_s8(v69, v102);
            v70 = (char *)(v65 + 64);
            vst2q_s8(v70, v99);
            v71 = (char *)(v65 + 96);
            vst2q_s8(v71, *(int8x16x2_t *)(&v64 - 1));
            v65 += 128;
          }
          while ((char *)v65 != v62);
        }
        else
        {
          v62 = (char *)v20 + 2 * v38 + 20;
        }
        while (v62 != v61)
        {
          v72 = v54->u8[0];
          v54 = (int8x16_t *)((char *)v54 + 1);
          *(_WORD *)v62 = v72;
          v62 += 2;
        }
      }
      else if ((_DWORD)v55 == 1)
      {
        *(_WORD *)v44 = v54->i16[0];
      }
      else if ((_DWORD)v55)
      {
        memcpy((char *)v20 + 2 * v38 + 20, v54, 2 * v55);
      }
      v73 = *(unsigned int *)(a3 + 4);
    }
    else
    {
      v73 = 0;
      v56 = a6;
    }
    v74 = &v44[2 * v73];
    v75 = &v74[2 * v92];
    if ((v92 & 0xFFFFFFC0) != 0)
    {
      v76 = &v74[2 * (v92 & 0xFFFFFFC0)];
      v77 = 0uLL;
      i = v91;
      do
      {
        v97.val[0] = *v39;
        v78 = v39[1];
        v100.val[0] = v39[2];
        v79 = v39[3];
        v39 += 4;
        v80 = v79;
        v100.val[1] = 0uLL;
        v103.val[0] = v78;
        v97.val[1] = 0uLL;
        v81 = v74;
        vst2q_s8(v81, v97);
        v81 += 32;
        v103.val[1] = 0uLL;
        vst2q_s8(v81, v103);
        v82 = v74 + 64;
        vst2q_s8(v82, v100);
        v83 = v74 + 96;
        vst2q_s8(v83, *(int8x16x2_t *)(&v77 - 1));
        v74 += 128;
      }
      while (v74 != v76);
      v74 = v76;
    }
    else
    {
      i = v91;
    }
    while (v74 != v75)
    {
      v84 = v39->u8[0];
      v39 = (int8x16_t *)((char *)v39 + 1);
      *(_WORD *)v74 = v84;
      v74 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v75, a5, v56, a7, a8, a9);
  }
  else
  {
    i = v91;
  }
LABEL_97:
  *i = v20;
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(int **a1, int8x16_t **a2, uint64_t *a3, int8x16_t **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  int8x16_t **v33;
  uint64_t v34;
  int8x16_t **v35;
  int8x16_t *v36;
  size_t v37;
  int8x16_t *v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  _BYTE *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  char *v51;
  char *v52;
  char *v53;
  __int16 v54;
  uint64_t v55;
  int8x16_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  size_t v62;
  uint64_t i;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  size_t v68;
  int **v69;
  uint64_t v70;
  char *v71;
  char *v72;
  __int128 v73;
  char *v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  char *v78;
  char *v79;
  char *v80;
  __int16 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  __int128 v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  char *v94;
  char *v95;
  char *v96;
  __int16 v97;
  unsigned __int128 *v98;
  unsigned __int128 *v99;
  unsigned __int128 *v100;
  unsigned __int128 v101;
  unsigned __int128 *v102;
  unsigned __int128 *v103;
  unsigned __int128 *v104;
  unsigned __int128 v105;
  char v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v112;
  uint64_t v114;
  _DWORD *v116;
  int8x16x2_t v117;
  int8x16x2_t v118;
  int8x16x2_t v119;
  int8x16x2_t v120;
  int8x16x2_t v121;
  int8x16x2_t v122;
  int8x16x2_t v123;
  int8x16x2_t v124;
  int8x16x2_t v125;

  v16 = *((_DWORD *)a2 + 2);
  if (*a3)
    v17 = *(_DWORD *)(*a3 + 4);
  else
    v17 = 0;
  v18 = *((_DWORD *)a4 + 2);
  if (*a5)
    v19 = *(unsigned int *)(*a5 + 4);
  else
    v19 = 0;
  if (*a6)
    v20 = *(_DWORD *)(*a6 + 4);
  else
    v20 = 0;
  if (*a7)
    v21 = *(_DWORD *)(*a7 + 4);
  else
    v21 = 0;
  if (*a8)
    v22 = *(_DWORD *)(*a8 + 4);
  else
    v22 = 0;
  if (*a9)
    v23 = *(_DWORD *)(*a9 + 4);
  else
    v23 = 0;
  if (*a10)
    v24 = *(_DWORD *)(*a10 + 4);
  else
    v24 = 0;
  v25 = *a11;
  if (*a11)
    LODWORD(v25) = *(_DWORD *)(v25 + 4);
  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(v17, v18, v19, v20, v21, v22, v23, v24, (uint64_t)&v116, v25);
  if (v16 < 0)
    goto LABEL_98;
  if ((_BYTE)v116)
    goto LABEL_98;
  v27 = (v16 + HIDWORD(v116));
  if (__OFADD__(v16, HIDWORD(v116)))
    goto LABEL_98;
  v28 = *a3;
  if (v28 && (*(_BYTE *)(v28 + 16) & 4) == 0)
  {
    v29 = 0;
    v112 = *a5;
    v30 = a7;
    v31 = a9;
    v32 = a10;
    v33 = a4;
LABEL_36:
    v35 = a2;
    goto LABEL_37;
  }
  v34 = *a5;
  v30 = a7;
  v31 = a9;
  v32 = a10;
  v33 = a4;
  v112 = v34;
  if (v34 && (*(_BYTE *)(v34 + 16) & 4) == 0
    || *a6 && (*(_BYTE *)(*a6 + 16) & 4) == 0
    || *a7 && (*(_BYTE *)(*a7 + 16) & 4) == 0
    || *a8 && (*(_BYTE *)(*a8 + 16) & 4) == 0
    || *a9 && (*(_BYTE *)(*a9 + 16) & 4) == 0
    || *a10 && (*(_BYTE *)(*a10 + 16) & 4) == 0)
  {
    v29 = 0;
    goto LABEL_36;
  }
  v35 = a2;
  if (*a11)
    v29 = (*(unsigned __int8 *)(*a11 + 16) >> 2) & 1;
  else
    v29 = 1;
LABEL_37:
  v36 = *v35;
  v37 = *((unsigned int *)v35 + 2);
  v38 = *v33;
  v39 = *((unsigned int *)v33 + 2);
  v40 = *a6;
  v41 = *a11;
  v114 = *v30;
  v109 = *v31;
  v110 = *a8;
  v108 = *v32;
  if (!v29)
  {
    if ((_DWORD)v27)
    {
      if (v27 <= 0x7FFFFFEF)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(2 * v27 + 20), &v116);
        v42 = v116;
        if (v116)
        {
          v44 = (char *)(v116 + 5);
          *v116 = 2;
          v42[1] = v27;
          *((_QWORD *)v42 + 1) = v42 + 5;
          v42[4] = 0;
          v45 = (char *)v42 + 2 * v37 + 20;
          if ((v37 & 0xFFFFFFC0) != 0)
          {
            v46 = &v44[2 * (v37 & 0xFFFFFFC0)];
            v47 = 0uLL;
            do
            {
              v117.val[0] = *v36;
              v48 = v36[1];
              v120.val[0] = v36[2];
              v49 = v36[3];
              v36 += 4;
              v50 = v49;
              v120.val[1] = 0uLL;
              v123.val[0] = v48;
              v117.val[1] = 0uLL;
              v51 = v44;
              vst2q_s8(v51, v117);
              v51 += 32;
              v123.val[1] = 0uLL;
              vst2q_s8(v51, v123);
              v52 = v44 + 64;
              vst2q_s8(v52, v120);
              v53 = v44 + 96;
              vst2q_s8(v53, *(int8x16x2_t *)(&v47 - 1));
              v44 += 128;
            }
            while (v44 != v46);
            v44 = v46;
          }
          while (v44 != v45)
          {
            v54 = v36->u8[0];
            v36 = (int8x16_t *)((char *)v36 + 1);
            *(_WORD *)v44 = v54;
            v44 += 2;
          }
          v55 = v41;
          if (v28)
          {
            v56 = *(int8x16_t **)(v28 + 8);
            v57 = *(unsigned int *)(v28 + 4);
            v58 = v112;
            if ((*(_BYTE *)(v28 + 16) & 4) != 0)
            {
              v71 = &v45[2 * v57];
              if (v57 >= 0x40)
              {
                v72 = &v45[2 * (v57 & 0xFFFFFFC0)];
                v73 = 0uLL;
                v74 = v45;
                do
                {
                  v118.val[0] = *v56;
                  v75 = v56[1];
                  v121.val[0] = v56[2];
                  v76 = v56[3];
                  v56 += 4;
                  v77 = v76;
                  v121.val[1] = 0uLL;
                  v124.val[0] = v75;
                  v118.val[1] = 0uLL;
                  v78 = v74;
                  vst2q_s8(v78, v118);
                  v78 += 32;
                  v124.val[1] = 0uLL;
                  vst2q_s8(v78, v124);
                  v79 = v74 + 64;
                  vst2q_s8(v79, v121);
                  v80 = v74 + 96;
                  vst2q_s8(v80, *(int8x16x2_t *)(&v73 - 1));
                  v74 += 128;
                }
                while (v74 != v72);
              }
              else
              {
                v72 = v45;
              }
              while (v72 != v71)
              {
                v81 = v56->u8[0];
                v56 = (int8x16_t *)((char *)v56 + 1);
                *(_WORD *)v72 = v81;
                v72 += 2;
              }
            }
            else if ((_DWORD)v57 == 1)
            {
              *(_WORD *)v45 = v56->i16[0];
            }
            else if ((_DWORD)v57)
            {
              memcpy(v45, v56, 2 * v57);
            }
            v82 = *(unsigned int *)(v28 + 4);
          }
          else
          {
            v82 = 0;
            v58 = v112;
          }
          v83 = &v45[2 * v82];
          v84 = &v83[2 * v39];
          if ((v39 & 0xFFFFFFC0) != 0)
          {
            v89 = &v83[2 * (v39 & 0xFFFFFFC0)];
            v90 = 0uLL;
            v85 = v114;
            v87 = v109;
            v86 = v110;
            v88 = v108;
            do
            {
              v119.val[0] = *v38;
              v91 = v38[1];
              v122.val[0] = v38[2];
              v92 = v38[3];
              v38 += 4;
              v93 = v92;
              v122.val[1] = 0uLL;
              v125.val[0] = v91;
              v119.val[1] = 0uLL;
              v94 = v83;
              vst2q_s8(v94, v119);
              v94 += 32;
              v125.val[1] = 0uLL;
              vst2q_s8(v94, v125);
              v95 = v83 + 64;
              vst2q_s8(v95, v122);
              v96 = v83 + 96;
              vst2q_s8(v96, *(int8x16x2_t *)(&v90 - 1));
              v83 += 128;
            }
            while (v83 != v89);
            v83 = v89;
          }
          else
          {
            v85 = v114;
            v87 = v109;
            v86 = v110;
            v88 = v108;
          }
          while (v83 != v84)
          {
            v97 = v38->u8[0];
            v38 = (int8x16_t *)((char *)v38 + 1);
            *(_WORD *)v83 = v97;
            v83 += 2;
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v84, v58, v40, v85, v86, v87, v88, v55);
        }
        goto LABEL_94;
      }
      goto LABEL_98;
    }
LABEL_107:
    v42 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_94;
  }
  if (!(_DWORD)v27)
    goto LABEL_107;
  if ((v27 & 0x80000000) != 0)
  {
LABEL_98:
    v42 = 0;
    goto LABEL_94;
  }
  result = WTF::tryFastCompactMalloc((WTF *)(v27 + 20), &v116);
  v42 = v116;
  if (!v116)
  {
LABEL_94:
    v69 = a1;
    goto LABEL_95;
  }
  v43 = v116 + 5;
  *v116 = 2;
  v42[1] = v27;
  *((_QWORD *)v42 + 1) = v42 + 5;
  v42[4] = 4;
  if ((_DWORD)v37 == 1)
  {
    *v43 = v36->i8[0];
  }
  else if ((_DWORD)v37)
  {
    memcpy(v42 + 5, v36, v37);
  }
  v59 = v41;
  v60 = &v43[v37];
  if (v28)
  {
    v61 = *(_BYTE **)(v28 + 8);
    v62 = *(unsigned int *)(v28 + 4);
    i = v112;
    if ((*(_BYTE *)(v28 + 16) & 4) != 0)
    {
      if ((_DWORD)v62 == 1)
      {
        *v60 = *v61;
      }
      else if ((_DWORD)v62)
      {
        memcpy(v60, v61, v62);
      }
    }
    else
    {
      v98 = (unsigned __int128 *)&v60[v62];
      if (v62 < 0x10)
      {
        v99 = (unsigned __int128 *)v60;
      }
      else
      {
        v99 = (unsigned __int128 *)&v60[v62 & 0xFFFFFFF0];
        v100 = (unsigned __int128 *)v60;
        do
        {
          v101 = (unsigned __int128)vld2q_s8(v61);
          v61 += 32;
          *v100++ = v101;
        }
        while (v100 != v99);
      }
      for (i = v112; v99 != v98; v99 = (unsigned __int128 *)((char *)v99 + 1))
      {
        v106 = *v61;
        v61 += 2;
        *(_BYTE *)v99 = v106;
      }
    }
    v64 = *(unsigned int *)(v28 + 4);
  }
  else
  {
    v64 = 0;
    i = v112;
  }
  v65 = &v60[v64];
  if ((_DWORD)v39 == 1)
  {
    *v65 = v38->i8[0];
  }
  else if ((_DWORD)v39)
  {
    memcpy(v65, v38, v39);
  }
  v66 = &v65[v39];
  if (i)
  {
    v67 = *(_BYTE **)(i + 8);
    v68 = *(unsigned int *)(i + 4);
    v69 = a1;
    if ((*(_BYTE *)(i + 16) & 4) != 0)
    {
      if ((_DWORD)v68 == 1)
      {
        *v66 = *v67;
      }
      else if ((_DWORD)v68)
      {
        memcpy(v66, v67, v68);
      }
    }
    else
    {
      v102 = (unsigned __int128 *)&v66[v68];
      if (v68 < 0x10)
      {
        v103 = (unsigned __int128 *)v66;
      }
      else
      {
        v103 = (unsigned __int128 *)&v66[v68 & 0xFFFFFFF0];
        v104 = (unsigned __int128 *)v66;
        do
        {
          v105 = (unsigned __int128)vld2q_s8(v67);
          v67 += 32;
          *v104++ = v105;
        }
        while (v104 != v103);
      }
      for (i = v112; v103 != v102; v103 = (unsigned __int128 *)((char *)v103 + 1))
      {
        v107 = *v67;
        v67 += 2;
        *(_BYTE *)v103 = v107;
      }
    }
    v70 = *(unsigned int *)(i + 4);
  }
  else
  {
    v70 = 0;
    v69 = a1;
  }
  result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v66[v70], v40, v114, v110, v109, v108, v59);
LABEL_95:
  *v69 = v42;
  return result;
}

__n128 WTF::Vector<JSC::Wasm::GlobalInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::GlobalInformation>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v3 = WTF::Vector<WTF::Dominators<JSC::B3::BackwardsCFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12);
  v6 = *(_OWORD *)(v3 + 16);
  result = *(__n128 *)(v3 + 32);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  *(_OWORD *)(v4 + 16) = v6;
  *(__n128 *)(v4 + 32) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t JSC::Wasm::Import::Import(uint64_t a1, uint64_t a2)
{
  WTF *v4;
  void *v5;
  WTF *v6;
  void *v7;

  v4 = (WTF *)*(unsigned int *)(a2 + 12);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = (_DWORD)v4;
  if ((_DWORD)v4)
  {
    v5 = (void *)WTF::fastMalloc(v4);
    *(_DWORD *)(a1 + 8) = (_DWORD)v4;
    *(_QWORD *)a1 = v5;
    memcpy(v5, *(const void **)a2, *(unsigned int *)(a2 + 12));
  }
  v6 = (WTF *)*(unsigned int *)(a2 + 28);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = (_DWORD)v6;
  if ((_DWORD)v6)
  {
    v7 = (void *)WTF::fastMalloc(v6);
    *(_DWORD *)(a1 + 24) = (_DWORD)v6;
    *(_QWORD *)(a1 + 16) = v7;
    memcpy(v7, *(const void **)(a2 + 16), *(unsigned int *)(a2 + 28));
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

const void **WTF::Vector<JSC::Wasm::Import,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Import>(uint64_t a1, unint64_t a2)
{
  const void **result;
  const void **v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  void *v13;

  result = (const void **)WTF::Vector<JSC::Wasm::Import,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = result;
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a1 + 40 * v5;
  v8 = (WTF *)*((unsigned int *)result + 3);
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_DWORD *)(v7 + 12) = (_DWORD)v8;
  if ((_DWORD)v8)
  {
    v9 = (void *)WTF::fastMalloc(v8);
    *(_DWORD *)(v7 + 8) = (_DWORD)v8;
    *(_QWORD *)v7 = v9;
    result = (const void **)memcpy(v9, *v4, *((unsigned int *)v4 + 3));
  }
  v10 = v6 + 40 * v5;
  v11 = (WTF *)*((unsigned int *)v4 + 7);
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  v12 = v10 + 16;
  *(_DWORD *)(v12 + 12) = (_DWORD)v11;
  if ((_DWORD)v11)
  {
    v13 = (void *)WTF::fastMalloc(v11);
    *(_DWORD *)(v6 + 40 * v5 + 24) = (_DWORD)v11;
    *(_QWORD *)v12 = v13;
    result = (const void **)memcpy(v13, v4[2], *((unsigned int *)v4 + 7));
  }
  *(_QWORD *)(v6 + 40 * v5 + 32) = v4[4];
  ++*(_DWORD *)(a1 + 12);
  return result;
}

char *WTF::Vector<JSC::Wasm::Import,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = a3;
  v5 = *(char **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = &v5[40 * *(unsigned int *)(a1 + 12)], (unint64_t)v6 <= a3))
  {
    v25 = *(unsigned int *)(a1 + 8);
    v26 = v25 + (v25 >> 2);
    if (v26 >= 0x10)
      v27 = v26 + 1;
    else
      v27 = 16;
    if (v27 <= a2)
      v27 = a2;
    if (v27 > v25)
    {
      if (v27 >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x198E2F904);
      }
      v28 = &v5[40 * *(unsigned int *)(a1 + 12)];
      v29 = 40 * v27;
      v30 = WTF::fastMalloc((WTF *)(40 * v27));
      *(_DWORD *)(a1 + 8) = (v29 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v30;
      WTF::VectorMover<false,JSC::Wasm::Import>::move(v5, v28, v30, v31, v32, v33, v34, v35);
      if (v5)
      {
        if (*(char **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v5, v36, v37, v38, v39, v40, v41, v42);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v9 = a2;
    if (v9 <= v7)
    {
      v24 = *(char **)a1;
    }
    else
    {
      if (v9 >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x198E2F90CLL);
      }
      v10 = 40 * v9;
      v11 = WTF::fastMalloc((WTF *)(40 * v9));
      *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,JSC::Wasm::Import>::move(v5, v6, v11, v12, v13, v14, v15, v16);
      v24 = *(char **)a1;
      if (v5)
      {
        if (v24 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v5, v17, v18, v19, v20, v21, v22, v23);
        v24 = *(char **)a1;
      }
    }
    return &v24[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
  }
  return (char *)v3;
}

void WTF::VectorMover<false,JSC::Wasm::Import>::move(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  char *v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;

  if (a1 != a2)
  {
    v11 = 0;
    do
    {
      v12 = &a1[v11];
      v13 = (WTF *)*(unsigned int *)&a1[v11 + 12];
      v14 = a3 + v11;
      *(_QWORD *)v14 = 0;
      *(_QWORD *)(v14 + 8) = 0;
      *(_DWORD *)(v14 + 12) = (_DWORD)v13;
      if ((_DWORD)v13)
      {
        v15 = (void *)WTF::fastMalloc(v13);
        *(_DWORD *)(v14 + 8) = (_DWORD)v13;
        *(_QWORD *)v14 = v15;
        memcpy(v15, *(const void **)&a1[v11], *((unsigned int *)v12 + 3));
      }
      v16 = (WTF *)*((unsigned int *)v12 + 7);
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v14 + 24) = 0;
      v17 = v14 + 16;
      *(_DWORD *)(v17 + 12) = (_DWORD)v16;
      if ((_DWORD)v16)
      {
        v18 = (void *)WTF::fastMalloc(v16);
        *(_DWORD *)(a3 + v11 + 24) = (_DWORD)v16;
        *(_QWORD *)v17 = v18;
        memcpy(v18, *(const void **)&a1[v11 + 16], *((unsigned int *)v12 + 7));
      }
      v19 = &a1[v11];
      *(_QWORD *)(a3 + v11 + 32) = *(_QWORD *)&a1[v11 + 32];
      v20 = *(_QWORD *)&a1[v11 + 16];
      if (v20)
      {
        *((_QWORD *)v19 + 2) = 0;
        *((_DWORD *)v19 + 6) = 0;
        WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
      }
      v21 = *(_QWORD *)&a1[v11];
      if (v21)
      {
        v22 = &a1[v11];
        *(_QWORD *)v22 = 0;
        *((_DWORD *)v22 + 2) = 0;
        WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
      }
      v11 += 40;
    }
    while (&a1[v11] != a2);
  }
}

__n128 WTF::Vector<JSC::Wasm::FunctionData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::FunctionData>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  uint64_t v4;
  __n128 result;
  unint64_t v6;

  v3 = (__n128 *)WTF::Vector<JSC::Wasm::FunctionData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 12);
  result = *v3;
  *(__n128 *)v4 = *v3;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v6 = v3[1].n128_u64[0];
  v3[1].n128_u64[0] = 0;
  *(_QWORD *)(v4 + 16) = v6;
  LODWORD(v6) = v3[1].n128_u32[2];
  v3[1].n128_u32[2] = 0;
  *(_DWORD *)(v4 + 24) = v6;
  LODWORD(v6) = v3[1].n128_u32[3];
  v3[1].n128_u32[3] = 0;
  *(_DWORD *)(v4 + 28) = v6;
  *(_BYTE *)(v4 + 32) = v3[2].n128_u8[0];
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::Wasm::FunctionData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<JSC::Wasm::FunctionData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<JSC::Wasm::FunctionData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::Wasm::FunctionData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(unsigned int *)(a1 + 12);
      v5 = 40 * a2;
      v6 = WTF::fastMalloc((WTF *)(40 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v4)
      {
        v14 = v6;
        v15 = 40 * v4;
        v16 = v3 + 16;
        do
        {
          *(_OWORD *)v14 = *(_OWORD *)(v16 - 16);
          *(_QWORD *)(v14 + 16) = 0;
          *(_QWORD *)(v14 + 24) = 0;
          v17 = *(_QWORD *)v16;
          *(_QWORD *)v16 = 0;
          *(_QWORD *)(v14 + 16) = v17;
          LODWORD(v17) = *(_DWORD *)(v16 + 8);
          *(_DWORD *)(v16 + 8) = 0;
          *(_DWORD *)(v14 + 24) = v17;
          LODWORD(v17) = *(_DWORD *)(v16 + 12);
          *(_DWORD *)(v16 + 12) = 0;
          *(_DWORD *)(v14 + 28) = v17;
          *(_BYTE *)(v14 + 32) = *(_BYTE *)(v16 + 16);
          v18 = *(_QWORD *)v16;
          if (*(_QWORD *)v16)
          {
            *(_QWORD *)v16 = 0;
            *(_DWORD *)(v16 + 8) = 0;
            WTF::fastFree(v18, v7, v8, v9, v10, v11, v12, v13);
          }
          v16 += 40;
          v14 += 40;
          v15 -= 40;
        }
        while (v15);
      }
      if (v3)
      {
        if (*(_QWORD *)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, int **a8@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v8 = a1[1];
  if (v8)
  {
    --v8;
    v22 = *a1;
    if (v8 >> 31)
      goto LABEL_17;
  }
  else
  {
    v22 = *a1;
  }
  v23 = v8;
  v21 = *a2;
  v9 = a3[1];
  if (v9)
  {
    --v9;
    v19 = *a3;
    if (v9 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198E2FD38);
    }
  }
  else
  {
    v19 = *a3;
  }
  v20 = v9;
  v18 = *a4;
  v10 = a5[1];
  if (v10)
  {
    --v10;
    v16 = *a5;
    if (v10 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198E2FD68);
    }
  }
  else
  {
    v16 = *a5;
  }
  v17 = v10;
  v15 = *a6;
  v11 = a7[1];
  if (v11)
  {
    --v11;
    v13 = *a7;
    if (!(v11 >> 31))
      goto LABEL_9;
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x198E2FD08);
  }
  v13 = *a7;
LABEL_9:
  v14 = v11;
  return WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((uint64_t)&v22, &v21, (uint64_t)&v19, &v18, (uint64_t)&v16, &v15, (uint64_t)&v13, a8);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, int **a8@<X8>)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  BOOL v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  char v29;
  uint64_t v30;
  _BOOL4 v31;

  v9 = *a2;
  if (*a2)
    v10 = *(_DWORD *)(v9 + 4);
  else
    v10 = 0;
  v11 = *a4;
  if (*a4)
    v12 = *(_DWORD *)(v11 + 4);
  else
    v12 = 0;
  v13 = *a6;
  if (*a6)
    v14 = *(_DWORD *)(v13 + 4);
  else
    v14 = 0;
  v15 = *(_DWORD *)(a7 + 8);
  if ((v15 | v14) < 0)
    goto LABEL_44;
  v16 = *(_DWORD *)(a5 + 8);
  v17 = __OFADD__(v14, v15);
  v18 = v14 + v15;
  v19 = v17;
  if (v16 < 0 || v19)
    goto LABEL_44;
  v17 = __OFADD__(v16, v18);
  v20 = v16 + v18;
  v21 = v17;
  if (v12 < 0 || v21)
    goto LABEL_44;
  v22 = *(_DWORD *)(a3 + 8);
  v17 = __OFADD__(v12, v20);
  v23 = v12 + v20;
  v24 = v17;
  if (v22 < 0 || v24)
    goto LABEL_44;
  v17 = __OFADD__(v22, v23);
  v25 = v22 + v23;
  v26 = v17;
  if (v10 < 0
    || v26
    || ((v27 = *(_DWORD *)(result + 8), v17 = __OFADD__(v10, v25), v28 = v10 + v25, !v17) ? (v29 = 0) : (v29 = 1),
        v27 < 0 || (v29 & 1) != 0 || (v17 = __OFADD__(v27, v28), v30 = (v27 + v28), v17)))
  {
LABEL_44:
    *a8 = 0;
  }
  else
  {
    v31 = (!v9 || (*(_BYTE *)(v9 + 16) & 4) != 0)
       && (!v11 || (*(_BYTE *)(v11 + 16) & 4) != 0)
       && (!v13 || (*(_BYTE *)(v13 + 16) & 4) != 0);
    return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v30, v31, *(_OWORD **)result, *(_QWORD *)(result + 8), v9, *(int8x16_t **)a3, *(_QWORD *)(a3 + 8), v11, a8, *(int8x16_t **)a5, *(_QWORD *)(a5 + 8), v13, *(int8x16_t **)a7, *(_QWORD *)(a7 + 8));
  }
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, int8x16_t *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, int **a9@<X8>, int8x16_t *a10, unsigned int a11, uint64_t a12, int8x16_t *a13, uint64_t a14)
{
  int v19;
  int **i;
  int *v23;
  _BYTE *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  int8x16_t v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  char *v34;
  __int16 v35;
  _BYTE *v36;
  _BYTE *v37;
  size_t v38;
  uint64_t v39;
  _BYTE *v40;
  unsigned __int128 *v41;
  unsigned __int128 *v42;
  unsigned __int128 *v43;
  unsigned __int128 v44;
  char v45;
  _DWORD *v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;

  v19 = result;
  i = a9;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v47);
        v23 = v47;
        if (v47)
        {
          v24 = v47 + 5;
          *v47 = 2;
          v23[1] = v19;
          *((_QWORD *)v23 + 1) = v23 + 5;
          v23[4] = 4;
          if (a4 == 1)
          {
            *v24 = *(_BYTE *)a3;
          }
          else if (a4)
          {
            memcpy(v23 + 5, a3, a4);
          }
          v36 = &v24[a4];
          if (a5)
          {
            v37 = *(_BYTE **)(a5 + 8);
            v38 = *(unsigned int *)(a5 + 4);
            if ((*(_BYTE *)(a5 + 16) & 4) != 0)
            {
              i = a9;
              if ((_DWORD)v38 == 1)
              {
                *v36 = *v37;
              }
              else if ((_DWORD)v38)
              {
                memcpy(v36, v37, v38);
              }
            }
            else
            {
              v41 = (unsigned __int128 *)&v36[v38];
              if (v38 < 0x10)
              {
                v42 = (unsigned __int128 *)&v24[a4];
              }
              else
              {
                v42 = (unsigned __int128 *)&v36[v38 & 0xFFFFFFF0];
                v43 = (unsigned __int128 *)&v24[a4];
                do
                {
                  v44 = (unsigned __int128)vld2q_s8(v37);
                  v37 += 32;
                  *v43++ = v44;
                }
                while (v43 != v42);
              }
              for (i = a9; v42 != v41; v42 = (unsigned __int128 *)((char *)v42 + 1))
              {
                v45 = *v37;
                v37 += 2;
                *(_BYTE *)v42 = v45;
              }
            }
            v39 = *(unsigned int *)(a5 + 4);
          }
          else
          {
            v39 = 0;
            i = a9;
          }
          v40 = &v36[v39];
          if (a7 == 1)
          {
            *v40 = a6->i8[0];
          }
          else if (a7)
          {
            memcpy(v40, a6, a7);
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v40[a7], a8, a10->i8, a11, a12, a13->i8, a14);
        }
        goto LABEL_31;
      }
LABEL_33:
      v23 = 0;
      goto LABEL_31;
    }
LABEL_32:
    v23 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_31;
  }
  if (!(_DWORD)result)
    goto LABEL_32;
  if (result > 0x7FFFFFEF)
    goto LABEL_33;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v47);
  v23 = v47;
  if (v47)
  {
    v25 = (char *)(v47 + 5);
    *v47 = 2;
    v23[1] = v19;
    *((_QWORD *)v23 + 1) = v23 + 5;
    v23[4] = 0;
    v26 = (char *)v23 + 2 * a4 + 20;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v27 = &v25[2 * (a4 & 0xFFFFFFC0)];
      v28 = 0uLL;
      do
      {
        v48.val[0] = (int8x16_t)*a3;
        v29 = *((int8x16_t *)a3 + 1);
        v49.val[0] = (int8x16_t)a3[2];
        v30 = a3[3];
        a3 += 4;
        v31 = v30;
        v49.val[1] = 0uLL;
        v50.val[0] = v29;
        v48.val[1] = 0uLL;
        v32 = v25;
        vst2q_s8(v32, v48);
        v32 += 32;
        v50.val[1] = 0uLL;
        vst2q_s8(v32, v50);
        v33 = v25 + 64;
        vst2q_s8(v33, v49);
        v34 = v25 + 96;
        vst2q_s8(v34, *(int8x16x2_t *)(&v28 - 1));
        v25 += 128;
      }
      while (v25 != v27);
      v25 = v27;
    }
    while (v25 != v26)
    {
      v35 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v25 = v35;
      v25 += 2;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v26, a5, a6, a7, a8, a10, a11, a12, a13, a14);
  }
LABEL_31:
  *i = v23;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *__dst, uint64_t a2, int8x16_t *a3, int a4, uint64_t a5, int8x16_t *a6, int a7, uint64_t a8, int8x16_t *a9, uint64_t a10)
{
  int8x16_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int16 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int16 v42;
  int8x16_t *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  char *v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  char *v52;
  char *v53;
  char *v54;
  __int16 v55;
  uint64_t v56;
  int8x16x2_t v58;
  int8x16x2_t v59;
  int8x16x2_t v60;
  int8x16x2_t v61;
  int8x16x2_t v62;
  int8x16x2_t v63;
  int8x16x2_t v64;
  int8x16x2_t v65;
  int8x16x2_t v66;

  if (a2)
  {
    v18 = *(int8x16_t **)(a2 + 8);
    v19 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      v20 = &__dst[2 * v19];
      if (v19 >= 0x40)
      {
        v21 = &__dst[2 * (v19 & 0xFFFFFFC0)];
        v22 = 0uLL;
        v23 = __dst;
        do
        {
          v58.val[0] = *v18;
          v24 = v18[1];
          v61.val[0] = v18[2];
          v25 = v18[3];
          v18 += 4;
          v26 = v25;
          v61.val[1] = 0uLL;
          v64.val[0] = v24;
          v58.val[1] = 0uLL;
          v27 = v23;
          vst2q_s8(v27, v58);
          v27 += 32;
          v64.val[1] = 0uLL;
          vst2q_s8(v27, v64);
          v28 = v23 + 64;
          vst2q_s8(v28, v61);
          v29 = v23 + 96;
          vst2q_s8(v29, *(int8x16x2_t *)(&v22 - 1));
          v23 += 128;
        }
        while (v23 != v21);
      }
      else
      {
        v21 = __dst;
      }
      while (v21 != v20)
      {
        v30 = v18->u8[0];
        v18 = (int8x16_t *)((char *)v18 + 1);
        *(_WORD *)v21 = v30;
        v21 += 2;
      }
    }
    else if ((_DWORD)v19 == 1)
    {
      *(_WORD *)__dst = v18->i16[0];
    }
    else if ((_DWORD)v19)
    {
      memcpy(__dst, v18, 2 * v19);
    }
    v31 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v31 = 0;
  }
  v32 = &__dst[2 * v31];
  v33 = &v32[2 * a4];
  if ((a4 & 0xFFFFFFC0) != 0)
  {
    v34 = &v32[2 * (a4 & 0xFFFFFFC0)];
    v35 = 0uLL;
    do
    {
      v59.val[0] = *a3;
      v36 = a3[1];
      v62.val[0] = a3[2];
      v37 = a3[3];
      a3 += 4;
      v38 = v37;
      v62.val[1] = 0uLL;
      v65.val[0] = v36;
      v59.val[1] = 0uLL;
      v39 = v32;
      vst2q_s8(v39, v59);
      v39 += 32;
      v65.val[1] = 0uLL;
      vst2q_s8(v39, v65);
      v40 = v32 + 64;
      vst2q_s8(v40, v62);
      v41 = v32 + 96;
      vst2q_s8(v41, *(int8x16x2_t *)(&v35 - 1));
      v32 += 128;
    }
    while (v32 != v34);
    v32 = v34;
  }
  while (v32 != v33)
  {
    v42 = a3->u8[0];
    a3 = (int8x16_t *)((char *)a3 + 1);
    *(_WORD *)v32 = v42;
    v32 += 2;
  }
  if (a5)
  {
    v43 = *(int8x16_t **)(a5 + 8);
    v44 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      v45 = &v33[2 * v44];
      if (v44 >= 0x40)
      {
        v46 = &v33[2 * (v44 & 0xFFFFFFC0)];
        v47 = 0uLL;
        v48 = v33;
        do
        {
          v60.val[0] = *v43;
          v49 = v43[1];
          v63.val[0] = v43[2];
          v50 = v43[3];
          v43 += 4;
          v51 = v50;
          v63.val[1] = 0uLL;
          v66.val[0] = v49;
          v60.val[1] = 0uLL;
          v52 = v48;
          vst2q_s8(v52, v60);
          v52 += 32;
          v66.val[1] = 0uLL;
          vst2q_s8(v52, v66);
          v53 = v48 + 64;
          vst2q_s8(v53, v63);
          v54 = v48 + 96;
          vst2q_s8(v54, *(int8x16x2_t *)(&v47 - 1));
          v48 += 128;
        }
        while (v48 != v46);
      }
      else
      {
        v46 = v33;
      }
      while (v46 != v45)
      {
        v55 = v43->u8[0];
        v43 = (int8x16_t *)((char *)v43 + 1);
        *(_WORD *)v46 = v55;
        v46 += 2;
      }
    }
    else if ((_DWORD)v44 == 1)
    {
      *(_WORD *)v33 = v43->i16[0];
    }
    else if ((_DWORD)v44)
    {
      memcpy(v33, v43, 2 * v44);
    }
    v56 = *(unsigned int *)(a5 + 4);
  }
  else
  {
    v56 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v33[2 * v56], a6, a7, a8, a9, a10);
}

__n128 WTF::Vector<JSC::Wasm::TableInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::TableInformation>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v3 = WTF::Vector<JSC::Wasm::TableInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 12);
  v6 = *(_OWORD *)(v3 + 16);
  result = *(__n128 *)(v3 + 32);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  *(_OWORD *)(v4 + 16) = v6;
  *(__n128 *)(v4 + 32) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::Wasm::TableInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 48 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::Wasm::TableInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::Wasm::TableInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::Wasm::TableInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  _OWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(unsigned int *)(a1 + 12);
      v5 = 48 * a2;
      v6 = (_OWORD *)WTF::fastMalloc((WTF *)(48 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x30;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v4)
      {
        v14 = 48 * v4;
        v15 = (__int128 *)v3;
        do
        {
          v16 = *v15;
          v17 = v15[2];
          v6[1] = v15[1];
          v6[2] = v17;
          *v6 = v16;
          v6 += 3;
          v15 += 3;
          v14 -= 48;
        }
        while (v14);
      }
      if (v3)
      {
        if (*(_QWORD *)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t WTF::Vector<JSC::Wasm::GlobalInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *(unsigned int *)(a1 + 12);
    result = WTF::VectorBufferBase<JSC::Wasm::GlobalInformation,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)1>(a1, a2);
    if (!(_DWORD)result)
      return result;
    if ((_DWORD)v4)
    {
      v13 = *(_OWORD **)a1;
      v14 = 48 * v4;
      v15 = (__int128 *)v3;
      do
      {
        v16 = *v15;
        v17 = v15[2];
        v13[1] = v15[1];
        v13[2] = v17;
        *v13 = v16;
        v13 += 3;
        v15 += 3;
        v14 -= 48;
      }
      while (v14);
    }
    if (v3)
    {
      if (*(_QWORD *)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  return 1;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>(int **a1, int8x16_t *a2, uint64_t a3, uint64_t a4, int8x16_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  size_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t result;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int16 v46;
  int8x16_t *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  char *v56;
  char *v57;
  char *v58;
  __int16 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  char *v68;
  char *v69;
  char *v70;
  __int16 v71;
  int8x16_t *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  __int128 v76;
  char *v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  char *v81;
  char *v82;
  char *v83;
  __int16 v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  _BYTE *v88;
  size_t v89;
  uint64_t v90;
  unsigned __int128 *v91;
  unsigned __int128 *v92;
  unsigned __int128 v93;
  char v94;
  uint64_t v95;
  int **v96;
  unsigned int v97;
  char v98[4];
  unsigned int v99;
  _DWORD *v100;
  int8x16x2_t v101;
  int8x16x2_t v102;
  int8x16x2_t v103;
  int8x16x2_t v104;
  int8x16x2_t v105;
  int8x16x2_t v106;
  int8x16x2_t v107;
  int8x16x2_t v108;
  int8x16x2_t v109;
  int8x16x2_t v110;
  int8x16x2_t v111;
  int8x16x2_t v112;

  if (a3)
  {
    v20 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198E30C20);
    }
  }
  else
  {
    v20 = 0;
  }
  if (a6)
  {
    v21 = a6 - 1;
    if ((unint64_t)(a6 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198E30C50);
    }
  }
  else
  {
    v21 = 0;
  }
  if (a4)
    v22 = *(_DWORD *)(a4 + 4);
  else
    v22 = 0;
  if (a7)
    v23 = *(_DWORD *)(a7 + 4);
  else
    v23 = 0;
  if (a8)
    v24 = *(unsigned int *)(a8 + 4);
  else
    v24 = 0;
  if (a9)
    v25 = *(_DWORD *)(a9 + 4);
  else
    v25 = 0;
  if (a10)
    v26 = *(_DWORD *)(a10 + 4);
  else
    v26 = 0;
  if (a11)
    v27 = *(_DWORD *)(a11 + 4);
  else
    v27 = 0;
  v28 = a14;
  v29 = a12;
  if (a12)
    v29 = *(_DWORD *)(a12 + 4);
  if (a13)
    v30 = *(_DWORD *)(a13 + 4);
  else
    v30 = 0;
  if (a14)
    v31 = *(_DWORD *)(a14 + 4);
  else
    v31 = 0;
  result = WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(v20, v22, v21, v23, v24, v25, v26, v27, (uint64_t)v98, v29, v30, v31);
  if (!v98[0])
  {
    v96 = a1;
    v97 = v21;
    v95 = a8;
    if (a4 && (*(_BYTE *)(a4 + 16) & 4) == 0
      || a7 && (*(_BYTE *)(a7 + 16) & 4) == 0
      || a8 && (*(_BYTE *)(a8 + 16) & 4) == 0
      || a9 && (*(_BYTE *)(a9 + 16) & 4) == 0
      || a10 && (*(_BYTE *)(a10 + 16) & 4) == 0
      || a11 && (*(_BYTE *)(a11 + 16) & 4) == 0
      || a12 && (*(_BYTE *)(a12 + 16) & 4) == 0
      || a13 && (*(_BYTE *)(a13 + 16) & 4) == 0)
    {
      v34 = v99;
      goto LABEL_42;
    }
    if (a14)
    {
      v34 = v99;
      if ((*(_BYTE *)(a14 + 16) & 4) == 0)
      {
LABEL_42:
        if ((_DWORD)v34)
        {
          if (v34 <= 0x7FFFFFEF)
          {
            result = WTF::tryFastCompactMalloc((WTF *)(2 * v34 + 20), &v100);
            v33 = v100;
            if (v100)
            {
              v35 = (char *)(v100 + 5);
              *v100 = 2;
              v33[1] = v34;
              *((_QWORD *)v33 + 1) = v33 + 5;
              v33[4] = 0;
              v36 = (char *)v33 + 2 * v20 + 20;
              v37 = v21;
              if ((v20 & 0x7FFFFFC0) != 0)
              {
                v38 = &v35[2 * (v20 & 0x7FFFFFC0)];
                v39 = 0uLL;
                do
                {
                  v101.val[0] = *a2;
                  v40 = a2[1];
                  v105.val[0] = a2[2];
                  v41 = a2[3];
                  a2 += 4;
                  v42 = v41;
                  v105.val[1] = 0uLL;
                  v109.val[0] = v40;
                  v101.val[1] = 0uLL;
                  v43 = v35;
                  vst2q_s8(v43, v101);
                  v43 += 32;
                  v109.val[1] = 0uLL;
                  vst2q_s8(v43, v109);
                  v44 = v35 + 64;
                  vst2q_s8(v44, v105);
                  v45 = v35 + 96;
                  vst2q_s8(v45, *(int8x16x2_t *)(&v39 - 1));
                  v35 += 128;
                }
                while (v35 != v38);
                v35 = v38;
              }
              while (v35 != v36)
              {
                v46 = a2->u8[0];
                a2 = (int8x16_t *)((char *)a2 + 1);
                *(_WORD *)v35 = v46;
                v35 += 2;
              }
              if (a4)
              {
                v47 = *(int8x16_t **)(a4 + 8);
                v48 = *(unsigned int *)(a4 + 4);
                if ((*(_BYTE *)(a4 + 16) & 4) != 0)
                {
                  v49 = &v36[2 * v48];
                  if (v48 >= 0x40)
                  {
                    v50 = &v36[2 * (v48 & 0xFFFFFFC0)];
                    v51 = 0uLL;
                    v52 = (uint64_t)v33 + 2 * v20 + 20;
                    do
                    {
                      v102.val[0] = *v47;
                      v53 = v47[1];
                      v106.val[0] = v47[2];
                      v54 = v47[3];
                      v47 += 4;
                      v55 = v54;
                      v106.val[1] = 0uLL;
                      v110.val[0] = v53;
                      v102.val[1] = 0uLL;
                      v56 = (char *)v52;
                      vst2q_s8(v56, v102);
                      v56 += 32;
                      v110.val[1] = 0uLL;
                      vst2q_s8(v56, v110);
                      v57 = (char *)(v52 + 64);
                      vst2q_s8(v57, v106);
                      v58 = (char *)(v52 + 96);
                      vst2q_s8(v58, *(int8x16x2_t *)(&v51 - 1));
                      v52 += 128;
                    }
                    while ((char *)v52 != v50);
                  }
                  else
                  {
                    v50 = (char *)v33 + 2 * v20 + 20;
                  }
                  while (v50 != v49)
                  {
                    v59 = v47->u8[0];
                    v47 = (int8x16_t *)((char *)v47 + 1);
                    *(_WORD *)v50 = v59;
                    v50 += 2;
                  }
                }
                else if ((_DWORD)v48 == 1)
                {
                  *(_WORD *)v36 = v47->i16[0];
                }
                else if ((_DWORD)v48)
                {
                  memcpy((char *)v33 + 2 * v20 + 20, v47, 2 * v48);
                  v37 = v21;
                }
                v60 = *(unsigned int *)(a4 + 4);
              }
              else
              {
                v60 = 0;
              }
              v61 = &v36[2 * v60];
              v62 = &v61[2 * v37];
              if ((v37 & 0x7FFFFFC0) != 0)
              {
                v63 = &v61[2 * (v37 & 0x7FFFFFC0)];
                v64 = 0uLL;
                do
                {
                  v103.val[0] = *a5;
                  v65 = a5[1];
                  v107.val[0] = a5[2];
                  v66 = a5[3];
                  a5 += 4;
                  v67 = v66;
                  v107.val[1] = 0uLL;
                  v111.val[0] = v65;
                  v103.val[1] = 0uLL;
                  v68 = v61;
                  vst2q_s8(v68, v103);
                  v68 += 32;
                  v111.val[1] = 0uLL;
                  vst2q_s8(v68, v111);
                  v69 = v61 + 64;
                  vst2q_s8(v69, v107);
                  v70 = v61 + 96;
                  vst2q_s8(v70, *(int8x16x2_t *)(&v64 - 1));
                  v61 += 128;
                }
                while (v61 != v63);
                v61 = v63;
              }
              while (v61 != v62)
              {
                v71 = a5->u8[0];
                a5 = (int8x16_t *)((char *)a5 + 1);
                *(_WORD *)v61 = v71;
                v61 += 2;
              }
              if (a7)
              {
                v72 = *(int8x16_t **)(a7 + 8);
                v73 = *(unsigned int *)(a7 + 4);
                if ((*(_BYTE *)(a7 + 16) & 4) != 0)
                {
                  v74 = &v62[2 * v73];
                  if (v73 >= 0x40)
                  {
                    v75 = &v62[2 * (v73 & 0xFFFFFFC0)];
                    v76 = 0uLL;
                    v77 = v62;
                    do
                    {
                      v104.val[0] = *v72;
                      v78 = v72[1];
                      v108.val[0] = v72[2];
                      v79 = v72[3];
                      v72 += 4;
                      v80 = v79;
                      v108.val[1] = 0uLL;
                      v112.val[0] = v78;
                      v104.val[1] = 0uLL;
                      v81 = v77;
                      vst2q_s8(v81, v104);
                      v81 += 32;
                      v112.val[1] = 0uLL;
                      vst2q_s8(v81, v112);
                      v82 = v77 + 64;
                      vst2q_s8(v82, v108);
                      v83 = v77 + 96;
                      vst2q_s8(v83, *(int8x16x2_t *)(&v76 - 1));
                      v77 += 128;
                    }
                    while (v77 != v75);
                  }
                  else
                  {
                    v75 = v62;
                  }
                  while (v75 != v74)
                  {
                    v84 = v72->u8[0];
                    v72 = (int8x16_t *)((char *)v72 + 1);
                    *(_WORD *)v75 = v84;
                    v75 += 2;
                  }
                }
                else if ((_DWORD)v73 == 1)
                {
                  *(_WORD *)v62 = v72->i16[0];
                }
                else if ((_DWORD)v73)
                {
                  memcpy(v62, v72, 2 * v73);
                }
                v85 = *(unsigned int *)(a7 + 4);
              }
              else
              {
                v85 = 0;
              }
              result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v62[2 * v85], v95, a9, a10, a11, a12, a13, a14);
            }
            goto LABEL_84;
          }
          goto LABEL_117;
        }
LABEL_118:
        v33 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        goto LABEL_84;
      }
      if (!v99)
        goto LABEL_118;
      if ((v99 & 0x80000000) == 0)
      {
LABEL_90:
        result = WTF::tryFastCompactMalloc((WTF *)(v34 + 20), &v100);
        v33 = v100;
        if (v100)
        {
          v86 = v100 + 5;
          *v100 = 2;
          v33[1] = v34;
          *((_QWORD *)v33 + 1) = v33 + 5;
          v33[4] = 4;
          if ((_DWORD)v20 == 1)
          {
            *v86 = a2->i8[0];
          }
          else if ((_DWORD)v20)
          {
            memcpy(v33 + 5, a2, v20);
          }
          v87 = &v86[v20];
          if (a4)
          {
            v88 = *(_BYTE **)(a4 + 8);
            v89 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) != 0)
            {
              if ((_DWORD)v89 == 1)
              {
                *v87 = *v88;
              }
              else if ((_DWORD)v89)
              {
                memcpy(&v86[v20], v88, v89);
              }
            }
            else
            {
              if (v89 < 0x10)
              {
                v91 = (unsigned __int128 *)&v86[v20];
              }
              else
              {
                v91 = (unsigned __int128 *)&v87[v89 & 0xFFFFFFF0];
                v92 = (unsigned __int128 *)&v86[v20];
                do
                {
                  v93 = (unsigned __int128)vld2q_s8(v88);
                  v88 += 32;
                  *v92++ = v93;
                }
                while (v92 != v91);
              }
              while (v91 != (unsigned __int128 *)&v87[v89])
              {
                v94 = *v88;
                v88 += 2;
                *(_BYTE *)v91 = v94;
                v91 = (unsigned __int128 *)((char *)v91 + 1);
              }
            }
            v90 = *(unsigned int *)(a4 + 4);
          }
          else
          {
            v90 = 0;
          }
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v87[v90], a5->i8, v97, a7, v95, a9, a10, a11, a12, a13, v28);
        }
        goto LABEL_84;
      }
    }
    else
    {
      v34 = v99;
      if (!v99)
        goto LABEL_118;
      v28 = 0;
      if ((v99 & 0x80000000) == 0)
        goto LABEL_90;
    }
LABEL_117:
    v33 = 0;
LABEL_84:
    a1 = v96;
    goto LABEL_85;
  }
  v33 = 0;
LABEL_85:
  *a1 = v33;
  return result;
}

unint64_t WTF::Vector<JSC::Wasm::Export,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Export>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  void *v9;

  result = WTF::Vector<JSC::Wasm::Export,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = result;
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)a1 + 24 * v5;
  v8 = (WTF *)*(unsigned int *)(result + 12);
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_DWORD *)(v7 + 12) = (_DWORD)v8;
  if ((_DWORD)v8)
  {
    v9 = (void *)WTF::fastMalloc(v8);
    *(_DWORD *)(v7 + 8) = (_DWORD)v8;
    *(_QWORD *)v7 = v9;
    result = (unint64_t)memcpy(v9, *(const void **)v4, *(unsigned int *)(v4 + 12));
  }
  *(_QWORD *)(v6 + 24 * v5 + 16) = *(_QWORD *)(v4 + 16);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::Wasm::Export,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<JSC::Wasm::Export,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<JSC::Wasm::Export,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::Wasm::Export,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  WTF *v17;
  void *v18;
  const void *v19;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(unsigned int *)(a1 + 12);
      v5 = 24 * a2;
      v6 = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v4)
      {
        v14 = v6;
        v15 = 24 * v4;
        v16 = v3;
        do
        {
          v17 = (WTF *)*(unsigned int *)(v16 + 12);
          *(_QWORD *)v14 = 0;
          *(_QWORD *)(v14 + 8) = 0;
          *(_DWORD *)(v14 + 12) = (_DWORD)v17;
          if ((_DWORD)v17)
          {
            v18 = (void *)WTF::fastMalloc(v17);
            *(_DWORD *)(v14 + 8) = (_DWORD)v17;
            *(_QWORD *)v14 = v18;
            memcpy(v18, *(const void **)v16, *(unsigned int *)(v16 + 12));
          }
          *(_QWORD *)(v14 + 16) = *(_QWORD *)(v16 + 16);
          v19 = *(const void **)v16;
          if (*(_QWORD *)v16)
          {
            *(_QWORD *)v16 = 0;
            *(_DWORD *)(v16 + 8) = 0;
            WTF::fastFree((unint64_t)v19, v7, v8, v9, v10, v11, v12, v13);
          }
          v14 += 24;
          v16 += 24;
          v15 -= 24;
        }
        while (v15);
      }
      if (v3)
      {
        if (*(_QWORD *)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

__n128 WTF::Vector<JSC::Wasm::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Element>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v3 = WTF::Vector<JSC::Wasm::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 12);
  result = *(__n128 *)(v3 + 25);
  v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  *(_OWORD *)(v4 + 16) = v6;
  *(__n128 *)(v4 + 25) = result;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v7 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v4 + 48) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 56);
  *(_DWORD *)(v3 + 56) = 0;
  *(_DWORD *)(v4 + 56) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 60);
  *(_DWORD *)(v3 + 60) = 0;
  *(_DWORD *)(v4 + 60) = v7;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  v8 = *(_QWORD *)(v3 + 64);
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v4 + 64) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 72);
  *(_DWORD *)(v3 + 72) = 0;
  *(_DWORD *)(v4 + 72) = v8;
  LODWORD(v8) = *(_DWORD *)(v3 + 76);
  *(_DWORD *)(v3 + 76) = 0;
  *(_DWORD *)(v4 + 76) = v8;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::Wasm::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 80 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<JSC::Wasm::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<JSC::Wasm::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::Wasm::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x3333334)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(unsigned int *)(a1 + 12);
      v5 = 80 * a2;
      v6 = WTF::fastMalloc((WTF *)(80 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v4)
      {
        v14 = v6;
        v15 = 80 * v4;
        v16 = v3 + 48;
        do
        {
          v17 = *(_OWORD *)(v16 - 48);
          v18 = *(_OWORD *)(v16 - 32);
          *(_OWORD *)(v14 + 25) = *(_OWORD *)(v16 - 23);
          *(_OWORD *)v14 = v17;
          *(_OWORD *)(v14 + 16) = v18;
          *(_QWORD *)(v14 + 48) = 0;
          *(_QWORD *)(v14 + 56) = 0;
          v19 = *(_QWORD *)v16;
          *(_QWORD *)v16 = 0;
          *(_QWORD *)(v14 + 48) = v19;
          LODWORD(v19) = *(_DWORD *)(v16 + 8);
          *(_DWORD *)(v16 + 8) = 0;
          *(_DWORD *)(v14 + 56) = v19;
          LODWORD(v19) = *(_DWORD *)(v16 + 12);
          *(_DWORD *)(v16 + 12) = 0;
          *(_DWORD *)(v14 + 60) = v19;
          *(_QWORD *)(v14 + 64) = 0;
          *(_QWORD *)(v14 + 72) = 0;
          v20 = *(_QWORD *)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          *(_QWORD *)(v14 + 64) = v20;
          LODWORD(v20) = *(_DWORD *)(v16 + 24);
          *(_DWORD *)(v16 + 24) = 0;
          *(_DWORD *)(v14 + 72) = v20;
          LODWORD(v20) = *(_DWORD *)(v16 + 28);
          *(_DWORD *)(v16 + 28) = 0;
          *(_DWORD *)(v14 + 76) = v20;
          v21 = *(_QWORD *)(v16 + 16);
          if (v21)
          {
            *(_QWORD *)(v16 + 16) = 0;
            *(_DWORD *)(v16 + 24) = 0;
            WTF::fastFree(v21, v7, v8, v9, v10, v11, v12, v13);
          }
          v22 = *(_QWORD *)v16;
          if (*(_QWORD *)v16)
          {
            *(_QWORD *)v16 = 0;
            *(_DWORD *)(v16 + 8) = 0;
            WTF::fastFree(v22, v7, v8, v9, v10, v11, v12, v13);
          }
          v16 += 80;
          v14 += 80;
          v15 -= 80;
        }
        while (v15);
      }
      if (v3)
      {
        if (*(_QWORD *)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t WTF::Vector<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,std::span<unsigned char const,18446744073709551615ul>>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *(_QWORD *)a1;
  if (v8 > v4)
  {
    if (v8 >> 28)
      return 0;
    WTF::tryFastMalloc((WTF *)(16 * v8), &v23);
    v17 = v23;
    if (!v23)
      return 0;
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v17;
    if ((_DWORD)v5)
    {
      v18 = 16 * v5;
      v19 = (_DWORD *)(v9 + 8);
      do
      {
        *(_QWORD *)v17 = 0;
        *(_QWORD *)(v17 + 8) = 0;
        v20 = *((_QWORD *)v19 - 1);
        *((_QWORD *)v19 - 1) = 0;
        *(_QWORD *)v17 = v20;
        LODWORD(v20) = *v19;
        *v19 = 0;
        *(_DWORD *)(v17 + 8) = v20;
        LODWORD(v20) = v19[1];
        v19[1] = 0;
        *(_DWORD *)(v17 + 12) = v20;
        v21 = *((_QWORD *)v19 - 1);
        if (v21)
        {
          *((_QWORD *)v19 - 1) = 0;
          *v19 = 0;
          WTF::fastFree(v21, v10, v11, v12, v13, v14, v15, v16);
        }
        v19 += 4;
        v17 += 16;
        v18 -= 16;
      }
      while (v18);
      v17 = *(_QWORD *)a1;
    }
    if (v9)
    {
      if (v17 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
      v9 = *(_QWORD *)a1;
    }
    else
    {
      v9 = v17;
    }
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(v9 + 16 * *(unsigned int *)(a1 + 12), *(char **)a2, *(WTF **)(a2 + 8));
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    v18 = *(unsigned int *)(a1 + 12);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = *a2;
    *(_DWORD *)(a1 + 12) = v18 + 1;
    return;
  }
  if (!(v8 >> 29))
  {
    v9 = *(const void **)a1;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(const void **)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
}

uint64_t *WTF::Vector<std::unique_ptr<JSC::Wasm::Segment,void (*)(JSC::Wasm::Segment*)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<JSC::Wasm::Segment,void (*)(JSC::Wasm::Segment*)>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;

  result = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::Wasm::Segment,void (*)(JSC::Wasm::Segment*)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  v7 = *result;
  *result = 0;
  *v6 = v7;
  v6[1] = result[1];
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<std::unique_ptr<JSC::Wasm::Segment,void (*)(JSC::Wasm::Segment*)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if (v5 + 16 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v25 = *(_QWORD *)a1;
        return v25 + 16 * ((uint64_t)(v3 - v5) >> 4);
      }
      if (!(v10 >> 28))
      {
        v18 = WTF::fastMalloc((WTF *)(16 * v10));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v18;
        v20 = 16 * v6;
        do
        {
          v21 = (_QWORD *)(v18 + v19);
          v22 = v5 + v19;
          v23 = *(_QWORD *)(v5 + v19);
          *(_QWORD *)v22 = 0;
          *v21 = v23;
          v21[1] = *(_QWORD *)(v5 + v19 + 8);
          v24 = *(_QWORD *)(v5 + v19);
          *(_QWORD *)v22 = 0;
          if (v24)
            (*(void (**)(void))(v22 + 8))();
          v19 += 16;
        }
        while (v20 != v19);
        v25 = *(_QWORD *)a1;
        if (v5)
        {
          if (v25 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v11, v12, v13, v14, v15, v16, v17);
          v25 = *(_QWORD *)a1;
        }
        return v25 + 16 * ((uint64_t)(v3 - v5) >> 4);
      }
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x198E315A8);
    }
  }
  v26 = *(unsigned int *)(a1 + 8);
  v27 = v26 + (v26 >> 2);
  if (v27 >= 0x10)
    v28 = v27 + 1;
  else
    v28 = 16;
  if (v28 <= a2)
    v29 = a2;
  else
    v29 = v28;
  if (v29 > v26)
  {
    if (v29 >> 28)
      goto LABEL_39;
    v30 = *(unsigned int *)(a1 + 12);
    v31 = WTF::fastMalloc((WTF *)(16 * v29));
    *(_DWORD *)(a1 + 8) = v29;
    *(_QWORD *)a1 = v31;
    if ((_DWORD)v30)
    {
      v39 = (_QWORD *)v31;
      v40 = 16 * v30;
      v41 = (uint64_t *)v5;
      do
      {
        v42 = *v41;
        *v41 = 0;
        *v39 = v42;
        v39[1] = v41[1];
        v43 = *v41;
        *v41 = 0;
        if (v43)
          ((void (*)(void))v41[1])();
        v41 += 2;
        v39 += 2;
        v40 -= 16;
      }
      while (v40);
    }
    if (v5)
    {
      if (*(_QWORD *)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v32, v33, v34, v35, v36, v37, v38);
    }
  }
  return v3;
}

uint64_t WTF::dataLog<char [31],WTF::String,char [2]>(WTF::PrintStream *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float v12;
  char v14;
  char **v15;
  char *v16;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Could not parse name section: ");
  WTF::printInternal(v4, a1, v5, v6, v7, v8, v9, v10, v11, v12);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

unint64_t WTF::Vector<JSC::Wasm::CustomSection,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<JSC::Wasm::CustomSection,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<JSC::Wasm::CustomSection,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::Wasm::CustomSection,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = v6;
        v15 = 32 * v5;
        v16 = v4 + 16;
        do
        {
          *(_QWORD *)v14 = 0;
          *(_QWORD *)(v14 + 8) = 0;
          v17 = *(_QWORD *)(v16 - 16);
          *(_QWORD *)(v16 - 16) = 0;
          *(_QWORD *)v14 = v17;
          LODWORD(v17) = *(_DWORD *)(v16 - 8);
          *(_DWORD *)(v16 - 8) = 0;
          *(_DWORD *)(v14 + 8) = v17;
          LODWORD(v17) = *(_DWORD *)(v16 - 4);
          *(_DWORD *)(v16 - 4) = 0;
          *(_DWORD *)(v14 + 12) = v17;
          *(_QWORD *)(v14 + 16) = 0;
          *(_QWORD *)(v14 + 24) = 0;
          v18 = *(_QWORD *)v16;
          *(_QWORD *)v16 = 0;
          *(_QWORD *)(v14 + 16) = v18;
          LODWORD(v18) = *(_DWORD *)(v16 + 8);
          *(_DWORD *)(v16 + 8) = 0;
          *(_DWORD *)(v14 + 24) = v18;
          LODWORD(v18) = *(_DWORD *)(v16 + 12);
          *(_DWORD *)(v16 + 12) = 0;
          *(_DWORD *)(v14 + 28) = v18;
          v19 = *(_QWORD *)v16;
          if (*(_QWORD *)v16)
          {
            *(_QWORD *)v16 = 0;
            *(_DWORD *)(v16 + 8) = 0;
            WTF::fastFree(v19, v7, v8, v9, v10, v11, v12, v13);
          }
          v20 = *(_QWORD *)(v16 - 16);
          if (v20)
          {
            *(_QWORD *)(v16 - 16) = 0;
            *(_DWORD *)(v16 - 8) = 0;
            WTF::fastFree(v20, v7, v8, v9, v10, v11, v12, v13);
          }
          v16 += 32;
          v14 += 32;
          v15 -= 32;
        }
        while (v15);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::StreamingCompiler::didReceiveFunctionData(unsigned int,JSC::Wasm::FunctionData const&)::$_0>::~SharedTaskFunctor(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      JSC::Wasm::StreamingCompiler::~StreamingCompiler((JSC::Wasm::StreamingCompiler *)v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::StreamingCompiler::didReceiveFunctionData(unsigned int,JSC::Wasm::FunctionData const&)::$_0>::~SharedTaskFunctor(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      JSC::Wasm::StreamingCompiler::~StreamingCompiler((JSC::Wasm::StreamingCompiler *)v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::Wasm::Plan &),JSC::Wasm::StreamingCompiler::didReceiveFunctionData(unsigned int,JSC::Wasm::FunctionData const&)::$_0>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  unsigned __int8 *v16;
  WTF::StringImpl *v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  WTF::StringImpl *v44;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = (unsigned __int8 *)(v9 + 28);
  if (__ldaxr((unsigned __int8 *)(v9 + 28)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 28);
LABEL_5:
  v13 = *(_QWORD *)(a2 + 56);
  v12 = (_DWORD *)(a2 + 56);
  if (!v13)
    goto LABEL_20;
  v14 = *(_QWORD *)(v9 + 256);
  WTF::String::isolatedCopy(v12, (uint64_t *)&v44);
  v16 = (unsigned __int8 *)(v14 + 13);
  if (__ldaxr((unsigned __int8 *)(v14 + 13)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_10;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v14 + 13);
LABEL_10:
  if (!*(_QWORD *)(v14 + 56))
  {
    v18 = v44;
    v44 = 0;
    *(_QWORD *)(v14 + 56) = v18;
    *(_BYTE *)(v14 + 64) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
  }
  v19 = __ldxr(v16);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v16))
LABEL_16:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v14 + 13), 0, a3, a4, a5, a6, a7, a8);
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v15, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
LABEL_20:
  v20 = *(_DWORD *)(v9 + 32) - 1;
  *(_DWORD *)(v9 + 32) = v20;
  if (v20)
    goto LABEL_30;
  v21 = *(_QWORD *)(v9 + 256);
  v22 = (unsigned __int8 *)(v21 + 13);
  if (__ldaxr((unsigned __int8 *)(v21 + 13)))
  {
    __clrex();
LABEL_24:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v21 + 13);
    goto LABEL_25;
  }
  if (__stxr(1u, v22))
    goto LABEL_24;
LABEL_25:
  *(_BYTE *)(v21 + 352) = 3;
  v24 = __ldxr(v22);
  if (v24 == 1)
  {
    if (!__stlxr(0, v22))
      goto LABEL_30;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v21 + 13), 0, a3, a4, a5, a6, a7, a8);
LABEL_30:
  if (!*(_BYTE *)(v9 + 25) && !*(_DWORD *)(v9 + 32) && *(_BYTE *)(v9 + 26))
  {
    v25 = *(unsigned __int8 **)(v9 + 256);
    v26 = v25 + 13;
    if (__ldaxr(v25 + 13))
    {
      __clrex();
    }
    else if (!__stxr(1u, v26))
    {
      goto LABEL_38;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v25 + 13));
LABEL_38:
    JSC::Wasm::EntryPlan::complete((JSC::Wasm::EntryPlan *)v25);
    v42 = __ldxr(v26);
    if (v42 == 1)
    {
      if (!__stlxr(0, v26))
        goto LABEL_43;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v25 + 13, 0, v36, v37, v38, v39, v40, v41);
LABEL_43:
    JSC::Wasm::StreamingCompiler::didComplete((JSC::Wasm::StreamingCompiler *)v9);
  }
  v43 = __ldxr(v10);
  if (v43 != 1)
  {
    __clrex();
    goto LABEL_48;
  }
  if (__stlxr(0, v10))
LABEL_48:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v9 + 28), 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Detail::CallableWrapper<JSC::Wasm::StreamingCompiler::didComplete(void)::$_1,void,JSC::DeferredWorkTimer::TicketData *>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_1E35B6F10;
  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E35B6E90[v2])(&v4, a1 + 8);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

void WTF::Detail::CallableWrapper<JSC::Wasm::StreamingCompiler::didComplete(void)::$_1,void,JSC::DeferredWorkTimer::TicketData *>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char v10;

  *(_QWORD *)this = &off_1E35B6F10;
  v9 = *((unsigned int *)this + 4);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, char *))off_1E35B6E90[v9])(&v10, (char *)this + 8);
  *((_DWORD *)this + 4) = -1;
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<JSC::Wasm::StreamingCompiler::didComplete(void)::$_1,void,JSC::DeferredWorkTimer::TicketData *>::call(uint64_t a1, JSC::DeferredWorkTimer::TicketData *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  JSC::VM *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t (*v40)(uint64_t *);
  uint64_t *v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t *);
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;

  v4 = JSC::DeferredWorkTimer::TicketData::target(this);
  v10 = *((_QWORD *)this + 1);
  if (!*(_DWORD *)v10)
  {
    __break(0xC471u);
    JUMPOUT(0x198E31CB8);
  }
  v11 = v4;
  v12 = *(_QWORD *)(v10 + 8);
  if (!v12 || (*(_BYTE *)(v12 + 8) & 3) != 0)
    v13 = 0;
  else
    v13 = *(uint64_t **)v12;
  v14 = v13[7];
  v15 = *(_DWORD *)(a1 + 16);
  if (v15)
  {
    if (v15 == 1)
    {
      v23 = v13[162];
      if ((v23 & 1) != 0)
      {
        v43 = *(uint64_t (**)(uint64_t *))(v23 & 0xFFFFFFFFFFFFFFFCLL);
        v44 = (uint64_t *)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v13 & 8) != 0)
          v44 = v13 - 2;
        v45 = *v44;
        v46 = v13;
        v47 = v13 + 162;
        v23 = v43(&v45);
      }
      v24 = JSC::ErrorInstance::create((JSC::Heap **)v14, v23, (WTF::StringImpl **)(a1 + 8), 0, (uint64_t)JSC::defaultSourceAppender, 0, 0, 1);
      v31 = (JSC::VM *)v24;
      if ((v24 & 0xFFFE000000000002) == 0
        && &JSC::Exception::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v24 & 0xFFFFFFFE) + 0x4C)))
      {
        goto LABEL_15;
      }
      goto LABEL_24;
    }
  }
  else
  {
    v16 = v13[174];
    if ((v16 & 1) == 0)
    {
LABEL_7:
      v17 = JSC::JSWebAssemblyModule::create((JSC *)v14, v16, (uint64_t *)(a1 + 8), v5, v6, v7, v8, v9);
      JSC::JSPromise::resolve(v11, v13, v17, v18, v19, v20, v21, v22);
      return;
    }
    v40 = *(uint64_t (**)(uint64_t *))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v41 = (uint64_t *)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v41 = v13 - 2;
    v45 = *v41;
    v46 = v13;
    v47 = v13 + 174;
    v42 = v40(&v45);
    if (!*(_DWORD *)(a1 + 16))
    {
      v16 = v42;
      goto LABEL_7;
    }
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_24:
  v31 = (JSC::VM *)JSC::Exception::create(v14, v31, 0, v25, v26, v27, v28, v29);
LABEL_15:
  JSC::VM::throwException((JSC::VM *)v14, (JSC::JSGlobalObject *)v13, v31, v30, v25, v26, v27, v28, v29);
  v37 = *(_QWORD *)(v14 + 16);
  if (*(_QWORD *)(v13[7] + 24) != v37)
  {
    *(_QWORD *)(v14 + 16) = 0;
    v38 = (unsigned int *)(v14 + 80);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 & 0xFFFFFFEF, v38));
    JSC::JSPromise::reject(v11, v13, *(_QWORD *)(v37 + 8), v32, v33, v34, v35, v36);
  }
}

uint64_t WTF::Detail::CallableWrapper<JSC::Wasm::StreamingCompiler::didComplete(void)::$_2,void,JSC::DeferredWorkTimer::TicketData *>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_1E35B6F38;
  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E35B6E90[v2])(&v4, a1 + 8);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

void WTF::Detail::CallableWrapper<JSC::Wasm::StreamingCompiler::didComplete(void)::$_2,void,JSC::DeferredWorkTimer::TicketData *>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char v10;

  *(_QWORD *)this = &off_1E35B6F38;
  v9 = *((unsigned int *)this + 4);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, char *))off_1E35B6E90[v9])(&v10, (char *)this + 8);
  *((_DWORD *)this + 4) = -1;
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<JSC::Wasm::StreamingCompiler::didComplete(void)::$_2,void,JSC::DeferredWorkTimer::TicketData *>::call(uint64_t a1, JSC::DeferredWorkTimer::TicketData *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  const WTF::String *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  JSC::VM *v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t (*v48)(WTF::StringImpl **);
  WTF::StringImpl **v49;
  uint64_t v50;
  uint64_t (*v51)(WTF::StringImpl **);
  WTF::StringImpl **v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;

  v4 = JSC::DeferredWorkTimer::TicketData::target(this);
  v10 = *((_QWORD *)this + 1);
  if (!*(_DWORD *)v10)
  {
    __break(0xC471u);
    JUMPOUT(0x198E32008);
  }
  v11 = v4;
  v12 = *(_QWORD *)(v10 + 8);
  if (!v12 || (*(_BYTE *)(v12 + 8) & 3) != 0)
    v13 = 0;
  else
    v13 = *(_QWORD *)v12;
  if (*(_DWORD *)v10 <= 1u)
  {
    __break(0xC471u);
    JUMPOUT(0x198E32028);
  }
  v14 = *(_QWORD *)(v10 + 16);
  if (!v14 || (*(_BYTE *)(v14 + 8) & 3) != 0)
    v15 = 0;
  else
    v15 = *(unsigned int **)v14;
  v16 = *(_QWORD *)(v13 + 56);
  v17 = *(_DWORD *)(a1 + 16);
  if (v17)
  {
    if (v17 == 1)
    {
      v37 = *(_QWORD *)(v13 + 1296);
      if ((v37 & 1) != 0)
      {
        v51 = *(uint64_t (**)(WTF::StringImpl **))(v37 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v13 & 8) != 0)
          v52 = (WTF::StringImpl **)(v13 - 16);
        else
          v52 = (WTF::StringImpl **)(v13 & 0xFFFFFFFFFFFFC000 | 8);
        v53 = *v52;
        v54 = v13;
        v55 = v13 + 1296;
        v37 = v51(&v53);
      }
      v38 = JSC::ErrorInstance::create((JSC::Heap **)v16, v37, (WTF::StringImpl **)(a1 + 8), 0, (uint64_t)JSC::defaultSourceAppender, 0, 0, 1);
      v45 = (JSC::VM *)v38;
      if ((v38 & 0xFFFE000000000002) == 0
        && &JSC::Exception::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x4C)))
      {
        goto LABEL_25;
      }
      goto LABEL_35;
    }
LABEL_34:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_35:
    v45 = (JSC::VM *)JSC::Exception::create(v16, v45, 0, v39, v40, v41, v42, v43);
LABEL_25:
    JSC::VM::throwException((JSC::VM *)v16, (JSC::JSGlobalObject *)v13, v45, v44, v39, v40, v41, v42, v43);
    v28 = *(_QWORD *)(v16 + 16);
LABEL_26:
    if (*(_QWORD *)(*(_QWORD *)(v13 + 56) + 24) != v28)
    {
      *(_QWORD *)(v16 + 16) = 0;
      v46 = (unsigned int *)(v16 + 80);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 & 0xFFFFFFEF, v46));
      JSC::JSPromise::reject(v11, (uint64_t *)v13, *(_QWORD *)(v28 + 8), v22, v23, v24, v25, v26);
    }
    return;
  }
  v18 = *(_QWORD *)(v13 + 1392);
  if ((v18 & 1) == 0)
    goto LABEL_11;
  v48 = *(uint64_t (**)(WTF::StringImpl **))(v18 & 0xFFFFFFFFFFFFFFFCLL);
  v49 = (WTF::StringImpl **)(v13 & 0xFFFFFFFFFFFFC000 | 8);
  if ((v13 & 8) != 0)
    v49 = (WTF::StringImpl **)(v13 - 16);
  v53 = *v49;
  v54 = v13;
  v55 = v13 + 1392;
  v50 = v48(&v53);
  if (*(_DWORD *)(a1 + 16))
    goto LABEL_34;
  v18 = v50;
LABEL_11:
  v19 = (const WTF::String *)JSC::JSWebAssemblyModule::create((JSC *)v16, v18, (uint64_t *)(a1 + 8), v5, v6, v7, v8, v9);
  JSC::JSWebAssemblyInstance::createPrivateModuleKey(&v53);
  JSC::instantiate(v16, v13, v11, v19, v15, (JSC::Structure *)&v53, 2, 0);
  v27 = v53;
  v53 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = *(_QWORD *)(v16 + 16);
  if (v28)
    goto LABEL_26;
}

uint64_t *WTF::HashTable<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),WTF::KeyValuePair<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>>,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashMap<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  uint64_t *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  _QWORD *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *result;
  uint64_t *v80;
  uint64_t *v81;

  v4 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v4 - 4);
    v8 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = a1;
    v20 = 0;
    v21 = 0;
    v22 = v7;
    v23 = a3;
    do
    {
      v24 = (uint64_t *)(v4 + 24 * v20);
      v25 = *v24;
      if (*v24 != -1)
      {
        if (v25)
        {
          v40 = *v19;
          if (*v19)
            v41 = *(_DWORD *)(v40 - 8);
          else
            v41 = 0;
          v42 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
          v43 = 9 * ((v42 + ~(v42 << 13)) ^ ((v42 + ~(v42 << 13)) >> 8));
          v44 = (v43 ^ (v43 >> 15)) + ~((v43 ^ (v43 >> 15)) << 27);
          v45 = v41 & ((v44 >> 31) ^ v44);
          v46 = 1;
          do
          {
            v47 = v45;
            v48 = (uint64_t *)(v40 + 24 * v45);
            v45 = (v45 + v46++) & v41;
          }
          while (*v48);
          v49 = v47;
          v50 = v40 + 24 * v47;
          v53 = *(unsigned int **)(v50 + 16);
          v52 = (_QWORD *)(v50 + 16);
          v51 = v53;
          *v52 = 0;
          if (v53)
          {
            do
            {
              v54 = __ldaxr(v51);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v51));
            if (!v55)
            {
              atomic_store(1u, v51);
              v80 = v19;
              v81 = v23;
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v51, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
              v19 = v80;
              v23 = v81;
            }
          }
          *v48 = *v24;
          v56 = v4 + 24 * v20;
          *(_QWORD *)(v40 + 24 * v49 + 8) = *(_QWORD *)(v56 + 8);
          v57 = *(_QWORD *)(v56 + 16);
          *(_QWORD *)(v56 + 16) = 0;
          *v52 = v57;
          v58 = *(unsigned int **)(v56 + 16);
          *(_QWORD *)(v56 + 16) = 0;
          if (v58)
          {
            do
            {
              v59 = __ldaxr(v58);
              v60 = v59 - 1;
            }
            while (__stlxr(v60, v58));
            if (!v60)
            {
              atomic_store(1u, v58);
              v69 = v23;
              v70 = v19;
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v58, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
              v19 = v70;
              v23 = v69;
            }
          }
          if (v24 == v23)
            v21 = v48;
        }
        else
        {
          v26 = v4 + 24 * v20;
          v27 = *(unsigned int **)(v26 + 16);
          *(_QWORD *)(v26 + 16) = 0;
          if (v27)
          {
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              atomic_store(1u, v27);
              v30 = v23;
              v31 = v19;
              JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v27, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
              v19 = v31;
              v23 = v30;
            }
          }
        }
      }
      ++v20;
    }
    while (v20 != v22);
  }
  else
  {
    v21 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree(v4 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v21;
}

void WTF::HashMap<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::inlineSet<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (* const&)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>&>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),WTF::KeyValuePair<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>>,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashMap<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>>::rehash(a1, 8u, 0), (v13 = *a1) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
  v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
  v20 = v15 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
  v21 = (uint64_t *)(v13 + 24 * v20);
  v22 = *v21;
  if (!*v21)
  {
LABEL_12:
    *v21 = v16;
    v21[1] = *a3;
    v25 = (unsigned int *)a3[1];
    if (v25)
    {
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
    }
    v27 = (unsigned int *)v21[2];
    v21[2] = (uint64_t)v25;
    if (v27)
    {
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        atomic_store(1u, v27);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v27, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
      }
    }
    v30 = *a1;
    if (*a1)
      v31 = *(_DWORD *)(v30 - 12) + 1;
    else
      v31 = 1;
    *(_DWORD *)(v30 - 12) = v31;
    v33 = *a1;
    if (*a1)
      v34 = *(_DWORD *)(v33 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(v33 - 16) + v34);
    v36 = *(unsigned int *)(v33 - 4);
    if (v36 > 0x400)
    {
      if (v36 <= 2 * v35)
        goto LABEL_29;
    }
    else if (3 * v36 <= 4 * v35)
    {
      if (!(_DWORD)v36)
      {
        v37 = 8;
LABEL_39:
        v21 = WTF::HashTable<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),WTF::KeyValuePair<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>>,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashMap<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&),JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>,WTF::DefaultHash<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129> (*)(WTF::AbstractLocker const&)>>::rehash(a1, v37, v21);
        v33 = *a1;
        if (*a1)
          LODWORD(v36) = *(_DWORD *)(v33 - 4);
        else
          LODWORD(v36) = 0;
        goto LABEL_42;
      }
LABEL_29:
      v37 = (_DWORD)v36 << (6 * *(_DWORD *)(v33 - 12) >= (2 * v36));
      goto LABEL_39;
    }
LABEL_42:
    *(_QWORD *)a9 = v21;
    *(_QWORD *)(a9 + 8) = v33 + 24 * v36;
    *(_BYTE *)(a9 + 16) = 1;
    return;
  }
  v23 = 0;
  v24 = 1;
  while (v22 != v16)
  {
    if (v22 == -1)
      v23 = v21;
    v20 = (v20 + v24) & v15;
    v21 = (uint64_t *)(v13 + 24 * v20);
    v22 = *v21;
    ++v24;
    if (!*v21)
    {
      if (v23)
      {
        *v23 = 0;
        v23[1] = 0;
        v23[2] = 0;
        --*(_DWORD *)(*a1 - 16);
        v16 = *a2;
        v21 = v23;
      }
      goto LABEL_12;
    }
  }
  if ((v14 & 1) != 0)
    v32 = 0;
  else
    v32 = *(_DWORD *)(v13 - 4);
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v13 + 24 * v32;
  *(_BYTE *)(a9 + 16) = 0;
  v21[1] = *a3;
  v38 = (unsigned int *)a3[1];
  if (v38)
  {
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
  }
  v40 = (unsigned int *)v21[2];
  v21[2] = (uint64_t)v38;
  if (v40)
  {
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      atomic_store(1u, v40);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v40, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
  }
}

void JSC::Wasm::TierUpCount::~TierUpCount(JSC::Wasm::TierUpCount *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v9 = *((unsigned int *)this + 19);
  if ((_DWORD)v9)
  {
    v16 = (unint64_t *)*((_QWORD *)this + 8);
    v17 = 8 * v9;
    do
    {
      v18 = *v16;
      *v16 = 0;
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 8);
        *(_QWORD *)(v18 + 8) = 0;
        if (v19)
          WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
      }
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  v10 = *((_QWORD *)this + 8);
  if (v10)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 6);
  if (v11)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *((_QWORD *)this + 3);
  v13 = *((unsigned int *)this + 11);
  if (v12)
  {
    v14 = 0;
    while (v13 > v14 >> 4)
    {
      if (v12 == ++v14)
        goto LABEL_10;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_10:
    if ((_DWORD)v13)
    {
      v20 = 0;
      do
        WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * v20++), a2, a3, a4, a5, a6, a7, a8);
      while (v20 < *((unsigned int *)this + 11));
    }
    v15 = *((_QWORD *)this + 4);
    if (v15)
    {
      *((_QWORD *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::Wasm::TierUpCount::addOSREntryData(uint64_t a1, int a2, int a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  unint64_t v25;
  WTF *v26;

  v8 = a1 + 64;
  v9 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v9 = a2;
  *(_DWORD *)(v9 + 4) = a3;
  v10 = *a4;
  *a4 = 0;
  *(_QWORD *)(v9 + 8) = v10;
  v26 = (WTF *)v9;
  v11 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v11 == *(_DWORD *)(a1 + 72))
  {
    v13 = (uint64_t *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v11 + 1, (unint64_t)&v26);
    v21 = *(unsigned int *)(a1 + 76);
    v22 = *(_QWORD *)(a1 + 64);
    v23 = *v13;
    *v13 = 0;
    *(_QWORD *)(v22 + 8 * v21) = v23;
    v24 = v26;
    v12 = v21 + 1;
    *(_DWORD *)(a1 + 76) = v12;
    v26 = 0;
    if (v24)
    {
      v25 = *((_QWORD *)v24 + 1);
      *((_QWORD *)v24 + 1) = 0;
      if (v25)
        WTF::fastFree(v25, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree((unint64_t)v24, v14, v15, v16, v17, v18, v19, v20);
      v12 = *(_DWORD *)(a1 + 76);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v11) = v9;
    v12 = v11 + 1;
    *(_DWORD *)(a1 + 76) = v12;
  }
  if (!v12)
    __break(0xC471u);
}

uint64_t JSC::Wasm::TierUpCount::osrEntryData(uint64_t this, unsigned int a2)
{
  if (*(_DWORD *)(this + 76) > a2)
    return *(_QWORD *)(*(_QWORD *)(this + 64) + 8 * a2);
  __break(0xC471u);
  return this;
}

void JSC::Wasm::TypeDefinition::toString(JSC::Wasm::TypeDefinition *this@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  void (**v11)(WTF::StringPrintStream *__hidden);
  WTF *v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11 = off_1E3572250;
  v12 = (WTF *)v14;
  v13 = xmmword_199122F80;
  v14[0] = 0;
  JSC::Wasm::TypeDefinition::dump(this, (WTF::PrintStream *)&v11);
  v11[5]((WTF::StringPrintStream *)&v11);
  v10 = v12;
  if (!v12)
  {
    *a2 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v12, v13, a2);
  v10 = v12;
  if (v12 != (WTF *)v14)
LABEL_5:
    WTF::fastFree((unint64_t)v10, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t JSC::Wasm::TypeDefinition::dump(JSC::Wasm::TypeDefinition *this, WTF::PrintStream *a2)
{
  int v2;
  uint64_t result;
  JSC::Wasm::Subtype *v4;

  v2 = *((_DWORD *)this + 8);
  switch(v2)
  {
    case 0:
      result = JSC::Wasm::FunctionSignature::dump((JSC::Wasm::TypeDefinition *)((char *)this + 8), a2);
      break;
    case 1:
      result = JSC::Wasm::StructType::dump((JSC::Wasm::TypeDefinition *)((char *)this + 8), a2);
      break;
    case 2:
      result = JSC::Wasm::ArrayType::dump((JSC::Wasm::TypeDefinition *)((char *)this + 8), a2);
      break;
    case 3:
      result = JSC::Wasm::RecursionGroup::dump((JSC::Wasm::TypeDefinition *)((char *)this + 8), a2);
      break;
    case 4:
      result = JSC::Wasm::Projection::dump((JSC::Wasm::TypeDefinition ***)this + 1, a2);
      break;
    default:
      if (v2 == 5)
        v4 = (JSC::Wasm::TypeDefinition *)((char *)this + 8);
      else
        v4 = 0;
      result = JSC::Wasm::Subtype::dump(v4, a2);
      break;
  }
  return result;
}

uint64_t JSC::Wasm::FunctionSignature::dump(JSC::Wasm::FunctionSignature *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  float v6;
  int v7;
  unsigned int v8;
  char *String;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::PrintStream *v14;
  float v15;
  WTF::PrintStream *v16;
  float v17;
  unsigned int v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  float v21;
  uint64_t v22;
  WTF::PrintStream *v23;
  float v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::PrintStream *v33;
  float v34;
  WTF::PrintStream *v35;
  float v36;
  unsigned int v37;
  uint64_t v38;
  WTF::PrintStream *v39;
  float v40;
  uint64_t v42;
  int v43;
  char v44;

  v4 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::StringImpl::utf8ForCharacters("(", 1uLL, (uint64_t)&v42, v6);
  WTF::printExpectedCStringHelper(v5, "StringView", &v42);
  if (v43 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  if (*((_DWORD *)this + 2))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      String = (char *)JSC::Wasm::makeString(*(char *)(*(_QWORD *)this + 16 * (v8 + *((_DWORD *)this + 3))));
      v11 = v10;
      v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
      if (v7)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v42, v15);
        WTF::printExpectedCStringHelper(v14, "StringView", &v42);
        if (v43 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v42, v15);
        WTF::printExpectedCStringHelper(v14, "StringView", &v42);
        if (v43 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
        v7 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      if (String)
      {
        v18 = v11 - 1;
        if (!v11)
          v18 = 0;
        WTF::StringImpl::utf8ForCharacters(String, v18, (uint64_t)&v42, v17);
      }
      else
      {
        WTF::CString::CString(&v42, &str_25, 0);
        v43 = 0;
      }
      WTF::printExpectedCStringHelper(v16, "StringView", &v42);
      if (v43 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      ++v8;
    }
    while (v8 < *((_DWORD *)this + 2));
  }
  v19 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
  WTF::StringImpl::utf8ForCharacters(")", 1uLL, (uint64_t)&v42, v21);
  WTF::printExpectedCStringHelper(v20, "StringView", &v42);
  if (v43 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v22 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v23 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
  WTF::StringImpl::utf8ForCharacters(" -> [", 5uLL, (uint64_t)&v42, v24);
  WTF::printExpectedCStringHelper(v23, "StringView", &v42);
  if (v43 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  if (*((_DWORD *)this + 3))
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    do
    {
      v28 = (char *)JSC::Wasm::makeString(*(char *)(*(_QWORD *)this + v25));
      v30 = v29;
      v31 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
      v33 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
      if (v26)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v42, v34);
        WTF::printExpectedCStringHelper(v33, "StringView", &v42);
        if (v43 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v42, v34);
        WTF::printExpectedCStringHelper(v33, "StringView", &v42);
        if (v43 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
        v26 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
      v35 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
      if (v28)
      {
        v37 = v30 - 1;
        if (!v30)
          v37 = 0;
        WTF::StringImpl::utf8ForCharacters(v28, v37, (uint64_t)&v42, v36);
      }
      else
      {
        WTF::CString::CString(&v42, &str_25, 0);
        v43 = 0;
      }
      WTF::printExpectedCStringHelper(v35, "StringView", &v42);
      if (v43 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      ++v27;
      v25 += 16;
    }
    while (v27 < *((unsigned int *)this + 3));
  }
  v38 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v39 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 32))(v38);
  WTF::StringImpl::utf8ForCharacters("]", 1uLL, (uint64_t)&v42, v40);
  WTF::printExpectedCStringHelper(v39, "StringView", &v42);
  if (v43 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::Wasm::StructType::dump(JSC::Wasm::StructType *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  float v6;
  uint64_t v7;
  unint64_t i;
  char *v9;
  int v10;
  unsigned __int8 v11;
  char *String;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  WTF::PrintStream *v19;
  float v20;
  unsigned int v21;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::PrintStream *v26;
  float v27;
  WTF::PrintStream *v28;
  float v29;
  size_t v30;
  uint64_t v31;
  WTF::PrintStream *v32;
  float v33;
  uint64_t result;
  int v35;
  uint64_t v36;
  int v37;
  char v38;

  v4 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::StringImpl::utf8ForCharacters("(", 1uLL, (uint64_t)&v36, v6);
  WTF::printExpectedCStringHelper(v5, "StringView", &v36);
  if (v37 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v37])(&v38, &v36);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  if (*((_DWORD *)this + 2))
  {
    v7 = 0;
    v35 = 0;
    for (i = 0; i < *((unsigned int *)this + 2); ++i)
    {
      v9 = (char *)(*(_QWORD *)this + v7);
      v10 = *((_DWORD *)v9 + 4);
      v11 = *v9;
      if (v10)
      {
        if (v11 == 248)
        {
          String = "I8";
          v13 = 3;
        }
        else
        {
          if (v11 != 247)
          {
            result = 215;
            __break(0xC471u);
            return result;
          }
          String = "I16";
          v13 = 4;
        }
      }
      else
      {
        String = (char *)JSC::Wasm::makeString((char)v11);
        v13 = v14;
      }
      v15 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
      v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
      if (v35)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v36, v18);
        WTF::printExpectedCStringHelper(v17, "StringView", &v36);
        if (v37 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v37])(&v38, &v36);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v36, v18);
        WTF::printExpectedCStringHelper(v17, "StringView", &v36);
        if (v37 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v37])(&v38, &v36);
        v35 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
      v19 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
      if (String)
      {
        v21 = v13 - 1;
        if (!v13)
          v21 = 0;
        WTF::StringImpl::utf8ForCharacters(String, v21, (uint64_t)&v36, v20);
      }
      else
      {
        WTF::CString::CString(&v36, &str_25, 0);
        v37 = 0;
      }
      WTF::printExpectedCStringHelper(v19, "StringView", &v36);
      if (v37 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v37])(&v38, &v36);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v22 = *(unsigned __int8 *)(*(_QWORD *)this + v7 + 24);
      if (*(_BYTE *)(*(_QWORD *)this + v7 + 24))
        v23 = "immutable";
      else
        v23 = "mutable";
      v24 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
      v26 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
      WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v36, v27);
      WTF::printExpectedCStringHelper(v26, "StringView", &v36);
      if (v37 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v37])(&v38, &v36);
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
      if (v22)
        v30 = 9;
      else
        v30 = 7;
      WTF::StringImpl::utf8ForCharacters(v23, v30, (uint64_t)&v36, v29);
      WTF::printExpectedCStringHelper(v28, "StringView", &v36);
      if (v37 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v37])(&v38, &v36);
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v7 += 32;
    }
  }
  v31 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v32 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
  WTF::StringImpl::utf8ForCharacters(")", 1uLL, (uint64_t)&v36, v33);
  WTF::printExpectedCStringHelper(v32, "StringView", &v36);
  if (v37 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v37])(&v38, &v36);
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::Wasm::ArrayType::dump(JSC::Wasm::ArrayType *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  float v6;
  int v7;
  char *String;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  float v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::PrintStream *v22;
  float v23;
  WTF::PrintStream *v24;
  float v25;
  size_t v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  float v29;
  uint64_t result;
  uint64_t v31;
  int v32;
  char v33;

  v4 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::StringImpl::utf8ForCharacters("(", 1uLL, (uint64_t)&v31, v6);
  WTF::printExpectedCStringHelper(v5, "StringView", &v31);
  if (v32 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  if (*(_DWORD *)(*(_QWORD *)this + 16))
  {
    v7 = **(unsigned __int8 **)this;
    if (v7 == 248)
    {
      String = "I8";
      v9 = 3;
    }
    else
    {
      if (v7 != 247)
      {
        result = 215;
        __break(0xC471u);
        return result;
      }
      String = "I16";
      v9 = 4;
    }
  }
  else
  {
    String = (char *)JSC::Wasm::makeString(**(char **)this);
    v9 = v10;
  }
  v11 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
  WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v31, v14);
  WTF::printExpectedCStringHelper(v13, "StringView", &v31);
  if (v32 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  if (String)
  {
    v17 = v9 - 1;
    if (!v9)
      v17 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v17, (uint64_t)&v31, v16);
  }
  else
  {
    WTF::CString::CString(&v31, &str_25, 0);
    v32 = 0;
  }
  WTF::printExpectedCStringHelper(v15, "StringView", &v31);
  if (v32 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v18 = *(unsigned __int8 *)(*(_QWORD *)this + 24);
  if (*(_BYTE *)(*(_QWORD *)this + 24))
    v19 = "immutable";
  else
    v19 = "mutable";
  v20 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
  v22 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
  WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v31, v23);
  WTF::printExpectedCStringHelper(v22, "StringView", &v31);
  if (v32 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
  v24 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
  if (v18)
    v26 = 9;
  else
    v26 = 7;
  WTF::StringImpl::utf8ForCharacters(v19, v26, (uint64_t)&v31, v25);
  WTF::printExpectedCStringHelper(v24, "StringView", &v31);
  if (v32 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v27 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
  WTF::StringImpl::utf8ForCharacters(")", 1uLL, (uint64_t)&v31, v29);
  WTF::printExpectedCStringHelper(v28, "StringView", &v31);
  if (v32 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v32])(&v33, &v31);
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::Wasm::RecursionGroup::dump(JSC::Wasm::RecursionGroup *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  float v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  uint64_t v13;
  WTF::PrintStream *v14;
  float v15;
  int v17;
  int v18;
  char v19;

  v4 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::StringImpl::utf8ForCharacters("(", 1uLL, (uint64_t)&v17, v6);
  WTF::printExpectedCStringHelper(v5, "StringView", &v17);
  if (v18 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v18])(&v19, &v17);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  if (*((_DWORD *)this + 2))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
      if (v7)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v17, v12);
        WTF::printExpectedCStringHelper(v11, "StringView", &v17);
        if (v18 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v18])(&v19, &v17);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v17, v12);
        WTF::printExpectedCStringHelper(v11, "StringView", &v17);
        if (v18 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v18])(&v19, &v17);
        v7 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      JSC::Wasm::TypeDefinition::dump(*(JSC::Wasm::TypeDefinition **)(*(_QWORD *)this + 8 * v8++), a2);
    }
    while (v8 < *((unsigned int *)this + 2));
  }
  v13 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v14 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
  WTF::StringImpl::utf8ForCharacters(")", 1uLL, (uint64_t)&v17, v15);
  WTF::printExpectedCStringHelper(v14, "StringView", &v17);
  if (v18 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v18])(&v19, &v17);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::Wasm::Projection::dump(JSC::Wasm::TypeDefinition ***this, WTF::PrintStream *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  float v6;
  JSC::Wasm::TypeDefinition *v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  float v10;
  int v11;
  WTF::PrintStream *v12;
  WTF::PrintStream *v13;
  float v14;
  uint64_t v15;
  WTF::PrintStream *v16;
  float v17;
  int v19;
  int v20;
  char v21;

  v4 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::StringImpl::utf8ForCharacters("(", 1uLL, (uint64_t)&v19, v6);
  WTF::printExpectedCStringHelper(v5, "StringView", &v19);
  if (v20 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v20])(&v21, &v19);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v7 = **this;
  if (v7)
  {
    JSC::Wasm::TypeDefinition::dump(v7, a2);
  }
  else
  {
    v8 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    WTF::StringImpl::utf8ForCharacters("<current-rec-group>", 0x13uLL, (uint64_t)&v19, v10);
    WTF::printExpectedCStringHelper(v9, "StringView", &v19);
    if (v20 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v20])(&v21, &v19);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  v11 = *((_DWORD *)*this + 2);
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v13 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
  WTF::StringImpl::utf8ForCharacters(".", 1uLL, (uint64_t)&v19, v14);
  WTF::printExpectedCStringHelper(v13, "StringView", &v19);
  if (v20 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v20])(&v21, &v19);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
  WTF::PrintStream::printf(v12, "%u", v11);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v15 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v16 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
  WTF::StringImpl::utf8ForCharacters(")", 1uLL, (uint64_t)&v19, v17);
  WTF::printExpectedCStringHelper(v16, "StringView", &v19);
  if (v20 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v20])(&v21, &v19);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::Wasm::Subtype::dump(JSC::Wasm::Subtype *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  WTF::PrintStream *v9;
  float v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  float v13;
  int v15;
  int v16;
  char v17;

  v4 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::StringImpl::utf8ForCharacters("(", 1uLL, (uint64_t)&v15, v6);
  WTF::printExpectedCStringHelper(v5, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  if (*((_DWORD *)this + 2))
  {
    JSC::Wasm::TypeDefinition::dump(*(JSC::Wasm::TypeDefinition **)(*(_QWORD *)this + 8), a2);
    v7 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v15, v10);
    WTF::printExpectedCStringHelper(v9, "StringView", &v15);
    if (v16 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  JSC::Wasm::TypeDefinition::dump(**(JSC::Wasm::TypeDefinition ***)this, a2);
  v11 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  WTF::StringImpl::utf8ForCharacters(")", 1uLL, (uint64_t)&v15, v13);
  WTF::printExpectedCStringHelper(v12, "StringView", &v15);
  if (v16 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v16])(&v17, &v15);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::Wasm::FunctionSignature::toString(JSC::Wasm::FunctionSignature *this@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  void (**v11)(WTF::StringPrintStream *__hidden);
  WTF *v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11 = off_1E3572250;
  v12 = (WTF *)v14;
  v13 = xmmword_199122F80;
  v14[0] = 0;
  JSC::Wasm::FunctionSignature::dump(this, (WTF::PrintStream *)&v11);
  v11[5]((WTF::StringPrintStream *)&v11);
  v10 = v12;
  if (!v12)
  {
    *a2 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v12, v13, a2);
  v10 = v12;
  if (v12 != (WTF *)v14)
LABEL_5:
    WTF::fastFree((unint64_t)v10, v3, v4, v5, v6, v7, v8, v9);
}

void JSC::Wasm::TypeDefinition::cleanup(JSC::Wasm::TypeDefinition *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v8 = *((_DWORD *)this + 8);
  switch(v8)
  {
    case 5:
      JSC::Wasm::Subtype::cleanup((unsigned int ***)this + 1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case 4:
      v9 = (unsigned int *)**((_QWORD **)this + 1);
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      break;
    case 3:
      JSC::Wasm::RecursionGroup::cleanup((JSC::Wasm::TypeDefinition *)((char *)this + 8), a2, a3, a4, a5, a6, a7, a8);
      break;
  }
}

void JSC::Wasm::Subtype::cleanup(unsigned int ***this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (*((_DWORD *)this + 2))
  {
    v9 = (*this)[1];
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = **this;
  do
  {
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (!v14)
  {
    atomic_store(1u, v12);
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Wasm::RecursionGroup::cleanup(JSC::Wasm::RecursionGroup *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (*((_DWORD *)this + 2))
  {
    v9 = 0;
    do
    {
      v10 = *(unsigned int **)(*(_QWORD *)this + 8 * v9);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
      }
      ++v9;
    }
    while (v9 < *((unsigned int *)this + 2));
  }
}

uint64_t JSC::Wasm::TypeDefinition::hash(JSC::Wasm::TypeDefinition *this, uint64_t a2, const unint64_t *a3, uint64_t a4, const JSC::Wasm::Type *a5)
{
  int v5;
  uint64_t result;
  _OWORD *v7;
  __int128 v8;
  unsigned int *v9;
  _OWORD v10[2];

  v5 = *((_DWORD *)this + 8);
  if (!v5)
    return JSC::Wasm::computeSignatureHash((JSC::Wasm *)*((unsigned int *)this + 5), *((_QWORD *)this + 1), (const JSC::Wasm::Type *)*((unsigned int *)this + 4), *((_QWORD *)this + 1) + 16 * *((unsigned int *)this + 5), a5);
  switch(v5)
  {
    case 1:
      result = JSC::Wasm::computeStructTypeHash(*((unsigned int *)this + 4), *((unsigned __int8 **)this + 1));
      break;
    case 2:
      v7 = (_OWORD *)*((_QWORD *)this + 1);
      v8 = v7[1];
      v10[0] = *v7;
      v10[1] = v8;
      result = JSC::Wasm::computeArrayTypeHash((unsigned __int8 *)v10);
      break;
    case 3:
      result = JSC::Wasm::computeRecursionGroupHash((JSC::Wasm *)*((unsigned int *)this + 4), *((_QWORD *)this + 1), a3);
      break;
    case 4:
      result = JSC::Wasm::computeProjectionHash(**((JSC::Wasm ***)this + 1), *(_DWORD *)(*((_QWORD *)this + 1) + 8));
      break;
    default:
      if (v5 == 5)
        v9 = (unsigned int *)((char *)this + 8);
      else
        v9 = 0;
      result = JSC::Wasm::computeSubtypeHash((JSC::Wasm *)v9[2], (_QWORD *)(*(_QWORD *)v9 + 8), **(const unint64_t ***)v9, *((unsigned __int8 *)v9 + 12));
      break;
  }
  return result;
}

unint64_t JSC::Wasm::computeSignatureHash(JSC::Wasm *this, uint64_t a2, const JSC::Wasm::Type *a3, uint64_t a4, const JSC::Wasm::Type *a5)
{
  unint64_t v5;
  int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  unint64_t v21;

  v5 = 2713513432;
  if (a3)
  {
    v6 = (int *)(a4 + 8);
    v7 = 1;
    do
    {
      v8 = ~(*((unsigned __int8 *)v6 - 8) << 15) + *((unsigned __int8 *)v6 - 8);
      v9 = (9 * (v8 ^ (v8 >> 10))) ^ ((9 * (v8 ^ (v8 >> 10))) >> 6);
      v10 = (0xD7862706ELL
           * (unint64_t)(277951225 * (_DWORD)v5 + 95187966 * ((v9 + ~(v9 << 11)) ^ ((v9 + ~(v9 << 11)) >> 16)))) >> 4;
      v11 = *v6;
      v6 += 4;
      v12 = 9 * ((~(v11 << 15) + v11) ^ ((~(v11 << 15) + v11) >> 10));
      v5 = (0xD7862706ELL
          * (unint64_t)(95187966
                             * (((v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11)) ^ (((v12 ^ (v12 >> 6))
                                                                                     + ~((v12 ^ (v12 >> 6)) << 11)) >> 16))
                             + 277951225 * (_DWORD)v10)) >> 4;
      v13 = v7++;
    }
    while (v13 < (unint64_t)a3);
  }
  if (this)
  {
    v14 = (int *)(a2 + 8);
    v15 = 1;
    do
    {
      v16 = ~(*((unsigned __int8 *)v14 - 8) << 15) + *((unsigned __int8 *)v14 - 8);
      v17 = (9 * (v16 ^ (v16 >> 10))) ^ ((9 * (v16 ^ (v16 >> 10))) >> 6);
      v18 = (0xD7862706ELL
           * (unint64_t)(277951225 * (_DWORD)v5 + 95187966
                                                       * ((v17 + ~(v17 << 11)) ^ ((v17 + ~(v17 << 11)) >> 16)))) >> 4;
      v19 = *v14;
      v14 += 4;
      v20 = 9 * ((~(v19 << 15) + v19) ^ ((~(v19 << 15) + v19) >> 10));
      v5 = (0xD7862706ELL
          * (unint64_t)(95187966
                             * (((v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11)) ^ (((v20 ^ (v20 >> 6))
                                                                                     + ~((v20 ^ (v20 >> 6)) << 11)) >> 16))
                             + 277951225 * (_DWORD)v18)) >> 4;
      v21 = v15++;
    }
    while (v21 < (unint64_t)this);
  }
  return v5;
}

unint64_t JSC::Wasm::computeStructTypeHash(unint64_t a1, unsigned __int8 *a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;

  v2 = 22881606;
  if (a1)
  {
    v3 = 1;
    do
    {
      if (*((_DWORD *)a2 + 4))
        LOBYTE(v4) = 0;
      else
        v4 = *((_QWORD *)a2 + 1);
      v5 = 9 * ((~(*a2 << 15) + *a2) ^ ((~(*a2 << 15) + *a2) >> 10));
      v6 = v5 ^ (v5 >> 6);
      v7 = ~(v4 << 15) + v4;
      v8 = (9 * (v7 ^ (v7 >> 10))) ^ ((9 * (v7 ^ (v7 >> 10))) >> 6);
      v9 = (0xD7862706ELL
          * (unint64_t)(277951225
                             * ((0xD7862706ELL
                                             * (unint64_t)(277951225 * (_DWORD)v2
                                                                + 95187966
                                                                * ((v6 + ~(v6 << 11)) ^ ((v6 + ~(v6 << 11)) >> 16)))) >> 4)
                             + 95187966 * ((v8 + ~(v8 << 11)) ^ ((v8 + ~(v8 << 11)) >> 16)))) >> 4;
      v10 = ~(a2[24] << 15) + a2[24];
      v11 = (9 * (v10 ^ (v10 >> 10))) ^ ((9 * (v10 ^ (v10 >> 10))) >> 6);
      v2 = (0xD7862706ELL
          * (unint64_t)(95187966 * ((v11 + ~(v11 << 11)) ^ ((v11 + ~(v11 << 11)) >> 16)) + 277951225 * (_DWORD)v9)) >> 4;
      v12 = v3;
      a2 += 32;
      ++v3;
    }
    while (v12 < a1);
  }
  return v2;
}

unint64_t JSC::Wasm::computeArrayTypeHash(unsigned __int8 *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;

  if (*((_DWORD *)a1 + 4))
  {
    v1 = 0;
    v2 = *a1;
  }
  else
  {
    v2 = *a1;
    v1 = *((_QWORD *)a1 + 1);
  }
  v3 = ~(v2 << 15) + v2;
  v4 = (9 * (v3 ^ (v3 >> 10))) ^ ((9 * (v3 ^ (v3 >> 10))) >> 6);
  v5 = (v1 + ~(v1 << 32)) ^ ((unint64_t)(v1 + ~(v1 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = (0xD7862706ELL
      * (unint64_t)(95187966 * ((v7 >> 31) ^ v7)
                         + 277951225
                         * ((0xD7862706ELL
                                         * (unint64_t)(95187966
                                                            * ((v4 + ~(v4 << 11)) ^ ((v4 + ~(v4 << 11)) >> 16))
                                                            + 88250707)) >> 4))) >> 4;
  v9 = 9 * ((~(a1[24] << 15) + a1[24]) ^ ((~(a1[24] << 15) + a1[24]) >> 10));
  return (0xD7862706ELL
        * (unint64_t)(95187966
                           * (((v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11)) ^ (((v9 ^ (v9 >> 6))
                                                                               + ~((v9 ^ (v9 >> 6)) << 11)) >> 16))
                           + 277951225 * (_DWORD)v8)) >> 4;
}

unint64_t JSC::Wasm::computeRecursionGroupHash(JSC::Wasm *this, uint64_t a2, const unint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if (!this)
    return 2633730491;
  v3 = 0;
  LODWORD(v4) = -1661236805;
  do
  {
    v5 = *(_QWORD *)(a2 + 8 * v3) + ~(*(_QWORD *)(a2 + 8 * v3) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v4 = (0xD7862706ELL
        * (unint64_t)(277951225 * (_DWORD)v4
                           + 95187966 * (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27))))) >> 4;
    ++v3;
  }
  while ((unint64_t)this > v3);
  return v4;
}

unint64_t JSC::Wasm::computeProjectionHash(JSC::Wasm *this, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;

  v2 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v3 = 9 * ((v2 + ~(v2 << 13)) ^ ((v2 + ~(v2 << 13)) >> 8));
  v4 = (v3 ^ (v3 >> 15)) + ~((v3 ^ (v3 >> 15)) << 27);
  v5 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  return (0xD7862706ELL
        * (unint64_t)(95187966 * (v6 ^ HIWORD(v6))
                           + 277951225
                           * ((0xD7862706ELL
                                           * (unint64_t)(95187966 * ((v4 >> 31) ^ v4)
                                                              + 1378847966)) >> 4))) >> 4;
}

unint64_t JSC::Wasm::computeSubtypeHash(JSC::Wasm *this, _QWORD *a2, const unint64_t *a3, int a4)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v4 = -1622487311;
  if ((_DWORD)this)
  {
    v5 = *a2 + ~(*a2 << 32);
    v6 = 9
       * (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) ^ (((v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v4 = 277951225
       * ((0xD7862706ELL * (unint64_t)(95187966 * ((v7 >> 31) ^ v7) - 1622487311)) >> 4);
  }
  v8 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = (0xD7862706ELL * (unint64_t)(v4 + 95187966 * ((v10 >> 31) ^ v10))) >> 4;
  if (a4)
    v12 = -32768;
  else
    v12 = -1;
  v13 = (9 * (v12 ^ (v12 >> 10))) ^ ((9 * (v12 ^ (v12 >> 10))) >> 6);
  return (0xD7862706ELL
        * (unint64_t)(95187966 * ((v13 + ~(v13 << 11)) ^ ((v13 + ~(v13 << 11)) >> 16)) + 277951225 * (_DWORD)v11)) >> 4;
}

_QWORD *JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(_QWORD *this, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[7];

  if (__CFADD__(a2, a3))
  {
    __break(0xC471u);
  }
  else
  {
    v9[5] = v3;
    v9[6] = v4;
    v7 = this;
    this = (_QWORD *)WTF::tryFastMalloc((WTF *)(16 * (a2 + a3) + 40), v9);
    v8 = v9[0];
    if (v9[0])
    {
      *(_DWORD *)v9[0] = 1;
      *(_QWORD *)(v8 + 8) = v8 + 40;
      *(_DWORD *)(v8 + 16) = a3;
      *(_DWORD *)(v8 + 20) = a2;
      *(_WORD *)(v8 + 24) = 0;
      *(_DWORD *)(v8 + 32) = 0;
    }
    *v7 = v8;
  }
  return this;
}

unint64_t JSC::Wasm::TypeDefinition::substitute(uint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  unsigned __int8 *v16;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned __int8 v30;
  _QWORD *v31;
  int v32;
  _QWORD v33[3];
  char v34;

  if (BYTE1(dword_1ECF4C7B0))
    v8 = (a1 + 29) > 1u;
  else
    v8 = 1;
  if (v8 || a2 > 0xFFFFFFFFFFFFFFC0 || *(_DWORD *)(a2 + 32) != 4 || (v12 = *(_QWORD *)(a2 + 8), *(_QWORD *)v12))
  {
    v9 = a1 & 0xFFFFFFFFFFFFFF00;
    v10 = a1;
    return v9 | v10;
  }
  v30 = a1;
  v13 = *(_DWORD *)(v12 + 8);
  v14 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v14 != -1)
  {
    v33[0] = &v34;
    v31 = v33;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v15 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v16 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_17;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v16);
LABEL_17:
  v31 = a3;
  v32 = v13;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::ProjectionParameterTypes>,JSC::Wasm::ProjectionParameterTypes const&,JSC::Wasm::ProjectionParameterTypes const&>(v15, (uint64_t)&v31, (uint64_t)&v31, a4, a5, a6, a7, a8, (uint64_t)v33);
  v25 = *(unsigned int **)v33[0];
  if (*(_QWORD *)v33[0])
  {
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + 1, v25));
  }
  v27 = __ldxr(v16);
  if (v27 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, v16))
LABEL_23:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, v19, v20, v21, v22, v23, v24);
  if (v30 == 227)
    v10 = 227;
  else
    v10 = 228;
  if (!v25)
    goto LABEL_30;
  do
    v28 = __ldaxr(v25);
  while (__stlxr(v28 - 1, v25));
  if (v28 == 1)
  {
    atomic_store(1u, v25);
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
    v9 = 0;
  }
  else
  {
LABEL_30:
    v9 = 0;
  }
  return v9 | v10;
}

void JSC::Wasm::TypeInformation::typeDefinitionForProjection(JSC::Wasm::TypeInformation *this@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, unsigned int **a8@<X8>)
{
  unint64_t v11;
  uint64_t *v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  JSC::Wasm::TypeInformation *v24;
  int v25;
  _QWORD v26[3];
  char v27;

  v11 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v11 != -1)
  {
    v26[0] = &v27;
    v24 = (JSC::Wasm::TypeInformation *)v26;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v12 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v13 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v13);
LABEL_7:
  v24 = this;
  v25 = a2;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::ProjectionParameterTypes>,JSC::Wasm::ProjectionParameterTypes const&,JSC::Wasm::ProjectionParameterTypes const&>(v12, (uint64_t)&v24, (uint64_t)&v24, a3, a4, a5, a6, a7, (uint64_t)v26);
  v21 = *(unsigned int **)v26[0];
  if (*(_QWORD *)v26[0])
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  *a8 = v21;
  v23 = __ldxr(v13);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v13))
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, v15, v16, v17, v18, v19, v20);
}

JSC::Wasm::TypeDefinition *JSC::Wasm::TypeDefinition::replacePlaceholders(JSC::Wasm::TypeDefinition ***this, WTF *a2, uint64_t a3, uint64_t a4, const JSC::Wasm::Type *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::TypeDefinition *v8;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unsigned __int8 *v24;
  JSC::Wasm::TypeDefinition **v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  char v41;
  int v42;
  char *v43;
  unint64_t v44;
  uint64_t *v45;
  unsigned __int8 *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t *v59;
  unsigned __int8 *v60;
  void *v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  char v69;
  unint64_t v70;
  uint64_t *v71;
  unsigned __int8 *v72;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  unsigned __int8 *v78;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  WTF *v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  WTF *v96;
  unsigned int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v108;
  WTF *v109;
  uint64_t v110;
  _BYTE v111[256];
  uint64_t **v112;
  uint64_t v113;
  _DWORD v114[2];
  char v115;
  uint64_t *v116[2];
  JSC::Wasm::TypeDefinition **v117;
  uint64_t v118;
  char v119;

  v8 = (JSC::Wasm::TypeDefinition *)this;
  switch(*((_DWORD *)this + 8))
  {
    case 0:
      v10 = *((unsigned int *)this + 4);
      v112 = (uint64_t **)v114;
      v113 = 16;
      if (v10 >= 0x11)
      {
        if (v10 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x198E353D8);
        }
        LODWORD(v113) = v10;
        v112 = (uint64_t **)WTF::fastMalloc((WTF *)(16 * v10));
      }
      else if (!(_DWORD)v10)
      {
        goto LABEL_6;
      }
      for (i = 0; i != v10; ++i)
      {
        v12 = *((_QWORD *)v8 + 1) + 16 * (i + *((_DWORD *)v8 + 5));
        v13 = JSC::Wasm::TypeDefinition::substitute(*(_QWORD *)v12, *(_QWORD *)(v12 + 8), a2, a4, (uint64_t)a5, a6, a7, a8);
        v14 = (unint64_t *)&v112[2 * HIDWORD(v113)];
        *v14 = v13;
        v14[1] = v15;
        ++HIDWORD(v113);
      }
LABEL_6:
      v16 = *((unsigned int *)v8 + 5);
      v109 = (WTF *)v111;
      v110 = 16;
      if (v16 >= 0x11)
      {
        if (v16 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x198E353E0);
        }
        LODWORD(v110) = v16;
        v109 = (WTF *)WTF::fastMalloc((WTF *)(16 * v16));
      }
      else if (!(_DWORD)v16)
      {
        goto LABEL_10;
      }
      for (j = 0; j != v16; ++j)
      {
        v18 = *((_QWORD *)v8 + 1) + 16 * j;
        v19 = JSC::Wasm::TypeDefinition::substitute(*(_QWORD *)v18, *(_QWORD *)(v18 + 8), a2, a4, (uint64_t)a5, a6, a7, a8);
        v20 = (unint64_t *)((char *)v109 + 16 * HIDWORD(v110));
        *v20 = v19;
        v20[1] = v21;
        ++HIDWORD(v110);
      }
LABEL_10:
      v22 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
      if (v22 != -1)
      {
        v117 = (JSC::Wasm::TypeDefinition **)&v119;
        v116[0] = (uint64_t *)&v117;
        std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, v116, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
      }
      v23 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
      v24 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
      if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
      {
        __clrex();
      }
      else if (!__stxr(1u, v24))
      {
        goto LABEL_74;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v24);
LABEL_74:
      v116[0] = (uint64_t *)&v109;
      v116[1] = (uint64_t *)&v112;
      WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v23, v116, (uint64_t)v116, a4, a5, a6, a7, a8, (uint64_t)&v117);
      v8 = *v117;
      if (*v117)
      {
        do
          v92 = __ldaxr((unsigned int *)v8);
        while (__stlxr(v92 + 1, (unsigned int *)v8));
      }
      v93 = __ldxr(v24);
      if (v93 == 1)
      {
        if (!__stlxr(0, v24))
          goto LABEL_81;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v24, 0, v81, v82, v83, v84, v85, v86);
LABEL_81:
      if (v8)
      {
        do
        {
          v94 = __ldaxr((unsigned int *)v8);
          v95 = v94 - 1;
        }
        while (__stlxr(v95, (unsigned int *)v8));
        if (!v95)
        {
          atomic_store(1u, (unsigned int *)v8);
          WTF::fastFree((unint64_t)v8, v80, v81, v82, v83, v84, v85, v86);
        }
      }
      v96 = v109;
      if (v111 != (_BYTE *)v109 && v109 != 0)
      {
        v109 = 0;
        LODWORD(v110) = 0;
        WTF::fastFree((unint64_t)v96, v80, v81, v82, v83, v84, v85, v86);
      }
      v91 = (WTF *)v112;
      if (v114 != (_DWORD *)v112 && v112 != 0)
      {
        v112 = 0;
        LODWORD(v113) = 0;
        goto LABEL_125;
      }
      return v8;
    case 1:
      v32 = *((unsigned int *)this + 4);
      v109 = 0;
      v110 = 0;
      if ((_DWORD)v32)
      {
        if (v32 >> 27)
        {
          __break(0xC471u);
          JUMPOUT(0x198E353C8);
        }
        v33 = 32 * v32;
        v34 = (WTF *)WTF::fastMalloc((WTF *)(32 * v32));
        v35 = 0;
        LODWORD(v110) = v32;
        v109 = v34;
        v36 = 1;
        do
        {
          v37 = *((_QWORD *)v8 + 1) + v35;
          v38 = *(_QWORD *)v37;
          v39 = *(_QWORD *)(v37 + 8);
          v40 = *(_DWORD *)(v37 + 20);
          v41 = *(_BYTE *)(v37 + 24);
          if (*(_DWORD *)(v37 + 16) == 1)
          {
            v42 = 1;
          }
          else
          {
            v38 = JSC::Wasm::TypeDefinition::substitute(v38, v39, a2, a4, (uint64_t)a5, a6, a7, a8);
            v42 = 0;
          }
          v43 = (char *)v34 + v35;
          *(_QWORD *)v43 = v38;
          *((_QWORD *)v43 + 1) = v39;
          *((_DWORD *)v43 + 4) = v42;
          *((_DWORD *)v43 + 5) = v40;
          v35 += 32;
          v43[24] = v41;
          HIDWORD(v110) = v36++;
        }
        while (v33 != v35);
      }
      v44 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
      if (v44 != -1)
      {
        v112 = v116;
        v117 = (JSC::Wasm::TypeDefinition **)&v112;
        std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v117, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
      }
      v45 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
      v46 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
      if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
      {
        __clrex();
      }
      else if (!__stxr(1u, v46))
      {
        goto LABEL_97;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v46);
LABEL_97:
      v117 = &v109;
      WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::StructParameterTypes>,JSC::Wasm::StructParameterTypes const&,JSC::Wasm::StructParameterTypes const&>(v45, (unsigned __int8 ***)&v117, (uint64_t)&v117, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)&v112);
      v8 = (JSC::Wasm::TypeDefinition *)*v112;
      if (*v112)
      {
        do
          v99 = __ldaxr((unsigned int *)v8);
        while (__stlxr(v99 + 1, (unsigned int *)v8));
      }
      v100 = __ldxr(v46);
      if (v100 == 1)
      {
        if (!__stlxr(0, v46))
          goto LABEL_104;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v46, 0, v81, v82, v83, v84, v85, v86);
LABEL_104:
      if (v8)
      {
        do
        {
          v101 = __ldaxr((unsigned int *)v8);
          v102 = v101 - 1;
        }
        while (__stlxr(v102, (unsigned int *)v8));
        if (!v102)
        {
          atomic_store(1u, (unsigned int *)v8);
          WTF::fastFree((unint64_t)v8, v80, v81, v82, v83, v84, v85, v86);
        }
      }
      v91 = v109;
      if (v109)
      {
        v109 = 0;
        LODWORD(v110) = 0;
        goto LABEL_125;
      }
      return v8;
    case 2:
      v26 = this[1];
      v27 = (unint64_t)*v26;
      v28 = (uint64_t)v26[1];
      v29 = *((_DWORD *)v26 + 5);
      v30 = *((_BYTE *)v26 + 24);
      if (*((_DWORD *)v26 + 4) == 1)
      {
        v31 = 1;
      }
      else
      {
        v27 = JSC::Wasm::TypeDefinition::substitute((uint64_t)*v26, (unint64_t)v26[1], a2, a4, (uint64_t)a5, a6, a7, a8);
        v28 = v75;
        v31 = 0;
      }
      v76 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
      if (v76 != -1)
      {
        v112 = (uint64_t **)&v117;
        v109 = (WTF *)&v112;
        std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v109, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
      }
      v77 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
      v78 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
      if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
      {
        __clrex();
      }
      else if (!__stxr(1u, v78))
      {
        goto LABEL_61;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v78);
LABEL_61:
      v112 = (uint64_t **)v27;
      v113 = v28;
      v114[0] = v31;
      v114[1] = v29;
      v115 = v30;
      WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::ArrayParameterTypes>,JSC::Wasm::ArrayParameterTypes const&,JSC::Wasm::ArrayParameterTypes const&>(v77, (unsigned __int8 *)&v112, (uint64_t)&v112, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)&v109);
      v8 = *(JSC::Wasm::TypeDefinition **)v109;
      if (*(_QWORD *)v109)
      {
        do
          v87 = __ldaxr((unsigned int *)v8);
        while (__stlxr(v87 + 1, (unsigned int *)v8));
      }
      v88 = __ldxr(v78);
      if (v88 == 1)
      {
        if (!__stlxr(0, v78))
          goto LABEL_68;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v78, 0, v81, v82, v83, v84, v85, v86);
LABEL_68:
      if (v8)
      {
        do
        {
          v89 = __ldaxr((unsigned int *)v8);
          v90 = v89 - 1;
        }
        while (__stlxr(v90, (unsigned int *)v8));
        if (!v90)
        {
          atomic_store(1u, (unsigned int *)v8);
          v91 = v8;
          goto LABEL_125;
        }
      }
      return v8;
    case 5:
      v108 = JSC::Wasm::TypeDefinition::replacePlaceholders(*this[1], (unint64_t)a2);
      v53 = *((unsigned int *)v8 + 4);
      v117 = 0;
      v118 = 0;
      if ((_DWORD)v53)
      {
        if (v53 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x198E353D0);
        }
        v54 = 0;
        LODWORD(v118) = v53;
        v117 = (JSC::Wasm::TypeDefinition **)WTF::fastMalloc((WTF *)(8 * v53));
        while (1)
        {
          ++v54;
          v55 = *(_QWORD *)(*((_QWORD *)v8 + 1) + 8 * v54);
          if (*(_DWORD *)(v55 + 32) == 4)
          {
            v56 = *(_QWORD *)(v55 + 8);
            if (!*(_QWORD *)v56)
              break;
          }
LABEL_49:
          v68 = HIDWORD(v118);
          v117[HIDWORD(v118)] = (JSC::Wasm::TypeDefinition *)v55;
          HIDWORD(v118) = v68 + 1;
          if (v54 == v53)
            goto LABEL_50;
        }
        v57 = *(_DWORD *)(v56 + 8);
        v58 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
        if (v58 != -1)
        {
          v112 = v116;
          v109 = (WTF *)&v112;
          std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v109, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
        }
        v59 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
        v60 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
        if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
        {
          __clrex();
        }
        else if (!__stxr(1u, v60))
        {
          goto LABEL_38;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v59 + 41));
LABEL_38:
        v109 = a2;
        LODWORD(v110) = v57;
        WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::ProjectionParameterTypes>,JSC::Wasm::ProjectionParameterTypes const&,JSC::Wasm::ProjectionParameterTypes const&>(v59, (uint64_t)&v109, (uint64_t)&v109, v48, v49, v50, v51, v52, (uint64_t)&v112);
        v55 = (unint64_t)*v112;
        if (*v112)
        {
          do
            v64 = __ldaxr((unsigned int *)v55);
          while (__stlxr(v64 + 1, (unsigned int *)v55));
        }
        v65 = __ldxr(v60);
        if (v65 == 1)
        {
          if (!__stlxr(0, v60))
            goto LABEL_45;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v60, 0, v63, v48, v49, v50, v51, v52);
LABEL_45:
        if (v55)
        {
          do
          {
            v66 = __ldaxr((unsigned int *)v55);
            v67 = v66 - 1;
          }
          while (__stlxr(v67, (unsigned int *)v55));
          if (!v67)
          {
            atomic_store(1u, (unsigned int *)v55);
            WTF::fastFree(v55, v62, v63, v48, v49, v50, v51, v52);
          }
        }
        goto LABEL_49;
      }
LABEL_50:
      v69 = *((_BYTE *)v8 + 20);
      v70 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
      if (v70 != -1)
      {
        v112 = v116;
        v109 = (WTF *)&v112;
        std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v109, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
      }
      v71 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
      v72 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
      if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
      {
        __clrex();
        v74 = v108;
      }
      else
      {
        v74 = v108;
        if (!__stxr(1u, v72))
          goto LABEL_112;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v71 + 41));
LABEL_112:
      v109 = (WTF *)&v117;
      v110 = v74;
      v111[0] = v69;
      WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::SubtypeParameterTypes>,JSC::Wasm::SubtypeParameterTypes const&,JSC::Wasm::SubtypeParameterTypes const&>(v71, &v109, (uint64_t)&v109, v48, v49, v50, v51, v52, (uint64_t)&v112);
      v8 = (JSC::Wasm::TypeDefinition *)*v112;
      if (*v112)
      {
        do
          v103 = __ldaxr((unsigned int *)v8);
        while (__stlxr(v103 + 1, (unsigned int *)v8));
      }
      v104 = __ldxr(v72);
      if (v104 == 1)
      {
        if (!__stlxr(0, v72))
          goto LABEL_119;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v72, 0, v81, v82, v83, v84, v85, v86);
LABEL_119:
      if (v8)
      {
        do
        {
          v105 = __ldaxr((unsigned int *)v8);
          v106 = v105 - 1;
        }
        while (__stlxr(v106, (unsigned int *)v8));
        if (!v106)
        {
          atomic_store(1u, (unsigned int *)v8);
          WTF::fastFree((unint64_t)v8, v80, v81, v82, v83, v84, v85, v86);
        }
      }
      v91 = (WTF *)v117;
      if (v117)
      {
        v117 = 0;
        LODWORD(v118) = 0;
LABEL_125:
        WTF::fastFree((unint64_t)v91, v80, v81, v82, v83, v84, v85, v86);
      }
      return v8;
    default:
      return v8;
  }
}

void JSC::Wasm::TypeInformation::typeDefinitionForFunction(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, const JSC::Wasm::Type *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, unsigned int **a8@<X8>)
{
  unint64_t v11;
  uint64_t *v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  uint64_t *v24[2];
  _QWORD v25[3];
  char v26;

  v11 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v11 != -1)
  {
    v25[0] = &v26;
    v24[0] = v25;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v12 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v13 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
LABEL_5:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v13);
    goto LABEL_6;
  }
  if (__stxr(1u, v13))
    goto LABEL_5;
LABEL_6:
  v24[0] = a1;
  v24[1] = a2;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v12, v24, (uint64_t)v24, a3, a4, a5, a6, a7, (uint64_t)v25);
  v21 = *(unsigned int **)v25[0];
  if (*(_QWORD *)v25[0])
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  *a8 = v21;
  v23 = __ldxr(v13);
  if (v23 == 1)
  {
    if (!__stlxr(0, v13))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, v15, v16, v17, v18, v19, v20);
}

unint64_t JSC::Wasm::TypeDefinition::unroll(unint64_t this)
{
  unsigned int *v1;
  WTF *v2;
  JSC::Wasm::TypeDefinition *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 hasRecursiveReference;
  uint64_t v12;
  uint64_t v13;
  const JSC::Wasm::Type *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  WTF *v19;
  const JSC::Wasm::TypeDefinition *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::Wasm::TypeInformation *v26;

  if (*(_DWORD *)(this + 32) == 4)
  {
    v26 = (JSC::Wasm::TypeInformation *)this;
    v1 = *(unsigned int **)(this + 8);
    v2 = *(WTF **)v1;
    v3 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v1 + 8) + 8 * v1[2]);
    hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v3);
    this = (unint64_t)v3;
    if (hasRecursiveReference)
    {
      this = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v26, v4, v5, v6, v7, v8, v9, v10);
      if (!v18)
      {
        v19 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v3, v2, v12, v13, v14, v15, v16, v17);
        JSC::Wasm::TypeInformation::addCachedUnrolling(v26, v19, v20, v21, v22, v23, v24, v25);
        return (unint64_t)v19;
      }
    }
  }
  return this;
}

BOOL JSC::Wasm::TypeDefinition::hasRecursiveReference(JSC::Wasm::TypeDefinition *this)
{
  int v1;
  char *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  while (1)
  {
    v1 = *((_DWORD *)this + 8);
    switch(v1)
    {
      case 2:
        v6 = *((unsigned __int8 *)this + 16);
        return v6 != 0;
      case 1:
        v6 = *((unsigned __int8 *)this + 20);
        return v6 != 0;
      case 0:
        v6 = *((unsigned __int8 *)this + 24);
        return v6 != 0;
    }
    v2 = v1 == 5 ? (char *)this + 8 : 0;
    v3 = *((_DWORD *)v2 + 2);
    v4 = *(_QWORD *)v2;
    if (v3)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (*(_DWORD *)(v5 + 32) == 4 && !**(_QWORD **)(v5 + 8))
        break;
    }
    this = *(JSC::Wasm::TypeDefinition **)v4;
  }
  return 1;
}

unint64_t JSC::Wasm::TypeInformation::tryGetCachedUnrolling(JSC::Wasm::TypeInformation *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  JSC::Wasm::TypeInformation *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  char v26;
  char **v27;
  char *v28;

  v9 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v9 != -1)
  {
    v28 = &v26;
    v27 = &v28;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v27, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v10 = JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v11 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
LABEL_6:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
    goto LABEL_7;
  }
  if (__stxr(1u, v11))
    goto LABEL_6;
LABEL_7:
  v13 = v10[1];
  if (!v13)
    goto LABEL_15;
  v14 = *(_DWORD *)(v13 - 8);
  v15 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = *(JSC::Wasm::TypeInformation **)(v13 + 16 * v18);
  if (v19 != this)
  {
    v20 = 1;
    while (v19)
    {
      v18 = ((_DWORD)v18 + v20) & v14;
      v19 = *(JSC::Wasm::TypeInformation **)(v13 + 16 * v18);
      ++v20;
      if (v19 == this)
        goto LABEL_14;
    }
    v18 = *(unsigned int *)(v13 - 4);
  }
LABEL_14:
  if (v18 != *(_DWORD *)(v13 - 4))
  {
    v23 = *(_QWORD *)(v13 + 16 * v18 + 8);
    v22 = v23 & 0xFFFFFFFFFFFFFF00;
    v21 = v23;
  }
  else
  {
LABEL_15:
    v21 = 0;
    v22 = 0;
  }
  v24 = __ldxr(v11);
  if (v24 == 1)
  {
    if (!__stlxr(0, v11))
      return v22 | v21;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, a3, a4, a5, a6, a7, a8);
  return v22 | v21;
}

void JSC::Wasm::TypeInformation::addCachedUnrolling(JSC::Wasm::TypeInformation *this, WTF *a2, const JSC::Wasm::TypeDefinition *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  char *v11;
  unsigned __int8 *v12;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  JSC::Wasm::TypeInformation **v22;
  JSC::Wasm::TypeInformation *v23;
  JSC::Wasm::TypeInformation **v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  char v39;
  char **v40;
  char *v41;

  v10 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v10 != -1)
  {
    v41 = &v39;
    v40 = &v41;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v11 = (char *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v12 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v12);
LABEL_7:
  v14 = (uint64_t *)(v11 + 8);
  if (a2)
  {
    do
      v15 = __ldaxr((unsigned int *)a2);
    while (__stlxr(v15 + 1, (unsigned int *)a2));
  }
  v16 = *v14;
  if (*v14
    || (WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(v14, 8uLL, 0, a4, a5, a6, a7, a8), (v16 = *v14) != 0))
  {
    v17 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    v17 = 0;
  }
  v18 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = v17 & ((v20 >> 31) ^ v20);
  v22 = (JSC::Wasm::TypeInformation **)(v16 + 16 * v21);
  v23 = *v22;
  if (!*v22)
  {
LABEL_20:
    v26 = (unsigned int *)v22[1];
    *v22 = this;
    v22[1] = a2;
    if (v26)
    {
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v26);
        WTF::fastFree((unint64_t)v26, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
    v29 = *v14;
    if (*v14)
      v30 = *(_DWORD *)(v29 - 12) + 1;
    else
      v30 = 1;
    *(_DWORD *)(v29 - 12) = v30;
    v31 = *v14;
    if (*v14)
      v32 = *(_DWORD *)(v31 - 12);
    else
      v32 = 0;
    v33 = (*(_DWORD *)(v31 - 16) + v32);
    v34 = *(unsigned int *)(v31 - 4);
    if (v34 > 0x400)
    {
      if (v34 > 2 * v33)
        goto LABEL_39;
    }
    else
    {
      if (3 * v34 > 4 * v33)
        goto LABEL_39;
      if (!(_DWORD)v34)
      {
        v35 = 8;
        goto LABEL_38;
      }
    }
    v35 = ((_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34)));
LABEL_38:
    WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(v14, v35, (uint64_t)v22, a4, a5, a6, a7, a8);
    goto LABEL_39;
  }
  v24 = 0;
  v25 = 1;
  while (v23 != this)
  {
    if (v23 == (JSC::Wasm::TypeInformation *)-1)
      v24 = v22;
    v21 = (v21 + v25) & v17;
    v22 = (JSC::Wasm::TypeInformation **)(v16 + 16 * v21);
    v23 = *v22;
    ++v25;
    if (!*v22)
    {
      if (v24)
      {
        *v24 = 0;
        v24[1] = 0;
        --*(_DWORD *)(*v14 - 16);
        v22 = v24;
      }
      goto LABEL_20;
    }
  }
  if (a2)
  {
    do
    {
      v36 = __ldaxr((unsigned int *)a2);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, (unsigned int *)a2));
    if (!v37)
    {
      atomic_store(1u, (unsigned int *)a2);
      WTF::fastFree((unint64_t)a2, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
LABEL_39:
  v38 = __ldxr(v12);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_43;
  }
  if (__stlxr(0, v12))
LABEL_43:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

unint64_t JSC::Wasm::TypeDefinition::expand(unint64_t this)
{
  unsigned int *v1;
  WTF *v2;
  JSC::Wasm::TypeDefinition *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 hasRecursiveReference;
  uint64_t v12;
  uint64_t v13;
  const JSC::Wasm::Type *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  WTF *v19;
  const JSC::Wasm::TypeDefinition *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::Wasm::TypeInformation *v26;

  if (*(_DWORD *)(this + 32) == 4)
  {
    v26 = (JSC::Wasm::TypeInformation *)this;
    v1 = *(unsigned int **)(this + 8);
    v2 = *(WTF **)v1;
    v3 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v1 + 8) + 8 * v1[2]);
    hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v3);
    this = (unint64_t)v3;
    if (hasRecursiveReference)
    {
      this = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v26, v4, v5, v6, v7, v8, v9, v10);
      if (!v18)
      {
        v19 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v3, v2, v12, v13, v14, v15, v16, v17);
        JSC::Wasm::TypeInformation::addCachedUnrolling(v26, v19, v20, v21, v22, v23, v24, v25);
        this = (unint64_t)v19;
      }
    }
  }
  if (*(_DWORD *)(this + 32) == 5)
    return **(_QWORD **)(this + 8);
  return this;
}

BOOL JSC::Wasm::TypeDefinition::isFinalType(JSC::Wasm::TypeDefinition *this)
{
  unint64_t v1;

  v1 = JSC::Wasm::TypeDefinition::unroll((unint64_t)this);
  return *(_DWORD *)(v1 + 32) != 5 || *(_BYTE *)(v1 + 20) != 0;
}

BOOL JSC::Wasm::RTT::isSubRTT(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;

  v2 = *(_DWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(a2 + 8);
  if (!v3)
  {
    v4 = -1;
    return *(_QWORD *)(a1 + 8 * (v4 + v2) + 16) == a2;
  }
  if (v2 <= v3)
    return 0;
  v4 = ~v3;
  return *(_QWORD *)(a1 + 8 * (v4 + v2) + 16) == a2;
}

uint64_t JSC::Wasm::TypeInformation::signatureForLLIntBuiltin(int a1)
{
  unint64_t v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v15;
  char **v16;
  char *v17;

  switch(a1)
  {
    case 0:
      v6 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
      if (v6 != -1)
      {
        v17 = &v15;
        v16 = &v17;
        std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
      }
      v2 = (char *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 224;
      break;
    case 1:
    case 2:
      v1 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
      if (v1 != -1)
      {
        v17 = &v15;
        v16 = &v17;
        std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
      }
      v2 = (char *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 240;
      break;
    case 3:
      v7 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
      if (v7 != -1)
      {
        v17 = &v15;
        v16 = &v17;
        std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
      }
      v2 = (char *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 248;
      break;
    case 4:
      v8 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
      if (v8 != -1)
      {
        v17 = &v15;
        v16 = &v17;
        std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
      }
      v2 = (char *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 264;
      break;
    case 5:
      v9 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
      if (v9 != -1)
      {
        v17 = &v15;
        v16 = &v17;
        std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
      }
      v2 = (char *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 256;
      break;
    case 6:
    case 7:
      v3 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
      if (v3 != -1)
      {
        v17 = &v15;
        v16 = &v17;
        std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
      }
      v2 = (char *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 232;
      break;
    case 8:
      v10 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
      if (v10 != -1)
      {
        v17 = &v15;
        v16 = &v17;
        std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
      }
      v2 = (char *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 272;
      break;
    case 9:
      v11 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
      if (v11 != -1)
      {
        v17 = &v15;
        v16 = &v17;
        std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
      }
      v2 = (char *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 280;
      break;
    case 10:
    case 11:
      v4 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
      if (v4 != -1)
      {
        v17 = &v15;
        v16 = &v17;
        std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
      }
      v2 = (char *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 288;
      break;
    case 12:
      v12 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
      if (v12 != -1)
      {
        v17 = &v15;
        v16 = &v17;
        std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
      }
      v2 = (char *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 296;
      break;
    case 13:
      v13 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
      if (v13 != -1)
      {
        v17 = &v15;
        v16 = &v17;
        std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
      }
      v2 = (char *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 320;
      break;
    case 14:
    case 15:
      v5 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
      if (v5 != -1)
      {
        v17 = &v15;
        v16 = &v17;
        std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
      }
      v2 = (char *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 312;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198E35F0CLL);
  }
  return *(_QWORD *)v2;
}

void *JSC::Wasm::TypeInformation::singleton(JSC::Wasm::TypeInformation *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  return JSC::Wasm::TypeInformation::singleton(void)::theOne;
}

JSC::Wasm::TypeInformation *JSC::Wasm::TypeInformation::TypeInformation(JSC::Wasm::TypeInformation *this)
{
  unsigned int **v2;
  unsigned int **v3;
  unsigned int **v4;
  unsigned int **v5;
  unsigned int **v6;
  unsigned int **v7;
  uint64_t v8;
  const JSC::Wasm::Type *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  WTF *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  const JSC::Wasm::Type *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  WTF *v37;
  char *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  const JSC::Wasm::Type *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  WTF *v59;
  char *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  const JSC::Wasm::Type *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  WTF *v81;
  char *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  const JSC::Wasm::Type *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int v102;
  WTF *v103;
  char *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  const JSC::Wasm::Type *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  WTF *v125;
  char *v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  const JSC::Wasm::Type *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int v146;
  WTF *v147;
  char *v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int v161;
  uint64_t v162;
  const JSC::Wasm::Type *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int *v167;
  unsigned int v168;
  WTF *v169;
  char *v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int *v181;
  unsigned int v182;
  unsigned int v183;
  uint64_t v184;
  const JSC::Wasm::Type *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  WTF *v191;
  char *v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int *v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206;
  const JSC::Wasm::Type *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int *v211;
  unsigned int v212;
  WTF *v213;
  char *v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int *v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int *v225;
  unsigned int v226;
  unsigned int v227;
  uint64_t v228;
  const JSC::Wasm::Type *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int *v233;
  unsigned int v234;
  WTF *v235;
  char *v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int *v247;
  unsigned int v248;
  unsigned int v249;
  uint64_t v250;
  const JSC::Wasm::Type *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int *v255;
  unsigned int v256;
  WTF *v257;
  char *v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int *v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int *v269;
  unsigned int v270;
  unsigned int v271;
  uint64_t v272;
  const JSC::Wasm::Type *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int *v277;
  unsigned int v278;
  WTF *v279;
  char *v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unsigned int *v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int *v291;
  unsigned int v292;
  unsigned int v293;
  uint64_t v294;
  const JSC::Wasm::Type *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int *v299;
  unsigned int v300;
  WTF *v301;
  char *v302;
  void *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int *v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int *v313;
  unsigned int v314;
  unsigned int v315;
  uint64_t v316;
  const JSC::Wasm::Type *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unsigned int *v321;
  unsigned int v322;
  WTF *v323;
  char *v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int *v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int *v335;
  unsigned int v336;
  unsigned int v337;
  uint64_t v338;
  const JSC::Wasm::Type *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unsigned int *v343;
  unsigned int v344;
  WTF *v345;
  char *v346;
  void *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int *v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int *v357;
  unsigned int v358;
  unsigned int v359;
  uint64_t v360;
  const JSC::Wasm::Type *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unsigned int *v365;
  unsigned int v366;
  WTF *v367;
  char *v368;
  void *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unsigned int *v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int *v379;
  unsigned int v380;
  unsigned int v381;
  uint64_t v382;
  const JSC::Wasm::Type *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unsigned int *v387;
  unsigned int v388;
  WTF *v389;
  char *v390;
  void *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unsigned int *v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int *v401;
  unsigned int v402;
  unsigned int v403;
  uint64_t v404;
  const JSC::Wasm::Type *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  unsigned int *v409;
  unsigned int v410;
  WTF *v411;
  char *v412;
  void *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unsigned int *v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int *v423;
  unsigned int v424;
  unsigned int v425;
  uint64_t v426;
  const JSC::Wasm::Type *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unsigned int *v431;
  unsigned int v432;
  WTF *v433;
  char *v434;
  void *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unsigned int *v442;
  unsigned int v443;
  unsigned int v444;
  unsigned int *v445;
  unsigned int v446;
  unsigned int v447;
  uint64_t v448;
  const JSC::Wasm::Type *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unsigned int *v453;
  unsigned int v454;
  WTF *v455;
  char *v456;
  void *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unsigned int *v464;
  unsigned int v465;
  unsigned int v466;
  unsigned int *v467;
  unsigned int v468;
  unsigned int v469;
  uint64_t v470;
  const JSC::Wasm::Type *v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unsigned int *v475;
  unsigned int v476;
  WTF *v477;
  char *v478;
  void *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unsigned int *v486;
  unsigned int v487;
  unsigned int v488;
  unsigned int *v489;
  unsigned int v490;
  unsigned int v491;
  uint64_t v492;
  const JSC::Wasm::Type *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  unsigned int *v497;
  unsigned int v498;
  WTF *v499;
  char *v500;
  void *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unsigned int *v508;
  unsigned int v509;
  unsigned int v510;
  unsigned int *v511;
  unsigned int v512;
  unsigned int v513;
  uint64_t v514;
  const JSC::Wasm::Type *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unsigned int *v519;
  unsigned int v520;
  WTF *v521;
  char *v522;
  void *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  unsigned int *v530;
  unsigned int v531;
  unsigned int v532;
  unsigned int *v533;
  unsigned int v534;
  unsigned int v535;
  uint64_t v536;
  const JSC::Wasm::Type *v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  void *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  WTF *v554;
  WTF *v555;
  uint64_t v556;
  const JSC::Wasm::Type *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  void *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  WTF *v574;
  WTF *v575;
  uint64_t v576;
  const JSC::Wasm::Type *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  void *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  WTF *v594;
  WTF *v595;
  uint64_t v596;
  const JSC::Wasm::Type *v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  void *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  WTF *v614;
  WTF *v615;
  uint64_t v616;
  const JSC::Wasm::Type *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  void *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  WTF *v634;
  WTF *v635;
  uint64_t v636;
  const JSC::Wasm::Type *v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  void *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  WTF *v654;
  WTF *v655;
  uint64_t v657;
  const JSC::Wasm::Type *v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  void *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  WTF *v675;
  WTF *v676;
  uint64_t v677;
  const JSC::Wasm::Type *v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  void *v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  WTF *v695;
  WTF *v696;
  uint64_t v697;
  const JSC::Wasm::Type *v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  void *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  WTF *v715;
  WTF *v716;
  int32x2_t v717;
  int64x2_t v718;
  uint64_t v719;
  const JSC::Wasm::Type *v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  void *v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  WTF *v737;
  WTF *v738;
  uint64_t v739;
  const JSC::Wasm::Type *v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  void *v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  WTF *v757;
  WTF *v758;
  uint64_t v759;
  const JSC::Wasm::Type *v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  void *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  WTF *v777;
  WTF *v778;
  unsigned int **v779;
  unsigned int **v780;
  unsigned int **v781;
  unsigned int **v782;
  unsigned int **v783;
  unsigned int **v784;
  unsigned int **v785;
  WTF **v786;
  WTF *v787;
  uint64_t v788;
  _BYTE v789[256];
  WTF *v790;
  uint64_t v791;
  _BYTE v792[256];
  __int128 v793;
  __int128 v794;
  __int128 v795;
  __int128 v796;
  __int128 v797;
  __int128 v798;
  __int128 v799;
  int8x16_t v800;
  __int128 v801;
  uint64_t v802;

  v802 = *MEMORY[0x1E0C80C00];
  *((_OWORD *)this + 14) = 0u;
  v2 = (unsigned int **)((char *)this + 224);
  *((_OWORD *)this + 15) = 0u;
  v3 = (unsigned int **)((char *)this + 240);
  v4 = (unsigned int **)((char *)this + 232);
  v5 = (unsigned int **)((char *)this + 248);
  v6 = (unsigned int **)((char *)this + 256);
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v7 = (unsigned int **)((char *)this + 264);
  v779 = (unsigned int **)((char *)this + 272);
  v780 = (unsigned int **)((char *)this + 280);
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  v781 = (unsigned int **)((char *)this + 288);
  v782 = (unsigned int **)((char *)this + 296);
  v783 = (unsigned int **)((char *)this + 320);
  v784 = (unsigned int **)((char *)this + 312);
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *(_OWORD *)((char *)this + 313) = 0u;
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v13 = (unsigned int *)v787;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v15 = v787;
  v16 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::I32;
  if (*((_DWORD *)v15 + 8))
    v16 = 0;
  *((_QWORD *)this + 4) = v16;
  v787 = 0;
  *(_QWORD *)&v793 = v15;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v8, v9, v10, v11, v12);
  v24 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v24)
  {
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v24);
      WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  v27 = (unsigned int *)v787;
  v787 = 0;
  if (v27)
  {
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      atomic_store(1u, v27);
      WTF::fastFree((unint64_t)v27, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v35 = (unsigned int *)v787;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 + 1, v35));
  v37 = v787;
  v38 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::I64;
  if (*((_DWORD *)v37 + 8))
    v38 = 0;
  *((_QWORD *)this + 5) = v38;
  v787 = 0;
  *(_QWORD *)&v793 = v37;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v30, v31, v32, v33, v34);
  v46 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v46)
  {
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
    {
      atomic_store(1u, v46);
      WTF::fastFree((unint64_t)v46, v39, v40, v41, v42, v43, v44, v45);
    }
  }
  v49 = (unsigned int *)v787;
  v787 = 0;
  if (v49)
  {
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
    {
      atomic_store(1u, v49);
      WTF::fastFree((unint64_t)v49, v39, v40, v41, v42, v43, v44, v45);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v57 = (unsigned int *)v787;
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 + 1, v57));
  v59 = v787;
  v60 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::F32;
  if (*((_DWORD *)v59 + 8))
    v60 = 0;
  *((_QWORD *)this + 6) = v60;
  v787 = 0;
  *(_QWORD *)&v793 = v59;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v52, v53, v54, v55, v56);
  v68 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v68)
  {
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
    {
      atomic_store(1u, v68);
      WTF::fastFree((unint64_t)v68, v61, v62, v63, v64, v65, v66, v67);
    }
  }
  v71 = (unsigned int *)v787;
  v787 = 0;
  if (v71)
  {
    do
    {
      v72 = __ldaxr(v71);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, v71));
    if (!v73)
    {
      atomic_store(1u, v71);
      WTF::fastFree((unint64_t)v71, v61, v62, v63, v64, v65, v66, v67);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v79 = (unsigned int *)v787;
  do
    v80 = __ldaxr(v79);
  while (__stlxr(v80 + 1, v79));
  v81 = v787;
  v82 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::F64;
  if (*((_DWORD *)v81 + 8))
    v82 = 0;
  *((_QWORD *)this + 7) = v82;
  v787 = 0;
  *(_QWORD *)&v793 = v81;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v74, v75, v76, v77, v78);
  v90 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v90)
  {
    do
    {
      v91 = __ldaxr(v90);
      v92 = v91 - 1;
    }
    while (__stlxr(v92, v90));
    if (!v92)
    {
      atomic_store(1u, v90);
      WTF::fastFree((unint64_t)v90, v83, v84, v85, v86, v87, v88, v89);
    }
  }
  v93 = (unsigned int *)v787;
  v787 = 0;
  if (v93)
  {
    do
    {
      v94 = __ldaxr(v93);
      v95 = v94 - 1;
    }
    while (__stlxr(v95, v93));
    if (!v95)
    {
      atomic_store(1u, v93);
      WTF::fastFree((unint64_t)v93, v83, v84, v85, v86, v87, v88, v89);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v101 = (unsigned int *)v787;
  do
    v102 = __ldaxr(v101);
  while (__stlxr(v102 + 1, v101));
  v103 = v787;
  v104 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::V128;
  if (*((_DWORD *)v103 + 8))
    v104 = 0;
  v104[17] = 1;
  *((_QWORD *)this + 8) = v104;
  v787 = 0;
  *(_QWORD *)&v793 = v103;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v96, v97, v98, v99, v100);
  v112 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v112)
  {
    do
    {
      v113 = __ldaxr(v112);
      v114 = v113 - 1;
    }
    while (__stlxr(v114, v112));
    if (!v114)
    {
      atomic_store(1u, v112);
      WTF::fastFree((unint64_t)v112, v105, v106, v107, v108, v109, v110, v111);
    }
  }
  v115 = (unsigned int *)v787;
  v787 = 0;
  if (v115)
  {
    do
    {
      v116 = __ldaxr(v115);
      v117 = v116 - 1;
    }
    while (__stlxr(v117, v115));
    if (!v117)
    {
      atomic_store(1u, v115);
      WTF::fastFree((unint64_t)v115, v105, v106, v107, v108, v109, v110, v111);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v123 = (unsigned int *)v787;
  do
    v124 = __ldaxr(v123);
  while (__stlxr(v124 + 1, v123));
  v125 = v787;
  v126 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::Nullfuncref;
  if (*((_DWORD *)v125 + 8))
    v126 = 0;
  *((_QWORD *)this + 9) = v126;
  v787 = 0;
  *(_QWORD *)&v793 = v125;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v118, v119, v120, v121, v122);
  v134 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v134)
  {
    do
    {
      v135 = __ldaxr(v134);
      v136 = v135 - 1;
    }
    while (__stlxr(v136, v134));
    if (!v136)
    {
      atomic_store(1u, v134);
      WTF::fastFree((unint64_t)v134, v127, v128, v129, v130, v131, v132, v133);
    }
  }
  v137 = (unsigned int *)v787;
  v787 = 0;
  if (v137)
  {
    do
    {
      v138 = __ldaxr(v137);
      v139 = v138 - 1;
    }
    while (__stlxr(v139, v137));
    if (!v139)
    {
      atomic_store(1u, v137);
      WTF::fastFree((unint64_t)v137, v127, v128, v129, v130, v131, v132, v133);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v145 = (unsigned int *)v787;
  do
    v146 = __ldaxr(v145);
  while (__stlxr(v146 + 1, v145));
  v147 = v787;
  v148 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::Nullexternref;
  if (*((_DWORD *)v147 + 8))
    v148 = 0;
  *((_QWORD *)this + 10) = v148;
  v787 = 0;
  *(_QWORD *)&v793 = v147;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v140, v141, v142, v143, v144);
  v156 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v156)
  {
    do
    {
      v157 = __ldaxr(v156);
      v158 = v157 - 1;
    }
    while (__stlxr(v158, v156));
    if (!v158)
    {
      atomic_store(1u, v156);
      WTF::fastFree((unint64_t)v156, v149, v150, v151, v152, v153, v154, v155);
    }
  }
  v159 = (unsigned int *)v787;
  v787 = 0;
  if (v159)
  {
    do
    {
      v160 = __ldaxr(v159);
      v161 = v160 - 1;
    }
    while (__stlxr(v161, v159));
    if (!v161)
    {
      atomic_store(1u, v159);
      WTF::fastFree((unint64_t)v159, v149, v150, v151, v152, v153, v154, v155);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v167 = (unsigned int *)v787;
  do
    v168 = __ldaxr(v167);
  while (__stlxr(v168 + 1, v167));
  v169 = v787;
  v170 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::Nullref;
  if (*((_DWORD *)v169 + 8))
    v170 = 0;
  *((_QWORD *)this + 11) = v170;
  v787 = 0;
  *(_QWORD *)&v793 = v169;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v162, v163, v164, v165, v166);
  v178 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v178)
  {
    do
    {
      v179 = __ldaxr(v178);
      v180 = v179 - 1;
    }
    while (__stlxr(v180, v178));
    if (!v180)
    {
      atomic_store(1u, v178);
      WTF::fastFree((unint64_t)v178, v171, v172, v173, v174, v175, v176, v177);
    }
  }
  v181 = (unsigned int *)v787;
  v787 = 0;
  if (v181)
  {
    do
    {
      v182 = __ldaxr(v181);
      v183 = v182 - 1;
    }
    while (__stlxr(v183, v181));
    if (!v183)
    {
      atomic_store(1u, v181);
      WTF::fastFree((unint64_t)v181, v171, v172, v173, v174, v175, v176, v177);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v189 = (unsigned int *)v787;
  do
    v190 = __ldaxr(v189);
  while (__stlxr(v190 + 1, v189));
  v191 = v787;
  v192 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::Funcref;
  if (*((_DWORD *)v191 + 8))
    v192 = 0;
  *((_QWORD *)this + 12) = v192;
  v787 = 0;
  *(_QWORD *)&v793 = v191;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v184, v185, v186, v187, v188);
  v200 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v200)
  {
    do
    {
      v201 = __ldaxr(v200);
      v202 = v201 - 1;
    }
    while (__stlxr(v202, v200));
    if (!v202)
    {
      atomic_store(1u, v200);
      WTF::fastFree((unint64_t)v200, v193, v194, v195, v196, v197, v198, v199);
    }
  }
  v203 = (unsigned int *)v787;
  v787 = 0;
  if (v203)
  {
    do
    {
      v204 = __ldaxr(v203);
      v205 = v204 - 1;
    }
    while (__stlxr(v205, v203));
    if (!v205)
    {
      atomic_store(1u, v203);
      WTF::fastFree((unint64_t)v203, v193, v194, v195, v196, v197, v198, v199);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v211 = (unsigned int *)v787;
  do
    v212 = __ldaxr(v211);
  while (__stlxr(v212 + 1, v211));
  v213 = v787;
  v214 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::Externref;
  if (*((_DWORD *)v213 + 8))
    v214 = 0;
  *((_QWORD *)this + 13) = v214;
  v787 = 0;
  *(_QWORD *)&v793 = v213;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v206, v207, v208, v209, v210);
  v222 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v222)
  {
    do
    {
      v223 = __ldaxr(v222);
      v224 = v223 - 1;
    }
    while (__stlxr(v224, v222));
    if (!v224)
    {
      atomic_store(1u, v222);
      WTF::fastFree((unint64_t)v222, v215, v216, v217, v218, v219, v220, v221);
    }
  }
  v225 = (unsigned int *)v787;
  v787 = 0;
  if (v225)
  {
    do
    {
      v226 = __ldaxr(v225);
      v227 = v226 - 1;
    }
    while (__stlxr(v227, v225));
    if (!v227)
    {
      atomic_store(1u, v225);
      WTF::fastFree((unint64_t)v225, v215, v216, v217, v218, v219, v220, v221);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v233 = (unsigned int *)v787;
  do
    v234 = __ldaxr(v233);
  while (__stlxr(v234 + 1, v233));
  v235 = v787;
  v236 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::Anyref;
  if (*((_DWORD *)v235 + 8))
    v236 = 0;
  *((_QWORD *)this + 14) = v236;
  v787 = 0;
  *(_QWORD *)&v793 = v235;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v228, v229, v230, v231, v232);
  v244 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v244)
  {
    do
    {
      v245 = __ldaxr(v244);
      v246 = v245 - 1;
    }
    while (__stlxr(v246, v244));
    if (!v246)
    {
      atomic_store(1u, v244);
      WTF::fastFree((unint64_t)v244, v237, v238, v239, v240, v241, v242, v243);
    }
  }
  v247 = (unsigned int *)v787;
  v787 = 0;
  if (v247)
  {
    do
    {
      v248 = __ldaxr(v247);
      v249 = v248 - 1;
    }
    while (__stlxr(v249, v247));
    if (!v249)
    {
      atomic_store(1u, v247);
      WTF::fastFree((unint64_t)v247, v237, v238, v239, v240, v241, v242, v243);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v255 = (unsigned int *)v787;
  do
    v256 = __ldaxr(v255);
  while (__stlxr(v256 + 1, v255));
  v257 = v787;
  v258 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::Eqref;
  if (*((_DWORD *)v257 + 8))
    v258 = 0;
  *((_QWORD *)this + 15) = v258;
  v787 = 0;
  *(_QWORD *)&v793 = v257;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v250, v251, v252, v253, v254);
  v266 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v266)
  {
    do
    {
      v267 = __ldaxr(v266);
      v268 = v267 - 1;
    }
    while (__stlxr(v268, v266));
    if (!v268)
    {
      atomic_store(1u, v266);
      WTF::fastFree((unint64_t)v266, v259, v260, v261, v262, v263, v264, v265);
    }
  }
  v269 = (unsigned int *)v787;
  v787 = 0;
  if (v269)
  {
    do
    {
      v270 = __ldaxr(v269);
      v271 = v270 - 1;
    }
    while (__stlxr(v271, v269));
    if (!v271)
    {
      atomic_store(1u, v269);
      WTF::fastFree((unint64_t)v269, v259, v260, v261, v262, v263, v264, v265);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v277 = (unsigned int *)v787;
  do
    v278 = __ldaxr(v277);
  while (__stlxr(v278 + 1, v277));
  v279 = v787;
  v280 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::I31ref;
  if (*((_DWORD *)v279 + 8))
    v280 = 0;
  *((_QWORD *)this + 16) = v280;
  v787 = 0;
  *(_QWORD *)&v793 = v279;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v272, v273, v274, v275, v276);
  v288 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v288)
  {
    do
    {
      v289 = __ldaxr(v288);
      v290 = v289 - 1;
    }
    while (__stlxr(v290, v288));
    if (!v290)
    {
      atomic_store(1u, v288);
      WTF::fastFree((unint64_t)v288, v281, v282, v283, v284, v285, v286, v287);
    }
  }
  v291 = (unsigned int *)v787;
  v787 = 0;
  if (v291)
  {
    do
    {
      v292 = __ldaxr(v291);
      v293 = v292 - 1;
    }
    while (__stlxr(v293, v291));
    if (!v293)
    {
      atomic_store(1u, v291);
      WTF::fastFree((unint64_t)v291, v281, v282, v283, v284, v285, v286, v287);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v299 = (unsigned int *)v787;
  do
    v300 = __ldaxr(v299);
  while (__stlxr(v300 + 1, v299));
  v301 = v787;
  v302 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::Structref;
  if (*((_DWORD *)v301 + 8))
    v302 = 0;
  *((_QWORD *)this + 17) = v302;
  v787 = 0;
  *(_QWORD *)&v793 = v301;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v294, v295, v296, v297, v298);
  v310 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v310)
  {
    do
    {
      v311 = __ldaxr(v310);
      v312 = v311 - 1;
    }
    while (__stlxr(v312, v310));
    if (!v312)
    {
      atomic_store(1u, v310);
      WTF::fastFree((unint64_t)v310, v303, v304, v305, v306, v307, v308, v309);
    }
  }
  v313 = (unsigned int *)v787;
  v787 = 0;
  if (v313)
  {
    do
    {
      v314 = __ldaxr(v313);
      v315 = v314 - 1;
    }
    while (__stlxr(v315, v313));
    if (!v315)
    {
      atomic_store(1u, v313);
      WTF::fastFree((unint64_t)v313, v303, v304, v305, v306, v307, v308, v309);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v321 = (unsigned int *)v787;
  do
    v322 = __ldaxr(v321);
  while (__stlxr(v322 + 1, v321));
  v323 = v787;
  v324 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::Arrayref;
  if (*((_DWORD *)v323 + 8))
    v324 = 0;
  *((_QWORD *)this + 18) = v324;
  v787 = 0;
  *(_QWORD *)&v793 = v323;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v316, v317, v318, v319, v320);
  v332 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v332)
  {
    do
    {
      v333 = __ldaxr(v332);
      v334 = v333 - 1;
    }
    while (__stlxr(v334, v332));
    if (!v334)
    {
      atomic_store(1u, v332);
      WTF::fastFree((unint64_t)v332, v325, v326, v327, v328, v329, v330, v331);
    }
  }
  v335 = (unsigned int *)v787;
  v787 = 0;
  if (v335)
  {
    do
    {
      v336 = __ldaxr(v335);
      v337 = v336 - 1;
    }
    while (__stlxr(v337, v335));
    if (!v337)
    {
      atomic_store(1u, v335);
      WTF::fastFree((unint64_t)v335, v325, v326, v327, v328, v329, v330, v331);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v343 = (unsigned int *)v787;
  do
    v344 = __ldaxr(v343);
  while (__stlxr(v344 + 1, v343));
  v345 = v787;
  v346 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::Ref;
  if (*((_DWORD *)v345 + 8))
    v346 = 0;
  *((_QWORD *)this + 19) = v346;
  v787 = 0;
  *(_QWORD *)&v793 = v345;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v338, v339, v340, v341, v342);
  v354 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v354)
  {
    do
    {
      v355 = __ldaxr(v354);
      v356 = v355 - 1;
    }
    while (__stlxr(v356, v354));
    if (!v356)
    {
      atomic_store(1u, v354);
      WTF::fastFree((unint64_t)v354, v347, v348, v349, v350, v351, v352, v353);
    }
  }
  v357 = (unsigned int *)v787;
  v787 = 0;
  if (v357)
  {
    do
    {
      v358 = __ldaxr(v357);
      v359 = v358 - 1;
    }
    while (__stlxr(v359, v357));
    if (!v359)
    {
      atomic_store(1u, v357);
      WTF::fastFree((unint64_t)v357, v347, v348, v349, v350, v351, v352, v353);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v365 = (unsigned int *)v787;
  do
    v366 = __ldaxr(v365);
  while (__stlxr(v366 + 1, v365));
  v367 = v787;
  v368 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::RefNull;
  if (*((_DWORD *)v367 + 8))
    v368 = 0;
  *((_QWORD *)this + 20) = v368;
  v787 = 0;
  *(_QWORD *)&v793 = v367;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v360, v361, v362, v363, v364);
  v376 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v376)
  {
    do
    {
      v377 = __ldaxr(v376);
      v378 = v377 - 1;
    }
    while (__stlxr(v378, v376));
    if (!v378)
    {
      atomic_store(1u, v376);
      WTF::fastFree((unint64_t)v376, v369, v370, v371, v372, v373, v374, v375);
    }
  }
  v379 = (unsigned int *)v787;
  v787 = 0;
  if (v379)
  {
    do
    {
      v380 = __ldaxr(v379);
      v381 = v380 - 1;
    }
    while (__stlxr(v381, v379));
    if (!v381)
    {
      atomic_store(1u, v379);
      WTF::fastFree((unint64_t)v379, v369, v370, v371, v372, v373, v374, v375);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v387 = (unsigned int *)v787;
  do
    v388 = __ldaxr(v387);
  while (__stlxr(v388 + 1, v387));
  v389 = v787;
  v390 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::Func;
  if (*((_DWORD *)v389 + 8))
    v390 = 0;
  *((_QWORD *)this + 21) = v390;
  v787 = 0;
  *(_QWORD *)&v793 = v389;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v382, v383, v384, v385, v386);
  v398 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v398)
  {
    do
    {
      v399 = __ldaxr(v398);
      v400 = v399 - 1;
    }
    while (__stlxr(v400, v398));
    if (!v400)
    {
      atomic_store(1u, v398);
      WTF::fastFree((unint64_t)v398, v391, v392, v393, v394, v395, v396, v397);
    }
  }
  v401 = (unsigned int *)v787;
  v787 = 0;
  if (v401)
  {
    do
    {
      v402 = __ldaxr(v401);
      v403 = v402 - 1;
    }
    while (__stlxr(v403, v401));
    if (!v403)
    {
      atomic_store(1u, v401);
      WTF::fastFree((unint64_t)v401, v391, v392, v393, v394, v395, v396, v397);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v409 = (unsigned int *)v787;
  do
    v410 = __ldaxr(v409);
  while (__stlxr(v410 + 1, v409));
  v411 = v787;
  v412 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::Struct;
  if (*((_DWORD *)v411 + 8))
    v412 = 0;
  *((_QWORD *)this + 22) = v412;
  v787 = 0;
  *(_QWORD *)&v793 = v411;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v404, v405, v406, v407, v408);
  v420 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v420)
  {
    do
    {
      v421 = __ldaxr(v420);
      v422 = v421 - 1;
    }
    while (__stlxr(v422, v420));
    if (!v422)
    {
      atomic_store(1u, v420);
      WTF::fastFree((unint64_t)v420, v413, v414, v415, v416, v417, v418, v419);
    }
  }
  v423 = (unsigned int *)v787;
  v787 = 0;
  if (v423)
  {
    do
    {
      v424 = __ldaxr(v423);
      v425 = v424 - 1;
    }
    while (__stlxr(v425, v423));
    if (!v425)
    {
      atomic_store(1u, v423);
      WTF::fastFree((unint64_t)v423, v413, v414, v415, v416, v417, v418, v419);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v431 = (unsigned int *)v787;
  do
    v432 = __ldaxr(v431);
  while (__stlxr(v432 + 1, v431));
  v433 = v787;
  v434 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::Array;
  if (*((_DWORD *)v433 + 8))
    v434 = 0;
  *((_QWORD *)this + 23) = v434;
  v787 = 0;
  *(_QWORD *)&v793 = v433;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v426, v427, v428, v429, v430);
  v442 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v442)
  {
    do
    {
      v443 = __ldaxr(v442);
      v444 = v443 - 1;
    }
    while (__stlxr(v444, v442));
    if (!v444)
    {
      atomic_store(1u, v442);
      WTF::fastFree((unint64_t)v442, v435, v436, v437, v438, v439, v440, v441);
    }
  }
  v445 = (unsigned int *)v787;
  v787 = 0;
  if (v445)
  {
    do
    {
      v446 = __ldaxr(v445);
      v447 = v446 - 1;
    }
    while (__stlxr(v447, v445));
    if (!v447)
    {
      atomic_store(1u, v445);
      WTF::fastFree((unint64_t)v445, v435, v436, v437, v438, v439, v440, v441);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v453 = (unsigned int *)v787;
  do
    v454 = __ldaxr(v453);
  while (__stlxr(v454 + 1, v453));
  v455 = v787;
  v456 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::Sub;
  if (*((_DWORD *)v455 + 8))
    v456 = 0;
  *((_QWORD *)this + 24) = v456;
  v787 = 0;
  *(_QWORD *)&v793 = v455;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v448, v449, v450, v451, v452);
  v464 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v464)
  {
    do
    {
      v465 = __ldaxr(v464);
      v466 = v465 - 1;
    }
    while (__stlxr(v466, v464));
    if (!v466)
    {
      atomic_store(1u, v464);
      WTF::fastFree((unint64_t)v464, v457, v458, v459, v460, v461, v462, v463);
    }
  }
  v467 = (unsigned int *)v787;
  v787 = 0;
  if (v467)
  {
    do
    {
      v468 = __ldaxr(v467);
      v469 = v468 - 1;
    }
    while (__stlxr(v469, v467));
    if (!v469)
    {
      atomic_store(1u, v467);
      WTF::fastFree((unint64_t)v467, v457, v458, v459, v460, v461, v462, v463);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v475 = (unsigned int *)v787;
  do
    v476 = __ldaxr(v475);
  while (__stlxr(v476 + 1, v475));
  v477 = v787;
  v478 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::Subfinal;
  if (*((_DWORD *)v477 + 8))
    v478 = 0;
  *((_QWORD *)this + 25) = v478;
  v787 = 0;
  *(_QWORD *)&v793 = v477;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v470, v471, v472, v473, v474);
  v486 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v486)
  {
    do
    {
      v487 = __ldaxr(v486);
      v488 = v487 - 1;
    }
    while (__stlxr(v488, v486));
    if (!v488)
    {
      atomic_store(1u, v486);
      WTF::fastFree((unint64_t)v486, v479, v480, v481, v482, v483, v484, v485);
    }
  }
  v489 = (unsigned int *)v787;
  v787 = 0;
  if (v489)
  {
    do
    {
      v490 = __ldaxr(v489);
      v491 = v490 - 1;
    }
    while (__stlxr(v491, v489));
    if (!v491)
    {
      atomic_store(1u, v489);
      WTF::fastFree((unint64_t)v489, v479, v480, v481, v482, v483, v484, v485);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 1, 0);
  v497 = (unsigned int *)v787;
  do
    v498 = __ldaxr(v497);
  while (__stlxr(v498 + 1, v497));
  v499 = v787;
  v500 = (char *)v787 + 8;
  *(_OWORD *)*((_QWORD *)v787 + 1) = JSC::Wasm::Types::Rec;
  if (*((_DWORD *)v499 + 8))
    v500 = 0;
  *((_QWORD *)this + 26) = v500;
  v787 = 0;
  *(_QWORD *)&v793 = v499;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v492, v493, v494, v495, v496);
  v508 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v508)
  {
    do
    {
      v509 = __ldaxr(v508);
      v510 = v509 - 1;
    }
    while (__stlxr(v510, v508));
    if (!v510)
    {
      atomic_store(1u, v508);
      WTF::fastFree((unint64_t)v508, v501, v502, v503, v504, v505, v506, v507);
    }
  }
  v511 = (unsigned int *)v787;
  v787 = 0;
  if (v511)
  {
    do
    {
      v512 = __ldaxr(v511);
      v513 = v512 - 1;
    }
    while (__stlxr(v513, v511));
    if (!v513)
    {
      atomic_store(1u, v511);
      WTF::fastFree((unint64_t)v511, v501, v502, v503, v504, v505, v506, v507);
    }
  }
  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v787, 0, 0);
  v519 = (unsigned int *)v787;
  do
    v520 = __ldaxr(v519);
  while (__stlxr(v520 + 1, v519));
  v521 = v787;
  v522 = (char *)v787 + 8;
  if (*((_DWORD *)v787 + 8))
    v522 = 0;
  *((_QWORD *)this + 27) = v522;
  v787 = 0;
  *(_QWORD *)&v793 = v521;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add((uint64_t)&v790, (uint64_t *)this, (unint64_t *)&v793, v514, v515, v516, v517, v518);
  v530 = (unsigned int *)v793;
  *(_QWORD *)&v793 = 0;
  if (v530)
  {
    do
    {
      v531 = __ldaxr(v530);
      v532 = v531 - 1;
    }
    while (__stlxr(v532, v530));
    if (!v532)
    {
      atomic_store(1u, v530);
      WTF::fastFree((unint64_t)v530, v523, v524, v525, v526, v527, v528, v529);
    }
  }
  v533 = (unsigned int *)v787;
  v787 = 0;
  if (v533)
  {
    do
    {
      v534 = __ldaxr(v533);
      v535 = v534 - 1;
    }
    while (__stlxr(v535, v533));
    if (!v535)
    {
      atomic_store(1u, v533);
      WTF::fastFree((unint64_t)v533, v523, v524, v525, v526, v527, v528, v529);
    }
  }
  v801 = JSC::Wasm::Types::I64;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v790, &v801, 1uLL);
  v787 = (WTF *)v789;
  v788 = 16;
  v785 = (unsigned int **)&v790;
  v786 = &v787;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>((uint64_t *)this, (uint64_t **)&v785, (uint64_t)&v785, v536, v537, v538, v539, v540, (uint64_t)&v793);
  WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>::operator=(v2, (unsigned int **)v793, v541, v542, v543, v544, v545, v546);
  v554 = v787;
  if (v789 != (_BYTE *)v787 && v787)
  {
    v787 = 0;
    LODWORD(v788) = 0;
    WTF::fastFree((unint64_t)v554, v547, v548, v549, v550, v551, v552, v553);
  }
  v555 = v790;
  if (v792 != (_BYTE *)v790 && v790)
  {
    v790 = 0;
    LODWORD(v791) = 0;
    WTF::fastFree((unint64_t)v555, v547, v548, v549, v550, v551, v552, v553);
  }
  v790 = (WTF *)v792;
  v791 = 16;
  v785 = (unsigned int **)&v790;
  v801 = JSC::Wasm::Types::I32;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v787, &v801, 1uLL);
  v786 = &v787;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>((uint64_t *)this, (uint64_t **)&v785, (uint64_t)&v785, v556, v557, v558, v559, v560, (uint64_t)&v793);
  WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>::operator=(v4, (unsigned int **)v793, v561, v562, v563, v564, v565, v566);
  v574 = v787;
  if (v789 != (_BYTE *)v787 && v787)
  {
    v787 = 0;
    LODWORD(v788) = 0;
    WTF::fastFree((unint64_t)v574, v567, v568, v569, v570, v571, v572, v573);
  }
  v575 = v790;
  if (v792 != (_BYTE *)v790 && v790)
  {
    v790 = 0;
    LODWORD(v791) = 0;
    WTF::fastFree((unint64_t)v575, v567, v568, v569, v570, v571, v572, v573);
  }
  v790 = (WTF *)v792;
  v791 = 16;
  *(_QWORD *)&v801 = &v790;
  v793 = xmmword_19915B180;
  v794 = unk_19915B190;
  v795 = xmmword_19915B1A0;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v787, &v793, 3uLL);
  *((_QWORD *)&v801 + 1) = &v787;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>((uint64_t *)this, (uint64_t **)&v801, (uint64_t)&v801, v576, v577, v578, v579, v580, (uint64_t)&v785);
  WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>::operator=(v3, v785, v581, v582, v583, v584, v585, v586);
  v594 = v787;
  if (v789 != (_BYTE *)v787 && v787)
  {
    v787 = 0;
    LODWORD(v788) = 0;
    WTF::fastFree((unint64_t)v594, v587, v588, v589, v590, v591, v592, v593);
  }
  v595 = v790;
  if (v792 != (_BYTE *)v790 && v790)
  {
    v790 = 0;
    LODWORD(v791) = 0;
    WTF::fastFree((unint64_t)v595, v587, v588, v589, v590, v591, v592, v593);
  }
  v790 = (WTF *)v792;
  v791 = 16;
  *(_QWORD *)&v801 = &v790;
  v793 = xmmword_19915B200;
  v794 = unk_19915B210;
  v795 = xmmword_19915B220;
  v796 = unk_19915B230;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v787, &v793, 4uLL);
  *((_QWORD *)&v801 + 1) = &v787;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>((uint64_t *)this, (uint64_t **)&v801, (uint64_t)&v801, v596, v597, v598, v599, v600, (uint64_t)&v785);
  WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>::operator=(v5, v785, v601, v602, v603, v604, v605, v606);
  v614 = v787;
  if (v789 != (_BYTE *)v787 && v787)
  {
    v787 = 0;
    LODWORD(v788) = 0;
    WTF::fastFree((unint64_t)v614, v607, v608, v609, v610, v611, v612, v613);
  }
  v615 = v790;
  if (v792 != (_BYTE *)v790 && v790)
  {
    v790 = 0;
    LODWORD(v791) = 0;
    WTF::fastFree((unint64_t)v615, v607, v608, v609, v610, v611, v612, v613);
  }
  v790 = (WTF *)v792;
  v791 = 16;
  *(_QWORD *)&v801 = &v790;
  v795 = xmmword_19915B1D0;
  v796 = unk_19915B1E0;
  v797 = xmmword_19915B1F0;
  v793 = xmmword_19915B1B0;
  v794 = unk_19915B1C0;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v787, &v793, 5uLL);
  *((_QWORD *)&v801 + 1) = &v787;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>((uint64_t *)this, (uint64_t **)&v801, (uint64_t)&v801, v616, v617, v618, v619, v620, (uint64_t)&v785);
  WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>::operator=(v6, v785, v621, v622, v623, v624, v625, v626);
  v634 = v787;
  if (v789 != (_BYTE *)v787 && v787)
  {
    v787 = 0;
    LODWORD(v788) = 0;
    WTF::fastFree((unint64_t)v634, v627, v628, v629, v630, v631, v632, v633);
  }
  v635 = v790;
  if (v792 != (_BYTE *)v790 && v790)
  {
    v790 = 0;
    LODWORD(v791) = 0;
    WTF::fastFree((unint64_t)v635, v627, v628, v629, v630, v631, v632, v633);
  }
  v801 = JSC::Wasm::Types::I32;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v790, &v801, 1uLL);
  v785 = (unsigned int **)&v790;
  v800 = (int8x16_t)JSC::Wasm::Types::I32;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v787, (__int128 *)v800.i8, 1uLL);
  v786 = &v787;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>((uint64_t *)this, (uint64_t **)&v785, (uint64_t)&v785, v636, v637, v638, v639, v640, (uint64_t)&v793);
  WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>::operator=(v7, (unsigned int **)v793, v641, v642, v643, v644, v645, v646);
  v654 = v787;
  if (v789 != (_BYTE *)v787 && v787)
  {
    v787 = 0;
    LODWORD(v788) = 0;
    WTF::fastFree((unint64_t)v654, v647, v648, v649, v650, v651, v652, v653);
  }
  v655 = v790;
  if (v792 != (_BYTE *)v790 && v790)
  {
    v790 = 0;
    LODWORD(v791) = 0;
    WTF::fastFree((unint64_t)v655, v647, v648, v649, v650, v651, v652, v653);
  }
  if (BYTE2(dword_1ECF4C7B0))
  {
    v800 = (int8x16_t)JSC::Wasm::Types::I32;
    WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v790, (__int128 *)v800.i8, 1uLL);
    *(_QWORD *)&v801 = &v790;
    v793 = xmmword_19915AFC0;
    v794 = JSC::Wasm::Types::I32;
    v795 = JSC::Wasm::Types::I32;
    v796 = JSC::Wasm::Types::I32;
    WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v787, &v793, 4uLL);
    *((_QWORD *)&v801 + 1) = &v787;
    WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>((uint64_t *)this, (uint64_t **)&v801, (uint64_t)&v801, v657, v658, v659, v660, v661, (uint64_t)&v785);
    WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>::operator=(v779, v785, v662, v663, v664, v665, v666, v667);
    v675 = v787;
    if (v789 != (_BYTE *)v787 && v787)
    {
      v787 = 0;
      LODWORD(v788) = 0;
      WTF::fastFree((unint64_t)v675, v668, v669, v670, v671, v672, v673, v674);
    }
    v676 = v790;
    if (v792 != (_BYTE *)v790 && v790)
    {
      v790 = 0;
      LODWORD(v791) = 0;
      WTF::fastFree((unint64_t)v676, v668, v669, v670, v671, v672, v673, v674);
    }
    v800 = (int8x16_t)xmmword_19915AFC0;
    WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v790, (__int128 *)v800.i8, 1uLL);
    *(_QWORD *)&v801 = &v790;
    v793 = xmmword_19915AFC0;
    v794 = JSC::Wasm::Types::I32;
    v795 = JSC::Wasm::Types::I32;
    WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v787, &v793, 3uLL);
    *((_QWORD *)&v801 + 1) = &v787;
    WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>((uint64_t *)this, (uint64_t **)&v801, (uint64_t)&v801, v677, v678, v679, v680, v681, (uint64_t)&v785);
    WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>::operator=(v780, v785, v682, v683, v684, v685, v686, v687);
    v695 = v787;
    if (v789 != (_BYTE *)v787 && v787)
    {
      v787 = 0;
      LODWORD(v788) = 0;
      WTF::fastFree((unint64_t)v695, v688, v689, v690, v691, v692, v693, v694);
    }
    v696 = v790;
    if (v792 != (_BYTE *)v790 && v790)
    {
      v790 = 0;
      LODWORD(v791) = 0;
      WTF::fastFree((unint64_t)v696, v688, v689, v690, v691, v692, v693, v694);
    }
    v800 = (int8x16_t)xmmword_19915AFD0;
    WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v790, (__int128 *)v800.i8, 1uLL);
    *(_QWORD *)&v801 = &v790;
    v793 = xmmword_19915B200;
    v794 = unk_19915B210;
    v795 = xmmword_19915B220;
    v796 = unk_19915B230;
    WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v787, &v793, 4uLL);
    *((_QWORD *)&v801 + 1) = &v787;
    WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>((uint64_t *)this, (uint64_t **)&v801, (uint64_t)&v801, v697, v698, v699, v700, v701, (uint64_t)&v785);
    WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>::operator=(v781, v785, v702, v703, v704, v705, v706, v707);
    v715 = v787;
    if (v789 != (_BYTE *)v787 && v787)
    {
      v787 = 0;
      LODWORD(v788) = 0;
      WTF::fastFree((unint64_t)v715, v708, v709, v710, v711, v712, v713, v714);
    }
    v716 = v790;
    if (v792 != (_BYTE *)v790 && v790)
    {
      v790 = 0;
      LODWORD(v791) = 0;
      WTF::fastFree((unint64_t)v716, v708, v709, v710, v711, v712, v713, v714);
    }
    v801 = xmmword_19915AFC0;
    WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v790, &v801, 1uLL);
    v785 = (unsigned int **)&v790;
    v717 = vdup_n_s32(BYTE1(dword_1ECF4C7B0) == 0);
    v718.i64[0] = v717.u32[0];
    v718.i64[1] = v717.u32[1];
    v800 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v718, 0x3FuLL)), (int8x16_t)xmmword_19915AFF0, (int8x16_t)xmmword_19915AFE0);
    WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v787, (__int128 *)v800.i8, 1uLL);
    v786 = &v787;
    WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>((uint64_t *)this, (uint64_t **)&v785, (uint64_t)&v785, v719, v720, v721, v722, v723, (uint64_t)&v793);
    WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>::operator=(v782, (unsigned int **)v793, v724, v725, v726, v727, v728, v729);
    v737 = v787;
    if (v789 != (_BYTE *)v787 && v787)
    {
      v787 = 0;
      LODWORD(v788) = 0;
      WTF::fastFree((unint64_t)v737, v730, v731, v732, v733, v734, v735, v736);
    }
    v738 = v790;
    if (v792 != (_BYTE *)v790 && v790)
    {
      v790 = 0;
      LODWORD(v791) = 0;
      WTF::fastFree((unint64_t)v738, v730, v731, v732, v733, v734, v735, v736);
    }
    v790 = (WTF *)v792;
    v791 = 16;
    *(_QWORD *)&v801 = &v790;
    v793 = JSC::Wasm::Types::I32;
    v794 = xmmword_19915AFC0;
    v795 = JSC::Wasm::Types::I32;
    v796 = JSC::Wasm::Types::I32;
    v797 = xmmword_19915AFC0;
    v798 = JSC::Wasm::Types::I32;
    v799 = JSC::Wasm::Types::I32;
    WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v787, &v793, 7uLL);
    *((_QWORD *)&v801 + 1) = &v787;
    WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>((uint64_t *)this, (uint64_t **)&v801, (uint64_t)&v801, v739, v740, v741, v742, v743, (uint64_t)&v785);
    WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>::operator=(v783, v785, v744, v745, v746, v747, v748, v749);
    v757 = v787;
    if (v789 != (_BYTE *)v787 && v787)
    {
      v787 = 0;
      LODWORD(v788) = 0;
      WTF::fastFree((unint64_t)v757, v750, v751, v752, v753, v754, v755, v756);
    }
    v758 = v790;
    if (v792 != (_BYTE *)v790 && v790)
    {
      v790 = 0;
      LODWORD(v791) = 0;
      WTF::fastFree((unint64_t)v758, v750, v751, v752, v753, v754, v755, v756);
    }
    v790 = (WTF *)v792;
    v791 = 16;
    *(_QWORD *)&v801 = &v790;
    v793 = JSC::Wasm::Types::I32;
    v794 = xmmword_19915AFC0;
    v795 = JSC::Wasm::Types::I32;
    v796 = JSC::Wasm::Types::I32;
    v797 = JSC::Wasm::Types::I32;
    v798 = JSC::Wasm::Types::I32;
    WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v787, &v793, 6uLL);
    *((_QWORD *)&v801 + 1) = &v787;
    WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>((uint64_t *)this, (uint64_t **)&v801, (uint64_t)&v801, v759, v760, v761, v762, v763, (uint64_t)&v785);
    WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>::operator=(v784, v785, v764, v765, v766, v767, v768, v769);
    v777 = v787;
    if (v789 != (_BYTE *)v787 && v787)
    {
      v787 = 0;
      LODWORD(v788) = 0;
      WTF::fastFree((unint64_t)v777, v770, v771, v772, v773, v774, v775, v776);
    }
    v778 = v790;
    if (v792 != (_BYTE *)v790 && v790)
    {
      v790 = 0;
      LODWORD(v791) = 0;
      WTF::fastFree((unint64_t)v778, v770, v771, v772, v773, v774, v775, v776);
    }
  }
  return this;
}

void JSC::Wasm::TypeInformation::typeDefinitionForRecursionGroup(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, unsigned int **a7@<X8>)
{
  unint64_t v9;
  uint64_t *v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  int v21;
  _QWORD v22[3];
  char v23;
  uint64_t *v24;

  v9 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v9 != -1)
  {
    v22[0] = &v23;
    v24 = v22;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v10 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v11 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_7;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
LABEL_7:
  v24 = a1;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::RecursionGroupParameterTypes>,JSC::Wasm::RecursionGroupParameterTypes const&,JSC::Wasm::RecursionGroupParameterTypes const&>(v10, &v24, (uint64_t)&v24, a2, a3, a4, a5, a6, (uint64_t)v22);
  v19 = *(unsigned int **)v22[0];
  if (*(_QWORD *)v22[0])
  {
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
  }
  *a7 = v19;
  v21 = __ldxr(v11);
  if (v21 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v11))
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, v13, v14, v15, v16, v17, v18);
}

void JSC::Wasm::TypeInformation::getPlaceholderProjection(JSC::Wasm::TypeInformation *this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, unsigned int **a7@<X8>)
{
  int v7;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  void *v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int *v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int **v40;
  unsigned int *v41;
  unsigned int **v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  _QWORD *v52;
  int v53;
  _QWORD v54[3];
  char v55;

  v7 = (int)this;
  v9 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v9 != -1)
  {
    v54[0] = &v55;
    v52 = v54;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v52, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v10 = (char *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v11 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v11 != -1)
  {
    v54[0] = &v55;
    v52 = v54;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v52, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v12 = JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v13 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_9;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v12 + 328);
LABEL_9:
  v52 = 0;
  v53 = v7;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::ProjectionParameterTypes>,JSC::Wasm::ProjectionParameterTypes const&,JSC::Wasm::ProjectionParameterTypes const&>((uint64_t *)v12, (uint64_t)&v52, (uint64_t)&v52, a2, a3, a4, a5, a6, (uint64_t)v54);
  v21 = *(unsigned int **)v54[0];
  if (*(_QWORD *)v54[0])
  {
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  *a7 = v21;
  v23 = __ldxr(v13);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v13))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v12 + 328, 0, v15, v16, v17, v18, v19, v20);
  v24 = (unsigned __int8 *)(v10 + 328);
  if (__ldaxr((unsigned __int8 *)v10 + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v24))
  {
    goto LABEL_20;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v10 + 328));
LABEL_20:
  v28 = *((_QWORD *)v10 + 3);
  v27 = (uint64_t *)(v10 + 24);
  v26 = v28;
  if (v28)
  {
    v29 = *(_DWORD *)(v26 - 8);
    v30 = (unint64_t)*a7 + ~((_QWORD)*a7 << 32);
    v31 = 9
        * (((v30 ^ (v30 >> 22)) + ~((v30 ^ (v30 >> 22)) << 13)) ^ (((v30 ^ (v30 >> 22)) + ~((v30 ^ (v30 >> 22)) << 13)) >> 8));
    v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
    v33 = v29 & ((v32 >> 31) ^ v32);
    v34 = *(unsigned int **)(v26 + 8 * v33);
    if (v34 == *a7)
      goto LABEL_49;
    v35 = 1;
    while (v34)
    {
      v33 = (v33 + v35) & v29;
      v34 = *(unsigned int **)(v26 + 8 * v33);
      ++v35;
      if (v34 == *a7)
        goto LABEL_49;
    }
  }
  else
  {
    WTF::HashTable<WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>,WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>>>::rehash(v27, 8uLL, 0, v16, v17, v18, v19, v20);
    v26 = *v27;
    if (*v27)
      v29 = *(_DWORD *)(v26 - 8);
    else
      v29 = 0;
  }
  v36 = (unint64_t)*a7 + ~((_QWORD)*a7 << 32);
  v37 = 9
      * (((v36 ^ (v36 >> 22)) + ~((v36 ^ (v36 >> 22)) << 13)) ^ (((v36 ^ (v36 >> 22)) + ~((v36 ^ (v36 >> 22)) << 13)) >> 8));
  v38 = (v37 ^ (v37 >> 15)) + ~((v37 ^ (v37 >> 15)) << 27);
  v39 = v29 & ((v38 >> 31) ^ v38);
  v40 = (unsigned int **)(v26 + 8 * v39);
  v41 = *v40;
  if (!*v40)
  {
LABEL_37:
    WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>::operator=(v40, a7, v15, v16, v17, v18, v19, v20);
    v44 = *v27;
    if (*v27)
      v45 = *(_DWORD *)(v44 - 12) + 1;
    else
      v45 = 1;
    *(_DWORD *)(v44 - 12) = v45;
    v46 = *v27;
    if (*v27)
      v47 = *(_DWORD *)(v46 - 12);
    else
      v47 = 0;
    v48 = (*(_DWORD *)(v46 - 16) + v47);
    v49 = *(unsigned int *)(v46 - 4);
    if (v49 > 0x400)
    {
      if (v49 > 2 * v48)
        goto LABEL_49;
    }
    else
    {
      if (3 * v49 > 4 * v48)
        goto LABEL_49;
      if (!(_DWORD)v49)
      {
        v50 = 8;
        goto LABEL_48;
      }
    }
    v50 = ((_DWORD)v49 << (6 * *(_DWORD *)(v46 - 12) >= (2 * v49)));
LABEL_48:
    WTF::HashTable<WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>,WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>>>::rehash(v27, v50, (uint64_t)v40, v16, v17, v18, v19, v20);
    goto LABEL_49;
  }
  v42 = 0;
  v43 = 1;
  while (v41 != *a7)
  {
    if (v41 == (unsigned int *)-1)
      v42 = v40;
    v39 = (v39 + v43) & v29;
    v40 = (unsigned int **)(v26 + 8 * v39);
    v41 = *v40;
    ++v43;
    if (!*v40)
    {
      if (v42)
      {
        *v42 = 0;
        --*(_DWORD *)(*v27 - 16);
        v40 = v42;
      }
      goto LABEL_37;
    }
  }
LABEL_49:
  v51 = __ldxr(v24);
  if (v51 == 1)
  {
    if (!__stlxr(0, v24))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v24, 0, v15, v16, v17, v18, v19, v20);
}

void JSC::Wasm::TypeInformation::registerCanonicalRTTForType(JSC::Wasm::TypeInformation *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  char *v9;
  JSC::Wasm::TypeInformation *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD v35[3];
  WTF *v36;
  WTF *v37;
  WTF *v38;
  char v39;
  JSC::Wasm::TypeInformation *v40;

  v40 = this;
  v8 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v8 != -1)
  {
    v35[0] = &v37;
    v38 = (WTF *)v35;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v38, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v9 = (char *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v10 = v40;
  JSC::Wasm::TypeInformation::tryGetCanonicalRTT(v40, a3, a4, a5, a6, a7, a8, (uint64_t)&v38);
  if (v39)
    goto LABEL_22;
  JSC::Wasm::TypeInformation::canonicalRTTForType(v10, (unsigned int **)&v37);
  v23 = (unsigned __int8 *)(v9 + 328);
  if (__ldaxr((unsigned __int8 *)v9 + 328))
  {
    __clrex();
LABEL_7:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v9 + 328));
    goto LABEL_8;
  }
  if (__stxr(1u, v23))
    goto LABEL_7;
LABEL_8:
  v36 = v37;
  v37 = 0;
  WTF::HashMap<unsigned long,WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>,WTF::HashTableTraits>::add<WTF::Ref<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>((uint64_t *)v9 + 2, (uint64_t *)&v40, (uint64_t *)&v36, v18, v19, v20, v21, v22, (uint64_t)v35);
  v25 = (unsigned int *)v36;
  v36 = 0;
  if (v25)
  {
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((unint64_t)v25, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  v28 = __ldxr(v23);
  if (v28 == 1)
  {
    if (!__stlxr(0, v23))
      goto LABEL_17;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v9 + 328, 0, v12, v13, v14, v15, v16, v17);
LABEL_17:
  v29 = (unsigned int *)v37;
  v37 = 0;
  if (v29)
  {
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((unint64_t)v29, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  if (v39)
  {
LABEL_22:
    v32 = (unsigned int *)v38;
    v38 = 0;
    if (v32)
    {
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        WTF::fastFree((unint64_t)v32, v11, v12, v13, v14, v15, v16, v17);
      }
    }
  }
}

void JSC::Wasm::TypeInformation::tryGetCanonicalRTT(JSC::Wasm::TypeInformation *this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  unint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  JSC::Wasm::TypeInformation *v20;
  int v21;
  char v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  char v26;
  char **v27;
  char *v28;

  v10 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v10 != -1)
  {
    v28 = &v26;
    v27 = &v28;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v27, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v11 = JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v12 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
LABEL_6:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v12);
    goto LABEL_7;
  }
  if (__stxr(1u, v12))
    goto LABEL_6;
LABEL_7:
  v14 = v11[2];
  if (!v14)
    goto LABEL_15;
  v15 = *(_DWORD *)(v14 - 8);
  v16 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v15 & ((v18 >> 31) ^ v18);
  v20 = *(JSC::Wasm::TypeInformation **)(v14 + 16 * v19);
  if (v20 != this)
  {
    v21 = 1;
    while (v20)
    {
      v19 = ((_DWORD)v19 + v21) & v15;
      v20 = *(JSC::Wasm::TypeInformation **)(v14 + 16 * v19);
      ++v21;
      if (v20 == this)
        goto LABEL_14;
    }
    v19 = *(unsigned int *)(v14 - 4);
  }
LABEL_14:
  if (v19 != *(_DWORD *)(v14 - 4))
  {
    v23 = *(unsigned int **)(v14 + 16 * v19 + 8);
    if (v23)
    {
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
    }
    *(_QWORD *)a8 = v23;
    v22 = 1;
  }
  else
  {
LABEL_15:
    v22 = 0;
    *(_BYTE *)a8 = 0;
  }
  *(_BYTE *)(a8 + 8) = v22;
  v25 = __ldxr(v12);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, v12))
LABEL_23:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, a2, a3, a4, a5, a6, a7);
}

void JSC::Wasm::TypeInformation::canonicalRTTForType(JSC::Wasm::TypeInformation *this@<X0>, unsigned int **a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const JSC::Wasm::Type *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  char v15;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  unsigned int *v60;
  WTF *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  const JSC::Wasm::TypeDefinition *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t CachedUnrolling;
  char v76;
  const JSC::Wasm::TypeDefinition *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  JSC::Wasm::TypeDefinition ***v83;
  JSC::Wasm::TypeInformation *v84;
  WTF *v85;
  char v86;
  unsigned int *v87;

  v3 = JSC::Wasm::TypeDefinition::unroll((unint64_t)this);
  *a2 = 0;
  v11 = v3;
  if (*(_DWORD *)(v3 + 32) == 4)
  {
    v53 = *(unsigned int **)(v3 + 8);
    v11 = *(_QWORD *)v53;
    v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v53 + 8) + 8 * v53[2]);
    v83 = (JSC::Wasm::TypeDefinition ***)v54;
    v84 = (JSC::Wasm::TypeInformation *)v3;
    while (1)
    {
      v55 = *(_DWORD *)(v54 + 32);
      switch(v55)
      {
        case 2:
          goto LABEL_83;
        case 1:
          if (*(_BYTE *)(v54 + 20))
            goto LABEL_84;
          goto LABEL_90;
        case 0:
          if (*(_BYTE *)(v54 + 24))
            goto LABEL_84;
          goto LABEL_90;
      }
      v56 = v54 + 8;
      if (v55 != 5)
        v56 = 0;
      v57 = *(_DWORD *)(v56 + 8);
      v58 = *(uint64_t **)v56;
      if (v57)
      {
        v59 = v58[1];
        if (*(_DWORD *)(v59 + 32) == 4 && !**(_QWORD **)(v59 + 8))
          goto LABEL_84;
      }
      v54 = *v58;
    }
  }
  while (1)
  {
    v12 = *(_DWORD *)(v11 + 32);
    if (v12 == 5)
      v12 = *(_DWORD *)(**(_QWORD **)(v11 + 8) + 32);
    v13 = *(_DWORD *)(v3 + 32);
    if (v12)
    {
      v11 = v3;
      if (v13 == 4)
      {
        v60 = *(unsigned int **)(v3 + 8);
        v61 = *(WTF **)v60;
        v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v60 + 8) + 8 * v60[2]);
        v83 = (JSC::Wasm::TypeDefinition ***)v62;
        v84 = (JSC::Wasm::TypeInformation *)v3;
        while (1)
        {
          v63 = *(_DWORD *)(v62 + 32);
          if (v63 == 2)
            break;
          if (v63 == 1)
          {
            if (!*(_BYTE *)(v62 + 20))
              goto LABEL_99;
            goto LABEL_93;
          }
          if (!v63)
          {
            if (!*(_BYTE *)(v62 + 24))
              goto LABEL_99;
            goto LABEL_93;
          }
          v64 = v62 + 8;
          if (v63 != 5)
            v64 = 0;
          v65 = *(_DWORD *)(v64 + 8);
          v66 = *(uint64_t **)v64;
          if (v65)
          {
            v67 = v66[1];
            if (*(_DWORD *)(v67 + 32) == 4 && !**(_QWORD **)(v67 + 8))
              goto LABEL_93;
          }
          v62 = *v66;
        }
        if (!*(_BYTE *)(v62 + 16))
        {
LABEL_99:
          v11 = (unint64_t)v83;
          goto LABEL_6;
        }
LABEL_93:
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v3, v4, v5, v6, (uint64_t)v7, v8, v9, v10);
        if (v76)
        {
          v11 = CachedUnrolling;
        }
        else
        {
          v11 = (unint64_t)JSC::Wasm::TypeDefinition::replacePlaceholders(v83, v61, v5, v6, v7, v8, v9, v10);
          JSC::Wasm::TypeInformation::addCachedUnrolling(v84, (WTF *)v11, v77, v78, v79, v80, v81, v82);
        }
        v3 = (unint64_t)v84;
      }
LABEL_6:
      v14 = *(_DWORD *)(v11 + 32);
      if (v14 == 5)
        v14 = *(_DWORD *)(**(_QWORD **)(v11 + 8) + 32);
      v15 = v14 == 2 ? 1 : 2;
      v13 = *(_DWORD *)(v3 + 32);
    }
    else
    {
      v15 = 0;
    }
    if (v13 != 5 || *(_DWORD *)(v3 + 16) == 0)
      break;
    JSC::Wasm::TypeInformation::tryGetCanonicalRTT(*(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v3 + 8) + 8), v5, v6, (uint64_t)v7, v8, v9, v10, (uint64_t)&v85);
    if (v86)
    {
      v11 = (*((_DWORD *)v85 + 2) + 1);
      WTF::tryFastMalloc((WTF *)(8 * v11 + 16), &v87);
      v36 = v87;
      v87 = 0;
      if (!v36)
      {
        *a2 = 0;
        goto LABEL_103;
      }
      *v36 = 1;
      *((_BYTE *)v36 + 4) = v15;
      v36[2] = v11;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
      v38 = *a2;
      *a2 = v36;
      if (v38)
      {
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v38);
          WTF::fastFree((unint64_t)v38, v29, v30, v31, v32, v33, v34, v35);
        }
        v36 = *a2;
        if (!*a2)
          goto LABEL_103;
      }
      if (v86)
      {
        v41 = (unsigned int *)v85;
        if (v85)
        {
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 + 1, v41));
          *((_QWORD *)v36 + 2) = v41;
          do
          {
            v43 = __ldaxr(v41);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v41));
          if (!v44)
          {
            atomic_store(1u, v41);
            WTF::fastFree((unint64_t)v41, v29, v30, v31, v32, v33, v34, v35);
          }
        }
        else
        {
          *((_QWORD *)v36 + 2) = 0;
        }
        if (v11 < 2)
        {
LABEL_55:
          if (v86)
          {
            v50 = (unsigned int *)v85;
            v85 = 0;
            if (v50)
            {
              do
              {
                v51 = __ldaxr(v50);
                v52 = v51 - 1;
              }
              while (__stlxr(v52, v50));
              if (!v52)
              {
                atomic_store(1u, v50);
                WTF::fastFree((unint64_t)v50, v29, v30, v31, v32, v33, v34, v35);
              }
            }
          }
          return;
        }
        v45 = *a2;
        v46 = 1;
        while (v86)
        {
          v47 = (unsigned int *)*((_QWORD *)v85 + v46 + 1);
          if (v47)
          {
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 + 1, v47));
            *(_QWORD *)&v45[2 * v46 + 4] = v47;
            do
              v49 = __ldaxr(v47);
            while (__stlxr(v49 - 1, v47));
            v45 = *a2;
            if (v49 == 1)
            {
              atomic_store(1u, v47);
              WTF::fastFree((unint64_t)v47, v29, v30, v31, v32, v33, v34, v35);
            }
          }
          else
          {
            *(_QWORD *)&v45[2 * v46 + 4] = 0;
          }
          if (++v46 == v11)
            goto LABEL_55;
        }
      }
    }
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_83:
    if (*(_BYTE *)(v54 + 16))
    {
LABEL_84:
      v68 = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v84, v4, v5, v6, (uint64_t)v7, v8, v9, v10);
      if ((_BYTE)v4)
      {
        v11 = v68;
      }
      else
      {
        v11 = (unint64_t)JSC::Wasm::TypeDefinition::replacePlaceholders(v83, (WTF *)v11, v5, v6, v7, v8, v9, v10);
        JSC::Wasm::TypeInformation::addCachedUnrolling(v84, (WTF *)v11, v69, v70, v71, v72, v73, v74);
      }
      v3 = (unint64_t)v84;
    }
    else
    {
LABEL_90:
      v11 = (unint64_t)v83;
      v3 = (unint64_t)v84;
    }
  }
  WTF::tryFastMalloc((WTF *)0x10, &v85);
  v24 = v85;
  v85 = 0;
  if (!v24)
  {
    *a2 = 0;
    goto LABEL_103;
  }
  *(_DWORD *)v24 = 1;
  *((_BYTE *)v24 + 4) = v15;
  *((_DWORD *)v24 + 2) = 0;
  do
    v25 = __ldaxr((unsigned int *)v24);
  while (__stlxr(v25 + 1, (unsigned int *)v24));
  v26 = *a2;
  *a2 = (unsigned int *)v24;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((unint64_t)v26, v17, v18, v19, v20, v21, v22, v23);
    }
    if (!*a2)
    {
LABEL_103:
      __break(0xC471u);
      JUMPOUT(0x198E38774);
    }
  }
}

void WTF::HashMap<unsigned long,WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>,WTF::HashTableTraits>::add<WTF::Ref<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *a1) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = *a2 + ~(*a2 << 32);
  v18 = 9
      * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v15 & ((v19 >> 31) ^ v19);
  v21 = (uint64_t *)(v13 + 16 * v20);
  v22 = *v21;
  if (*v21)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v22 == v16)
      {
        if ((v14 & 1) != 0)
          v36 = 0;
        else
          v36 = *(unsigned int *)(v13 - 4);
        v37 = 0;
        v38 = v13 + 16 * v36;
        goto LABEL_32;
      }
      if (v22 == -1)
        v23 = v21;
      v20 = (v20 + v24) & v15;
      v21 = (uint64_t *)(v13 + 16 * v20);
      v22 = *v21;
      ++v24;
    }
    while (*v21);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v16 = *a2;
      v21 = v23;
    }
  }
  v25 = *a3;
  *a3 = 0;
  v26 = (unsigned int *)v21[1];
  *v21 = v16;
  v21[1] = v25;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((unint64_t)v26, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  v29 = *a1;
  if (*a1)
    v30 = *(_DWORD *)(v29 - 12) + 1;
  else
    v30 = 1;
  *(_DWORD *)(v29 - 12) = v30;
  v31 = *a1;
  if (*a1)
    v32 = *(_DWORD *)(v31 - 12);
  else
    v32 = 0;
  v33 = (*(_DWORD *)(v31 - 16) + v32);
  v34 = *(unsigned int *)(v31 - 4);
  if (v34 > 0x400)
  {
    if (v34 <= 2 * v33)
      goto LABEL_23;
  }
  else if (3 * v34 <= 4 * v33)
  {
    if (!(_DWORD)v34)
    {
      v35 = 8;
LABEL_29:
      v21 = WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(a1, v35, (uint64_t)v21, a4, a5, a6, a7, a8);
      v31 = *a1;
      if (*a1)
        v34 = *(unsigned int *)(v31 - 4);
      else
        v34 = 0;
      goto LABEL_31;
    }
LABEL_23:
    v35 = ((_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34)));
    goto LABEL_29;
  }
LABEL_31:
  v38 = v31 + 16 * v34;
  v37 = 1;
LABEL_32:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v38;
  *(_BYTE *)(a9 + 16) = v37;
}

void JSC::Wasm::TypeInformation::getCanonicalRTT(JSC::Wasm::TypeInformation *this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, unsigned int **a8@<X8>)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v22;
  unsigned __int8 v23;

  if (!BYTE2(dword_1ECF4C7B0))
    goto LABEL_2;
  JSC::Wasm::TypeInformation::tryGetCanonicalRTT(this, a2, a3, a4, a5, a6, a7, (uint64_t)&v22);
  if (!v23)
  {
    std::__throw_bad_optional_access[abi:sn180100]();
    JUMPOUT(0x198E38A48);
  }
  v16 = (unsigned int *)v22;
  if (v22)
  {
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    v18 = v23;
    *a8 = v16;
    if (v18)
    {
      v19 = (unsigned int *)v22;
      v22 = 0;
      if (v19)
      {
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v19);
          WTF::fastFree((unint64_t)v19, v9, v10, v11, v12, v13, v14, v15);
        }
      }
    }
  }
  else
  {
LABEL_2:
    *a8 = 0;
  }
}

void JSC::Wasm::TypeInformation::tryCleanup(JSC::Wasm::TypeInformation *this)
{
  char *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  v1 = (char *)JSC::Wasm::TypeInformation::singleton(this);
  v9 = (uint64_t *)v1;
  v10 = (unsigned __int8 *)(v1 + 328);
  if (__ldaxr((unsigned __int8 *)v1 + 328))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v1 + 328));
    goto LABEL_4;
  }
  if (__stxr(1u, v10))
    goto LABEL_3;
LABEL_4:
  WTF::HashMap<unsigned long,WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>>,WTF::HashTableTraits>::removeIf<JSC::Wasm::TypeInformation::tryCleanup(void)::$_0>(v9 + 1, v2, v3, v4, v5, v6, v7, v8);
  WTF::HashMap<unsigned long,WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>,WTF::HashTableTraits>::removeIf<JSC::Wasm::TypeInformation::tryCleanup(void)::$_1>(v9 + 2, v12, v13, v14, v15, v16, v17, v18);
  WTF::HashSet<JSC::Wasm::TypeHash,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTableTraits>::removeIf<JSC::Wasm::TypeInformation::tryCleanup(void)::$_2>(v9, v19, v20, v21, v22, v23, v24, v25);
  v32 = __ldxr(v10);
  if (v32 != 1)
  {
    __clrex();
    goto LABEL_8;
  }
  if (__stlxr(0, v10))
LABEL_8:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, v26, v27, v28, v29, v30, v31);
}

void WTF::HashMap<unsigned long,WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>>,WTF::HashTableTraits>::removeIf<JSC::Wasm::TypeInformation::tryCleanup(void)::$_0>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  int v11;
  unsigned int **v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  unint64_t v30;

  v8 = *a1;
  if (*a1)
  {
    v9 = *(_DWORD *)(v8 - 4);
    if (v9)
    {
      v11 = 0;
      do
      {
        v12 = (unsigned int **)(v8 + 16 * --v9);
        if ((unint64_t)*v12 + 1 >= 2)
        {
          v13 = atomic_load(*v12);
          if (v13 == 1)
          {
            *v12 = (unsigned int *)-1;
            v14 = v8 + 16 * v9;
            v15 = *(unsigned int **)(v14 + 8);
            *(_QWORD *)(v14 + 8) = 0;
            if (v15)
            {
              do
              {
                v16 = __ldaxr(v15);
                v17 = v16 - 1;
              }
              while (__stlxr(v17, v15));
              if (!v17)
              {
                atomic_store(1u, v15);
                WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
              }
            }
            ++v11;
          }
        }
      }
      while (v9);
      v18 = *a1;
      if (v11)
      {
        *(_DWORD *)(v18 - 16) += v11;
        v19 = *a1;
        if (*a1)
          v20 = *(_DWORD *)(v19 - 12);
        else
          v20 = 0;
        *(_DWORD *)(v19 - 12) = v20 - v11;
        v18 = *a1;
      }
      if (v18)
      {
        v21 = *(_DWORD *)(v18 - 4);
        v22 = *(unsigned int *)(v18 - 12);
        if (v21 >= 9 && 6 * (int)v22 < v21)
        {
          v24 = (v22 - 1) | ((v22 - 1) >> 1) | ((((_DWORD)v22 - 1) | ((v22 - 1) >> 1)) >> 2);
          v25 = v24 | (v24 >> 4) | ((v24 | (v24 >> 4)) >> 8);
          v26 = (v25 | HIWORD(v25)) + 1;
          if (v26 > 0x400)
          {
            if (v26 > 2 * v22)
              goto LABEL_28;
          }
          else if (3 * v26 > 4 * v22)
          {
LABEL_25:
            v27 = (double)v22;
            v28 = (double)v26;
            v29 = 0.604166667;
LABEL_29:
            if (v28 * v29 <= v27)
              LODWORD(v26) = 2 * v26;
            if (v26 <= 8)
              v30 = 8;
            else
              v30 = v26;
            WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(a1, v30, 0, a4, a5, a6, a7, a8);
            return;
          }
          LODWORD(v26) = 2 * v26;
          if (v26 <= 0x400)
            goto LABEL_25;
LABEL_28:
          v27 = (double)v22;
          v28 = (double)v26;
          v29 = 0.416666667;
          goto LABEL_29;
        }
      }
    }
  }
}

void WTF::HashMap<unsigned long,WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>,WTF::HashTableTraits>::removeIf<JSC::Wasm::TypeInformation::tryCleanup(void)::$_1>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  int v11;
  unsigned int **v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  double v27;
  double v28;
  double v29;
  unint64_t v30;

  v8 = *a1;
  if (*a1)
  {
    v9 = *(_DWORD *)(v8 - 4);
    if (v9)
    {
      v11 = 0;
      do
      {
        v12 = (unsigned int **)(v8 + 16 * --v9);
        if ((unint64_t)*v12 + 1 >= 2)
        {
          v13 = atomic_load(*v12);
          if (v13 == 1)
          {
            *v12 = (unsigned int *)-1;
            v14 = v8 + 16 * v9;
            v15 = *(unsigned int **)(v14 + 8);
            *(_QWORD *)(v14 + 8) = 0;
            if (v15)
            {
              do
              {
                v16 = __ldaxr(v15);
                v17 = v16 - 1;
              }
              while (__stlxr(v17, v15));
              if (!v17)
              {
                atomic_store(1u, v15);
                WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
              }
            }
            ++v11;
          }
        }
      }
      while (v9);
      v18 = *a1;
      if (v11)
      {
        *(_DWORD *)(v18 - 16) += v11;
        v19 = *a1;
        if (*a1)
          v20 = *(_DWORD *)(v19 - 12);
        else
          v20 = 0;
        *(_DWORD *)(v19 - 12) = v20 - v11;
        v18 = *a1;
      }
      if (v18)
      {
        v21 = *(_DWORD *)(v18 - 4);
        v22 = *(unsigned int *)(v18 - 12);
        if (v21 >= 9 && 6 * (int)v22 < v21)
        {
          v24 = (v22 - 1) | ((v22 - 1) >> 1) | ((((_DWORD)v22 - 1) | ((v22 - 1) >> 1)) >> 2);
          v25 = v24 | (v24 >> 4) | ((v24 | (v24 >> 4)) >> 8);
          v26 = (v25 | HIWORD(v25)) + 1;
          if (v26 > 0x400)
          {
            if (v26 > 2 * v22)
              goto LABEL_28;
          }
          else if (3 * v26 > 4 * v22)
          {
LABEL_25:
            v27 = (double)v22;
            v28 = (double)v26;
            v29 = 0.604166667;
LABEL_29:
            if (v28 * v29 <= v27)
              LODWORD(v26) = 2 * v26;
            if (v26 <= 8)
              v30 = 8;
            else
              v30 = v26;
            WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(a1, v30, 0, a4, a5, a6, a7, a8);
            return;
          }
          LODWORD(v26) = 2 * v26;
          if (v26 <= 0x400)
            goto LABEL_25;
LABEL_28:
          v27 = (double)v22;
          v28 = (double)v26;
          v29 = 0.416666667;
          goto LABEL_29;
        }
      }
    }
  }
}

void WTF::HashSet<JSC::Wasm::TypeHash,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTableTraits>::removeIf<JSC::Wasm::TypeInformation::tryCleanup(void)::$_2>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v11;
  unsigned int v12;
  unsigned int **v13;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  double v32;
  double v33;
  double v34;
  unint64_t v35;

  v8 = *a1;
  if (*a1)
  {
    v9 = *(_DWORD *)(v8 - 4);
    if (v9)
    {
      v11 = 0;
      v12 = v9 - 1;
      do
      {
        v13 = (unsigned int **)(v8 + 8 * v12);
        if ((unint64_t)*v13 + 1 >= 2)
        {
          v15 = atomic_load(*v13);
          if (v15 == 1)
          {
            JSC::Wasm::TypeDefinition::cleanup((JSC::Wasm::TypeDefinition *)*v13, a2, a3, a4, a5, a6, a7, a8);
            WTF::hashTraitsDeleteBucket<WTF::HashTraits<JSC::Wasm::TypeHash>,JSC::Wasm::TypeHash>((unsigned int **)(v8 + 8 * v12), v16, v17, v18, v19, v20, v21, v22);
            ++v11;
          }
        }
      }
      while ((unint64_t)v12--);
      v23 = *a1;
      if (v11)
      {
        *(_DWORD *)(v23 - 16) += v11;
        v24 = *a1;
        if (*a1)
          v25 = *(_DWORD *)(v24 - 12);
        else
          v25 = 0;
        *(_DWORD *)(v24 - 12) = v25 - v11;
        v23 = *a1;
      }
      if (v23)
      {
        v26 = *(_DWORD *)(v23 - 4);
        v27 = *(unsigned int *)(v23 - 12);
        if (v26 >= 9 && 6 * (int)v27 < v26)
        {
          v29 = (v27 - 1) | ((v27 - 1) >> 1) | ((((_DWORD)v27 - 1) | ((v27 - 1) >> 1)) >> 2);
          v30 = v29 | (v29 >> 4) | ((v29 | (v29 >> 4)) >> 8);
          v31 = (v30 | HIWORD(v30)) + 1;
          if (v31 > 0x400)
          {
            if (v31 > 2 * v27)
              goto LABEL_25;
          }
          else if (3 * v31 > 4 * v27)
          {
LABEL_23:
            v32 = (double)v27;
            v33 = (double)v31;
            v34 = 0.604166667;
LABEL_26:
            if (v33 * v34 <= v32)
              LODWORD(v31) = 2 * v31;
            if (v31 <= 8)
              v35 = 8;
            else
              v35 = v31;
            WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::rehash(a1, v35, 0, a4, a5, a6, a7, a8);
            return;
          }
          LODWORD(v31) = 2 * v31;
          if (v31 <= 0x400)
            goto LABEL_23;
LABEL_25:
          v32 = (double)v27;
          v33 = (double)v31;
          v34 = 0.416666667;
          goto LABEL_26;
        }
      }
    }
  }
}

uint64_t JSC::Wasm::ValueLocation::dump(JSC::Wasm::ValueLocation *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const char *v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  uint64_t result;
  WTF::PrintStream *v12;
  uint64_t v13;
  WTF::PrintStream *v14;
  char **v15;
  char *v16;
  char *v17;
  WTF::PrintStream *v18;
  WTF::PrintStream *v19;
  float v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  char v24;

  v4 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v5 = *((char *)this + 8);
  if (v5 >= 4)
  {
    __break(0xC471u);
    JUMPOUT(0x198E398B8);
  }
  v6 = v4;
  v7 = off_1E35B7580[v5];
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v8, "%s", v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  switch(*((_BYTE *)this + 8))
  {
    case 0:
      LOBYTE(v22) = *(_BYTE *)this;
      v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v12, "%s", "(");
      JSC::JSValueRegs::dump((JSC::JSValueRegs *)&v22, v12);
      WTF::PrintStream::printf(v12, "%s");
      goto LABEL_13;
    case 1:
      v13 = *(char *)this;
      v14 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v14, "%s", "(");
      v15 = &(&JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister)[2 * v13];
      v16 = *v15;
      v17 = v15[1];
      v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v14 + 32))(v14);
      WTF::PrintStream::printf(v18, "%s", "%");
      v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v18 + 32))(v18);
      if (v16)
      {
        v21 = (_DWORD)v17 - 1;
        if (!v17)
          v21 = 0;
        WTF::StringImpl::utf8ForCharacters(v16, v21, (uint64_t)&v22, v20);
      }
      else
      {
        WTF::CString::CString(&v22, &str_25, 0);
        v23 = 0;
      }
      WTF::printExpectedCStringHelper(v19, "StringView", &v22);
      if (v23 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v24, &v22);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v18 + 40))(v18);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v14 + 40))(v14);
      WTF::PrintStream::printf(v14, "%s");
LABEL_13:
      result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      break;
    case 2:
    case 3:
      v9 = *(_QWORD *)this;
      v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v10, "%s", "(");
      WTF::PrintStream::printf(v10, "%ld", v9);
      WTF::PrintStream::printf(v10, "%s", ")");
      result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198E398D8);
  }
  return result;
}

void JSC::Wasm::Worklist::enqueue(uint64_t a1, unsigned int **a2)
{
  unsigned __int8 *v4;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  __int128 v31;
  unsigned int *v32;
  unsigned __int8 *v33;
  char v34;

  v4 = (unsigned __int8 *)(*(_QWORD *)a1 + 4);
  v33 = v4;
  v34 = 1;
  if (__ldaxr(v4))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v4);
    goto LABEL_4;
  }
  if (__stxr(1u, v4))
    goto LABEL_3;
LABEL_4:
  v6 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)*a2 + 32))(*a2);
  if (v6)
    v7 = 2;
  else
    v7 = 3;
  LODWORD(v31) = v7;
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8 + 1;
  v9 = *a2;
  *a2 = 0;
  *((_QWORD *)&v31 + 1) = v8;
  v32 = v9;
  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 32))
  {
    WTF::Vector<JSC::Wasm::Worklist::QueueElement,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Worklist::QueueElement>(a1 + 24, (unint64_t)&v31);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 24) + 24 * v10;
    *(_OWORD *)v11 = v31;
    v32 = 0;
    *(_QWORD *)(v11 + 16) = v9;
    ++*(_DWORD *)(a1 + 36);
  }
  WTF::PriorityQueue<JSC::Wasm::Worklist::QueueElement,&JSC::Wasm::Worklist::isHigherPriority,10ul>::siftUp((unsigned int *)(a1 + 24), v10);
  v18 = v32;
  v32 = 0;
  if (v18)
  {
    v19 = v18 + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v18 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  v22 = *(_QWORD *)(a1 + 8);
  if (v6)
    WTF::AutomaticThreadCondition::notifyAll(v22, &v33, v12, v13, v14, v15, v16, v17);
  else
    WTF::AutomaticThreadCondition::notifyOne(v22, (uint64_t)&v33, v12, v13, v14, v15, v16, v17);
  if (v34)
  {
    v29 = v33;
    v30 = __ldxr(v33);
    if (v30 == 1)
    {
      if (!__stlxr(0, v33))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v29, 0, v23, v24, v25, v26, v27, v28);
  }
}

unsigned int *WTF::PriorityQueue<JSC::Wasm::Worklist::QueueElement,&JSC::Wasm::Worklist::isHigherPriority,10ul>::enqueue(unsigned int *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1[3];
  if ((_DWORD)v3 == a1[2])
  {
    WTF::Vector<JSC::Wasm::Worklist::QueueElement,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Worklist::QueueElement>((uint64_t)a1, a2);
  }
  else
  {
    v4 = *(_QWORD *)a1 + 24 * v3;
    *(_OWORD *)v4 = *(_OWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(v4 + 16) = v5;
    ++a1[3];
  }
  return WTF::PriorityQueue<JSC::Wasm::Worklist::QueueElement,&JSC::Wasm::Worklist::isHigherPriority,10ul>::siftUp(a1, v3);
}

void JSC::Wasm::Worklist::completePlanSynchronously(JSC::Wasm::Worklist *this, JSC::Wasm::Plan *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  unint64_t v13;
  JSC::Wasm::Plan **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;

  v10 = (unsigned __int8 *)(*(_QWORD *)this + 4);
  if (__ldaxr(v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
LABEL_5:
  v12 = *((unsigned int *)this + 9);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = (JSC::Wasm::Plan **)(*((_QWORD *)this + 3) + 16);
    while (*v14 != a2)
    {
      ++v13;
      v14 += 3;
      if (v12 == v13)
        goto LABEL_11;
    }
    *((_DWORD *)v14 - 4) = 1;
    WTF::PriorityQueue<JSC::Wasm::Worklist::QueueElement,&JSC::Wasm::Worklist::isHigherPriority,10ul>::siftDown((unsigned int *)this + 6, v13);
  }
LABEL_11:
  v15 = *((unsigned int *)this + 73);
  if ((_DWORD)v15)
  {
    v16 = *((_QWORD *)this + 35);
    v17 = 8 * v15;
    do
    {
      if (*(JSC::Wasm::Plan **)(*(_QWORD *)v16 + 72) == a2)
        *(_DWORD *)(*(_QWORD *)v16 + 56) = 1;
      v16 += 8;
      v17 -= 8;
    }
    while (v17);
  }
  v18 = __ldxr(v10);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, v10))
LABEL_20:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  v19 = (unsigned __int8 *)a2 + 13;
  if (__ldaxr((unsigned __int8 *)a2 + 13))
  {
    __clrex();
  }
  else if (!__stxr(1u, v19))
  {
    goto LABEL_25;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a2 + 13);
LABEL_25:
  if (((*(uint64_t (**)(JSC::Wasm::Plan *))(*(_QWORD *)a2 + 40))(a2) & 1) == 0)
  {
    v28 = 0x7FF0000000000000;
    v29 = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)a2 + 14, (unsigned __int8 *)a2 + 13, (WTF::TimeWithDynamicClockType *)&v28);
  }
  v27 = __ldxr(v19);
  if (v27 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v19))
LABEL_31:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 13, 0, v21, v22, v23, v24, v25, v26);
}

void JSC::Wasm::Worklist::stopAllPlansForContext(JSC::Wasm::Worklist *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::Wasm::Plan *v15;
  WTF *v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  char *v31;
  JSC::Wasm::Plan *v32;
  WTF *v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  WTF *v38;
  WTF *v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  __int128 v45;
  unsigned int *v46;
  __int128 v47;
  JSC::Wasm::Plan *v48;
  WTF *v49;
  uint64_t v50;

  v10 = (unsigned __int8 *)(*(_QWORD *)this + 4);
  if (__ldaxr(v10))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
    goto LABEL_4;
  }
  if (__stxr(1u, v10))
    goto LABEL_3;
LABEL_4:
  v49 = 0;
  v50 = 0;
  if (*((_DWORD *)this + 9))
  {
    do
    {
      WTF::PriorityQueue<JSC::Wasm::Worklist::QueueElement,&JSC::Wasm::Worklist::isHigherPriority,10ul>::dequeue((uint64_t)&v47, (unsigned int *)this + 6);
      if ((JSC::Wasm::Plan::tryRemoveContextAndCancelIfLast(v48, a2, v20, v21, v22, v23, v24, v25) & 1) == 0)
      {
        v30 = HIDWORD(v50);
        if (HIDWORD(v50) == (_DWORD)v50)
        {
          WTF::Vector<JSC::Wasm::Worklist::QueueElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Worklist::QueueElement>((uint64_t)&v49, (unint64_t)&v47);
        }
        else
        {
          v31 = (char *)v49 + 24 * HIDWORD(v50);
          *(_OWORD *)v31 = v47;
          v32 = v48;
          v48 = 0;
          *((_QWORD *)v31 + 2) = v32;
          HIDWORD(v50) = v30 + 1;
        }
      }
      v26 = (unsigned int *)v48;
      v48 = 0;
      if (v26)
      {
        v27 = v26 + 2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v26 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
        }
      }
    }
    while (*((_DWORD *)this + 9));
    if (HIDWORD(v50))
    {
      v38 = v49;
      v39 = (WTF *)((char *)v49 + 24 * HIDWORD(v50));
      do
      {
        v45 = *(_OWORD *)v38;
        v40 = (unsigned int *)*((_QWORD *)v38 + 2);
        *((_QWORD *)v38 + 2) = 0;
        v46 = v40;
        WTF::PriorityQueue<JSC::Wasm::Worklist::QueueElement,&JSC::Wasm::Worklist::isHigherPriority,10ul>::enqueue((unsigned int *)this + 6, (unint64_t)&v45);
        v41 = v46;
        v46 = 0;
        if (v41)
        {
          v42 = v41 + 2;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            atomic_store(1u, v41 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
          }
        }
        v38 = (WTF *)((char *)v38 + 24);
      }
      while (v38 != v39);
    }
  }
  v12 = *((unsigned int *)this + 73);
  if ((_DWORD)v12)
  {
    v13 = *((_QWORD *)this + 35);
    v14 = 8 * v12;
    do
    {
      v15 = *(JSC::Wasm::Plan **)(*(_QWORD *)v13 + 72);
      if (v15 && JSC::Wasm::Plan::tryRemoveContextAndCancelIfLast(v15, a2, a3, a4, a5, a6, a7, a8))
      {
        v18 = *(_QWORD *)v13 + 46;
        v19 = (unsigned __int8 *)(*(_QWORD *)this + 4);
        *(_QWORD *)&v47 = 0x7FF0000000000000;
        DWORD2(v47) = 0;
        WTF::Condition::waitUntilUnchecked<WTF::Lock>(v18, v19, (WTF::TimeWithDynamicClockType *)&v47);
      }
      v13 += 8;
      v14 -= 8;
    }
    while (v14);
  }
  v16 = v49;
  if (HIDWORD(v50))
  {
    v33 = (WTF *)((char *)v49 + 24 * HIDWORD(v50));
    do
    {
      v34 = (unsigned int *)*((_QWORD *)v16 + 2);
      *((_QWORD *)v16 + 2) = 0;
      if (v34)
      {
        v35 = v34 + 2;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v34 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
        }
      }
      v16 = (WTF *)((char *)v16 + 24);
    }
    while (v16 != v33);
    v16 = v49;
  }
  if (v16)
    WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
  v17 = __ldxr(v10);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, v10))
LABEL_16:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

unsigned int *WTF::PriorityQueue<JSC::Wasm::Worklist::QueueElement,&JSC::Wasm::Worklist::isHigherPriority,10ul>::dequeue(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  __int128 v28;

  v2 = a2[3];
  if (!v2)
    goto LABEL_19;
  v5 = *(__int128 **)a2;
  v6 = *(_QWORD *)a2 + 24 * v2;
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  *((_QWORD *)v5 + 2) = 0;
  v9 = *(_QWORD *)(v6 - 8);
  v8 = (_QWORD *)(v6 - 8);
  v28 = *v5;
  *v5 = *((_OWORD *)v8 - 1);
  *v8 = 0;
  v10 = (unsigned int *)*((_QWORD *)v5 + 2);
  *((_QWORD *)v5 + 2) = v9;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  *((_OWORD *)v8 - 1) = v28;
  v14 = (unsigned int *)*v8;
  *v8 = v7;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v14 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  v18 = a2[3];
  if (!(_DWORD)v18)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x198E3A074);
  }
  v19 = v18 - 1;
  v20 = *(_QWORD *)a2 + 24 * (v18 - 1);
  *(_OWORD *)a1 = *(_OWORD *)v20;
  v21 = *(_QWORD *)(v20 + 16);
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v21;
  v22 = *(_QWORD *)a2 + 24 * v19;
  v23 = *(unsigned int **)(v22 + 16);
  *(_QWORD *)(v22 + 16) = 0;
  if (v23)
  {
    v24 = v23 + 2;
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v23 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
    }
  }
  a2[3] = v19;
  return WTF::PriorityQueue<JSC::Wasm::Worklist::QueueElement,&JSC::Wasm::Worklist::isHigherPriority,10ul>::siftDown(a2, 0);
}

JSC::Wasm::Worklist *JSC::Wasm::Worklist::Worklist(JSC::Wasm::Worklist *this)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  _QWORD v28[2];
  uint64_t v29[2];
  unsigned __int8 *v30;
  char v31;

  v2 = WTF::fastMalloc((WTF *)8);
  *(_DWORD *)v2 = 1;
  *(_BYTE *)(v2 + 4) = 0;
  *(_QWORD *)this = v2;
  WTF::AutomaticThreadCondition::create((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = (char *)this + 40;
  *((_QWORD *)this + 4) = 10;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  if (byte_1ECF4C464)
    v3 = dword_1ECF4C474;
  else
    v3 = 1;
  v4 = (unsigned __int8 *)(*(_QWORD *)this + 4);
  v30 = v4;
  v31 = 1;
  if (__ldaxr(v4))
  {
    __clrex();
LABEL_6:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v4);
    goto LABEL_7;
  }
  if (__stxr(1u, v4))
    goto LABEL_6;
LABEL_7:
  v28[0] = &v30;
  v28[1] = this;
  WTF::Vector<WTF::Ref<JSC::Wasm::Worklist::Thread,WTF::RawPtrTraits<JSC::Wasm::Worklist::Thread>,WTF::DefaultRefDerefTraits<JSC::Wasm::Worklist::Thread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<JSC::Wasm::Worklist::(void)::$_0,void>(v29, v3, (uint64_t)v28);
  WTF::Vector<WTF::Ref<JSC::Wasm::Worklist::Thread,WTF::RawPtrTraits<JSC::Wasm::Worklist::Thread>,WTF::DefaultRefDerefTraits<JSC::Wasm::Worklist::Thread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 280, v29, v6, v7, v8, v9, v10, v11);
  WTF::Vector<WTF::Ref<JSC::Wasm::Worklist::Thread,WTF::RawPtrTraits<JSC::Wasm::Worklist::Thread>,WTF::DefaultRefDerefTraits<JSC::Wasm::Worklist::Thread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v12, v13, v14, v15, v16, v17, v18);
  if (v31)
  {
    v25 = v30;
    v26 = __ldxr(v30);
    if (v26 == 1)
    {
      if (!__stlxr(0, v30))
        return this;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v25, 0, v19, v20, v21, v22, v23, v24);
  }
  return this;
}

uint64_t *WTF::Vector<WTF::Ref<JSC::Wasm::Worklist::Thread,WTF::RawPtrTraits<JSC::Wasm::Worklist::Thread>,WTF::DefaultRefDerefTraits<JSC::Wasm::Worklist::Thread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<JSC::Wasm::Worklist::(void)::$_0,void>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v6;
  void *v7;
  unsigned int **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a2)
    return v3;
  v4 = a2;
  if (!(a2 >> 29))
  {
    v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v6;
    do
    {
      v7 = *(void **)a3;
      v8 = *(unsigned int ***)(a3 + 8);
      v9 = WTF::fastMalloc((WTF *)0x50);
      v15 = JSC::Wasm::Worklist::Thread::Thread(v9, v7, v8, v10, v11, v12, v13, v14);
      v16 = *((unsigned int *)v3 + 3);
      *(_QWORD *)(*v3 + 8 * v16) = v15;
      *((_DWORD *)v3 + 3) = v16 + 1;
      --v4;
    }
    while (v4);
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::Ref<JSC::Wasm::Worklist::Thread,WTF::RawPtrTraits<JSC::Wasm::Worklist::Thread>,WTF::DefaultRefDerefTraits<JSC::Wasm::Worklist::Thread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int **v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10)
  {
    v12 = *(unsigned int ***)a1;
    v13 = *(_QWORD *)a1 + 8 * v10;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        v15 = v14 + 2;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v14 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
        }
      }
      ++v12;
    }
    while (v12 != (unsigned int **)v13);
  }
  WTF::GenericHashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t JSC::Wasm::ensureWorklist(JSC::Wasm *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&JSC::Wasm::ensureWorklist(void)::initializeWorklist);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&JSC::Wasm::ensureWorklist(void)::initializeWorklist, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::ensureWorklist(void)::$_0 &&>>);
  }
  return JSC::Wasm::globalWorklist;
}

void JSC::Wasm::marshallJSResult(JSC::Wasm *this, JSC::CCallHelpers *a2, const JSC::Wasm::TypeDefinition *a3, uint64_t **a4, const JSC::RegisterAtOffsetList *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  int v11;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _BOOL4 v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  int v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint8x8_t v75;
  __int32 v76;
  uint8x8_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  void *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint8x8_t v107;
  __int32 v108;
  uint8x8_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  void *v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  char v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  unsigned int v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  JSC::ARM64LogicalImmediate *v139;
  unsigned int v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint8x8_t v146;
  __int32 v147;
  uint8x8_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  char v164;
  char v165;
  uint64_t v166;
  _BYTE *v167;
  uint64_t v168;
  uint64_t *v169;
  char v170;
  char v171;
  uint64_t v172;
  _BYTE *v173;
  uint64_t v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _BOOL4 v183;
  char v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t *v187;
  int v188;
  char v189;
  char v190;
  char v191;
  void *__dst;
  uint64_t v193;
  _WORD v194[4];

  if (*((_DWORD *)a2 + 8))
    v10 = 0;
  else
    v10 = (char *)a2 + 8;
  v11 = *((_DWORD *)v10 + 3);
  if (v11 != 1)
  {
    if (!v11)
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, 10, 0, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
      return;
    }
    v14 = JSC::Wasm::wasmCallingConvention(this);
    if (*((_DWORD *)v14 + 11) <= 1u)
    {
      __break(0xC471u);
      JUMPOUT(0x198E3AFD4);
    }
    v15 = v14[4];
    v16 = *(unsigned __int8 *)(v15 + 1);
    v190 = *(_BYTE *)(v15 + 1);
    v17 = JSC::Wasm::wasmCallingConvention((JSC::Wasm *)v14);
    if (!*((_DWORD *)v17 + 7))
    {
      __break(0xC471u);
      JUMPOUT(0x198E3AFDCLL);
    }
    v177 = *(unsigned __int8 *)v17[2];
    v189 = *(_BYTE *)v17[2];
    v23 = g_config;
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [13],JSC::ARM64Registers::FPRegisterID,char [17],JSC::JSValueRegs,char [28],JSC::RegisterAtOffsetList>((uint64_t)this, &v189, (JSC::JSValueRegs *)&v190, a4);
    if (!*((_DWORD *)v10 + 3))
    {
      v131 = 3;
      goto LABEL_103;
    }
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    LOBYTE(v28) = 3;
    v176 = *((_DWORD *)v10 + 3);
    v175 = v176;
    v178 = v176;
    while (1)
    {
      v188 = v27;
      if (v26 >= *((unsigned int *)a3 + 15))
      {
        __break(0xC471u);
        JUMPOUT(0x198E3AFC4);
      }
      v29 = (uint64_t *)(*((_QWORD *)a3 + 6) + v25);
      v31 = *v29;
      v30 = v29[1];
      v186 = v24;
      v32 = (uint64_t *)(*(_QWORD *)v10 + v24);
      v34 = *v32;
      v33 = v32[1];
      v35 = *v32;
      v36 = v35 == 254;
      if ((v30 & 0xFE) == 0)
        break;
      if (v35 != 254)
      {
        v49 = v182 & 0xFFFFFFFFFFFFFF00;
        v184 = v28;
        v183 = v35 == 254;
        v179 = v33;
        if (v35 == 252)
        {
          v181 = (v31 << 32) | 0x1F;
          v182 = v49 | 1;
          JSC::MacroAssemblerARM64::loadDouble((uint64_t)this, v181, (char)v177, v18, v30, v20, v21, v22);
LABEL_35:
          v60 = v177;
        }
        else
        {
          if (v35 == 255)
          {
            v181 = (v31 << 32) | 0x1F;
            v182 &= 0xFFFFFFFFFFFFFF00;
            JSC::MacroAssemblerARM64::load32((uint64_t)this, v181, (char)v16, v18, v30, v20, v21, v22);
          }
          else
          {
            if (v35 == 253)
            {
              v181 = (v31 << 32) | 0x1F;
              v182 = v49 | 1;
              JSC::MacroAssemblerARM64::loadFloat((uint64_t)this, v181, (char)v177, v18, v30, v20, v21, v22);
              goto LABEL_35;
            }
            v181 = (v31 << 32) | 0x1F;
            v182 &= 0xFFFFFFFFFFFFFF00;
            JSC::MacroAssemblerARM64::load64((uint64_t)this, v181, (char)v16, v18, v30, v20, v21, v22);
          }
          v60 = v16;
        }
        JSC::Wasm::marshallJSResult(JSC::CCallHelpers &,JSC::Wasm::TypeDefinition const&,JSC::Wasm::CallInformation const&,JSC::RegisterAtOffsetList const&)::$_0::operator()((uint64_t)this, v34, v179, v60, v182, v16, v50, v51);
        v43 = v181;
LABEL_39:
        JSC::MacroAssemblerARM64::store64((uint64_t)this, (char)v16, v43, v44, v45, v46, v47, v48);
        if ((v35 - 252) < 2)
        {
          v39 = 7;
          LOBYTE(v28) = v184;
          v37 = v188;
          v38 = v186;
          v36 = v183;
          goto LABEL_21;
        }
        LOBYTE(v28) = v184;
        v36 = v183;
        if (v35 == 255)
        {
          v39 = 5;
          v37 = v188;
          v38 = v186;
          goto LABEL_21;
        }
      }
      v37 = v188;
      v38 = v186;
LABEL_20:
      v39 = 9;
LABEL_21:
      v27 = v37 | v36;
      v28 = JSC::leastUpperBoundOfIndexingTypes(v28, v39);
      ++v26;
      v40 = *((unsigned int *)v10 + 3);
      v25 += 24;
      v24 = v38 + 16;
      if (v26 >= v40)
      {
        v185 = v28;
        if (v40 != 0 && (v27 & 1) != 0)
        {
          v90 = 0;
          v187 = &qword_199123000;
          do
          {
            if (v90 >= *((unsigned int *)a3 + 15))
            {
              __break(0xC471u);
              JUMPOUT(0x198E3AFCCLL);
            }
            if (*(unsigned __int8 *)(*(_QWORD *)v10 + 16 * v90) == 254)
            {
              v91 = *((_QWORD *)a3 + 6) + 24 * v90;
              v92 = *(_QWORD *)v91;
              if (*(unsigned __int8 *)(v91 + 8) <= 1u)
              {
                LODWORD(v187) = v187 & 0xFFFFFF80 | v92 & 0x7F;
                v92 = *((_QWORD *)a3 + 11)
                    + 4 * (*(uint64_t *)JSC::RegisterAtOffsetList::find((unsigned int **)a4, v187) >> 8);
              }
              v93 = (v92 << 32) | 0x1F;
              v94 = 1;
              JSC::MacroAssemblerARM64::load64((uint64_t)this, v93, 1, v18, v19, v20, v21, v22);
              JSC::DeleteByVariant::~DeleteByVariant(this);
              __dst = v194;
              v194[0] = 19;
              v193 = 0x100000002;
              do
              {
                v102 = 0;
                v103 = 0;
                v104 = v94;
                do
                {
                  if ((*((_BYTE *)__dst + v102 + 1) & 0x40) != 0)
                    goto LABEL_160;
                  v103 |= 1 << *((_BYTE *)__dst + v102 + 1);
                  v102 += 2;
                }
                while (2 * v94 != v102);
                v105 = 0;
                do
                {
                  v106 = *((_BYTE *)__dst + v105) & 0x7F;
                  if (v106 >= 0x40)
                    goto LABEL_160;
                  v103 &= ~(1 << v106);
                  v105 += 2;
                }
                while (2 * v94 != v105);
                v107 = (uint8x8_t)vcnt_s8((int8x8_t)v103);
                v107.i16[0] = vaddlv_u8(v107);
                v108 = v107.i32[0];
                v109 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v103));
                v109.i16[0] = vaddlv_u8(v109);
                if (v109.i32[0] + v108)
                {
                  v110 = 0;
                  if (v94 <= 1uLL)
                    v104 = 1;
                  v111 = 2 * v104;
                  while (1)
                  {
                    v112 = *((_BYTE *)__dst + v110 + 1);
                    if ((v112 & 0x7Fu) >= 0x40)
                      goto LABEL_160;
                    if (((v103 >> (v112 & 0x7F)) & 1) != 0)
                      break;
                    v110 += 2;
                    if (v111 == v110)
                      goto LABEL_88;
                  }
                  JSC::MacroAssemblerARM64::move(this, *((char *)__dst + v110), v112, v97, v98, v99, v100, v101);
                  memmove((char *)__dst + v110, (char *)__dst + v110 + 2, 2 * HIDWORD(v193) - v110 - 2);
                  v94 = --HIDWORD(v193);
                }
                else
                {
                  v126 = *(_BYTE *)__dst;
                  v127 = *((_BYTE *)__dst + 1);
                  JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v127, v97, v98, v99, v100, v101);
                  memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v193) - 2);
                  v128 = --HIDWORD(v193);
                  if (HIDWORD(v193))
                  {
                    v129 = __dst;
                    v130 = 2 * v128;
                    while (*v129 != v127)
                    {
                      v129 += 2;
                      v130 -= 2;
                      if (!v130)
                        goto LABEL_101;
                    }
                    *v129 = v126;
                  }
LABEL_101:
                  WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,2u>(std::array<JSC::ARM64Registers::RegisterID,2u>,std::array<JSC::ARM64Registers::RegisterID,2u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v191, 0);
                  v94 = HIDWORD(v193);
                }
LABEL_88:
                ;
              }
              while (v94);
              v113 = __dst;
              if (v194 != __dst && __dst)
              {
                __dst = 0;
                LODWORD(v193) = 0;
                WTF::fastFree((unint64_t)v113, v95, v96, v97, v98, v99, v100, v101);
              }
              if (!*((_BYTE *)this + 212))
              {
                __break(0xC471u);
                goto LABEL_161;
              }
              *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
              v114 = *((_BYTE *)this + 272);
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)operationConvertToBigInt, v114, v97, v98, v99, v100, v101);
              *((_DWORD *)this + 52) = 0;
              JSC::AssemblerBuffer::putInt((JSC::Wasm *)((char *)this + 56), (32 * (v114 & 0x1F)) | 0xD63F0000, v115, v116, v117, v118, v119, v120);
              JSC::MacroAssemblerARM64::store64((uint64_t)this, 0, v93, v121, v122, v123, v124, v125);
              v40 = *((unsigned int *)v10 + 3);
            }
            ++v90;
          }
          while (v90 < v40);
        }
        v23 = g_config;
        v131 = v185;
LABEL_103:
        JSC::MacroAssemblerARM64::move(this, 31, 3, v18, v19, v20, v21, v22);
        JSC::DeleteByVariant::~DeleteByVariant(this);
        __dst = v194;
        v194[0] = 19;
        v193 = 0x100000002;
        v139 = (JSC::ARM64LogicalImmediate *)v131;
        v140 = 1;
        do
        {
          v141 = 0;
          v142 = 0;
          v143 = v140;
          do
          {
            if ((*((_BYTE *)__dst + v141 + 1) & 0x40) != 0)
              goto LABEL_160;
            v142 |= 1 << *((_BYTE *)__dst + v141 + 1);
            v141 += 2;
          }
          while (2 * v140 != v141);
          v144 = 0;
          do
          {
            v145 = *((_BYTE *)__dst + v144) & 0x7F;
            if (v145 >= 0x40)
              goto LABEL_160;
            v142 &= ~(1 << v145);
            v144 += 2;
          }
          while (2 * v140 != v144);
          v146 = (uint8x8_t)vcnt_s8((int8x8_t)v142);
          v146.i16[0] = vaddlv_u8(v146);
          v147 = v146.i32[0];
          v148 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v142));
          v148.i16[0] = vaddlv_u8(v148);
          if (v148.i32[0] + v147)
          {
            v149 = 0;
            if (v140 <= 1uLL)
              v143 = 1;
            v150 = 2 * v143;
            while (1)
            {
              v151 = *((_BYTE *)__dst + v149 + 1);
              if ((v151 & 0x7Fu) >= 0x40)
                goto LABEL_160;
              if (((v142 >> (v151 & 0x7F)) & 1) != 0)
                break;
              v149 += 2;
              if (v150 == v149)
                goto LABEL_117;
            }
            JSC::MacroAssemblerARM64::move(this, *((char *)__dst + v149), v151, v134, v135, v136, v137, v138);
            memmove((char *)__dst + v149, (char *)__dst + v149 + 2, 2 * HIDWORD(v193) - v149 - 2);
            v140 = --HIDWORD(v193);
          }
          else
          {
            v169 = v23;
            v170 = *(_BYTE *)__dst;
            v171 = *((_BYTE *)__dst + 1);
            JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v171, v134, v135, v136, v137, v138);
            memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v193) - 2);
            v172 = --HIDWORD(v193);
            if (HIDWORD(v193))
            {
              v173 = __dst;
              v174 = 2 * v172;
              while (*v173 != v171)
              {
                v173 += 2;
                v174 -= 2;
                if (!v174)
                  goto LABEL_138;
              }
              *v173 = v170;
            }
LABEL_138:
            WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,2u>(std::array<JSC::ARM64Registers::RegisterID,2u>,std::array<JSC::ARM64Registers::RegisterID,2u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v191, 0);
            v140 = HIDWORD(v193);
            v23 = v169;
          }
LABEL_117:
          ;
        }
        while (v140);
        v152 = __dst;
        if (v194 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v193) = 0;
          WTF::fastFree((unint64_t)v152, v132, v133, v134, v135, v136, v137, v138);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, v139, 2, v134, v135, v136, v137, v138);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)a2, 1, v153, v154, v155, v156, v157);
        if (*((_BYTE *)v23 + 646))
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [30]>((uint64_t)this);
        if (!*((_BYTE *)this + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x198E3AF48);
        }
        *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
        v163 = *((_BYTE *)this + 272);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)operationAllocateResultsArray, v163, v158, v159, v160, v161, v162);
        *((_DWORD *)this + 52) = 0;
        v89 = (32 * (v163 & 0x1F)) | 0xD63F0000;
LABEL_126:
        JSC::AssemblerBuffer::putInt((JSC::Wasm *)((char *)this + 56), v89, v83, v84, v85, v86, v87, v88);
        return;
      }
    }
    v184 = v28;
    v183 = v35 == 254;
    v180 = *((_QWORD *)a3 + 11);
    if ((v35 - 252) >= 2)
    {
      if (v35 == 254)
      {
        v175 = v175 & 0xFFFFFF80 | v31 & 0x7F;
        v52 = v31;
        v53 = JSC::RegisterAtOffsetList::find((unsigned int **)a4, v175);
        JSC::MacroAssemblerARM64::store64((uint64_t)this, v52, ((((*(_QWORD *)v53 >> 6) & 0xFFFFFFFC) + v180) << 32) | 0x1FLL, v54, v55, v56, v57, v58);
        LOBYTE(v28) = v184;
        v37 = v188;
        v38 = v186;
        v36 = v183;
        goto LABEL_20;
      }
      v59 = v31;
      JSC::Wasm::marshallJSResult(JSC::CCallHelpers &,JSC::Wasm::TypeDefinition const&,JSC::Wasm::CallInformation const&,JSC::RegisterAtOffsetList const&)::$_0::operator()((uint64_t)this, *v32, v33, v31, v30, v16, v21, v22);
      v176 = v176 & 0xFFFFFF80 | v59 & 0x7F;
      v42 = v176;
    }
    else
    {
      v41 = v31;
      JSC::Wasm::marshallJSResult(JSC::CCallHelpers &,JSC::Wasm::TypeDefinition const&,JSC::Wasm::CallInformation const&,JSC::RegisterAtOffsetList const&)::$_0::operator()((uint64_t)this, *v32, v33, v31, v30, v16, v21, v22);
      v178 = v178 & 0xFFFFFF80 | (v41 + 32) & 0x7F;
      v42 = v178;
    }
    v43 = ((((*(_QWORD *)JSC::RegisterAtOffsetList::find((unsigned int **)a4, v42) >> 6) & 0xFFFFFFFC)
          + v180) << 32) | 0x1FLL;
    goto LABEL_39;
  }
  if (**(_QWORD **)v10 == 254)
  {
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "convert wasm return to big int");
    if (!*((_DWORD *)a3 + 15))
    {
      __break(0xC471u);
LABEL_160:
      __break(1u);
LABEL_161:
      JUMPOUT(0x198E3AED0);
    }
    v61 = **((unsigned __int8 **)a3 + 6);
    JSC::DeleteByVariant::~DeleteByVariant(this);
    __dst = v194;
    v194[0] = 19;
    v193 = 0x100000002;
    if (v61 == 1)
    {
      v69 = 1;
    }
    else
    {
      v194[1] = v61 | 0x100;
      v69 = 2;
      HIDWORD(v193) = 2;
    }
    do
    {
      v70 = 0;
      v71 = 0;
      v72 = v69;
      do
      {
        if ((*((_BYTE *)__dst + v70 + 1) & 0x40) != 0)
          goto LABEL_160;
        v71 |= 1 << *((_BYTE *)__dst + v70 + 1);
        v70 += 2;
      }
      while (2 * v69 != v70);
      v73 = 0;
      do
      {
        v74 = *((_BYTE *)__dst + v73) & 0x7F;
        if (v74 >= 0x40)
          goto LABEL_160;
        v71 &= ~(1 << v74);
        v73 += 2;
      }
      while (2 * v69 != v73);
      v75 = (uint8x8_t)vcnt_s8((int8x8_t)v71);
      v75.i16[0] = vaddlv_u8(v75);
      v76 = v75.i32[0];
      v77 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v71));
      v77.i16[0] = vaddlv_u8(v77);
      if (v77.i32[0] + v76)
      {
        v78 = 0;
        if (v69 <= 1uLL)
          v72 = 1;
        v79 = 2 * v72;
        while (1)
        {
          v80 = *((_BYTE *)__dst + v78 + 1);
          if ((v80 & 0x7Fu) >= 0x40)
            goto LABEL_160;
          if (((v71 >> (v80 & 0x7F)) & 1) != 0)
            break;
          v78 += 2;
          if (v79 == v78)
            goto LABEL_61;
        }
        JSC::MacroAssemblerARM64::move(this, *((char *)__dst + v78), v80, v64, v65, v66, v67, v68);
        memmove((char *)__dst + v78, (char *)__dst + v78 + 2, 2 * HIDWORD(v193) - v78 - 2);
        v69 = --HIDWORD(v193);
      }
      else
      {
        v164 = *(_BYTE *)__dst;
        v165 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)this, *(char *)__dst, v165, v64, v65, v66, v67, v68);
        memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v193) - 2);
        v166 = --HIDWORD(v193);
        if (HIDWORD(v193))
        {
          v167 = __dst;
          v168 = 2 * v166;
          while (*v167 != v165)
          {
            v167 += 2;
            v168 -= 2;
            if (!v168)
              goto LABEL_133;
          }
          *v167 = v164;
        }
LABEL_133:
        WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,2u>(std::array<JSC::ARM64Registers::RegisterID,2u>,std::array<JSC::ARM64Registers::RegisterID,2u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v191, 0);
        v69 = HIDWORD(v193);
      }
LABEL_61:
      ;
    }
    while (v69);
    v81 = __dst;
    if (v194 != __dst && __dst)
    {
      __dst = 0;
      LODWORD(v193) = 0;
      WTF::fastFree((unint64_t)v81, v62, v63, v64, v65, v66, v67, v68);
    }
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198E3AF1CLL);
    }
    *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
    v82 = *((_BYTE *)this + 272);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)operationConvertToBigInt, v82, v64, v65, v66, v67, v68);
    *((_DWORD *)this + 52) = 0;
    v89 = (32 * (v82 & 0x1F)) | 0xD63F0000;
    goto LABEL_126;
  }
  if (!*((_DWORD *)a3 + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x198E3AFBCLL);
  }
  JSC::Wasm::marshallJSResult(JSC::CCallHelpers &,JSC::Wasm::TypeDefinition const&,JSC::Wasm::CallInformation const&,JSC::RegisterAtOffsetList const&)::$_0::operator()((uint64_t)this, **(_QWORD **)v10, *(_QWORD *)(*(_QWORD *)v10 + 8), **((_QWORD **)a3 + 6), *(_QWORD *)(*((_QWORD *)a3 + 6) + 8), 0, a7, a8);
}

void JSC::Wasm::marshallJSResult(JSC::CCallHelpers &,JSC::Wasm::TypeDefinition const&,JSC::Wasm::CallInformation const&,JSC::RegisterAtOffsetList const&)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  int v34;
  unsigned int v35;
  WTF::AtomStringImpl *v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  void (**v71)(WTF::StringPrintStream *__hidden);
  WTF *v72;
  __int128 v73;
  _BYTE v74[128];
  uint64_t v75;

  v8 = a6;
  v9 = a4;
  v75 = *MEMORY[0x1E0C80C00];
  v67[0] = a2;
  v67[1] = a3;
  if ((_BYTE)word_1ECF4C286)
  {
    v71 = off_1E3572250;
    v72 = (WTF *)v74;
    v73 = xmmword_199122F80;
    v74[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v71, "%s", "boxNativeCalleeResult ");
    JSC::Wasm::Type::dump((uint64_t)v67, (WTF::PrintStream *)&v71);
    v71[5]((WTF::StringPrintStream *)&v71);
    if (v72)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v72, v73, (uint64_t *)&v68);
      v37 = v68;
    }
    else
    {
      v37 = 0;
    }
    v42 = *(_DWORD *)(a1 + 200);
    v69 = v42;
    v68 = 0;
    v70 = v37;
    v43 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v43 == *(_DWORD *)(a1 + 224))
    {
      v44 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v43 + 1, (unint64_t)&v69);
      v45 = *(unsigned int *)(a1 + 228);
      v46 = *(_QWORD *)(a1 + 216) + 16 * v45;
      *(_DWORD *)v46 = *(_DWORD *)v44;
      v47 = *(_QWORD *)(v44 + 8);
      *(_QWORD *)(v44 + 8) = 0;
      *(_QWORD *)(v46 + 8) = v47;
      v48 = v70;
      *(_DWORD *)(a1 + 228) = v45 + 1;
      v70 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
        {
          WTF::StringImpl::~StringImpl(v48, v36, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
        }
        else
        {
          *(_DWORD *)v48 -= 2;
        }
      }
    }
    else
    {
      v49 = *(_QWORD *)(a1 + 216) + 16 * v43;
      *(_DWORD *)v49 = v42;
      *(_QWORD *)(v49 + 8) = v37;
      *(_DWORD *)(a1 + 228) = v43 + 1;
    }
    v50 = v68;
    v68 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v36, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
      }
      else
      {
        *(_DWORD *)v50 -= 2;
      }
    }
    if (v72 != (WTF *)v74)
      WTF::fastFree((unint64_t)v72, v36, a3, a4, a5, a6, a7, a8);
    a2 = LOBYTE(v67[0]);
  }
  if (a2 > 0xFCu)
  {
    if (a2 == 253)
    {
      v12 = *(_DWORD *)(a1 + 200);
      if (v12 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v12 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = v9 | (32 * v9) | 0x1E22C000;
      v11 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v11;
      goto LABEL_13;
    }
    if (a2 == 255)
    {
      JSC::MacroAssemblerARM64::and64(a1, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v9, v8);
      JSC::MacroAssemblerARM64::or64(a1, (JSC::ARM64LogicalImmediate *)0xFFFE000000000000, v8, v8);
      return;
    }
  }
  else
  {
    if (a2 == 192)
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 10, v8, a4, a5, a6, a7, a8);
      return;
    }
    if (a2 == 252)
    {
      v11 = *(_DWORD *)(a1 + 200);
LABEL_13:
      if (v11 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v11 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v11) = v8 & 0x1F | 0xD2EFFF40;
      v13 = *(_DWORD *)(a1 + 200);
      v14 = v13 + 4;
      *(_DWORD *)(a1 + 200) = v13 + 4;
      if ((v13 + 8) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
        v14 = *(_DWORD *)(a1 + 200);
      }
      v15 = v9;
      v16 = v9 << 16;
      v17 = 32 * v9;
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v16 | (32 * v15) | 0x1E602000;
      *(_DWORD *)(a1 + 200) += 4;
      JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(a1, 1, a3, a4, a5, a6, a7, a8, (uint64_t)&v71);
      v25 = *(_DWORD *)(a1 + 200);
      if (v25 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v18, v19, v20, v21, v22, v23, v24);
        v25 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = v17 | v8 & 0x1F | 0x9E660000;
      *(_DWORD *)(a1 + 200) += 4;
      JSC::MacroAssemblerARM64::sub64(a1, v8, 0xFFFE000000000000, v8, v21, v22, v23, v24);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v71, a1, v26, v27, v28, v29, v30, v31);
      return;
    }
  }
  if (BYTE1(dword_1ECF4C7B0))
    v32 = 29;
  else
    v32 = 17;
  if ((v32 + LOBYTE(v67[0])) <= 1u)
  {
    if (v9 == v8)
      return;
    if (v9 == 63)
    {
      if (v8 != 31)
      {
        v38 = v8 & 0x1F | 0xD2800000;
LABEL_39:
        v41 = *(_DWORD *)(a1 + 200);
        v40 = (unsigned int *)(a1 + 200);
        v39 = v41;
        if (v41 + 4 > *(v40 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v40 - 36), a2, a3, a4, a5, a6, a7, a8);
          v39 = *v40;
        }
        *(_DWORD *)(*((_QWORD *)v40 - 18) + v39) = v38;
        *v40 += 4;
        return;
      }
    }
    else if (v9 != 31 && v8 != 31)
    {
      v33 = v8 & 0x1F | ((v9 & 0x1F) << 16);
      v34 = -1442839584;
LABEL_38:
      v38 = v33 | v34;
      goto LABEL_39;
    }
    v33 = v8 | (32 * v9);
    v34 = -1862270976;
    goto LABEL_38;
  }
  v35 = *(_DWORD *)(a1 + 200);
  if (v35 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v35 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v35) = -734491104;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [13],JSC::ARM64Registers::FPRegisterID,char [17],JSC::JSValueRegs,char [28],JSC::RegisterAtOffsetList>(uint64_t a1, char *a2, JSC::JSValueRegs *a3, uint64_t **a4)
{
  char **v8;
  char *v9;
  char *v10;
  WTF::PrintStream *v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t **v53;
  WTF::StringImpl *v54[4];
  char v55;
  void (**v56)(WTF::StringPrintStream *__hidden);
  WTF *v57;
  __int128 v58;
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v56 = off_1E3572250;
    v57 = (WTF *)v59;
    v58 = xmmword_199122F80;
    v59[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v56, "%s", "scratchFPR: ");
    v8 = &(&JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister)[2 * *a2];
    v9 = *v8;
    v10 = v8[1];
    v11 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v56[4])(&v56);
    WTF::PrintStream::printf(v11, "%s", "%");
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v11 + 32))(v11);
    if (v9)
    {
      v14 = (_DWORD)v10 - 1;
      if (!v10)
        v14 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v14, (uint64_t)&v53, v13);
    }
    else
    {
      WTF::CString::CString((uint64_t *)&v53, &str_25, 0);
      LODWORD(v54[0]) = 0;
    }
    WTF::printExpectedCStringHelper(v12, "StringView", &v53);
    if (LODWORD(v54[0]) != -1)
      ((void (*)(WTF::StringImpl **, uint64_t ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[LODWORD(v54[0])])(&v52, &v53);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v11 + 40))(v11);
    v56[5]((WTF::StringPrintStream *)&v56);
    WTF::PrintStream::printf((WTF::PrintStream *)&v56, "%s", " - Scratch jsr: ");
    JSC::JSValueRegs::dump(a3, (WTF::PrintStream *)&v56);
    WTF::PrintStream::printf((WTF::PrintStream *)&v56, "%s", " - saved result registers: ");
    v53 = a4;
    v54[0] = (WTF::StringImpl *)", ";
    v54[1] = (WTF::StringImpl *)3;
    v54[2] = (WTF::StringImpl *)&str_107_1;
    v54[3] = (WTF::StringImpl *)1;
    v55 = 0;
    v15 = ((uint64_t (*)(_QWORD))v56[4])(&v56);
    v16 = *a4;
    if (*a4)
      v17 = *a4 + 1;
    else
      v17 = 0;
    if (v16)
LABEL_14:
      v16 += *(unsigned int *)v16 + 1;
    while (v17 != v16)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
      WTF::PrintStream::printImpl<WTF::CommaPrinter,JSC::RegisterAtOffset>(v18, (uint64_t)v54, v17);
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
      ++v17;
      v16 = *v53;
      if (*v53)
        goto LABEL_14;
    }
    v56[5]((WTF::StringPrintStream *)&v56);
    v56[5]((WTF::StringPrintStream *)&v56);
    if (v57)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v57, v58, (uint64_t *)&v52);
      v26 = v52;
    }
    else
    {
      v26 = 0;
    }
    v27 = *(_DWORD *)(a1 + 200);
    LODWORD(v53) = v27;
    v52 = 0;
    v54[0] = v26;
    v28 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v28 == *(_DWORD *)(a1 + 224))
    {
      v29 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v28 + 1, (unint64_t)&v53);
      v30 = *(unsigned int *)(a1 + 228);
      v31 = *(_QWORD *)(a1 + 216) + 16 * v30;
      *(_DWORD *)v31 = *(_DWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v29 + 8) = 0;
      *(_QWORD *)(v31 + 8) = v32;
      v33 = v54[0];
      *(_DWORD *)(a1 + 228) = v30 + 1;
      v54[0] = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      v34 = *(_QWORD *)(a1 + 216) + 16 * v28;
      *(_DWORD *)v34 = v27;
      *(_QWORD *)(v34 + 8) = v26;
      *(_DWORD *)(a1 + 228) = v28 + 1;
    }
    v35 = v52;
    v52 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::~StringImpl(v35, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      }
      else
      {
        *(_DWORD *)v35 -= 2;
      }
    }
    if (v57 != (WTF *)v59)
      WTF::fastFree((unint64_t)v57, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [30]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "operationAllocateResultsArray");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

void JSC::Wasm::createJSToWasmWrapper(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 **a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t *a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _DWORD *v46;
  unsigned __int8 **v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  char *v94;
  WTF *v95;
  WTF *v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  char v100;
  unsigned int v101;
  int v102;
  unsigned int j;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t *v112;
  const JSC::RegisterAtOffsetList *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  WTF *v127;
  WTF *v128;
  _DWORD *v129;
  WTF *i;
  char v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  const void *v135;
  void *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _DWORD *v156;
  int v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char v161;
  JSC::AssemblerBuffer *v162;
  uint64_t v163;
  __int128 v165;
  int v166;
  _QWORD v167[4];
  WTF *v168;
  int v169;
  unsigned int v170;
  WTF *v171;
  int v172;
  uint64_t v173;
  WTF *v174[2];
  char v175[32];
  WTF *v176;
  int v177;
  unsigned int v178;
  WTF *v179;
  int v180;
  unsigned int v181;
  _QWORD v182[4];
  unint64_t v183;
  _DWORD *v184;
  unint64_t v185;
  int v186;
  unint64_t v187[2];

  v186 = a8;
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36],unsigned int,char [5],JSC::Wasm::TypeDefinition>(a1, &v186, (JSC::Wasm::TypeDefinition *)a4);
  v23 = WTF::fastMalloc((WTF *)0x50);
  *(_OWORD *)v23 = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  *(_OWORD *)(v23 + 32) = 0u;
  *(_OWORD *)(v23 + 48) = 0u;
  *(_OWORD *)(v23 + 64) = 0u;
  *a9 = v23;
  v162 = (JSC::AssemblerBuffer *)(a1 + 56);
  v24 = *(_DWORD *)(a1 + 200);
  if (v24 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v162, v16, v17, v18, v19, v20, v21, v22);
    v24 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v24) = -1447068675;
  v25 = *(_DWORD *)(a1 + 200);
  v26 = v25 + 4;
  *(_DWORD *)(a1 + 200) = v25 + 4;
  if ((v25 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v162, v16, v17, v18, v19, v20, v21, v22);
    v26 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = -1862269955;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (a2 - qword_1ECF4C080) | 3, 2, v18, v19, v20, v21, v22);
  v34 = *(_DWORD *)(a1 + 200);
  if (v34 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v162, v27, v28, v29, v30, v31, v32, v33);
    v34 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v34) = -134118494;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::RegisterAtOffsetList::RegisterAtOffsetList(&v184, 0xC80000uLL, 0, 0);
  v42 = 0;
  if (v184)
  {
    v157 = *v184;
    v156 = v184 + 2;
    v158 = 8 * *v184;
    v42 = (_DWORD *)WTF::fastMalloc((WTF *)(v158 + 8));
    *v42 = v157;
    if (v157)
    {
      v159 = 0;
      do
      {
        *(_QWORD *)&v42[v159 / 4 + 2] = *(_QWORD *)&v156[v159 / 4];
        v159 += 8;
      }
      while (v158 != v159);
    }
  }
  v43 = *(_QWORD *)(v23 + 56);
  *(_QWORD *)(v23 + 56) = v42;
  if (v43)
    WTF::fastFree(v43, v35, v36, v37, v38, v39, v40, v41);
  v44 = v185;
  *(_QWORD *)(v23 + 64) = v185;
  v183 = v44;
  v45 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v45 != -1)
  {
    *(_QWORD *)v175 = v174;
    v167[0] = v175;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, v167, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  v46 = a4 + 1;
  if (*((_DWORD *)a4 + 8))
    v47 = 0;
  else
    v47 = a4 + 1;
  v48 = JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v47, 0, v175);
  v54 = 0;
  v55 = 0;
  if (v181)
  {
    v55 = 0;
    v54 = 0;
    for (i = v179; i != (WTF *)((char *)v179 + 24 * v181); i = (WTF *)((char *)i + 24))
    {
      v131 = *(_BYTE *)i;
      if (*((_BYTE *)i + 8))
      {
        if (*((_BYTE *)i + 8) == 1)
        {
          v150 = (v131 + 32) & 0x7F;
          if (v150 >= 0x40)
          {
LABEL_125:
            __break(1u);
            goto LABEL_126;
          }
          v55 |= 1 << v150;
          if (*((unsigned __int8 *)i + 16) >= 4u && (v150 & 0x60) == 0x20)
            v54 |= 1 << v150;
        }
      }
      else
      {
        if ((*(_BYTE *)i & 0x40) != 0)
          goto LABEL_125;
        v55 |= 1 << v131;
      }
    }
  }
  JSC::RegisterAtOffsetList::RegisterAtOffsetList((unsigned int **)v174, v55, v54, 1);
  v60 = (unint64_t)v174[1] + v182[3] + v183 + 15;
  v183 = v60 & 0xFFFFFFFFFFFFFFF0;
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [25],JSC::RegisterAtOffsetList,char [21],unsigned long>(a1, (uint64_t **)v174, &v183);
  JSC::MacroAssemblerARM64::sub64(a1, 31, v60 & 0xFFFFFFF0, 31, v56, v57, v58, v59);
  JSC::AssemblyHelpers::emitSave((JSC::AssemblyHelpers *)a1, (const JSC::RegisterAtOffsetList *)&v184, v61, v62, v63, v64, v65, v66);
  if (HIBYTE(dword_1ECF4C7B0) && (v175[0] & 4) != 0)
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 19, v67, v68, v69, v70, v71);
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [51]>(a1);
    JSC::Wasm::emitThrowWasmToJSException(a1, 19, 0x21u, v145, v146, v147, v148, v149);
  }
  else
  {
    v72 = atomic_load(&JSC::Wasm::jsCallingConvention(void)::staticJSCCallingConventionFlag);
    if (v72 != -1)
    {
      v167[0] = v187;
      *(_QWORD *)&v165 = v167;
      std::__call_once(&JSC::Wasm::jsCallingConvention(void)::staticJSCCallingConventionFlag, &v165, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::jsCallingConvention(void)::$_0 &&>>);
    }
    JSC::Wasm::JSCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::jsCallingConvention(void)::staticJSCallingConvention, (uint64_t)a4, 1, (uint64_t)v167);
    v80 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
    if (v80 != -1)
    {
      *(_QWORD *)&v165 = &v166;
      v187[0] = (unint64_t)&v165;
      std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, v187, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
    }
    if (dword_1EE3430FC <= 1)
    {
      __break(0xC471u);
      JUMPOUT(0x198E3C504);
    }
    v163 = a5;
    v161 = *(_BYTE *)(qword_1EE3430F0 + 1);
    v81 = *(_DWORD *)(a1 + 200);
    if (v81 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v162, v73, v74, v75, v76, v77, v78, v79);
      v81 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v81) = -129956941;
    *(_DWORD *)(a1 + 200) += 4;
    v82 = (a3 - qword_1ECF4C080) | 3;
    if (!a3)
      v82 = 0;
    v187[0] = v82;
    JSC::CCallHelpers::storeWasmCalleeCallee((JSC::CCallHelpers *)a1, (const void **)v187, v74, v75, v76, v77, v78, v79);
    if (*((_DWORD *)a4 + 8))
      v46 = 0;
    v166 = 0;
    if (v46[2])
    {
      v90 = 0;
      v91 = 0;
      while (1)
      {
        v92 = v170;
        if (v170 <= v91)
        {
          __break(0xC471u);
          JUMPOUT(0x198E3C4ECLL);
        }
        if (*((_BYTE *)v168 + v90 + 8) != 2)
          break;
        v165 = 0uLL;
        v165 = *(_OWORD *)(*(_QWORD *)v46 + 16 * (v91 + v46[3]));
        if ((_BYTE)word_1ECF4C286)
        {
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [5],unsigned int,char [4],JSC::Wasm::Type>(a1, &v166, (uint64_t)&v165);
          v92 = v170;
        }
        if (v92 <= v91)
        {
          __break(0xC471u);
          JUMPOUT(0x198E3C4F4);
        }
        if (v178 <= v91)
        {
          __break(0xC471u);
          JUMPOUT(0x198E3C4FCLL);
        }
        v93 = *(_QWORD *)((char *)v168 + v90);
        v94 = (char *)v176 + v90;
        if (*((_BYTE *)v176 + v90 + 8) == 3)
        {
          v160 = *(_QWORD *)v94 << 32;
          if (v165 == 255 || v165 == 253)
          {
            JSC::MacroAssemblerARM64::load32(a1, (v93 << 32) | 0x1D, v161, v85, v86, v87, v88, v89);
            JSC::MacroAssemblerARM64::store32(a1, v161, v160 | 0x1F, v140, v141, v142, v143, v144);
          }
          else
          {
            JSC::MacroAssemblerARM64::load64(a1, (v93 << 32) | 0x1D, v161, v85, v86, v87, v88, v89);
            JSC::MacroAssemblerARM64::store64(a1, v161, v160 | 0x1F, v151, v152, v153, v154, v155);
          }
        }
        else
        {
          switch(v165)
          {
            case 0xFFu:
              JSC::MacroAssemblerARM64::load32(a1, (v93 << 32) | 0x1D, *v94, v85, v86, v87, v88, v89);
              break;
            case 0xFCu:
              JSC::MacroAssemblerARM64::loadDouble(a1, (v93 << 32) | 0x1D, *v94, v85, v86, v87, v88, v89);
              break;
            case 0xFDu:
              JSC::MacroAssemblerARM64::loadFloat(a1, (v93 << 32) | 0x1D, *v94, v85, v86, v87, v88, v89);
              break;
            default:
              JSC::MacroAssemblerARM64::load64(a1, (v93 << 32) | 0x1D, *v94, v85, v86, v87, v88, v89);
              break;
          }
        }
        v166 = ++v91;
        v90 += 24;
        if (v91 >= v46[2])
          goto LABEL_45;
      }
LABEL_140:
      __break(0xC471u);
      JUMPOUT(0x198E3C328);
    }
LABEL_45:
    v95 = v171;
    if (&v173 != (uint64_t *)v171 && v171)
    {
      v171 = 0;
      v172 = 0;
      WTF::fastFree((unint64_t)v95, v83, v84, v85, v86, v87, v88, v89);
    }
    v96 = v168;
    if (v168)
    {
      v168 = 0;
      v169 = 0;
      WTF::fastFree((unint64_t)v96, v83, v84, v85, v86, v87, v88, v89);
    }
    if (*(_DWORD *)(a6 + 104) != -1)
    {
      v97 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
      if (v97 != -1)
      {
        v167[0] = v187;
        *(_QWORD *)&v165 = v167;
        std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v165, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
      }
      if (!dword_1EE3430FC)
      {
        __break(0xC471u);
        JUMPOUT(0x198E3C50CLL);
      }
      v98 = *(_BYTE *)qword_1EE3430F0;
      v99 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
      if (v99 != -1)
      {
        v167[0] = v187;
        *(_QWORD *)&v165 = v167;
        std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v165, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
      }
      if (dword_1EE3430FC <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198E3C514);
      }
      v100 = *(_BYTE *)(qword_1EE3430F0 + 1);
      v101 = *(_DWORD *)(a1 + 200);
      if (a7)
        v102 = -129858954;
      else
        v102 = -1455235466;
      if (v101 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v162, (uint64_t)v83, v84, v85, v86, v87, v88, v89);
        v101 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v101) = v102;
      *(_DWORD *)(a1 + 200) += 4;
      JSC::AssemblyHelpers::cageConditionally((_DWORD *)a1, 0, 22, v98, v100, v87, v88, v89);
    }
    *(_DWORD *)(a1 + 208) = 0;
    for (j = *(_DWORD *)(a1 + 200); (signed int)j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
    {
      if (j + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v162, (uint64_t)v83, v84, v85, v86, v87, v88, v89);
        j = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
      j = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
    if (j + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v162, (uint64_t)v83, v84, v85, v86, v87, v88, v89);
      j = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -1811939328;
    v104 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v104;
    v105 = *(_DWORD *)(a6 + 36) + v186;
    v110 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v110 + 8) = 1;
    *(_QWORD *)v110 = off_1E35B7418;
    *(_QWORD *)(v110 + 16) = v163;
    *(_DWORD *)(v110 + 24) = v104;
    *(_DWORD *)(v110 + 28) = 3;
    *(_DWORD *)(v110 + 32) = v105;
    v111 = *(unsigned int *)(a1 + 244);
    if ((_DWORD)v111 == *(_DWORD *)(a1 + 240))
    {
      v132 = v111 + (v111 >> 2);
      if (v132 >= 0x10)
        v133 = v132 + 1;
      else
        v133 = 16;
      if (v133 <= v111 + 1)
        v134 = v111 + 1;
      else
        v134 = v133;
      if (v134 >> 29)
        goto LABEL_140;
      v135 = *(const void **)(a1 + 232);
      v136 = (void *)WTF::fastMalloc((WTF *)(8 * v134));
      *(_DWORD *)(a1 + 240) = v134;
      *(_QWORD *)(a1 + 232) = v136;
      memcpy(v136, v135, 8 * v111);
      if (v135)
      {
        if (*(const void **)(a1 + 232) == v135)
        {
          *(_QWORD *)(a1 + 232) = 0;
          *(_DWORD *)(a1 + 240) = 0;
        }
        WTF::fastFree((unint64_t)v135, v137, v138, v139, v106, v107, v108, v109);
      }
      v111 = *(unsigned int *)(a1 + 244);
      v112 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v111);
    }
    else
    {
      v112 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v111);
    }
    *v112 = v110;
    *(_DWORD *)(a1 + 244) = v111 + 1;
    JSC::MacroAssemblerARM64::add64(a1, -(int)v183, 29, 31, v106, v107, v108, v109);
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a1, "marshallJSResult");
    JSC::Wasm::marshallJSResult((JSC::Wasm *)a1, (JSC::CCallHelpers *)a4, (const JSC::Wasm::TypeDefinition *)v175, (uint64_t **)v174, v113, v114, v115, v116);
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [25]>(a1);
    JSC::AssemblyHelpers::emitRestore((_DWORD *)a1, &v184, 29, v117, v118, v119, v120, v121);
    v122 = *(_DWORD *)(a1 + 200);
    if (v122 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v162, v55, v54, v49, v50, v51, v52, v53);
      v122 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v122) = -1862270017;
    v123 = *(_DWORD *)(a1 + 200);
    v124 = v123 + 4;
    *(_DWORD *)(a1 + 200) = v123 + 4;
    if ((v123 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v162, v55, v54, v49, v50, v51, v52, v53);
      v124 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v124) = -1463714819;
    v125 = *(_DWORD *)(a1 + 200);
    v126 = v125 + 4;
    *(_DWORD *)(a1 + 200) = v125 + 4;
    if ((v125 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v162, v55, v54, v49, v50, v51, v52, v53);
      v126 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v126) = -698416192;
    *(_DWORD *)(a1 + 200) += 4;
  }
  v127 = v174[0];
  v174[0] = 0;
  if (v127)
    WTF::fastFree((unint64_t)v127, (void *)v55, v54, v49, v50, v51, v52, v53);
  v48 = v179;
  if (v182 != (_QWORD *)v179)
  {
LABEL_126:
    if (v48)
    {
      v179 = 0;
      v180 = 0;
      WTF::fastFree((unint64_t)v48, (void *)v55, v54, v49, v50, v51, v52, v53);
    }
  }
  v128 = v176;
  if (v176)
  {
    v176 = 0;
    v177 = 0;
    WTF::fastFree((unint64_t)v128, (void *)v55, v54, v49, v50, v51, v52, v53);
  }
  v129 = v184;
  v184 = 0;
  if (v129)
    WTF::fastFree((unint64_t)v129, (void *)v55, v54, v49, v50, v51, v52, v53);
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36],unsigned int,char [5],JSC::Wasm::TypeDefinition>(uint64_t a1, _DWORD *a2, JSC::Wasm::TypeDefinition *a3)
{
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  void (**v42)(WTF::StringPrintStream *__hidden);
  WTF *v43;
  __int128 v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v42 = off_1E3572250;
    v43 = (WTF *)v45;
    v44 = xmmword_199122F80;
    v45[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%s", "jsToWasm wrapper for wasm-function[");
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%u", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%s", "] : ");
    JSC::Wasm::TypeDefinition::dump(a3, (WTF::PrintStream *)&v42);
    v42[5]((WTF::StringPrintStream *)&v42);
    if (v43)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v43, v44, (uint64_t *)&v39);
      v13 = v39;
    }
    else
    {
      v13 = 0;
    }
    v14 = *(_DWORD *)(a1 + 200);
    v40 = v14;
    v39 = 0;
    v41 = v13;
    v15 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 224))
    {
      v16 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v15 + 1, (unint64_t)&v40);
      v17 = *(unsigned int *)(a1 + 228);
      v18 = *(_QWORD *)(a1 + 216) + 16 * v17;
      *(_DWORD *)v18 = *(_DWORD *)v16;
      v19 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v18 + 8) = v19;
      v20 = v41;
      *(_DWORD *)(a1 + 228) = v17 + 1;
      v41 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::~StringImpl(v20, v6, v7, v8, v9, v10, v11, v12);
          WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 216) + 16 * v15;
      *(_DWORD *)v21 = v14;
      *(_QWORD *)(v21 + 8) = v13;
      *(_DWORD *)(a1 + 228) = v15 + 1;
    }
    v22 = v39;
    v39 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
    if (v43 != (WTF *)v45)
      WTF::fastFree((unint64_t)v43, v6, v7, v8, v9, v10, v11, v12);
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [25],JSC::RegisterAtOffsetList,char [21],unsigned long>(uint64_t a1, uint64_t **a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  uint64_t **v44;
  WTF::StringImpl *v45[4];
  char v46;
  void (**v47)(WTF::StringPrintStream *__hidden);
  WTF *v48;
  __int128 v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v47 = off_1E3572250;
    v48 = (WTF *)v50;
    v49 = xmmword_199122F80;
    v50[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v47, "%s", "Saved result registers: ");
    v44 = a2;
    v45[0] = (WTF::StringImpl *)", ";
    v45[1] = (WTF::StringImpl *)3;
    v45[2] = (WTF::StringImpl *)&str_107_1;
    v45[3] = (WTF::StringImpl *)1;
    v46 = 0;
    v6 = ((uint64_t (*)(_QWORD))v47[4])(&v47);
    v7 = *a2;
    if (*a2)
      v8 = *a2 + 1;
    else
      v8 = 0;
    if (v7)
LABEL_7:
      v7 += *(unsigned int *)v7 + 1;
    while (v8 != v7)
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      WTF::PrintStream::printImpl<WTF::CommaPrinter,JSC::RegisterAtOffset>(v9, (uint64_t)v45, v8);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      ++v8;
      v7 = *v44;
      if (*v44)
        goto LABEL_7;
    }
    v47[5]((WTF::StringPrintStream *)&v47);
    WTF::PrintStream::printf((WTF::PrintStream *)&v47, "%s", "; Total frame size: ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v47, "%lu", *a3);
    v47[5]((WTF::StringPrintStream *)&v47);
    if (v48)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v48, v49, (uint64_t *)&v43);
      v17 = v43;
    }
    else
    {
      v17 = 0;
    }
    v18 = *(_DWORD *)(a1 + 200);
    LODWORD(v44) = v18;
    v43 = 0;
    v45[0] = v17;
    v19 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v19 == *(_DWORD *)(a1 + 224))
    {
      v20 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v19 + 1, (unint64_t)&v44);
      v21 = *(unsigned int *)(a1 + 228);
      v22 = *(_QWORD *)(a1 + 216) + 16 * v21;
      *(_DWORD *)v22 = *(_DWORD *)v20;
      v23 = *(_QWORD *)(v20 + 8);
      *(_QWORD *)(v20 + 8) = 0;
      *(_QWORD *)(v22 + 8) = v23;
      v24 = v45[0];
      *(_DWORD *)(a1 + 228) = v21 + 1;
      v45[0] = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
        {
          WTF::StringImpl::~StringImpl(v24, v10, v11, v12, v13, v14, v15, v16);
          WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
        }
        else
        {
          *(_DWORD *)v24 -= 2;
        }
      }
    }
    else
    {
      v25 = *(_QWORD *)(a1 + 216) + 16 * v19;
      *(_DWORD *)v25 = v18;
      *(_QWORD *)(v25 + 8) = v17;
      *(_DWORD *)(a1 + 228) = v19 + 1;
    }
    v26 = v43;
    v43 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    if (v48 != (WTF *)v50)
      WTF::fastFree((unint64_t)v48, v10, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [51]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "Throw an exception because this function uses v128");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [5],unsigned int,char [4],JSC::Wasm::Type>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  void (**v42)(WTF::StringPrintStream *__hidden);
  WTF *v43;
  __int128 v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v42 = off_1E3572250;
    v43 = (WTF *)v45;
    v44 = xmmword_199122F80;
    v45[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%s", "Arg ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%u", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%s", " : ");
    JSC::Wasm::Type::dump(a3, (WTF::PrintStream *)&v42);
    v42[5]((WTF::StringPrintStream *)&v42);
    if (v43)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v43, v44, (uint64_t *)&v39);
      v13 = v39;
    }
    else
    {
      v13 = 0;
    }
    v14 = *(_DWORD *)(a1 + 200);
    v40 = v14;
    v39 = 0;
    v41 = v13;
    v15 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 224))
    {
      v16 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v15 + 1, (unint64_t)&v40);
      v17 = *(unsigned int *)(a1 + 228);
      v18 = *(_QWORD *)(a1 + 216) + 16 * v17;
      *(_DWORD *)v18 = *(_DWORD *)v16;
      v19 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v18 + 8) = v19;
      v20 = v41;
      *(_DWORD *)(a1 + 228) = v17 + 1;
      v41 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::~StringImpl(v20, v6, v7, v8, v9, v10, v11, v12);
          WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 216) + 16 * v15;
      *(_DWORD *)v21 = v14;
      *(_QWORD *)(v21 + 8) = v13;
      *(_DWORD *)(a1 + 228) = v15 + 1;
    }
    v22 = v39;
    v39 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
    if (v43 != (WTF *)v45)
      WTF::fastFree((unint64_t)v43, v6, v7, v8, v9, v10, v11, v12);
  }
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [25]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "restore registersToSpill");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

unint64_t JSC::JSWebAssembly::create(JSC::JSWebAssembly *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  int v11;
  unint64_t v13;
  char *v14;
  char *v15;
  JSC::VM *v16;
  JSC::JSGlobalObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t SlowCase;

  v9 = this;
  v10 = *((_QWORD *)this + 4863);
  if (v10 >= *((_QWORD *)this + 4864))
  {
    v10 = *((_QWORD *)this + 4865);
    if ((v10 & 1) != 0)
    {
      v14 = (char *)this + 38880;
      v15 = (char *)this + 192;
      v16 = a2;
      v18 = (JSC::JSGlobalObject *)a3;
      JSC::sanitizeStackForVM(this, this, a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v14, (uint64_t)v15, 16, 0, 0, v19, v20, v21);
      a3 = (uint64_t)v18;
      v9 = this;
      a2 = v16;
      v10 = SlowCase;
      goto LABEL_3;
    }
    v13 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v13);
    *((_QWORD *)this + 4865) = v10 + (int)v13;
  }
  *((_QWORD *)this + 4863) = v10 + 16;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  JSC::JSWebAssembly::finishCreation((JSC::JSWebAssembly *)v10, v9, a2);
  return v10;
}

void JSC::JSWebAssembly::finishCreation(JSC::JSWebAssembly *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  JSC::BuiltinExecutables **v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  double v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  double v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  __int128 v99;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v6 = (JSC::BuiltinExecutables **)((char *)a2 + 93152);
  v7 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0xB00000002;
  *(_QWORD *)(v8 + 8) = "WebAssembly";
  *(_DWORD *)(v8 + 16) = 4;
  v98 = (WTF::StringImpl *)v8;
  v15 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v98, v9, v10, v11, v12, v13, v14);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v7, v15, 6, v16, v17, v18, v19);
  v27 = v98;
  v98 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = *((_QWORD *)a3 + 410);
  if (*(_QWORD *)(v28 + 128))
  {
    WTF::AtomStringImpl::addLiteral((uint64_t)"compileStreaming", 0x10uLL, v22, v23, v24, v25, v26, &v98);
    v29 = v98;
    v30 = JSC::BuiltinExecutables::webAssemblyCompileStreamingCodeExecutable(*v6);
    v31 = (WTF::StringImpl *)*((_QWORD *)*v6 + 1);
    ++*((_DWORD *)v31 + 2);
    v98 = v31;
    v99 = xmmword_199124F90;
    v40 = JSC::UnlinkedFunctionExecutable::link(v30, (uint64_t)a2, 0, (uint64_t)&v98, 0, 0, 0, v32, COERCE_DOUBLE(0x429500004221), v33, v34);
    v41 = v98;
    v98 = 0;
    if (v41)
    {
      if (*((_DWORD *)v41 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v41 + 8))(v41);
      else
        --*((_DWORD *)v41 + 2);
    }
    v42 = JSC::JSFunction::create((uint64_t)a2, v40, a3, v35, v36, v37, v38, v39);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v29, v42, 0, v43, v44, v45, v46);
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, v47, v48, v22, v23, v24, v25, v26);
        WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
      }
      else
      {
        *(_DWORD *)v29 -= 2;
      }
    }
    v28 = *((_QWORD *)a3 + 410);
  }
  if (*(_QWORD *)(v28 + 136))
  {
    WTF::AtomStringImpl::addLiteral((uint64_t)"instantiateStreaming", 0x14uLL, v22, v23, v24, v25, v26, &v98);
    v49 = v98;
    v50 = JSC::BuiltinExecutables::webAssemblyInstantiateStreamingCodeExecutable(*v6);
    v51 = (WTF::StringImpl *)*((_QWORD *)*v6 + 1);
    ++*((_DWORD *)v51 + 2);
    v98 = v51;
    v99 = xmmword_199125360;
    v60 = JSC::UnlinkedFunctionExecutable::link(v50, (uint64_t)a2, 0, (uint64_t)&v98, 0, 0, 0, v52, COERCE_DOUBLE(0x1840D00018346), v53, v54);
    v61 = v98;
    v98 = 0;
    if (v61)
    {
      if (*((_DWORD *)v61 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v61 + 8))(v61);
      else
        --*((_DWORD *)v61 + 2);
    }
    v62 = JSC::JSFunction::create((uint64_t)a2, v60, a3, v55, v56, v57, v58, v59);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v49, v62, 0, v63, v64, v65, v66);
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v67, v68, v69, v70, v71, v72, v73);
        WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
  }
}

uint64_t JSC::JSWebAssembly::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::JSWebAssembly::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::JSWebAssembly::webAssemblyModuleValidateAsync(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  _QWORD v37[2];

  v6 = *(_QWORD *)(a1 + 56);
  v37[0] = 0;
  v37[1] = 0;
  if ((a1 & 8) != 0)
    v7 = (a1 - 112) | 1;
  else
    v7 = a1 & 0xFFFFFFFFFFFFC000;
  if ((v7 & 1) != 0)
    v8 = (_QWORD *)(v7 + 47);
  else
    v8 = (_QWORD *)(*(_QWORD *)v7 + 32);
  v9 = (unsigned int *)v8[2];
  if (!v9)
  {
    while (1)
    {
      v24 = (_QWORD *)v8[3];
      if (!v24)
        break;
      v8[3] = v24[2];
      v9 = (unsigned int *)v24[4];
      v24[3] = 257;
      v24[4] = 0;
      if (v9)
        goto LABEL_7;
    }
    v25 = v8[6];
    if (!v8[1])
    {
      v26 = *(_QWORD **)(v25 + 488);
      *v8 = v25 + 480;
      v8[1] = v26;
      *v26 = v8;
      *(_QWORD *)(v25 + 488) = v8;
    }
    *(_QWORD *)(v25 + 1072) += 1024;
    v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
    JSC::WeakBlock::WeakBlock((uint64_t)v27, v7);
    JSC::Heap::didAllocate((JSC::Heap *)(v8[6] + 192), 0x400uLL, v28, v29, v30, v31, v32, v33);
    v34 = v8 + 4;
    v35 = v8[5];
    if (v35)
      v34 = (_QWORD *)(v35 + 16);
    *v34 = v27;
    v8[5] = v27;
    v27[1] = v35;
    v27[2] = 0;
    v9 = (unsigned int *)v27[4];
    v27[3] = 257;
    v27[4] = 0;
  }
LABEL_7:
  v8[2] = *(_QWORD *)v9;
  *(_QWORD *)v9 = a1;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  v36 = v9;
  WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Weak<JSC::JSCell>>((uint64_t)v37, (unint64_t)&v36);
  if (v36)
    *((_QWORD *)v36 + 1) = 3;
  v10 = JSC::DeferredWorkTimer::addPendingWork(*(_QWORD *)(v6 + 41888), v6, a2, (uint64_t)v37);
  v11 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)v11 = off_1E35B7440;
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = a2;
  *(_QWORD *)(v11 + 32) = a1;
  *(_QWORD *)(v11 + 40) = v6;
  v36 = (unsigned int *)v11;
  JSC::Wasm::Module::validateAsync(v6, a3, (uint64_t *)&v36);
  v19 = v36;
  v36 = 0;
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v19 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
  }
  return WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v37, v12, v13, v14, v15, v16, v17, v18);
}

JSC::JSArrayBufferView *JSC::JSWebAssembly::instantiate(unint64_t a1, JSC::JSArrayBufferView *a2, JSC::VM *a3, uint64_t a4)
{
  JSC::compileAndInstantiate(*(_QWORD *)(a1 + 56), a1, a2, a3, a4, 0, 1, 1);
  return a2;
}

void JSC::compileAndInstantiate(uint64_t a1, unint64_t this, JSC::JSArrayBufferView *a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  char **v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  void *v22;
  WTF::SymbolImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::VM *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  WTF *v52;
  unint64_t OutOfMemoryError;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  JSC::Exception *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  JSC::Heap **v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  JSC::Exception *v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  unsigned int v119;
  unint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  uint64_t (*v124)(WTF **);
  WTF **v125;
  uint64_t v126;
  void *__dst;
  uint64_t v128;
  _DWORD *v129;
  WTF::StringImpl *v130;
  WTF *v131;
  unint64_t v132;
  char *v133;

  v8 = a8;
  v9 = a7;
  if ((a5 & 0xFFFE000000000002) != 0)
  {
    v63 = 0;
    v64 = 0;
    v129 = 0;
    v18 = *(_QWORD *)(this + 56);
    __dst = (void *)v18;
    goto LABEL_76;
  }
  v16 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x4C));
  if (v16 == &JSC::JSSourceCode::s_info && (v17 = *(_DWORD **)(a5 + 8)) != 0)
  {
    ++v17[2];
    v129 = v17;
    (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 80))(v17);
    v18 = *(_QWORD *)(this + 56);
    __dst = (void *)v18;
    v16 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x4C));
  }
  else
  {
    v129 = 0;
    v18 = *(_QWORD *)(this + 56);
    __dst = (void *)v18;
  }
  if (v16 != &JSC::JSSourceCode::s_info)
  {
    v68 = *(unsigned __int8 *)(a5 + 5);
    if (v68 == 38)
      v69 = a5;
    else
      v69 = 0;
    if (v68 - 39 >= 0xC)
      v70 = 0;
    else
      v70 = a5;
    v71 = v68 >= 0x17;
    if (v68 >= 0x17)
      v63 = v69;
    else
      v63 = 0;
    if (v71)
      v64 = v70;
    else
      v64 = 0;
LABEL_76:
    if (v63 | v64)
    {
      if (v64)
      {
        if (*(unsigned __int8 *)(v64 + 5) - 39 <= 0xA)
        {
          JSC::validateTypedArray((JSC *)this, (JSC::ArrayBuffer **)v64, a3, (uint64_t)a4, a5, a6, a7, a8);
          if (!*(_DWORD *)(v18 + 80))
            goto LABEL_80;
          v122 = *(_DWORD *)(v18 + 80);
          if ((v122 & 0x27) != 0 && (v122 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          if (!*(_QWORD *)(v18 + 16))
          {
LABEL_80:
            v20 = *(_QWORD *)(v64 + 16);
            if (v20 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v20 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            if ((*(_BYTE *)(v64 + 40) & 7u) > 2)
            {
              LOBYTE(v131) = 0;
              LOBYTE(v132) = 0;
              v120 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v64, (uint64_t)&v131, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              v21 = 0;
              if (!(_BYTE)this || !v120)
                goto LABEL_7;
              if ((*(_BYTE *)(v64 + 40) & 1) != 0)
              {
                if ((*(_BYTE *)(v64 + 5) - 42) > 7u)
                  LOBYTE(v121) = 0;
                else
                  v121 = qword_19915B2C8[(char)(*(_BYTE *)(v64 + 5) - 42)];
                v21 = v120 << v121;
                goto LABEL_7;
              }
            }
            if ((*(_BYTE *)(v64 + 5) - 42) > 7u)
              LOBYTE(v72) = 0;
            else
              v72 = qword_19915B2C8[(char)(*(_BYTE *)(v64 + 5) - 42)];
            v21 = *(_QWORD *)(v64 + 24) << v72;
            goto LABEL_7;
          }
LABEL_111:
          v21 = 0;
          v20 = 0;
          goto LABEL_7;
        }
        LOBYTE(v131) = 0;
        LOBYTE(v132) = 0;
        JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v64, (uint64_t)&v131);
        if ((_BYTE)this)
          goto LABEL_80;
      }
      else
      {
        v85 = *(_QWORD *)(v63 + 16);
        v20 = *(_QWORD *)(v85 + 16);
        if (v20)
        {
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          {
            if (!((v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
              goto LABEL_101;
            v20 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          }
          if (*(_BYTE *)(v85 + 64) && (v126 = *(_QWORD *)(v85 + 32)) != 0)
            v21 = *(_QWORD *)(v126 + 32);
          else
            v21 = *(_QWORD *)(v85 + 48);
          goto LABEL_7;
        }
      }
LABEL_101:
      JSC::throwTypeError(this, (JSC::VM **)&__dst, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
      goto LABEL_111;
    }
    v86 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v86 = 0x3B00000002;
    *(_QWORD *)(v86 + 8) = "first argument must be an ArrayBufferView or an ArrayBuffer";
    *(_DWORD *)(v86 + 16) = 4;
    v130 = (WTF::StringImpl *)v86;
    v131 = (WTF *)a5;
    switch(a5)
    {
      case 10:
        v87 = 2;
LABEL_105:
        v88 = *(_QWORD *)(this + 176);
        v89 = *(JSC::Heap ***)(this + 56);
        if ((v88 & 1) != 0)
        {
          v124 = *(uint64_t (**)(WTF **))(v88 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v125 = (WTF **)(this - 16);
          else
            v125 = (WTF **)(this & 0xFFFFFFFFFFFFC000 | 8);
          v131 = *v125;
          v132 = this;
          v133 = (char *)(this + 176);
          v88 = v124(&v131);
        }
        v90 = JSC::ErrorInstance::create(v89, v88, &v130, 0, (uint64_t)JSC::defaultSourceAppender, v87, 5, 1);
        v97 = (JSC::Exception *)v90;
        if ((v90 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v90 & 0xFFFFFFFE) + 0x4C)))
        {
          v97 = (JSC::Exception *)JSC::Exception::create(v18, (JSC::VM *)v90, 0, v91, v92, v93, v94, v95);
        }
        JSC::VM::throwException((JSC::VM *)v18, (JSC::JSGlobalObject *)this, v97, v96, v91, v92, v93, v94, v95);
        v98 = v130;
        v130 = 0;
        if (v98)
        {
          if (*(_DWORD *)v98 == 2)
          {
            WTF::StringImpl::~StringImpl(v98, (WTF::AtomStringImpl *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
          }
          else
          {
            *(_DWORD *)v98 -= 2;
          }
        }
        goto LABEL_111;
      case 2:
        v87 = 4;
        goto LABEL_105;
      case 0:
LABEL_157:
        v87 = 0;
        goto LABEL_105;
    }
    if (JSC::JSValue::isAnyInt((JSC::JSValue *)&v131))
    {
      v87 = 16;
      goto LABEL_105;
    }
    if ((unint64_t)v131 >> 49)
    {
      v87 = 32;
      goto LABEL_105;
    }
    if (((unint64_t)v131 & 0xFFFE000000000002) != 0)
    {
      if (((unint64_t)v131 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
LABEL_150:
        if (JSC::JSValue::isCallable((JSC::JSValue *)&v131))
        {
          v87 = 1;
          goto LABEL_105;
        }
        if (((unint64_t)v131 & 0xFFFE000000000002) == 0)
        {
          v123 = *((unsigned __int8 *)v131 + 5);
          if (v123 == 4)
            v87 = 256;
          else
            v87 = (v123 == 3) << 9;
          goto LABEL_105;
        }
        goto LABEL_157;
      }
    }
    else
    {
      v119 = *((unsigned __int8 *)v131 + 5);
      if (v119 == 2)
      {
        v87 = 64;
        goto LABEL_105;
      }
      if (((unint64_t)v131 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
        if (v119 > 0x16)
        {
          v87 = 128;
          goto LABEL_105;
        }
        goto LABEL_150;
      }
    }
    v87 = 8;
    goto LABEL_105;
  }
  v19 = *(_QWORD *)(a5 + 8);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 64))(v19);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 72))(v19);
  if (!*(_DWORD *)(a1 + 80))
    goto LABEL_8;
LABEL_7:
  v65 = *(_DWORD *)(a1 + 80);
  if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(a1 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_QWORD *)(a1 + 16))
  {
    v131 = 0;
    v132 = 0;
  }
  else
  {
LABEL_8:
    v131 = 0;
    v132 = 0;
    if (v21)
    {
      if (HIDWORD(v21) || (WTF::tryFastMalloc((WTF *)v21, &__dst), !__dst))
      {
        OutOfMemoryError = JSC::createOutOfMemoryError(this, (JSC::JSGlobalObject *)this);
        v60 = (JSC::Exception *)OutOfMemoryError;
        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                  + 0x4C)))
        {
          v60 = (JSC::Exception *)JSC::Exception::create(a1, (JSC::VM *)OutOfMemoryError, 0, v54, v55, v56, v57, v58);
        }
        JSC::VM::throwException((JSC::VM *)a1, (JSC::JSGlobalObject *)this, v60, v59, v54, v55, v56, v57, v58);
      }
      else
      {
        LODWORD(v132) = v21;
        v131 = (WTF *)__dst;
        memcpy(__dst, (const void *)v20, v21);
        HIDWORD(v132) = v21;
      }
    }
  }
  JSC::WebAssemblySourceProviderBufferGuard::~WebAssemblySourceProviderBufferGuard((JSC::WebAssemblySourceProviderBufferGuard *)&v129);
  v29 = *(_QWORD *)(a1 + 16);
  if (v29)
  {
    if (*(_QWORD *)(*(_QWORD *)(this + 56) + 24) != v29)
    {
      v66 = (unsigned int *)(a1 + 80);
      *(_QWORD *)(a1 + 16) = 0;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 & 0xFFFFFFEF, v66));
      JSC::JSPromise::reject((unint64_t)a3, (uint64_t *)this, *(_QWORD *)(v29 + 8), v24, v25, v26, v27, v28);
    }
  }
  else
  {
    v30 = *(JSC::VM **)a4;
    if (*(_QWORD *)a4 && (*((_BYTE *)v30 + 16) & 0x20) != 0)
      v31 = JSC::Symbol::create((JSC::Symbol *)a1, v30, v23, v24, v25, v26, v27, v28);
    else
      v31 = JSC::jsString((JSC *)a1, a4, v23, v24, v25, v26, v27, v28);
    v32 = v31;
    __dst = 0;
    v128 = 0;
    if (a6)
    {
      if ((a6 & 8) != 0)
        v33 = (a6 - 112) | 1;
      else
        v33 = a6 & 0xFFFFFFFFFFFFC000;
      if ((v33 & 1) != 0)
        v34 = (_QWORD *)(v33 + 47);
      else
        v34 = (_QWORD *)(*(_QWORD *)v33 + 32);
      v35 = (WTF::StringImpl *)v34[2];
      if (!v35)
      {
        while (1)
        {
          v73 = (_QWORD *)v34[3];
          if (!v73)
            break;
          v34[3] = v73[2];
          v35 = (WTF::StringImpl *)v73[4];
          v73[3] = 257;
          v73[4] = 0;
          if (v35)
            goto LABEL_23;
        }
        v74 = v34[6];
        if (!v34[1])
        {
          v75 = *(_QWORD **)(v74 + 488);
          *v34 = v74 + 480;
          v34[1] = v75;
          *v75 = v34;
          *(_QWORD *)(v74 + 488) = v34;
        }
        *(_QWORD *)(v74 + 1072) += 1024;
        v76 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
        JSC::WeakBlock::WeakBlock((uint64_t)v76, v33);
        JSC::Heap::didAllocate((JSC::Heap *)(v34[6] + 192), 0x400uLL, v77, v78, v79, v80, v81, v82);
        v83 = v34 + 4;
        v84 = v34[5];
        if (v84)
          v83 = (_QWORD *)(v84 + 16);
        *v83 = v76;
        v34[5] = v76;
        v76[1] = v84;
        v76[2] = 0;
        v35 = (WTF::StringImpl *)v76[4];
        v76[3] = 257;
        v76[4] = 0;
      }
LABEL_23:
      v34[2] = *(_QWORD *)v35;
      *(_QWORD *)v35 = a6;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = 0;
      v130 = v35;
      v36 = HIDWORD(v128);
      if (HIDWORD(v128) == (_DWORD)v128)
      {
        WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Weak<JSC::JSCell>>((uint64_t)&__dst, (unint64_t)&v130);
        if (v130)
          *((_QWORD *)v130 + 1) = 3;
      }
      else
      {
        *((_QWORD *)__dst + HIDWORD(v128)) = v35;
        HIDWORD(v128) = v36 + 1;
      }
    }
    if (v32)
    {
      if ((v32 & 8) != 0)
        v61 = (v32 - 112) | 1;
      else
        v61 = v32 & 0xFFFFFFFFFFFFC000;
      if ((v61 & 1) != 0)
        v62 = (_QWORD *)(v61 + 47);
      else
        v62 = (_QWORD *)(*(_QWORD *)v61 + 32);
      v37 = (WTF::StringImpl *)v62[2];
      if (!v37)
      {
        while (1)
        {
          v107 = (_QWORD *)v62[3];
          if (!v107)
            break;
          v62[3] = v107[2];
          v37 = (WTF::StringImpl *)v107[4];
          v107[3] = 257;
          v107[4] = 0;
          if (v37)
            goto LABEL_51;
        }
        v108 = v62[6];
        if (!v62[1])
        {
          v109 = *(_QWORD **)(v108 + 488);
          *v62 = v108 + 480;
          v62[1] = v109;
          *v109 = v62;
          *(_QWORD *)(v108 + 488) = v62;
        }
        *(_QWORD *)(v108 + 1072) += 1024;
        v110 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
        JSC::WeakBlock::WeakBlock((uint64_t)v110, v61);
        JSC::Heap::didAllocate((JSC::Heap *)(v62[6] + 192), 0x400uLL, v111, v112, v113, v114, v115, v116);
        v117 = v62 + 4;
        v118 = v62[5];
        if (v118)
          v117 = (_QWORD *)(v118 + 16);
        *v117 = v110;
        v62[5] = v110;
        v110[1] = v118;
        v110[2] = 0;
        v37 = (WTF::StringImpl *)v110[4];
        v110[3] = 257;
        v110[4] = 0;
      }
LABEL_51:
      v62[2] = *(_QWORD *)v37;
      *(_QWORD *)v37 = v32;
      *((_QWORD *)v37 + 1) = 0;
      *((_QWORD *)v37 + 2) = 0;
    }
    else
    {
      v37 = 0;
    }
    v130 = v37;
    v38 = HIDWORD(v128);
    if (HIDWORD(v128) == (_DWORD)v128)
    {
      WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Weak<JSC::JSCell>>((uint64_t)&__dst, (unint64_t)&v130);
      if (v130)
        *((_QWORD *)v130 + 1) = 3;
    }
    else
    {
      *((_QWORD *)__dst + HIDWORD(v128)) = v37;
      HIDWORD(v128) = v38 + 1;
    }
    v39 = JSC::DeferredWorkTimer::addPendingWork(*(_QWORD *)(a1 + 41888), a1, a3, (uint64_t)&__dst);
    v40 = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)(v40 + 8) = 1;
    *(_QWORD *)v40 = off_1E35B7318;
    *(_QWORD *)(v40 + 16) = v39;
    *(_QWORD *)(v40 + 24) = a3;
    *(_QWORD *)(v40 + 32) = a6;
    *(_QWORD *)(v40 + 40) = v32;
    *(_QWORD *)(v40 + 48) = this;
    *(_DWORD *)(v40 + 56) = v9;
    *(_DWORD *)(v40 + 60) = v8;
    *(_QWORD *)(v40 + 64) = a1;
    v130 = (WTF::StringImpl *)v40;
    JSC::Wasm::Module::validateAsync(a1, (uint64_t *)&v131, (uint64_t *)&v130);
    v48 = (unsigned int *)v130;
    v130 = 0;
    if (v48)
    {
      v49 = v48 + 2;
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        atomic_store(1u, v48 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 8))(v48);
      }
    }
    WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&__dst, v41, v42, v43, v44, v45, v46, v47);
  }
  v52 = v131;
  if (v131)
  {
    v131 = 0;
    LODWORD(v132) = 0;
    WTF::fastFree((unint64_t)v52, v22, (uint64_t)v23, v24, v25, v26, v27, v28);
  }
}

void JSC::instantiate(uint64_t a1, uint64_t a2, unint64_t a3, const WTF::String *a4, unsigned int *a5, JSC::Structure *a6, int a7, int a8)
{
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t (*v50)(JSC::Wasm::Module **);
  JSC::Wasm::Module **v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unsigned int *v68;
  JSC::Wasm::Module *v69;
  uint64_t v70;
  uint64_t v71;

  v16 = *(_QWORD *)(a2 + 1344);
  if ((v16 & 1) != 0)
  {
    v50 = *(uint64_t (**)(JSC::Wasm::Module **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v51 = (JSC::Wasm::Module **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v51 = (JSC::Wasm::Module **)(a2 - 16);
    v69 = *v51;
    v70 = a2;
    v71 = a2 + 1344;
    v16 = v50(&v69);
  }
  v17 = (unsigned int *)*((_QWORD *)a4 + 2);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v68 = v17;
  v24 = (unint64_t *)JSC::JSWebAssemblyInstance::tryCreate((JSC::Heap **)a1, (WTF::StringImpl **)a2, a6, a4, (uint64_t)a5, v16, (uint64_t *)&v68, a8);
  v25 = v68;
  v68 = 0;
  if (v25)
  {
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      v69 = (JSC::Wasm::Module *)v25;
      WTF::ThreadSafeRefCounted<JSC::Wasm::Module,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v69);
    }
  }
  v28 = *(unint64_t **)(a1 + 16);
  if (v28)
  {
    if (*(unint64_t **)(*(_QWORD *)(a2 + 56) + 24) == v28)
      return;
    *(_QWORD *)(a1 + 16) = 0;
    v52 = (unsigned int *)(a1 + 80);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 & 0xFFFFFFEF, v52));
    goto LABEL_38;
  }
  JSC::JSWebAssemblyInstance::initializeImports(v24, (JSC::JSGlobalObject *)a2, a5, a8);
  v28 = *(unint64_t **)(a1 + 16);
  if (v28)
  {
    if (*(unint64_t **)(*(_QWORD *)(a2 + 56) + 24) == v28)
      return;
    *(_QWORD *)(a1 + 16) = 0;
    v54 = (unsigned int *)(a1 + 80);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 & 0xFFFFFFEF, v54));
LABEL_38:
    JSC::JSPromise::reject(a3, (uint64_t *)a2, v28[1], v19, v20, v21, v22, v23);
    return;
  }
  v69 = 0;
  v70 = 0;
  if (a3)
  {
    if ((a3 & 8) != 0)
      v48 = (a3 - 112) | 1;
    else
      v48 = a3 & 0xFFFFFFFFFFFFC000;
    if ((v48 & 1) != 0)
      v49 = (_QWORD *)(v48 + 47);
    else
      v49 = (_QWORD *)(*(_QWORD *)v48 + 32);
    v28 = (unint64_t *)v49[2];
    if (!v28)
    {
      while (1)
      {
        v56 = (_QWORD *)v49[3];
        if (!v56)
          break;
        v49[3] = v56[2];
        v28 = (unint64_t *)v56[4];
        v56[3] = 257;
        v56[4] = 0;
        if (v28)
          goto LABEL_26;
      }
      v57 = v49[6];
      if (!v49[1])
      {
        v58 = *(_QWORD **)(v57 + 488);
        *v49 = v57 + 480;
        v49[1] = v58;
        *v58 = v49;
        *(_QWORD *)(v57 + 488) = v49;
      }
      *(_QWORD *)(v57 + 1072) += 1024;
      v59 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
      JSC::WeakBlock::WeakBlock((uint64_t)v59, v48);
      JSC::Heap::didAllocate((JSC::Heap *)(v49[6] + 192), 0x400uLL, v60, v61, v62, v63, v64, v65);
      v66 = v49 + 4;
      v67 = v49[5];
      if (v67)
        v66 = (_QWORD *)(v67 + 16);
      *v66 = v59;
      v49[5] = v59;
      v59[1] = v67;
      v59[2] = 0;
      v28 = (unint64_t *)v59[4];
      v59[3] = 257;
      v59[4] = 0;
    }
LABEL_26:
    v49[2] = *v28;
    *v28 = a3;
    v28[1] = 0;
    v28[2] = 0;
  }
  v68 = (unsigned int *)v28;
  WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Weak<JSC::JSCell>>((uint64_t)&v69, (unint64_t)&v68);
  if (v68)
    *((_QWORD *)v68 + 1) = 3;
  v29 = JSC::DeferredWorkTimer::addPendingWork(*(_QWORD *)(a1 + 41888), a1, v24, (uint64_t)&v69);
  v30 = *((_QWORD *)a4 + 2);
  v31 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v24[7] + 16) + 8) + 6);
  v32 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v32 + 8) = 1;
  *(_QWORD *)v32 = off_1E35B7378;
  *(_QWORD *)(v32 + 16) = v29;
  *(_QWORD *)(v32 + 24) = a3;
  *(_QWORD *)(v32 + 32) = v24;
  *(_QWORD *)(v32 + 40) = a4;
  *(_DWORD *)(v32 + 48) = a7;
  *(_DWORD *)(v32 + 52) = a8;
  *(_QWORD *)(v32 + 56) = a1;
  v68 = (unsigned int *)v32;
  JSC::Wasm::Module::compileAsync(v30, a1, v31, (uint64_t *)&v68, v33, v34, v35, v36);
  v44 = v68;
  v68 = 0;
  if (v44)
  {
    v45 = v44 + 2;
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v44 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
    }
  }
  WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v37, v38, v39, v40, v41, v42, v43);
}

uint64_t JSC::webAssemblyCompileStreamingInternal(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return (*(uint64_t (**)(void))(*((_QWORD *)this + 410) + 128))();
}

unint64_t JSC::webAssemblyInstantiateStreamingInternal(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  JSC::Heap **v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_QWORD *);
  _QWORD *v41;
  JSC::Heap **v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  _QWORD v46[3];

  v4 = *((int *)a2 + 8);
  if ((unint64_t)(v4 - 3) > 0xFFFFFFFFFFFFFFFDLL
    || ((v5 = *((_QWORD *)a2 + 7), (v5 & 0xFFFE000000000002) != 0)
      ? (v6 = 0)
      : *(unsigned __int8 *)(v5 + 5) <= 0x16u
      ? (v6 = 0)
      : (v6 = *((_QWORD *)a2 + 7)),
        v5 != 10 ? (v7 = v6 == 0) : (v7 = 0),
        !v7))
  {
    if ((_DWORD)v4 == 1)
      v8 = 10;
    else
      v8 = *((_QWORD *)a2 + 6);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(this + 3280) + 136))(this, v8);
  }
  v11 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v11 = 0x5200000002;
  *(_QWORD *)(v11 + 8) = "second argument to WebAssembly.instantiateStreaming must be undefined or an Object";
  *(_DWORD *)(v11 + 16) = 4;
  v45 = (WTF::StringImpl *)v11;
  v46[0] = v5;
  if (v5 == 2)
  {
    v13 = 4;
    goto LABEL_38;
  }
  if (!v5)
  {
LABEL_37:
    v13 = 0;
    goto LABEL_38;
  }
  if (JSC::JSValue::isAnyInt((JSC::JSValue *)v46))
  {
    v13 = 16;
    goto LABEL_38;
  }
  if (v46[0] >> 49)
  {
    v13 = 32;
    goto LABEL_38;
  }
  if ((v46[0] & 0xFFFE000000000002) != 0)
  {
    if ((v46[0] & 0xFFFFFFFFFFFFFFFELL) != 6)
      goto LABEL_30;
LABEL_32:
    v13 = 8;
    goto LABEL_38;
  }
  v12 = *(unsigned __int8 *)(v46[0] + 5);
  if (v12 == 2)
  {
    v13 = 64;
    goto LABEL_38;
  }
  if ((v46[0] & 0xFFFFFFFFFFFFFFFELL) == 6)
    goto LABEL_32;
  if (v12 <= 0x16)
  {
LABEL_30:
    if (JSC::JSValue::isCallable((JSC::JSValue *)v46))
    {
      v13 = 1;
      goto LABEL_38;
    }
    if ((v46[0] & 0xFFFE000000000002) == 0)
    {
      v14 = *(unsigned __int8 *)(v46[0] + 5);
      if (v14 == 4)
        v13 = 256;
      else
        v13 = (v14 == 3) << 9;
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  v13 = 128;
LABEL_38:
  v15 = *(_QWORD *)(this + 176);
  v16 = *(JSC::Heap ***)(this + 56);
  if ((v15 & 1) != 0)
  {
    v40 = *(uint64_t (**)(_QWORD *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
    v41 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v41 = (_QWORD *)(this - 16);
    v46[0] = *v41;
    v46[1] = this;
    v46[2] = this + 176;
    v42 = v16;
    v43 = v13;
    v44 = v40(v46);
    v13 = v43;
    v15 = v44;
    v16 = v42;
  }
  v17 = JSC::ErrorInstance::create(v16, v15, &v45, 0, (uint64_t)JSC::defaultSourceAppender, v13, 5, 1);
  v9 = JSC::JSPromise::rejectedPromise(this, v17, v18, v19, v20, v21, v22, v23);
  v31 = v45;
  v45 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  return v9;
}

unint64_t JSC::createJSWebAssemblyCompileError(unint64_t this, JSC::Heap **a2, WTF::StringImpl **a3, const WTF::String *a4)
{
  unint64_t v6;
  uint64_t (*v8)(_QWORD *);
  _QWORD *v9;
  _QWORD v10[3];

  v6 = *(_QWORD *)(this + 1296);
  if ((v6 & 1) != 0)
  {
    v8 = *(uint64_t (**)(_QWORD *))(v6 & 0xFFFFFFFFFFFFFFFCLL);
    v9 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v9 = (_QWORD *)(this - 16);
    v10[0] = *v9;
    v10[1] = this;
    v10[2] = this + 1296;
    v6 = v8(v10);
  }
  return JSC::ErrorInstance::create(a2, v6, a3, 0, (uint64_t)JSC::defaultSourceAppender, 0, 0, 1);
}

void JSC::JSWebAssemblyException::destroy(JSC::JSWebAssemblyException *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;

  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(unsigned int **)(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          v16 = v10;
          WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
          v10 = v16;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::JSWebAssemblyException::visitChildren(unsigned int **this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  char v22;
  char v23;
  unsigned int *v24;
  unint64_t v25;
  int v27;
  int v28;

  JSC::JSObject::visitChildren((JSC::JSObject *)this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this[2] + 1);
  if (*(_DWORD *)(v16 + 32))
    v17 = 0;
  else
    v17 = (uint64_t *)(v16 + 8);
  if (*((_DWORD *)v17 + 2))
  {
    v18 = 0;
    v19 = 0;
    v20 = *((_DWORD *)v17 + 3);
    v21 = *v17;
    do
    {
      v22 = *(_BYTE *)(v21 + 16 * (v20 + v19));
      if (BYTE1(dword_1ECF4C7B0))
        v23 = 29;
      else
        v23 = 17;
      if ((v23 + v22) <= 1u)
      {
        v24 = this[3];
        if (*v24 <= v18)
        {
          __break(0xC471u);
          return;
        }
        v25 = *(_QWORD *)&v24[2 * v18 + 2];
        if ((v25 & 0xFFFE000000000002) == 0 && v25 != 0)
        {
          if ((v25 & 8) != 0)
          {
            if ((*(_BYTE *)(v25 - 79) & 1) == 0)
              goto LABEL_26;
          }
          else
          {
            v27 = *((_DWORD *)a2 + 33);
            if (*(_DWORD *)(v25 & 0xFFFFFFFFFFFFC000 | 0x20) != v27)
              JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v25 & 0xFFFFFFFFFFFFC000), v27, v10, v11, v12, v13, v14, v15);
            if (((*(_QWORD *)((v25 & 0xFFFFFFFFFFFFC000) + 8 * ((v25 >> 10) & 0xF) + 0x28) >> (v25 >> 4)) & 1) == 0)
            {
LABEL_26:
              JSC::SlotVisitor::appendSlow((uint64_t)a2, v25, 0, v11, v12, v13, v14, v15);
              goto LABEL_20;
            }
          }
          if (*((_QWORD *)a2 + 21))
            goto LABEL_26;
        }
      }
LABEL_20:
      v20 = *((_DWORD *)v17 + 3);
      v21 = *v17;
      if (*(unsigned __int8 *)(*v17 + 16 * (v19 + v20)) == 251)
        v28 = 2;
      else
        v28 = 1;
      v18 += v28;
      ++v19;
    }
    while (v19 < *((_DWORD *)v17 + 2));
  }
}

void JSC::JSWebAssemblyException::visitChildren(unsigned int **this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int *v17;
  int v18;
  _QWORD v19[2];
  uint64_t v20;
  char v21;

  v19[0] = a2;
  v19[1] = this;
  v21 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v20 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x198E3EA20);
  }
  *((_QWORD *)a2 + 11) = v19;
  JSC::JSObject::visitChildren((JSC::JSObject *)this, a2, a3);
  v6 = *((_QWORD *)this[2] + 1);
  if (*(_DWORD *)(v6 + 32))
    v7 = 0;
  else
    v7 = (uint64_t *)(v6 + 8);
  v8 = *((_DWORD *)v7 + 2);
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = *((_DWORD *)v7 + 3);
    v12 = *v7;
    v13 = BYTE1(dword_1ECF4C7B0);
    do
    {
      v14 = *(_QWORD *)(v12 + 16 * (v11 + v10));
      v15 = v14;
      if (v13)
        v16 = 29;
      else
        v16 = 17;
      if ((v16 + v14) <= 1u)
      {
        v17 = this[3];
        if (*v17 <= v9)
        {
          __break(0xC471u);
          goto LABEL_22;
        }
        if ((*(_QWORD *)&v17[2 * v9 + 2] & 0xFFFE000000000002) == 0)
        {
          (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
          v13 = BYTE1(dword_1ECF4C7B0);
          v12 = *v7;
          v8 = *((_DWORD *)v7 + 2);
          v11 = *((_DWORD *)v7 + 3);
          v15 = *(unsigned __int8 *)(*v7 + 16 * (v10 + v11));
        }
      }
      if (v15 == 251)
        v18 = 2;
      else
        v18 = 1;
      v9 += v18;
      ++v10;
    }
    while (v10 < v8);
  }
  *(_QWORD *)(v19[0] + 88) = v20;
}

uint64_t JSC::JSWebAssemblyException::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 31;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::JSWebAssemblyException::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::JSWebAssemblyException::getArg(JSC::JSWebAssemblyException *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  unint64_t v17;
  double v18;
  unint64_t v19;
  uint64_t v21;

  v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  v9 = (uint64_t *)(v8 + 8);
  if (*(_DWORD *)(v8 + 32))
    v9 = 0;
  v10 = *((_DWORD *)v9 + 3);
  v11 = *v9;
  v12 = *(unsigned __int8 *)(*v9 + 16 * (v10 + a3));
  if (v12 == 251)
  {
    __break(0xC471u);
    JUMPOUT(0x198E3ED10);
  }
  v13 = 0;
  if ((_DWORD)a3)
  {
    v14 = a3;
    do
    {
      if (*(unsigned __int8 *)(v11 + 16 * v10) == 251)
        v15 = 2;
      else
        v15 = 1;
      v13 += v15;
      ++v10;
      --v14;
    }
    while (v14);
  }
  v16 = (unsigned int *)*((_QWORD *)this + 3);
  if (*v16 <= v13)
  {
    __break(0xC471u);
    JUMPOUT(0x198E3ED30);
  }
  v17 = *(_QWORD *)&v16[2 * v13 + 2];
  if ((int)v12 > 251)
  {
    switch((int)v12)
    {
      case 252:
        v18 = *(double *)&v17;
        v19 = v17 & 0x7FFFFFFFFFFFFFFFLL;
        if (v19 <= 0x7FF7FFFFFFFFFFFFLL && v19 != 0x7FF0000000000000)
          goto LABEL_24;
        goto LABEL_30;
      case 253:
        v18 = *(float *)&v17;
        if (COERCE_UNSIGNED_INT64(fabs(*(float *)&v17)) > 0x7FEFFFFFFFFFFFFFLL)
          goto LABEL_30;
LABEL_24:
        v21 = (int)v18;
        if (v18 == (double)(int)v21 && ((_DWORD)v21 || (*(_QWORD *)&v18 & 0x8000000000000000) == 0))
          v17 = v21 | 0xFFFE000000000000;
        else
LABEL_30:
          v17 = *(_QWORD *)&v18 + 0x2000000000000;
        break;
      case 254:
        return JSC::JSBigInt::createFrom(a2, v17, a3, a4, a5, a6, a7, a8);
      case 255:
        return v17 | 0xFFFE000000000000;
      default:
        goto LABEL_34;
    }
  }
  else if ((v12 - 227) >= 2 && (v12 - 239) >= 2)
  {
    if ((_DWORD)v12 != 192)
    {
LABEL_34:
      __break(0xC471u);
      JUMPOUT(0x198E3ED50);
    }
    return 10;
  }
  return v17;
}

BOOL JSC::Wasm::isRefWithRecursiveReference(char a1, unint64_t a2)
{
  BOOL v3;

  if (BYTE2(dword_1ECF4C7B0)
    && (BYTE1(dword_1ECF4C7B0) ? (v3 = (a1 + 29) > 1u) : (v3 = 1),
        !v3 && a2 <= 0xFFFFFFFFFFFFFFC0 && *(_DWORD *)(a2 + 32) == 4))
  {
    return **(_QWORD **)(a2 + 8) == 0;
  }
  else
  {
    return 0;
  }
}

uint64_t JSC::createWebAssemblyCompileError(JSC *this, JSC::VM *a2, JSC::JSObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v6)(_QWORD *);
  _QWORD *v7;
  _QWORD v8[3];

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(v3 + 1296);
  if ((v4 & 1) != 0)
  {
    v6 = *(void (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v7 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v3 & 8) != 0)
      v7 = (_QWORD *)(v3 - 16);
    v8[0] = *v7;
    v8[1] = v3;
    v8[2] = v3 + 1296;
    v6(v8);
  }
  return *(_QWORD *)(v3 + 1304);
}

uint64_t JSC::createWebAssemblyException(JSC *this, JSC::VM *a2, JSC::JSObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v6)(_QWORD *);
  _QWORD *v7;
  _QWORD v8[3];

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(v3 + 1312);
  if ((v4 & 1) != 0)
  {
    v6 = *(void (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v7 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v3 & 8) != 0)
      v7 = (_QWORD *)(v3 - 16);
    v8[0] = *v7;
    v8[1] = v3;
    v8[2] = v3 + 1312;
    v6(v8);
  }
  return *(_QWORD *)(v3 + 1320);
}

uint64_t JSC::createWebAssemblyGlobal(JSC *this, JSC::VM *a2, JSC::JSObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v6)(_QWORD *);
  _QWORD *v7;
  _QWORD v8[3];

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(v3 + 1328);
  if ((v4 & 1) != 0)
  {
    v6 = *(void (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v7 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v3 & 8) != 0)
      v7 = (_QWORD *)(v3 - 16);
    v8[0] = *v7;
    v8[1] = v3;
    v8[2] = v3 + 1328;
    v6(v8);
  }
  return *(_QWORD *)(v3 + 1336);
}

uint64_t JSC::createWebAssemblyInstance(JSC *this, JSC::VM *a2, JSC::JSObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v6)(_QWORD *);
  _QWORD *v7;
  _QWORD v8[3];

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(v3 + 1344);
  if ((v4 & 1) != 0)
  {
    v6 = *(void (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v7 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v3 & 8) != 0)
      v7 = (_QWORD *)(v3 - 16);
    v8[0] = *v7;
    v8[1] = v3;
    v8[2] = v3 + 1344;
    v6(v8);
  }
  return *(_QWORD *)(v3 + 1352);
}

uint64_t JSC::createWebAssemblyLinkError(JSC *this, JSC::VM *a2, JSC::JSObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v6)(_QWORD *);
  _QWORD *v7;
  _QWORD v8[3];

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(v3 + 1360);
  if ((v4 & 1) != 0)
  {
    v6 = *(void (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v7 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v3 & 8) != 0)
      v7 = (_QWORD *)(v3 - 16);
    v8[0] = *v7;
    v8[1] = v3;
    v8[2] = v3 + 1360;
    v6(v8);
  }
  return *(_QWORD *)(v3 + 1368);
}

uint64_t JSC::createWebAssemblyMemory(JSC *this, JSC::VM *a2, JSC::JSObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v6)(_QWORD *);
  _QWORD *v7;
  _QWORD v8[3];

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(v3 + 1376);
  if ((v4 & 1) != 0)
  {
    v6 = *(void (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v7 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v3 & 8) != 0)
      v7 = (_QWORD *)(v3 - 16);
    v8[0] = *v7;
    v8[1] = v3;
    v8[2] = v3 + 1376;
    v6(v8);
  }
  return *(_QWORD *)(v3 + 1384);
}

uint64_t JSC::createWebAssemblyModule(JSC *this, JSC::VM *a2, JSC::JSObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v6)(_QWORD *);
  _QWORD *v7;
  _QWORD v8[3];

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(v3 + 1392);
  if ((v4 & 1) != 0)
  {
    v6 = *(void (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v7 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v3 & 8) != 0)
      v7 = (_QWORD *)(v3 - 16);
    v8[0] = *v7;
    v8[1] = v3;
    v8[2] = v3 + 1392;
    v6(v8);
  }
  return *(_QWORD *)(v3 + 1400);
}

uint64_t JSC::createWebAssemblyRuntimeError(JSC *this, JSC::VM *a2, JSC::JSObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v6)(_QWORD *);
  _QWORD *v7;
  _QWORD v8[3];

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(v3 + 1408);
  if ((v4 & 1) != 0)
  {
    v6 = *(void (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v7 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v3 & 8) != 0)
      v7 = (_QWORD *)(v3 - 16);
    v8[0] = *v7;
    v8[1] = v3;
    v8[2] = v3 + 1408;
    v6(v8);
  }
  return *(_QWORD *)(v3 + 1416);
}

uint64_t JSC::createWebAssemblyTable(JSC *this, JSC::VM *a2, JSC::JSObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v6)(_QWORD *);
  _QWORD *v7;
  _QWORD v8[3];

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(v3 + 1440);
  if ((v4 & 1) != 0)
  {
    v6 = *(void (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v7 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v3 & 8) != 0)
      v7 = (_QWORD *)(v3 - 16);
    v8[0] = *v7;
    v8[1] = v3;
    v8[2] = v3 + 1440;
    v6(v8);
  }
  return *(_QWORD *)(v3 + 1448);
}

uint64_t JSC::createWebAssemblyTag(JSC *this, JSC::VM *a2, JSC::JSObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v6)(_QWORD *);
  _QWORD *v7;
  _QWORD v8[3];

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(v3 + 1456);
  if ((v4 & 1) != 0)
  {
    v6 = *(void (**)(_QWORD *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v7 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v3 & 8) != 0)
      v7 = (_QWORD *)(v3 - 16);
    v8[0] = *v7;
    v8[1] = v3;
    v8[2] = v3 + 1456;
    v6(v8);
  }
  return *(_QWORD *)(v3 + 1464);
}

unint64_t JSC::webAssemblyCompileFunc(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t *v11;
  int v12;
  unint64_t v13;
  unint64_t SlowCase;
  int v15;
  unsigned int *v16;
  uint64_t v17;
  char **v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  unint64_t OutOfMemoryError;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  JSC::Exception *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  JSC::Heap **v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  JSC::Exception *v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  size_t v75;
  uint64_t v76;
  int v77;
  int v78;
  JSC::Heap **v79;
  uint64_t (*v80)(WTF **);
  WTF **v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  WTF::StringImpl *v88;
  void *__dst;
  WTF *v90;
  uint64_t v91;
  char *v92;

  v10 = *(_QWORD *)(this + 56);
  v11 = (unint64_t *)(v10 + 38992);
  v12 = *(_DWORD *)(this + 1164);
  if (v12)
    v13 = 16 * (v12 & 0xFFFFFFFE);
  else
    v13 = 0;
  SlowCase = *v11;
  if (*v11 < *(_QWORD *)(v10 + 39000))
    goto LABEL_5;
  SlowCase = *(_QWORD *)(v10 + 39008);
  if ((SlowCase & 1) == 0)
  {
    v66 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 39016);
    *(_QWORD *)(v10 + 39000) = SlowCase + HIDWORD(v66);
    *(_QWORD *)(v10 + 39008) = SlowCase + (int)v66;
LABEL_5:
    *v11 = SlowCase + 32;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM(*(JSC **)(this + 56), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 38968, v10 + 192, 32, 0, 0, v82, v83, v84);
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v15 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)SlowCase = v13 >> 4;
  *(_DWORD *)(SlowCase + 4) = v15;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  *(_OWORD *)(SlowCase + 16) = xmmword_19914EFB0;
  if (*(_DWORD *)(v10 + 80))
  {
    v67 = *(_DWORD *)(v10 + 80);
    if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v16 = (unsigned int *)(v10 + 80);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v17 = 10;
    goto LABEL_30;
  }
  v17 = *((_QWORD *)a2 + 6);
  if ((v17 & 0xFFFE000000000002) != 0)
  {
LABEL_30:
    v41 = 0;
    v42 = 0;
    v87 = 0;
    v20 = *(_QWORD *)(this + 56);
    __dst = (void *)v20;
    goto LABEL_31;
  }
  v18 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C));
  if (v18 == &JSC::JSSourceCode::s_info && (v19 = *(_DWORD **)(v17 + 8)) != 0)
  {
    ++v19[2];
    v87 = v19;
    (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 80))(v19);
    v20 = *(_QWORD *)(this + 56);
    __dst = (void *)v20;
    v18 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C));
  }
  else
  {
    v87 = 0;
    v20 = *(_QWORD *)(this + 56);
    __dst = (void *)v20;
  }
  if (v18 == &JSC::JSSourceCode::s_info)
  {
    v21 = *(_QWORD *)(v17 + 8);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 64))(v21);
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
    goto LABEL_16;
  }
  v72 = *(unsigned __int8 *)(v17 + 5);
  if (v72 < 0x17)
  {
    v41 = 0;
    v42 = 0;
  }
  else
  {
    if (v72 == 38)
      v41 = v17;
    else
      v41 = 0;
    if (v72 - 39 >= 0xC)
      v42 = 0;
    else
      v42 = v17;
  }
LABEL_31:
  if (!(v41 | v42))
  {
    v45 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v45 = 0x3B00000002;
    *(_QWORD *)(v45 + 8) = "first argument must be an ArrayBufferView or an ArrayBuffer";
    *(_DWORD *)(v45 + 16) = 4;
    v88 = (WTF::StringImpl *)v45;
    v90 = (WTF *)v17;
    switch(v17)
    {
      case 10:
        v46 = 2;
LABEL_51:
        v47 = *(_QWORD *)(this + 176);
        v48 = *(JSC::Heap ***)(this + 56);
        if ((v47 & 1) != 0)
        {
          v79 = *(JSC::Heap ***)(this + 56);
          v80 = *(uint64_t (**)(WTF **))(v47 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v81 = (WTF **)(this - 16);
          else
            v81 = (WTF **)(this & 0xFFFFFFFFFFFFC000 | 8);
          v90 = *v81;
          v91 = this;
          v92 = (char *)(this + 176);
          v47 = v80(&v90);
          v48 = v79;
        }
        v49 = JSC::ErrorInstance::create(v48, v47, &v88, 0, (uint64_t)JSC::defaultSourceAppender, v46, 5, 1);
        v56 = (JSC::Exception *)v49;
        if ((v49 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0x4C)))
        {
          v56 = (JSC::Exception *)JSC::Exception::create(v20, (JSC::VM *)v49, 0, v50, v51, v52, v53, v54);
        }
        JSC::VM::throwException((JSC::VM *)v20, (JSC::JSGlobalObject *)this, v56, v55, v50, v51, v52, v53, v54);
        v57 = v88;
        v88 = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
          {
            WTF::StringImpl::~StringImpl(v57, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
          }
          else
          {
            *(_DWORD *)v57 -= 2;
          }
        }
        goto LABEL_57;
      case 2:
        v46 = 4;
        goto LABEL_51;
      case 0:
LABEL_119:
        v46 = 0;
        goto LABEL_51;
    }
    if (JSC::JSValue::isAnyInt((JSC::JSValue *)&v90))
    {
      v46 = 16;
      goto LABEL_51;
    }
    if ((unint64_t)v90 >> 49)
    {
      v46 = 32;
      goto LABEL_51;
    }
    if (((unint64_t)v90 & 0xFFFE000000000002) != 0)
    {
      if (((unint64_t)v90 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
LABEL_109:
        if (JSC::JSValue::isCallable((JSC::JSValue *)&v90))
        {
          v46 = 1;
          goto LABEL_51;
        }
        if (((unint64_t)v90 & 0xFFFE000000000002) == 0)
        {
          v78 = *((unsigned __int8 *)v90 + 5);
          if (v78 == 4)
            v46 = 256;
          else
            v46 = (v78 == 3) << 9;
          goto LABEL_51;
        }
        goto LABEL_119;
      }
    }
    else
    {
      v73 = *((unsigned __int8 *)v90 + 5);
      if (v73 == 2)
      {
        v46 = 64;
        goto LABEL_51;
      }
      if (((unint64_t)v90 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
        if (v73 > 0x16)
        {
          v46 = 128;
          goto LABEL_51;
        }
        goto LABEL_109;
      }
    }
    v46 = 8;
    goto LABEL_51;
  }
  if (v42)
  {
    if (*(unsigned __int8 *)(v42 + 5) - 39 <= 0xA)
    {
      JSC::validateTypedArray((JSC *)this, (JSC::ArrayBuffer **)v42, a3, a4, a5, a6, a7, a8);
      if (!*(_DWORD *)(v20 + 80))
        goto LABEL_35;
      v77 = *(_DWORD *)(v20 + 80);
      if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v20 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!*(_QWORD *)(v20 + 16))
        goto LABEL_35;
      goto LABEL_57;
    }
    LOBYTE(v90) = 0;
    LOBYTE(v91) = 0;
    JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v42, (uint64_t)&v90);
    if ((_BYTE)a2)
    {
LABEL_35:
      v22 = *(_QWORD *)(v42 + 16);
      if (v22 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v22 = (v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if ((*(_BYTE *)(v42 + 40) & 7u) > 2)
      {
        LOBYTE(v90) = 0;
        LOBYTE(v91) = 0;
        v74 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v42, (uint64_t)&v90, (uint64_t)a3, a4, a5, a6, a7, a8);
        v75 = 0;
        if ((_BYTE)a2 && v74)
        {
          if ((*(_BYTE *)(v42 + 40) & 1) != 0)
          {
            if ((*(_BYTE *)(v42 + 5) - 42) > 7u)
              LOBYTE(v85) = 0;
            else
              v85 = qword_19915B2C8[(char)(*(_BYTE *)(v42 + 5) - 42)];
            v75 = v74 << v85;
          }
          else
          {
            if ((*(_BYTE *)(v42 + 5) - 42) > 7u)
              LOBYTE(v76) = 0;
            else
              v76 = qword_19915B2C8[(char)(*(_BYTE *)(v42 + 5) - 42)];
            v75 = *(_QWORD *)(v42 + 24) << v76;
          }
        }
        v23 = v75;
      }
      else
      {
        if ((*(_BYTE *)(v42 + 5) - 42) > 7u)
          LOBYTE(v43) = 0;
        else
          v43 = qword_19915B2C8[(char)(*(_BYTE *)(v42 + 5) - 42)];
        v23 = *(_QWORD *)(v42 + 24) << v43;
      }
      goto LABEL_16;
    }
    goto LABEL_48;
  }
  v44 = *(_QWORD *)(v41 + 16);
  v22 = *(_QWORD *)(v44 + 16);
  if (!v22)
  {
LABEL_48:
    JSC::throwTypeError(this, (JSC::VM **)&__dst, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
LABEL_57:
    v23 = 0;
    v22 = 0;
    goto LABEL_16;
  }
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
  {
    if (!((v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      goto LABEL_48;
    v22 = (v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  }
  if (*(_BYTE *)(v44 + 64) && (v86 = *(_QWORD *)(v44 + 32)) != 0)
    v23 = *(_QWORD *)(v86 + 32);
  else
    v23 = *(_QWORD *)(v44 + 48);
  if (!*v16)
    goto LABEL_17;
LABEL_16:
  v68 = *(_DWORD *)(v10 + 80);
  if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
  {
    v90 = 0;
    v91 = 0;
  }
  else
  {
LABEL_17:
    v90 = 0;
    v91 = 0;
    if (v23)
    {
      if (HIDWORD(v23) || (WTF::tryFastMalloc((WTF *)v23, &__dst), !__dst))
      {
        OutOfMemoryError = JSC::createOutOfMemoryError(this, a2);
        v40 = (JSC::Exception *)OutOfMemoryError;
        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                  + 0x4C)))
        {
          v40 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)OutOfMemoryError, 0, v34, v35, v36, v37, v38);
        }
        JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v40, v39, v34, v35, v36, v37, v38);
      }
      else
      {
        LODWORD(v91) = v23;
        v90 = (WTF *)__dst;
        memcpy(__dst, (const void *)v22, v23);
        HIDWORD(v91) = v23;
      }
    }
  }
  JSC::WebAssemblySourceProviderBufferGuard::~WebAssemblySourceProviderBufferGuard((JSC::WebAssemblySourceProviderBufferGuard *)&v87);
  if (!*v16)
    goto LABEL_22;
  v69 = *(_DWORD *)(v10 + 80);
  if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v25, v26, v27, v28, v29, v30);
  v70 = *(_QWORD *)(v10 + 16);
  if (v70)
  {
    if (*(_QWORD *)(*(_QWORD *)(this + 56) + 24) != v70)
    {
      *(_QWORD *)(v10 + 16) = 0;
      do
        v71 = __ldaxr(v16);
      while (__stlxr(v71 & 0xFFFFFFEF, v16));
      JSC::JSPromise::reject(SlowCase, (uint64_t *)this, *(_QWORD *)(v70 + 8), v26, v27, v28, v29, v30);
    }
  }
  else
  {
LABEL_22:
    JSC::JSWebAssembly::webAssemblyModuleValidateAsync(this, (_DWORD *)SlowCase, (uint64_t *)&v90);
  }
  v31 = v90;
  if (v90)
  {
    v90 = 0;
    LODWORD(v91) = 0;
    WTF::fastFree((unint64_t)v31, v24, v25, v26, v27, v28, v29, v30);
  }
  return SlowCase;
}

unint64_t JSC::webAssemblyInstantiateFunc(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int *v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  JSC::Heap **v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  JSC::JSGlobalObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t SlowCase;
  uint64_t (*v55)(WTF::StringImpl **);
  WTF::StringImpl **v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58[3];

  v9 = *(_QWORD *)(this + 56);
  v10 = (unint64_t *)(v9 + 38992);
  v11 = *(_DWORD *)(this + 1164);
  if (v11)
    v12 = 16 * (v11 & 0xFFFFFFFE);
  else
    v12 = 0;
  v13 = *v10;
  if (*v10 < *(_QWORD *)(v9 + 39000))
    goto LABEL_5;
  v13 = *(_QWORD *)(v9 + 39008);
  if ((v13 & 1) == 0)
  {
    v36 = *(_QWORD *)(v13 + 8) ^ *(_QWORD *)(v9 + 39016);
    *(_QWORD *)(v9 + 39000) = v13 + HIDWORD(v36);
    *(_QWORD *)(v9 + 39008) = v13 + (int)v36;
LABEL_5:
    *v10 = v13 + 32;
    goto LABEL_6;
  }
  v50 = a2;
  JSC::sanitizeStackForVM(*(JSC **)(this + 56), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v9 + 38968, v9 + 192, 32, 0, 0, v51, v52, v53);
  a2 = v50;
  v13 = SlowCase;
LABEL_6:
  *(_DWORD *)v13 = 0;
  v14 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)v13 = v12 >> 4;
  *(_DWORD *)(v13 + 4) = v14;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  *(_OWORD *)(v13 + 16) = xmmword_19914EFB0;
  v15 = *((int *)a2 + 8);
  if ((unint64_t)(v15 - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    v17 = 0;
    goto LABEL_15;
  }
  v16 = (unsigned __int8 *)*((_QWORD *)a2 + 7);
  if (((unint64_t)v16 & 0xFFFE000000000002) != 0)
  {
    v17 = 0;
  }
  else if (v16[5] <= 0x16u)
  {
    v17 = 0;
  }
  else
  {
    v17 = (unsigned int *)*((_QWORD *)a2 + 7);
  }
  if (v16 == (unsigned __int8 *)10 || v17)
  {
LABEL_15:
    if ((_DWORD)v15 == 1)
    {
      v18 = 10;
    }
    else
    {
      v18 = *((_QWORD *)a2 + 6);
      if ((v18 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v18 + 5) == 73)
      {
        JSC::JSWebAssemblyInstance::createPrivateModuleKey(v58);
        JSC::instantiate(v9, this, v13, (const WTF::String *)v18, v17, (JSC::Structure *)v58, 0, 0);
        goto LABEL_22;
      }
    }
    JSC::JSWebAssemblyInstance::createPrivateModuleKey(v58);
    JSC::compileAndInstantiate(v9, this, (JSC::JSArrayBufferView *)v13, (JSC::VM *)v58, v18, (uint64_t)v17, 2, 0);
LABEL_22:
    v26 = v58[0];
    v58[0] = 0;
    if (!v26)
      return v13;
    goto LABEL_23;
  }
  v37 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v37 = 0x4900000002;
  *(_QWORD *)(v37 + 8) = "second argument to WebAssembly.instantiate must be undefined or an Object";
  *(_DWORD *)(v37 + 16) = 4;
  v57 = (WTF::StringImpl *)v37;
  v58[0] = (WTF::StringImpl *)v16;
  if (v16 == (unsigned __int8 *)2)
  {
    v39 = 4;
    goto LABEL_51;
  }
  if (!v16)
  {
LABEL_49:
    v39 = 0;
    goto LABEL_51;
  }
  if (JSC::JSValue::isAnyInt((JSC::JSValue *)v58))
  {
    v39 = 16;
    goto LABEL_51;
  }
  if ((unint64_t)v58[0] >> 49)
  {
    v39 = 32;
    goto LABEL_51;
  }
  if (((unint64_t)v58[0] & 0xFFFE000000000002) != 0)
  {
    if (((unint64_t)v58[0] & 0xFFFFFFFFFFFFFFFELL) != 6)
      goto LABEL_43;
LABEL_45:
    v39 = 8;
    goto LABEL_51;
  }
  v38 = *((unsigned __int8 *)v58[0] + 5);
  if (v38 == 2)
  {
    v39 = 64;
    goto LABEL_51;
  }
  if (((unint64_t)v58[0] & 0xFFFFFFFFFFFFFFFELL) == 6)
    goto LABEL_45;
  if (v38 > 0x16)
  {
    v39 = 128;
    goto LABEL_51;
  }
LABEL_43:
  if (JSC::JSValue::isCallable((JSC::JSValue *)v58))
  {
    v39 = 1;
    goto LABEL_51;
  }
  if (((unint64_t)v58[0] & 0xFFFE000000000002) != 0)
    goto LABEL_49;
  v40 = *((unsigned __int8 *)v58[0] + 5);
  if (v40 == 4)
    v39 = 256;
  else
    v39 = (v40 == 3) << 9;
LABEL_51:
  v41 = *(_QWORD *)(this + 176);
  v42 = *(JSC::Heap ***)(this + 56);
  if ((v41 & 1) != 0)
  {
    v55 = *(uint64_t (**)(WTF::StringImpl **))(v41 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v56 = (WTF::StringImpl **)(this - 16);
    else
      v56 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
    v58[0] = *v56;
    v58[1] = (WTF::StringImpl *)this;
    v58[2] = (WTF::StringImpl *)(this + 176);
    v41 = v55(v58);
  }
  v43 = JSC::ErrorInstance::create(v42, v41, &v57, 0, (uint64_t)JSC::defaultSourceAppender, v39, 5, 1);
  v13 = JSC::JSPromise::rejectedPromise(this, v43, v44, v45, v46, v47, v48, v49);
  v26 = v57;
  v57 = 0;
  if (v26)
  {
LABEL_23:
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  return v13;
}

uint64_t JSC::webAssemblyValidateFunc(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  char **v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  void *v17;
  unint64_t OutOfMemoryError;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  JSC::Exception *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  JSC::Heap **v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  JSC::Exception *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  size_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t (*v69)(WTF **);
  WTF **v70;
  uint64_t v71;
  uint64_t v72;
  void *__dst;
  int v74;
  _DWORD *v75;
  WTF::StringImpl *v76;
  WTF *v77;
  unint64_t v78;
  char *v79;

  v9 = *(_QWORD *)(this + 56);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v10 = 10;
    goto LABEL_27;
  }
  v10 = *((_QWORD *)a2 + 6);
  if ((v10 & 0xFFFE000000000002) != 0)
  {
LABEL_27:
    v35 = 0;
    v36 = 0;
    v75 = 0;
    __dst = (void *)v9;
    v13 = v9;
    goto LABEL_28;
  }
  v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
  if (v11 == &JSC::JSSourceCode::s_info && (v12 = *(_DWORD **)(v10 + 8)) != 0)
  {
    ++v12[2];
    v75 = v12;
    (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 80))(v12);
    v13 = *(_QWORD *)(this + 56);
    __dst = (void *)v13;
    v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
  }
  else
  {
    v75 = 0;
    __dst = (void *)v9;
    v13 = v9;
  }
  if (v11 == &JSC::JSSourceCode::s_info)
  {
    v14 = *(_QWORD *)(v10 + 8);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 64))(v14);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
    goto LABEL_8;
  }
  v62 = *(unsigned __int8 *)(v10 + 5);
  if (v62 < 0x17)
  {
    v35 = 0;
    v36 = 0;
  }
  else
  {
    if (v62 == 38)
      v35 = v10;
    else
      v35 = 0;
    if (v62 - 39 >= 0xC)
      v36 = 0;
    else
      v36 = v10;
  }
LABEL_28:
  if (!(v35 | v36))
  {
    v39 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v39 = 0x3B00000002;
    *(_QWORD *)(v39 + 8) = "first argument must be an ArrayBufferView or an ArrayBuffer";
    *(_DWORD *)(v39 + 16) = 4;
    v76 = (WTF::StringImpl *)v39;
    v77 = (WTF *)v10;
    switch(v10)
    {
      case 10:
        v40 = 2;
LABEL_48:
        v41 = *(_QWORD *)(this + 176);
        v42 = *(JSC::Heap ***)(this + 56);
        if ((v41 & 1) != 0)
        {
          v69 = *(uint64_t (**)(WTF **))(v41 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v70 = (WTF **)(this - 16);
          else
            v70 = (WTF **)(this & 0xFFFFFFFFFFFFC000 | 8);
          v77 = *v70;
          v78 = this;
          v79 = (char *)(this + 176);
          v41 = v69(&v77);
        }
        v43 = JSC::ErrorInstance::create(v42, v41, &v76, 0, (uint64_t)JSC::defaultSourceAppender, v40, 5, 1);
        v50 = (JSC::Exception *)v43;
        if ((v43 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x4C)))
        {
          v50 = (JSC::Exception *)JSC::Exception::create(v13, (JSC::VM *)v43, 0, v44, v45, v46, v47, v48);
        }
        JSC::VM::throwException((JSC::VM *)v13, (JSC::JSGlobalObject *)this, v50, v49, v44, v45, v46, v47, v48);
        v51 = v76;
        v76 = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
          {
            WTF::StringImpl::~StringImpl(v51, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
          }
          else
          {
            *(_DWORD *)v51 -= 2;
          }
        }
        goto LABEL_54;
      case 2:
        v40 = 4;
        goto LABEL_48;
      case 0:
LABEL_109:
        v40 = 0;
        goto LABEL_48;
    }
    if (JSC::JSValue::isAnyInt((JSC::JSValue *)&v77))
    {
      v40 = 16;
      goto LABEL_48;
    }
    if ((unint64_t)v77 >> 49)
    {
      v40 = 32;
      goto LABEL_48;
    }
    if (((unint64_t)v77 & 0xFFFE000000000002) != 0)
    {
      if (((unint64_t)v77 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
LABEL_99:
        if (JSC::JSValue::isCallable((JSC::JSValue *)&v77))
        {
          v40 = 1;
          goto LABEL_48;
        }
        if (((unint64_t)v77 & 0xFFFE000000000002) == 0)
        {
          v68 = *((unsigned __int8 *)v77 + 5);
          if (v68 == 4)
            v40 = 256;
          else
            v40 = (v68 == 3) << 9;
          goto LABEL_48;
        }
        goto LABEL_109;
      }
    }
    else
    {
      v63 = *((unsigned __int8 *)v77 + 5);
      if (v63 == 2)
      {
        v40 = 64;
        goto LABEL_48;
      }
      if (((unint64_t)v77 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
        if (v63 > 0x16)
        {
          v40 = 128;
          goto LABEL_48;
        }
        goto LABEL_99;
      }
    }
    v40 = 8;
    goto LABEL_48;
  }
  if (!v36)
  {
    v38 = *(_QWORD *)(v35 + 16);
    v15 = *(_QWORD *)(v38 + 16);
    if (v15)
    {
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      {
        if (!((v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
          goto LABEL_45;
        v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      if (*(_BYTE *)(v38 + 64) && (v72 = *(_QWORD *)(v38 + 32)) != 0)
        v16 = *(_QWORD *)(v72 + 32);
      else
        v16 = *(_QWORD *)(v38 + 48);
      goto LABEL_8;
    }
LABEL_45:
    JSC::throwTypeError(this, (JSC::VM **)&__dst, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    goto LABEL_54;
  }
  if (*(unsigned __int8 *)(v36 + 5) - 39 <= 0xA)
  {
    JSC::validateTypedArray((JSC *)this, (JSC::ArrayBuffer **)v36, a3, a4, a5, a6, a7, a8);
    if (!*(_DWORD *)(v13 + 80))
      goto LABEL_32;
    v67 = *(_DWORD *)(v13 + 80);
    if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(v13 + 16))
      goto LABEL_32;
LABEL_54:
    v16 = 0;
    v15 = 0;
    goto LABEL_8;
  }
  LOBYTE(v77) = 0;
  LOBYTE(v78) = 0;
  JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v36, (uint64_t)&v77);
  if (!(_BYTE)a2)
    goto LABEL_45;
LABEL_32:
  v15 = *(_QWORD *)(v36 + 16);
  if (v15 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  if ((*(_BYTE *)(v36 + 40) & 7u) > 2)
  {
    LOBYTE(v77) = 0;
    LOBYTE(v78) = 0;
    v64 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v36, (uint64_t)&v77, (uint64_t)a3, a4, a5, a6, a7, a8);
    v65 = 0;
    if ((_BYTE)a2 && v64)
    {
      if ((*(_BYTE *)(v36 + 40) & 1) != 0)
      {
        if ((*(_BYTE *)(v36 + 5) - 42) > 7u)
          LOBYTE(v71) = 0;
        else
          v71 = qword_19915B2C8[(char)(*(_BYTE *)(v36 + 5) - 42)];
        v65 = v64 << v71;
      }
      else
      {
        if ((*(_BYTE *)(v36 + 5) - 42) > 7u)
          LOBYTE(v66) = 0;
        else
          v66 = qword_19915B2C8[(char)(*(_BYTE *)(v36 + 5) - 42)];
        v65 = *(_QWORD *)(v36 + 24) << v66;
      }
    }
    v16 = v65;
  }
  else
  {
    if ((*(_BYTE *)(v36 + 5) - 42) > 7u)
      LOBYTE(v37) = 0;
    else
      v37 = qword_19915B2C8[(char)(*(_BYTE *)(v36 + 5) - 42)];
    v16 = *(_QWORD *)(v36 + 24) << v37;
  }
LABEL_8:
  if (*(_DWORD *)(v9 + 80))
  {
    v60 = *(_DWORD *)(v9 + 80);
    if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
    {
      v17 = 0;
      v77 = 0;
      v78 = 0;
      goto LABEL_17;
    }
  }
  v77 = 0;
  v78 = 0;
  if (!v16)
    goto LABEL_16;
  if (HIDWORD(v16) || (WTF::tryFastMalloc((WTF *)v16, &__dst), (v17 = __dst) == 0))
  {
    OutOfMemoryError = JSC::createOutOfMemoryError(this, a2);
    v25 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v25 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v19, v20, v21, v22, v23);
    }
    JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)this, v25, v24, v19, v20, v21, v22, v23);
LABEL_16:
    v17 = 0;
    goto LABEL_17;
  }
  LODWORD(v78) = v16;
  v77 = (WTF *)__dst;
  memcpy(__dst, (const void *)v15, v16);
  HIDWORD(v78) = v16;
LABEL_17:
  JSC::WebAssemblySourceProviderBufferGuard::~WebAssemblySourceProviderBufferGuard((JSC::WebAssemblySourceProviderBufferGuard *)&v75);
  if (*(_DWORD *)(v9 + 80))
  {
    v61 = *(_DWORD *)(v9 + 80);
    if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v27, v28, v29, v30, v31, v32);
    if (*(_QWORD *)(v9 + 16))
    {
      v33 = 0;
      if (!v17)
        return v33;
      goto LABEL_24;
    }
  }
  JSC::Wasm::Module::validateSync(v9, (uint64_t *)&v77, (uint64_t)&__dst);
  if (v74)
    v33 = 6;
  else
    v33 = 7;
  if (v74 != -1)
    ((void (*)(WTF::StringImpl **, void **))off_1E35B72F8[v74])(&v76, &__dst);
  v17 = v77;
  if (v77)
  {
LABEL_24:
    v77 = 0;
    LODWORD(v78) = 0;
    WTF::fastFree((unint64_t)v17, v26, v27, v28, v29, v30, v31, v32);
  }
  return v33;
}

uint64_t WTF::SharedTaskFunctor<void ()(std::experimental::fundamentals_v3::expected<WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,WTF::String> &&),JSC::compileAndInstantiate(JSC::VM &,JSC::JSGlobalObject *,JSC::JSPromise *,JSC::Identifier const&,JSC::JSValue,JSC::JSObject *,JSC::Resolve,JSC::Wasm::CreationMode)::$_0>::run(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  _BYTE v12[8];
  int v13;
  __int128 v14;
  uint64_t v15;
  char v16;

  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_BYTE **)(v3 + 41888);
  v5 = *(_QWORD *)(a1 + 16);
  v10 = *(_OWORD *)(a1 + 24);
  v11 = *(_OWORD *)(a1 + 40);
  v12[0] = 0;
  v13 = -1;
  v6 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E35B7330[v6])(&v15, v12, a2);
    v13 = v6;
    v3 = *(_QWORD *)(a1 + 64);
  }
  *(_QWORD *)&v14 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)&v14 + 1) = v3;
  v7 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v7 = &off_1E35B7350;
  *(_OWORD *)(v7 + 8) = v10;
  *(_OWORD *)(v7 + 24) = v11;
  *(_BYTE *)(v7 + 40) = 0;
  *(_DWORD *)(v7 + 48) = -1;
  v8 = v13;
  if (v13 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E35B7330[v13])(&v15, v7 + 40, v12);
    *(_DWORD *)(v7 + 48) = v8;
  }
  *(_OWORD *)(v7 + 56) = v14;
  v15 = v7;
  JSC::DeferredWorkTimer::scheduleWorkSoon(v4, v5, &v15);
  result = v15;
  if (v15)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v13 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E35B72F8[v13])(&v16, v12);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<JSC::compileAndInstantiate(JSC::VM &,JSC::JSGlobalObject *,JSC::JSPromise *,JSC::Identifier const&,JSC::JSValue,JSC::JSObject *,JSC::Resolve,JSC::Wasm::CreationMode)::$_0::operator()(std::experimental::fundamentals_v3::expected<WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,WTF::String> &&)::{lambda(JSC::DeferredWorkTimer::TicketData *)#1},void,JSC::DeferredWorkTimer::TicketData>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_1E35B7350;
  v2 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E35B72F8[v2])(&v4, a1 + 40);
  *(_DWORD *)(a1 + 48) = -1;
  return a1;
}

void WTF::Detail::CallableWrapper<JSC::compileAndInstantiate(JSC::VM &,JSC::JSGlobalObject *,JSC::JSPromise *,JSC::Identifier const&,JSC::JSValue,JSC::JSObject *,JSC::Resolve,JSC::Wasm::CreationMode)::$_0::operator()(std::experimental::fundamentals_v3::expected<WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,WTF::String> &&)::{lambda(JSC::DeferredWorkTimer::TicketData *)#1},void,JSC::DeferredWorkTimer::TicketData>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char v10;

  *(_QWORD *)this = &off_1E35B7350;
  v9 = *((unsigned int *)this + 12);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, char *))off_1E35B72F8[v9])(&v10, (char *)this + 40);
  *((_DWORD *)this + 12) = -1;
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<JSC::compileAndInstantiate(JSC::VM &,JSC::JSGlobalObject *,JSC::JSPromise *,JSC::Identifier const&,JSC::JSValue,JSC::JSObject *,JSC::Resolve,JSC::Wasm::CreationMode)::$_0::operator()(std::experimental::fundamentals_v3::expected<WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,WTF::String> &&)::{lambda(JSC::DeferredWorkTimer::TicketData *)#1},void,JSC::DeferredWorkTimer::TicketData>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  WTF::AtomStringImpl *v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::JSGlobalObject *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::AtomStringImpl *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  _QWORD *v41;
  uint64_t v42;
  WTF::StringImpl **v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  JSC::Exception *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  uint64_t (*v73)(WTF::StringImpl **);
  WTF::StringImpl **v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(WTF::StringImpl **);
  WTF::StringImpl **v96;
  int v97;
  WTF::StringImpl *v98;
  int v99;
  int v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  _DWORD *v112;
  WTF::StringImpl *v113;
  _QWORD *v114;
  uint64_t v115;
  WTF::StringImpl **v116;
  WTF::StringImpl **v117;
  WTF::StringImpl *v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  WTF::StringImpl *v146;
  unsigned __int8 *v147;
  WTF::StringImpl *v148;
  unint64_t v149;
  unint64_t v150;

  v12 = *(unsigned int **)(a1 + 64);
  v13 = a1 + 40;
  v14 = *(_DWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 32);
  if (!v14)
  {
    v16 = *(_QWORD *)(v15 + 1392);
    if ((v16 & 1) == 0)
      goto LABEL_3;
    v73 = *(uint64_t (**)(WTF::StringImpl **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v74 = (WTF::StringImpl **)(v15 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v15 & 8) != 0)
      v74 = (WTF::StringImpl **)(v15 - 16);
    v148 = *v74;
    v149 = v15;
    v150 = v15 + 1392;
    v75 = v73(&v148);
    if (!*(_DWORD *)(a1 + 48))
    {
      v16 = v75;
LABEL_3:
      v15 = JSC::JSWebAssemblyModule::create((JSC *)v12, v16, (uint64_t *)v13, a4, a5, a6, a7, a8);
      v13 = *(_QWORD *)(a1 + 24);
      v24 = *(JSC::JSGlobalObject **)(a1 + 32);
      v9 = *((_QWORD *)v24 + 7);
      v10 = (_QWORD *)(v9 + 41952);
      if ((v13 & 0xFFFE000000000002) == 0)
      {
        if (*(_BYTE *)(v13 + 5) == 2)
        {
          v25 = *(WTF::StringImpl **)(v13 + 8);
          if ((v25 & 1) == 0)
          {
            if ((*((_BYTE *)v25 + 16) & 0x10) != 0)
            {
LABEL_7:
              *(_DWORD *)v25 += 2;
LABEL_8:
              v146 = v25;
              goto LABEL_9;
            }
            v37 = *(WTF::StringImpl **)(v9 + 64768);
            if (v37 == v25)
              goto LABEL_22;
            *(_DWORD *)v25 += 2;
            *(_QWORD *)(v9 + 64768) = v25;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
              {
                WTF::StringImpl::~StringImpl(v37, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
                WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
              }
              else
              {
                *(_DWORD *)v37 -= 2;
              }
            }
            v38 = *(WTF::StringImpl **)(v13 + 8);
            if (v38)
            {
              if ((*((_BYTE *)v38 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v38 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v38, v18, v19, v20, v21, v22, v23, (WTF *)&v148);
                v38 = v148;
              }
            }
            v8 = *(WTF::StringImpl **)(v9 + 64776);
            *(_QWORD *)(v9 + 64776) = v38;
            if (!v8)
            {
LABEL_22:
              if ((*(_BYTE *)(*(_QWORD *)(v13 + 8) + 16) & 0x10) == 0)
              {
                v39 = (_DWORD *)v10[2853];
                *v39 += 2;
                __dmb(0xAu);
                v40 = *(WTF::StringImpl **)(v13 + 8);
                *(_QWORD *)(v13 + 8) = v39;
                v148 = v40;
                v41 = (_QWORD *)(v9 + 808);
                v42 = *(unsigned int *)(v9 + 820);
                if ((_DWORD)v42 == *(_DWORD *)(v9 + 816))
                {
                  v44 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v42 + 1, (unint64_t)&v148);
                  v42 = *(unsigned int *)(v9 + 820);
                  v43 = (WTF::StringImpl **)(*(_QWORD *)(v9 + 808) + 8 * v42);
                  v40 = *v44;
                }
                else
                {
                  v43 = (WTF::StringImpl **)(*v41 + 8 * v42);
                  v44 = &v148;
                }
                *v44 = 0;
                *v43 = v40;
                *(_DWORD *)(v9 + 820) = v42 + 1;
                v45 = v148;
                v148 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v45, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
                    WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
                  }
                  else
                  {
                    *(_DWORD *)v45 -= 2;
                  }
                }
              }
              v25 = (WTF::StringImpl *)v10[2853];
              goto LABEL_7;
            }
LABEL_48:
            if (*(_DWORD *)v8 == 2)
            {
              WTF::StringImpl::~StringImpl(v8, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
              WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
            }
            else
            {
              *(_DWORD *)v8 -= 2;
            }
            goto LABEL_22;
          }
          goto LABEL_84;
        }
        v13 = JSC::JSCell::toPrimitive(*(_QWORD *)(a1 + 24), *(JSC::VM ***)(a1 + 32), (JSC::Structure *)2, v19, v20, v21, v22, v23);
      }
      v147 = (unsigned __int8 *)v13;
      if (*(_DWORD *)(v9 + 80))
      {
        v127 = *(_DWORD *)(v9 + 80);
        if ((v127 & 0x27) != 0 && (v127 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v18, v19, v20, v21, v22, v23);
        if (*(_QWORD *)(v9 + 16))
        {
          v25 = *(WTF::StringImpl **)(*v10 + 8);
          if (!v25)
            goto LABEL_8;
          goto LABEL_7;
        }
        v13 = (uint64_t)v147;
      }
      if ((v13 & 0xFFFE000000000002) == 0)
      {
        v97 = *(unsigned __int8 *)(v13 + 5);
        if (v97 == 2)
          goto LABEL_68;
        if (v97 == 4)
        {
          v98 = *(WTF::StringImpl **)(v13 + 8);
          v99 = *(_DWORD *)v98;
          *(_DWORD *)v98 += 4;
          v146 = v98;
          v100 = v99 + 2;
          if (v100)
          {
LABEL_88:
            *(_DWORD *)v98 = v100;
            goto LABEL_9;
          }
LABEL_66:
          WTF::StringImpl::~StringImpl(v98, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
          WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
          goto LABEL_9;
        }
      }
      v13 = (uint64_t)JSC::JSValue::toStringSlowCase(&v147, (uint64_t)v24, (JSC::Structure *)1, v19, v20, v21, v22, v23);
LABEL_68:
      if (*(_DWORD *)(v9 + 80))
      {
        v128 = *(_DWORD *)(v9 + 80);
        if ((v128 & 0x27) != 0 && (v128 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v18, v19, v20, v21, v22, v23);
        if (*(_QWORD *)(v9 + 16))
          goto LABEL_96;
      }
      v25 = *(WTF::StringImpl **)(v13 + 8);
      v9 = *((_QWORD *)v24 + 7);
      if ((v25 & 1) == 0)
      {
        if ((*((_BYTE *)v25 + 16) & 0x10) == 0)
        {
          v109 = *(WTF::StringImpl **)(v9 + 64768);
          if (v109 != v25)
          {
            *(_DWORD *)v25 += 2;
            *(_QWORD *)(v9 + 64768) = v25;
            if (v109)
            {
              if (*(_DWORD *)v109 == 2)
              {
                WTF::StringImpl::~StringImpl(v109, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
                WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
              }
              else
              {
                *(_DWORD *)v109 -= 2;
              }
            }
            v110 = *(WTF::StringImpl **)(v13 + 8);
            if (v110)
            {
              if ((*((_BYTE *)v110 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v110 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v110, v18, v19, v20, v21, v22, v23, (WTF *)&v148);
                v110 = v148;
              }
            }
            v111 = *(WTF::StringImpl **)(v9 + 64776);
            *(_QWORD *)(v9 + 64776) = v110;
            if (v111)
            {
              if (*(_DWORD *)v111 == 2)
              {
                WTF::StringImpl::~StringImpl(v111, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
                WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
              }
              else
              {
                *(_DWORD *)v111 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v13 + 8) + 16) & 0x10) == 0)
          {
            v112 = *(_DWORD **)(v9 + 64776);
            *v112 += 2;
            __dmb(0xAu);
            v113 = *(WTF::StringImpl **)(v13 + 8);
            *(_QWORD *)(v13 + 8) = v112;
            v148 = v113;
            v114 = (_QWORD *)(v9 + 808);
            v115 = *(unsigned int *)(v9 + 820);
            if ((_DWORD)v115 == *(_DWORD *)(v9 + 816))
            {
              v117 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v114, v115 + 1, (unint64_t)&v148);
              v115 = *(unsigned int *)(v9 + 820);
              v116 = (WTF::StringImpl **)(*(_QWORD *)(v9 + 808) + 8 * v115);
              v113 = *v117;
            }
            else
            {
              v116 = (WTF::StringImpl **)(*v114 + 8 * v115);
              v117 = &v148;
            }
            *v117 = 0;
            *v116 = v113;
            *(_DWORD *)(v9 + 820) = v115 + 1;
            v118 = v148;
            v148 = 0;
            if (v118)
            {
              if (*(_DWORD *)v118 == 2)
              {
                WTF::StringImpl::~StringImpl(v118, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
                WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
              }
              else
              {
                *(_DWORD *)v118 -= 2;
              }
            }
          }
          v25 = *(WTF::StringImpl **)(v9 + 64776);
        }
        goto LABEL_7;
      }
LABEL_84:
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v13, v24);
      if (*(_DWORD *)(v9 + 80))
      {
        v129 = *(_DWORD *)(v9 + 80);
        if ((v129 & 0x27) != 0 && (v129 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v18, v19, v20, v21, v22, v23);
        if (*(_QWORD *)(v9 + 16))
        {
          v98 = v148;
          v146 = 0;
          v148 = 0;
          if (!v98)
          {
LABEL_9:
            v26 = *((_QWORD *)v12 + 2);
            v27 = *(WTF::AtomStringImpl **)(a1 + 32);
            if (!v26)
            {
              JSC::instantiate(*(_QWORD *)(a1 + 64), (uint64_t)v27, *(_QWORD *)(a1 + 8), (const WTF::String *)v15, *(unsigned int **)(a1 + 16), (JSC::Structure *)&v146, *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60));
              v26 = *((_QWORD *)v12 + 2);
              if (!v26)
              {
LABEL_11:
                v28 = v146;
                v146 = 0;
                if (v28)
                {
                  if (*(_DWORD *)v28 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v28, v27, (uint64_t)v18, v19, v20, v21, v22, v23);
                    WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
                  }
                  else
                  {
                    *(_DWORD *)v28 -= 2;
                  }
                }
                return;
              }
              v27 = *(WTF::AtomStringImpl **)(a1 + 32);
            }
            if (*(_QWORD *)(*((_QWORD *)v27 + 7) + 24) != v26)
            {
              v76 = *(_QWORD *)(a1 + 8);
              *((_QWORD *)v12 + 2) = 0;
              v77 = v12 + 20;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 & 0xFFFFFFEF, v77));
              JSC::JSPromise::reject(v76, (uint64_t *)v27, *(_QWORD *)(v26 + 8), v19, v20, v21, v22, v23);
            }
            goto LABEL_11;
          }
LABEL_87:
          v100 = *(_DWORD *)v98 - 2;
          if (*(_DWORD *)v98 != 2)
            goto LABEL_88;
          goto LABEL_66;
        }
      }
      v98 = v148;
      if (v148)
      {
        *(_DWORD *)v148 += 2;
        v146 = v98;
        v148 = 0;
        goto LABEL_87;
      }
LABEL_96:
      v146 = 0;
      goto LABEL_9;
    }
LABEL_47:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_48;
  }
  if (v14 != 1)
    goto LABEL_47;
  v54 = *(_QWORD *)(v15 + 1296);
  if ((v54 & 1) != 0)
  {
    v95 = *(uint64_t (**)(WTF::StringImpl **))(v54 & 0xFFFFFFFFFFFFFFFCLL);
    v96 = (WTF::StringImpl **)(v15 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v15 & 8) != 0)
      v96 = (WTF::StringImpl **)(v15 - 16);
    v148 = *v96;
    v149 = v15;
    v150 = v15 + 1296;
    v54 = v95(&v148);
  }
  v55 = JSC::ErrorInstance::create((JSC::Heap **)v12, v54, (WTF::StringImpl **)v13, 0, (uint64_t)JSC::defaultSourceAppender, 0, 0, 1);
  v62 = (JSC::Exception *)v55;
  if ((v55 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v55 & 0xFFFFFFFE) + 0x4C)))
  {
    v62 = (JSC::Exception *)JSC::Exception::create((uint64_t)v12, (JSC::VM *)v55, 0, v56, v57, v58, v59, v60);
  }
  JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)v15, v62, v61, v56, v57, v58, v59, v60);
  v68 = *(uint64_t **)(a1 + 32);
  v69 = *((_QWORD *)v12 + 2);
  if (*(_QWORD *)(v68[7] + 24) != v69)
  {
    v70 = *(_QWORD *)(a1 + 8);
    *((_QWORD *)v12 + 2) = 0;
    v71 = v12 + 20;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 & 0xFFFFFFEF, v71));
    JSC::JSPromise::reject(v70, v68, *(_QWORD *)(v69 + 8), v63, v64, v65, v66, v67);
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&),JSC::instantiate(JSC::VM &,JSC::JSGlobalObject *,JSC::JSPromise *,JSC::JSWebAssemblyModule *,JSC::JSObject *,JSC::Identifier const&,JSC::Resolve,JSC::Wasm::CreationMode)::$_0>::run(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10;
  uint64_t v11;

  v2 = *a2;
  *a2 = 0;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_BYTE **)(v3 + 41888);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v10 = *(_OWORD *)(a1 + 24);
  v8 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v8 = &off_1E35B73A0;
  *(_OWORD *)(v8 + 8) = v10;
  *(_QWORD *)(v8 + 24) = v6;
  *(_QWORD *)(v8 + 32) = v7;
  *(_QWORD *)(v8 + 40) = v3;
  *(_QWORD *)(v8 + 48) = v2;
  v11 = v8;
  JSC::DeferredWorkTimer::scheduleWorkSoon(v4, v5, &v11);
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<JSC::instantiate(JSC::VM &,JSC::JSGlobalObject *,JSC::JSPromise *,JSC::JSWebAssemblyModule *,JSC::JSObject *,JSC::Identifier const&,JSC::Resolve,JSC::Wasm::CreationMode)::$_0::operator()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)::{lambda(JSC::DeferredWorkTimer::TicketData *)#1},void,JSC::DeferredWorkTimer::TicketData>::~CallableWrapper(_QWORD *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  JSC::Wasm::CalleeGroup *v13;

  *a1 = &off_1E35B73A0;
  v9 = (unsigned int *)a1[6];
  a1[6] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v13 = (JSC::Wasm::CalleeGroup *)v9;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::Detail::CallableWrapper<JSC::instantiate(JSC::VM &,JSC::JSGlobalObject *,JSC::JSPromise *,JSC::JSWebAssemblyModule *,JSC::JSObject *,JSC::Identifier const&,JSC::Resolve,JSC::Wasm::CreationMode)::$_0::operator()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)::{lambda(JSC::DeferredWorkTimer::TicketData *)#1},void,JSC::DeferredWorkTimer::TicketData>::~CallableWrapper(WTF *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  JSC::Wasm::CalleeGroup *v12;

  *(_QWORD *)this = &off_1E35B73A0;
  v9 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v12 = (JSC::Wasm::CalleeGroup *)v9;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<JSC::instantiate(JSC::VM &,JSC::JSGlobalObject *,JSC::JSPromise *,JSC::JSWebAssemblyModule *,JSC::JSObject *,JSC::Identifier const&,JSC::Resolve,JSC::Wasm::CreationMode)::$_0::operator()(WTF::Ref<JSC::Wasm::CalleeGroup,WTF::RawPtrTraits<JSC::Wasm::CalleeGroup>,WTF::DefaultRefDerefTraits<JSC::Wasm::CalleeGroup>> &&)::{lambda(JSC::DeferredWorkTimer::TicketData *)#1},void,JSC::DeferredWorkTimer::TicketData>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  JSC *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  JSC *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t SlowCase;
  JSC *v71;
  uint64_t Slow;
  unsigned int *v73;
  JSC::Wasm::CalleeGroup *v74;
  unint64_t v75;
  int v76;
  int v77;
  uint64_t v78;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v73 = *(unsigned int **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  JSC::JSWebAssemblyInstance::finalizeCreation(v2, v4, (JSC::JSGlobalObject *)v3, (uint64_t *)&v73, *(_DWORD *)(a1 + 36));
  v12 = v73;
  v73 = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v74 = (JSC::Wasm::CalleeGroup *)v12;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v74, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  v15 = *(_QWORD *)(v4 + 16);
  if (!v15)
  {
    v16 = *(_DWORD *)(a1 + 32);
    if (v16 != 2)
    {
      if (v16 != 1)
      {
        if (v16)
          return;
        v17 = *(_QWORD *)(a1 + 8);
        v18 = *(_QWORD *)(a1 + 16);
        v19 = (uint64_t *)v3;
        goto LABEL_24;
      }
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
      if (BYTE6(qword_1ECF4C6B8))
        JSC::AbstractModuleRecord::dump(*(JSC::AbstractModuleRecord **)(*(_QWORD *)(a1 + 16) + 48), v5, v6, v7, v8, v9, v10, v11);
LABEL_23:
      v17 = *(_QWORD *)(a1 + 8);
      v19 = (uint64_t *)v3;
      v18 = v20;
LABEL_24:
      JSC::JSPromise::resolve(v17, v19, v18, v7, v8, v9, v10, v11);
      return;
    }
    v21 = *(JSC **)(v3 + 56);
    v22 = *((_QWORD *)v21 + 1882);
    if (!v22)
    {
      v71 = *(JSC **)(v3 + 56);
      Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v21 + 14936, v71, 0x40uLL, 0, v8, v9, v10, v11);
      v21 = v71;
      v20 = Slow;
      if (!Slow)
      {
        __break(0xC471u);
        return;
      }
      goto LABEL_15;
    }
    v23 = *(unsigned int *)(v22 + 60);
    v20 = *(_QWORD *)(v22 + 24);
    if (v20 >= *(_QWORD *)(v22 + 32))
    {
      v20 = *(_QWORD *)(v22 + 40);
      if ((v20 & 1) != 0)
      {
        v65 = (uint64_t)v21 + 192;
        v66 = *(JSC **)(v3 + 56);
        JSC::sanitizeStackForVM(v66, v5, v6, v7, v8, v9, v10, v11);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v22, v65, v23, 0, 0, v67, v68, v69);
        v21 = v66;
        v20 = SlowCase;
        goto LABEL_15;
      }
      v64 = *(_QWORD *)(v20 + 8) ^ *(_QWORD *)(v22 + 48);
      *(_QWORD *)(v22 + 32) = v20 + HIDWORD(v64);
      *(_QWORD *)(v22 + 40) = v20 + (int)v64;
    }
    *(_QWORD *)(v22 + 24) = v20 + v23;
LABEL_15:
    *(_DWORD *)v20 = 0;
    *(_DWORD *)v20 = *(_DWORD *)(v3 + 848);
    *(_DWORD *)(v20 + 4) = 16783360;
    *(_OWORD *)(v20 + 8) = 0u;
    *(_OWORD *)(v20 + 24) = 0u;
    *(_OWORD *)(v20 + 40) = 0u;
    *(_QWORD *)(v20 + 56) = 0;
    if (*((_BYTE *)v21 + 755))
      __dmb(0xAu);
    v24 = *(_QWORD *)(a1 + 40);
    WTF::AtomStringImpl::addLiteral((uint64_t)"module", 6uLL, v7, v8, v9, v10, v11, &v74);
    v25 = v74;
    v26 = *(_QWORD *)(a1 + 24);
    v74 = 0;
    v75 = v20;
    v76 = -1;
    v27.n128_u64[0] = 0x100000001000000;
    v77 = 0x1000000;
    v78 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v20, v24, (unint64_t)v25, v26, 0, (uint64_t)&v74, v28, v29, v27);
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::~StringImpl(v25, v30, v31, v32, v33, v34, v35, v36);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
      }
      else
      {
        *(_DWORD *)v25 -= 2;
      }
    }
    v37 = *(_QWORD *)(a1 + 40);
    WTF::AtomStringImpl::addLiteral((uint64_t)"instance", 8uLL, v32, v33, v34, v35, v36, &v74);
    v38 = v74;
    v39 = *(_QWORD *)(a1 + 16);
    v74 = 0;
    v75 = v20;
    v76 = -1;
    v40.n128_u64[0] = 0x100000001000000;
    v77 = 0x1000000;
    v78 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v20, v37, (unint64_t)v38, v39, 0, (uint64_t)&v74, v41, v42, v40);
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::~StringImpl(v38, v43, v44, v7, v8, v9, v10, v11);
        WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
      }
      else
      {
        *(_DWORD *)v38 -= 2;
      }
    }
    goto LABEL_23;
  }
  if (*(_QWORD *)(*(_QWORD *)(v3 + 56) + 24) != v15)
  {
    v61 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(v4 + 16) = 0;
    v62 = (unsigned int *)(v4 + 80);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 & 0xFFFFFFEF, v62));
    JSC::JSPromise::reject(v61, (uint64_t *)v3, *(_QWORD *)(v15 + 8), v7, v8, v9, v10, v11);
  }
}

uint64_t WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::add(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4, const JSC::Wasm::Type *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  uint64_t result;
  unint64_t v14;
  unsigned int **v15;
  int i;
  unsigned int v17;
  unsigned int **v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;

  v11 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::expand(a2, 0, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  result = *a3;
  if (*a3)
  {
    result = JSC::Wasm::TypeDefinition::hash((JSC::Wasm::TypeDefinition *)result, (uint64_t)a2, a3, a4, a5);
    v14 = *a3;
  }
  else
  {
    v14 = 0;
  }
  v15 = 0;
  for (i = 1; ; ++i)
  {
    v17 = result & v12;
    v18 = (unsigned int **)(v11 + 8 * (result & v12));
    v19 = *v18;
    if (!*v18)
    {
      if (v15)
      {
        *v15 = 0;
        --*(_DWORD *)(*a2 - 16);
        v18 = v15;
      }
      result = (uint64_t)JSC::Wasm::TypeHash::operator=(v18, (unsigned int **)a3, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
      v26 = *a2;
      if (*a2)
        v27 = *(_DWORD *)(v26 - 12) + 1;
      else
        v27 = 1;
      *(_DWORD *)(v26 - 12) = v27;
      v28 = *a2;
      if (*a2)
        v29 = *(_DWORD *)(v28 - 12);
      else
        v29 = 0;
      v30 = (*(_DWORD *)(v28 - 16) + v29);
      v31 = *(unsigned int *)(v28 - 4);
      if (v31 > 0x400)
      {
        if (v31 > 2 * v30)
          goto LABEL_18;
      }
      else if (3 * v31 > 4 * v30)
      {
LABEL_18:
        v32 = v28 + 8 * v31;
        v33 = 1;
        goto LABEL_19;
      }
      result = (uint64_t)WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::expand(a2, (uint64_t)v18, v20, v21, v22, v23, v24, v25);
      v18 = (unsigned int **)result;
      v28 = *a2;
      if (*a2)
        v31 = *(unsigned int *)(v28 - 4);
      else
        v31 = 0;
      goto LABEL_18;
    }
    if (v19 != (unsigned int *)-1)
      break;
    v15 = (unsigned int **)(v11 + 8 * v17);
LABEL_9:
    result = i + v17;
  }
  if (v19 != (unsigned int *)v14)
    goto LABEL_9;
  v34 = *a2;
  if (*a2)
    v35 = *(unsigned int *)(v34 - 4);
  else
    v35 = 0;
  v33 = 0;
  v32 = v34 + 8 * v35;
LABEL_19:
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v33;
  return result;
}

JSC::Wasm::TypeDefinition **WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

JSC::Wasm::TypeDefinition **WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  void *v15;
  const unint64_t *v16;
  uint64_t v17;
  const JSC::Wasm::Type *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::Wasm::TypeDefinition **v23;
  uint64_t v24;
  unsigned int **v25;
  JSC::Wasm::TypeDefinition **v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  JSC::Wasm::TypeDefinition **result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    v24 = v12;
    do
    {
      v25 = (unsigned int **)(v11 + 8 * v22);
      if (*v25)
      {
        if (*v25 != (unsigned int *)-1)
        {
          v26 = WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::reinsert(*a1, (JSC::Wasm::TypeDefinition **)(v11 + 8 * v22), v16, v17, v18);
          v27 = *v25;
          *v25 = 0;
          if (v27)
          {
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              atomic_store(1u, v27);
              WTF::fastFree((unint64_t)v27, v15, (uint64_t)v16, v17, (uint64_t)v18, v19, v20, v21);
            }
          }
          if (v25 == (unsigned int **)a3)
            v23 = v26;
        }
      }
      else
      {
        *v25 = 0;
      }
      ++v22;
    }
    while (v22 != v24);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, (uint64_t)v16, v17, (uint64_t)v18, v19, v20, v21);
  return v23;
}

JSC::Wasm::TypeDefinition **WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::reinsert(uint64_t a1, JSC::Wasm::TypeDefinition **a2, const unint64_t *a3, uint64_t a4, const JSC::Wasm::Type *a5)
{
  int v7;
  JSC::Wasm::TypeDefinition *v8;
  int v9;
  uint64_t v10;
  JSC::Wasm::TypeDefinition **result;
  JSC::Wasm::TypeDefinition *v12;

  if (a1)
    v7 = *(_DWORD *)(a1 - 8);
  else
    v7 = 0;
  v8 = *a2;
  if (*a2)
    LODWORD(v8) = JSC::Wasm::TypeDefinition::hash(v8, (uint64_t)a2, a3, a4, a5);
  v9 = 0;
  do
  {
    v10 = v8 & v7;
    LODWORD(v8) = ++v9 + v10;
  }
  while (*(_QWORD *)(a1 + 8 * v10));
  result = (JSC::Wasm::TypeDefinition **)(a1 + 8 * v10);
  *result = 0;
  v12 = *a2;
  *a2 = 0;
  *result = v12;
  return result;
}

unsigned int **JSC::Wasm::TypeHash::operator=(unsigned int **a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const JSC::Wasm::Type *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  int v13;
  uint64_t *v14;
  JSC::Wasm *v15;
  unsigned __int8 *v16;
  const JSC::Wasm::Type *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int **v21;
  _QWORD *v22;
  unsigned int v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD *v27;
  const JSC::Wasm::Type *v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  int v48;
  BOOL v49;
  unsigned __int8 *v50;
  unint64_t v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  int v55;

  v12 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::expand(a1, 0, a3, a4, (uint64_t)a5, a6, a7, a8), (v12 = *a1) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = a2[1];
  v15 = (JSC::Wasm *)*((unsigned int *)*a2 + 3);
  v16 = (unsigned __int8 *)**a2;
  v17 = (const JSC::Wasm::Type *)*((unsigned int *)v14 + 3);
  v18 = *v14;
  v19 = JSC::Wasm::computeSignatureHash(v15, (uint64_t)v16, v17, *v14, a5);
  v20 = 0;
  v21 = 0;
  v22 = (_QWORD *)(v18 + 8);
  while (1)
  {
    v23 = v19 & v13;
    v24 = (unsigned int **)(v12 + 8 * (v19 & v13));
    v25 = *v24;
    if (!*v24)
    {
      if (v21)
        v24 = v21;
      if (*v24 == (unsigned int *)-1)
      {
        *v24 = 0;
        --*(_DWORD *)(*a1 - 16);
      }
      JSC::Wasm::FunctionParameterTypes::translate(v24, a2);
      v41 = *a1;
      if (*a1)
        v42 = *(_DWORD *)(v41 - 12) + 1;
      else
        v42 = 1;
      *(_DWORD *)(v41 - 12) = v42;
      v43 = *a1;
      if (*a1)
        v44 = *(_DWORD *)(v43 - 12);
      else
        v44 = 0;
      v45 = (*(_DWORD *)(v43 - 16) + v44);
      v46 = *(unsigned int *)(v43 - 4);
      if (v46 > 0x400)
      {
        if (v46 > 2 * v45)
          goto LABEL_32;
      }
      else if (3 * v46 > 4 * v45)
      {
LABEL_32:
        v34 = v43 + 8 * v46;
        v33 = 1;
        goto LABEL_33;
      }
      v24 = (unsigned int **)WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::expand(a1, (uint64_t)v24, v35, v36, v37, v38, v39, v40);
      v43 = *a1;
      if (*a1)
        v46 = *(unsigned int *)(v43 - 4);
      else
        v46 = 0;
      goto LABEL_32;
    }
    if (v25 == (unsigned int *)-1)
    {
      v21 = (unsigned int **)(v12 + 8 * v23);
      goto LABEL_8;
    }
    if (!v25[8] && (_DWORD)v17 == v25[4] && (_DWORD)v15 == v25[5])
      break;
LABEL_8:
    v19 = ++v20 + v23;
  }
  if ((_DWORD)v17)
  {
    v26 = v15;
    v27 = v22;
    v28 = v17;
    do
    {
      v29 = (unsigned __int8 *)(*((_QWORD *)v25 + 1) + 16 * v26);
      v30 = *((unsigned __int8 *)v27 - 8);
      if (v30 != *v29)
        goto LABEL_8;
      v31 = *((_QWORD *)v29 + 1);
      if ((v30 - 239) < 2 || v30 == 227)
      {
        if ((((v30 + 29) < 0xEu) & (0x3001u >> (v30 + 29))) == 0)
          goto LABEL_8;
      }
      else if ((((v30 + 29) < 0xEu) & (0x3001u >> (v30 + 29))) != 0)
      {
        goto LABEL_8;
      }
      if (*v27 != v31)
        goto LABEL_8;
      v27 += 2;
      ++v26;
      v28 = (const JSC::Wasm::Type *)((char *)v28 - 1);
    }
    while (v28);
  }
  if ((_DWORD)v15)
  {
    v47 = (unsigned __int8 *)*((_QWORD *)v25 + 1);
    v48 = *v16;
    if (v48 != *v47)
      goto LABEL_8;
    v49 = 0;
    v50 = v47 + 16;
    v51 = 1;
    v52 = v16 + 16;
    do
    {
      if (v48 - 239 < 2 || v48 == 227)
      {
        if ((((v48 + 29) < 0xEu) & (0x3001u >> (v48 + 29))) == 0)
          break;
      }
      else if ((((v48 + 29) < 0xEu) & (0x3001u >> (v48 + 29))) != 0)
      {
        break;
      }
      if (*((_QWORD *)v52 - 1) != *((_QWORD *)v50 - 1))
        break;
      v49 = v51 >= (unint64_t)v15;
      if (v15 == (JSC::Wasm *)v51)
        break;
      v54 = *v50;
      v50 += 16;
      v53 = v54;
      v55 = *v52;
      v52 += 16;
      LOBYTE(v48) = v55;
      ++v51;
    }
    while (v55 == v53);
    if (!v49)
      goto LABEL_8;
  }
  if (v12)
    v32 = *(unsigned int *)(v12 - 4);
  else
    v32 = 0;
  v33 = 0;
  v34 = v12 + 8 * v32;
LABEL_33:
  *(_QWORD *)a9 = v24;
  *(_QWORD *)(a9 + 8) = v34;
  *(_BYTE *)(a9 + 16) = v33;
}

void JSC::Wasm::FunctionParameterTypes::translate(unsigned int **a1, uint64_t **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  char v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  unint64_t v20;
  char *v21;
  BOOL v22;
  unsigned __int8 v23;
  char *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  WTF *v40;

  JSC::Wasm::TypeDefinition::tryCreateFunctionSignature(&v40, *((_DWORD *)*a2 + 3), *((_DWORD *)a2[1] + 3));
  v11 = v40;
  if (!v40)
    goto LABEL_39;
  if (*((_DWORD *)*a2 + 3))
  {
    v31 = 0;
    v32 = 0;
    v13 = 0;
    v12 = 0;
    v33 = **a2;
    while (1)
    {
      *(_OWORD *)(*((_QWORD *)v11 + 1) + v31) = *(_OWORD *)(v33 + v31);
      v34 = *a2;
      v35 = *((unsigned int *)*a2 + 3);
      if (v32 >= v35)
        break;
      v33 = *v34;
      v36 = (uint64_t *)(*v34 + v31);
      v37 = *v36;
      v13 |= JSC::Wasm::isRefWithRecursiveReference(*v36, v36[1]);
      v12 |= v37 == 251;
      ++v32;
      v31 += 16;
      if (v32 >= v35)
        goto LABEL_4;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198E41B44);
  }
  v12 = 0;
  LOBYTE(v13) = 0;
LABEL_4:
  v14 = a2[1];
  if (*((_DWORD *)v14 + 3))
  {
    v15 = 0;
    v16 = 0;
    v17 = *v14;
    do
    {
      if (*((_DWORD *)v11 + 8))
        v18 = 0;
      else
        v18 = (char *)v11 + 8;
      *(_OWORD *)(*(_QWORD *)v18 + 16 * (v16 + *((_DWORD *)v18 + 3))) = *(_OWORD *)(v17 + v15);
      v19 = a2[1];
      v20 = *((unsigned int *)v19 + 3);
      if (v16 >= v20)
      {
        __break(0xC471u);
        JUMPOUT(0x198E41BB0);
      }
      v17 = *v19;
      v21 = (char *)(v17 + v15);
      if (BYTE2(dword_1ECF4C7B0))
      {
        v23 = *v21;
        if (BYTE1(dword_1ECF4C7B0))
          v38 = (*v21 + 29) > 1u;
        else
          v38 = 1;
        v22 = !v38
           && (v39 = *((_QWORD *)v21 + 1), v39 <= 0xFFFFFFFFFFFFFFC0)
           && *(_DWORD *)(v39 + 32) == 4
           && **(_QWORD **)(v39 + 8) == 0;
      }
      else
      {
        v22 = 0;
        v23 = *v21;
      }
      LOBYTE(v13) = v13 | v22;
      v12 |= v23 == 251;
      ++v16;
      v15 += 16;
    }
    while (v16 < v20);
  }
  v24 = (char *)v11 + 8;
  if (*((_DWORD *)v11 + 8))
    v24 = 0;
  v24[16] = v13 & 1;
  v24[17] = v12 & 1;
  v40 = 0;
  v25 = *a1;
  *a1 = (unsigned int *)v11;
  if (v25)
  {
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v25);
      WTF::fastFree((unint64_t)v25, v4, v5, v6, v7, v8, v9, v10);
    }
    v28 = (unsigned int *)v40;
    v40 = 0;
    if (v28)
    {
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::fastFree((unint64_t)v28, v4, v5, v6, v7, v8, v9, v10);
      }
    }
  }
}

void WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::StructParameterTypes>,JSC::Wasm::StructParameterTypes const&,JSC::Wasm::StructParameterTypes const&>(uint64_t *a1@<X0>, unsigned __int8 ***a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  char v13;
  int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  JSC::Wasm::TypeDefinition **v19;
  unsigned int v20;
  JSC::Wasm::TypeDefinition **v21;
  JSC::Wasm::TypeDefinition *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 v27;
  int v28;
  int v29;
  BOOL v30;
  unsigned __int8 *v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v37;
  JSC::Wasm::TypeDefinition *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;

  v12 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::expand(a1, 0, a3, a4, a5, a6, a7, a8), (v12 = *a1) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *((unsigned int *)*a2 + 3);
  v16 = **a2;
  v17 = JSC::Wasm::computeStructTypeHash(v15, v16);
  v18 = 0;
  v19 = 0;
  if (!(_DWORD)v15)
  {
    while (1)
    {
      v37 = v17 & v14;
      v21 = (JSC::Wasm::TypeDefinition **)(v12 + 8 * (v17 & v14));
      v38 = *v21;
      if (*v21 == (JSC::Wasm::TypeDefinition *)-1)
      {
        v19 = (JSC::Wasm::TypeDefinition **)(v12 + 8 * v37);
      }
      else
      {
        if (!v38)
        {
LABEL_44:
          if (v19)
            v21 = v19;
          v39 = v15;
          if (*v21 == (JSC::Wasm::TypeDefinition *)-1)
          {
            *v21 = 0;
            --*(_DWORD *)(*a1 - 16);
            v15 = *((unsigned int *)*a2 + 3);
            v16 = **a2;
            v39 = *((_DWORD *)*a2 + 3);
          }
          WTF::tryFastMalloc((WTF *)(36 * v15 + 40), &v70);
          v47 = v70;
          v70 = 0;
          if (!v47)
          {
            __break(0xC471u);
            JUMPOUT(0x198E42140);
          }
          *(_DWORD *)v47 = 1;
          if (!v39)
          {
            v49 = 0;
            v57 = 8;
            goto LABEL_87;
          }
          v48 = 0;
          v49 = 0;
          v50 = 32 * v15 + 40;
          LODWORD(v41) = 4;
          while (1)
          {
            v51 = &v16[v48];
            if (*(_DWORD *)&v16[v48 + 16])
              break;
            v40 = BYTE2(dword_1ECF4C7B0);
            if (BYTE2(dword_1ECF4C7B0))
            {
              if (BYTE1(dword_1ECF4C7B0))
                v55 = (v16[v48] + 29) > 1u;
              else
                v55 = 1;
              if (v55)
                break;
              v56 = *(_QWORD *)&v16[v48 + 8];
              if (v56 > 0xFFFFFFFFFFFFFFC0 || *(_DWORD *)(v56 + 32) != 4)
                break;
              v40 = **(_QWORD **)(v56 + 8) == 0;
            }
LABEL_54:
            v52 = v47 + v48;
            v53 = *(_OWORD *)(v51 + 9);
            *(_OWORD *)(v52 + 40) = *(_OWORD *)v51;
            *(_OWORD *)(v52 + 49) = v53;
            v43 = *(unsigned __int8 *)(v47 + v48 + 40);
            if (*(_DWORD *)(v47 + v48 + 56) == 1)
            {
              v42 = 0;
              v44 = *(unsigned __int8 *)(v47 + v48 + 40);
              v46 = (v44 - 227);
              v45 = 1;
              switch(*(_BYTE *)(v47 + v48 + 40))
              {
                case 0xE3:
                case 0xE4:
                case 0xEA:
                case 0xEB:
                case 0xEF:
                case 0xF0:
                case 0xFC:
                case 0xFE:
                  v42 = ((_DWORD)v41 + 7) & 0xFFFFFFF8;
                  break;
                case 0xF7:
                  v45 = 2;
                  goto LABEL_67;
                case 0xF8:
LABEL_67:
                  v42 = ((_DWORD)v41 + (_DWORD)v45 - 1) & -(int)v45;
                  break;
                case 0xFB:
                  goto LABEL_65;
                case 0xFD:
                case 0xFF:
                  v42 = ((_DWORD)v41 + 3) & 0xFFFFFFFC;
                  break;
                default:
                  break;
              }
              *(_DWORD *)(v47 + v50) = v42;
              if ((_DWORD)v44 == 248)
              {
                v54 = 1;
              }
              else
              {
                if ((_DWORD)v44 != 247)
                  goto LABEL_71;
                v54 = 2;
              }
            }
            else
            {
              v42 = 0;
              v44 = *(unsigned __int8 *)(v47 + v48 + 40) - 227;
              if (v44 > 0x1C)
                goto LABEL_60;
              v45 = (1 << (v43 + 29));
              if ((v45 & 0xA003183) != 0)
              {
                v42 = ((_DWORD)v41 + 7) & 0xFFFFFFF8;
LABEL_60:
                *(_DWORD *)(v47 + v50) = v42;
LABEL_71:
                v43 = v43;
                v54 = 4;
                switch((char)v43)
                {
                  case -22:
                  case -21:
                  case -17:
                  case -16:
                  case -4:
                  case -2:
                    goto LABEL_75;
                  case -20:
                  case -19:
                  case -18:
                  case -15:
                  case -14:
                  case -13:
                  case -12:
                  case -11:
                  case -10:
                  case -9:
                  case -8:
                  case -7:
                  case -6:
                    goto LABEL_78;
                  case -5:
                    goto LABEL_72;
                  case -3:
                  case -1:
                    goto LABEL_76;
                  default:
                    if (v43 - 227 >= 2)
LABEL_78:
                      v54 = 0;
                    else
LABEL_75:
                      v54 = 8;
                    break;
                }
                goto LABEL_76;
              }
              if ((v45 & 0x14000000) != 0)
              {
                v42 = ((_DWORD)v41 + 3) & 0xFFFFFFFC;
                goto LABEL_60;
              }
              if (*(unsigned __int8 *)(v47 + v48 + 40) != 251)
                goto LABEL_60;
LABEL_65:
              v42 = ((_DWORD)v41 + 15) & 0xFFFFFFF0;
              *(_DWORD *)(v47 + v50) = v42;
LABEL_72:
              v54 = 16;
            }
LABEL_76:
            v49 |= v40;
            v41 = v54 + v42;
            v50 += 4;
            v48 += 32;
            if (!--v15)
            {
              v57 = (v41 + 7) & 0x1FFFFFFF8;
LABEL_87:
              *(_QWORD *)(v47 + 8) = v47 + 40;
              *(_DWORD *)(v47 + 16) = v39;
              *(_BYTE *)(v47 + 20) = v49 & 1;
              *(_QWORD *)(v47 + 24) = v57;
              *(_DWORD *)(v47 + 32) = 1;
              v58 = (unsigned int *)*v21;
              *v21 = (JSC::Wasm::TypeDefinition *)v47;
              if (v58)
              {
                do
                {
                  v59 = __ldaxr(v58);
                  v60 = v59 - 1;
                }
                while (__stlxr(v60, v58));
                if (!v60)
                {
                  atomic_store(1u, v58);
                  WTF::fastFree((unint64_t)v58, (void *)v40, v41, v42, v43, v44, v45, v46);
                }
              }
              v61 = *a1;
              if (*a1)
                v62 = *(_DWORD *)(v61 - 12) + 1;
              else
                v62 = 1;
              *(_DWORD *)(v61 - 12) = v62;
              v63 = *a1;
              if (*a1)
                v64 = *(_DWORD *)(v63 - 12);
              else
                v64 = 0;
              v65 = (*(_DWORD *)(v63 - 16) + v64);
              v66 = *(unsigned int *)(v63 - 4);
              if (v66 > 0x400)
              {
                if (v66 <= 2 * v65)
                  goto LABEL_97;
              }
              else if (3 * v66 <= 4 * v65)
              {
LABEL_97:
                v21 = WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::expand(a1, (uint64_t)v21, v41, v42, v43, v44, v45, v46);
                v63 = *a1;
                if (*a1)
                  v66 = *(unsigned int *)(v63 - 4);
                else
                  v66 = 0;
              }
              v67 = v63 + 8 * v66;
              v68 = 1;
              goto LABEL_103;
            }
          }
          v40 = 0;
          goto LABEL_54;
        }
        if (*((_DWORD *)v38 + 8) == 1 && !*((_DWORD *)v38 + 4))
          goto LABEL_100;
      }
      v17 = ++v18 + v37;
    }
  }
  while (1)
  {
    v20 = v17 & v14;
    v21 = (JSC::Wasm::TypeDefinition **)(v12 + 8 * (v17 & v14));
    v22 = *v21;
    if (*v21 == (JSC::Wasm::TypeDefinition *)-1)
    {
      v19 = (JSC::Wasm::TypeDefinition **)(v12 + 8 * v20);
      goto LABEL_36;
    }
    if (!v22)
      goto LABEL_44;
    if (*((_DWORD *)v22 + 8) == 1 && (_DWORD)v15 == *((_DWORD *)v22 + 4))
    {
      v23 = 0;
      v24 = 0;
      v25 = *((_QWORD *)v22 + 1) + 16;
      v26 = v16;
      while (1)
      {
        v27 = *(_BYTE *)(v25 - 16);
        v28 = *(_DWORD *)v25;
        v29 = *((_DWORD *)v26 + 4);
        if (v29 != 1)
          break;
        if (v28 != 1)
          goto LABEL_33;
        v30 = *v26 == v27;
LABEL_21:
        if (v30 && *(unsigned __int8 *)(v25 + 8) == v26[24])
        {
          v25 += 32;
          v24 = ++v23 >= v15;
          v26 += 32;
          if (v15 != v23)
            continue;
        }
        goto LABEL_33;
      }
      if (!v28)
      {
        v31 = v29 ? 0 : v26;
        if (*v31 == v27)
        {
          v32 = *((_QWORD *)v31 + 1);
          v33 = ((v27 + 29) < 0xEu) & (0x3001u >> (v27 + 29));
          v34 = *(unsigned __int8 *)(v25 - 16);
          if ((v34 - 239) < 2 || v34 == 227)
          {
            if ((v33 & 1) == 0)
              goto LABEL_33;
          }
          else if ((v33 & 1) != 0)
          {
            goto LABEL_33;
          }
          v30 = v32 == *(_QWORD *)(v25 - 8);
          goto LABEL_21;
        }
      }
LABEL_33:
      if (v24)
        break;
    }
LABEL_36:
    v17 = ++v18 + v20;
  }
LABEL_100:
  if ((v13 & 1) != 0)
    v69 = 0;
  else
    v69 = *(unsigned int *)(v12 - 4);
  v68 = 0;
  v67 = v12 + 8 * v69;
LABEL_103:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v67;
  *(_BYTE *)(a9 + 16) = v68;
}

void WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::ArrayParameterTypes>,JSC::Wasm::ArrayParameterTypes const&,JSC::Wasm::ArrayParameterTypes const&>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  char v13;
  int v14;
  __int128 v15;
  unsigned int v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  JSC::Wasm::TypeDefinition **v21;
  unsigned int v22;
  JSC::Wasm::TypeDefinition **v23;
  JSC::Wasm::TypeDefinition *v24;
  unsigned __int8 *v25;
  int v27;
  unsigned int v28;
  JSC::Wasm::TypeDefinition *v29;
  unsigned __int8 *v30;
  unsigned __int8 v31;
  uint64_t v32;
  int v33;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  __int128 v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  _OWORD v59[2];

  v12 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::expand(a1, 0, a3, a4, a5, a6, a7, a8), (v12 = *a1) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *((_OWORD *)a2 + 1);
  v59[0] = *(_OWORD *)a2;
  v59[1] = v15;
  v16 = JSC::Wasm::computeArrayTypeHash((unsigned __int8 *)v59);
  v17 = *((_DWORD *)a2 + 4);
  if (v17)
    v18 = 0;
  else
    v18 = a2;
  v19 = a2[24];
  if (v17 == 1)
  {
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = v16 & v14;
      v23 = (JSC::Wasm::TypeDefinition **)(v12 + 8 * (v16 & v14));
      v24 = *v23;
      if (*v23 == (JSC::Wasm::TypeDefinition *)-1)
      {
        v21 = (JSC::Wasm::TypeDefinition **)(v12 + 8 * v22);
      }
      else
      {
        if (!v24)
          goto LABEL_40;
        if (*((_DWORD *)v24 + 8) == 2)
        {
          v25 = (unsigned __int8 *)*((_QWORD *)v24 + 1);
          if (*((_DWORD *)v25 + 4) == 1 && *a2 == *v25 && v25[24] == v19)
            goto LABEL_62;
        }
      }
      v16 = ++v20 + v22;
    }
  }
  v27 = 0;
  v21 = 0;
  while (1)
  {
    v28 = v16 & v14;
    v23 = (JSC::Wasm::TypeDefinition **)(v12 + 8 * (v16 & v14));
    v29 = *v23;
    if (*v23 == (JSC::Wasm::TypeDefinition *)-1)
    {
      v21 = (JSC::Wasm::TypeDefinition **)(v12 + 8 * v28);
      goto LABEL_36;
    }
    if (!v29)
      break;
    if (*((_DWORD *)v29 + 8) == 2)
    {
      v30 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
      if (!*((_DWORD *)v30 + 4))
      {
        v31 = *v30;
        if (*v18 == *v30)
        {
          v32 = *((_QWORD *)v30 + 1);
          v33 = v30[24];
          if (v31 - 239 < 2 || v31 == 227)
          {
            if ((((v31 + 29) < 0xEu) & (0x3001u >> (v31 + 29))) == 0)
              goto LABEL_36;
          }
          else if ((((v31 + 29) < 0xEu) & (0x3001u >> (v31 + 29))) != 0)
          {
            goto LABEL_36;
          }
          if (*((_QWORD *)v18 + 1) == v32 && v33 == v19)
          {
LABEL_62:
            if ((v13 & 1) != 0)
              v56 = 0;
            else
              v56 = *(unsigned int *)(v12 - 4);
            v55 = 0;
            v54 = v12 + 8 * v56;
            goto LABEL_61;
          }
        }
      }
    }
LABEL_36:
    v16 = ++v27 + v28;
  }
LABEL_40:
  if (v21)
    v23 = v21;
  if (*v23 == (JSC::Wasm::TypeDefinition *)-1)
  {
    *v23 = 0;
    --*(_DWORD *)(*a1 - 16);
  }
  WTF::tryFastMalloc((WTF *)0x48, v59);
  v42 = *(_QWORD *)&v59[0];
  if (*(_QWORD *)&v59[0])
  {
    v43 = 0;
    **(_DWORD **)&v59[0] = 1;
    *(_QWORD *)(v42 + 8) = v42 + 40;
    *(_BYTE *)(v42 + 16) = 0;
    *(_DWORD *)(v42 + 32) = 2;
    v44 = *(_OWORD *)a2;
    *(_OWORD *)(v42 + 49) = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(v42 + 40) = v44;
    if (!*((_DWORD *)a2 + 4))
      v43 = BYTE2(dword_1ECF4C7B0)
         && (BYTE1(dword_1ECF4C7B0) ? (v57 = (*a2 + 29) > 1u) : (v57 = 1),
             !v57 && (v58 = *((_QWORD *)a2 + 1), v58 <= 0xFFFFFFFFFFFFFFC0) && *(_DWORD *)(v58 + 32) == 4)
         && **(_QWORD **)(v58 + 8) == 0;
    *(_BYTE *)(v42 + 16) = v43;
    v45 = (unsigned int *)*v23;
    *v23 = (JSC::Wasm::TypeDefinition *)v42;
    if (v45)
    {
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        atomic_store(1u, v45);
        WTF::fastFree((unint64_t)v45, v35, v36, v37, v38, v39, v40, v41);
      }
    }
    v48 = *a1;
    if (*a1)
      v49 = *(_DWORD *)(v48 - 12) + 1;
    else
      v49 = 1;
    *(_DWORD *)(v48 - 12) = v49;
    v50 = *a1;
    if (*a1)
      v51 = *(_DWORD *)(v50 - 12);
    else
      v51 = 0;
    v52 = (*(_DWORD *)(v50 - 16) + v51);
    v53 = *(unsigned int *)(v50 - 4);
    if (v53 > 0x400)
    {
      if (v53 <= 2 * v52)
        goto LABEL_58;
    }
    else if (3 * v53 <= 4 * v52)
    {
LABEL_58:
      v23 = WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::expand(a1, (uint64_t)v23, v36, v37, v38, v39, v40, v41);
      v50 = *a1;
      if (*a1)
        v53 = *(unsigned int *)(v50 - 4);
      else
        v53 = 0;
    }
    v54 = v50 + 8 * v53;
    v55 = 1;
LABEL_61:
    *(_QWORD *)a9 = v23;
    *(_QWORD *)(a9 + 8) = v54;
    *(_BYTE *)(a9 + 16) = v55;
    return;
  }
  __break(0xC471u);
}

void WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::RecursionGroupParameterTypes>,JSC::Wasm::RecursionGroupParameterTypes const&,JSC::Wasm::RecursionGroupParameterTypes const&>(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  char v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  JSC::Wasm::TypeDefinition **v23;
  unsigned int v24;
  JSC::Wasm::TypeDefinition **v25;
  JSC::Wasm::TypeDefinition *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int i;
  unsigned int v34;
  JSC::Wasm::TypeDefinition *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  _DWORD *v61;

  v12 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::expand(a1, 0, a3, a4, a5, a6, a7, a8), (v12 = *a1) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *((unsigned int *)*a2 + 3);
  if ((_DWORD)v15)
  {
    v16 = 0;
    v17 = (_QWORD *)**a2;
    LODWORD(v18) = -1661236805;
    do
    {
      v19 = v17[v16] + ~(v17[v16] << 32);
      v20 = (v19 ^ (v19 >> 22)) + ~((v19 ^ (v19 >> 22)) << 13);
      v21 = (9 * (v20 ^ (v20 >> 8))) ^ ((9 * (v20 ^ (v20 >> 8))) >> 15);
      v18 = (0xD7862706ELL
           * (unint64_t)(277951225 * (_DWORD)v18
                              + 95187966
                              * (((v21 + ~(v21 << 27)) >> 31) ^ ((_DWORD)v21 + ~((_DWORD)v21 << 27))))) >> 4;
      ++v16;
    }
    while (v15 != v16);
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = v18 & v14;
      v25 = (JSC::Wasm::TypeDefinition **)(v12 + 8 * v24);
      v26 = *v25;
      if (*v25 == (JSC::Wasm::TypeDefinition *)-1)
      {
        v23 = (JSC::Wasm::TypeDefinition **)(v12 + 8 * v24);
      }
      else
      {
        if (!v26)
          goto LABEL_31;
        if (*((_DWORD *)v26 + 8) == 3 && (_DWORD)v15 == *((_DWORD *)v26 + 4))
        {
          v27 = (_QWORD *)*((_QWORD *)v26 + 1);
          if (*v27 == *v17)
          {
            v28 = 0;
            v29 = v27 + 1;
            do
            {
              if (v15 - 1 == v28)
                goto LABEL_28;
              v30 = v29[v28];
              v31 = v17[++v28];
            }
            while (v30 == v31);
            if (v28 >= v15)
              goto LABEL_28;
          }
        }
      }
      LODWORD(v18) = ++v22 + v24;
    }
  }
  v32 = 0;
  v23 = 0;
  for (i = -1661236805; ; i = v32 + v34)
  {
    v34 = i & v14;
    v25 = (JSC::Wasm::TypeDefinition **)(v12 + 8 * v34);
    v35 = *v25;
    if (*v25 == (JSC::Wasm::TypeDefinition *)-1)
    {
      v23 = (JSC::Wasm::TypeDefinition **)(v12 + 8 * v34);
      goto LABEL_27;
    }
    if (!v35)
    {
LABEL_31:
      if (v23)
        v25 = v23;
      if (*v25 == (JSC::Wasm::TypeDefinition *)-1)
      {
        *v25 = 0;
        --*(_DWORD *)(*a1 - 16);
        LODWORD(v15) = *((_DWORD *)*a2 + 3);
      }
      WTF::tryFastMalloc((WTF *)(8 * v15 + 40), &v61);
      v46 = v61;
      if (!v61)
        goto LABEL_63;
      *v61 = 1;
      *((_QWORD *)v46 + 1) = v46 + 10;
      v46[4] = v15;
      v46[8] = 3;
      if (*((_DWORD *)*a2 + 3))
      {
        v47 = 0;
        v48 = **a2;
        while (1)
        {
          v49 = *(unsigned int **)(v48 + 8 * v47);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 + 1, v49));
          v51 = *((unsigned int *)*a2 + 3);
          if (v47 >= v51)
            break;
          v48 = **a2;
          *(_QWORD *)(*((_QWORD *)v46 + 1) + 8 * v47) = *(_QWORD *)(v48 + 8 * v47);
          if (++v47 >= v51)
            goto LABEL_42;
        }
LABEL_63:
        __break(0xC471u);
        JUMPOUT(0x198E42928);
      }
LABEL_42:
      v52 = (unsigned int *)*v25;
      *v25 = (JSC::Wasm::TypeDefinition *)v46;
      if (v52)
      {
        do
        {
          v53 = __ldaxr(v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v52));
        if (!v54)
        {
          atomic_store(1u, v52);
          WTF::fastFree((unint64_t)v52, v39, v40, v41, v42, v43, v44, v45);
        }
      }
      v55 = *a1;
      if (*a1)
        v56 = *(_DWORD *)(v55 - 12) + 1;
      else
        v56 = 1;
      *(_DWORD *)(v55 - 12) = v56;
      v57 = *a1;
      if (*a1)
        v58 = *(_DWORD *)(v57 - 12);
      else
        v58 = 0;
      v59 = (*(_DWORD *)(v57 - 16) + v58);
      v60 = *(unsigned int *)(v57 - 4);
      if (v60 > 0x400)
      {
        if (v60 <= 2 * v59)
        {
LABEL_52:
          v25 = WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::expand(a1, (uint64_t)v25, v40, v41, v42, v43, v44, v45);
          v57 = *a1;
          if (*a1)
            v60 = *(unsigned int *)(v57 - 4);
          else
            v60 = 0;
        }
      }
      else if (3 * v60 <= 4 * v59)
      {
        goto LABEL_52;
      }
      v38 = v57 + 8 * v60;
      v37 = 1;
      goto LABEL_55;
    }
    if (*((_DWORD *)v35 + 8) == 3 && !*((_DWORD *)v35 + 4))
      break;
LABEL_27:
    ++v32;
  }
LABEL_28:
  if ((v13 & 1) != 0)
    v36 = 0;
  else
    v36 = *(unsigned int *)(v12 - 4);
  v37 = 0;
  v38 = v12 + 8 * v36;
LABEL_55:
  *(_QWORD *)a9 = v25;
  *(_QWORD *)(a9 + 8) = v38;
  *(_BYTE *)(a9 + 16) = v37;
}

void WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::ProjectionParameterTypes>,JSC::Wasm::ProjectionParameterTypes const&,JSC::Wasm::ProjectionParameterTypes const&>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  char v13;
  int v14;
  JSC::Wasm::TypeDefinition **v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int i;
  JSC::Wasm::TypeDefinition **v24;
  JSC::Wasm::TypeDefinition *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  _DWORD *v50;

  v12 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::expand(a1, 0, a3, a4, a5, a6, a7, a8), (v12 = *a1) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = 0;
  v16 = *(_DWORD *)(a2 + 8);
  v17 = *(_QWORD *)a2 + ~(*(_QWORD *)a2 << 32);
  v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
  v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
  v20 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
  v21 = (v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11);
  v22 = v14 & ((0xD7862706ELL
              * (unint64_t)(95187966 * (v21 ^ HIWORD(v21))
                                 + 277951225
                                 * ((0xD7862706ELL
                                                 * (unint64_t)(95187966
                                                                    * (((v19 + ~(v19 << 27)) >> 31) ^ ((_DWORD)v19 + ~((_DWORD)v19 << 27)))
                                                                    + 1378847966)) >> 4))) >> 4);
  for (i = 1; ; ++i)
  {
    v24 = (JSC::Wasm::TypeDefinition **)(v12 + 8 * v22);
    v25 = *v24;
    if (*v24 == (JSC::Wasm::TypeDefinition *)-1)
    {
      v15 = (JSC::Wasm::TypeDefinition **)(v12 + 8 * v22);
      goto LABEL_12;
    }
    if (!v25)
      break;
    if (*((_DWORD *)v25 + 8) == 4)
    {
      v26 = *((_QWORD *)v25 + 1);
      if (*(_QWORD *)v26 == *(_QWORD *)a2 && *(_DWORD *)(v26 + 8) == v16)
      {
        if ((v13 & 1) != 0)
          v49 = 0;
        else
          v49 = *(unsigned int *)(v12 - 4);
        v48 = 0;
        v47 = v12 + 8 * v49;
        goto LABEL_34;
      }
    }
LABEL_12:
    v22 = (v22 + i) & v14;
  }
  if (v15)
    v24 = v15;
  if (*v24 == (JSC::Wasm::TypeDefinition *)-1)
  {
    *v24 = 0;
    --*(_DWORD *)(*a1 - 16);
  }
  WTF::tryFastMalloc((WTF *)0x38, &v50);
  v34 = v50;
  if (v50)
  {
    *v50 = 1;
    v35 = v34 + 10;
    *((_BYTE *)v34 + 16) = 0;
    *((_QWORD *)v34 + 1) = v34 + 10;
    v34[8] = 4;
    v36 = *(unsigned int **)a2;
    if (*(_QWORD *)a2)
    {
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
      v36 = *(unsigned int **)a2;
      v35 = (_DWORD *)*((_QWORD *)v34 + 1);
    }
    *(_QWORD *)v35 = v36;
    v35[2] = *(_DWORD *)(a2 + 8);
    v38 = (unsigned int *)*v24;
    *v24 = (JSC::Wasm::TypeDefinition *)v34;
    if (v38)
    {
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        atomic_store(1u, v38);
        WTF::fastFree((unint64_t)v38, v27, v28, v29, v30, v31, v32, v33);
      }
    }
    v41 = *a1;
    if (*a1)
      v42 = *(_DWORD *)(v41 - 12) + 1;
    else
      v42 = 1;
    *(_DWORD *)(v41 - 12) = v42;
    v43 = *a1;
    if (*a1)
      v44 = *(_DWORD *)(v43 - 12);
    else
      v44 = 0;
    v45 = (*(_DWORD *)(v43 - 16) + v44);
    v46 = *(unsigned int *)(v43 - 4);
    if (v46 > 0x400)
    {
      if (v46 <= 2 * v45)
        goto LABEL_31;
    }
    else if (3 * v46 <= 4 * v45)
    {
LABEL_31:
      v24 = WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::expand(a1, (uint64_t)v24, v28, v29, v30, v31, v32, v33);
      v43 = *a1;
      if (*a1)
        v46 = *(unsigned int *)(v43 - 4);
      else
        v46 = 0;
    }
    v47 = v43 + 8 * v46;
    v48 = 1;
LABEL_34:
    *(_QWORD *)a9 = v24;
    *(_QWORD *)(a9 + 8) = v47;
    *(_BYTE *)(a9 + 16) = v48;
    return;
  }
  __break(0xC471u);
}

void WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::SubtypeParameterTypes>,JSC::Wasm::SubtypeParameterTypes const&,JSC::Wasm::SubtypeParameterTypes const&>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  int v13;
  const unint64_t *v14;
  unsigned int v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  int v19;
  JSC::Wasm::TypeDefinition **v20;
  unsigned int v21;
  JSC::Wasm::TypeDefinition **v22;
  JSC::Wasm::TypeDefinition *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _QWORD *v37;
  unsigned int ***v38;
  unsigned int **v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  _DWORD *v54;

  v12 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::expand(a1, 0, a3, a4, a5, a6, a7, a8), (v12 = *a1) != 0))
  {
    v53 = 0;
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
    v53 = 1;
  }
  v14 = (const unint64_t *)a2[1];
  v15 = *(_DWORD *)(*a2 + 12);
  v16 = *(_QWORD **)*a2;
  v17 = *((unsigned __int8 *)a2 + 16);
  v18 = JSC::Wasm::computeSubtypeHash((JSC::Wasm *)v15, v16, v14, v17);
  v19 = 0;
  v20 = 0;
  while (1)
  {
    v21 = v18 & v13;
    v22 = (JSC::Wasm::TypeDefinition **)(v12 + 8 * (v18 & v13));
    v23 = *v22;
    if (*v22 == (JSC::Wasm::TypeDefinition *)-1)
    {
      v20 = (JSC::Wasm::TypeDefinition **)(v12 + 8 * v21);
      goto LABEL_14;
    }
    if (!v23)
      break;
    if (*((_DWORD *)v23 + 8) == 5 && v15 == *((_DWORD *)v23 + 4))
    {
      v24 = 0;
      while (v15 != v24)
      {
        v25 = v16[v24++];
        if (*(_QWORD *)(*((_QWORD *)v23 + 1) + 8 * v24) != v25)
          goto LABEL_14;
      }
      if (**((const unint64_t ***)v23 + 1) == v14 && v17 == *((unsigned __int8 *)v23 + 20))
      {
        if ((v53 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v12 - 4);
        v27 = 0;
        v28 = v12 + 8 * v26;
        goto LABEL_44;
      }
    }
LABEL_14:
    v18 = ++v19 + v21;
  }
  if (v20)
    v22 = v20;
  if (*v22 == (JSC::Wasm::TypeDefinition *)-1)
  {
    *v22 = 0;
    --*(_DWORD *)(*a1 - 16);
    v15 = *(_DWORD *)(*a2 + 12);
    LOBYTE(v17) = *((_BYTE *)a2 + 16);
  }
  WTF::tryFastMalloc((WTF *)0x38, &v54);
  v36 = v54;
  if (v54)
  {
    *v54 = 1;
    v37 = v36 + 10;
    *((_QWORD *)v36 + 1) = v36 + 10;
    v36[4] = v15;
    *((_BYTE *)v36 + 20) = v17;
    v36[8] = 5;
    v38 = (unsigned int ***)*a2;
    if (*(_DWORD *)(*a2 + 12))
    {
      v39 = *v38;
      *((_QWORD *)v36 + 6) = **v38;
      v40 = *v39;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 + 1, v40));
      v37 = (_QWORD *)*((_QWORD *)v36 + 1);
    }
    *v37 = a2[1];
    v42 = (unsigned int *)a2[1];
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
    v44 = (unsigned int *)*v22;
    *v22 = (JSC::Wasm::TypeDefinition *)v36;
    if (v44)
    {
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
      {
        atomic_store(1u, v44);
        WTF::fastFree((unint64_t)v44, v29, v30, v31, v32, v33, v34, v35);
      }
    }
    v47 = *a1;
    if (*a1)
      v48 = *(_DWORD *)(v47 - 12) + 1;
    else
      v48 = 1;
    *(_DWORD *)(v47 - 12) = v48;
    v49 = *a1;
    if (*a1)
      v50 = *(_DWORD *)(v49 - 12);
    else
      v50 = 0;
    v51 = (*(_DWORD *)(v49 - 16) + v50);
    v52 = *(unsigned int *)(v49 - 4);
    if (v52 > 0x400)
    {
      if (v52 <= 2 * v51)
        goto LABEL_41;
    }
    else if (3 * v52 <= 4 * v51)
    {
LABEL_41:
      v22 = WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::expand(a1, (uint64_t)v22, v30, v31, v32, v33, v34, v35);
      v49 = *a1;
      if (*a1)
        v52 = *(unsigned int *)(v49 - 4);
      else
        v52 = 0;
    }
    v28 = v49 + 8 * v52;
    v27 = 1;
LABEL_44:
    *(_QWORD *)a9 = v22;
    *(_QWORD *)(a9 + 8) = v28;
    *(_BYTE *)(a9 + 16) = v27;
    return;
  }
  __break(0xC471u);
}

void WTF::HashTable<WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>,WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::TypeDefinition,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  unsigned int **v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int **v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v22 = (unsigned int **)(v10 + 8 * i);
      v23 = *v22;
      if (*v22 != (unsigned int *)-1)
      {
        if (v23)
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = ((unint64_t)v23 + ~((_QWORD)v23 << 32)) ^ (((unint64_t)v23 + ~((_QWORD)v23 << 32)) >> 22);
          v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
          v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
          v29 = v25 & ((v28 >> 31) ^ v28);
          v30 = 1;
          do
          {
            v31 = v29;
            v32 = *(_QWORD *)(v24 + 8 * v29);
            v29 = (v29 + v30++) & v25;
          }
          while (v32);
          v33 = (unsigned int **)(v24 + 8 * v31);
          *v33 = 0;
          v34 = *v22;
          *v22 = 0;
          *v33 = v34;
          v35 = *v22;
          *v22 = 0;
          if (v35)
          {
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              atomic_store(1u, v35);
              WTF::fastFree((unint64_t)v35, v14, v15, v16, v17, v18, v19, v20);
            }
          }
        }
        else
        {
          *v22 = 0;
        }
      }
    }
  }
  else if (!v10)
  {
    return;
  }
  WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

void WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::TypeDefinition const,WTF::RawPtrTraits<JSC::Wasm::TypeDefinition const>,WTF::DefaultRefDerefTraits<JSC::Wasm::TypeDefinition const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v21 = 0;
    while (1)
    {
      v22 = (uint64_t *)(v10 + 16 * v21);
      v23 = *v22;
      if (*v22 != -1)
      {
        if (v23)
        {
          v28 = *a1;
          if (*a1)
            v29 = *(_DWORD *)(v28 - 8);
          else
            v29 = 0;
          v30 = (v23 + ~(v23 << 32)) ^ ((unint64_t)(v23 + ~(v23 << 32)) >> 22);
          v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
          v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
          v33 = v29 & ((v32 >> 31) ^ v32);
          v34 = 1;
          do
          {
            v35 = v33;
            v36 = *(_QWORD *)(v28 + 16 * v33);
            v33 = (v33 + v34++) & v29;
          }
          while (v36);
          v37 = (uint64_t *)(v28 + 16 * v35);
          v38 = (unsigned int *)v37[1];
          v37[1] = 0;
          if (v38)
          {
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              atomic_store(1u, v38);
              WTF::fastFree((unint64_t)v38, v14, v15, v16, v17, v18, v19, v20);
            }
          }
          *v37 = *v22;
          v41 = v10 + 16 * v21;
          v42 = *(_QWORD *)(v41 + 8);
          *(_QWORD *)(v41 + 8) = 0;
          v37[1] = v42;
          v25 = *(unsigned int **)(v41 + 8);
          *(_QWORD *)(v41 + 8) = 0;
          if (!v25)
            goto LABEL_24;
          do
          {
            v43 = __ldaxr(v25);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v25));
          if (v44)
            goto LABEL_24;
        }
        else
        {
          v24 = v10 + 16 * v21;
          v25 = *(unsigned int **)(v24 + 8);
          *(_QWORD *)(v24 + 8) = 0;
          if (!v25)
            goto LABEL_24;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (v27)
            goto LABEL_24;
        }
        atomic_store(1u, v25);
        WTF::fastFree((unint64_t)v25, v14, v15, v16, v17, v18, v19, v20);
      }
LABEL_24:
      if (++v21 == v11)
        goto LABEL_27;
    }
  }
  if (v10)
LABEL_27:
    WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t *WTF::HashTable<unsigned long,WTF::KeyValuePair<unsigned long,WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long,WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>>,WTF::DefaultHash<unsigned long>,WTF::HashMap<unsigned long,WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::RefPtr<JSC::Wasm::RTT,WTF::RawPtrTraits<JSC::Wasm::RTT>,WTF::DefaultRefDerefTraits<JSC::Wasm::RTT>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t *)(v11 + 16 * v22);
      v25 = *v24;
      if (*v24 != -1)
      {
        if (v25)
        {
          v30 = *a1;
          if (*a1)
            v31 = *(_DWORD *)(v30 - 8);
          else
            v31 = 0;
          v32 = (v25 + ~(v25 << 32)) ^ ((unint64_t)(v25 + ~(v25 << 32)) >> 22);
          v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
          v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
          v35 = v31 & ((v34 >> 31) ^ v34);
          v36 = 1;
          do
          {
            v37 = v35;
            v38 = *(_QWORD *)(v30 + 16 * v35);
            v35 = (v35 + v36++) & v31;
          }
          while (v38);
          v39 = (uint64_t *)(v30 + 16 * v37);
          v40 = (unsigned int *)v39[1];
          v39[1] = 0;
          if (v40)
          {
            do
            {
              v41 = __ldaxr(v40);
              v42 = v41 - 1;
            }
            while (__stlxr(v42, v40));
            if (!v42)
            {
              atomic_store(1u, v40);
              WTF::fastFree((unint64_t)v40, v15, v16, v17, v18, v19, v20, v21);
            }
          }
          *v39 = *v24;
          v43 = v11 + 16 * v22;
          v44 = *(_QWORD *)(v43 + 8);
          *(_QWORD *)(v43 + 8) = 0;
          v39[1] = v44;
          v45 = *(unsigned int **)(v43 + 8);
          *(_QWORD *)(v43 + 8) = 0;
          if (v45)
          {
            do
            {
              v46 = __ldaxr(v45);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v45));
            if (!v47)
            {
              atomic_store(1u, v45);
              WTF::fastFree((unint64_t)v45, v15, v16, v17, v18, v19, v20, v21);
            }
          }
          if (v24 == (uint64_t *)a3)
            v23 = v39;
        }
        else
        {
          v26 = v11 + 16 * v22;
          v27 = *(unsigned int **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v27)
          {
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              atomic_store(1u, v27);
              WTF::fastFree((unint64_t)v27, v15, v16, v17, v18, v19, v20, v21);
            }
          }
        }
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void WTF::hashTraitsDeleteBucket<WTF::HashTraits<JSC::Wasm::TypeHash>,JSC::Wasm::TypeHash>(unsigned int **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *a1 = (unsigned int *)-1;
}

unsigned int *WTF::PriorityQueue<JSC::Wasm::Worklist::QueueElement,&JSC::Wasm::Worklist::isHigherPriority,10ul>::siftDown(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int **v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  __int128 v26;

  v2 = (2 * a2) | 1;
  v3 = result[3];
  if (v2 < v3)
  {
    v4 = a2;
    v5 = result;
    v6 = 2 * a2;
    do
    {
      v7 = v4;
      v8 = v6 + 2;
      if (v8 >= v3)
      {
        v4 = v2;
      }
      else
      {
        v9 = *(_DWORD *)(*(_QWORD *)v5 + 24 * v2);
        v10 = *(_DWORD *)(*(_QWORD *)v5 + 24 * v8);
        if (v9 == v10)
        {
          v4 = v2;
          if (*(_QWORD *)(*(_QWORD *)v5 + 24 * v2 + 8) > *(_QWORD *)(*(_QWORD *)v5 + 24 * v8 + 8))
            goto LABEL_7;
LABEL_6:
          v4 = v8;
          goto LABEL_7;
        }
        v4 = v2;
        if (v9 <= v10)
          goto LABEL_6;
      }
LABEL_7:
      if (v7 >= v3 || v4 >= v3)
      {
        __break(0xC471u);
        JUMPOUT(0x198E436F4);
      }
      v11 = *(_QWORD *)v5;
      v12 = (_DWORD *)(*(_QWORD *)v5 + 24 * v7);
      v13 = (_DWORD *)(*(_QWORD *)v5 + 24 * v4);
      if (*v12 == *v13)
      {
        if (*(_QWORD *)(v11 + 24 * v7 + 8) > *(_QWORD *)(v11 + 24 * v4 + 8))
          return result;
      }
      else if (*v12 > *v13)
      {
        return result;
      }
      v26 = *(_OWORD *)v12;
      v14 = v11 + 24 * v7;
      v15 = *(unsigned int **)(v14 + 16);
      *(_QWORD *)(v14 + 16) = 0;
      *(_OWORD *)v12 = *(_OWORD *)v13;
      v16 = v11 + 24 * v4;
      v18 = *(_QWORD *)(v16 + 16);
      v17 = (unsigned int **)(v16 + 16);
      *v17 = 0;
      v19 = *(unsigned int **)(v14 + 16);
      *(_QWORD *)(v14 + 16) = v18;
      if (v19)
      {
        v20 = v19 + 2;
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v19 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
        }
      }
      *(_OWORD *)v13 = v26;
      result = *v17;
      *v17 = v15;
      if (result)
      {
        v23 = result + 2;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, result + 2);
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
      }
      v6 = 2 * v4;
      v2 = (2 * v4) | 1;
      v3 = v5[3];
    }
    while (v2 < v3);
  }
  return result;
}

unsigned int *WTF::PriorityQueue<JSC::Wasm::Worklist::QueueElement,&JSC::Wasm::Worklist::isHigherPriority,10ul>::siftUp(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int **v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  __int128 v21;

  if (a2)
  {
    v2 = result;
    do
    {
      v3 = a2 - 1;
      v4 = (a2 - 1) >> 1;
      v5 = v2[3];
      if (v4 >= v5 || a2 >= v5)
      {
        __break(0xC471u);
        JUMPOUT(0x198E4385CLL);
      }
      v6 = *(_QWORD *)v2;
      v7 = (_DWORD *)(*(_QWORD *)v2 + 24 * v4);
      v8 = (_DWORD *)(*(_QWORD *)v2 + 24 * a2);
      if (*v7 == *v8)
      {
        if (*(_QWORD *)(v6 + 24 * v4 + 8) > *(_QWORD *)(v6 + 24 * a2 + 8))
          return result;
      }
      else if (*v7 > *v8)
      {
        return result;
      }
      v21 = *(_OWORD *)v7;
      v9 = v6 + 24 * v4;
      v10 = *(unsigned int **)(v9 + 16);
      *(_QWORD *)(v9 + 16) = 0;
      *(_OWORD *)v7 = *(_OWORD *)v8;
      v11 = v6 + 24 * a2;
      v13 = *(_QWORD *)(v11 + 16);
      v12 = (unsigned int **)(v11 + 16);
      *v12 = 0;
      v14 = *(unsigned int **)(v9 + 16);
      *(_QWORD *)(v9 + 16) = v13;
      if (v14)
      {
        v15 = v14 + 2;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v14 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
        }
      }
      *(_OWORD *)v8 = v21;
      result = *v12;
      *v12 = v10;
      if (result)
      {
        v18 = result + 2;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, result + 2);
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
      }
      a2 = v4;
    }
    while (v3 > 1);
  }
  return result;
}

uint64_t WTF::Vector<JSC::Wasm::Worklist::QueueElement,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Worklist::QueueElement>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = WTF::Vector<JSC::Wasm::Worklist::QueueElement,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
  *(_OWORD *)v4 = *(_OWORD *)v3;
  v5 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v4 + 16) = v5;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<JSC::Wasm::Worklist::QueueElement,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::Wasm::Worklist::QueueElement,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::Wasm::Worklist::QueueElement,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  return v3;
}

void WTF::Vector<JSC::Wasm::Worklist::QueueElement,10ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(unsigned int **)a1;
    v4 = (unsigned int *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
    WTF::VectorBuffer<JSC::Wasm::Worklist::QueueElement,10ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    WTF::VectorMover<false,JSC::Wasm::Worklist::QueueElement>::move(v3, v4, *(_QWORD *)a1);
    if ((unsigned int *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(unsigned int **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

uint64_t WTF::VectorBuffer<JSC::Wasm::Worklist::QueueElement,10ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 0xB)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 10;
  }
  else
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x198E43A6CLL);
    }
    v3 = 24 * a2;
    result = WTF::fastMalloc((WTF *)(24 * a2));
    *(_DWORD *)(v2 + 8) = (v3 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v2 = result;
  }
  return result;
}

unsigned int *WTF::VectorMover<false,JSC::Wasm::Worklist::QueueElement>::move(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      v6 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v6;
      result = (unsigned int *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (result)
      {
        v7 = result + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, result + 2);
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
      }
      a3 += 24;
      v5 += 6;
    }
    while (v5 != a2);
  }
  return result;
}

__n128 WTF::Vector<JSC::Wasm::Worklist::QueueElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Worklist::QueueElement>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  uint64_t v4;
  __n128 result;
  unint64_t v6;

  v3 = (__n128 *)WTF::Vector<JSC::Wasm::Worklist::QueueElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
  result = *v3;
  *(__n128 *)v4 = *v3;
  v6 = v3[1].n128_u64[0];
  v3[1].n128_u64[0] = 0;
  *(_QWORD *)(v4 + 16) = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unsigned int *WTF::Vector<JSC::Wasm::Worklist::QueueElement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = a3;
  v5 = *(unsigned int **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = &v5[6 * *(unsigned int *)(a1 + 12)];
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v19 = *(unsigned int **)a1;
        return &v19[2 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v9 < 0xAAAAAAB)
      {
        v10 = 24 * v9;
        v11 = WTF::fastMalloc((WTF *)(24 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a1 = v11;
        WTF::VectorMover<false,JSC::Wasm::Worklist::QueueElement>::move(v5, v6, v11);
        v19 = *(unsigned int **)a1;
        if (v5)
        {
          if (v19 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
          v19 = *(unsigned int **)a1;
        }
        return &v19[2 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x198E43D1CLL);
    }
  }
  v20 = *(unsigned int *)(a1 + 8);
  v21 = v20 + (v20 >> 2);
  if (v21 >= 0x10)
    v22 = v21 + 1;
  else
    v22 = 16;
  if (v22 <= a2)
    v22 = a2;
  if (v22 > v20)
  {
    if (v22 >= 0xAAAAAAB)
      goto LABEL_28;
    v23 = &v5[6 * *(unsigned int *)(a1 + 12)];
    v24 = 24 * v22;
    v25 = WTF::fastMalloc((WTF *)(24 * v22));
    *(_DWORD *)(a1 + 8) = (v24 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)a1 = v25;
    WTF::VectorMover<false,JSC::Wasm::Worklist::QueueElement>::move(v5, v23, v25);
    if (v5)
    {
      if (*(unsigned int **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  return (unsigned int *)v3;
}

uint64_t WTF::Vector<WTF::Ref<JSC::Wasm::Worklist::Thread,WTF::RawPtrTraits<JSC::Wasm::Worklist::Thread>,WTF::DefaultRefDerefTraits<JSC::Wasm::Worklist::Thread>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int **v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v12 = *(unsigned int ***)a1;
    v13 = *(_QWORD *)a1 + 8 * v9;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        v15 = v14 + 2;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v14 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
        }
      }
      ++v12;
    }
    while (v12 != (unsigned int **)v13);
  }
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::Wasm::Worklist::Thread::Thread(uint64_t a1, void *a2, unsigned int **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v32;
  WTF *v33;

  v10 = *a3;
  if (*a3)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v33 = (WTF *)v10;
  v12 = a3[1];
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 + 1, v12));
  v32 = v12;
  WTF::AutomaticThread::AutomaticThread(a1, a2, (unsigned int **)&v33, (uint64_t *)&v32, a5, a6, a7, a8, 10.0);
  WTF::Ref<WTF::AutomaticThreadCondition,WTF::RawPtrTraits<WTF::AutomaticThreadCondition>,WTF::DefaultRefDerefTraits<WTF::AutomaticThreadCondition>>::~Ref((unint64_t *)&v32, v14, v15, v16, v17, v18, v19, v20);
  v28 = (unsigned int *)v33;
  v33 = 0;
  if (v28)
  {
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v28);
      WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
    }
  }
  *(_QWORD *)a1 = off_1E35B73C8;
  *(_BYTE *)(a1 + 46) = 0;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void JSC::Wasm::Worklist::Thread::~Thread(JSC::Wasm::Worklist::Thread *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  WTF::AutomaticThread::~AutomaticThread(this, a2, a3, a4, a5, a6, a7, a8);
}

{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  WTF::AutomaticThread::~AutomaticThread(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
}

const char *JSC::Wasm::Worklist::Thread::name(JSC::Wasm::Worklist::Thread *this)
{
  return "Wasm Worklist Helper Thread";
}

uint64_t JSC::Wasm::Worklist::Thread::poll(_QWORD *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 v11;
  uint64_t v12;
  _OWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t result;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int *v35;
  _BYTE v36[16];
  unsigned int *v37;

  v9 = a1[6];
  v10 = (unsigned __int8 *)a1 + 46;
  v11 = atomic_load(v10);
  if ((v11 & 1) != 0)
  {
    atomic_store(0, v10);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  if (!*(_DWORD *)(v9 + 36))
    return 2;
  v12 = v9 + 24;
  v13 = a1 + 7;
  while (1)
  {
    v14 = *(_DWORD **)v12;
    if (!**(_DWORD **)v12)
      return 1;
    *v13 = *(_OWORD *)v14;
    v15 = *((_QWORD *)v14 + 2);
    if (v15)
    {
      v16 = (unsigned int *)(v15 + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
    }
    result = a1[9];
    a1[9] = v15;
    if (result)
    {
      v19 = (unsigned int *)(result + 8);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, (unsigned int *)(result + 8));
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
    if (!*(_DWORD *)(v9 + 36))
      break;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v12 + 16) + 32))(*(_QWORD *)(*(_QWORD *)v12 + 16)) & 1) == 0)
    {
      WTF::PriorityQueue<JSC::Wasm::Worklist::QueueElement,&JSC::Wasm::Worklist::isHigherPriority,10ul>::dequeue((uint64_t)v36, (unsigned int *)(v9 + 24));
      v22 = v37;
      v37 = 0;
      if (v22)
      {
        v23 = v22 + 2;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v22 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
        }
      }
    }
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[9] + 16))(a1[9]) & 1) != 0)
      return 0;
    WTF::PriorityQueue<JSC::Wasm::Worklist::QueueElement,&JSC::Wasm::Worklist::isHigherPriority,10ul>::dequeue((uint64_t)&v34, (unsigned int *)(v9 + 24));
    v30 = v35;
    v35 = 0;
    if (v30)
    {
      v31 = v30 + 2;
      do
      {
        v26 = __ldaxr(v31);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v31));
      if (!v27)
      {
        atomic_store(1u, v30 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
      }
    }
    *(_QWORD *)v13 = 0;
    a1[8] = 0;
    v32 = (unsigned int *)a1[9];
    a1[9] = 0;
    if (v32)
    {
      v33 = v32 + 2;
      do
      {
        v28 = __ldaxr(v33);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v33));
      if (!v29)
      {
        atomic_store(1u, v32 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
      }
    }
    result = 2;
    if (!*(_DWORD *)(v9 + 36))
      return result;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::Wasm::Worklist::Thread::work(JSC::Wasm::Worklist::Thread *this)
{
  _QWORD *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t result;
  unsigned __int8 *v20;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  __int128 v39;
  unsigned int *v40;
  unsigned __int8 *v41;
  char v42;

  v2 = (_QWORD *)((char *)this + 56);
  v3 = *((_QWORD *)this + 9);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, 1);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3)
    || (v4 & 1) != 0
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3))
  {
    v11 = (unsigned __int8 *)(**((_QWORD **)this + 6) + 4);
    if (__ldaxr(v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_6;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
LABEL_6:
    *v2 = 0;
    v2[1] = 0;
    v13 = (unsigned int *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v13)
    {
      v14 = v13 + 2;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v13 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
      }
    }
    v17 = __ldxr(v11);
    if (v17 == 1)
    {
      if (!__stlxr(0, v11))
        return 0;
    }
    else
    {
      __clrex();
    }
    v18 = v11;
LABEL_16:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v18, 0, v5, v6, v7, v8, v9, v10);
    return 0;
  }
  v20 = (unsigned __int8 *)(**((_QWORD **)this + 6) + 4);
  v41 = v20;
  v42 = 1;
  if (__ldaxr(v20))
  {
    __clrex();
LABEL_23:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v20);
    goto LABEL_24;
  }
  if (__stxr(1u, v20))
    goto LABEL_23;
LABEL_24:
  if (*(_DWORD *)v2 == 1)
  {
LABEL_27:
    v22 = (unsigned int *)(*((_QWORD *)this + 6) + 24);
    v39 = *(_OWORD *)v2;
    v23 = (unsigned int *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    v40 = v23;
    WTF::PriorityQueue<JSC::Wasm::Worklist::QueueElement,&JSC::Wasm::Worklist::isHigherPriority,10ul>::enqueue(v22, (unint64_t)&v39);
    v30 = v40;
    v40 = 0;
    if (v30)
    {
      v31 = v30 + 2;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v30 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
      }
    }
    WTF::AutomaticThreadCondition::notifyAll(*(_QWORD *)(*((_QWORD *)this + 6) + 8), &v41, v24, v25, v26, v27, v28, v29);
    *v2 = 0;
    v2[1] = 0;
    v34 = (unsigned int *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v34)
    {
      v35 = v34 + 2;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        atomic_store(1u, v34 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
      }
    }
    if (!v42)
      return 0;
    v18 = v41;
    v38 = __ldxr(v41);
    if (v38 == 1)
    {
      if (!__stlxr(0, v41))
        return 0;
    }
    else
    {
      __clrex();
    }
    goto LABEL_16;
  }
  if (*(_DWORD *)v2 == 3)
  {
    *(_DWORD *)v2 = 2;
    goto LABEL_27;
  }
  result = 156;
  __break(0xC471u);
  return result;
}

JSC::Wasm::Worklist *std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::ensureWorklist(void)::$_0 &&>>()
{
  JSC::Wasm::Worklist *v0;
  JSC::Wasm::Worklist *result;

  v0 = (JSC::Wasm::Worklist *)WTF::fastMalloc((WTF *)0x128);
  result = JSC::Wasm::Worklist::Worklist(v0);
  __dmb(0xAu);
  JSC::Wasm::globalWorklist = (uint64_t)result;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::Wasm::createJSToWasmWrapper(JSC::CCallHelpers &,JSC::Wasm::JSEntrypointCallee &,JSC::Wasm::Callee *,JSC::Wasm::TypeDefinition const&,WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> *,JSC::Wasm::ModuleInformation const&,JSC::MemoryMode,unsigned int)::$_0>::run(uint64_t result, _QWORD *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v2 = *(_DWORD *)(result + 24);
  if (v2 < 4)
    v3 = 0;
  else
    v3 = *(_DWORD *)((v2 & 0xFFFFFFFC) + a2[3] - 4);
  v4 = (v2 - v3);
  v5 = a2[23];
  v6 = v4 + v5;
  if (v5 <= v6 && v5 + a2[1] >= v6)
  {
    v8 = *(_QWORD *)(result + 16);
    v9 = *(unsigned int *)(result + 32);
    v10 = ((unint64_t)*(unsigned int *)(result + 28) >> 2) & 1;
    *(_QWORD *)&v15 = v6;
    *((_QWORD *)&v15 + 1) = v10;
    v16 = v9;
    v11 = *(unsigned int *)(v8 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(v8 + 8))
    {
      result = WTF::Vector<JSC::Wasm::UnlinkedWasmToWasmCall,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v11 + 1, (unint64_t)&v15);
      v12 = (_OWORD *)(*(_QWORD *)v8 + 32 * *(unsigned int *)(v8 + 12));
      v13 = *(_OWORD *)result;
      v14 = *(_OWORD *)(result + 16);
    }
    else
    {
      v12 = (_OWORD *)(*(_QWORD *)v8 + 32 * v11);
      v13 = v15;
      v14 = v16;
    }
    *v12 = v13;
    v12[1] = v14;
    ++*(_DWORD *)(v8 + 12);
  }
  else
  {
    result = 366;
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(std::experimental::fundamentals_v3::expected<WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,WTF::String> &&),JSC::JSWebAssembly::webAssemblyModuleValidateAsync(JSC::JSGlobalObject *,JSC::JSPromise *,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0>::run(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t result;
  __int128 v10;
  _BYTE v11[8];
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_BYTE **)(v2 + 41888);
  v4 = *(_QWORD *)(a1 + 16);
  v10 = *(_OWORD *)(a1 + 24);
  v11[0] = 0;
  v12 = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(uint64_t *, _BYTE *, uint64_t))off_1E35B7330[v5])(&v14, v11, a2);
    v12 = v5;
    v2 = *(_QWORD *)(a1 + 40);
  }
  v13 = v2;
  v7 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v7 = &off_1E35B7468;
  *(_OWORD *)(v7 + 8) = v10;
  *(_BYTE *)(v7 + 24) = 0;
  *(_DWORD *)(v7 + 32) = -1;
  v8 = v12;
  if (v12 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_1E35B7330[v12])(&v14, v7 + 24, v11);
    *(_DWORD *)(v7 + 32) = v8;
  }
  *(_QWORD *)(v7 + 40) = v13;
  v14 = v7;
  JSC::DeferredWorkTimer::scheduleWorkSoon(v3, v4, &v14);
  result = v14;
  if (v14)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (v12 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E35B72F8[v12])(&v15, v11);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<JSC::JSWebAssembly::webAssemblyModuleValidateAsync(JSC::JSGlobalObject *,JSC::JSPromise *,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(std::experimental::fundamentals_v3::expected<WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm>,WTF::DefaultRefDerefTraits<JSC::Wasm>>,WTF::String> &&)::{lambda(JSC::DeferredWorkTimer::TicketData *)#1},void,JSC::DeferredWorkTimer>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_1E35B7468;
  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E35B72F8[v2])(&v4, a1 + 24);
  *(_DWORD *)(a1 + 32) = -1;
  return a1;
}

void WTF::Detail::CallableWrapper<JSC::JSWebAssembly::webAssemblyModuleValidateAsync(JSC::JSGlobalObject *,JSC::JSPromise *,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(std::experimental::fundamentals_v3::expected<WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm>,WTF::DefaultRefDerefTraits<JSC::Wasm>>,WTF::String> &&)::{lambda(JSC::DeferredWorkTimer::TicketData *)#1},void,JSC::DeferredWorkTimer>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char v10;

  *(_QWORD *)this = &off_1E35B7468;
  v9 = *((unsigned int *)this + 8);
  if ((_DWORD)v9 != -1)
    ((void (*)(char *, char *))off_1E35B72F8[v9])(&v10, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<JSC::JSWebAssembly::webAssemblyModuleValidateAsync(JSC::JSGlobalObject *,JSC::JSPromise *,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0::operator()(std::experimental::fundamentals_v3::expected<WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm>,WTF::DefaultRefDerefTraits<JSC::Wasm>>,WTF::String> &&)::{lambda(JSC::DeferredWorkTimer::TicketData *)#1},void,JSC::DeferredWorkTimer>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::StringImpl **v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  JSC::VM *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t (*v39)(uint64_t *);
  uint64_t *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t *);
  uint64_t *v43;
  uint64_t v44;
  JSC::JSGlobalObject *v45;
  _QWORD *v46;

  v9 = *(_QWORD *)(a1 + 40);
  v10 = (WTF::StringImpl **)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    if (v11 == 1)
    {
      v20 = *(_QWORD *)(v12 + 1296);
      if ((v20 & 1) != 0)
      {
        v42 = *(uint64_t (**)(uint64_t *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
        v43 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v12 & 8) != 0)
          v43 = (uint64_t *)(v12 - 16);
        v44 = *v43;
        v45 = (JSC::JSGlobalObject *)v12;
        v46 = (_QWORD *)(v12 + 1296);
        v20 = v42(&v44);
      }
      v21 = JSC::ErrorInstance::create((JSC::Heap **)v9, v20, v10, 0, (uint64_t)JSC::defaultSourceAppender, 0, 0, 1);
      v28 = (JSC::VM *)v21;
      if ((v21 & 0xFFFE000000000002) == 0
        && &JSC::Exception::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C)))
      {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else
  {
    v13 = *(_QWORD *)(v12 + 1392);
    if ((v13 & 1) == 0)
    {
LABEL_3:
      v14 = JSC::JSWebAssemblyModule::create((JSC *)v9, v13, (uint64_t *)v10, a4, a5, a6, a7, a8);
      JSC::JSPromise::resolve(*(_QWORD *)(a1 + 8), *(uint64_t **)(a1 + 16), v14, v15, v16, v17, v18, v19);
      return;
    }
    v39 = *(uint64_t (**)(uint64_t *))(v13 & 0xFFFFFFFFFFFFFFFCLL);
    v40 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v12 & 8) != 0)
      v40 = (uint64_t *)(v12 - 16);
    v44 = *v40;
    v45 = (JSC::JSGlobalObject *)v12;
    v46 = (_QWORD *)(v12 + 1392);
    v41 = v39(&v44);
    if (!*(_DWORD *)(a1 + 32))
    {
      v13 = v41;
      goto LABEL_3;
    }
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_18:
  v28 = (JSC::VM *)JSC::Exception::create(v9, v28, 0, v22, v23, v24, v25, v26);
LABEL_9:
  JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)v12, v28, v27, v22, v23, v24, v25, v26);
  v34 = *(uint64_t **)(a1 + 16);
  v35 = *(_QWORD *)(v9 + 16);
  if (*(_QWORD *)(v34[7] + 24) != v35)
  {
    v36 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(v9 + 16) = 0;
    v37 = (unsigned int *)(v9 + 80);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 & 0xFFFFFFEF, v37));
    JSC::JSPromise::reject(v36, v34, *(_QWORD *)(v35 + 8), v29, v30, v31, v32, v33);
  }
}

void JSC::JSWebAssemblyGlobal::destroy(JSC::JSWebAssemblyGlobal *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::JSWebAssemblyGlobal::visitChildren(JSC::Wasm::Global **this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::JSObject::visitChildren((JSC::JSObject *)this, a2, a3, a4, a5, a6, a7, a8);
  JSC::Wasm::Global::visitAggregate(this[2], a2, v10, v11, v12, v13, v14, v15);
}

void JSC::JSWebAssemblyGlobal::visitChildren(JSC::JSWebAssemblyGlobal *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD v8[2];
  uint64_t v9;
  char v10;

  v8[0] = a2;
  v8[1] = this;
  v10 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v9 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    goto LABEL_13;
  }
  *((_QWORD *)a2 + 11) = v8;
  JSC::JSObject::visitChildren(this, a2, a3);
  v6 = *((_QWORD *)this + 2);
  if (BYTE1(dword_1ECF4C7B0))
    v7 = 29;
  else
    v7 = 17;
  if ((v7 + *(_BYTE *)(v6 + 8)) <= 1u)
  {
    if (*(_QWORD *)(v6 + 32))
    {
      if ((*(_QWORD *)(v6 + 40) & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_10;
    }
    __break(0xC471u);
LABEL_13:
    JUMPOUT(0x198E44A00);
  }
LABEL_10:
  *(_QWORD *)(v8[0] + 88) = v9;
}

unint64_t JSC::JSWebAssemblyGlobal::tryCreate(uint64_t a1, JSC *this, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  unint64_t result;
  int v13;
  uint64_t v14;
  unint64_t v16;
  WTF::StringImpl **v17;
  JSC::Heap **v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  JSC::Exception *v26;
  unint64_t v27;
  uint64_t (*v28)(_QWORD *);
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];

  if (*(_BYTE *)(a1 + 3170))
  {
    v11 = (_QWORD *)*((_QWORD *)this + 5123);
    if (!v11)
      v11 = (_QWORD *)JSC::GCClient::Heap::webAssemblyGlobalSpaceSlow((JSC::Heap **)this + 4694);
    result = v11[3];
    if (result >= v11[4])
    {
      result = v11[5];
      if ((result & 1) != 0)
      {
        JSC::sanitizeStackForVM(this, this, a3, (uint64_t)a4, a5, a6, a7, a8);
        result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v11, (uint64_t)this + 192, 32, 0, 0, v30, v31, v32);
LABEL_6:
        *(_DWORD *)result = 0;
        v13 = *(_DWORD *)(a3 + 8);
        *(_DWORD *)result = a3 >> 4;
        *(_DWORD *)(result + 4) = v13;
        *(_QWORD *)(result + 8) = 0;
        v14 = *a4;
        *a4 = 0;
        *(_QWORD *)(result + 16) = v14;
        *(_QWORD *)(v14 + 32) = result;
        if (*((_BYTE *)this + 755))
          __dmb(0xAu);
        return result;
      }
      v27 = *(_QWORD *)(result + 8) ^ v11[6];
      v11[4] = result + HIDWORD(v27);
      v11[5] = result + (int)v27;
    }
    v11[3] = result + 32;
    goto LABEL_6;
  }
  v16 = *(_QWORD *)(a1 + 112);
  v17 = (WTF::StringImpl **)(a1 + 3192);
  v18 = *(JSC::Heap ***)(a1 + 56);
  if ((v16 & 1) != 0)
  {
    v28 = *(uint64_t (**)(_QWORD *))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v29 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v29 = (_QWORD *)(a1 - 16);
    v33[0] = *v29;
    v33[1] = a1;
    v33[2] = a1 + 112;
    v16 = v28(v33);
  }
  v19 = JSC::ErrorInstance::create(v18, v16, v17, 0, 0, 0, 1, 1);
  v26 = (JSC::Exception *)v19;
  if ((v19 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C)))
  {
    v26 = (JSC::Exception *)JSC::Exception::create((uint64_t)this, (JSC::VM *)v19, 0, v20, v21, v22, v23, v24);
  }
  JSC::VM::throwException(this, (JSC::JSGlobalObject *)a1, v26, v25, v20, v21, v22, v23, v24);
  return 0;
}

uint64_t JSC::JSWebAssemblyGlobal::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::JSWebAssemblyGlobal::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

int *JSC::JSWebAssemblyGlobal::type(JSC::JSWebAssemblyGlobal *this, JSC::JSGlobalObject *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC *v10;
  JSC::VM *v11;
  JSC::Structure *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  int *v72;
  int v73;
  int v74;
  uint64_t v75;

  v10 = (JSC *)*((_QWORD *)a2 + 7);
  v11 = (JSC::VM *)JSC::StructureCache::emptyObjectStructureForPrototype((JSC::JSGlobalObject *)((char *)a2 + 1968), a2, *((JSC::JSObject **)a2 + 82), 2, 0, 0, a8, a9, a3);
  v18 = (int *)JSC::constructEmptyObject(v10, v11, v12, v13, v14, v15, v16, v17);
  WTF::AtomStringImpl::addLiteral((uint64_t)"mutable", 7uLL, v19, v20, v21, v22, v23, &v71);
  v27 = v71;
  if (*(_BYTE *)(*((_QWORD *)this + 2) + 24) == 1)
    v28 = 7;
  else
    v28 = 6;
  v71 = 0;
  v72 = v18;
  v73 = -1;
  v26.n128_u64[0] = 0x100000001000000;
  v74 = 0x1000000;
  v75 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v18, (uint64_t)v10, (unint64_t)v27, v28, 0, (uint64_t)&v71, v24, v25, v26);
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v36 = JSC::Wasm::typeToJSAPIString((uint64_t)v10, *(_QWORD *)(*((_QWORD *)this + 2) + 8), *(_QWORD *)(*((_QWORD *)this + 2) + 16));
  if (!v36)
    return 0;
  v42 = v36;
  WTF::AtomStringImpl::addLiteral((uint64_t)"value", 5uLL, v37, v38, v39, v40, v41, &v71);
  v43 = v71;
  v71 = 0;
  v72 = v18;
  v73 = -1;
  v44.n128_u64[0] = 0x100000001000000;
  v74 = 0x1000000;
  v75 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v18, (uint64_t)v10, (unint64_t)v43, v42, 0, (uint64_t)&v71, v45, v46, v44);
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v47, v48, v49, v50, v51, v52, v53);
      WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  return v18;
}

uint64_t JSC::Wasm::typeToJSAPIString(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;

  switch(a2)
  {
    case 0xFBu:
      v4 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v4 = 0x400000002;
      v11 = "v128";
      goto LABEL_22;
    case 0xFCu:
      v4 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v4 = 0x300000002;
      v11 = "f64";
      goto LABEL_22;
    case 0xFDu:
      v4 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v4 = 0x300000002;
      v11 = "f32";
      goto LABEL_22;
    case 0xFEu:
      v4 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v4 = 0x300000002;
      v11 = "i64";
      goto LABEL_22;
    case 0xFFu:
      v4 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v4 = 0x300000002;
      v11 = "i32";
      goto LABEL_22;
    default:
      if (!BYTE1(dword_1ECF4C7B0))
      {
        v13 = a2;
        if (a2 != 240)
          goto LABEL_13;
        goto LABEL_10;
      }
      v12 = a2 + 29;
      if ((a2 + 29) <= 1u && a3 == -16)
      {
LABEL_10:
        if (a2 - 239 < 2 || a2 == 227)
        {
          v4 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v4 = 0x700000002;
          v11 = "funcref";
          goto LABEL_22;
        }
        if (BYTE1(dword_1ECF4C7B0))
        {
          v12 = a2 + 29;
          goto LABEL_18;
        }
        v13 = a2;
LABEL_13:
        if (v13 != 239)
          return 0;
        goto LABEL_20;
      }
LABEL_18:
      v14 = 0;
      if (v12 > 1u || a3 != -17)
        return v14;
LABEL_20:
      if (a2 - 239 >= 2 && a2 != 227)
        return 0;
      v4 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v4 = 0x900000002;
      v11 = "externref";
LABEL_22:
      *(_QWORD *)(v4 + 8) = v11;
      *(_DWORD *)(v4 + 16) = 4;
      v32 = (WTF::StringImpl *)v4;
      v14 = JSC::jsNontrivialString(a1, (JSC::VM *)&v32, v5, v6, v7, v8, v9, v10);
      v22 = v32;
      v32 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::~StringImpl(v22, v15, v16, v17, v18, v19, v20, v21);
          WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
        }
        else
        {
          *(_DWORD *)v22 -= 2;
        }
      }
      return v14;
  }
}

_QWORD *JSC::JSWebAssemblyInstance::visitChildren(JSC::Wasm::Instance **this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  JSC::Wasm::Instance *v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  JSC::Wasm::Instance *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::Wasm::Instance *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t I64Global;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v70;
  int v71;
  int v72;
  unint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v85;
  uint64_t v86;
  unint64_t *v88;
  uint64_t v89;

  JSC::JSObject::visitChildren((JSC::JSObject *)this, a2, a3, a4, a5, a6, a7, a8);
  v16 = (unint64_t)this[5];
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      v17 = 0;
      if ((*(_BYTE *)(v16 - 79) & 1) != 0)
      {
LABEL_4:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_5;
      }
    }
    else
    {
      v17 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + v17 + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
        goto LABEL_4;
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, v17, v11, v12, v13, v14, v15);
  }
LABEL_5:
  v18 = (unint64_t)this[6];
  if (!v18)
    goto LABEL_9;
  if ((v18 & 8) != 0)
  {
    v19 = 0;
    if ((*(_BYTE *)(v18 - 79) & 1) != 0)
    {
LABEL_8:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_9;
    }
  }
  else
  {
    v19 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + v19 + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) != 0)
      goto LABEL_8;
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v18, v19, v11, v12, v13, v14, v15);
LABEL_9:
  v20 = (unint64_t)this[7];
  if (!v20)
    goto LABEL_13;
  if ((v20 & 8) != 0)
  {
    v21 = 0;
    if ((*(_BYTE *)(v20 - 79) & 1) != 0)
    {
LABEL_12:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_13;
    }
  }
  else
  {
    v21 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + v21 + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) != 0)
      goto LABEL_12;
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v20, v21, v11, v12, v13, v14, v15);
LABEL_13:
  v22 = this[8];
  if (v22)
    v23 = (unint64_t *)((char *)v22 + 8);
  else
    v23 = 0;
  if (v22)
    v24 = (uint64_t)v22 + 8 * *(unsigned int *)v22 + 8;
  else
    v24 = 0;
  while (v23 != (unint64_t *)v24)
  {
    v25 = *v23;
    if (!*v23)
      goto LABEL_23;
    if ((v25 & 8) != 0)
    {
      v26 = 0;
      if ((*(_BYTE *)(v25 - 79) & 1) != 0)
      {
LABEL_22:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_23;
      }
    }
    else
    {
      v26 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v25 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v25 & 0xFFFFFFFFFFFFC000) + v26 + 8 * ((v25 >> 10) & 0xF) + 0x28) >> (v25 >> 4)) & 1) != 0)
        goto LABEL_22;
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v25, v26, v11, v12, v13, v14, v15);
LABEL_23:
    ++v23;
  }
  v27 = JSC::Wasm::Instance::extraMemoryAllocated(this[2]);
  if (*((_BYTE *)a2 + 184))
  {
    *((_QWORD *)a2 + 18) += v27;
    v34 = *((_QWORD *)a2 + 20);
    v35 = __CFADD__(v34, v27);
    v36 = v34 + v27;
    if (v35)
      *((_BYTE *)a2 + 152) = 1;
    else
      *((_QWORD *)a2 + 20) = v36;
  }
  v37 = this[2];
  if (*((_DWORD *)v37 + 28))
  {
    v38 = 0;
    v39 = 176;
    do
    {
      v40 = *(_QWORD *)((char *)v37 + v39);
      if (v40)
      {
        if ((v40 & 8) != 0)
        {
          v41 = 0;
          if ((*(_BYTE *)(v40 - 79) & 1) == 0)
          {
LABEL_67:
            JSC::SlotVisitor::appendSlow((uint64_t)a2, v40, v41, v29, v30, v31, v32, v33);
            goto LABEL_33;
          }
        }
        else
        {
          v41 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v40 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v28, v29, v30, v31, v32, v33);
          if (((*(_QWORD *)((v40 & 0xFFFFFFFFFFFFC000) + v41 + 8 * ((v40 >> 10) & 0xF) + 0x28) >> (v40 >> 4)) & 1) == 0)
            goto LABEL_67;
        }
        if (*((_QWORD *)a2 + 21))
          goto LABEL_67;
      }
LABEL_33:
      ++v38;
      v37 = this[2];
      v39 += 120;
    }
    while (v38 < *((unsigned int *)v37 + 28));
  }
  v88 = (unint64_t *)WTF::BitVector::begin((uint64_t *)v37 + 13);
  v89 = v42;
  v49 = *((_QWORD *)v37 + 13);
  if (v49 < 0)
    v50 = 63;
  else
    v50 = *(_QWORD *)(2 * v49);
  while (v42 != v50)
  {
    v51 = *(_QWORD *)(*((_QWORD *)this[2] + 10) + 16 * v42);
    if (v51)
    {
      v73 = *(_QWORD *)(v51 - 8);
      if (v73)
      {
        if ((v73 & 8) != 0)
        {
          v74 = 0;
          if ((*(_BYTE *)(v73 - 79) & 1) != 0)
            goto LABEL_60;
        }
        else
        {
          v74 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v73 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v43, v44, v45, v46, v47, v48);
          if (((*(_QWORD *)((v73 & 0xFFFFFFFFFFFFC000) + v74 + 8 * ((v73 >> 10) & 0xF) + 0x28) >> (v73 >> 4)) & 1) != 0)
          {
LABEL_60:
            if (!*((_QWORD *)a2 + 21))
              goto LABEL_38;
          }
        }
        JSC::SlotVisitor::appendSlow((uint64_t)a2, v73, v74, v44, v45, v46, v47, v48);
      }
    }
LABEL_38:
    WTF::BitVector::iterator::operator++(&v88);
    v42 = v89;
  }
  v52 = this[2];
  v88 = (unint64_t *)WTF::BitVector::begin((uint64_t *)v52 + 12);
  v89 = v53;
  v60 = *((_QWORD *)v52 + 12);
  if (v60 < 0)
    v61 = 63;
  else
    v61 = *(_QWORD *)(2 * v60);
  while (2)
  {
    if (v53 != v61)
    {
      I64Global = JSC::Wasm::Instance::loadI64Global(this[2], v53);
      if ((I64Global & 0xFFFE000000000002) == 0 && I64Global != 0)
      {
        v75 = I64Global;
        if ((I64Global & 8) != 0)
        {
          v76 = 0;
          if ((*(_BYTE *)(v75 - 79) & 1) == 0)
            goto LABEL_65;
LABEL_64:
          if (*((_QWORD *)a2 + 21))
            goto LABEL_65;
        }
        else
        {
          v76 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(I64Global & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v63, v64, v65, v66, v67, v68);
          if (((*(_QWORD *)((v75 & 0xFFFFFFFFFFFFC000) + v76 + 8 * ((v75 >> 10) & 0xF) + 0x28) >> (v75 >> 4)) & 1) != 0)
            goto LABEL_64;
LABEL_65:
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v75, v76, v64, v65, v66, v67, v68);
        }
      }
      WTF::BitVector::iterator::operator++(&v88);
      v53 = v89;
      continue;
    }
    break;
  }
  v88 = (unint64_t *)this;
  v70 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v71 = *v70;
    if ((v71 & 0x40) != 0)
      break;
    v72 = __ldaxr(v70);
    if (v72 == v71)
    {
      if (!__stxr(v71 | 0x40, v70))
        goto LABEL_69;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v70);
LABEL_69:
  v77 = *((_QWORD *)this[2] + 11);
  if (!v77)
  {
    v80 = 0;
    v78 = 0;
    goto LABEL_77;
  }
  v78 = *(unsigned int *)(v77 - 4);
  v79 = v77 + 16 * v78;
  if (!*(_DWORD *)(v77 - 12))
  {
    v80 = v77 + 16 * v78;
LABEL_77:
    v79 = v77 + 16 * v78;
    goto LABEL_78;
  }
  v80 = *((_QWORD *)this[2] + 11);
  if ((_DWORD)v78)
  {
    v81 = 16 * v78;
    v80 = *((_QWORD *)this[2] + 11);
    while (*(_DWORD *)v80 >= 0xFFFFFFFE)
    {
      v80 += 16;
      v81 -= 16;
      if (!v81)
      {
        v80 = v79;
        break;
      }
    }
  }
LABEL_78:
  if (v77)
    v82 = v77 + 16 * *(unsigned int *)(v77 - 4);
  else
    v82 = 0;
  if (v82 != v80)
  {
    while (2)
    {
      v83 = *(_QWORD *)(v80 + 8);
      if ((v83 & 0xFFFE000000000002) == 0 && v83 != 0)
      {
        if ((v83 & 8) != 0)
        {
          v85 = 0;
          if ((*(_BYTE *)(v83 - 79) & 1) == 0)
            goto LABEL_98;
LABEL_87:
          if (*((_QWORD *)a2 + 21))
            goto LABEL_98;
        }
        else
        {
          v85 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v83 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v54, v55, v56, v57, v58, v59);
          if (((*(_QWORD *)((v83 & 0xFFFFFFFFFFFFC000) + v85 + 8 * ((v83 >> 10) & 0xF) + 0x28) >> (v83 >> 4)) & 1) != 0)
            goto LABEL_87;
LABEL_98:
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v83, v85, v55, v56, v57, v58, v59);
        }
      }
      v86 = v80 + 16;
      v80 = v79;
      if (v86 != v79)
      {
        v80 = v86;
        while (*(_DWORD *)v80 >= 0xFFFFFFFE)
        {
          v80 += 16;
          if (v80 == v79)
          {
            v80 = v79;
            break;
          }
        }
      }
      if (v80 == v82)
        return WTF::Locker<JSC::JSCellLock,void>::~Locker(&v88, v53, v54, v55, v56, v57, v58, v59);
      continue;
    }
  }
  return WTF::Locker<JSC::JSCellLock,void>::~Locker(&v88, v53, v54, v55, v56, v57, v58, v59);
}

void JSC::JSWebAssemblyInstance::visitChildren(JSC::Wasm::Instance **this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  JSC::Wasm::Instance *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Wasm::Instance *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  uint64_t I64Global;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  _QWORD v69[2];
  uint64_t v70;
  char v71;

  v69[0] = a2;
  v69[1] = this;
  v71 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v70 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198E45C14);
  }
  *((_QWORD *)a2 + 11) = v69;
  JSC::JSObject::visitChildren((JSC::JSObject *)this, a2, a3);
  (*(void (**)(JSC::JSCell *, JSC::Wasm::Instance *))(*(_QWORD *)a2 + 24))(a2, this[5]);
  (*(void (**)(JSC::JSCell *, JSC::Wasm::Instance *))(*(_QWORD *)a2 + 24))(a2, this[6]);
  (*(void (**)(JSC::JSCell *, JSC::Wasm::Instance *))(*(_QWORD *)a2 + 24))(a2, this[7]);
  v6 = this[8];
  if (v6)
    v7 = (uint64_t *)((char *)v6 + 8);
  else
    v7 = 0;
  if (v6)
    v8 = (uint64_t)v6 + 8 * *(unsigned int *)v6 + 8;
  else
    v8 = 0;
  while (v7 != (uint64_t *)v8)
  {
    v9 = *v7++;
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v9);
  }
  v10 = JSC::Wasm::Instance::extraMemoryAllocated(this[2]);
  (*(void (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 96))(a2, v10);
  v17 = this[2];
  if (*((_DWORD *)v17 + 28))
  {
    v18 = 0;
    v19 = 176;
    do
    {
      (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)((char *)v17 + v19));
      ++v18;
      v17 = this[2];
      v19 += 120;
    }
    while (v18 < *((unsigned int *)v17 + 28));
  }
  v20 = *((_QWORD *)v17 + 13);
  if ((v20 & 0x8000000000000000) != 0)
  {
    v58 = __clz(__rbit64(v20));
    v21 = 63;
    if (v58 >= 0x3F)
      v25 = 63;
    else
      v25 = v58;
LABEL_20:
    if (v25 == v21)
      goto LABEL_39;
    while (1)
    {
      v26 = *(_QWORD *)(*((_QWORD *)this[2] + 10) + 16 * v25);
      if (v26)
      {
        (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(v26 - 8));
        v20 = *((_QWORD *)v17 + 13);
      }
      v27 = v25 + 1;
      if ((v20 & 0x8000000000000000) != 0)
      {
        v33 = __clz(__rbit64(v20 >> v27)) + v27;
        if (v33 >= 0x3F)
          v25 = 63;
        else
          v25 = v33;
        goto LABEL_28;
      }
      v25 = *(_QWORD *)(2 * v20);
      v28 = v25 + 63;
      v29 = v27 >> 6;
      if (v27 >> 6 < (unint64_t)(v25 + 63) >> 6)
      {
        v30 = *(_QWORD *)(2 * v20 + 8 * v29 + 8);
        if (!v30 || (v31 = __clz(__rbit64(v30 >> v27)) + (v27 & 0x3F), v31 >= 0x40))
        {
          if (v29 + 1 == v28 >> 6)
            goto LABEL_28;
          while (1)
          {
            v32 = *(_QWORD *)(2 * v20 + 0x10 + 8 * v29);
            if (v32)
            {
              v31 = __clz(__rbit64(v32));
              if (v31 <= 0x3F)
                break;
            }
            if ((v28 >> 6) - 1 == ++v29)
              goto LABEL_28;
          }
          ++v29;
        }
        v25 = v31 + (v29 << 6);
      }
LABEL_28:
      if (v25 == v21)
      {
        v17 = this[2];
        goto LABEL_39;
      }
    }
  }
  v21 = *(_QWORD *)(2 * v20);
  if ((unint64_t)(v21 + 63) < 0x40)
    goto LABEL_39;
  v22 = *(_QWORD *)(2 * v20 + 8);
  if (v22)
  {
    v23 = __clz(__rbit64(v22));
    if (v23 < 0x40)
    {
      v24 = 0;
LABEL_19:
      v25 = v23 + (v24 << 6);
      goto LABEL_20;
    }
  }
  if ((unint64_t)(v21 + 63) >> 6 != 1)
  {
    v54 = 0;
    while (1)
    {
      v55 = *(_QWORD *)(2 * v20 + 0x10 + 8 * v54);
      if (v55)
      {
        v23 = __clz(__rbit64(v55));
        if (v23 <= 0x3F)
          break;
      }
      if (((unint64_t)(v21 + 63) >> 6) - 1 == ++v54)
        goto LABEL_39;
    }
    v24 = v54 + 1;
    goto LABEL_19;
  }
LABEL_39:
  v34 = *((_QWORD *)v17 + 12);
  if ((v34 & 0x8000000000000000) != 0)
  {
    v59 = __clz(__rbit64(v34));
    v35 = 63;
    if (v59 >= 0x3F)
      v39 = 63;
    else
      v39 = v59;
    goto LABEL_45;
  }
  v35 = *(_QWORD *)(2 * v34);
  if ((unint64_t)(v35 + 63) >= 0x40)
  {
    v36 = *(_QWORD *)(2 * v34 + 8);
    if (v36 && (v37 = __clz(__rbit64(v36)), v37 < 0x40))
    {
      v38 = 0;
    }
    else
    {
      if ((unint64_t)(v35 + 63) >> 6 == 1)
        goto LABEL_46;
      v56 = 0;
      while (1)
      {
        v57 = *(_QWORD *)(2 * v34 + 0x10 + 8 * v56);
        if (v57)
        {
          v37 = __clz(__rbit64(v57));
          if (v37 <= 0x3F)
            break;
        }
        if (((unint64_t)(v35 + 63) >> 6) - 1 == ++v56)
          goto LABEL_46;
      }
      v38 = v56 + 1;
    }
    v39 = v37 + (v38 << 6);
LABEL_45:
    if (v39 == v35)
      goto LABEL_46;
    do
    {
      I64Global = JSC::Wasm::Instance::loadI64Global(this[2], v39);
      if ((I64Global & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, I64Global);
      v44 = v39 + 1;
      v45 = *((_QWORD *)v17 + 12);
      if ((v45 & 0x8000000000000000) != 0)
      {
        v53 = __clz(__rbit64(v45 >> v44)) + v44;
        if (v53 >= 0x3F)
          v39 = 63;
        else
          v39 = v53;
        continue;
      }
      v46 = 2 * v45;
      v39 = *(_QWORD *)(2 * v45);
      v47 = v39 + 63;
      v48 = v44 >> 6;
      if (v44 >> 6 < (unint64_t)(v39 + 63) >> 6)
      {
        v49 = *(_QWORD *)(v46 + 8 * v48 + 8);
        if (!v49 || (v50 = __clz(__rbit64(v49 >> v44)) + (v44 & 0x3F), v50 >= 0x40))
        {
          if (v48 + 1 == v47 >> 6)
            continue;
          v51 = v46 + 16;
          while (1)
          {
            v52 = *(_QWORD *)(v51 + 8 * v48);
            if (v52)
            {
              v50 = __clz(__rbit64(v52));
              if (v50 <= 0x3F)
                break;
            }
            if ((v47 >> 6) - 1 == ++v48)
              goto LABEL_59;
          }
          ++v48;
        }
        v39 = v50 + (v48 << 6);
      }
LABEL_59:
      ;
    }
    while (v39 != v35);
  }
LABEL_46:
  v40 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v41 = *v40;
    if ((v41 & 0x40) != 0)
      break;
    v42 = __ldaxr(v40);
    if (v42 == v41)
    {
      if (!__stxr(v41 | 0x40, v40))
        goto LABEL_92;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_92:
  v60 = *((_QWORD *)this[2] + 11);
  if (!v60)
  {
    v63 = 0;
    v61 = 0;
    goto LABEL_100;
  }
  v61 = *(unsigned int *)(v60 - 4);
  v62 = v60 + 16 * v61;
  if (!*(_DWORD *)(v60 - 12))
  {
    v63 = v60 + 16 * v61;
LABEL_100:
    v62 = v60 + 16 * v61;
    goto LABEL_101;
  }
  v63 = *((_QWORD *)this[2] + 11);
  if ((_DWORD)v61)
  {
    v64 = 16 * v61;
    v63 = *((_QWORD *)this[2] + 11);
    while (*(_DWORD *)v63 >= 0xFFFFFFFE)
    {
      v63 += 16;
      v64 -= 16;
      if (!v64)
      {
        v63 = v62;
        break;
      }
    }
  }
LABEL_101:
  if (v60)
    v65 = v60 + 16 * *(unsigned int *)(v60 - 4);
  else
    v65 = 0;
  if (v65 == v63)
  {
LABEL_114:
    while (1)
    {
      v67 = *v40;
      if ((v67 & 0xC0) != 0x40)
        break;
      v68 = __ldxr(v40);
      if (v68 == v67)
      {
        if (!__stxr(v67 & 0xBF, v40))
          goto LABEL_113;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 4, 0, v11, v12, v13, v14, v15, v16);
  }
  else
  {
    do
    {
      if ((*(_QWORD *)(v63 + 8) & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
      v66 = v63 + 16;
      v63 = v62;
      if (v66 != v62)
      {
        v63 = v66;
        while (*(_DWORD *)v63 >= 0xFFFFFFFE)
        {
          v63 += 16;
          if (v63 == v62)
          {
            v63 = v62;
            break;
          }
        }
      }
    }
    while (v63 != v65);
    if (this)
      goto LABEL_114;
  }
LABEL_113:
  *(_QWORD *)(v69[0] + 88) = v70;
}

uint64_t JSC::JSWebAssemblyInstance::JSWebAssemblyInstance(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  v7 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)a1 = a3 >> 4;
  *(_DWORD *)(a1 + 4) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = a6;
  *(_QWORD *)(a1 + 56) = 0;
  v9 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v8 + 56) + 8) + 204);
  if ((_DWORD)v9)
  {
    v10 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v9 + 8));
    *v10 = v9;
    bzero(v10 + 2, 8 * v9);
    v8 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(v8 + 24) = a1;
  return a1;
}

void JSC::JSWebAssemblyInstance::finishCreation(JSC::Wasm::Instance **this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v4 = JSC::Wasm::Instance::extraMemoryAllocated(this[2]);
  if (v4 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)a2 + 192, 0, (uint64_t)this, v4, v5, v6, v7, v8);
}

void JSC::JSWebAssemblyInstance::~JSWebAssemblyInstance(JSC::JSWebAssemblyInstance *this, uint8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  JSC::JSWebAssemblyInstance::clearJSCallICs(this, *((JSC::VM **)this + 3), a2, a4, a5, a6, a7, a8, a9);
  v17 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v17)
    WTF::fastFree(v17, v10, v11, v12, v13, v14, v15, v16);
  WTF::Ref<JSC::Wasm::Instance,WTF::RawPtrTraits<JSC::Wasm::Instance>,WTF::DefaultRefDerefTraits<JSC::Wasm::Instance>>::~Ref((unsigned __int8 ***)this + 2, v10, v11, v12, v13, v14, v15, v16);
}

void JSC::JSWebAssemblyInstance::clearJSCallICs(JSC::JSWebAssemblyInstance *this, JSC::VM *a2, uint8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t v12;
  uint64_t v13;

  v9 = *((_QWORD *)this + 2);
  if (*(_DWORD *)(v9 + 112))
  {
    v12 = 0;
    v13 = 192;
    do
    {
      JSC::CallLinkInfoBase::unlinkOrUpgrade((JSC::CallLinkInfoBase *)(v9 + v13), a2, 0, 0, a6, a7, a8, a9, a3);
      ++v12;
      v9 = *((_QWORD *)this + 2);
      v13 += 120;
    }
    while (v12 < *(unsigned int *)(v9 + 112));
  }
}

unsigned __int8 ***WTF::Ref<JSC::Wasm::Instance,WTF::RawPtrTraits<JSC::Wasm::Instance>,WTF::DefaultRefDerefTraits<JSC::Wasm::Instance>>::~Ref(unsigned __int8 ***a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v18;
  _QWORD v19[2];
  BOOL v20;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *v9;
    if (__ldaxr(*v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, v10))
    {
      goto LABEL_6;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
LABEL_6:
    v12 = *((_QWORD *)v10 + 1);
    v13 = v12 - 1;
    *((_QWORD *)v10 + 1) = v12 - 1;
    if (v12 == 1)
    {
      v18 = *((_QWORD *)v10 + 2);
      v15 = *((_QWORD *)v10 + 3);
      *((_QWORD *)v10 + 3) = 0;
      v14 = v18 == 0;
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v16 = __ldxr(v10);
    if (v16 == 1)
    {
      if (!__stlxr(0, v10))
      {
        if (v13)
          return a1;
LABEL_14:
        v19[0] = v10;
        v19[1] = v15;
        v20 = v14;
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)v19, a2, a3, a4, a5, a6, a7, a8);
        return a1;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
    if (v13)
      return a1;
    goto LABEL_14;
  }
  return a1;
}

void JSC::JSWebAssemblyInstance::initializeImports(unint64_t *a1, JSC::JSGlobalObject *a2, unsigned int *a3, int a4)
{
  JSC::VM *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  JSC::WebAssemblyModuleRecord::prepareLink(a1[6], v8, (JSC::JSWebAssemblyInstance *)a1);
  if (!a4)
  {
    JSC::WebAssemblyModuleRecord::link(a1[6], (unint64_t)a2);
    if (!*((_DWORD *)v8 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v8, v9, v10, v11, v12, v13, v14, v15))
    {
      JSC::WebAssemblyModuleRecord::initializeImports((JSC::JSWebAssemblyInstance **)a1[6], a2, a3, 0);
      if (*((_DWORD *)v8 + 20))
        JSC::VM::hasExceptionsAfterHandlingTraps(v8, v16, v17, v18, v19, v20, v21, v22);
    }
  }
}

void JSC::JSWebAssemblyInstance::finalizeCreation(uint64_t a1, uint64_t a2, JSC::JSGlobalObject *a3, uint64_t *a4, int a5)
{
  unsigned __int8 v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const WTF::String *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;

  v8 = atomic_load((unsigned __int8 *)(*a4 + 112));
  if ((v8 & 1) == 0 || *(_QWORD *)(*a4 + 120))
  {
    WTF::String::isolatedCopy((_DWORD *)(*a4 + 120), (uint64_t *)&v60);
    v38 = JSC::createJSWebAssemblyLinkError((unint64_t)a3, (JSC::Heap **)a2, &v60, v37);
    JSC::VM::throwException((JSC::VM *)a2, a3, v38, v39, v40, v41, v42, v43);
    v51 = v60;
    v60 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v44, v45, v46, v47, v48, v49, v50);
        WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
    }
  }
  else
  {
    if ((JSC::Wasm::CalleeGroup::isSafeToRun(*a4, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 8) + 6)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198E4617CLL);
    }
    if ((_BYTE)dword_1ECF4C702)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16);
      if (*(_BYTE *)(*(_QWORD *)(v17 + 8) + 113))
        JSC::Wasm::Module::copyInitialCalleeGroupToAllMemoryModes(v17, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 8) + 6), v11, v12, v13, v14, v15, v16);
    }
    v18 = *(_QWORD *)(a1 + 16);
    if (*(_DWORD *)(v18 + 112))
    {
      v19 = 0;
      v20 = 0;
      v21 = 2;
      do
      {
        if (*(_QWORD *)(v18 + v19 + 152))
        {
          v22 = *(unsigned int **)(*a4 + 72);
          if (v20 >= *v22)
          {
            __break(0xC471u);
            JUMPOUT(0x198E4609CLL);
          }
        }
        else
        {
          v22 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) + 48);
          if (v20 >= *v22)
          {
            __break(0xC471u);
            JUMPOUT(0x198E4615CLL);
          }
        }
        *(_QWORD *)(v18 + v19 + 168) = *(_QWORD *)&v22[v21];
        ++v20;
        v18 = *(_QWORD *)(a1 + 16);
        v19 += 120;
        v21 += 4;
      }
      while (v20 < *(unsigned int *)(v18 + 112));
    }
    if (!a5)
    {
      JSC::WebAssemblyModuleRecord::initializeExports(*(JSC::WebAssemblyModuleRecord **)(a1 + 48), a3);
      if (!*(_DWORD *)(a2 + 80)
        || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a2, v23, v24, v25, v26, v27, v28, v29))
      {
        JSC::WebAssemblyModuleRecord::evaluate(*(JSC::WebAssemblyModuleRecord **)(a1 + 48), a3, v24, v25, v26, v27, v28, v29);
        if (*(_DWORD *)(a2 + 80))
          JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a2, v30, v31, v32, v33, v34, v35, v36);
      }
    }
  }
}

unint64_t JSC::createJSWebAssemblyLinkError(unint64_t this, JSC::Heap **a2, WTF::StringImpl **a3, const WTF::String *a4)
{
  unint64_t v6;
  uint64_t (*v8)(_QWORD *);
  _QWORD *v9;
  _QWORD v10[3];

  v6 = *(_QWORD *)(this + 1360);
  if ((v6 & 1) != 0)
  {
    v8 = *(uint64_t (**)(_QWORD *))(v6 & 0xFFFFFFFFFFFFFFFCLL);
    v9 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v9 = (_QWORD *)(this - 16);
    v10[0] = *v9;
    v10[1] = this;
    v10[2] = this + 1360;
    v6 = v8(v10);
  }
  return JSC::ErrorInstance::create(a2, v6, a3, 0, (uint64_t)JSC::defaultSourceAppender, 0, 0, 1);
}

uint64_t JSC::JSWebAssemblyModule::module(JSC::JSWebAssemblyModule *this)
{
  return *((_QWORD *)this + 2);
}

void JSC::JSWebAssemblyInstance::createPrivateModuleKey(WTF::StringImpl **a1@<X8>)
{
  uint64_t v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;

  v3 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v3 = 0x1300000002;
  *(_QWORD *)(v3 + 8) = "WebAssemblyInstance";
  *(_DWORD *)(v3 + 16) = 4;
  WTF::SymbolImpl::create((WTF::SymbolImpl *)v3, &v29);
  v11 = v29;
  v12 = *(_DWORD *)v29;
  *(_DWORD *)v29 += 2;
  *a1 = v11;
  v29 = 0;
  if (v12)
  {
    *(_DWORD *)v11 = v12;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v11, v4, v5, v6, v7, v8, v9, v10);
    WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  if (*(_DWORD *)v3 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v3, v4, v5, v6, v7, v8, v9, v10);
    WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
  }
  else
  {
    *(_DWORD *)v3 -= 2;
  }
}

JSC::JSWebAssemblyInstance *JSC::JSWebAssemblyInstance::tryCreate(JSC::Heap **a1, WTF::StringImpl **this, JSC::Structure *a3, const WTF::String *a4, uint64_t a5, unint64_t a6, uint64_t *a7, int a8)
{
  uint64_t v16;
  JSC::VM *v17;
  const JSC::Wasm::ModuleInformation *v18;
  uint64_t v19;
  uint64_t v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  JSC::Wasm::Instance **v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  WTF *v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  int v57;
  WTF *v58;
  WTF *v59;
  WTF *v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  int v69;
  WTF *v70;
  WTF::StringImpl *v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  WTF::StringImpl *v154;
  BOOL v155;
  JSC::JSWebAssemblyInstance *v156;
  JSC::VM *v157;
  JSC::Structure *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  JSC::JSWebAssemblyMemory *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  JSC::Wasm::Memory *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t JSWebAssemblyCompileError;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  JSC::VM *v191;
  JSC::Structure *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  JSC::JSWebAssemblyMemory *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  JSC::JSWebAssemblyMemory *v205;
  unsigned int v206;
  unsigned int v207;
  int v208;
  _QWORD *v209;
  JSC::JSGlobalObject *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  WTF::StringImpl *v217;
  JSC::Wasm::Memory *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  JSC::Wasm::Memory *v227;
  uint64_t v228;
  const WTF::String *v229;
  unint64_t TypeError;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  WTF::AtomStringImpl *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  WTF::StringImpl *v243;
  unint64_t OutOfMemoryError;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  JSC::JSWebAssemblyInstance *v258;
  WTF::StringImpl *v259;
  WTF::StringImpl *v260[4];
  uint64_t v261[2];
  char v262;
  WTF *v263;
  int v264;
  int v265;
  WTF *v266;
  int v267;
  int v268;
  WTF::StringImpl *v269;
  WTF::StringImpl **v270;

  if (!*((_BYTE *)this + 3170))
  {
    JSWebAssemblyCompileError = JSC::createJSWebAssemblyCompileError((unint64_t)this, a1, this + 399, a4);
    JSC::VM::throwException((JSC::VM *)a1, (JSC::JSGlobalObject *)this, JSWebAssemblyCompileError, v186, v187, v188, v189, v190);
    return 0;
  }
  v16 = *(_QWORD *)(*((_QWORD *)a4 + 2) + 8);
  v17 = (JSC::VM *)JSC::LazyClassStructure::get((JSC::LazyClassStructure *)(this + 157), (unint64_t)this);
  v28 = JSC::WebAssemblyModuleRecord::create((JSC::WebAssemblyModuleRecord *)this, (JSC::JSGlobalObject *)a1, v17, a3, (const JSC::Identifier *)v16, v18, v19, v20);
  if (*((_DWORD *)a1 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a1, (uint64_t)v21, v22, v23, v24, v25, v26, v27))
  {
    return 0;
  }
  v29 = (JSC::Wasm::Instance **)JSC::allocateCell<JSC::JSWebAssemblyInstance>((JSC *)a1, v21, v22, v23, v24, v25, v26, v27);
  JSC::Wasm::Instance::create(a1, (uint64_t)this, a7, v260);
  JSC::JSWebAssemblyInstance::JSWebAssemblyInstance((uint64_t)v29, (uint64_t)a1, a6, (uint64_t *)v260, (uint64_t)a4, v28);
  WTF::Ref<JSC::Wasm::Instance,WTF::RawPtrTraits<JSC::Wasm::Instance>,WTF::DefaultRefDerefTraits<JSC::Wasm::Instance>>::~Ref((unsigned __int8 ***)v260, v30, v31, v32, v33, v34, v35, v36);
  JSC::JSWebAssemblyInstance::finishCreation(v29, (JSC::VM *)a1);
  if (*((_DWORD *)a1 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a1, (uint64_t)v37, v38, v39, v40, v41, v42, v43))
      return 0;
  }
  v44 = *(unsigned int *)(v16 + 20);
  if (!a8 && !a5 && (_DWORD)v44)
  {
    v228 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v228 = 0x6E00000002;
    *(_QWORD *)(v228 + 8) = "can't make WebAssembly.Instance because there is no imports Object and the WebAssembly.Modul"
                            "e requires imports";
    *(_DWORD *)(v228 + 16) = 4;
    v260[0] = (WTF::StringImpl *)v228;
    TypeError = JSC::createTypeError((unint64_t)this, v260, v229);
    JSC::VM::throwException((JSC::VM *)a1, (JSC::JSGlobalObject *)this, TypeError, v231, v232, v233, v234, v235);
    v243 = v260[0];
    v260[0] = 0;
    if (v243)
    {
      if (*(_DWORD *)v243 == 2)
      {
        WTF::StringImpl::~StringImpl(v243, v236, v237, v238, v239, v240, v241, v242);
        WTF::fastFree(v250, v251, v252, v253, v254, v255, v256, v257);
      }
      else
      {
        *(_DWORD *)v243 -= 2;
      }
    }
    return 0;
  }
  v258 = (JSC::JSWebAssemblyInstance *)v29;
  v270 = 0;
  if ((_DWORD)v44)
  {
    v45 = 40 * v44;
    v46 = *(_QWORD *)(v16 + 8) + 16;
    do
    {
      v47 = (WTF *)*(unsigned int *)(v46 - 4);
      v266 = 0;
      v267 = 0;
      v268 = (int)v47;
      if ((_DWORD)v47)
      {
        v48 = (WTF *)WTF::fastMalloc(v47);
        v267 = (int)v47;
        v266 = v48;
        memcpy(v48, *(const void **)(v46 - 16), *(unsigned int *)(v46 - 4));
      }
      WTF::makeAtomString<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v266, (WTF::AtomString *)v260);
      v56 = v260[0];
      if (v260[0])
      {
        v57 = *(_DWORD *)v260[0];
        *(_DWORD *)v260[0] += 2;
        v269 = v56;
        v260[0] = 0;
        if (v57)
        {
          *(_DWORD *)v56 = v57;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v56, v49, v50, v51, v52, v53, v54, v55);
          WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
        }
      }
      else
      {
        v269 = 0;
        v260[0] = 0;
      }
      v58 = v266;
      if (v266)
      {
        v266 = 0;
        v267 = 0;
        WTF::fastFree((unint64_t)v58, v49, v50, v51, v52, v53, v54, v55);
      }
      v59 = (WTF *)*(unsigned int *)(v46 + 12);
      v263 = 0;
      v264 = 0;
      v265 = (int)v59;
      if ((_DWORD)v59)
      {
        v60 = (WTF *)WTF::fastMalloc(v59);
        v264 = (int)v59;
        v263 = v60;
        memcpy(v60, *(const void **)v46, *(unsigned int *)(v46 + 12));
      }
      WTF::makeAtomString<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v263, (WTF::AtomString *)v260);
      v68 = v260[0];
      if (v260[0])
      {
        v69 = *(_DWORD *)v260[0];
        *(_DWORD *)v260[0] += 2;
        v260[0] = 0;
        if (v69)
        {
          *(_DWORD *)v68 = v69;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v68, v61, v62, v63, v64, v65, v66, v67);
          WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
        }
      }
      else
      {
        v260[0] = 0;
      }
      v70 = v263;
      if (v263)
      {
        v263 = 0;
        v264 = 0;
        WTF::fastFree((unint64_t)v70, v61, v62, v63, v64, v65, v66, v67);
      }
      v71 = v269;
      if (v269)
        *(_DWORD *)v269 += 2;
      v260[0] = v71;
      WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add((uint64_t *)&v270, (WTF::AtomStringImpl *)v260, v62, v63, v64, v65, v66, v67, (uint64_t)v261);
      v79 = v260[0];
      v260[0] = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2)
        {
          WTF::StringImpl::~StringImpl(v79, v72, v73, v74, v75, v76, v77, v78);
          WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
        }
        else
        {
          *(_DWORD *)v79 -= 2;
        }
      }
      if (v262)
      {
        v260[0] = 0;
        JSC::AbstractModuleRecord::appendRequestedModule(v28, (WTF::AtomStringImpl *)&v269, v260, v74, v75, v76, v77, v78);
        v154 = v260[0];
        v260[0] = 0;
        if (v154)
        {
          if (*((_DWORD *)v154 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v154 + 8))(v154);
          else
            --*((_DWORD *)v154 + 2);
        }
      }
      LODWORD(v260[0]) = 0;
      v80 = v269;
      if (v269)
        *(_DWORD *)v269 += 2;
      v260[1] = v80;
      if (v68)
        *(_DWORD *)v68 += 2;
      v260[2] = v68;
      v81 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v81 = 0x1500000002;
      *(_QWORD *)(v81 + 8) = "WebAssemblyImportName";
      *(_DWORD *)(v81 + 16) = 4;
      WTF::SymbolImpl::create((WTF::SymbolImpl *)v81, &v259);
      v82 = v259;
      *(_DWORD *)v259 += 2;
      v260[3] = v82;
      JSC::AbstractModuleRecord::addImportEntry(v28, (uint64_t)v260, v83, v84, v85, v86, v87, v88);
      JSC::AbstractModuleRecord::ImportEntry::~ImportEntry((JSC::AbstractModuleRecord::ImportEntry *)v260, v89, v90, v91, v92, v93, v94, v95);
      v96 = v259;
      v259 = 0;
      if (v96)
      {
        if (*(_DWORD *)v96 == 2)
        {
          WTF::StringImpl::~StringImpl(v96, v37, v38, v39, v40, v41, v42, v43);
          WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
        }
        else
        {
          *(_DWORD *)v96 -= 2;
        }
      }
      if (*(_DWORD *)v81 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v81, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
      }
      else
      {
        *(_DWORD *)v81 -= 2;
      }
      if (v68)
      {
        if (*(_DWORD *)v68 == 2)
        {
          WTF::StringImpl::~StringImpl(v68, v37, v38, v39, v40, v41, v42, v43);
          WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
        }
        else
        {
          *(_DWORD *)v68 -= 2;
        }
      }
      v97 = v269;
      v269 = 0;
      if (v97)
      {
        if (*(_DWORD *)v97 == 2)
        {
          WTF::StringImpl::~StringImpl(v97, v37, v38, v39, v40, v41, v42, v43);
          WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
        }
        else
        {
          *(_DWORD *)v97 -= 2;
        }
      }
      v46 += 40;
      v45 -= 40;
    }
    while (v45);
  }
  WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>::~HashSet(&v270, v37, v38, v39, v40, v41, v42, v43);
  if (*(_BYTE *)(v16 + 113))
    v155 = 1;
  else
    v155 = *(_DWORD *)(v16 + 104) == -1;
  if (!v155)
  {
    v191 = (JSC::VM *)JSC::LazyClassStructure::get((JSC::LazyClassStructure *)(this + 172), (unint64_t)this);
    v197 = JSC::JSWebAssemblyMemory::tryCreate(this, (JSC::JSGlobalObject *)a1, v191, v192, v193, v194, v195, v196);
    v205 = v197;
    if (!*((_DWORD *)a1 + 20)
      || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a1, v198, v199, v200, v201, v202, v203, v204))
    {
      v206 = *(_DWORD *)(v16 + 104);
      v207 = *(_DWORD *)(v16 + 108);
      v208 = *(unsigned __int8 *)(v16 + 112);
      v209 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v209 = off_1E35B79B0;
      v209[1] = a1;
      v209[2] = v205;
      v261[0] = (uint64_t)v209;
      JSC::Wasm::Memory::tryCreate((uint64_t)a1, v206, v207, v208, v261, (uint64_t *)v260);
      v216 = v261[0];
      v261[0] = 0;
      if (v216)
        (*(void (**)(uint64_t))(*(_QWORD *)v216 + 8))(v216);
      v217 = v260[0];
      if (v260[0])
      {
        v260[0] = 0;
        v218 = (JSC::Wasm::Memory *)*((_QWORD *)v205 + 2);
        *((_QWORD *)v205 + 2) = v217;
        if (v218)
          WTF::RefCounted<JSC::Wasm::Memory>::deref(v218);
        JSC::JSWebAssemblyInstance::setMemory((JSC::JSWebAssemblyInstance *)v29, (JSC::VM *)a1, v205, v211, v212, v213, v214, v215);
        if (!*((_DWORD *)a1 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a1, v219, v220, v221, v222, v223, v224, v225))
        {
          v226 = 1;
          goto LABEL_78;
        }
      }
      else
      {
        OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, v210);
        JSC::VM::throwException((JSC::VM *)a1, (JSC::JSGlobalObject *)this, OutOfMemoryError, v245, v246, v247, v248, v249);
      }
      v226 = 0;
LABEL_78:
      v227 = v260[0];
      v260[0] = 0;
      if (v227)
        WTF::RefCounted<JSC::Wasm::Memory>::deref(v227);
      if (!v226)
        return 0;
      goto LABEL_62;
    }
    return 0;
  }
LABEL_62:
  v156 = v258;
  if (!*((_QWORD *)v258 + 7))
  {
    v157 = (JSC::VM *)JSC::LazyClassStructure::get((JSC::LazyClassStructure *)(this + 172), (unint64_t)this);
    v170 = JSC::JSWebAssemblyMemory::tryCreate(this, (JSC::JSGlobalObject *)a1, v157, v158, v159, v160, v161, v162);
    if (*((_DWORD *)a1 + 20))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a1, v163, v164, v165, v166, v167, v168, v169))
        return 0;
    }
    JSC::Wasm::Memory::create(v260);
    v176 = (JSC::Wasm::Memory *)*((_QWORD *)v170 + 2);
    *((WTF::StringImpl **)v170 + 2) = v260[0];
    v260[0] = 0;
    if (v176)
      WTF::RefCounted<JSC::Wasm::Memory>::deref(v176);
    JSC::JSWebAssemblyInstance::setMemory(v258, (JSC::VM *)a1, v170, v171, v172, v173, v174, v175);
    if (*((_DWORD *)a1 + 20))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a1, v177, v178, v179, v180, v181, v182, v183))
        return 0;
    }
  }
  return v156;
}

unint64_t JSC::allocateCell<JSC::JSWebAssemblyInstance>(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v9;
  unint64_t SlowCase;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = (JSC::Heap *)*((_QWORD *)this + 5124);
  if (!v9)
    v9 = JSC::GCClient::Heap::webAssemblyInstanceSpaceSlow((JSC::Heap **)this + 4694);
  SlowCase = *((_QWORD *)v9 + 3);
  if (SlowCase >= *((_QWORD *)v9 + 4))
  {
    SlowCase = *((_QWORD *)v9 + 5);
    if ((SlowCase & 1) != 0)
    {
      v13 = (uint64_t)v9;
      JSC::sanitizeStackForVM(this, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v13, (uint64_t)this + 192, 80, 0, 0, v14, v15, v16);
      goto LABEL_5;
    }
    v12 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v9 + 6);
    *((_QWORD *)v9 + 4) = SlowCase + HIDWORD(v12);
    *((_QWORD *)v9 + 5) = SlowCase + (int)v12;
  }
  *((_QWORD *)v9 + 3) = SlowCase + 80;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  return SlowCase;
}

void WTF::makeAtomString<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1@<X0>, WTF::AtomString *a2@<X8>)
{
  unint64_t v3;
  void *v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  unint64_t v19;
  BOOL v20;
  _DWORD v21[2];
  _BYTE v22[7];
  unint64_t v23;

  v3 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v3)
    goto LABEL_16;
  v5 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(a1 + 12));
  memcpy(v5, *(const void **)a1, *(unsigned int *)(a1 + 12));
  v6 = 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v23 = v8;
    v9 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v5, v3, &v23);
    if (v9 == -1)
      break;
    v8 = v23;
    v10 = v9 < 0x10000 ? 1 : 2;
    v6 += v10;
    v7 |= v9;
  }
  while (v23 < v3);
  if (v8 > v3)
  {
    __break(1u);
LABEL_16:
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  v18[0] = v5;
  v18[1] = v8;
  v19 = v6;
  v20 = v7 < 0x80;
  v21[0] = *(_DWORD *)v22;
  *(_DWORD *)((char *)v21 + 3) = *(_DWORD *)&v22[3];
  if (v6 >> 31)
    v19 = 0;
  WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>((uint64_t)v18, a2);
  if (v5)
    WTF::fastFree((unint64_t)v5, v11, v12, v13, v14, v15, v16, v17);
  if (!*(_QWORD *)a2)
    __break(0xC471u);
}

void JSC::AbstractModuleRecord::ImportEntry::~ImportEntry(JSC::AbstractModuleRecord::ImportEntry *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
}

JSC::JSWebAssemblyMemory *JSC::JSWebAssemblyMemory::tryCreate(WTF::StringImpl **this, JSC::JSGlobalObject *a2, JSC::VM *a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSWebAssemblyMemory *v10;
  JSC::VM *v11;
  JSC::JSWebAssemblyMemory *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t EvalError;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (*((_BYTE *)this + 3170))
  {
    v10 = (JSC::JSWebAssemblyMemory *)JSC::allocateCell<JSC::JSWebAssemblyMemory>(a2, (JSC::VM *)0x28, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v12 = JSC::JSWebAssemblyMemory::JSWebAssemblyMemory(v10, v11, (unint64_t)a3);
    JSC::JSWebAssemblyMemory::finishCreation(v12, a2, v13, v14, v15, v16, v17, v18);
  }
  else
  {
    EvalError = JSC::createEvalError((unint64_t)this, this + 399, a3);
    JSC::VM::throwException(a2, (JSC::JSGlobalObject *)this, EvalError, v22, v23, v24, v25, v26);
    return 0;
  }
  return v10;
}

uint64_t JSC::JSWebAssemblyMemory::adopt(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = *a2;
  *a2 = v2;
  return result;
}

void JSC::JSWebAssemblyInstance::setMemory(JSC::JSWebAssemblyInstance *this, JSC::VM *a2, JSC::JSWebAssemblyMemory *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSWebAssemblyInstance *v8;
  JSC::Wasm::Instance *v9;
  JSC::Wasm::Memory *v10;
  JSC::Wasm::Memory *v11;
  JSC::Wasm::Memory *v13;

  v8 = this;
  *((_QWORD *)this + 7) = a3;
  if (this && a3 && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
    v8 = this;
    a3 = (JSC::JSWebAssemblyMemory *)*((_QWORD *)this + 7);
  }
  v9 = (JSC::Wasm::Instance *)*((_QWORD *)v8 + 2);
  v10 = (JSC::Wasm::Memory *)*((_QWORD *)a3 + 2);
  ++*(_DWORD *)v10;
  v13 = v10;
  JSC::Wasm::Instance::setMemory(v9, &v13, (uint64_t)a3, a4, a5, a6, a7, a8);
  v11 = v13;
  v13 = 0;
  if (v11)
    WTF::RefCounted<JSC::Wasm::Memory>::deref(v11);
}

void JSC::JSWebAssemblyInstance::finalizeUnconditionally(uint64_t a1, JSC::VM *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v9;
  unint64_t v12;
  uint64_t v13;

  v9 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v9 + 112))
  {
    v12 = 0;
    v13 = 192;
    do
    {
      JSC::CallLinkInfo::visitWeak((JSC::CallLinkInfo *)(v9 + v13), a2, a3, a9, a4, a5, a6, a7, a8);
      ++v12;
      v9 = *(_QWORD *)(a1 + 16);
      v13 += 120;
    }
    while (v12 < *(unsigned int *)(v9 + 112));
  }
}

void JSC::JSWebAssemblyMemory::visitChildren(JSC::JSWebAssemblyMemory *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 3);
  if (!v16)
    goto LABEL_5;
  if ((v16 & 8) != 0)
  {
    v17 = 0;
    if ((*(_BYTE *)(v16 - 79) & 1) != 0)
    {
LABEL_4:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_5;
    }
  }
  else
  {
    v17 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + v17 + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
      goto LABEL_4;
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, v17, v11, v12, v13, v14, v15);
LABEL_5:
  v18 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (*(_BYTE *)(v18 + 5))
    v19 = atomic_load((unint64_t *)(v18 + 16));
  else
    v19 = *(_QWORD *)(v18 + 16);
  if (*((_BYTE *)a2 + 184))
  {
    *((_QWORD *)a2 + 18) += v19;
    v20 = *((_QWORD *)a2 + 20);
    v21 = __CFADD__(v20, v19);
    v22 = v20 + v19;
    if (v21)
      *((_BYTE *)a2 + 152) = 1;
    else
      *((_QWORD *)a2 + 20) = v22;
  }
}

uint64_t JSC::JSWebAssemblyMemory::visitChildren(JSC::JSWebAssemblyMemory *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  uint64_t v10;
  char v11;

  v9[0] = a2;
  v9[1] = this;
  v11 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v10 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v9;
    JSC::JSObject::visitChildren(this, a2, a3);
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3));
    v6 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    if (*(_BYTE *)(v6 + 5))
      v7 = atomic_load((unint64_t *)(v6 + 16));
    else
      v7 = *(_QWORD *)(v6 + 16);
    result = (*(uint64_t (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 96))(a2, v7);
    *(_QWORD *)(v9[0] + 88) = v10;
  }
  return result;
}

unint64_t JSC::allocateCell<JSC::JSWebAssemblyMemory>(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v10;
  unint64_t v11;
  unint64_t SlowCase;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  JSC *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = (JSC::Heap *)*((_QWORD *)this + 5125);
  if (!v10)
    v10 = JSC::GCClient::Heap::webAssemblyMemorySpaceSlow((JSC::Heap **)this + 4694);
  v11 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  SlowCase = *((_QWORD *)v10 + 3);
  if (SlowCase >= *((_QWORD *)v10 + 4))
  {
    SlowCase = *((_QWORD *)v10 + 5);
    if ((SlowCase & 1) != 0)
    {
      v15 = (char *)this + 192;
      v16 = (uint64_t)v10;
      v17 = this;
      v18 = v11;
      JSC::sanitizeStackForVM(v17, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16, (uint64_t)v15, v18, 0, 0, v19, v20, v21);
      goto LABEL_5;
    }
    v14 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v10 + 6);
    *((_QWORD *)v10 + 4) = SlowCase + HIDWORD(v14);
    *((_QWORD *)v10 + 5) = SlowCase + (int)v14;
  }
  *((_QWORD *)v10 + 3) = SlowCase + v11;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  return SlowCase;
}

void JSC::JSWebAssemblyMemory::finishCreation(JSC::JSWebAssemblyMemory *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (*(_BYTE *)(v8 + 5))
    v9 = atomic_load((unint64_t *)(v8 + 16));
  else
    v9 = *(_QWORD *)(v8 + 16);
  if (v9 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)a2 + 192, 0, (uint64_t)this, v9, a5, a6, a7, a8);
}

JSC::JSWebAssemblyMemory *JSC::JSWebAssemblyMemory::JSWebAssemblyMemory(JSC::JSWebAssemblyMemory *this, JSC::VM *a2, unint64_t a3)
{
  int v4;

  v4 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)this = a3 >> 4;
  *((_DWORD *)this + 1) = v4;
  *((_QWORD *)this + 1) = 0;
  JSC::Wasm::Memory::create((JSC::Wasm::Memory **)this + 2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

JSC::JSGlobalObject *JSC::JSWebAssemblyMemory::buffer(JSC::JSWebAssemblyMemory *this, JSC::JSGlobalObject *a2)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  Gigacage *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t (*v30)();
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::ArrayBuffer *v37;
  void *v38;
  JSC::JSObject *v39;
  const JSC::PropertyTable *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  JSC::ArrayBuffer *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  JSC::ArrayBuffer *v83;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v5 = (JSC::JSGlobalObject *)*((_QWORD *)this + 3);
  if (!v5
    || ((v47 = *((_QWORD *)v5 + 2), !*(_BYTE *)(v47 + 64)) || (v81 = *(_QWORD *)(v47 + 32)) == 0
      ? (v48 = *(_QWORD *)(v47 + 48))
      : (v48 = *(_QWORD *)(v81 + 32)),
        (v49 = *(_QWORD *)(*((_QWORD *)this + 2) + 8), *(_BYTE *)(v49 + 5))
      ? (v50 = atomic_load((unint64_t *)(v49 + 16)))
      : (v50 = *(_QWORD *)(v49 + 16)),
        v48 != v50))
  {
    v6 = *((_QWORD *)this + 2);
    v7 = *(_QWORD *)(v6 + 8);
    if (*(_BYTE *)(v7 + 5) == 1 && (v52 = *(unsigned int **)(v6 + 16)) != 0)
    {
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 + 1, v52));
      v82 = v52;
      JSC::ArrayBuffer::createShared((uint64_t *)&v82, (uint64_t *)&v83);
      WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=((JSC::ArrayBuffer **)this + 4, &v83, v54, v55, v56, v57, v58, v59);
      WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v83, v60, v61, v62, v63, v64, v65, v66);
      WTF::Ref<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::~Ref(&v82, v67, v68, v69, v70, v71, v72, v73);
      JSC::ArrayBuffer::makeWasmMemory(*((_QWORD *)this + 4));
    }
    else
    {
      do
        v8 = __ldaxr((unsigned int *)v7);
      while (__stlxr(v8 + 1, (unsigned int *)v7));
      v9 = (Gigacage *)JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(*((_QWORD *)this + 2) + 8));
      v10 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
      if (*(_BYTE *)(v10 + 5))
        v11 = atomic_load((unint64_t *)(v10 + 16));
      else
        v11 = *(_QWORD *)(v10 + 16);
      v12 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)(v12 + 8) = 1;
      *(_QWORD *)v12 = off_1E35B79D8;
      *(_QWORD *)(v12 + 16) = v7;
      v82 = (unsigned int *)v12;
      JSC::ArrayBuffer::createFromBytes(v9, v11, &v82, (uint64_t *)&v83);
      WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=((JSC::ArrayBuffer **)this + 4, &v83, v13, v14, v15, v16, v17, v18);
      WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v83, v19, v20, v21, v22, v23, v24, v25);
      v26 = v82;
      v82 = 0;
      if (v26)
      {
        v27 = v26 + 2;
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v26 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
        }
      }
      JSC::ArrayBuffer::makeWasmMemory(*((_QWORD *)this + 4));
      if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 5) == 1)
        JSC::ArrayBuffer::makeShared(*((JSC::ArrayBuffer **)this + 4));
    }
    if (*(_QWORD *)(*((_QWORD *)this + 4) + 32))
      v30 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v30 = 0;
    v31 = JSC::JSGlobalObject::arrayBufferStructure((unint64_t)a2, v30 != 0);
    v37 = (JSC::ArrayBuffer *)*((_QWORD *)this + 4);
    if (v37)
      *(_DWORD *)v37 += 2;
    v83 = v37;
    v5 = (JSC::JSGlobalObject *)JSC::JSArrayBuffer::create((uint64_t)v4, v31, &v83, v32, v33, v34, v35, v36);
    v46 = v83;
    v83 = 0;
    if (v46)
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v46, v38, (uint64_t)v39, (uint64_t)v40, v41, v42, v43, v44);
    if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 5) == 1
      && (JSC::objectConstructorFreeze(a2, v5, v39, v40, v41, v42, v43, v44, v45), *((_DWORD *)v4 + 20))
      && JSC::VM::hasExceptionsAfterHandlingTraps(v4, v74, v75, v76, v77, v78, v79, v80))
    {
      return 0;
    }
    else
    {
      *((_QWORD *)this + 3) = v5;
      if (!v5
        || *((_DWORD *)v4 + 190) >= *((unsigned __int8 *)this + 7)
        && (JSC::Heap::writeBarrierSlowPath((uint64_t)v4 + 192, (unint64_t)this),
            (v5 = (JSC::JSGlobalObject *)*((_QWORD *)this + 3)) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x198E47208);
      }
    }
  }
  return v5;
}

uint64_t JSC::JSWebAssemblyMemory::grow(JSC::JSWebAssemblyMemory *this, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  const char *v12;
  unint64_t v14;
  JSC::Heap **v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  JSC::Exception *v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t OutOfMemoryError;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  JSC::Exception *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(_QWORD *);
  _QWORD *v49;
  JSC::JSWebAssemblyMemory *v50;
  JSC::JSGlobalObject *v51;
  JSC::Heap **v52;
  WTF::StringImpl *v53;
  unsigned int v54;
  int v55;
  _QWORD v56[3];

  JSC::Wasm::Memory::grow(*((_QWORD *)this + 2), (uint64_t)a2, a4, a4, a5, a6, a7, a8, (uint64_t)&v54);
  if (!v55)
    return v54;
  if (v55 == 1)
  {
    switch((char)v54)
    {
      case 0:
        v11 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v11 = 0x4200000002;
        v12 = "WebAssembly.Memory.grow expects the delta to be a valid page count";
        goto LABEL_9;
      case 1:
        v11 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v11 = 0x4700000002;
        v12 = "WebAssembly.Memory.grow expects the grown size to be a valid page count";
        goto LABEL_9;
      case 2:
        v11 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v11 = 0x4700000002;
        v12 = "WebAssembly.Memory.grow would exceed the memory's declared maximum size";
        goto LABEL_9;
      case 3:
        OutOfMemoryError = JSC::createOutOfMemoryError(a3, v10);
        v39 = (JSC::Exception *)OutOfMemoryError;
        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                  + 0x4C)))
        {
          v39 = (JSC::Exception *)JSC::Exception::create((uint64_t)a2, (JSC::VM *)OutOfMemoryError, 0, v33, v34, v35, v36, v37);
        }
        JSC::VM::throwException(a2, (JSC::JSGlobalObject *)a3, v39, v38, v33, v34, v35, v36, v37);
        return 0xFFFFFFFFLL;
      case 4:
        v11 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v11 = 0x3800000002;
        v12 = "WebAssembly.Memory.grow for shared memory is unavailable";
LABEL_9:
        *(_QWORD *)(v11 + 8) = v12;
        *(_DWORD *)(v11 + 16) = 4;
        v53 = (WTF::StringImpl *)v11;
        v14 = *(_QWORD *)(a3 + 128);
        v15 = *(JSC::Heap ***)(a3 + 56);
        if ((v14 & 1) != 0)
        {
          v48 = *(uint64_t (**)(_QWORD *))(v14 & 0xFFFFFFFFFFFFFFFCLL);
          v49 = (_QWORD *)(a3 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a3 & 8) != 0)
            v49 = (_QWORD *)(a3 - 16);
          v56[0] = *v49;
          v56[1] = a3;
          v56[2] = a3 + 128;
          v52 = v15;
          v14 = v48(v56);
          v15 = v52;
        }
        v16 = JSC::ErrorInstance::create(v15, v14, &v53, 0, 0, 0, 2, 1);
        v23 = (JSC::Exception *)v16;
        if ((v16 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C)))
        {
          v23 = (JSC::Exception *)JSC::Exception::create((uint64_t)a2, (JSC::VM *)v16, 0, v17, v18, v19, v20, v21);
        }
        JSC::VM::throwException(a2, (JSC::JSGlobalObject *)a3, v23, v22, v17, v18, v19, v20, v21);
        v31 = v53;
        v53 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
          {
            WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
            WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
          }
          else
          {
            *(_DWORD *)v31 -= 2;
          }
        }
        break;
      default:
        return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    v50 = (JSC::JSWebAssemblyMemory *)std::__throw_bad_variant_access[abi:sn180100]();
    return JSC::JSWebAssemblyMemory::type(v50, v51);
  }
}

int *JSC::JSWebAssemblyMemory::type(JSC::JSWebAssemblyMemory *this, JSC::JSGlobalObject *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::JSObject *v14;
  JSC::StructureCache *v15;
  JSC::VM *v16;
  JSC::Structure *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSC::VM *v40;
  JSC::Structure *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  int *v97;
  int v98;
  int v99;
  uint64_t v100;

  v10 = (JSC *)*((_QWORD *)a2 + 7);
  v11 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  v12 = *(unsigned int *)(v11 + 32);
  v13 = *(unsigned int *)(v11 + 36);
  v14 = (JSC::JSObject *)*((_QWORD *)a2 + 82);
  v15 = (JSC::JSGlobalObject *)((char *)a2 + 1968);
  if (v13 > 0x10000)
  {
    v40 = (JSC::VM *)JSC::StructureCache::emptyObjectStructureForPrototype(v15, a2, v14, 2, 0, 0, a8, a9, a3);
    v23 = (int *)JSC::constructEmptyObject(v10, v40, v41, v42, v43, v44, v45, v46);
  }
  else
  {
    v16 = (JSC::VM *)JSC::StructureCache::emptyObjectStructureForPrototype(v15, a2, v14, 3, 0, 0, a8, a9, a3);
    v23 = (int *)JSC::constructEmptyObject(v10, v16, v17, v18, v19, v20, v21, v22);
    WTF::AtomStringImpl::addLiteral((uint64_t)"maximum", 7uLL, v24, v25, v26, v27, v28, &v96);
    v29 = v96;
    v96 = 0;
    v97 = v23;
    v98 = -1;
    v30.n128_u64[0] = 0x100000001000000;
    v99 = 0x1000000;
    v100 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v23, (uint64_t)v10, (unint64_t)v29, v13 | 0xFFFE000000000000, 0, (uint64_t)&v96, v31, v32, v30);
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
      }
      else
      {
        *(_DWORD *)v29 -= 2;
      }
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"minimum", 7uLL, v35, v36, v37, v38, v39, &v96);
  v50 = v96;
  if ((v12 & 0x80000000) != 0)
    v51 = COERCE__INT64((double)v12) + 0x2000000000000;
  else
    v51 = v12 | 0xFFFE000000000000;
  v96 = 0;
  v97 = v23;
  v98 = -1;
  v49.n128_u64[0] = 0x100000001000000;
  v99 = 0x1000000;
  v100 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v23, (uint64_t)v10, (unint64_t)v50, v51, 0, (uint64_t)&v96, v47, v48, v49);
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"shared", 6uLL, v54, v55, v56, v57, v58, &v96);
  v62 = v96;
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 5) == 1)
    v63 = 7;
  else
    v63 = 6;
  v96 = 0;
  v97 = v23;
  v98 = -1;
  v61.n128_u64[0] = 0x100000001000000;
  v99 = 0x1000000;
  v100 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v23, (uint64_t)v10, (unint64_t)v62, v63, 0, (uint64_t)&v96, v59, v60, v61);
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  return v23;
}

void JSC::JSWebAssemblyMemory::growSuccessCallback(_QWORD *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  JSC::ArrayBuffer *v12;
  BOOL v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v8 = a4;
  v9 = a3;
  v12 = (JSC::ArrayBuffer *)a1[4];
  if (!v12)
    goto LABEL_9;
  if (*(_BYTE *)(*(_QWORD *)(a1[2] + 8) + 5))
  {
    a1[4] = 0;
    goto LABEL_5;
  }
  JSC::ArrayBuffer::detach(v12, a2, a3, a4, a5, a6, a7, a8);
  v12 = (JSC::ArrayBuffer *)a1[4];
  a1[4] = 0;
  if (v12)
  {
LABEL_5:
    v13 = *(_DWORD *)v12 == 2;
    *(_DWORD *)v12 -= 2;
    if (v13)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  a1[3] = 0;
LABEL_9:
  v22 = (unint64_t)v8 << 16;
  v23 = (unint64_t)v9 << 16;
  if (v22 != v23)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)a2 + 192, 0, (uint64_t)a1, v22 - v23, a5, a6, a7, a8);
}

void JSC::JSWebAssemblyMemory::~JSWebAssemblyMemory(JSC::JSWebAssemblyMemory *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ArrayBuffer *v9;
  BOOL v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::Wasm::Memory *v19;

  v9 = (JSC::ArrayBuffer *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    v10 = *(_DWORD *)v9 == 2;
    *(_DWORD *)v9 -= 2;
    if (v10)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  v19 = (JSC::Wasm::Memory *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v19)
    WTF::RefCounted<JSC::Wasm::Memory>::deref(v19);
}

void JSC::JSWebAssemblyModule::destroy(JSC::JSWebAssemblyModule *this, JSC::JSCell *a2)
{
  JSC::Wasm::TypeInformation *v2;

  JSC::JSWebAssemblyModule::~JSWebAssemblyModule(this);
  JSC::Wasm::TypeInformation::tryCleanup(v2);
}

void JSC::JSWebAssemblyModule::visitChildren(JSC::JSWebAssemblyModule *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 3);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      v17 = 0;
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_7;
    }
    else
    {
      v17 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + v17 + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_7;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_7:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, v17, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::JSWebAssemblyModule::visitChildren(JSC::JSWebAssemblyModule *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t JSC::JSWebAssemblyModule::create(JSC *a1, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v11 = JSC::allocateCell<JSC::JSWebAssemblyModule>(a1, (JSC::VM *)0x20, (uint64_t)a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v11 = a2 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  v13 = *a3;
  *a3 = 0;
  *(_QWORD *)(v11 + 16) = v13;
  *(_QWORD *)(v11 + 24) = 0;
  JSC::JSWebAssemblyModule::finishCreation((JSC::JSWebAssemblyModule *)v11, a1, v14, v15, v16, v17, v18, v19);
  return v11;
}

unint64_t JSC::allocateCell<JSC::JSWebAssemblyModule>(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v10;
  unint64_t v11;
  unint64_t SlowCase;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  JSC *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = (JSC::Heap *)*((_QWORD *)this + 5127);
  if (!v10)
    v10 = JSC::GCClient::Heap::webAssemblyModuleSpaceSlow((JSC::Heap **)this + 4694);
  v11 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  SlowCase = *((_QWORD *)v10 + 3);
  if (SlowCase >= *((_QWORD *)v10 + 4))
  {
    SlowCase = *((_QWORD *)v10 + 5);
    if ((SlowCase & 1) != 0)
    {
      v15 = (char *)this + 192;
      v16 = (uint64_t)v10;
      v17 = this;
      v18 = v11;
      JSC::sanitizeStackForVM(v17, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16, (uint64_t)v15, v18, 0, 0, v19, v20, v21);
      goto LABEL_5;
    }
    v14 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v10 + 6);
    *((_QWORD *)v10 + 4) = SlowCase + HIDWORD(v14);
    *((_QWORD *)v10 + 5) = SlowCase + (int)v14;
  }
  *((_QWORD *)v10 + 3) = SlowCase + v11;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  return SlowCase;
}

void JSC::JSWebAssemblyModule::finishCreation(JSC::JSWebAssemblyModule *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  void *v31;
  void *v32;
  unint64_t v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  JSC::JSWebAssemblyModule *v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  void *v77;
  unsigned __int8 *v78;
  unint64_t v79;
  BOOL v80;
  _BYTE v81[7];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v10 = JSC::SymbolTable::create(a2, a2, a3, a4, a5, a6, a7, a8);
  v72 = this;
  v11 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  v12 = (*(_DWORD *)(v10 + 16) + 1);
  *(_DWORD *)(v10 + 16) = v12;
  LOBYTE(v78) = 0;
  v80 = 0;
  v13 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 112);
  JSC::SymbolTableEntry::SymbolTableEntry((uint64_t)&v76, ((_DWORD)v12 != -1) | (unint64_t)(v12 << 32));
  JSC::SymbolTable::set<JSC::SymbolTableEntry>(v10, (uint64_t)&v77, v13, &v76, v14, v15, v16, v17);
  if ((v76 & 1) == 0)
    JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v76, v18, v19, v20, v21, v22, v23, v24);
  if (v80 && (_BYTE)v79)
  {
    v25 = v78;
    v26 = __ldxr(v78);
    if (v26 == 1)
    {
      if (!__stlxr(0, v78))
        goto LABEL_12;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v25, 0, v19, v20, v21, v22, v23, v24);
  }
LABEL_12:
  v27 = *(_DWORD *)(v11 + 148);
  if (v27)
  {
    v28 = *(_QWORD *)(v11 + 136);
    v73 = v28 + 24 * v27;
    do
    {
      v29 = (*(_DWORD *)(v10 + 16) + 1);
      *(_DWORD *)(v10 + 16) = v29;
      v30 = *(unsigned int *)(v28 + 12);
      if ((_DWORD)v30)
      {
        v31 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(v28 + 12));
        memcpy(v31, *(const void **)v28, *(unsigned int *)(v28 + 12));
        v32 = (void *)WTF::fastMalloc((WTF *)v30);
        memcpy(v32, v31, v30);
        v33 = 0;
        v34 = 0;
        v35 = 0;
        do
        {
          v76 = v35;
          v36 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v32, v30, (unint64_t *)&v76);
          if (v36 == -1)
            break;
          v35 = v76;
          v37 = v36 < 0x10000 ? 1 : 2;
          v33 += v37;
          v34 |= v36;
        }
        while ((unint64_t)v76 < v30);
        if ((unint64_t)v35 > v30)
        {
          __break(1u);
LABEL_49:
          __break(0xC471u);
          JUMPOUT(0x198E47E78);
        }
      }
      else
      {
        v32 = 0;
        v31 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 0;
      }
      v77 = v32;
      v78 = (unsigned __int8 *)v35;
      v79 = v33;
      v80 = v34 < 0x80;
      *(_DWORD *)v81 = (_DWORD)v75;
      *(_DWORD *)&v81[3] = *(_DWORD *)((char *)&v75 + 3);
      if (v33 >> 31)
        v79 = 0;
      WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>((uint64_t)&v77, (WTF::AtomString *)&v75);
      if (v32)
        WTF::fastFree((unint64_t)v32, v38, v39, v40, v41, v42, v43, v44);
      v45 = v75;
      if (!v75)
      {
        __break(0xC471u);
        JUMPOUT(0x198E47EDCLL);
      }
      v74 = (WTF::StringImpl *)((v29 << 6) | 9);
      if ((_DWORD)v29 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x198E47ED0);
      }
      if (*(_QWORD *)(v10 + 48))
        goto LABEL_49;
      v46 = *(_DWORD *)(v10 + 16);
      if (v46 == -1 || v46 < v29)
        *(_DWORD *)(v10 + 16) = v29;
      *(_DWORD *)v45 += 2;
      v76 = v45;
      WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>((uint64_t *)(v10 + 8), (WTF::AtomStringImpl *)&v76, &v74, v40, v41, v42, v43, v44, (uint64_t)&v77);
      v54 = v76;
      v76 = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          WTF::StringImpl::~StringImpl(v54, v47, v48, v49, v50, v51, v52, v53);
          WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
        }
        else
        {
          *(_DWORD *)v54 -= 2;
        }
      }
      if ((v74 & 1) == 0)
        JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v74, v47, v48, v49, v50, v51, v52, v53);
      v55 = v75;
      v75 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
        {
          WTF::StringImpl::~StringImpl(v55, v47, v48, v49, v50, v51, v52, v53);
          WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
        }
        else
        {
          *(_DWORD *)v55 -= 2;
        }
      }
      if (v31)
        WTF::fastFree((unint64_t)v31, v47, v48, v49, v50, v51, v52, v53);
      v28 += 24;
    }
    while (v28 != v73);
  }
  *((_QWORD *)v72 + 3) = v10;
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)v72 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)v72);
}

void JSC::JSWebAssemblyModule::~JSWebAssemblyModule(JSC::JSWebAssemblyModule *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  JSC::Wasm::Module *v4;

  v1 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v1)
  {
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
    {
      atomic_store(1u, v1);
      v4 = (JSC::Wasm::Module *)v1;
      WTF::ThreadSafeRefCounted<JSC::Wasm::Module,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v4);
    }
  }
}

uint64_t JSC::JSWebAssemblyModule::exportSymbolTable(JSC::JSWebAssemblyModule *this)
{
  return *((_QWORD *)this + 3);
}

unint64_t JSC::createJSWebAssemblyRuntimeError(unint64_t a1, JSC::Heap **a2, int a3)
{
  unint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  int *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(WTF::StringImpl **);
  WTF::StringImpl **v29;
  WTF::StringImpl *v30[3];

  v5 = *(_QWORD *)(a1 + 1408);
  if ((v5 & 1) != 0)
  {
    v28 = *(uint64_t (**)(WTF::StringImpl **))(v5 & 0xFFFFFFFFFFFFFFFCLL);
    v29 = (WTF::StringImpl **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v29 = (WTF::StringImpl **)(a1 - 16);
    v30[0] = *v29;
    v30[1] = (WTF::StringImpl *)a1;
    v30[2] = (WTF::StringImpl *)(a1 + 1408);
    v5 = v28(v30);
  }
  v6 = "Out of bounds memory access";
  v7 = 28;
  switch(a3)
  {
    case 0:
      break;
    case 1:
      v6 = "Out of bounds table access";
      v7 = 27;
      break;
    case 2:
      v6 = "Out of bounds call_indirect";
      v7 = 28;
      break;
    case 3:
      v6 = "call_indirect to a null table entry";
      goto LABEL_46;
    case 4:
      v6 = "call_ref to a null reference";
      goto LABEL_29;
    case 5:
      v6 = "i31.get_<sx> to a null reference";
      v7 = 33;
      break;
    case 6:
      v6 = "call_indirect to a signature that does not match";
      v7 = 49;
      break;
    case 7:
      v6 = "Out of bounds Trunc operation";
      goto LABEL_35;
    case 8:
      v6 = "Unreachable code should not be executed";
      goto LABEL_18;
    case 9:
      v6 = "Division by zero";
      goto LABEL_14;
    case 10:
      v6 = "Integer overflow";
LABEL_14:
      v7 = 17;
      break;
    case 11:
      v6 = "Stack overflow";
      v7 = 15;
      break;
    case 12:
      v6 = "Funcref must be an exported wasm function";
      v7 = 42;
      break;
    case 13:
      v6 = "Unsupported use of struct or array type";
LABEL_18:
      v7 = 40;
      break;
    case 14:
      v6 = "Out of bounds array.get";
      goto LABEL_21;
    case 15:
      v6 = "Out of bounds array.set";
LABEL_21:
      v7 = 24;
      break;
    case 16:
      v6 = "Out of bounds array.fill";
      goto LABEL_24;
    case 17:
      v6 = "Out of bounds array.copy";
LABEL_24:
      v7 = 25;
      break;
    case 18:
      v6 = "Out of bounds array.init_elem";
      goto LABEL_35;
    case 19:
      v6 = "Out of bounds array.init_data";
      goto LABEL_35;
    case 20:
      v6 = "Failed to allocate new struct";
      goto LABEL_35;
    case 21:
      v6 = "Failed to allocate new array";
LABEL_29:
      v7 = 29;
      break;
    case 22:
      v6 = "Out of bounds or failed to allocate in array.new_elem";
      goto LABEL_48;
    case 23:
      v6 = "Out of bounds or failed to allocate in array.new_data";
      goto LABEL_48;
    case 24:
      v6 = "array.get to a null reference";
      goto LABEL_35;
    case 25:
      v6 = "array.set to a null reference";
      goto LABEL_35;
    case 26:
      v6 = "array.len to a null reference";
LABEL_35:
      v7 = 30;
      break;
    case 27:
      v6 = "array.fill to a null reference";
      goto LABEL_42;
    case 28:
      v6 = "array.copy to a null reference";
      goto LABEL_42;
    case 29:
      v6 = "array.init_elem to a null reference";
      goto LABEL_46;
    case 30:
      v6 = "array.init_data to a null reference";
      goto LABEL_46;
    case 31:
      v6 = "struct.get to a null reference";
      goto LABEL_42;
    case 32:
      v6 = "struct.set to a null reference";
LABEL_42:
      v7 = 31;
      break;
    case 33:
      v6 = "an exported wasm function cannot contain a v128 parameter or return value";
      v7 = 74;
      break;
    case 34:
      v6 = "a v128 parameter of a tag may not be accessed from JS";
      goto LABEL_48;
    case 35:
      v6 = "ref.as_non_null to a null reference";
LABEL_46:
      v7 = 36;
      break;
    case 36:
      v6 = "ref.cast failed to cast reference to target heap type";
LABEL_48:
      v7 = 54;
      break;
    case 37:
      v6 = "Offset + array length would exceed the size of a data segment";
      v7 = 62;
      break;
    case 38:
      v6 = "Offset + array length would exceed the length of an element segment";
      v7 = 68;
      break;
    case 39:
      v6 = "Out of memory";
      v7 = 14;
      break;
    default:
      v6 = "";
      v7 = 1;
      break;
  }
  v8 = v7 - 1;
  if (v7 == 1)
  {
    v9 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
  }
  else
  {
    v9 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
    *v9 = 2;
    v9[1] = v8;
    *((_QWORD *)v9 + 1) = v6;
    v9[4] = 4;
  }
  v30[0] = (WTF::StringImpl *)v9;
  v17 = JSC::ErrorInstance::create(a2, v5, v30, 0, (uint64_t)JSC::defaultSourceAppender, 0, 0, 1);
  v18 = v30[0];
  v30[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  *(_BYTE *)(v17 + 59) &= ~0x10u;
  return v17;
}

void JSC::JSWebAssemblyStruct::destroy(JSC::JSWebAssemblyStruct *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::JSWebAssemblyStruct::visitChildren(JSC::JSWebAssemblyStruct *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v28;
  uint64_t v29;
  uint64_t v30;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 3);
  v17 = (uint64_t *)(v16 + 8);
  if (*(_DWORD *)(v16 + 32) == 1)
    v18 = v16 + 8;
  else
    v18 = 0;
  v19 = *(unsigned int *)(v18 + 8);
  if ((_DWORD)v19)
  {
    v20 = 0;
    v21 = 0;
    do
    {
      v22 = *v17;
      if (*(_DWORD *)(v22 + v20 + 16))
        goto LABEL_23;
      v23 = BYTE1(dword_1ECF4C7B0) ? 29 : 17;
      if ((v23 + *(_BYTE *)(v22 + v20)) > 1u)
        goto LABEL_23;
      v24 = *((_QWORD *)this + 4);
      v25 = v24 ? v24 + 4 : 0;
      v26 = *(_QWORD *)(v25 + (*(_DWORD *)(v22 + 32 * v19 + 4 * v21) - 4));
      if ((v26 & 0xFFFE000000000002) != 0 || v26 == 0)
        goto LABEL_23;
      if ((v26 & 8) != 0)
      {
        if ((*(_BYTE *)(v26 - 79) & 1) == 0)
          goto LABEL_29;
      }
      else
      {
        v28 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 0x20) != v28)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v26 & 0xFFFFFFFFFFFFC000), v28, v10, v11, v12, v13, v14, v15);
        if (((*(_QWORD *)((v26 & 0xFFFFFFFFFFFFC000) + 8 * ((v26 >> 10) & 0xF) + 0x28) >> (v26 >> 4)) & 1) == 0)
        {
LABEL_29:
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v26, 0, v11, v12, v13, v14, v15);
          goto LABEL_23;
        }
      }
      if (*((_QWORD *)a2 + 21))
        goto LABEL_29;
LABEL_23:
      ++v21;
      v29 = *((_QWORD *)this + 3);
      v17 = (uint64_t *)(v29 + 8);
      if (*(_DWORD *)(v29 + 32) == 1)
        v30 = v29 + 8;
      else
        v30 = 0;
      v19 = *(unsigned int *)(v30 + 8);
      v20 += 32;
    }
    while (v21 < v19);
  }
}

void JSC::JSWebAssemblyStruct::visitChildren(JSC::JSWebAssemblyStruct *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  char v18;
  _QWORD v19[2];
  _QWORD *v20;
  char v21;

  v16[0] = a2;
  v16[1] = this;
  v18 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v17 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    v19[0] = a2;
    v19[1] = this;
    v21 = 0;
    v20 = v16;
    *((_QWORD *)a2 + 11) = v19;
    JSC::JSObject::visitChildren(this, a2, a3);
    *(_QWORD *)(v19[0] + 88) = v20;
    v6 = *((_QWORD *)this + 3);
    v7 = v6 + 8;
    if (*(_DWORD *)(v6 + 32) != 1)
      v7 = 0;
    v8 = *(unsigned int *)(v7 + 8);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = *(_QWORD *)(v6 + 8);
        if (!*(_DWORD *)(v11 + v9 + 16))
        {
          v12 = BYTE1(dword_1ECF4C7B0) ? 29 : 17;
          if ((v12 + *(_BYTE *)(v11 + v9)) <= 1u)
          {
            v13 = *((_QWORD *)this + 4);
            v14 = v13 ? v13 + 4 : 0;
            if ((*(_QWORD *)(v14 + (*(_DWORD *)(v11 + 32 * v8 + 4 * v10) - 4)) & 0xFFFE000000000002) == 0)
            {
              (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
              v6 = *((_QWORD *)this + 3);
            }
          }
        }
        ++v10;
        v15 = v6 + 8;
        if (*(_DWORD *)(v6 + 32) != 1)
          v15 = 0;
        v8 = *(unsigned int *)(v15 + 8);
        v9 += 32;
      }
      while (v10 < v8);
    }
    *(_QWORD *)(v16[0] + 88) = v17;
  }
}

uint64_t JSC::JSWebAssemblyStruct::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 755107915;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::JSWebAssemblyStruct::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::JSWebAssemblyStruct::tryCreate(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, const JSC::Wasm::Type *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  JSC::Wasm::TypeDefinition *v13;
  unsigned int v14;
  _QWORD *v15;
  unint64_t SlowCase;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int *v33;
  WTF *v34;
  unint64_t CachedUnrolling;
  const JSC::Wasm::TypeDefinition *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 56) + 8);
  if (*(_DWORD *)(v8 + 100) <= a4)
  {
    __break(0xC471u);
    return result;
  }
  v11 = *(_QWORD *)(result + 56);
  v12 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + 8 * a4);
  if (*(_DWORD *)(v12 + 32) == 4)
  {
    v33 = *(unsigned int **)(v12 + 8);
    v34 = *(WTF **)v33;
    v13 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v33 + 8) + 8 * v33[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v13))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v12, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      if ((_BYTE)a2)
      {
        v13 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v13 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v13, v34, a3, a4, a5, a6, a7, a8);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v12, v13, v36, v37, v38, v39, v40, v41);
      }
    }
  }
  else
  {
    v13 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v8 + 88) + 8 * a4);
  }
  if (*((_DWORD *)v13 + 8) == 5)
    v13 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v13 + 1);
  do
    v14 = __ldaxr((unsigned int *)v13);
  while (__stlxr(v14 + 1, (unsigned int *)v13));
  v15 = *(_QWORD **)(v11 + 41008);
  if (!v15)
    v15 = (_QWORD *)JSC::GCClient::Heap::webAssemblyStructSpaceSlow((JSC::Heap **)(v11 + 37552));
  SlowCase = v15[3];
  if (SlowCase >= v15[4])
  {
    SlowCase = v15[5];
    if ((SlowCase & 1) == 0)
    {
      v32 = *(_QWORD *)(SlowCase + 8) ^ v15[6];
      v15[4] = SlowCase + HIDWORD(v32);
      v15[5] = SlowCase + (int)v32;
      v15[3] = SlowCase + 48;
LABEL_12:
      *(_DWORD *)SlowCase = 0;
      do
        v17 = __ldaxr((unsigned int *)v13);
      while (__stlxr(v17 + 1, (unsigned int *)v13));
      v18 = *(unsigned int **)a5;
      if (v18)
      {
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
        do
          v20 = __ldaxr(v18);
        while (__stlxr(v20 + 1, v18));
      }
      v21 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)SlowCase = a2 >> 4;
      *(_DWORD *)(SlowCase + 4) = v21;
      *(_QWORD *)(SlowCase + 8) = 0;
      if (v18)
      {
        do
          v22 = __ldaxr(v18);
        while (__stlxr(v22 + 1, v18));
        *(_QWORD *)(SlowCase + 16) = v18;
        do
        {
          v23 = __ldaxr(v18);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v18));
        if (!v24)
        {
          atomic_store(1u, v18);
          WTF::fastFree((unint64_t)v18, (void *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
        }
      }
      else
      {
        *(_QWORD *)(SlowCase + 16) = 0;
      }
      *(_QWORD *)(SlowCase + 24) = v13;
      v25 = (char *)v13 + 8;
      if (*((_DWORD *)v13 + 8) != 1)
        v25 = 0;
      v26 = *((_QWORD *)v25 + 2);
      if (v26)
      {
        v27 = (_DWORD *)WTF::fastMalloc((WTF *)(*((_QWORD *)v25 + 2) + 4));
        *v27 = v26;
        *(_QWORD *)(SlowCase + 32) = v27;
        if ((_DWORD)v26)
          bzero(v27 + 1, v26);
      }
      else
      {
        *(_QWORD *)(SlowCase + 32) = 0;
      }
      if (v18)
      {
        do
        {
          v28 = __ldaxr(v18);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v18));
        if (!v29)
        {
          atomic_store(1u, v18);
          WTF::fastFree((unint64_t)v18, (void *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
        }
      }
      if (*(_BYTE *)(v11 + 755))
        __dmb(0xAu);
      goto LABEL_35;
    }
    v42 = (uint64_t)v15;
    JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v42, v11 + 192, 48, 0, 1, v43, v44, v45);
  }
  else
  {
    v15[3] = SlowCase + 48;
  }
  if (SlowCase)
    goto LABEL_12;
  do
  {
LABEL_35:
    v30 = __ldaxr((unsigned int *)v13);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, (unsigned int *)v13));
  if (!v31)
  {
    atomic_store(1u, (unsigned int *)v13);
    WTF::fastFree((unint64_t)v13, (void *)a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
  return SlowCase;
}

void JSC::JSWebAssemblyTable::destroy(JSC::JSWebAssemblyTable *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      JSC::Wasm::Table::operator delete((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::JSWebAssemblyTable::visitChildren(JSC::Wasm::Table **this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::JSObject::visitChildren((JSC::JSObject *)this, a2, a3, a4, a5, a6, a7, a8);
  return JSC::Wasm::Table::visitAggregate(this[2], a2, v10, v11, v12, v13, v14, v15);
}

void JSC::JSWebAssemblyTable::visitChildren(JSC::Wasm::Table **this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13;
  char v14;

  v12[0] = a2;
  v12[1] = this;
  v14 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v13 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v12;
    JSC::JSObject::visitChildren((JSC::JSObject *)this, a2, a3);
    JSC::Wasm::Table::visitAggregate(this[2], a2, v6, v7, v8, v9, v10, v11);
    *(_QWORD *)(v12[0] + 88) = v13;
  }
}

unint64_t JSC::JSWebAssemblyTable::tryCreate(unint64_t a1, JSC *a2, unint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  int v12;
  uint64_t v13;
  unint64_t EvalError;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 3170))
  {
    result = JSC::allocateCell<JSC::JSWebAssemblyTable>(a2, (JSC::VM *)0x18, a3, (uint64_t)a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)result = a3 >> 4;
    *(_DWORD *)(result + 4) = v12;
    *(_QWORD *)(result + 8) = 0;
    v13 = *a4;
    *a4 = 0;
    *(_QWORD *)(result + 16) = v13;
    *(_QWORD *)(v13 + 40) = result;
    if (*((_BYTE *)a2 + 755))
      __dmb(0xAu);
  }
  else
  {
    EvalError = JSC::createEvalError(a1, (WTF::StringImpl **)(a1 + 3192), (const WTF::String *)a3);
    JSC::VM::throwException(a2, (JSC::JSGlobalObject *)a1, EvalError, v16, v17, v18, v19, v20);
    return 0;
  }
  return result;
}

unint64_t JSC::allocateCell<JSC::JSWebAssemblyTable>(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v10;
  unint64_t v11;
  unint64_t SlowCase;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  JSC *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = (JSC::Heap *)*((_QWORD *)this + 5129);
  if (!v10)
    v10 = JSC::GCClient::Heap::webAssemblyTableSpaceSlow((JSC::Heap **)this + 4694);
  v11 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  SlowCase = *((_QWORD *)v10 + 3);
  if (SlowCase >= *((_QWORD *)v10 + 4))
  {
    SlowCase = *((_QWORD *)v10 + 5);
    if ((SlowCase & 1) != 0)
    {
      v15 = (char *)this + 192;
      v16 = (uint64_t)v10;
      v17 = this;
      v18 = v11;
      JSC::sanitizeStackForVM(v17, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16, (uint64_t)v15, v18, 0, 0, v19, v20, v21);
      goto LABEL_5;
    }
    v14 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v10 + 6);
    *((_QWORD *)v10 + 4) = SlowCase + HIDWORD(v14);
    *((_QWORD *)v10 + 5) = SlowCase + (int)v14;
  }
  *((_QWORD *)v10 + 3) = SlowCase + v11;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  return SlowCase;
}

uint64_t JSC::JSWebAssemblyTable::createStructure(JSC::VM *a1, JSC::VM *a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10;

  v10 = 23;
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)&JSC::JSWebAssemblyTable::s_info, 0, 0, a9, a4);
}

uint64_t JSC::JSWebAssemblyTable::set(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 16);
  if (*(_DWORD *)(v3 + 4) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198E48D9CLL);
  }
  if (*(_BYTE *)(v3 + 13))
  {
    __break(0xC471u);
    JUMPOUT(0x198E48DBCLL);
  }
  v5 = *(_QWORD *)(v3 + 40);
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x198E48DDCLL);
  }
  v6 = *(_QWORD *)(v3 + 48);
  v7 = a2;
  v8 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFC000 | 8);
  if ((v5 & 8) != 0)
    v8 = (uint64_t *)(v5 - 16);
  v9 = *v8;
  *(_QWORD *)(v6 + 8 * v7) = a3;
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v5 + 7))
    return JSC::Heap::writeBarrierSlowPath(v9 + 192, v5);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v3 = *(_QWORD *)(result + 16);
  if (*(_DWORD *)(v3 + 4) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198E48E98);
  }
  if (*(_BYTE *)(v3 + 13) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x198E48EB8);
  }
  if (!*(_QWORD *)(v3 + 40))
  {
    __break(0xC471u);
    JUMPOUT(0x198E48ED8);
  }
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 16);
  v5 = *(_QWORD *)(v3 + 48) + 48 * a2;
  v6 = *(_OWORD *)(a3 + 56);
  *(_OWORD *)v5 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = v4;
  v7 = *(_QWORD *)(v3 + 40);
  v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFC000 | 8);
  if ((v7 & 8) != 0)
    v8 = (uint64_t *)(v7 - 16);
  v9 = *v8;
  *(_QWORD *)(v5 + 40) = a3;
  if ((a3 & 0xFFFE000000000002) == 0 && v7 && *(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v7 + 7))
    return JSC::Heap::writeBarrierSlowPath(v9 + 192, v7);
  return result;
}

uint64_t JSC::JSWebAssemblyTable::clear(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(this + 16);
  if (*(_DWORD *)(v2 + 4) <= a2)
    goto LABEL_10;
  if (!*(_QWORD *)(v2 + 40))
  {
    __break(0xC471u);
    JUMPOUT(0x198E48F94);
  }
  if (*(_BYTE *)(v2 + 13) == 1)
  {
    v4 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 48 * a2);
    *v4 = 0;
    v4[1] = 0;
    v3 = v4 + 5;
    v4[3] = 0;
    v4[4] = 0;
    v4[2] = &JSC::Wasm::NullWasmCallee;
    goto LABEL_7;
  }
  if (*(_BYTE *)(v2 + 13))
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x198E48F74);
  }
  v3 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * a2);
LABEL_7:
  *v3 = 2;
  return this;
}

uint64_t JSC::JSWebAssemblyTable::type(JSC::JSWebAssemblyTable *this, JSC::JSGlobalObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  JSC::JSObject *v30;
  JSC *v31;
  JSC::StructureCache *v32;
  JSC::VM *v33;
  JSC::Structure *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  JSC::VM *v57;
  JSC::Structure *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  WTF::StringImpl *v84;
  unint64_t v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  __n128 v94;
  uint64_t v95;
  uint64_t v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t result;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  int *v122;
  int v123;
  int v124;
  uint64_t v125;

  v4 = *((_QWORD *)a2 + 7);
  v5 = *((_QWORD *)this + 2);
  if (!*(_BYTE *)(v5 + 13))
  {
    v15 = *(unsigned __int8 *)(v5 + 16);
    if (BYTE1(dword_1ECF4C7B0))
    {
      v16 = *(_QWORD *)(v5 + 24);
      if ((v15 + 29) > 1u || v16 != -17)
        return 0;
    }
    else if (v15 != 239)
    {
      return 0;
    }
    if ((v15 - 239) >= 2 && (_DWORD)v15 != 227)
      return 0;
    v7 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v7 = 0x900000002;
    v14 = "externref";
LABEL_14:
    *(_QWORD *)(v7 + 8) = v14;
    *(_DWORD *)(v7 + 16) = 4;
    v121 = (WTF::StringImpl *)v7;
    v26 = JSC::jsNontrivialString(v4, (JSC::VM *)&v121, v8, v9, v10, v11, v12, v13);
    v28 = v121;
    v121 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    v29 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    v30 = (JSC::JSObject *)*((_QWORD *)a2 + 82);
    v31 = (JSC *)*((_QWORD *)a2 + 7);
    v32 = (JSC::JSGlobalObject *)((char *)a2 + 1968);
    if ((v29 & 0xFF00000000) != 0)
    {
      v33 = (JSC::VM *)JSC::StructureCache::emptyObjectStructureForPrototype(v32, a2, v30, 3, 0, 0, v24, v25, v27);
      v18 = (int *)JSC::constructEmptyObject(v31, v33, v34, v35, v36, v37, v38, v39);
      WTF::AtomStringImpl::addLiteral((uint64_t)"maximum", 7uLL, v40, v41, v42, v43, v44, &v121);
      v48 = v121;
      if ((v29 & 0x80000000) != 0)
        v49 = COERCE__INT64((double)v29) + 0x2000000000000;
      else
        v49 = v29 | 0xFFFE000000000000;
      v121 = 0;
      v122 = v18;
      v123 = -1;
      v47.n128_u64[0] = 0x100000001000000;
      v124 = 0x1000000;
      v125 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v18, v4, (unint64_t)v48, v49, 0, (uint64_t)&v121, v45, v46, v47);
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
        {
          WTF::StringImpl::~StringImpl(v48, v50, v51, v52, v53, v54, v55, v56);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v48 -= 2;
        }
      }
    }
    else
    {
      v57 = (JSC::VM *)JSC::StructureCache::emptyObjectStructureForPrototype(v32, a2, v30, 2, 0, 0, v24, v25, v27);
      v18 = (int *)JSC::constructEmptyObject(v31, v57, v58, v59, v60, v61, v62, v63);
    }
    v80 = *(unsigned int *)(*((_QWORD *)this + 2) + 4);
    WTF::AtomStringImpl::addLiteral((uint64_t)"minimum", 7uLL, v52, v53, v54, v55, v56, &v121);
    v84 = v121;
    if ((v80 & 0x80000000) != 0)
      v85 = COERCE__INT64((double)v80) + 0x2000000000000;
    else
      v85 = v80 | 0xFFFE000000000000;
    v121 = 0;
    v122 = v18;
    v123 = -1;
    v83.n128_u64[0] = 0x100000001000000;
    v124 = 0x1000000;
    v125 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v18, v4, (unint64_t)v84, v85, 0, (uint64_t)&v121, v81, v82, v83);
    if (v84)
    {
      if (*(_DWORD *)v84 == 2)
      {
        WTF::StringImpl::~StringImpl(v84, v86, v87, v88, v89, v90, v91, v92);
        WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
      }
      else
      {
        *(_DWORD *)v84 -= 2;
      }
    }
    WTF::AtomStringImpl::addLiteral((uint64_t)"element", 7uLL, v88, v89, v90, v91, v92, &v121);
    v93 = v121;
    v121 = 0;
    v122 = v18;
    v123 = -1;
    v94.n128_u64[0] = 0x100000001000000;
    v124 = 0x1000000;
    v125 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v18, v4, (unint64_t)v93, v26, 0, (uint64_t)&v121, v95, v96, v94);
    if (v93)
    {
      if (*(_DWORD *)v93 == 2)
      {
        WTF::StringImpl::~StringImpl(v93, v97, v98, v99, v100, v101, v102, v103);
        WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
      }
      else
      {
        *(_DWORD *)v93 -= 2;
      }
    }
    return (uint64_t)v18;
  }
  if (*(_BYTE *)(v5 + 13) == 1)
  {
    v6 = *(unsigned __int8 *)(v5 + 16);
    if ((v6 - 239) >= 2 && v6 != 227)
      return 0;
    v7 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v7 = 0x700000002;
    v14 = "funcref";
    goto LABEL_14;
  }
  result = 136;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Wasm::Instance::setMemory(JSC::Wasm::Instance *a1, JSC::Wasm::Memory **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::Memory *v9;
  JSC::Wasm::Memory *v10;

  v9 = *a2;
  *a2 = 0;
  v10 = (JSC::Wasm::Memory *)*((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = v9;
  if (v10)
  {
    WTF::RefCounted<JSC::Wasm::Memory>::deref(v10);
    v9 = (JSC::Wasm::Memory *)*((_QWORD *)a1 + 8);
  }
  JSC::Wasm::Memory::registerInstance(v9, a1, a3, a4, a5, a6, a7, a8);
  return JSC::Wasm::Instance::updateCachedMemory((uint64_t)a1);
}

void WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>(uint64_t a1@<X0>, WTF::AtomString *a2@<X8>)
{
  size_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  _BYTE v40[32];
  int *__dst[17];

  __dst[16] = *(int **)MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  if ((v3 & 0x80000000) != 0)
  {
    *(_QWORD *)a2 = 0;
  }
  else
  {
    v4 = *(unsigned __int8 *)(a1 + 24);
    if (v3 > 0x3F)
    {
      v11 = *(_OWORD *)(a1 + 16);
      v39[0] = *(_OWORD *)a1;
      v39[1] = v11;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>(v3, v4 != 0, (uint64_t)v39, __dst);
      WTF::AtomString::AtomString(a2, (WTF::StringImpl *)__dst[0], v12, v13, v14, v15, v16, v17);
      v25 = (WTF::StringImpl *)__dst[0];
      __dst[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
        {
          WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
          WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
        }
        else
        {
          *(_DWORD *)v25 -= 2;
        }
      }
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 16);
      if (*(_BYTE *)(a1 + 24))
      {
        memcpy(__dst, *(const void **)a1, v3);
        WTF::AtomStringImpl::add((uint64_t)__dst, v5, v6, v7, v8, v9, v10, a2);
      }
      else
      {
        WTF::Unicode::convert(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)__dst, v3, (uint64_t)v40);
        WTF::AtomStringImpl::add((uint64_t)__dst, v5, v26, v27, v28, v29, v30, a2);
      }
    }
  }
}

WTF::AtomString *WTF::AtomString::AtomString(WTF::AtomString *this, WTF::StringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v10;

  if (a2)
  {
    if ((*((_BYTE *)a2 + 16) & 0x10) != 0)
    {
      *(_DWORD *)a2 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase((unint64_t)a2, a3, a4, a5, a6, a7, a8, (WTF *)&v10);
      a2 = v10;
    }
  }
  *(_QWORD *)this = a2;
  return this;
}

void WTF::Detail::CallableWrapper<JSC::JSWebAssemblyInstance::tryCreate(JSC::VM &,JSC::JSGlobalObject *,JSC::Identifier const&,JSC::JSWebAssemblyModule *,JSC::JSObject *,JSC::Structure *,WTF::Ref<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>> &&,JSC::Wasm::CreationMode)::$_1,void,JSC::Wasm::Memory::GrowSuccess,JSC::PageCount,JSC::Wasm::Memory::GrowSuccess>::call(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  JSC::VM *v11;
  JSC::ArrayBuffer *v12;
  BOOL v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v8 = a4;
  v9 = a3;
  v11 = *(JSC::VM **)(a1 + 8);
  v10 = *(_QWORD **)(a1 + 16);
  v12 = (JSC::ArrayBuffer *)v10[4];
  if (!v12)
    goto LABEL_9;
  if (*(_BYTE *)(*(_QWORD *)(v10[2] + 8) + 5))
  {
    v10[4] = 0;
    goto LABEL_5;
  }
  JSC::ArrayBuffer::detach(v12, v11, a3, a4, a5, a6, a7, a8);
  v12 = (JSC::ArrayBuffer *)v10[4];
  v10[4] = 0;
  if (v12)
  {
LABEL_5:
    v13 = *(_DWORD *)v12 == 2;
    *(_DWORD *)v12 -= 2;
    if (v13)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  v10[3] = 0;
LABEL_9:
  v22 = (unint64_t)v8 << 16;
  v23 = (unint64_t)v9 << 16;
  if (v22 != v23)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v11 + 192, 0, (uint64_t)v10, v22 - v23, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(void *),JSC::JSWebAssemblyMemory::buffer(JSC::JSGlobalObject *)::$_0>::~SharedTaskFunctor(uint64_t a1)
{
  WTF::Ref<JSC::BufferMemoryHandle,WTF::RawPtrTraits<JSC::BufferMemoryHandle>,WTF::DefaultRefDerefTraits<JSC::BufferMemoryHandle>>::~Ref((unsigned int **)(a1 + 16));
  return a1;
}

void WTF::SharedTaskFunctor<void ()(void *),JSC::JSWebAssemblyMemory::buffer(JSC::JSGlobalObject *)::$_0>::~SharedTaskFunctor(unint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  WTF::Ref<JSC::BufferMemoryHandle,WTF::RawPtrTraits<JSC::BufferMemoryHandle>,WTF::DefaultRefDerefTraits<JSC::BufferMemoryHandle>>::~Ref((unsigned int **)(a1 + 16));
  WTF::fastFree(a1, v2, v3, v4, v5, v6, v7, v8);
}

void JSC::JSWebAssemblyTag::destroy(JSC::JSWebAssemblyTag *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;

  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v12 = *(unsigned int **)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          v15 = v9;
          WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
          v9 = v15;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

unint64_t JSC::JSWebAssemblyTag::create(JSC *this, JSC::VM *a2, unint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  unint64_t result;
  int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v11 = (_QWORD *)*((_QWORD *)this + 5130);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::webAssemblyTagSpaceSlow((JSC::Heap **)this + 4694);
  result = v11[3];
  if (result >= v11[4])
  {
    result = v11[5];
    if ((result & 1) != 0)
    {
      JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v11, (uint64_t)this + 192, 32, 0, 0, v16, v17, v18);
      goto LABEL_5;
    }
    v15 = *(_QWORD *)(result + 8) ^ v11[6];
    v11[4] = result + HIDWORD(v15);
    v11[5] = result + (int)v15;
  }
  v11[3] = result + 32;
LABEL_5:
  *(_DWORD *)result = 0;
  v13 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v13;
  *(_QWORD *)(result + 8) = 0;
  do
    v14 = __ldaxr(a4);
  while (__stlxr(v14 + 1, a4));
  *(_QWORD *)(result + 16) = a4;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::JSWebAssemblyTag::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::JSWebAssemblyTag::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::Wasm::wasmToJS@<X0>(JSC::Wasm *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  unint64_t v6;
  JSC::ARM64LogicalImmediate *v7;
  unsigned __int8 **v8;
  _DWORD *v9;
  unint64_t v10;
  unsigned __int8 **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::Wasm::WasmToJSCallee *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  JSC::CCallHelpers *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  signed __int8 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  int8x16_t *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint8x8_t v142;
  __int32 v143;
  uint8x8_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  unsigned int v151;
  unsigned int v152;
  int8x16_t *v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  unint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int v219;
  uint8x8_t v220;
  __int32 v221;
  uint8x8_t v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  _QWORD *v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unsigned int *v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int v277;
  uint8x8_t v278;
  __int32 v279;
  uint8x8_t v280;
  int8x16_t **v281;
  uint64_t v282;
  char v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  char v314;
  unsigned int *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unsigned int *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  __int8 v327;
  __int8 v328;
  uint64_t v329;
  int8x16_t *v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int v338;
  uint8x8_t v339;
  __int32 v340;
  uint8x8_t v341;
  uint64_t v342;
  uint64_t v343;
  char v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  char v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  char v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unsigned int v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unsigned int v421;
  uint8x8_t v422;
  __int32 v423;
  uint8x8_t v424;
  uint64_t v425;
  uint64_t v426;
  char v427;
  signed __int8 v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  char v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  char v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  unsigned int v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unsigned int v498;
  uint8x8_t v499;
  __int32 v500;
  uint8x8_t v501;
  uint64_t v502;
  uint64_t v503;
  char v504;
  char v505;
  unint64_t v506;
  unsigned int v507;
  unsigned int v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  unsigned int v513;
  uint8x8_t v514;
  __int32 v515;
  uint8x8_t v516;
  uint64_t v517;
  uint64_t v518;
  char v519;
  unint64_t v520;
  char v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  char v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  _BYTE *v567;
  unint64_t v568;
  char v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  char v596;
  char v597;
  unsigned int v598;
  uint64_t v599;
  unint64_t v600;
  uint64_t v601;
  uint64_t v602;
  unsigned int v603;
  uint8x8_t v604;
  __int32 v605;
  uint8x8_t v606;
  uint64_t v607;
  uint64_t v608;
  char v609;
  unint64_t v610;
  char v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  char v638;
  char v639;
  uint64_t v640;
  _BYTE *v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  char v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  char *v663;
  unsigned int v664;
  uint64_t v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  unsigned int v669;
  uint8x8_t v670;
  __int32 v671;
  uint8x8_t v672;
  uint64_t v673;
  uint64_t v674;
  char v675;
  unint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  char v697;
  char v698;
  uint64_t v699;
  _BYTE *v700;
  uint64_t v701;
  char v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  _DWORD *v711;
  WTF::StringImpl *v712;
  char v713;
  char v714;
  uint64_t v715;
  _BYTE *v716;
  uint64_t v717;
  char v718;
  uint64_t v719;
  _BYTE *v720;
  uint64_t v721;
  char v722;
  uint64_t v723;
  _BYTE *v724;
  uint64_t v725;
  unint64_t v726;
  void *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  char v734;
  char v735;
  uint64_t v736;
  _BYTE *v737;
  uint64_t v738;
  char v739;
  char v740;
  uint64_t v741;
  _BYTE *v742;
  uint64_t v743;
  char v744;
  char v745;
  uint64_t v746;
  _BYTE *v747;
  uint64_t v748;
  JSC::ARM64LogicalImmediate *v749;
  unsigned int v750;
  char *v751;
  uint64_t v752;
  _DWORD *v754;
  _DWORD v755[3];
  char v756;
  char v757;
  _BYTE v758[12];
  _DWORD v759[2];
  char v760;
  __int16 v761;
  char v762;
  _DWORD v763[2];
  char v764;
  __int16 v765;
  char v766;
  _BYTE v767[12];
  _DWORD v768[2];
  char v769;
  __int16 v770;
  char v771;
  _DWORD v772[2];
  char v773;
  __int16 v774;
  char v775;
  WTF::StringImpl *v776[2];
  _DWORD v777[3];
  _DWORD v778[2];
  char v779;
  __int16 v780;
  char v781;
  _DWORD v782[3];
  _DWORD v783[3];
  char *v784;
  uint64_t v785;
  _DWORD v786[6];
  _DWORD v787[3];
  _DWORD v788[3];
  char *v789;
  uint64_t v790;
  _BYTE v791[31];
  char v792;
  unsigned __int8 v793;
  int v794;
  unsigned int *v795;
  unsigned int v796;
  unsigned int *v797[6];
  signed __int8 *v798;
  unsigned int v799;
  int8x16_t *v800;
  uint64_t v801;
  _DWORD v802[3];
  char v803;
  _QWORD *v804;
  uint64_t v805;
  _QWORD v806[19];
  char v807;
  _DWORD v808[8];
  _DWORD v809[6];
  _QWORD v810[17];
  unsigned int v811;
  unsigned int v812;
  int v813;
  char v814;
  uint64_t v815;
  char v816;
  int v817;
  char v818;
  uint64_t v819;

  v819 = *MEMORY[0x1E0C80C00];
  v5 = JSC::Wasm::wasmCallingConvention(this);
  JSC::Wasm::jsCallingConvention((JSC::Wasm *)v5);
  v6 = JSC::Wasm::TypeDefinition::expand((unint64_t)this);
  v7 = (JSC::ARM64LogicalImmediate *)v6;
  v8 = (unsigned __int8 **)(v6 + 8);
  if (*(_DWORD *)(v6 + 32))
    v9 = 0;
  else
    v9 = (_DWORD *)(v6 + 8);
  v10 = v9[2];
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v808, 0);
  if (*((_DWORD *)v7 + 8))
    v11 = 0;
  else
    v11 = v8;
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)v5, v11, 1, (char *)v797);
  JSC::Wasm::CallInformation::computeResultsOffsetList(v797, &v795);
  JSC::AssemblyHelpers::emitFunctionPrologue((JSC::AssemblyHelpers *)v808, v12, v13, v14, v15, v16, v17, v18);
  if ((_BYTE)word_1ECF4C286)
  {
    v804 = (_QWORD *)JSC::Wasm::WasmToJSCallee::singleton(v19);
    v789 = (char *)((JSC::Wasm::WasmToJSCallee::singleton((JSC::Wasm::WasmToJSCallee *)v804) - qword_1ECF4C080) | 3);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [24],WTF::RawPointer,char [9],WTF::RawPointer>((uint64_t)v808, (const void **)&v804, (const void **)&v789);
  }
  v20 = JSC::Wasm::WasmToJSCallee::singleton(v19);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v808, (v20 - qword_1ECF4C080) | 3, 8, v21, v22, v23, v24, v25);
  v33 = v812;
  if (v812 + 4 > v811)
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v810, v26, v27, v28, v29, v30, v31, v32);
    v33 = v812;
  }
  *(_DWORD *)(v810[0] + v33) = -1459543117;
  v812 += 4;
  if (HIBYTE(dword_1ECF4C7B0) && ((uint64_t)v797[0] & 4) != 0)
  {
    JSC::Wasm::handleBadImportTypeUse(a3, v808, a2, v28, v29, v30, v31, v32);
    goto LABEL_114;
  }
  v749 = v7;
  v752 = a3;
  v34 = ((8 * (v10 + 1)) | 8) + 24;
  if (v34 <= v796)
    v34 = v796;
  JSC::MacroAssemblerARM64::sub64((uint64_t)v808, 31, (v34 + 15) & 0xFFFFFFF0, 31, v29, v30, v31, v32);
  v793 = 31;
  v794 = -16;
  v754 = v9;
  if ((_DWORD)v10)
  {
    v41 = 0;
    v750 = 0;
    v42 = 0;
    v43 = 48;
    v44 = 48;
    while (1)
    {
      v45 = *(unsigned __int8 *)(*(_QWORD *)v9 + 16 * (v42 + v9[3]));
      if ((v45 - 254) < 2)
        goto LABEL_18;
      v48 = v45 + 64;
      if ((v45 - 192) <= 0x3D)
        break;
LABEL_23:
      if ((_DWORD)v10 == ++v42)
        goto LABEL_28;
    }
    if (((1 << v48) & 0x80E7C01C001C001) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198E49AF8);
    }
    if (((1 << v48) & 0x1801800000000) == 0)
    {
      if (((1 << v48) & 0x3000000000000000) != 0)
      {
        if (*((_DWORD *)v5 + 7) <= v750)
          v44 = (v44 + 8);
        else
          v44 = v44;
        ++v750;
        v43 += 8;
      }
      goto LABEL_23;
    }
LABEL_18:
    if (*((_DWORD *)v5 + 3) <= v41)
    {
      JSC::MacroAssemblerARM64::load64((uint64_t)v808, (v44 << 32) | 0x1D, 0, v36, v37, v38, v39, v40);
      v46 = 0;
      v44 = (v44 + 8);
    }
    else
    {
      v46 = *(_BYTE *)(*v5 + v41);
    }
    v47 = v46;
    if (v45 == 255)
    {
      JSC::MacroAssemblerARM64::and64((uint64_t)v808, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v46, v46);
      JSC::MacroAssemblerARM64::or64((uint64_t)v808, (JSC::ARM64LogicalImmediate *)0xFFFE000000000000, v47, v47);
    }
    ++v41;
    JSC::MacroAssemblerARM64::store64((uint64_t)v808, v47, v793 | ((unint64_t)(v794 + v43) << 32), v36, v37, v38, v39, v40);
    v43 += 8;
    v9 = v754;
    goto LABEL_23;
  }
LABEL_28:
  LOBYTE(v776[0]) = 0;
  v803 = 1;
  v792 = 0;
  v789 = &v792;
  v790 = (uint64_t)v808;
  LODWORD(v784) = 0;
  LODWORD(v800) = 48;
  v804 = v808;
  v805 = (uint64_t)&v803;
  v806[0] = &v789;
  v806[1] = v776;
  v806[2] = &v793;
  v806[3] = &v800;
  v806[4] = &v784;
  if ((_DWORD)v10)
  {
    v49 = 0;
    v50 = 0;
    v51 = 48;
    do
    {
      v52 = *(unsigned __int8 *)(*(_QWORD *)v9 + 16 * (v50 + v9[3]));
      if ((v52 - 254) >= 2)
      {
        switch(*(_BYTE *)(*(_QWORD *)v9 + 16 * (v50 + v9[3])))
        {
          case 0xCE:
          case 0xCF:
          case 0xD0:
          case 0xDE:
          case 0xDF:
          case 0xE0:
          case 0xEA:
          case 0xEB:
          case 0xEC:
          case 0xED:
          case 0xEE:
          case 0xF1:
          case 0xF2:
          case 0xF3:
          case 0xFB:
            goto LABEL_38;
          case 0xD1:
          case 0xD2:
          case 0xD3:
          case 0xD4:
          case 0xD5:
          case 0xD6:
          case 0xD7:
          case 0xD8:
          case 0xD9:
          case 0xDA:
          case 0xDB:
          case 0xDC:
          case 0xDD:
          case 0xE1:
          case 0xE2:
          case 0xE5:
          case 0xE6:
          case 0xE7:
          case 0xE8:
          case 0xE9:
          case 0xF4:
          case 0xF5:
          case 0xF6:
          case 0xF7:
          case 0xF8:
          case 0xF9:
          case 0xFA:
            goto LABEL_35;
          case 0xE3:
          case 0xE4:
          case 0xEF:
          case 0xF0:
            break;
          case 0xFC:
            if (*((_DWORD *)v5 + 7) <= v784)
            {
              JSC::MacroAssemblerARM64::loadDouble((uint64_t)v808, (v51 << 32) | 0x1D, 0, v36, v37, v38, v39, v40);
              v597 = 0;
              v51 = (v51 + 8);
            }
            else
            {
              v597 = *(_BYTE *)(v5[2] + v784);
            }
            JSC::Wasm::wasmToJS(unsigned long,unsigned int)::$_1::operator()((uint64_t)&v804, v597, v35, v36, v37, v38, v39, v40);
            goto LABEL_35;
          case 0xFD:
            if (*((_DWORD *)v5 + 7) <= v784)
            {
              JSC::MacroAssemblerARM64::loadFloat((uint64_t)v808, (v51 << 32) | 0x1D, 0, v36, v37, v38, v39, v40);
              v596 = 0;
              v51 = (v51 + 8);
            }
            else
            {
              v596 = *(_BYTE *)(v5[2] + v784);
            }
            v643 = v596;
            JSC::MacroAssemblerARM64::convertFloatToDouble(v808, v643, v643, v36, v37, v38, v39, v40);
            JSC::Wasm::wasmToJS(unsigned long,unsigned int)::$_1::operator()((uint64_t)&v804, v643, v644, v645, v646, v647, v648, v649);
            v9 = v754;
            goto LABEL_35;
          default:
            if (v52 != 192)
              goto LABEL_35;
LABEL_38:
            __break(0xC471u);
            JUMPOUT(0x198E49BF0);
        }
      }
      if (*((_DWORD *)v5 + 3) <= v49)
        v51 = (v51 + 8);
      else
        v51 = v51;
      ++v49;
      LODWORD(v800) = (_DWORD)v800 + 8;
LABEL_35:
      ++v50;
    }
    while ((_DWORD)v10 != v50);
  }
  v53 = (uint64_t)v791;
  v789 = v791;
  v790 = 2;
  if (((uint64_t)v797[0] & 1) != 0 && (_DWORD)v10)
  {
    v87 = 0;
    v751 = (char *)v806;
    v90 = 48;
    do
    {
      if (*(unsigned __int8 *)(*(_QWORD *)v754 + 16 * (v754[3] + v87)) == 254)
      {
        v598 = 1;
        JSC::MacroAssemblerARM64::load64((uint64_t)v808, v793 | ((unint64_t)(v794 + v90) << 32), 1, v36, v37, v38, v39, v40);
        v804 = v806;
        LOWORD(v806[0]) = 19;
        v805 = 0x100000002;
        do
        {
          v599 = 0;
          v600 = 0;
          v601 = v598;
          do
          {
            if ((*((_BYTE *)v804 + v599 + 1) & 0x40) != 0)
              goto LABEL_337;
            v600 |= 1 << *((_BYTE *)v804 + v599 + 1);
            v599 += 2;
          }
          while (2 * v598 != v599);
          v602 = 0;
          do
          {
            v603 = *((_BYTE *)v804 + v602) & 0x7F;
            if (v603 >= 0x40)
              goto LABEL_337;
            v600 &= ~(1 << v603);
            v602 += 2;
          }
          while (2 * v598 != v602);
          v604 = (uint8x8_t)vcnt_s8((int8x8_t)v600);
          v604.i16[0] = vaddlv_u8(v604);
          v605 = v604.i32[0];
          v606 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v600));
          v606.i16[0] = vaddlv_u8(v606);
          if (v606.i32[0] + v605)
          {
            v607 = 0;
            if (v598 <= 1uLL)
              v601 = 1;
            v608 = 2 * v601;
            while (1)
            {
              v609 = *((_BYTE *)v804 + v607 + 1);
              if ((v609 & 0x7Fu) >= 0x40)
                goto LABEL_337;
              if (((v600 >> (v609 & 0x7F)) & 1) != 0)
                break;
              v607 += 2;
              if (v608 == v607)
                goto LABEL_293;
            }
            JSC::MacroAssemblerARM64::move(v808, *((char *)v804 + v607), v609, v82, v83, v84, v85, v86);
            memmove((char *)v804 + v607, (char *)v804 + v607 + 2, 2 * HIDWORD(v805) - v607 - 2);
            v598 = --HIDWORD(v805);
          }
          else
          {
            v638 = *(_BYTE *)v804;
            v639 = *((_BYTE *)v804 + 1);
            JSC::MacroAssemblerARM64::swap((uint64_t)v808, *(char *)v804, v639, v82, v83, v84, v85, v86);
            memmove(v804, (char *)v804 + 2, 2 * HIDWORD(v805) - 2);
            v640 = --HIDWORD(v805);
            if (HIDWORD(v805))
            {
              v641 = v804;
              v642 = 2 * v640;
              while (*v641 != v639)
              {
                v641 += 2;
                v642 -= 2;
                if (!v642)
                  goto LABEL_306;
              }
              *v641 = v638;
            }
LABEL_306:
            WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,2u>(std::array<JSC::ARM64Registers::RegisterID,2u>,std::array<JSC::ARM64Registers::RegisterID,2u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&v804, (uint64_t)&v784, 0);
            v598 = HIDWORD(v805);
          }
LABEL_293:
          ;
        }
        while (v598);
        v610 = (unint64_t)v804;
        if (v806 != v804 && v804)
        {
          v804 = 0;
          LODWORD(v805) = 0;
          WTF::fastFree(v610, v80, v81, v82, v83, v84, v85, v86);
        }
        if (!v814)
        {
          __break(0xC471u);
          JUMPOUT(0x198E4BC10);
        }
        *(_DWORD *)(v815 + 208) &= ~v817;
        v611 = v816;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v808, (uint64_t)operationConvertToBigInt, v816, v82, v83, v84, v85, v86);
        v813 = 0;
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v810, (32 * (v611 & 0x1F)) | 0xD63F0000, v612, v613, v614, v615, v616, v617);
        JSC::MacroAssemblerARM64::load64((uint64_t)v808, 0x800000013, 2, v618, v619, v620, v621, v622);
        JSC::MacroAssembler::branchTestPtr((uint64_t)v808, 1, 0x1000000002, 0xFFFFFFFFLL, v623, v624, v625, v626, (uint64_t)v788);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v789, v788, v627, v628, v629, v630, v631, v632);
        JSC::MacroAssemblerARM64::store64((uint64_t)v808, 0, v793 | ((unint64_t)(v794 + v90) << 32), v633, v634, v635, v636, v637);
      }
      v90 = (v90 + 8);
      v87 = (v87 + 1);
    }
    while ((_DWORD)v87 != (_DWORD)v10);
  }
  v751 = v791;
  JSC::AssemblyHelpers::storeValue((uint64_t)v808, v793 | ((unint64_t)(v794 + 40) << 32), v35, v36, v37, v38, v39, v40);
  JSC::MacroAssemblerARM64::load64((uint64_t)v808, ((unint64_t)((120 * a2 + 176) >> 3) << 35) | 0x13, 0, v54, v55, v56, v57, v58);
  JSC::MacroAssemblerARM64::store64((uint64_t)v808, 0, v793 | ((unint64_t)(v794 + 24) << 32), v59, v60, v61, v62, v63);
  JSC::MacroAssemblerARM64::store32((uint64_t)v808, v10 + 1, v793 | ((unint64_t)(v794 + 32) << 32), v64, v65, v66, v67, v68);
  JSC::MacroAssemblerARM64::add64((uint64_t)v808, 120 * a2 + 192, 19, 2, v69, v70, v71, v72);
  JSC::CallLinkInfo::emitDataICFastPath((JSC::CallLinkInfo *)v808, v73, v74, v75, v76, v77, v78, v79);
  v87 = (uint64_t)v754;
  v88 = v754[3];
  if (v88 != 1)
  {
    v90 = (uint64_t)&v800;
    v53 = (uint64_t)g_config;
    if (!v88)
      goto LABEL_86;
    v272 = 3;
    JSC::MacroAssemblerARM64::move(v808, 31, 3, v82, v83, v84, v85, v86);
    v10 = (unint64_t)v806;
    v804 = v806;
    LODWORD(v806[0]) = 33554451;
    WORD2(v806[0]) = 1053;
    v805 = 0x300000004;
    while (1)
    {
      v273 = 0;
      v274 = 0;
      v275 = v272;
      do
      {
        if ((*((_BYTE *)v804 + v273 + 1) & 0x40) != 0)
          goto LABEL_337;
        v274 |= 1 << *((_BYTE *)v804 + v273 + 1);
        v273 += 2;
      }
      while (2 * v272 != v273);
      v276 = 0;
      do
      {
        v277 = *((_BYTE *)v804 + v276) & 0x7F;
        if (v277 >= 0x40)
          goto LABEL_337;
        v274 &= ~(1 << v277);
        v276 += 2;
      }
      while (2 * v272 != v276);
      v278 = (uint8x8_t)vcnt_s8((int8x8_t)v274);
      v278.i16[0] = vaddlv_u8(v278);
      v279 = v278.i32[0];
      v280 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v274));
      v280.i16[0] = vaddlv_u8(v280);
      if (v280.i32[0] + v279)
      {
        v281 = 0;
        if (v272 <= 1uLL)
          v275 = 1;
        v282 = 2 * v275;
        while (1)
        {
          v283 = *((_BYTE *)v281 + (_QWORD)v804 + 1);
          if ((v283 & 0x7Fu) >= 0x40)
            goto LABEL_337;
          if (((v274 >> (v283 & 0x7F)) & 1) != 0)
            break;
          v281 = (int8x16_t **)((char *)v281 + 2);
          if ((int8x16_t **)v282 == v281)
            goto LABEL_134;
        }
        JSC::MacroAssemblerARM64::move(v808, *((char *)v281 + (_QWORD)v804), v283, v82, v83, v84, v85, v86);
        memmove((char *)v281 + (_QWORD)v804, (char *)v281 + (_QWORD)v804 + 2, 2 * HIDWORD(v805) - (_QWORD)v281 - 2);
        v272 = --HIDWORD(v805);
      }
      else
      {
        v281 = &v800;
        v697 = *(_BYTE *)v804;
        v698 = *((_BYTE *)v804 + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)v808, *(char *)v804, v698, v82, v83, v84, v85, v86);
        memmove(v804, (char *)v804 + 2, 2 * HIDWORD(v805) - 2);
        v699 = --HIDWORD(v805);
        if (HIDWORD(v805))
        {
          v700 = v804;
          v701 = 2 * v699;
          while (*v700 != v698)
          {
            v700 += 2;
            v701 -= 2;
            if (!v701)
              goto LABEL_349;
          }
          *v700 = v697;
        }
LABEL_349:
        WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,4u>(std::array<JSC::ARM64Registers::RegisterID,4u>,std::array<JSC::ARM64Registers::RegisterID,4u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&v804, (uint64_t)&v784, 0);
        v272 = HIDWORD(v805);
        v90 = (uint64_t)&v800;
      }
LABEL_134:
      if (!v272)
      {
        v284 = (unint64_t)v804;
        if (v806 != v804 && v804)
        {
          v804 = 0;
          LODWORD(v805) = 0;
          WTF::fastFree(v284, v80, v81, v82, v83, v84, v85, v86);
        }
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v808, (uint64_t)v749, 1, v82, v83, v84, v85, v86);
        if (!v814)
        {
          __break(0xC471u);
          JUMPOUT(0x198E4BCDCLL);
        }
        *(_DWORD *)(v815 + 208) &= ~v817;
        v290 = v816;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v808, (uint64_t)operationIterateResults, v816, v285, v286, v287, v288, v289);
        v813 = 0;
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v810, (32 * (v290 & 0x1F)) | 0xD63F0000, v291, v292, v293, v294, v295, v296);
        JSC::MacroAssemblerARM64::load64((uint64_t)v808, 0x800000013, 2, v297, v298, v299, v300, v301);
        JSC::MacroAssembler::branchTestPtr((uint64_t)v808, 1, 0x1000000002, 0xFFFFFFFFLL, v302, v303, v304, v305, (uint64_t)v755);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v789, v755, v306, v307, v308, v309, v310, v311);
        if (v754[3])
        {
          v312 = 0;
          v313 = 0;
          do
          {
            if (v313 >= v799)
            {
              __break(0xC471u);
              JUMPOUT(0x198E4BF10);
            }
            v314 = v798[v312];
            if (v798[v312 + 8] == 1)
            {
              v272 = v272 & 0xFFFFFF80 | (v314 + 32) & 0x7F;
              v321 = JSC::RegisterAtOffsetList::find(&v795, v272);
              JSC::MacroAssemblerARM64::loadDouble((uint64_t)v808, ((unint64_t)(*(_QWORD *)v321 >> 8) << 34) | 0x1F, v314, v322, v323, v324, v325, v326);
            }
            else if (!v798[v312 + 8])
            {
              LODWORD(v281) = v281 & 0xFFFFFF80 | v314 & 0x7F;
              v315 = JSC::RegisterAtOffsetList::find(&v795, v281);
              JSC::MacroAssemblerARM64::load64((uint64_t)v808, ((unint64_t)(*(_QWORD *)v315 >> 8) << 34) | 0x1F, v314, v316, v317, v318, v319, v320);
            }
            ++v313;
            v312 += 24;
          }
          while (v313 < v754[3]);
        }
        goto LABEL_86;
      }
    }
  }
  v89 = **(unsigned __int8 **)v754;
  v90 = (uint64_t)&v800;
  v53 = (uint64_t)g_config;
  if (v89 != 255)
  {
    switch(v89)
    {
      case 252:
        if (!v799)
        {
          __break(0xC471u);
          JUMPOUT(0x198E4BF28);
        }
        v428 = *v798;
        v749 = (JSC::ARM64LogicalImmediate *)v806;
        v804 = v806;
        v805 = 2;
        if (!v814)
        {
          __break(0xC471u);
          JUMPOUT(0x198E4BD1CLL);
        }
        *(_DWORD *)(v815 + 208) &= ~v817;
        JSC::MacroAssemblerARM64::branchTest64((JSC::ARM64LogicalImmediate *)0xFFFE000000000000, (uint64_t)v808, 0, 0, v83, v84, v85, v86, (uint64_t)&v800);
        JSC::MacroAssemblerARM64::branch64((uint64_t)v808, 3, 0, 0xFFFE000000000000, v429, v430, v431, v432, (uint64_t)v776);
        v345 = v428;
        JSC::MacroAssemblerARM64::convertInt32ToDouble(v808, 0, v345, v433, v434, v435, v436, v437);
        JSC::ARM64Assembler::label(v809, v438, v439, v440, v441, v442, v443, v444, (int *)&v784);
        v10 = (unint64_t)v810;
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v810, 335544320, v445, v446, v447, v448, v449, v450);
        if (v818)
          v457 = 69;
        else
          v457 = 65;
        v763[0] = (_DWORD)v784;
        v763[1] = 0;
        v764 = v457;
        v90 = 15;
        v765 = 15;
        v87 = 255;
        v766 = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v804, v763, v451, v452, v453, v454, v455, v456);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v776, (uint64_t)v808, v458, v459, v460, v461, v462, v463);
        JSC::AssemblyHelpers::unboxDoubleWithoutAssertions(v808, 0, 1, v345, 0, v464, v465, v466);
        JSC::ARM64Assembler::label(v809, v467, v468, v469, v470, v471, v472, v473, (int *)&v784);
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v810, 335544320, v474, v475, v476, v477, v478, v479);
        if (v818)
          v486 = 69;
        else
          v486 = 65;
        v759[0] = (_DWORD)v784;
        v759[1] = 0;
        v760 = v486;
        v761 = 15;
        v762 = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v804, v759, v480, v481, v482, v483, v484, v485);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v800, (uint64_t)v808, v487, v488, v489, v490, v491, v492);
        v784 = (char *)v786;
        v786[0] = 16777235;
        v785 = 0x200000002;
        v493 = 2;
        v53 = (uint64_t)g_config;
        do
        {
          v494 = 0;
          v495 = 0;
          v496 = v493;
          do
          {
            if ((v784[v494 + 1] & 0x40) != 0)
              goto LABEL_337;
            v495 |= 1 << v784[v494 + 1];
            v494 += 2;
          }
          while (2 * v493 != v494);
          v497 = 0;
          do
          {
            v498 = v784[v497] & 0x7F;
            if (v498 >= 0x40)
              goto LABEL_337;
            v495 &= ~(1 << v498);
            v497 += 2;
          }
          while (2 * v493 != v497);
          v499 = (uint8x8_t)vcnt_s8((int8x8_t)v495);
          v499.i16[0] = vaddlv_u8(v499);
          v500 = v499.i32[0];
          v501 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v495));
          v501.i16[0] = vaddlv_u8(v501);
          if (v501.i32[0] + v500)
          {
            v502 = 0;
            if (v493 <= 1uLL)
              v496 = 1;
            v503 = 2 * v496;
            while (1)
            {
              v504 = v784[v502 + 1];
              if ((v504 & 0x7Fu) >= 0x40)
                goto LABEL_337;
              if (((v495 >> (v504 & 0x7F)) & 1) != 0)
                break;
              v502 += 2;
              if (v503 == v502)
                goto LABEL_231;
            }
            JSC::MacroAssemblerARM64::move(v808, v784[v502], v504, v82, v83, v84, v85, v86);
            memmove(&v784[v502], &v784[v502 + 2], 2 * HIDWORD(v785) - v502 - 2);
            v493 = --HIDWORD(v785);
          }
          else
          {
            v90 = *v784;
            v722 = v784[1];
            JSC::MacroAssemblerARM64::swap((uint64_t)v808, v90, v722, v82, v83, v84, v85, v86);
            memmove(v784, v784 + 2, 2 * HIDWORD(v785) - 2);
            v723 = --HIDWORD(v785);
            if (HIDWORD(v785))
            {
              v724 = v784;
              v725 = 2 * v723;
              while (*v724 != v722)
              {
                v724 += 2;
                v725 -= 2;
                if (!v725)
                  goto LABEL_375;
              }
              *v724 = v90;
            }
LABEL_375:
            WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,2u>(std::array<JSC::ARM64Registers::RegisterID,2u>,std::array<JSC::ARM64Registers::RegisterID,2u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&v784, (uint64_t)&v803, 0);
            v493 = HIDWORD(v785);
          }
LABEL_231:
          ;
        }
        while (v493);
        v568 = (unint64_t)v784;
        v87 = (uint64_t)v754;
        if (v786 != (_DWORD *)v784 && v784)
        {
          v784 = 0;
          LODWORD(v785) = 0;
          WTF::fastFree(v568, v80, v81, v82, v83, v84, v85, v86);
        }
        v90 = (uint64_t)&v800;
        if (!v814)
        {
          __break(0xC471u);
          JUMPOUT(0x198E4BD7CLL);
        }
        *(_DWORD *)(v815 + 208) &= ~v817;
        v569 = v816;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v808, (uint64_t)operationConvertToF64, v816, v82, v83, v84, v85, v86);
        v813 = 0;
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v810, (32 * (v569 & 0x1F)) | 0xD63F0000, v570, v571, v572, v573, v574, v575);
        JSC::MacroAssemblerARM64::load64((uint64_t)v808, 0x800000013, 2, v576, v577, v578, v579, v580);
        JSC::MacroAssembler::branchTestPtr((uint64_t)v808, 1, 0x1000000002, 0xFFFFFFFFLL, v581, v582, v583, v584, (uint64_t)v758);
        v567 = v758;
        break;
      case 253:
        if (!v799)
        {
          __break(0xC471u);
          JUMPOUT(0x198E4BF20);
        }
        v345 = *v798;
        v749 = (JSC::ARM64LogicalImmediate *)v806;
        v804 = v806;
        v805 = 2;
        if (!v814)
        {
          __break(0xC471u);
          JUMPOUT(0x198E4BCFCLL);
        }
        *(_DWORD *)(v815 + 208) &= ~v817;
        JSC::MacroAssemblerARM64::branchTest64((JSC::ARM64LogicalImmediate *)0xFFFE000000000000, (uint64_t)v808, 0, 0, v83, v84, v85, v86, (uint64_t)&v800);
        JSC::MacroAssemblerARM64::branch64((uint64_t)v808, 3, 0, 0xFFFE000000000000, v346, v347, v348, v349, (uint64_t)v776);
        v10 = (unint64_t)v810;
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v810, v345 | 0x1E220000, v350, v351, v352, v353, v354, v355);
        JSC::ARM64Assembler::label(v809, v356, v357, v358, v359, v360, v361, v362, (int *)&v784);
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v810, 335544320, v363, v364, v365, v366, v367, v368);
        if (v818)
          v375 = 69;
        else
          v375 = 65;
        v772[0] = (_DWORD)v784;
        v772[1] = 0;
        v773 = v375;
        v90 = 15;
        v774 = 15;
        v775 = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v804, v772, v369, v370, v371, v372, v373, v374);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v776, (uint64_t)v808, v376, v377, v378, v379, v380, v381);
        JSC::AssemblyHelpers::unboxDoubleWithoutAssertions(v808, 0, 1, v345, 0, v382, v383, v384);
        JSC::MacroAssemblerARM64::convertDoubleToFloat(v808, v345, v345, v385, v386, v387, v388, v389);
        JSC::ARM64Assembler::label(v809, v390, v391, v392, v393, v394, v395, v396, (int *)&v784);
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v810, 335544320, v397, v398, v399, v400, v401, v402);
        if (v818)
          v409 = 69;
        else
          v409 = 65;
        v768[0] = (_DWORD)v784;
        v768[1] = 0;
        v769 = v409;
        v770 = 15;
        v771 = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v804, v768, v403, v404, v405, v406, v407, v408);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v800, (uint64_t)v808, v410, v411, v412, v413, v414, v415);
        v784 = (char *)v786;
        v786[0] = 16777235;
        v785 = 0x200000002;
        v416 = 2;
        v87 = (uint64_t)v754;
        v53 = (uint64_t)g_config;
        do
        {
          v417 = 0;
          v418 = 0;
          v419 = v416;
          do
          {
            if ((v784[v417 + 1] & 0x40) != 0)
              goto LABEL_337;
            v418 |= 1 << v784[v417 + 1];
            v417 += 2;
          }
          while (2 * v416 != v417);
          v420 = 0;
          do
          {
            v421 = v784[v420] & 0x7F;
            if (v421 >= 0x40)
              goto LABEL_337;
            v418 &= ~(1 << v421);
            v420 += 2;
          }
          while (2 * v416 != v420);
          v422 = (uint8x8_t)vcnt_s8((int8x8_t)v418);
          v422.i16[0] = vaddlv_u8(v422);
          v423 = v422.i32[0];
          v424 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v418));
          v424.i16[0] = vaddlv_u8(v424);
          if (v424.i32[0] + v423)
          {
            v425 = 0;
            if (v416 <= 1uLL)
              v419 = 1;
            v426 = 2 * v419;
            while (1)
            {
              v427 = v784[v425 + 1];
              if ((v427 & 0x7Fu) >= 0x40)
                goto LABEL_337;
              if (((v418 >> (v427 & 0x7F)) & 1) != 0)
                break;
              v425 += 2;
              if (v426 == v425)
                goto LABEL_205;
            }
            JSC::MacroAssemblerARM64::move(v808, v784[v425], v427, v82, v83, v84, v85, v86);
            memmove(&v784[v425], &v784[v425 + 2], 2 * HIDWORD(v785) - v425 - 2);
            v416 = --HIDWORD(v785);
          }
          else
          {
            v90 = *v784;
            v718 = v784[1];
            JSC::MacroAssemblerARM64::swap((uint64_t)v808, v90, v718, v82, v83, v84, v85, v86);
            memmove(v784, v784 + 2, 2 * HIDWORD(v785) - 2);
            v719 = --HIDWORD(v785);
            if (HIDWORD(v785))
            {
              v720 = v784;
              v721 = 2 * v719;
              while (*v720 != v718)
              {
                v720 += 2;
                v721 -= 2;
                if (!v721)
                  goto LABEL_370;
              }
              *v720 = v90;
            }
LABEL_370:
            WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,2u>(std::array<JSC::ARM64Registers::RegisterID,2u>,std::array<JSC::ARM64Registers::RegisterID,2u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&v784, (uint64_t)&v803, 0);
            v416 = HIDWORD(v785);
          }
LABEL_205:
          ;
        }
        while (v416);
        v544 = (unint64_t)v784;
        if (v786 != (_DWORD *)v784 && v784)
        {
          v784 = 0;
          LODWORD(v785) = 0;
          WTF::fastFree(v544, v80, v81, v82, v83, v84, v85, v86);
        }
        v90 = (uint64_t)&v800;
        if (!v814)
        {
          __break(0xC471u);
          JUMPOUT(0x198E4BD5CLL);
        }
        *(_DWORD *)(v815 + 208) &= ~v817;
        v545 = v816;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v808, (uint64_t)operationConvertToF32, v816, v82, v83, v84, v85, v86);
        v813 = 0;
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v810, (32 * (v545 & 0x1F)) | 0xD63F0000, v546, v547, v548, v549, v550, v551);
        JSC::MacroAssemblerARM64::load64((uint64_t)v808, 0x800000013, 2, v552, v553, v554, v555, v556);
        JSC::MacroAssembler::branchTestPtr((uint64_t)v808, 1, 0x1000000002, 0xFFFFFFFFLL, v557, v558, v559, v560, (uint64_t)v767);
        v567 = v767;
        break;
      case 254:
        if (!v799)
        {
          __break(0xC471u);
          JUMPOUT(0x198E4BF18);
        }
        v332 = *v798;
        v10 = (unint64_t)v806;
        v804 = v806;
        LODWORD(v806[0]) = 16777235;
        v805 = 0x200000002;
        v333 = 2;
        while (1)
        {
          v334 = 0;
          v335 = 0;
          v336 = v333;
          do
          {
            if ((*((_BYTE *)v804 + v334 + 1) & 0x40) != 0)
              goto LABEL_337;
            v335 |= 1 << *((_BYTE *)v804 + v334 + 1);
            v334 += 2;
          }
          while (2 * v333 != v334);
          v337 = 0;
          do
          {
            v338 = *((_BYTE *)v804 + v337) & 0x7F;
            if (v338 >= 0x40)
              goto LABEL_337;
            v335 &= ~(1 << v338);
            v337 += 2;
          }
          while (2 * v333 != v337);
          v339 = (uint8x8_t)vcnt_s8((int8x8_t)v335);
          v339.i16[0] = vaddlv_u8(v339);
          v340 = v339.i32[0];
          v341 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v335));
          v341.i16[0] = vaddlv_u8(v341);
          if (v341.i32[0] + v340)
          {
            v342 = 0;
            if (v333 <= 1uLL)
              v336 = 1;
            v343 = 2 * v336;
            while (1)
            {
              v344 = *((_BYTE *)v804 + v342 + 1);
              if ((v344 & 0x7Fu) >= 0x40)
                goto LABEL_337;
              if (((v335 >> (v344 & 0x7F)) & 1) != 0)
                break;
              v342 += 2;
              if (v343 == v342)
                goto LABEL_175;
            }
            JSC::MacroAssemblerARM64::move(v808, *((char *)v804 + v342), v344, v82, v83, v84, v85, v86);
            memmove((char *)v804 + v342, (char *)v804 + v342 + 2, 2 * HIDWORD(v805) - v342 - 2);
            v333 = --HIDWORD(v805);
          }
          else
          {
            v713 = *(_BYTE *)v804;
            v714 = *((_BYTE *)v804 + 1);
            JSC::MacroAssemblerARM64::swap((uint64_t)v808, *(char *)v804, v714, v82, v83, v84, v85, v86);
            memmove(v804, (char *)v804 + 2, 2 * HIDWORD(v805) - 2);
            v715 = --HIDWORD(v805);
            if (HIDWORD(v805))
            {
              v716 = v804;
              v717 = 2 * v715;
              while (*v716 != v714)
              {
                v716 += 2;
                v717 -= 2;
                if (!v717)
                  goto LABEL_365;
              }
              *v716 = v713;
            }
LABEL_365:
            WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,2u>(std::array<JSC::ARM64Registers::RegisterID,2u>,std::array<JSC::ARM64Registers::RegisterID,2u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&v804, (uint64_t)&v784, 0);
            v333 = HIDWORD(v805);
            v90 = (uint64_t)&v800;
          }
LABEL_175:
          if (!v333)
          {
            v520 = (unint64_t)v804;
            if (v806 != v804 && v804)
            {
              v804 = 0;
              LODWORD(v805) = 0;
              WTF::fastFree(v520, v80, v81, v82, v83, v84, v85, v86);
            }
            if (!v814)
            {
              __break(0xC471u);
              JUMPOUT(0x198E4BD3CLL);
            }
            *(_DWORD *)(v815 + 208) &= ~v817;
            v521 = v816;
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v808, (uint64_t)operationConvertToI64, v816, v82, v83, v84, v85, v86);
            v813 = 0;
            JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v810, (32 * (v521 & 0x1F)) | 0xD63F0000, v522, v523, v524, v525, v526, v527);
            JSC::MacroAssemblerARM64::load64((uint64_t)v808, 0x800000013, 2, v528, v529, v530, v531, v532);
            JSC::MacroAssembler::branchTestPtr((uint64_t)v808, 1, 0x1000000002, 0xFFFFFFFFLL, v533, v534, v535, v536, (uint64_t)v787);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v789, v787, v537, v538, v539, v540, v541, v542);
            v543 = v332;
            goto LABEL_344;
          }
        }
      default:
        if (BYTE1(dword_1ECF4C7B0))
          v505 = 29;
        else
          v505 = 17;
        if ((v505 + v89) > 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x198E4BF00);
        }
        v506 = *(_QWORD *)(*(_QWORD *)v754 + 8);
        if (BYTE1(dword_1ECF4C7B0))
        {
          v507 = (v89 + 29);
          if (v507 <= 1 && v506 == -17)
            goto LABEL_342;
          if (v507 <= 1 && v506 == -16)
            goto LABEL_244;
        }
        else
        {
          if (v89 == 239)
            goto LABEL_342;
          if (v89 == 240)
            goto LABEL_244;
        }
        if (BYTE2(dword_1ECF4C7B0)
          || (v89 + 29) > 1u
          || !BYTE1(dword_1ECF4C7B0)
          || v506 > 0xFFFFFFFFFFFFFFC0)
        {
          v10 = (unint64_t)v806;
          v804 = v806;
          LODWORD(v806[0]) = 33554451;
          v805 = 0x200000002;
          v664 = 2;
          while (1)
          {
            v665 = 0;
            v666 = 0;
            v667 = v664;
            do
            {
              if ((*((_BYTE *)v804 + v665 + 1) & 0x40) != 0)
                goto LABEL_337;
              v666 |= 1 << *((_BYTE *)v804 + v665 + 1);
              v665 += 2;
            }
            while (2 * v664 != v665);
            v668 = 0;
            do
            {
              v669 = *((_BYTE *)v804 + v668) & 0x7F;
              if (v669 >= 0x40)
                goto LABEL_337;
              v666 &= ~(1 << v669);
              v668 += 2;
            }
            while (2 * v664 != v668);
            v670 = (uint8x8_t)vcnt_s8((int8x8_t)v666);
            v670.i16[0] = vaddlv_u8(v670);
            v671 = v670.i32[0];
            v672 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v666));
            v672.i16[0] = vaddlv_u8(v672);
            if (v672.i32[0] + v671)
            {
              v673 = 0;
              if (v664 <= 1uLL)
                v667 = 1;
              v674 = 2 * v667;
              while (1)
              {
                v675 = *((_BYTE *)v804 + v673 + 1);
                if ((v675 & 0x7Fu) >= 0x40)
                  goto LABEL_337;
                if (((v666 >> (v675 & 0x7F)) & 1) != 0)
                  break;
                v673 += 2;
                if (v674 == v673)
                  goto LABEL_333;
              }
              JSC::MacroAssemblerARM64::move(v808, *((char *)v804 + v673), v675, v82, v83, v84, v85, v86);
              memmove((char *)v804 + v673, (char *)v804 + v673 + 2, 2 * HIDWORD(v805) - v673 - 2);
              v664 = --HIDWORD(v805);
            }
            else
            {
              v739 = *(_BYTE *)v804;
              v740 = *((_BYTE *)v804 + 1);
              JSC::MacroAssemblerARM64::swap((uint64_t)v808, *(char *)v804, v740, v82, v83, v84, v85, v86);
              memmove(v804, (char *)v804 + 2, 2 * HIDWORD(v805) - 2);
              v741 = --HIDWORD(v805);
              if (HIDWORD(v805))
              {
                v742 = v804;
                v743 = 2 * v741;
                while (*v742 != v740)
                {
                  v742 += 2;
                  v743 -= 2;
                  if (!v743)
                    goto LABEL_392;
                }
                *v742 = v739;
              }
LABEL_392:
              WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,2u>(std::array<JSC::ARM64Registers::RegisterID,2u>,std::array<JSC::ARM64Registers::RegisterID,2u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&v804, (uint64_t)&v784, 0);
              v664 = HIDWORD(v805);
              v90 = (uint64_t)&v800;
            }
LABEL_333:
            if (!v664)
              goto LABEL_338;
          }
        }
LABEL_244:
        v10 = (unint64_t)v806;
        v804 = v806;
        LODWORD(v806[0]) = 33554451;
        v805 = 0x200000002;
        v508 = 2;
        while (1)
        {
          v509 = 0;
          v510 = 0;
          v511 = v508;
          do
          {
            if ((*((_BYTE *)v804 + v509 + 1) & 0x40) != 0)
              goto LABEL_337;
            v510 |= 1 << *((_BYTE *)v804 + v509 + 1);
            v509 += 2;
          }
          while (2 * v508 != v509);
          v512 = 0;
          do
          {
            v513 = *((_BYTE *)v804 + v512) & 0x7F;
            if (v513 >= 0x40)
              goto LABEL_337;
            v510 &= ~(1 << v513);
            v512 += 2;
          }
          while (2 * v508 != v512);
          v514 = (uint8x8_t)vcnt_s8((int8x8_t)v510);
          v514.i16[0] = vaddlv_u8(v514);
          v515 = v514.i32[0];
          v516 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v510));
          v516.i16[0] = vaddlv_u8(v516);
          if (v516.i32[0] + v515)
          {
            v517 = 0;
            if (v508 <= 1uLL)
              v511 = 1;
            v518 = 2 * v511;
            while (1)
            {
              v519 = *((_BYTE *)v804 + v517 + 1);
              if ((v519 & 0x7Fu) >= 0x40)
                goto LABEL_337;
              if (((v510 >> (v519 & 0x7F)) & 1) != 0)
                break;
              v517 += 2;
              if (v518 == v517)
                goto LABEL_258;
            }
            JSC::MacroAssemblerARM64::move(v808, *((char *)v804 + v517), v519, v82, v83, v84, v85, v86);
            memmove((char *)v804 + v517, (char *)v804 + v517 + 2, 2 * HIDWORD(v805) - v517 - 2);
            v508 = --HIDWORD(v805);
          }
          else
          {
            v734 = *(_BYTE *)v804;
            v735 = *((_BYTE *)v804 + 1);
            JSC::MacroAssemblerARM64::swap((uint64_t)v808, *(char *)v804, v735, v82, v83, v84, v85, v86);
            memmove(v804, (char *)v804 + 2, 2 * HIDWORD(v805) - 2);
            v736 = --HIDWORD(v805);
            if (HIDWORD(v805))
            {
              v737 = v804;
              v738 = 2 * v736;
              while (*v737 != v735)
              {
                v737 += 2;
                v738 -= 2;
                if (!v738)
                  goto LABEL_387;
              }
              *v737 = v734;
            }
LABEL_387:
            WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,2u>(std::array<JSC::ARM64Registers::RegisterID,2u>,std::array<JSC::ARM64Registers::RegisterID,2u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&v804, (uint64_t)&v784, 0);
            v508 = HIDWORD(v805);
            v90 = (uint64_t)&v800;
          }
LABEL_258:
          if (!v508)
          {
            v650 = (unint64_t)v804;
            if (v806 != v804 && v804)
            {
              v804 = 0;
              LODWORD(v805) = 0;
              WTF::fastFree(v650, v80, v81, v82, v83, v84, v85, v86);
            }
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v808, (uint64_t)v749, 1, v82, v83, v84, v85, v86);
            if (!v814)
            {
              __break(0xC471u);
              JUMPOUT(0x198E4BDC8);
            }
            *(_DWORD *)(v815 + 208) &= ~v817;
            v656 = v816;
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v808, (uint64_t)operationConvertToFuncref, v816, v651, v652, v653, v654, v655);
            v663 = &v757;
            goto LABEL_341;
          }
        }
    }
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v789, v567, v561, v562, v563, v564, v565, v566);
    JSC::MacroAssemblerARM64::moveDouble(v808, 0, v345, v585, v586, v587, v588, v589);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v804, (uint64_t)v808, v590, v591, v592, v593, v594, v595);
    v188 = (unint64_t)v804;
    if (v806 != v804)
      goto LABEL_84;
    goto LABEL_86;
  }
  v10 = (unint64_t)v806;
  v804 = v806;
  v805 = 2;
  v87 = (uint64_t)v786;
  v784 = (char *)v786;
  v785 = 2;
  if (!v799)
  {
    __break(0xC471u);
    JUMPOUT(0x198E4BF08);
  }
  if (!v814)
  {
    __break(0xC471u);
    JUMPOUT(0x198E4BA94);
  }
  v91 = *v798;
  *(_DWORD *)(v815 + 208) &= ~v817;
  JSC::MacroAssemblerARM64::branchTest64((JSC::ARM64LogicalImmediate *)0xFFFE000000000000, (uint64_t)v808, 0, 0, v83, v84, v85, v86, (uint64_t)v783);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v784, v783, v92, v93, v94, v95, v96, v97);
  JSC::MacroAssemblerARM64::branch64((uint64_t)v808, 3, 0, 0xFFFE000000000000, v98, v99, v100, v101, (uint64_t)v782);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v784, v782, v102, v103, v104, v105, v106, v107);
  v108 = v91;
  JSC::MacroAssemblerARM64::and64((uint64_t)v808, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, 0, v91);
  JSC::ARM64Assembler::label(v809, v109, v110, v111, v112, v113, v114, v115, (int *)&v800);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v810, 335544320, v116, v117, v118, v119, v120, v121);
  if (v818)
    v128 = 69;
  else
    v128 = 65;
  v778[0] = (_DWORD)v800;
  v778[1] = 0;
  v779 = v128;
  v780 = 15;
  v781 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v804, v778, v122, v123, v124, v125, v126, v127);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v784, (uint64_t)v808, v129, v130, v131, v132, v133, v134);
  v800 = (int8x16_t *)v802;
  v802[0] = 16777235;
  v801 = 0x200000002;
  v135 = 2;
  v53 = 2852127712;
  do
  {
    v136 = 0;
    v137 = 0;
    v138 = v800;
    v139 = v135;
    do
    {
      if ((v800->i8[v136 + 1] & 0x40) != 0)
        goto LABEL_337;
      v137 |= 1 << v800->i8[v136 + 1];
      v136 += 2;
    }
    while (2 * v135 != v136);
    v140 = 0;
    do
    {
      v141 = v800->i8[v140] & 0x7F;
      if (v141 >= 0x40)
        goto LABEL_337;
      v137 &= ~(1 << v141);
      v140 += 2;
    }
    while (2 * v135 != v140);
    v142 = (uint8x8_t)vcnt_s8((int8x8_t)v137);
    v142.i16[0] = vaddlv_u8(v142);
    v143 = v142.i32[0];
    v144 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v137));
    v144.i16[0] = vaddlv_u8(v144);
    if (v144.i32[0] + v143)
    {
      v145 = 0;
      if (v135 <= 1uLL)
        v146 = 1;
      else
        v146 = v135;
      v147 = 2 * v146;
      while (1)
      {
        v148 = v800->u8[v145 + 1];
        if ((v148 & 0x7Fu) >= 0x40)
          goto LABEL_337;
        if (((v137 >> (v148 & 0x7F)) & 1) != 0)
          break;
        v145 += 2;
        if (v147 == v145)
          goto LABEL_73;
      }
      v149 = v800->u8[v145];
      if (v149 == v148)
        goto LABEL_72;
      if ((char)v149 == 63)
      {
        if ((char)v148 != 31)
        {
          v151 = v148 & 0x1F | 0xD2800000;
          goto LABEL_69;
        }
      }
      else if (v148 != 31 && (char)v149 != 31)
      {
        v151 = v148 & 0xFFE0FFFF | ((v149 & 0x1F) << 16) | 0xAA0003E0;
LABEL_69:
        v152 = v812;
        if (v812 + 4 > v811)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v810, (uint64_t)v80, v81, v82, v83, v84, v85, v86);
          v152 = v812;
        }
        *(_DWORD *)(v810[0] + v152) = v151;
        v812 += 4;
        v138 = v800;
        v139 = HIDWORD(v801);
LABEL_72:
        memmove(&v138->i8[v145], &v138->i16[v145 / 2 + 1], 2 * v139 - v145 - 2);
        v135 = --HIDWORD(v801);
        continue;
      }
      v151 = (char)v148 | (32 * (char)v149) | 0x91000000;
      goto LABEL_69;
    }
    v327 = v800->i8[0];
    v328 = v800->i8[1];
    JSC::MacroAssemblerARM64::swap((uint64_t)v808, v800->i8[0], v328, v82, v83, v84, v85, v86);
    memmove(v800, &v800->i16[1], 2 * HIDWORD(v801) - 2);
    v329 = --HIDWORD(v801);
    if (HIDWORD(v801))
    {
      v330 = v800;
      v331 = 2 * v329;
      while (v330->u8[0] != v328)
      {
        v330 = (int8x16_t *)((char *)v330 + 2);
        v331 -= 2;
        if (!v331)
          goto LABEL_156;
      }
      v330->i8[0] = v327;
    }
LABEL_156:
    WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,2u>(std::array<JSC::ARM64Registers::RegisterID,2u>,std::array<JSC::ARM64Registers::RegisterID,2u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&v800, (uint64_t)v776, 0);
    v135 = HIDWORD(v801);
    v90 = (uint64_t)&v800;
LABEL_73:
    ;
  }
  while (v135);
  v153 = v800;
  if (v802 != (_DWORD *)v800 && v800)
  {
    v800 = 0;
    LODWORD(v801) = 0;
    WTF::fastFree((unint64_t)v153, v80, v81, v82, v83, v84, v85, v86);
  }
  v53 = (uint64_t)g_config;
  if (!v814)
  {
    __break(0xC471u);
    JUMPOUT(0x198E4BAB4);
  }
  *(_DWORD *)(v815 + 208) &= ~v817;
  v154 = v816;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v808, (uint64_t)operationConvertToI32, v816, v82, v83, v84, v85, v86);
  v813 = 0;
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v810, (32 * (v154 & 0x1F)) | 0xD63F0000, v155, v156, v157, v158, v159, v160);
  JSC::MacroAssemblerARM64::load64((uint64_t)v808, 0x800000013, 2, v161, v162, v163, v164, v165);
  JSC::MacroAssembler::branchTestPtr((uint64_t)v808, 1, 0x1000000002, 0xFFFFFFFFLL, v166, v167, v168, v169, (uint64_t)v777);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v789, v777, v170, v171, v172, v173, v174, v175);
  JSC::MacroAssemblerARM64::move(v808, 0, v108, v176, v177, v178, v179, v180);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v804, (uint64_t)v808, v181, v182, v183, v184, v185, v186);
  v187 = (unint64_t)v784;
  if (v786 != (_DWORD *)v784 && v784)
  {
    v784 = 0;
    LODWORD(v785) = 0;
    WTF::fastFree(v187, v80, v81, v82, v83, v84, v85, v86);
  }
  v188 = (unint64_t)v804;
  v87 = (uint64_t)v754;
  if (v806 != v804)
  {
LABEL_84:
    if (v188)
    {
      v804 = 0;
      LODWORD(v805) = 0;
      WTF::fastFree(v188, v80, v81, v82, v83, v84, v85, v86);
    }
  }
LABEL_86:
  while (1)
  {
    JSC::AssemblyHelpers::emitFunctionEpilogue((JSC::AssemblyHelpers *)v808, (uint64_t)v80, v81, v82, v83, v84, v85, v86);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v810, 3596551104, v189, v190, v191, v192, v193, v194);
    v201 = v752;
    if (!HIDWORD(v790))
      break;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v789, (uint64_t)v808, v195, v196, v197, v198, v199, v200);
    JSC::MacroAssemblerARM64::load64((uint64_t)v808, 0x800000013, 0, v202, v203, v204, v205, v206);
    JSC::AssemblyHelpers::copyCalleeSavesToVMEntryFrameCalleeSavesBuffer((char *)v808, 0, v207, v208, v209, v210, v211, v212);
    v10 = (unint64_t)v806;
    *(_QWORD *)(v90 + 32) = v806;
    LOWORD(v806[0]) = 19;
    *(_QWORD *)(v90 + 40) = 0x100000001;
    v213 = 1;
LABEL_88:
    v214 = 0;
    v215 = 0;
    v216 = *(char **)(v90 + 32);
    v217 = v213;
    while ((v216[v214 + 1] & 0x40) == 0)
    {
      v215 |= 1 << v216[v214 + 1];
      v214 += 2;
      if (2 * v213 == v214)
      {
        v218 = 0;
        while (1)
        {
          v219 = v216[v218] & 0x7F;
          if (v219 >= 0x40)
            goto LABEL_337;
          v215 &= ~(1 << v219);
          v218 += 2;
          if (2 * v213 == v218)
          {
            v220 = (uint8x8_t)vcnt_s8((int8x8_t)v215);
            v220.i16[0] = vaddlv_u8(v220);
            v221 = v220.i32[0];
            v222 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v215));
            v222.i16[0] = vaddlv_u8(v222);
            if (v222.i32[0] + v221)
            {
              v223 = 0;
              if (v213 <= 1uLL)
                v217 = 1;
              v224 = 2 * v217;
              while (1)
              {
                v225 = v216[v223 + 1];
                if ((v225 & 0x7Fu) >= 0x40)
                  goto LABEL_337;
                if (((v215 >> (v225 & 0x7F)) & 1) != 0)
                {
                  JSC::MacroAssemblerARM64::move(v808, v216[v223], v225, v82, v83, v84, v85, v86);
                  memmove((void *)(*(_QWORD *)(v90 + 32) + v223), (const void *)(*(_QWORD *)(v90 + 32) + v223 + 2), 2 * HIDWORD(v805) - v223 - 2);
                  v213 = --HIDWORD(v805);
                  goto LABEL_101;
                }
                v223 += 2;
                if (v224 == v223)
                  goto LABEL_101;
              }
            }
            v744 = *v216;
            v745 = v216[1];
            JSC::MacroAssemblerARM64::swap((uint64_t)v808, *v216, v745, v82, v83, v84, v85, v86);
            memmove(*(void **)(v90 + 32), (const void *)(*(_QWORD *)(v90 + 32) + 2), 2 * HIDWORD(v805) - 2);
            v746 = --HIDWORD(v805);
            if (HIDWORD(v805))
            {
              v747 = v804;
              v748 = 2 * v746;
              while (*v747 != v745)
              {
                v747 += 2;
                v748 -= 2;
                if (!v748)
                  goto LABEL_399;
              }
              *v747 = v744;
            }
LABEL_399:
            WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,1u>(std::array<JSC::ARM64Registers::RegisterID,1u>,std::array<JSC::ARM64Registers::RegisterID,1u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&v804, (uint64_t)&v784, 0);
            v213 = HIDWORD(v805);
            v201 = v752;
            v90 = (uint64_t)&v800;
            v87 = (uint64_t)v754;
            v53 = (uint64_t)g_config;
LABEL_101:
            if (!v213)
            {
              v226 = *(_QWORD **)(v90 + 32);
              if (v806 != v226 && v226)
              {
                *(_QWORD *)(v90 + 32) = 0;
                LODWORD(v805) = 0;
                WTF::fastFree((unint64_t)v226, v80, v81, v82, v83, v84, v85, v86);
              }
              if (!v814)
              {
                __break(0xC471u);
                JUMPOUT(0x198E4BA74);
              }
              *(_DWORD *)(*(_QWORD *)(v90 + 520) + 208) &= ~v817;
              v227 = v816;
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v808, (uint64_t)operationWasmUnwind, v816, v82, v83, v84, v85, v86);
              v813 = 0;
              JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v810, (32 * (v227 & 0x1F)) | 0xD63F0000, v228, v229, v230, v231, v232, v233);
              JSC::MacroAssemblerARM64::farJump(v808, 0, 10924, v234, v235, v236, v237, v238);
              goto LABEL_105;
            }
            goto LABEL_88;
          }
        }
      }
    }
LABEL_337:
    __break(1u);
LABEL_338:
    v676 = *(_QWORD *)(v90 + 32);
    if (v10 != v676 && v676)
    {
      *(_QWORD *)(v90 + 32) = 0;
      LODWORD(v805) = 0;
      WTF::fastFree(v676, v80, v81, v82, v83, v84, v85, v86);
    }
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v808, (uint64_t)v749, 1, v82, v83, v84, v85, v86);
    if (!v814)
    {
      __break(0xC471u);
      JUMPOUT(0x198E4BDE8);
    }
    *(_DWORD *)(*(_QWORD *)(v90 + 520) + 208) &= ~v817;
    v656 = v816;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v808, (uint64_t)operationConvertToAnyref, v816, v677, v678, v679, v680, v681);
    v663 = &v756;
LABEL_341:
    v813 = 0;
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v810, (32 * (v656 & 0x1F)) | 0xD63F0000, v657, v658, v659, v660, v661, v662);
    JSC::MacroAssemblerARM64::load64((uint64_t)v808, 0x800000013, 2, v682, v683, v684, v685, v686);
    JSC::MacroAssembler::branchTestPtr((uint64_t)v808, 1, 0x1000000002, 0xFFFFFFFFLL, v687, v688, v689, v690, (uint64_t)v663);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v789, v663, v691, v692, v693, v694, v695, v696);
LABEL_342:
    if (!v799)
    {
      __break(0xC471u);
      JUMPOUT(0x198E4BF30);
    }
    v543 = *v798;
LABEL_344:
    JSC::AssemblyHelpers::moveValueRegs(v808, 0, v543, v82, v83, v84, v85, v86);
  }
LABEL_105:
  JSC::LinkBuffer::LinkBuffer((uint64_t)&v804, (uint64_t)v808, -1, 12, 0);
  if (v807)
  {
    if (*(unsigned __int8 *)(v53 + 0x288) | *(unsigned __int8 *)(v53 + 0x287))
    {
      v702 = 1;
    }
    else
    {
      if (!*(_BYTE *)(v53 + 0x28E) && !*(_BYTE *)(v53 + 0x289))
      {
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)64376>(&v784, (uint64_t)&v804);
        v246 = v785;
        v785 = 0;
        *(_QWORD *)v201 = v784;
        *(_QWORD *)(v201 + 8) = v246;
        *(_DWORD *)(v201 + 16) = 0;
        JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v784, v247, v248, v249, v250, v251, v252, v253);
        goto LABEL_110;
      }
      v702 = *(_BYTE *)(v53 + 0x28E) != 0;
    }
    JSC::Wasm::FunctionSignature::toString((JSC::Wasm::FunctionSignature *)v87, (uint64_t *)v776);
    WTF::String::ascii((WTF::String *)v776, &v800);
    JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)64376,unsigned int,char const*>(&v784, (uint64_t)&v804, v702, a2);
    v703 = v785;
    v785 = 0;
    *(_QWORD *)v752 = v784;
    *(_QWORD *)(v752 + 8) = v703;
    *(_DWORD *)(v752 + 16) = 0;
    JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v784, v704, v705, v706, v707, v708, v709, v710);
    v711 = *(_DWORD **)v90;
    *(_QWORD *)v90 = 0;
    v254 = v751;
    if (v711)
    {
      if (*v711 == 1)
        WTF::fastFree((unint64_t)v711, v239, v240, v241, v242, v243, v244, v245);
      else
        --*v711;
    }
    v712 = v776[0];
    v776[0] = 0;
    if (v712)
    {
      if (*(_DWORD *)v712 == 2)
      {
        WTF::StringImpl::~StringImpl(v712, (WTF::AtomStringImpl *)v239, v240, v241, v242, v243, v244, v245);
        WTF::fastFree(v726, v727, v728, v729, v730, v731, v732, v733);
      }
      else
      {
        *(_DWORD *)v712 -= 2;
      }
    }
  }
  else
  {
    *(_DWORD *)v201 = 0;
    *(_DWORD *)(v201 + 16) = 1;
LABEL_110:
    v254 = v751;
  }
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v804, v239, v240, v241, v242, v243, v244, v245);
  v262 = (unint64_t)v789;
  if (v254 != v789 && v789)
  {
    v789 = 0;
    LODWORD(v790) = 0;
    WTF::fastFree(v262, v255, v256, v257, v258, v259, v260, v261);
  }
LABEL_114:
  v263 = v795;
  v795 = 0;
  if (v263)
    WTF::fastFree((unint64_t)v263, v255, v256, v257, v258, v259, v260, v261);
  JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)v797, v255, v256, v257, v258, v259, v260, v261);
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v808, v264, v265, v266, v267, v268, v269, v270);
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [24],WTF::RawPointer,char [9],WTF::RawPointer>(uint64_t a1, const void **a2, const void **a3)
{
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  void (**v42)(WTF::StringPrintStream *__hidden);
  WTF *v43;
  __int128 v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v42 = off_1E3572250;
    v43 = (WTF *)v45;
    v44 = xmmword_199122F80;
    v45[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%s", "Store callee from ptr: ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%p", *a2);
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%s", " value, ");
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%p", *a3);
    v42[5]((WTF::StringPrintStream *)&v42);
    if (v43)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v43, v44, (uint64_t *)&v39);
      v13 = v39;
    }
    else
    {
      v13 = 0;
    }
    v14 = *(_DWORD *)(a1 + 200);
    v40 = v14;
    v39 = 0;
    v41 = v13;
    v15 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 224))
    {
      v16 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v15 + 1, (unint64_t)&v40);
      v17 = *(unsigned int *)(a1 + 228);
      v18 = *(_QWORD *)(a1 + 216) + 16 * v17;
      *(_DWORD *)v18 = *(_DWORD *)v16;
      v19 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v18 + 8) = v19;
      v20 = v41;
      *(_DWORD *)(a1 + 228) = v17 + 1;
      v41 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::~StringImpl(v20, v6, v7, v8, v9, v10, v11, v12);
          WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 216) + 16 * v15;
      *(_DWORD *)v21 = v14;
      *(_QWORD *)(v21 + 8) = v13;
      *(_DWORD *)(a1 + 228) = v15 + 1;
    }
    v22 = v39;
    v39 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
    if (v43 != (WTF *)v45)
      WTF::fastFree((unint64_t)v43, v6, v7, v8, v9, v10, v11, v12);
  }
}

void JSC::Wasm::handleBadImportTypeUse(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  unint64_t v12;
  pthread_key_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  WTF **p_start;
  uint64_t v35;
  size_t v36;
  unsigned int *v37;
  WTF *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  BOOL v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  WTF *v59;
  JSC::ExecutableMemoryHandle *v60;
  char v61;
  WTF **v62;
  unsigned int *v63;
  size_t len;
  uint64_t v65;
  WTF *v66;
  _BYTE v67[128];
  unsigned int v68;
  char v69;
  int v70;
  unsigned int v71;
  __int128 start;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v11 = a2[50];
  if (v11 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v11 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v11) = -1441594400;
  a2[50] += 4;
  JSC::Wasm::emitThrowWasmToJSException((uint64_t)a2, 0, 0x21u, a4, a5, a6, a7, a8);
  v63 = 0;
  len = 0;
  v65 = -1;
  v66 = (WTF *)v67;
  v68 = 128;
  v12 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v12 != -1)
  {
    v59 = (WTF *)&v61;
    v62 = &v59;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v62, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v13 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v21 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v21)
  {
    v21 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v21, v13);
  }
  v22 = *(WTF **)v21;
  if (*(_QWORD *)v21 != v21 + 8)
  {
    v23 = *(_DWORD *)(v21 + 136);
    if (v68 < v23)
    {
      if (v66 && v66 != (WTF *)v67)
      {
        WTF::fastFree((unint64_t)v66, v14, v15, v16, v17, v18, v19, v20);
        v22 = *(WTF **)v21;
        v23 = *(_DWORD *)(v21 + 136);
      }
      v66 = v22;
      v68 = v23;
      *(_QWORD *)v21 = v21 + 8;
      *(_DWORD *)(v21 + 136) = 128;
    }
  }
  v69 = 1;
  v70 = 0;
  v71 = 12;
  start = 0u;
  v73 = 0u;
  v74 = 0;
  JSC::LinkBuffer::linkCode((uint64_t)&v63, (uint64_t)a2, 0, v16, v17, v18, v19, v20);
  if (!(_BYTE)v70)
  {
    *(_DWORD *)a1 = 0;
    v43 = 1;
    goto LABEL_30;
  }
  if (byte_1ECF4C288 | HIBYTE(word_1ECF4C286))
  {
    v47 = 1;
    goto LABEL_36;
  }
  if (byte_1ECF4C28E || byte_1ECF4C289)
  {
    v47 = byte_1ECF4C28E != 0;
LABEL_36:
    JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl((uint64_t)&v63, v47, 0, 0, "WebAssembly->JavaScript throw exception due to invalid use of restricted type in import[%i]", &v59, a3);
    v38 = v59;
    v37 = (unsigned int *)v60;
    if (!v60)
      goto LABEL_29;
    do
      v48 = __ldaxr(v37);
    while (__stlxr(v48 + 1, v37));
    v40 = (unsigned int *)v60;
    v60 = 0;
    if (!v40)
      goto LABEL_29;
    do
    {
      v49 = __ldaxr(v40);
      v42 = --v49 == 0;
    }
    while (__stlxr(v49, v40));
LABEL_27:
    if (v42)
    {
      atomic_store(1u, v40);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v40, (uint64_t)v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    goto LABEL_29;
  }
  if (DWORD1(v73))
  {
    v31 = (uint64_t *)*((_QWORD *)&start + 1);
    v32 = 8 * DWORD1(v73);
    do
    {
      v33 = *v31++;
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v33 + 16))(v33, &v63);
      v32 -= 8;
    }
    while (v32);
  }
  p_start = (WTF **)&start;
  if (HIDWORD(v74))
  {
    v44 = (uint64_t *)*((_QWORD *)&v73 + 1);
    v45 = 8 * HIDWORD(v74);
    do
    {
      v46 = *v44++;
      (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v46 + 16))(v46, &v63);
      v45 -= 8;
    }
    while (v45);
  }
  v35 = v71;
  v36 = len;
  *(_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedSizes[v71 / 2] += len;
  ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v35);
  sys_icache_invalidate((void *)start, v36);
  v37 = v63;
  if (v63)
  {
    do
      v58 = __ldaxr(v37);
    while (__stlxr(v58 + 1, v37));
    p_start = (WTF **)(v37 + 2);
  }
  v38 = *p_start;
  v59 = v38;
  v60 = (JSC::ExecutableMemoryHandle *)v37;
  if (byte_1ECF4C2A2)
  {
    JSC::LinkBuffer::logJITCodeForPerf((uint64_t)&v63, (uint64_t)&v59, 0, 0);
    if (v37)
      goto LABEL_24;
  }
  else if (v37)
  {
    do
LABEL_24:
      v39 = __ldaxr(v37);
    while (__stlxr(v39 + 1, v37));
    v40 = (unsigned int *)v60;
    v60 = 0;
    if (!v40)
      goto LABEL_29;
    do
    {
      v41 = __ldaxr(v40);
      v42 = --v41 == 0;
    }
    while (__stlxr(v41, v40));
    goto LABEL_27;
  }
LABEL_29:
  v43 = 0;
  *(_QWORD *)a1 = v38;
  *(_QWORD *)(a1 + 8) = v37;
LABEL_30:
  *(_DWORD *)(a1 + 16) = v43;
  JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v63, v24, v25, v26, v27, v28, v29, v30);
}

void JSC::Wasm::wasmToJS(unsigned long,unsigned int)::$_1::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  _DWORD *v35;

  v8 = a2;
  JSC::AssemblyHelpers::purifyNaN(*(_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_QWORD *)a1;
  v18 = **(_BYTE **)(a1 + 8);
  v19 = *(_DWORD *)(*(_QWORD *)a1 + 200);
  if (v19 + 4 > *(_DWORD *)(*(_QWORD *)a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v17 + 56), v10, v11, v12, v13, v14, v15, v16);
    v19 = *(_DWORD *)(v17 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v17 + 56) + v19) = v18 & 0x1F | (32 * v8) | 0x9E660000;
  *(_DWORD *)(v17 + 200) += 4;
  v20 = *(_QWORD *)(a1 + 16);
  if (!**(_BYTE **)v20)
  {
    v21 = *(_DWORD **)(v20 + 8);
    v22 = **(char **)(a1 + 24) | 0xB24F03E0;
    v23 = v21[50];
    if (v23 + 4 > v21[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v21 + 14), v10, v11, v12, v13, v14, v15, v16);
      v23 = v21[50];
    }
    *(_DWORD *)(*((_QWORD *)v21 + 7) + v23) = v22;
    v21[50] += 4;
    **(_BYTE **)v20 = 1;
  }
  v24 = **(unsigned __int8 **)(a1 + 24);
  v25 = *(_QWORD *)a1;
  if (v24 == 31)
  {
    v29 = **(char **)(a1 + 8) | ((**(_BYTE **)(a1 + 8) & 0x1F) << 16);
    v30 = -1960811552;
    goto LABEL_10;
  }
  v26 = **(unsigned __int8 **)(a1 + 8);
  v27 = (v24 & 0x1F) << 16;
  if (v26 != 31)
  {
    v28 = v26 & 0x1F;
    v29 = v27 | (32 * v28);
    v30 = v28 | 0x8B000000;
LABEL_10:
    v31 = v29 | v30;
    goto LABEL_11;
  }
  v31 = v27 | 0x8B2063FF;
LABEL_11:
  v34 = *(_DWORD *)(v25 + 200);
  v33 = (unsigned int *)(v25 + 200);
  v32 = v34;
  if (v34 + 4 > *(v33 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v33 - 36), v10, v11, v12, v13, v14, v15, v16);
    v32 = *v33;
  }
  *(_DWORD *)(*((_QWORD *)v33 - 18) + v32) = v31;
  *v33 += 4;
  JSC::MacroAssemblerARM64::store64(*(_QWORD *)a1, **(char **)(a1 + 8), **(unsigned __int8 **)(a1 + 32) | ((unint64_t)(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 4)+ **(_DWORD **)(a1 + 40)) << 32), v12, v13, v14, v15, v16);
  v35 = *(_DWORD **)(a1 + 48);
  **(_DWORD **)(a1 + 40) += 8;
  ++*v35;
}

void JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)64376,unsigned int,char const*>(_QWORD *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  JSC::ExecutableMemoryHandle *v37;

  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(a2, a3, 0, 0, "WebAssembly->JavaScript import[%i] %s", &v36, a4);
  v12 = (unsigned int *)v37;
  *a1 = v36;
  a1[1] = 0;
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = (unsigned int *)a1[1];
    a1[1] = v12;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v14, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
    }
    v17 = (unsigned int *)v37;
    v37 = 0;
    if (v17)
    {
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        atomic_store(1u, v17);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v17, v5, v6, v7, v8, v9, v10, v11);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
    }
  }
}

void JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)64376>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  JSC::ExecutableMemoryHandle *v48;

  v4 = *(unsigned int *)(a2 + 204);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(a2 + 192);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      v6 -= 8;
    }
    while (v6);
  }
  v8 = *(unsigned int *)(a2 + 220);
  if ((_DWORD)v8)
  {
    v27 = *(uint64_t **)(a2 + 208);
    v28 = 8 * v8;
    do
    {
      v29 = *v27++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, a2);
      v28 -= 8;
    }
    while (v28);
  }
  v9 = *(unsigned int *)(a2 + 176);
  *((_QWORD *)JSC::LinkBuffer::s_profileCummulativeLinkedSizes + v9) += *(_QWORD *)(a2 + 8);
  ++*((_QWORD *)&JSC::LinkBuffer::s_profileCummulativeLinkedCounts + v9);
  v10 = (uint64_t *)(a2 + 184);
  sys_icache_invalidate(*(void **)(a2 + 184), *(_QWORD *)(a2 + 8));
  v18 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v46 = __ldaxr(v18);
    while (__stlxr(v46 + 1, v18));
    v10 = (uint64_t *)(v18 + 2);
  }
  v19 = *v10;
  v47 = v19;
  v48 = (JSC::ExecutableMemoryHandle *)v18;
  if (byte_1ECF4C2A2)
    JSC::LinkBuffer::logJITCodeForPerf(a2, (uint64_t)&v47, 0, 0);
  *a1 = v19;
  a1[1] = 0;
  if (v18)
  {
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 + 1, v18));
    v21 = (unsigned int *)a1[1];
    a1[1] = v18;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v21, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
      }
    }
    v24 = (unsigned int *)v48;
    v48 = 0;
    if (v24)
    {
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v24, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
      }
    }
  }
}

void JSC::Wasm::emitThrowWasmToJSException(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;

  JSC::MacroAssemblerARM64::load64(a1, a2 | 0x800000000, 2, a4, a5, a6, a7, a8);
  JSC::AssemblyHelpers::copyCalleeSavesToVMEntryFrameCalleeSavesBuffer((char *)a1, 2, v11, v12, v13, v14, v15, v16);
  if (a2)
  {
    if (a2 == 31)
    {
      v24 = -1862269984;
    }
    else if (a2 == 63)
    {
      v24 = -763363328;
    }
    else
    {
      v24 = ((a2 & 0x1F) << 16) | 0xAA0003E0;
    }
    v26 = (unsigned int *)(a1 + 200);
    v25 = *(_DWORD *)(a1 + 200);
    if (v25 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v17, v18, v19, v20, v21, v22, v23);
      v25 = *v26;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = v24;
    *v26 += 4;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a3, 1, v19, v20, v21, v22, v23);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198E4CBF4);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v32 = *(_BYTE *)(a1 + 272);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (uint64_t)operationWasmToJSException, v32, v27, v28, v29, v30, v31);
  *(_DWORD *)(a1 + 208) = 0;
  v40 = *(_DWORD *)(a1 + 200);
  if (v40 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v33, v34, v35, v36, v37, v38, v39);
    v40 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v40) = (32 * (v32 & 0x1F)) | 0xD63F0000;
  v41 = *(_DWORD *)(a1 + 200);
  v42 = v41 + 4;
  *(_DWORD *)(a1 + 200) = v41 + 4;
  if ((v41 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v33, v34, v35, v36, v37, v38, v39);
    v42 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v42) = -702611456;
  v43 = *(_DWORD *)(a1 + 200);
  v44 = v43 + 4;
  *(_DWORD *)(a1 + 200) = v43 + 4;
  if ((v43 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v33, v34, v35, v36, v37, v38, v39);
    v44 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v44) = -734491104;
  *(_DWORD *)(a1 + 200) += 4;
}

unint64_t JSC::WebAssemblyArrayConstructor::create(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t SlowCase;
  char *v41;
  WTF::StringImpl *v42;

  v9 = (unint64_t)a2;
  v11 = (_QWORD *)((char *)this + 38552);
  v12 = *((_QWORD *)this + 4819);
  if (v12 < *((_QWORD *)this + 4820))
    goto LABEL_2;
  v12 = *((_QWORD *)this + 4821);
  if ((v12 & 1) == 0)
  {
    v35 = *(_QWORD *)(v12 + 8) ^ *((_QWORD *)this + 4822);
    *((_QWORD *)this + 4820) = v12 + HIDWORD(v35);
    *((_QWORD *)this + 4821) = v12 + (int)v35;
LABEL_2:
    *v11 = v12 + 48;
    goto LABEL_3;
  }
  v41 = (char *)this + 38552;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a2, a4, a5, a6, a7, a8);
  v11 = v41;
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v37, v38, v39);
  v9 = (unint64_t)a2;
  v12 = SlowCase;
LABEL_3:
  *(_DWORD *)v12 = 0;
  JSC::InternalFunction::InternalFunction(v12, (uint64_t)this, v9, (uint64_t)JSC::callJSWebAssemblyArray, JSC::constructJSWebAssemblyArray);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x500000002;
  *(_QWORD *)(v13 + 8) = "Array";
  *(_DWORD *)(v13 + 16) = 4;
  v42 = (WTF::StringImpl *)v13;
  JSC::InternalFunction::finishCreation(v12, this, (const WTF::String *)1, (JSC::VM *)&v42, 1, v14, v15, v16);
  v25 = v42;
  v42 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v12, (uint64_t)this, *(_QWORD *)(v11[425] + 2160), a3, 14, v21, v22, v23, v24);
  return v12;
}

uint64_t JSC::WebAssemblyArrayConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 67099;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::WebAssemblyArrayConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::Exception *JSC::callJSWebAssemblyArray(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"WebAssembly.Array", 18);
}

uint64_t JSC::constructJSWebAssemblyArray(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwTypeError((unint64_t)this, &v4, (uint64_t)"WebAssembly.Array constructor should not be exposed currently", 62);
}

unint64_t JSC::WebAssemblyArrayPrototype::create(JSC::WebAssemblyArrayPrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::JSGlobalObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = (JSC::JSGlobalObject *)a3;
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a3 = (uint64_t)v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x1100000002;
  *(_QWORD *)(v13 + 8) = "WebAssembly.Array";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::WebAssemblyArrayPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::WebAssemblyArrayPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::WebAssemblyCompileErrorConstructor::create(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t SlowCase;
  char *v41;
  WTF::StringImpl *v42;

  v9 = (unint64_t)a2;
  v11 = (_QWORD *)((char *)this + 38552);
  v12 = *((_QWORD *)this + 4819);
  if (v12 < *((_QWORD *)this + 4820))
    goto LABEL_2;
  v12 = *((_QWORD *)this + 4821);
  if ((v12 & 1) == 0)
  {
    v35 = *(_QWORD *)(v12 + 8) ^ *((_QWORD *)this + 4822);
    *((_QWORD *)this + 4820) = v12 + HIDWORD(v35);
    *((_QWORD *)this + 4821) = v12 + (int)v35;
LABEL_2:
    *v11 = v12 + 48;
    goto LABEL_3;
  }
  v41 = (char *)this + 38552;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a2, a4, a5, a6, a7, a8);
  v11 = v41;
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v37, v38, v39);
  v9 = (unint64_t)a2;
  v12 = SlowCase;
LABEL_3:
  *(_DWORD *)v12 = 0;
  JSC::InternalFunction::InternalFunction(v12, (uint64_t)this, v9, (uint64_t)JSC::callJSWebAssemblyCompileError, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructJSWebAssemblyCompileError);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0xC00000002;
  *(_QWORD *)(v13 + 8) = "CompileError";
  *(_DWORD *)(v13 + 16) = 4;
  v42 = (WTF::StringImpl *)v13;
  JSC::InternalFunction::finishCreation(v12, this, (const WTF::String *)1, (JSC::VM *)&v42, 1, v14, v15, v16);
  v25 = v42;
  v42 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v12, (uint64_t)this, *(_QWORD *)(v11[425] + 2160), a3, 14, v21, v22, v23, v24);
  return v12;
}

uint64_t JSC::WebAssemblyCompileErrorConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 67099;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::WebAssemblyCompileErrorConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::callJSWebAssemblyCompileError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v9)(_QWORD *);
  _QWORD *v10;
  _QWORD v11[3];

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v5 = 10;
  }
  else
  {
    v5 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v6 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v6 = 10;
LABEL_4:
  v7 = *(_QWORD *)(this + 1296);
  if ((v7 & 1) != 0)
  {
    v9 = *(uint64_t (**)(_QWORD *))(v7 & 0xFFFFFFFFFFFFFFFCLL);
    v10 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v10 = (_QWORD *)(this - 16);
    v11[0] = *v10;
    v11[1] = this;
    v11[2] = this + 1296;
    v7 = v9(v11);
  }
  return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v7, v5, v6, 0, 0, 0, 0, a4);
}

unint64_t JSC::constructJSWebAssemblyCompileError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  JSC::JSGlobalObject *v13;
  JSC::JSGlobalObject *i;
  char **v15;
  unint64_t v16;
  unint64_t v17;
  JSC::JSObject *SubclassStructure;
  unint64_t v19;
  int v21;
  int v22;
  uint64_t (*v23)(JSC::VM **);
  JSC::VM **v24;
  uint64_t (*v25)(JSC::VM **);
  JSC::VM **v26;
  JSC::JSGlobalObject *v27;
  unint64_t v28;
  JSC::VM *v29;
  unint64_t v30;
  char *v31;

  v10 = *(_QWORD *)(this + 56);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11 = 10;
  }
  else
  {
    v11 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v12 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v12 = 10;
LABEL_4:
  v13 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v13 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v19 = *(_QWORD *)(this + 1296);
    if ((v19 & 1) == 0)
      goto LABEL_18;
    v25 = *(uint64_t (**)(JSC::VM **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v26 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v26 = (JSC::VM **)(this - 16);
    v29 = *v26;
    v30 = this;
    v31 = (char *)(this + 1296);
    SubclassStructure = (JSC::JSObject *)v25(&v29);
  }
  else
  {
    v29 = *(JSC::VM **)(this + 56);
    for (i = v13; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v27 + 2))
    {
      while (1)
      {
        v15 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v15 != &JSC::JSBoundFunction::s_info && v15 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v16 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_13;
      }
      v27 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v29, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v16 = 0;
LABEL_13:
    if (*(_DWORD *)(v10 + 80))
    {
      v22 = *(_DWORD *)(v10 + 80);
      if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      {
        v28 = v16;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v16 = v28;
      }
      if (*(_QWORD *)(v10 + 16))
      {
        v19 = 0;
        goto LABEL_18;
      }
    }
    v17 = *(_QWORD *)(v16 + 1296);
    if ((v17 & 1) != 0)
    {
      v23 = *(uint64_t (**)(JSC::VM **))(v17 & 0xFFFFFFFFFFFFFFFCLL);
      v24 = (JSC::VM **)(v16 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v16 & 8) != 0)
        v24 = (JSC::VM **)(v16 - 16);
      v29 = *v24;
      v30 = v16;
      v31 = (char *)(v16 + 1296);
      v17 = v23(&v29);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v13, (JSC::JSObject *)v17, a4, a5, a6, a7, a8);
  }
  v19 = (unint64_t)SubclassStructure;
  if (!*(_DWORD *)(v10 + 80))
    return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v19, v11, v12, 0, 0, 0, 0, a9);
LABEL_18:
  v21 = *(_DWORD *)(v10 + 80);
  if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
    return 0;
  else
    return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v19, v11, v12, 0, 0, 0, 0, a9);
}

unint64_t JSC::WebAssemblyCompileErrorPrototype::create(JSC::WebAssemblyCompileErrorPrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  unint64_t v9;
  int v10;
  unint64_t v12;
  char *v13;
  char *v14;
  JSC::JSGlobalObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t SlowCase;

  v8 = this;
  v9 = *((_QWORD *)this + 4863);
  if (v9 >= *((_QWORD *)this + 4864))
  {
    v9 = *((_QWORD *)this + 4865);
    if ((v9 & 1) != 0)
    {
      v13 = (char *)this + 38880;
      v14 = (char *)this + 192;
      v16 = (JSC::JSGlobalObject *)a3;
      JSC::sanitizeStackForVM(this, this, a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v13, (uint64_t)v14, 16, 0, 0, v17, v18, v19);
      a3 = (uint64_t)v16;
      v8 = this;
      v9 = SlowCase;
      goto LABEL_3;
    }
    v12 = *(_QWORD *)(v9 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v9 + HIDWORD(v12);
    *((_QWORD *)this + 4865) = v9 + (int)v12;
  }
  *((_QWORD *)this + 4863) = v9 + 16;
LABEL_3:
  *(_DWORD *)v9 = 0;
  v10 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v9 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  JSC::WebAssemblyCompileErrorPrototype::finishCreation((JSC::WebAssemblyCompileErrorPrototype *)v9, v8);
  return v9;
}

void JSC::WebAssemblyCompileErrorPrototype::finishCreation(JSC::WebAssemblyCompileErrorPrototype *this, JSC::VM *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;

  v4 = (uint64_t *)((char *)a2 + 41952);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v5 = *(_QWORD *)(*v4 + 1968);
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0xC00000002;
  *(_QWORD *)(v6 + 8) = "CompileError";
  *(_DWORD *)(v6 + 16) = 4;
  v35 = (WTF::StringImpl *)v6;
  v13 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v35, v7, v8, v9, v10, v11, v12);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v5, v13, 4, v14, v15, v16, v17);
  v26 = v35;
  v35 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*v4 + 1824), v4[2], 4, v22, v23, v24, v25);
}

uint64_t JSC::WebAssemblyCompileErrorPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::WebAssemblyCompileErrorPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::WebAssemblyExceptionConstructor::create(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t SlowCase;
  char *v41;
  WTF::StringImpl *v42;

  v9 = (unint64_t)a2;
  v11 = (_QWORD *)((char *)this + 38552);
  v12 = *((_QWORD *)this + 4819);
  if (v12 < *((_QWORD *)this + 4820))
    goto LABEL_2;
  v12 = *((_QWORD *)this + 4821);
  if ((v12 & 1) == 0)
  {
    v35 = *(_QWORD *)(v12 + 8) ^ *((_QWORD *)this + 4822);
    *((_QWORD *)this + 4820) = v12 + HIDWORD(v35);
    *((_QWORD *)this + 4821) = v12 + (int)v35;
LABEL_2:
    *v11 = v12 + 48;
    goto LABEL_3;
  }
  v41 = (char *)this + 38552;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a2, a4, a5, a6, a7, a8);
  v11 = v41;
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v37, v38, v39);
  v9 = (unint64_t)a2;
  v12 = SlowCase;
LABEL_3:
  *(_DWORD *)v12 = 0;
  JSC::InternalFunction::InternalFunction(v12, (uint64_t)this, v9, (uint64_t)JSC::callJSWebAssemblyException, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructJSWebAssemblyException);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x900000002;
  *(_QWORD *)(v13 + 8) = "Exception";
  *(_DWORD *)(v13 + 16) = 4;
  v42 = (WTF::StringImpl *)v13;
  JSC::InternalFunction::finishCreation(v12, this, (const WTF::String *)1, (JSC::VM *)&v42, 1, v14, v15, v16);
  v25 = v42;
  v42 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v12, (uint64_t)this, *(_QWORD *)(v11[425] + 2160), a3, 14, v21, v22, v23, v24);
  return v12;
}

uint64_t JSC::WebAssemblyExceptionConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 67099;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::WebAssemblyExceptionConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::Exception *JSC::callJSWebAssemblyException(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"WebAssembly.Exception", 22);
}

unint64_t JSC::constructJSWebAssemblyException(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t i;
  unint64_t v25;
  uint64_t Index;
  unsigned int v27;
  unint64_t OutOfMemoryError;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  JSC::Exception *v35;
  int v36;
  _QWORD *v37;
  unint64_t v38;
  int v39;
  JSC::VM *v40;
  JSC::VM *v41;
  uint64_t v42;
  int8x16_t v43;
  unint64_t v44;
  int v45;
  WTF *v46;
  __n128 v47;
  __n128 v48;
  unint64_t v49;
  unsigned __int8 *v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v57;
  BOOL v58;
  double v59;
  uint64_t v60;
  unsigned int v61;
  JSC *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char **v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  int v80;
  int v81;
  JSC::JSGlobalObject *v82;
  JSC::JSGlobalObject *j;
  char **v84;
  unint64_t v85;
  unint64_t v86;
  JSC::JSObject *SubclassStructure;
  JSC::VM *v88;
  JSC::VM *v89;
  uint64_t v91;
  uint64_t v92;
  int8x16_t v93;
  _BOOL4 v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  JSC::Exception *v106;
  int v107;
  _QWORD *v108;
  int v109;
  int v110;
  int v111;
  uint64_t (*v112)(JSC::Structure **);
  JSC::Structure **v113;
  uint64_t (*v114)(JSC::Structure **);
  JSC::Structure **v115;
  int v116;
  JSC::VMTraps *v117;
  uint64_t v118;
  WTF *v119;
  char v120;
  uint64_t v121;
  _OWORD *v122;
  _OWORD v123[4];
  uint64_t v124;
  JSC::VM *v125;
  JSC::Structure *v126;
  unint64_t v127;
  char *v128;
  JSC::VM *v129[2];

  v9 = *(_QWORD *)(this + 56);
  v125 = (JSC::VM *)v9;
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v11 = *((_QWORD *)a2 + 6);
    v12 = *((_DWORD *)a2 + 8) == 2 ? 10 : *((_QWORD *)a2 + 7);
    if ((v11 & 0xFFFE000000000002) == 0
      && &JSC::JSWebAssemblyTag::s_info == (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8);
      if (*(_DWORD *)(v13 + 32))
        v14 = 0;
      else
        v14 = v13 + 8;
      v120 = 0;
      v118 = v11;
      v121 = 0x800000000;
      v122 = (_OWORD *)((char *)v123 + 8);
      v15 = 0uLL;
      memset(v123, 0, sizeof(v123));
      v124 = 0;
      v16 = *(unsigned int *)(v14 + 8);
      if (v16 >= 9
        && ((v16 & 0x80000000) != 0
         || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v121, v16)))
      {
        v120 = 1;
      }
      v17 = *(_QWORD *)(this + 56);
      if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 36)
      {
        v18 = *(unsigned __int8 *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 8);
        v19 = (v18 & 0x10) != 0 ? ((v18 & 0xE) + 10) >> 1 : (v18 >> 1) & 7;
        v20 = *(_DWORD *)(this + 4 * v19 + 852);
        v21 = v20 ? 16 * (v20 & 0xFFFFFFFE) : 0;
        if (v21 == 16 * (*(_DWORD *)v12 & 0xFFFFFFFE))
        {
          v22 = *(_QWORD *)(this + 2216);
          v23 = (v22 & 1) != 0 ? (v22 >> 1) & 3 : *(unsigned __int8 *)(v22 + 4);
          if (v23 != 2)
          {
            for (i = 0; ; ++i)
            {
              if ((*(_BYTE *)(v12 + 4) & 0xE) != 0)
                v25 = *(unsigned int *)(*(_QWORD *)(v12 + 8) - 8);
              else
                v25 = 0;
              if (i >= v25)
                goto LABEL_64;
              Index = JSC::JSObject::getIndex((JSC::JSObject *)v12, (JSC::JSGlobalObject *)this, i, (uint64_t)a4, a5, a6, a7, a8);
              if (*(_DWORD *)(v17 + 80))
              {
                v36 = *(_DWORD *)(v17 + 80);
                if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v17 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                if (*(_QWORD *)(v17 + 16))
                  goto LABEL_64;
              }
              v27 = v121;
              if ((_DWORD)v121 != HIDWORD(v121))
                break;
              if (!(v121 >> 30)
                && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v121, 2 * (int)v121))
              {
                v27 = v121;
LABEL_45:
                *((_QWORD *)v122 + v27) = Index;
                LODWORD(v121) = v27 + 1;
                if (!*(_QWORD *)&v123[0] && (Index & 0xFFFE000000000002) == 0 && Index)
                {
                  v37 = (_QWORD *)(Index & 0xFFFFFFFFFFFFC000 | 8);
                  if ((Index & 8) != 0)
                    v37 = (_QWORD *)(Index - 16);
                  *(_QWORD *)&v123[0] = *v37 + 560;
                  v129[0] = (JSC::VM *)&v121;
                  WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v123[0], (uint64_t *)v129, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)&v126);
                }
LABEL_31:
                if (!v120)
                  goto LABEL_32;
                goto LABEL_37;
              }
              v120 = 1;
LABEL_37:
              OutOfMemoryError = JSC::createOutOfMemoryError(this, (JSC::JSGlobalObject *)v16);
              v35 = (JSC::Exception *)OutOfMemoryError;
              if ((OutOfMemoryError & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16
                                                                        * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                        + 0x4C)))
              {
                v35 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v29, v30, v31, v32, v33);
              }
              JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)this, v35, v34, v29, v30, v31, v32, v33);
LABEL_32:
              if (*(_QWORD *)(v17 + 16))
              {
                v39 = *(_DWORD *)(this + 1000);
                if (v39)
                  v40 = (JSC::VM *)(16 * (v39 & 0xFFFFFFFE));
                else
                  v40 = 0;
                v41 = JSC::JSArrayIterator::create(v17, v40, v12, 0xFFFE000000000001, a5, a6, a7, a8);
                v42 = (uint64_t)v41;
                *(double *)v43.i64 = (double)(i + 1);
                if ((int)i + 1 < 0)
                  v44 = COERCE__INT64((double)(i + 1)) + 0x2000000000000;
                else
                  v44 = (i + 1) | 0xFFFE000000000000;
                *((_QWORD *)v41 + 2) = v44;
                goto LABEL_63;
              }
            }
            if (v122 != (_OWORD *)((char *)v123 + 8) && v122)
              goto LABEL_45;
            *((_QWORD *)v122 + v121) = Index;
            LODWORD(v121) = v27 + 1;
            goto LABEL_31;
          }
        }
      }
      v42 = JSC::iteratorForIterable((JSC::VM **)this, v12, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v15);
      v117 = (JSC::VMTraps *)v16;
      if (!*(_DWORD *)(v17 + 80))
        goto LABEL_216;
      v116 = *(_DWORD *)(v17 + 80);
      if ((v116 & 0x27) != 0 && (v116 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v17 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (!*(_QWORD *)(v17 + 16))
      {
LABEL_216:
        while (1)
        {
          v91 = *(_QWORD *)(this + 56);
          v92 = JSC::iteratorNext((JSC::JSGlobalObject *)this, v42, (uint64_t)v117, 0, a5, a6, a7, a8);
          if (*(_DWORD *)(v91 + 80))
          {
            v97 = *(_DWORD *)(v91 + 80);
            if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v91 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v91 + 16))
              goto LABEL_236;
          }
          v94 = JSC::iteratorComplete((JSC::JSGlobalObject *)this, v92, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v93);
          if (!*(_DWORD *)(v91 + 80))
            goto LABEL_218;
          v98 = *(_DWORD *)(v91 + 80);
          if ((v98 & 0x27) != 0 && (v98 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v91 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v91 + 16))
          {
LABEL_236:
            v16 = 0;
          }
          else
          {
LABEL_218:
            if (v94)
              v16 = 6;
            else
              v16 = v92;
          }
          if (*(_QWORD *)(v17 + 16) || v16 == 6)
            break;
          v95 = JSC::iteratorValue((JSC::JSGlobalObject *)this, v16, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v93);
          if (*(_DWORD *)(v17 + 80))
          {
            v107 = *(_DWORD *)(v17 + 80);
            if ((v107 & 0x27) != 0 && (v107 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v17 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v17 + 16))
              break;
          }
          v96 = v121;
          if ((_DWORD)v121 == HIDWORD(v121))
          {
            if (v121 >> 30
              || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v121, 2 * (int)v121))
            {
              v120 = 1;
LABEL_240:
              v99 = JSC::createOutOfMemoryError(this, (JSC::JSGlobalObject *)v16);
              v106 = (JSC::Exception *)v99;
              if ((v99 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v99 & 0xFFFFFFFE) + 0x4C)))
              {
                v106 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v99, 0, v100, v101, v102, v103, v104);
              }
              JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)this, v106, v105, v100, v101, v102, v103, v104);
              goto LABEL_229;
            }
            v96 = v121;
          }
          else if (v122 == (_OWORD *)((char *)v123 + 8) || !v122)
          {
            *((_QWORD *)v122 + v121) = v95;
            LODWORD(v121) = v96 + 1;
            goto LABEL_228;
          }
          *((_QWORD *)v122 + v96) = v95;
          LODWORD(v121) = v96 + 1;
          if (!*(_QWORD *)&v123[0] && (v95 & 0xFFFE000000000002) == 0 && v95)
          {
            v108 = (_QWORD *)(v95 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v95 & 8) != 0)
              v108 = (_QWORD *)(v95 - 16);
            *(_QWORD *)&v123[0] = *v108 + 560;
            v129[0] = (JSC::VM *)&v121;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v123[0], (uint64_t *)v129, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)&v126);
          }
LABEL_228:
          if (v120)
            goto LABEL_240;
LABEL_229:
          if (*(_QWORD *)(v17 + 16))
          {
LABEL_63:
            JSC::iteratorClose((JSC::JSGlobalObject *)this, v42, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v43);
            break;
          }
        }
      }
LABEL_64:
      if (*(_DWORD *)(v9 + 80))
      {
        v109 = *(_DWORD *)(v9 + 80);
        if ((v109 & 0x27) != 0 && (v109 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v9 + 16))
        {
          v38 = 0;
          goto LABEL_213;
        }
      }
      v45 = v121;
      if ((_DWORD)v121 != *(_DWORD *)(v14 + 8))
      {
        v38 = JSC::throwTypeError(this, &v125, (uint64_t)"WebAssembly.Exception constructor expects the number of paremeters in WebAssembly.Tag to match the tags parameter count.", 121);
LABEL_213:
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v121, (void *)v16, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        return v38;
      }
      if ((_DWORD)v121)
      {
        v46 = (WTF *)WTF::fastMalloc((WTF *)(8 * v121 + 8));
        *(_DWORD *)v46 = v45;
        v119 = v46;
        if ((_DWORD)v121)
        {
          v49 = 0;
          while (1)
          {
            v50 = (unsigned __int8 *)(*(_QWORD *)v14 + 16 * (v49 + *(_DWORD *)(v14 + 12)));
            v51 = *v50;
            v52 = *((_QWORD *)v122 + v49);
            a3 = (JSC::CallFrame *)*((_QWORD *)v50 + 1);
            v126 = (JSC::Structure *)v52;
            v53 = *(_QWORD *)(this + 56);
            v129[0] = (JSC::VM *)v53;
            switch(v51)
            {
              case 239:
              case 240:
                goto LABEL_74;
              case 241:
              case 242:
              case 243:
              case 244:
              case 245:
              case 246:
              case 247:
              case 248:
              case 249:
              case 250:
                goto LABEL_282;
              case 251:
                __break(0xC471u);
                JUMPOUT(0x198E4EA7CLL);
              case 252:
                if (v52 >= 0xFFFE000000000000)
                {
                  v47.n128_f64[0] = (double)(int)v52;
                }
                else if (v52 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                {
                  JSC::JSValue::toNumberSlowCase(&v126, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)v47);
                }
                else
                {
                  v47.n128_u64[0] = v52 - 0x2000000000000;
                }
                v52 = v47.n128_u64[0];
                goto LABEL_180;
              case 253:
                if (v52 >= 0xFFFE000000000000)
                {
                  v47.n128_f64[0] = (double)(int)v52;
                }
                else if (v52 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                {
                  JSC::JSValue::toNumberSlowCase(&v126, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)v47);
                }
                else
                {
                  v47.n128_u64[0] = v52 - 0x2000000000000;
                }
                v47.n128_f32[0] = v47.n128_f64[0];
                v52 = v47.n128_u32[0];
                goto LABEL_180;
              case 254:
                JSC::JSValue::toBigInt(&v126, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)v47);
                v67 = v66;
                if (*(_DWORD *)(v53 + 80))
                {
                  v80 = *(_DWORD *)(v53 + 80);
                  if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v53 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  if (*(_QWORD *)(v53 + 16))
                    goto LABEL_173;
                }
                if (!*(_DWORD *)(v67 + 8))
                {
LABEL_173:
                  v52 = 0;
                }
                else
                {
                  v68 = *(_QWORD *)(v67 + 24);
                  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                    v68 = (v68 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                  v69 = *(_QWORD *)v68;
                  if (*(_BYTE *)(v67 + 16))
                    v52 = -(uint64_t)v69;
                  else
                    v52 = v69;
                }
                goto LABEL_180;
              case 255:
                if (v52 < 0xFFFE000000000000)
                {
                  if (v52 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                    JSC::JSValue::toNumberSlowCase(&v126, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)v47);
                  else
                    v47.n128_u64[0] = v52 - 0x2000000000000;
                  v77 = (v47.n128_u64[0] >> 52) & 0x7FF;
                  if ((v77 - 1023) <= 0x53)
                  {
                    v78 = v47.n128_u64[0] >> (51 - (v47.n128_u64[0] >> 52));
                    if (v77 > 0x433)
                      LODWORD(v78) = v47.n128_u64[0] << ((v47.n128_u64[0] >> 52) - 51);
                    if (v77 >= 0x41F)
                      v79 = v78;
                    else
                      v79 = (((1 << ((v47.n128_u64[0] >> 52) + 1)) - 1) & v78) + (1 << ((v47.n128_u64[0] >> 52) + 1));
                    if (v47.n128_i64[0] >= 0)
                      LODWORD(v52) = v79;
                    else
                      LODWORD(v52) = -v79;
                  }
                  else
                  {
                    LODWORD(v52) = 0;
                  }
                }
                v52 = (int)v52;
                goto LABEL_180;
              default:
                if ((v51 - 227) >= 2)
                {
LABEL_282:
                  __break(0xC471u);
                  JUMPOUT(0x198E4EA5CLL);
                }
LABEL_74:
                if (!BYTE1(dword_1ECF4C7B0))
                {
                  if (v51 == 239)
                    goto LABEL_180;
                  if (v51 == 240)
                    goto LABEL_119;
                  goto LABEL_83;
                }
                v54 = (v51 + 29);
                if (v54 > 1 || (JSC::CallFrame *)((char *)a3 + 17) != 0)
                {
                  if (v54 <= 1 && (JSC::CallFrame *)((char *)a3 + 16) == 0)
                    goto LABEL_119;
LABEL_83:
                  if (BYTE2(dword_1ECF4C7B0))
                    v57 = 1;
                  else
                    v57 = BYTE1(dword_1ECF4C7B0) == 0;
                  v58 = v57 || (v51 + 29) > 1u;
                  if (v58 || (unint64_t)a3 > 0xFFFFFFFFFFFFFFC0)
                  {
                    *(_QWORD *)&v59 = v52 - 0x2000000000000;
                    if (v52 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL
                      && (*(_QWORD *)&v59 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                    {
                      v47.n128_u64[0] = v52 - 0x2000000000000;
                      v48.n128_f64[0] = (double)(int)v59;
                      if (v48.n128_f64[0] == v59 && ((*(_QWORD *)&v59 & 0x8000000000000000) == 0 || (int)v59))
                      {
                        v60 = (*(_QWORD *)&v59 >> 52) & 0x7FFLL;
                        if ((v60 - 1023) > 0x53)
                        {
                          v61 = 0;
                          goto LABEL_150;
                        }
                        v75 = *(_QWORD *)&v59 >> (51 - (*(_QWORD *)&v59 >> 52));
                        if (v60 > 0x433)
                          LODWORD(v75) = v52 << ((*(_QWORD *)&v59 >> 52) - 51);
                        if (v60 >= 0x41F)
                          v76 = v75;
                        else
                          v76 = (((1 << ((*(_QWORD *)&v59 >> 52) + 1)) - 1) & v75)
                              + (1 << ((*(_QWORD *)&v59 >> 52) + 1));
                        if (v59 >= 0.0)
                          v61 = v76;
                        else
                          v61 = -v76;
                        if ((int)(v61 + 0x40000000) >= 0)
LABEL_150:
                          v52 = v61 | 0xFFFE000000000000;
                      }
                    }
                    v126 = (JSC::Structure *)v52;
                    if (((uint64_t (*)(__n128, __n128))JSC::Wasm::TypeInformation::castReference)(v47, v48))
                    {
                      v52 = (unint64_t)v126;
                      goto LABEL_180;
                    }
                    v63 = (JSC *)this;
                    v64 = "Argument value did not match reference type";
                    v65 = 44;
                    goto LABEL_179;
                  }
LABEL_119:
                  if ((v52 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v52 + 5) < 0x17u)
                  {
LABEL_123:
                    if ((v51 - 239) >= 2 && v51 != 227 || v52 != 2)
                    {
                      v63 = (JSC *)this;
                      v64 = "Funcref must be an exported wasm function";
                      v65 = 42;
                      goto LABEL_179;
                    }
                    v71 = 0;
                    v72 = 0;
                  }
                  else
                  {
                    v70 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v52 & 0xFFFFFFFE) + 0x4C));
                    if (v70 == &JSC::WebAssemblyFunction::s_info)
                    {
                      v72 = 0;
                      v71 = v52;
                    }
                    else
                    {
                      if (v70 != &JSC::WebAssemblyWrapperFunction::s_info)
                        goto LABEL_123;
                      v71 = 0;
                      v72 = v52;
                    }
                  }
                  if (BYTE1(dword_1ECF4C7B0)
                    && (v51 + 29) <= 1u
                    && (unint64_t)a3 <= 0xFFFFFFFFFFFFFFC0
                    && v52 != 2)
                  {
                    v74 = v71 ? v71 : v72;
                    if (a3 != *(JSC::CallFrame **)(v74 + 40))
                    {
                      v63 = (JSC *)this;
                      v64 = "Argument function did not match the reference type";
                      v65 = 51;
                      goto LABEL_179;
                    }
                  }
                  goto LABEL_180;
                }
                if (v51 != 227 && v52 == 2)
                {
                  v63 = (JSC *)this;
                  v64 = "Non-null Externref cannot be null";
                  v65 = 34;
LABEL_179:
                  v52 = JSC::throwTypeError((unint64_t)v63, v129, (uint64_t)v64, v65);
                }
LABEL_180:
                if (v49 >= *(unsigned int *)v46)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E4E92CLL);
                }
                *((_QWORD *)v46 + v49 + 1) = v52;
                if (*(_DWORD *)(v9 + 80))
                {
                  v81 = *(_DWORD *)(v9 + 80);
                  if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  if (*(_QWORD *)(v9 + 16))
                  {
                    v38 = 0;
                    v119 = 0;
                    goto LABEL_212;
                  }
                }
                if (++v49 >= v121)
                  goto LABEL_195;
                break;
            }
          }
        }
      }
      else
      {
        v46 = 0;
        v119 = 0;
      }
LABEL_195:
      v82 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
      if (v82 == *((JSC::JSGlobalObject **)a2 + 3))
      {
        v88 = *(JSC::VM **)(this + 1312);
        if ((v88 & 1) == 0)
          goto LABEL_209;
        v114 = *(uint64_t (**)(JSC::Structure **))((unint64_t)v88 & 0xFFFFFFFFFFFFFFFCLL);
        if ((this & 8) != 0)
          v115 = (JSC::Structure **)(this - 16);
        else
          v115 = (JSC::Structure **)(this & 0xFFFFFFFFFFFFC000 | 8);
        v126 = *v115;
        v127 = this;
        v128 = (char *)(this + 1312);
        SubclassStructure = (JSC::JSObject *)v114(&v126);
      }
      else
      {
        v126 = *(JSC::Structure **)(this + 56);
        for (j = v82; ; j = (JSC::JSGlobalObject *)*((_QWORD *)j + 2))
        {
          while (1)
          {
            v84 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)j & 0xFFFFFFFE) + 0x4C));
            if (v84 != &JSC::JSBoundFunction::s_info && v84 != &JSC::JSRemoteFunction::s_info)
              break;
            j = (JSC::JSGlobalObject *)*((_QWORD *)j + 4);
          }
          if (*((_BYTE *)j + 5) != 61)
          {
            v85 = *(_QWORD *)(16 * (*(_DWORD *)j & 0xFFFFFFFE) + 0x28);
            goto LABEL_204;
          }
          if (JSC::ProxyObject::isRevoked(j))
            break;
        }
        JSC::throwTypeError(this, &v126, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
        v85 = 0;
LABEL_204:
        if (*(_DWORD *)(v9 + 80))
        {
          v111 = *(_DWORD *)(v9 + 80);
          if ((v111 & 0x27) != 0 && (v111 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v9 + 16))
          {
            v88 = 0;
            goto LABEL_209;
          }
        }
        v86 = *(_QWORD *)(v85 + 1312);
        if ((v86 & 1) != 0)
        {
          v112 = *(uint64_t (**)(JSC::Structure **))(v86 & 0xFFFFFFFFFFFFFFFCLL);
          v113 = (JSC::Structure **)(v85 & 0xFFFFFFFFFFFFC000 | 8);
          if ((v85 & 8) != 0)
            v113 = (JSC::Structure **)(v85 - 16);
          v126 = *v113;
          v127 = v85;
          v128 = (char *)(v85 + 1312);
          v86 = v112(&v126);
        }
        SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v82, (JSC::JSObject *)v86, a4, a5, a6, a7, a8);
      }
      v88 = SubclassStructure;
LABEL_209:
      v89 = v125;
      if (!*((_DWORD *)v125 + 20))
        goto LABEL_210;
      v110 = *((_DWORD *)v125 + 20);
      if ((v110 & 0x27) != 0 && (v110 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v125 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*((_QWORD *)v89 + 2))
      {
        v38 = 0;
      }
      else
      {
LABEL_210:
        v38 = JSC::JSWebAssemblyException::create((JSC *)v9, v88, *(unsigned int **)(v118 + 16), (uint64_t *)&v119, a5, a6, a7, a8);
        v46 = v119;
      }
      v119 = 0;
      if (v46)
LABEL_212:
        WTF::fastFree((unint64_t)v46, (void *)v16, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_213;
    }
  }
  return JSC::throwTypeError(this, &v125, (uint64_t)"WebAssembly.Exception constructor expects the first argument to be a WebAssembly.Tag", 85);
}

unint64_t JSC::WebAssemblyExceptionPrototype::create(JSC::WebAssemblyExceptionPrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::JSGlobalObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = (JSC::JSGlobalObject *)a3;
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a3 = (uint64_t)v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x1500000002;
  *(_QWORD *)(v13 + 8) = "WebAssembly.Exception";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::WebAssemblyExceptionPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::WebAssemblyExceptionPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::Exception *JSC::webAssemblyExceptionProtoFuncGetArg(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  double v22;
  uint64_t v23;
  const WTF::String *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  JSC::Exception *v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  double v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x16_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t Error;
  double v59;
  int v60;
  unint64_t NotEnoughArgumentsError;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  JSC::Exception *v68;
  int v69;
  uint64_t v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  JSC::Heap **v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  JSC::Exception *v87;
  WTF::StringImpl *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unint64_t v106;
  uint64_t (*v107)(JSC::JSObject **);
  JSC::JSObject **v108;
  double v109;
  WTF::StringImpl *v110;
  JSC::VM *v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  JSC::JSObject *v114;
  uint64_t v115;
  char *v116;

  v11 = *(_QWORD *)(this + 56);
  v111 = (JSC::VM *)v11;
  v112 = (WTF::StringImpl *)v11;
  v12 = *((_QWORD *)a2 + 5);
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    v45 = WTF::fastCompactMalloc((WTF *)0x20);
    v46.i64[0] = 0x1000000002;
    *(_QWORD *)v45 = 0x1000000002;
    *(_QWORD *)(v45 + 8) = "is not an object";
    *(_DWORD *)(v45 + 16) = 4;
    v114 = (JSC::JSObject *)v45;
    Error = JSC::createError(this, v12, (uint64_t *)&v114, (uint64_t)JSC::defaultSourceAppender, v47, v48, v49, v50, v46);
    if (*(_DWORD *)v45 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v45, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v45 -= 2;
    }
    if ((Error & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)Error & 0xFFFFFFFE) + 0x4C)))
    {
      Error = JSC::Exception::create(v11, (JSC::VM *)Error, 0, v53, v54, v55, v56, v57);
    }
    JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)this, (JSC::Exception *)Error, v59, v53, v54, v55, v56, v57);
    goto LABEL_49;
  }
  if (&JSC::JSWebAssemblyException::s_info != (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)))
  {
    JSC::throwTypeError(this, &v112, (uint64_t)"WebAssembly.Exception operation called on non-Exception object", 63);
LABEL_49:
    v12 = 0;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v60 = *(_DWORD *)(v11 + 80);
    if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    NotEnoughArgumentsError = JSC::createNotEnoughArgumentsError(this, 0);
    v68 = (JSC::Exception *)NotEnoughArgumentsError;
    if ((NotEnoughArgumentsError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)NotEnoughArgumentsError & 0xFFFFFFFE)
                                                              + 0x4C)))
    {
      v68 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)NotEnoughArgumentsError, 0, v62, v63, v64, v65, v66);
    }
    return JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)this, v68, v67, v62, v63, v64, v65, v66);
  }
  v13 = *((_QWORD *)a2 + 6);
  if ((v13 & 0xFFFE000000000002) != 0
    || &JSC::JSWebAssemblyTag::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C)))
  {
    v114 = (JSC::JSObject *)"WebAssembly.Exception.getArg(): ";
    v115 = 33;
    v112 = (WTF::StringImpl *)"First argument must be a WebAssembly.Tag";
    v113 = 41;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v114, (uint64_t)&v112, (int **)&v110);
    if (!v110)
      goto LABEL_83;
    goto LABEL_54;
  }
  v14 = *((_QWORD *)a2 + 7);
  v114 = (JSC::JSObject *)v14;
  v15 = *(_QWORD *)(this + 56);
  if (v14 < 0xFFFE000000000000 || (v14 & 0x80000000) != 0)
  {
    if (v14 >= 0xFFFE000000000000)
    {
      v22 = (double)(int)v14;
    }
    else if (v14 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase(&v114, (JSC::JSGlobalObject *)this, v14, a4, a5, a6, a7, a8, a9);
    }
    else
    {
      *(_QWORD *)&v22 = v14 - 0x2000000000000;
    }
    if (!*(_DWORD *)(v15 + 80))
      goto LABEL_31;
    v109 = v22;
    v105 = *(_DWORD *)(v15 + 80);
    if ((v105 & 0x27) != 0 && (v105 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, v14, a4, a5, a6, a7, a8);
    v22 = v109;
    if (!*(_QWORD *)(v15 + 16))
    {
LABEL_31:
      if (fabs(v22) != INFINITY)
      {
        v36 = trunc(v22);
        if (v36 >= 0.0 && v36 <= 4294967300.0)
        {
          v14 = v22;
          goto LABEL_9;
        }
      }
      v23 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v23 = 0x3600000002;
      *(_QWORD *)(v23 + 8) = "Expect an integer argument in the range: [0, 2^32 - 1]";
      *(_DWORD *)(v23 + 16) = 4;
      v112 = (WTF::StringImpl *)v23;
      v25 = JSC::createTypeError(this, &v112, v24);
      v32 = (JSC::Exception *)v25;
      if ((v25 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C)))
      {
        v32 = (JSC::Exception *)JSC::Exception::create(v15, (JSC::VM *)v25, 0, v26, v27, v28, v29, v30);
      }
      JSC::VM::throwException((JSC::VM *)v15, (JSC::JSGlobalObject *)this, v32, v31, v26, v27, v28, v29, v30);
      v35 = v112;
      v112 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::~StringImpl(v35, v33, v34, a4, a5, a6, a7, a8);
          WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
        }
        else
        {
          *(_DWORD *)v35 -= 2;
        }
      }
    }
    v14 = 0;
  }
LABEL_9:
  if (*(_DWORD *)(v11 + 80))
  {
    v69 = *(_DWORD *)(v11 + 80);
    if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
    {
      v106 = v14;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v14, a4, a5, a6, a7, a8);
      v14 = v106;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v16 = *(_QWORD *)(v12 + 16);
  if (v16 == *(_QWORD *)(v13 + 16))
  {
    v17 = *(_QWORD *)(v16 + 8);
    if (*(_DWORD *)(v17 + 32))
      v18 = 0;
    else
      v18 = v17 + 8;
    if (v14 < *(_DWORD *)(v18 + 8))
      return (JSC::Exception *)JSC::JSWebAssemblyException::getArg((JSC::JSWebAssemblyException *)v12, (JSC::JSGlobalObject *)this, v14, a4, a5, a6, a7, a8);
    v114 = (JSC::JSObject *)"WebAssembly.Exception.getArg(): ";
    v115 = 33;
    v112 = (WTF::StringImpl *)"Index out of range";
    v113 = 19;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v114, (uint64_t)&v112, (int **)&v110);
    if (v110)
    {
      v78 = *(_QWORD *)(this + 128);
      v79 = *(JSC::Heap ***)(this + 56);
      if ((v78 & 1) != 0)
      {
        v107 = *(uint64_t (**)(JSC::JSObject **))(v78 & 0xFFFFFFFFFFFFFFFCLL);
        if ((this & 8) != 0)
          v108 = (JSC::JSObject **)(this - 16);
        else
          v108 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
        v114 = *v108;
        v115 = this;
        v116 = (char *)(this + 128);
        v78 = v107(&v114);
      }
      v80 = JSC::ErrorInstance::create(v79, v78, &v110, 0, 0, 0, 2, 1);
      v87 = (JSC::Exception *)v80;
      if ((v80 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v80 & 0xFFFFFFFE) + 0x4C)))
      {
        v87 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v80, 0, v81, v82, v83, v84, v85);
      }
      v70 = (uint64_t)JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)this, v87, v86, v81, v82, v83, v84, v85);
      goto LABEL_60;
    }
LABEL_83:
    __break(0xC471u);
    JUMPOUT(0x198E4F04CLL);
  }
  v114 = (JSC::JSObject *)"WebAssembly.Exception.getArg(): ";
  v115 = 33;
  v112 = (WTF::StringImpl *)"First argument does not match the exception tag";
  v113 = 48;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v114, (uint64_t)&v112, (int **)&v110);
  if (!v110)
  {
    __break(0xC471u);
    JUMPOUT(0x198E4F3BCLL);
  }
LABEL_54:
  v70 = JSC::throwTypeError(this, &v111, &v110);
LABEL_60:
  v20 = v70;
  v88 = v110;
  v110 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v71, v72, v73, v74, v75, v76, v77);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  return (JSC::Exception *)v20;
}

uint64_t JSC::webAssemblyExceptionProtoFuncIs(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int8x16_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  int v29;
  unint64_t NotEnoughArgumentsError;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  JSC::Exception *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::VM *v46;
  JSC::VM *v47;
  uint64_t v48;

  v10 = *((_QWORD *)this + 7);
  v46 = (JSC::VM *)v10;
  v47 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    v14 = WTF::fastCompactMalloc((WTF *)0x20);
    v15.i64[0] = 0x1000000002;
    *(_QWORD *)v14 = 0x1000000002;
    *(_QWORD *)(v14 + 8) = "is not an object";
    *(_DWORD *)(v14 + 16) = 4;
    v48 = v14;
    v27 = JSC::createError((unint64_t)this, v11, &v48, (uint64_t)JSC::defaultSourceAppender, v16, v17, v18, v19, v15);
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
    if ((v27 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)))
    {
      v27 = JSC::Exception::create(v10, (JSC::VM *)v27, 0, v22, v23, v24, v25, v26);
    }
    JSC::VM::throwException((JSC::VM *)v10, this, (JSC::Exception *)v27, v28, v22, v23, v24, v25, v26);
    goto LABEL_24;
  }
  if (&JSC::JSWebAssemblyException::s_info != (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    JSC::throwTypeError((unint64_t)this, &v47, (uint64_t)"WebAssembly.Exception operation called on non-Exception object", 63);
LABEL_24:
    v11 = 0;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v29 = *(_DWORD *)(v10 + 80);
    if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    NotEnoughArgumentsError = JSC::createNotEnoughArgumentsError((uint64_t)this, 0);
    v37 = (JSC::Exception *)NotEnoughArgumentsError;
    if ((NotEnoughArgumentsError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)NotEnoughArgumentsError & 0xFFFFFFFE)
                                                              + 0x4C)))
    {
      v37 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)NotEnoughArgumentsError, 0, v31, v32, v33, v34, v35);
    }
    return (uint64_t)JSC::VM::throwException((JSC::VM *)v10, this, v37, v36, v31, v32, v33, v34, v35);
  }
  else
  {
    v12 = *((_QWORD *)a2 + 6);
    if ((v12 & 0xFFFE000000000002) != 0
      || &JSC::JSWebAssemblyTag::s_info != (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)))
    {
      return JSC::throwTypeError((unint64_t)this, &v46, (uint64_t)"WebAssembly.Exception.is(): First argument must be a WebAssembly.Tag", 69);
    }
    else if (*(_QWORD *)(v11 + 16) == *(_QWORD *)(v12 + 16))
    {
      return 7;
    }
    else
    {
      return 6;
    }
  }
}

void JSC::WebAssemblyFunction::destroy(JSC::WebAssemblyFunction *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v9 = (unsigned int *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v9, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::WebAssemblyFunction::visitChildren(JSC::WebAssemblyFunction *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD *v11;
  char v12;
  _QWORD v13[2];
  _QWORD *v14;
  char v15;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v10[0] = a2;
    v10[1] = this;
    v12 = 0;
    v11 = v7;
    v13[0] = a2;
    v13[1] = this;
    v15 = 0;
    v14 = v10;
    *((_QWORD *)a2 + 11) = v13;
    JSC::JSCallee::visitChildren(this, a2, a3);
    (*(void (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFELL);
    *(_QWORD *)(v13[0] + 88) = v14;
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 4));
    *(_QWORD *)(v10[0] + 88) = v11;
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t JSC::WebAssemblyFunction::calleeSaves(JSC::WebAssemblyFunction *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  JSC::RegisterSetBuilder *v5;
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = JSC::RegisterSetBuilder::wasmPinnedRegisters(this);
  v4 = v3;
  v5 = (JSC::RegisterSetBuilder *)JSC::Wasm::TypeDefinition::expand(*((_QWORD *)this + 5));
  v6 = (_DWORD *)((char *)v5 + 8);
  if (*((_DWORD *)v5 + 8))
    v6 = 0;
  if (v6[2] || v6[3])
  {
    v7 = JSC::RegisterSetBuilder::vmCalleeSaveRegisters(v5);
    v9 = v8;
    v2 |= JSC::RegisterSetBuilder::runtimeTagRegisters((JSC::RegisterSetBuilder *)v7) & v7;
    v4 |= v10 & v9;
  }
  return v4 | v2;
}

JSC::Compilation *JSC::WebAssemblyFunction::jsCallEntrypointSlow(uint64_t this)
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  JSC::CCallHelpers *v6;
  unsigned __int8 **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int **v11;
  uint64_t *v12;
  unsigned __int8 **v13;
  JSC::Wasm *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::Wasm *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::Wasm *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const JSC::RegisterAtOffsetList *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  WTF *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  JSC::Compilation *v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  unsigned int v227;
  WTF *v228;
  WTF *v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  WTF *v238;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  unsigned __int8 *v244;
  unsigned int v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unsigned int v263;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  char v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char v340;
  int v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unsigned int v410;
  char v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  int v477;
  uint64_t v478;
  WTF *v479;
  int v480;
  int v481;
  char v482;
  int v483;
  uint64_t v484;
  char v485;
  JSC::Compilation *v486;
  WTF *v487;
  uint64_t v488;
  JSC::Compilation *v489;
  _DWORD v490[3];
  _DWORD v491[3];
  _DWORD v492[3];
  _DWORD v493[2];
  char v494;
  __int16 v495;
  char v496;
  _DWORD v497[3];
  _DWORD v498[3];
  _DWORD v499[3];
  int v500;
  uint64_t v501;
  _DWORD v502[3];
  _DWORD v503[3];
  _DWORD v504[3];
  _DWORD v505[3];
  _DWORD v506[3];
  _DWORD v507[3];
  WTF *v508;
  uint64_t v509;
  _BYTE v510[5];
  WTF *v511;
  int v512;
  _BYTE v513[32];
  uint64_t v514;
  unsigned int v515;
  unsigned int *v516[4];
  uint64_t v517;
  unsigned int v518;
  int v519;
  WTF *v520;
  uint64_t v521;
  JSC::Compilation **v522;
  int v523;
  uint64_t v524;
  char v525;
  _DWORD v526[8];
  _DWORD v527[6];
  _QWORD v528[17];
  unsigned int v529;
  unsigned int v530;
  int v531;
  char v532;
  uint64_t v533;

  v533 = *MEMORY[0x1E0C80C00];
  v1 = g_config;
  if (byte_1ECF4C25D)
    return 0;
  v3 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
  if ((this & 8) != 0)
    v3 = (uint64_t *)(this - 16);
  v4 = *v3;
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v526, 0);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [21]>((uint64_t)v526);
  v5 = JSC::Wasm::TypeDefinition::expand(*(_QWORD *)(this + 40));
  v6 = (JSC::CCallHelpers *)v5;
  v7 = (unsigned __int8 **)(v5 + 8);
  if (*(_DWORD *)(v5 + 32))
    v8 = 0;
  else
    v8 = v5 + 8;
  v9 = JSC::WebAssemblyFunction::calleeSaves((JSC::WebAssemblyFunction *)this);
  v11 = JSC::RegisterAtOffsetList::RegisterAtOffsetList((unsigned int **)&v520, v9, v10, 0);
  v12 = JSC::Wasm::wasmCallingConvention((JSC::Wasm *)v11);
  if (*((_DWORD *)v6 + 8))
    v13 = 0;
  else
    v13 = v7;
  v14 = (JSC::Wasm *)JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)v12, v13, 0, (char *)v516);
  if (((uint64_t)v516[0] & 4) == 0)
  {
    v22 = JSC::Wasm::jsCallingConvention(v14);
    JSC::Wasm::JSCallingConvention::callInformationFor((uint64_t)v22, (uint64_t)v6, 1, (uint64_t)v513);
    JSC::Wasm::CallInformation::computeResultsOffsetList(v516, (unsigned int **)&v511);
    v23 = ((_DWORD)v521 + v519 + v512 + 23) & 0xFFFFFFF0;
    JSC::AssemblyHelpers::emitFunctionPrologue((JSC::AssemblyHelpers *)v526, v24, v25, v26, v27, v28, v29, v30);
    JSC::MacroAssemblerARM64::sub64((uint64_t)v526, 31, v23, 31, v31, v32, v33, v34);
    JSC::AssemblyHelpers::emitSave((JSC::AssemblyHelpers *)v526, (const JSC::RegisterAtOffsetList *)&v520, v35, v36, v37, v38, v39, v40);
    v42 = JSC::Wasm::wasmCallingConvention(v41);
    if (*((_DWORD *)v42 + 11) <= 1u)
    {
      __break(0xC471u);
      JUMPOUT(0x198E50684);
    }
    v43 = *(unsigned __int8 *)(v42[4] + 1);
    v44 = JSC::Wasm::wasmCallingConvention((JSC::Wasm *)v42);
    if (!*((_DWORD *)v44 + 11))
    {
      __break(0xC471u);
      JUMPOUT(0x198E5068CLL);
    }
    v485 = *(_BYTE *)v44[4];
    v50 = (WTF *)v510;
    v508 = (WTF *)v510;
    v509 = 2;
    if (v23 >= (HIDWORD(qword_1ECF4C248) - dword_1ECF4C250) >> 1)
    {
      JSC::MacroAssemblerARM64::load64((uint64_t)v526, v4 + 8, v485, v45, v46, v47, v48, v49);
      JSC::MacroAssemblerARM64::branch64((uint64_t)v526, 8, 31, 29, v379, v380, v381, v382, (uint64_t)v507);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v508, v507, v383, v384, v385, v386, v387, v388);
      JSC::MacroAssemblerARM64::branch64((uint64_t)v526, 3, 31, v485, v389, v390, v391, v392, (uint64_t)v506);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v508, v506, v393, v394, v395, v396, v397, v398);
    }
    v51 = *(_DWORD *)(v8 + 8);
    if (v51)
    {
      JSC::MacroAssemblerARM64::branch32((uint64_t)v526, 3, 0x200000001DLL, (v51 + 1), v46, v47, v48, v49, (uint64_t)v505);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v508, v505, v52, v53, v54, v55, v56, v57);
    }
    v58 = (JSC::Wasm *)JSC::Wasm::TypeDefinition::expand(*(_QWORD *)(this + 40));
    v66 = (_DWORD *)((char *)v58 + 8);
    if (*((_DWORD *)v58 + 8))
      v66 = 0;
    if (v66[2] || v66[3])
      JSC::AssemblyHelpers::emitMaterializeTagCheckRegisters((JSC::AssemblyHelpers *)v526, v59, v60, v61, v62, v63, v64, v65);
    v484 = v4;
    v67 = JSC::Wasm::wasmCallingConvention(v58);
    if (!*((_DWORD *)v67 + 7))
    {
      __break(0xC471u);
      JUMPOUT(0x198E50694);
    }
    v75 = *(_DWORD *)(v8 + 8);
    if (!v75)
    {
LABEL_26:
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v526, *(_QWORD *)(*(_QWORD *)(this + 32) + 16), 19, v70, v71, v72, v73, v74);
      JSC::CCallHelpers::storeWasmCalleeCallee((JSC::CCallHelpers *)v526, (const void **)(this + 80), v76, v77, v78, v79, v80, v81);
      v89 = *(_QWORD *)(this + 32);
      v90 = *(_QWORD *)(v89 + 16);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v90 + 56) + 8) + 104) == -1)
        goto LABEL_29;
      v91 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v89 + 56) + 16) + 8) + 6);
      if (v91 == 1)
        goto LABEL_28;
      if (v91)
      {
        JSC::MacroAssemblerARM64::load64((uint64_t)v526, 0x2800000013, 22, v84, v85, v86, v87, v88);
      }
      else
      {
        v399 = *(_QWORD *)(*(_QWORD *)(v90 + 64) + 8);
        if (*(_BYTE *)(v399 + 5) == 1)
        {
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v526, *(_QWORD *)(v399 + 24), 23, v84, v85, v86, v87, v88);
          v90 = *(_QWORD *)(*(_QWORD *)(this + 32) + 16);
LABEL_28:
          v92 = JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(*(_QWORD *)(v90 + 64) + 8));
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v526, v92, 22, v93, v94, v95, v96, v97);
          goto LABEL_29;
        }
        v410 = v530;
        if (v530 + 4 > v529)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v528, v82, v83, v84, v85, v86, v87, v88);
          v410 = v530;
        }
        *(_DWORD *)(v528[0] + v410) = -1455235466;
        v530 += 4;
      }
      JSC::AssemblyHelpers::cageConditionally(v526, 0, 22, 0xFFFFFFFFLL, (char)v43, v86, v87, v88);
LABEL_29:
      v98 = (unsigned int *)WTF::fastMalloc((WTF *)0x40);
      JSC::Wasm::JITCallee::JITCallee((uint64_t)v98, 8);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v526, (v99 - v1[16]) | 3, (char)v43, v100, v101, v102, v103, v104);
      JSC::MacroAssemblerARM64::storePair64(v526, 19, (char)v43, 29, 16, v105, v106, v107);
      JSC::MacroAssemblerARM64::load64((uint64_t)v526, *(_QWORD *)(this + 48), (char)v43, v108, v109, v110, v111, v112);
      v531 = 0;
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v528, (32 * (v43 & 0x1F)) | 0xD63F0000, v113, v114, v115, v116, v117, v118);
      JSC::MacroAssemblerARM64::add64((uint64_t)v526, -(int)v23 & 0xFFFFFFF0, 29, 31, v119, v120, v121, v122);
      JSC::Wasm::marshallJSResult((JSC::Wasm *)v526, v6, (const JSC::Wasm::TypeDefinition *)v516, (uint64_t **)&v511, v123, v124, v125, v126);
      JSC::AssemblyHelpers::emitRestore(v526, (_DWORD **)&v520, 29, v127, v128, v129, v130, v131);
      JSC::AssemblyHelpers::emitFunctionEpilogue((JSC::AssemblyHelpers *)v526, v132, v133, v134, v135, v136, v137, v138);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v528, 3596551104, v139, v140, v141, v142, v143, v144);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v508, (uint64_t)v526, v145, v146, v147, v148, v149, v150);
      JSC::AssemblyHelpers::emitRestore(v526, (_DWORD **)&v520, 29, v151, v152, v153, v154, v155);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v526, this, 0, v156, v157, v158, v159, v160);
      JSC::AssemblyHelpers::emitFunctionEpilogue((JSC::AssemblyHelpers *)v526, v161, v162, v163, v164, v165, v166, v167);
      v168 = *(_QWORD *)(this + 24);
      if ((v168 & 1) != 0)
        v168 = *(_QWORD *)((v168 & 0xFFFFFFFFFFFFFFFELL) + 48);
      v169 = JSC::ExecutableBase::entrypointFor(v168, 0, 1);
      JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)357>((uint64_t)v526, v169, v170, v171, v172, v173, v174, v175);
      JSC::LinkBuffer::LinkBuffer((uint64_t)&v523, (uint64_t)v526, 0, 12, 0);
      if (!v525)
      {
        v211 = 0;
LABEL_37:
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)&v523, v176, v177, v178, v179, v180, v181, v182);
        do
        {
          v226 = __ldaxr(v98);
          v227 = v226 - 1;
        }
        while (__stlxr(v227, v98));
        if (!v227)
        {
          atomic_store(1u, v98);
          JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v98, (uint64_t)v219, v220, v221, v222, v223, v224, v225);
        }
        v228 = v508;
        if (v50 != v508 && v508 != 0)
        {
          v508 = 0;
          LODWORD(v509) = 0;
          WTF::fastFree((unint64_t)v228, v219, v220, v221, v222, v223, v224, v225);
        }
        v230 = v511;
        v511 = 0;
        if (v230)
          WTF::fastFree((unint64_t)v230, v219, v220, v221, v222, v223, v224, v225);
        JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)v513, v219, v220, v221, v222, v223, v224, v225);
        goto LABEL_49;
      }
      if (*((unsigned __int8 *)v1 + 648) | *((unsigned __int8 *)v1 + 647))
      {
        v411 = 1;
      }
      else
      {
        if (!*((_BYTE *)v1 + 654) && !*((_BYTE *)v1 + 649))
        {
          JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)&v523, 0, 0, &v486);
LABEL_36:
          v522 = 0;
          std::make_unique[abi:sn180100]<JSC::Compilation,JSC::MacroAssemblerCodeRef<(WTF::PtrTag)2367>,decltype(nullptr)>((uint64_t *)&v486, &v489);
          JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)&v486, v183, v184, v185, v186, v187, v188, v189);
          v190 = v520;
          v520 = 0;
          v486 = v489;
          v487 = v190;
          v488 = v521;
          v489 = 0;
          JSC::Wasm::JITCallee::setEntrypoint(v98, (uint64_t *)&v486, v191, v192, v193, v194, v195, v196);
          JSC::Wasm::Entrypoint::~Entrypoint((JSC::Wasm::Entrypoint *)&v486, v197, v198, v199, v200, v201, v202, v203);
          WTF::RefPtr<JSC::Wasm::JSToWasmICCallee,WTF::RawPtrTraits<JSC::Wasm::JSToWasmICCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSToWasmICCallee>>::operator=((unsigned int **)(this + 104), v98, v204, v205, v206, v207, v208, v209);
          v210 = *(_QWORD *)(this + 104);
          v486 = 0;
          v522 = &v486;
          JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(v210, (uint64_t **)&v522);
          v211 = v486;
          std::unique_ptr<JSC::Compilation>::~unique_ptr[abi:sn180100](&v489, v212, v213, v214, v215, v216, v217, v218);
          goto LABEL_37;
        }
        v411 = *((_BYTE *)v1 + 654) != 0;
      }
      JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)2367>(&v486, (uint64_t)&v523, v411);
      goto LABEL_36;
    }
    v240 = v75 - 1;
    v241 = 24 * (v75 - 1);
    v482 = *(_BYTE *)v67[2];
    v483 = v23;
    while (1)
    {
      if (v515 <= v240)
      {
        __break(0xC471u);
        JUMPOUT(0x198E5069CLL);
      }
      if (v518 <= v240)
      {
        __break(0xC471u);
        JUMPOUT(0x198E506A4);
      }
      v242 = *(_QWORD *)(v514 + v241);
      v243 = *(unsigned __int8 *)(v517 + v241 + 8);
      v244 = (unsigned __int8 *)(*(_QWORD *)v8 + 16 * (v240 + *(_DWORD *)(v8 + 12)));
      v245 = *v244;
      if (v245 <= 0xFD)
      {
        v262 = *((_QWORD *)v244 + 1);
        if (v245 - 227 < 2 || v245 - 239 < 2)
        {
          v480 = *(unsigned __int8 *)(v517 + v241 + 8);
          v478 = *(_QWORD *)(v514 + v241);
          if (*((_BYTE *)v1 + 1969))
          {
            v263 = (v245 + 29);
            if (v263 <= 1 && v262 == -16)
              goto LABEL_130;
            if (v263 > 1)
              goto LABEL_94;
            if (v262 > 0xFFFFFFFFFFFFFFC0)
            {
              if (v262 == -17)
                goto LABEL_67;
            }
            else if (!*(_DWORD *)(v262 + 32))
            {
LABEL_130:
              v477 = *((unsigned __int8 *)v1 + 1969);
              v476 = *((_QWORD *)v244 + 1);
              v412 = (v242 << 32) | 0x1D;
              JSC::MacroAssemblerARM64::load64((uint64_t)v526, v412, (char)v43, v70, v71, v72, v73, v74);
              JSC::MacroAssemblerARM64::branch64((uint64_t)v526, 0, (char)v43, 2, v413, v414, v415, v416, (uint64_t)&v523);
              v479 = v50;
              v475 = v412;
              if (v245 != 227)
              {
                v500 = v523;
                v501 = v524;
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v508, &v500, v417, v405, v406, v407, v408, v409);
              }
LABEL_132:
              JSC::AssemblyHelpers::branchIfNotCell((uint64_t)v526, v43, 1, v405, v406, v407, v408, v409, (uint64_t)v499);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v508, v499, v418, v419, v420, v421, v422, v423);
              JSC::AssemblyHelpers::emitLoadStructure(v526, v484, v43, (char)v43, v424, v425, v426, v427);
              JSC::AssemblyHelpers::loadCompactPtr(v526, v43 | 0x4C00000000, (char)v43, v428, v429, v430, v431, v432);
              JSC::MacroAssemblerARM64::branch64((uint64_t)v526, 0, (char)v43, (uint64_t)&JSC::WebAssemblyFunction::s_info, v433, v434, v435, v436, (uint64_t)&v486);
              JSC::MacroAssemblerARM64::branch64((uint64_t)v526, 1, (char)v43, (uint64_t)&JSC::WebAssemblyWrapperFunction::s_info, v437, v438, v439, v440, (uint64_t)v498);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v508, v498, v441, v442, v443, v444, v445, v446);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v486, (uint64_t)v526, v447, v448, v449, v450, v451, v452);
              v1 = g_config;
              if (v477 && BYTE1(dword_1ECF4C7B0) && v476 <= 0xFFFFFFFFFFFFFFC0)
              {
                JSC::MacroAssemblerARM64::load64((uint64_t)v526, v475, (char)v43, v70, v71, v72, v73, v74);
                JSC::MacroAssemblerARM64::load64((uint64_t)v526, v43 | 0x2800000000, (char)v43, v454, v455, v456, v457, v458);
                v1 = g_config;
                JSC::MacroAssemblerARM64::branch64((uint64_t)v526, 1, (char)v43, v476, v459, v460, v461, v462, (uint64_t)v497);
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v508, v497, v463, v464, v465, v466, v467, v468);
              }
              v50 = v479;
              if (v245 - 239 < 2 || v245 == 227)
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v523, (uint64_t)v526, v453, v70, v71, v72, v73, v74);
              v243 = v480;
              v242 = v478;
LABEL_67:
              if (v243 == 3)
              {
                JSC::MacroAssemblerARM64::load64((uint64_t)v526, (v242 << 32) | 0x1D, (char)v43, v70, v71, v72, v73, v74);
                if (v245 - 239 >= 2 && v245 != 227)
                {
                  JSC::MacroAssemblerARM64::branch64((uint64_t)v526, 0, (char)v43, 2, v266, v267, v268, v269, (uint64_t)v492);
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v508, v492, v469, v470, v471, v472, v473, v474);
                }
                if (v518 <= v240)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E506CCLL);
                }
                JSC::MacroAssemblerARM64::store64((uint64_t)v526, (char)v43, (*(_QWORD *)(v517 + v241) << 32) | 0x1FLL, v265, v266, v267, v268, v269);
              }
              else
              {
                if (v518 <= v240)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E506D4);
                }
                v270 = *(_BYTE *)(v517 + v241);
                JSC::MacroAssemblerARM64::load64((uint64_t)v526, (v242 << 32) | 0x1D, v270, v70, v71, v72, v73, v74);
                if (v245 - 239 >= 2 && v245 != 227)
                {
                  JSC::MacroAssemblerARM64::branch64((uint64_t)v526, 0, v270, 2, v71, v72, v73, v74, (uint64_t)v491);
                  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v508, v491, v271, v272, v273, v274, v275, v276);
                }
              }
              LODWORD(v23) = v483;
              goto LABEL_61;
            }
          }
          else
          {
            if (v245 == 239)
              goto LABEL_67;
            if (v245 == 240)
            {
              v477 = 0;
              v479 = v50;
              v475 = (v242 << 32) | 0x1D;
              v476 = *((_QWORD *)v244 + 1);
              JSC::MacroAssemblerARM64::load64((uint64_t)v526, v475, (char)v43, v70, v71, v72, v73, v74);
              JSC::MacroAssemblerARM64::branch64((uint64_t)v526, 0, (char)v43, 2, v401, v402, v403, v404, (uint64_t)&v523);
              goto LABEL_132;
            }
          }
LABEL_94:
          JSC::ARM64Assembler::label(v527, v68, v69, v70, v71, v72, v73, v74, &v523);
          JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v528, 335544320, v328, v329, v330, v331, v332, v333);
          if (v532)
            v340 = 69;
          else
            v340 = 65;
          v493[0] = v523;
          v493[1] = 0;
          v494 = v340;
          v495 = 15;
          v496 = -1;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v508, v493, v334, v335, v336, v337, v338, v339);
          v242 = v478;
          v243 = v480;
          goto LABEL_67;
        }
        if (v245 - 252 >= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198E501F8);
        }
        v23 = (unint64_t)v1;
        v481 = *(unsigned __int8 *)(v517 + v241 + 8);
        if (v243 != 3)
          v482 = *(_BYTE *)(v517 + v241);
        JSC::MacroAssemblerARM64::load64((uint64_t)v526, (v242 << 32) | 0x1D, (char)v43, v70, v71, v72, v73, v74);
        JSC::MacroAssemblerARM64::branchTest64((uint64_t)v526, 0, (char)v43, 27, v277, v278, v279, v280, (uint64_t)v490);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v508, v490, v281, v282, v283, v284, v285, v286);
        JSC::MacroAssemblerARM64::branch64((uint64_t)v526, 2, (char)v43, 27, v287, v288, v289, v290, (uint64_t)&v523);
        v291 = v482;
        JSC::AssemblyHelpers::unboxDoubleWithoutAssertions(v526, (char)v43, (char)v43, v291, 1, v292, v293, v294);
        if (*(unsigned __int8 *)(*(_QWORD *)v8 + 16 * (v240 + *(_DWORD *)(v8 + 12))) == 253)
          JSC::MacroAssemblerARM64::convertDoubleToFloat(v526, v291, v291, v297, v298, v299, v300, v301);
        JSC::ARM64Assembler::label(v527, v295, v296, v297, v298, v299, v300, v301, (int *)&v522);
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v528, 335544320, v302, v303, v304, v305, v306, v307);
        if (v532)
          v314 = 69;
        else
          v314 = 65;
        v486 = (JSC::Compilation *)v522;
        LOBYTE(v487) = v314;
        *(_WORD *)((char *)&v487 + 1) = 15;
        BYTE3(v487) = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v523, (uint64_t)v526, v308, v309, v310, v311, v312, v313);
        v321 = v482;
        if (*(unsigned __int8 *)(*(_QWORD *)v8 + 16 * (v240 + *(_DWORD *)(v8 + 12))) == 253)
          JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v528, v291 | (32 * (v43 & 0x1F)) | 0x1E220000, v315, v316, v317, v318, v319, v320);
        else
          JSC::MacroAssemblerARM64::convertInt32ToDouble(v526, (char)v43, v291, v316, v317, v318, v319, v320);
        v1 = (uint64_t *)v23;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v486, (uint64_t)v526, v322, v323, v324, v325, v326, v327);
        LODWORD(v23) = v483;
        if (v481 == 3)
        {
          if (v518 <= v240)
          {
            __break(0xC471u);
            JUMPOUT(0x198E506DCLL);
          }
          v400 = (*(_QWORD *)(v517 + v241) << 32) | 0x1FLL;
          if (*(unsigned __int8 *)(*(_QWORD *)v8 + 16 * (v240 + *(_DWORD *)(v8 + 12))) == 253)
            JSC::MacroAssemblerARM64::storeFloat((uint64_t)v526, v321, v400, v70, v71, v72, v73, v74);
          else
            JSC::MacroAssemblerARM64::storeDouble((uint64_t)v526, v321, v400, v70, v71, v72, v73, v74);
        }
      }
      else if (v245 == 255)
      {
        v246 = *(unsigned __int8 *)(v517 + v241 + 8);
        JSC::MacroAssemblerARM64::load64((uint64_t)v526, (v242 << 32) | 0x1D, (char)v43, v70, v71, v72, v73, v74);
        JSC::MacroAssemblerARM64::branch64((uint64_t)v526, 3, (char)v43, 27, v247, v248, v249, v250, (uint64_t)v504);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v508, v504, v251, v252, v253, v254, v255, v256);
        if (v246 == 3)
        {
          LODWORD(v23) = v483;
          if (v518 <= v240)
          {
            __break(0xC471u);
            JUMPOUT(0x198E506BCLL);
          }
          JSC::MacroAssemblerARM64::store32((uint64_t)v526, (char)v43, (*(_QWORD *)(v517 + v241) << 32) | 0x1FLL, v257, v258, v259, v260, v261);
        }
        else
        {
          LODWORD(v23) = v483;
          if (v518 <= v240)
          {
            __break(0xC471u);
            JUMPOUT(0x198E506ACLL);
          }
          JSC::MacroAssemblerARM64::and64((uint64_t)v526, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v43, *(char *)(v517 + v241));
        }
      }
      else
      {
        v341 = *(unsigned __int8 *)(v517 + v241 + 8);
        JSC::MacroAssemblerARM64::load64((uint64_t)v526, (v242 << 32) | 0x1D, (char)v43, v70, v71, v72, v73, v74);
        JSC::AssemblyHelpers::branchIfNotCell((uint64_t)v526, v43, 1, v342, v343, v344, v345, v346, (uint64_t)v503);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v508, v503, v347, v348, v349, v350, v351, v352);
        JSC::AssemblyHelpers::branchIfNotHeapBigInt((uint64_t)v526, v43, v353, v354, v355, v356, v357, (uint64_t)v502);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v508, v502, v358, v359, v360, v361, v362, v363);
        if (v341 == 3)
        {
          JSC::AssemblyHelpers::toBigInt64((uint64_t)v526, v43, v485, 28, 27, v364, v365, v366);
          LODWORD(v23) = v483;
          if (v518 <= v240)
          {
            __break(0xC471u);
            JUMPOUT(0x198E506B4);
          }
          JSC::MacroAssemblerARM64::store64((uint64_t)v526, v485, (*(_QWORD *)(v517 + v241) << 32) | 0x1FLL, v367, v368, v369, v370, v371);
          JSC::AssemblyHelpers::emitMaterializeTagCheckRegisters((JSC::AssemblyHelpers *)v526, v372, v373, v374, v375, v376, v377, v378);
        }
        else
        {
          LODWORD(v23) = v483;
          if (v518 <= v240)
          {
            __break(0xC471u);
            JUMPOUT(0x198E506C4);
          }
          JSC::AssemblyHelpers::toBigInt64((uint64_t)v526, v43, *(char *)(v517 + v241), v485, 19, v364, v365, v366);
        }
      }
LABEL_61:
      --v240;
      v241 -= 24;
      if (v240 == -1)
        goto LABEL_26;
    }
  }
  v211 = 0;
LABEL_49:
  JSC::Wasm::CallInformation::~CallInformation((JSC::Wasm::CallInformation *)v516, v15, v16, v17, v18, v19, v20, v21);
  v238 = v520;
  v520 = 0;
  if (v238)
    WTF::fastFree((unint64_t)v238, v231, v232, v233, v234, v235, v236, v237);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v526, v231, v232, v233, v234, v235, v236, v237);
  return v211;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [21]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "jsCallEntrypointSlow");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

uint64_t JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)357>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  unsigned int i;
  unsigned int v12;
  int v13;
  uint64_t result;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  JSC::AssemblerBuffer *v21;
  __int128 v22;
  uint64_t v23;

  v10 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); (signed int)i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if (i + 4 > *(_DWORD *)(a1 + 192))
    {
      v21 = v10;
      JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
      v10 = v21;
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v12 = i;
  if (i + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  v13 = *(unsigned __int8 *)(a1 + 328);
  result = a1 + 32;
  LOBYTE(v23) = -1;
  *(_QWORD *)&v22 = i;
  *((_QWORD *)&v22 + 1) = a2;
  if (v13)
    v15 = 69;
  else
    v15 = 65;
  BYTE3(v23) = 15;
  *(_WORD *)((char *)&v23 + 1) = v15;
  WORD2(v23) = 128;
  v16 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v16 == *(_DWORD *)(a1 + 40))
  {
    result = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v16 + 1, (unint64_t)&v22, a4, a5, a6, a7, a8);
    v17 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0;
    *(_BYTE *)(v17 + 16) = -1;
    v20 = (*(unsigned __int8 *)(v17 + 19) << 16) | 0xF0000;
    *(_WORD *)(v17 + 17) = 65;
    *(_BYTE *)(v17 + 19) = BYTE2(v20);
    *(_WORD *)(v17 + 20) &= 0xFC00u;
    v18 = *(_OWORD *)result;
    v19 = *(_QWORD *)(result + 16);
  }
  else
  {
    v17 = *(_QWORD *)result + 24 * v16;
    v18 = v22;
    v19 = v23;
  }
  *(_QWORD *)(v17 + 16) = v19;
  *(_OWORD *)v17 = v18;
  ++*(_DWORD *)(a1 + 44);
  return result;
}

void JSC::LinkBuffer::finalizeCodeWithDisassembly<(WTF::PtrTag)2367>(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  JSC::ExecutableMemoryHandle *v36;

  JSC::LinkBuffer::finalizeCodeWithDisassemblyImpl(a2, a3, 0, 0, "JS->Wasm IC", &v35, (uint64_t)v35);
  v11 = (unsigned int *)v36;
  *a1 = v35;
  a1[1] = 0;
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v13 = (unsigned int *)a1[1];
    a1[1] = v11;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v13, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
    }
    v16 = (unsigned int *)v36;
    v36 = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v16, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      }
    }
  }
}

unsigned int **WTF::RefPtr<JSC::Wasm::JSToWasmICCallee,WTF::RawPtrTraits<JSC::Wasm::JSToWasmICCallee>,WTF::DefaultRefDerefTraits<JSC::Wasm::JSToWasmICCallee>>::operator=(unsigned int **a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (a2)
  {
    do
      v9 = __ldaxr(a2);
    while (__stlxr(v9 + 1, a2));
  }
  v10 = *a1;
  *a1 = a2;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

unint64_t JSC::WebAssemblyFunction::create(uint64_t a1, uint64_t a2, unint64_t a3, int a4, const WTF::String *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int **a11)
{
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t HostFunction;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  JSC::VM *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::NativeExecutable *v37;
  unsigned int *v38;
  unsigned int *v39;
  JSC::Heap *v40;
  unint64_t SlowCase;
  unsigned int *v42;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v80;
  WTF::StringImpl *v81;

  v81 = 0;
  HostFunction = JSC::VM::getHostFunction((uint64_t *)a1, (uint64_t)JSC::callWebAssemblyFunction, 0, 184, (unint64_t)JSC::callHostFunctionAsConstructor, 0, &v81, a8);
  v23 = v81;
  v81 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v24 = *(WTF::StringImpl **)(HostFunction + 8);
  v25 = (unsigned int *)((char *)v24 + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  v81 = v24;
  v27 = *(_QWORD *)(HostFunction + 16);
  v28 = (unsigned int *)(v27 + 8);
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 + 1, v28));
  v80 = (unsigned int *)v27;
  v37 = (JSC::NativeExecutable *)JSC::NativeExecutable::create((_QWORD *)a1, (uint64_t *)&v81, (uint64_t)JSC::callWebAssemblyFunction, (uint64_t *)&v80, (uint64_t)JSC::callHostFunctionAsConstructor, 0, (_DWORD **)a5, v21);
  v38 = v80;
  v80 = 0;
  if (v38)
  {
    v66 = v38 + 2;
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 32))(v38);
    }
  }
  v39 = (unsigned int *)v81;
  v81 = 0;
  if (v39)
  {
    v69 = v39 + 2;
    do
    {
      v70 = __ldaxr(v69);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v69));
    if (!v71)
    {
      atomic_store(1u, v39 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 32))(v39);
    }
  }
  v40 = *(JSC::Heap **)(a1 + 40976);
  if (!v40)
    v40 = JSC::GCClient::Heap::webAssemblyFunctionSpaceSlow((JSC::Heap **)(a1 + 37552));
  SlowCase = *((_QWORD *)v40 + 3);
  if (SlowCase < *((_QWORD *)v40 + 4))
    goto LABEL_13;
  SlowCase = *((_QWORD *)v40 + 5);
  if ((SlowCase & 1) == 0)
  {
    v72 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v40 + 6);
    *((_QWORD *)v40 + 4) = SlowCase + HIDWORD(v72);
    *((_QWORD *)v40 + 5) = SlowCase + (int)v72;
LABEL_13:
    *((_QWORD *)v40 + 3) = SlowCase + 112;
    goto LABEL_14;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v30, v31, v32, v33, v34, v35, v36);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v40, a1 + 192, 112, 0, 0, v73, v74, v75);
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  v42 = *a11;
  if (*a11)
  {
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  JSC::JSCallee::JSCallee(SlowCase, a1, a2, a3);
  *(_QWORD *)(SlowCase + 24) = v37;
  *(_QWORD *)(SlowCase + 32) = a6;
  *(_QWORD *)(SlowCase + 40) = a10;
  *(_QWORD *)(SlowCase + 48) = a9;
  *(_QWORD *)(SlowCase + 56) = SlowCase + 80;
  *(_QWORD *)(SlowCase + 64) = v42;
  *(_QWORD *)(SlowCase + 72) = a7;
  v52 = (a8 - qword_1ECF4C080) | 3;
  if (!a8)
    v52 = 0;
  *(_QWORD *)(SlowCase + 80) = v52;
  if (*(_BYTE *)(a7 + 6) == 7)
  {
    do
      v53 = __ldaxr((unsigned int *)a7);
    while (__stlxr(v53 + 1, (unsigned int *)a7));
    v54 = (a7 - qword_1ECF4C080) | 3;
  }
  else
  {
    a7 = 0;
    v54 = 0;
  }
  *(_QWORD *)(SlowCase + 88) = a7;
  *(_QWORD *)(SlowCase + 96) = v54;
  *(_QWORD *)(SlowCase + 104) = 0;
  if (v42)
  {
    do
    {
      v55 = __ldaxr(v42);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v42));
    if (!v56)
    {
      atomic_store(1u, v42);
      WTF::fastFree((unint64_t)v42, v44, v45, v46, v47, v48, v49, v50);
    }
  }
  JSC::JSFunction::finishCreation((JSC::JSFunction *)SlowCase, (JSC::VM *)a1, v37, a4, a5, v51, v48, v49, v50);
  return SlowCase;
}

uint64_t JSC::callWebAssemblyFunction(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, const JSC::Wasm::Type *a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9, __n128 a10)
{
  uint64_t v12;
  uint64_t v13;
  JSC::Wasm::TypeDefinition *v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  JSC::MarkedVectorBase *v19;
  uint64_t **v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  JSC::Structure *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v36;
  BOOL v37;
  double v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  char **v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  JSC *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF *v65;
  unint64_t *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  unint64_t StackOverflowError;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  JSC::Exception *v89;
  int v90;
  unsigned int *v91;
  WTF *v92;
  uint64_t v93;
  unint64_t CachedUnrolling;
  uint64_t v95;
  const JSC::Wasm::TypeDefinition *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  JSC::VMTraps *v102;
  uint64_t v103;
  int v104;
  int v105;
  JSC::MarkedVectorBase *v106;
  JSC::Structure *v107;
  JSC::Structure *v108;
  uint64_t v109;
  uint64_t **v110;
  uint64_t v111;
  JSC::Structure *v112[2];
  int v113;
  int v114;
  uint64_t v115;
  int v116;
  WTF *v117;
  JSC *v118;
  WTF *v119;
  uint64_t v120;
  _BYTE v121[64];
  char v122;
  uint64_t v123;
  uint64_t **v124;
  uint64_t *v125[9];
  JSC::VM *v126;
  JSC::VM **v127;
  JSC::VM *v128[2];

  v12 = *((_QWORD *)this + 7);
  v126 = (JSC::VM *)v12;
  v108 = (JSC::Structure *)*((_QWORD *)a2 + 3);
  v109 = v12;
  v13 = *((_QWORD *)v108 + 5);
  v14 = (JSC::Wasm::TypeDefinition *)v13;
  if (*(_DWORD *)(v13 + 32) == 4)
  {
    v91 = *(unsigned int **)(v13 + 8);
    v92 = *(WTF **)v91;
    v14 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v91 + 8) + 8 * v91[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v14))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v13, (unint64_t)a2, v93, a4, (uint64_t)a5, a6, a7, a8);
      if ((_BYTE)a2)
      {
        v14 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v14 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v14, v92, v95, a4, a5, a6, a7, a8);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v13, v14, v96, v97, v98, v99, v100, v101);
      }
      v12 = v109;
    }
  }
  v15 = *((_DWORD *)v14 + 8);
  if (v15 == 5)
  {
    v14 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v14 + 1);
    v15 = *((_DWORD *)v14 + 8);
  }
  if (v15)
    v16 = 0;
  else
    v16 = (char *)v14 + 8;
  v17 = BYTE2(dword_1ECF4C723);
  if (BYTE2(dword_1ECF4C723))
  {
    kdebug_trace();
    v18 = 724510504;
    v12 = v109;
  }
  else
  {
    v18 = 724500480;
  }
  v122 = 0;
  v19 = (JSC::MarkedVectorBase *)&v123;
  v123 = 0x800000000;
  v20 = &v125[1];
  memset(v125, 0, sizeof(v125));
  v124 = &v125[1];
  v119 = (WTF *)v121;
  v21 = (__n128)8uLL;
  v120 = 8;
  if (v16[17])
  {
    v22 = JSC::throwTypeError((unint64_t)this, &v126, (uint64_t)"an exported wasm function cannot contain a v128 parameter or return value", 74);
LABEL_12:
    v24 = v22;
    goto LABEL_181;
  }
  v25 = v108;
  v26 = *((_QWORD *)v108 + 4);
  v107 = *(JSC::Structure **)(v26 + 16);
  if (!*((_DWORD *)v16 + 2))
  {
    v65 = (WTF *)v121;
    v72 = 1;
    goto LABEL_177;
  }
  v106 = (JSC::MarkedVectorBase *)&v123;
  v104 = v18;
  v105 = v17;
  v27 = 0;
  v102 = (JSC::VMTraps *)(v12 + 64);
  v103 = v26;
  v28 = 0x600000000;
  v110 = &v125[1];
  while (2)
  {
    if (*((int *)a2 + 8) - 1 <= v27)
      v29 = 10;
    else
      v29 = *(_QWORD *)((char *)a2 + (v28 >> 29));
    v30 = *(_QWORD *)v16 + 16 * (v27 + *((_DWORD *)v16 + 3));
    v23 = *(_QWORD *)(v30 + 8);
    v31 = *(_BYTE *)v30;
    v112[0] = (JSC::Structure *)v29;
    v32 = *((_QWORD *)this + 7);
    v128[0] = (JSC::VM *)v32;
    switch(v31)
    {
      case 0xEFu:
      case 0xF0u:
        goto LABEL_22;
      case 0xF1u:
      case 0xF2u:
      case 0xF3u:
      case 0xF4u:
      case 0xF5u:
      case 0xF6u:
      case 0xF7u:
      case 0xF8u:
      case 0xF9u:
      case 0xFAu:
        goto LABEL_198;
      case 0xFBu:
        __break(0xC471u);
        JUMPOUT(0x198E5190CLL);
      case 0xFCu:
        if (v29 >= 0xFFFE000000000000)
        {
          v21.n128_f64[0] = (double)(int)v29;
        }
        else if (v29 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          JSC::JSValue::toNumberSlowCase(v112, this, v23, a4, (uint64_t)a5, a6, a7, a8, (int8x16_t)v21);
          v20 = v110;
        }
        else
        {
          v21.n128_u64[0] = v29 - 0x2000000000000;
        }
        v29 = v21.n128_u64[0];
        goto LABEL_127;
      case 0xFDu:
        if (v29 >= 0xFFFE000000000000)
        {
          v21.n128_f64[0] = (double)(int)v29;
        }
        else if (v29 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          JSC::JSValue::toNumberSlowCase(v112, this, v23, a4, (uint64_t)a5, a6, a7, a8, (int8x16_t)v21);
          v20 = v110;
        }
        else
        {
          v21.n128_u64[0] = v29 - 0x2000000000000;
        }
        v21.n128_f32[0] = v21.n128_f64[0];
        v29 = v21.n128_u32[0];
        goto LABEL_127;
      case 0xFEu:
        JSC::JSValue::toBigInt(v112, this, v23, a4, (uint64_t)a5, a6, a7, a8, (int8x16_t)v21);
        v20 = v110;
        v42 = v41;
        if (*(_DWORD *)(v32 + 80))
        {
          v50 = *(_DWORD *)(v32 + 80);
          if ((v50 & 0x27) != 0 && (v50 & 0x20) == 0)
          {
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v32 + 64), 7u, v23, a4, (uint64_t)a5, a6, a7, a8);
            v20 = v110;
          }
          if (*(_QWORD *)(v32 + 16))
            goto LABEL_102;
        }
        if (!*(_DWORD *)(v42 + 8))
        {
LABEL_102:
          v29 = 0;
        }
        else
        {
          v43 = *(_QWORD *)(v42 + 24);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v43 = (v43 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v44 = *(_QWORD *)v43;
          if (*(_BYTE *)(v42 + 16))
            v29 = -(uint64_t)v44;
          else
            v29 = v44;
        }
        goto LABEL_127;
      case 0xFFu:
        if (v29 < 0xFFFE000000000000)
        {
          if (v29 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            JSC::JSValue::toNumberSlowCase(v112, this, v23, a4, (uint64_t)a5, a6, a7, a8, (int8x16_t)v21);
            v20 = v110;
          }
          else
          {
            v21.n128_u64[0] = v29 - 0x2000000000000;
          }
          v47 = (v21.n128_u64[0] >> 52) & 0x7FF;
          if ((v47 - 1023) <= 0x53)
          {
            v48 = v21.n128_u64[0] >> (51 - (v21.n128_u64[0] >> 52));
            if (v47 > 0x433)
              LODWORD(v48) = v21.n128_u64[0] << ((v21.n128_u64[0] >> 52) - 51);
            if (v47 >= 0x41F)
              v49 = v48;
            else
              v49 = (((1 << ((v21.n128_u64[0] >> 52) + 1)) - 1) & v48) + (1 << ((v21.n128_u64[0] >> 52) + 1));
            if (v21.n128_i64[0] >= 0)
              LODWORD(v29) = v49;
            else
              LODWORD(v29) = -v49;
          }
          else
          {
            LODWORD(v29) = 0;
          }
        }
        v29 = (int)v29;
        goto LABEL_127;
      default:
        if (v31 - 227 >= 2)
        {
LABEL_198:
          __break(0xC471u);
          JUMPOUT(0x198E518ECLL);
        }
LABEL_22:
        if (!BYTE1(dword_1ECF4C7B0))
        {
          if (v31 == 240)
            goto LABEL_104;
          if (v31 == 239)
            goto LABEL_127;
LABEL_31:
          if (BYTE2(dword_1ECF4C7B0))
            v36 = 1;
          else
            v36 = BYTE1(dword_1ECF4C7B0) == 0;
          v37 = v36 || (v31 + 29) > 1u;
          if (!v37 && v23 <= 0xFFFFFFFFFFFFFFC0)
            goto LABEL_104;
          *(_QWORD *)&v38 = v29 - 0x2000000000000;
          if (v29 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL
            && (*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            v21.n128_u64[0] = v29 - 0x2000000000000;
            a10.n128_f64[0] = (double)(int)v38;
            if (a10.n128_f64[0] == v38 && ((*(_QWORD *)&v38 & 0x8000000000000000) == 0 || (int)v38))
            {
              v39 = (*(_QWORD *)&v38 >> 52) & 0x7FFLL;
              if ((v39 - 1023) <= 0x53)
              {
                v45 = *(_QWORD *)&v38 >> (51 - (*(_QWORD *)&v38 >> 52));
                if (v39 > 0x433)
                  LODWORD(v45) = v29 << ((*(_QWORD *)&v38 >> 52) - 51);
                if (v39 >= 0x41F)
                  v46 = v45;
                else
                  v46 = (((1 << ((*(_QWORD *)&v38 >> 52) + 1)) - 1) & v45) + (1 << ((*(_QWORD *)&v38 >> 52) + 1));
                if (v38 >= 0.0)
                  v40 = v46;
                else
                  v40 = -v46;
                if ((int)(v40 + 0x40000000) < 0)
                  goto LABEL_81;
              }
              else
              {
                v40 = 0;
              }
              v29 = v40 | 0xFFFE000000000000;
            }
          }
LABEL_81:
          v112[0] = (JSC::Structure *)v29;
          if (((uint64_t (*)(unint64_t, _QWORD, unint64_t, __n128, __n128))JSC::Wasm::TypeInformation::castReference)(v29, ((v31 + 29) < 0xEu) & (0x3001u >> (v31 + 29)), v23, v21, a10))v29 = (unint64_t)v112[0];
          else
            v29 = JSC::throwTypeError((unint64_t)this, v128, (uint64_t)"Argument value did not match reference type", 44);
          goto LABEL_84;
        }
        v33 = (v31 + 29);
        if (v33 <= 1 && v23 == -17)
        {
          if (v31 == 227)
            goto LABEL_127;
          if (v29 == 2)
            v29 = JSC::throwTypeError((unint64_t)this, v128, (uint64_t)"Non-null Externref cannot be null", 34);
          v12 = v109;
          v20 = v110;
          goto LABEL_151;
        }
        if (v33 > 1 || v23 != -16)
          goto LABEL_31;
LABEL_104:
        if ((v29 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v29 + 5) >= 0x17u)
        {
          v51 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C));
          if (v51 == &JSC::WebAssemblyFunction::s_info)
          {
            v53 = 0;
            v52 = v29;
            goto LABEL_111;
          }
          if (v51 == &JSC::WebAssemblyWrapperFunction::s_info)
          {
            v52 = 0;
            v53 = v29;
            goto LABEL_111;
          }
        }
        if (v31 - 239 >= 2 && v31 != 227 || v29 != 2)
        {
          v55 = this;
          v56 = "Funcref must be an exported wasm function";
          v57 = 42;
          goto LABEL_125;
        }
        v52 = 0;
        v53 = 0;
LABEL_111:
        if (!BYTE1(dword_1ECF4C7B0) || (v31 + 29) > 1u)
          goto LABEL_126;
        if (v23 > 0xFFFFFFFFFFFFFFC0 || v29 == 2)
        {
          v12 = v109;
LABEL_84:
          v20 = v110;
          goto LABEL_126;
        }
        if (v52)
          v54 = v52;
        else
          v54 = v53;
        v12 = v109;
        v20 = v110;
        if (v23 != *(_QWORD *)(v54 + 40))
        {
          v55 = this;
          v56 = "Argument function did not match the reference type";
          v57 = 51;
LABEL_125:
          v58 = JSC::throwTypeError((unint64_t)v55, v128, (uint64_t)v56, v57);
          v20 = v110;
          v29 = v58;
        }
LABEL_126:
        if (v31 != 228)
          goto LABEL_127;
LABEL_151:
        if (*((int *)a2 + 8) - 1 <= v27)
          v69 = 10;
        else
          v69 = *(_QWORD *)((char *)a2 + (v28 >> 29));
        v70 = v123;
        if ((_DWORD)v123 == HIDWORD(v123))
        {
          if (v123 >> 30 || JSC::MarkedVectorBase::expandCapacity(v106, 2 * (int)v123))
          {
            v122 = 1;
          }
          else
          {
            v70 = v123;
            v12 = v109;
            v20 = v110;
LABEL_164:
            v124[v70] = (uint64_t *)v69;
            LODWORD(v123) = v70 + 1;
            if (v125[0] || (v69 & 0xFFFE000000000002) != 0)
              goto LABEL_127;
            if (v69)
            {
              if ((v69 & 8) != 0)
                v71 = v69 - 16;
              else
                v71 = v69 & 0xFFFFFFFFFFFFC000 | 8;
              v125[0] = (uint64_t *)(*(_QWORD *)v71 + 560);
              v128[0] = v106;
              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v125[0], (uint64_t *)v128, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)v112);
            }
          }
          v12 = v109;
          v20 = v110;
          goto LABEL_127;
        }
        if (v124 != v20 && v124)
          goto LABEL_164;
        v124[v123] = (uint64_t *)v69;
        LODWORD(v123) = v70 + 1;
LABEL_127:
        if (*(_DWORD *)(v12 + 80))
        {
          v68 = *(_DWORD *)(v12 + 80);
          if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
          {
            JSC::VMTraps::handleTraps(v102, 7u, v23, a4, (uint64_t)a5, a6, a7, a8);
            v20 = v110;
          }
          if (*(_QWORD *)(v12 + 16))
          {
            v24 = 0;
            v17 = v105;
            v19 = v106;
            goto LABEL_181;
          }
        }
        v59 = HIDWORD(v120);
        if (HIDWORD(v120) == (_DWORD)v120)
        {
          v60 = HIDWORD(v120) + ((unint64_t)HIDWORD(v120) >> 2);
          if (v60 >= 0x10)
            v61 = v60 + 1;
          else
            v61 = 16;
          if (v61 <= (unint64_t)HIDWORD(v120) + 1)
            v62 = HIDWORD(v120) + 1;
          else
            v62 = v61;
          v63 = v119;
          if (v62 < 9)
          {
            v119 = (WTF *)v121;
            LODWORD(v120) = 8;
            v64 = (WTF *)v121;
          }
          else
          {
            if (v62 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x198E51940);
            }
            v64 = (WTF *)WTF::fastMalloc((WTF *)(8 * v62));
            LODWORD(v120) = v62;
            v119 = v64;
          }
          memcpy(v64, v63, 8 * v59);
          v12 = v109;
          if (v121 != (_BYTE *)v63 && v63)
          {
            if (v119 == v63)
            {
              v119 = 0;
              LODWORD(v120) = 0;
            }
            WTF::fastFree((unint64_t)v63, a2, v67, a4, (uint64_t)a5, a6, a7, a8);
          }
          LODWORD(v59) = HIDWORD(v120);
          v65 = v119;
          v66 = (unint64_t *)((char *)v119 + 8 * HIDWORD(v120));
          v20 = v110;
        }
        else
        {
          v65 = v119;
          v66 = (unint64_t *)((char *)v119 + 8 * HIDWORD(v120));
        }
        *v66 = v29;
        HIDWORD(v120) = v59 + 1;
        ++v27;
        v28 += 0x100000000;
        if (v27 < *((unsigned int *)v16 + 2))
          continue;
        v72 = v59 + 2;
        v17 = v105;
        v19 = v106;
        v25 = v108;
        v26 = v103;
LABEL_177:
        v117 = v65;
        v118 = this;
        v116 = v72 | 1;
        v113 = v72;
        v114 = 0;
        v115 = v26;
        v112[0] = v107;
        v112[1] = v25;
        v73 = 16 * HIDWORD(v120) + 80;
        if (v73 > (unint64_t)&v102 || (unint64_t)&v102 - v73 < *(_QWORD *)(v12 + 8))
        {
          StackOverflowError = JSC::createStackOverflowError((unint64_t)this, a2);
          v89 = (JSC::Exception *)StackOverflowError;
          if ((StackOverflowError & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16
                                                                    * (*(_DWORD *)StackOverflowError & 0xFFFFFFFE)
                                                                    + 0x4C)))
          {
            v89 = (JSC::Exception *)JSC::Exception::create(v12, (JSC::VM *)StackOverflowError, 0, v83, v84, v85, v86, v87);
          }
          v22 = (uint64_t)JSC::VM::throwException((JSC::VM *)v12, this, v89, v88, v83, v84, v85, v86, v87);
          goto LABEL_12;
        }
        v74 = *((_QWORD *)v25 + 9);
        v127 = v128;
        v128[0] = 0;
        JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(v74, (uint64_t **)&v127);
        v24 = vmEntryToJavaScript((uint64_t)v128[0], (JSC::VM *)v12, (uint64_t)v112, v75, v76, v77, v78, v79);
        *(_BYTE *)(v12 + 93120) = 1;
        if (!*(_DWORD *)(v12 + 80))
          goto LABEL_180;
        v90 = *(_DWORD *)(v12 + 80);
        if ((v90 & 0x27) != 0 && (v90 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v23, a4, (uint64_t)a5, a6, a7, a8);
        if (*(_QWORD *)(v12 + 16))
          v24 = 0;
        else
LABEL_180:
          v111 = v26;
LABEL_181:
        v80 = v119;
        if (v121 != (_BYTE *)v119 && v119)
        {
          v119 = 0;
          LODWORD(v120) = 0;
          WTF::fastFree((unint64_t)v80, a2, v23, a4, (uint64_t)a5, a6, a7, a8);
        }
        JSC::MarkedVectorBase::~MarkedVectorBase(v19, a2, v23, a4, (uint64_t)a5, a6, a7, a8);
        if (v17)
          kdebug_trace();
        return v24;
    }
  }
}

void JSC::WebAssemblyFunctionBase::visitChildren(JSC::WebAssemblyFunctionBase *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;

  JSC::JSCallee::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 3);
  if ((v16 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)((v16 & 0xFFFFFFFFFFFFFFFELL) - 79) & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
      {
LABEL_6:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_7;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16 & 0xFFFFFFFFFFFFFFFELL, 0, v11, v12, v13, v14, v15);
  }
LABEL_7:
  v18 = *((_QWORD *)this + 4);
  if (!v18)
    return;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) == 0)
      goto LABEL_17;
  }
  else
  {
    v19 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != v19)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), v19, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) == 0)
      goto LABEL_17;
  }
  if (*((_QWORD *)a2 + 21))
LABEL_17:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v18, 0, v11, v12, v13, v14, v15);
}

uint64_t JSC::WebAssemblyFunctionBase::visitChildren(JSC::WebAssemblyFunctionBase *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD *v11;
  char v12;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v10[0] = a2;
    v10[1] = this;
    v12 = 0;
    v11 = v7;
    *((_QWORD *)a2 + 11) = v10;
    JSC::JSCallee::visitChildren(this, a2, a3);
    (*(void (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFELL);
    *(_QWORD *)(v10[0] + 88) = v11;
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 4));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t JSC::WebAssemblyGCObjectBase::put(uint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a2 + 56);
  JSC::throwTypeError(a2, &v3, (uint64_t)"Cannot set property for WebAssembly GC object", 46);
  return 0;
}

uint64_t JSC::WebAssemblyGCObjectBase::putByIndex(uint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a2 + 56);
  JSC::throwTypeError(a2, &v3, (uint64_t)"Cannot set property for WebAssembly GC object", 46);
  return 0;
}

uint64_t JSC::WebAssemblyGCObjectBase::deleteProperty(uint64_t a1, unint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a2 + 56);
  JSC::throwTypeError(a2, &v3, (uint64_t)"Cannot delete property for WebAssembly GC object", 49);
  return 0;
}

uint64_t JSC::WebAssemblyGCObjectBase::deletePropertyByIndex(JSC::WebAssemblyGCObjectBase *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  JSC::throwTypeError((unint64_t)a2, &v4, (uint64_t)"Cannot delete property for WebAssembly GC object", 49);
  return 0;
}

uint64_t JSC::WebAssemblyGCObjectBase::getOwnPropertySlot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a4 = 10;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = a1;
  *(_BYTE *)(a4 + 49) = 1;
  return 0;
}

uint64_t JSC::WebAssemblyGCObjectBase::getOwnPropertySlotByIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a4 = 10;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = a1;
  *(_BYTE *)(a4 + 49) = 1;
  return 0;
}

uint64_t JSC::WebAssemblyGCObjectBase::defineOwnProperty(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  JSC::VM *v6;

  v6 = *(JSC::VM **)(a2 + 56);
  if (a5)
    JSC::throwTypeError(a2, &v6, (uint64_t)"Cannot define property for WebAssembly GC object", 49);
  return 0;
}

uint64_t JSC::WebAssemblyGCObjectBase::preventExtensions(JSC::WebAssemblyGCObjectBase *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)a2 + 7);
  JSC::throwTypeError((unint64_t)a2, &v4, (uint64_t)"Cannot run preventExtensions operation on WebAssembly GC object", 64);
  return 0;
}

uint64_t JSC::WebAssemblyGCObjectBase::isExtensible(JSC::WebAssemblyGCObjectBase *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3)
{
  return 0;
}

uint64_t JSC::WebAssemblyGCObjectBase::setPrototype(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  JSC::VM *v5;

  v5 = *(JSC::VM **)(a2 + 56);
  if (a4)
    JSC::throwTypeError(a2, &v5, (uint64_t)"Cannot set prototype of WebAssembly GC object", 46);
  return 0;
}

uint64_t JSC::WebAssemblyGCObjectBase::getPrototype(JSC::WebAssemblyGCObjectBase *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3)
{
  return 2;
}

void JSC::WebAssemblyGCObjectBase::visitChildren(JSC::WebAssemblyGCObjectBase *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v3;
  _QWORD v4[2];
  uint64_t v5;
  char v6;

  v4[0] = a2;
  v4[1] = this;
  v6 = 0;
  v3 = *((_QWORD *)a2 + 11);
  v5 = v3;
  if (v3 && *(_BYTE *)(v3 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v4;
    JSC::JSObject::visitChildren(this, a2, a3);
    *(_QWORD *)(v4[0] + 88) = v5;
  }
}

unint64_t JSC::WebAssemblyGlobalConstructor::create(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t SlowCase;
  char *v41;
  WTF::StringImpl *v42;

  v9 = (unint64_t)a2;
  v11 = (_QWORD *)((char *)this + 38552);
  v12 = *((_QWORD *)this + 4819);
  if (v12 < *((_QWORD *)this + 4820))
    goto LABEL_2;
  v12 = *((_QWORD *)this + 4821);
  if ((v12 & 1) == 0)
  {
    v35 = *(_QWORD *)(v12 + 8) ^ *((_QWORD *)this + 4822);
    *((_QWORD *)this + 4820) = v12 + HIDWORD(v35);
    *((_QWORD *)this + 4821) = v12 + (int)v35;
LABEL_2:
    *v11 = v12 + 48;
    goto LABEL_3;
  }
  v41 = (char *)this + 38552;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a2, a4, a5, a6, a7, a8);
  v11 = v41;
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v37, v38, v39);
  v9 = (unint64_t)a2;
  v12 = SlowCase;
LABEL_3:
  *(_DWORD *)v12 = 0;
  JSC::InternalFunction::InternalFunction(v12, (uint64_t)this, v9, (uint64_t)JSC::callJSWebAssemblyGlobal, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructJSWebAssemblyGlobal);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x600000002;
  *(_QWORD *)(v13 + 8) = "Global";
  *(_DWORD *)(v13 + 16) = 4;
  v42 = (WTF::StringImpl *)v13;
  JSC::InternalFunction::finishCreation(v12, this, (const WTF::String *)1, (JSC::VM *)&v42, 1, v14, v15, v16);
  v25 = v42;
  v42 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v12, (uint64_t)this, *(_QWORD *)(v11[425] + 2160), a3, 14, v21, v22, v23, v24);
  return v12;
}

uint64_t JSC::WebAssemblyGlobalConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 67099;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::WebAssemblyGlobalConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::Exception *JSC::callJSWebAssemblyGlobal(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"WebAssembly.Global", 19);
}

uint64_t JSC::constructJSWebAssemblyGlobal(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  JSC::JSGlobalObject *i;
  char **v14;
  uint64_t v15;
  unint64_t v16;
  JSC::JSObject *SubclassStructure;
  unint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  const char *v35;
  JSC *v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  int *v42;
  int v43;
  int v44;
  JSC::Structure *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::AtomStringImpl *v51;
  const WTF::String *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int8x16_t v60;
  WTF *v61;
  int v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  char v72;
  WTF *v73;
  unint64_t v74;
  uint64_t v75;
  double v76;
  unint64_t v77;
  unsigned __int8 v78;
  BOOL v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unsigned __int8 v90;
  BOOL v91;
  uint64_t v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  char **v128;
  unsigned int v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  int v134;
  uint64_t (*v135)(JSC::Structure **);
  JSC::Structure **v136;
  unint64_t v137;
  int v138;
  int v139;
  int v140;
  uint64_t (*v141)(JSC::Structure **);
  JSC::Structure **v142;
  int v143;
  int v144;
  unint64_t v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  unint64_t v152;
  double v153;
  double v154;
  WTF *v155;
  JSC::VM *v156;
  JSC::Structure *v157;
  uint64_t v158;
  char *v159;

  v11 = *(_QWORD *)(this + 56);
  v156 = (JSC::VM *)v11;
  v12 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v12 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v18 = *(_QWORD *)(this + 1328);
    if ((v18 & 1) == 0)
      goto LABEL_15;
    v141 = *(uint64_t (**)(JSC::Structure **))(v18 & 0xFFFFFFFFFFFFFFFCLL);
    v142 = (JSC::Structure **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v142 = (JSC::Structure **)(this - 16);
    v157 = *v142;
    v158 = this;
    v159 = (char *)(this + 1328);
    SubclassStructure = (JSC::JSObject *)v141(&v157);
  }
  else
  {
    v157 = (JSC::Structure *)v11;
    for (i = v12; ; i = (JSC::JSGlobalObject *)*((_QWORD *)i + 2))
    {
      while (1)
      {
        v14 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v14 != &JSC::JSBoundFunction::s_info && v14 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v15 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v157, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v15 = 0;
LABEL_10:
    if (*(_DWORD *)(v11 + 80))
    {
      v134 = *(_DWORD *)(v11 + 80);
      if ((v134 & 0x27) != 0 && (v134 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v11 + 16))
      {
        v18 = 0;
        goto LABEL_15;
      }
    }
    v16 = *(_QWORD *)(v15 + 1328);
    if ((v16 & 1) != 0)
    {
      v135 = *(uint64_t (**)(JSC::Structure **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
      v136 = (JSC::Structure **)(v15 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v15 & 8) != 0)
        v136 = (JSC::Structure **)(v15 - 16);
      v157 = *v136;
      v158 = v15;
      v159 = (char *)(v15 + 1328);
      v16 = v135(&v157);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v12, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
  }
  v18 = (unint64_t)SubclassStructure;
LABEL_15:
  if (*(_DWORD *)(v11 + 80))
  {
    v132 = *(_DWORD *)(v11 + 80);
    if ((v132 & 0x27) != 0 && (v132 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1
    || (v19 = *((_QWORD *)a2 + 6), (v19 & 0xFFFE000000000002) != 0)
    || *(unsigned __int8 *)(v19 + 5) <= 0x16u)
  {
    v35 = "WebAssembly.Global expects its first argument to be an object";
    v36 = (JSC *)this;
    v37 = 62;
    return JSC::throwTypeError((unint64_t)v36, &v156, (uint64_t)v35, v37);
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"mutable", 7uLL, (uint64_t)a4, a5, a6, a7, a8, &v157);
  v20 = v157;
  v26 = JSC::JSObject::get((unsigned int *)v19, this, (unint64_t)v157, v21, v22, v23, v24, v25);
  if (*(_DWORD *)(v11 + 80))
  {
    v139 = *(_DWORD *)(v11 + 80);
    if ((v139 & 0x27) != 0 && (v139 & 0x20) == 0)
    {
      v152 = v26;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v28, v29, v30, v31, v32, v33);
      v26 = v152;
    }
    if (*(_QWORD *)(v11 + 16))
    {
LABEL_179:
      v34 = 0;
      v44 = 0;
      if (!v20)
        goto LABEL_43;
      goto LABEL_41;
    }
  }
  if (v26 >= 0xFFFE000000000000)
  {
    v40 = (_DWORD)v26 == 0;
    goto LABEL_36;
  }
  if (v26 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v34 = COERCE_DOUBLE(v26 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v26 - 0x2000000000000) < 0.0;
    goto LABEL_39;
  }
  if ((v26 & 0xFFFE000000000002) == 0)
  {
    v39 = *(unsigned __int8 *)(v26 + 5);
    if (v39 == 2)
    {
      v41 = *(_QWORD *)(v26 + 8);
      if ((v41 & 1) != 0)
        v42 = (int *)(v26 + 16);
      else
        v42 = (int *)(v41 + 4);
      v43 = *v42;
    }
    else
    {
      if (v39 != 3)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v34 = 1;
          goto LABEL_39;
        }
        v40 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28) == this;
LABEL_36:
        v34 = !v40;
        goto LABEL_39;
      }
      v43 = *(_DWORD *)(v26 + 8);
    }
    v40 = v43 == 0;
    goto LABEL_36;
  }
  v34 = v26 == 7;
LABEL_39:
  if (*(_DWORD *)(v11 + 80))
  {
    v140 = *(_DWORD *)(v11 + 80);
    if ((v140 & 0x27) != 0 && (v140 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v28, v29, v30, v31, v32, v33);
    if (*(_QWORD *)(v11 + 16))
      goto LABEL_179;
  }
  v44 = 1;
  if (!v20)
    goto LABEL_43;
LABEL_41:
  if (*(_DWORD *)v20 == 2)
  {
    WTF::StringImpl::~StringImpl(v20, v27, v28, v29, v30, v31, v32, v33);
    WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
  }
  else
  {
    *(_DWORD *)v20 -= 2;
  }
LABEL_43:
  if (!v44)
    return 0;
  WTF::AtomStringImpl::addLiteral((uint64_t)"value", 5uLL, v29, v30, v31, v32, v33, &v157);
  v45 = v157;
  v59 = JSC::JSObject::get((unsigned int *)v19, this, (unint64_t)v157, v46, v47, v48, v49, v50);
  v157 = (JSC::Structure *)v59;
  if (*(_DWORD *)(v11 + 80))
  {
    v143 = *(_DWORD *)(v11 + 80);
    if ((v143 & 0x27) != 0 && (v143 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v52, v53, v54, v55, v56, v57);
    if (*(_QWORD *)(v11 + 16))
    {
      v38 = 0;
      v62 = 1;
      goto LABEL_76;
    }
    v59 = (unint64_t)v157;
  }
  if ((v59 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v59 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v157, (JSC::JSGlobalObject *)this, v52, v53, v54, v55, v56, v57, (int **)&v155);
    goto LABEL_51;
  }
  v61 = *(WTF **)(v59 + 8);
  if ((v61 & 1) != 0)
  {
    v61 = (WTF *)*JSC::JSRopeString::resolveRope(v59, (JSC::JSGlobalObject *)this, (uint64_t)v52, v53, v60, v54, v55, v56, v57);
    if (!v61)
      goto LABEL_50;
    goto LABEL_49;
  }
  if (v61)
LABEL_49:
    *(_DWORD *)v61 += 2;
LABEL_50:
  v155 = v61;
LABEL_51:
  if (*(_DWORD *)(v11 + 80))
  {
    v144 = *(_DWORD *)(v11 + 80);
    if ((v144 & 0x27) != 0 && (v144 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v52, v53, v54, v55, v56, v57);
    if (*(_QWORD *)(v11 + 16))
    {
      v38 = 0;
      goto LABEL_149;
    }
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v155, (unint64_t)"i32", 3))
  {
    v58 = 0;
    v62 = 0;
    v38 = 0;
    v8 = -1;
    goto LABEL_73;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v155, (unint64_t)"i64", 3))
  {
    v58 = 0;
    v62 = 0;
    v38 = 0;
    v8 = -2;
    goto LABEL_73;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v155, (unint64_t)"f32", 3))
  {
    v58 = 0;
    v62 = 0;
    v38 = 0;
    v8 = -3;
    goto LABEL_73;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v155, (unint64_t)"f64", 3))
  {
    v58 = 0;
    v62 = 0;
    v38 = 0;
    v8 = -4;
    goto LABEL_73;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v155, (unint64_t)"anyfunc", 7)
    || WTF::equalInternal<unsigned char>((uint64_t)v155, (unint64_t)"funcref", 7))
  {
    v62 = 0;
    v38 = 0;
    v71 = BYTE1(dword_1ECF4C7B0) == 0;
    if (BYTE1(dword_1ECF4C7B0))
      v58 = -16;
    else
      v58 = 0;
    v72 = -16;
  }
  else
  {
    if (!WTF::equalInternal<unsigned char>((uint64_t)v155, (unint64_t)"externref", 9))
    {
      v38 = JSC::throwTypeError(this, &v156, (uint64_t)"WebAssembly.Global expects its 'value' field to be the string 'i32', 'i64', 'f32', 'f64', 'anyfunc', 'funcref', or 'externref'", 127);
LABEL_149:
      v62 = 1;
      goto LABEL_73;
    }
    v62 = 0;
    v38 = 0;
    v71 = BYTE1(dword_1ECF4C7B0) == 0;
    if (BYTE1(dword_1ECF4C7B0))
      v58 = -17;
    else
      v58 = 0;
    v72 = -17;
  }
  if (v71)
    v8 = v72;
  else
    v8 = -29;
LABEL_73:
  v73 = v155;
  v155 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      v89 = v18;
      v90 = v8;
      v91 = v34;
      v92 = v58;
      WTF::StringImpl::~StringImpl(v73, v51, (uint64_t)v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
      v58 = v92;
      v34 = v91;
      v8 = v90;
      v18 = v89;
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
LABEL_76:
  if (!v45)
    goto LABEL_79;
  if (*(_DWORD *)v45 != 2)
  {
    *(_DWORD *)v45 -= 2;
LABEL_79:
    if (v62)
      return v38;
    goto LABEL_80;
  }
  v77 = v18;
  v78 = v8;
  v79 = v34;
  v80 = v58;
  WTF::StringImpl::~StringImpl(v45, v51, (uint64_t)v52, v53, v54, v55, v56, v57);
  WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
  v58 = v80;
  v34 = v79;
  v8 = v78;
  v18 = v77;
  if (v62)
    return v38;
LABEL_80:
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v74 = 10;
  else
    v74 = *((_QWORD *)a2 + 7);
  v157 = (JSC::Structure *)v74;
  v75 = v58;
  switch(v8)
  {
    case 0xFBu:
      __break(0xC471u);
      JUMPOUT(0x198E52C0CLL);
    case 0xFCu:
      if (v74 == 10)
        goto LABEL_104;
      if (v74 >= 0xFFFE000000000000)
      {
        v76 = (double)(int)v74;
      }
      else if (v74 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase(&v157, (JSC::JSGlobalObject *)this, (uint64_t)v52, v53, v54, v55, v56, v57, v60);
      }
      else
      {
        *(_QWORD *)&v76 = v74 - 0x2000000000000;
      }
      if (*(_DWORD *)(v11 + 80))
      {
        v153 = v76;
        v150 = *(_DWORD *)(v11 + 80);
        if ((v150 & 0x27) != 0 && (v150 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v52, v53, v54, v55, v56, v57);
        v76 = v153;
        if (*(_QWORD *)(v11 + 16))
          return 0;
      }
      v74 = *(_QWORD *)&v76;
      goto LABEL_105;
    case 0xFDu:
      if (v74 == 10)
        goto LABEL_104;
      if (v74 >= 0xFFFE000000000000)
      {
        v101 = (double)(int)v74;
      }
      else if (v74 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase(&v157, (JSC::JSGlobalObject *)this, (uint64_t)v52, v53, v54, v55, v56, v57, v60);
      }
      else
      {
        *(_QWORD *)&v101 = v74 - 0x2000000000000;
      }
      if (*(_DWORD *)(v11 + 80))
      {
        v154 = v101;
        v151 = *(_DWORD *)(v11 + 80);
        if ((v151 & 0x27) != 0 && (v151 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v52, v53, v54, v55, v56, v57);
        v101 = v154;
        if (*(_QWORD *)(v11 + 16))
          return 0;
      }
      *(float *)&v129 = v101;
      v74 = v129;
      goto LABEL_105;
    case 0xFEu:
      if (v74 == 10)
        goto LABEL_104;
      v102 = *(_QWORD *)(this + 56);
      JSC::JSValue::toBigInt(&v157, (JSC::JSGlobalObject *)this, (uint64_t)v52, v53, v54, v55, v56, v57, v60);
      v110 = v109;
      if (*(_DWORD *)(v102 + 80))
      {
        v147 = *(_DWORD *)(v102 + 80);
        if ((v147 & 0x27) != 0 && (v147 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v102 + 64), 7u, v103, v104, v105, v106, v107, v108);
        if (*(_QWORD *)(v102 + 16))
          goto LABEL_196;
      }
      if (!*(_DWORD *)(v110 + 8))
      {
LABEL_196:
        v74 = 0;
      }
      else
      {
        v111 = *(_QWORD *)(v110 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v111 = (v111 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v112 = *(_QWORD *)v111;
        if (*(_BYTE *)(v110 + 16))
          v74 = -(uint64_t)v112;
        else
          v74 = v112;
      }
      if (!*(_DWORD *)(v11 + 80))
        goto LABEL_105;
      v148 = *(_DWORD *)(v11 + 80);
      if ((v148 & 0x27) != 0 && (v148 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v103, v104, v105, v106, v107, v108);
      if (!*(_QWORD *)(v11 + 16))
        goto LABEL_105;
      return 0;
    case 0xFFu:
      if (v74 == 10)
      {
LABEL_104:
        v74 = 0;
        goto LABEL_105;
      }
      if (v74 < 0xFFFE000000000000)
      {
        v130 = v74 - 0x2000000000000;
        if (v74 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase(&v157, (JSC::JSGlobalObject *)this, (uint64_t)v52, v53, v54, v55, v56, v57, v60);
          v130 = v145;
        }
        v131 = (v130 >> 52) & 0x7FF;
        if ((v131 - 1023) <= 0x53)
        {
          v137 = v130 >> (51 - (v130 >> 52));
          if (v131 > 0x433)
            LODWORD(v137) = v130 << ((v130 >> 52) - 51);
          if (v131 >= 0x41F)
            v138 = v137;
          else
            v138 = (((1 << ((v130 >> 52) + 1)) - 1) & v137) + (1 << ((v130 >> 52) + 1));
          if ((v130 & 0x8000000000000000) == 0)
            LODWORD(v74) = v138;
          else
            LODWORD(v74) = -v138;
        }
        else
        {
          LODWORD(v74) = 0;
        }
      }
      if (*(_DWORD *)(v11 + 80))
      {
        v149 = *(_DWORD *)(v11 + 80);
        if ((v149 & 0x27) != 0 && (v149 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v52, v53, v54, v55, v56, v57);
        if (*(_QWORD *)(v11 + 16))
          return 0;
      }
      v74 = v74;
      goto LABEL_105;
    default:
      if (!BYTE1(dword_1ECF4C7B0))
      {
        if (v8 == 239)
          goto LABEL_120;
        if (v8 == 240)
        {
LABEL_113:
          if (v74 == 10)
          {
            v75 = v58;
            v74 = 2;
LABEL_122:
            v157 = (JSC::Structure *)v74;
            goto LABEL_105;
          }
          if ((v74 & 0xFFFE000000000002) == 0
            && *(unsigned __int8 *)(v74 + 5) >= 0x17u
            && ((v128 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v74 & 0xFFFFFFFE) + 0x4C)),
                 v128 == &JSC::WebAssemblyFunction::s_info)
             || v128 == &JSC::WebAssemblyWrapperFunction::s_info)
            || v74 == 2)
          {
            v75 = v58;
            goto LABEL_105;
          }
          v35 = "Funcref must be an exported wasm function";
          v36 = (JSC *)this;
          v37 = 42;
          return JSC::throwTypeError((unint64_t)v36, &v156, (uint64_t)v35, v37);
        }
LABEL_143:
        __break(0xC471u);
        JUMPOUT(0x198E52828);
      }
      if (v58 == -16 && (v8 + 29) < 2u)
        goto LABEL_113;
      if (v58 != -17 || (v8 + 29) >= 2u)
        goto LABEL_143;
LABEL_120:
      v75 = v58;
      if (v74 == 10)
      {
        v74 = 10;
        goto LABEL_122;
      }
LABEL_105:
      v113 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v113 = 1;
      *(_QWORD *)(v113 + 8) = v8;
      *(_QWORD *)(v113 + 16) = v75;
      *(_BYTE *)(v113 + 24) = v34;
      *(_QWORD *)(v113 + 40) = v74;
      *(_QWORD *)(v113 + 48) = 0;
      *(_QWORD *)(v113 + 32) = 0;
      v155 = (WTF *)v113;
      v38 = JSC::JSWebAssemblyGlobal::tryCreate(this, (JSC *)v11, v18, (uint64_t *)&v155, v114, v115, v116, v117);
      if (*(_DWORD *)(v11 + 80))
      {
        v146 = *(_DWORD *)(v11 + 80);
        if ((v146 & 0x27) != 0 && (v146 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v119, v120, v121, v122, v123, v124);
        if (*(_QWORD *)(v11 + 16))
          v38 = 0;
      }
      v125 = (unsigned int *)v155;
      v155 = 0;
      if (v125)
      {
        do
        {
          v126 = __ldaxr(v125);
          v127 = v126 - 1;
        }
        while (__stlxr(v127, v125));
        if (!v127)
        {
          atomic_store(1u, v125);
          WTF::fastFree((unint64_t)v125, v118, v119, v120, v121, v122, v123, v124);
        }
      }
      return v38;
  }
}

unint64_t JSC::WebAssemblyGlobalPrototype::create(JSC::WebAssemblyGlobalPrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  int v11;
  unint64_t v13;
  char *v14;
  char *v15;
  JSC::VM *v16;
  JSC::JSGlobalObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t SlowCase;

  v9 = this;
  v10 = *((_QWORD *)this + 4863);
  if (v10 >= *((_QWORD *)this + 4864))
  {
    v10 = *((_QWORD *)this + 4865);
    if ((v10 & 1) != 0)
    {
      v14 = (char *)this + 38880;
      v15 = (char *)this + 192;
      v16 = a2;
      v18 = (JSC::JSGlobalObject *)a3;
      JSC::sanitizeStackForVM(this, this, a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v14, (uint64_t)v15, 16, 0, 0, v19, v20, v21);
      a3 = (uint64_t)v18;
      v9 = this;
      a2 = v16;
      v10 = SlowCase;
      goto LABEL_3;
    }
    v13 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v13);
    *((_QWORD *)this + 4865) = v10 + (int)v13;
  }
  *((_QWORD *)this + 4863) = v10 + 16;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  JSC::WebAssemblyGlobalPrototype::finishCreation((JSC::WebAssemblyGlobalPrototype *)v10, v9, a2);
  return v10;
}

void JSC::WebAssemblyGlobalPrototype::finishCreation(JSC::WebAssemblyGlobalPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::JSGlobalObject *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  JSC::JSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::JSObject *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x900000002;
  *(_QWORD *)(v6 + 8) = "get value";
  *(_DWORD *)(v6 + 16) = 4;
  v97 = (WTF::StringImpl *)v6;
  v14 = (JSC::JSGlobalObject *)JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v97, (uint64_t)JSC::webAssemblyGlobalProtoGetterFuncValue, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v15 = v97;
  v97 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, v7, v8, v9, v10, v11, v12, v13);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  v16 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v16 = 0x900000002;
  *(_QWORD *)(v16 + 8) = "set value";
  *(_DWORD *)(v16 + 16) = 4;
  v97 = (WTF::StringImpl *)v16;
  v24 = (JSC::JSObject *)JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v97, (uint64_t)JSC::webAssemblyGlobalProtoSetterFuncValue, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v25 = v97;
  v97 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, (uint64_t)v20, v21, v22, v23);
      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = JSC::GetterSetter::create(a2, a3, v14, v24, v20, v21, v22, v23);
  WTF::AtomStringImpl::addLiteral((uint64_t)"value", 5uLL, v27, v28, v29, v30, v31, &v97);
  v32 = v97;
  JSC::JSObject::putDirectNonIndexAccessorWithoutTransition((unsigned int *)this, (uint64_t)a2, (unint64_t)v97, v26, (const JSC::PropertyTable *)0x10, v33, v34, v35, v36);
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v37, v38, v39, v40, v41, v42, v43);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  v44 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v45 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v45 = 0x1200000002;
  *(_QWORD *)(v45 + 8) = "WebAssembly.Global";
  *(_DWORD *)(v45 + 16) = 4;
  v97 = (WTF::StringImpl *)v45;
  v52 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v97, v46, v47, v48, v49, v50, v51);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v44, v52, 6, v53, v54, v55, v56);
  v64 = v97;
  v97 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
    {
      WTF::StringImpl::~StringImpl(v64, v57, v58, v59, v60, v61, v62, v63);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v64 -= 2;
    }
  }
}

uint64_t JSC::WebAssemblyGlobalPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::WebAssemblyGlobalPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::webAssemblyGlobalProtoGetterFuncValue(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  const WTF::String *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  JSC::Exception *v21;
  WTF::AtomStringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;

  v9 = *((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::JSWebAssemblyGlobal::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v12 = 0x3D00000002;
    *(_QWORD *)(v12 + 8) = "expected |this| value to be an instance of WebAssembly.Global";
    *(_DWORD *)(v12 + 16) = 4;
    v34 = (WTF::StringImpl *)v12;
    v14 = JSC::createTypeError((unint64_t)this, &v34, v13);
    v21 = (JSC::Exception *)v14;
    if ((v14 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)))
    {
      v21 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v14, 0, v15, v16, v17, v18, v19);
    }
    JSC::VM::throwException((JSC::VM *)v9, this, v21, v20, v15, v16, v17, v18, v19);
    v23 = v34;
    v34 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, v22, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      else
      {
        *(_DWORD *)v23 -= 2;
      }
    }
    v10 = 0;
  }
  if (!*(_DWORD *)(v9 + 80))
    return JSC::Wasm::Global::get(*(JSC::Wasm::Global **)(v10 + 16), (unint64_t)this, (uint64_t)a3, a4, a5, a6, a7, a8);
  v24 = *(_DWORD *)(v9 + 80);
  if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
  {
    v33 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v10 = v33;
  }
  if (*(_QWORD *)(v9 + 16))
    return 0;
  else
    return JSC::Wasm::Global::get(*(JSC::Wasm::Global **)(v10 + 16), (unint64_t)this, (uint64_t)a3, a4, a5, a6, a7, a8);
}

JSC::Exception *JSC::webAssemblyGlobalProtoSetterFuncValue(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, __n128 a10)
{
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::Exception *v22;
  uint64_t v23;
  const WTF::String *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  JSC::Exception *v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const WTF::String *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  JSC::Exception *v59;
  WTF::AtomStringImpl *v60;
  WTF::StringImpl *v61;
  unint64_t NotEnoughArgumentsError;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  JSC::Exception *v69;
  int v70;
  int v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;

  v11 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    NotEnoughArgumentsError = JSC::createNotEnoughArgumentsError((uint64_t)this, 0);
    v69 = (JSC::Exception *)NotEnoughArgumentsError;
    if ((NotEnoughArgumentsError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)NotEnoughArgumentsError & 0xFFFFFFFE)
                                                              + 0x4C)))
    {
      v69 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)NotEnoughArgumentsError, 0, v63, v64, v65, v66, v67);
    }
    return JSC::VM::throwException((JSC::VM *)v11, this, v69, v68, v63, v64, v65, v66, v67);
  }
  else
  {
    v13 = *((_QWORD *)a2 + 5);
    if ((v13 & 0xFFFE000000000002) != 0
      || &JSC::JSWebAssemblyGlobal::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C)))
    {
      v50 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v50 = 0x3D00000002;
      *(_QWORD *)(v50 + 8) = "expected |this| value to be an instance of WebAssembly.Global";
      *(_DWORD *)(v50 + 16) = 4;
      v81 = (WTF::StringImpl *)v50;
      v52 = JSC::createTypeError((unint64_t)this, &v81, v51);
      v59 = (JSC::Exception *)v52;
      if ((v52 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v52 & 0xFFFFFFFE) + 0x4C)))
      {
        v59 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v52, 0, v53, v54, v55, v56, v57);
      }
      JSC::VM::throwException((JSC::VM *)v11, this, v59, v58, v53, v54, v55, v56, v57);
      v61 = v81;
      v81 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
        {
          WTF::StringImpl::~StringImpl(v61, v60, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v61 -= 2;
        }
      }
      v13 = 0;
    }
    if (*(_DWORD *)(v11 + 80))
    {
      v70 = *(_DWORD *)(v11 + 80);
      if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
      {
        v80 = v13;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        v13 = v80;
      }
      if (*(_QWORD *)(v11 + 16))
        return 0;
    }
    v14 = *(_QWORD *)(v13 + 16);
    if (*(_BYTE *)(v14 + 24))
    {
      if (*((_DWORD *)a2 + 8) == 1)
        v15 = 10;
      else
        v15 = *((_QWORD *)a2 + 6);
      JSC::Wasm::Global::set(v14, this, (JSC::Structure *)v15, a4, a5, a6, a7, a8, a9, a10);
      if (*(_DWORD *)(v11 + 80))
      {
        v71 = *(_DWORD *)(v11 + 80);
        if ((v71 & 0x27) != 0 && (v71 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v16, v17, v18, v19, v20, v21);
        if (*(_QWORD *)(v11 + 16))
          return 0;
      }
      return (JSC::Exception *)10;
    }
    else
    {
      v23 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v23 = 0x4C00000002;
      *(_QWORD *)(v23 + 8) = "WebAssembly.Global.prototype.value attempts to modify immutable global value";
      *(_DWORD *)(v23 + 16) = 4;
      v81 = (WTF::StringImpl *)v23;
      v25 = JSC::createTypeError((unint64_t)this, &v81, v24);
      v32 = (JSC::Exception *)v25;
      if ((v25 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C)))
      {
        v32 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v25, 0, v26, v27, v28, v29, v30);
      }
      v22 = JSC::VM::throwException((JSC::VM *)v11, this, v32, v31, v26, v27, v28, v29, v30);
      v40 = v81;
      v81 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
        {
          WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
        }
        else
        {
          *(_DWORD *)v40 -= 2;
        }
      }
    }
  }
  return v22;
}

unint64_t JSC::WebAssemblyInstanceConstructor::create(JSC *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  JSC::JSObject *v12;

  v11 = JSC::allocateCell<JSC::IntlNumberFormatConstructor>(a1, (JSC::VM *)0x30, a3, a4, a5, a6, a7, a8);
  v12 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v11, (uint64_t)a1, a2, (uint64_t)JSC::callJSWebAssemblyInstance, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructJSWebAssemblyInstance);
  JSC::WebAssemblyInstanceConstructor::finishCreation(v12, a1, a3);
  return v11;
}

void JSC::WebAssemblyInstanceConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x800000002;
  *(_QWORD *)(v6 + 8) = "Instance";
  *(_DWORD *)(v6 + 16) = 4;
  v27 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)1, (JSC::VM *)&v27, 1, v7, v8, v9);
  v18 = v27;
  v27 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), a3, 14, v14, v15, v16, v17);
}

JSC::Exception *JSC::callJSWebAssemblyInstance(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"WebAssembly.Instance", 21);
}

unint64_t *JSC::constructJSWebAssemblyInstance(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  JSC::VM *v18;
  unint64_t v19;
  char *v20;
  JSC::Heap **v21;
  uint64_t (*v22)(unint64_t *);
  unint64_t *v23;
  JSC::JSGlobalObject *v24;
  JSC::JSGlobalObject *i;
  char **v26;
  unint64_t v27;
  unint64_t v28;
  JSC::JSObject *SubclassStructure;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  JSC::Exception *v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t (*v108)(unint64_t *);
  unint64_t *v109;
  uint64_t (*v110)(unint64_t *);
  unint64_t *v111;
  int v112;
  unsigned int *v113;
  WTF::StringImpl *v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;

  v10 = *(_QWORD *)(this + 56);
  if (*((_DWORD *)a2 + 8) == 1
    || (v11 = *((_QWORD *)a2 + 6), (v11 & 0xFFFE000000000002) != 0)
    || *(_BYTE *)(v11 + 5) != 73)
  {
    v17 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v17 = 0x4300000002;
    *(_QWORD *)(v17 + 8) = "first argument to WebAssembly.Instance must be a WebAssembly.Module";
    *(_DWORD *)(v17 + 16) = 4;
    v114 = (WTF::StringImpl *)v17;
    if (*((_DWORD *)a2 + 8) == 1
      || (v18 = (JSC::VM *)*((_QWORD *)a2 + 6), v115 = (unint64_t)v18, v18 == (JSC::VM *)10))
    {
      v16 = 2;
LABEL_23:
      v20 = (char *)(this + 176);
      v19 = *(_QWORD *)(this + 176);
      v21 = *(JSC::Heap ***)(this + 56);
      if ((v19 & 1) == 0)
        goto LABEL_77;
      v22 = *(uint64_t (**)(unint64_t *))(v19 & 0xFFFFFFFFFFFFFFFCLL);
      v23 = (unint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v23 = (unint64_t *)(this - 16);
      goto LABEL_105;
    }
    if (v18 == (JSC::VM *)2)
    {
      v16 = 4;
      goto LABEL_23;
    }
    if (!v18)
    {
LABEL_126:
      v16 = 0;
      goto LABEL_23;
    }
    if (JSC::JSValue::isAnyInt((JSC::JSValue *)&v115))
    {
      v16 = 16;
      goto LABEL_23;
    }
    if (v115 >> 49)
    {
      v16 = 32;
      goto LABEL_23;
    }
    if ((v115 & 0xFFFE000000000002) != 0)
    {
      if ((v115 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
LABEL_117:
        if (JSC::JSValue::isCallable((JSC::JSValue *)&v115))
        {
          v16 = 1;
          goto LABEL_23;
        }
        if ((v115 & 0xFFFE000000000002) == 0)
        {
          v112 = *(unsigned __int8 *)(v115 + 5);
          if (v112 == 4)
            v16 = 256;
          else
            v16 = (v112 == 3) << 9;
          goto LABEL_23;
        }
        goto LABEL_126;
      }
    }
    else
    {
      v103 = *(unsigned __int8 *)(v115 + 5);
      if (v103 == 2)
      {
        v16 = 64;
        goto LABEL_23;
      }
      if ((v115 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
        if (v103 > 0x16)
        {
          v16 = 128;
          goto LABEL_23;
        }
        goto LABEL_117;
      }
    }
    v16 = 8;
    goto LABEL_23;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 1) < 2)
  {
    v13 = 0;
  }
  else
  {
    v12 = *((_QWORD *)a2 + 7);
    if ((v12 & 0xFFFE000000000002) != 0)
    {
      v13 = 0;
    }
    else if (*(unsigned __int8 *)(v12 + 5) <= 0x16u)
    {
      v13 = 0;
    }
    else
    {
      v13 = (unsigned int *)*((_QWORD *)a2 + 7);
    }
    if (v12 != 10 && !v13)
    {
      v14 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v14 = 0x4600000002;
      *(_QWORD *)(v14 + 8) = "second argument to WebAssembly.Instance must be undefined or an Object";
      *(_DWORD *)(v14 + 16) = 4;
      v114 = (WTF::StringImpl *)v14;
      v115 = v12;
      if (v12 == 2)
      {
        v16 = 4;
        goto LABEL_76;
      }
      if (!v12)
      {
LABEL_74:
        v16 = 0;
        goto LABEL_76;
      }
      if (JSC::JSValue::isAnyInt((JSC::JSValue *)&v115))
      {
        v16 = 16;
        goto LABEL_76;
      }
      if (v115 >> 49)
      {
        v16 = 32;
        goto LABEL_76;
      }
      if ((v115 & 0xFFFE000000000002) != 0)
      {
        if ((v115 & 0xFFFFFFFFFFFFFFFELL) != 6)
        {
LABEL_68:
          if (JSC::JSValue::isCallable((JSC::JSValue *)&v115))
          {
            v16 = 1;
            goto LABEL_76;
          }
          if ((v115 & 0xFFFE000000000002) == 0)
          {
            v77 = *(unsigned __int8 *)(v115 + 5);
            if (v77 == 4)
              v16 = 256;
            else
              v16 = (v77 == 3) << 9;
            goto LABEL_76;
          }
          goto LABEL_74;
        }
      }
      else
      {
        v15 = *(unsigned __int8 *)(v115 + 5);
        if (v15 == 2)
        {
          v16 = 64;
          goto LABEL_76;
        }
        if ((v115 & 0xFFFFFFFFFFFFFFFELL) != 6)
        {
          if (v15 > 0x16)
          {
            v16 = 128;
LABEL_76:
            v20 = (char *)(this + 176);
            v19 = *(_QWORD *)(this + 176);
            v21 = *(JSC::Heap ***)(this + 56);
            if ((v19 & 1) == 0)
              goto LABEL_77;
            v22 = *(uint64_t (**)(unint64_t *))(v19 & 0xFFFFFFFFFFFFFFFCLL);
            if ((this & 8) != 0)
              v23 = (unint64_t *)(this - 16);
            else
              v23 = (unint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
LABEL_105:
            v115 = *v23;
            v116 = this;
            v117 = v20;
            v19 = v22(&v115);
LABEL_77:
            v78 = JSC::ErrorInstance::create(v21, v19, &v114, 0, (uint64_t)JSC::defaultSourceAppender, v16, 5, 1);
            v85 = (JSC::Exception *)v78;
            if ((v78 & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v78 & 0xFFFFFFFE) + 0x4C)))
            {
              v85 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v78, 0, v79, v80, v81, v82, v83);
            }
            v40 = (unint64_t *)JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v85, v84, v79, v80, v81, v82, v83);
            v93 = v114;
            v114 = 0;
            if (v93)
            {
              if (*(_DWORD *)v93 == 2)
              {
                WTF::StringImpl::~StringImpl(v93, v86, v87, v88, v89, v90, v91, v92);
                WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
              }
              else
              {
                *(_DWORD *)v93 -= 2;
              }
            }
            return v40;
          }
          goto LABEL_68;
        }
      }
      v16 = 8;
      goto LABEL_76;
    }
  }
  v24 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v24 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v30 = *(_QWORD *)(this + 1344);
    if ((v30 & 1) == 0)
      goto LABEL_43;
    v110 = *(uint64_t (**)(unint64_t *))(v30 & 0xFFFFFFFFFFFFFFFCLL);
    v111 = (unint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v111 = (unint64_t *)(this - 16);
    v115 = *v111;
    v116 = this;
    v117 = (char *)(this + 1344);
    SubclassStructure = (JSC::JSObject *)v110(&v115);
LABEL_41:
    v30 = (unint64_t)SubclassStructure;
    goto LABEL_43;
  }
  v115 = *(_QWORD *)(this + 56);
  for (i = v24; ; i = (JSC::JSGlobalObject *)*((_QWORD *)i + 2))
  {
    while (1)
    {
      v26 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
      if (v26 != &JSC::JSBoundFunction::s_info && v26 != &JSC::JSRemoteFunction::s_info)
        break;
      i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
    }
    if (*((_BYTE *)i + 5) != 61)
    {
      v27 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
      goto LABEL_38;
    }
    if (JSC::ProxyObject::isRevoked(i))
      break;
  }
  JSC::throwTypeError(this, (JSC::VM **)&v115, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v27 = 0;
LABEL_38:
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_39;
  v107 = *(_DWORD *)(v10 + 80);
  if ((v107 & 0x27) != 0 && (v107 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_39:
    v28 = *(_QWORD *)(v27 + 1344);
    if ((v28 & 1) != 0)
    {
      v108 = *(uint64_t (**)(unint64_t *))(v28 & 0xFFFFFFFFFFFFFFFCLL);
      v109 = (unint64_t *)(v27 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v27 & 8) != 0)
        v109 = (unint64_t *)(v27 - 16);
      v115 = *v109;
      v116 = v27;
      v117 = (char *)(v27 + 1344);
      v28 = v108(&v115);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v24, (JSC::JSObject *)v28, a4, a5, a6, a7, a8);
    goto LABEL_41;
  }
  v30 = 0;
LABEL_43:
  if (*(_DWORD *)(v10 + 80))
  {
    v104 = *(_DWORD *)(v10 + 80);
    if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  JSC::JSWebAssemblyInstance::createPrivateModuleKey(&v114);
  v31 = *(unsigned int **)(v11 + 16);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 + 1, v31));
  v113 = v31;
  v40 = (unint64_t *)JSC::JSWebAssemblyInstance::tryCreate((JSC::Heap **)v10, (WTF::StringImpl **)this, (JSC::Structure *)&v114, (const WTF::String *)v11, (uint64_t)v13, v30, (uint64_t *)&v113, 0);
  v41 = v113;
  v113 = 0;
  if (v41)
  {
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, v41);
      v115 = (unint64_t)v41;
      WTF::ThreadSafeRefCounted<JSC::Wasm::Module,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::Module **)&v115);
    }
  }
  v44 = v114;
  v114 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v105 = *(_DWORD *)(v10 + 80);
    if ((v105 & 0x27) != 0 && (v105 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v34, v35, v36, v37, v38, v39);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  JSC::JSWebAssemblyInstance::initializeImports(v40, (JSC::JSGlobalObject *)this, v13, 0);
  if (*(_DWORD *)(v10 + 80))
  {
    v106 = *(_DWORD *)(v10 + 80);
    if ((v106 & 0x27) != 0 && (v106 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v45, v46, v47, v48, v49, v50);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  JSC::Wasm::Module::getOrCreateCalleeGroup(*(_QWORD *)(v11 + 16), v10, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v40[7] + 16) + 8) + 6), v46, v47, v48, v49, v50, (unsigned __int8 **)&v114);
  JSC::Wasm::CalleeGroup::waitUntilFinished(v114, v51, v52, v53, v54, v55, v56, v57);
  JSC::JSWebAssemblyInstance::finalizeCreation((uint64_t)v40, v10, (JSC::JSGlobalObject *)this, (uint64_t *)&v114, 0);
  v65 = (unsigned int *)v114;
  v114 = 0;
  if (v65)
  {
    do
    {
      v66 = __ldaxr(v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v65));
    if (!v67)
    {
      atomic_store(1u, v65);
      v115 = (unint64_t)v65;
      WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::CalleeGroup **)&v115, v58, v59, v60, v61, v62, v63, v64);
    }
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v68 = *(_DWORD *)(v10 + 80);
    if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v59, v60, v61, v62, v63, v64);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  return v40;
}

unint64_t JSC::WebAssemblyInstancePrototype::create(JSC::WebAssemblyInstancePrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  int v12;

  v11 = JSC::allocateCell<JSC::WebAssemblyInstancePrototype>(this, (JSC::VM *)0x10, a3, (uint64_t)a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v11 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  JSC::WebAssemblyInstancePrototype::finishCreation((JSC::WebAssemblyInstancePrototype *)v11, this, a2);
  return v11;
}

unint64_t JSC::allocateCell<JSC::WebAssemblyInstancePrototype>(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t result;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  result = *((_QWORD *)this + 4863);
  if (result >= v9[1])
  {
    result = v9[2];
    if ((result & 1) != 0)
    {
      v13 = (char *)this + 38880;
      v14 = (char *)this + 192;
      JSC::sanitizeStackForVM(this, a2, a3, a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v13, (uint64_t)v14, v10, 0, 0, v15, v16, v17);
      goto LABEL_3;
    }
    v12 = *(_QWORD *)(result + 8) ^ v9[3];
    v9[1] = result + HIDWORD(v12);
    v9[2] = result + (int)v12;
  }
  *v9 = result + v10;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

void JSC::WebAssemblyInstancePrototype::finishCreation(JSC::WebAssemblyInstancePrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v6 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x1400000002;
  *(_QWORD *)(v7 + 8) = "WebAssembly.Instance";
  *(_DWORD *)(v7 + 16) = 4;
  v53 = (WTF::StringImpl *)v7;
  v14 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v53, v8, v9, v10, v11, v12, v13);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v6, v14, 6, v15, v16, v17, v18);
  v26 = v53;
  v53 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  v27 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 1288);
  if (v27)
    *(_DWORD *)v27 += 2;
  v52 = v27;
  JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v52, (uint64_t)JSC::webAssemblyInstanceProtoGetterExports, 156, (const JSC::PropertyTable *)0x12);
  v35 = v52;
  v52 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
}

uint64_t JSC::webAssemblyInstanceProtoGetterExports(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  const WTF::String *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  JSC::Exception *v21;
  WTF::AtomStringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;

  v9 = *((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 74)
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v12 = 0x3F00000002;
    *(_QWORD *)(v12 + 8) = "expected |this| value to be an instance of WebAssembly.Instance";
    *(_DWORD *)(v12 + 16) = 4;
    v34 = (WTF::StringImpl *)v12;
    v14 = JSC::createTypeError((unint64_t)this, &v34, v13);
    v21 = (JSC::Exception *)v14;
    if ((v14 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)))
    {
      v21 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v14, 0, v15, v16, v17, v18, v19);
    }
    JSC::VM::throwException((JSC::VM *)v9, this, v21, v20, v15, v16, v17, v18, v19);
    v23 = v34;
    v34 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, v22, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      else
      {
        *(_DWORD *)v23 -= 2;
      }
    }
    v10 = 0;
  }
  if (!*(_DWORD *)(v9 + 80))
    return *(_QWORD *)(*(_QWORD *)(v10 + 48) + 144);
  v24 = *(_DWORD *)(v9 + 80);
  if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
  {
    v33 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v10 = v33;
  }
  if (*(_QWORD *)(v9 + 16))
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(v10 + 48) + 144);
}

unint64_t JSC::WebAssemblyLinkErrorConstructor::create(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t SlowCase;
  char *v41;
  WTF::StringImpl *v42;

  v9 = (unint64_t)a2;
  v11 = (_QWORD *)((char *)this + 38552);
  v12 = *((_QWORD *)this + 4819);
  if (v12 < *((_QWORD *)this + 4820))
    goto LABEL_2;
  v12 = *((_QWORD *)this + 4821);
  if ((v12 & 1) == 0)
  {
    v35 = *(_QWORD *)(v12 + 8) ^ *((_QWORD *)this + 4822);
    *((_QWORD *)this + 4820) = v12 + HIDWORD(v35);
    *((_QWORD *)this + 4821) = v12 + (int)v35;
LABEL_2:
    *v11 = v12 + 48;
    goto LABEL_3;
  }
  v41 = (char *)this + 38552;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a2, a4, a5, a6, a7, a8);
  v11 = v41;
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v37, v38, v39);
  v9 = (unint64_t)a2;
  v12 = SlowCase;
LABEL_3:
  *(_DWORD *)v12 = 0;
  JSC::InternalFunction::InternalFunction(v12, (uint64_t)this, v9, (uint64_t)JSC::callJSWebAssemblyLinkError, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructJSWebAssemblyLinkError);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x900000002;
  *(_QWORD *)(v13 + 8) = "LinkError";
  *(_DWORD *)(v13 + 16) = 4;
  v42 = (WTF::StringImpl *)v13;
  JSC::InternalFunction::finishCreation(v12, this, (const WTF::String *)1, (JSC::VM *)&v42, 1, v14, v15, v16);
  v25 = v42;
  v42 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v12, (uint64_t)this, *(_QWORD *)(v11[425] + 2160), a3, 14, v21, v22, v23, v24);
  return v12;
}

uint64_t JSC::WebAssemblyLinkErrorConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 67099;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::WebAssemblyLinkErrorConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::callJSWebAssemblyLinkError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v9)(_QWORD *);
  _QWORD *v10;
  _QWORD v11[3];

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v5 = 10;
  }
  else
  {
    v5 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v6 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v6 = 10;
LABEL_4:
  v7 = *(_QWORD *)(this + 1360);
  if ((v7 & 1) != 0)
  {
    v9 = *(uint64_t (**)(_QWORD *))(v7 & 0xFFFFFFFFFFFFFFFCLL);
    v10 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v10 = (_QWORD *)(this - 16);
    v11[0] = *v10;
    v11[1] = this;
    v11[2] = this + 1360;
    v7 = v9(v11);
  }
  return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v7, v5, v6, 0, 0, 0, 0, a4);
}

unint64_t JSC::constructJSWebAssemblyLinkError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  JSC::JSGlobalObject *v13;
  JSC::JSGlobalObject *i;
  char **v15;
  unint64_t v16;
  unint64_t v17;
  JSC::JSObject *SubclassStructure;
  unint64_t v19;
  int v21;
  int v22;
  uint64_t (*v23)(JSC::VM **);
  JSC::VM **v24;
  uint64_t (*v25)(JSC::VM **);
  JSC::VM **v26;
  JSC::JSGlobalObject *v27;
  unint64_t v28;
  JSC::VM *v29;
  unint64_t v30;
  char *v31;

  v10 = *(_QWORD *)(this + 56);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11 = 10;
  }
  else
  {
    v11 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v12 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v12 = 10;
LABEL_4:
  v13 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v13 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v19 = *(_QWORD *)(this + 1360);
    if ((v19 & 1) == 0)
      goto LABEL_18;
    v25 = *(uint64_t (**)(JSC::VM **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v26 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v26 = (JSC::VM **)(this - 16);
    v29 = *v26;
    v30 = this;
    v31 = (char *)(this + 1360);
    SubclassStructure = (JSC::JSObject *)v25(&v29);
  }
  else
  {
    v29 = *(JSC::VM **)(this + 56);
    for (i = v13; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v27 + 2))
    {
      while (1)
      {
        v15 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v15 != &JSC::JSBoundFunction::s_info && v15 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v16 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_13;
      }
      v27 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v29, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v16 = 0;
LABEL_13:
    if (*(_DWORD *)(v10 + 80))
    {
      v22 = *(_DWORD *)(v10 + 80);
      if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      {
        v28 = v16;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v16 = v28;
      }
      if (*(_QWORD *)(v10 + 16))
      {
        v19 = 0;
        goto LABEL_18;
      }
    }
    v17 = *(_QWORD *)(v16 + 1360);
    if ((v17 & 1) != 0)
    {
      v23 = *(uint64_t (**)(JSC::VM **))(v17 & 0xFFFFFFFFFFFFFFFCLL);
      v24 = (JSC::VM **)(v16 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v16 & 8) != 0)
        v24 = (JSC::VM **)(v16 - 16);
      v29 = *v24;
      v30 = v16;
      v31 = (char *)(v16 + 1360);
      v17 = v23(&v29);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v13, (JSC::JSObject *)v17, a4, a5, a6, a7, a8);
  }
  v19 = (unint64_t)SubclassStructure;
  if (!*(_DWORD *)(v10 + 80))
    return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v19, v11, v12, 0, 0, 0, 0, a9);
LABEL_18:
  v21 = *(_DWORD *)(v10 + 80);
  if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
    return 0;
  else
    return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v19, v11, v12, 0, 0, 0, 0, a9);
}

uint64_t JSC::webAssemblyGlobalProtoFuncValueOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  const WTF::String *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  JSC::Exception *v21;
  WTF::AtomStringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;

  v9 = *((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::JSWebAssemblyGlobal::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v12 = 0x3D00000002;
    *(_QWORD *)(v12 + 8) = "expected |this| value to be an instance of WebAssembly.Global";
    *(_DWORD *)(v12 + 16) = 4;
    v34 = (WTF::StringImpl *)v12;
    v14 = JSC::createTypeError((unint64_t)this, &v34, v13);
    v21 = (JSC::Exception *)v14;
    if ((v14 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)))
    {
      v21 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v14, 0, v15, v16, v17, v18, v19);
    }
    JSC::VM::throwException((JSC::VM *)v9, this, v21, v20, v15, v16, v17, v18, v19);
    v23 = v34;
    v34 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, v22, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      else
      {
        *(_DWORD *)v23 -= 2;
      }
    }
    v10 = 0;
  }
  if (!*(_DWORD *)(v9 + 80))
    return JSC::Wasm::Global::get(*(JSC::Wasm::Global **)(v10 + 16), (unint64_t)this, (uint64_t)a3, a4, a5, a6, a7, a8);
  v24 = *(_DWORD *)(v9 + 80);
  if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
  {
    v33 = v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v10 = v33;
  }
  if (*(_QWORD *)(v9 + 16))
    return 0;
  else
    return JSC::Wasm::Global::get(*(JSC::Wasm::Global **)(v10 + 16), (unint64_t)this, (uint64_t)a3, a4, a5, a6, a7, a8);
}

int *JSC::webAssemblyGlobalProtoFuncType(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::JSWebAssemblyGlobal *v11;
  int *result;
  uint64_t v13;
  const WTF::String *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  JSC::Exception *v22;
  WTF::AtomStringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::JSWebAssemblyGlobal *v34;
  JSC::VM *v35;
  WTF::StringImpl *v36;

  v10 = *((_QWORD *)this + 7);
  v35 = (JSC::VM *)v10;
  v11 = (JSC::JSWebAssemblyGlobal *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0
    || &JSC::JSWebAssemblyGlobal::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    v13 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v13 = 0x3D00000002;
    *(_QWORD *)(v13 + 8) = "expected |this| value to be an instance of WebAssembly.Global";
    *(_DWORD *)(v13 + 16) = 4;
    v36 = (WTF::StringImpl *)v13;
    v15 = JSC::createTypeError((unint64_t)this, &v36, v14);
    v22 = (JSC::Exception *)v15;
    if ((v15 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C)))
    {
      v22 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v15, 0, v16, v17, v18, v19, v20);
    }
    JSC::VM::throwException((JSC::VM *)v10, this, v22, v21, v16, v17, v18, v19, v20);
    v24 = v36;
    v36 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::~StringImpl(v24, v23, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      else
      {
        *(_DWORD *)v24 -= 2;
      }
    }
    v11 = 0;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v25 = *(_DWORD *)(v10 + 80);
    if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
    {
      v34 = v11;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v11 = v34;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  result = JSC::JSWebAssemblyGlobal::type(v11, this, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!result)
    return (int *)JSC::throwTypeError((unint64_t)this, &v35, (uint64_t)"WebAssembly.Global.prototype.type unable to produce type descriptor for the given global", 89);
  return result;
}

unint64_t JSC::WebAssemblyLinkErrorPrototype::create(JSC::WebAssemblyLinkErrorPrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  WTF::StringImpl *v33;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  JSC::JSGlobalObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t SlowCase;
  WTF::StringImpl *v49;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v43 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v43);
    *((_QWORD *)this + 4865) = v10 + (int)v43;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v44 = (JSC::JSGlobalObject *)a3;
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v45, v46, v47);
  a3 = (uint64_t)v44;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 1968);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x900000002;
  *(_QWORD *)(v13 + 8) = "LinkError";
  *(_DWORD *)(v13 + 16) = 4;
  v49 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v49, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 4, v21, v22, v23, v24);
  v33 = v49;
  v49 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, *(_QWORD *)(v9[381] + 1824), *((_QWORD *)this + 5246), 4, v29, v30, v31, v32);
  return v10;
}

uint64_t JSC::WebAssemblyLinkErrorPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::WebAssemblyLinkErrorPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::WebAssemblyMemoryConstructor::create(JSC *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  JSC::JSObject *v12;

  v11 = JSC::allocateCell<JSC::IntlNumberFormatConstructor>(a1, (JSC::VM *)0x30, a3, a4, a5, a6, a7, a8);
  v12 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v11, (uint64_t)a1, a2, (uint64_t)JSC::callJSWebAssemblyMemory, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructJSWebAssemblyMemory);
  JSC::WebAssemblyMemoryConstructor::finishCreation(v12, a1, a3);
  return v11;
}

void JSC::WebAssemblyMemoryConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x600000002;
  *(_QWORD *)(v6 + 8) = "Memory";
  *(_DWORD *)(v6 + 16) = 4;
  v27 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)1, (JSC::VM *)&v27, 1, v7, v8, v9);
  v18 = v27;
  v27 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), a3, 14, v14, v15, v16, v17);
}

JSC::Exception *JSC::callJSWebAssemblyMemory(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"WebAssembly.Memory", 19);
}

uint64_t JSC::constructJSWebAssemblyMemory(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::JSGlobalObject *i;
  char **v13;
  uint64_t v14;
  unint64_t v15;
  JSC::JSObject *SubclassStructure;
  JSC::VM *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int8x16_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  const WTF::String *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  JSC::Exception *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  const WTF::String *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  JSC::Exception *v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  JSC::VM *v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  JSC::Heap **v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  JSC::Exception *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::AtomStringImpl *v93;
  uint64_t v94;
  JSC::Structure *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int8x16_t v101;
  int v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  uint64_t v112;
  unint64_t v113;
  JSC::Heap **v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  JSC::Exception *v122;
  WTF::StringImpl *v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  uint64_t v141;
  unint64_t v142;
  JSC::Heap **v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  JSC::Exception *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::AtomStringImpl *v159;
  uint64_t v160;
  unint64_t v161;
  JSC::VM *v162;
  double v163;
  _BOOL4 v164;
  unint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  BOOL v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int *v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  WTF::StringImpl *v208;
  JSC::JSGlobalObject *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  JSC::Wasm::Memory *v212;
  unint64_t OutOfMemoryError;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  double v219;
  JSC::Exception *v220;
  WTF::StringImpl *v221;
  unint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  double v231;
  unint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  double v240;
  JSC::VM *v241;
  uint64_t v242;
  const WTF::String *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  double v250;
  JSC::Exception *v251;
  WTF::StringImpl *v252;
  int v253;
  unint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t (*v263)(WTF::StringImpl **);
  WTF::StringImpl **v264;
  _DWORD *v265;
  int v266;
  int v267;
  uint64_t (*v268)(WTF::StringImpl **);
  WTF::StringImpl **v269;
  int v270;
  int v271;
  uint64_t (*v272)(WTF::StringImpl **);
  WTF::StringImpl **v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  uint64_t (*v279)(WTF::StringImpl **);
  WTF::StringImpl **v280;
  uint64_t (*v281)(WTF::StringImpl **);
  WTF::StringImpl **v282;
  _DWORD *v283;
  int v284;
  double v285;
  double v286;
  JSC::VM *v287;
  WTF::StringImpl *v288;
  WTF::StringImpl *v289;
  uint64_t v290;
  char *v291;

  v10 = *(_QWORD *)(this + 56);
  v287 = (JSC::VM *)v10;
  v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v11 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v17 = *(JSC::VM **)(this + 1376);
    if ((v17 & 1) == 0)
      goto LABEL_15;
    v268 = *(uint64_t (**)(WTF::StringImpl **))((unint64_t)v17 & 0xFFFFFFFFFFFFFFFCLL);
    v269 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v269 = (WTF::StringImpl **)(this - 16);
    v289 = *v269;
    v290 = this;
    v291 = (char *)(this + 1376);
    SubclassStructure = (JSC::JSObject *)v268(&v289);
  }
  else
  {
    v289 = (WTF::StringImpl *)v10;
    for (i = v11; ; i = (JSC::JSGlobalObject *)*((_QWORD *)i + 2))
    {
      while (1)
      {
        v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v13 != &JSC::JSBoundFunction::s_info && v13 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v14 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v289, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v14 = 0;
LABEL_10:
    if (*(_DWORD *)(v10 + 80))
    {
      v262 = *(_DWORD *)(v10 + 80);
      if ((v262 & 0x27) != 0 && (v262 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
      {
        v17 = 0;
        goto LABEL_15;
      }
    }
    v15 = *(_QWORD *)(v14 + 1376);
    if ((v15 & 1) != 0)
    {
      v263 = *(uint64_t (**)(WTF::StringImpl **))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v264 = (WTF::StringImpl **)(v14 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v14 & 8) != 0)
        v264 = (WTF::StringImpl **)(v14 - 16);
      v289 = *v264;
      v290 = v14;
      v291 = (char *)(v14 + 1376);
      v15 = v263(&v289);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v11, (JSC::JSObject *)v15, a4, a5, a6, a7, a8);
  }
  v17 = SubclassStructure;
LABEL_15:
  if (*(_DWORD *)(v10 + 80))
  {
    v253 = *(_DWORD *)(v10 + 80);
    if ((v253 & 0x27) != 0 && (v253 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1
    || (v18 = *((_QWORD *)a2 + 6), (v18 & 0xFFFE000000000002) != 0)
    || *(unsigned __int8 *)(v18 + 5) <= 0x16u)
  {
    v54 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v54 = 0x3D00000002;
    *(_QWORD *)(v54 + 8) = "WebAssembly.Memory expects its first argument to be an object";
    *(_DWORD *)(v54 + 16) = 4;
    v289 = (WTF::StringImpl *)v54;
    v56 = JSC::createTypeError(this, &v289, v55);
    v63 = (JSC::Exception *)v56;
    if ((v56 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v56 & 0xFFFFFFFE) + 0x4C)))
    {
      v63 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v56, 0, v57, v58, v59, v60, v61);
    }
    v71 = (uint64_t)JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v63, v62, v57, v58, v59, v60, v61);
    v72 = v289;
    v289 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
      {
        WTF::StringImpl::~StringImpl(v72, v64, v65, v66, v67, v68, v69, v70);
        WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
      }
      else
      {
        *(_DWORD *)v72 -= 2;
      }
    }
    return v71;
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"initial", 7uLL, (uint64_t)a4, a5, a6, a7, a8, &v289);
  v19 = v289;
  v32 = JSC::JSObject::get((unsigned int *)v18, this, (unint64_t)v289, v20, v21, v22, v23, v24);
  if (*(_DWORD *)(v10 + 80))
  {
    v266 = *(_DWORD *)(v10 + 80);
    if ((v266 & 0x27) != 0 && (v266 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v26, v27, v28, v29, v30, v31);
    if (*(_QWORD *)(v10 + 16))
    {
      v71 = 0;
      v74 = 1;
      LODWORD(v39) = -1;
      v73 = (JSC::VM *)v10;
      goto LABEL_57;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"minimum", 7uLL, v27, v28, v29, v30, v31, &v289);
  v33 = v289;
  v39 = JSC::JSObject::get((unsigned int *)v18, this, (unint64_t)v289, v34, v35, v36, v37, v38);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_21;
  v267 = *(_DWORD *)(v10 + 80);
  if ((v267 & 0x27) != 0 && (v267 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v26, v27, v28, v29, v30, v31);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_21:
    if (v39 == 10)
    {
      v39 = v32;
      if (v32 == 10)
      {
        v289 = (WTF::StringImpl *)10;
        v41 = *(_QWORD *)(this + 56);
        goto LABEL_24;
      }
    }
    else if (v32 != 10)
    {
      v71 = JSC::throwTypeError(this, &v287, (uint64_t)"WebAssembly.Memory 'initial' and 'minimum' options are specified at the same time", 82);
      goto LABEL_54;
    }
    v289 = (WTF::StringImpl *)v39;
    v41 = *(_QWORD *)(this + 56);
    if (v39 >= 0xFFFE000000000000 && (v39 & 0x80000000) == 0)
      goto LABEL_41;
    if (v39 >= 0xFFFE000000000000)
    {
      v42 = (double)(int)v39;
      goto LABEL_25;
    }
    if (v39 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v42 = v39 - 0x2000000000000;
      goto LABEL_25;
    }
LABEL_24:
    JSC::JSValue::toNumberSlowCase(&v289, (JSC::JSGlobalObject *)this, v26, v27, v28, v29, v30, v31, v40);
LABEL_25:
    if (!*(_DWORD *)(v41 + 80))
      goto LABEL_82;
    v285 = v42;
    v274 = *(_DWORD *)(v41 + 80);
    if ((v274 & 0x27) != 0 && (v274 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v41 + 64), 7u, v26, v27, v28, v29, v30, v31);
    v42 = v285;
    if (!*(_QWORD *)(v41 + 16))
    {
LABEL_82:
      if (fabs(v42) != INFINITY)
      {
        v140 = trunc(v42);
        if (v140 >= 0.0 && v140 <= 4294967300.0)
        {
          LODWORD(v39) = v42;
          goto LABEL_41;
        }
      }
      v43 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v43 = 0x3600000002;
      *(_QWORD *)(v43 + 8) = "Expect an integer argument in the range: [0, 2^32 - 1]";
      *(_DWORD *)(v43 + 16) = 4;
      v288 = (WTF::StringImpl *)v43;
      v45 = JSC::createTypeError(this, &v288, v44);
      v52 = (JSC::Exception *)v45;
      if ((v45 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x4C)))
      {
        v52 = (JSC::Exception *)JSC::Exception::create(v41, (JSC::VM *)v45, 0, v46, v47, v48, v49, v50);
      }
      JSC::VM::throwException((JSC::VM *)v41, (JSC::JSGlobalObject *)this, v52, v51, v46, v47, v48, v49, v50);
      v53 = v288;
      v288 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
        {
          WTF::StringImpl::~StringImpl(v53, v25, v26, v27, v28, v29, v30, v31);
          WTF::fastFree(v191, v192, v193, v194, v195, v196, v197, v198);
        }
        else
        {
          *(_DWORD *)v53 -= 2;
        }
      }
    }
    LODWORD(v39) = 0;
LABEL_41:
    v73 = v287;
    if (!*((_DWORD *)v287 + 20))
      goto LABEL_42;
    v270 = *((_DWORD *)v287 + 20);
    if ((v270 & 0x27) != 0 && (v270 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v287 + 64), 7u, v26, v27, v28, v29, v30, v31);
    if (*((_QWORD *)v287 + 2))
    {
      v71 = 0;
    }
    else
    {
LABEL_42:
      if (v39 <= 0x10000)
      {
        v74 = 0;
        v71 = 0;
        if (!v33)
          goto LABEL_57;
        goto LABEL_55;
      }
      v75 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v75 = 0x3400000002;
      *(_QWORD *)(v75 + 8) = "WebAssembly.Memory 'initial' page count is too large";
      *(_DWORD *)(v75 + 16) = 4;
      v288 = (WTF::StringImpl *)v75;
      v76 = *(_QWORD *)(this + 128);
      v77 = *(JSC::Heap ***)(this + 56);
      if ((v76 & 1) != 0)
      {
        v272 = *(uint64_t (**)(WTF::StringImpl **))(v76 & 0xFFFFFFFFFFFFFFFCLL);
        if ((this & 8) != 0)
          v273 = (WTF::StringImpl **)(this - 16);
        else
          v273 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
        v289 = *v273;
        v290 = this;
        v291 = (char *)(this + 128);
        v76 = v272(&v289);
      }
      v78 = JSC::ErrorInstance::create(v77, v76, &v288, 0, 0, 0, 2, 1);
      v85 = (JSC::Exception *)v78;
      if ((v78 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v78 & 0xFFFFFFFE) + 0x4C)))
      {
        v85 = (JSC::Exception *)JSC::Exception::create((uint64_t)v73, (JSC::VM *)v78, 0, v79, v80, v81, v82, v83);
      }
      v71 = (uint64_t)JSC::VM::throwException(v73, (JSC::JSGlobalObject *)this, v85, v84, v79, v80, v81, v82, v83);
      v86 = v288;
      v288 = 0;
      if (v86)
      {
        if (*(_DWORD *)v86 == 2)
        {
          WTF::StringImpl::~StringImpl(v86, v25, v26, v27, v28, v29, v30, v31);
          WTF::fastFree(v173, v174, v175, v176, v177, v178, v179, v180);
        }
        else
        {
          *(_DWORD *)v86 -= 2;
        }
      }
    }
    v74 = 1;
    LODWORD(v39) = -1;
    if (!v33)
      goto LABEL_57;
    goto LABEL_55;
  }
  v71 = 0;
LABEL_54:
  v74 = 1;
  LODWORD(v39) = -1;
  v73 = (JSC::VM *)v10;
  if (!v33)
    goto LABEL_57;
LABEL_55:
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl(v33, v25, v26, v27, v28, v29, v30, v31);
    WTF::fastFree(v132, v133, v134, v135, v136, v137, v138, v139);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
LABEL_57:
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
      if (v74)
        return v71;
      goto LABEL_61;
    }
    *(_DWORD *)v19 -= 2;
  }
  if (v74)
    return v71;
LABEL_61:
  WTF::AtomStringImpl::addLiteral((uint64_t)"maximum", 7uLL, v27, v28, v29, v30, v31, &v289);
  v87 = v289;
  v100 = JSC::JSObject::get((unsigned int *)v18, this, (unint64_t)v289, v88, v89, v90, v91, v92);
  if (*((_DWORD *)v73 + 20))
  {
    v271 = *((_DWORD *)v73 + 20);
    if ((v271 & 0x27) != 0 && (v271 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v73 + 64), 7u, v94, (uint64_t)v95, v96, v97, v98, v99);
    if (*((_QWORD *)v73 + 2))
      goto LABEL_197;
  }
  if (v100 == 10)
  {
    v102 = 1;
    goto LABEL_91;
  }
  v289 = (WTF::StringImpl *)v100;
  v111 = *(_DWORD **)(this + 56);
  if (v100 >= 0xFFFE000000000000 && (v100 & 0x80000000) == 0)
    goto LABEL_67;
  if (v100 >= 0xFFFE000000000000)
  {
    v231 = (double)(int)v100;
  }
  else if (v100 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v265 = *(_DWORD **)(this + 56);
    JSC::JSValue::toNumberSlowCase(&v289, (JSC::JSGlobalObject *)this, v94, (uint64_t)v95, v96, v97, v98, v99, v101);
    v111 = v265;
  }
  else
  {
    *(_QWORD *)&v231 = v100 - 0x2000000000000;
  }
  if (v111[20])
  {
    v286 = v231;
    v283 = v111;
    v284 = v111[20];
    if ((v284 & 0x27) != 0 && (v284 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v111 + 16), 7u, v94, (uint64_t)v95, v96, v97, v98, v99);
    v111 = v283;
    v231 = v286;
    if (*((_QWORD *)v283 + 2))
      goto LABEL_156;
  }
  if (fabs(v231) == INFINITY || (v240 = trunc(v231), v240 < 0.0) || v240 > 4294967300.0)
  {
    v241 = (JSC::VM *)v111;
    v242 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v242 = 0x3600000002;
    *(_QWORD *)(v242 + 8) = "Expect an integer argument in the range: [0, 2^32 - 1]";
    *(_DWORD *)(v242 + 16) = 4;
    v288 = (WTF::StringImpl *)v242;
    v244 = JSC::createTypeError(this, &v288, v243);
    v251 = (JSC::Exception *)v244;
    if ((v244 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v244 & 0xFFFFFFFE) + 0x4C)))
    {
      v251 = (JSC::Exception *)JSC::Exception::create((uint64_t)v241, (JSC::VM *)v244, 0, v245, v246, v247, v248, v249);
    }
    JSC::VM::throwException(v241, (JSC::JSGlobalObject *)this, v251, v250, v245, v246, v247, v248, v249);
    v252 = v288;
    v288 = 0;
    if (v252)
    {
      if (*(_DWORD *)v252 == 2)
      {
        WTF::StringImpl::~StringImpl(v252, v93, v94, (uint64_t)v95, v96, v97, v98, v99);
        WTF::fastFree(v254, v255, v256, v257, v258, v259, v260, v261);
      }
      else
      {
        *(_DWORD *)v252 -= 2;
      }
    }
LABEL_156:
    LODWORD(v100) = 0;
    goto LABEL_67;
  }
  LODWORD(v100) = v231;
LABEL_67:
  if (*((_DWORD *)v73 + 20))
  {
    v275 = *((_DWORD *)v73 + 20);
    if ((v275 & 0x27) != 0 && (v275 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v73 + 64), 7u, v94, (uint64_t)v95, v96, v97, v98, v99);
    if (*((_QWORD *)v73 + 2))
    {
LABEL_197:
      v102 = 0;
      v71 = 0;
      goto LABEL_91;
    }
  }
  if (v100 > 0x10000)
  {
    v141 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v141 = 0x3400000002;
    *(_QWORD *)(v141 + 8) = "WebAssembly.Memory 'maximum' page count is too large";
    *(_DWORD *)(v141 + 16) = 4;
    v288 = (WTF::StringImpl *)v141;
    v142 = *(_QWORD *)(this + 128);
    v143 = *(JSC::Heap ***)(this + 56);
    if ((v142 & 1) != 0)
    {
      v279 = *(uint64_t (**)(WTF::StringImpl **))(v142 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v280 = (WTF::StringImpl **)(this - 16);
      else
        v280 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
      v289 = *v280;
      v290 = this;
      v291 = (char *)(this + 128);
      v142 = v279(&v289);
    }
    v144 = JSC::ErrorInstance::create(v143, v142, &v288, 0, 0, 0, 2, 1);
    v151 = (JSC::Exception *)v144;
    if ((v144 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v144 & 0xFFFFFFFE) + 0x4C)))
    {
      v151 = (JSC::Exception *)JSC::Exception::create((uint64_t)v73, (JSC::VM *)v144, 0, v145, v146, v147, v148, v149);
    }
    v71 = (uint64_t)JSC::VM::throwException(v73, (JSC::JSGlobalObject *)this, v151, v150, v145, v146, v147, v148, v149);
    v152 = v288;
    v288 = 0;
    if (v152)
    {
      if (*(_DWORD *)v152 == 2)
      {
        WTF::StringImpl::~StringImpl(v152, v93, v94, (uint64_t)v95, v96, v97, v98, v99);
        WTF::fastFree(v223, v224, v225, v226, v227, v228, v229, v230);
      }
      else
      {
        *(_DWORD *)v152 -= 2;
      }
    }
    v102 = 0;
LABEL_91:
    LODWORD(v100) = -1;
    if (!v87)
      goto LABEL_94;
    goto LABEL_92;
  }
  if (v39 <= v100)
  {
    v102 = 1;
    if (!v87)
      goto LABEL_94;
    goto LABEL_92;
  }
  v112 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v112 = 0x5300000002;
  *(_QWORD *)(v112 + 8) = "'maximum' page count must be than greater than or equal to the 'initial' page count";
  *(_DWORD *)(v112 + 16) = 4;
  v288 = (WTF::StringImpl *)v112;
  v113 = *(_QWORD *)(this + 128);
  v114 = *(JSC::Heap ***)(this + 56);
  if ((v113 & 1) != 0)
  {
    v281 = *(uint64_t (**)(WTF::StringImpl **))(v113 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v282 = (WTF::StringImpl **)(this - 16);
    else
      v282 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
    v289 = *v282;
    v290 = this;
    v291 = (char *)(this + 128);
    v113 = v281(&v289);
  }
  v115 = JSC::ErrorInstance::create(v114, v113, &v288, 0, 0, 0, 2, 1);
  v122 = (JSC::Exception *)v115;
  if ((v115 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v115 & 0xFFFFFFFE) + 0x4C)))
  {
    v122 = (JSC::Exception *)JSC::Exception::create((uint64_t)v73, (JSC::VM *)v115, 0, v116, v117, v118, v119, v120);
  }
  v71 = (uint64_t)JSC::VM::throwException(v73, (JSC::JSGlobalObject *)this, v122, v121, v116, v117, v118, v119, v120);
  v123 = v288;
  v288 = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
    {
      WTF::StringImpl::~StringImpl(v123, v93, v94, (uint64_t)v95, v96, v97, v98, v99);
      WTF::fastFree(v232, v233, v234, v235, v236, v237, v238, v239);
    }
    else
    {
      *(_DWORD *)v123 -= 2;
    }
  }
  v102 = 0;
  if (v87)
  {
LABEL_92:
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v93, v94, (uint64_t)v95, v96, v97, v98, v99);
      WTF::fastFree(v165, v166, v167, v168, v169, v170, v171, v172);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
LABEL_94:
  if (!v102)
    return v71;
  if (!BYTE3(qword_1ECF4C789))
  {
    v164 = 0;
    v162 = v287;
    goto LABEL_127;
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"shared", 6uLL, (uint64_t)v95, v96, v97, v98, v99, &v289);
  v153 = v289;
  v161 = JSC::JSObject::get((unsigned int *)v18, this, (unint64_t)v289, v154, v155, v156, v157, v158);
  if (v153)
  {
    if (*(_DWORD *)v153 == 2)
    {
      WTF::StringImpl::~StringImpl(v153, v159, v160, (uint64_t)v95, v96, v97, v98, v99);
      WTF::fastFree(v183, v184, v185, v186, v187, v188, v189, v190);
    }
    else
    {
      *(_DWORD *)v153 -= 2;
    }
  }
  v162 = v287;
  if (*((_DWORD *)v287 + 20))
  {
    v276 = *((_DWORD *)v287 + 20);
    if ((v276 & 0x27) != 0 && (v276 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v287 + 64), 7u, v160, (uint64_t)v95, v96, v97, v98, v99);
    if (*((_QWORD *)v162 + 2))
      return 0;
  }
  if (v161 >= 0xFFFE000000000000)
  {
    v182 = (_DWORD)v161 == 0;
    goto LABEL_120;
  }
  *(_QWORD *)&v163 = v161 - 0x2000000000000;
  if (v161 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v161 & 0xFFFE000000000002) != 0)
    {
      v164 = v161 == 7;
      goto LABEL_123;
    }
    v181 = *(unsigned __int8 *)(v161 + 5);
    if (v181 == 2)
    {
      v199 = *(_QWORD *)(v161 + 8);
      if ((v199 & 1) != 0)
        v200 = (int *)(v161 + 16);
      else
        v200 = (int *)(v199 + 4);
      v201 = *v200;
    }
    else
    {
      if (v181 != 3)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v161 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
LABEL_111:
          v164 = 1;
          goto LABEL_123;
        }
        v182 = *(_QWORD *)(16 * (*(_DWORD *)v161 & 0xFFFFFFFE) + 0x28) == this;
        goto LABEL_120;
      }
      v201 = *(_DWORD *)(v161 + 8);
    }
    v182 = v201 == 0;
LABEL_120:
    v164 = !v182;
    goto LABEL_123;
  }
  if (v163 > 0.0)
    goto LABEL_111;
  v164 = v163 < 0.0;
LABEL_123:
  if (*((_DWORD *)v162 + 20))
  {
    v277 = *((_DWORD *)v162 + 20);
    if ((v277 & 0x27) != 0 && (v277 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v162 + 64), 7u, v160, (uint64_t)v95, v96, v97, v98, v99);
    if (*((_QWORD *)v162 + 2))
      return 0;
  }
  if (v164)
  {
    if ((_DWORD)v100 == -1)
      return JSC::throwTypeError(this, &v287, (uint64_t)"'maximum' page count must be defined if 'shared' is true", 57);
    v164 = 1;
  }
LABEL_127:
  v71 = (uint64_t)JSC::JSWebAssemblyMemory::tryCreate((WTF::StringImpl **)this, (JSC::JSGlobalObject *)v10, v17, v95, v96, v97, v98, v99);
  if (*((_DWORD *)v162 + 20))
  {
    v278 = *((_DWORD *)v162 + 20);
    if ((v278 & 0x27) != 0 && (v278 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v162 + 64), 7u, v202, v203, v204, v205, v206, v207);
    if (*((_QWORD *)v162 + 2))
      return 0;
  }
  v208 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v208 = off_1E35B9360;
  *((_QWORD *)v208 + 1) = v10;
  *((_QWORD *)v208 + 2) = v71;
  v288 = v208;
  JSC::Wasm::Memory::tryCreate(v10, v39, v100, v164, (uint64_t *)&v288, (uint64_t *)&v289);
  v210 = v288;
  v288 = 0;
  if (v210)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v210 + 8))(v210);
  v211 = v289;
  if (v289)
  {
    v289 = 0;
    v212 = *(JSC::Wasm::Memory **)(v71 + 16);
    *(_QWORD *)(v71 + 16) = v211;
    if (!v212)
      return v71;
    WTF::RefCounted<JSC::Wasm::Memory>::deref(v212);
  }
  else
  {
    OutOfMemoryError = JSC::createOutOfMemoryError(this, v209);
    v220 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v220 = (JSC::Exception *)JSC::Exception::create((uint64_t)v162, (JSC::VM *)OutOfMemoryError, 0, v214, v215, v216, v217, v218);
    }
    v71 = (uint64_t)JSC::VM::throwException(v162, (JSC::JSGlobalObject *)this, v220, v219, v214, v215, v216, v217, v218);
  }
  v221 = v289;
  v289 = 0;
  if (v221)
    WTF::RefCounted<JSC::Wasm::Memory>::deref(v221);
  return v71;
}

JSC::JSGlobalObject *JSC::webAssemblyMemoryProtoGetterBuffer(JSC::JSGlobalObject *a1, JSC::JSWebAssemblyMemory *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  const WTF::String *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  JSC::Exception *v20;
  WTF::AtomStringImpl *v21;
  WTF::StringImpl *v22;
  int v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::JSWebAssemblyMemory *v32;
  WTF::StringImpl *v33;

  v9 = *((_QWORD *)a1 + 7);
  if (((unint64_t)this & 0xFFFE000000000002) != 0
    || &JSC::JSWebAssemblyMemory::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)))
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v11 = 0x5A00000002;
    *(_QWORD *)(v11 + 8) = "WebAssembly.Memory.prototype.buffer getter called with non WebAssembly.Memory |this| value";
    *(_DWORD *)(v11 + 16) = 4;
    v33 = (WTF::StringImpl *)v11;
    v13 = JSC::createTypeError((unint64_t)a1, &v33, v12);
    v20 = (JSC::Exception *)v13;
    if ((v13 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C)))
    {
      v20 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v13, 0, v14, v15, v16, v17, v18);
    }
    JSC::VM::throwException((JSC::VM *)v9, a1, v20, v19, v14, v15, v16, v17, v18);
    v22 = v33;
    v33 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, v21, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
    this = 0;
  }
  if (!*(_DWORD *)(v9 + 80))
    return JSC::JSWebAssemblyMemory::buffer(this, a1);
  v23 = *(_DWORD *)(v9 + 80);
  if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
  {
    v32 = this;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    this = v32;
  }
  if (*(_QWORD *)(v9 + 16))
    return 0;
  else
    return JSC::JSWebAssemblyMemory::buffer(this, a1);
}

unint64_t JSC::WebAssemblyMemoryPrototype::create(JSC::WebAssemblyMemoryPrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;

  v10 = JSC::allocateCell<JSC::IntlCollatorPrototype>(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  JSC::WebAssemblyMemoryPrototype::finishCreation((JSC::WebAssemblyMemoryPrototype *)v10, this);
  return v10;
}

void JSC::WebAssemblyMemoryPrototype::finishCreation(JSC::WebAssemblyMemoryPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x1200000002;
  *(_QWORD *)(v5 + 8) = "WebAssembly.Memory";
  *(_DWORD *)(v5 + 16) = 4;
  v33 = (WTF::StringImpl *)v5;
  v12 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v33, v6, v7, v8, v9, v10, v11);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v4, v12, 6, v13, v14, v15, v16);
  v24 = v33;
  v33 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
}

unint64_t JSC::WebAssemblyModuleConstructor::create(JSC *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  JSC::JSObject *v12;

  v11 = JSC::allocateCell<JSC::IntlNumberFormatConstructor>(a1, (JSC::VM *)0x30, a3, a4, a5, a6, a7, a8);
  v12 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v11, (uint64_t)a1, a2, (uint64_t)JSC::callJSWebAssemblyModule, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructJSWebAssemblyModule);
  JSC::WebAssemblyModuleConstructor::finishCreation(v12, a1, a3);
  return v11;
}

void JSC::WebAssemblyModuleConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x600000002;
  *(_QWORD *)(v6 + 8) = "Module";
  *(_DWORD *)(v6 + 16) = 4;
  v27 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)1, (JSC::VM *)&v27, 1, v7, v8, v9);
  v18 = v27;
  v27 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), a3, 14, v14, v15, v16, v17);
}

JSC::Exception *JSC::callJSWebAssemblyModule(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"WebAssembly.Module", 19);
}

unint64_t JSC::constructJSWebAssemblyModule(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char **v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  unint64_t OutOfMemoryError;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  JSC::Exception *v26;
  void *v27;
  uint64_t v28;
  JSC::Structure *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::JSGlobalObject *v34;
  JSC::JSGlobalObject *v35;
  uint64_t v36;
  JSC::JSGlobalObject *i;
  char **v38;
  unint64_t v39;
  unint64_t v40;
  JSC::JSObject *SubclassStructure;
  unint64_t j;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  JSC::Heap **v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  JSC::Exception *v65;
  WTF *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  JSC::Exception *v86;
  unsigned int v87;
  int v88;
  uint64_t (*v89)(void **);
  void **v90;
  uint64_t (*v91)(void **);
  void **v92;
  unint64_t v93;
  size_t v94;
  uint64_t v95;
  int v96;
  uint64_t (*v97)(void **);
  void **v98;
  uint64_t (*v99)(void **);
  void **v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  uint64_t v104;
  _DWORD *v105;
  WTF::StringImpl *v106;
  int v107;
  void *__dst;
  unint64_t v109;
  char *v110;

  v10 = *(_QWORD *)(this + 56);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11 = 10;
    goto LABEL_41;
  }
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFFFE000000000002) != 0)
  {
LABEL_41:
    v50 = 0;
    v51 = 0;
    v105 = 0;
    v106 = (WTF::StringImpl *)v10;
    v14 = v10;
    goto LABEL_42;
  }
  v12 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C));
  if (v12 == &JSC::JSSourceCode::s_info && (v13 = *(_DWORD **)(v11 + 8)) != 0)
  {
    ++v13[2];
    v105 = v13;
    (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 80))(v13);
    v14 = *(_QWORD *)(this + 56);
    v106 = (WTF::StringImpl *)v14;
    v12 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C));
  }
  else
  {
    v105 = 0;
    v106 = (WTF::StringImpl *)v10;
    v14 = v10;
  }
  if (v12 == &JSC::JSSourceCode::s_info)
  {
    v15 = *(_QWORD *)(v11 + 8);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
    goto LABEL_8;
  }
  v87 = *(unsigned __int8 *)(v11 + 5);
  if (v87 < 0x17)
  {
    v50 = 0;
    v51 = 0;
  }
  else
  {
    if (v87 == 38)
      v50 = v11;
    else
      v50 = 0;
    if (v87 - 39 >= 0xC)
      v51 = 0;
    else
      v51 = v11;
  }
LABEL_42:
  if (!(v50 | v51))
  {
    v54 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v54 = 0x3B00000002;
    *(_QWORD *)(v54 + 8) = "first argument must be an ArrayBufferView or an ArrayBuffer";
    *(_DWORD *)(v54 + 16) = 4;
    v103 = (WTF *)v54;
    __dst = (void *)v11;
    if (v11 == 10)
    {
      v55 = 2;
    }
    else if (v11 == 2)
    {
      v55 = 4;
    }
    else if (v11)
    {
      if (JSC::JSValue::isAnyInt((JSC::JSValue *)&__dst))
      {
        v55 = 16;
      }
      else if ((unint64_t)__dst >> 49)
      {
        v55 = 32;
      }
      else if (((unint64_t)__dst & 0xFFFE000000000002) != 0)
      {
        v55 = 8 * (((unint64_t)__dst & 0xFFFFFFFFFFFFFFFELL) == 6);
      }
      else if (*((_BYTE *)__dst + 5) == 2)
      {
        v55 = 64;
      }
      else if (((unint64_t)__dst & 0xFFFFFFFFFFFFFFFELL) == 6)
      {
        v55 = 8;
      }
      else if (*((unsigned __int8 *)__dst + 5) <= 0x16u)
      {
        if (*((_BYTE *)__dst + 5) == 4)
          v55 = 256;
        else
          v55 = (*((_BYTE *)__dst + 5) == 3) << 9;
      }
      else
      {
        v55 = 128;
      }
    }
    else
    {
      v55 = 0;
    }
    v56 = *(_QWORD *)(this + 176);
    v57 = *(JSC::Heap ***)(this + 56);
    if ((v56 & 1) != 0)
    {
      v97 = *(uint64_t (**)(void **))(v56 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v98 = (void **)(this - 16);
      else
        v98 = (void **)(this & 0xFFFFFFFFFFFFC000 | 8);
      __dst = *v98;
      v109 = this;
      v110 = (char *)(this + 176);
      v56 = v97(&__dst);
    }
    v58 = JSC::ErrorInstance::create(v57, v56, &v103, 0, (uint64_t)JSC::defaultSourceAppender, v55, 5, 1);
    v65 = (JSC::Exception *)v58;
    if ((v58 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0x4C)))
    {
      v65 = (JSC::Exception *)JSC::Exception::create(v14, (JSC::VM *)v58, 0, v59, v60, v61, v62, v63);
    }
    JSC::VM::throwException((JSC::VM *)v14, (JSC::JSGlobalObject *)this, v65, v64, v59, v60, v61, v62, v63);
    v66 = v103;
    v103 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
      {
        WTF::StringImpl::~StringImpl(v66, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
      }
      else
      {
        *(_DWORD *)v66 -= 2;
      }
    }
    goto LABEL_68;
  }
  if (!v51)
  {
    v53 = *(_QWORD *)(v50 + 16);
    v16 = *(_QWORD *)(v53 + 16);
    if (v16)
    {
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      {
        if (!((v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
          goto LABEL_59;
        v16 = (v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      if (*(_BYTE *)(v53 + 64) && (v102 = *(_QWORD *)(v53 + 32)) != 0)
        v17 = *(_QWORD *)(v102 + 32);
      else
        v17 = *(_QWORD *)(v53 + 48);
      goto LABEL_8;
    }
LABEL_59:
    JSC::throwTypeError(this, &v106, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    goto LABEL_68;
  }
  if (*(unsigned __int8 *)(v51 + 5) - 39 <= 0xA)
  {
    JSC::validateTypedArray((JSC *)this, (JSC::ArrayBuffer **)v51, a3, a4, a5, a6, a7, a8);
    if (!*(_DWORD *)(v14 + 80))
      goto LABEL_46;
    v96 = *(_DWORD *)(v14 + 80);
    if ((v96 & 0x27) != 0 && (v96 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(v14 + 16))
      goto LABEL_46;
LABEL_68:
    v17 = 0;
    v16 = 0;
    goto LABEL_8;
  }
  LOBYTE(__dst) = 0;
  LOBYTE(v109) = 0;
  JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v51, (uint64_t)&__dst);
  if (!(_BYTE)a2)
    goto LABEL_59;
LABEL_46:
  v16 = *(_QWORD *)(v51 + 16);
  if (v16 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v16 = (v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  if ((*(_BYTE *)(v51 + 40) & 7u) > 2)
  {
    LOBYTE(__dst) = 0;
    LOBYTE(v109) = 0;
    v93 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v51, (uint64_t)&__dst, (uint64_t)a3, a4, a5, a6, a7, a8);
    v94 = 0;
    if ((_BYTE)a2 && v93)
    {
      if ((*(_BYTE *)(v51 + 40) & 1) != 0)
      {
        if ((*(_BYTE *)(v51 + 5) - 42) > 7u)
          LOBYTE(v101) = 0;
        else
          v101 = qword_19915B3B8[(char)(*(_BYTE *)(v51 + 5) - 42)];
        v94 = v93 << v101;
      }
      else
      {
        if ((*(_BYTE *)(v51 + 5) - 42) > 7u)
          LOBYTE(v95) = 0;
        else
          v95 = qword_19915B3B8[(char)(*(_BYTE *)(v51 + 5) - 42)];
        v94 = *(_QWORD *)(v51 + 24) << v95;
      }
    }
    v17 = v94;
  }
  else
  {
    if ((*(_BYTE *)(v51 + 5) - 42) > 7u)
      LOBYTE(v52) = 0;
    else
      v52 = qword_19915B3B8[(char)(*(_BYTE *)(v51 + 5) - 42)];
    v17 = *(_QWORD *)(v51 + 24) << v52;
  }
LABEL_8:
  if (*(_DWORD *)(v10 + 80))
  {
    v75 = *(_DWORD *)(v10 + 80);
    if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
    {
      v18 = 0;
      v103 = 0;
      v104 = 0;
      goto LABEL_17;
    }
  }
  v103 = 0;
  v104 = 0;
  if (!v17)
    goto LABEL_16;
  if (HIDWORD(v17) || (WTF::tryFastMalloc((WTF *)v17, &__dst), (v18 = __dst) == 0))
  {
    OutOfMemoryError = JSC::createOutOfMemoryError(this, a2);
    v26 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v26 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)OutOfMemoryError, 0, v20, v21, v22, v23, v24);
    }
    JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v26, v25, v20, v21, v22, v23, v24);
LABEL_16:
    v18 = 0;
    goto LABEL_17;
  }
  LODWORD(v104) = v17;
  v103 = (WTF *)__dst;
  memcpy(__dst, (const void *)v16, v17);
  HIDWORD(v104) = v17;
LABEL_17:
  JSC::WebAssemblySourceProviderBufferGuard::~WebAssemblySourceProviderBufferGuard((JSC::WebAssemblySourceProviderBufferGuard *)&v105);
  if (*(_DWORD *)(v10 + 80))
  {
    v76 = *(_DWORD *)(v10 + 80);
    if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v28, (uint64_t)v29, v30, v31, v32, v33);
    if (*(_QWORD *)(v10 + 16))
    {
      v48 = 0;
      if (!v18)
        return v48;
      goto LABEL_38;
    }
  }
  v34 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 3);
  v35 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  v36 = *(_QWORD *)(this + 56);
  if (v35 == v34)
  {
    j = *(_QWORD *)(this + 1392);
    if ((j & 1) != 0)
      goto LABEL_105;
    goto LABEL_32;
  }
  __dst = *(void **)(this + 56);
  for (i = v35; ; i = (JSC::JSGlobalObject *)*((_QWORD *)i + 2))
  {
    while (1)
    {
      v38 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
      if (v38 != &JSC::JSBoundFunction::s_info && v38 != &JSC::JSRemoteFunction::s_info)
        break;
      i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
    }
    if (*((_BYTE *)i + 5) != 61)
    {
      v39 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
      goto LABEL_27;
    }
    if (JSC::ProxyObject::isRevoked(i))
      break;
  }
  JSC::throwTypeError(this, (JSC::VM **)&__dst, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v39 = 0;
LABEL_27:
  if (!*(_DWORD *)(v36 + 80))
    goto LABEL_28;
  v88 = *(_DWORD *)(v36 + 80);
  if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v36 + 64), 7u, v28, (uint64_t)v29, v30, v31, v32, v33);
  if (!*(_QWORD *)(v36 + 16))
  {
LABEL_28:
    v40 = *(_QWORD *)(v39 + 1392);
    if ((v40 & 1) != 0)
    {
      v89 = *(uint64_t (**)(void **))(v40 & 0xFFFFFFFFFFFFFFFCLL);
      v90 = (void **)(v39 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v39 & 8) != 0)
        v90 = (void **)(v39 - 16);
      __dst = *v90;
      v109 = v39;
      v110 = (char *)(v39 + 1392);
      v40 = v89(&__dst);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v35, (JSC::JSObject *)v40, v29, v30, v31, v32, v33);
    goto LABEL_30;
  }
  for (j = 0; ; j = (unint64_t)SubclassStructure)
  {
LABEL_32:
    if (*(_DWORD *)(v36 + 80))
    {
      v77 = *(_DWORD *)(v36 + 80);
      if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v36 + 64), 7u, v28, (uint64_t)v29, v30, v31, v32, v33);
      if (*(_QWORD *)(v36 + 16))
      {
        v48 = 0;
        goto LABEL_37;
      }
    }
    JSC::Wasm::Module::validateSync(v36, (uint64_t *)&v103, (uint64_t)&v106);
    if (!v107)
    {
      v48 = JSC::JSWebAssemblyModule::create((JSC *)v36, j, (uint64_t *)&v106, v43, v44, v45, v46, v47);
      goto LABEL_35;
    }
    if (v107 == 1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_105:
    v91 = *(uint64_t (**)(void **))(j & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v92 = (void **)(this - 16);
    else
      v92 = (void **)(this & 0xFFFFFFFFFFFFC000 | 8);
    __dst = *v92;
    v109 = this;
    v110 = (char *)(this + 1392);
    SubclassStructure = (JSC::JSObject *)v91(&__dst);
LABEL_30:
    ;
  }
  v78 = *(_QWORD *)(this + 1296);
  if ((v78 & 1) != 0)
  {
    v99 = *(uint64_t (**)(void **))(v78 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v100 = (void **)(this - 16);
    else
      v100 = (void **)(this & 0xFFFFFFFFFFFFC000 | 8);
    __dst = *v100;
    v109 = this;
    v110 = (char *)(this + 1296);
    v78 = v99(&__dst);
  }
  v79 = JSC::ErrorInstance::create((JSC::Heap **)v36, v78, &v106, 0, (uint64_t)JSC::defaultSourceAppender, 0, 0, 1);
  v86 = (JSC::Exception *)v79;
  if ((v79 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v79 & 0xFFFFFFFE) + 0x4C)))
  {
    v86 = (JSC::Exception *)JSC::Exception::create(v36, (JSC::VM *)v79, 0, v80, v81, v82, v83, v84);
  }
  JSC::VM::throwException((JSC::VM *)v36, (JSC::JSGlobalObject *)this, v86, v85, v80, v81, v82, v83, v84);
  v48 = 0;
LABEL_35:
  if (v107 != -1)
    ((void (*)(void **, WTF::StringImpl **))off_1E35B9468[v107])(&__dst, &v106);
LABEL_37:
  v18 = v103;
  if (v103)
  {
LABEL_38:
    v103 = 0;
    LODWORD(v104) = 0;
    WTF::fastFree((unint64_t)v18, v27, v28, (uint64_t)v29, v30, v31, v32, v33);
  }
  return v48;
}

unint64_t JSC::WebAssemblyModulePrototype::create(JSC::WebAssemblyModulePrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;

  v10 = JSC::allocateCell<JSC::IntlCollatorPrototype>(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  JSC::WebAssemblyModulePrototype::finishCreation((JSC::WebAssemblyModulePrototype *)v10, this);
  return v10;
}

void JSC::WebAssemblyModulePrototype::finishCreation(JSC::WebAssemblyModulePrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x1200000002;
  *(_QWORD *)(v5 + 8) = "WebAssembly.Module";
  *(_DWORD *)(v5 + 16) = 4;
  v33 = (WTF::StringImpl *)v5;
  v12 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v33, v6, v7, v8, v9, v10, v11);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v4, v12, 6, v13, v14, v15, v16);
  v24 = v33;
  v33 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
}

void JSC::WebAssemblyModuleRecord::visitChildren(JSC::WebAssemblyModuleRecord *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;

  JSC::AbstractModuleRecord::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 16);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      v17 = 0;
      if ((*(_BYTE *)(v16 - 79) & 1) != 0)
      {
LABEL_4:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_5;
      }
    }
    else
    {
      v17 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + v17 + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
        goto LABEL_4;
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, v17, v11, v12, v13, v14, v15);
  }
LABEL_5:
  v18 = *((_QWORD *)this + 17);
  if (!v18)
    goto LABEL_9;
  if ((v18 & 8) != 0)
  {
    v19 = 0;
    if ((*(_BYTE *)(v18 - 79) & 1) != 0)
    {
LABEL_8:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_9;
    }
  }
  else
  {
    v19 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + v19 + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) != 0)
      goto LABEL_8;
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v18, v19, v11, v12, v13, v14, v15);
LABEL_9:
  v20 = *((_QWORD *)this + 18);
  if (!v20)
    return;
  if ((v20 & 8) != 0)
  {
    v21 = 0;
    if ((*(_BYTE *)(v20 - 79) & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    v21 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + v21 + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) == 0)
    {
LABEL_19:
      JSC::SlotVisitor::appendSlow((uint64_t)a2, v20, v21, v11, v12, v13, v14, v15);
      return;
    }
  }
  if (*((_QWORD *)a2 + 21))
    goto LABEL_19;
}

uint64_t JSC::WebAssemblyModuleRecord::visitChildren(JSC::WebAssemblyModuleRecord *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::AbstractModuleRecord::visitChildren(this, a2, a3);
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 16));
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 17));
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 18));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t JSC::WebAssemblyModuleRecord::create(JSC::WebAssemblyModuleRecord *this, JSC::JSGlobalObject *a2, JSC::VM *a3, JSC::Structure *a4, const JSC::Identifier *a5, const JSC::Wasm::ModuleInformation *a6, uint64_t a7, uint64_t a8)
{
  unint64_t v13;
  JSC::WebAssemblyModuleRecord *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v13 = JSC::allocateCell<JSC::WebAssemblyModuleRecord>(a2, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  JSC::AbstractModuleRecord::AbstractModuleRecord(v13, (uint64_t)a2, (unint64_t)a3, (_DWORD **)a4);
  *((_QWORD *)v14 + 16) = 0;
  *((_QWORD *)v14 + 17) = 0;
  *((_QWORD *)v14 + 18) = 0;
  JSC::WebAssemblyModuleRecord::finishCreation(v14, this, a2, a5, v15, v16, v17, v18);
  return v13;
}

unint64_t JSC::allocateCell<JSC::WebAssemblyModuleRecord>(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v9;
  unint64_t SlowCase;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = (JSC::Heap *)*((_QWORD *)this + 5128);
  if (!v9)
    v9 = JSC::GCClient::Heap::webAssemblyModuleRecordSpaceSlow((JSC::Heap **)this + 4694);
  SlowCase = *((_QWORD *)v9 + 3);
  if (SlowCase >= *((_QWORD *)v9 + 4))
  {
    SlowCase = *((_QWORD *)v9 + 5);
    if ((SlowCase & 1) != 0)
    {
      v13 = (uint64_t)v9;
      JSC::sanitizeStackForVM(this, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v13, (uint64_t)this + 192, 160, 0, 0, v14, v15, v16);
      goto LABEL_5;
    }
    v12 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v9 + 6);
    *((_QWORD *)v9 + 4) = SlowCase + HIDWORD(v12);
    *((_QWORD *)v9 + 5) = SlowCase + (int)v12;
  }
  *((_QWORD *)v9 + 3) = SlowCase + 160;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  return SlowCase;
}

void JSC::WebAssemblyModuleRecord::finishCreation(JSC::WebAssemblyModuleRecord *this, JSC::JSGlobalObject *a2, JSC::VM *a3, const JSC::Wasm::ModuleInformation *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  void *v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  int v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  void *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106[3];

  JSC::AbstractModuleRecord::finishCreation(this, (unint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v10 = *((_DWORD *)a4 + 37);
  if (v10)
  {
    v11 = *((_QWORD *)a4 + 17);
    v98 = (uint64_t *)((char *)this + 48);
    v99 = v11 + 24 * v10;
    while (1)
    {
      v12 = *(unsigned int *)(v11 + 12);
      if (!(_DWORD)v12)
        goto LABEL_48;
      v13 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(v11 + 12));
      memcpy(v13, *(const void **)v11, *(unsigned int *)(v11 + 12));
      v14 = (void *)WTF::fastMalloc((WTF *)v12);
      memcpy(v14, v13, v12);
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        v106[0] = v17;
        v18 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v14, v12, (unint64_t *)v106);
        if (v18 == -1)
          break;
        v17 = v106[0];
        v19 = v18 < 0x10000 ? 1 : 2;
        v15 = (WTF::StringImpl *)((char *)v15 + v19);
        v16 |= v18;
      }
      while (v106[0] < (WTF::StringImpl *)v12);
      if ((unint64_t)v17 > v12)
        break;
LABEL_11:
      v100 = v14;
      v101 = v17;
      v102 = v15;
      LOBYTE(v103) = v16 < 0x80;
      *(_DWORD *)((char *)&v103 + 1) = (_DWORD)v105;
      HIDWORD(v103) = *(_DWORD *)((char *)&v105 + 3);
      if ((unint64_t)v15 >> 31)
        v102 = 0;
      WTF::tryMakeAtomStringFromAdapters<WTF::StringTypeAdapter<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>((uint64_t)&v100, (WTF::AtomString *)v106);
      if (v14)
        WTF::fastFree((unint64_t)v14, v20, v21, v22, v23, v24, v25, v26);
      v27 = v106[0];
      if (!v106[0])
      {
        __break(0xC471u);
        return;
      }
      v28 = *(_DWORD *)v106[0];
      *(_DWORD *)v106[0] += 2;
      v106[0] = 0;
      if (v28)
      {
        *(_DWORD *)v27 = v28;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v27, (WTF::AtomStringImpl *)v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
      if (v13)
        WTF::fastFree((unint64_t)v13, v20, v21, v22, v23, v24, v25, v26);
      LODWORD(v100) = 0;
      v29 = *(_DWORD *)v27;
      v102 = 0;
      v103 = 0;
      v101 = v27;
      v104 = v27;
      *(_DWORD *)v27 = v29 + 6;
      v105 = v27;
      WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::AbstractModuleRecord::ExportEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<JSC::AbstractModuleRecord::ExportEntry>,WTF::HashTableTraits>::add<JSC::AbstractModuleRecord::ExportEntry const&>(v98, (WTF::AtomStringImpl *)&v105, (uint64_t)&v100, v22, v23, v24, v25, v26, (uint64_t)v106);
      v37 = v105;
      v105 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
        {
          WTF::StringImpl::~StringImpl(v37, v30, v31, v32, v33, v34, v35, v36);
          WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
        }
        else
        {
          *(_DWORD *)v37 -= 2;
        }
      }
      v38 = v104;
      v104 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
        {
          WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
          WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
        }
        else
        {
          *(_DWORD *)v38 -= 2;
        }
      }
      v39 = v103;
      v103 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
        {
          WTF::StringImpl::~StringImpl(v39, v30, v31, v32, v33, v34, v35, v36);
          WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
        }
        else
        {
          *(_DWORD *)v39 -= 2;
        }
      }
      v40 = v102;
      v102 = 0;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2)
        {
          WTF::StringImpl::~StringImpl(v40, v30, v31, v32, v33, v34, v35, v36);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
        }
        else
        {
          *(_DWORD *)v40 -= 2;
        }
      }
      v41 = v101;
      v101 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
        {
          WTF::StringImpl::~StringImpl(v41, v30, v31, v32, v33, v34, v35, v36);
          WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
        }
        else
        {
          *(_DWORD *)v41 -= 2;
        }
      }
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::~StringImpl(v27, v30, v31, v32, v33, v34, v35, v36);
        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
      }
      else
      {
        *(_DWORD *)v27 -= 2;
      }
      v11 += 24;
      if (v11 == v99)
        return;
    }
    __break(1u);
LABEL_48:
    v14 = 0;
    v13 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    goto LABEL_11;
  }
}

unint64_t JSC::WebAssemblyModuleRecord::prepareLink(unint64_t this, JSC::VM *a2, JSC::JSWebAssemblyInstance *a3)
{
  if (*(_QWORD *)(this + 128))
  {
    __break(0xC471u);
    JUMPOUT(0x198E57298);
  }
  *(_QWORD *)(this + 128) = a3;
  if (a3)
  {
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
      return JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, this);
  }
  return this;
}

uint64_t JSC::WebAssemblyModuleRecord::link(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  JSC *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    v5 = *(JSC **)(a2 + 56);
    v6 = JSC::JSWebAssemblyModule::exportSymbolTable(*(JSC::JSWebAssemblyModule **)(v2 + 40));
    v11 = JSC::JSModuleEnvironment::create(v5, a2, v6, a1, v7, v8, v9, v10);
    JSC::AbstractModuleRecord::setModuleEnvironment(a1, a2, v11, v17, v12, v13, v14, v15, v16);
    return 1;
  }
  else
  {
    result = 108;
    __break(0xC471u);
  }
  return result;
}

unint64_t JSC::JSModuleEnvironment::create(JSC *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t (*v13)(_QWORD *);
  _QWORD *v14;
  _QWORD v15[3];

  v11 = *(_QWORD *)(a2 + 784);
  if ((v11 & 1) != 0)
  {
    v13 = *(uint64_t (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v14 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v14 = (_QWORD *)(a2 - 16);
    v15[0] = *v14;
    v15[1] = a2;
    v15[2] = a2 + 784;
    v11 = v13(v15);
  }
  return JSC::JSModuleEnvironment::create(a1, v11, 0, a3, 0, a4, a7, a8);
}

void JSC::WebAssemblyModuleRecord::initializeImports(JSC::JSWebAssemblyInstance **a1, JSC::JSGlobalObject *a2, unsigned int *a3, int a4)
{
  JSC::JSWebAssemblyInstance *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int8x16_t v46;
  unint64_t v47;
  char **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::JSWebAssemblyMemory *v52;
  uint64_t v53;
  unsigned int v54;
  _QWORD *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  _BYTE *v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  unsigned __int8 v67;
  unint64_t v68;
  char v69;
  JSC::Wasm::Instance *v70;
  double v71;
  JSC::Wasm::Instance *v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t TypeError;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  JSC::AbstractModuleRecord *v142;
  unint64_t v143;
  _BYTE *v144;
  unint64_t v145;
  uint64_t v146;
  int8x16_t *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int *v154;
  const char *v155;
  uint64_t v156;
  int8x16_t *v157;
  uint64_t v158;
  const WTF::String *v159;
  uint64_t v160;
  uint64_t v161;
  unsigned __int8 *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  _QWORD *v178;
  unsigned int v179;
  uint64_t v180;
  double v181;
  unsigned int v182;
  unint64_t v183;
  int v184;
  unint64_t v185;
  unint64_t v186;
  WTF::StringImpl *v187;
  int v188;
  WTF::StringImpl *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int8 *v193;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  int v199;
  char **v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  char *v215;
  int v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  JSC::JSWebAssemblyMemory *v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  unsigned __int8 *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t *v234;
  unint64_t v235;
  char v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char **v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  JSC::JSGlobalObject *v252;
  uint64_t v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255[2];
  WTF::StringImpl *v256;
  JSC::JSWebAssemblyMemory *v257;
  WTF *v258;
  int v259;
  int v260;
  WTF::StringImpl *v261;
  WTF *v262;
  int v263;
  int v264;
  WTF::StringImpl *v265;
  JSC::VM *v266;

  v252 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 7);
  v266 = v252;
  v4 = a1[16];
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x198E583B0);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 5) + 16) + 8);
  v6 = *(_DWORD *)(v5 + 20);
  if (v6)
  {
    v11 = *(_QWORD *)(v5 + 8);
    v253 = v11 + 40 * v6;
    while (1)
    {
      v12 = (WTF *)*(unsigned int *)(v11 + 12);
      v262 = 0;
      v263 = 0;
      v264 = (int)v12;
      if ((_DWORD)v12)
      {
        v13 = (WTF *)WTF::fastMalloc(v12);
        v263 = (int)v12;
        v262 = v13;
        memcpy(v13, *(const void **)v11, *(unsigned int *)(v11 + 12));
      }
      WTF::makeAtomString<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v262, (WTF::AtomString *)v255);
      v21 = v255[0];
      if (v255[0])
      {
        v22 = *(_DWORD *)v255[0];
        *(_DWORD *)v255[0] += 2;
        v265 = v21;
        v255[0] = 0;
        if (v22)
        {
          *(_DWORD *)v21 = v22;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
        }
      }
      else
      {
        v265 = 0;
        v255[0] = 0;
      }
      v23 = v262;
      if (v262)
      {
        v262 = 0;
        v263 = 0;
        WTF::fastFree((unint64_t)v23, v14, v15, v16, v17, v18, v19, v20);
      }
      v24 = (WTF *)*(unsigned int *)(v11 + 28);
      v258 = 0;
      v259 = 0;
      v260 = (int)v24;
      if ((_DWORD)v24)
      {
        v25 = (WTF *)WTF::fastMalloc(v24);
        v259 = (int)v24;
        v258 = v25;
        memcpy(v25, *(const void **)(v11 + 16), *(unsigned int *)(v11 + 28));
      }
      WTF::makeAtomString<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v258, (WTF::AtomString *)v255);
      v33 = v255[0];
      if (v255[0])
      {
        v34 = *(_DWORD *)v255[0];
        *(_DWORD *)v255[0] += 2;
        v261 = v33;
        v255[0] = 0;
        if (v34)
        {
          *(_DWORD *)v33 = v34;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v33, v26, v27, v28, v29, v30, v31, v32);
          WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
        }
      }
      else
      {
        v261 = 0;
        v255[0] = 0;
      }
      v35 = v258;
      if (v258)
      {
        v258 = 0;
        v259 = 0;
        WTF::fastFree((unint64_t)v35, v26, v27, v28, v29, v30, v31, v32);
      }
      v257 = 0;
      if (a4)
        break;
      v43 = JSC::JSObject::get(a3, (uint64_t)a2, (unint64_t)v265, v28, v29, v30, v31, v32);
      if (*((_DWORD *)v266 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v266, v36, v37, v38, v39, v40, v41, v42))
        goto LABEL_65;
      if ((v43 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v43 + 5) <= 0x16u)
      {
        JSC::WebAssemblyModuleRecord::initializeImports(JSC::JSGlobalObject *,JSC::JSObject *,JSC::Wasm::CreationMode)::$_1::operator()((int **)v255, (unsigned int *)v11, "import", 7, (int8x16_t *)"must be an object", 18, v41, v42);
        v74 = JSC::runtimeTypeForValue(v43);
        TypeError = JSC::createTypeError((uint64_t)a2, v255, (uint64_t)JSC::defaultSourceAppender, v74);
        goto LABEL_62;
      }
      v257 = (JSC::JSWebAssemblyMemory *)JSC::JSObject::get((unsigned int *)v43, (uint64_t)a2, (unint64_t)v261, v38, v39, v40, v41, v42);
      if (*((_DWORD *)v266 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v266, v44, v45, v38, v39, v40, v41, v42))
        goto LABEL_65;
LABEL_23:
      v47 = (unint64_t)v257;
      if (!v257)
      {
        v257 = (JSC::JSWebAssemblyMemory *)10;
        v47 = 10;
      }
      if (!*(_BYTE *)(v11 + 32))
      {
        if (!JSC::JSValue::isCallable((JSC::JSValue *)&v257))
        {
          v154 = (unsigned int *)v11;
          v155 = "import function";
          v156 = 16;
          v157 = (int8x16_t *)"must be callable";
LABEL_118:
          v158 = 17;
LABEL_119:
          JSC::WebAssemblyModuleRecord::initializeImports(JSC::JSGlobalObject *,JSC::JSObject *,JSC::Wasm::CreationMode)::$_1::operator()((int **)v255, v154, v155, v156, v157, v158, v41, v42);
          TypeError = JSC::createJSWebAssemblyLinkError((unint64_t)a2, (JSC::Heap **)v252, v255, v159);
LABEL_62:
          JSC::VM::throwException(v266, a2, TypeError, v76, v77, v78, v79, v80);
          v81 = v255[0];
          v255[0] = 0;
          if (v81)
          {
            if (*(_DWORD *)v81 == 2)
            {
              WTF::StringImpl::~StringImpl(v81, (WTF::AtomStringImpl *)v44, v45, v38, v39, v40, v41, v42);
              WTF::fastFree(v132, v133, v134, v135, v136, v137, v138, v139);
            }
            else
            {
              *(_DWORD *)v81 -= 2;
            }
          }
LABEL_65:
          LODWORD(v52) = 1;
          goto LABEL_33;
        }
        v48 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v257 & 0xFFFFFFFE) + 0x4C));
        if (v48 == &JSC::WebAssemblyFunction::s_info)
        {
          v51 = *(_QWORD *)(*((_QWORD *)v257 + 4) + 16);
          v50 = *((_QWORD *)v257 + 6);
          v49 = *((_QWORD *)v257 + 7);
          v52 = v257;
        }
        else
        {
          if (v48 != &JSC::WebAssemblyWrapperFunction::s_info)
          {
            v49 = 0;
            v50 = 0;
            v51 = 0;
            v52 = v257;
LABEL_30:
            v44 = (unint64_t)a1[16];
            v53 = *(_QWORD *)(v44 + 16);
            v54 = *(_DWORD *)(v11 + 36);
            if (*(_DWORD *)(v53 + 112) <= v54)
            {
              __break(0xC471u);
              JUMPOUT(0x198E5834CLL);
            }
            v55 = (_QWORD *)(v53 + 120 * v54);
            v55[19] = v51;
            v55[20] = v50;
            v55[23] = v49;
            v56 = *(_QWORD *)(v44 + 16);
            if (*(_DWORD *)(v56 + 112) <= v54)
            {
              __break(0xC471u);
              JUMPOUT(0x198E5836CLL);
            }
            *(_QWORD *)(v56 + 120 * v54 + 176) = v52;
            if (!v52)
              goto LABEL_33;
            if (*((_DWORD *)v252 + 190) >= *(unsigned __int8 *)(v44 + 7))
              JSC::Heap::writeBarrierSlowPath((uint64_t)v252 + 192, v44);
            goto LABEL_60;
          }
          v49 = 0;
          v50 = 0;
          v51 = 0;
          v52 = (JSC::JSWebAssemblyMemory *)*((_QWORD *)v257 + 9);
        }
        v160 = *(unsigned int *)(v11 + 36);
        if (*(_DWORD *)(v5 + 36) <= v160)
        {
          __break(0xC471u);
          JUMPOUT(0x198E587B0);
        }
        if ((JSC::Wasm::isSubtypeIndex(*((JSC::Wasm **)v257 + 5), *(JSC::Wasm **)(*(_QWORD *)(v5 + 24) + 8 * v160), v45, v38, v39, v40, v41, v42) & 1) == 0)
        {
          v154 = (unsigned int *)v11;
          v155 = "imported function";
          v156 = 18;
          v157 = (int8x16_t *)"signature doesn't match the provided WebAssembly function's signature";
          v158 = 70;
          goto LABEL_119;
        }
        goto LABEL_30;
      }
      switch(*(_BYTE *)(v11 + 32))
      {
        case 1:
          if ((v47 & 0xFFFE000000000002) != 0
            || &JSC::JSWebAssemblyTable::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE)
                                                                             + 0x4C)))
          {
            v155 = "Table import";
            v157 = (int8x16_t *)"is not an instance of WebAssembly.Table";
            v154 = (unsigned int *)v11;
            v156 = 13;
            goto LABEL_133;
          }
          v122 = *(_DWORD *)(v11 + 36);
          if (*(_DWORD *)(v5 + 204) <= v122)
          {
            __break(0xC471u);
            JUMPOUT(0x198E587A8);
          }
          v123 = *(_QWORD *)(v5 + 192);
          v124 = *(_QWORD *)(v47 + 16);
          if (*(_DWORD *)(v124 + 4) < *(_DWORD *)(v123 + 48 * v122))
          {
            v154 = (unsigned int *)v11;
            v155 = "Table import";
            v156 = 13;
            v157 = (int8x16_t *)"provided an 'initial' that is too small";
LABEL_133:
            v158 = 40;
            goto LABEL_119;
          }
          v125 = *(_QWORD *)(v123 + 48 * v122 + 4);
          if ((v125 & 0xFF00000000) == 0)
            goto LABEL_84;
          v126 = *(_QWORD *)(v124 + 8);
          if ((v126 & 0xFF00000000) != 0)
          {
            if (v126 > v125)
            {
              v155 = "Imported Table";
              v157 = (int8x16_t *)"'maximum' is larger than the module's expected 'maximum'";
              v154 = (unsigned int *)v11;
              v156 = 15;
              v158 = 57;
            }
            else
            {
LABEL_84:
              if ((JSC::Wasm::isSubtype(*(_QWORD *)(v124 + 16), *(_QWORD *)(v124 + 24), *(_QWORD *)(v123 + 48 * v122 + 16), *(_QWORD *)(v123 + 48 * v122 + 24), v39, v40, v41, v42) & 1) != 0)
              {
                JSC::JSWebAssemblyInstance::setTable(a1[16], v252, *(_DWORD *)(v11 + 36), (JSC::JSWebAssemblyTable *)v47);
                goto LABEL_96;
              }
              v155 = "Table import";
              v157 = (int8x16_t *)"provided a 'type' that is wrong";
              v154 = (unsigned int *)v11;
              v156 = 13;
              v158 = 32;
            }
          }
          else
          {
            v155 = "Table import";
            v157 = (int8x16_t *)"does not have a 'maximum' but the module requires that it does";
            v154 = (unsigned int *)v11;
            v156 = 13;
            v158 = 63;
          }
          goto LABEL_119;
        case 2:
          if ((v47 & 0xFFFE000000000002) != 0
            || &JSC::JSWebAssemblyMemory::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE)
                                                                              + 0x4C)))
          {
            v155 = "Memory import";
            v157 = (int8x16_t *)"is not an instance of WebAssembly.Memory";
            v154 = (unsigned int *)v11;
            v156 = 14;
            v158 = 41;
            goto LABEL_119;
          }
          v127 = *(_QWORD *)(*(_QWORD *)(v47 + 16) + 8);
          if (*(_BYTE *)(v127 + 5))
            v128 = atomic_load((unint64_t *)(v127 + 16));
          else
            v128 = *(_QWORD *)(v127 + 16);
          if (v128 < (unint64_t)*(unsigned int *)(v5 + 104) << 16)
          {
            v154 = (unsigned int *)v11;
            v155 = "Memory import";
            v156 = 14;
            v157 = (int8x16_t *)"provided a 'size' that is smaller than the module's declared 'initial' import memory size";
            v158 = 90;
            goto LABEL_119;
          }
          v129 = *(_DWORD *)(v5 + 108);
          v130 = *(_QWORD *)(*(_QWORD *)(v47 + 16) + 8);
          if (v129 != -1)
          {
            v131 = *(_DWORD *)(v130 + 36);
            if (v131 == -1)
            {
              v155 = "Memory import";
              v157 = (int8x16_t *)"did not have a 'maximum' but the module requires that it does";
              v154 = (unsigned int *)v11;
              v156 = 14;
              v158 = 62;
              goto LABEL_119;
            }
            if (v131 > v129)
            {
              v155 = "Memory import";
              v157 = (int8x16_t *)"provided a 'maximum' that is larger than the module's declared 'maximum' import memory size";
              v154 = (unsigned int *)v11;
              v156 = 14;
              v158 = 92;
              goto LABEL_119;
            }
          }
          if ((*(_BYTE *)(v130 + 5) != 1) == (*(_BYTE *)(v5 + 112) != 0))
          {
            v155 = "Memory import";
            v157 = (int8x16_t *)"provided a 'shared' that is different from the module's declared 'shared' import memory attribute";
            v154 = (unsigned int *)v11;
            v156 = 14;
            v158 = 98;
            goto LABEL_119;
          }
          JSC::JSWebAssemblyInstance::setMemory(a1[16], v252, (JSC::JSWebAssemblyMemory *)v47, v38, v39, v40, v41, v42);
LABEL_96:
          if (*((_DWORD *)v266 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v266, v44, v45, v38, v39, v40, v41, v42))
          {
            goto LABEL_65;
          }
          goto LABEL_60;
        case 3:
          v60 = *(_DWORD *)(v11 + 36);
          if (*(_DWORD *)(v5 + 220) <= v60)
          {
            __break(0xC471u);
            JUMPOUT(0x198E58798);
          }
          v61 = *(_QWORD *)(v5 + 208);
          v62 = (_BYTE *)(v61 + 48 * v60);
          v63 = v47 & 0xFFFE000000000002;
          if (!*v62)
          {
            if (!v63
              && &JSC::JSWebAssemblyGlobal::s_info == (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE)
                                                                                + 0x4C)))
            {
              v161 = v61 + 48 * v60;
              v163 = *(_QWORD *)(v161 + 8);
              v162 = (unsigned __int8 *)(v161 + 8);
              if ((JSC::Wasm::isSubtype(*(_QWORD *)(*(_QWORD *)(v47 + 16) + 8), *(_QWORD *)(*(_QWORD *)(v47 + 16) + 16), v163, *((_QWORD *)v162 + 1), v39, v40, v41, v42) & 1) == 0)goto LABEL_253;
              v168 = *(_QWORD *)(v47 + 16);
              if (*(_BYTE *)(v168 + 24))
              {
LABEL_130:
                v155 = "imported global";
                v157 = (int8x16_t *)"must be a same mutability";
                v154 = (unsigned int *)v11;
                v156 = 16;
                v158 = 26;
                goto LABEL_119;
              }
              v73 = *(_DWORD *)(v11 + 36);
              if (*(_DWORD *)(v5 + 220) <= v73)
              {
                __break(0xC471u);
                JUMPOUT(0x198E587A0);
              }
              v212 = *(_QWORD *)(v5 + 208);
              v213 = v212 + 48 * v73;
              v216 = *(unsigned __int8 *)(v213 + 8);
              v215 = (char *)(v213 + 8);
              v214 = v216;
              if ((v216 - 252) >= 4)
              {
                if (v214 == 251)
                {
                  JSC::Wasm::Instance::setGlobal(*((_QWORD *)a1[16] + 2), v73, *(_QWORD *)(v168 + 40), *(_QWORD *)(v168 + 48));
                  goto LABEL_60;
                }
                v232 = v212 + 48 * v73;
                v235 = *(_QWORD *)(v232 + 16);
                v234 = (uint64_t *)(v232 + 16);
                v233 = v235;
                v236 = *v215;
                if (BYTE1(dword_1ECF4C7B0))
                {
                  v237 = (v236 + 29);
                  if (v237 <= 1 && v233 == -17)
                    goto LABEL_257;
                  if (v237 <= 1 && v233 == -16)
                  {
LABEL_264:
                    v180 = JSC::Wasm::Global::get((JSC::Wasm::Global *)v168, (unint64_t)a2, v164, v165, v166, v167, v41, v42);
                    v257 = (JSC::JSWebAssemblyMemory *)v180;
                    if (*((_DWORD *)v266 + 20))
                    {
                      if (JSC::VM::hasExceptionsAfterHandlingTraps(v266, v244, v180, v245, v246, v247, v41, v42))
                        goto LABEL_65;
                      v180 = (uint64_t)v257;
                    }
                    if ((v180 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v180 + 5) < 0x17u)
                    {
LABEL_269:
                      v228 = *v162;
                      if ((v228 - 227) > 0xD || ((1 << (v228 + 29)) & 0x3001) == 0)
                        goto LABEL_276;
                      if (v180 != 2)
                      {
LABEL_235:
                        v157 = (int8x16_t *)"must be a wasm exported function or null";
                        v158 = 41;
                        if ((v228 - 239) >= 2 && v228 != 227)
                        {
LABEL_276:
                          v157 = (int8x16_t *)"must be a wasm exported function";
                          v158 = 33;
                        }
                        v155 = "imported global";
                        v154 = (unsigned int *)v11;
                        v156 = 16;
                        goto LABEL_119;
                      }
                      v249 = 0;
                      v250 = 0;
                    }
                    else
                    {
                      v248 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v180 & 0xFFFFFFFE) + 0x4C));
                      if (v248 == &JSC::WebAssemblyFunction::s_info)
                      {
                        v250 = 0;
                        v249 = v180;
                      }
                      else
                      {
                        if (v248 != &JSC::WebAssemblyWrapperFunction::s_info)
                          goto LABEL_269;
                        v249 = 0;
                        v250 = v180;
                      }
                    }
                    if (BYTE1(dword_1ECF4C7B0)
                      && (*v215 + 29) <= 1u
                      && v180 != 2
                      && (unint64_t)*v234 <= 0xFFFFFFFFFFFFFFC0)
                    {
                      if (v249)
                        v250 = v249;
                      if (*((_QWORD *)v162 + 1) != *(_QWORD *)(v250 + 40))
                        goto LABEL_207;
                    }
                    v178 = (_QWORD *)*((_QWORD *)a1[16] + 2);
                    v179 = *(_DWORD *)(v11 + 36);
LABEL_144:
                    JSC::Wasm::Instance::setGlobal(v178, v179, v180);
                    goto LABEL_60;
                  }
LABEL_282:
                  if (!BYTE2(dword_1ECF4C7B0))
                  {
                    if (!BYTE1(dword_1ECF4C7B0) || (v236 + 29) > 1u || v233 > 0xFFFFFFFFFFFFFFC0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198E586ACLL);
                    }
                    goto LABEL_264;
                  }
                  v251 = JSC::Wasm::Global::get((JSC::Wasm::Global *)v168, (unint64_t)a2, v164, v165, v166, v167, v41, v42);
                  v225 = (JSC::JSWebAssemblyMemory *)JSC::Wasm::internalizeExternref(v251);
                  v257 = v225;
                  v226 = ((*v215 + 29) < 0xEu) & (0x3001u >> (*v215 + 29));
                  v227 = *v234;
LABEL_220:
                  if ((((uint64_t (*)(JSC::JSWebAssemblyMemory *, uint64_t, uint64_t))JSC::Wasm::TypeInformation::castReference)(v225, v226, v227) & 1) == 0)
                  {
                    v155 = "imported global";
                    v157 = (int8x16_t *)"Argument value did not match the reference type";
                    v154 = (unsigned int *)v11;
                    v156 = 16;
                    v158 = 48;
                    goto LABEL_119;
                  }
                }
                else
                {
                  if (*v215 == 240)
                    goto LABEL_264;
                  if (*v215 != 239)
                    goto LABEL_282;
LABEL_257:
                  v257 = (JSC::JSWebAssemblyMemory *)JSC::Wasm::Global::get((JSC::Wasm::Global *)v168, (unint64_t)a2, v164, v165, v166, v167, v41, v42);
                  if (*((_DWORD *)v266 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v266, v238, v239, v240, v241, v242, v41, v42))
                  {
                    goto LABEL_65;
                  }
                  v243 = *v162;
                  if ((v243 - 239) >= 2 && v243 != 227 && v257 == (JSC::JSWebAssemblyMemory *)2)
                  {
                    v155 = "imported global";
                    v157 = (int8x16_t *)"non-null externref cannot be null";
                    v154 = (unsigned int *)v11;
                    v156 = 16;
                    v158 = 34;
                    goto LABEL_119;
                  }
                }
                v178 = (_QWORD *)*((_QWORD *)a1[16] + 2);
                v179 = *(_DWORD *)(v11 + 36);
                v180 = (uint64_t)v257;
                goto LABEL_144;
              }
              v71 = *(double *)(v168 + 40);
              v72 = (JSC::Wasm::Instance *)*((_QWORD *)a1[16] + 2);
              goto LABEL_59;
            }
            v64 = v61 + 48 * v60;
            v67 = *(_BYTE *)(v64 + 8);
            v66 = v64 + 8;
            v65 = v67;
            v68 = *(_QWORD *)(v66 + 8);
            if (BYTE1(dword_1ECF4C7B0))
              v69 = 29;
            else
              v69 = 17;
            if ((v69 + v65) < 2u)
            {
LABEL_54:
              if (v65 != 255)
              {
                switch(v65)
                {
                  case 0xFBu:
                    v155 = "imported global";
                    v157 = (int8x16_t *)"cannot be v128";
                    v154 = (unsigned int *)v11;
                    v156 = 16;
                    v158 = 15;
                    goto LABEL_119;
                  case 0xFCu:
                    v72 = (JSC::Wasm::Instance *)*((_QWORD *)a1[16] + 2);
                    if (v47 <= 0xFFFDFFFFFFFFFFFFLL)
                      *(_QWORD *)&v71 = v47 - 0x2000000000000;
                    else
                      v71 = (double)(int)v47;
                    goto LABEL_58;
                  case 0xFDu:
                    v70 = (JSC::Wasm::Instance *)*((_QWORD *)a1[16] + 2);
                    if (v47 >= 0xFFFE000000000000)
                    {
                      v181 = (double)(int)v47;
                    }
                    else if (v47 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                    {
                      JSC::JSValue::toNumberSlowCase(&v257, a2, v45, v38, v39, v40, v41, v42, v46);
                    }
                    else
                    {
                      *(_QWORD *)&v181 = v47 - 0x2000000000000;
                    }
                    *(float *)&v182 = v181;
                    *(_QWORD *)&v71 = v182;
                    goto LABEL_57;
                  case 0xFEu:
                    goto LABEL_136;
                  default:
                    if (!BYTE1(dword_1ECF4C7B0))
                    {
                      if (v65 == 239)
                        goto LABEL_143;
                      if (v65 == 240)
                        goto LABEL_191;
LABEL_218:
                      if (BYTE2(dword_1ECF4C7B0))
                      {
                        v225 = (JSC::JSWebAssemblyMemory *)JSC::Wasm::internalizeExternref(v47);
                        v257 = v225;
                        v226 = ((*(_BYTE *)v66 + 29) < 0xEu) & (0x3001u >> (*(_BYTE *)v66 + 29));
                        v227 = *(_QWORD *)(v61 + 48 * v60 + 16);
                        goto LABEL_220;
                      }
                      if (!BYTE1(dword_1ECF4C7B0) || (v65 + 29) > 1u || v68 > 0xFFFFFFFFFFFFFFC0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198E582A4);
                      }
                      goto LABEL_191;
                    }
                    v177 = (v65 + 29);
                    if (v177 <= 1 && v68 == -17)
                    {
                      if (v65 == 227 || v47 != 2)
                        goto LABEL_143;
                      v155 = "imported global";
                      v157 = (int8x16_t *)"must be a non-null value";
                      v154 = (unsigned int *)v11;
                      v156 = 16;
                      v158 = 25;
                      goto LABEL_119;
                    }
                    if (v177 > 1 || v68 != -16)
                      goto LABEL_218;
LABEL_191:
                    if (v63 || *(unsigned __int8 *)(v47 + 5) < 0x17u)
                      goto LABEL_195;
                    v200 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x4C));
                    if (v200 == &JSC::WebAssemblyFunction::s_info)
                    {
                      v201 = 0;
                      v202 = v47;
                    }
                    else if (v200 == &JSC::WebAssemblyWrapperFunction::s_info)
                    {
                      v202 = 0;
                      v201 = v47;
                    }
                    else
                    {
LABEL_195:
                      if (v65 - 227 > 0xD || ((1 << (v65 + 29)) & 0x3001) == 0)
                        goto LABEL_276;
                      if (v47 != 2)
                      {
                        v228 = v65;
                        goto LABEL_235;
                      }
                      v201 = 0;
                      v202 = 0;
                    }
                    if (!BYTE1(dword_1ECF4C7B0)
                      || (v65 + 29) > 1u
                      || v47 == 2
                      || v68 > 0xFFFFFFFFFFFFFFC0
                      || (v202 ? (v203 = v202) : (v203 = v201), v68 == *(_QWORD *)(v203 + 40)))
                    {
LABEL_143:
                      v178 = (_QWORD *)*((_QWORD *)a1[16] + 2);
                      v179 = *(_DWORD *)(v11 + 36);
                      v180 = v47;
                      goto LABEL_144;
                    }
                    break;
                }
LABEL_207:
                v155 = "imported global";
                v157 = (int8x16_t *)"Argument function did not match the reference type";
                v154 = (unsigned int *)v11;
                v156 = 16;
                v158 = 51;
                goto LABEL_119;
              }
              v70 = (JSC::Wasm::Instance *)*((_QWORD *)a1[16] + 2);
              if (v47 < 0xFFFE000000000000)
              {
                if (v47 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                  JSC::JSValue::toNumberSlowCase(&v257, a2, v45, v38, v39, v40, v41, v42, v46);
                else
                  v149 = v47 - 0x2000000000000;
                v150 = (v149 >> 52) & 0x7FF;
                if ((v150 - 1023) <= 0x53)
                {
                  v183 = v149 >> (51 - (v149 >> 52));
                  if (v150 > 0x433)
                    LODWORD(v183) = v149 << ((v149 >> 52) - 51);
                  if (v150 >= 0x41F)
                    v184 = v183;
                  else
                    v184 = (((1 << ((v149 >> 52) + 1)) - 1) & v183) + (1 << ((v149 >> 52) + 1));
                  if ((v149 & 0x8000000000000000) == 0)
                    LODWORD(v47) = v184;
                  else
                    LODWORD(v47) = -v184;
                }
                else
                {
                  LODWORD(v47) = 0;
                }
              }
              *(_QWORD *)&v71 = (int)v47;
LABEL_57:
              v72 = v70;
LABEL_58:
              v73 = v60;
            }
            else
            {
              if (v65 != 254)
              {
                if (!(v47 >> 49))
                {
                  v154 = (unsigned int *)v11;
                  v155 = "imported global";
                  v156 = 16;
                  v157 = (int8x16_t *)"must be a number";
                  goto LABEL_118;
                }
                goto LABEL_54;
              }
              if (v63 || *(_BYTE *)(v47 + 5) != 3)
              {
                v155 = "imported global";
                v157 = (int8x16_t *)"must be a BigInt";
                v154 = (unsigned int *)v11;
                v156 = 16;
                goto LABEL_118;
              }
LABEL_136:
              v176 = JSC::JSValue::toBigInt64(&v257, a2, v45, v38, v39, v40, v41, v42, v46);
              if (*((_DWORD *)v266 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v266, v169, v170, v171, v172, v173, v174, v175))
              {
                goto LABEL_65;
              }
              v72 = (JSC::Wasm::Instance *)*((_QWORD *)a1[16] + 2);
              v73 = *(_DWORD *)(v11 + 36);
              v71 = *(double *)&v176;
            }
LABEL_59:
            JSC::Wasm::Instance::setGlobal(v72, v73, *(uint64_t *)&v71);
            goto LABEL_60;
          }
          if (v63
            || &JSC::JSWebAssemblyGlobal::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE)
                                                                              + 0x4C)))
          {
            v154 = (unsigned int *)v11;
            v155 = "imported global";
            v156 = 16;
            v157 = (int8x16_t *)"must be a WebAssembly.Global object since it is mutable";
            v158 = 56;
            goto LABEL_119;
          }
          if ((JSC::Wasm::isSubtype(*(_QWORD *)(*(_QWORD *)(v47 + 16) + 8), *(_QWORD *)(*(_QWORD *)(v47 + 16) + 16), *(_QWORD *)(v61 + 48 * v60 + 8), *(_QWORD *)(v61 + 48 * v60 + 16), v39, v40, v41, v42) & 1) == 0)
          {
LABEL_253:
            v155 = "imported global";
            v157 = (int8x16_t *)"must be a same type";
            v154 = (unsigned int *)v11;
            v156 = 16;
            v158 = 20;
            goto LABEL_119;
          }
          v231 = *(unsigned __int8 **)(v47 + 16);
          if (v231[24] != *v62)
            goto LABEL_130;
          JSC::JSWebAssemblyInstance::linkGlobal(a1[16], v252, *(_DWORD *)(v11 + 36), (JSC::JSWebAssemblyGlobal *)v231, v229, v230, v41, v42);
LABEL_60:
          LODWORD(v52) = 0;
LABEL_33:
          v57 = v261;
          v261 = 0;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
            {
              WTF::StringImpl::~StringImpl(v57, (WTF::AtomStringImpl *)v44, v45, v38, v39, v40, v41, v42);
              WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
            }
            else
            {
              *(_DWORD *)v57 -= 2;
            }
          }
          v58 = v265;
          v265 = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
            {
              WTF::StringImpl::~StringImpl(v58, (WTF::AtomStringImpl *)v44, v45, v38, v39, v40, v41, v42);
              WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
            }
            else
            {
              *(_DWORD *)v58 -= 2;
            }
          }
          v11 += 40;
          if (v11 == v253)
            v59 = 1;
          else
            v59 = (int)v52;
          if (v59 == 1)
            return;
          break;
        case 4:
          if ((v47 & 0xFFFE000000000002) != 0
            || &JSC::JSWebAssemblyTag::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x4C)))
          {
            v155 = "Tag import";
            v157 = (int8x16_t *)"is not an instance of WebAssembly.Tag";
            v154 = (unsigned int *)v11;
            v156 = 11;
            v158 = 38;
            goto LABEL_119;
          }
          v151 = *(unsigned int *)(v11 + 36);
          if (*(_DWORD *)(v5 + 68) <= v151)
          {
            __break(0xC471u);
            JUMPOUT(0x198E58790);
          }
          v152 = *(_QWORD *)(v47 + 16);
          if (*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v151) != *(_QWORD *)(v152 + 8))
          {
            v155 = "imported Tag";
            v157 = (int8x16_t *)"signature doesn't match the imported WebAssembly Tag's signature";
            v154 = (unsigned int *)v11;
            v156 = 13;
            v158 = 65;
            goto LABEL_119;
          }
          v153 = *((_QWORD *)a1[16] + 2);
          do
            v114 = __ldaxr((unsigned int *)v152);
          while (__stlxr(v114 + 1, (unsigned int *)v152));
          v255[0] = (WTF::StringImpl *)v152;
          JSC::Wasm::Instance::setTag(v153, (void *)v151, (uint64_t *)v255, v38, v39, v40, v41, v42);
          WTF::Ref<JSC::Wasm::Tag const,WTF::RawPtrTraits<JSC::Wasm::Tag const>,WTF::DefaultRefDerefTraits<JSC::Wasm::Tag const>>::~Ref((unint64_t *)v255, v115, v116, v117, v118, v119, v120, v121);
          goto LABEL_60;
        default:
          goto LABEL_60;
      }
    }
    v142 = (JSC::AbstractModuleRecord *)JSC::AbstractModuleRecord::hostResolveImportedModule((JSC::AbstractModuleRecord *)a1, (JSC::VM **)a2, &v265, v28, v29, v30, v31, v32);
    if (*((_DWORD *)v266 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v266, v140, v141, v38, v39, v40, v41, v42))
      goto LABEL_65;
    JSC::AbstractModuleRecord::resolveExport(v142, (JSC::VM **)a2, &v261, v38, v39, v40, v41, v42, (uint64_t)v255);
    if (*((_DWORD *)v266 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v266, v44, v45, v38, v39, v40, v41, v42))
      goto LABEL_173;
    switch(LODWORD(v255[0]))
    {
      case 3:
        v190 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v190 = 0x4B00000002;
        *(_QWORD *)(v190 + 8) = "Importing binding name 'default' cannot be resolved by star export entries.";
        *(_DWORD *)(v190 + 16) = 4;
        v254 = (WTF::StringImpl *)v190;
LABEL_170:
        JSC::throwSyntaxError(a2, &v266, &v254);
        v187 = v254;
        v254 = 0;
        if (v187)
        {
          if (*(_DWORD *)v187 == 2)
          {
            WTF::StringImpl::~StringImpl(v187, (WTF::AtomStringImpl *)v44, v45, v38, v39, v40, v41, v42);
            WTF::fastFree(v217, v218, v219, v220, v221, v222, v223, v224);
          }
          else
          {
            *(_DWORD *)v187 -= 2;
          }
        }
LABEL_173:
        v188 = 0;
        goto LABEL_174;
      case 2:
        v185 = (unint64_t)v261;
        if (v261)
        {
          v144 = (_BYTE *)*((_QWORD *)v261 + 1);
          v185 = *((unsigned int *)v261 + 1);
          v186 = ((unint64_t)*((unsigned int *)v261 + 4) >> 2) & 1;
        }
        else
        {
          v144 = 0;
          v186 = 1;
        }
        v146 = v185 | (v186 << 32);
        v147 = (int8x16_t *)"' cannot be resolved due to ambiguous multiple bindings.";
        v148 = 57;
        goto LABEL_169;
      case 1:
        v143 = (unint64_t)v261;
        if (v261)
        {
          v144 = (_BYTE *)*((_QWORD *)v261 + 1);
          v143 = *((unsigned int *)v261 + 1);
          v145 = ((unint64_t)*((unsigned int *)v261 + 4) >> 2) & 1;
        }
        else
        {
          v144 = 0;
          v145 = 1;
        }
        v146 = v143 | (v145 << 32);
        v147 = (int8x16_t *)"' is not found.";
        v148 = 16;
LABEL_169:
        WTF::makeString<WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>((int8x16_t *)"Importing binding name '", 25, v144, v146, v147, v148, (int **)&v254);
        goto LABEL_170;
    }
    v191 = *((_QWORD *)v255[1] + 14);
    if (!v191)
      goto LABEL_224;
    v192 = *(_QWORD *)(v191 + 24);
    v193 = (unsigned __int8 *)(v192 + 20);
    if (__ldaxr((unsigned __int8 *)(v192 + 20)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v193))
    {
      goto LABEL_184;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v192 + 20);
LABEL_184:
    v195 = JSC::SymbolTable::find(*(_QWORD *)(v192 + 8), (uint64_t)v256);
    v198 = *(_QWORD **)(v195 + 8);
    v196 = (_QWORD *)(v195 + 8);
    v197 = v198;
    if ((v198 & 1) != 0)
      v197 = v196;
    v257 = *(JSC::JSWebAssemblyMemory **)(v191 + 8 * (*v197 >> 6) + 32);
    v199 = __ldxr(v193);
    if (v199 == 1)
    {
      if (!__stlxr(0, v193))
        goto LABEL_224;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v192 + 20), 0, v45, v38, v39, v40, v41, v42);
LABEL_224:
    v188 = 1;
LABEL_174:
    v189 = v256;
    v256 = 0;
    if (v189)
    {
      if (*(_DWORD *)v189 == 2)
      {
        WTF::StringImpl::~StringImpl(v189, (WTF::AtomStringImpl *)v44, v45, v38, v39, v40, v41, v42);
        WTF::fastFree(v204, v205, v206, v207, v208, v209, v210, v211);
      }
      else
      {
        *(_DWORD *)v189 -= 2;
      }
    }
    if (!v188)
      goto LABEL_65;
    goto LABEL_23;
  }
}

void JSC::WebAssemblyModuleRecord::initializeImports(JSC::JSGlobalObject *,JSC::JSObject *,JSC::Wasm::CreationMode)::$_1::operator()(int **a1, unsigned int *a2, const char *a3, uint64_t a4, int8x16_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8;
  size_t v9;
  int8x16_t *v10;
  unsigned int *v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  void *v15;
  size_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _BOOL4 v21;
  size_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _BOOL4 v27;
  size_t v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int *v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  char *v46;
  char *v47;
  char *v48;
  __int16 v49;
  _WORD *v50;
  size_t v51;
  unsigned int v52;
  size_t v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  int **v57;
  _WORD *v58;
  _WORD *v59;
  size_t v60;
  unsigned int v61;
  size_t v62;
  char *v63;
  _BOOL4 v64;
  size_t __n;
  size_t __na;
  _DWORD *v69;
  int8x16x2_t v70;
  int8x16x2_t v71;
  int8x16x2_t v72;

  v8 = a6;
  v9 = a4;
  v10 = (int8x16_t *)a3;
  v11 = a2;
  v12 = a2[3];
  if ((_DWORD)v12)
  {
    v13 = (void *)WTF::fastMalloc((WTF *)a2[3]);
    memcpy(v13, *(const void **)v11, v11[3]);
  }
  else
  {
    v13 = 0;
  }
  v14 = v11[7];
  if ((_DWORD)v14)
  {
    v15 = (void *)WTF::fastMalloc((WTF *)v11[7]);
    memcpy(v15, *((const void **)v11 + 2), v11[7]);
    if (!v9)
      goto LABEL_5;
  }
  else
  {
    v15 = 0;
    if (!v9)
      goto LABEL_5;
  }
  if (--v9 >> 31)
  {
    a2 = (unsigned int *)"/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/loca"
                         "l/include/wtf/text/StringConcatenate.h";
    a3 = "unsigned int WTF::stringLength(size_t)";
    a4 = 14;
    __break(0xC471u);
    goto LABEL_100;
  }
LABEL_5:
  __n = v8;
  if ((_DWORD)v12)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      v69 = (_DWORD *)v18;
      v19 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v13, v12, (unint64_t *)&v69);
      if (v19 == -1)
        break;
      v18 = (unint64_t)v69;
      v20 = v19 < 0x10000 ? 1 : 2;
      v16 += v20;
      v17 |= v19;
    }
    while ((unint64_t)v69 < v12);
    if (v18 > v12)
      goto LABEL_100;
    v21 = v17 < 0x80;
    if (v16 >> 31)
      v16 = 0;
    v8 = __n;
    if ((_DWORD)v14)
      goto LABEL_16;
  }
  else
  {
    v18 = 0;
    v16 = 0;
    v21 = 1;
    if ((_DWORD)v14)
    {
LABEL_16:
      v64 = v21;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      do
      {
        v69 = (_DWORD *)v24;
        v25 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v15, v14, (unint64_t *)&v69);
        if (v25 == -1)
          break;
        v24 = (unint64_t)v69;
        v26 = v25 < 0x10000 ? 1 : 2;
        v22 += v26;
        v23 |= v25;
      }
      while ((unint64_t)v69 < v14);
      if (v24 <= v14)
      {
        v27 = v23 < 0x80;
        if (v22 >> 31)
          v28 = 0;
        else
          v28 = v22;
        v8 = __n;
        v21 = v64;
        if (!__n)
          goto LABEL_27;
        goto LABEL_64;
      }
LABEL_100:
      __break(1u);
      goto LABEL_101;
    }
  }
  v24 = 0;
  v28 = 0;
  v27 = 1;
  if (!v8)
  {
LABEL_27:
    __na = 0;
    v29 = 0;
    goto LABEL_28;
  }
LABEL_64:
  __na = v8 - 1;
  if ((v8 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198E58BA4);
  }
  v29 = v8 - 1;
LABEL_28:
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (v30)
    goto LABEL_102;
  v30 = __OFADD__((_DWORD)v28, v31);
  v32 = v28 + v31;
  if (v30)
    goto LABEL_102;
  v30 = __OFADD__(v32, 1);
  v33 = v32 + 1;
  if (v30)
    goto LABEL_102;
  v30 = __OFADD__((_DWORD)v16, v33);
  v34 = v16 + v33;
  if (v30)
    goto LABEL_102;
  v30 = __OFADD__(v34, 1);
  v35 = v34 + 1;
  if (v30)
    goto LABEL_102;
  v36 = (v9 + v35);
  if (__OFADD__((_DWORD)v9, v35))
    goto LABEL_102;
  if (!v21 || !v27)
  {
    if (!(_DWORD)v36)
      goto LABEL_101;
    if (v36 <= 0x7FFFFFEF)
    {
      WTF::tryFastCompactMalloc((WTF *)(2 * v36 + 20), &v69);
      v37 = v69;
      if (v69)
      {
        v39 = (char *)(v69 + 5);
        *v69 = 2;
        v37[1] = v36;
        *((_QWORD *)v37 + 1) = v37 + 5;
        v37[4] = 0;
        v40 = (char *)v37 + 2 * v9 + 20;
        if ((v9 & 0x7FFFFFC0) != 0)
        {
          v41 = &v39[2 * (v9 & 0x7FFFFFC0)];
          v42 = 0uLL;
          do
          {
            v70.val[0] = *v10;
            v43 = v10[1];
            v71.val[0] = v10[2];
            v44 = v10[3];
            v10 += 4;
            v45 = v44;
            v71.val[1] = 0uLL;
            v72.val[0] = v43;
            v70.val[1] = 0uLL;
            v46 = v39;
            vst2q_s8(v46, v70);
            v46 += 32;
            v72.val[1] = 0uLL;
            vst2q_s8(v46, v72);
            v47 = v39 + 64;
            vst2q_s8(v47, v71);
            v48 = v39 + 96;
            vst2q_s8(v48, *(int8x16x2_t *)(&v42 - 1));
            v39 += 128;
          }
          while (v39 != v41);
          v39 = v41;
        }
        while (v39 != v40)
        {
          v49 = v10->u8[0];
          v10 = (int8x16_t *)((char *)v10 + 1);
          *(_WORD *)v39 = v49;
          v39 += 2;
        }
        *(_WORD *)v40 = 32;
        v50 = v40 + 2;
        v69 = 0;
        if (!v18)
          goto LABEL_74;
        v51 = 0;
        while (1)
        {
          v52 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v13, v18, (unint64_t *)&v69);
          if (v52 == -1)
            break;
          if (v51 == v16)
            goto LABEL_74;
          if (HIWORD(v52))
          {
            if (HIWORD(v52) > 0x10u || v51 + 1 >= v16)
              break;
            if (v16 <= v51)
              goto LABEL_100;
            v50[v51] = (v52 >> 10) - 10304;
            v53 = v51 + 2;
            ++v51;
            LOWORD(v52) = v52 & 0x3FF | 0xDC00;
          }
          else
          {
            if (v16 <= v51)
              goto LABEL_100;
            v53 = v51 + 1;
          }
          v50[v51] = v52;
          v51 = v53;
          if ((unint64_t)v69 >= v18)
            goto LABEL_73;
        }
        v53 = v51;
LABEL_73:
        if (v16 >= v53)
        {
LABEL_74:
          v58 = &v50[v16];
          *v58 = 58;
          v59 = v58 + 1;
          v69 = 0;
          if (!v24)
            goto LABEL_89;
          v60 = 0;
          while (1)
          {
            v61 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v15, v24, (unint64_t *)&v69);
            if (v61 == -1)
              break;
            if (v60 == v28)
              goto LABEL_89;
            if (HIWORD(v61))
            {
              if (HIWORD(v61) > 0x10u || v60 + 1 >= v28)
                break;
              if (v28 <= v60)
                goto LABEL_100;
              v59[v60] = (v61 >> 10) - 10304;
              v62 = v60 + 2;
              ++v60;
              LOWORD(v61) = v61 & 0x3FF | 0xDC00;
            }
            else
            {
              if (v28 <= v60)
                goto LABEL_100;
              v62 = v60 + 1;
            }
            v59[v60] = v61;
            v60 = v62;
            if ((unint64_t)v69 >= v24)
              goto LABEL_88;
          }
          v62 = v60;
LABEL_88:
          if (v28 >= v62)
          {
LABEL_89:
            v63 = (char *)&v59[v28];
            *(_WORD *)v63 = 32;
            WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v63 + 2, a5, __na);
            goto LABEL_90;
          }
        }
        goto LABEL_100;
      }
    }
LABEL_102:
    *a1 = 0;
    __break(0xC471u);
    JUMPOUT(0x198E58DA4);
  }
  if (!(_DWORD)v36)
  {
LABEL_101:
    v37 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_90;
  }
  if ((v36 & 0x80000000) != 0)
    goto LABEL_102;
  WTF::tryFastCompactMalloc((WTF *)(v36 + 20), &v69);
  v37 = v69;
  if (!v69)
    goto LABEL_102;
  v38 = v69 + 5;
  *v69 = 2;
  v37[1] = v36;
  *((_QWORD *)v37 + 1) = v37 + 5;
  v37[4] = 4;
  if ((_DWORD)v9 == 1)
  {
    *v38 = v10->i8[0];
  }
  else if ((_DWORD)v9)
  {
    memcpy(v37 + 5, v10, v9);
  }
  v54 = &v38[v9];
  *v54++ = 32;
  memcpy(v54, v13, v16);
  v55 = &v54[v16];
  *v55++ = 58;
  memcpy(v55, v15, v28);
  v55[v28] = 32;
  v56 = &v55[v28 + 1];
  a3 = (const char *)__na;
  if ((_DWORD)__na == 1)
  {
    *v56 = a5->i8[0];
LABEL_90:
    v57 = a1;
    goto LABEL_91;
  }
  v57 = a1;
  if ((_DWORD)__na)
    memcpy(v56, a5, __na);
LABEL_91:
  *v57 = v37;
  if (v15)
    WTF::fastFree((unint64_t)v15, a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
  if (v13)
    WTF::fastFree((unint64_t)v13, a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
}

uint64_t JSC::SymbolTable::find(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = *(_DWORD *)(a2 + 16);
    if ((v3 & 0x20) != 0)
      v3 = *(_DWORD *)(a2 + 32);
    v4 = v2 & (v3 >> 8);
    v5 = *(_QWORD *)(result + 16 * v4);
    if (v5 == a2)
    {
LABEL_8:
      result += 16 * v4;
    }
    else
    {
      v6 = 1;
      while (v5)
      {
        v4 = ((_DWORD)v4 + v6) & v2;
        v5 = *(_QWORD *)(result + 16 * v4);
        ++v6;
        if (v5 == a2)
          goto LABEL_8;
      }
      result += 16 * *(unsigned int *)(result - 4);
    }
  }
  return result;
}

uint64_t JSC::Wasm::Instance::setGlobal(JSC::Wasm::Instance *this, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = *((_QWORD *)this + 13);
  result = (uint64_t)this + 104;
  v4 = v5;
  v6 = (unint64_t *)(2 * v5);
  if (v5 < 0)
    v7 = 63;
  else
    v7 = *v6;
  v8 = (_QWORD *)(*(_QWORD *)(result - 24) + 16 * a2);
  if (v7 <= a2
    || ((v9 = v6 + 1, v4 >= 0) ? (v10 = (uint64_t)v9) : (v10 = result),
        ((*(_QWORD *)(v10 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1) == 0 || (v8 = (_QWORD *)*v8) != 0))
  {
    *v8 = a3;
  }
  return result;
}

_QWORD *JSC::Wasm::Instance::setGlobal(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v6 = *(_QWORD *)(a1 + 104);
  result = (_QWORD *)(a1 + 104);
  v5 = v6;
  v7 = (unint64_t *)(2 * v6);
  if (v6 < 0)
    v8 = 63;
  else
    v8 = *v7;
  v9 = (_QWORD *)(*(result - 3) + 16 * a2);
  if (v8 <= a2
    || ((v10 = v7 + 1, v5 >= 0) ? (v11 = v10) : (v11 = result),
        ((*(_QWORD *)((char *)v11 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) >> a2) & 1) == 0
     || (v9 = (_QWORD *)*v9) != 0))
  {
    *v9 = a3;
    v9[1] = a4;
  }
  return result;
}

unint64_t JSC::Wasm::internalizeExternref(unint64_t result)
{
  double v1;
  BOOL v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;

  *(_QWORD *)&v1 = result - 0x2000000000000;
  v2 = result - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL
    && ((result - 0x2000000000000) & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL;
  if (v2 && (double)(int)v1 == v1 && ((*(_QWORD *)&v1 & 0x8000000000000000) == 0 || (int)v1))
  {
    v3 = (*(_QWORD *)&v1 >> 52) & 0x7FFLL;
    if ((v3 - 1023) > 0x53)
    {
      v4 = 0;
      return v4 | 0xFFFE000000000000;
    }
    v5 = *(_QWORD *)&v1 >> (51 - (*(_QWORD *)&v1 >> 52));
    if (v3 > 0x433)
      LODWORD(v5) = result << ((*(_QWORD *)&v1 >> 52) - 51);
    if (v3 >= 0x41F)
      v6 = v5;
    else
      v6 = (((1 << ((*(_QWORD *)&v1 >> 52) + 1)) - 1) & v5) + (1 << ((*(_QWORD *)&v1 >> 52) + 1));
    if (v1 >= 0.0)
      v4 = v6;
    else
      v4 = -v6;
    if ((int)(v4 + 0x40000000) >= 0)
      return v4 | 0xFFFE000000000000;
  }
  return result;
}

void JSC::JSWebAssemblyInstance::linkGlobal(JSC::JSWebAssemblyInstance *this, JSC::VM *a2, unsigned int a3, JSC::JSWebAssemblyGlobal *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  WTF *v22;
  _BYTE v23[28];
  unsigned int v24;

  v10 = *((_QWORD *)this + 2);
  do
    v11 = __ldaxr((unsigned int *)a4);
  while (__stlxr(v11 + 1, (unsigned int *)a4));
  v22 = a4;
  v24 = a3;
  *(_QWORD *)(*(_QWORD *)(v10 + 80) + 16 * a3) = (char *)a4 + 40;
  WTF::HashMap<unsigned int,WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::Ref<JSC::Wasm::Global,WTF::RawPtrTraits<JSC::Wasm::Global>,WTF::DefaultRefDerefTraits<JSC::Wasm::Global>>>((uint64_t *)(v10 + 120), (int *)&v24, (uint64_t *)&v22, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v23);
  v19 = (unsigned int *)v22;
  v22 = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
}

void JSC::JSWebAssemblyInstance::setTable(JSC::JSWebAssemblyInstance *this, JSC::VM *a2, unsigned int a3, JSC::JSWebAssemblyTable *a4)
{
  unsigned int *v4;
  unsigned int v5;
  JSC::JSWebAssemblyInstance *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v25;

  v4 = (unsigned int *)*((_QWORD *)this + 8);
  if (*v4 <= a3)
    goto LABEL_14;
  v5 = a3;
  v6 = this;
  v7 = a3;
  *(_QWORD *)&v4[2 * a3 + 2] = a4;
  if (a4 && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
  {
    v22 = a3;
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
    v7 = v22;
    v6 = this;
    v5 = a3;
  }
  v8 = (unsigned int *)*((_QWORD *)v6 + 8);
  if (*v8 <= v5)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x198E59100);
  }
  v9 = *((_QWORD *)v6 + 2);
  v10 = *(unsigned int **)(*(_QWORD *)&v8[2 * v7 + 2] + 16);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v25 = v10;
  JSC::Wasm::Instance::setTable(v9, v5, (uint64_t *)&v25);
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      JSC::Wasm::Table::operator delete((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
    }
  }
}

unint64_t *WTF::Ref<JSC::Wasm::Tag const,WTF::RawPtrTraits<JSC::Wasm::Tag const>,WTF::DefaultRefDerefTraits<JSC::Wasm::Tag const>>::~Ref(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(unsigned int **)(v9 + 8);
      *(_QWORD *)(v9 + 8) = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          v16 = v9;
          WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
          v9 = v16;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void JSC::WebAssemblyModuleRecord::initializeExports(JSC::WebAssemblyModuleRecord *this, JSC::JSGlobalObject *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned __int8 v7;
  JSC::Wasm::CalleeGroup *v8;
  _DWORD *v9;
  uint64_t v10;
  JSC::Structure *V128Global;
  uint64_t v12;
  const JSC::Wasm::Type *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  int v25;
  WTF::StringImpl *v26;
  char v27;
  JSC::Wasm::Instance *v28;
  unsigned int v29;
  BOOL v30;
  char v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  JSC *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char v46;
  unsigned int *v47;
  unsigned int v48;
  int v49;
  int v50;
  JSC::VM *v51;
  JSC::JSObject *v52;
  const JSC::PropertyTable *v53;
  const JSC::Wasm::Type *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  __n128 v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF *v66;
  WTF *v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  WTF::StringImpl *v76;
  int v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  int v84;
  _BYTE *v85;
  uint64_t v86;
  JSC::VM *v87;
  WTF::AtomStringImpl *v88;
  unsigned __int16 *v89;
  uint64_t v90;
  unsigned int v91;
  BOOL v92;
  unsigned int v93;
  unsigned int v94;
  BOOL v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const JSC::Wasm::Type *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  WTF::StringImpl *v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  JSC *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  JSC::JSWebAssemblyTable *v153;
  unsigned int *v154;
  void *v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  WTF::AtomStringImpl *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  unsigned int v172;
  unsigned __int8 v173;
  JSC *v174;
  const WTF::String *v175;
  unint64_t JSWebAssemblyLinkError;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  WTF::StringImpl *v182;
  unint64_t v183;
  uint64_t v184;
  _BYTE *v185;
  int v186;
  uint64_t *v187;
  uint64_t v189;
  unsigned int *v190;
  JSC::VM *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _DWORD *v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unsigned int *v202;
  WTF::StringImpl *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  _QWORD *v228;
  JSC::Wasm::TypeInformation *v229;
  unint64_t v230;
  unint64_t v231;
  _DWORD *v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unsigned int *LocationFromFunctionIndexSpace;
  JSC *v238;
  unint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unsigned int *v257;
  unsigned int v258;
  unsigned int v259;
  WTF::StringImpl *v260;
  uint64_t v261;
  uint64_t v262;
  WTF::StringImpl *I64Global;
  JSC::Wasm::Instance *v264;
  uint64_t v265;
  uint64_t v266;
  char v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int *v270;
  int v271;
  uint64_t v272;
  JSC::Structure *v273;
  uint64_t v274;
  JSC *v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  JSC *v286;
  uint64_t v287;
  const WTF::String *v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  WTF::StringImpl *v295;
  uint64_t v296;
  char v297;
  JSC *v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  JSC *v304;
  uint64_t v305;
  const WTF::String *v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  void *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unint64_t v328;
  void *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v337;
  void *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  unsigned __int8 *v345;
  uint64_t v346;
  unsigned int v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  __int128 v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  WTF::StringImpl *v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  WTF *v361;
  WTF *v362;
  int v363;
  int v364;
  WTF::StringImpl *v365;
  WTF::StringImpl *v366;
  WTF::StringImpl *v367;
  uint64_t v368;
  WTF::StringImpl *v369[6];
  int v370;
  JSC::Wasm::CalleeGroup *v371;
  uint64_t v372;
  JSC *v373;

  v373 = a2;
  v2 = *((_QWORD *)this + 16);
  if (!v2)
  {
    __break(0xC471u);
    JUMPOUT(0x198E5A1CCLL);
  }
  v4 = *((_QWORD *)a2 + 7);
  v372 = *(_QWORD *)(v2 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)(v372 + 16) + 8);
  if (*(_BYTE *)(v5 + 113))
  {
    v6 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 56)
                             + 8
                             * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 64) + 8) + 6)
                             + 16);
    if (!v6 || (v7 = atomic_load((unsigned __int8 *)v6 + 112), (v7 & 1) == 0) || *((_QWORD *)v6 + 15))
    {
      v158 = JSC::JSWebAssemblyModule::module(*(JSC::JSWebAssemblyModule **)(*((_QWORD *)this + 16) + 40));
      JSC::Wasm::Module::compileSync(v158, v4, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 16) + 16) + 64) + 8) + 6), v159, v160, v161, v162, v163, (unsigned __int8 **)&v367);
      v6 = v367;
      v367 = 0;
      if (v6)
      {
        do
        {
          v171 = __ldaxr((unsigned int *)v6);
          v172 = v171 - 1;
        }
        while (__stlxr(v172, (unsigned int *)v6));
        if (!v172)
        {
          atomic_store(1u, (unsigned int *)v6);
          v369[0] = v6;
          WTF::ThreadSafeRefCounted<JSC::Wasm::CalleeGroup,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v369, v164, v165, v166, v167, v168, v169, v170);
        }
      }
      v173 = atomic_load((unsigned __int8 *)v6 + 112);
      if ((v173 & 1) == 0 || *((_QWORD *)v6 + 15))
      {
        v174 = v373;
        WTF::String::isolatedCopy((_DWORD *)v6 + 30, (uint64_t *)v369);
        JSWebAssemblyLinkError = JSC::createJSWebAssemblyLinkError((unint64_t)v174, (JSC::Heap **)v4, v369, v175);
        JSC::VM::throwException((JSC::VM *)v4, v373, JSWebAssemblyLinkError, v177, v178, v179, v180, v181);
        v182 = v369[0];
        v369[0] = 0;
        if (v182)
        {
          if (*(_DWORD *)v182 != 2)
          {
            *(_DWORD *)v182 -= 2;
            return;
          }
          goto LABEL_255;
        }
        return;
      }
    }
    if (!JSC::Wasm::CalleeGroup::isSafeToRun((uint64_t)v6, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 16) + 16) + 64)+ 8)+ 6)))
    {
      __break(0xC471u);
      JUMPOUT(0x198E5A27CLL);
    }
    v2 = *((_QWORD *)this + 16);
  }
  v371 = 0;
  v8 = *(JSC::Wasm::CalleeGroup **)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 56)
                                  + 8
                                  * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 64) + 8)
                                                       + 6)
                                  + 16);
  v371 = v8;
  if (*(_DWORD *)(v5 + 84))
  {
    v199 = 0;
    do
    {
      v200 = *(_QWORD *)(*((_QWORD *)this + 16) + 16);
      v201 = (*(_DWORD *)(v5 + 68) + v199);
      v202 = (unsigned int *)JSC::Wasm::TypeDefinition::expand(*(_QWORD *)(*(_QWORD *)(v5 + 72) + 8 * v199));
      v203 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v203 = 1;
      do
        v209 = __ldaxr(v202);
      while (__stlxr(v209 + 1, v202));
      *((_QWORD *)v203 + 1) = v202;
      v367 = 0;
      v369[0] = v203;
      JSC::Wasm::Instance::setTag(v200, (void *)v201, (uint64_t *)v369, v204, v205, v206, v207, v208);
      WTF::Ref<JSC::Wasm::Tag const,WTF::RawPtrTraits<JSC::Wasm::Tag const>,WTF::DefaultRefDerefTraits<JSC::Wasm::Tag const>>::~Ref((unint64_t *)v369, v210, v211, v212, v213, v214, v215, v216);
      WTF::Ref<JSC::Wasm::Tag const,WTF::RawPtrTraits<JSC::Wasm::Tag const>,WTF::DefaultRefDerefTraits<JSC::Wasm::Tag const>>::~Ref((unint64_t *)&v367, v217, v218, v219, v220, v221, v222, v223);
      ++v199;
    }
    while (v199 < *(unsigned int *)(v5 + 84));
    v8 = v371;
  }
  v370 = 0;
  v9 = (_DWORD *)*((_QWORD *)v8 + 9);
  if (v9)
    LODWORD(v9) = *v9;
  v370 = (int)v9;
  v369[0] = this;
  v369[1] = (WTF::StringImpl *)&v370;
  v369[2] = (WTF::StringImpl *)&v372;
  v369[3] = (WTF::StringImpl *)v4;
  v369[4] = (WTF::StringImpl *)&v373;
  v369[5] = (WTF::StringImpl *)&v371;
  v367 = (WTF::StringImpl *)WTF::BitVector::begin((uint64_t *)(v5 + 320));
  v368 = v10;
  v17 = *(_QWORD *)(v5 + 320);
  if (v17 < 0)
    v18 = 63;
  else
    v18 = *(_QWORD *)(2 * v17);
  while (v10 != v18)
  {
    JSC::WebAssemblyModuleRecord::initializeExports(JSC::JSGlobalObject *)::$_1::operator()((uint64_t *)v369, v10, (uint64_t)V128Global, v12, v13, v14, v15, v16);
    WTF::BitVector::iterator::operator++((unint64_t **)&v367);
    v10 = v368;
  }
  v19 = *(unsigned int *)(v5 + 204);
  if ((_DWORD)v19)
  {
    v122 = 0;
    while (1)
    {
      if (v122 >= v19)
      {
        __break(0xC471u);
        JUMPOUT(0x198E5A42CLL);
      }
      v123 = *(_QWORD *)(v5 + 192);
      v124 = (unsigned int *)(v123 + 48 * v122);
      v125 = *(unsigned int **)(*((_QWORD *)this + 16) + 64);
      v126 = *v125;
      if (*((_BYTE *)v124 + 12))
      {
        if (v122 >= v126)
        {
          __break(0xC471u);
          JUMPOUT(0x198E5A23CLL);
        }
        if (!*(_QWORD *)&v125[2 * v122 + 2])
        {
          __break(0xC471u);
          JUMPOUT(0x198E5A25CLL);
        }
      }
      if (v122 >= v126)
      {
        __break(0xC471u);
        JUMPOUT(0x198E5A1ECLL);
      }
      if (!*(_QWORD *)&v125[2 * v122 + 2])
        break;
LABEL_117:
      if (++v122 >= v19)
        goto LABEL_15;
    }
    if (*((_BYTE *)v124 + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x198E5A2F4);
    }
    JSC::Wasm::Table::tryCreate(*v124, *(_QWORD *)(v123 + 48 * v122 + 4), *(unsigned __int8 *)(v123 + 48 * v122 + 14), *(_QWORD *)(v123 + 48 * v122 + 16), *(_QWORD *)(v123 + 48 * v122 + 24), (uint64_t *)&v367);
    if (!v367)
    {
      v286 = v373;
      v287 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v287 = 0x1500000002;
      *(_QWORD *)(v287 + 8) = "couldn't create Table";
      *(_DWORD *)(v287 + 16) = 4;
      v366 = (WTF::StringImpl *)v287;
      v289 = JSC::createJSWebAssemblyLinkError((unint64_t)v286, (JSC::Heap **)v4, &v366, v288);
      JSC::VM::throwException((JSC::VM *)v4, v373, v289, v290, v291, v292, v293, v294);
      v295 = v366;
      v366 = 0;
      if (!v295)
        goto LABEL_215;
      goto LABEL_213;
    }
    if (v122 >= *(unsigned int *)(v5 + 204))
    {
      __break(0xC471u);
      JUMPOUT(0x198E5A434);
    }
    v133 = *(_QWORD *)(v5 + 192);
    v134 = v133 + 48 * v122;
    v135 = *(unsigned __int8 *)(v134 + 32);
    v136 = *(WTF::StringImpl **)(v134 + 40);
    v366 = v136;
    if (v135 == 4)
    {
      if ((unint64_t)v136 >= *(unsigned int *)(v5 + 300))
      {
        __break(0xC471u);
        JUMPOUT(0x198E5A43CLL);
      }
      JSC::WebAssemblyModuleRecord::evaluateConstantExpression(*(unsigned __int8 ***)(*((_QWORD *)this + 16) + 16), (uint64_t)v373, *(_QWORD *)(v5 + 288) + 16 * (_QWORD)v136, v5, *(_QWORD *)(v133 + 48 * v122 + 16), *(_QWORD *)(v133 + 48 * v122 + 24), &v366, v132);
      if (*(_DWORD *)(v4 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4, v313, v314, v315, v316, v317, v318, v319))
      {
        goto LABEL_215;
      }
    }
    else
    {
      if (v135 == 2)
      {
        I64Global = (WTF::StringImpl *)JSC::WebAssemblyModuleRecord::initializeExports(JSC::JSGlobalObject *)::$_1::operator()((uint64_t *)v369, v136, v127, v128, v129, v130, v131, v132);
      }
      else
      {
        if (v135 != 1)
          goto LABEL_130;
        I64Global = (WTF::StringImpl *)JSC::Wasm::Instance::loadI64Global(*(JSC::Wasm::Instance **)(*((_QWORD *)this + 16) + 16), v136);
      }
      v366 = I64Global;
    }
LABEL_130:
    v140 = v373;
    v141 = JSC::LazyClassStructure::get((JSC *)((char *)v373 + 1440), (unint64_t)v373);
    v365 = v367;
    v367 = 0;
    v153 = (JSC::JSWebAssemblyTable *)JSC::JSWebAssemblyTable::tryCreate((unint64_t)v140, (JSC *)v4, v141, (uint64_t *)&v365, v142, v143, v144, v145);
    v154 = (unsigned int *)v365;
    v365 = 0;
    if (v154)
    {
      do
      {
        v156 = __ldaxr(v154);
        v157 = v156 - 1;
      }
      while (__stlxr(v157, v154));
      if (!v157)
      {
        atomic_store(1u, v154);
        JSC::Wasm::Table::operator delete((unint64_t)v154, v146, v147, v148, v149, v150, v151, v152);
      }
    }
    JSC::JSWebAssemblyInstance::setTable(*((JSC::JSWebAssemblyInstance **)this + 16), (JSC::VM *)v4, v122, v153);
    if (*(_DWORD *)(v4 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4, (uint64_t)v155, (uint64_t)V128Global, v12, (uint64_t)v13, v14, v15, v16))
    {
      goto LABEL_215;
    }
    if (!v135)
      goto LABEL_209;
    v269 = *((_QWORD *)this + 16);
    v270 = *(unsigned int **)(v269 + 64);
    if (v122 >= *v270)
    {
      __break(0xC471u);
      JUMPOUT(0x198E5A350);
    }
    if ((JSC::Wasm::tableFill(*(JSC::Wasm **)(v269 + 16), (JSC::Wasm::Instance *)v122, (uint64_t)v366, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v270[2 * v122 + 2] + 16) + 4)) & 1) != 0)
    {
LABEL_209:
      v271 = 0;
      goto LABEL_124;
    }
    v304 = v373;
    v305 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v305 = 0x1A00000002;
    *(_QWORD *)(v305 + 8) = "failed to initialize Table";
    *(_DWORD *)(v305 + 16) = 4;
    v365 = (WTF::StringImpl *)v305;
    v307 = JSC::createJSWebAssemblyLinkError((unint64_t)v304, (JSC::Heap **)v4, &v365, v306);
    JSC::VM::throwException((JSC::VM *)v4, v373, v307, v308, v309, v310, v311, v312);
    v295 = v365;
    v365 = 0;
    if (!v295)
    {
LABEL_215:
      v271 = 1;
LABEL_124:
      v137 = (unsigned int *)v367;
      v367 = 0;
      if (v137)
      {
        do
        {
          v138 = __ldaxr(v137);
          v139 = v138 - 1;
        }
        while (__stlxr(v139, v137));
        if (!v139)
        {
          atomic_store(1u, v137);
          JSC::Wasm::Table::operator delete((unint64_t)v137, v155, (uint64_t)V128Global, v12, (uint64_t)v13, v14, v15, v16);
        }
      }
      if (v271)
        return;
      v19 = *(unsigned int *)(v5 + 204);
      goto LABEL_117;
    }
LABEL_213:
    if (*(_DWORD *)v295 == 2)
    {
      WTF::StringImpl::~StringImpl(v295, (WTF::AtomStringImpl *)v155, (uint64_t)V128Global, v12, (uint64_t)v13, v14, v15, v16);
      WTF::fastFree(v328, v329, v330, v331, v332, v333, v334, v335);
    }
    else
    {
      *(_DWORD *)v295 -= 2;
    }
    goto LABEL_215;
  }
LABEL_15:
  v20 = *(unsigned int *)(v5 + 224);
  if (v20 < *(_DWORD *)(v5 + 220))
  {
    while (1)
    {
      v21 = *(_QWORD *)(v5 + 208);
      v22 = v21 + 48 * v20;
      v24 = *(unsigned __int8 *)(v22 + 8);
      v23 = (uint64_t *)(v22 + 8);
      if (v24 != 251 || *(_QWORD *)(v21 + 48 * v20 + 16))
        break;
      v49 = *(unsigned __int8 *)(v21 + 48 * v20 + 24);
      if (v49 == 3)
      {
        v262 = v21 + 48 * v20;
        V128Global = *(JSC::Structure **)(v262 + 32);
        v12 = *(_QWORD *)(v262 + 40);
      }
      else
      {
        if (v49 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198E5A3FCLL);
        }
        V128Global = (JSC::Structure *)JSC::Wasm::Instance::loadV128Global(*(JSC::Wasm::Instance **)(*((_QWORD *)this + 16) + 16), *(_DWORD *)(v21 + 48 * v20 + 32));
        v12 = v261;
      }
      if (*(_BYTE *)(v21 + 48 * v20 + 25) != 1)
      {
        if (!*(_BYTE *)(v21 + 48 * v20 + 25))
          JSC::Wasm::Instance::setGlobal(*(_QWORD *)(*((_QWORD *)this + 16) + 16), v20, (uint64_t)V128Global, v12);
        goto LABEL_27;
      }
      v272 = *v23;
      v273 = V128Global;
      v359 = v12;
      v274 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v274 = 1;
      *(_QWORD *)(v274 + 8) = v272;
      *(_QWORD *)(v274 + 16) = 0;
      *(_BYTE *)(v274 + 24) = 1;
      *(_QWORD *)(v274 + 32) = 0;
      *(_QWORD *)(v274 + 40) = v273;
      *(_QWORD *)(v274 + 48) = v359;
      v367 = (WTF::StringImpl *)v274;
      v275 = v373;
      v276 = JSC::JSGlobalObject::webAssemblyGlobalStructure((unint64_t)v373);
      v281 = JSC::JSWebAssemblyGlobal::tryCreate((uint64_t)v275, (JSC *)v4, v276, (uint64_t *)&v367, v277, v278, v279, v280);
      JSC::JSWebAssemblyInstance::linkGlobal(*((JSC::JSWebAssemblyInstance **)this + 16), (JSC::VM *)v4, v20, *(JSC::JSWebAssemblyGlobal **)(v281 + 16), v282, v283, v284, v285);
      v47 = (unsigned int *)v367;
      v367 = 0;
      if (v47)
      {
        do
        {
          v29 = __ldaxr(v47);
          v30 = --v29 == 0;
        }
        while (__stlxr(v29, v47));
LABEL_184:
        if (v30)
        {
          atomic_store(1u, v47);
          WTF::fastFree((unint64_t)v47, v45, (uint64_t)V128Global, v12, (uint64_t)v13, v14, v15, v16);
        }
      }
LABEL_27:
      if (++v20 >= (unint64_t)*(unsigned int *)(v5 + 220))
        goto LABEL_55;
    }
    v367 = 0;
    v25 = *(unsigned __int8 *)(v21 + 48 * v20 + 24);
    if (v25 == 1)
    {
      v26 = (WTF::StringImpl *)JSC::Wasm::Instance::loadI64Global(*(JSC::Wasm::Instance **)(*((_QWORD *)this + 16) + 16), *(_DWORD *)(v21 + 48 * v20 + 32));
    }
    else
    {
      if (v25 != 2)
      {
        if (v25 == 5)
        {
          v235 = *(_QWORD *)(v21 + 48 * v20 + 32);
          if (v235 >= *(unsigned int *)(v5 + 300))
          {
            __break(0xC471u);
            JUMPOUT(0x198E5A424);
          }
          JSC::WebAssemblyModuleRecord::evaluateConstantExpression(*(unsigned __int8 ***)(*((_QWORD *)this + 16) + 16), (uint64_t)v373, *(_QWORD *)(v5 + 288) + 16 * v235, v5, *v23, *(_QWORD *)(v21 + 48 * v20 + 16), &v367, v16);
          if (*(_DWORD *)(v4 + 80)
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4, v236, (uint64_t)V128Global, v12, (uint64_t)v13, v14, v15, v16))
          {
            return;
          }
        }
        else
        {
          v367 = *(WTF::StringImpl **)(v21 + 48 * v20 + 32);
        }
        goto LABEL_21;
      }
      v26 = (WTF::StringImpl *)JSC::WebAssemblyModuleRecord::initializeExports(JSC::JSGlobalObject *)::$_1::operator()((uint64_t *)v369, *(_DWORD *)(v21 + 48 * v20 + 32), (uint64_t)V128Global, v12, v13, v14, v15, v16);
    }
    v367 = v26;
LABEL_21:
    if (*(_BYTE *)(v21 + 48 * v20 + 25))
    {
      if (*(_BYTE *)(v21 + 48 * v20 + 25) != 1)
        goto LABEL_27;
      if (BYTE1(dword_1ECF4C7B0))
        v31 = 29;
      else
        v31 = 17;
      v355 = v367;
      v351 = *(_OWORD *)v23;
      if (((v31 + *(_OWORD *)v23) & 0xFE) != 0)
        v32 = v367;
      else
        v32 = 0;
      v33 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v33 = 1;
      *(_OWORD *)(v33 + 8) = v351;
      *(_BYTE *)(v33 + 24) = 1;
      *(_QWORD *)(v33 + 40) = v32;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 32) = 0;
      v366 = (WTF::StringImpl *)v33;
      v34 = v373;
      v35 = JSC::JSGlobalObject::webAssemblyGlobalStructure((unint64_t)v373);
      v40 = JSC::JSWebAssemblyGlobal::tryCreate((uint64_t)v34, (JSC *)v4, v35, (uint64_t *)&v366, v36, v37, v38, v39);
      JSC::JSWebAssemblyInstance::linkGlobal(*((JSC::JSWebAssemblyInstance **)this + 16), (JSC::VM *)v4, v20, *(JSC::JSWebAssemblyGlobal **)(v40 + 16), v41, v42, v43, v44);
      if (BYTE1(dword_1ECF4C7B0))
        v46 = 29;
      else
        v46 = 17;
      if ((v46 + *(_BYTE *)v23) <= 1u)
        JSC::Wasm::Instance::setGlobal(*(_QWORD **)(*((_QWORD *)this + 16) + 16), v20, (uint64_t)v355);
      v47 = (unsigned int *)v366;
      v366 = 0;
      if (!v47)
        goto LABEL_27;
      do
      {
        v48 = __ldaxr(v47);
        v30 = --v48 == 0;
      }
      while (__stlxr(v48, v47));
      goto LABEL_184;
    }
    if (BYTE1(dword_1ECF4C7B0))
      v27 = 29;
    else
      v27 = 17;
    v28 = *(JSC::Wasm::Instance **)(*((_QWORD *)this + 16) + 16);
    if ((v27 + *(_BYTE *)v23) <= 1u)
      JSC::Wasm::Instance::setGlobal(v28, v20, (uint64_t)v367);
    else
      JSC::Wasm::Instance::setGlobal(v28, v20, (uint64_t)v367);
    goto LABEL_27;
  }
LABEL_55:
  v50 = *((_DWORD *)v373 + 233);
  if (v50)
    v51 = (JSC::VM *)(16 * (v50 & 0xFFFFFFFE));
  else
    v51 = 0;
  v58 = (int *)JSC::constructEmptyObject((JSC *)v4, v51, V128Global, v12, (uint64_t)v13, v14, v15, v16);
  v60 = *(_DWORD *)(v5 + 148);
  if (v60)
  {
    v61 = *((_QWORD *)this + 14);
    v62 = *(_QWORD *)(v5 + 136);
    v63 = v62 + 24 * v60;
    while (1)
    {
      if (*(_BYTE *)(v62 + 16))
      {
        switch(*(_BYTE *)(v62 + 16))
        {
          case 1:
            v113 = *(unsigned int *)(v62 + 20);
            v114 = *(_DWORD **)(*((_QWORD *)this + 16) + 64);
            if (*v114 <= v113)
            {
              __break(0xC471u);
              JUMPOUT(0x198E5A2D4);
            }
            v65 = *(_QWORD *)&v114[2 * v113 + 2];
            if (!v65)
            {
              __break(0xC471u);
              JUMPOUT(0x198E597B0);
            }
            break;
          case 2:
            v65 = *(_QWORD *)(*((_QWORD *)this + 16) + 56);
            break;
          case 3:
            v183 = *(unsigned int *)(v62 + 20);
            if (*(_DWORD *)(v5 + 220) <= v183)
            {
              __break(0xC471u);
              JUMPOUT(0x198E5A444);
            }
            v184 = *(_QWORD *)(v5 + 208);
            v185 = (_BYTE *)(v184 + 48 * v183);
            v187 = (uint64_t *)(v185 + 8);
            v186 = v185[8];
            if ((v186 - 227) > 0x1C || ((1 << (v186 + 29)) & 0x1F003003) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198E5A41CLL);
            }
            if (*(_BYTE *)(v184 + 48 * v183 + 25))
            {
              v189 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 16) + 16) + 80) + 16 * v183);
              if (!v189)
              {
                v65 = MEMORY[0x20];
                break;
              }
              v190 = (unsigned int *)(v189 - 40);
              do
                v93 = __ldaxr(v190);
              while (__stlxr(v93 + 1, v190));
              v65 = *(_QWORD *)(v189 - 8);
              do
              {
                v94 = __ldaxr(v190);
                v95 = --v94 == 0;
              }
              while (__stlxr(v94, v190));
            }
            else
            {
              v264 = *(JSC::Wasm::Instance **)(*((_QWORD *)this + 16) + 16);
              v357 = (uint64_t *)(v184 + 48 * v183 + 16);
              if (v186 == 251)
              {
                v265 = JSC::Wasm::Instance::loadV128Global(v264, v183);
                v349 = v266;
                v353 = v265;
                v348 = *v187;
                v358 = *v357;
                v267 = *v185;
                v268 = WTF::fastMalloc((WTF *)0x38);
                *(_DWORD *)v268 = 1;
                *(_QWORD *)(v268 + 8) = v348;
                *(_QWORD *)(v268 + 16) = v358;
                *(_BYTE *)(v268 + 24) = v267;
                *(_QWORD *)(v268 + 32) = 0;
                *(_QWORD *)(v268 + 40) = v353;
                *(_QWORD *)(v268 + 48) = v349;
              }
              else
              {
                v296 = JSC::Wasm::Instance::loadI64Global(v264, v183);
                v350 = *v187;
                v354 = v296;
                v360 = *v357;
                v297 = *v185;
                v268 = WTF::fastMalloc((WTF *)0x38);
                *(_DWORD *)v268 = 1;
                *(_QWORD *)(v268 + 8) = v350;
                *(_QWORD *)(v268 + 16) = v360;
                *(_BYTE *)(v268 + 24) = v297;
                *(_QWORD *)(v268 + 32) = 0;
                *(_QWORD *)(v268 + 40) = v354;
                *(_QWORD *)(v268 + 48) = 0;
              }
              v298 = v373;
              v299 = JSC::JSGlobalObject::webAssemblyGlobalStructure((unint64_t)v373);
              v367 = (WTF::StringImpl *)v268;
              v65 = JSC::JSWebAssemblyGlobal::tryCreate((uint64_t)v298, (JSC *)v4, v299, (uint64_t *)&v367, v300, v301, v302, v303);
              v190 = (unsigned int *)v367;
              v367 = 0;
              if (!v190)
                break;
              do
              {
                v112 = __ldaxr(v190);
                v95 = --v112 == 0;
              }
              while (__stlxr(v112, v190));
            }
            if (v95)
            {
              atomic_store(1u, v190);
              WTF::fastFree((unint64_t)v190, (void *)v183, (uint64_t)v52, (uint64_t)v53, (uint64_t)v54, v55, v56, v57);
            }
            break;
          case 4:
            v191 = v373;
            v192 = JSC::LazyClassStructure::get((JSC *)((char *)v373 + 1456), (unint64_t)v373);
            v197 = *(unsigned int *)(v62 + 20);
            v198 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)this + 16) + 16) + 144);
            if (*v198 <= v197)
            {
              __break(0xC471u);
              JUMPOUT(0x198E5A2B4);
            }
            v64 = JSC::JSWebAssemblyTag::create((JSC *)v4, v191, v192, *(unsigned int **)&v198[2 * v197 + 2], v193, v194, v195, v196);
            goto LABEL_62;
          default:
            v65 = 0;
            break;
        }
      }
      else
      {
        v64 = JSC::WebAssemblyModuleRecord::initializeExports(JSC::JSGlobalObject *)::$_1::operator()((uint64_t *)v369, *(_DWORD *)(v62 + 20), (uint64_t)v52, (uint64_t)v53, v54, v55, v56, v57);
LABEL_62:
        v65 = v64;
      }
      v66 = (WTF *)*(unsigned int *)(v62 + 12);
      v362 = 0;
      v363 = 0;
      v364 = (int)v66;
      if ((_DWORD)v66)
      {
        v67 = (WTF *)WTF::fastMalloc(v66);
        v363 = (int)v66;
        v362 = v67;
        memcpy(v67, *(const void **)v62, *(unsigned int *)(v62 + 12));
      }
      WTF::makeAtomString<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v362, (WTF::AtomString *)&v367);
      v76 = v367;
      if (v367)
      {
        v77 = *(_DWORD *)v367;
        *(_DWORD *)v367 += 2;
        v367 = 0;
        if (v77)
        {
          *(_DWORD *)v76 = v77;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v76, v68, v69, v70, v71, v72, v73, v74);
          WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
        }
      }
      else
      {
        v367 = 0;
      }
      v78 = v362;
      if (v362)
      {
        v362 = 0;
        v363 = 0;
        WTF::fastFree((unint64_t)v78, v68, v69, v70, v71, v72, v73, v74);
      }
      LOBYTE(v367) = 0;
      JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,JSC::JSModuleEnvironment>(v61, (unint64_t)v373, (uint64_t)v76, v65, 0, 1, &v367, v74, v75);
      if (!(_BYTE)v367)
      {
        __break(0xC471u);
        JUMPOUT(0x198E5A16CLL);
      }
      if (!v76)
        break;
      v84 = *((_DWORD *)v76 + 4);
      if ((v84 & 0x20) != 0)
        break;
      v85 = (_BYTE *)*((_QWORD *)v76 + 1);
      v86 = *((unsigned int *)v76 + 1);
      if ((v84 & 4) != 0)
      {
        if (!(_DWORD)v86)
          break;
        v87 = (JSC::VM *)(*v85 - 48);
        if (v87 > 9 || v86 >= 2 && *v85 == 48)
          break;
        v345 = v85 + 1;
        v346 = v86 - 1;
        while (v346)
        {
          if (v87 <= 0x19999999)
          {
            v347 = *v345 - 48;
            if (v347 <= 9)
            {
              v92 = __CFADD__(v347, 10 * (_DWORD)v87);
              v87 = (JSC::VM *)(v347 + 10 * (_DWORD)v87);
              ++v345;
              --v346;
              if (!v92)
                continue;
            }
          }
          goto LABEL_76;
        }
      }
      else
      {
        if (!(_DWORD)v86)
          break;
        v87 = (JSC::VM *)(*(unsigned __int16 *)v85 - 48);
        if (v87 > 9 || *(_WORD *)v85 == 48 && v86 > 1)
          break;
        v89 = (unsigned __int16 *)(v85 + 2);
        v90 = v86 - 1;
        while (v90)
        {
          if (v87 <= 0x19999999)
          {
            v91 = *v89 - 48;
            if (v91 <= 9)
            {
              v92 = __CFADD__(v91, 10 * (_DWORD)v87);
              v87 = (JSC::VM *)(v91 + 10 * (_DWORD)v87);
              ++v89;
              --v90;
              if (!v92)
                continue;
            }
          }
          goto LABEL_76;
        }
      }
      if ((_DWORD)v87 == -1)
        break;
      JSC::JSObject::putDirectIndex((unint64_t)v58, (unint64_t)v373, v87, v65, v79, v80, v81, v82, (int32x4_t)v83);
      if (*(_DWORD *)(v4 + 80))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4, (uint64_t)v88, (uint64_t)v52, (uint64_t)v53, (uint64_t)v54, v55, v56, v57))
        {
          if (*(_DWORD *)v76 != 2)
          {
            *(_DWORD *)v76 -= 2;
            return;
          }
          v182 = v76;
LABEL_255:
          WTF::StringImpl::~StringImpl(v182, v88, (uint64_t)v52, (uint64_t)v53, (uint64_t)v54, v55, v56, v57);
          WTF::fastFree(v337, v338, v339, v340, v341, v342, v343, v344);
          return;
        }
      }
LABEL_77:
      if (v76)
      {
        if (*(_DWORD *)v76 == 2)
        {
          WTF::StringImpl::~StringImpl(v76, v88, (uint64_t)v52, (uint64_t)v53, (uint64_t)v54, v55, v56, v57);
          WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
        }
        else
        {
          *(_DWORD *)v76 -= 2;
        }
      }
      v62 += 24;
      if (v62 == v63)
        goto LABEL_105;
    }
LABEL_76:
    JSC::JSObject::putDirect(v58, v4, (unint64_t)v76, v65, 0, v83, v80, v81, v82);
    goto LABEL_77;
  }
LABEL_105:
  JSC::objectConstructorFreeze(v373, (JSC::JSGlobalObject *)v58, v52, v53, (uint64_t)v54, v55, v56, v57, v59);
  if (!*(_DWORD *)(v4 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4, v115, v116, v117, v118, v119, v120, v121))
  {
    *((_QWORD *)this + 18) = v58;
    if (this && v58 && *(_DWORD *)(v4 + 760) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath(v4 + 192, (unint64_t)this);
    if (*(_BYTE *)(v5 + 156))
    {
      v224 = *(unsigned int *)(v5 + 152);
      v225 = *(_QWORD *)(*(_QWORD *)(v372 + 16) + 8);
      v226 = *(unsigned int *)(v225 + 36);
      if (v226 > v224)
      {
        v228 = (_QWORD *)(v225 + 24);
        v227 = v224;
      }
      else
      {
        v227 = v224 - v226;
        if (v227 >= *(unsigned int *)(v225 + 52))
        {
          __break(0xC471u);
          JUMPOUT(0x198E5A44CLL);
        }
        v228 = (_QWORD *)(v225 + 40);
      }
      v229 = *(JSC::Wasm::TypeInformation **)(*v228 + 8 * v227);
      v230 = JSC::Wasm::TypeDefinition::expand((unint64_t)v229);
      if (*(_DWORD *)(v230 + 32))
        v231 = 0;
      else
        v231 = v230 + 8;
      v232 = (_DWORD *)*((_QWORD *)v371 + 9);
      if (v232 && v224 < *v232)
      {
        v233 = *(_QWORD *)(*((_QWORD *)this + 16) + 16);
        if (*(_DWORD *)(v233 + 112) <= v224)
        {
          __break(0xC471u);
          JUMPOUT(0x198E5A370);
        }
        v234 = *(_QWORD *)(v233 + 120 * v224 + 176);
        *((_QWORD *)this + 17) = v234;
        if (!this || !v234)
          return;
      }
      else
      {
        v356 = JSC::Wasm::CalleeGroup::jsEntrypointCalleeFromFunctionIndexSpace(v371, v224);
        v352 = JSC::Wasm::CalleeGroup::wasmCalleeFromFunctionIndexSpace(v371, v224);
        LocationFromFunctionIndexSpace = JSC::Wasm::CalleeGroup::entrypointLoadLocationFromFunctionIndexSpace(v371, v224);
        v238 = v373;
        v239 = JSC::JSGlobalObject::webAssemblyFunctionStructure((unint64_t)v373);
        v240 = *(_DWORD *)(v231 + 8);
        v241 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v241 = 0x500000002;
        *(_QWORD *)(v241 + 8) = "start";
        *(_DWORD *)(v241 + 16) = 4;
        v367 = (WTF::StringImpl *)v241;
        v242 = *((_QWORD *)this + 16);
        JSC::Wasm::TypeInformation::getCanonicalRTT(v229, v243, v244, v245, v246, v247, v248, (unsigned int **)&v361);
        v256 = JSC::WebAssemblyFunction::create(v4, (uint64_t)v238, v239, v240, (const WTF::String *)&v367, v242, v356, v352, (uint64_t)LocationFromFunctionIndexSpace, (uint64_t)v229, (unsigned int **)&v361);
        v257 = (unsigned int *)v361;
        v361 = 0;
        if (v257)
        {
          do
          {
            v258 = __ldaxr(v257);
            v259 = v258 - 1;
          }
          while (__stlxr(v259, v257));
          if (!v259)
          {
            atomic_store(1u, v257);
            WTF::fastFree((unint64_t)v257, v249, v250, v251, v252, v253, v254, v255);
          }
        }
        v260 = v367;
        v367 = 0;
        if (v260)
        {
          if (*(_DWORD *)v260 == 2)
          {
            WTF::StringImpl::~StringImpl(v260, (WTF::AtomStringImpl *)v249, v250, v251, v252, v253, v254, v255);
            WTF::fastFree(v320, v321, v322, v323, v324, v325, v326, v327);
          }
          else
          {
            *(_DWORD *)v260 -= 2;
          }
        }
        *((_QWORD *)this + 17) = v256;
        if (!this || !v256)
          return;
      }
      if (*(_DWORD *)(v4 + 760) >= *((unsigned __int8 *)this + 7))
        JSC::Heap::writeBarrierSlowPath(v4 + 192, (unint64_t)this);
    }
  }
}

unint64_t JSC::WebAssemblyModuleRecord::initializeExports(JSC::JSGlobalObject *)::$_1::operator()(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, const JSC::Wasm::Type *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  char **v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  JSC::Wasm::TypeInformation *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD *v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  JSC::Wasm::TypeDefinition *v64;
  int v65;
  char *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  BOOL v74;
  WTF *v75;
  uint64_t v76;
  char *v77;
  unsigned int v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  WTF::StringImpl *v90;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t (*v116)(WTF **);
  WTF **v117;
  uint64_t (*v118)(WTF **);
  WTF **v119;
  unsigned int *v120;
  WTF *v121;
  uint64_t *v122;
  unint64_t v123;
  _BOOL4 hasRecursiveReference;
  unint64_t CachedUnrolling;
  char v126;
  const JSC::Wasm::TypeDefinition *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  WTF *v136;
  WTF::StringImpl *v137;
  unsigned int *v138;
  WTF *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 128);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v11 + 88);
  if (!v12)
    goto LABEL_7;
  v13 = *(_DWORD *)(v12 - 8);
  v14 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
  v16 = v13 & (v15 ^ HIWORD(v15));
  v17 = *(_DWORD *)(v12 + 16 * v16);
  if (v17 != a2)
  {
    v18 = 1;
    while (v17 != -1)
    {
      v16 = ((_DWORD)v16 + v18) & v13;
      v17 = *(_DWORD *)(v12 + 16 * v16);
      ++v18;
      if (v17 == a2)
        goto LABEL_6;
    }
LABEL_7:
    if (*(_DWORD *)a1[1] > a2)
    {
      if (*(_DWORD *)(v11 + 112) <= a2)
      {
        __break(0xC471u);
        JUMPOUT(0x198E5AAA4);
      }
      v19 = *(_QWORD *)(v11 + 120 * a2 + 176);
      if ((v19 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
      {
        v20 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C));
        if (v20 == &JSC::WebAssemblyFunction::s_info || v20 == &JSC::WebAssemblyWrapperFunction::s_info)
          goto LABEL_70;
      }
      v22 = a2;
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1[2] + 16) + 8);
      v24 = *(unsigned int *)(v23 + 36);
      if (v24 > a2)
      {
        v25 = (_QWORD *)(v23 + 24);
      }
      else
      {
        v22 = a2 - v24;
        if (v22 >= *(unsigned int *)(v23 + 52))
        {
          __break(0xC471u);
          JUMPOUT(0x198E5AC38);
        }
        v25 = (_QWORD *)(v23 + 40);
      }
      v26 = *(JSC::Wasm::TypeInformation **)(*v25 + 8 * v22);
      v28 = a1[3];
      v27 = (uint64_t *)a1[4];
      v29 = *v27;
      v30 = *(_QWORD *)(*v27 + 1272);
      if ((v30 & 1) != 0)
      {
        v116 = *(uint64_t (**)(WTF **))(v30 & 0xFFFFFFFFFFFFFFFCLL);
        v117 = (WTF **)(v29 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v29 & 8) != 0)
          v117 = (WTF **)(v29 - 16);
        v139 = *v117;
        v140 = v29;
        v141 = v29 + 1272;
        v30 = v116(&v139);
        v10 = *(_QWORD *)(v9 + 128);
      }
      if (!BYTE2(dword_1ECF4C7B0))
        goto LABEL_20;
      JSC::Wasm::TypeInformation::tryGetCanonicalRTT(v26, a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)&v139);
      if ((_BYTE)v140)
      {
        v99 = (unsigned int *)v139;
        if (v139)
        {
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 + 1, v99));
          v138 = v99;
          if ((_BYTE)v140)
          {
            v101 = (unsigned int *)v139;
            v139 = 0;
            if (v101)
            {
              do
              {
                v102 = __ldaxr(v101);
                v103 = v102 - 1;
              }
              while (__stlxr(v103, v101));
              if (!v103)
              {
                atomic_store(1u, v101);
                WTF::fastFree((unint64_t)v101, v92, v93, v94, v95, v96, v97, v98);
              }
            }
          }
          goto LABEL_21;
        }
LABEL_20:
        v138 = 0;
LABEL_21:
        v19 = JSC::WebAssemblyWrapperFunction::create(v28, v29, v30, v19, a2, v10, (uint64_t)v26, (uint64_t *)&v138);
        v38 = v138;
        v138 = 0;
        if (!v38)
          goto LABEL_70;
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (v40)
          goto LABEL_70;
        atomic_store(1u, v38);
        goto LABEL_74;
      }
      goto LABEL_109;
    }
    v41 = *(_QWORD **)a1[5];
    v42 = (unsigned int *)v41[9];
    if (v42)
    {
      v43 = *v42;
      if (*v42 > a2)
        goto LABEL_112;
    }
    else
    {
      v43 = 0;
    }
    v44 = v41[6];
    if (!v44)
    {
LABEL_72:
      __break(0xC471u);
      JUMPOUT(0x198E5A998);
    }
    v45 = a2 - v43;
    v46 = *(_DWORD *)(v44 - 8);
    v47 = 9 * ((v45 + ~(v45 << 15)) ^ ((v45 + ~(v45 << 15)) >> 10));
    v48 = (v47 ^ (v47 >> 6)) + ~((v47 ^ (v47 >> 6)) << 11);
    v49 = v46 & (v48 ^ HIWORD(v48));
    v50 = *(_DWORD *)(v44 + 16 * v49);
    if (v50 != v45)
    {
      v51 = 1;
      while (v50 != -1)
      {
        v49 = ((_DWORD)v49 + v51) & v46;
        v50 = *(_DWORD *)(v44 + 16 * v49);
        ++v51;
        if (v50 == v45)
          goto LABEL_34;
      }
      goto LABEL_72;
    }
LABEL_34:
    v52 = *(_QWORD *)(v44 + 16 * v49 + 8);
    if (!v52)
      goto LABEL_72;
    if (v42)
    {
      v53 = *v42;
      v54 = a2 - *v42;
      if (a2 < *v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198E5AB04);
      }
      v55 = (unsigned int *)v41[8];
      if (*v55 <= v54)
      {
LABEL_98:
        __break(0xC471u);
        JUMPOUT(0x198E5AB24);
      }
    }
    else
    {
      v55 = (unsigned int *)v41[8];
      if (*v55 <= a2)
        goto LABEL_98;
      v53 = 0;
      v54 = a2;
    }
    v56 = a2 - v53;
    v57 = (_DWORD *)v41[7];
    if (*v57 <= a2 - v53)
    {
      __break(0xC471u);
      JUMPOUT(0x198E5AB44);
    }
    v58 = *(_QWORD *)&v55[2 * v54 + 2];
    v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1[2] + 16) + 8);
    v60 = a2;
    v61 = *(unsigned int *)(v59 + 36);
    v134 = v58;
    v135 = v52;
    if (v61 > a2)
    {
      v62 = (_QWORD *)(v59 + 24);
    }
    else
    {
      v60 = a2 - v61;
      if (v60 >= *(unsigned int *)(v59 + 52))
      {
LABEL_112:
        __break(0xC471u);
        JUMPOUT(0x198E5A680);
      }
      v62 = (_QWORD *)(v59 + 40);
    }
    v63 = *(_QWORD *)(*v62 + 8 * v60);
    v64 = (JSC::Wasm::TypeDefinition *)v63;
    if (*(_DWORD *)(v63 + 32) == 4)
    {
      v120 = *(unsigned int **)(v63 + 8);
      v121 = *(WTF **)v120;
      v64 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v120 + 8) + 8 * v120[2]);
      v122 = a1;
      hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v64);
      a1 = v122;
      if (hasRecursiveReference)
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v63, v123, a3, a4, (uint64_t)a5, a6, a7, a8);
        if (v126)
        {
          v64 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v64 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v64, v121, a3, a4, a5, a6, a7, a8);
          JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v63, v64, v127, v128, v129, v130, v131, v132);
        }
        a1 = v122;
      }
    }
    v65 = *((_DWORD *)v64 + 8);
    if (v65 == 5)
    {
      v64 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v64 + 1);
      v65 = *((_DWORD *)v64 + 8);
    }
    v133 = (uint64_t)&v57[2 * v56 + 2];
    if (v65)
      v66 = 0;
    else
      v66 = (char *)v64 + 8;
    v68 = a1[3];
    v67 = (uint64_t *)a1[4];
    v69 = *v67;
    v70 = *(_QWORD *)(*v67 + 1264);
    if ((v70 & 1) != 0)
    {
      v118 = *(uint64_t (**)(WTF **))(v70 & 0xFFFFFFFFFFFFFFFCLL);
      v119 = (WTF **)(v69 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v69 & 8) != 0)
        v119 = (WTF **)(v69 - 16);
      v139 = *v119;
      v140 = v69;
      v141 = v69 + 1264;
      v70 = v118(&v139);
    }
    LODWORD(v71) = 0;
    v72 = *((_DWORD *)v66 + 2);
    v73 = a2;
    do
    {
      v71 = (v71 + 1);
      v74 = v73 > 9;
      v73 /= 0xAu;
    }
    while (v74);
    if ((v71 & 0x80000000) == 0)
    {
      if (!(_DWORD)v71)
      {
        v75 = (WTF *)&WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
LABEL_61:
        v137 = v75;
        v79 = *(_QWORD *)(v9 + 128);
        if (!BYTE2(dword_1ECF4C7B0))
          goto LABEL_62;
        JSC::Wasm::TypeInformation::tryGetCanonicalRTT((JSC::Wasm::TypeInformation *)v63, a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)&v139);
        if (!(_BYTE)v140)
        {
LABEL_109:
          std::__throw_bad_optional_access[abi:sn180100]();
          goto LABEL_110;
        }
        v111 = (unsigned int *)v139;
        if (v139)
        {
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 + 1, v111));
          v136 = (WTF *)v111;
          if ((_BYTE)v140)
          {
            v113 = (unsigned int *)v139;
            v139 = 0;
            if (v113)
            {
              do
              {
                v114 = __ldaxr(v113);
                v115 = v114 - 1;
              }
              while (__stlxr(v115, v113));
              if (!v115)
              {
                atomic_store(1u, v113);
                WTF::fastFree((unint64_t)v113, v104, v105, v106, v107, v108, v109, v110);
              }
            }
          }
        }
        else
        {
LABEL_62:
          v136 = 0;
        }
        v19 = JSC::WebAssemblyFunction::create(v68, v69, v70, v72, (const WTF::String *)&v137, v79, v135, v134, v133, v63, (unsigned int **)&v136);
        v87 = (unsigned int *)v136;
        v136 = 0;
        if (v87)
        {
          do
          {
            v88 = __ldaxr(v87);
            v89 = v88 - 1;
          }
          while (__stlxr(v89, v87));
          if (!v89)
          {
            atomic_store(1u, v87);
            WTF::fastFree((unint64_t)v87, v80, v81, v82, v83, v84, v85, v86);
          }
        }
        v90 = v137;
        v137 = 0;
        if (!v90)
          goto LABEL_70;
        if (*(_DWORD *)v90 != 2)
        {
          *(_DWORD *)v90 -= 2;
LABEL_70:
          JSC::Wasm::Instance::setFunctionWrapper(*(_QWORD *)(*(_QWORD *)(v9 + 128) + 16), a2, v19);
          return v19;
        }
        WTF::StringImpl::~StringImpl(v90, (WTF::AtomStringImpl *)v80, v81, v82, v83, v84, v85, v86);
LABEL_74:
        WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
        goto LABEL_70;
      }
      WTF::tryFastCompactMalloc((WTF *)(v71 + 20), &v139);
      v75 = v139;
      if (v139)
      {
        v76 = 0;
        v77 = (char *)v139 + 20;
        *(_DWORD *)v139 = 2;
        *((_DWORD *)v75 + 1) = v71;
        *((_QWORD *)v75 + 1) = (char *)v75 + 20;
        *((_DWORD *)v75 + 4) = 4;
        v78 = a2;
        do
        {
          *((_BYTE *)&v140 + v76-- + 4) = (v78 % 0xA) | 0x30;
          v74 = v78 > 9;
          v78 /= 0xAu;
        }
        while (v74);
        if (v76 + 14 <= 13)
          memcpy(v77, (char *)&v140 + v76 + 5, -v76);
        goto LABEL_61;
      }
    }
LABEL_110:
    __break(0xC471u);
    JUMPOUT(0x198E5AC30);
  }
LABEL_6:
  v19 = *(_QWORD *)(v12 + 16 * v16 + 8);
  if ((v19 | 2) == 2)
    goto LABEL_7;
  return v19;
}

void JSC::WebAssemblyModuleRecord::evaluateConstantExpression(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, WTF::StringImpl **a7, uint64_t a8)
{
  JSC::Heap **v12;
  unsigned __int8 *v13;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 **v23;
  unsigned __int8 *v24;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  int v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  JSC::Exception *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(const char **);
  const char **v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  unsigned __int8 **v72;
  WTF::StringImpl *v73;
  int v74;
  const char *v75;
  uint64_t v76;
  _QWORD *v77;

  v12 = *(JSC::Heap ***)(a2 + 56);
  v13 = *a1;
  if (__ldaxr(*a1))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v13);
LABEL_5:
  ++*((_QWORD *)v13 + 1);
  v15 = __ldxr(v13);
  if (v15 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v13))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, a3, a4, a5, a6, (uint64_t)a7, a8);
  v72 = a1;
  JSC::Wasm::evaluateExtendedConstExpr(a3, (uint64_t)&v72);
  v23 = v72;
  v72 = 0;
  if (!v23)
    goto LABEL_20;
  v24 = *v23;
  if (__ldaxr(*v23))
  {
    __clrex();
  }
  else if (!__stxr(1u, v24))
  {
    goto LABEL_15;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v24);
LABEL_15:
  v26 = *((_QWORD *)v24 + 1);
  v27 = v26 - 1;
  *((_QWORD *)v24 + 1) = v26 - 1;
  if (v26 == 1)
  {
    v51 = *((_QWORD *)v24 + 2);
    v29 = *((_QWORD *)v24 + 3);
    *((_QWORD *)v24 + 3) = 0;
    v28 = v51 == 0;
  }
  else
  {
    v28 = 0;
    v29 = 0;
  }
  v30 = __ldxr(v24);
  if (v30 != 1)
  {
    __clrex();
LABEL_24:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v24, 0, v17, v18, v19, v20, v21, v22);
    if (v27)
      goto LABEL_20;
    goto LABEL_25;
  }
  if (__stlxr(0, v24))
    goto LABEL_24;
  if (v27)
    goto LABEL_20;
LABEL_25:
  v75 = (const char *)v24;
  v76 = v29;
  LOBYTE(v77) = v28;
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)&v75, v16, v17, v18, v19, v20, v21, v22);
LABEL_20:
  v31 = v74;
  if (!v74)
  {
    *a7 = v73;
LABEL_22:
    ((void (*)(const char **, WTF::StringImpl **))off_1E35B9478[v31])(&v75, &v73);
    return;
  }
  if (v74 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_50:
    __break(0xC471u);
    return;
  }
  v32 = v73;
  if (v73)
    *(_DWORD *)v73 += 2;
  v70 = v32;
  v75 = "couldn't evaluate constant expression: ";
  v76 = 40;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v75, (uint64_t *)&v70, (int **)&v71);
  if (!v71)
    goto LABEL_50;
  v33 = *(_QWORD *)(a2 + 1408);
  if ((v33 & 1) != 0)
  {
    v68 = *(uint64_t (**)(const char **))(v33 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a2 & 8) != 0)
      v69 = (const char **)(a2 - 16);
    else
      v69 = (const char **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    v75 = *v69;
    v76 = a2;
    v77 = (_QWORD *)(a2 + 1408);
    v33 = v68(&v75);
  }
  v34 = JSC::ErrorInstance::create(v12, v33, &v71, 0, (uint64_t)JSC::defaultSourceAppender, 0, 0, 1);
  v41 = (JSC::Exception *)v34;
  if ((v34 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C)))
  {
    v41 = (JSC::Exception *)JSC::Exception::create((uint64_t)v12, (JSC::VM *)v34, 0, v35, v36, v37, v38, v39);
  }
  JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a2, v41, v40, v35, v36, v37, v38, v39);
  v49 = v71;
  v71 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v70;
  v70 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v31 = v74;
  if (v74 != -1)
    goto LABEL_22;
}

uint64_t JSC::Wasm::tableFill(JSC::Wasm *this, JSC::Wasm::Instance *a2, uint64_t a3, unsigned int a4)
{
  unsigned int v7;
  unsigned int v9;
  uint64_t result;

  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 8) + 204) <= a2)
  {
    result = 139;
    __break(0xC471u);
  }
  else
  {
    v7 = *(_DWORD *)(*((_QWORD *)this + 15 * *((unsigned int *)this + 28) + a2 + 19) + 4);
    if (a4 - 1 < v7)
    {
      v9 = 0;
      do
        JSC::Wasm::tableSet(this, a2, v9++, a3);
      while (a4 != v9);
    }
    return v7 >= a4;
  }
  return result;
}

uint64_t JSC::Wasm::Instance::loadV128Global(JSC::Wasm::Instance *this, unsigned int a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;

  v4 = *((_QWORD *)this + 13);
  v2 = (char *)this + 104;
  v3 = v4;
  v5 = (unint64_t *)(2 * v4);
  if (v4 < 0)
    v6 = 63;
  else
    v6 = *v5;
  v7 = *((_QWORD *)v2 - 3) + 16 * a2;
  if (v6 > a2
    && ((v8 = (char *)(v5 + 1), v3 >= 0) ? (v9 = v8) : (v9 = v2),
        ((*(_QWORD *)&v9[((unint64_t)a2 >> 3) & 0x1FFFFFF8] >> a2) & 1) != 0 && (v7 = *(_QWORD *)v7) == 0))
  {
    return 0;
  }
  else
  {
    return *(_QWORD *)v7;
  }
}

uint64_t JSC::JSGlobalObject::webAssemblyGlobalStructure(unint64_t this)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(this + 1328);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v4 = (_QWORD *)(this - 16);
    v5[0] = *v4;
    v5[1] = this;
    v5[2] = this + 1328;
    return v3(v5);
  }
  return v1;
}

uint64_t JSC::Wasm::CalleeGroup::jsEntrypointCalleeFromFunctionIndexSpace(JSC::Wasm::CalleeGroup *this, unsigned int a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t result;

  v2 = (unsigned int *)*((_QWORD *)this + 9);
  if (v2)
  {
    v3 = *v2;
    if (*v2 > a2)
      goto LABEL_11;
  }
  else
  {
    v3 = 0;
  }
  v4 = *((_QWORD *)this + 6);
  if (!v4)
    goto LABEL_11;
  v5 = a2 - v3;
  v6 = *(_DWORD *)(v4 - 8);
  v7 = 9 * ((v5 + ~(v5 << 15)) ^ ((v5 + ~(v5 << 15)) >> 10));
  v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
  v9 = v6 & (v8 ^ HIWORD(v8));
  v10 = *(_DWORD *)(v4 + 16 * v9);
  if (v10 != v5)
  {
    v11 = 1;
    while (v10 != -1)
    {
      v9 = ((_DWORD)v9 + v11) & v6;
      v10 = *(_DWORD *)(v4 + 16 * v9);
      ++v11;
      if (v10 == v5)
        goto LABEL_8;
    }
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x198E5B19CLL);
  }
LABEL_8:
  result = *(_QWORD *)(v4 + 16 * v9 + 8);
  if (!result)
    goto LABEL_11;
  return result;
}

uint64_t JSC::Wasm::CalleeGroup::wasmCalleeFromFunctionIndexSpace(JSC::Wasm::CalleeGroup *this, unsigned int a2)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int *v4;

  v2 = (_DWORD *)*((_QWORD *)this + 9);
  if (v2 && (LODWORD(v2) = *v2, v2 > a2)
    || (v3 = a2 - (_DWORD)v2, v4 = (unsigned int *)*((_QWORD *)this + 8), *v4 <= v3))
  {
    __break(0xC471u);
    JUMPOUT(0x198E5B210);
  }
  return *(_QWORD *)&v4[2 * v3 + 2];
}

unsigned int *JSC::Wasm::CalleeGroup::entrypointLoadLocationFromFunctionIndexSpace(JSC::Wasm::CalleeGroup *this, unsigned int a2)
{
  _DWORD *v2;
  unsigned int v3;
  unsigned int *v4;

  v2 = (_DWORD *)*((_QWORD *)this + 9);
  if (v2 && (LODWORD(v2) = *v2, v2 > a2)
    || (v3 = a2 - (_DWORD)v2, v4 = (unsigned int *)*((_QWORD *)this + 7), *v4 <= v3))
  {
    __break(0xC471u);
    JUMPOUT(0x198E5B284);
  }
  return &v4[2 * v3 + 2];
}

uint64_t JSC::JSGlobalObject::webAssemblyFunctionStructure(unint64_t this)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(this + 1264);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v4 = (_QWORD *)(this - 16);
    v5[0] = *v4;
    v5[1] = this;
    v5[2] = this + 1264;
    return v3(v5);
  }
  return v1;
}

uint64_t JSC::WebAssemblyModuleRecord::evaluate(JSC::WebAssemblyModuleRecord *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24[4];
  _QWORD v25[5];
  uint64_t v26[6];
  _QWORD v27[5];
  uint64_t v28;
  char v29;
  JSC::VM *v30;
  uint64_t *v31;

  v9 = (uint64_t *)*((_QWORD *)a2 + 7);
  v30 = (JSC::VM *)v9;
  v31 = (uint64_t *)a2;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 16) + 16) + 56) + 8);
  LOBYTE(v28) = 0;
  v29 = 0;
  v27[0] = v10;
  v27[1] = this;
  v27[2] = &v31;
  v27[3] = &v30;
  v27[4] = &v28;
  v26[0] = (uint64_t)this;
  v26[1] = v10 + 160;
  v26[2] = (uint64_t)&v31;
  v26[3] = v10;
  v26[4] = (uint64_t)&v30;
  v26[5] = (uint64_t)&v28;
  v25[0] = this;
  v25[1] = &v28;
  v25[2] = &v31;
  v25[3] = &v30;
  v25[4] = v9;
  JSC::WebAssemblyModuleRecord::evaluate(JSC::JSGlobalObject *)::$_0::operator()<JSC::WebAssemblyModuleRecord::evaluate(JSC::JSGlobalObject *)::$_1>((uint64_t)v27, (uint64_t)v25, a3, a4, a5, a6, a7, a8);
  if (v29)
    return v28;
  v24[0] = (uint64_t)&v28;
  v24[1] = (uint64_t)&v31;
  v24[2] = (uint64_t)v9;
  v24[3] = (uint64_t)&v30;
  JSC::WebAssemblyModuleRecord::evaluate(JSC::JSGlobalObject *)::$_2::operator()<JSC::WebAssemblyModuleRecord::evaluate(JSC::JSGlobalObject *)::$_3>(v26, v24);
  if (v29)
    return v28;
  v11 = *((_QWORD *)this + 17);
  if (!v11)
    return 10;
  if (*(_BYTE *)(v11 + 5) == 26)
    JSC::JSFunction::getCallData(v11, (uint64_t)v23);
  else
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)
                                                          + 0x38))(v23, v11);
  JSC::call(v31, v11, (unsigned __int8 *)v23, 10, v9[5245], v13, v14, v15);
  if (*((_DWORD *)v30 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v30, v16, v17, v18, v19, v20, v21, v22))
    return 0;
  else
    return 10;
}

void JSC::WebAssemblyModuleRecord::evaluate(JSC::JSGlobalObject *)::$_0::operator()<JSC::WebAssemblyModuleRecord::evaluate(JSC::JSGlobalObject *)::$_1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int I32Global;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  unint64_t v28;
  JSC::Heap **v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  JSC::Exception *v39;
  JSC::VM *v40;
  JSC::Exception *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(WTF::StringImpl **);
  WTF::StringImpl **v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63[3];

  v8 = *(_DWORD *)(*(_QWORD *)a1 + 188);
  if (!v8)
    return;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 176);
  v12 = v11 + 80 * v8;
  v13 = *(_QWORD *)(a1 + 8);
  while (*(_BYTE *)v11)
  {
LABEL_17:
    v11 += 80;
    if (v11 == v12)
      return;
  }
  if (!*(_BYTE *)(v11 + 40))
    goto LABEL_24;
  v14 = *(unsigned __int8 *)(v11 + 36);
  if (v14 == 1)
  {
    I32Global = *(_DWORD *)(v11 + 32);
  }
  else if (*(_BYTE *)(v11 + 36))
  {
    v63[0] = 0;
    if (v14 != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x198E5B700);
    }
    v16 = *(unsigned int *)(v11 + 32);
    if (*(_DWORD *)(*(_QWORD *)a1 + 300) <= v16)
      goto LABEL_41;
    JSC::WebAssemblyModuleRecord::evaluateConstantExpression(*(unsigned __int8 ***)(*(_QWORD *)(v13 + 128) + 16), **(_QWORD **)(a1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 288) + 16 * v16, *(_QWORD *)a1, 255, 0, v63, a8);
    v21 = **(_QWORD **)(a1 + 24);
    if (*(_DWORD *)(v21 + 80))
    {
      v26 = *(_DWORD *)(v21 + 80);
      if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
      {
        v61 = **(_QWORD **)(a1 + 24);
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, v17, v18, v19, v20, a7, a8);
        v21 = v61;
      }
      if (*(_QWORD *)(v21 + 16))
        return;
    }
    I32Global = v63[0];
  }
  else
  {
    I32Global = JSC::Wasm::Instance::loadI32Global(*(JSC::Wasm::Instance **)(*(_QWORD *)(v13 + 128) + 16), *(_DWORD *)(v11 + 32));
  }
  if (!*(_BYTE *)(v11 + 28))
  {
LABEL_24:
    __break(1u);
LABEL_41:
    __break(0xC471u);
    JUMPOUT(0x198E5B5ECLL);
  }
  v22 = *(unsigned int *)(v11 + 24);
  v23 = *(_QWORD *)(*(_QWORD *)a2 + 128);
  v24 = *(_DWORD **)(v23 + 64);
  if (*v24 <= v22)
    goto LABEL_41;
  v25 = *(unsigned int *)(v11 + 60);
  if (v25 + (unint64_t)I32Global <= *(unsigned int *)(*(_QWORD *)(*(_QWORD *)&v24[2 * v22 + 2] + 16) + 4))
  {
    JSC::Wasm::Instance::initElementSegment(*(_QWORD *)(v23 + 16), v22, v11, I32Global, 0, v25, a7, a8);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 8))
      return;
    goto LABEL_17;
  }
  v27 = *(uint64_t **)(a2 + 24);
  v28 = **(_QWORD **)(a2 + 16);
  v29 = *(JSC::Heap ***)(a2 + 32);
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0x3500000002;
  *(_QWORD *)(v30 + 8) = "Element is trying to set an out of bounds table index";
  *(_DWORD *)(v30 + 16) = 4;
  v62 = (WTF::StringImpl *)v30;
  v31 = *(_QWORD *)(v28 + 1408);
  if ((v31 & 1) != 0)
  {
    v59 = *(uint64_t (**)(WTF::StringImpl **))(v31 & 0xFFFFFFFFFFFFFFFCLL);
    v60 = (WTF::StringImpl **)(v28 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v28 & 8) != 0)
      v60 = (WTF::StringImpl **)(v28 - 16);
    v63[0] = *v60;
    v63[1] = (WTF::StringImpl *)v28;
    v63[2] = (WTF::StringImpl *)(v28 + 1408);
    v31 = v59(v63);
  }
  v32 = JSC::ErrorInstance::create(v29, v31, &v62, 0, (uint64_t)JSC::defaultSourceAppender, 0, 0, 1);
  v39 = (JSC::Exception *)v32;
  v40 = (JSC::VM *)*v27;
  if ((v32 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x4C)))
  {
    v39 = (JSC::Exception *)JSC::Exception::create(*v27, (JSC::VM *)v32, 0, v33, v34, v35, v36, v37);
  }
  v41 = JSC::VM::throwException(v40, (JSC::JSGlobalObject *)v28, v39, v38, v33, v34, v35, v36, v37);
  v49 = *(_QWORD *)(a2 + 8);
  if (!*(_BYTE *)(v49 + 8))
    *(_BYTE *)(v49 + 8) = 1;
  *(_QWORD *)v49 = v41;
  v50 = v62;
  v62 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
}

void JSC::WebAssemblyModuleRecord::evaluate(JSC::JSGlobalObject *)::$_2::operator()<JSC::WebAssemblyModuleRecord::evaluate(JSC::JSGlobalObject *)::$_3>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t I32Global;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  JSC::Heap **v27;
  unint64_t v28;
  JSC::VM *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  JSC::Exception *v33;
  uint64_t v34;
  WTF::StringImpl *v35;

  v4 = *a1;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 128) + 16) + 64);
  v9 = JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(v5 + 8));
  v10 = *(_QWORD *)(v5 + 8);
  if (*(_BYTE *)(v10 + 5))
    v11 = atomic_load((unint64_t *)(v10 + 16));
  else
    v11 = *(_QWORD *)(v10 + 16);
  v12 = a1[1];
  v13 = *(unsigned int *)(v12 + 12);
  if (!(_DWORD)v13)
    return;
  v14 = *(_QWORD **)v12;
  v15 = *(_QWORD *)v12 + 16 * v13;
  while (1)
  {
    v16 = (_BYTE *)*v14;
    if (*(_BYTE *)*v14)
      goto LABEL_21;
    if (!v16[16])
      break;
    v17 = v16[12];
    if (v17 == 1)
    {
      I32Global = *((unsigned int *)v16 + 2);
    }
    else if (v16[12])
    {
      v35 = 0;
      if (v17 != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198E5B9B8);
      }
      v18 = a1[3];
      v19 = *((unsigned int *)v16 + 2);
      if (*(_DWORD *)(v18 + 300) <= v19)
      {
LABEL_38:
        __break(0xC471u);
        JUMPOUT(0x198E5B998);
      }
      JSC::WebAssemblyModuleRecord::evaluateConstantExpression(*(unsigned __int8 ***)(*(_QWORD *)(v4 + 128) + 16), *(_QWORD *)a1[2], *(_QWORD *)(v18 + 288) + 16 * v19, v18, 255, 0, &v35, v8);
      v25 = *(_QWORD *)a1[4];
      if (*(_DWORD *)(v25 + 80))
      {
        v26 = *(_DWORD *)(v25 + 80);
        if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v25 + 64), 7u, v20, v21, v22, v23, v24, v8);
        if (*(_QWORD *)(v25 + 16))
          return;
      }
      I32Global = v35;
      v16 = (_BYTE *)*v14;
    }
    else
    {
      I32Global = JSC::Wasm::Instance::loadI32Global(*(JSC::Wasm::Instance **)(*(_QWORD *)(v4 + 128) + 16), *((_DWORD *)v16 + 2));
    }
    v6 = *((unsigned int *)v16 + 1);
    if (v11 < v6)
      goto LABEL_30;
    if (v11 - v6 < I32Global)
    {
      v27 = (JSC::Heap **)a2[2];
      v28 = *(_QWORD *)a2[1];
      v29 = (JSC::VM *)a2[3];
      v30 = ", segment writes outside of memory";
      v31 = v11;
      v32 = 35;
      goto LABEL_32;
    }
    if ((_DWORD)v6)
    {
      if (!v9)
        goto LABEL_38;
      memcpy((void *)(v9 + I32Global), v16 + 20, *((unsigned int *)v16 + 1));
    }
    if (*(_BYTE *)(a1[5] + 8))
      return;
LABEL_21:
    v14 += 2;
    if (v14 == (_QWORD *)v15)
      return;
  }
  __break(1u);
LABEL_30:
  v27 = (JSC::Heap **)a2[2];
  v28 = *(_QWORD *)a2[1];
  v29 = (JSC::VM *)a2[3];
  v30 = ", segment is too big";
  v31 = v11;
  v32 = 21;
LABEL_32:
  v33 = JSC::dataSegmentFail<JSC::ThrowScope,unsigned long long,unsigned int,WTF::ASCIILiteral>(v28, v27, v29, v31, v6, I32Global, (uint64_t)v30, v32);
  v34 = *a2;
  if (!*(_BYTE *)(*a2 + 8))
    *(_BYTE *)(v34 + 8) = 1;
  *(_QWORD *)v34 = v33;
}

unint64_t JSC::WebAssemblyRuntimeErrorConstructor::create(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t SlowCase;
  char *v41;
  WTF::StringImpl *v42;

  v9 = (unint64_t)a2;
  v11 = (_QWORD *)((char *)this + 38552);
  v12 = *((_QWORD *)this + 4819);
  if (v12 < *((_QWORD *)this + 4820))
    goto LABEL_2;
  v12 = *((_QWORD *)this + 4821);
  if ((v12 & 1) == 0)
  {
    v35 = *(_QWORD *)(v12 + 8) ^ *((_QWORD *)this + 4822);
    *((_QWORD *)this + 4820) = v12 + HIDWORD(v35);
    *((_QWORD *)this + 4821) = v12 + (int)v35;
LABEL_2:
    *v11 = v12 + 48;
    goto LABEL_3;
  }
  v41 = (char *)this + 38552;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a2, a4, a5, a6, a7, a8);
  v11 = v41;
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v37, v38, v39);
  v9 = (unint64_t)a2;
  v12 = SlowCase;
LABEL_3:
  *(_DWORD *)v12 = 0;
  JSC::InternalFunction::InternalFunction(v12, (uint64_t)this, v9, (uint64_t)JSC::callJSWebAssemblyRuntimeError, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructJSWebAssemblyRuntimeError);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0xC00000002;
  *(_QWORD *)(v13 + 8) = "RuntimeError";
  *(_DWORD *)(v13 + 16) = 4;
  v42 = (WTF::StringImpl *)v13;
  JSC::InternalFunction::finishCreation(v12, this, (const WTF::String *)1, (JSC::VM *)&v42, 1, v14, v15, v16);
  v25 = v42;
  v42 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v12, (uint64_t)this, *(_QWORD *)(v11[425] + 2160), a3, 14, v21, v22, v23, v24);
  return v12;
}

uint64_t JSC::WebAssemblyRuntimeErrorConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 67099;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::WebAssemblyRuntimeErrorConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::callJSWebAssemblyRuntimeError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v9)(_QWORD *);
  _QWORD *v10;
  _QWORD v11[3];

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v5 = 10;
  }
  else
  {
    v5 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v6 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v6 = 10;
LABEL_4:
  v7 = *(_QWORD *)(this + 1408);
  if ((v7 & 1) != 0)
  {
    v9 = *(uint64_t (**)(_QWORD *))(v7 & 0xFFFFFFFFFFFFFFFCLL);
    v10 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v10 = (_QWORD *)(this - 16);
    v11[0] = *v10;
    v11[1] = this;
    v11[2] = this + 1408;
    v7 = v9(v11);
  }
  return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v7, v5, v6, 0, 0, 0, 0, a4);
}

unint64_t JSC::constructJSWebAssemblyRuntimeError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  JSC::JSGlobalObject *v13;
  JSC::JSGlobalObject *i;
  char **v15;
  unint64_t v16;
  unint64_t v17;
  JSC::JSObject *SubclassStructure;
  unint64_t v19;
  int v21;
  int v22;
  uint64_t (*v23)(JSC::VM **);
  JSC::VM **v24;
  uint64_t (*v25)(JSC::VM **);
  JSC::VM **v26;
  JSC::JSGlobalObject *v27;
  unint64_t v28;
  JSC::VM *v29;
  unint64_t v30;
  char *v31;

  v10 = *(_QWORD *)(this + 56);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11 = 10;
  }
  else
  {
    v11 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v12 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v12 = 10;
LABEL_4:
  v13 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v13 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v19 = *(_QWORD *)(this + 1408);
    if ((v19 & 1) == 0)
      goto LABEL_18;
    v25 = *(uint64_t (**)(JSC::VM **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v26 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v26 = (JSC::VM **)(this - 16);
    v29 = *v26;
    v30 = this;
    v31 = (char *)(this + 1408);
    SubclassStructure = (JSC::JSObject *)v25(&v29);
  }
  else
  {
    v29 = *(JSC::VM **)(this + 56);
    for (i = v13; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v27 + 2))
    {
      while (1)
      {
        v15 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v15 != &JSC::JSBoundFunction::s_info && v15 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v16 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_13;
      }
      v27 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v29, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v16 = 0;
LABEL_13:
    if (*(_DWORD *)(v10 + 80))
    {
      v22 = *(_DWORD *)(v10 + 80);
      if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      {
        v28 = v16;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v16 = v28;
      }
      if (*(_QWORD *)(v10 + 16))
      {
        v19 = 0;
        goto LABEL_18;
      }
    }
    v17 = *(_QWORD *)(v16 + 1408);
    if ((v17 & 1) != 0)
    {
      v23 = *(uint64_t (**)(JSC::VM **))(v17 & 0xFFFFFFFFFFFFFFFCLL);
      v24 = (JSC::VM **)(v16 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v16 & 8) != 0)
        v24 = (JSC::VM **)(v16 - 16);
      v29 = *v24;
      v30 = v16;
      v31 = (char *)(v16 + 1408);
      v17 = v23(&v29);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v13, (JSC::JSObject *)v17, a4, a5, a6, a7, a8);
  }
  v19 = (unint64_t)SubclassStructure;
  if (!*(_DWORD *)(v10 + 80))
    return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v19, v11, v12, 0, 0, 0, 0, a9);
LABEL_18:
  v21 = *(_DWORD *)(v10 + 80);
  if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
    return 0;
  else
    return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v19, v11, v12, 0, 0, 0, 0, a9);
}

unint64_t JSC::WebAssemblyRuntimeErrorPrototype::create(JSC::WebAssemblyRuntimeErrorPrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  WTF::StringImpl *v33;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  JSC::JSGlobalObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t SlowCase;
  WTF::StringImpl *v49;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v43 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v43);
    *((_QWORD *)this + 4865) = v10 + (int)v43;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v44 = (JSC::JSGlobalObject *)a3;
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v45, v46, v47);
  a3 = (uint64_t)v44;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 1968);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0xC00000002;
  *(_QWORD *)(v13 + 8) = "RuntimeError";
  *(_DWORD *)(v13 + 16) = 4;
  v49 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v49, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 4, v21, v22, v23, v24);
  v33 = v49;
  v49 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, *(_QWORD *)(v9[381] + 1824), *((_QWORD *)this + 5246), 4, v29, v30, v31, v32);
  return v10;
}

uint64_t JSC::WebAssemblyRuntimeErrorPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::WebAssemblyRuntimeErrorPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void WTF::Detail::CallableWrapper<JSC::constructJSWebAssemblyMemory(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0,void,JSC::Wasm::Memory::GrowSuccess,JSC::PageCount,JSC::PageCount>::call(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  JSC::VM *v11;
  JSC::ArrayBuffer *v12;
  BOOL v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v8 = a4;
  v9 = a3;
  v11 = *(JSC::VM **)(a1 + 8);
  v10 = *(_QWORD **)(a1 + 16);
  v12 = (JSC::ArrayBuffer *)v10[4];
  if (!v12)
    goto LABEL_9;
  if (*(_BYTE *)(*(_QWORD *)(v10[2] + 8) + 5))
  {
    v10[4] = 0;
    goto LABEL_5;
  }
  JSC::ArrayBuffer::detach(v12, v11, a3, a4, a5, a6, a7, a8);
  v12 = (JSC::ArrayBuffer *)v10[4];
  v10[4] = 0;
  if (v12)
  {
LABEL_5:
    v13 = *(_DWORD *)v12 == 2;
    *(_DWORD *)v12 -= 2;
    if (v13)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  v10[3] = 0;
LABEL_9:
  v22 = (unint64_t)v8 << 16;
  v23 = (unint64_t)v9 << 16;
  if (v22 != v23)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v11 + 192, 0, (uint64_t)v10, v22 - v23, a5, a6, a7, a8);
}

unint64_t JSC::webAssemblyMemoryProtoFuncGrow(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  JSC::JSWebAssemblyMemory *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  double v22;
  uint64_t v23;
  const WTF::String *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  JSC::Exception *v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  double v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const WTF::String *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  JSC::Exception *v54;
  WTF::AtomStringImpl *v55;
  WTF::StringImpl *v56;
  int v57;
  int v58;
  int v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  double v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;

  v11 = *((_QWORD *)this + 7);
  v12 = (JSC::JSWebAssemblyMemory *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v12 & 0xFFFE000000000002) != 0
    || &JSC::JSWebAssemblyMemory::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)))
  {
    v45 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v45 = 0x5A00000002;
    *(_QWORD *)(v45 + 8) = "WebAssembly.Memory.prototype.buffer getter called with non WebAssembly.Memory |this| value";
    *(_DWORD *)(v45 + 16) = 4;
    v72 = (WTF::StringImpl *)v45;
    v47 = JSC::createTypeError((unint64_t)this, &v72, v46);
    v54 = (JSC::Exception *)v47;
    if ((v47 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x4C)))
    {
      v54 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v47, 0, v48, v49, v50, v51, v52);
    }
    JSC::VM::throwException((JSC::VM *)v11, this, v54, v53, v48, v49, v50, v51, v52);
    v56 = v72;
    v72 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
      {
        WTF::StringImpl::~StringImpl(v56, v55, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
      }
      else
      {
        *(_DWORD *)v56 -= 2;
      }
    }
    v12 = 0;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v57 = *(_DWORD *)(v11 + 80);
    if ((v57 & 0x27) != 0 && (v57 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v72 = (WTF::StringImpl *)10;
    v13 = *((_QWORD *)this + 7);
    goto LABEL_14;
  }
  a4 = *((_QWORD *)a2 + 6);
  v72 = (WTF::StringImpl *)a4;
  v13 = *((_QWORD *)this + 7);
  if (a4 < 0xFFFE000000000000 || (a4 & 0x80000000) != 0)
  {
    if (a4 >= 0xFFFE000000000000)
    {
      v22 = (double)(int)a4;
      goto LABEL_15;
    }
    if (a4 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      *(_QWORD *)&v22 = a4 - 0x2000000000000;
      goto LABEL_15;
    }
LABEL_14:
    JSC::JSValue::toNumberSlowCase(&v72, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_15:
    if (!*(_DWORD *)(v13 + 80))
      goto LABEL_24;
    v70 = v22;
    v68 = *(_DWORD *)(v13 + 80);
    if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v22 = v70;
    if (!*(_QWORD *)(v13 + 16))
    {
LABEL_24:
      if (fabs(v22) != INFINITY)
      {
        v36 = trunc(v22);
        if (v36 >= 0.0 && v36 <= 4294967300.0)
        {
          a4 = v22;
          goto LABEL_7;
        }
      }
      v23 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v23 = 0x3600000002;
      *(_QWORD *)(v23 + 8) = "Expect an integer argument in the range: [0, 2^32 - 1]";
      *(_DWORD *)(v23 + 16) = 4;
      v71 = (WTF::StringImpl *)v23;
      v25 = JSC::createTypeError((unint64_t)this, &v71, v24);
      v32 = (JSC::Exception *)v25;
      if ((v25 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C)))
      {
        v32 = (JSC::Exception *)JSC::Exception::create(v13, (JSC::VM *)v25, 0, v26, v27, v28, v29, v30);
      }
      JSC::VM::throwException((JSC::VM *)v13, this, v32, v31, v26, v27, v28, v29, v30);
      v35 = v71;
      v71 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::~StringImpl(v35, v33, (uint64_t)a3, v34, a5, a6, a7, a8);
          WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
        }
        else
        {
          *(_DWORD *)v35 -= 2;
        }
      }
    }
    a4 = 0;
  }
LABEL_7:
  if (*(_DWORD *)(v11 + 80))
  {
    v58 = *(_DWORD *)(v11 + 80);
    if ((v58 & 0x27) != 0 && (v58 & 0x20) == 0)
    {
      v69 = a4;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      a4 = v69;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v20 = JSC::JSWebAssemblyMemory::grow(v12, (JSC::VM *)v11, (unint64_t)this, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v11 + 80))
  {
    v59 = *(_DWORD *)(v11 + 80);
    if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (v20 < 0)
    return COERCE__INT64((double)v20) + 0x2000000000000;
  else
    return v20 | 0xFFFE000000000000;
}

int *JSC::webAssemblyMemoryProtoFuncType(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::JSWebAssemblyMemory *v11;
  uint64_t v13;
  const WTF::String *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  JSC::Exception *v22;
  WTF::AtomStringImpl *v23;
  WTF::StringImpl *v24;
  int v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::JSWebAssemblyMemory *v34;
  WTF::StringImpl *v35;

  v10 = *((_QWORD *)this + 7);
  v11 = (JSC::JSWebAssemblyMemory *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0
    || &JSC::JSWebAssemblyMemory::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    v13 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v13 = 0x5A00000002;
    *(_QWORD *)(v13 + 8) = "WebAssembly.Memory.prototype.buffer getter called with non WebAssembly.Memory |this| value";
    *(_DWORD *)(v13 + 16) = 4;
    v35 = (WTF::StringImpl *)v13;
    v15 = JSC::createTypeError((unint64_t)this, &v35, v14);
    v22 = (JSC::Exception *)v15;
    if ((v15 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C)))
    {
      v22 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v15, 0, v16, v17, v18, v19, v20);
    }
    JSC::VM::throwException((JSC::VM *)v10, this, v22, v21, v16, v17, v18, v19, v20);
    v24 = v35;
    v35 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::~StringImpl(v24, v23, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      }
      else
      {
        *(_DWORD *)v24 -= 2;
      }
    }
    v11 = 0;
  }
  if (!*(_DWORD *)(v10 + 80))
    return JSC::JSWebAssemblyMemory::type(v11, this, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
  v25 = *(_DWORD *)(v10 + 80);
  if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
  {
    v34 = v11;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v11 = v34;
  }
  if (*(_QWORD *)(v10 + 16))
    return 0;
  else
    return JSC::JSWebAssemblyMemory::type(v11, this, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
}

WTF *JSC::webAssemblyModuleCustomSections(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  unint64_t v19;
  void *v20;
  char *v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  WTF *result;
  _BOOL4 v28;
  JSC::JSGlobalObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  BOOL v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(WTF::StringImpl **);
  int v62;
  unint64_t OutOfMemoryError;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  JSC::Exception *v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const WTF::String *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  JSC::Exception *v89;
  unint64_t NotEnoughArgumentsError;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  JSC::Exception *v97;
  int v98;
  int v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl **v108;
  unint64_t *v109;
  unint64_t v110;
  WTF *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  char *v116;
  BOOL v117;
  _BYTE v118[7];

  v9 = 0xFFFE000000000002;
  v10 = *(_QWORD *)(this + 56);
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    NotEnoughArgumentsError = JSC::createNotEnoughArgumentsError(this, 0);
    v97 = (JSC::Exception *)NotEnoughArgumentsError;
    if ((NotEnoughArgumentsError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)NotEnoughArgumentsError & 0xFFFFFFFE)
                                                              + 0x4C)))
    {
      v97 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)NotEnoughArgumentsError, 0, v91, v92, v93, v94, v95);
    }
    return JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v97, v96, v91, v92, v93, v94, v95);
  }
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 73)
  {
LABEL_71:
    v80 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v80 = 0x4D00000002;
    *(_QWORD *)(v80 + 8) = "WebAssembly.Module.customSections called with non WebAssembly.Module argument";
    *(_DWORD *)(v80 + 16) = 4;
    v114 = (WTF::StringImpl *)v80;
    v82 = JSC::createTypeError(this, &v114, v81);
    v89 = (JSC::Exception *)v82;
    if ((v82 & v9) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v82 & 0xFFFFFFFE) + 0x4C)))
    {
      v89 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v82, 0, v83, v84, v85, v86, v87);
    }
    v110 = (unint64_t)JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v89, v88, v83, v84, v85, v86, v87);
    v71 = v114;
    v114 = 0;
    if (v71)
      goto LABEL_63;
    return (WTF *)v110;
  }
  v12 = *((_QWORD *)a2 + 7);
  v114 = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v12 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v114, (JSC::JSGlobalObject *)this, a3, a4, a5, a6, a7, a8, (int **)&v113);
    goto LABEL_10;
  }
  v13 = *(WTF::StringImpl **)(v12 + 8);
  if ((v13 & 1) != 0)
  {
    v13 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v12, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (!v13)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (v13)
LABEL_8:
    *(_DWORD *)v13 += 2;
LABEL_9:
  v113 = v13;
LABEL_10:
  if (*(_DWORD *)(v10 + 80))
  {
    v98 = *(_DWORD *)(v10 + 80);
    if ((v98 & 0x27) != 0 && (v98 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      goto LABEL_83;
  }
  v110 = JSC::constructEmptyArray(this, 0, 0, 0, a5, a6, a7, a8, (__n128)a9);
  if (*(_DWORD *)(v10 + 80))
  {
    v99 = *(_DWORD *)(v10 + 80);
    if ((v99 & 0x27) != 0 && (v99 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
    {
LABEL_83:
      v110 = 0;
      goto LABEL_62;
    }
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8);
  v15 = *(unsigned int *)(v14 + 244);
  if (!(_DWORD)v15)
    goto LABEL_62;
  v16 = *(_QWORD *)(v14 + 232);
  v17 = v16 + 32 * v15;
  v18 = (WTF::StringImpl **)(this - 16);
  if ((this & 8) == 0)
    v18 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
  v108 = v18;
  v109 = (unint64_t *)(this + 1600);
  while (1)
  {
    v19 = *(unsigned int *)(v16 + 12);
    if ((_DWORD)v19)
    {
      v20 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(v16 + 12));
      memcpy(v20, *(const void **)v16, *(unsigned int *)(v16 + 12));
      v21 = 0;
      v9 = 0;
      v22 = 0;
      do
      {
        v114 = v22;
        v23 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v20, v19, (unint64_t *)&v114);
        if (v23 == -1)
          break;
        v22 = v114;
        v24 = v23 < 0x10000 ? 1 : 2;
        v21 += v24;
        v9 = v23 | v9;
      }
      while ((unint64_t)v114 < v19);
      if ((unint64_t)v22 > v19)
      {
        __break(1u);
        goto LABEL_71;
      }
    }
    else
    {
      v20 = 0;
      v21 = 0;
      LODWORD(v9) = 0;
      v22 = 0;
    }
    v114 = (WTF::StringImpl *)v20;
    v115 = (uint64_t)v22;
    *(_DWORD *)v118 = (_DWORD)v112;
    *(_DWORD *)&v118[3] = *(_DWORD *)((char *)&v112 + 3);
    if ((unint64_t)v21 >> 31)
      v25 = 0;
    else
      v25 = v21;
    if ((unint64_t)v21 >> 31)
      v26 = 0;
    else
      v26 = v21;
    v116 = v26;
    v117 = v9 < 0x80;
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>(v25, v9 < 0x80, (uint64_t)&v114, (int **)&v112);
    result = v112;
    if (!v112)
    {
      __break(0xC471u);
      return result;
    }
    a2 = v113;
    if (v112 == v113)
    {
      v112 = 0;
      v28 = 1;
    }
    else if (v113)
    {
      v28 = WTF::equal(v112, v113, a3);
      result = v112;
      v112 = 0;
      if (!result)
        goto LABEL_39;
    }
    else
    {
      v28 = 0;
      v112 = 0;
    }
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
LABEL_39:
      if (!v20)
        goto LABEL_41;
LABEL_40:
      WTF::fastFree((unint64_t)v20, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      goto LABEL_41;
    }
    WTF::StringImpl::~StringImpl(result, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    if (v20)
      goto LABEL_40;
LABEL_41:
    if (!v28)
      goto LABEL_49;
    JSC::ArrayBuffer::tryCreate(*(const void **)(v16 + 16), *(unsigned int *)(v16 + 28), a5, a6, a7, a8, (uint64_t *)&v112);
    v35 = v112;
    if (!v112)
      break;
    v36 = *v109;
    if ((*v109 & 1) != 0)
    {
      v61 = *(uint64_t (**)(WTF::StringImpl **))(v36 & 0xFFFFFFFFFFFFFFFCLL);
      v114 = *v108;
      v115 = this;
      v116 = (char *)(this + 1600);
      v36 = v61(&v114);
    }
    v37 = JSC::JSArrayBuffer::create(v10, v36, &v112, v30, v31, v32, v33, v34);
    JSC::JSArray::push(v110, (JSC::VM **)this, v37, v38, v39, v40, v41, v42, v43);
    if (*(_DWORD *)(v10 + 80))
    {
      v62 = *(_DWORD *)(v10 + 80);
      if ((v62 & 0x27) != 0 && (v62 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
      {
        v44 = *(_DWORD *)v35 == 2;
        *(_DWORD *)v35 -= 2;
        if (v44)
        {
          JSC::ArrayBuffer::~ArrayBuffer(v35, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
        }
        goto LABEL_83;
      }
    }
    v44 = *(_DWORD *)v35 == 2;
    *(_DWORD *)v35 -= 2;
    if (v44)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v35, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
LABEL_49:
    v16 += 32;
    if (v16 == v17)
      goto LABEL_62;
  }
  OutOfMemoryError = JSC::createOutOfMemoryError(this, v29);
  v70 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v70 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)OutOfMemoryError, 0, v64, v65, v66, v67, v68);
  }
  v110 = (unint64_t)JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v70, v69, v64, v65, v66, v67, v68);
LABEL_62:
  v71 = v113;
  v113 = 0;
  if (v71)
  {
LABEL_63:
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  return (WTF *)v110;
}

unint64_t JSC::webAssemblyModuleImports(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, __n128 a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::VM **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  JSC::VM *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t SlowCase;
  unint64_t v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  void *v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  WTF::AtomStringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  const char *v93;
  int *v94;
  size_t v95;
  size_t v96;
  char *v97;
  uint64_t v98;
  __n128 v99;
  uint64_t v100;
  uint64_t v101;
  WTF::AtomStringImpl *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __n128 v109;
  WTF::StringImpl *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD *v141;
  int v142;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  const WTF::String *v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  double v177;
  JSC::Exception *v178;
  int v179;
  unint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  JSC::VMTraps *v204;
  uint64_t v205;
  JSC::VM **v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  unint64_t v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  JSC::VM **v213;
  uint64_t v214;
  uint64_t v215;

  v9 = (JSC::VM **)this;
  v10 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1
    || (v11 = *((_QWORD *)a2 + 6), (v11 & 0xFFFE000000000002) != 0)
    || *(_BYTE *)(v11 + 5) != 73)
  {
    v169 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v169 = 0x4600000002;
    *(_QWORD *)(v169 + 8) = "WebAssembly.Module.imports called with non WebAssembly.Module argument";
    *(_DWORD *)(v169 + 16) = 4;
    v212 = (WTF::StringImpl *)v169;
    v171 = JSC::createTypeError((unint64_t)v9, &v212, v170);
    v178 = (JSC::Exception *)v171;
    if ((v171 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v171 & 0xFFFFFFFE) + 0x4C)))
    {
      v178 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v171, 0, v172, v173, v174, v175, v176);
    }
    v210 = (unint64_t)JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v178, v177, v172, v173, v174, v175, v176);
    v160 = v212;
    v212 = 0;
    if (!v160)
      return v210;
    if (*(_DWORD *)v160 != 2)
    {
      *(_DWORD *)v160 -= 2;
      return v210;
    }
LABEL_111:
    WTF::StringImpl::~StringImpl(v160, v29, v30, v31, v32, v33, v34, v35);
    WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
    return v210;
  }
  v210 = JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
    goto LABEL_118;
  while (1)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8);
    if (!*(_DWORD *)(v18 + 20))
      return v210;
    WTF::AtomStringImpl::addLiteral((uint64_t)"module", 6uLL, v13, v14, v15, v16, v17, &v212);
    v209 = v212;
    WTF::AtomStringImpl::addLiteral((uint64_t)"name", 4uLL, v19, v20, v21, v22, v23, &v212);
    v208 = v212;
    WTF::AtomStringImpl::addLiteral((uint64_t)"kind", 4uLL, v24, v25, v26, v27, v28, &v212);
    v207 = v212;
    v36 = *(_DWORD *)(v18 + 20);
    if (!v36)
    {
LABEL_97:
      v141 = v209;
      if (v207)
      {
        if (*(_DWORD *)v207 == 2)
        {
          WTF::StringImpl::~StringImpl(v207, v29, v30, v31, v32, v33, v34, v35);
          WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
          if (v208)
          {
LABEL_101:
            if (*(_DWORD *)v208 == 2)
            {
              WTF::StringImpl::~StringImpl(v208, v29, v30, v31, v32, v33, v34, v35);
              WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
            }
            else
            {
              *(_DWORD *)v208 -= 2;
            }
          }
LABEL_103:
          if (!v209)
            return v210;
          v142 = *(_DWORD *)v209 - 2;
          if (*(_DWORD *)v209 != 2)
            goto LABEL_105;
          v160 = v209;
          goto LABEL_111;
        }
        *(_DWORD *)v207 -= 2;
      }
      if (v208)
        goto LABEL_101;
      goto LABEL_103;
    }
    v11 = *(_QWORD *)(v18 + 8);
    v204 = (JSC::VMTraps *)(v10 + 64);
    v205 = v11 + 40 * v36;
    v206 = v9;
LABEL_8:
    v37 = v9[7];
    v38 = *((_QWORD *)v37 + 1882);
    if (v38)
    {
      v39 = *(unsigned int *)(v38 + 60);
      SlowCase = *(_QWORD *)(v38 + 24);
      if (SlowCase < *(_QWORD *)(v38 + 32))
        goto LABEL_10;
      SlowCase = *(_QWORD *)(v38 + 40);
      if ((SlowCase & 1) == 0)
      {
        v136 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v38 + 48);
        *(_QWORD *)(v38 + 32) = SlowCase + HIDWORD(v136);
        *(_QWORD *)(v38 + 40) = SlowCase + (int)v136;
LABEL_10:
        *(_QWORD *)(v38 + 24) = SlowCase + v39;
        goto LABEL_11;
      }
      JSC::sanitizeStackForVM(v9[7], v29, v30, v31, v32, v33, v34, v35);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v38, (uint64_t)v37 + 192, v39, 0, 0, v138, v139, v140);
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v37 + 14936, v9[7], 0x40uLL, 0, v32, v33, v34, v35);
      if (!SlowCase)
      {
        __break(0xC471u);
        JUMPOUT(0x198E5D3B0);
      }
    }
LABEL_11:
    *(_DWORD *)SlowCase = 0;
    *(_DWORD *)SlowCase = *((_DWORD *)v9 + 212);
    *(_DWORD *)(SlowCase + 4) = 16783360;
    *(_OWORD *)(SlowCase + 8) = 0u;
    *(_OWORD *)(SlowCase + 24) = 0u;
    *(_OWORD *)(SlowCase + 40) = 0u;
    *(_QWORD *)(SlowCase + 56) = 0;
    if (*((_BYTE *)v37 + 755))
      __dmb(0xAu);
    if (*(_DWORD *)(v10 + 80))
    {
      v135 = *(_DWORD *)(v10 + 80);
      if ((v135 & 0x27) != 0 && (v135 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v204, 7u, v30, v31, v32, v33, v34, v35);
      if (*(_QWORD *)(v10 + 16))
        break;
    }
    v41 = *(unsigned int *)(v11 + 12);
    if (!(_DWORD)v41)
    {
      v42 = 0;
      v43 = 0;
      LODWORD(v9) = 0;
      v44 = 0;
LABEL_22:
      v212 = v42;
      v213 = (JSC::VM **)v44;
      *(_DWORD *)((char *)&v215 + 1) = (_DWORD)v211;
      HIDWORD(v215) = *(_DWORD *)((char *)&v211 + 3);
      if (v43 >> 31)
        v47 = 0;
      else
        v47 = v43;
      if (v43 >> 31)
        v48 = 0;
      else
        v48 = v43;
      v214 = v48;
      LOBYTE(v215) = v9 < 0x80;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>(v47, v9 < 0x80, (uint64_t)&v212, (int **)&v211);
      if (!v211)
      {
        __break(0xC471u);
        JUMPOUT(0x198E5D5CCLL);
      }
      v55 = JSC::jsString(v10, (JSC::VM *)&v211, v49, v50, v51, v52, v53, v54);
      v212 = 0;
      v213 = (JSC::VM **)SlowCase;
      v214 = 0x1000000FFFFFFFFLL;
      v56.n128_u64[0] = 0x100000001000000;
      v215 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, (unint64_t)v209, v55, 0, (uint64_t)&v212, v57, v58, v56);
      v66 = v211;
      v211 = 0;
      if (v66)
      {
        if (*(_DWORD *)v66 == 2)
        {
          WTF::StringImpl::~StringImpl(v66, v59, v60, v61, v62, v63, v64, v65);
          WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
          if (!v42)
          {
LABEL_34:
            v67 = *(unsigned int *)(v11 + 28);
            if ((_DWORD)v67)
            {
              v68 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(v11 + 28));
              memcpy(v68, *(const void **)(v11 + 16), *(unsigned int *)(v11 + 28));
              v69 = 0;
              v70 = 0;
              v9 = 0;
              do
              {
                v212 = (WTF::StringImpl *)v9;
                v71 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v68, v67, (unint64_t *)&v212);
                if (v71 == -1)
                  break;
                v9 = (JSC::VM **)v212;
                v72 = v71 < 0x10000 ? 1 : 2;
                v69 += v72;
                v70 |= v71;
              }
              while ((unint64_t)v212 < v67);
              if ((unint64_t)v9 <= v67)
                goto LABEL_42;
              goto LABEL_117;
            }
            v68 = 0;
            v69 = 0;
            v70 = 0;
            v9 = 0;
LABEL_42:
            v212 = (WTF::StringImpl *)v68;
            v213 = v9;
            *(_DWORD *)((char *)&v215 + 1) = (_DWORD)v211;
            HIDWORD(v215) = *(_DWORD *)((char *)&v211 + 3);
            if (v69 >> 31)
              v73 = 0;
            else
              v73 = v69;
            if (v69 >> 31)
              v74 = 0;
            else
              v74 = v69;
            v214 = v74;
            LOBYTE(v215) = v70 < 0x80;
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>(v73, v70 < 0x80, (uint64_t)&v212, (int **)&v211);
            if (!v211)
            {
              __break(0xC471u);
              JUMPOUT(0x198E5D5D4);
            }
            v81 = JSC::jsString(v10, (JSC::VM *)&v211, v75, v76, v77, v78, v79, v80);
            v212 = 0;
            v213 = (JSC::VM **)SlowCase;
            v214 = 0x1000000FFFFFFFFLL;
            v82.n128_u64[0] = 0x100000001000000;
            v215 = 0;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, (unint64_t)v208, v81, 0, (uint64_t)&v212, v83, v84, v82);
            v92 = v211;
            v211 = 0;
            v9 = v206;
            if (v92)
            {
              if (*(_DWORD *)v92 == 2)
              {
                WTF::StringImpl::~StringImpl(v92, v85, v86, v87, v88, v89, v90, v91);
                WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
                if (!v68)
                  goto LABEL_54;
                goto LABEL_53;
              }
              *(_DWORD *)v92 -= 2;
            }
            if (!v68)
            {
LABEL_54:
              v93 = "function";
              switch(*(_BYTE *)(v11 + 32))
              {
                case 0:
                  goto LABEL_60;
                case 1:
                  v93 = "table";
                  if (!"table")
                    goto LABEL_58;
                  goto LABEL_61;
                case 2:
                  v93 = "memory";
LABEL_60:
                  if (v93)
                    goto LABEL_61;
                  goto LABEL_58;
                case 3:
                  v93 = "global";
                  if (!"global")
                    goto LABEL_58;
                  goto LABEL_61;
                case 4:
                  v93 = "tag";
                  if ("tag")
                  {
LABEL_61:
                    v95 = strlen(v93);
                    if (v95)
                    {
                      v96 = v95;
                      if (v95 >> 31)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198E5D5DCLL);
                      }
                      v94 = (int *)WTF::fastCompactMalloc((WTF *)(v95 + 20));
                      v97 = (char *)(v94 + 5);
                      *v94 = 2;
                      v94[1] = v96;
                      *((_QWORD *)v94 + 1) = v94 + 5;
                      v94[4] = 4;
                      if (v96 == 1)
                        *v97 = *v93;
                      else
                        memcpy(v97, v93, v96);
                    }
                    else
                    {
                      v94 = &WTF::StringImpl::s_emptyAtomString;
                      WTF::StringImpl::s_emptyAtomString += 2;
                    }
                  }
                  else
                  {
LABEL_58:
                    v94 = 0;
                  }
                  v211 = (WTF::StringImpl *)v94;
                  v98 = JSC::jsString(v10, (JSC::VM *)&v211, v86, v87, v88, v89, v90, v91);
                  v212 = 0;
                  v213 = (JSC::VM **)SlowCase;
                  v214 = 0x1000000FFFFFFFFLL;
                  v99.n128_u64[0] = 0x100000001000000;
                  v215 = 0;
                  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, (unint64_t)v207, v98, 0, (uint64_t)&v212, v100, v101, v99);
                  v110 = v211;
                  v211 = 0;
                  if (v110)
                  {
                    if (*(_DWORD *)v110 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v110, v102, v103, v104, v105, v106, v107, v108);
                      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
                    }
                    else
                    {
                      *(_DWORD *)v110 -= 2;
                    }
                  }
                  JSC::JSArray::push(v210, v206, SlowCase, v104, v105, v106, v107, v108, v109);
                  if (*(_DWORD *)(v10 + 80))
                  {
                    v137 = *(_DWORD *)(v10 + 80);
                    if ((v137 & 0x27) != 0 && (v137 & 0x20) == 0)
                      JSC::VMTraps::handleTraps(v204, 7u, v30, v31, v32, v33, v34, v35);
                    if (*(_QWORD *)(v10 + 16))
                      goto LABEL_121;
                  }
                  v11 += 40;
                  if (v11 == v205)
                    goto LABEL_97;
                  goto LABEL_8;
                default:
                  __break(0xC471u);
                  JUMPOUT(0x198E5D5B0);
              }
            }
LABEL_53:
            WTF::fastFree((unint64_t)v68, v85, v86, v87, v88, v89, v90, v91);
            goto LABEL_54;
          }
LABEL_33:
          WTF::fastFree((unint64_t)v42, v59, v60, v61, v62, v63, v64, v65);
          goto LABEL_34;
        }
        *(_DWORD *)v66 -= 2;
      }
      if (!v42)
        goto LABEL_34;
      goto LABEL_33;
    }
    v42 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)*(unsigned int *)(v11 + 12));
    memcpy(v42, *(const void **)v11, *(unsigned int *)(v11 + 12));
    v43 = 0;
    v9 = 0;
    v44 = 0;
    do
    {
      v212 = v44;
      v45 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v42, v41, (unint64_t *)&v212);
      if (v45 == -1)
        break;
      v44 = v212;
      v46 = v45 < 0x10000 ? 1 : 2;
      v43 += v46;
      v9 = (JSC::VM **)(v45 | v9);
    }
    while ((unint64_t)v212 < v41);
    if ((unint64_t)v44 <= v41)
      goto LABEL_22;
LABEL_117:
    __break(1u);
LABEL_118:
    v179 = *(_DWORD *)(v10 + 80);
    if ((v179 & 0x27) != 0 && (v179 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
LABEL_121:
  v141 = v209;
  if (!v207)
    goto LABEL_124;
  if (*(_DWORD *)v207 == 2)
  {
    WTF::StringImpl::~StringImpl(v207, v29, v30, v31, v32, v33, v34, v35);
    WTF::fastFree(v180, v181, v182, v183, v184, v185, v186, v187);
    if (v208)
      goto LABEL_125;
  }
  else
  {
    *(_DWORD *)v207 -= 2;
LABEL_124:
    if (v208)
    {
LABEL_125:
      if (*(_DWORD *)v208 == 2)
      {
        WTF::StringImpl::~StringImpl(v208, v29, v30, v31, v32, v33, v34, v35);
        WTF::fastFree(v188, v189, v190, v191, v192, v193, v194, v195);
      }
      else
      {
        *(_DWORD *)v208 -= 2;
      }
    }
  }
  if (!v209)
    return 0;
  v142 = *(_DWORD *)v209 - 2;
  if (*(_DWORD *)v209 == 2)
  {
    WTF::StringImpl::~StringImpl(v209, v29, v30, v31, v32, v33, v34, v35);
    WTF::fastFree(v196, v197, v198, v199, v200, v201, v202, v203);
    return 0;
  }
  v210 = 0;
LABEL_105:
  *v141 = v142;
  return v210;
}

unint64_t JSC::webAssemblyModuleExports(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, __n128 a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t SlowCase;
  unint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  const char *v64;
  int *v65;
  size_t v66;
  size_t v67;
  char *v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  WTF::StringImpl *v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const WTF::String *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  JSC::Exception *v132;
  int v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  JSC::VMTraps *v150;
  uint64_t v151;
  JSC::VM **v152;
  WTF::StringImpl *v153;
  unint64_t v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;

  v9 = this;
  v10 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1
    || (v11 = *((_QWORD *)a2 + 6), (v11 & 0xFFFE000000000002) != 0)
    || *(_BYTE *)(v11 + 5) != 73)
  {
    v123 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v123 = 0x4600000002;
    *(_QWORD *)(v123 + 8) = "WebAssembly.Module.exports called with non WebAssembly.Module argument";
    *(_DWORD *)(v123 + 16) = 4;
    v156 = (WTF::StringImpl *)v123;
    v125 = JSC::createTypeError((unint64_t)v9, &v156, v124);
    v132 = (JSC::Exception *)v125;
    if ((v125 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v125 & 0xFFFFFFFE) + 0x4C)))
    {
      v132 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v125, 0, v126, v127, v128, v129, v130);
    }
    v154 = (unint64_t)JSC::VM::throwException((JSC::VM *)v10, v9, v132, v131, v126, v127, v128, v129, v130);
    v114 = v156;
    v156 = 0;
    if (!v114)
      return v154;
    if (*(_DWORD *)v114 != 2)
    {
      *(_DWORD *)v114 -= 2;
      return v154;
    }
LABEL_84:
    WTF::StringImpl::~StringImpl(v114, v25, v26, v27, v28, v29, v30, v31);
    WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
    return v154;
  }
  v154 = JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
    goto LABEL_91;
  while (1)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8);
    if (!*(_DWORD *)(v18 + 148))
      return v154;
    WTF::AtomStringImpl::addLiteral((uint64_t)"name", 4uLL, v13, v14, v15, v16, v17, &v156);
    v19 = v156;
    WTF::AtomStringImpl::addLiteral((uint64_t)"kind", 4uLL, v20, v21, v22, v23, v24, &v156);
    v153 = v156;
    v32 = *(_DWORD *)(v18 + 148);
    if (!v32)
    {
LABEL_74:
      if (v153)
      {
        if (*(_DWORD *)v153 == 2)
        {
          WTF::StringImpl::~StringImpl(v153, v25, v26, v27, v28, v29, v30, v31);
          WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
          if (!v19)
            return v154;
LABEL_78:
          v104 = *(_DWORD *)v19 - 2;
          if (*(_DWORD *)v19 != 2)
            goto LABEL_79;
          v114 = v19;
          goto LABEL_84;
        }
        *(_DWORD *)v153 -= 2;
      }
      if (!v19)
        return v154;
      goto LABEL_78;
    }
    v33 = *(_QWORD *)(v18 + 136);
    v151 = v33 + 24 * v32;
    v150 = (JSC::VMTraps *)(v10 + 64);
    v152 = (JSC::VM **)v9;
LABEL_8:
    v34 = *((_QWORD *)v9 + 7);
    v35 = *(_QWORD *)(v34 + 15056);
    if (v35)
    {
      v36 = *(unsigned int *)(v35 + 60);
      SlowCase = *(_QWORD *)(v35 + 24);
      if (SlowCase < *(_QWORD *)(v35 + 32))
        goto LABEL_10;
      SlowCase = *(_QWORD *)(v35 + 40);
      if ((SlowCase & 1) == 0)
      {
        v98 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v35 + 48);
        *(_QWORD *)(v35 + 32) = SlowCase + HIDWORD(v98);
        *(_QWORD *)(v35 + 40) = SlowCase + (int)v98;
LABEL_10:
        *(_QWORD *)(v35 + 24) = SlowCase + v36;
        goto LABEL_11;
      }
      JSC::sanitizeStackForVM(*((JSC **)v9 + 7), v25, v26, v27, v28, v29, v30, v31);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v35, v34 + 192, v36, 0, 0, v101, v102, v103);
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v34 + 14936, *((JSC **)v9 + 7), 0x40uLL, 0, v28, v29, v30, v31);
      if (!SlowCase)
      {
        __break(0xC471u);
        JUMPOUT(0x198E5DB04);
      }
    }
LABEL_11:
    *(_DWORD *)SlowCase = 0;
    *(_DWORD *)SlowCase = *((_DWORD *)v9 + 212);
    *(_DWORD *)(SlowCase + 4) = 16783360;
    *(_OWORD *)(SlowCase + 8) = 0u;
    *(_OWORD *)(SlowCase + 24) = 0u;
    *(_OWORD *)(SlowCase + 40) = 0u;
    *(_QWORD *)(SlowCase + 56) = 0;
    if (*(_BYTE *)(v34 + 755))
      __dmb(0xAu);
    if (*(_DWORD *)(v10 + 80))
    {
      v99 = *(_DWORD *)(v10 + 80);
      if ((v99 & 0x27) != 0 && (v99 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v150, 7u, v26, v27, v28, v29, v30, v31);
      if (*(_QWORD *)(v10 + 16))
        break;
    }
    v9 = v19;
    v38 = *(unsigned int *)(v33 + 12);
    if (!(_DWORD)v38)
    {
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v11 = 0;
LABEL_22:
      v156 = v39;
      v157 = v11;
      *(_DWORD *)((char *)&v159 + 1) = (_DWORD)v155;
      HIDWORD(v159) = *(_DWORD *)((char *)&v155 + 3);
      if (v40 >> 31)
        v44 = 0;
      else
        v44 = v40;
      if (v40 >> 31)
        v45 = 0;
      else
        v45 = v40;
      v158 = v45;
      LOBYTE(v159) = v41 < 0x80;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::Vector<char8_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>>(v44, v41 < 0x80, (uint64_t)&v156, (int **)&v155);
      if (!v155)
      {
        __break(0xC471u);
        JUMPOUT(0x198E5DCD0);
      }
      v52 = JSC::jsString(v10, (JSC::VM *)&v155, v46, v47, v48, v49, v50, v51);
      v156 = 0;
      v157 = SlowCase;
      v158 = 0x1000000FFFFFFFFLL;
      v53.n128_u64[0] = 0x100000001000000;
      v159 = 0;
      v19 = v9;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, (unint64_t)v9, v52, 0, (uint64_t)&v156, v54, v55, v53);
      v63 = v155;
      v155 = 0;
      v9 = (JSC *)v152;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
        {
          WTF::StringImpl::~StringImpl(v63, v56, v57, v58, v59, v60, v61, v62);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
          if (!v39)
            goto LABEL_34;
          goto LABEL_33;
        }
        *(_DWORD *)v63 -= 2;
      }
      if (!v39)
      {
LABEL_34:
        v64 = "function";
        switch(*(_BYTE *)(v33 + 16))
        {
          case 0:
            goto LABEL_40;
          case 1:
            v64 = "table";
            if (!"table")
              goto LABEL_38;
            goto LABEL_41;
          case 2:
            v64 = "memory";
LABEL_40:
            if (v64)
              goto LABEL_41;
            goto LABEL_38;
          case 3:
            v64 = "global";
            if (!"global")
              goto LABEL_38;
            goto LABEL_41;
          case 4:
            v64 = "tag";
            if ("tag")
            {
LABEL_41:
              v66 = strlen(v64);
              if (v66)
              {
                v67 = v66;
                if (v66 >> 31)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E5DCD8);
                }
                v65 = (int *)WTF::fastCompactMalloc((WTF *)(v66 + 20));
                v68 = (char *)(v65 + 5);
                *v65 = 2;
                v65[1] = v67;
                *((_QWORD *)v65 + 1) = v65 + 5;
                v65[4] = 4;
                if (v67 == 1)
                  *v68 = *v64;
                else
                  memcpy(v68, v64, v67);
              }
              else
              {
                v65 = &WTF::StringImpl::s_emptyAtomString;
                WTF::StringImpl::s_emptyAtomString += 2;
              }
            }
            else
            {
LABEL_38:
              v65 = 0;
            }
            v155 = (WTF::StringImpl *)v65;
            v69 = JSC::jsString(v10, (JSC::VM *)&v155, v57, v58, v59, v60, v61, v62);
            v156 = 0;
            v157 = SlowCase;
            v158 = 0x1000000FFFFFFFFLL;
            v70.n128_u64[0] = 0x100000001000000;
            v159 = 0;
            JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v10, (unint64_t)v153, v69, 0, (uint64_t)&v156, v71, v72, v70);
            v81 = v155;
            v155 = 0;
            if (v81)
            {
              if (*(_DWORD *)v81 == 2)
              {
                WTF::StringImpl::~StringImpl(v81, v73, v74, v75, v76, v77, v78, v79);
                WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
              }
              else
              {
                *(_DWORD *)v81 -= 2;
              }
            }
            JSC::JSArray::push(v154, v152, SlowCase, v75, v76, v77, v78, v79, v80);
            if (*(_DWORD *)(v10 + 80))
            {
              v100 = *(_DWORD *)(v10 + 80);
              if ((v100 & 0x27) != 0 && (v100 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v150, 7u, v26, v27, v28, v29, v30, v31);
              if (*(_QWORD *)(v10 + 16))
                goto LABEL_94;
            }
            v33 += 24;
            if (v33 == v151)
              goto LABEL_74;
            goto LABEL_8;
          default:
            __break(0xC471u);
            JUMPOUT(0x198E5DCB4);
        }
      }
LABEL_33:
      WTF::fastFree((unint64_t)v39, v56, v57, v58, v59, v60, v61, v62);
      goto LABEL_34;
    }
    v39 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)*(unsigned int *)(v33 + 12));
    memcpy(v39, *(const void **)v33, *(unsigned int *)(v33 + 12));
    v40 = 0;
    v41 = 0;
    v11 = 0;
    do
    {
      v156 = (WTF::StringImpl *)v11;
      v42 = WTF::Unicode::next<(WTF::Unicode::Replacement)0,char8_t>((uint64_t)v39, v38, (unint64_t *)&v156);
      if (v42 == -1)
        break;
      v11 = (unint64_t)v156;
      v43 = v42 < 0x10000 ? 1 : 2;
      v40 += v43;
      v41 |= v42;
    }
    while ((unint64_t)v156 < v38);
    if (v11 <= v38)
      goto LABEL_22;
    __break(1u);
LABEL_91:
    v133 = *(_DWORD *)(v10 + 80);
    if ((v133 & 0x27) != 0 && (v133 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
LABEL_94:
  if (!v153)
    goto LABEL_97;
  if (*(_DWORD *)v153 == 2)
  {
    WTF::StringImpl::~StringImpl(v153, v25, v26, v27, v28, v29, v30, v31);
    WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    if (v19)
      goto LABEL_98;
    return 0;
  }
  *(_DWORD *)v153 -= 2;
LABEL_97:
  if (!v19)
    return 0;
LABEL_98:
  v104 = *(_DWORD *)v19 - 2;
  if (*(_DWORD *)v19 == 2)
  {
    WTF::StringImpl::~StringImpl(v19, v25, v26, v27, v28, v29, v30, v31);
    WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    return 0;
  }
  v154 = 0;
LABEL_79:
  *(_DWORD *)v19 = v104;
  return v154;
}

uint64_t JSC::Wasm::Instance::loadI32Global(JSC::Wasm::Instance *this, unsigned int a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unsigned int *v7;
  char *v8;
  char *v9;

  v4 = *((_QWORD *)this + 13);
  v2 = (char *)this + 104;
  v3 = v4;
  v5 = (unint64_t *)(2 * v4);
  if (v4 < 0)
    v6 = 63;
  else
    v6 = *v5;
  v7 = (unsigned int *)(*((_QWORD *)v2 - 3) + 16 * a2);
  if (v6 <= a2)
    return *v7;
  v8 = (char *)(v5 + 1);
  v9 = v3 >= 0 ? v8 : v2;
  if (((*(_QWORD *)&v9[((unint64_t)a2 >> 3) & 0x1FFFFFF8] >> a2) & 1) == 0)
    return *v7;
  v7 = *(unsigned int **)v7;
  if (v7)
    return *v7;
  else
    return 0;
}

JSC::Exception *JSC::dataSegmentFail<JSC::ThrowScope,unsigned long long,unsigned int,WTF::ASCIILiteral>(unint64_t a1, JSC::Heap **a2, JSC::VM *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v11;
  unint64_t v12;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::Exception *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(const char **);
  const char **v77;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83[2];
  uint64_t v84[2];
  uint64_t v85[2];
  const char *v86;
  _QWORD v87[4];

  v11 = a6;
  v12 = a4;
  v14 = 0;
  v87[3] = *MEMORY[0x1E0C80C00];
  do
  {
    v15 = (a5 % 0xA) | 0x30;
    *((_BYTE *)v87 + v14-- + 4) = (a5 % 0xA) | 0x30;
    v16 = a5 > 9;
    a5 = a5 / 0xAuLL;
  }
  while (v16);
  if (v14 + 14 >= 15)
    goto LABEL_49;
  v17 = (uint64_t *)a3;
  if (v14)
  {
    if ((unint64_t)-v14 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198E5E210);
    }
    v8 = -(int)v14;
    v18 = WTF::fastCompactMalloc((WTF *)(20 - v14));
    v19 = (_BYTE *)(v18 + 20);
    *(_DWORD *)v18 = 2;
    *(_DWORD *)(v18 + 4) = v8;
    *(_QWORD *)(v18 + 8) = v18 + 20;
    *(_DWORD *)(v18 + 16) = 4;
    v81 = (WTF::StringImpl *)v18;
    if (v14 == -1)
      *v19 = v15;
    else
      memcpy(v19, (char *)v87 + v14 + 5, -v14);
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    v81 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
  }
  v20 = 0;
  do
  {
    v21 = (v12 % 0xA) | 0x30;
    *((_BYTE *)&v87[2] + v20--) = v21;
    v16 = v12 > 9;
    v12 /= 0xAuLL;
  }
  while (v16);
  if (v20 + 26 >= 27)
    goto LABEL_49;
  if (v20)
  {
    if ((unint64_t)-v20 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198E5E218);
    }
    v8 = -(int)v20;
    v22 = WTF::fastCompactMalloc((WTF *)(20 - v20));
    v23 = (_BYTE *)(v22 + 20);
    *(_DWORD *)v22 = 2;
    *(_DWORD *)(v22 + 4) = v8;
    *(_QWORD *)(v22 + 8) = v22 + 20;
    *(_DWORD *)(v22 + 16) = 4;
    v80 = (WTF::StringImpl *)v22;
    if (v20 == -1)
      *v23 = v21;
    else
      memcpy(v23, (char *)&v87[2] + v20 + 1, -v20);
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    v80 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
  }
  v24 = 0;
  do
  {
    v25 = (v11 % 0xA) | 0x30;
    *((_BYTE *)v87 + v24-- + 4) = (v11 % 0xA) | 0x30;
    v16 = v11 > 9;
    v11 /= 0xAu;
  }
  while (v16);
  if (v24 + 14 >= 15)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    a3 = (JSC::VM *)JSC::Exception::create(v8, a3, 0, a4, a5, a6, a7, a8);
    goto LABEL_32;
  }
  if (v24)
  {
    if ((unint64_t)-v24 >> 31)
    {
      __break(0xC471u);
LABEL_59:
      JUMPOUT(0x198E5E208);
    }
    v26 = WTF::fastCompactMalloc((WTF *)(20 - v24));
    v27 = (_BYTE *)(v26 + 20);
    *(_DWORD *)v26 = 2;
    *(_DWORD *)(v26 + 4) = -(int)v24;
    *(_QWORD *)(v26 + 8) = v26 + 20;
    *(_DWORD *)(v26 + 16) = 4;
    v79 = (WTF::StringImpl *)v26;
    if (v24 == -1)
      *v27 = v25;
    else
      memcpy(v27, (char *)v87 + v24 + 5, -v24);
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    v79 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
  }
  v86 = "Invalid data segment initialization: segment of ";
  v87[0] = 49;
  v85[0] = (uint64_t)" bytes memory of ";
  v85[1] = 18;
  v84[0] = (uint64_t)" bytes, at offset ";
  v84[1] = 19;
  v83[0] = a7;
  v83[1] = a8;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>((uint64_t *)&v86, (uint64_t *)&v81, v85, (uint64_t *)&v80, v84, (uint64_t *)&v79, v83, (int **)&v82);
  if (!v82)
  {
    __break(0xC471u);
    goto LABEL_59;
  }
  v28 = *(_QWORD *)(a1 + 1408);
  if ((v28 & 1) != 0)
  {
    v76 = *(uint64_t (**)(const char **))(v28 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v77 = (const char **)(a1 - 16);
    else
      v77 = (const char **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    v86 = *v77;
    v87[0] = a1;
    v87[1] = a1 + 1408;
    v28 = v76(&v86);
  }
  v29 = JSC::ErrorInstance::create(a2, v28, &v82, 0, (uint64_t)JSC::defaultSourceAppender, 0, 0, 1);
  a3 = (JSC::VM *)v29;
  v8 = *v17;
  if ((v29 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE) + 0x4C)))
  {
    goto LABEL_50;
  }
LABEL_32:
  v38 = JSC::VM::throwException((JSC::VM *)v8, (JSC::JSGlobalObject *)a1, a3, v30, a4, a5, a6, a7, a8);
  v39 = v82;
  v82 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
  v40 = v79;
  v79 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
  }
  v41 = v80;
  v80 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  v42 = v81;
  v81 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  return v38;
}

unint64_t JSC::WebAssemblyStructConstructor::create(JSC *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t SlowCase;
  char *v41;
  WTF::StringImpl *v42;

  v9 = (unint64_t)a2;
  v11 = (_QWORD *)((char *)this + 38552);
  v12 = *((_QWORD *)this + 4819);
  if (v12 < *((_QWORD *)this + 4820))
    goto LABEL_2;
  v12 = *((_QWORD *)this + 4821);
  if ((v12 & 1) == 0)
  {
    v35 = *(_QWORD *)(v12 + 8) ^ *((_QWORD *)this + 4822);
    *((_QWORD *)this + 4820) = v12 + HIDWORD(v35);
    *((_QWORD *)this + 4821) = v12 + (int)v35;
LABEL_2:
    *v11 = v12 + 48;
    goto LABEL_3;
  }
  v41 = (char *)this + 38552;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a2, a4, a5, a6, a7, a8);
  v11 = v41;
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v37, v38, v39);
  v9 = (unint64_t)a2;
  v12 = SlowCase;
LABEL_3:
  *(_DWORD *)v12 = 0;
  JSC::InternalFunction::InternalFunction(v12, (uint64_t)this, v9, (uint64_t)JSC::callJSWebAssemblyStruct, JSC::constructJSWebAssemblyStruct);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x600000002;
  *(_QWORD *)(v13 + 8) = "Struct";
  *(_DWORD *)(v13 + 16) = 4;
  v42 = (WTF::StringImpl *)v13;
  JSC::InternalFunction::finishCreation(v12, this, (const WTF::String *)1, (JSC::VM *)&v42, 1, v14, v15, v16);
  v25 = v42;
  v42 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v12, (uint64_t)this, *(_QWORD *)(v11[425] + 2160), a3, 14, v21, v22, v23, v24);
  return v12;
}

uint64_t JSC::WebAssemblyStructConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 67099;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::WebAssemblyStructConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::callJSWebAssemblyStruct(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwTypeError((unint64_t)this, &v4, (uint64_t)"WebAssembly.Struct is not accessible from JS", 45);
}

uint64_t JSC::constructJSWebAssemblyStruct(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwTypeError((unint64_t)this, &v4, (uint64_t)"WebAssembly.Struct is not accessible from JS", 45);
}

unint64_t JSC::WebAssemblyStructPrototype::create(JSC::WebAssemblyStructPrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::JSGlobalObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = (JSC::JSGlobalObject *)a3;
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a3 = (uint64_t)v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x1200000002;
  *(_QWORD *)(v13 + 8) = "WebAssembly.Struct";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::WebAssemblyStructPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::WebAssemblyStructPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::WebAssemblyTableConstructor::create(JSC *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  JSC::JSObject *v12;

  v11 = JSC::allocateCell<JSC::AggregateErrorConstructor>(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v11, (uint64_t)a1, (unint64_t)a2, (uint64_t)JSC::callJSWebAssemblyTable, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructJSWebAssemblyTable);
  JSC::WebAssemblyTableConstructor::finishCreation(v12, a1, a3);
  return v11;
}

void JSC::WebAssemblyTableConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x500000002;
  *(_QWORD *)(v6 + 8) = "Table";
  *(_DWORD *)(v6 + 16) = 4;
  v27 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)1, (JSC::VM *)&v27, 1, v7, v8, v9);
  v18 = v27;
  v27 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), a3, 14, v14, v15, v16, v17);
}

uint64_t JSC::WebAssemblyTableConstructor::createStructure(JSC::VM *a1, JSC::VM *a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10;

  v10 = 67099;
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)&JSC::WebAssemblyTableConstructor::s_info, 0, 0, a9, a4);
}

JSC::Exception *JSC::callJSWebAssemblyTable(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"WebAssembly.Table", 18);
}

uint64_t JSC::constructJSWebAssemblyTable(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::JSGlobalObject *i;
  char **v13;
  uint64_t v14;
  unint64_t v15;
  JSC::JSObject *SubclassStructure;
  unint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  const WTF::String *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int8x16_t v33;
  WTF::StringImpl *v34;
  int v35;
  uint64_t v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int8x16_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  const WTF::String *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  JSC::Exception *v72;
  WTF::StringImpl *v73;
  JSC::VM *v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int8x16_t v83;
  uint64_t v84;
  int v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  uint64_t v103;
  unint64_t v104;
  JSC::Heap **v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  JSC::Exception *v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  JSC::JSObject *v125;
  unsigned int v126;
  unsigned int v127;
  JSC::VM *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  JSC::Heap **v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  double v144;
  JSC::Exception *v145;
  WTF::StringImpl *v146;
  BOOL v148;
  unint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int8 *v153;
  uint64_t v154;
  int v155;
  double v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  char **v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  double v185;
  JSC::VM *v186;
  uint64_t v187;
  const WTF::String *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  double v195;
  JSC::Exception *v196;
  WTF::StringImpl *v197;
  double v198;
  int v199;
  int v200;
  uint64_t (*v201)(unint64_t *);
  JSC::JSObject **v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  uint64_t (*v213)(unint64_t *);
  JSC::JSObject **v214;
  _DWORD *v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  WTF::StringImpl *v222;
  unsigned int v223;
  unsigned int v224;
  unint64_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  int v250;
  uint64_t (*v251)(unint64_t *);
  JSC::JSObject **v252;
  uint64_t (*v253)(unint64_t *);
  JSC::JSObject **v254;
  unint64_t v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  unsigned __int8 *v266;
  uint64_t v267;
  _DWORD *v268;
  int v269;
  WTF::StringImpl *v270;
  double v271;
  double v272;
  int v273;
  WTF::StringImpl *v274;
  WTF::StringImpl *v275;
  JSC::VM *v276;
  WTF::StringImpl *v277;
  unint64_t v278;
  uint64_t v279;
  char *v280;

  v10 = *(_QWORD *)(this + 56);
  v276 = (JSC::VM *)v10;
  v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v11 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v17 = *(_QWORD *)(this + 1440);
    if ((v17 & 1) == 0)
      goto LABEL_15;
    v213 = *(uint64_t (**)(unint64_t *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
    v214 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v214 = (JSC::JSObject **)(this - 16);
    v278 = (unint64_t)*v214;
    v279 = this;
    v280 = (char *)(this + 1440);
    SubclassStructure = (JSC::JSObject *)v213(&v278);
  }
  else
  {
    v278 = v10;
    for (i = v11; ; i = (JSC::JSGlobalObject *)*((_QWORD *)i + 2))
    {
      while (1)
      {
        v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v13 != &JSC::JSBoundFunction::s_info && v13 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v14 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, (JSC::VM **)&v278, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v14 = 0;
LABEL_10:
    if (*(_DWORD *)(v10 + 80))
    {
      v200 = *(_DWORD *)(v10 + 80);
      if ((v200 & 0x27) != 0 && (v200 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
      {
        v17 = 0;
        goto LABEL_15;
      }
    }
    v15 = *(_QWORD *)(v14 + 1440);
    if ((v15 & 1) != 0)
    {
      v201 = *(uint64_t (**)(unint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
      v202 = (JSC::JSObject **)(v14 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v14 & 8) != 0)
        v202 = (JSC::JSObject **)(v14 - 16);
      v278 = (unint64_t)*v202;
      v279 = v14;
      v280 = (char *)(v14 + 1440);
      v15 = v201(&v278);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v11, (JSC::JSObject *)v15, a4, a5, a6, a7, a8);
  }
  v17 = (unint64_t)SubclassStructure;
LABEL_15:
  if (*(_DWORD *)(v10 + 80))
  {
    v199 = *(_DWORD *)(v10 + 80);
    if ((v199 & 0x27) != 0 && (v199 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError(this, &v276, (uint64_t)"WebAssembly.Table expects its first argument to be an object", 61);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) <= 0x16u)
    return JSC::throwTypeError(this, &v276, (uint64_t)"WebAssembly.Table expects its first argument to be an object", 61);
  WTF::AtomStringImpl::addLiteral((uint64_t)"element", 7uLL, (uint64_t)a4, a5, a6, a7, a8, &v278);
  v19 = (WTF::StringImpl *)v278;
  v32 = JSC::JSObject::get((unsigned int *)v18, this, v278, v20, v21, v22, v23, v24);
  v278 = v32;
  if (*(_DWORD *)(v10 + 80))
  {
    v211 = *(_DWORD *)(v10 + 80);
    if ((v211 & 0x27) != 0 && (v211 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v26, v27, v28, v29, v30, v31);
    if (*(_QWORD *)(v10 + 16))
    {
      v37 = 0;
      v36 = 0;
      v35 = 1;
      goto LABEL_33;
    }
    v32 = v278;
  }
  if ((v32 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v32 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v278, (JSC::JSGlobalObject *)this, v26, v27, v28, v29, v30, v31, (int **)&v277);
    goto LABEL_26;
  }
  v34 = *(WTF::StringImpl **)(v32 + 8);
  if ((v34 & 1) != 0)
  {
    v34 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v32, (JSC::JSGlobalObject *)this, (uint64_t)v26, v27, v33, v28, v29, v30, v31);
    if (!v34)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (v34)
LABEL_24:
    *(_DWORD *)v34 += 2;
LABEL_25:
  v277 = v34;
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_28;
LABEL_26:
  v212 = *(_DWORD *)(v10 + 80);
  if ((v212 & 0x27) != 0 && (v212 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v26, v27, v28, v29, v30, v31);
  if (*(_QWORD *)(v10 + 16))
  {
    v37 = 0;
    v36 = 0;
  }
  else
  {
LABEL_28:
    if (WTF::equalInternal<unsigned char>((uint64_t)v277, (unint64_t)"funcref", 7)
      || WTF::equalInternal<unsigned char>((uint64_t)v277, (unint64_t)"anyfunc", 7))
    {
      v35 = 0;
      v36 = 0;
      v37 = 1;
      goto LABEL_30;
    }
    if (WTF::equalInternal<unsigned char>((uint64_t)v277, (unint64_t)"externref", 9))
    {
      v37 = 0;
      v35 = 0;
      v36 = 0;
      goto LABEL_30;
    }
    v36 = JSC::throwTypeError(this, &v276, (uint64_t)"WebAssembly.Table expects its 'element' field to be the string 'funcref' or 'externref'", 88);
    v37 = 0;
  }
  v35 = 1;
LABEL_30:
  v38 = v277;
  v277 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v25, (uint64_t)v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
LABEL_33:
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v25, (uint64_t)v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
      if (v35)
        return v36;
      goto LABEL_37;
    }
    *(_DWORD *)v19 -= 2;
  }
  if (v35)
    return v36;
LABEL_37:
  v273 = v37;
  WTF::AtomStringImpl::addLiteral((uint64_t)"initial", 7uLL, v27, v28, v29, v30, v31, &v278);
  v39 = (WTF::StringImpl *)v278;
  v52 = JSC::JSObject::get((unsigned int *)v18, this, v278, v40, v41, v42, v43, v44);
  if (*(_DWORD *)(v10 + 80))
  {
    v216 = *(_DWORD *)(v10 + 80);
    if ((v216 & 0x27) != 0 && (v216 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v46, v47, v48, v49, v50, v51);
    if (*(_QWORD *)(v10 + 16))
    {
      v36 = 0;
      goto LABEL_245;
    }
  }
  v274 = v39;
  WTF::AtomStringImpl::addLiteral((uint64_t)"minimum", 7uLL, v47, v48, v49, v50, v51, &v278);
  v53 = (WTF::StringImpl *)v278;
  v59 = JSC::JSObject::get((unsigned int *)v18, this, v278, v54, v55, v56, v57, v58);
  if (*(_DWORD *)(v10 + 80))
  {
    v217 = *(_DWORD *)(v10 + 80);
    if ((v217 & 0x27) != 0 && (v217 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v46, v47, v48, v49, v50, v51);
    if (*(_QWORD *)(v10 + 16))
    {
LABEL_218:
      v36 = 0;
      if (!v53)
        goto LABEL_244;
LABEL_242:
      if (*(_DWORD *)v53 == 2)
      {
        WTF::StringImpl::~StringImpl(v53, v45, v46, v47, v48, v49, v50, v51);
        WTF::fastFree(v233, v234, v235, v236, v237, v238, v239, v240);
      }
      else
      {
        *(_DWORD *)v53 -= 2;
      }
      goto LABEL_244;
    }
  }
  if (v52 == 10)
  {
    v52 = v59;
    if (v59 == 10)
    {
      v278 = 10;
      v61 = *(_QWORD *)(this + 56);
      goto LABEL_42;
    }
  }
  else if (v59 != 10)
  {
    v36 = JSC::throwTypeError(this, &v276, (uint64_t)"WebAssembly.Table 'initial' and 'minimum' options are specified at the same time", 81);
    if (v53)
      goto LABEL_242;
    goto LABEL_244;
  }
  v278 = v52;
  v61 = *(_QWORD *)(this + 56);
  if (v52 >= 0xFFFE000000000000 && (v52 & 0x80000000) == 0)
    goto LABEL_58;
  if (v52 >= 0xFFFE000000000000)
  {
    v62 = (double)(int)v52;
    goto LABEL_43;
  }
  if (v52 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    *(_QWORD *)&v62 = v52 - 0x2000000000000;
    goto LABEL_43;
  }
LABEL_42:
  JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v278, (JSC::JSGlobalObject *)this, v46, v47, v48, v49, v50, v51, v60);
LABEL_43:
  if (!*(_DWORD *)(v61 + 80))
    goto LABEL_144;
  v271 = v62;
  v250 = *(_DWORD *)(v61 + 80);
  if ((v250 & 0x27) != 0 && (v250 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v61 + 64), 7u, v46, v47, v48, v49, v50, v51);
  v62 = v271;
  if (!*(_QWORD *)(v61 + 16))
  {
LABEL_144:
    if (fabs(v62) != INFINITY)
    {
      v156 = trunc(v62);
      if (v156 >= 0.0 && v156 <= 4294967300.0)
      {
        v52 = v62;
        goto LABEL_58;
      }
    }
    v63 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v63 = 0x3600000002;
    *(_QWORD *)(v63 + 8) = "Expect an integer argument in the range: [0, 2^32 - 1]";
    *(_DWORD *)(v63 + 16) = 4;
    v277 = (WTF::StringImpl *)v63;
    v65 = JSC::createTypeError(this, &v277, v64);
    v72 = (JSC::Exception *)v65;
    if ((v65 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE) + 0x4C)))
    {
      v72 = (JSC::Exception *)JSC::Exception::create(v61, (JSC::VM *)v65, 0, v66, v67, v68, v69, v70);
    }
    JSC::VM::throwException((JSC::VM *)v61, (JSC::JSGlobalObject *)this, v72, v71, v66, v67, v68, v69, v70);
    v73 = v277;
    v277 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
      {
        WTF::StringImpl::~StringImpl(v73, v45, v46, v47, v48, v49, v50, v51);
        WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
      }
      else
      {
        *(_DWORD *)v73 -= 2;
      }
    }
  }
  v52 = 0;
LABEL_58:
  v75 = v276;
  if (*((_DWORD *)v276 + 20))
  {
    v218 = *((_DWORD *)v276 + 20);
    if ((v218 & 0x27) != 0 && (v218 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v276 + 64), 7u, v46, v47, v48, v49, v50, v51);
    if (*((_QWORD *)v75 + 2))
      goto LABEL_218;
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"maximum", 7uLL, v47, v48, v49, v50, v51, &v278);
  v76 = (WTF::StringImpl *)v278;
  v82 = JSC::JSObject::get((unsigned int *)v18, this, v278, v77, v78, v79, v80, v81);
  if (*((_DWORD *)v75 + 20))
  {
    v219 = *((_DWORD *)v75 + 20);
    if ((v219 & 0x27) != 0 && (v219 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v75 + 64), 7u, v46, v47, v48, v49, v50, v51);
    if (*((_QWORD *)v75 + 2))
      goto LABEL_229;
  }
  if (v82 == 10)
  {
    v270 = v76;
    v84 = 0;
    LOBYTE(v82) = 0;
    v85 = 0;
    goto LABEL_83;
  }
  v278 = v82;
  v102 = *(_DWORD **)(this + 56);
  if (v82 >= 0xFFFE000000000000 && (v82 & 0x80000000) == 0)
    goto LABEL_67;
  if (v82 >= 0xFFFE000000000000)
  {
    v185 = (double)(int)v82;
  }
  else if (v82 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v215 = *(_DWORD **)(this + 56);
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v278, (JSC::JSGlobalObject *)this, v46, v47, v48, v49, v50, v51, v83);
    v102 = v215;
  }
  else
  {
    *(_QWORD *)&v185 = v82 - 0x2000000000000;
  }
  if (!v102[20])
    goto LABEL_184;
  v272 = v185;
  v268 = v102;
  v269 = v102[20];
  if ((v269 & 0x27) != 0 && (v269 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v102 + 16), 7u, v46, v47, v48, v49, v50, v51);
  v102 = v268;
  v185 = v272;
  if (!*((_QWORD *)v268 + 2))
  {
LABEL_184:
    if (fabs(v185) != INFINITY)
    {
      v198 = trunc(v185);
      if (v198 >= 0.0 && v198 <= 4294967300.0)
      {
        LODWORD(v82) = v185;
        goto LABEL_67;
      }
    }
    v186 = (JSC::VM *)v102;
    v187 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v187 = 0x3600000002;
    *(_QWORD *)(v187 + 8) = "Expect an integer argument in the range: [0, 2^32 - 1]";
    *(_DWORD *)(v187 + 16) = 4;
    v277 = (WTF::StringImpl *)v187;
    v189 = JSC::createTypeError(this, &v277, v188);
    v196 = (JSC::Exception *)v189;
    if ((v189 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v189 & 0xFFFFFFFE) + 0x4C)))
    {
      v196 = (JSC::Exception *)JSC::Exception::create((uint64_t)v186, (JSC::VM *)v189, 0, v190, v191, v192, v193, v194);
    }
    JSC::VM::throwException(v186, (JSC::JSGlobalObject *)this, v196, v195, v190, v191, v192, v193, v194);
    v197 = v277;
    v277 = 0;
    if (v197)
    {
      if (*(_DWORD *)v197 == 2)
      {
        WTF::StringImpl::~StringImpl(v197, v45, v46, v47, v48, v49, v50, v51);
        WTF::fastFree(v203, v204, v205, v206, v207, v208, v209, v210);
      }
      else
      {
        *(_DWORD *)v197 -= 2;
      }
    }
  }
  LODWORD(v82) = 0;
LABEL_67:
  if (*((_DWORD *)v75 + 20))
  {
    v220 = *((_DWORD *)v75 + 20);
    if ((v220 & 0x27) != 0 && (v220 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v75 + 64), 7u, v46, v47, v48, v49, v50, v51);
    if (*((_QWORD *)v75 + 2))
    {
LABEL_229:
      v36 = 0;
      goto LABEL_238;
    }
  }
  if (v52 <= v82)
  {
    v270 = v76;
    v85 = v82 & 0xFFFFFF00;
    v84 = 0x100000000;
LABEL_83:
    v115 = v84 | v85 | v82;
    v116 = 239;
    if (v273)
      v116 = 240;
    v117 = -17;
    if (v273)
      v117 = -16;
    if (BYTE1(dword_1ECF4C7B0))
      v118 = 227;
    else
      v118 = v116;
    if (BYTE1(dword_1ECF4C7B0))
      v119 = v117;
    else
      v119 = 0;
    JSC::Wasm::Table::tryCreate(v52, v115, v273, v118, v119, (uint64_t *)&v277);
    v124 = v277;
    if (!v277)
    {
      v135 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v135 = 0x1500000002;
      *(_QWORD *)(v135 + 8) = "couldn't create Table";
      *(_DWORD *)(v135 + 16) = 4;
      v275 = (WTF::StringImpl *)v135;
      v136 = *(_QWORD *)(this + 128);
      v137 = *(JSC::Heap ***)(this + 56);
      if ((v136 & 1) != 0)
      {
        v251 = *(uint64_t (**)(unint64_t *))(v136 & 0xFFFFFFFFFFFFFFFCLL);
        if ((this & 8) != 0)
          v252 = (JSC::JSObject **)(this - 16);
        else
          v252 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
        v278 = (unint64_t)*v252;
        v279 = this;
        v280 = (char *)(this + 128);
        v136 = v251(&v278);
      }
      v76 = v270;
      v138 = JSC::ErrorInstance::create(v137, v136, &v275, 0, 0, 0, 2, 1);
      v145 = (JSC::Exception *)v138;
      if ((v138 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v138 & 0xFFFFFFFE) + 0x4C)))
      {
        v145 = (JSC::Exception *)JSC::Exception::create((uint64_t)v75, (JSC::VM *)v138, 0, v139, v140, v141, v142, v143);
      }
      v36 = (uint64_t)JSC::VM::throwException(v75, (JSC::JSGlobalObject *)this, v145, v144, v139, v140, v141, v142, v143);
      v146 = v275;
      v275 = 0;
      if (v146)
      {
        if (*(_DWORD *)v146 == 2)
        {
          WTF::StringImpl::~StringImpl(v146, v45, v46, v47, v48, v49, v50, v51);
          WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
        }
        else
        {
          *(_DWORD *)v146 -= 2;
        }
      }
      goto LABEL_235;
    }
    v277 = 0;
    v278 = (unint64_t)v124;
    v36 = JSC::JSWebAssemblyTable::tryCreate(this, (JSC *)v10, v17, (uint64_t *)&v278, v120, v121, v122, v123);
    v125 = (JSC::JSObject *)v278;
    v278 = 0;
    if (!v125)
      goto LABEL_97;
    do
    {
      v126 = __ldaxr((unsigned int *)v125);
      v127 = v126 - 1;
    }
    while (__stlxr(v127, (unsigned int *)v125));
    if (v127)
    {
LABEL_97:
      v128 = v276;
      if (*((_DWORD *)v276 + 20))
      {
        v221 = *((_DWORD *)v276 + 20);
        if ((v221 & 0x27) != 0 && (v221 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v276 + 64), 7u, v46, v47, v48, v49, v50, v51);
        if (*((_QWORD *)v128 + 2))
        {
LABEL_233:
          v36 = 0;
          goto LABEL_234;
        }
      }
      if ((unint64_t)(*((int *)a2 + 8) - 1) > 1)
      {
        v134 = *((_QWORD *)a2 + 7);
        v129 = *(_QWORD *)(v36 + 16);
      }
      else
      {
        v130 = v36 + 16;
        v129 = *(_QWORD *)(v36 + 16);
        v131 = *(unsigned __int8 *)(v129 + 16);
        if (BYTE1(dword_1ECF4C7B0))
        {
          if ((v131 + 29) > 1u || *(_QWORD *)(v129 + 24) != -17)
          {
LABEL_104:
            v133 = 0;
            v134 = 2;
            if (!(_DWORD)v52)
              goto LABEL_234;
            goto LABEL_116;
          }
        }
        else if (v131 != 239)
        {
          goto LABEL_104;
        }
        v134 = 10;
      }
      v130 = v36 + 16;
      if (*(_BYTE *)(v129 + 13) != 1 || v134 == 2)
        goto LABEL_115;
      v76 = v270;
      if ((v134 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v134 + 5) >= 0x17u)
      {
        v160 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v134 & 0xFFFFFFFE) + 0x4C));
        if (v160 == &JSC::WebAssemblyFunction::s_info)
        {
          v133 = v134;
          if (!(_DWORD)v52)
            goto LABEL_234;
LABEL_116:
          v148 = (v134 & 0xFFFE000000000002) != 0 || v134 == 0;
          if (v133)
          {
            v149 = 0;
            while (1)
            {
              v150 = *(unsigned __int8 *)(*(_QWORD *)v130 + 13);
              if (v150 == 1)
              {
                JSC::JSWebAssemblyTable::set(v36, v149, v133);
                v150 = *(unsigned __int8 *)(*(_QWORD *)(v36 + 16) + 13);
              }
              if (!v150)
              {
                v151 = *(_QWORD *)(v36 + 16);
                if (v149 >= *(unsigned int *)(v151 + 4))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E5F52CLL);
                }
                if (*(_BYTE *)(v151 + 13))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E5F54CLL);
                }
                v45 = *(WTF::AtomStringImpl **)(v151 + 40);
                if (!v45)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198E5F56CLL);
                }
                v152 = *(_QWORD *)(v151 + 48);
                v153 = (unsigned __int8 *)((unint64_t)v45 & 0xFFFFFFFFFFFFC000 | 8);
                if ((v45 & 8) != 0)
                  v153 = (unsigned __int8 *)v45 - 16;
                v154 = *(_QWORD *)v153;
                *(_QWORD *)(v152 + 8 * v149) = v134;
                if (!v148 && *(_DWORD *)(v154 + 760) >= *((unsigned __int8 *)v45 + 7))
                  JSC::Heap::writeBarrierSlowPath(v154 + 192, (unint64_t)v45);
              }
              if (*((_DWORD *)v128 + 20))
              {
                v155 = *((_DWORD *)v128 + 20);
                if ((v155 & 0x27) != 0 && (v155 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VM *)((char *)v128 + 64), 7u, v46, v47, v48, v49, v50, v51);
                if (*((_QWORD *)v128 + 2))
                  break;
              }
              if (v52 == ++v149)
                goto LABEL_234;
            }
          }
          else
          {
            v157 = 0;
            if (v148)
            {
              while (1)
              {
                if (!*(_BYTE *)(*(_QWORD *)v130 + 13))
                {
                  v158 = *(_QWORD *)(v36 + 16);
                  if (v157 >= *(unsigned int *)(v158 + 4))
                    goto LABEL_292;
                  if (*(_BYTE *)(v158 + 13))
                    goto LABEL_293;
                  if (!*(_QWORD *)(v158 + 40))
                    goto LABEL_294;
                  *(_QWORD *)(*(_QWORD *)(v158 + 48) + 8 * v157) = v134;
                }
                if (*((_DWORD *)v128 + 20))
                {
                  v159 = *((_DWORD *)v128 + 20);
                  if ((v159 & 0x27) != 0 && (v159 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v128 + 64), 7u, v46, v47, v48, v49, v50, v51);
                  if (*((_QWORD *)v128 + 2))
                    goto LABEL_233;
                }
                if (v52 == ++v157)
                  goto LABEL_234;
              }
            }
            while (1)
            {
              if (!*(_BYTE *)(*(_QWORD *)v130 + 13))
              {
                v264 = *(_QWORD *)(v36 + 16);
                if (v157 >= *(unsigned int *)(v264 + 4))
                {
LABEL_292:
                  __break(0xC471u);
                  JUMPOUT(0x198E5F940);
                }
                if (*(_BYTE *)(v264 + 13))
                {
LABEL_293:
                  __break(0xC471u);
                  JUMPOUT(0x198E5F960);
                }
                v45 = *(WTF::AtomStringImpl **)(v264 + 40);
                if (!v45)
                {
LABEL_294:
                  __break(0xC471u);
                  JUMPOUT(0x198E5F980);
                }
                v265 = *(_QWORD *)(v264 + 48);
                v266 = (unsigned __int8 *)((unint64_t)v45 & 0xFFFFFFFFFFFFC000 | 8);
                if ((v45 & 8) != 0)
                  v266 = (unsigned __int8 *)v45 - 16;
                v267 = *(_QWORD *)v266;
                *(_QWORD *)(v265 + 8 * v157) = v134;
                if (*(_DWORD *)(v267 + 760) >= *((unsigned __int8 *)v45 + 7))
                  JSC::Heap::writeBarrierSlowPath(v267 + 192, (unint64_t)v45);
              }
              if (*((_DWORD *)v128 + 20))
              {
                v263 = *((_DWORD *)v128 + 20);
                if ((v263 & 0x27) != 0 && (v263 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VM *)((char *)v128 + 64), 7u, v46, v47, v48, v49, v50, v51);
                if (*((_QWORD *)v128 + 2))
                  break;
              }
              if (v52 == ++v157)
                goto LABEL_234;
            }
          }
          goto LABEL_233;
        }
        if (v160 == &JSC::WebAssemblyWrapperFunction::s_info)
        {
LABEL_115:
          v133 = 0;
          if (!(_DWORD)v52)
          {
LABEL_234:
            v76 = v270;
            goto LABEL_235;
          }
          goto LABEL_116;
        }
      }
      v36 = JSC::throwTypeError(this, &v276, (uint64_t)"WebAssembly.Table.prototype.constructor expects the second argument to be null or an instance of WebAssembly.Function", 118);
LABEL_235:
      v222 = v277;
      v277 = 0;
      if (!v222)
        goto LABEL_238;
      do
      {
        v223 = __ldaxr((unsigned int *)v222);
        v224 = v223 - 1;
      }
      while (__stlxr(v224, (unsigned int *)v222));
      if (v224)
        goto LABEL_238;
      atomic_store(1u, (unsigned int *)v222);
      if (*((_BYTE *)v222 + 13) == 1)
      {
        if (*((_BYTE *)v222 + 32))
        {
          v249 = 0;
          *((_QWORD *)v222 + 6) = 0;
LABEL_258:
          WTF::fastFree(v249, v45, v46, v47, v48, v49, v50, v51);
          v177 = (unint64_t)v222;
          goto LABEL_168;
        }
      }
      else if (*((_BYTE *)v222 + 13))
      {
        __break(0xC471u);
        JUMPOUT(0x198E5F754);
      }
      v249 = *((_QWORD *)v222 + 6);
      goto LABEL_258;
    }
    atomic_store(1u, (unsigned int *)v125);
    if (*((_BYTE *)v125 + 13) == 1)
    {
      if (*((_BYTE *)v125 + 32))
      {
        v255 = 0;
        *((_QWORD *)v125 + 6) = 0;
LABEL_274:
        WTF::fastFree(v255, v45, v46, v47, v48, v49, v50, v51);
        WTF::fastFree((unint64_t)v125, v256, v257, v258, v259, v260, v261, v262);
        goto LABEL_97;
      }
    }
    else if (*((_BYTE *)v125 + 13))
    {
      __break(0xC471u);
      JUMPOUT(0x198E5F834);
    }
    v255 = *((_QWORD *)v125 + 6);
    goto LABEL_274;
  }
  v103 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v103 = 0x4A00000002;
  *(_QWORD *)(v103 + 8) = "'maximum' property must be greater than or equal to the 'initial' property";
  *(_DWORD *)(v103 + 16) = 4;
  v277 = (WTF::StringImpl *)v103;
  v104 = *(_QWORD *)(this + 128);
  v105 = *(JSC::Heap ***)(this + 56);
  if ((v104 & 1) != 0)
  {
    v253 = *(uint64_t (**)(unint64_t *))(v104 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v254 = (JSC::JSObject **)(this - 16);
    else
      v254 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
    v278 = (unint64_t)*v254;
    v279 = this;
    v280 = (char *)(this + 128);
    v104 = v253(&v278);
  }
  v106 = JSC::ErrorInstance::create(v105, v104, &v277, 0, 0, 0, 2, 1);
  v113 = (JSC::Exception *)v106;
  if ((v106 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v106 & 0xFFFFFFFE) + 0x4C)))
  {
    v113 = (JSC::Exception *)JSC::Exception::create((uint64_t)v75, (JSC::VM *)v106, 0, v107, v108, v109, v110, v111);
  }
  v36 = (uint64_t)JSC::VM::throwException(v75, (JSC::JSGlobalObject *)this, v113, v112, v107, v108, v109, v110, v111);
  v114 = v277;
  v277 = 0;
  if (!v114)
    goto LABEL_238;
  if (*(_DWORD *)v114 == 2)
  {
    WTF::StringImpl::~StringImpl(v114, v45, v46, v47, v48, v49, v50, v51);
LABEL_168:
    WTF::fastFree(v177, v178, v179, v180, v181, v182, v183, v184);
    goto LABEL_238;
  }
  *(_DWORD *)v114 -= 2;
LABEL_238:
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v241, v242, v243, v244, v245, v246, v247, v248);
      if (!v53)
        goto LABEL_244;
      goto LABEL_242;
    }
    *(_DWORD *)v76 -= 2;
  }
  if (v53)
    goto LABEL_242;
LABEL_244:
  v39 = v274;
LABEL_245:
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v225, v226, v227, v228, v229, v230, v231, v232);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
  return v36;
}

