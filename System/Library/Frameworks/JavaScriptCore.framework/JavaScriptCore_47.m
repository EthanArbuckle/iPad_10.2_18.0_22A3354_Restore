void JSC::LiteralParser<char16_t>::setErrorMessageForToken(uint64_t a1, int a2)
{
  uint64_t v3;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a2 == 1)
  {
    v3 = WTF::fastCompactMalloc((WTF *)0x20);
    v11 = v3;
    v12 = "Expected ']'";
  }
  else
  {
    if (a2 != 3)
    {
      __break(0xC471u);
      return;
    }
    v3 = WTF::fastCompactMalloc((WTF *)0x20);
    v11 = v3;
    v12 = "Expected '}'";
  }
  *(_QWORD *)v3 = 0xC00000002;
  *(_QWORD *)(v3 + 8) = v12;
  *(_DWORD *)(v3 + 16) = 4;
  v13 = *(WTF::StringImpl **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v11;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
}

uint64_t JSC::LiteralParser<char16_t>::parsePrimitiveValue(JSC::VM &)::{lambda(unsigned int)#1}::operator()(_QWORD *a1, int a2, _WORD *a3, unsigned int a4)
{
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  _DWORD *v11;
  _WORD *v12;
  uint64_t v13;
  const char *v14;
  _WORD *v15;
  __int16 v16;
  _DWORD *v17;

  v7 = a2 & 0x7FFFFFFF;
  if ((a2 & 0x7FFFFFFF) == a4)
    v8 = 0;
  else
    v8 = 3;
  v9 = a4 + v8 + 24;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * v9 + 20), &v17);
  v11 = v17;
  if (v17)
  {
    *v17 = 2;
    v11[1] = v9;
    *(_OWORD *)(v11 + 5) = xmmword_199158AA0;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    v12 = (_WORD *)v11 + 33;
    *(_OWORD *)(v11 + 9) = xmmword_199158AB0;
    *(_QWORD *)(v11 + 13) = 0x65006900660069;
    v11[15] = 2097266;
    *((_WORD *)v11 + 32) = 34;
    if (a4 == 1)
    {
      *v12 = *a3;
    }
    else if (a4)
    {
      result = (uint64_t)memcpy((char *)v11 + 66, a3, 2 * a4);
    }
    if (v7 != a4)
    {
      v13 = 2 * v8;
      v14 = "...";
      v15 = &v12[a4];
      do
      {
        v16 = *(unsigned __int8 *)v14++;
        *v15++ = v16;
        v13 -= 2;
      }
      while (v13);
    }
    v12[a4 + v8] = 34;
  }
  *a1 = v11;
  return result;
}

void JSC::reifyStaticAccessor(JSC::GetterSetter *a1, uint64_t a2, int *a3, unint64_t a4, JSC::JSObject *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v12;
  uint64_t (*v13)(JSC::GetterSetter *);
  WTF::StringImpl *v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  JSC::JSGlobalObject *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  const char *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;

  v12 = *(JSC::VM **)(16 * (*a3 & 0xFFFFFFFE) + 0x28);
  v13 = *(uint64_t (**)(JSC::GetterSetter *))(a2 + 24);
  if (!v13)
  {
    v26 = 0;
LABEL_16:
    v34 = JSC::GetterSetter::create(a1, v12, v26, 0, a5, a6, a7, a8);
    v35 = *(_DWORD *)(a2 + 16);
    v59 = 0;
    v60 = (uint64_t)a3;
    v61 = -1;
    v36.n128_u64[0] = 0x100000001000000;
    v62 = 0x1000000;
    v63 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(a3, (uint64_t)a1, a4, v34, v35, (uint64_t)&v59, v37, v38, v36);
    v39 = *(_DWORD *)(16 * (*a3 & 0xFFFFFFFE) + 0x10);
    if ((v35 & 2) != 0)
      v39 |= 0x10u;
    if (*(_QWORD *)(*((_QWORD *)a1 + 5244) + 16) == a4)
      v40 = 8;
    else
      v40 = 24;
    *(_DWORD *)(16 * (*a3 & 0xFFFFFFFE) + 0x10) = v40 | v39;
    return;
  }
  if ((*(_BYTE *)(a2 + 17) & 2) != 0)
  {
    v28 = v13(a1);
    v26 = (JSC::JSGlobalObject *)JSC::JSFunction::create((uint64_t)a1, v28, v12, v29, v30, v31, v32, v33);
    goto LABEL_16;
  }
  v59 = "get ";
  v60 = 5;
  if (a4)
  {
    if ((*(_BYTE *)(a4 + 16) & 0x20) != 0)
      v14 = 0;
    else
      v14 = (WTF::StringImpl *)a4;
  }
  else
  {
    v14 = 0;
  }
  *(_DWORD *)v14 += 2;
  v57 = v14;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v59, (uint64_t *)&v57, (int **)&v58);
  v22 = v57;
  v57 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  if (v58)
  {
    v26 = (JSC::JSGlobalObject *)JSC::JSFunction::create((uint64_t)a1, (uint64_t)v12, 0, &v58, *(_QWORD *)(a2 + 24), 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    v27 = v58;
    v58 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::~StringImpl(v27, v23, v24, v25, (uint64_t)a5, a6, a7, a8);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      else
      {
        *(_DWORD *)v27 -= 2;
      }
    }
    goto LABEL_16;
  }
}

uint64_t JSC::setUpStaticFunctionSlot(JSC::VM *a1, uint64_t a2, uint64_t a3, unsigned int *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  int DirectOffset;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t result;
  int v28;
  unint64_t v29;

  v29 = a5;
  v28 = 0;
  v13 = *(_DWORD *)(a3 + 16);
  DirectOffset = JSC::JSObject::getDirectOffset(a4, a1, a5, (const JSC::PropertyTable *)&v28, a5, a6, a7, a8);
  if (DirectOffset == -1)
  {
    if ((*(_BYTE *)((16 * *a4) | 0x12) & 0x40) != 0)
      return 0;
    JSC::reifyStaticProperty(a1, a2, &v29, a3, (uint64_t)a4, v15, v16, v17, v18);
    DirectOffset = JSC::JSObject::getDirectOffset(a4, a1, v29, (const JSC::PropertyTable *)&v28, v19, v20, v21, v22);
    if (DirectOffset == -1)
    {
      WTF::dataLog<char [36],JSC::PropertyName,char [30]>("Static hashtable initialiation for ", (uint64_t *)&v29, " did not produce a property.\n");
      __break(0xC471u);
      JUMPOUT(0x198B3BD98);
    }
  }
  v23 = v28;
  if ((v13 & 0x10) != 0)
  {
    if (DirectOffset > 63)
    {
      v24 = *((_QWORD *)a4 + 1) - 8;
      v25 = 63 - DirectOffset;
      v26 = 2;
      goto LABEL_7;
    }
    v24 = (uint64_t)(a4 + 4);
    v26 = 2;
    goto LABEL_10;
  }
  if (DirectOffset <= 63)
  {
    v24 = (uint64_t)(a4 + 4);
    v26 = 1;
LABEL_10:
    v25 = DirectOffset;
    goto LABEL_7;
  }
  v24 = *((_QWORD *)a4 + 1) - 8;
  v25 = 63 - DirectOffset;
  v26 = 1;
LABEL_7:
  *(_QWORD *)a6 = *(_QWORD *)(v24 + 8 * v25);
  *(_QWORD *)(a6 + 32) = a4;
  *(_BYTE *)(a6 + 49) = v26;
  *(_DWORD *)(a6 + 16) = v23;
  *(_DWORD *)(a6 + 20) = DirectOffset;
  result = 1;
  *(_BYTE *)(a6 + 48) = 1;
  return result;
}

uint64_t WTF::dataLog<char [36],JSC::PropertyName,char [30]>(const char *a1, uint64_t *a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  WTF::PrintStream *v17;
  uint64_t v18;
  char *v19;
  size_t v20;
  const char *v21;
  char v23;
  char **v24;
  char *v25;
  int v26;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v25 = &v23;
    v24 = &v25;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v24, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", a1);
  v9 = *a2;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  v17 = v10;
  if (!v9)
  {
    v21 = "<null property name>";
LABEL_9:
    WTF::PrintStream::printf(v10, "%s", v21);
    goto LABEL_13;
  }
  v18 = *a2;
  if (!*a2)
  {
    v21 = "(null StringImpl*)";
    goto LABEL_9;
  }
  v19 = *(char **)(v18 + 8);
  v20 = *(unsigned int *)(v18 + 4);
  if ((*(_BYTE *)(v18 + 16) & 4) != 0)
    WTF::StringImpl::utf8ForCharacters(v19, v20, (uint64_t)&v25, v16);
  else
    WTF::StringImpl::utf8ForCharacters((uint64_t)v19, v20, 0, v11, v12, v13, v14, v15, (uint64_t)&v25);
  WTF::printExpectedCStringHelper(v17, "StringImpl*", &v25);
  if (v26 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v26])(&v24, &v25);
LABEL_13:
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

void JSC::MapConstructor::finishCreation(JSC::JSObject *a1, JSC::BuiltinExecutables **a2, _DWORD *a3)
{
  JSC::BuiltinExecutables **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  WTF::StringImpl *v19;
  JSC::VM *v20;
  uint64_t v21;
  JSC::JSGlobalObject *v22;
  JSC::JSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __n128 v35;
  WTF::StringImpl *v36;
  JSC::VM *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  double v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  WTF::StringImpl *v98;
  __int128 v99;

  v6 = a2 + 5244;
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x300000002;
  *(_QWORD *)(v7 + 8) = "Map";
  *(_DWORD *)(v7 + 16) = 4;
  v98 = (WTF::StringImpl *)v7;
  JSC::InternalFunction::finishCreation((unint64_t)a1, (JSC *)a2, 0, (JSC::VM *)&v98, 1, v8, v9, v10);
  v19 = v98;
  v98 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *((_QWORD *)*v6 + 270), (uint64_t)a3, 14, v15, v16, v17, v18);
  v20 = *(JSC::VM **)(16 * (*a3 & 0xFFFFFFFE) + 0x28);
  v21 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v21 = 0x1400000002;
  *(_QWORD *)(v21 + 8) = "get [Symbol.species]";
  *(_DWORD *)(v21 + 16) = 4;
  v98 = (WTF::StringImpl *)v21;
  v22 = (JSC::JSGlobalObject *)JSC::JSFunction::create((uint64_t)a2, (uint64_t)v20, 0, &v98, (uint64_t)JSC::globalFuncSpeciesGetter, 0, 155, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v34 = JSC::GetterSetter::create((JSC::GetterSetter *)a2, v20, v22, 0, v23, v24, v25, v26);
  v36 = v98;
  v98 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  JSC::JSObject::putDirectNonIndexAccessorWithoutTransition((unsigned int *)a1, (uint64_t)a2, *((_QWORD *)*v6 + 344), v34, (const JSC::PropertyTable *)0x16, v31, v32, v33, v35);
  if (BYTE2(qword_1ECF4C7A0))
  {
    v38 = *(WTF::StringImpl **)(*((_QWORD *)*v6 + 6) + 736);
    if (v38)
    {
      *(_DWORD *)v38 += 2;
      v39 = JSC::BuiltinExecutables::mapConstructorGroupByCodeExecutable(a2[11644]);
      v40 = (WTF::StringImpl *)*((_QWORD *)a2[11644] + 1);
      ++*((_DWORD *)v40 + 2);
      v98 = v40;
      v99 = xmmword_1991252F0;
      v49 = JSC::UnlinkedFunctionExecutable::link(v39, (uint64_t)a2, 0, (uint64_t)&v98, 0, 0, 0, v41, COERCE_DOUBLE(0x16F2200016BDBLL), v42, v43);
      v50 = v98;
      v98 = 0;
      if (v50)
      {
        if (*((_DWORD *)v50 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v50 + 8))(v50);
        else
          --*((_DWORD *)v50 + 2);
      }
      v51 = JSC::JSFunction::create((uint64_t)a2, v49, v20, v44, v45, v46, v47, v48);
      JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v38, v51, 4, v52, v53, v54, v55);
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::~StringImpl(v38, v56, v57, v58, v59, v60, v61, v62);
        WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
      }
      else
      {
        *(_DWORD *)v38 -= 2;
      }
    }
    else
    {
      v87 = JSC::mapConstructorGroupByCodeGenerator(a2, v37);
      v93 = JSC::JSFunction::create((uint64_t)a2, v87, v20, v88, v89, v90, v91, v92);
      JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, 0, v93, 4, v94, v95, v96, v97);
    }
  }
}

JSC::Exception *JSC::callMap(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"Map", 4);
}

unint64_t JSC::constructMap(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  unint64_t v13;
  JSC::Heap **v14;
  uint64_t v15;
  JSC::Heap *v16;
  unint64_t result;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  JSC::JSMap *v26;
  _BOOL4 v27;
  JSC::Heap *v28;
  unint64_t SlowCase;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t j;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t Index;
  JSC::JSGlobalObject *i;
  char **v49;
  unint64_t v50;
  unint64_t v51;
  JSC::JSObject *SubclassStructure;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int8x16_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int8x16_t v80;
  JSC::JSGlobalObject *v81;
  uint64_t v82;
  int v83;
  JSC::VM *v84;
  JSC::VM *v85;
  unint64_t v86;
  uint64_t (*v87)(JSC::VM **);
  JSC::VM **v88;
  unint64_t v89;
  uint64_t (*v90)(JSC::VM **);
  JSC::VM **v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(JSC::VM **);
  JSC::VM **v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  JSC::JSGlobalObject *v109;
  uint64_t v110;
  JSC::VM *v111;
  _QWORD *v112;
  unint64_t *v113;
  uint64_t *v114;
  _BYTE *v115;
  _BYTE v116[24];
  uint64_t v117;
  unint64_t v118;
  BOOL v119;
  unint64_t v120;
  JSC::VM *v121;

  v11 = *(_QWORD *)(this + 56);
  v120 = 0;
  v121 = (JSC::VM *)v11;
  v12 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v12 != *((JSC::JSGlobalObject **)a2 + 3))
  {
    v111 = (JSC::VM *)v11;
    for (i = v12; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v109 + 2))
    {
      while (1)
      {
        v49 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v49 != &JSC::JSBoundFunction::s_info && v49 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v50 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_64;
      }
      v109 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v111, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v50 = 0;
LABEL_64:
    if (*(_DWORD *)(v11 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v13 = 0;
      goto LABEL_3;
    }
    v51 = *(_QWORD *)(v50 + 1520);
    if ((v51 & 1) != 0)
    {
      v101 = *(uint64_t (**)(JSC::VM **))(v51 & 0xFFFFFFFFFFFFFFFCLL);
      v102 = (JSC::VM **)(v50 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v50 & 8) != 0)
        v102 = (JSC::VM **)(v50 - 16);
      v111 = *v102;
      v112 = (_QWORD *)v50;
      v113 = (unint64_t *)(v50 + 1520);
      v51 = v101(&v111);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v12, (JSC::JSObject *)v51, a4, a5, a6, a7, a8);
    goto LABEL_67;
  }
  v13 = *(_QWORD *)(this + 1520);
  if ((v13 & 1) != 0)
  {
    v87 = *(uint64_t (**)(JSC::VM **))(v13 & 0xFFFFFFFFFFFFFFFCLL);
    v88 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v88 = (JSC::VM **)(this - 16);
    v111 = *v88;
    v112 = (_QWORD *)this;
    v113 = (unint64_t *)(this + 1520);
    SubclassStructure = (JSC::JSObject *)v87(&v111);
LABEL_67:
    v13 = (unint64_t)SubclassStructure;
  }
LABEL_3:
  v120 = v13;
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v14 = (JSC::Heap **)(v11 + 40664);
  if (*((_DWORD *)a2 + 8) == 1 || (v15 = *((_QWORD *)a2 + 6), (v15 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v16 = *v14;
    if (!*v14)
      v16 = JSC::GCClient::Heap::mapSpaceSlow((JSC::Heap **)(v11 + 37552));
    result = *((_QWORD *)v16 + 3);
    if (result >= *((_QWORD *)v16 + 4))
    {
      result = *((_QWORD *)v16 + 5);
      if ((result & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v11, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v16, v11 + 192, 32, 0, 0, v103, v104, v105);
LABEL_10:
        *(_DWORD *)result = 0;
        v18 = *(_DWORD *)(v13 + 8);
        *(_DWORD *)result = v13 >> 4;
        *(_DWORD *)(result + 4) = v18;
        *(_QWORD *)(result + 8) = 0;
        *(_QWORD *)(result + 16) = 0;
        if (*(_BYTE *)(v11 + 755))
          __dmb(0xAu);
        return result;
      }
      v89 = *(_QWORD *)(result + 8) ^ *((_QWORD *)v16 + 6);
      *((_QWORD *)v16 + 4) = result + HIDWORD(v89);
      *((_QWORD *)v16 + 5) = result + (int)v89;
    }
    *((_QWORD *)v16 + 3) = result + 32;
    goto LABEL_10;
  }
  v19 = *(_QWORD *)(v13 + 40);
  v20 = *(_QWORD *)(v19 + 2264);
  if ((v20 & 1) != 0)
    v21 = (v20 >> 1) & 3;
  else
    v21 = *(unsigned __int8 *)(v20 + 4);
  if (v21 == 2 || (v22 = *(_QWORD *)(v13 + 48)) == 0)
  {
    v25 = 0;
  }
  else
  {
    v23 = *(_QWORD *)(v19 + 1520);
    if ((v23 & 1) != 0)
    {
      v90 = *(uint64_t (**)(JSC::VM **))(v23 & 0xFFFFFFFFFFFFFFFCLL);
      v91 = (JSC::VM **)(v19 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v19 & 8) != 0)
        v91 = (JSC::VM **)(v19 - 16);
      v111 = *v91;
      v112 = (_QWORD *)v19;
      v113 = (unint64_t *)(v19 + 1520);
      v23 = v90(&v111);
    }
    v24 = *(_QWORD *)(v23 + 48);
    if (v24 == 2)
      v24 = 0;
    v25 = v24 == v22;
  }
  v119 = v25;
  if ((v15 & 0xFFFE000000000002) == 0)
  {
    v26 = *(_BYTE *)(v15 + 5) == 69 ? (JSC::JSMap *)v15 : 0;
    v27 = v26 && v25;
    if (v27 && JSC::JSMap::isIteratorProtocolFastAndNonObservable(v26))
      return JSC::JSMap::clone(v26, (JSC::JSGlobalObject *)this, (JSC::VM *)v11, v13, a5, a6, a7, a8);
  }
  v118 = 0;
  v28 = *v14;
  if (!*v14)
    v28 = JSC::GCClient::Heap::mapSpaceSlow((JSC::Heap **)(v11 + 37552));
  SlowCase = *((_QWORD *)v28 + 3);
  if (SlowCase >= *((_QWORD *)v28 + 4))
  {
    v110 = (uint64_t)v28;
    SlowCase = *((_QWORD *)v28 + 5);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v11, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v110, v11 + 192, 32, 0, 0, v106, v107, v108);
      goto LABEL_33;
    }
    v92 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v28 + 6);
    *((_QWORD *)v28 + 4) = SlowCase + HIDWORD(v92);
    *((_QWORD *)v28 + 5) = SlowCase + (int)v92;
  }
  *((_QWORD *)v28 + 3) = SlowCase + 32;
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  v30 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)SlowCase = v13 >> 4;
  *(_DWORD *)(SlowCase + 4) = v30;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  v117 = 0;
  v118 = SlowCase;
  v116[0] = 0;
  if (v25)
    goto LABEL_36;
  v100 = JSC::JSObject::get((unsigned int *)SlowCase, this, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2296), (uint64_t)a4, a5, a6, a7, a8);
  v117 = v100;
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v93, v94, v95, v96, v97, v98, v99))
  {
    return 0;
  }
  JSC::getCallData(v100, (uint64_t)v116);
  if (!v116[0])
    return JSC::throwTypeError(this, &v121, (uint64_t)"'set' property of a Map should be callable.", 44);
LABEL_36:
  v111 = (JSC::VM *)&v119;
  v112 = &v118;
  v113 = &v120;
  v114 = &v117;
  v115 = v116;
  v31 = *(_QWORD *)(this + 56);
  if ((v15 & 0xFFFE000000000002) != 0
    || *(_BYTE *)(v15 + 5) != 36
    || ((v32 = *(unsigned __int8 *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 8), (v32 & 0x10) != 0)
      ? (v33 = ((v32 & 0xE) + 10) >> 1)
      : (v33 = (v32 >> 1) & 7),
        (v34 = *(_DWORD *)(this + 4 * v33 + 852)) != 0 ? (v35 = 16 * (v34 & 0xFFFFFFFE)) : (v35 = 0),
        v35 != 16 * (*(_DWORD *)v15 & 0xFFFFFFFE)
     || ((v36 = *(_QWORD *)(this + 2216), (v36 & 1) != 0)
       ? (v37 = (v36 >> 1) & 3)
       : (v37 = *(unsigned __int8 *)(v36 + 4)),
         v37 == 2)))
  {
    v60 = JSC::iteratorForIterable((JSC::VM **)this, v15, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    v61 = v53;
    if (!*(_DWORD *)(v31 + 80)
      || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31, v53, v54, v55, v56, v57, v58, v59))
    {
      while (1)
      {
        v62 = JSC::iteratorStep((JSC::JSGlobalObject *)this, v60, v61, v55, v56, v57, v58, v59);
        if (*(_QWORD *)(v31 + 16) || v62 == 6)
          break;
        v78 = JSC::iteratorValue((JSC::JSGlobalObject *)this, v62, v63, v64, v65, v66, v67, v68, v69);
        if (*(_DWORD *)(v31 + 80))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31, v71, v72, v73, v74, v75, v76, v77))
            break;
        }
        JSC::constructMap(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()((uint64_t)&v111, (JSC::VM *)v31, (JSC::JSGlobalObject *)this, v78, v74, v75, v76, v77);
        if (*(_QWORD *)(v31 + 16))
        {
          v81 = (JSC::JSGlobalObject *)this;
          v82 = v60;
LABEL_85:
          JSC::iteratorClose(v81, v82, v79, v55, v56, v57, v58, v59, v80);
          return v118;
        }
      }
    }
  }
  else
  {
    for (j = 0; ; ++j)
    {
      v39 = (*(_BYTE *)(v15 + 4) & 0xE) != 0 ? *(unsigned int *)(*(_QWORD *)(v15 + 8) - 8) : 0;
      if (j >= v39)
        break;
      Index = JSC::JSObject::getIndex((JSC::JSObject *)v15, (JSC::JSGlobalObject *)this, j, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v31 + 80))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v31, v40, v41, v42, v43, v44, v45, v46))
          break;
      }
      JSC::constructMap(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()((uint64_t)&v111, (JSC::VM *)v31, (JSC::JSGlobalObject *)this, Index, v43, v44, v45, v46);
      if (*(_QWORD *)(v31 + 16))
      {
        v83 = *(_DWORD *)(this + 1000);
        if (v83)
          v84 = (JSC::VM *)(16 * (v83 & 0xFFFFFFFE));
        else
          v84 = 0;
        v85 = JSC::JSArrayIterator::create(v31, v84, v15, 0xFFFE000000000001, a5, a6, a7, a8);
        v82 = (uint64_t)v85;
        *(double *)v80.i64 = (double)(j + 1);
        if ((int)j + 1 < 0)
          v86 = COERCE__INT64((double)(j + 1)) + 0x2000000000000;
        else
          v86 = (j + 1) | 0xFFFE000000000000;
        *((_QWORD *)v85 + 2) = v86;
        v81 = (JSC::JSGlobalObject *)this;
        goto LABEL_85;
      }
    }
  }
  return v118;
}

unint64_t JSC::mapPrivateFuncMapIterationNext(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;

  v9 = (unint64_t *)*((_QWORD *)this + 7);
  v10 = v9 + 5230;
  v11 = *((_QWORD *)a2 + 6);
  v12 = v9[5231];
  if (!v12)
    v12 = JSC::VM::orderedHashTableSentinelSlow((JSC::VM *)v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v12 == v11)
    goto LABEL_16;
  v13 = *((_DWORD *)a2 + 14);
  v14 = *(_QWORD *)(v11 + 16);
  if (v14)
    v15 = (v14 & 0xFFFE000000000002) == 0;
  else
    v15 = 0;
  if (v15)
  {
    do
    {
      if (v13)
      {
        v23 = *(_DWORD *)(v11 + 24);
        if (v23)
        {
          if (v23 == -1)
          {
            v13 = 0;
          }
          else
          {
            v24 = v23 + 2;
            if ((v23 + 2) >= 3)
            {
              v25 = 0;
              v26 = v13 - v23;
              v27 = (unsigned int *)(v11 + 32);
              v28 = 2 - v24;
              while (1)
              {
                v29 = *v27;
                v27 += 2;
                if (v13 <= v29)
                  break;
                if (v28 == --v25)
                {
                  v13 = v26;
                  goto LABEL_27;
                }
              }
              v13 += v25;
            }
          }
        }
      }
LABEL_27:
      v11 = v14;
      v14 = *(_QWORD *)(v14 + 16);
      if (v14)
        v30 = (v14 & 0xFFFE000000000002) == 0;
      else
        v30 = 0;
    }
    while (v30);
  }
  v16 = *(_DWORD *)(v11 + 24);
  if (v13 >= v16 + (int)v14)
  {
LABEL_16:
    v11 = v9[5231];
    if (!v11)
      return JSC::VM::orderedHashTableSentinelSlow((JSC::VM *)v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v17 = 3 * v13 + *(_DWORD *)(v11 + 32) + 4;
    v18 = v13 | 0xFFFE000000000000;
    v19 = v14 + v16 - v13;
    while (1)
    {
      v20 = *(_QWORD *)(v11 + 16 + 8 * v17);
      if ((v20 & 0xFFFE000000000002) != 0)
        break;
      v21 = *v10;
      if (!*v10)
      {
        v21 = JSC::Symbol::create((JSC::Symbol *)v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        *v10 = v21;
      }
      if (v21 != v20)
        break;
      v17 += 3;
      ++v18;
      if (!--v19)
        goto LABEL_16;
    }
    *(_QWORD *)(v11 + 40) = v18;
  }
  return v11;
}

unint64_t JSC::mapPrivateFuncMapIterationEntry(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return *(unsigned int *)(*((_QWORD *)a2 + 6) + 40) | 0xFFFE000000000000;
}

uint64_t JSC::mapPrivateFuncMapIterationEntryKey(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return *(_QWORD *)(*((_QWORD *)a2 + 6)
                   + 8
                   * (*(_DWORD *)(*((_QWORD *)a2 + 6) + 32)
                                  + 3 * *(_DWORD *)(*((_QWORD *)a2 + 6) + 40)
                                  + 4)
                   + 16);
}

uint64_t JSC::mapPrivateFuncMapIterationEntryValue(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return *(_QWORD *)(*((_QWORD *)a2 + 6)
                   + 8
                   * (*(_DWORD *)(*((_QWORD *)a2 + 6) + 32)
                                  + 3 * *(_DWORD *)(*((_QWORD *)a2 + 6) + 40)
                                  + 5)
                   + 16);
}

unint64_t JSC::mapPrivateFuncMapStorage(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  JSC::VM *v10;

  result = *(_QWORD *)(*((_QWORD *)a2 + 6) + 16);
  if (!result)
  {
    v10 = (JSC::VM *)*((_QWORD *)this + 7);
    result = *((_QWORD *)v10 + 5231);
    if (!result)
      return JSC::VM::orderedHashTableSentinelSlow(v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  return result;
}

void JSC::MapIteratorPrototype::finishCreation(JSC::MapIteratorPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  char *v6;
  WTF::StringImpl *v7;
  uint64_t CodeExecutable;
  WTF::StringImpl *v9;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t CodeGenerator;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  WTF::StringImpl *v80;
  __int128 v81;

  v6 = (char *)a2 + 41952;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v7 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2000);
  if (v7)
  {
    *(_DWORD *)v7 += 2;
    CodeExecutable = JSC::BuiltinExecutables::mapIteratorPrototypeNextCodeExecutable(*((JSC::BuiltinExecutables **)a2
                                                                                     + 11644));
    v9 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 11644) + 8);
    ++*((_DWORD *)v9 + 2);
    v80 = v9;
    v81 = xmmword_199125540;
    v18 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)a2, 0, (uint64_t)&v80, 0, 0, 0, v10, COERCE_DOUBLE(0x1C1450001BF48), v11, v12);
    v19 = v80;
    v80 = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
      else
        --*((_DWORD *)v19 + 2);
    }
    v20 = JSC::JSFunction::create((uint64_t)a2, v18, a3, v13, v14, v15, v16, v17);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v7, v20, 4, v21, v22, v23, v24);
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::~StringImpl(v7, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v7 -= 2;
    }
  }
  else
  {
    CodeGenerator = JSC::mapIteratorPrototypeNextCodeGenerator((JSC::BuiltinExecutables **)a2, a2);
    v75 = JSC::JSFunction::create((uint64_t)a2, CodeGenerator, a3, v70, v71, v72, v73, v74);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v75, 4, v76, v77, v78, v79);
  }
  v32 = *(_QWORD *)(*(_QWORD *)v6 + 2776);
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0xC00000002;
  *(_QWORD *)(v33 + 8) = "Map Iterator";
  *(_DWORD *)(v33 + 16) = 4;
  v80 = (WTF::StringImpl *)v33;
  v40 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v80, v34, v35, v36, v37, v38, v39);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v32, v40, 6, v41, v42, v43, v44);
  v52 = v80;
  v80 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
}

void JSC::MapPrototype::finishCreation(JSC::MapPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::BuiltinExecutables **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  double v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  WTF::AtomStringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __n128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __n128 v108;
  WTF::AtomStringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __n128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __n128 v124;
  WTF::AtomStringImpl *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __n128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __n128 v140;
  WTF::AtomStringImpl *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  WTF::AtomStringImpl *v149;
  uint64_t v150;
  uint64_t v151;
  JSC::JSObject *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  JSC::JSGlobalObject *v156;
  WTF::StringImpl *v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __n128 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __n128 v166;
  WTF::AtomStringImpl *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __n128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __n128 v182;
  WTF::AtomStringImpl *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __n128 v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __n128 v203;
  WTF::AtomStringImpl *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  WTF::StringImpl *v211;
  unint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  WTF::StringImpl *v308;
  __int128 v309;

  v6 = (char *)a2 + 41952;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v7 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, (WTF::StringImpl **)(*(_QWORD *)v6 + 1016), (uint64_t)JSC::mapProtoFuncClear, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v6 + 1016), v7, 4, v8, v9, v10, v11);
  JSC::Symbols::clearPrivateName[0] += 2;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::clearPrivateName, v7, 4, v12, v13, v14, v15);
  if (JSC::Symbols::clearPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::clearPrivateName, v16, v17, v18, v19, v20, v21, v22);
    WTF::fastFree(v212, v213, v214, v215, v216, v217, v218, v219);
  }
  else
  {
    JSC::Symbols::clearPrivateName[0] -= 2;
  }
  v23 = (JSC::BuiltinExecutables **)((char *)a2 + 93152);
  v24 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, (WTF::StringImpl **)(*(_QWORD *)v6 + 200), (uint64_t)JSC::mapProtoFuncDelete, 0, 106, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v6 + 200), v24, 4, v25, v26, v27, v28);
  JSC::Symbols::deletePrivateName[0] += 2;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::deletePrivateName, v24, 4, v29, v30, v31, v32);
  if (JSC::Symbols::deletePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::deletePrivateName, v33, v34, v35, v36, v37, v38, v39);
    WTF::fastFree(v220, v221, v222, v223, v224, v225, v226, v227);
  }
  else
  {
    JSC::Symbols::deletePrivateName[0] -= 2;
  }
  v40 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 3952), (uint64_t)JSC::mapProtoFuncEntries, 0, 109, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 3952), v40, 4, v41, v42, v43, v44);
  JSC::Symbols::entriesPrivateName[0] += 2;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::entriesPrivateName, v40, 4, v45, v46, v47, v48);
  if (JSC::Symbols::entriesPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::entriesPrivateName, v49, v50, v51, v52, v53, v54, v55);
    WTF::fastFree(v228, v229, v230, v231, v232, v233, v234, v235);
  }
  else
  {
    JSC::Symbols::entriesPrivateName[0] -= 2;
  }
  v56 = JSC::BuiltinExecutables::mapPrototypeForEachCodeExecutable(*v23);
  v57 = (WTF::StringImpl *)*((_QWORD *)*v23 + 1);
  ++*((_DWORD *)v57 + 2);
  v308 = v57;
  v309 = xmmword_199125210;
  v66 = JSC::UnlinkedFunctionExecutable::link(v56, (uint64_t)a2, 0, (uint64_t)&v308, 0, 0, 0, v58, COERCE_DOUBLE(0x13FF900013DD6), v59, v60);
  v67 = v308;
  v308 = 0;
  if (v67)
  {
    if (*((_DWORD *)v67 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v67 + 8))(v67);
    else
      --*((_DWORD *)v67 + 2);
  }
  v68 = JSC::JSFunction::create((uint64_t)a2, v66, a3, v61, v62, v63, v64, v65);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v6 + 1312), v68, 4, v69, v70, v71, v72);
  JSC::Symbols::forEachPrivateName[0] += 2;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::forEachPrivateName, v68, 4, v73, v74, v75, v76);
  if (JSC::Symbols::forEachPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::forEachPrivateName, v77, v78, v79, v80, v81, v82, v83);
    WTF::fastFree(v236, v237, v238, v239, v240, v241, v242, v243);
  }
  else
  {
    JSC::Symbols::forEachPrivateName[0] -= 2;
  }
  v84 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, (WTF::StringImpl **)(*(_QWORD *)v6 + 1376), (uint64_t)JSC::mapProtoFuncGet, 0, 103, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v6 + 1376), v84, 4, v85, v86, v87, v88);
  JSC::Symbols::getPrivateName[0] += 2;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::getPrivateName, v84, 4, v89, v90, v91, v92);
  if (JSC::Symbols::getPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getPrivateName, v93, v94, v95, v96, v97, v98, v99);
    WTF::fastFree(v244, v245, v246, v247, v248, v249, v250, v251);
  }
  else
  {
    JSC::Symbols::getPrivateName[0] -= 2;
  }
  v100 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, (WTF::StringImpl **)(*(_QWORD *)v6 + 1440), (uint64_t)JSC::mapProtoFuncHas, 0, 104, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v6 + 1440), v100, 4, v101, v102, v103, v104);
  JSC::Symbols::hasPrivateName[0] += 2;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::hasPrivateName, v100, 4, v105, v106, v107, v108);
  if (JSC::Symbols::hasPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::hasPrivateName, v109, v110, v111, v112, v113, v114, v115);
    WTF::fastFree(v252, v253, v254, v255, v256, v257, v258, v259);
  }
  else
  {
    JSC::Symbols::hasPrivateName[0] -= 2;
  }
  v116 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 3016), (uint64_t)JSC::mapProtoFuncKeys, 0, 108, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 3016), v116, 4, v117, v118, v119, v120);
  JSC::Symbols::keysPrivateName[0] += 2;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::keysPrivateName, v116, 4, v121, v122, v123, v124);
  if (JSC::Symbols::keysPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::keysPrivateName, v125, v126, v127, v128, v129, v130, v131);
    WTF::fastFree(v260, v261, v262, v263, v264, v265, v266, v267);
  }
  else
  {
    JSC::Symbols::keysPrivateName[0] -= 2;
  }
  v132 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 2, (WTF::StringImpl **)(*(_QWORD *)v6 + 2296), (uint64_t)JSC::mapProtoFuncSet, 0, 105, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v6 + 2296), v132, 4, v133, v134, v135, v136);
  JSC::Symbols::setPrivateName[0] += 2;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::setPrivateName, v132, 4, v137, v138, v139, v140);
  if (JSC::Symbols::setPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::setPrivateName, v141, v142, v143, v144, v145, v146, v147);
    WTF::fastFree(v268, v269, v270, v271, v272, v273, v274, v275);
  }
  else
  {
    JSC::Symbols::setPrivateName[0] -= 2;
  }
  v148 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v148 = 0x800000002;
  *(_QWORD *)(v148 + 8) = "get size";
  *(_DWORD *)(v148 + 16) = 4;
  v308 = (WTF::StringImpl *)v148;
  v156 = (JSC::JSGlobalObject *)JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v308, (uint64_t)JSC::mapProtoFuncSize, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v157 = v308;
  v308 = 0;
  if (v157)
  {
    if (*(_DWORD *)v157 == 2)
    {
      WTF::StringImpl::~StringImpl(v157, v149, v150, v151, (uint64_t)v152, v153, v154, v155);
      WTF::fastFree(v292, v293, v294, v295, v296, v297, v298, v299);
    }
    else
    {
      *(_DWORD *)v157 -= 2;
    }
  }
  v158 = JSC::GetterSetter::create(a2, a3, v156, 0, v152, v153, v154, v155);
  JSC::JSObject::putDirectNonIndexAccessorWithoutTransition((unsigned int *)this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v6 + 2304), v158, (const JSC::PropertyTable *)0x14, v159, v160, v161, v162);
  JSC::Symbols::sizePrivateName[0] += 2;
  JSC::JSObject::putDirectNonIndexAccessorWithoutTransition((unsigned int *)this, (uint64_t)a2, (unint64_t)JSC::Symbols::sizePrivateName, v158, (const JSC::PropertyTable *)0x14, v163, v164, v165, v166);
  if (JSC::Symbols::sizePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::sizePrivateName, v167, v168, v169, v170, v171, v172, v173);
    WTF::fastFree(v276, v277, v278, v279, v280, v281, v282, v283);
  }
  else
  {
    JSC::Symbols::sizePrivateName[0] -= 2;
  }
  v174 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 3024), (uint64_t)JSC::mapProtoFuncValues, 0, 107, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 3024), v174, 4, v175, v176, v177, v178);
  JSC::Symbols::valuesPrivateName[0] += 2;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::valuesPrivateName, v174, 4, v179, v180, v181, v182);
  if (JSC::Symbols::valuesPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::valuesPrivateName, v183, v184, v185, v186, v187, v188, v189);
    WTF::fastFree(v284, v285, v286, v287, v288, v289, v290, v291);
  }
  else
  {
    JSC::Symbols::valuesPrivateName[0] -= 2;
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v6 + 2712), v40, 4, v187, v188, v189, v190);
  v191 = *(_QWORD *)(*(_QWORD *)v6 + 2776);
  v192 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v192 = 0x300000002;
  *(_QWORD *)(v192 + 8) = "Map";
  *(_DWORD *)(v192 + 16) = 4;
  v308 = (WTF::StringImpl *)v192;
  v199 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v308, v193, v194, v195, v196, v197, v198);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v191, v199, 6, v200, v201, v202, v203);
  v211 = v308;
  v308 = 0;
  if (v211)
  {
    if (*(_DWORD *)v211 == 2)
    {
      WTF::StringImpl::~StringImpl(v211, v204, v205, v206, v207, v208, v209, v210);
      WTF::fastFree(v300, v301, v302, v303, v304, v305, v306, v307);
    }
    else
    {
      *(_DWORD *)v211 -= 2;
    }
  }
  JSC::JSGlobalObject::installMapPrototypeWatchpoint(a3, this, v205, v206, v207, v208, v209, v210);
}

uint64_t JSC::mapProtoFuncClear(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t NotAnObjectError;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t SlowCase;
  JSC::VM *v34;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  v34 = v9;
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)this, v10);
    JSC::VM::throwException(v9, this, NotAnObjectError, v20, v21, v22, v23, v24);
  }
  else
  {
    if (v10 && *(_BYTE *)(v10 + 5) == 69)
      goto LABEL_4;
    JSC::throwTypeError((unint64_t)this, &v34, (uint64_t)"Map operation called on non-Map object", 39);
  }
  v10 = 0;
LABEL_4:
  if (*((_DWORD *)v9 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 10;
  }
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    return 10;
  v12 = *((_QWORD *)this + 7);
  v34 = (JSC::VM *)v12;
  v13 = *(_QWORD *)(v12 + 41656);
  v14 = *(_QWORD *)(v12 + 11032);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 + 60);
    v16 = *(_QWORD *)(v14 + 24);
    if (v16 < *(_QWORD *)(v14 + 32))
    {
      *(_QWORD *)(v14 + 24) = v16 + v15;
      goto LABEL_9;
    }
    v16 = *(_QWORD *)(v14 + 40);
    if ((v16 & 1) == 0)
    {
      v25 = *(_QWORD *)(v16 + 8) ^ *(_QWORD *)(v14 + 48);
      *(_QWORD *)(v14 + 32) = v16 + HIDWORD(v25);
      *(_QWORD *)(v14 + 40) = v16 + (int)v25;
      *(_QWORD *)(v14 + 24) = v16 + v15;
      goto LABEL_10;
    }
    v26 = *(_QWORD *)(v12 + 11032);
    v27 = *(_QWORD *)(v12 + 41656);
    v28 = *(unsigned int *)(v14 + 60);
    JSC::sanitizeStackForVM((JSC *)v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v29 = v28;
    v13 = v27;
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v26, v12 + 192, v29, 0, 1, v30, v31, v32);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v12 + 10792, (JSC *)v12, 0x130uLL, 0, a5, a6, a7, a8);
  }
  v16 = SlowCase;
LABEL_9:
  if (!v16)
  {
    JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)&v34);
    goto LABEL_15;
  }
LABEL_10:
  *(_DWORD *)v16 = 0;
  v17 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)v16 = v13 >> 4;
  *(_DWORD *)(v16 + 4) = v17;
  *(_QWORD *)(v16 + 8) = 0x2400000024;
  if ((*(_BYTE *)(v16 + 4) & 0xE) == 8)
  {
    *(_OWORD *)(v16 + 272) = 0u;
    *(_OWORD *)(v16 + 288) = 0u;
    *(_OWORD *)(v16 + 240) = 0u;
    *(_OWORD *)(v16 + 256) = 0u;
    *(_OWORD *)(v16 + 208) = 0u;
    *(_OWORD *)(v16 + 224) = 0u;
    *(_OWORD *)(v16 + 176) = 0u;
    *(_OWORD *)(v16 + 192) = 0u;
    *(_OWORD *)(v16 + 144) = 0u;
    *(_OWORD *)(v16 + 160) = 0u;
    *(_OWORD *)(v16 + 112) = 0u;
    *(_OWORD *)(v16 + 128) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
  }
  if (*(_BYTE *)(v12 + 755))
    __dmb(0xAu);
  *(int64x2_t *)(v16 + 16) = vdupq_n_s64(0xFFFE000000000000);
  *(_QWORD *)(v16 + 32) = 0xFFFE000000000008;
LABEL_15:
  if (!*(_DWORD *)(v12 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    *(_QWORD *)(v11 + 16) = v16;
    *(_QWORD *)(v11 + 24) = 0xFFFE0000FFFFFFFFLL;
    if (v16 && (v16 & 0xFFFE000000000002) == 0)
    {
      if (*(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v11 + 7))
        JSC::Heap::writeBarrierSlowPath(v12 + 192, v11);
      *(_QWORD *)(v10 + 16) = v16;
    }
    else
    {
      *(_QWORD *)(v10 + 16) = v16;
      if (!v16)
        return 10;
    }
    if (*(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v10 + 7))
      JSC::Heap::writeBarrierSlowPath(v12 + 192, v10);
  }
  return 10;
}

uint64_t JSC::mapProtoFuncDelete(JSC::VM **this, uint64_t a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC *v10;
  JSC::VM *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  int v17;
  WTF::StringImpl **v18;
  unsigned int v19;
  int v20;
  char v21;
  unint64_t v22;
  JSC::Symbol *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  WTF *v29;
  const WTF::StringImpl *v30;
  JSC *v31;
  BOOL v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t result;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  JSC *v42;
  int v43;
  JSC *v44;
  int **v45;
  uint64_t v46;
  JSC *v47;
  unint64_t *v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  JSC *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  int v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  BOOL v68;
  int v69;
  WTF::StringImpl **v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  JSC *v78;
  int v79;
  JSC *v80;
  int **v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  double v85;
  uint64_t v86;
  JSC *v87;
  BOOL v88;
  uint64_t v89;
  JSC *v90;
  unint64_t v91;
  JSC::JSGlobalObject *v92;
  unint64_t NotAnObjectError;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  JSC *v99;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC *v101;
  uint64_t v102;
  JSC *v103;
  BOOL v104;
  JSC *v105;
  BOOL v106;
  JSC *v107;
  JSC *v108;
  BOOL v109;
  JSC *v110;
  BOOL v111;
  JSC *v112;
  JSC *v113;
  uint64_t Slow;
  JSC *v115;
  JSC *v116;
  BOOL v117;
  unint64_t v118;
  BOOL v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  JSC *v123;
  int v124;
  JSC *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t SlowCase;
  unint64_t v130;
  unint64_t v131;
  JSC *v133;
  JSC *v134;
  JSC *v135;
  JSC *v136;
  unsigned int v137;
  int v138;
  JSC::JSCell *v139;
  uint64_t v140;
  unint64_t *v141;
  JSC *v142;
  JSC *v143;
  JSC::JSCell *v144;
  JSC::VM *v145;

  v9 = a2;
  v10 = (JSC *)this;
  v11 = this[7];
  v12 = *(_QWORD *)(a2 + 40);
  v145 = v11;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    v91 = v12;
    v92 = (JSC::JSGlobalObject *)this;
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)this, v91);
    JSC::VM::throwException(v11, v92, NotAnObjectError, v94, v95, v96, v97, v98);
LABEL_125:
    v10 = v92;
    v12 = 0;
    goto LABEL_4;
  }
  if (!v12 || *(_BYTE *)(v12 + 5) != 69)
  {
    v92 = (JSC::JSGlobalObject *)this;
    JSC::throwTypeError((unint64_t)this, &v145, (uint64_t)"Map operation called on non-Map object", 39);
    goto LABEL_125;
  }
LABEL_4:
  if (*((_DWORD *)v11 + 20))
  {
    v99 = v10;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v10 = v99;
    if (hasExceptionsAfterHandlingTraps)
      return 10;
  }
  if (*(_DWORD *)(v9 + 32) == 1)
    v13 = 10;
  else
    v13 = *(_QWORD *)(v9 + 48);
  v14 = *(_QWORD *)(v12 + 16);
  if (!v14)
    return 6;
  v15 = *((_QWORD *)v10 + 7);
  v16 = (unint64_t *)(v14 + 16);
  v144 = (JSC::JSCell *)v12;
  if (!*(_DWORD *)(v14 + 16))
    goto LABEL_47;
  if ((v13 + 0x2000000000000) >> 50)
  {
    a9.i64[0] = v13 - 0x2000000000000;
    v86 = (int)COERCE_DOUBLE(v13 - 0x2000000000000);
    if (COERCE_DOUBLE(v13 - 0x2000000000000) == (double)(int)v86)
      v13 = v86 | 0xFFFE000000000000;
  }
  if ((v13 & 0xFFFE000000000002) != 0)
  {
    v21 = 0;
    goto LABEL_50;
  }
  v17 = *(unsigned __int8 *)(v13 + 5);
  if (v17 == 2)
  {
    v18 = (WTF::StringImpl **)(v13 + 8);
    if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    {
      v44 = v10;
      v45 = JSC::JSRopeString::resolveRope(v13, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      v10 = v44;
      v18 = (WTF::StringImpl **)v45;
    }
    if (*(_DWORD *)(v15 + 80)
      && (v110 = v10,
          v111 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8),
          v10 = v110,
          v111))
    {
      v20 = -1;
    }
    else
    {
      v19 = *((_DWORD *)*v18 + 4);
      if (v19 < 0x100)
      {
        v42 = v10;
        v43 = WTF::StringImpl::hashSlowCase(*v18);
        v10 = v42;
        v20 = v43;
      }
      else
      {
        v20 = v19 >> 8;
      }
    }
    v21 = 1;
    goto LABEL_18;
  }
  if (v17 != 3)
  {
    v21 = 1;
LABEL_50:
    v39 = (v13 + ~(v13 << 32)) ^ ((v13 + ~(v13 << 32)) >> 22);
    v40 = 9 * ((v39 + ~(v39 << 13)) ^ ((v39 + ~(v39 << 13)) >> 8));
    v41 = (v40 ^ (v40 >> 15)) + ~((v40 ^ (v40 >> 15)) << 27);
    v20 = (v41 >> 31) ^ v41;
    goto LABEL_18;
  }
  v125 = v10;
  v20 = *(_DWORD *)(v13 + 12);
  if (!v20)
    v20 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v13);
  v21 = 1;
  v10 = v125;
LABEL_18:
  if (*(_DWORD *)(v15 + 80))
  {
    v103 = v10;
    v104 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v10 = v103;
    if (v104)
    {
      v28 = 0;
      if (!*(_DWORD *)(v15 + 80))
        goto LABEL_42;
      goto LABEL_131;
    }
  }
  *(double *)a9.i64 = (double)(int)v13;
  if (v13 <= 0xFFFDFFFFFFFFFFFFLL)
    a9.i64[0] = v13 - 0x2000000000000;
  v22 = v16[((*(_DWORD *)(v14 + 32) - 1) & v20) + 4];
  if (!v22)
  {
LABEL_47:
    v28 = -1;
    goto LABEL_40;
  }
  v23 = (JSC::Symbol *)*((_QWORD *)v10 + 7);
  v24 = (unint64_t *)((char *)v23 + 41840);
  if (!(v13 >> 49))
  {
    if ((v21 & 1) == 0)
    {
      while (1)
      {
        v130 = v16[v22];
        if ((v130 & 0xFFFE000000000002) != 0)
        {
          if (v13 == v130)
            goto LABEL_39;
        }
        else
        {
          v131 = *v24;
          if (!*v24)
          {
            v133 = v10;
            v131 = JSC::Symbol::create(v23, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            v10 = v133;
            *v24 = v131;
          }
          if (v13 == v130 && v131 != v130)
            goto LABEL_39;
        }
        v22 = v16[(v22 + 2)];
        v28 = -1;
        if (!v22)
          goto LABEL_40;
      }
    }
    while (1)
    {
      v25 = v16[v22];
      if ((v25 & 0xFFFE000000000002) != 0)
        break;
      v26 = *v24;
      if (!*v24)
      {
        v112 = v10;
        v26 = JSC::Symbol::create(v23, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v10 = v112;
        *v24 = v26;
      }
      if (v26 != v25)
      {
        if (v13 == v25)
          goto LABEL_39;
        v27 = *(unsigned __int8 *)(v13 + 5);
        if (v27 == 2)
        {
          if (*(_BYTE *)(v25 + 5) != 2)
            break;
          v29 = *(WTF **)(v13 + 8);
          if ((v29 & 1) != 0
            || (v30 = *(const WTF::StringImpl **)(v25 + 8), (v30 & 1) != 0))
          {
            v31 = v10;
            v32 = JSC::JSString::equalSlowCase((JSC::JSString *)v13, v10, (JSC::JSString *)v25, a4, a5, a6, a7, a8, a9);
          }
          else
          {
            v31 = v10;
            v32 = WTF::equal(v29, v30, a3);
          }
        }
        else
        {
          if (v27 != 3 || *(_BYTE *)(v25 + 5) != 3)
            break;
          v31 = v10;
          v32 = JSC::JSBigInt::equals((JSC::JSBigInt *)v13, (JSC::JSBigInt *)v25, a3);
        }
        v10 = v31;
        if (v32)
          goto LABEL_39;
      }
LABEL_32:
      v22 = v16[(v22 + 2)];
      v28 = -1;
      if (!v22)
        goto LABEL_40;
    }
    if (v13 == v25)
      goto LABEL_39;
    goto LABEL_32;
  }
  v82 = a9.i64[0];
  while (1)
  {
    v83 = v16[v22];
    if ((v83 & 0xFFFE000000000002) != 0)
      goto LABEL_105;
    v84 = *v24;
    if (!*v24)
    {
      v143 = (JSC *)a9.i64[0];
      v136 = v10;
      v84 = JSC::Symbol::create(v23, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v10 = v136;
      a9.i64[0] = (uint64_t)v143;
      *v24 = v84;
    }
    if (v84 != v83)
    {
LABEL_105:
      if (v13 == v83)
        break;
      if (v83 >> 49)
      {
        v85 = (double)(int)v83;
        if (v83 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v85 = v83 - 0x2000000000000;
        if (v82 == *(_QWORD *)&v85)
          break;
      }
    }
    v22 = v16[(v22 + 2)];
    v28 = -1;
    if (!v22)
      goto LABEL_40;
  }
LABEL_39:
  v28 = v22;
LABEL_40:
  if (!*(_DWORD *)(v15 + 80))
  {
    if (v28 != -1)
      goto LABEL_42;
    return 6;
  }
LABEL_131:
  v105 = v10;
  v106 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = 6;
  if (v28 == -1)
    return result;
  v10 = v105;
  if (v106)
    return result;
LABEL_42:
  v33 = (unint64_t *)(v15 + 41840);
  v34 = *(_QWORD *)(v15 + 41840);
  if (v34)
  {
    v16[v28] = v34;
  }
  else
  {
    v101 = v10;
    v34 = JSC::Symbol::create((JSC::Symbol *)v15, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    *v33 = v34;
    v16[v28] = v34;
    if (!v34)
    {
      v34 = JSC::Symbol::create((JSC::Symbol *)v15, (JSC::VM *)a2, v102, a4, a5, a6, a7, a8);
      *v33 = v34;
    }
    v10 = v101;
  }
  v16[v28 + 1] = v34;
  v35 = *(_QWORD *)(v14 + 24) + 1;
  v36 = *(_QWORD *)(v14 + 16) - 1;
  *(_QWORD *)(v14 + 16) = v36;
  *(_QWORD *)(v14 + 24) = v35;
  v37 = *(_DWORD *)(v14 + 32);
  result = 7;
  if (v37 != 8 && v37 >> 2 > v36)
  {
    v46 = v37 >> 1;
    v47 = (JSC *)*((_QWORD *)v10 + 7);
    v48 = (unint64_t *)((char *)v47 + 41656);
    v145 = v47;
    v49 = 4 * v46 + 4;
    v141 = (unint64_t *)((char *)v47 + 41656);
    v142 = v47;
    if (v49 < 0x10000001)
    {
      v50 = *v48;
      v51 = 8 * (4 * v46 + 4);
      v52 = (v51 + 31) & 0xFFFFFFFF0;
      if (v52 <= 0x1F60
        && (v53 = *(_QWORD *)((char *)v47 + (((unint64_t)(v51 + 31) >> 1) & 0x7FFFFFFF8) + 10880)) != 0)
      {
        v54 = *(_QWORD *)(v53 + 24);
        if (v54 >= *(_QWORD *)(v53 + 32))
        {
          v135 = v10;
          v140 = *(unsigned int *)(v53 + 60);
          v120 = *(_QWORD *)(v53 + 40);
          if ((v120 & 1) == 0)
          {
            v54 = *(_QWORD *)(v53 + 40);
            v121 = *(_QWORD *)(v120 + 8) ^ *(_QWORD *)(v53 + 48);
            *(_QWORD *)(v53 + 32) = v54 + HIDWORD(v121);
            *(_QWORD *)(v53 + 40) = v54 + (int)v121;
            v48 = (unint64_t *)((char *)v47 + 41656);
            *(_QWORD *)(v53 + 24) = v54 + v140;
LABEL_60:
            *(_DWORD *)v54 = 0;
            v55 = *(_DWORD *)(v50 + 8);
            *(_DWORD *)v54 = v50 >> 4;
            *(_DWORD *)(v54 + 4) = v55;
            *(_DWORD *)(v54 + 8) = v49;
            *(_DWORD *)(v54 + 12) = v49;
            if (4 * (_DWORD)v46 != -4 && (*(_BYTE *)(v54 + 4) & 0xE) == 8)
            {
              v56 = v54;
              v57 = v10;
              bzero((void *)(v54 + 16), 8 * (4 * v46 + 4));
              v54 = v56;
              v48 = v141;
              v47 = v142;
              v10 = v57;
            }
            if (*((_BYTE *)v47 + 755))
              __dmb(0xAu);
            *(_QWORD *)(v54 + 16) = v36 | 0xFFFE000000000000;
            *(_QWORD *)(v54 + 24) = 0xFFFE000000000000;
            *(_QWORD *)(v54 + 32) = v46 | 0xFFFE000000000000;
            goto LABEL_66;
          }
          JSC::sanitizeStackForVM(v47, (JSC::VM *)a2, v52, a4, a5, a6, a7, a8);
          SlowCase = JSC::LocalAllocator::allocateSlowCase(v53, (uint64_t)v142 + 192, v140, 0, 1, v126, v127, v128);
          v48 = v141;
          v47 = v142;
          v54 = SlowCase;
          v10 = v135;
        }
        else
        {
          *(_QWORD *)(v53 + 24) = v54 + *(unsigned int *)(v53 + 60);
        }
      }
      else
      {
        v113 = v10;
        Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v47 + 10792, v47, v52, 0, a5, a6, a7, a8);
        v48 = v141;
        v47 = v142;
        v10 = v113;
        v54 = Slow;
      }
      if (v54)
        goto LABEL_60;
    }
    v115 = v10;
    JSC::throwOutOfMemoryError(v10, (JSC::JSGlobalObject *)&v145);
    v48 = v141;
    v47 = v142;
    v10 = v115;
    v54 = 0;
LABEL_66:
    v139 = (JSC::JSCell *)v54;
    if (*((_DWORD *)v47 + 20))
    {
      v116 = v10;
      v117 = JSC::VM::hasExceptionsAfterHandlingTraps(v47, a2, v52, a4, a5, a6, a7, a8);
      v54 = (unint64_t)v139;
      v48 = v141;
      v47 = v142;
      v10 = v116;
      if (v117)
      {
LABEL_111:
        v54 = 0;
        goto LABEL_112;
      }
    }
    v58 = (v36 + v35);
    if (!(_DWORD)v58)
    {
LABEL_112:
      if (!*((_DWORD *)v47 + 20)
        || (v118 = v54,
            v119 = JSC::VM::hasExceptionsAfterHandlingTraps(v47, a2, v52, a4, a5, a6, a7, a8),
            v54 = v118,
            v47 = v142,
            !v119))
      {
        *v16 = v54;
        v89 = (uint64_t)v47 + 192;
        if (v54
          && (v54 & 0xFFFE000000000002) == 0
          && *((_DWORD *)v47 + 190) >= *(unsigned __int8 *)(v14 + 7))
        {
          v122 = v54;
          JSC::Heap::writeBarrierSlowPath((uint64_t)v47 + 192, v14);
          v54 = v122;
          v47 = v142;
        }
        *((_QWORD *)v144 + 2) = v54;
        result = 7;
        if (!v144 || !v54)
          return result;
        if (*((_DWORD *)v47 + 190) >= *((unsigned __int8 *)v144 + 7))
          JSC::Heap::writeBarrierSlowPath(v89, (unint64_t)v144);
      }
      return 7;
    }
    v59 = 0;
    v60 = v46 + 1;
    v61 = v54 + 16;
    v62 = v46 - 1;
    v63 = v37 + 5;
    v137 = 2;
    v138 = v46 - 1;
    a2 = -1;
    while (1)
    {
      v64 = v16[v63 - 1];
      if ((v64 & 0xFFFE000000000002) != 0)
      {
        v66 = (v60 + 3);
        *(_QWORD *)(v61 + 8 * v66) = v64;
      }
      else
      {
        v65 = v48[23];
        if (!v65)
        {
          v90 = v10;
          v65 = JSC::Symbol::create(v47, (JSC::VM *)0xFFFFFFFFFFFFFFFFLL, v52, a4, a5, a6, a7, a8);
          a2 = -1;
          v62 = v138;
          v54 = (unint64_t)v139;
          v48 = v141;
          v47 = v142;
          v10 = v90;
          v141[23] = v65;
        }
        if (v65 == v64)
        {
          v16[v137++] = v59 | 0xFFFE000000000000;
          goto LABEL_88;
        }
        v66 = (v60 + 3);
        *(_QWORD *)(v61 + 8 * v66) = v64;
        if (v54 && v64 && *((_DWORD *)v47 + 190) >= *(unsigned __int8 *)(v54 + 7))
        {
          v134 = v10;
          JSC::Heap::writeBarrierSlowPath((uint64_t)v47 + 192, (unint64_t)v139);
          a2 = -1;
          v62 = v138;
          v54 = (unint64_t)v139;
          v48 = v141;
          v47 = v142;
          v10 = v134;
        }
      }
      v67 = v16[v63];
      *(_QWORD *)(v61 + 8 * (v60 + 4)) = v67;
      if (v67)
        v68 = (v67 & 0xFFFE000000000002) == 0;
      else
        v68 = 0;
      if (v68 && *((_DWORD *)v47 + 190) >= *(unsigned __int8 *)(v54 + 7))
      {
        v107 = v10;
        JSC::Heap::writeBarrierSlowPath((uint64_t)v47 + 192, (unint64_t)v139);
        a2 = -1;
        v62 = v138;
        v54 = (unint64_t)v139;
        v48 = v141;
        v47 = v142;
        v10 = v107;
      }
      if ((v64 & 0xFFFE000000000002) == 0)
      {
        v69 = *(unsigned __int8 *)(v64 + 5);
        if (v69 == 2)
        {
          v70 = (WTF::StringImpl **)(v64 + 8);
          if ((*(_BYTE *)(v64 + 8) & 1) != 0)
          {
            v80 = v10;
            v81 = JSC::JSRopeString::resolveRope(v64, v10, v52, a4, a9, a5, a6, a7, a8);
            a2 = -1;
            v62 = v138;
            v54 = (unint64_t)v139;
            v48 = v141;
            v47 = v142;
            v10 = v80;
            v70 = (WTF::StringImpl **)v81;
          }
          if (!*((_DWORD *)v47 + 20))
            goto LABEL_84;
          v108 = v10;
          v109 = JSC::VM::hasExceptionsAfterHandlingTraps(v47, -1, v52, a4, a5, a6, a7, a8);
          a2 = -1;
          v62 = v138;
          v54 = (unint64_t)v139;
          v48 = v141;
          v47 = v142;
          v10 = v108;
          if (v109)
          {
            v72 = -1;
          }
          else
          {
LABEL_84:
            v71 = *((_DWORD *)*v70 + 4);
            if (v71 < 0x100)
            {
              v78 = v10;
              v79 = WTF::StringImpl::hashSlowCase(*v70);
              a2 = -1;
              v62 = v138;
              v54 = (unint64_t)v139;
              v48 = v141;
              v47 = v142;
              v10 = v78;
              v72 = v79;
            }
            else
            {
              v72 = v71 >> 8;
            }
          }
          goto LABEL_86;
        }
        if (v69 == 3)
        {
          v72 = *(_DWORD *)(v64 + 12);
          if (!v72)
          {
            v123 = v10;
            v124 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v64);
            a2 = -1;
            v62 = v138;
            v54 = (unint64_t)v139;
            v48 = v141;
            v47 = v142;
            v10 = v123;
            v72 = v124;
          }
          goto LABEL_86;
        }
      }
      v75 = (v64 + ~(v64 << 32)) ^ ((v64 + ~(v64 << 32)) >> 22);
      v76 = 9 * ((v75 + ~(v75 << 13)) ^ ((v75 + ~(v75 << 13)) >> 8));
      v77 = (v76 ^ (v76 >> 15)) + ~((v76 ^ (v76 >> 15)) << 27);
      v72 = (v77 >> 31) ^ v77;
LABEL_86:
      if (*((_DWORD *)v47 + 20))
      {
        v87 = v10;
        v88 = JSC::VM::hasExceptionsAfterHandlingTraps(v47, -1, v52, a4, a5, a6, a7, a8);
        a2 = -1;
        v62 = v138;
        v54 = (unint64_t)v139;
        v48 = v141;
        v47 = v142;
        v10 = v87;
        if (v88)
          goto LABEL_111;
      }
      v73 = (v72 & v62) + 4;
      v74 = *(_QWORD *)(v61 + 8 * v73);
      *(_QWORD *)(v61 + 8 * v73) = v66 | 0xFFFE000000000000;
      *(_QWORD *)(v61 + 8 * (v66 + 2)) = v74;
      v60 = v66;
LABEL_88:
      ++v59;
      v63 += 3;
      if (v58 == v59)
        goto LABEL_112;
    }
  }
  return result;
}

unint64_t JSC::mapProtoFuncEntries(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t NotAnObjectError;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  JSC::Exception *v21;
  int v22;
  unint64_t v23;
  JSC::VM *v24;

  v9 = *((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  v24 = (JSC::VM *)v9;
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)this, v10);
    v21 = (JSC::Exception *)NotAnObjectError;
    if ((NotAnObjectError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)NotAnObjectError & 0xFFFFFFFE) + 0x4C)))
    {
      v21 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)NotAnObjectError, 0, v15, v16, v17, v18, v19);
    }
    JSC::VM::throwException((JSC::VM *)v9, this, v21, v20, v15, v16, v17, v18, v19);
  }
  else
  {
    if (v10 && *(_BYTE *)(v10 + 5) == 69)
      goto LABEL_4;
    JSC::throwTypeError((unint64_t)this, &v24, (uint64_t)"Map operation called on non-Map object", 39);
  }
  v10 = 0;
LABEL_4:
  if (*(_DWORD *)(v9 + 80))
  {
    v22 = *(_DWORD *)(v9 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
    {
      v23 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v10, a4, a5, a6, a7, a8);
      v10 = v23;
    }
    if (*(_QWORD *)(v9 + 16))
      return 10;
  }
  v11 = *((_DWORD *)this + 251);
  if (v11)
    v12 = 16 * (v11 & 0xFFFFFFFE);
  else
    v12 = 0;
  return JSC::JSMapIterator::create(this, v12, v10, 2, a5, a6, a7, a8);
}

uint64_t JSC::mapProtoFuncGet(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int **v18;
  unsigned int v19;
  int v20;
  char v21;
  uint64_t v22;
  JSC::Symbol *v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  WTF *v29;
  const WTF::StringImpl *v30;
  uint64_t result;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  uint64_t v42;
  unint64_t NotAnObjectError;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  JSC::Exception *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  char v55;
  JSC::VM *v56;

  v11 = *((_QWORD *)this + 7);
  v12 = *((_QWORD *)a2 + 5);
  v56 = (JSC::VM *)v11;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)this, v12);
    v50 = (JSC::Exception *)NotAnObjectError;
    if ((NotAnObjectError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)NotAnObjectError & 0xFFFFFFFE) + 0x4C)))
    {
      v50 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)NotAnObjectError, 0, v44, v45, v46, v47, v48);
    }
    JSC::VM::throwException((JSC::VM *)v11, this, v50, v49, v44, v45, v46, v47, v48);
    goto LABEL_88;
  }
  if (!v12 || *(_BYTE *)(v12 + 5) != 69)
  {
    JSC::throwTypeError((unint64_t)this, &v56, (uint64_t)"Map operation called on non-Map object", 39);
LABEL_88:
    v12 = 0;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v51 = *(_DWORD *)(v11 + 80);
    if ((v51 & 0x27) != 0 && (v51 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 10;
  }
  v13 = *((_DWORD *)a2 + 8) == 1 ? 10 : *((_QWORD *)a2 + 6);
  v14 = *(_QWORD *)(v12 + 16);
  if (!v14)
    return 10;
  v15 = *((_QWORD *)this + 7);
  v16 = v14 + 16;
  if (!*(_DWORD *)(v14 + 16))
    goto LABEL_56;
  if ((v13 + 0x2000000000000) >> 50)
  {
    a9.i64[0] = v13 - 0x2000000000000;
    v42 = (int)COERCE_DOUBLE(v13 - 0x2000000000000);
    if (COERCE_DOUBLE(v13 - 0x2000000000000) == (double)(int)v42)
      v13 = v42 | 0xFFFE000000000000;
  }
  if ((v13 & 0xFFFE000000000002) != 0)
  {
    v21 = 0;
    goto LABEL_59;
  }
  v17 = *(unsigned __int8 *)(v13 + 5);
  if (v17 != 2)
  {
    if (v17 == 3)
    {
      v20 = *(_DWORD *)(v13 + 12);
      if (!v20)
        v20 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v13);
      goto LABEL_17;
    }
    v21 = 1;
LABEL_59:
    v35 = (v13 + ~(v13 << 32)) ^ ((v13 + ~(v13 << 32)) >> 22);
    v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
    v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
    v20 = (v37 >> 31) ^ v37;
    goto LABEL_18;
  }
  v18 = (int **)(v13 + 8);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    v18 = JSC::JSRopeString::resolveRope(v13, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (!*(_DWORD *)(v15 + 80))
    goto LABEL_15;
  v54 = *(_DWORD *)(v15 + 80);
  if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v15 + 16))
  {
    v20 = -1;
  }
  else
  {
LABEL_15:
    v19 = (*v18)[4];
    if (v19 < 0x100)
      v20 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)*v18);
    else
      v20 = v19 >> 8;
  }
LABEL_17:
  v21 = 1;
LABEL_18:
  if (*(_DWORD *)(v15 + 80))
  {
    v52 = *(_DWORD *)(v15 + 80);
    if ((v52 & 0x27) != 0 && (v52 & 0x20) == 0)
    {
      v55 = v21;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v21 = v55;
    }
    if (*(_QWORD *)(v15 + 16))
    {
      v28 = 0;
      if (*(_DWORD *)(v15 + 80))
        goto LABEL_92;
LABEL_41:
      if (*(_QWORD *)(v16 + 8 * (v28 + 1)))
        return *(_QWORD *)(v16 + 8 * (v28 + 1));
      else
        return 10;
    }
  }
  *(double *)a9.i64 = (double)(int)v13;
  if (v13 <= 0xFFFDFFFFFFFFFFFFLL)
    a9.i64[0] = v13 - 0x2000000000000;
  v22 = *(_QWORD *)(v16 + 8 * (((*(_DWORD *)(v14 + 32) - 1) & v20) + 4));
  if (!v22)
  {
LABEL_56:
    v28 = -1;
    goto LABEL_39;
  }
  v23 = (JSC::Symbol *)*((_QWORD *)this + 7);
  v24 = (unint64_t *)((char *)v23 + 41840);
  if (!(v13 >> 49))
  {
    if ((v21 & 1) == 0)
    {
      v28 = -1;
      while (1)
      {
        v32 = *(_QWORD *)(v16 + 8 * v22);
        if ((v32 & 0xFFFE000000000002) != 0)
        {
          if (v13 == v32)
            goto LABEL_38;
        }
        else
        {
          v33 = *v24;
          if (!*v24)
          {
            v33 = JSC::Symbol::create(v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            *v24 = v33;
          }
          if (v13 == v32 && v33 != v32)
            goto LABEL_38;
        }
        v22 = *(_QWORD *)(v16 + 8 * (v22 + 2));
        if (!v22)
          goto LABEL_39;
      }
    }
    while (1)
    {
      v25 = *(_QWORD *)(v16 + 8 * v22);
      if ((v25 & 0xFFFE000000000002) != 0)
        break;
      v26 = *v24;
      if (!*v24)
      {
        v26 = JSC::Symbol::create(v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        *v24 = v26;
      }
      if (v26 != v25)
      {
        if (v13 == v25)
          goto LABEL_38;
        v27 = *(unsigned __int8 *)(v13 + 5);
        if (v27 == 2)
        {
          if (*(_BYTE *)(v25 + 5) != 2)
            break;
          v29 = *(WTF **)(v13 + 8);
          if ((v29 & 1) != 0
            || (v30 = *(const WTF::StringImpl **)(v25 + 8), (v30 & 1) != 0))
          {
            if (JSC::JSString::equalSlowCase((JSC::JSString *)v13, this, (JSC::JSString *)v25, a4, a5, a6, a7, a8, a9))
              goto LABEL_38;
          }
          else if (WTF::equal(v29, v30, a3))
          {
            goto LABEL_38;
          }
        }
        else
        {
          if (v27 != 3 || *(_BYTE *)(v25 + 5) != 3)
            break;
          if (JSC::JSBigInt::equals((JSC::JSBigInt *)v13, (JSC::JSBigInt *)v25, a3))
            goto LABEL_38;
        }
      }
LABEL_32:
      v22 = *(_QWORD *)(v16 + 8 * (v22 + 2));
      v28 = -1;
      if (!v22)
        goto LABEL_39;
    }
    if (v13 == v25)
      goto LABEL_38;
    goto LABEL_32;
  }
  v38 = a9.i64[0];
  while (1)
  {
    v39 = *(_QWORD *)(v16 + 8 * v22);
    if ((v39 & 0xFFFE000000000002) != 0)
      goto LABEL_76;
    v40 = *v24;
    if (!*v24)
    {
      v40 = JSC::Symbol::create(v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      *v24 = v40;
    }
    if (v40 != v39)
    {
LABEL_76:
      if (v13 == v39)
        break;
      if (v39 >> 49)
      {
        v41 = (double)(int)v39;
        if (v39 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v41 = v39 - 0x2000000000000;
        if (v38 == *(_QWORD *)&v41)
          break;
      }
    }
    v22 = *(_QWORD *)(v16 + 8 * (v22 + 2));
    v28 = -1;
    if (!v22)
      goto LABEL_39;
  }
LABEL_38:
  v28 = v22;
LABEL_39:
  if (!*(_DWORD *)(v15 + 80))
  {
    if (v28 != -1)
      goto LABEL_41;
    return 10;
  }
LABEL_92:
  v53 = *(_DWORD *)(v15 + 80);
  if ((v53 & 0x27) != 0 && (v53 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  result = 10;
  if (v28 != -1 && !*(_QWORD *)(v15 + 16))
    goto LABEL_41;
  return result;
}

uint64_t JSC::mapProtoFuncHas(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int **v18;
  unsigned int v19;
  int v20;
  char v21;
  uint64_t v22;
  JSC::Symbol *v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  WTF *v30;
  const WTF::StringImpl *v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  double v39;
  uint64_t v40;
  unint64_t NotAnObjectError;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  JSC::Exception *v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  JSC::VM *v54;

  v11 = *((_QWORD *)this + 7);
  v12 = *((_QWORD *)a2 + 5);
  v54 = (JSC::VM *)v11;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)this, v12);
    v48 = (JSC::Exception *)NotAnObjectError;
    if ((NotAnObjectError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)NotAnObjectError & 0xFFFFFFFE) + 0x4C)))
    {
      v48 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)NotAnObjectError, 0, v42, v43, v44, v45, v46);
    }
    JSC::VM::throwException((JSC::VM *)v11, this, v48, v47, v42, v43, v44, v45, v46);
  }
  else
  {
    if (v12 && *(_BYTE *)(v12 + 5) == 69)
      goto LABEL_4;
    JSC::throwTypeError((unint64_t)this, &v54, (uint64_t)"Map operation called on non-Map object", 39);
  }
  v12 = 0;
LABEL_4:
  if (*(_DWORD *)(v11 + 80))
  {
    v49 = *(_DWORD *)(v11 + 80);
    if ((v49 & 0x27) != 0 && (v49 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 10;
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v14 = *(_QWORD *)(v12 + 16);
  if (!v14)
    return 6;
  v15 = v14 + 16;
  if (!*(_DWORD *)(v14 + 16))
    return 6;
  v16 = *((_QWORD *)this + 7);
  if ((v13 + 0x2000000000000) >> 50)
  {
    a9.i64[0] = v13 - 0x2000000000000;
    v40 = (int)COERCE_DOUBLE(v13 - 0x2000000000000);
    if (COERCE_DOUBLE(v13 - 0x2000000000000) == (double)(int)v40)
      v13 = v40 | 0xFFFE000000000000;
  }
  if ((v13 & 0xFFFE000000000002) != 0)
  {
    v21 = 0;
    goto LABEL_43;
  }
  v17 = *(unsigned __int8 *)(v13 + 5);
  if (v17 != 2)
  {
    if (v17 == 3)
    {
      v20 = *(_DWORD *)(v13 + 12);
      if (!v20)
        v20 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v13);
      goto LABEL_17;
    }
    v21 = 1;
LABEL_43:
    v33 = (v13 + ~(v13 << 32)) ^ ((v13 + ~(v13 << 32)) >> 22);
    v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
    v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
    v20 = (v35 >> 31) ^ v35;
    goto LABEL_18;
  }
  v18 = (int **)(v13 + 8);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    v18 = JSC::JSRopeString::resolveRope(v13, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v16 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v20 = -1;
  }
  else
  {
    v19 = (*v18)[4];
    if (v19 < 0x100)
      v20 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)*v18);
    else
      v20 = v19 >> 8;
  }
LABEL_17:
  v21 = 1;
LABEL_18:
  if (*(_DWORD *)(v16 + 80))
  {
    v50 = *(_DWORD *)(v16 + 80);
    if ((v50 & 0x27) != 0 && (v50 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v16 + 16))
      return 7;
  }
  v22 = *(_QWORD *)(v15 + 8 * (((*(_DWORD *)(v14 + 32) - 1) & v20) + 4));
  if (v22)
  {
    v23 = (JSC::Symbol *)*((_QWORD *)this + 7);
    v24 = (unint64_t *)((char *)v23 + 41840);
    *(double *)a9.i64 = (double)(int)v13;
    if (v13 <= 0xFFFDFFFFFFFFFFFFLL)
      a9.i64[0] = v13 - 0x2000000000000;
    if (!(v13 >> 49))
    {
      v25 = 6;
      if ((v21 & 1) == 0)
      {
        while (1)
        {
          v26 = v22;
          v51 = *(_QWORD *)(v15 + 8 * v22);
          if ((v51 & 0xFFFE000000000002) != 0)
          {
            if (v13 == v51)
              goto LABEL_38;
          }
          else
          {
            v52 = *v24;
            if (!*v24)
            {
              v52 = JSC::Symbol::create(v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              *v24 = v52;
            }
            if (v13 == v51 && v52 != v51)
              goto LABEL_38;
          }
          v22 = *(_QWORD *)(v15 + 8 * (v22 + 2));
          if (!v22)
            return v25;
        }
      }
      while (1)
      {
        v26 = v22;
        v27 = *(_QWORD *)(v15 + 8 * v22);
        if ((v27 & 0xFFFE000000000002) != 0)
          break;
        v28 = *v24;
        if (!*v24)
        {
          v28 = JSC::Symbol::create(v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          *v24 = v28;
        }
        if (v28 != v27)
        {
          if (v13 == v27)
            goto LABEL_38;
          v29 = *(unsigned __int8 *)(v13 + 5);
          if (v29 == 2)
          {
            if (*(_BYTE *)(v27 + 5) != 2)
              break;
            v30 = *(WTF **)(v13 + 8);
            if ((v30 & 1) != 0
              || (v31 = *(const WTF::StringImpl **)(v27 + 8), (v31 & 1) != 0))
            {
              if (JSC::JSString::equalSlowCase((JSC::JSString *)v13, this, (JSC::JSString *)v27, a4, a5, a6, a7, a8, a9))
              {
                goto LABEL_38;
              }
            }
            else if (WTF::equal(v30, v31, a3))
            {
              goto LABEL_38;
            }
          }
          else
          {
            if (v29 != 3 || *(_BYTE *)(v27 + 5) != 3)
              break;
            if (JSC::JSBigInt::equals((JSC::JSBigInt *)v13, (JSC::JSBigInt *)v27, a3))
              goto LABEL_38;
          }
        }
LABEL_32:
        v22 = *(_QWORD *)(v15 + 8 * (v22 + 2));
        if (!v22)
          return v25;
      }
      if (v13 == v27)
        goto LABEL_38;
      goto LABEL_32;
    }
    v36 = a9.i64[0];
    v25 = 6;
    while (1)
    {
      v37 = *(_QWORD *)(v15 + 8 * v22);
      if ((v37 & 0xFFFE000000000002) != 0)
        goto LABEL_58;
      v38 = *v24;
      if (!*v24)
      {
        v38 = JSC::Symbol::create(v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        *v24 = v38;
      }
      if (v38 != v37)
      {
LABEL_58:
        v26 = v22;
        if (v13 == v37)
          break;
        if (v37 >> 49)
        {
          v39 = (double)(int)v37;
          if (v37 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v39 = v37 - 0x2000000000000;
          if (v36 == *(_QWORD *)&v39)
            break;
        }
      }
      v22 = *(_QWORD *)(v15 + 8 * (v22 + 2));
      if (!v22)
        return v25;
    }
LABEL_38:
    if (v26 != 0xFFFFFFFFLL)
      return 7;
  }
  return 6;
}

unint64_t JSC::mapProtoFuncKeys(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t NotAnObjectError;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::VM *v20;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  v20 = v9;
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)this, v10);
    JSC::VM::throwException(v9, this, NotAnObjectError, v15, v16, v17, v18, v19);
LABEL_14:
    v10 = 0;
    goto LABEL_4;
  }
  if (!v10 || *(_BYTE *)(v10 + 5) != 69)
  {
    JSC::throwTypeError((unint64_t)this, &v20, (uint64_t)"Map operation called on non-Map object", 39);
    goto LABEL_14;
  }
LABEL_4:
  if (*((_DWORD *)v9 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 10;
  }
  v11 = *((_DWORD *)this + 251);
  if (v11)
    v12 = 16 * (v11 & 0xFFFFFFFE);
  else
    v12 = 0;
  return JSC::JSMapIterator::create(this, v12, v10, 0, a5, a6, a7, a8);
}

unint64_t JSC::mapProtoFuncSet(JSC *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8, int8x16_t a9)
{
  JSC *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  int v21;
  int **v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  JSC::Symbol *v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  WTF *v36;
  const WTF::StringImpl *v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  char *v44;
  uint64_t v45;
  int v46;
  int v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int **v83;
  char v84;
  char v85;
  unint64_t v86;
  unsigned int v87;
  unint64_t v88;
  size_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  char *v102;
  int v103;
  unsigned int v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  int v110;
  int **v111;
  WTF::StringImpl *v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  JSC::JSGlobalObject *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  int **v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  double v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  WTF::StringImpl *v138;
  int8x16_t v139;
  JSC::JSGlobalObject *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF::AtomStringImpl *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t Error;
  double v153;
  JSC::VM *v154;
  int v155;
  int v156;
  int v157;
  unint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int **v165;
  WTF::StringImpl *v166;
  unsigned int v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  JSC::CallFrame *v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  JSC::CallFrame *v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  BOOL v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  BOOL v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  JSC::CallFrame *Slow;
  unint64_t v234;
  JSC::JSGlobalObject *v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  int **v241;
  JSC::JSGlobalObject *v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  BOOL v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  BOOL v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  JSC *v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  JSC::CallFrame *v314;
  BOOL v315;
  uint64_t v316;
  unint64_t v317;
  JSC *v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  BOOL v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  JSC *v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unint64_t SlowCase;
  JSC::JSBigInt *v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t v346;
  unint64_t v347;
  int v348;
  JSC::JSBigInt *v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  BOOL v355;
  JSC::JSGlobalObject *v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  JSC::CallFrame *v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t v369;
  JSC *v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  unint64_t v400;
  int v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t *v406;
  JSC *v407;
  uint64_t v408;
  unint64_t v409;
  JSC *v410;
  JSC *v411;
  JSC *v412;
  JSC *v413;
  JSC *v414;
  JSC *v415;
  JSC *v416;
  unint64_t v417;
  JSC::CallFrame *v418;
  JSC::CallFrame *v419;
  JSC::CallFrame *v420;
  JSC::CallFrame *v421;
  JSC::CallFrame *v422;
  JSC::CallFrame *v423;
  unint64_t v424;
  unint64_t v425;
  JSC::CallFrame *v426;
  JSC::CallFrame *v427;
  JSC::CallFrame *v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  unint64_t v434;
  unint64_t v435;
  unsigned int v436;
  unsigned int v437;
  unsigned int v438;
  unsigned int v439;
  unsigned int v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unsigned int v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  JSC::VM *v463;
  uint64_t v464[2];

  v10 = this;
  v11 = *((_QWORD *)this + 7);
  v12 = *((_QWORD *)a2 + 5);
  v463 = (JSC::VM *)v11;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    v134 = v11;
    v135 = v12;
    v136 = WTF::fastCompactMalloc((WTF *)0x20);
    v137 = (unint64_t)v10;
    v138 = (WTF::StringImpl *)v136;
    v139.i64[0] = 0x1000000002;
    *(_QWORD *)v136 = 0x1000000002;
    *(_QWORD *)(v136 + 8) = "is not an object";
    *(_DWORD *)(v136 + 16) = 4;
    v464[0] = v136;
    v140 = (JSC::JSGlobalObject *)v137;
    Error = JSC::createError(v137, v135, v464, (uint64_t)JSC::defaultSourceAppender, v141, v142, v143, v144, v139);
    if (*(_DWORD *)v138 == 2)
    {
      WTF::StringImpl::~StringImpl(v138, v145, v146, v147, v148, v149, v150, v151);
      WTF::fastFree(v211, v212, v213, v214, v215, v216, v217, v218);
    }
    else
    {
      *(_DWORD *)v138 -= 2;
    }
    v154 = (JSC::VM *)v134;
    v10 = v140;
    if ((Error & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)Error & 0xFFFFFFFE) + 0x4C)))
    {
      v269 = JSC::Exception::create(v134, (JSC::VM *)Error, 0, v147, v148, v149, v150, v151);
      v154 = (JSC::VM *)v134;
      Error = v269;
    }
    JSC::VM::throwException(v154, v140, (JSC::Exception *)Error, v153, v147, v148, v149, v150, v151);
    v11 = v134;
    v13 = 0;
    v12 = v135;
  }
  else if (!v12 || (v13 = v12, *(_BYTE *)(v12 + 5) != 69))
  {
    v158 = v12;
    v159 = v11;
    JSC::throwTypeError((unint64_t)this, &v463, (uint64_t)"Map operation called on non-Map object", 39);
    v11 = v159;
    v12 = v158;
    v13 = 0;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v155 = *(_DWORD *)(v11 + 80);
    if ((v155 & 0x27) != 0 && (v155 & 0x20) == 0)
    {
      v270 = v12;
      v271 = v13;
      v272 = v11;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, (uint64_t)a8);
      v13 = v271;
      v11 = v272;
      v12 = v270;
    }
    if (*(_QWORD *)(v11 + 16))
      return 10;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14 = 10;
  }
  else
  {
    v14 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v15 = *((_QWORD *)a2 + 7);
      goto LABEL_8;
    }
  }
  v15 = 10;
LABEL_8:
  v16 = *((_QWORD *)v10 + 7);
  if (*(_QWORD *)(v13 + 16))
    goto LABEL_9;
  v464[0] = *((_QWORD *)v10 + 7);
  v58 = *(_QWORD *)(v16 + 41656);
  v59 = *(_QWORD *)(v16 + 11032);
  if (v59)
  {
    v60 = *(unsigned int *)(v59 + 60);
    v61 = *(_QWORD *)(v59 + 24);
    if (v61 < *(_QWORD *)(v59 + 32))
    {
      *(_QWORD *)(v59 + 24) = v61 + v60;
      goto LABEL_69;
    }
    v61 = *(_QWORD *)(v59 + 40);
    if ((v61 & 1) == 0)
    {
      v204 = *(_QWORD *)(v61 + 8) ^ *(_QWORD *)(v59 + 48);
      *(_QWORD *)(v59 + 32) = v61 + HIDWORD(v204);
      *(_QWORD *)(v59 + 40) = v61 + (int)v204;
      *(_QWORD *)(v59 + 24) = v61 + v60;
      goto LABEL_70;
    }
    v398 = v12;
    v334 = v11;
    v335 = v10;
    v336 = v13;
    v337 = v15;
    v338 = v14;
    JSC::sanitizeStackForVM((JSC *)v16, (JSC::VM *)v13, a3, a4, a5, a6, a7, (uint64_t)a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v59, v16 + 192, v60, 0, 1, v339, v340, v341);
    v14 = v338;
    v15 = v337;
    v13 = v336;
    v10 = v335;
    v11 = v334;
    v12 = v398;
  }
  else
  {
    v367 = v12;
    v368 = v13;
    v369 = v11;
    v370 = v10;
    v371 = v15;
    v372 = v14;
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v16 + 10792, (JSC *)v16, 0x130uLL, 0, a5, a6, a7, (uint64_t)a8);
    v14 = v372;
    v15 = v371;
    v10 = v370;
    v13 = v368;
    v11 = v369;
    v12 = v367;
  }
  v61 = SlowCase;
LABEL_69:
  if (v61)
  {
LABEL_70:
    *(_DWORD *)v61 = 0;
    v62 = *(_DWORD *)(v58 + 8);
    *(_DWORD *)v61 = v58 >> 4;
    *(_DWORD *)(v61 + 4) = v62;
    *(_QWORD *)(v61 + 8) = 0x2400000024;
    if ((*(_BYTE *)(v61 + 4) & 0xE) == 8)
    {
      *(_OWORD *)(v61 + 272) = 0u;
      *(_OWORD *)(v61 + 288) = 0u;
      *(_OWORD *)(v61 + 240) = 0u;
      *(_OWORD *)(v61 + 256) = 0u;
      *(_OWORD *)(v61 + 208) = 0u;
      *(_OWORD *)(v61 + 224) = 0u;
      *(_OWORD *)(v61 + 176) = 0u;
      *(_OWORD *)(v61 + 192) = 0u;
      *(_OWORD *)(v61 + 144) = 0u;
      *(_OWORD *)(v61 + 160) = 0u;
      *(_OWORD *)(v61 + 112) = 0u;
      *(_OWORD *)(v61 + 128) = 0u;
      *(_OWORD *)(v61 + 80) = 0u;
      *(_OWORD *)(v61 + 96) = 0u;
      *(_OWORD *)(v61 + 48) = 0u;
      *(_OWORD *)(v61 + 64) = 0u;
      *(_OWORD *)(v61 + 16) = 0u;
      *(_OWORD *)(v61 + 32) = 0u;
    }
    if (*(_BYTE *)(v16 + 755))
      __dmb(0xAu);
    a9 = (int8x16_t)vdupq_n_s64(0xFFFE000000000000);
    *(int8x16_t *)(v61 + 16) = a9;
    *(_QWORD *)(v61 + 32) = 0xFFFE000000000008;
    goto LABEL_75;
  }
  v329 = v12;
  v330 = v13;
  v331 = v11;
  v332 = v15;
  v333 = v14;
  JSC::throwOutOfMemoryError(v10, (JSC::JSGlobalObject *)v464);
  v14 = v333;
  v15 = v332;
  v13 = v330;
  v11 = v331;
  v12 = v329;
  v61 = 0;
LABEL_75:
  if (!*(_DWORD *)(v16 + 80))
    goto LABEL_77;
  v205 = v12;
  v206 = v11;
  v207 = v13;
  v208 = v15;
  v209 = v14;
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, v13, a3, a4, a5, a6, a7, (uint64_t)a8);
  v14 = v209;
  v15 = v208;
  v13 = v207;
  v11 = v206;
  v12 = v205;
  if (!hasExceptionsAfterHandlingTraps)
  {
LABEL_77:
    *(_QWORD *)(v13 + 16) = v61;
    if (v61)
    {
      if (*(_DWORD *)(v16 + 760) >= *(unsigned __int8 *)(v13 + 7))
      {
        v63 = v12;
        v64 = v13;
        v65 = v11;
        v66 = v15;
        v67 = v14;
        JSC::Heap::writeBarrierSlowPath(v16 + 192, v13);
        v14 = v67;
        v15 = v66;
        v13 = v64;
        v11 = v65;
        v12 = v63;
      }
    }
  }
LABEL_9:
  if (*(_DWORD *)(v16 + 80))
  {
    v156 = *(_DWORD *)(v16 + 80);
    if ((v156 & 0x27) != 0 && (v156 & 0x20) == 0)
    {
      v273 = v12;
      v274 = v13;
      v275 = v11;
      v276 = v15;
      v277 = v14;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, a3, a4, a5, a6, a7, (uint64_t)a8);
      v14 = v277;
      v15 = v276;
      v13 = v274;
      v11 = v275;
      v12 = v273;
    }
    if (*(_QWORD *)(v16 + 16))
      goto LABEL_57;
  }
  v17 = *(_QWORD *)(v13 + 16);
  v18 = *((_QWORD *)v10 + 7);
  v19 = (uint64_t *)(v17 + 16);
  if (!*(_DWORD *)(v17 + 16))
  {
    v20 = 0;
    a4 = 0;
    a5 = 0xFFFFFFFFLL;
LABEL_84:
    v32 = -1;
    goto LABEL_42;
  }
  v20 = v14;
  if ((v14 + 0x2000000000000) >> 50)
  {
    a9.i64[0] = v14 - 0x2000000000000;
    v133 = (int)COERCE_DOUBLE(v14 - 0x2000000000000);
    v20 = v14;
    if (COERCE_DOUBLE(v14 - 0x2000000000000) == (double)(int)v133)
      v20 = v133 | 0xFFFE000000000000;
  }
  if ((v20 & 0xFFFE000000000002) != 0)
  {
    v25 = 0;
LABEL_65:
    v55 = (v20 + ~(v20 << 32)) ^ ((v20 + ~(v20 << 32)) >> 22);
    v56 = 9 * ((v55 + ~(v55 << 13)) ^ ((v55 + ~(v55 << 13)) >> 8));
    v57 = (v56 ^ (v56 >> 15)) + ~((v56 ^ (v56 >> 15)) << 27);
    a4 = (v57 >> 31) ^ v57;
    goto LABEL_20;
  }
  v21 = *(unsigned __int8 *)(v20 + 5);
  if (v21 != 2)
  {
    if (v21 == 3)
    {
      v433 = *(_QWORD *)(v13 + 16);
      v316 = *((_QWORD *)v10 + 7);
      v317 = v14;
      v318 = v10;
      v319 = v15;
      v320 = v13;
      v321 = v11;
      v322 = v12;
      if (*(_DWORD *)(v20 + 12))
      {
        a4 = *(unsigned int *)(v20 + 12);
        v25 = 1;
      }
      else
      {
        a4 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v20);
        v25 = 1;
        v12 = v322;
        v11 = v321;
      }
      v13 = v320;
      v15 = v319;
      v10 = v318;
      v14 = v317;
      v18 = v316;
      v17 = v433;
      goto LABEL_20;
    }
    v25 = 1;
    goto LABEL_65;
  }
  v22 = (int **)(v20 + 8);
  if ((*(_BYTE *)(v20 + 8) & 1) != 0)
  {
    v76 = v12;
    v77 = v13;
    v78 = v11;
    v79 = v15;
    v80 = v14;
    v81 = *((_QWORD *)v10 + 7);
    v82 = *(_QWORD *)(v13 + 16);
    v83 = JSC::JSRopeString::resolveRope(v20, v10, a3, a4, a9, a5, a6, a7, (uint64_t)a8);
    v17 = v82;
    v18 = v81;
    v14 = v80;
    v15 = v79;
    v13 = v77;
    v11 = v78;
    v12 = v76;
    v22 = v83;
  }
  if (!*(_DWORD *)(v18 + 80))
    goto LABEL_17;
  v162 = *(_DWORD *)(v18 + 80);
  if ((v162 & 0x27) != 0 && (v162 & 0x20) == 0)
  {
    v396 = v12;
    v294 = v13;
    v295 = v11;
    v296 = v10;
    v297 = v15;
    v298 = v14;
    v299 = v18;
    v300 = v17;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, a3, a4, a5, a6, a7, (uint64_t)a8);
    v17 = v300;
    v18 = v299;
    v14 = v298;
    v15 = v297;
    v10 = v296;
    v13 = v294;
    v11 = v295;
    v12 = v396;
  }
  if (*(_QWORD *)(v18 + 16))
  {
    a4 = 0xFFFFFFFFLL;
  }
  else
  {
LABEL_17:
    v23 = (WTF::StringImpl *)*v22;
    v24 = (*v22)[4];
    if (v24 < 0x100)
    {
      v68 = v12;
      v69 = v11;
      v70 = v13;
      v71 = v15;
      v72 = v14;
      v73 = v18;
      v74 = v17;
      v75 = WTF::StringImpl::hashSlowCase(v23);
      v17 = v74;
      v18 = v73;
      v14 = v72;
      v15 = v71;
      v13 = v70;
      v11 = v69;
      v12 = v68;
      a4 = v75;
    }
    else
    {
      a4 = v24 >> 8;
    }
  }
  v25 = 1;
LABEL_20:
  if (*(_DWORD *)(v18 + 80))
  {
    v161 = *(_DWORD *)(v18 + 80);
    if ((v161 & 0x27) != 0 && (v161 & 0x20) == 0)
    {
      v395 = v12;
      v287 = v13;
      v288 = v11;
      v414 = v10;
      v289 = v15;
      v290 = v14;
      v291 = v18;
      v292 = v17;
      v293 = a4;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, a3, a4, a5, a6, a7, (uint64_t)a8);
      a4 = v293;
      v17 = v292;
      v18 = v291;
      v14 = v290;
      v15 = v289;
      v10 = v414;
      v13 = v287;
      v11 = v288;
      v12 = v395;
    }
    if (*(_QWORD *)(v18 + 16))
    {
      v20 = 0;
      a4 = 0;
      a5 = 0;
      v32 = 0;
      goto LABEL_42;
    }
  }
  a5 = ((*(_DWORD *)(v17 + 32) - 1) & a4) + 4;
  *(double *)a9.i64 = (double)(int)v20;
  if (v20 <= 0xFFFDFFFFFFFFFFFFLL)
    a9.i64[0] = v20 - 0x2000000000000;
  v26 = v19[a5];
  if (!v26)
    goto LABEL_84;
  v27 = (JSC::Symbol *)*((_QWORD *)v10 + 7);
  v28 = (unint64_t *)((char *)v27 + 41840);
  if (!(v20 >> 49))
  {
    if ((v25 & 1) == 0)
    {
      while (1)
      {
        v380 = v19[v26];
        if ((v380 & 0xFFFE000000000002) != 0)
        {
          if (v20 == v380)
            goto LABEL_41;
        }
        else
        {
          v381 = *v28;
          if (!*v28)
          {
            v383 = v12;
            v384 = v11;
            v385 = v13;
            v416 = v10;
            v448 = v15;
            v455 = v18;
            v386 = v14;
            v435 = v17;
            v462 = a4;
            v440 = a5;
            v381 = JSC::Symbol::create(v27, (JSC::VM *)v13, a3, a4, a5, a6, a7, (uint64_t)a8);
            a5 = v440;
            a4 = v462;
            v17 = v435;
            v15 = v448;
            v18 = v455;
            v14 = v386;
            v10 = v416;
            v13 = v385;
            v11 = v384;
            v12 = v383;
            *v28 = v381;
          }
          if (v20 == v380 && v381 != v380)
            goto LABEL_41;
        }
        v26 = v19[(v26 + 2)];
        v32 = -1;
        if (!v26)
          goto LABEL_42;
      }
    }
    while (1)
    {
      v29 = v19[v26];
      if ((v29 & 0xFFFE000000000002) != 0)
        break;
      v30 = *v28;
      if (!*v28)
      {
        v169 = v12;
        v170 = v11;
        v171 = v13;
        v411 = v10;
        v443 = v15;
        v451 = v18;
        v172 = v14;
        v431 = v17;
        v458 = a4;
        v438 = a5;
        v30 = JSC::Symbol::create(v27, (JSC::VM *)v13, a3, a4, a5, a6, a7, (uint64_t)a8);
        a5 = v438;
        a4 = v458;
        v17 = v431;
        v15 = v443;
        v18 = v451;
        v14 = v172;
        v10 = v411;
        v13 = v171;
        v11 = v170;
        v12 = v169;
        *v28 = v30;
      }
      if (v30 != v29)
      {
        if (v20 == v29)
          goto LABEL_41;
        v31 = *(unsigned __int8 *)(v20 + 5);
        if (v31 == 2)
        {
          if (*(_BYTE *)(v29 + 5) != 2)
            break;
          v436 = a5;
          v456 = a4;
          v417 = v14;
          v429 = v17;
          v441 = v15;
          v449 = v18;
          v33 = v13;
          v34 = v11;
          v35 = v12;
          v36 = *(WTF **)(v20 + 8);
          if ((v36 & 1) != 0
            || (v37 = *(const WTF::StringImpl **)(v29 + 8), (v37 & 1) != 0))
          {
            v38 = JSC::JSString::equalSlowCase((JSC::JSString *)v20, v10, (JSC::JSString *)v29, a4, a5, a6, a7, (uint64_t)a8, a9);
          }
          else
          {
            v38 = WTF::equal(v36, v37, (const WTF::StringImpl *)a3);
          }
          v12 = v35;
          v11 = v34;
          v13 = v33;
          v15 = v441;
          v18 = v449;
          v14 = v417;
          v17 = v429;
          a4 = v456;
          a5 = v436;
          if (v38)
            goto LABEL_41;
        }
        else
        {
          if (v31 != 3 || *(_BYTE *)(v29 + 5) != 3)
            break;
          v399 = v12;
          v405 = v13;
          v349 = (JSC::JSBigInt *)v29;
          v350 = v11;
          v415 = v10;
          v447 = v15;
          v351 = v14;
          v352 = v18;
          v353 = v17;
          v461 = a4;
          v354 = a5;
          v355 = JSC::JSBigInt::equals((JSC::JSBigInt *)v20, v349, (JSC::JSBigInt *)a3);
          a5 = v354;
          a4 = v461;
          v17 = v353;
          v18 = v352;
          v14 = v351;
          v15 = v447;
          v10 = v415;
          v13 = v405;
          v11 = v350;
          v12 = v399;
          if (v355)
            goto LABEL_41;
        }
      }
LABEL_34:
      v26 = v19[(v26 + 2)];
      v32 = -1;
      if (!v26)
        goto LABEL_42;
    }
    if (v20 == v29)
      goto LABEL_41;
    goto LABEL_34;
  }
  v129 = a9.i64[0];
  while (1)
  {
    v130 = v19[v26];
    if ((v130 & 0xFFFE000000000002) != 0)
      goto LABEL_143;
    v131 = *v28;
    if (!*v28)
    {
      v409 = a9.i64[0];
      v393 = v12;
      v389 = v11;
      v403 = v13;
      v412 = v10;
      v425 = v14;
      v267 = v15;
      v452 = v18;
      v432 = v17;
      v459 = a4;
      v439 = a5;
      v131 = JSC::Symbol::create(v27, (JSC::VM *)v13, a3, a4, a5, a6, a7, (uint64_t)a8);
      a5 = v439;
      a4 = v459;
      v14 = v425;
      v17 = v432;
      v18 = v452;
      v15 = v267;
      v10 = v412;
      v13 = v403;
      v11 = v389;
      v12 = v393;
      a9.i64[0] = v409;
      *v28 = v131;
    }
    if (v131 != v130)
    {
LABEL_143:
      if (v20 == v130)
        break;
      if (v130 >> 49)
      {
        v132 = (double)(int)v130;
        if (v130 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v132 = v130 - 0x2000000000000;
        if (v129 == *(_QWORD *)&v132)
          break;
      }
    }
    v26 = v19[(v26 + 2)];
    v32 = -1;
    if (!v26)
      goto LABEL_42;
  }
LABEL_41:
  v32 = v26;
LABEL_42:
  if (*(_DWORD *)(v18 + 80))
  {
    v160 = *(_DWORD *)(v18 + 80);
    if ((v160 & 0x27) != 0 && (v160 & 0x20) == 0)
    {
      v394 = v12;
      v404 = v13;
      v280 = v11;
      v413 = v10;
      v281 = v15;
      v282 = v14;
      v283 = v18;
      v284 = v17;
      v285 = a4;
      v286 = a5;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, a3, a4, a5, a6, a7, (uint64_t)a8);
      a5 = v286;
      a4 = v285;
      v17 = v284;
      v18 = v283;
      v14 = v282;
      v15 = v281;
      v10 = v413;
      v13 = v404;
      v11 = v280;
      v12 = v394;
    }
    if (*(_QWORD *)(v18 + 16))
      goto LABEL_57;
  }
  if (v32 != -1)
  {
    v19[v32 + 1] = v15;
    if (!v15
      || (v15 & 0xFFFE000000000002) != 0
      || *(_DWORD *)(v18 + 760) < *(unsigned __int8 *)(v17 + 7))
    {
      goto LABEL_57;
    }
    v53 = v18 + 192;
    v54 = v12;
    v13 = v17;
    goto LABEL_188;
  }
  v39 = *(_DWORD *)(v17 + 32);
  v40 = *(_DWORD *)(v17 + 24);
  v41 = *(_QWORD *)(v17 + 16);
  v42 = v41 + v40;
  v43 = 0.75;
  if (v39 < 0x10000)
    v43 = 0.5;
  *(float *)a9.i32 = v43 * (float)v39;
  if (*(float *)a9.i32 > (float)v42)
  {
    a3 = v17;
    goto LABEL_48;
  }
  if (v39 >= 0x10000)
    v84 = 1;
  else
    v84 = 2;
  if (v40 >= v39 >> 1)
    v85 = 0;
  else
    v85 = v84;
  v86 = v39 << v85;
  a6 = *((_QWORD *)v10 + 7);
  a8 = (unint64_t *)(a6 + 41656);
  v464[0] = a6;
  v87 = 4 * v86 + 4;
  v407 = (JSC *)a6;
  v408 = v42;
  v402 = v13;
  v406 = (unint64_t *)(a6 + 41656);
  v391 = v12;
  v400 = v86;
  v442 = v15;
  v450 = v18;
  v410 = v10;
  v430 = v17;
  v457 = a4;
  v437 = a5;
  if (v87 >= 0x10000001)
  {
    v242 = v10;
    v243 = v11;
    v244 = v15;
    v245 = v14;
    v246 = v18;
    v247 = v17;
    v248 = a4;
    v86 = a5;
    JSC::throwOutOfMemoryError(v242, (JSC::JSGlobalObject *)v464);
    a8 = v406;
    a6 = (uint64_t)v407;
    a5 = v86;
    LODWORD(v86) = v400;
    v13 = v402;
    a4 = v248;
    v17 = v247;
    v18 = v246;
    v14 = v245;
    v15 = v244;
    a7 = v408;
    v10 = v410;
    v11 = v243;
    v12 = v391;
    a3 = 0;
    goto LABEL_105;
  }
  v88 = *a8;
  v89 = 8 * (4 * v86 + 4);
  v90 = (v89 + 31) & 0xFFFFFFFF0;
  if (v90 <= 0x1F60 && (v91 = *(_QWORD *)(a6 + (((v89 + 31) >> 1) & 0x7FFFFFFF8) + 10880)) != 0)
  {
    v92 = *(unsigned int *)(v91 + 60);
    a3 = *(_QWORD *)(v91 + 24);
    if ((unint64_t)a3 >= *(_QWORD *)(v91 + 32))
    {
      v388 = v11;
      v424 = v14;
      v264 = v12;
      v265 = *(_QWORD *)(v91 + 40);
      if ((v265 & 1) == 0)
      {
        a3 = *(_QWORD *)(v91 + 40);
        v266 = *(_QWORD *)(v265 + 8) ^ *(_QWORD *)(v91 + 48);
        *(_QWORD *)(v91 + 32) = a3 + HIDWORD(v266);
        *(_QWORD *)(v91 + 40) = a3 + (int)v266;
        *(_QWORD *)(v91 + 24) = a3 + v92;
        v89 = 8 * v87;
        a8 = (unint64_t *)(a6 + 41656);
        a4 = a4;
        a5 = a5;
        v86 = v400;
LABEL_98:
        *(_DWORD *)a3 = 0;
        v93 = *(_DWORD *)(v88 + 8);
        *(_DWORD *)a3 = v88 >> 4;
        *(_DWORD *)(a3 + 4) = v93;
        *(_DWORD *)(a3 + 8) = v87;
        *(_DWORD *)(a3 + 12) = v87;
        if (v87 && (*(_BYTE *)(a3 + 4) & 0xE) == 8)
        {
          v94 = v13;
          v95 = v11;
          v96 = v15;
          v97 = v14;
          v98 = v17;
          v99 = a5;
          v418 = (JSC::CallFrame *)a3;
          bzero((void *)(a3 + 16), v89);
          a8 = v406;
          a6 = (uint64_t)v407;
          a5 = v99;
          a4 = v457;
          v17 = v98;
          v18 = v450;
          v14 = v97;
          v15 = v96;
          v10 = v410;
          a3 = (uint64_t)v418;
          v13 = v94;
          v12 = v391;
          v86 = v400;
          v11 = v95;
        }
        if (*(_BYTE *)(a6 + 755))
          __dmb(0xAu);
        *(_QWORD *)(a3 + 16) = v41 | 0xFFFE000000000000;
        *(_QWORD *)(a3 + 24) = 0xFFFE000000000000;
        *(_QWORD *)(a3 + 32) = v86 | 0xFFFE000000000000;
        goto LABEL_104;
      }
      JSC::sanitizeStackForVM((JSC *)a6, (JSC::VM *)v13, a3, a4, a5, a6, a7, (uint64_t)a8);
      v366 = (JSC::CallFrame *)JSC::LocalAllocator::allocateSlowCase(v91, (uint64_t)v407 + 192, v92, 0, 1, v363, v364, v365);
      a8 = v406;
      a6 = (uint64_t)v407;
      a3 = (uint64_t)v366;
      v12 = v264;
      v11 = v388;
      v89 = 8 * v87;
      v86 = v400;
      v13 = v402;
      v15 = v442;
      v18 = v450;
      v14 = v424;
      v17 = v430;
      a4 = v457;
      a5 = v437;
    }
    else
    {
      *(_QWORD *)(v91 + 24) = a3 + v92;
    }
  }
  else
  {
    v229 = v11;
    v230 = v15;
    v231 = v14;
    v232 = v17;
    Slow = (JSC::CallFrame *)JSC::CompleteSubspace::tryAllocateSlow(a6 + 10792, (JSC *)a6, v90, 0, a5, a6, a7, (uint64_t)a8);
    v89 = 8 * v87;
    v12 = v391;
    a8 = v406;
    a6 = (uint64_t)v407;
    a5 = v437;
    a4 = v457;
    v17 = v232;
    v18 = v450;
    v14 = v231;
    v15 = v230;
    v10 = v410;
    v11 = v229;
    v86 = v400;
    v13 = v402;
    a3 = (uint64_t)Slow;
  }
  if (a3)
    goto LABEL_98;
  v356 = v10;
  v357 = v11;
  v358 = v15;
  v359 = v14;
  v360 = v18;
  v361 = v17;
  v362 = a4;
  v86 = a5;
  JSC::throwOutOfMemoryError(v356, (JSC::JSGlobalObject *)v464);
  a8 = v406;
  a6 = (uint64_t)v407;
  a5 = v86;
  LODWORD(v86) = v400;
  v13 = v402;
  a4 = v362;
  v17 = v361;
  v18 = v360;
  v14 = v359;
  v15 = v358;
  v10 = v410;
  v11 = v357;
  v12 = v391;
  a3 = 0;
LABEL_104:
  a7 = v408;
LABEL_105:
  v419 = (JSC::CallFrame *)a3;
  if (*(_DWORD *)(a6 + 80))
  {
    v249 = v12;
    v250 = v11;
    v251 = v13;
    v252 = v14;
    v253 = v18;
    v86 = v17;
    v254 = a5;
    v255 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a6, v13, a3, a4, a5, a6, a7, (uint64_t)a8);
    a8 = v406;
    a6 = (uint64_t)v407;
    a3 = (uint64_t)v419;
    a5 = v254;
    a4 = v457;
    v17 = v86;
    LODWORD(v86) = v400;
    v18 = v253;
    v14 = v252;
    v15 = v442;
    a7 = v408;
    v10 = v410;
    v13 = v251;
    v11 = v250;
    v12 = v249;
    if (v255)
    {
LABEL_194:
      a3 = 0;
      goto LABEL_195;
    }
  }
  if ((_DWORD)a7)
  {
    v100 = 0;
    v101 = v86 + 1;
    v102 = (char *)(a3 + 16);
    v103 = v86 - 1;
    v104 = v39 + 5;
    v390 = 2;
    v401 = v86 - 1;
    do
    {
      v105 = v19[v104 - 1];
      if ((v105 & 0xFFFE000000000002) != 0)
      {
        v107 = (v101 + 3);
        *(_QWORD *)&v102[8 * v107] = v105;
      }
      else
      {
        v106 = a8[23];
        if (!v106)
        {
          v196 = v11;
          v197 = v14;
          v106 = JSC::Symbol::create((JSC::Symbol *)a6, (JSC::VM *)v13, a3, a4, a5, a6, a7, (uint64_t)a8);
          v103 = v401;
          a8 = v406;
          a6 = (uint64_t)v407;
          a3 = (uint64_t)v419;
          v17 = v430;
          a5 = v437;
          a4 = v457;
          v15 = v442;
          v18 = v450;
          v14 = v197;
          a7 = v408;
          v10 = v410;
          v13 = v402;
          v11 = v196;
          v12 = v391;
          v406[23] = v106;
        }
        if (v106 == v105)
        {
          v19[v390++] = v100 | 0xFFFE000000000000;
          goto LABEL_127;
        }
        v107 = (v101 + 3);
        *(_QWORD *)&v102[8 * v107] = v105;
        if (a3 && v105 && *(_DWORD *)(a6 + 760) >= *(unsigned __int8 *)(a3 + 7))
        {
          v387 = v11;
          v198 = v14;
          JSC::Heap::writeBarrierSlowPath(a6 + 192, a3);
          v103 = v401;
          a8 = v406;
          a6 = (uint64_t)v407;
          a3 = (uint64_t)v419;
          v17 = v430;
          a5 = v437;
          a4 = v457;
          v15 = v442;
          v18 = v450;
          v14 = v198;
          a7 = v408;
          v10 = v410;
          v13 = v402;
          v11 = v387;
          v12 = v391;
        }
      }
      v108 = v19[v104];
      *(_QWORD *)&v102[8 * (v101 + 4)] = v108;
      if (v108)
        v109 = (v108 & 0xFFFE000000000002) == 0;
      else
        v109 = 0;
      if (v109 && *(_DWORD *)(a6 + 760) >= *(unsigned __int8 *)(a3 + 7))
      {
        v199 = v11;
        v200 = v14;
        JSC::Heap::writeBarrierSlowPath(a6 + 192, a3);
        v103 = v401;
        a8 = v406;
        a6 = (uint64_t)v407;
        a3 = (uint64_t)v419;
        v17 = v430;
        a5 = v437;
        a4 = v457;
        v15 = v442;
        v18 = v450;
        v14 = v200;
        a7 = v408;
        v10 = v410;
        v13 = v402;
        v11 = v199;
        v12 = v391;
      }
      if ((v105 & 0xFFFE000000000002) == 0)
      {
        v110 = *(unsigned __int8 *)(v105 + 5);
        if (v110 == 2)
        {
          v111 = (int **)(v105 + 8);
          if ((*(_BYTE *)(v105 + 8) & 1) != 0)
          {
            v124 = v10;
            v125 = v11;
            v126 = v14;
            v127 = v17;
            v128 = JSC::JSRopeString::resolveRope(v105, v124, a3, a4, a9, a5, a6, a7, (uint64_t)a8);
            v103 = v401;
            a8 = v406;
            a6 = (uint64_t)v407;
            a3 = (uint64_t)v419;
            a5 = v437;
            a4 = v457;
            v17 = v127;
            v15 = v442;
            v18 = v450;
            v14 = v126;
            a7 = v408;
            v10 = v410;
            v13 = v402;
            v11 = v125;
            v12 = v391;
            v111 = v128;
          }
          if (!*(_DWORD *)(a6 + 80))
            goto LABEL_123;
          v201 = v11;
          v202 = v14;
          v203 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a6, v13, a3, a4, a5, a6, a7, (uint64_t)a8);
          v103 = v401;
          a8 = v406;
          a6 = (uint64_t)v407;
          a3 = (uint64_t)v419;
          v17 = v430;
          a5 = v437;
          a4 = v457;
          v15 = v442;
          v18 = v450;
          v14 = v202;
          a7 = v408;
          v10 = v410;
          v13 = v402;
          v11 = v201;
          v12 = v391;
          if (v203)
          {
            v114 = -1;
          }
          else
          {
LABEL_123:
            v112 = (WTF::StringImpl *)*v111;
            v113 = (*v111)[4];
            if (v113 < 0x100)
            {
              v120 = v12;
              v121 = v11;
              v122 = v14;
              v123 = WTF::StringImpl::hashSlowCase(v112);
              v103 = v401;
              a8 = v406;
              a6 = (uint64_t)v407;
              a3 = (uint64_t)v419;
              v17 = v430;
              a5 = v437;
              a4 = v457;
              v15 = v442;
              v18 = v450;
              v14 = v122;
              a7 = v408;
              v10 = v410;
              v13 = v402;
              v11 = v121;
              v12 = v120;
              v114 = v123;
            }
            else
            {
              v114 = v113 >> 8;
            }
          }
          goto LABEL_125;
        }
        if (v110 == 3)
        {
          v114 = *(_DWORD *)(v105 + 12);
          if (!v114)
          {
            v343 = (JSC::JSBigInt *)v105;
            v344 = v12;
            v345 = v11;
            v346 = v13;
            v347 = v14;
            v348 = JSC::JSBigInt::hashSlow(v343);
            v103 = v401;
            a8 = v406;
            a6 = (uint64_t)v407;
            a3 = (uint64_t)v419;
            v17 = v430;
            a5 = v437;
            a4 = v457;
            v15 = v442;
            v18 = v450;
            v14 = v347;
            a7 = v408;
            v10 = v410;
            v13 = v346;
            v11 = v345;
            v12 = v344;
            v114 = v348;
          }
          goto LABEL_125;
        }
      }
      v117 = (v105 + ~(v105 << 32)) ^ ((v105 + ~(v105 << 32)) >> 22);
      v118 = 9 * ((v117 + ~(v117 << 13)) ^ ((v117 + ~(v117 << 13)) >> 8));
      v119 = (v118 ^ (v118 >> 15)) + ~((v118 ^ (v118 >> 15)) << 27);
      v114 = (v119 >> 31) ^ v119;
LABEL_125:
      if (*(_DWORD *)(a6 + 80))
      {
        v184 = v12;
        v185 = v11;
        v186 = v14;
        v187 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a6, v13, a3, a4, a5, a6, a7, (uint64_t)a8);
        v103 = v401;
        a8 = v406;
        a6 = (uint64_t)v407;
        a3 = (uint64_t)v419;
        v17 = v430;
        a5 = v437;
        a4 = v457;
        v15 = v442;
        v18 = v450;
        v14 = v186;
        a7 = v408;
        v10 = v410;
        v13 = v402;
        v11 = v185;
        v12 = v184;
        if (v187)
          goto LABEL_194;
      }
      v115 = (v114 & v103) + 4;
      v116 = *(_QWORD *)&v102[8 * v115];
      *(_QWORD *)&v102[8 * v115] = v107 | 0xFFFE000000000000;
      *(_QWORD *)&v102[8 * (v107 + 2)] = v116;
      v101 = v107;
LABEL_127:
      ++v100;
      v104 += 3;
    }
    while (a7 != v100);
  }
  if (!*(_DWORD *)(a6 + 80))
    goto LABEL_196;
LABEL_195:
  v256 = v12;
  v257 = v11;
  v258 = v13;
  v259 = v14;
  v260 = v18;
  v261 = v17;
  v262 = a5;
  v423 = (JSC::CallFrame *)a3;
  v263 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a6, v13, a3, a4, a5, a6, a7, (uint64_t)a8);
  a6 = (uint64_t)v407;
  a3 = (uint64_t)v423;
  a5 = v262;
  a4 = v457;
  v17 = v261;
  v18 = v260;
  v14 = v259;
  v15 = v442;
  v13 = v258;
  v11 = v257;
  v12 = v256;
  if (v263)
  {
    a3 = 0;
  }
  else
  {
LABEL_196:
    *v19 = a3;
    if (a3 && (a3 & 0xFFFE000000000002) == 0)
    {
      v420 = (JSC::CallFrame *)a3;
      v188 = a4;
      v189 = v18;
      v190 = v14;
      v191 = v15;
      v192 = v13;
      v193 = v11;
      v194 = v12;
      v195 = v17;
      if (*(_DWORD *)(a6 + 760) >= *(unsigned __int8 *)(v17 + 7))
      {
        JSC::Heap::writeBarrierSlowPath((uint64_t)v407 + 192, v17);
        v17 = v195;
        v12 = v194;
        v11 = v193;
        v13 = v192;
        v15 = v191;
        v14 = v190;
        v18 = v189;
      }
      a4 = v188;
      a5 = v437;
      a3 = (uint64_t)v420;
    }
  }
LABEL_48:
  if (*(_DWORD *)(v18 + 80))
  {
    v163 = *(_DWORD *)(v18 + 80);
    if ((v163 & 0x27) != 0 && (v163 & 0x20) == 0)
    {
      v397 = v12;
      v301 = v13;
      v302 = v11;
      v303 = v15;
      v304 = v14;
      v305 = v18;
      v306 = v17;
      v307 = a4;
      v308 = a5;
      v426 = (JSC::CallFrame *)a3;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, a3, a4, a5, a6, a7, (uint64_t)a8);
      a3 = (uint64_t)v426;
      a5 = v308;
      a4 = v307;
      v17 = v306;
      v18 = v305;
      v14 = v304;
      v15 = v303;
      v13 = v301;
      v11 = v302;
      v12 = v397;
    }
    if (*(_QWORD *)(v18 + 16))
      goto LABEL_57;
  }
  v44 = (char *)(a3 + 16);
  v45 = *(_QWORD *)(a3 + 16);
  v46 = *(_DWORD *)(a3 + 32);
  v47 = *(_DWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 16) = v45 + 1;
  if (!v20)
  {
    if ((v14 + 0x2000000000000) >> 50)
    {
      a9.i64[0] = v14 - 0x2000000000000;
      v268 = (int)COERCE_DOUBLE(v14 - 0x2000000000000);
      if (COERCE_DOUBLE(v14 - 0x2000000000000) == (double)(int)v268)
        v14 = v268 | 0xFFFE000000000000;
    }
    if ((v14 & 0xFFFE000000000002) != 0)
      goto LABEL_213;
    v164 = *(unsigned __int8 *)(v14 + 5);
    if (v164 == 2)
    {
      v165 = (int **)(v14 + 8);
      if ((*(_BYTE *)(v14 + 8) & 1) != 0)
      {
        v392 = v12;
        v234 = v13;
        v235 = v10;
        v236 = v11;
        v237 = v15;
        v238 = v14;
        v239 = v18;
        v240 = v17;
        v422 = (JSC::CallFrame *)a3;
        v241 = JSC::JSRopeString::resolveRope(v14, v235, a3, a4, a9, a5, a6, a7, (uint64_t)a8);
        a3 = (uint64_t)v422;
        v17 = v240;
        v18 = v239;
        v14 = v238;
        v15 = v237;
        v13 = v234;
        v11 = v236;
        v12 = v392;
        v165 = v241;
      }
      if (!*(_DWORD *)(v18 + 80))
        goto LABEL_181;
      v323 = v12;
      v324 = v11;
      v325 = v13;
      v446 = v15;
      v454 = v18;
      v326 = v14;
      v327 = v17;
      v427 = (JSC::CallFrame *)a3;
      v328 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v18, v13, a3, a4, a5, a6, a7, (uint64_t)a8);
      a3 = (uint64_t)v427;
      v17 = v327;
      v15 = v446;
      v18 = v454;
      v14 = v326;
      v13 = v325;
      v11 = v324;
      v12 = v323;
      if (v328)
      {
        a4 = 0xFFFFFFFFLL;
      }
      else
      {
LABEL_181:
        v166 = (WTF::StringImpl *)*v165;
        v167 = (*v165)[4];
        if (v167 < 0x100)
        {
          v222 = v12;
          v223 = v11;
          v224 = v13;
          v444 = v15;
          v225 = v14;
          v226 = v18;
          v227 = v17;
          v421 = (JSC::CallFrame *)a3;
          v228 = WTF::StringImpl::hashSlowCase(v166);
          a3 = (uint64_t)v421;
          v17 = v227;
          v18 = v226;
          v14 = v225;
          v15 = v444;
          v13 = v224;
          v11 = v223;
          v12 = v222;
          a4 = v228;
        }
        else
        {
          a4 = v167 >> 8;
        }
      }
      goto LABEL_183;
    }
    if (v164 == 3)
    {
      v428 = (JSC::CallFrame *)a3;
      v434 = v17;
      v373 = v18;
      v374 = v15;
      v375 = v13;
      v376 = v11;
      v377 = v12;
      v378 = v14;
      if (*(_DWORD *)(v14 + 12))
      {
        a4 = *(unsigned int *)(v14 + 12);
      }
      else
      {
        v379 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v14);
        v14 = v378;
        a4 = v379;
        v12 = v377;
        v11 = v376;
        v13 = v375;
        v15 = v374;
      }
      v18 = v373;
      a3 = (uint64_t)v428;
      v17 = v434;
    }
    else
    {
LABEL_213:
      v219 = (v14 + ~(v14 << 32)) ^ ((v14 + ~(v14 << 32)) >> 22);
      v220 = 9 * ((v219 + ~(v219 << 13)) ^ ((v219 + ~(v219 << 13)) >> 8));
      v221 = (v220 ^ (v220 >> 15)) + ~((v220 ^ (v220 >> 15)) << 27);
      a4 = (v221 >> 31) ^ v221;
    }
LABEL_183:
    if (*(_DWORD *)(v18 + 80))
    {
      v309 = v12;
      v310 = v11;
      v311 = v13;
      v445 = v15;
      v453 = v18;
      v312 = v14;
      v313 = v17;
      v460 = a4;
      v314 = (JSC::CallFrame *)a3;
      v315 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v18, v13, a3, a4, a5, a6, a7, (uint64_t)a8);
      a3 = (uint64_t)v314;
      a4 = v460;
      v17 = v313;
      v15 = v445;
      v18 = v453;
      v14 = v312;
      v13 = v311;
      v11 = v310;
      v12 = v309;
      if (v315)
        goto LABEL_57;
    }
    v48 = a3 != v17;
    v20 = v14;
    goto LABEL_185;
  }
  if (a3 != v17)
  {
    v48 = 1;
LABEL_185:
    a5 = (a4 & (v46 - 1)) + 4;
    goto LABEL_52;
  }
  v48 = 0;
LABEL_52:
  v49 = (v46 + 3 * (v47 + v45) + 4);
  v50 = *(_QWORD *)&v44[8 * a5];
  *(_QWORD *)&v44[8 * a5] = v49 | 0xFFFE000000000000;
  *(_QWORD *)&v44[8 * (v46 + 3 * (v47 + v45) + 6)] = v50;
  *(_QWORD *)&v44[8 * v49] = v20;
  v51 = v18 + 192;
  if (v20 && (v20 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v18 + 760) >= *(unsigned __int8 *)(a3 + 7))
  {
    v173 = v12;
    v174 = v13;
    v175 = v11;
    v176 = v15;
    v177 = v18;
    v178 = (JSC::CallFrame *)a3;
    JSC::Heap::writeBarrierSlowPath(v18 + 192, a3);
    a3 = (uint64_t)v178;
    v18 = v177;
    v15 = v176;
    v13 = v174;
    v11 = v175;
    v12 = v173;
  }
  *(_QWORD *)&v44[8 * (v49 + 1)] = v15;
  if (v15 && (v15 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v18 + 760) >= *(unsigned __int8 *)(a3 + 7))
  {
    v179 = v12;
    v180 = v13;
    v181 = v11;
    v182 = v18;
    v183 = (JSC::CallFrame *)a3;
    JSC::Heap::writeBarrierSlowPath(v51, a3);
    a3 = (uint64_t)v183;
    v18 = v182;
    v13 = v180;
    v11 = v181;
    v12 = v179;
  }
  if (v48)
  {
    *(_QWORD *)(v13 + 16) = a3;
    if (*(_DWORD *)(v18 + 760) >= *(unsigned __int8 *)(v13 + 7))
    {
      v53 = v51;
      v54 = v12;
LABEL_188:
      v168 = v11;
      JSC::Heap::writeBarrierSlowPath(v53, v13);
      v11 = v168;
      v12 = v54;
    }
  }
LABEL_57:
  if (*(_DWORD *)(v11 + 80))
  {
    v157 = *(_DWORD *)(v11 + 80);
    if ((v157 & 0x27) != 0 && (v157 & 0x20) == 0)
    {
      v278 = v12;
      v279 = v11;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, (uint64_t)a8);
      v11 = v279;
      v12 = v278;
    }
    if (*(_QWORD *)(v11 + 16))
      return 10;
  }
  return v12;
}

unint64_t JSC::mapProtoFuncSize(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t NotAnObjectError;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::VM *v19;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  v19 = v9;
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)this, v10);
    JSC::VM::throwException(v9, this, NotAnObjectError, v14, v15, v16, v17, v18);
LABEL_14:
    v10 = 0;
    goto LABEL_4;
  }
  if (!v10 || *(_BYTE *)(v10 + 5) != 69)
  {
    JSC::throwTypeError((unint64_t)this, &v19, (uint64_t)"Map operation called on non-Map object", 39);
    goto LABEL_14;
  }
LABEL_4:
  if (*((_DWORD *)v9 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 10;
  }
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v11 = *(_QWORD *)(v11 + 16);
    if ((v11 & 0x80000000) != 0)
      return COERCE__INT64((double)v11) + 0x2000000000000;
    v11 = v11;
  }
  return v11 | 0xFFFE000000000000;
}

unint64_t JSC::mapProtoFuncValues(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t NotAnObjectError;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::VM *v20;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  v20 = v9;
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)this, v10);
    JSC::VM::throwException(v9, this, NotAnObjectError, v15, v16, v17, v18, v19);
LABEL_14:
    v10 = 0;
    goto LABEL_4;
  }
  if (!v10 || *(_BYTE *)(v10 + 5) != 69)
  {
    JSC::throwTypeError((unint64_t)this, &v20, (uint64_t)"Map operation called on non-Map object", 39);
    goto LABEL_14;
  }
LABEL_4:
  if (*((_DWORD *)v9 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 10;
  }
  v11 = *((_DWORD *)this + 251);
  if (v11)
    v12 = 16 * (v11 & 0xFFFFFFFE);
  else
    v12 = 0;
  return JSC::JSMapIterator::create(this, v12, v10, 1, a5, a6, a7, a8);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<std::span<unsigned char const,18446744073709551615ul>,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  int v6;
  int *v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  _BYTE *v17;
  size_t v18;
  _BYTE *v19;
  size_t v20;
  size_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *__src;
  _DWORD *v26;

  v5 = (_QWORD *)result;
  v6 = *(_DWORD *)(a4 + 8);
  if (v6 < 0)
    goto LABEL_30;
  v7 = 0;
  v8 = *(_DWORD *)(a3 + 8);
  v9 = v6 + 1;
  v10 = __OFADD__(v6, 1);
  if (v8 < 0 || v10)
    goto LABEL_23;
  v7 = 0;
  v11 = *(_DWORD *)(a2 + 8);
  v12 = __OFADD__(v8, v9);
  v13 = v8 + v9;
  v14 = v12;
  if (v11 < 0 || v14)
    goto LABEL_23;
  v15 = (v11 + v13);
  if (__OFADD__(v11, v13))
    goto LABEL_30;
  if (!(_DWORD)v15)
  {
    v7 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_23;
  }
  if ((v15 & 0x80000000) != 0)
  {
LABEL_30:
    v7 = 0;
    goto LABEL_23;
  }
  v17 = *(_BYTE **)a2;
  v18 = *(unsigned int *)(a2 + 8);
  v19 = *(_BYTE **)a3;
  v20 = *(unsigned int *)(a3 + 8);
  __src = *(_BYTE **)a4;
  v21 = *(unsigned int *)(a4 + 8);
  result = WTF::tryFastCompactMalloc((WTF *)(v15 + 20), &v26);
  v7 = v26;
  if (v26)
  {
    v22 = v26 + 5;
    *v26 = 2;
    v7[1] = v15;
    *((_QWORD *)v7 + 1) = v7 + 5;
    v7[4] = 4;
    if ((_DWORD)v18 == 1)
    {
      *v22 = *v17;
    }
    else if ((_DWORD)v18)
    {
      result = (uint64_t)memcpy(v7 + 5, v17, v18);
    }
    v23 = &v22[v18];
    if ((_DWORD)v20 == 1)
    {
      *v23 = *v19;
    }
    else if ((_DWORD)v20)
    {
      result = (uint64_t)memcpy(v23, v19, v20);
    }
    v24 = &v23[v20];
    if ((_DWORD)v21 == 1)
    {
      *v24 = *__src;
    }
    else if ((_DWORD)v21)
    {
      result = (uint64_t)memcpy(v24, __src, v21);
    }
    v24[v21] = a5;
  }
LABEL_23:
  *v5 = v7;
  return result;
}

void JSC::constructMap(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(uint64_t a1, JSC::VM *a2, JSC::JSGlobalObject *a3, uint64_t this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int8x16_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  JSC::JSGlobalObject *v31;
  uint64_t v32;
  unint64_t v33;
  JSC::VM *v34;
  unint64_t *v35;
  unint64_t v36;
  int v37;
  WTF::StringImpl **v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  JSC::Symbol *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  JSC::VM *v51;
  unint64_t v52;
  uint64_t v53;
  WTF *v54;
  const WTF::StringImpl *v55;
  JSC::JSGlobalObject *v56;
  BOOL v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  float v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  JSC::JSGlobalObject *v81;
  uint64_t v82;
  unint64_t v83;
  JSC::VM *v84;
  JSC::JSGlobalObject *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  JSC::VM *v89;
  JSC::JSGlobalObject *v90;
  int **v91;
  JSC::JSString *v92;
  char v93;
  char v94;
  uint64_t v95;
  unsigned int v96;
  unint64_t v97;
  size_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  JSC::JSGlobalObject *v105;
  unint64_t v106;
  uint64_t v107;
  const WTF::StringImpl *v108;
  int v109;
  unint64_t v110;
  unsigned int v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  BOOL v116;
  int v117;
  int **v118;
  WTF::StringImpl *v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  JSC::VM *v131;
  uint64_t v132;
  uint64_t v133;
  int **v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  double v138;
  uint64_t v139;
  uint64_t v140;
  BOOL v141;
  uint64_t v142;
  unint64_t v143;
  JSC::JSGlobalObject *v144;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v146;
  unint64_t v147;
  JSC::VM *v148;
  JSC::JSGlobalObject *v149;
  uint64_t v150;
  uint64_t v151;
  BOOL v152;
  uint64_t v153;
  unint64_t v154;
  JSC::VM *v155;
  JSC::JSGlobalObject *v156;
  unint64_t v157;
  uint64_t v158;
  BOOL v159;
  uint64_t v160;
  unint64_t v161;
  JSC::VM *v162;
  JSC::JSGlobalObject *v163;
  BOOL v164;
  uint64_t v165;
  unint64_t v166;
  JSC::VM *v167;
  JSC::JSGlobalObject *v168;
  unint64_t v169;
  int v170;
  int v171;
  unint64_t v172;
  BOOL v173;
  int v174;
  int **v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  unsigned int v180;
  uint64_t v181;
  unint64_t v182;
  JSC::VM *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  JSC::VM *v187;
  unint64_t v188;
  unint64_t v189;
  JSC::VM *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  BOOL v195;
  unint64_t v196;
  int v197;
  unint64_t v198;
  int v199;
  JSC::JSGlobalObject *v200;
  JSC::VM *v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  JSC::VM *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  BOOL v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  JSC::JSGlobalObject *v216;
  BOOL v217;
  JSC::VM *v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  JSC::VM *v224;
  int v225;
  JSC::JSGlobalObject *v226;
  uint64_t Slow;
  JSC::VM *v228;
  int **v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned __int8 *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  JSC::VM *v251;
  JSC::JSGlobalObject *v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int v256;
  uint64_t v257;
  unint64_t v258;
  JSC::VM *v259;
  JSC::JSGlobalObject *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  BOOL v264;
  uint64_t v265;
  unint64_t v266;
  JSC::VM *v267;
  JSC::JSGlobalObject *v268;
  int v269;
  int v270;
  unint64_t v271;
  BOOL v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  JSC::VM *v278;
  int v279;
  BOOL v280;
  JSC::JSGlobalObject *v281;
  JSC::VM *v282;
  unint64_t v283;
  uint64_t v284;
  BOOL v285;
  uint64_t v286;
  unint64_t v287;
  JSC::JSGlobalObject *v288;
  uint64_t v289;
  unint64_t v290;
  JSC::JSGlobalObject *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  JSC::JSBigInt *v296;
  uint64_t v297;
  unint64_t v298;
  JSC::VM *v299;
  uint64_t v300;
  int v301;
  unint64_t v302;
  JSC::JSBigInt *v303;
  JSC::VM *v304;
  JSC::JSGlobalObject *v305;
  uint64_t v306;
  uint64_t v307;
  BOOL v308;
  uint64_t v309;
  JSC::JSGlobalObject *v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t SlowCase;
  unint64_t v316;
  unint64_t v317;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  JSC::VM *v331;
  JSC::VM *v332;
  JSC::VM *v333;
  JSC::VM *v334;
  unsigned int v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v340;
  JSC::JSGlobalObject *v341;
  JSC::JSGlobalObject *v342;
  JSC::JSGlobalObject *v343;
  JSC::JSGlobalObject *v344;
  unint64_t *v345;
  JSC *v346;
  uint64_t v347;
  unsigned int v348;
  unsigned int v349;
  unsigned int v350;
  uint64_t v351;
  unsigned int v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  JSC::JSBigInt *Index;
  _QWORD v362[4];
  char *v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  _OWORD v368[4];
  uint64_t v369;
  JSC::VM *v370;

  v370 = a2;
  if ((this & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(this + 5) <= 0x16u)
  {
    JSC::throwTypeError(a3, &v370);
    return;
  }
  Index = (JSC::JSBigInt *)JSC::JSObject::getIndex((JSC::JSObject *)this, a3, 0, this, a5, a6, a7, a8);
  if (!*((_DWORD *)a2 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(a2, v12, v13, v14, v15, v16, v17, v18))
  {
    v19 = JSC::JSObject::getIndex((JSC::JSObject *)this, a3, 1uLL, v14, v15, v16, v17, v18);
    v28 = (unint64_t)Index;
    v29 = v19;
    if (!*((_DWORD *)a2 + 20)
      || (v140 = v19,
          v141 = JSC::VM::hasExceptionsAfterHandlingTraps(a2, v20, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v25, v26), v28 = (unint64_t)Index, v29 = v140, !v141))
    {
      if (!**(_BYTE **)a1)
      {
        LOBYTE(v365) = 0;
        v366 = 0x800000000;
        v367 = (char *)v368 + 8;
        memset(v368, 0, sizeof(v368));
        v369 = 0;
        v230 = v29;
        JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append(&v365, v28, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v25, v26);
        JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append(&v365, v230, v231, v232, v233, v234, v235, v236);
        v237 = *(unsigned __int8 **)(a1 + 32);
        v238 = **(_QWORD **)(a1 + 24);
        v239 = **(_QWORD **)(a1 + 8);
        v363 = v367;
        v364 = v366;
        JSC::call((uint64_t *)a3, v238, v237, v239, (uint64_t)&v363, v240, v241, v242);
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v366, v243, v244, v245, v246, v247, v248, v249);
        return;
      }
      v30 = **(_QWORD **)(a1 + 8);
      v31 = *(JSC::JSGlobalObject **)(**(_QWORD **)(a1 + 16) + 40);
      v32 = *((_QWORD *)v31 + 7);
      if (*(_QWORD *)(v30 + 16))
      {
LABEL_7:
        if (*(_DWORD *)(v32 + 80))
        {
          v142 = v29;
          v143 = v30;
          v144 = v31;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32, v30, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v25, v26);
          v31 = v144;
          v28 = (unint64_t)Index;
          v30 = v143;
          v29 = v142;
          if (hasExceptionsAfterHandlingTraps)
            return;
        }
        v33 = *(_QWORD *)(v30 + 16);
        v34 = (JSC::VM *)*((_QWORD *)v31 + 7);
        v35 = (unint64_t *)(v33 + 16);
        if (!*(_DWORD *)(v33 + 16))
        {
          v36 = 0;
          v40 = 0;
          v42 = 0xFFFFFFFFLL;
          goto LABEL_80;
        }
        v36 = v28;
        if ((v28 + 0x2000000000000) >> 50)
        {
          v27.i64[0] = v28 - 0x2000000000000;
          v139 = (int)COERCE_DOUBLE(v28 - 0x2000000000000);
          v36 = v28;
          if (COERCE_DOUBLE(v28 - 0x2000000000000) == (double)(int)v139)
            v36 = v139 | 0xFFFE000000000000;
        }
        if ((v36 & 0xFFFE000000000002) != 0)
        {
          v41 = 0;
        }
        else
        {
          v37 = *(unsigned __int8 *)(v36 + 5);
          if (v37 == 2)
          {
            v38 = (WTF::StringImpl **)(v36 + 8);
            if ((*(_BYTE *)(v36 + 8) & 1) != 0)
            {
              v87 = v29;
              v88 = v30;
              v89 = (JSC::VM *)*((_QWORD *)v31 + 7);
              v90 = v31;
              v91 = JSC::JSRopeString::resolveRope(v36, v31, (uint64_t)v21, v22, v27, (uint64_t)v23, v24, (uint64_t)v25, v26);
              v31 = v90;
              v34 = v89;
              v28 = (unint64_t)Index;
              v30 = v88;
              v29 = v87;
              v38 = (WTF::StringImpl **)v91;
            }
            if (!*((_DWORD *)v34 + 20))
              goto LABEL_15;
            v160 = v29;
            v161 = v30;
            v162 = v34;
            v163 = v31;
            v164 = JSC::VM::hasExceptionsAfterHandlingTraps(v34, v30, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v25, v26);
            v31 = v163;
            v34 = v162;
            v28 = (unint64_t)Index;
            v30 = v161;
            v29 = v160;
            if (v164)
            {
              v40 = 0xFFFFFFFFLL;
            }
            else
            {
LABEL_15:
              v39 = *((_DWORD *)*v38 + 4);
              if (v39 < 0x100)
              {
                v82 = v29;
                v83 = v30;
                v84 = v34;
                v85 = v31;
                v86 = WTF::StringImpl::hashSlowCase(*v38);
                v31 = v85;
                v34 = v84;
                v28 = (unint64_t)Index;
                v30 = v83;
                v29 = v82;
                v40 = v86;
              }
              else
              {
                v40 = v39 >> 8;
              }
            }
            v362[2] = v36;
            v41 = 1;
LABEL_18:
            if (*((_DWORD *)v34 + 20))
            {
              v153 = v29;
              v154 = v30;
              v155 = v34;
              v156 = v31;
              v157 = v33;
              v158 = v40;
              v159 = JSC::VM::hasExceptionsAfterHandlingTraps(v34, v30, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v25, v26);
              v40 = v158;
              v33 = v157;
              v31 = v156;
              v34 = v155;
              v28 = (unint64_t)Index;
              v30 = v154;
              v29 = v153;
              if (v159)
              {
                v36 = 0;
                v40 = 0;
                v42 = 0;
                v49 = 0;
                goto LABEL_40;
              }
            }
            v42 = ((*(_DWORD *)(v33 + 32) - 1) & v40) + 4;
            *(double *)v27.i64 = (double)(int)v36;
            if (v36 <= 0xFFFDFFFFFFFFFFFFLL)
              v27.i64[0] = v36 - 0x2000000000000;
            v43 = v35[v42];
            if (v43)
            {
              v44 = (JSC::Symbol *)*((_QWORD *)v31 + 7);
              v45 = (unint64_t *)((char *)v44 + 41840);
              if (!(v36 >> 49))
              {
                if ((v41 & 1) == 0)
                {
                  while (1)
                  {
                    v316 = v35[v43];
                    if ((v316 & 0xFFFE000000000002) != 0)
                    {
                      if (v36 == v316)
                        goto LABEL_246;
                    }
                    else
                    {
                      v317 = *v45;
                      if (!*v45)
                      {
                        v319 = v29;
                        v320 = v30;
                        v334 = v34;
                        v344 = v31;
                        v360 = v33;
                        v321 = v40;
                        v352 = v42;
                        v317 = JSC::Symbol::create(v44, (JSC::VM *)v30, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v25, v26);
                        v42 = v352;
                        v40 = v321;
                        v33 = v360;
                        v28 = (unint64_t)Index;
                        v31 = v344;
                        v34 = v334;
                        v30 = v320;
                        v29 = v319;
                        *v45 = v317;
                      }
                      if (v36 == v316 && v317 != v316)
                      {
LABEL_246:
                        v49 = v43;
                        goto LABEL_40;
                      }
                    }
                    v43 = v35[(v43 + 2)];
                    v49 = -1;
                    if (!v43)
                      goto LABEL_40;
                  }
                }
                while (1)
                {
                  v46 = v35[v43];
                  if ((v46 & 0xFFFE000000000002) != 0)
                    break;
                  v47 = *v45;
                  if (!*v45)
                  {
                    v181 = v29;
                    v182 = v30;
                    v183 = v34;
                    v342 = v31;
                    v356 = v33;
                    v184 = v40;
                    v350 = v42;
                    v47 = JSC::Symbol::create(v44, (JSC::VM *)v30, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v25, v26);
                    v42 = v350;
                    v40 = v184;
                    v33 = v356;
                    v28 = (unint64_t)Index;
                    v31 = v342;
                    v34 = v183;
                    v30 = v182;
                    v29 = v181;
                    *v45 = v47;
                  }
                  if (v47 != v46)
                  {
                    if (v36 == v46)
                      goto LABEL_39;
                    v48 = *(unsigned __int8 *)(v36 + 5);
                    if (v48 == 2)
                    {
                      if (*(_BYTE *)(v46 + 5) != 2)
                        break;
                      v348 = v42;
                      v353 = v33;
                      v50 = v40;
                      v51 = v34;
                      v52 = v30;
                      v53 = v29;
                      v54 = *(WTF **)(v36 + 8);
                      if ((v54 & 1) != 0
                        || (v55 = *(const WTF::StringImpl **)(v46 + 8), (v55 & 1) != 0))
                      {
                        v92 = (JSC::JSString *)v46;
                        v56 = v31;
                        v57 = JSC::JSString::equalSlowCase((JSC::JSString *)v36, v31, v92, v22, (uint64_t)v23, v24, (uint64_t)v25, v26, v27);
                      }
                      else
                      {
                        v56 = v31;
                        v57 = WTF::equal(v54, v55, v21);
                      }
                      v31 = v56;
                      v29 = v53;
                      v30 = v52;
                      v34 = v51;
                      v40 = v50;
                      v33 = v353;
                      v28 = (unint64_t)Index;
                      v42 = v348;
                      if (v57)
                        goto LABEL_39;
                    }
                    else
                    {
                      if (v48 != 3 || *(_BYTE *)(v46 + 5) != 3)
                        break;
                      v330 = v29;
                      v302 = v30;
                      v303 = (JSC::JSBigInt *)v46;
                      v304 = v34;
                      v305 = v31;
                      v359 = v33;
                      v306 = v40;
                      v307 = v42;
                      v308 = JSC::JSBigInt::equals((JSC::JSBigInt *)v36, v303, v21);
                      v42 = v307;
                      v40 = v306;
                      v33 = v359;
                      v28 = (unint64_t)Index;
                      v31 = v305;
                      v34 = v304;
                      v30 = v302;
                      v29 = v330;
                      if (v308)
                        goto LABEL_39;
                    }
                  }
LABEL_32:
                  v43 = v35[(v43 + 2)];
                  v49 = -1;
                  if (!v43)
                    goto LABEL_40;
                }
                if (v36 == v46)
                  goto LABEL_39;
                goto LABEL_32;
              }
              v135 = v27.i64[0];
              while (1)
              {
                v136 = v35[v43];
                if ((v136 & 0xFFFE000000000002) != 0)
                  goto LABEL_140;
                v137 = *v45;
                if (!*v45)
                {
                  v351 = v27.i64[0];
                  v326 = v30;
                  v328 = v29;
                  v332 = v34;
                  v343 = v31;
                  v357 = v33;
                  v324 = v40;
                  v275 = v42;
                  v137 = JSC::Symbol::create(v44, (JSC::VM *)v30, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v25, v26);
                  v42 = v275;
                  v40 = v324;
                  v33 = v357;
                  v28 = (unint64_t)Index;
                  v31 = v343;
                  v29 = v328;
                  v34 = v332;
                  v30 = v326;
                  v27.i64[0] = v351;
                  *v45 = v137;
                }
                if (v137 != v136)
                {
LABEL_140:
                  if (v36 == v136)
                    break;
                  if (v136 >> 49)
                  {
                    v138 = (double)(int)v136;
                    if (v136 <= 0xFFFDFFFFFFFFFFFFLL)
                      *(_QWORD *)&v138 = v136 - 0x2000000000000;
                    if (v135 == *(_QWORD *)&v138)
                      break;
                  }
                }
                v43 = v35[(v43 + 2)];
                v49 = -1;
                if (!v43)
                  goto LABEL_40;
              }
LABEL_39:
              v49 = v43;
LABEL_40:
              if (*((_DWORD *)v34 + 20))
              {
                v146 = v29;
                v147 = v30;
                v148 = v34;
                v149 = v31;
                v355 = v33;
                v150 = v40;
                v151 = v42;
                v152 = JSC::VM::hasExceptionsAfterHandlingTraps(v34, v30, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v25, v26);
                v42 = v151;
                v40 = v150;
                v33 = v355;
                v28 = (unint64_t)Index;
                v31 = v149;
                v34 = v148;
                v30 = v147;
                v29 = v146;
                if (v152)
                  return;
              }
              if (v49 != -1)
              {
                v35[v49 + 1] = v29;
                if (v29
                  && (v29 & 0xFFFE000000000002) == 0
                  && *((_DWORD *)v34 + 190) >= *(unsigned __int8 *)(v33 + 7))
                {
                  JSC::Heap::writeBarrierSlowPath((uint64_t)v34 + 192, v33);
                }
                return;
              }
              v58 = *(_DWORD *)(v33 + 32);
              v59 = *(_DWORD *)(v33 + 24);
              v60 = *(_QWORD *)(v33 + 16);
              v61 = 0.75;
              if (v58 < 0x10000)
                v61 = 0.5;
              *(float *)v27.i32 = v61 * (float)v58;
              if (*(float *)v27.i32 > (float)(v60 + v59))
              {
                v62 = v33;
                goto LABEL_46;
              }
              v347 = v60 + v59;
              if (v58 >= 0x10000)
                v93 = 1;
              else
                v93 = 2;
              if (v59 >= v58 >> 1)
                v94 = 0;
              else
                v94 = v93;
              v95 = v58 << v94;
              v22 = *((_QWORD *)v31 + 7);
              v23 = (unint64_t *)(v22 + 41656);
              v365 = v22;
              v96 = 4 * v95 + 4;
              v345 = (unint64_t *)(v22 + 41656);
              v346 = (JSC *)v22;
              v325 = v30;
              v327 = v29;
              v331 = v34;
              v341 = v31;
              v354 = v33;
              v349 = v42;
              if (v96 >= 0x10000001)
              {
                v250 = v30;
                v251 = v34;
                v252 = v31;
                v253 = v33;
                v254 = v40;
                v255 = v42;
                v256 = v58 << v94;
                JSC::throwOutOfMemoryError(v31, (JSC::JSGlobalObject *)&v365);
                LODWORD(v95) = v256;
                v23 = v345;
                v22 = (uint64_t)v346;
                v42 = v255;
                v40 = v254;
                v33 = v253;
                v31 = v252;
                v34 = v251;
                v28 = (unint64_t)Index;
                v30 = v250;
                v29 = v327;
                v62 = 0;
LABEL_101:
                v21 = (const WTF::StringImpl *)v347;
                v339 = v62;
                if (*(_DWORD *)(v22 + 80))
                {
                  v257 = v29;
                  v258 = v30;
                  v259 = v34;
                  v260 = v31;
                  v261 = v33;
                  v262 = v40;
                  v263 = v42;
                  v337 = v95;
                  v264 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22, v30, v347, v22, (uint64_t)v23, v24, (uint64_t)v25, v26);
                  LODWORD(v95) = v337;
                  v62 = v339;
                  v23 = v345;
                  v22 = (uint64_t)v346;
                  v21 = (const WTF::StringImpl *)v347;
                  v42 = v263;
                  v40 = v262;
                  v33 = v261;
                  v31 = v260;
                  v34 = v259;
                  v28 = (unint64_t)Index;
                  v30 = v258;
                  v29 = v257;
                  if (v264)
                  {
LABEL_178:
                    v62 = 0;
                    goto LABEL_179;
                  }
                }
                if (!(_DWORD)v21)
                {
                  if (!*(_DWORD *)(v22 + 80))
                    goto LABEL_180;
LABEL_179:
                  v265 = v29;
                  v266 = v30;
                  v267 = v34;
                  v268 = v31;
                  v269 = v40;
                  v270 = v42;
                  v271 = v62;
                  v272 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22, v30, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v25, v26);
                  v22 = (uint64_t)v346;
                  v62 = v271;
                  LODWORD(v42) = v270;
                  LODWORD(v40) = v269;
                  v33 = v354;
                  v28 = (unint64_t)Index;
                  v31 = v268;
                  v34 = v267;
                  v30 = v266;
                  v29 = v265;
                  if (v272)
                  {
                    v62 = 0;
                  }
                  else
                  {
LABEL_180:
                    *v35 = v62;
                    if (v62 && (v62 & 0xFFFE000000000002) == 0)
                    {
                      v196 = v62;
                      v197 = v42;
                      v198 = v33;
                      v199 = v40;
                      v200 = v31;
                      v201 = v34;
                      v202 = v30;
                      v203 = v29;
                      v204 = v198;
                      if (*(_DWORD *)(v22 + 760) >= *(unsigned __int8 *)(v198 + 7))
                        JSC::Heap::writeBarrierSlowPath((uint64_t)v346 + 192, v198);
                      v29 = v203;
                      v30 = v202;
                      v28 = (unint64_t)Index;
                      v34 = v201;
                      v31 = v200;
                      LODWORD(v40) = v199;
                      v33 = v204;
                      LODWORD(v42) = v197;
                      v62 = v196;
                    }
                  }
LABEL_46:
                  if (*((_DWORD *)v34 + 20))
                  {
                    v165 = v29;
                    v166 = v30;
                    v167 = v34;
                    v168 = v31;
                    v169 = v33;
                    v170 = v40;
                    v171 = v42;
                    v172 = v62;
                    v173 = JSC::VM::hasExceptionsAfterHandlingTraps(v34, v30, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v25, v26);
                    v62 = v172;
                    LODWORD(v42) = v171;
                    LODWORD(v40) = v170;
                    v33 = v169;
                    v31 = v168;
                    v34 = v167;
                    v28 = (unint64_t)Index;
                    v30 = v166;
                    v29 = v165;
                    if (v173)
                      return;
                  }
                  v63 = v62 + 16;
                  v64 = *(_QWORD *)(v62 + 16);
                  v65 = *(_DWORD *)(v62 + 32);
                  v66 = *(_DWORD *)(v62 + 24);
                  *(_QWORD *)(v62 + 16) = v64 + 1;
                  if (v36)
                  {
                    if (v62 == v33)
                    {
                      v67 = 0;
                      goto LABEL_50;
                    }
                    v67 = 1;
LABEL_170:
                    LODWORD(v42) = (v40 & (v65 - 1)) + 4;
LABEL_50:
                    v68 = (v65 + 3 * (v66 + v64) + 4);
                    v69 = *(_QWORD *)(v63 + 8 * v42);
                    *(_QWORD *)(v63 + 8 * v42) = v68 | 0xFFFE000000000000;
                    *(_QWORD *)(v63 + 8 * (v65 + 3 * (v66 + v64) + 6)) = v69;
                    *(_QWORD *)(v63 + 8 * v68) = v36;
                    v70 = (uint64_t)v34 + 192;
                    if (v36
                      && (v36 & 0xFFFE000000000002) == 0
                      && *((_DWORD *)v34 + 190) >= *(unsigned __int8 *)(v62 + 7))
                    {
                      v185 = v29;
                      v186 = v30;
                      v187 = v34;
                      v188 = v62;
                      JSC::Heap::writeBarrierSlowPath((uint64_t)v34 + 192, v62);
                      v62 = v188;
                      v34 = v187;
                      v30 = v186;
                      v29 = v185;
                    }
                    *(_QWORD *)(v63 + 8 * (v68 + 1)) = v29;
                    if (v29
                      && (v29 & 0xFFFE000000000002) == 0
                      && *((_DWORD *)v34 + 190) >= *(unsigned __int8 *)(v62 + 7))
                    {
                      v189 = v30;
                      v190 = v34;
                      v191 = v62;
                      JSC::Heap::writeBarrierSlowPath(v70, v62);
                      v62 = v191;
                      v34 = v190;
                      v30 = v189;
                    }
                    if (v67)
                    {
                      *(_QWORD *)(v30 + 16) = v62;
                      if (*((_DWORD *)v34 + 190) >= *(unsigned __int8 *)(v30 + 7))
                        JSC::Heap::writeBarrierSlowPath(v70, v30);
                    }
                    return;
                  }
                  v340 = v62;
                  if ((v28 + 0x2000000000000) >> 50)
                  {
                    v27.i64[0] = v28 - 0x2000000000000;
                    v276 = (int)COERCE_DOUBLE(v28 - 0x2000000000000);
                    v28 = (unint64_t)Index;
                    if (*(double *)v27.i64 == (double)(int)v276)
                      v28 = v276 | 0xFFFE000000000000;
                  }
                  if ((v28 & 0xFFFE000000000002) != 0)
                  {
                    v218 = v34;
                    v36 = v28;
                    v219 = v30;
                    v220 = v29;
                  }
                  else
                  {
                    v174 = *(unsigned __int8 *)(v28 + 5);
                    if (v174 == 2)
                    {
                      v175 = (int **)(v28 + 8);
                      if ((*(_BYTE *)(v28 + 8) & 1) != 0)
                      {
                        v177 = v30;
                        v178 = v29;
                        v176 = v28;
                        v228 = v34;
                        v229 = JSC::JSRopeString::resolveRope(v28, v31, (uint64_t)v21, v22, v27, (uint64_t)v23, v24, (uint64_t)v25, v26);
                        v34 = v228;
                        v175 = v229;
                      }
                      else
                      {
                        v176 = v28;
                        v177 = v30;
                        v178 = v29;
                      }
                      if (*((_DWORD *)v34 + 20)
                        && (v333 = v34,
                            v285 = JSC::VM::hasExceptionsAfterHandlingTraps(v34, v30, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v25, v26), v34 = v333, v285))
                      {
                        LODWORD(v40) = -1;
                      }
                      else
                      {
                        v179 = (WTF::StringImpl *)*v175;
                        v180 = (*v175)[4];
                        if (v180 < 0x100)
                        {
                          v224 = v34;
                          v225 = WTF::StringImpl::hashSlowCase(v179);
                          v34 = v224;
                          LODWORD(v40) = v225;
                        }
                        else
                        {
                          LODWORD(v40) = v180 >> 8;
                        }
                      }
                      v36 = v176;
                      v29 = v178;
                      v30 = v177;
                      goto LABEL_168;
                    }
                    v218 = v34;
                    v36 = v28;
                    v219 = v30;
                    v220 = v29;
                    if (v174 == 3)
                    {
                      if (*(_DWORD *)(v28 + 12))
                        LODWORD(v40) = *(_DWORD *)(v28 + 12);
                      else
                        LODWORD(v40) = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v28);
                      goto LABEL_197;
                    }
                  }
                  v221 = (v36 + ~(v36 << 32)) ^ ((v36 + ~(v36 << 32)) >> 22);
                  v222 = 9 * ((v221 + ~(v221 << 13)) ^ ((v221 + ~(v221 << 13)) >> 8));
                  v223 = (v222 ^ (v222 >> 15)) + ~((v222 ^ (v222 >> 15)) << 27);
                  LODWORD(v40) = (v223 >> 31) ^ v223;
LABEL_197:
                  v29 = v220;
                  v30 = v219;
                  v34 = v218;
LABEL_168:
                  v62 = v340;
                  if (*((_DWORD *)v34 + 20))
                  {
                    v329 = v29;
                    v277 = v30;
                    v278 = v34;
                    v358 = v33;
                    v279 = v40;
                    v280 = JSC::VM::hasExceptionsAfterHandlingTraps(v34, v30, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v25, v26);
                    v62 = v340;
                    LODWORD(v40) = v279;
                    v33 = v358;
                    v34 = v278;
                    v30 = v277;
                    v29 = v329;
                    if (v280)
                      return;
                  }
                  v67 = v62 != v33;
                  goto LABEL_170;
                }
                v108 = 0;
                v109 = v95 + 1;
                v110 = v62 + 16;
                v24 = (v95 - 1);
                v111 = v58 + 5;
                v322 = 2;
                v25 = v362;
                v26 = -1;
                v335 = v95 - 1;
                while (1)
                {
                  v112 = v35[v111 - 1];
                  if ((v112 & 0xFFFE000000000002) != 0)
                  {
                    v114 = (v109 + 3);
                    *(_QWORD *)(v110 + 8 * v114) = v112;
                  }
                  else
                  {
                    v113 = v23[23];
                    if (!v113)
                    {
                      v205 = v30;
                      v206 = v40;
                      v113 = JSC::Symbol::create((JSC::Symbol *)v22, (JSC::VM *)v30, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v362, -1);
                      v26 = -1;
                      v25 = v362;
                      v24 = v335;
                      v23 = v345;
                      v22 = (uint64_t)v346;
                      v21 = (const WTF::StringImpl *)v347;
                      v62 = v339;
                      v31 = v341;
                      v42 = v349;
                      v40 = v206;
                      v33 = v354;
                      v28 = (unint64_t)Index;
                      v29 = v327;
                      v34 = v331;
                      v30 = v205;
                      v345[23] = v113;
                    }
                    if (v113 == v112)
                    {
                      v35[v322++] = (unint64_t)v108 | 0xFFFE000000000000;
                      goto LABEL_124;
                    }
                    v114 = (v109 + 3);
                    *(_QWORD *)(v110 + 8 * v114) = v112;
                    if (v62 && v112 && *(_DWORD *)(v22 + 760) >= *(unsigned __int8 *)(v62 + 7))
                    {
                      v207 = v40;
                      JSC::Heap::writeBarrierSlowPath(v22 + 192, v62);
                      v26 = -1;
                      v25 = v362;
                      v24 = v335;
                      v23 = v345;
                      v22 = (uint64_t)v346;
                      v21 = (const WTF::StringImpl *)v347;
                      v62 = v339;
                      v31 = v341;
                      v42 = v349;
                      v40 = v207;
                      v33 = v354;
                      v28 = (unint64_t)Index;
                      v29 = v327;
                      v34 = v331;
                      v30 = v325;
                    }
                  }
                  v115 = v35[v111];
                  *(_QWORD *)(v110 + 8 * (v109 + 4)) = v115;
                  if (v115)
                    v116 = (v115 & 0xFFFE000000000002) == 0;
                  else
                    v116 = 0;
                  if (v116 && *(_DWORD *)(v22 + 760) >= *(unsigned __int8 *)(v62 + 7))
                  {
                    v208 = v34;
                    v209 = v40;
                    JSC::Heap::writeBarrierSlowPath(v22 + 192, v62);
                    v26 = -1;
                    v25 = v362;
                    v24 = v335;
                    v23 = v345;
                    v22 = (uint64_t)v346;
                    v21 = (const WTF::StringImpl *)v347;
                    v62 = v339;
                    v31 = v341;
                    v42 = v349;
                    v40 = v209;
                    v33 = v354;
                    v28 = (unint64_t)Index;
                    v34 = v208;
                    v30 = v325;
                    v29 = v327;
                  }
                  if ((v112 & 0xFFFE000000000002) == 0)
                  {
                    v117 = *(unsigned __int8 *)(v112 + 5);
                    if (v117 == 2)
                    {
                      v118 = (int **)(v112 + 8);
                      if ((*(_BYTE *)(v112 + 8) & 1) != 0)
                      {
                        v131 = v34;
                        v132 = v40;
                        v133 = v42;
                        v134 = JSC::JSRopeString::resolveRope(v112, v31, (uint64_t)v21, v22, v27, (uint64_t)v23, v24, (uint64_t)v362, -1);
                        v26 = -1;
                        v25 = v362;
                        v24 = v335;
                        v23 = v345;
                        v22 = (uint64_t)v346;
                        v21 = (const WTF::StringImpl *)v347;
                        v62 = v339;
                        v31 = v341;
                        v42 = v133;
                        v40 = v132;
                        v33 = v354;
                        v28 = (unint64_t)Index;
                        v34 = v131;
                        v30 = v325;
                        v29 = v327;
                        v118 = v134;
                      }
                      if (!*(_DWORD *)(v22 + 80))
                        goto LABEL_119;
                      v210 = v30;
                      v211 = v40;
                      v212 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22, v30, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v362, -1);
                      v26 = -1;
                      v25 = v362;
                      v24 = v335;
                      v23 = v345;
                      v22 = (uint64_t)v346;
                      v21 = (const WTF::StringImpl *)v347;
                      v62 = v339;
                      v31 = v341;
                      v42 = v349;
                      v40 = v211;
                      v33 = v354;
                      v28 = (unint64_t)Index;
                      v29 = v327;
                      v34 = v331;
                      v30 = v210;
                      if (v212)
                      {
                        v121 = -1;
                      }
                      else
                      {
LABEL_119:
                        v119 = (WTF::StringImpl *)*v118;
                        v120 = (*v118)[4];
                        if (v120 < 0x100)
                        {
                          v127 = v29;
                          v128 = v30;
                          v129 = v40;
                          v130 = WTF::StringImpl::hashSlowCase(v119);
                          v26 = -1;
                          v25 = v362;
                          v24 = v335;
                          v23 = v345;
                          v22 = (uint64_t)v346;
                          v21 = (const WTF::StringImpl *)v347;
                          v62 = v339;
                          v31 = v341;
                          v42 = v349;
                          v40 = v129;
                          v33 = v354;
                          v28 = (unint64_t)Index;
                          v34 = v331;
                          v30 = v128;
                          v29 = v127;
                          v121 = v130;
                        }
                        else
                        {
                          v121 = v120 >> 8;
                        }
                      }
                      v362[0] = v112;
                      goto LABEL_122;
                    }
                    if (v117 == 3)
                    {
                      v121 = *(_DWORD *)(v112 + 12);
                      if (!v121)
                      {
                        v296 = (JSC::JSBigInt *)v112;
                        v297 = v29;
                        v298 = v30;
                        v299 = v34;
                        v300 = v40;
                        v301 = JSC::JSBigInt::hashSlow(v296);
                        v26 = -1;
                        v25 = v362;
                        v24 = v335;
                        v23 = v345;
                        v22 = (uint64_t)v346;
                        v21 = (const WTF::StringImpl *)v347;
                        v62 = v339;
                        v31 = v341;
                        v42 = v349;
                        v40 = v300;
                        v33 = v354;
                        v28 = (unint64_t)Index;
                        v34 = v299;
                        v30 = v298;
                        v29 = v297;
                        v121 = v301;
                      }
                      goto LABEL_122;
                    }
                  }
                  v124 = (v112 + ~(v112 << 32)) ^ ((v112 + ~(v112 << 32)) >> 22);
                  v125 = 9 * ((v124 + ~(v124 << 13)) ^ ((v124 + ~(v124 << 13)) >> 8));
                  v126 = (v125 ^ (v125 >> 15)) + ~((v125 ^ (v125 >> 15)) << 27);
                  v121 = (v126 >> 31) ^ v126;
LABEL_122:
                  if (*(_DWORD *)(v22 + 80))
                  {
                    v192 = v29;
                    v193 = v30;
                    v194 = v40;
                    v195 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22, v30, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v362, -1);
                    v26 = -1;
                    v25 = v362;
                    v24 = v335;
                    v23 = v345;
                    v22 = (uint64_t)v346;
                    v21 = (const WTF::StringImpl *)v347;
                    v62 = v339;
                    v31 = v341;
                    v42 = v349;
                    v40 = v194;
                    v33 = v354;
                    v28 = (unint64_t)Index;
                    v34 = v331;
                    v30 = v193;
                    v29 = v192;
                    if (v195)
                      goto LABEL_178;
                  }
                  v122 = (v121 & v24) + 4;
                  v123 = *(_QWORD *)(v110 + 8 * v122);
                  *(_QWORD *)(v110 + 8 * v122) = v114 | 0xFFFE000000000000;
                  *(_QWORD *)(v110 + 8 * (v114 + 2)) = v123;
                  v109 = v114;
LABEL_124:
                  v108 = (const WTF::StringImpl *)((char *)v108 + 1);
                  v111 += 3;
                  if (v21 == v108)
                    goto LABEL_179;
                }
              }
              v97 = *v23;
              v98 = 8 * (4 * v95 + 4);
              v99 = (v98 + 31) & 0xFFFFFFFF0;
              v323 = v40;
              if (v99 <= 0x1F60 && (v100 = *(_QWORD *)(v22 + (((v98 + 31) >> 1) & 0x7FFFFFFF8) + 10880)) != 0)
              {
                v101 = *(unsigned int *)(v100 + 60);
                v62 = *(_QWORD *)(v100 + 24);
                if (v62 >= *(_QWORD *)(v100 + 32))
                {
                  v338 = v58 << v94;
                  v102 = v30;
                  v273 = *(_QWORD *)(v100 + 40);
                  if ((v273 & 1) == 0)
                  {
                    v62 = *(_QWORD *)(v100 + 40);
                    v274 = *(_QWORD *)(v273 + 8) ^ *(_QWORD *)(v100 + 48);
                    *(_QWORD *)(v100 + 32) = v62 + HIDWORD(v274);
                    *(_QWORD *)(v100 + 40) = v62 + (int)v274;
                    *(_QWORD *)(v100 + 24) = v62 + v101;
                    v23 = (unint64_t *)(v22 + 41656);
                    v98 = 8 * (4 * v95 + 4);
                    goto LABEL_94;
                  }
                  JSC::sanitizeStackForVM((JSC *)v22, (JSC::VM *)v30, v99, v22, (uint64_t)v23, v24, (uint64_t)v25, v26);
                  SlowCase = JSC::LocalAllocator::allocateSlowCase(v100, (uint64_t)v346 + 192, v101, 0, 1, v312, v313, v314);
                  v23 = v345;
                  v22 = (uint64_t)v346;
                  v62 = SlowCase;
                  v29 = v327;
                  v30 = v102;
                  v98 = 8 * v96;
                  v31 = v341;
                  v95 = v338;
                }
                else
                {
                  *(_QWORD *)(v100 + 24) = v62 + v101;
                }
              }
              else
              {
                v226 = v31;
                v336 = v58 << v94;
                Slow = JSC::CompleteSubspace::tryAllocateSlow(v22 + 10792, (JSC *)v22, v99, 0, (uint64_t)v23, v24, (uint64_t)v25, v26);
                v95 = v336;
                v98 = 8 * v96;
                v23 = v345;
                v22 = (uint64_t)v346;
                v31 = v226;
                v30 = v325;
                v29 = v327;
                v62 = Slow;
              }
              v102 = v30;
              if (!v62)
              {
                v309 = v29;
                v310 = v31;
                v311 = v95;
                JSC::throwOutOfMemoryError(v31, (JSC::JSGlobalObject *)&v365);
                LODWORD(v95) = v311;
                v23 = v345;
                v22 = (uint64_t)v346;
                v31 = v310;
                v29 = v309;
                v62 = 0;
LABEL_100:
                v30 = v102;
                v28 = (unint64_t)Index;
                v34 = v331;
                v40 = v323;
                v42 = v349;
                goto LABEL_101;
              }
LABEL_94:
              *(_DWORD *)v62 = 0;
              v103 = *(_DWORD *)(v97 + 8);
              *(_DWORD *)v62 = v97 >> 4;
              *(_DWORD *)(v62 + 4) = v103;
              v362[1] = v97;
              *(_DWORD *)(v62 + 8) = v96;
              *(_DWORD *)(v62 + 12) = v96;
              if (v96 && (*(_BYTE *)(v62 + 4) & 0xE) == 8)
              {
                v104 = v29;
                v105 = v31;
                v106 = v62;
                v107 = v95;
                bzero((void *)(v62 + 16), v98);
                v95 = v107;
                v23 = v345;
                v22 = (uint64_t)v346;
                v62 = v106;
                v31 = v105;
                v29 = v104;
              }
              if (*(_BYTE *)(v22 + 755))
                __dmb(0xAu);
              *(_QWORD *)(v62 + 16) = v60 | 0xFFFE000000000000;
              *(_QWORD *)(v62 + 24) = 0xFFFE000000000000;
              *(_QWORD *)(v62 + 32) = v95 | 0xFFFE000000000000;
              goto LABEL_100;
            }
LABEL_80:
            v49 = -1;
            goto LABEL_40;
          }
          if (v37 == 3)
          {
            v281 = v31;
            v282 = (JSC::VM *)*((_QWORD *)v31 + 7);
            v283 = v30;
            v284 = v29;
            if (*(_DWORD *)(v36 + 12))
              v40 = *(unsigned int *)(v36 + 12);
            else
              v40 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v36);
            v41 = 1;
            v29 = v284;
            v30 = v283;
            v28 = (unint64_t)Index;
            v34 = v282;
            v31 = v281;
            goto LABEL_18;
          }
          v41 = 1;
        }
        v71 = (v36 + ~(v36 << 32)) ^ ((v36 + ~(v36 << 32)) >> 22);
        v72 = 9 * ((v71 + ~(v71 << 13)) ^ ((v71 + ~(v71 << 13)) >> 8));
        v73 = (v72 ^ (v72 >> 15)) + ~((v72 ^ (v72 >> 15)) << 27);
        v40 = (v73 >> 31) ^ v73;
        goto LABEL_18;
      }
      v365 = *((_QWORD *)v31 + 7);
      v74 = *(_QWORD *)(v32 + 41656);
      v75 = *(_QWORD *)(v32 + 11032);
      if (v75)
      {
        v76 = *(unsigned int *)(v75 + 60);
        v77 = *(_QWORD *)(v75 + 24);
        if (v77 < *(_QWORD *)(v75 + 32))
        {
          *(_QWORD *)(v75 + 24) = v77 + v76;
          goto LABEL_67;
        }
        v77 = *(_QWORD *)(v75 + 40);
        if ((v77 & 1) == 0)
        {
          v213 = *(_QWORD *)(v77 + 8) ^ *(_QWORD *)(v75 + 48);
          *(_QWORD *)(v75 + 32) = v77 + HIDWORD(v213);
          *(_QWORD *)(v75 + 40) = v77 + (int)v213;
          *(_QWORD *)(v75 + 24) = v77 + v76;
          goto LABEL_68;
        }
        v289 = v29;
        v290 = v30;
        v291 = v31;
        JSC::sanitizeStackForVM((JSC *)v32, (JSC::VM *)v30, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v25, v26);
        v295 = JSC::LocalAllocator::allocateSlowCase(v75, v32 + 192, v76, 0, 1, v292, v293, v294);
      }
      else
      {
        v289 = v29;
        v290 = v30;
        v291 = v31;
        v295 = JSC::CompleteSubspace::tryAllocateSlow(v32 + 10792, (JSC *)v32, 0x130uLL, 0, (uint64_t)v23, v24, (uint64_t)v25, v26);
      }
      v31 = v291;
      v28 = (unint64_t)Index;
      v30 = v290;
      v29 = v289;
      v77 = v295;
LABEL_67:
      if (!v77)
      {
        v286 = v29;
        v287 = v30;
        v288 = v31;
        JSC::throwOutOfMemoryError(v31, (JSC::JSGlobalObject *)&v365);
        v31 = v288;
        v28 = (unint64_t)Index;
        v30 = v287;
        v29 = v286;
LABEL_73:
        if (!*(_DWORD *)(v32 + 80))
          goto LABEL_75;
        v214 = v29;
        v215 = v30;
        v216 = v31;
        v217 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32, v30, (uint64_t)v21, v22, (uint64_t)v23, v24, (uint64_t)v25, v26);
        v31 = v216;
        v28 = (unint64_t)Index;
        v30 = v215;
        v29 = v214;
        if (!v217)
        {
LABEL_75:
          *(_QWORD *)(v30 + 16) = v77;
          if (v77)
          {
            if (*(_DWORD *)(v32 + 760) >= *(unsigned __int8 *)(v30 + 7))
            {
              v79 = v29;
              v80 = v30;
              v81 = v31;
              JSC::Heap::writeBarrierSlowPath(v32 + 192, v30);
              v31 = v81;
              v28 = (unint64_t)Index;
              v30 = v80;
              v29 = v79;
            }
          }
        }
        goto LABEL_7;
      }
LABEL_68:
      *(_DWORD *)v77 = 0;
      v78 = *(_DWORD *)(v74 + 8);
      *(_DWORD *)v77 = v74 >> 4;
      *(_DWORD *)(v77 + 4) = v78;
      v362[3] = v74;
      *(_QWORD *)(v77 + 8) = 0x2400000024;
      if ((*(_BYTE *)(v77 + 4) & 0xE) == 8)
      {
        *(_OWORD *)(v77 + 272) = 0u;
        *(_OWORD *)(v77 + 288) = 0u;
        *(_OWORD *)(v77 + 240) = 0u;
        *(_OWORD *)(v77 + 256) = 0u;
        *(_OWORD *)(v77 + 208) = 0u;
        *(_OWORD *)(v77 + 224) = 0u;
        *(_OWORD *)(v77 + 176) = 0u;
        *(_OWORD *)(v77 + 192) = 0u;
        *(_OWORD *)(v77 + 144) = 0u;
        *(_OWORD *)(v77 + 160) = 0u;
        *(_OWORD *)(v77 + 112) = 0u;
        *(_OWORD *)(v77 + 128) = 0u;
        *(_OWORD *)(v77 + 80) = 0u;
        *(_OWORD *)(v77 + 96) = 0u;
        *(_OWORD *)(v77 + 48) = 0u;
        *(_OWORD *)(v77 + 64) = 0u;
        *(_OWORD *)(v77 + 16) = 0u;
        *(_OWORD *)(v77 + 32) = 0u;
      }
      if (*(_BYTE *)(v32 + 755))
        __dmb(0xAu);
      v27 = (int8x16_t)vdupq_n_s64(0xFFFE000000000000);
      *(int8x16_t *)(v77 + 16) = v27;
      *(_QWORD *)(v77 + 32) = 0xFFFE000000000008;
      goto LABEL_73;
    }
  }
}

uint64_t WTF::Vector<JSC::JSONPPathEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSONPPathEntry&>(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;

  result = WTF::Vector<JSC::JSONPPathEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_DWORD **)result;
  if (*(_QWORD *)result)
    *v6 += 2;
  v7 = v5 + 16 * v4;
  *(_QWORD *)v7 = v6;
  v8 = *(_DWORD *)(result + 8);
  *(_BYTE *)(v7 + 12) = *(_BYTE *)(result + 12);
  *(_DWORD *)(v7 + 8) = v8;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::JSONPPathEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::JSONPPathEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = v11;
      v20 = v5;
      do
      {
        v21 = *(WTF::StringImpl **)v20;
        *(_QWORD *)v20 = 0;
        *(_QWORD *)v19 = v21;
        LODWORD(v21) = *(_DWORD *)(v20 + 8);
        *(_BYTE *)(v19 + 12) = *(_BYTE *)(v20 + 12);
        *(_DWORD *)(v19 + 8) = (_DWORD)v21;
        JSC::UnlinkedFunctionExecutable::ClassElementDefinition::~ClassElementDefinition((WTF::StringImpl **)v20, v12, v13, v14, v15, v16, v17, v18);
        v20 = v22 + 16;
        v19 += 16;
      }
      while (v20 != v5 + 16 * v10);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::JSONPPathEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = v9;
        v18 = v7;
        do
        {
          v19 = *(WTF::StringImpl **)v18;
          *(_QWORD *)v18 = 0;
          *(_QWORD *)v17 = v19;
          LODWORD(v19) = *(_DWORD *)(v18 + 8);
          *(_BYTE *)(v17 + 12) = *(_BYTE *)(v18 + 12);
          *(_DWORD *)(v17 + 8) = (_DWORD)v19;
          JSC::UnlinkedFunctionExecutable::ClassElementDefinition::~ClassElementDefinition((WTF::StringImpl **)v18, v10, v11, v12, v13, v14, v15, v16);
          v18 = v20 + 16;
          v17 += 16;
        }
        while (v18 != v7 + 16 * v8);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t JSC::JSONPData::JSONPData(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  JSC::HandleSet *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  JSC::HandleSet *v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v8 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)result = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(result + 8) = v8;
  LODWORD(v8) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(result + 12) = v8;
  *(_QWORD *)(result + 16) = 0;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
    v10 = *(JSC::HandleSet **)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v11 = (_QWORD *)*((_QWORD *)v10 + 5);
    if (!v11)
    {
      v26 = result;
      v24 = v10;
      v25 = a2;
      JSC::HandleSet::grow(v10, a2, a3, a4, a5, a6, a7, a8);
      v10 = v24;
      a2 = v25;
      result = v26;
      v11 = (_QWORD *)*((_QWORD *)v24 + 5);
    }
    v12 = 0;
    *((_QWORD *)v10 + 5) = *v11;
    v11[2] = 0;
    v13 = v11 + 2;
    *v11 = 0;
    v11[1] = 0;
    *(_QWORD *)(result + 16) = v11 + 2;
    v14 = *(uint64_t **)(a2 + 16);
    if (v14)
      v12 = *v14;
    v15 = (unint64_t)(v13 - 2);
    v16 = *v13;
    v18 = (v12 & 0xFFFE000000000002) == 0 && v12 != 0;
    v19 = (v16 & 0xFFFE000000000002) == 0;
    if (!v16)
      v19 = 0;
    if (v19 != v18)
    {
      if ((v18 & 1) != 0)
      {
        v20 = *(unint64_t **)((v15 & 0xFFFFFFFFFFFFF000) + 0x10);
        v21 = v20[3];
        v20 += 3;
        *(_QWORD *)v15 = v21;
        *(v13 - 1) = (uint64_t)v20;
        *v20 = v15;
        *(_QWORD *)(v21 + 8) = v15;
      }
      else
      {
        v23 = *(_QWORD *)v15;
        v22 = (_QWORD *)*(v13 - 1);
        *v22 = *(_QWORD *)v15;
        *(_QWORD *)(v23 + 8) = v22;
        *(_QWORD *)v15 = 0;
        *(_QWORD *)(v15 + 8) = 0;
        v13 = *(uint64_t **)(result + 16);
      }
    }
    *v13 = v12;
  }
  return result;
}

unint64_t WTF::Vector<JSC::JSONPData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::JSONPData>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  JSC::HandleSet *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  JSC::HandleSet *v30;
  unint64_t v31;

  result = WTF::Vector<JSC::JSONPData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v11 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  v12 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)v11 = v12;
  LODWORD(v12) = *(_DWORD *)(result + 8);
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(v11 + 8) = v12;
  LODWORD(v12) = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(v11 + 12) = v12;
  *(_QWORD *)(v11 + 16) = 0;
  v13 = (_QWORD *)(v11 + 16);
  v14 = *(_QWORD *)(result + 16);
  if (v14)
  {
    v15 = *(JSC::HandleSet **)(((v14 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v16 = (_QWORD *)*((_QWORD *)v15 + 5);
    if (!v16)
    {
      v30 = v15;
      v31 = result;
      v29 = v13;
      JSC::HandleSet::grow(v15, v4, v5, v6, v7, v8, v9, v10);
      v13 = v29;
      v15 = v30;
      result = v31;
      v16 = (_QWORD *)*((_QWORD *)v30 + 5);
    }
    v17 = 0;
    *((_QWORD *)v15 + 5) = *v16;
    v16[2] = 0;
    v18 = v16 + 2;
    *v16 = 0;
    v16[1] = 0;
    *v13 = v16 + 2;
    v19 = *(uint64_t **)(result + 16);
    if (v19)
      v17 = *v19;
    v20 = (unint64_t)(v18 - 2);
    v21 = *v18;
    v23 = (v17 & 0xFFFE000000000002) == 0 && v17 != 0;
    v24 = (v21 & 0xFFFE000000000002) == 0;
    if (!v21)
      v24 = 0;
    if (v24 != v23)
    {
      if ((v23 & 1) != 0)
      {
        v25 = *(unint64_t **)((v20 & 0xFFFFFFFFFFFFF000) + 0x10);
        v26 = v25[3];
        v25 += 3;
        *(_QWORD *)v20 = v26;
        *(v18 - 1) = (uint64_t)v25;
        *v25 = v20;
        *(_QWORD *)(v26 + 8) = v20;
      }
      else
      {
        v28 = *(_QWORD *)v20;
        v27 = (_QWORD *)*(v18 - 1);
        *v27 = *(_QWORD *)v20;
        *(_QWORD *)(v28 + 8) = v27;
        *(_QWORD *)v20 = 0;
        *(_QWORD *)(v20 + 8) = 0;
        v18 = (uint64_t *)*v13;
      }
    }
    *v18 = v17;
  }
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::JSONPData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v7;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v7 = a3 - v5;
    WTF::Vector<JSC::JSONPData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v7;
  }
  else
  {
    WTF::Vector<JSC::JSONPData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::JSONPData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::JSONPData *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(_QWORD *)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 24 * v4;
      v9 = WTF::fastMalloc((WTF *)(24 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v7)
      {
        v17 = v9;
        v18 = 24 * v7;
        v19 = (JSC::JSONPData *)v6;
        do
        {
          JSC::JSONPData::JSONPData(v17, (uint64_t)v19, v11, v12, v13, v14, v15, v16);
          JSC::JSONPData::~JSONPData(v19, v20, v21, v22, v23, v24, v25, v26);
          v17 += 24;
          v19 = (JSC::JSONPData *)((char *)v19 + 24);
          v18 -= 24;
        }
        while (v18);
      }
      if (v6)
      {
        if (*(_QWORD *)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

uint64_t WTF::makeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,char>@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, size_t a4@<X3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t result;

  result = WTF::tryMakeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,char>((uint64_t)a6, a1, a2, a3, a4, a5);
  if (!*a6)
    __break(0xC471u);
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,char>(uint64_t result, _BYTE *a2, uint64_t a3, _BYTE *a4, size_t a5, char a6)
{
  _QWORD *v10;
  size_t v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  _BYTE *v15;
  _BYTE *v16;
  _DWORD *v17;

  v10 = (_QWORD *)result;
  if (a3)
  {
    v11 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
LABEL_21:
      __break(0xC471u);
      JUMPOUT(0x198B42C74);
    }
  }
  else
  {
    v11 = 0;
  }
  if (a5 >> 31)
    goto LABEL_21;
  v12 = a5 + 1;
  if (__OFADD__((_DWORD)a5, 1)
    || (v13 = (v11 + v12), __OFADD__((_DWORD)v11, v12))
    || (v13 & 0x80000000) != 0)
  {
    v14 = 0;
  }
  else
  {
    result = WTF::tryFastCompactMalloc((WTF *)(v13 + 20), &v17);
    v14 = v17;
    if (v17)
    {
      v15 = v17 + 5;
      *v17 = 2;
      v14[1] = v13;
      *((_QWORD *)v14 + 1) = v14 + 5;
      v14[4] = 4;
      if ((_DWORD)v11 == 1)
      {
        *v15 = *a2;
      }
      else if ((_DWORD)v11)
      {
        result = (uint64_t)memcpy(v14 + 5, a2, v11);
      }
      v16 = &v15[v11];
      if ((_DWORD)a5 == 1)
      {
        *v16 = *a4;
      }
      else if ((_DWORD)a5)
      {
        result = (uint64_t)memcpy(v16, a4, a5);
      }
      v16[a5] = a6;
    }
  }
  *v10 = v14;
  return result;
}

_BYTE *WTF::Vector<JSC::ParserState,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ParserState>(uint64_t a1, unint64_t a2)
{
  _BYTE *result;
  uint64_t v4;

  result = (_BYTE *)WTF::Vector<JSC::ParserState,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(*(unsigned int *)(a1 + 12) + 1), a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_BYTE *)(*(_QWORD *)a1 + v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<JSC::ParserState,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + v3 - (_QWORD)v5;
      if (v10 < 0x11)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 16;
        goto LABEL_30;
      }
      if (!HIDWORD(v10))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)v10);
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + v3 - (_QWORD)v5;
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x198B42E74);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x11)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    else
    {
      if (HIDWORD(v15))
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)v15);
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

uint64_t *WTF::Vector<JSC::Identifier,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<void (*)(OpaqueJSContext const*,OpaqueJSValue *),16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>@<X0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t result;

  result = WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((uint64_t)a6, a1, a2, a3, a4, a5);
  if (!*a6)
    __break(0xC471u);
  return result;
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>(uint64_t result, int8x16_t *a2, uint64_t a3, _WORD *a4, unint64_t a5, char a6)
{
  _QWORD *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  _DWORD *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int16 v25;
  _DWORD *v26;
  int8x16x2_t v27;
  int8x16x2_t v28;
  int8x16x2_t v29;

  v10 = (_QWORD *)result;
  if (a3)
  {
    v11 = a3 - 1;
    if ((unint64_t)(a3 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198B430A8);
    }
  }
  else
  {
    v11 = 0;
  }
  if (a5 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198B4307CLL);
  }
  v12 = a5 + 1;
  if (__OFADD__((_DWORD)a5, 1) || (v13 = v11 + v12, __OFADD__((_DWORD)v11, v12)) || v13 > 0x7FFFFFEF)
  {
    v14 = 0;
  }
  else
  {
    result = WTF::tryFastCompactMalloc((WTF *)(2 * (v11 + v12) + 20), &v26);
    v14 = v26;
    if (v26)
    {
      v15 = (char *)(v26 + 5);
      *v26 = 2;
      v14[1] = v13;
      *((_QWORD *)v14 + 1) = v14 + 5;
      v14[4] = 0;
      v16 = (char *)v14 + 2 * v11 + 20;
      if ((v11 & 0x7FFFFFC0) != 0)
      {
        v17 = &v15[2 * (v11 & 0x7FFFFFC0)];
        v18 = 0uLL;
        do
        {
          v27.val[0] = *a2;
          v19 = a2[1];
          v28.val[0] = a2[2];
          v20 = a2[3];
          a2 += 4;
          v21 = v20;
          v28.val[1] = 0uLL;
          v29.val[0] = v19;
          v27.val[1] = 0uLL;
          v22 = v15;
          vst2q_s8(v22, v27);
          v22 += 32;
          v29.val[1] = 0uLL;
          vst2q_s8(v22, v29);
          v23 = v15 + 64;
          vst2q_s8(v23, v28);
          v24 = v15 + 96;
          vst2q_s8(v24, *(int8x16x2_t *)(&v18 - 1));
          v15 += 128;
        }
        while (v15 != v17);
        v15 = v17;
      }
      while (v15 != v16)
      {
        v25 = a2->u8[0];
        a2 = (int8x16_t *)((char *)a2 + 1);
        *(_WORD *)v15 = v25;
        v15 += 2;
      }
      if ((_DWORD)a5 == 1)
      {
        *(_WORD *)v16 = *a4;
      }
      else if ((_DWORD)a5)
      {
        result = (uint64_t)memcpy((char *)v14 + 2 * v11 + 20, a4, 2 * a5);
      }
      *(_WORD *)&v16[2 * a5] = a6;
    }
  }
  *v10 = v14;
  return result;
}

double operationMathPow(double a1, long double a2)
{
  double v2;
  double v3;
  uint64_t v4;
  unsigned int v6;
  double v8;
  double v9;
  BOOL v10;

  v2 = fabs(a1);
  v3 = fabs(a2);
  v4 = 0x7FF0000000000000;
  if (v2 == 1.0 && v3 == INFINITY)
  {
    v4 = 0x7FF8000000000000;
    return *(double *)&v4;
  }
  if (a2 != 0.5)
  {
    if (a2 != -0.5)
    {
      v6 = (int)a2;
      if ((int)a2 > 0x3E8 || (double)(int)v6 != a2)
        return pow(a1, a2);
      if (!v6)
        return 1.0;
      v8 = 1.0;
      do
      {
        if ((v6 & 1) != 0)
          v9 = a1;
        else
          v9 = 1.0;
        v8 = v8 * v9;
        a1 = a1 * a1;
        v10 = v6 >= 2;
        v6 >>= 1;
      }
      while (v10);
      return v8;
    }
    if (a1 != 0.0)
    {
      if (v2 == INFINITY)
        return 0.0;
      else
        return 1.0 / sqrt(a1);
    }
    return *(double *)&v4;
  }
  v8 = 0.0;
  if (a1 == 0.0)
    return v8;
  v8 = INFINITY;
  if (v2 == INFINITY)
    return v8;
  return sqrt(a1);
}

uint64_t operationToInt32(double a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;

  v1 = (*(_QWORD *)&a1 >> 52) & 0x7FFLL;
  if ((v1 - 1023) > 0x53)
    return 0;
  v3 = *(_QWORD *)&a1 >> (51 - (*(_QWORD *)&a1 >> 52));
  if (v1 > 0x433)
    LODWORD(v3) = *(_QWORD *)&a1 << ((*(_QWORD *)&a1 >> 52) - 51);
  if (v1 >= 0x41F)
    v4 = v3;
  else
    v4 = (((1 << ((*(_QWORD *)&a1 >> 52) + 1)) - 1) & v3) + (1 << ((*(_QWORD *)&a1 >> 52) + 1));
  if (a1 >= 0.0)
    return v4;
  else
    return -v4;
}

uint64_t operationToInt32SensibleSlow(double a1)
{
  uint64_t v1;
  int v2;
  BOOL v4;
  uint64_t v5;
  unsigned int v6;

  v1 = (*(_QWORD *)&a1 >> 52) & 0x7FFLL;
  v2 = v1 - 1023;
  if ((v1 - 1023) > 0x53)
    return 0;
  v4 = v1 > 0x433;
  v5 = *(_QWORD *)&a1 << ((*(_QWORD *)&a1 >> 52) - 51);
  if (!v4)
    LODWORD(v5) = *(_QWORD *)&a1 >> (51 - (*(_QWORD *)&a1 >> 52));
  if (v2 == 31)
    v6 = v5 | 0x80000000;
  else
    v6 = v5;
  if (a1 >= 0.0)
    return v6;
  else
    return -v6;
}

double jsRound(double a1)
{
  double v1;
  BOOL v2;
  double v3;

  v1 = ceil(a1);
  v2 = v1 + -0.5 <= a1;
  v3 = 0.0;
  if (!v2)
    v3 = 1.0;
  return v1 - v3;
}

double JSC::Math::log1p(JSC::Math *this, double __x)
{
  if (__x != 0.0)
    return log1p(__x);
  return __x;
}

double log1pDouble(double __x)
{
  if (__x != 0.0)
    return log1p(__x);
  return __x;
}

float log1pFloat(float result)
{
  if (result != 0.0)
    return log1pf(result);
  return result;
}

double truncDouble(double a1)
{
  return trunc(a1);
}

float truncFloat(float a1)
{
  return truncf(a1);
}

double ceilDouble(double a1)
{
  return ceil(a1);
}

float ceilFloat(float a1)
{
  return ceilf(a1);
}

double floorDouble(double a1)
{
  return floor(a1);
}

float floorFloat(float a1)
{
  return floorf(a1);
}

double sqrtDouble(double a1)
{
  return sqrt(a1);
}

float sqrtFloat(float a1)
{
  return sqrtf(a1);
}

float roundFloat(float a1)
{
  float v1;
  BOOL v2;
  float v3;

  v1 = ceilf(a1);
  v2 = v1 + -0.5 <= a1;
  v3 = 0.0;
  if (!v2)
    v3 = 1.0;
  return v1 - v3;
}

void JSC::MathObject::finishCreation(JSC::MathObject *this, JSC::VM *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  char *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  WTF::AtomStringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __n128 v99;
  WTF::AtomStringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __n128 v119;
  WTF::AtomStringImpl *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::AtomStringImpl *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __n128 v138;
  WTF::StringImpl *v139;
  WTF::AtomStringImpl *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::AtomStringImpl *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __n128 v157;
  WTF::StringImpl *v158;
  WTF::AtomStringImpl *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::AtomStringImpl *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __n128 v176;
  WTF::StringImpl *v177;
  WTF::AtomStringImpl *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::AtomStringImpl *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __n128 v195;
  WTF::StringImpl *v196;
  WTF::AtomStringImpl *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::AtomStringImpl *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __n128 v214;
  WTF::StringImpl *v215;
  WTF::AtomStringImpl *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  WTF::AtomStringImpl *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  __n128 v233;
  WTF::StringImpl *v234;
  WTF::AtomStringImpl *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  WTF::AtomStringImpl *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  __n128 v252;
  WTF::StringImpl *v253;
  WTF::AtomStringImpl *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  WTF::StringImpl *v261;
  WTF::StringImpl *v262;
  WTF::AtomStringImpl *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  __n128 v271;
  WTF::StringImpl *v272;
  WTF::AtomStringImpl *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  WTF::StringImpl *v280;
  WTF::StringImpl *v281;
  WTF::AtomStringImpl *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  __n128 v290;
  WTF::StringImpl *v291;
  WTF::AtomStringImpl *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  WTF::StringImpl *v299;
  WTF::StringImpl *v300;
  WTF::AtomStringImpl *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  __n128 v309;
  WTF::StringImpl *v310;
  WTF::AtomStringImpl *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  WTF::StringImpl *v318;
  WTF::StringImpl *v319;
  WTF::AtomStringImpl *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  __n128 v328;
  WTF::StringImpl *v329;
  WTF::AtomStringImpl *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  WTF::StringImpl *v337;
  WTF::StringImpl *v338;
  WTF::AtomStringImpl *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  __n128 v347;
  WTF::StringImpl *v348;
  WTF::AtomStringImpl *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  WTF::StringImpl *v356;
  WTF::StringImpl *v357;
  WTF::AtomStringImpl *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  __n128 v366;
  WTF::StringImpl *v367;
  WTF::AtomStringImpl *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  WTF::StringImpl *v375;
  WTF::StringImpl *v376;
  WTF::AtomStringImpl *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  __n128 v385;
  WTF::StringImpl *v386;
  WTF::AtomStringImpl *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  WTF::StringImpl *v394;
  WTF::StringImpl *v395;
  WTF::AtomStringImpl *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  __n128 v404;
  WTF::StringImpl *v405;
  WTF::AtomStringImpl *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  WTF::StringImpl *v413;
  WTF::StringImpl *v414;
  WTF::AtomStringImpl *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  __n128 v423;
  WTF::StringImpl *v424;
  WTF::AtomStringImpl *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  WTF::StringImpl *v432;
  WTF::StringImpl *v433;
  WTF::AtomStringImpl *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  __n128 v442;
  WTF::StringImpl *v443;
  WTF::AtomStringImpl *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  WTF::StringImpl *v451;
  WTF::StringImpl *v452;
  WTF::AtomStringImpl *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  __n128 v461;
  WTF::StringImpl *v462;
  WTF::AtomStringImpl *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  WTF::StringImpl *v470;
  WTF::StringImpl *v471;
  WTF::AtomStringImpl *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  __n128 v480;
  WTF::StringImpl *v481;
  WTF::AtomStringImpl *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  WTF::StringImpl *v489;
  WTF::StringImpl *v490;
  WTF::AtomStringImpl *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  __n128 v499;
  WTF::StringImpl *v500;
  WTF::AtomStringImpl *v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  WTF::StringImpl *v508;
  WTF::StringImpl *v509;
  WTF::AtomStringImpl *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  __n128 v518;
  WTF::StringImpl *v519;
  WTF::AtomStringImpl *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  WTF::StringImpl *v527;
  WTF::StringImpl *v528;
  WTF::AtomStringImpl *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  __n128 v537;
  WTF::StringImpl *v538;
  WTF::AtomStringImpl *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  WTF::StringImpl *v546;
  WTF::StringImpl *v547;
  WTF::AtomStringImpl *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  __n128 v556;
  WTF::StringImpl *v557;
  WTF::AtomStringImpl *v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  WTF::StringImpl *v565;
  WTF::StringImpl *v566;
  WTF::AtomStringImpl *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  __n128 v575;
  WTF::StringImpl *v576;
  WTF::AtomStringImpl *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  WTF::StringImpl *v584;
  WTF::StringImpl *v585;
  WTF::AtomStringImpl *v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  __n128 v594;
  WTF::StringImpl *v595;
  WTF::AtomStringImpl *v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  WTF::StringImpl *v603;
  WTF::StringImpl *v604;
  WTF::AtomStringImpl *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  __n128 v613;
  WTF::StringImpl *v614;
  WTF::AtomStringImpl *v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  WTF::StringImpl *v622;
  WTF::StringImpl *v623;
  WTF::AtomStringImpl *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  __n128 v632;
  WTF::StringImpl *v633;
  WTF::AtomStringImpl *v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  WTF::StringImpl *v641;
  WTF::StringImpl *v642;
  WTF::AtomStringImpl *v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  __n128 v651;
  WTF::StringImpl *v652;
  WTF::AtomStringImpl *v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  WTF::StringImpl *v660;
  WTF::StringImpl *v661;
  WTF::AtomStringImpl *v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  __n128 v670;
  WTF::StringImpl *v671;
  WTF::AtomStringImpl *v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  WTF::StringImpl *v679;
  WTF::StringImpl *v680;
  WTF::AtomStringImpl *v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  __n128 v689;
  WTF::StringImpl *v690;
  WTF::AtomStringImpl *v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  WTF::StringImpl *v698;
  WTF::StringImpl *v699;
  WTF::AtomStringImpl *v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  __n128 v708;
  WTF::StringImpl *v709;
  WTF::AtomStringImpl *v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  WTF::StringImpl *v717;
  WTF::StringImpl *v718;
  WTF::AtomStringImpl *v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  __n128 v727;
  WTF::StringImpl *v728;
  WTF::AtomStringImpl *v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  WTF::StringImpl *v736;
  WTF::StringImpl *v737;
  WTF::AtomStringImpl *v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  __n128 v746;
  WTF::StringImpl *v747;
  WTF::AtomStringImpl *v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  WTF::StringImpl *v755;
  WTF::StringImpl *v756;
  WTF::AtomStringImpl *v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  __n128 v765;
  WTF::StringImpl *v766;
  WTF::AtomStringImpl *v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  WTF::StringImpl *v774;
  WTF::StringImpl *v775;
  WTF::AtomStringImpl *v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  __n128 v784;
  WTF::StringImpl *v785;
  WTF::AtomStringImpl *v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  unint64_t v793;
  void *v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  unint64_t v801;
  void *v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  unint64_t v809;
  void *v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  unint64_t v817;
  void *v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  unint64_t v825;
  void *v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  unint64_t v833;
  void *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  unint64_t v841;
  void *v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  unint64_t v849;
  void *v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  unint64_t v857;
  void *v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  unint64_t v865;
  void *v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  unint64_t v873;
  void *v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  unint64_t v881;
  void *v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  unint64_t v889;
  void *v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  unint64_t v897;
  void *v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  unint64_t v905;
  void *v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  unint64_t v913;
  void *v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  unint64_t v921;
  void *v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  unint64_t v929;
  void *v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  unint64_t v937;
  void *v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  unint64_t v945;
  void *v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  unint64_t v953;
  void *v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  unint64_t v961;
  void *v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  unint64_t v969;
  void *v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  unint64_t v977;
  void *v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  unint64_t v985;
  void *v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  unint64_t v993;
  void *v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  unint64_t v1001;
  void *v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  unint64_t v1009;
  void *v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  unint64_t v1017;
  void *v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  unint64_t v1025;
  void *v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  unint64_t v1033;
  void *v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  unint64_t v1041;
  void *v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  unint64_t v1049;
  void *v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  unint64_t v1057;
  void *v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  unint64_t v1065;
  void *v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  unint64_t v1073;
  void *v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  unint64_t v1081;
  void *v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  unint64_t v1089;
  void *v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  unint64_t v1097;
  void *v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  unint64_t v1105;
  void *v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  unint64_t v1113;
  void *v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  unint64_t v1121;
  void *v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  unint64_t v1129;
  void *v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  unint64_t v1137;
  void *v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  unint64_t v1145;
  void *v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  unint64_t v1153;
  void *v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  unint64_t v1161;
  void *v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t v1168;
  unint64_t v1169;
  void *v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  unint64_t v1177;
  void *v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  unint64_t v1185;
  void *v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  unint64_t v1193;
  void *v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  unint64_t v1201;
  void *v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  unint64_t v1209;
  void *v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  unint64_t v1217;
  void *v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  unint64_t v1225;
  void *v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  unint64_t v1233;
  void *v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  unint64_t v1241;
  void *v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  unint64_t v1249;
  void *v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  unint64_t v1257;
  void *v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  unint64_t v1265;
  void *v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  unint64_t v1273;
  void *v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  unint64_t v1281;
  void *v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  unint64_t v1289;
  void *v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  unint64_t v1297;
  void *v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  unint64_t v1305;
  void *v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  unint64_t v1313;
  void *v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  unint64_t v1321;
  void *v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  unint64_t v1329;
  void *v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  unint64_t v1337;
  void *v1338;
  uint64_t v1339;
  uint64_t v1340;
  uint64_t v1341;
  uint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  unint64_t v1345;
  void *v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  unint64_t v1353;
  void *v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  unint64_t v1361;
  void *v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  unint64_t v1369;
  void *v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  unint64_t v1377;
  void *v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  uint64_t v1382;
  uint64_t v1383;
  uint64_t v1384;
  unint64_t v1385;
  void *v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  unint64_t v1393;
  void *v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  unint64_t v1401;
  void *v1402;
  uint64_t v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  unint64_t v1409;
  void *v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  unint64_t v1417;
  void *v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  char v1425;
  WTF::StringImpl *v1426;

  v12 = (char *)a2 + 41952;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  if (*((_BYTE *)a2 + 44265))
  {
    v13 = *((_QWORD *)a2 + 5346);
    v14 = *(WTF::StringImpl **)(v13 + 8);
    if ((v14 & 1) != 0)
      v15 = 0;
    else
      v15 = *(_DWORD **)(v13 + 8);
    *v15 += 2;
  }
  else
  {
    v1425 = 69;
    WTF::AtomStringImpl::add((uint64_t)&v1425, 1uLL, a4, a5, a6, a7, a8, &v1426);
    v14 = v1426;
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v14, 0x4007BF0A8B145769, 14, a6, a7, a8, a9);
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v793, v794, v795, v796, v797, v798, v799, v800);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"LN2", 3uLL, v18, v19, v20, v21, v22, &v1426);
  v23 = v1426;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v1426, 0x3FE82E42FEFA39EFLL, 14, v24, v25, v26, v27);
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v801, v802, v803, v804, v805, v806, v807, v808);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"LN10", 4uLL, v30, v31, v32, v33, v34, &v1426);
  v35 = v1426;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v1426, 0x40046BB1BBB55516, 14, v36, v37, v38, v39);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v809, v810, v811, v812, v813, v814, v815, v816);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"LOG2E", 5uLL, v42, v43, v44, v45, v46, &v1426);
  v47 = v1426;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v1426, 0x3FF91547652B82FELL, 14, v48, v49, v50, v51);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v817, v818, v819, v820, v821, v822, v823, v824);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"LOG10E", 6uLL, v54, v55, v56, v57, v58, &v1426);
  v59 = v1426;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v1426, 0x3FDDCB7B1526E50ELL, 14, v60, v61, v62, v63);
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v825, v826, v827, v828, v829, v830, v831, v832);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"PI", 2uLL, v66, v67, v68, v69, v70, &v1426);
  v71 = v1426;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v1426, 0x400B21FB54442D18, 14, v72, v73, v74, v75);
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v833, v834, v835, v836, v837, v838, v839, v840);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"SQRT1_2", 7uLL, v78, v79, v80, v81, v82, &v1426);
  v83 = v1426;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v1426, 0x3FE8A09E667F3BCDLL, 14, v84, v85, v86, v87);
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
    {
      WTF::StringImpl::~StringImpl(v83, v88, v89, v90, v91, v92, v93, v94);
      WTF::fastFree(v841, v842, v843, v844, v845, v846, v847, v848);
    }
    else
    {
      *(_DWORD *)v83 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"SQRT2", 5uLL, v90, v91, v92, v93, v94, &v1426);
  v95 = v1426;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v1426, 0x3FF8A09E667F3BCDLL, 14, v96, v97, v98, v99);
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v100, v101, v102, v103, v104, v105, v106);
      WTF::fastFree(v849, v850, v851, v852, v853, v854, v855, v856);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v107 = *(_QWORD *)(*(_QWORD *)v12 + 2776);
  v108 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v108 = 0x400000002;
  *(_QWORD *)(v108 + 8) = "Math";
  *(_DWORD *)(v108 + 16) = 4;
  v1426 = (WTF::StringImpl *)v108;
  v115 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v1426, v109, v110, v111, v112, v113, v114);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v107, v115, 6, v116, v117, v118, v119);
  v127 = v1426;
  v1426 = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
    {
      WTF::StringImpl::~StringImpl(v127, v120, v121, v122, v123, v124, v125, v126);
      WTF::fastFree(v857, v858, v859, v860, v861, v862, v863, v864);
    }
    else
    {
      *(_DWORD *)v127 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"abs", 3uLL, v122, v123, v124, v125, v126, &v1426);
  v128 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v129 = v1426;
LABEL_38:
    *(_DWORD *)v129 += 2;
    goto LABEL_39;
  }
  v129 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v129)
    goto LABEL_38;
LABEL_39:
  v1426 = v129;
  v137 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncAbs, 0, 1, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v139 = v1426;
  v1426 = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
    {
      WTF::StringImpl::~StringImpl(v139, v130, v131, v132, v133, v134, v135, v136);
      WTF::fastFree(v865, v866, v867, v868, v869, v870, v871, v872);
    }
    else
    {
      *(_DWORD *)v139 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v128, v137, 4, v134, v135, v136, v138);
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
    {
      WTF::StringImpl::~StringImpl(v128, v140, v141, v142, v143, v144, v145, v146);
      WTF::fastFree(v873, v874, v875, v876, v877, v878, v879, v880);
    }
    else
    {
      *(_DWORD *)v128 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"acos", 4uLL, v142, v143, v144, v145, v146, &v1426);
  v147 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v148 = v1426;
LABEL_48:
    *(_DWORD *)v148 += 2;
    goto LABEL_49;
  }
  v148 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v148)
    goto LABEL_48;
LABEL_49:
  v1426 = v148;
  v156 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncACos, 0, 2, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v158 = v1426;
  v1426 = 0;
  if (v158)
  {
    if (*(_DWORD *)v158 == 2)
    {
      WTF::StringImpl::~StringImpl(v158, v149, v150, v151, v152, v153, v154, v155);
      WTF::fastFree(v881, v882, v883, v884, v885, v886, v887, v888);
    }
    else
    {
      *(_DWORD *)v158 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v147, v156, 4, v153, v154, v155, v157);
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
    {
      WTF::StringImpl::~StringImpl(v147, v159, v160, v161, v162, v163, v164, v165);
      WTF::fastFree(v889, v890, v891, v892, v893, v894, v895, v896);
    }
    else
    {
      *(_DWORD *)v147 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"asin", 4uLL, v161, v162, v163, v164, v165, &v1426);
  v166 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v167 = v1426;
LABEL_58:
    *(_DWORD *)v167 += 2;
    goto LABEL_59;
  }
  v167 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v167)
    goto LABEL_58;
LABEL_59:
  v1426 = v167;
  v175 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncASin, 0, 3, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v177 = v1426;
  v1426 = 0;
  if (v177)
  {
    if (*(_DWORD *)v177 == 2)
    {
      WTF::StringImpl::~StringImpl(v177, v168, v169, v170, v171, v172, v173, v174);
      WTF::fastFree(v897, v898, v899, v900, v901, v902, v903, v904);
    }
    else
    {
      *(_DWORD *)v177 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v166, v175, 4, v172, v173, v174, v176);
  if (v166)
  {
    if (*(_DWORD *)v166 == 2)
    {
      WTF::StringImpl::~StringImpl(v166, v178, v179, v180, v181, v182, v183, v184);
      WTF::fastFree(v905, v906, v907, v908, v909, v910, v911, v912);
    }
    else
    {
      *(_DWORD *)v166 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"atan", 4uLL, v180, v181, v182, v183, v184, &v1426);
  v185 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v186 = v1426;
LABEL_68:
    *(_DWORD *)v186 += 2;
    goto LABEL_69;
  }
  v186 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v186)
    goto LABEL_68;
LABEL_69:
  v1426 = v186;
  v194 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncATan, 0, 4, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v196 = v1426;
  v1426 = 0;
  if (v196)
  {
    if (*(_DWORD *)v196 == 2)
    {
      WTF::StringImpl::~StringImpl(v196, v187, v188, v189, v190, v191, v192, v193);
      WTF::fastFree(v913, v914, v915, v916, v917, v918, v919, v920);
    }
    else
    {
      *(_DWORD *)v196 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v185, v194, 4, v191, v192, v193, v195);
  if (v185)
  {
    if (*(_DWORD *)v185 == 2)
    {
      WTF::StringImpl::~StringImpl(v185, v197, v198, v199, v200, v201, v202, v203);
      WTF::fastFree(v921, v922, v923, v924, v925, v926, v927, v928);
    }
    else
    {
      *(_DWORD *)v185 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"acosh", 5uLL, v199, v200, v201, v202, v203, &v1426);
  v204 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v205 = v1426;
LABEL_78:
    *(_DWORD *)v205 += 2;
    goto LABEL_79;
  }
  v205 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v205)
    goto LABEL_78;
LABEL_79:
  v1426 = v205;
  v213 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncACosh, 0, 5, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v215 = v1426;
  v1426 = 0;
  if (v215)
  {
    if (*(_DWORD *)v215 == 2)
    {
      WTF::StringImpl::~StringImpl(v215, v206, v207, v208, v209, v210, v211, v212);
      WTF::fastFree(v929, v930, v931, v932, v933, v934, v935, v936);
    }
    else
    {
      *(_DWORD *)v215 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v204, v213, 4, v210, v211, v212, v214);
  if (v204)
  {
    if (*(_DWORD *)v204 == 2)
    {
      WTF::StringImpl::~StringImpl(v204, v216, v217, v218, v219, v220, v221, v222);
      WTF::fastFree(v937, v938, v939, v940, v941, v942, v943, v944);
    }
    else
    {
      *(_DWORD *)v204 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"asinh", 5uLL, v218, v219, v220, v221, v222, &v1426);
  v223 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v224 = v1426;
LABEL_88:
    *(_DWORD *)v224 += 2;
    goto LABEL_89;
  }
  v224 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v224)
    goto LABEL_88;
LABEL_89:
  v1426 = v224;
  v232 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncASinh, 0, 6, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v234 = v1426;
  v1426 = 0;
  if (v234)
  {
    if (*(_DWORD *)v234 == 2)
    {
      WTF::StringImpl::~StringImpl(v234, v225, v226, v227, v228, v229, v230, v231);
      WTF::fastFree(v945, v946, v947, v948, v949, v950, v951, v952);
    }
    else
    {
      *(_DWORD *)v234 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v223, v232, 4, v229, v230, v231, v233);
  if (v223)
  {
    if (*(_DWORD *)v223 == 2)
    {
      WTF::StringImpl::~StringImpl(v223, v235, v236, v237, v238, v239, v240, v241);
      WTF::fastFree(v953, v954, v955, v956, v957, v958, v959, v960);
    }
    else
    {
      *(_DWORD *)v223 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"atanh", 5uLL, v237, v238, v239, v240, v241, &v1426);
  v242 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v243 = v1426;
LABEL_98:
    *(_DWORD *)v243 += 2;
    goto LABEL_99;
  }
  v243 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v243)
    goto LABEL_98;
LABEL_99:
  v1426 = v243;
  v251 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncATanh, 0, 7, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v253 = v1426;
  v1426 = 0;
  if (v253)
  {
    if (*(_DWORD *)v253 == 2)
    {
      WTF::StringImpl::~StringImpl(v253, v244, v245, v246, v247, v248, v249, v250);
      WTF::fastFree(v961, v962, v963, v964, v965, v966, v967, v968);
    }
    else
    {
      *(_DWORD *)v253 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v242, v251, 4, v248, v249, v250, v252);
  if (v242)
  {
    if (*(_DWORD *)v242 == 2)
    {
      WTF::StringImpl::~StringImpl(v242, v254, v255, v256, v257, v258, v259, v260);
      WTF::fastFree(v969, v970, v971, v972, v973, v974, v975, v976);
    }
    else
    {
      *(_DWORD *)v242 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"atan2", 5uLL, v256, v257, v258, v259, v260, &v1426);
  v261 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v262 = v1426;
LABEL_108:
    *(_DWORD *)v262 += 2;
    goto LABEL_109;
  }
  v262 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v262)
    goto LABEL_108;
LABEL_109:
  v1426 = v262;
  v270 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 2, &v1426, (uint64_t)JSC::mathProtoFuncATan2, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v272 = v1426;
  v1426 = 0;
  if (v272)
  {
    if (*(_DWORD *)v272 == 2)
    {
      WTF::StringImpl::~StringImpl(v272, v263, v264, v265, v266, v267, v268, v269);
      WTF::fastFree(v977, v978, v979, v980, v981, v982, v983, v984);
    }
    else
    {
      *(_DWORD *)v272 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v261, v270, 4, v267, v268, v269, v271);
  if (v261)
  {
    if (*(_DWORD *)v261 == 2)
    {
      WTF::StringImpl::~StringImpl(v261, v273, v274, v275, v276, v277, v278, v279);
      WTF::fastFree(v985, v986, v987, v988, v989, v990, v991, v992);
    }
    else
    {
      *(_DWORD *)v261 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"cbrt", 4uLL, v275, v276, v277, v278, v279, &v1426);
  v280 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v281 = v1426;
LABEL_118:
    *(_DWORD *)v281 += 2;
    goto LABEL_119;
  }
  v281 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v281)
    goto LABEL_118;
LABEL_119:
  v1426 = v281;
  v289 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncCbrt, 0, 12, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v291 = v1426;
  v1426 = 0;
  if (v291)
  {
    if (*(_DWORD *)v291 == 2)
    {
      WTF::StringImpl::~StringImpl(v291, v282, v283, v284, v285, v286, v287, v288);
      WTF::fastFree(v993, v994, v995, v996, v997, v998, v999, v1000);
    }
    else
    {
      *(_DWORD *)v291 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v280, v289, 4, v286, v287, v288, v290);
  if (v280)
  {
    if (*(_DWORD *)v280 == 2)
    {
      WTF::StringImpl::~StringImpl(v280, v292, v293, v294, v295, v296, v297, v298);
      WTF::fastFree(v1001, v1002, v1003, v1004, v1005, v1006, v1007, v1008);
    }
    else
    {
      *(_DWORD *)v280 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"ceil", 4uLL, v294, v295, v296, v297, v298, &v1426);
  v299 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v300 = v1426;
LABEL_128:
    *(_DWORD *)v300 += 2;
    goto LABEL_129;
  }
  v300 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v300)
    goto LABEL_128;
LABEL_129:
  v1426 = v300;
  v308 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncCeil, 0, 54, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v310 = v1426;
  v1426 = 0;
  if (v310)
  {
    if (*(_DWORD *)v310 == 2)
    {
      WTF::StringImpl::~StringImpl(v310, v301, v302, v303, v304, v305, v306, v307);
      WTF::fastFree(v1009, v1010, v1011, v1012, v1013, v1014, v1015, v1016);
    }
    else
    {
      *(_DWORD *)v310 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v299, v308, 4, v305, v306, v307, v309);
  if (v299)
  {
    if (*(_DWORD *)v299 == 2)
    {
      WTF::StringImpl::~StringImpl(v299, v311, v312, v313, v314, v315, v316, v317);
      WTF::fastFree(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024);
    }
    else
    {
      *(_DWORD *)v299 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"clz32", 5uLL, v313, v314, v315, v316, v317, &v1426);
  v318 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v319 = v1426;
LABEL_138:
    *(_DWORD *)v319 += 2;
    goto LABEL_139;
  }
  v319 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v319)
    goto LABEL_138;
LABEL_139:
  v1426 = v319;
  v327 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncClz32, 0, 13, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v329 = v1426;
  v1426 = 0;
  if (v329)
  {
    if (*(_DWORD *)v329 == 2)
    {
      WTF::StringImpl::~StringImpl(v329, v320, v321, v322, v323, v324, v325, v326);
      WTF::fastFree(v1025, v1026, v1027, v1028, v1029, v1030, v1031, v1032);
    }
    else
    {
      *(_DWORD *)v329 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v318, v327, 4, v324, v325, v326, v328);
  if (v318)
  {
    if (*(_DWORD *)v318 == 2)
    {
      WTF::StringImpl::~StringImpl(v318, v330, v331, v332, v333, v334, v335, v336);
      WTF::fastFree(v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040);
    }
    else
    {
      *(_DWORD *)v318 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"cos", 3uLL, v332, v333, v334, v335, v336, &v1426);
  v337 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v338 = v1426;
LABEL_148:
    *(_DWORD *)v338 += 2;
    goto LABEL_149;
  }
  v338 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v338)
    goto LABEL_148;
LABEL_149:
  v1426 = v338;
  v346 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncCos, 0, 14, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v348 = v1426;
  v1426 = 0;
  if (v348)
  {
    if (*(_DWORD *)v348 == 2)
    {
      WTF::StringImpl::~StringImpl(v348, v339, v340, v341, v342, v343, v344, v345);
      WTF::fastFree(v1041, v1042, v1043, v1044, v1045, v1046, v1047, v1048);
    }
    else
    {
      *(_DWORD *)v348 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v337, v346, 4, v343, v344, v345, v347);
  if (v337)
  {
    if (*(_DWORD *)v337 == 2)
    {
      WTF::StringImpl::~StringImpl(v337, v349, v350, v351, v352, v353, v354, v355);
      WTF::fastFree(v1049, v1050, v1051, v1052, v1053, v1054, v1055, v1056);
    }
    else
    {
      *(_DWORD *)v337 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"cosh", 4uLL, v351, v352, v353, v354, v355, &v1426);
  v356 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v357 = v1426;
LABEL_158:
    *(_DWORD *)v357 += 2;
    goto LABEL_159;
  }
  v357 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v357)
    goto LABEL_158;
LABEL_159:
  v1426 = v357;
  v365 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncCosh, 0, 16, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v367 = v1426;
  v1426 = 0;
  if (v367)
  {
    if (*(_DWORD *)v367 == 2)
    {
      WTF::StringImpl::~StringImpl(v367, v358, v359, v360, v361, v362, v363, v364);
      WTF::fastFree(v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064);
    }
    else
    {
      *(_DWORD *)v367 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v356, v365, 4, v362, v363, v364, v366);
  if (v356)
  {
    if (*(_DWORD *)v356 == 2)
    {
      WTF::StringImpl::~StringImpl(v356, v368, v369, v370, v371, v372, v373, v374);
      WTF::fastFree(v1065, v1066, v1067, v1068, v1069, v1070, v1071, v1072);
    }
    else
    {
      *(_DWORD *)v356 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"exp", 3uLL, v370, v371, v372, v373, v374, &v1426);
  v375 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v376 = v1426;
LABEL_168:
    *(_DWORD *)v376 += 2;
    goto LABEL_169;
  }
  v376 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v376)
    goto LABEL_168;
LABEL_169:
  v1426 = v376;
  v384 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncExp, 0, 56, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v386 = v1426;
  v1426 = 0;
  if (v386)
  {
    if (*(_DWORD *)v386 == 2)
    {
      WTF::StringImpl::~StringImpl(v386, v377, v378, v379, v380, v381, v382, v383);
      WTF::fastFree(v1073, v1074, v1075, v1076, v1077, v1078, v1079, v1080);
    }
    else
    {
      *(_DWORD *)v386 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v375, v384, 4, v381, v382, v383, v385);
  if (v375)
  {
    if (*(_DWORD *)v375 == 2)
    {
      WTF::StringImpl::~StringImpl(v375, v387, v388, v389, v390, v391, v392, v393);
      WTF::fastFree(v1081, v1082, v1083, v1084, v1085, v1086, v1087, v1088);
    }
    else
    {
      *(_DWORD *)v375 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"expm1", 5uLL, v389, v390, v391, v392, v393, &v1426);
  v394 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v395 = v1426;
LABEL_178:
    *(_DWORD *)v395 += 2;
    goto LABEL_179;
  }
  v395 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v395)
    goto LABEL_178;
LABEL_179:
  v1426 = v395;
  v403 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncExpm1, 0, 57, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v405 = v1426;
  v1426 = 0;
  if (v405)
  {
    if (*(_DWORD *)v405 == 2)
    {
      WTF::StringImpl::~StringImpl(v405, v396, v397, v398, v399, v400, v401, v402);
      WTF::fastFree(v1089, v1090, v1091, v1092, v1093, v1094, v1095, v1096);
    }
    else
    {
      *(_DWORD *)v405 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v394, v403, 4, v400, v401, v402, v404);
  if (v394)
  {
    if (*(_DWORD *)v394 == 2)
    {
      WTF::StringImpl::~StringImpl(v394, v406, v407, v408, v409, v410, v411, v412);
      WTF::fastFree(v1097, v1098, v1099, v1100, v1101, v1102, v1103, v1104);
    }
    else
    {
      *(_DWORD *)v394 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"floor", 5uLL, v408, v409, v410, v411, v412, &v1426);
  v413 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v414 = v1426;
LABEL_188:
    *(_DWORD *)v414 += 2;
    goto LABEL_189;
  }
  v414 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v414)
    goto LABEL_188;
LABEL_189:
  v1426 = v414;
  v422 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncFloor, 0, 53, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v424 = v1426;
  v1426 = 0;
  if (v424)
  {
    if (*(_DWORD *)v424 == 2)
    {
      WTF::StringImpl::~StringImpl(v424, v415, v416, v417, v418, v419, v420, v421);
      WTF::fastFree(v1105, v1106, v1107, v1108, v1109, v1110, v1111, v1112);
    }
    else
    {
      *(_DWORD *)v424 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v413, v422, 4, v419, v420, v421, v423);
  if (v413)
  {
    if (*(_DWORD *)v413 == 2)
    {
      WTF::StringImpl::~StringImpl(v413, v425, v426, v427, v428, v429, v430, v431);
      WTF::fastFree(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120);
    }
    else
    {
      *(_DWORD *)v413 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"fround", 6uLL, v427, v428, v429, v430, v431, &v1426);
  v432 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v433 = v1426;
LABEL_198:
    *(_DWORD *)v433 += 2;
    goto LABEL_199;
  }
  v433 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v433)
    goto LABEL_198;
LABEL_199:
  v1426 = v433;
  v441 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncFround, 0, 93, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v443 = v1426;
  v1426 = 0;
  if (v443)
  {
    if (*(_DWORD *)v443 == 2)
    {
      WTF::StringImpl::~StringImpl(v443, v434, v435, v436, v437, v438, v439, v440);
      WTF::fastFree(v1121, v1122, v1123, v1124, v1125, v1126, v1127, v1128);
    }
    else
    {
      *(_DWORD *)v443 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v432, v441, 4, v438, v439, v440, v442);
  if (v432)
  {
    if (*(_DWORD *)v432 == 2)
    {
      WTF::StringImpl::~StringImpl(v432, v444, v445, v446, v447, v448, v449, v450);
      WTF::fastFree(v1129, v1130, v1131, v1132, v1133, v1134, v1135, v1136);
    }
    else
    {
      *(_DWORD *)v432 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"hypot", 5uLL, v446, v447, v448, v449, v450, &v1426);
  v451 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v452 = v1426;
LABEL_208:
    *(_DWORD *)v452 += 2;
    goto LABEL_209;
  }
  v452 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v452)
    goto LABEL_208;
LABEL_209:
  v1426 = v452;
  v460 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 2, &v1426, (uint64_t)JSC::mathProtoFuncHypot, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v462 = v1426;
  v1426 = 0;
  if (v462)
  {
    if (*(_DWORD *)v462 == 2)
    {
      WTF::StringImpl::~StringImpl(v462, v453, v454, v455, v456, v457, v458, v459);
      WTF::fastFree(v1137, v1138, v1139, v1140, v1141, v1142, v1143, v1144);
    }
    else
    {
      *(_DWORD *)v462 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v451, v460, 4, v457, v458, v459, v461);
  if (v451)
  {
    if (*(_DWORD *)v451 == 2)
    {
      WTF::StringImpl::~StringImpl(v451, v463, v464, v465, v466, v467, v468, v469);
      WTF::fastFree(v1145, v1146, v1147, v1148, v1149, v1150, v1151, v1152);
    }
    else
    {
      *(_DWORD *)v451 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"log", 3uLL, v465, v466, v467, v468, v469, &v1426);
  v470 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v471 = v1426;
LABEL_218:
    *(_DWORD *)v471 += 2;
    goto LABEL_219;
  }
  v471 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v471)
    goto LABEL_218;
LABEL_219:
  v1426 = v471;
  v479 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncLog, 0, 58, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v481 = v1426;
  v1426 = 0;
  if (v481)
  {
    if (*(_DWORD *)v481 == 2)
    {
      WTF::StringImpl::~StringImpl(v481, v472, v473, v474, v475, v476, v477, v478);
      WTF::fastFree(v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160);
    }
    else
    {
      *(_DWORD *)v481 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v470, v479, 4, v476, v477, v478, v480);
  if (v470)
  {
    if (*(_DWORD *)v470 == 2)
    {
      WTF::StringImpl::~StringImpl(v470, v482, v483, v484, v485, v486, v487, v488);
      WTF::fastFree(v1161, v1162, v1163, v1164, v1165, v1166, v1167, v1168);
    }
    else
    {
      *(_DWORD *)v470 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"log10", 5uLL, v484, v485, v486, v487, v488, &v1426);
  v489 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v490 = v1426;
LABEL_228:
    *(_DWORD *)v490 += 2;
    goto LABEL_229;
  }
  v490 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v490)
    goto LABEL_228;
LABEL_229:
  v1426 = v490;
  v498 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncLog10, 0, 59, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v500 = v1426;
  v1426 = 0;
  if (v500)
  {
    if (*(_DWORD *)v500 == 2)
    {
      WTF::StringImpl::~StringImpl(v500, v491, v492, v493, v494, v495, v496, v497);
      WTF::fastFree(v1169, v1170, v1171, v1172, v1173, v1174, v1175, v1176);
    }
    else
    {
      *(_DWORD *)v500 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v489, v498, 4, v495, v496, v497, v499);
  if (v489)
  {
    if (*(_DWORD *)v489 == 2)
    {
      WTF::StringImpl::~StringImpl(v489, v501, v502, v503, v504, v505, v506, v507);
      WTF::fastFree(v1177, v1178, v1179, v1180, v1181, v1182, v1183, v1184);
    }
    else
    {
      *(_DWORD *)v489 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"log1p", 5uLL, v503, v504, v505, v506, v507, &v1426);
  v508 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v509 = v1426;
LABEL_238:
    *(_DWORD *)v509 += 2;
    goto LABEL_239;
  }
  v509 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v509)
    goto LABEL_238;
LABEL_239:
  v1426 = v509;
  v517 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncLog1p, 0, 60, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v519 = v1426;
  v1426 = 0;
  if (v519)
  {
    if (*(_DWORD *)v519 == 2)
    {
      WTF::StringImpl::~StringImpl(v519, v510, v511, v512, v513, v514, v515, v516);
      WTF::fastFree(v1185, v1186, v1187, v1188, v1189, v1190, v1191, v1192);
    }
    else
    {
      *(_DWORD *)v519 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v508, v517, 4, v514, v515, v516, v518);
  if (v508)
  {
    if (*(_DWORD *)v508 == 2)
    {
      WTF::StringImpl::~StringImpl(v508, v520, v521, v522, v523, v524, v525, v526);
      WTF::fastFree(v1193, v1194, v1195, v1196, v1197, v1198, v1199, v1200);
    }
    else
    {
      *(_DWORD *)v508 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"log2", 4uLL, v522, v523, v524, v525, v526, &v1426);
  v527 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v528 = v1426;
LABEL_248:
    *(_DWORD *)v528 += 2;
    goto LABEL_249;
  }
  v528 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v528)
    goto LABEL_248;
LABEL_249:
  v1426 = v528;
  v536 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncLog2, 0, 61, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v538 = v1426;
  v1426 = 0;
  if (v538)
  {
    if (*(_DWORD *)v538 == 2)
    {
      WTF::StringImpl::~StringImpl(v538, v529, v530, v531, v532, v533, v534, v535);
      WTF::fastFree(v1201, v1202, v1203, v1204, v1205, v1206, v1207, v1208);
    }
    else
    {
      *(_DWORD *)v538 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v527, v536, 4, v533, v534, v535, v537);
  if (v527)
  {
    if (*(_DWORD *)v527 == 2)
    {
      WTF::StringImpl::~StringImpl(v527, v539, v540, v541, v542, v543, v544, v545);
      WTF::fastFree(v1209, v1210, v1211, v1212, v1213, v1214, v1215, v1216);
    }
    else
    {
      *(_DWORD *)v527 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"max", 3uLL, v541, v542, v543, v544, v545, &v1426);
  v546 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v547 = v1426;
LABEL_258:
    *(_DWORD *)v547 += 2;
    goto LABEL_259;
  }
  v547 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v547)
    goto LABEL_258;
LABEL_259:
  v1426 = v547;
  v555 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 2, &v1426, (uint64_t)JSC::mathProtoFuncMax, 0, 9, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v557 = v1426;
  v1426 = 0;
  if (v557)
  {
    if (*(_DWORD *)v557 == 2)
    {
      WTF::StringImpl::~StringImpl(v557, v548, v549, v550, v551, v552, v553, v554);
      WTF::fastFree(v1217, v1218, v1219, v1220, v1221, v1222, v1223, v1224);
    }
    else
    {
      *(_DWORD *)v557 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v546, v555, 4, v552, v553, v554, v556);
  if (v546)
  {
    if (*(_DWORD *)v546 == 2)
    {
      WTF::StringImpl::~StringImpl(v546, v558, v559, v560, v561, v562, v563, v564);
      WTF::fastFree(v1225, v1226, v1227, v1228, v1229, v1230, v1231, v1232);
    }
    else
    {
      *(_DWORD *)v546 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"min", 3uLL, v560, v561, v562, v563, v564, &v1426);
  v565 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v566 = v1426;
LABEL_268:
    *(_DWORD *)v566 += 2;
    goto LABEL_269;
  }
  v566 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v566)
    goto LABEL_268;
LABEL_269:
  v1426 = v566;
  v574 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 2, &v1426, (uint64_t)JSC::mathProtoFuncMin, 0, 8, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v576 = v1426;
  v1426 = 0;
  if (v576)
  {
    if (*(_DWORD *)v576 == 2)
    {
      WTF::StringImpl::~StringImpl(v576, v567, v568, v569, v570, v571, v572, v573);
      WTF::fastFree(v1233, v1234, v1235, v1236, v1237, v1238, v1239, v1240);
    }
    else
    {
      *(_DWORD *)v576 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v565, v574, 4, v571, v572, v573, v575);
  if (v565)
  {
    if (*(_DWORD *)v565 == 2)
    {
      WTF::StringImpl::~StringImpl(v565, v577, v578, v579, v580, v581, v582, v583);
      WTF::fastFree(v1241, v1242, v1243, v1244, v1245, v1246, v1247, v1248);
    }
    else
    {
      *(_DWORD *)v565 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"pow", 3uLL, v579, v580, v581, v582, v583, &v1426);
  v584 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v585 = v1426;
LABEL_278:
    *(_DWORD *)v585 += 2;
    goto LABEL_279;
  }
  v585 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v585)
    goto LABEL_278;
LABEL_279:
  v1426 = v585;
  v593 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 2, &v1426, (uint64_t)JSC::mathProtoFuncPow, 0, 52, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v595 = v1426;
  v1426 = 0;
  if (v595)
  {
    if (*(_DWORD *)v595 == 2)
    {
      WTF::StringImpl::~StringImpl(v595, v586, v587, v588, v589, v590, v591, v592);
      WTF::fastFree(v1249, v1250, v1251, v1252, v1253, v1254, v1255, v1256);
    }
    else
    {
      *(_DWORD *)v595 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v584, v593, 4, v590, v591, v592, v594);
  if (v584)
  {
    if (*(_DWORD *)v584 == 2)
    {
      WTF::StringImpl::~StringImpl(v584, v596, v597, v598, v599, v600, v601, v602);
      WTF::fastFree(v1257, v1258, v1259, v1260, v1261, v1262, v1263, v1264);
    }
    else
    {
      *(_DWORD *)v584 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"random", 6uLL, v598, v599, v600, v601, v602, &v1426);
  v603 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v604 = v1426;
LABEL_288:
    *(_DWORD *)v604 += 2;
    goto LABEL_289;
  }
  v604 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v604)
    goto LABEL_288;
LABEL_289:
  v1426 = v604;
  v612 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v1426, (uint64_t)JSC::mathProtoFuncRandom, 0, 92, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v614 = v1426;
  v1426 = 0;
  if (v614)
  {
    if (*(_DWORD *)v614 == 2)
    {
      WTF::StringImpl::~StringImpl(v614, v605, v606, v607, v608, v609, v610, v611);
      WTF::fastFree(v1265, v1266, v1267, v1268, v1269, v1270, v1271, v1272);
    }
    else
    {
      *(_DWORD *)v614 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v603, v612, 4, v609, v610, v611, v613);
  if (v603)
  {
    if (*(_DWORD *)v603 == 2)
    {
      WTF::StringImpl::~StringImpl(v603, v615, v616, v617, v618, v619, v620, v621);
      WTF::fastFree(v1273, v1274, v1275, v1276, v1277, v1278, v1279, v1280);
    }
    else
    {
      *(_DWORD *)v603 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"round", 5uLL, v617, v618, v619, v620, v621, &v1426);
  v622 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v623 = v1426;
LABEL_298:
    *(_DWORD *)v623 += 2;
    goto LABEL_299;
  }
  v623 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v623)
    goto LABEL_298;
LABEL_299:
  v1426 = v623;
  v631 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncRound, 0, 55, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v633 = v1426;
  v1426 = 0;
  if (v633)
  {
    if (*(_DWORD *)v633 == 2)
    {
      WTF::StringImpl::~StringImpl(v633, v624, v625, v626, v627, v628, v629, v630);
      WTF::fastFree(v1281, v1282, v1283, v1284, v1285, v1286, v1287, v1288);
    }
    else
    {
      *(_DWORD *)v633 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v622, v631, 4, v628, v629, v630, v632);
  if (v622)
  {
    if (*(_DWORD *)v622 == 2)
    {
      WTF::StringImpl::~StringImpl(v622, v634, v635, v636, v637, v638, v639, v640);
      WTF::fastFree(v1289, v1290, v1291, v1292, v1293, v1294, v1295, v1296);
    }
    else
    {
      *(_DWORD *)v622 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"sign", 4uLL, v636, v637, v638, v639, v640, &v1426);
  v641 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v642 = v1426;
LABEL_308:
    *(_DWORD *)v642 += 2;
    goto LABEL_309;
  }
  v642 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v642)
    goto LABEL_308;
LABEL_309:
  v1426 = v642;
  v650 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncSign, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v652 = v1426;
  v1426 = 0;
  if (v652)
  {
    if (*(_DWORD *)v652 == 2)
    {
      WTF::StringImpl::~StringImpl(v652, v643, v644, v645, v646, v647, v648, v649);
      WTF::fastFree(v1297, v1298, v1299, v1300, v1301, v1302, v1303, v1304);
    }
    else
    {
      *(_DWORD *)v652 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v641, v650, 4, v647, v648, v649, v651);
  if (v641)
  {
    if (*(_DWORD *)v641 == 2)
    {
      WTF::StringImpl::~StringImpl(v641, v653, v654, v655, v656, v657, v658, v659);
      WTF::fastFree(v1305, v1306, v1307, v1308, v1309, v1310, v1311, v1312);
    }
    else
    {
      *(_DWORD *)v641 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"sin", 3uLL, v655, v656, v657, v658, v659, &v1426);
  v660 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v661 = v1426;
LABEL_318:
    *(_DWORD *)v661 += 2;
    goto LABEL_319;
  }
  v661 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v661)
    goto LABEL_318;
LABEL_319:
  v1426 = v661;
  v669 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncSin, 0, 11, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v671 = v1426;
  v1426 = 0;
  if (v671)
  {
    if (*(_DWORD *)v671 == 2)
    {
      WTF::StringImpl::~StringImpl(v671, v662, v663, v664, v665, v666, v667, v668);
      WTF::fastFree(v1313, v1314, v1315, v1316, v1317, v1318, v1319, v1320);
    }
    else
    {
      *(_DWORD *)v671 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v660, v669, 4, v666, v667, v668, v670);
  if (v660)
  {
    if (*(_DWORD *)v660 == 2)
    {
      WTF::StringImpl::~StringImpl(v660, v672, v673, v674, v675, v676, v677, v678);
      WTF::fastFree(v1321, v1322, v1323, v1324, v1325, v1326, v1327, v1328);
    }
    else
    {
      *(_DWORD *)v660 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"sinh", 4uLL, v674, v675, v676, v677, v678, &v1426);
  v679 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v680 = v1426;
LABEL_328:
    *(_DWORD *)v680 += 2;
    goto LABEL_329;
  }
  v680 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v680)
    goto LABEL_328;
LABEL_329:
  v1426 = v680;
  v688 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncSinh, 0, 17, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v690 = v1426;
  v1426 = 0;
  if (v690)
  {
    if (*(_DWORD *)v690 == 2)
    {
      WTF::StringImpl::~StringImpl(v690, v681, v682, v683, v684, v685, v686, v687);
      WTF::fastFree(v1329, v1330, v1331, v1332, v1333, v1334, v1335, v1336);
    }
    else
    {
      *(_DWORD *)v690 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v679, v688, 4, v685, v686, v687, v689);
  if (v679)
  {
    if (*(_DWORD *)v679 == 2)
    {
      WTF::StringImpl::~StringImpl(v679, v691, v692, v693, v694, v695, v696, v697);
      WTF::fastFree(v1337, v1338, v1339, v1340, v1341, v1342, v1343, v1344);
    }
    else
    {
      *(_DWORD *)v679 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"sqrt", 4uLL, v693, v694, v695, v696, v697, &v1426);
  v698 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v699 = v1426;
LABEL_338:
    *(_DWORD *)v699 += 2;
    goto LABEL_339;
  }
  v699 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v699)
    goto LABEL_338;
LABEL_339:
  v1426 = v699;
  v707 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncSqrt, 0, 10, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v709 = v1426;
  v1426 = 0;
  if (v709)
  {
    if (*(_DWORD *)v709 == 2)
    {
      WTF::StringImpl::~StringImpl(v709, v700, v701, v702, v703, v704, v705, v706);
      WTF::fastFree(v1345, v1346, v1347, v1348, v1349, v1350, v1351, v1352);
    }
    else
    {
      *(_DWORD *)v709 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v698, v707, 4, v704, v705, v706, v708);
  if (v698)
  {
    if (*(_DWORD *)v698 == 2)
    {
      WTF::StringImpl::~StringImpl(v698, v710, v711, v712, v713, v714, v715, v716);
      WTF::fastFree(v1353, v1354, v1355, v1356, v1357, v1358, v1359, v1360);
    }
    else
    {
      *(_DWORD *)v698 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"tan", 3uLL, v712, v713, v714, v715, v716, &v1426);
  v717 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v718 = v1426;
LABEL_348:
    *(_DWORD *)v718 += 2;
    goto LABEL_349;
  }
  v718 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v718)
    goto LABEL_348;
LABEL_349:
  v1426 = v718;
  v726 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncTan, 0, 15, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v728 = v1426;
  v1426 = 0;
  if (v728)
  {
    if (*(_DWORD *)v728 == 2)
    {
      WTF::StringImpl::~StringImpl(v728, v719, v720, v721, v722, v723, v724, v725);
      WTF::fastFree(v1361, v1362, v1363, v1364, v1365, v1366, v1367, v1368);
    }
    else
    {
      *(_DWORD *)v728 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v717, v726, 4, v723, v724, v725, v727);
  if (v717)
  {
    if (*(_DWORD *)v717 == 2)
    {
      WTF::StringImpl::~StringImpl(v717, v729, v730, v731, v732, v733, v734, v735);
      WTF::fastFree(v1369, v1370, v1371, v1372, v1373, v1374, v1375, v1376);
    }
    else
    {
      *(_DWORD *)v717 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"tanh", 4uLL, v731, v732, v733, v734, v735, &v1426);
  v736 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v737 = v1426;
LABEL_358:
    *(_DWORD *)v737 += 2;
    goto LABEL_359;
  }
  v737 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v737)
    goto LABEL_358;
LABEL_359:
  v1426 = v737;
  v745 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncTanh, 0, 18, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v747 = v1426;
  v1426 = 0;
  if (v747)
  {
    if (*(_DWORD *)v747 == 2)
    {
      WTF::StringImpl::~StringImpl(v747, v738, v739, v740, v741, v742, v743, v744);
      WTF::fastFree(v1377, v1378, v1379, v1380, v1381, v1382, v1383, v1384);
    }
    else
    {
      *(_DWORD *)v747 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v736, v745, 4, v742, v743, v744, v746);
  if (v736)
  {
    if (*(_DWORD *)v736 == 2)
    {
      WTF::StringImpl::~StringImpl(v736, v748, v749, v750, v751, v752, v753, v754);
      WTF::fastFree(v1385, v1386, v1387, v1388, v1389, v1390, v1391, v1392);
    }
    else
    {
      *(_DWORD *)v736 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"trunc", 5uLL, v750, v751, v752, v753, v754, &v1426);
  v755 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v756 = v1426;
LABEL_368:
    *(_DWORD *)v756 += 2;
    goto LABEL_369;
  }
  v756 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v756)
    goto LABEL_368;
LABEL_369:
  v1426 = v756;
  v764 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v1426, (uint64_t)JSC::mathProtoFuncTrunc, 0, 96, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v766 = v1426;
  v1426 = 0;
  if (v766)
  {
    if (*(_DWORD *)v766 == 2)
    {
      WTF::StringImpl::~StringImpl(v766, v757, v758, v759, v760, v761, v762, v763);
      WTF::fastFree(v1393, v1394, v1395, v1396, v1397, v1398, v1399, v1400);
    }
    else
    {
      *(_DWORD *)v766 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v755, v764, 4, v761, v762, v763, v765);
  if (v755)
  {
    if (*(_DWORD *)v755 == 2)
    {
      WTF::StringImpl::~StringImpl(v755, v767, v768, v769, v770, v771, v772, v773);
      WTF::fastFree(v1401, v1402, v1403, v1404, v1405, v1406, v1407, v1408);
    }
    else
    {
      *(_DWORD *)v755 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"imul", 4uLL, v769, v770, v771, v772, v773, &v1426);
  v774 = v1426;
  if (v1426 && (*((_BYTE *)v1426 + 16) & 0x20) == 0)
  {
    v775 = v1426;
LABEL_378:
    *(_DWORD *)v775 += 2;
    goto LABEL_379;
  }
  v775 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v775)
    goto LABEL_378;
LABEL_379:
  v1426 = v775;
  v783 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 2, &v1426, (uint64_t)JSC::mathProtoFuncIMul, 0, 91, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v785 = v1426;
  v1426 = 0;
  if (v785)
  {
    if (*(_DWORD *)v785 == 2)
    {
      WTF::StringImpl::~StringImpl(v785, v776, v777, v778, v779, v780, v781, v782);
      WTF::fastFree(v1409, v1410, v1411, v1412, v1413, v1414, v1415, v1416);
    }
    else
    {
      *(_DWORD *)v785 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v774, v783, 4, v780, v781, v782, v784);
  if (v774)
  {
    if (*(_DWORD *)v774 == 2)
    {
      WTF::StringImpl::~StringImpl(v774, v786, v787, v788, v789, v790, v791, v792);
      WTF::fastFree(v1417, v1418, v1419, v1420, v1421, v1422, v1423, v1424);
    }
    else
    {
      *(_DWORD *)v774 -= 2;
    }
  }
}

unint64_t JSC::mathProtoFuncAbs(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v15;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v15 = 10;
    goto LABEL_14;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v15 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    goto LABEL_6;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_14:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v15, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_6;
  }
  v11 = *(double *)&v10;
LABEL_6:
  v12 = fabs(v11);
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v13 = (int)v12, v12 == (double)(int)v13)
    && ((_DWORD)v13 || (*(_QWORD *)&v12 & 0x8000000000000000) == 0))
  {
    return v13 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v12 + 0x2000000000000;
  }
}

uint64_t JSC::mathProtoFuncACos(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))acos)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))acos)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))acos)(v11) + 0x2000000000000;
}

uint64_t JSC::mathProtoFuncASin(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))asin)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))asin)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))asin)(v11) + 0x2000000000000;
}

uint64_t JSC::mathProtoFuncATan(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))atan)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))atan)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))atan)(v11) + 0x2000000000000;
}

uint64_t JSC::mathProtoFuncACosh(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))acosh)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))acosh)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))acosh)(v11) + 0x2000000000000;
}

uint64_t JSC::mathProtoFuncASinh(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))asinh)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))asinh)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))asinh)(v11) + 0x2000000000000;
}

uint64_t JSC::mathProtoFuncATanh(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))atanh)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))atanh)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))atanh)(v11) + 0x2000000000000;
}

uint64_t JSC::mathProtoFuncATan2(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v11;
  JSC::JSObject *v12;
  unint64_t v13;
  double v14;
  JSC::JSObject *v15;
  unint64_t v16;
  double v17;
  double v19;
  uint64_t v20;

  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20 = 10;
    goto LABEL_14;
  }
  v12 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v20 = (uint64_t)v12;
  if ((unint64_t)v12 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v12;
    goto LABEL_5;
  }
  v13 = (unint64_t)v12 - 0x2000000000000;
  if (v13 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_14:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v20, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v14 = *(double *)a9.i64;
    goto LABEL_5;
  }
  v14 = *(double *)&v13;
LABEL_5:
  if (!*((_DWORD *)v11 + 20)
    || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v20 = 10;
    }
    else
    {
      v15 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
      v20 = (uint64_t)v15;
      if ((unint64_t)v15 >= 0xFFFE000000000000)
      {
        v17 = (double)(int)v15;
        return ((uint64_t (__cdecl *)(long double, long double))atan2)(v14, v17) + 0x2000000000000;
      }
      v16 = (unint64_t)v15 - 0x2000000000000;
      if (v16 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v17 = *(double *)&v16;
        return ((uint64_t (__cdecl *)(long double, long double))atan2)(v14, v17) + 0x2000000000000;
      }
    }
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v20, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v17 = v19;
    return ((uint64_t (__cdecl *)(long double, long double))atan2)(v14, v17) + 0x2000000000000;
  }
  return 0;
}

uint64_t JSC::mathProtoFuncCbrt(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))cbrt)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))cbrt)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))cbrt)(v11) + 0x2000000000000;
}

unint64_t JSC::mathProtoFuncCeil(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v15;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v15 = 10;
    goto LABEL_14;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v15 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    goto LABEL_6;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_14:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v15, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_6;
  }
  v11 = *(double *)&v10;
LABEL_6:
  v12 = ceil(v11);
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v13 = (int)v12, v12 == (double)(int)v13)
    && ((_DWORD)v13 || (*(_QWORD *)&v12 & 0x8000000000000000) == 0))
  {
    return v13 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v12 + 0x2000000000000;
  }
}

unint64_t JSC::mathProtoFuncClz32(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::JSObject *v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;

  v9 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20 = 10;
LABEL_7:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v20, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v13 = v12;
    goto LABEL_9;
  }
  v10 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v20 = (uint64_t)v10;
  if ((unint64_t)v10 >= 0xFFFE000000000000)
    goto LABEL_3;
  v13 = (unint64_t)v10 - 0x2000000000000;
  if (v13 >= 0xFFFC000000000000)
    goto LABEL_7;
LABEL_9:
  v14 = (v13 >> 52) & 0x7FF;
  v15 = v14 - 1023;
  v16 = v13 >> (51 - (v13 >> 52));
  if (v14 > 0x433)
    LODWORD(v16) = v13 << ((v13 >> 52) - 51);
  if (v14 >= 0x41F)
    v17 = v16;
  else
    v17 = (((1 << ((v13 >> 52) + 1)) - 1) & v16) + (1 << ((v13 >> 52) + 1));
  if ((v13 & 0x8000000000000000) != 0)
    v17 = -v17;
  if (v15 <= 0x53)
    LODWORD(v10) = v17;
  else
    LODWORD(v10) = 0;
  if (!*(_DWORD *)(v9 + 80))
    return __clz(v10) | 0xFFFE000000000000;
LABEL_3:
  v18 = *(_DWORD *)(v9 + 80);
  if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
  {
    v19 = (int)v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    LODWORD(v10) = v19;
  }
  if (*(_QWORD *)(v9 + 16))
    return 0;
  else
    return __clz(v10) | 0xFFFE000000000000;
}

uint64_t JSC::mathProtoFuncCos(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))cos)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))cos)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))cos)(v11) + 0x2000000000000;
}

uint64_t JSC::mathProtoFuncCosh(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))cosh)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))cosh)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))cosh)(v11) + 0x2000000000000;
}

uint64_t JSC::mathProtoFuncExp(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))exp)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))exp)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))exp)(v11) + 0x2000000000000;
}

uint64_t JSC::mathProtoFuncExpm1(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))expm1)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))expm1)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))expm1)(v11) + 0x2000000000000;
}

unint64_t JSC::mathProtoFuncFloor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v15;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v15 = 10;
    goto LABEL_14;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v15 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    goto LABEL_6;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_14:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v15, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_6;
  }
  v11 = *(double *)&v10;
LABEL_6:
  v12 = floor(v11);
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v13 = (int)v12, v12 == (double)(int)v13)
    && ((_DWORD)v13 || (*(_QWORD *)&v12 & 0x8000000000000000) == 0))
  {
    return v13 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v12 + 0x2000000000000;
  }
}

uint64_t JSC::mathProtoFuncFround(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  float v12;
  uint64_t v14;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v14 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    goto LABEL_5;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v14, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_5;
  }
  v11 = *(double *)&v10;
LABEL_5:
  v12 = v11;
  return COERCE__INT64(v12) + 0x2000000000000;
}

JSC::JSGlobalObject *JSC::mathProtoFuncHypot(JSC::JSGlobalObject *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  JSC::JSObject *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  WTF *v31;
  unsigned int v32;
  _BYTE v33[64];
  JSC::JSObject *v34;

  v10 = this;
  v11 = *((_QWORD *)this + 7);
  v12 = (*((_DWORD *)a2 + 8) - 1);
  v31 = (WTF *)v33;
  a9.i64[0] = 8;
  v32 = 0;
  if (v12 >= 9)
  {
    if (v12 >> 29)
    {
      __break(0xC471u);
      return this;
    }
    v31 = (WTF *)WTF::fastMalloc((WTF *)(8 * v12));
  }
  else if (*((_DWORD *)a2 + 8) == 1)
  {
    goto LABEL_3;
  }
  v24 = 0x600000000;
  do
  {
    v25 = *(JSC::JSObject **)((char *)a2 + (v24 >> 29));
    v34 = v25;
    if ((unint64_t)v25 >= 0xFFFE000000000000)
    {
      *(double *)a9.i64 = (double)(int)v25;
    }
    else
    {
      v26 = (unint64_t)v25 - 0x2000000000000;
      if (v26 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v34, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      else
        a9.i64[0] = v26;
    }
    if (*(_DWORD *)(v11 + 80))
    {
      v27 = *(_DWORD *)(v11 + 80);
      if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
      {
        v30 = a9.i64[0];
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        a9.i64[0] = v30;
      }
      if (*(_QWORD *)(v11 + 16))
        break;
    }
    *((_QWORD *)v31 + v32++) = a9.i64[0];
    v24 += 0x100000000;
    --v12;
  }
  while (v12);
LABEL_3:
  if (!*(_DWORD *)(v11 + 80))
  {
    v13 = (double *)v31;
LABEL_5:
    if (v32)
    {
      v14 = 0;
      v15 = 8 * v32;
      v16 = 0.0;
      do
      {
        v17 = fabs(v13[v14 / 8]);
        if (v17 == INFINITY)
        {
          v28 = 0x7FF2000000000000;
          goto LABEL_35;
        }
        if (v17 >= v16)
          v16 = v17;
        v14 += 8;
      }
      while (v15 != v14);
      if (v16 == 0.0)
        v16 = 1.0;
      v18 = 0.0;
      v19 = 0.0;
      v20 = v13;
      do
      {
        v21 = v18;
        v22 = *v20++;
        v23 = -(v19 - v22 / v16 * (v22 / v16));
        v18 = v18 + v23;
        v19 = v18 - v21 - v23;
        v15 -= 8;
      }
      while (v15);
    }
    else
    {
      v18 = 0.0;
      v16 = 1.0;
    }
    v28 = COERCE__INT64(v16 * sqrt(v18)) + 0x2000000000000;
    goto LABEL_35;
  }
  v29 = *(_DWORD *)(v11 + 80);
  if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  v13 = (double *)v31;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_5;
  v28 = 0;
LABEL_35:
  if (v33 != (_BYTE *)v13)
  {
    if (v13)
      WTF::fastFree((unint64_t)v13, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  return (JSC::JSGlobalObject *)v28;
}

uint64_t JSC::mathProtoFuncLog(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))log)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))log)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))log)(v11) + 0x2000000000000;
}

uint64_t JSC::mathProtoFuncLog10(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))log10)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))log10)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))log10)(v11) + 0x2000000000000;
}

uint64_t JSC::mathProtoFuncLog1p(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
  }
  else
  {
    v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
    v13 = (uint64_t)v9;
    if ((unint64_t)v9 >= 0xFFFE000000000000)
    {
      v11 = (double)(int)v9;
      goto LABEL_5;
    }
    v10 = (unint64_t)v9 - 0x2000000000000;
    if (v10 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v11 = *(double *)&v10;
      goto LABEL_5;
    }
  }
  JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_5:
  if (v11 != 0.0)
    v11 = log1p(v11);
  return *(_QWORD *)&v11 + 0x2000000000000;
}

uint64_t JSC::mathProtoFuncLog2(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))log2)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))log2)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))log2)(v11) + 0x2000000000000;
}

unint64_t JSC::mathProtoFuncMax(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  double v15;
  JSC::JSObject *v16;
  unint64_t v17;
  uint64_t v18;
  int v20;
  unint64_t v21;
  JSC::JSObject *v22;

  v9 = *((_DWORD *)a2 + 8);
  v10 = (v9 - 1);
  if (v9 == 1)
  {
    v15 = -INFINITY;
LABEL_18:
    if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v18 = (int)v15, v15 == (double)(int)v18)
      && ((_DWORD)v18 || (*(_QWORD *)&v15 & 0x8000000000000000) == 0))
    {
      return v18 | 0xFFFE000000000000;
    }
    else
    {
      return *(_QWORD *)&v15 + 0x2000000000000;
    }
  }
  else
  {
    v13 = 0x600000000;
    v14 = *((_QWORD *)this + 7);
    v15 = -INFINITY;
    while (1)
    {
      v16 = *(JSC::JSObject **)((char *)a2 + (v13 >> 29));
      v22 = v16;
      if ((unint64_t)v16 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v16;
      }
      else
      {
        v17 = (unint64_t)v16 - 0x2000000000000;
        if (v17 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(&v22, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        else
          a9.i64[0] = v17;
      }
      if (*(_DWORD *)(v14 + 80))
      {
        v20 = *(_DWORD *)(v14 + 80);
        if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
        {
          v21 = a9.i64[0];
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
          a9.i64[0] = v21;
        }
        if (*(_QWORD *)(v14 + 16))
          return 0;
      }
      if (*(double *)a9.i64 > v15 || *(double *)a9.i64 == 0.0 && v15 == 0.0 && (a9.i64[0] & 0x8000000000000000) == 0)
        v15 = *(double *)a9.i64;
      v13 += 0x100000000;
      if (!--v10)
        goto LABEL_18;
    }
  }
}

unint64_t JSC::mathProtoFuncMin(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  double v15;
  JSC::JSObject *v16;
  unint64_t v17;
  uint64_t v18;
  int v20;
  unint64_t v21;
  JSC::JSObject *v22;

  v9 = *((_DWORD *)a2 + 8);
  v10 = (v9 - 1);
  if (v9 == 1)
  {
    v15 = INFINITY;
LABEL_18:
    if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v18 = (int)v15, v15 == (double)(int)v18)
      && ((_DWORD)v18 || (*(_QWORD *)&v15 & 0x8000000000000000) == 0))
    {
      return v18 | 0xFFFE000000000000;
    }
    else
    {
      return *(_QWORD *)&v15 + 0x2000000000000;
    }
  }
  else
  {
    v13 = 0x600000000;
    v14 = *((_QWORD *)this + 7);
    v15 = INFINITY;
    while (1)
    {
      v16 = *(JSC::JSObject **)((char *)a2 + (v13 >> 29));
      v22 = v16;
      if ((unint64_t)v16 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v16;
      }
      else
      {
        v17 = (unint64_t)v16 - 0x2000000000000;
        if (v17 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(&v22, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        else
          a9.i64[0] = v17;
      }
      if (*(_DWORD *)(v14 + 80))
      {
        v20 = *(_DWORD *)(v14 + 80);
        if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
        {
          v21 = a9.i64[0];
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
          a9.i64[0] = v21;
        }
        if (*(_QWORD *)(v14 + 16))
          return 0;
      }
      if (*(double *)a9.i64 < v15 || *(double *)a9.i64 == 0.0 && v15 == 0.0 && a9.i64[0] < 0)
        v15 = *(double *)a9.i64;
      v13 += 0x100000000;
      if (!--v10)
        goto LABEL_18;
    }
  }
}

unint64_t JSC::mathProtoFuncPow(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  JSC::JSObject *v12;
  unint64_t v13;
  double v14;
  JSC::JSObject *v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  unsigned int v22;
  double v23;
  uint64_t v24;
  double v26;
  BOOL v27;
  double v28;
  int v29;
  uint64_t v30;

  v11 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v30 = 10;
    goto LABEL_38;
  }
  v12 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v30 = (uint64_t)v12;
  if ((unint64_t)v12 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v12;
    goto LABEL_5;
  }
  v13 = (unint64_t)v12 - 0x2000000000000;
  if (v13 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_38:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v30, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v14 = *(double *)a9.i64;
    goto LABEL_5;
  }
  v14 = *(double *)&v13;
LABEL_5:
  if (*(_DWORD *)(v11 + 80))
  {
    v29 = *(_DWORD *)(v11 + 80);
    if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v30 = 10;
  }
  else
  {
    v15 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
    v30 = (uint64_t)v15;
    if ((unint64_t)v15 >= 0xFFFE000000000000)
    {
      v17 = (double)(int)v15;
      goto LABEL_10;
    }
    v16 = (unint64_t)v15 - 0x2000000000000;
    if (v16 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v17 = *(double *)&v16;
      goto LABEL_10;
    }
  }
  JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v30, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v17 = v28;
LABEL_10:
  v18 = fabs(v14);
  v19 = fabs(v17);
  *(double *)&v20 = INFINITY;
  if (v18 == 1.0 && v19 == INFINITY)
  {
    *(double *)&v20 = NAN;
LABEL_49:
    v23 = *(double *)&v20;
    goto LABEL_19;
  }
  if (v17 == 0.5)
  {
    v23 = 0.0;
    if (v14 != 0.0)
    {
      v23 = INFINITY;
      if (v18 != INFINITY)
        v23 = sqrt(v14);
    }
    goto LABEL_19;
  }
  if (v17 != -0.5)
  {
    v22 = (int)v17;
    if ((int)v17 <= 0x3E8 && v17 == (double)(int)v22)
    {
      if (v22)
      {
        v23 = 1.0;
        do
        {
          if ((v22 & 1) != 0)
            v26 = v14;
          else
            v26 = 1.0;
          v23 = v23 * v26;
          v14 = v14 * v14;
          v27 = v22 >= 2;
          v22 >>= 1;
        }
        while (v27);
      }
      else
      {
        v23 = 1.0;
      }
    }
    else
    {
      v23 = pow(v14, v17);
    }
    goto LABEL_19;
  }
  if (v14 == 0.0)
    goto LABEL_49;
  if (v18 == INFINITY)
    v23 = 0.0;
  else
    v23 = 1.0 / sqrt(v14);
LABEL_19:
  if ((*(_QWORD *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v24 = (int)v23, v23 == (double)(int)v24)
    && ((_DWORD)v24 || (*(_QWORD *)&v23 & 0x8000000000000000) == 0))
  {
    return v24 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v23 + 0x2000000000000;
  }
}

uint64_t JSC::mathProtoFuncRandom(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *((_QWORD *)this + 263);
  v4 = *((_QWORD *)this + 264);
  *((_QWORD *)this + 263) = v4;
  v5 = (v4 >> 26) ^ ((v3 ^ (unint64_t)(v3 << 23)) >> 17) ^ v4 ^ v3 ^ (v3 << 23);
  *((_QWORD *)this + 264) = v5;
  return COERCE__INT64((double)((v5 + v4) & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + 0x2000000000000;
}

unint64_t JSC::mathProtoFuncRound(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v18;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v18 = 10;
  }
  else
  {
    v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
    v18 = (uint64_t)v9;
    if ((unint64_t)v9 >= 0xFFFE000000000000)
    {
      v11 = (double)(int)v9;
      goto LABEL_6;
    }
    v10 = (unint64_t)v9 - 0x2000000000000;
    if (v10 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v11 = *(double *)&v10;
      goto LABEL_6;
    }
  }
  JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v18, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_6:
  v12 = ceil(v11);
  v13 = v12 + -0.5 <= v11;
  v14 = 0.0;
  if (!v13)
    v14 = 1.0;
  v15 = v12 - v14;
  if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v16 = (int)v15, v15 == (double)(int)v16)
    && ((_DWORD)v16 || (*(_QWORD *)&v15 & 0x8000000000000000) == 0))
  {
    return v16 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v15 + 0x2000000000000;
  }
}

unint64_t JSC::mathProtoFuncSign(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v15 = 10;
  }
  else
  {
    v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
    v15 = (uint64_t)v9;
    if ((unint64_t)v9 >= 0xFFFE000000000000)
    {
      v11 = (double)(int)v9;
      goto LABEL_5;
    }
    v10 = (unint64_t)v9 - 0x2000000000000;
    if (v10 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v11 = *(double *)&v10;
      goto LABEL_5;
    }
  }
  JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v15, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_5:
  if (v11 == 0.0)
  {
    v12 = 0xFFFE000000000000;
    v13 = 0x8002000000000000;
  }
  else
  {
    v12 = 0xFFFE000000000001;
    v13 = 0xFFFE0000FFFFFFFFLL;
  }
  if (v11 >= 0.0)
    return v12;
  else
    return v13;
}

uint64_t JSC::mathProtoFuncSin(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))sin)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))sin)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))sin)(v11) + 0x2000000000000;
}

uint64_t JSC::mathProtoFuncSinh(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))sinh)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))sinh)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))sinh)(v11) + 0x2000000000000;
}

uint64_t JSC::mathProtoFuncSqrt(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return COERCE__INT64(sqrt(v11)) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return COERCE__INT64(sqrt(v11)) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return COERCE__INT64(sqrt(v11)) + 0x2000000000000;
}

uint64_t JSC::mathProtoFuncTan(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))tan)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))tan)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))tan)(v11) + 0x2000000000000;
}

uint64_t JSC::mathProtoFuncTanh(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  uint64_t v13;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v13 = (uint64_t)v9;
  if ((unint64_t)v9 >= 0xFFFE000000000000)
  {
    v11 = (double)(int)v9;
    return ((uint64_t (__cdecl *)(long double))tanh)(v11) + 0x2000000000000;
  }
  v10 = (unint64_t)v9 - 0x2000000000000;
  if (v10 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_8:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return ((uint64_t (__cdecl *)(long double))tanh)(v11) + 0x2000000000000;
  }
  v11 = *(double *)&v10;
  return ((uint64_t (__cdecl *)(long double))tanh)(v11) + 0x2000000000000;
}

unint64_t JSC::mathProtoFuncTrunc(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  double v10;
  uint64_t v11;
  unsigned __int8 *v13;

  if (*((_DWORD *)a2 + 8) == 1)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 6);
  v13 = (unsigned __int8 *)v9;
  v10 = JSC::JSValue::toIntegerPreserveNaN(&v13, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v11 = (int)v10, v10 == (double)(int)v11)
    && ((_DWORD)v11 || (*(_QWORD *)&v10 & 0x8000000000000000) == 0))
  {
    return v11 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v10 + 0x2000000000000;
  }
}

unint64_t JSC::mathProtoFuncIMul(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v11;
  JSC::JSObject *v12;
  JSC::JSObject *v13;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;

  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27 = 10;
LABEL_9:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v27, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v15 = a9.i64[0];
    goto LABEL_10;
  }
  v12 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v27 = (uint64_t)v12;
  if ((unint64_t)v12 >= 0xFFFE000000000000)
    goto LABEL_3;
  v15 = (unint64_t)v12 - 0x2000000000000;
  if ((unint64_t)v12 - 0x2000000000000 >= 0xFFFC000000000000)
    goto LABEL_9;
LABEL_10:
  v16 = (v15 >> 52) & 0x7FF;
  v17 = v16 - 1023;
  v18 = v15 >> (51 - (v15 >> 52));
  if (v16 > 0x433)
    LODWORD(v18) = v15 << ((v15 >> 52) - 51);
  if (v16 >= 0x41F)
    v19 = v18;
  else
    v19 = (((1 << ((v15 >> 52) + 1)) - 1) & v18) + (1 << ((v15 >> 52) + 1));
  if ((v15 & 0x8000000000000000) == 0)
    v20 = v19;
  else
    v20 = -v19;
  if (v17 <= 0x53)
    LODWORD(v12) = v20;
  else
    LODWORD(v12) = 0;
LABEL_3:
  if (*((_DWORD *)v11 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v27 = 10;
LABEL_22:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v27, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v22 = v21;
LABEL_23:
    v23 = (v22 >> 52) & 0x7FF;
    v24 = v23 - 1023;
    v25 = v22 >> (51 - (v22 >> 52));
    if (v23 > 0x433)
      LODWORD(v25) = v22 << ((v22 >> 52) - 51);
    if (v23 >= 0x41F)
      v26 = v25;
    else
      v26 = (((1 << ((v22 >> 52) + 1)) - 1) & v25) + (1 << ((v22 >> 52) + 1));
    if ((v22 & 0x8000000000000000) == 0)
      LODWORD(v13) = v26;
    else
      LODWORD(v13) = -v26;
    if (v24 > 0x53)
      LODWORD(v13) = 0;
    return ((_DWORD)v13 * (_DWORD)v12) | 0xFFFE000000000000;
  }
  v13 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
  v27 = (uint64_t)v13;
  if ((unint64_t)v13 < 0xFFFE000000000000)
  {
    v22 = (unint64_t)v13 - 0x2000000000000;
    if (v22 < 0xFFFC000000000000)
      goto LABEL_23;
    goto LABEL_22;
  }
  return ((_DWORD)v13 * (_DWORD)v12) | 0xFFFE000000000000;
}

void JSC::MegamorphicCache::age(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _WORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;

  v9 = (_WORD *)(a1 + 133120);
  v10 = (unsigned __int16)(*(_WORD *)(a1 + 133120))++ + 1;
  if ((_DWORD)a2 == 1 || HIWORD(v10))
  {
    v11 = 0;
    v12 = a1 + 122880;
    v13 = a1 + 110592;
    v14 = a1 + 61440;
    v15 = a1 + 49152;
    do
    {
      v16 = *(WTF::StringImpl **)(a1 + v11);
      *(_QWORD *)(a1 + v11) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
      *(_WORD *)(a1 + v11 + 12) = 0;
      v11 += 24;
    }
    while (v11 != 49152);
    do
    {
      v33 = *(WTF::StringImpl **)v15;
      *(_QWORD *)v15 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
      *(_WORD *)(v15 + 12) = 0;
      v15 += 24;
    }
    while (v15 != v14);
    do
    {
      v42 = *(WTF::StringImpl **)v14;
      *(_QWORD *)v14 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
        {
          WTF::StringImpl::~StringImpl(v42, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
        }
        else
        {
          *(_DWORD *)v42 -= 2;
        }
      }
      *(_WORD *)(v14 + 16) = 0;
      v14 += 24;
    }
    while (v14 != v13);
    do
    {
      v51 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
        {
          WTF::StringImpl::~StringImpl(v51, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
        }
        else
        {
          *(_DWORD *)v51 -= 2;
        }
      }
      *(_WORD *)(v13 + 16) = 0;
      v13 += 24;
    }
    while (v13 != v12);
    v52 = a1 + 0x20000;
    do
    {
      v53 = *(WTF::StringImpl **)v12;
      *(_QWORD *)v12 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
        {
          WTF::StringImpl::~StringImpl(v53, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
        }
        else
        {
          *(_DWORD *)v53 -= 2;
        }
      }
      *(_WORD *)(v12 + 12) = 0;
      v12 += 16;
    }
    while (v12 != v52);
    do
    {
      v70 = *(WTF::StringImpl **)v52;
      *(_QWORD *)v52 = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
        {
          WTF::StringImpl::~StringImpl(v70, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
        }
        else
        {
          *(_DWORD *)v70 -= 2;
        }
      }
      *(_WORD *)(v52 + 12) = 0;
      v52 += 16;
    }
    while ((_WORD *)v52 != v9);
    if (!*v9)
      *v9 = 1;
  }
}

_WORD *JSC::MegamorphicCache::clearEntries(_WORD *this)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;

  for (i = 0; i != 24576; i += 12)
    this[i + 6] = 0;
  for (j = 0; j != 6144; j += 12)
    this[j + 24582] = 0;
  for (k = 0; k != 24576; k += 12)
    this[k + 30728] = 0;
  for (m = 0; m != 6144; m += 12)
    this[m + 55304] = 0;
  for (n = 0; n != 4096; n += 8)
    this[n + 61446] = 0;
  this[65542] = 0;
  this[65550] = 0;
  this[65558] = 0;
  this[65566] = 0;
  this[65574] = 0;
  this[65582] = 0;
  this[65590] = 0;
  this[65598] = 0;
  this[65606] = 0;
  this[65614] = 0;
  this[65622] = 0;
  this[65630] = 0;
  this[65638] = 0;
  this[65646] = 0;
  this[65654] = 0;
  this[65662] = 0;
  this[65670] = 0;
  this[65678] = 0;
  this[65686] = 0;
  this[65694] = 0;
  this[65702] = 0;
  this[65710] = 0;
  this[65718] = 0;
  this[65726] = 0;
  this[65734] = 0;
  this[65742] = 0;
  this[65750] = 0;
  this[65758] = 0;
  this[65766] = 0;
  this[65774] = 0;
  this[65782] = 0;
  this[65790] = 0;
  this[65798] = 0;
  this[65806] = 0;
  this[65814] = 0;
  this[65822] = 0;
  this[65830] = 0;
  this[65838] = 0;
  this[65846] = 0;
  this[65854] = 0;
  this[65862] = 0;
  this[65870] = 0;
  this[65878] = 0;
  this[65886] = 0;
  this[65894] = 0;
  this[65902] = 0;
  this[65910] = 0;
  this[65918] = 0;
  this[65926] = 0;
  this[65934] = 0;
  this[65942] = 0;
  this[65950] = 0;
  this[65958] = 0;
  this[65966] = 0;
  this[65974] = 0;
  this[65982] = 0;
  this[65990] = 0;
  this[65998] = 0;
  this[66006] = 0;
  this[66014] = 0;
  this[66022] = 0;
  this[66030] = 0;
  this[66038] = 0;
  this[66046] = 0;
  this[66054] = 0;
  this[66062] = 0;
  this[66070] = 0;
  this[66078] = 0;
  this[66086] = 0;
  this[66094] = 0;
  this[66102] = 0;
  this[66110] = 0;
  this[66118] = 0;
  this[66126] = 0;
  this[66134] = 0;
  this[66142] = 0;
  this[66150] = 0;
  this[66158] = 0;
  this[66166] = 0;
  this[66174] = 0;
  this[66182] = 0;
  this[66190] = 0;
  this[66198] = 0;
  this[66206] = 0;
  this[66214] = 0;
  this[66222] = 0;
  this[66230] = 0;
  this[66238] = 0;
  this[66246] = 0;
  this[66254] = 0;
  this[66262] = 0;
  this[66270] = 0;
  this[66278] = 0;
  this[66286] = 0;
  this[66294] = 0;
  this[66302] = 0;
  this[66310] = 0;
  this[66318] = 0;
  this[66326] = 0;
  this[66334] = 0;
  this[66342] = 0;
  this[66350] = 0;
  this[66358] = 0;
  this[66366] = 0;
  this[66374] = 0;
  this[66382] = 0;
  this[66390] = 0;
  this[66398] = 0;
  this[66406] = 0;
  this[66414] = 0;
  this[66422] = 0;
  this[66430] = 0;
  this[66438] = 0;
  this[66446] = 0;
  this[66454] = 0;
  this[66462] = 0;
  this[66470] = 0;
  this[66478] = 0;
  this[66486] = 0;
  this[66494] = 0;
  this[66502] = 0;
  this[66510] = 0;
  this[66518] = 0;
  this[66526] = 0;
  this[66534] = 0;
  this[66542] = 0;
  this[66550] = 0;
  this[66558] = 0;
  this[66560] = 1;
  return this;
}

uint64_t JSC::globalMemoryStatistics(JSC *this)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v1)
    v1 = WTF::Thread::initializeCurrentTLS(0);
  return *(_QWORD *)(v1 + 16) - (_QWORD)&v3;
}

unsigned int *JSC::ModuleProgramExecutable::destroy(JSC::ModuleProgramExecutable *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _DWORD *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *result;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v9 = (_QWORD *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v9)
  {
    if (*v9)
      WTF::fastFree(*v9 - 16, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v10 + 8))(v10, a2);
    else
      --v10[2];
  }
  v11 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *, JSC::JSCell *))(*(_QWORD *)v11 + 32))(v11, a2);
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    v16 = result + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 32))(result);
    }
  }
  return result;
}

void JSC::ModuleProgramExecutable::visitChildren(JSC::ModuleProgramExecutable *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  _QWORD **v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  JSC::ModuleProgramExecutable *v36;

  JSC::GlobalExecutable::visitChildren((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 12);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
      {
LABEL_6:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_7;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
LABEL_7:
  v18 = (_QWORD **)*((_QWORD *)this + 13);
  if (v18)
  {
    v36 = this;
    v19 = (unsigned __int8 *)this + 4;
    while (1)
    {
      v20 = *v19;
      if ((v20 & 0x40) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 0x40, v19))
          goto LABEL_17;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v19);
LABEL_17:
    v22 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::begin(v18);
    v30 = v22;
    v31 = (_QWORD *)v23;
    if (*v18)
      v32 = (uint64_t)&(*v18)[2 * *((unsigned int *)*v18 - 1)];
    else
      v32 = 0;
    if ((_QWORD *)v32 != v22)
    {
      do
      {
        v23 = v30[1];
        if (!v23)
          goto LABEL_26;
        if ((v23 & 8) != 0)
        {
          if ((*(_BYTE *)(v23 - 79) & 1) == 0)
            goto LABEL_34;
        }
        else
        {
          v33 = v23 & 0xFFFFFFFFFFFFC000;
          v34 = *((_DWORD *)a2 + 33);
          if (*(_DWORD *)(v23 & 0xFFFFFFFFFFFFC000 | 0x20) != v34)
          {
            v35 = v30[1];
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v23 & 0xFFFFFFFFFFFFC000), v34, v24, v25, v26, v27, v28, v29);
            v23 = v35;
          }
          if (((*(_QWORD *)(v33 + 8 * ((v23 >> 10) & 0xF) + 40) >> (v23 >> 4)) & 1) == 0)
            goto LABEL_34;
        }
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_26;
LABEL_34:
        JSC::SlotVisitor::appendSlow((uint64_t)a2, v23, 0, v25, v26, v27, v28, v29);
LABEL_26:
        while (1)
        {
          v30 += 2;
          if (v30 == v31)
            break;
          if (*v30 < 0xFFFFFFFFFFFFFFFELL)
            goto LABEL_28;
        }
        v30 = v31;
LABEL_28:
        ;
      }
      while (v30 != (_QWORD *)v32);
    }
    WTF::Locker<JSC::JSCellLock,void>::~Locker(&v36, v23, v24, v25, v26, v27, v28, v29);
  }
}

void JSC::ModuleProgramExecutable::visitChildren(JSC::ModuleProgramExecutable *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  _QWORD **v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  _QWORD v23[2];
  uint64_t v24;
  char v25;

  v23[0] = a2;
  v23[1] = this;
  v25 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v24 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198B47B38);
  }
  *((_QWORD *)a2 + 11) = v23;
  JSC::GlobalExecutable::visitChildren((unint64_t)this, a2, a3);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 12));
  v6 = (_QWORD **)*((_QWORD *)this + 13);
  if (v6)
  {
    v7 = (unsigned __int8 *)this + 4;
    while (1)
    {
      v8 = *v7;
      if ((v8 & 0x40) != 0)
        break;
      v9 = __ldaxr(v7);
      if (v9 == v8)
      {
        if (!__stxr(v8 | 0x40, v7))
          goto LABEL_11;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_11:
    v10 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::begin(v6);
    v17 = v10;
    v19 = v18;
    if (*v6)
      v20 = (uint64_t)&(*v6)[2 * *((unsigned int *)*v6 - 1)];
    else
      v20 = 0;
    if ((_QWORD *)v20 == v10)
    {
LABEL_22:
      while (1)
      {
        v21 = *v7;
        if ((v21 & 0xC0) != 0x40)
          break;
        v22 = __ldxr(v7);
        if (v22 == v21)
        {
          if (!__stxr(v21 & 0xBF, v7))
            goto LABEL_21;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 4, 0, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      do
      {
        (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v17[1]);
        while (1)
        {
          v17 += 2;
          if (v17 == v19)
            break;
          if (*v17 < 0xFFFFFFFFFFFFFFFELL)
            goto LABEL_17;
        }
        v17 = v19;
LABEL_17:
        ;
      }
      while (v17 != (_QWORD *)v20);
      if (this)
        goto LABEL_22;
    }
  }
LABEL_21:
  *(_QWORD *)(v23[0] + 88) = v24;
}

JSC::ModuleProgramExecutable *JSC::ModuleProgramExecutable::ModuleProgramExecutable(JSC::ModuleProgramExecutable *this, JSC::JSGlobalObject *a2, const SourceCode *a3)
{
  unint64_t v4;
  int v5;
  SourceProvider *var0;
  _QWORD *v7;
  JSC::FunctionHasExecutedCache *v9;
  unsigned int v10;
  unsigned int started;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(*((_QWORD *)a2 + 7) + 41608);
  v5 = *(_DWORD *)(v4 + 8);
  *(_DWORD *)this = v4 >> 4;
  *((_DWORD *)this + 1) = v5;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  var0 = a3->var0.var0;
  if (a3->var0.var0)
    ++*((_DWORD *)var0 + 2);
  *((_QWORD *)this + 5) = var0;
  *((_QWORD *)this + 6) = *(_QWORD *)&a3->var1;
  *((_QWORD *)this + 7) = *(_QWORD *)&a3->var3.var0;
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 68) &= 0xFCu;
  *((_BYTE *)this + 69) = 0;
  *((_WORD *)this + 35) = *((_WORD *)this + 35) & 0xF000 | 0x20;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = -1;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v7 = (_QWORD *)*((_QWORD *)a2 + 7);
  if (v7[11646] || v7[11660])
  {
    v9 = (JSC::FunctionHasExecutedCache *)(v7 + 11659);
    if (var0)
    {
      v10 = *((_DWORD *)var0 + 28);
      if (!v10)
      {
        JSC::SourceProvider::getID((uint64_t)var0);
        v10 = *((_DWORD *)var0 + 28);
      }
    }
    else
    {
      v10 = 1;
    }
    started = JSC::ScriptExecutable::typeProfilingStartOffset(this);
    v12 = JSC::ScriptExecutable::typeProfilingEndOffset(this);
    JSC::FunctionHasExecutedCache::insertUnexecutedRange(v9, v10, started, v12, v13, v14, v15, v16);
  }
  return this;
}

unint64_t JSC::ModuleProgramExecutable::getUnlinkedCodeBlock(JSC::ModuleProgramExecutable *this, JSC::JSGlobalObject *a2)
{
  unint64_t v2;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  JSC::SymbolTable *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  SourceProvider *var0;
  SourceCode v45;
  WTF::StringImpl *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unsigned int v54;
  __int16 v55;

  v2 = *((_QWORD *)this + 10);
  if (v2)
    return v2;
  LOBYTE(v5) = 0;
  v6 = *((_QWORD *)a2 + 7);
  LODWORD(v46) = 0x100000;
  v47 = 0u;
  v48 = 0u;
  v49 = 0;
  v50 = -1;
  v51 = -1;
  v52 = -1;
  v53 = 0;
  v54 = -1;
  v55 = 0;
  v7 = *((_QWORD *)a2 + 252);
  if (v7)
    v5 = (*(unsigned __int16 *)(v7 + 48) >> 6) & 1;
  if (byte_1ECF4C274)
    LOBYTE(v5) = 1;
  if (byte_1ECF4C275)
    LOBYTE(v5) = 1;
  if (*(_QWORD *)(v6 + 93168))
    LOBYTE(v5) = v5 | 2;
  if (*(_QWORD *)(v6 + 93280))
    v8 = v5 | 4;
  else
    v8 = v5;
  v9 = (_QWORD *)((char *)this + 40);
  v2 = JSC::CodeCache::getUnlinkedGlobalCodeBlock<JSC::UnlinkedModuleProgramCodeBlock,JSC::ModuleProgramExecutable>(*(_QWORD *)(v6 + 93136), (_QWORD *)v6, (uint64_t)this, (uint64_t)this + 40, 1, 1, v8, (uint64_t)&v46, 0);
  v16 = *((_QWORD *)a2 + 252);
  if (v16)
    (*(void (**)(uint64_t, JSC::JSGlobalObject *, _QWORD, _QWORD, WTF::StringImpl **))(*(_QWORD *)v16 + 16))(v16, a2, *v9, v54, &v53);
  if (!(_BYTE)v55)
  {
    *((_QWORD *)this + 10) = v2;
    if (v2 && *(_DWORD *)(v6 + 760) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath(v6 + 192, (unint64_t)this);
    v17 = *(_DWORD *)(v2 + 216) - 0x40000000;
    v18 = *(unsigned int **)(v2 + 112);
    if (*v18 <= v17)
    {
      __break(0xC471u);
      JUMPOUT(0x198B47EC8);
    }
    v19 = JSC::SymbolTable::cloneScopePart(*(JSC::SymbolTable **)&v18[2 * v17 + 2], (JSC::VM *)v6, v10, v11, v12, v13, v14, v15);
    *((_QWORD *)this + 12) = v19;
    if (v19 && *(_DWORD *)(v6 + 760) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath(v6 + 192, (unint64_t)this);
    goto LABEL_19;
  }
  v37 = *v9;
  if (*v9)
    ++*(_DWORD *)(v37 + 8);
  v45.var0.var0 = (SourceProvider *)v37;
  *(_OWORD *)&v45.var1 = *((_OWORD *)this + 3);
  v38 = JSC::ParserError::toErrorObject(&v46, a2, &v45, 0xFFFFFFFFLL, v12, v13, v14, v15);
  JSC::VM::throwException((JSC::VM *)v6, a2, v38, v39, v40, v41, v42, v43);
  var0 = v45.var0.var0;
  v45.var0.var0 = 0;
  if (var0)
  {
    if (*((_DWORD *)var0 + 2) != 1)
    {
      v2 = 0;
      --*((_DWORD *)var0 + 2);
      goto LABEL_19;
    }
    (*(void (**)(SourceProvider *))(*(_QWORD *)var0 + 8))(var0);
  }
  v2 = 0;
LABEL_19:
  v27 = v53;
  v53 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  return v2;
}

unint64_t JSC::ModuleProgramExecutable::create(JSC::ModuleProgramExecutable *this, SourceCode *a2, const SourceCode *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::Heap *v11;
  unint64_t SlowCase;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v10 = *((_QWORD *)this + 7);
  v11 = *(JSC::Heap **)(v10 + 41064);
  if (!v11)
    v11 = JSC::GCClient::Heap::moduleProgramExecutableSpaceSlow((JSC::Heap **)(v10 + 37552));
  SlowCase = *((_QWORD *)v11 + 3);
  if (SlowCase < *((_QWORD *)v11 + 4))
    goto LABEL_4;
  SlowCase = *((_QWORD *)v11 + 5);
  if ((SlowCase & 1) == 0)
  {
    v14 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v11 + 6);
    *((_QWORD *)v11 + 4) = SlowCase + HIDWORD(v14);
    *((_QWORD *)v11 + 5) = SlowCase + (int)v14;
LABEL_4:
    *((_QWORD *)v11 + 3) = SlowCase + 112;
    goto LABEL_5;
  }
  v15 = (uint64_t)v11;
  JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v15, v10 + 192, 112, 0, 0, v16, v17, v18);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  JSC::ModuleProgramExecutable::ModuleProgramExecutable((JSC::ModuleProgramExecutable *)SlowCase, this, a2);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  JSC::ModuleProgramExecutable::getUnlinkedCodeBlock((JSC::ModuleProgramExecutable *)SlowCase, this);
  return SlowCase;
}

uint64_t JSC::NarrowingNumberPredictionFuzzerAgent::NarrowingNumberPredictionFuzzerAgent(uint64_t result)
{
  unint64_t v1;

  LODWORD(v1) = qword_1ECF4C664;
  *(_DWORD *)(result + 8) = qword_1ECF4C664;
  if ((_DWORD)v1)
    v1 = v1;
  else
    v1 = 1;
  *(_QWORD *)(result + 16) = v1;
  *(_QWORD *)(result + 24) = ((v1 >> 26) | (v1 << 23)) ^ ((v1 ^ (v1 << 23)) >> 17);
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)result = off_1E35A7140;
  return result;
}

void JSC::NarrowingNumberPredictionFuzzerAgent::getPrediction(JSC::NarrowingNumberPredictionFuzzerAgent *this, JSC::CodeBlock *a2, const JSC::CodeOrigin *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v12;
  void *v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  WTF *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  WTF *v41;
  WTF *v42;
  WTF *v43;
  int v44;
  uint64_t v45;
  WTF::PrintStream *v46;
  WTF::PrintStream *v47;
  int v48;
  WTF *v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;

  v12 = (unsigned __int8 *)this + 32;
  if (__ldaxr((unsigned __int8 *)this + 32))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 32);
    goto LABEL_5;
  }
  if (__stxr(1u, v12))
    goto LABEL_4;
LABEL_5:
  if (!a4 || (a4 & 0xFFFFFF8CFFFFFFFFLL) != 0)
    goto LABEL_47;
  v51 = 0;
  v52 = 0;
  {
    v45 = WTF::fastMalloc((WTF *)0x28);
    *(_OWORD *)v45 = constinit;
    *(_OWORD *)(v45 + 16) = unk_199159048;
    *(_QWORD *)(v45 + 32) = 0x4000000000;
    JSC::NumberPredictionFuzzerAgent::bytecodeNumberTypes(void)::s_bytecodeNumberTypes = v45;
    JSC::NumberPredictionFuzzerAgent::bytecodeNumberTypes(void)::s_bytecodeNumberTypes = 1;
LABEL_11:
    v14 = (void *)WTF::fastMalloc((WTF *)0x28);
    v15 = (unint64_t)v14;
    if (JSC::NumberPredictionFuzzerAgent::bytecodeNumberTypes(void)::s_bytecodeNumberTypes)
      v16 = 40;
    else
      v16 = 0;
    memcpy(v14, (const void *)JSC::NumberPredictionFuzzerAgent::bytecodeNumberTypes(void)::s_bytecodeNumberTypes, v16);
    for (i = 0; i != 40; i += 8)
    {
      v25 = *(WTF **)(v15 + i);
      v50 = v25;
      if (((unint64_t)v25 & a4) != 0)
      {
        v26 = HIDWORD(v52);
        if (HIDWORD(v52) == (_DWORD)v52)
        {
          WTF::Vector<unsigned long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long long &>((uint64_t)&v51, (unint64_t)&v50);
        }
        else
        {
          *((_QWORD *)v51 + HIDWORD(v52)) = v25;
          HIDWORD(v52) = v26 + 1;
        }
      }
    }
    WTF::fastFree(v15, v17, v18, v19, v20, v21, v22, v23);
    goto LABEL_21;
  }
  if (JSC::NumberPredictionFuzzerAgent::bytecodeNumberTypes(void)::s_bytecodeNumberTypes == 1)
    goto LABEL_11;
LABEL_21:
  v27 = HIDWORD(v52);
  if (HIDWORD(v52) >= 2)
  {
    v29 = *((_QWORD *)this + 2);
    v30 = *((_QWORD *)this + 3);
    do
    {
      v31 = v29 ^ (v29 << 23);
      v29 = v30;
      v30 ^= (v30 >> 26) ^ (v31 >> 17) ^ v31;
    }
    while (0x100000000uLL / HIDWORD(v52) * HIDWORD(v52) <= (v30 + v29));
    *((_QWORD *)this + 2) = v29;
    *((_QWORD *)this + 3) = v30;
    v28 = ((int)v30 + (int)v29) % v27 + 1;
  }
  else
  {
    v28 = 1;
  }
  if (v27 != v28)
  {
    v32 = 0;
    v33 = 0;
    do
    {
      v34 = v27;
      if (v27 >= 2)
      {
        v36 = 0x100000000uLL / v27 * v27;
        v37 = *((_QWORD *)this + 2);
        v38 = *((_QWORD *)this + 3);
        do
        {
          v39 = v37 ^ (v37 << 23);
          v37 = v38;
          v38 ^= (v38 >> 26) ^ (v39 >> 17) ^ v39;
        }
        while (v36 <= (v38 + v37));
        *((_QWORD *)this + 2) = v37;
        *((_QWORD *)this + 3) = v38;
        v35 = ((int)v38 + (int)v37) % v34;
      }
      else
      {
        v35 = 0;
      }
      if (v34 <= v35)
      {
        __break(0xC471u);
        return;
      }
      v33 |= *((_QWORD *)v51 + v35);
      memmove((char *)v51 + 8 * v35, (char *)v51 + 8 * v35 + 8, 8 * v34 - (8 * v35 + 8));
      v27 = --HIDWORD(v52);
      ++v32;
    }
    while (v32 != v28);
    if (BYTE4(qword_1ECF4C664))
    {
      JSC::CodeBlock::inferredName(a2);
      JSC::CodeBlock::hashAsStringIfPossible(a2, (uint64_t *)&v49);
      v40 = *(_QWORD *)a3;
      if ((*(_QWORD *)a3 & 2) != 0)
      {
        LODWORD(v40) = -1;
      }
      else if ((v40 & 1) != 0)
      {
        LODWORD(v40) = *(_DWORD *)((v40 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v40 >>= 36;
      }
      v48 = v40;
      v46 = (WTF::PrintStream *)v33;
      v47 = (WTF::PrintStream *)a4;
      WTF::dataLog<char [59],WTF::CString,char [2],WTF::CString,char [18],JSC::BytecodeIndex,char [13],JSC::SpeculationDump,char [14],JSC::SpeculationDump,char [2],char [2]>(&v50, &v49, (JSC::BytecodeIndex *)&v48, &v47, &v46);
      v41 = v49;
      v49 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 1)
          WTF::fastFree((unint64_t)v41, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        else
          --*(_DWORD *)v41;
      }
      v42 = v50;
      v50 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 1)
          WTF::fastFree((unint64_t)v42, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        else
          --*(_DWORD *)v42;
      }
    }
  }
  v43 = v51;
  if (v51)
  {
    v51 = 0;
    LODWORD(v52) = 0;
    WTF::fastFree((unint64_t)v43, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_47:
  v44 = __ldxr(v12);
  if (v44 != 1)
  {
    __clrex();
    goto LABEL_51;
  }
  if (__stlxr(0, v12))
LABEL_51:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::NativeCallee::NativeCallee(uint64_t result, char a2, char a3)
{
  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 4) = a2;
  *(_BYTE *)(result + 5) = a3;
  return result;
}

{
  *(_DWORD *)result = 1;
  *(_BYTE *)(result + 4) = a2;
  *(_BYTE *)(result + 5) = a3;
  return result;
}

void JSC::NativeCallee::operator delete(JSC::Wasm::Callee *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::Callee *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, (uint64_t)a1, a3, a4, a5, a6, a7, a8);
  if (*((_BYTE *)a1 + 4) == 1)
    JSC::Wasm::Callee::destroy(a1, v9, v10, v11, v12, v13, v14, v15);
}

void JSC::NativeCalleeRegistry::unregisterCallee(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a2;
  if (__ldaxr((unsigned __int8 *)a1))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1);
    goto LABEL_4;
  }
  if (__stxr(1u, (unsigned __int8 *)a1))
    goto LABEL_3;
LABEL_4:
  v10 = (uint64_t *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = *(_DWORD *)(v11 - 8);
    v13 = (~(v31 << 32) + v31) ^ ((unint64_t)(~(v31 << 32) + v31) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(_QWORD *)(v11 + 8 * v16);
    if (v17 != v31)
    {
      v26 = 1;
      while (v17)
      {
        v16 = ((_DWORD)v16 + v26) & v12;
        v17 = *(_QWORD *)(v11 + 8 * v16);
        ++v26;
        if (v17 == v31)
          goto LABEL_6;
      }
      v16 = *(unsigned int *)(v11 - 4);
    }
LABEL_6:
    if (v16 != *(_DWORD *)(v11 - 4))
    {
      *(_QWORD *)(v11 + 8 * v16) = -1;
      ++*(_DWORD *)(*v10 - 16);
      v18 = *v10;
      v19 = *v10 ? *(_DWORD *)(v18 - 12) - 1 : -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v10;
      if (*v10)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<JSC::NativeCallee *,JSC::NativeCallee *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>>::rehash(v10, v22 >> 1, 0, a4, a5, a6, a7, a8);
      }
    }
  }
  v24 = *(_QWORD *)(a1 + 16);
  if (v24)
  {
    v27 = WTF::HashTable<JSC::NativeCallee *,WTF::KeyValuePair<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>>>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashMap<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<WTF::Box<JSC::PCToCodeOriginMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::NativeCallee *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<WTF::Box<JSC::PCToCodeOriginMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::NativeCallee *>>,JSC::NativeCallee *>(v24, &v31);
    v28 = *(_QWORD *)(a1 + 16);
    if (v27)
    {
      v29 = (_QWORD *)v27;
      if (!v28)
      {
        a3 = 0;
        goto LABEL_30;
      }
      v30 = *(unsigned int *)(v28 - 4);
    }
    else
    {
      if (!v28)
        goto LABEL_16;
      v30 = *(unsigned int *)(v28 - 4);
      v29 = (_QWORD *)(v28 + 16 * v30);
    }
    a3 = v28 + 16 * v30;
LABEL_30:
    if ((_QWORD *)a3 != v29)
      WTF::HashTable<JSC::NativeCallee *,WTF::KeyValuePair<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>>>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashMap<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<WTF::Box<JSC::PCToCodeOriginMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::NativeCallee *>>::removeWithoutEntryConsistencyCheck((uint64_t *)(a1 + 16), v29, a3, a4, a5, a6, a7, a8);
  }
LABEL_16:
  v25 = __ldxr((unsigned __int8 *)a1);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, (unsigned __int8 *)a1))
LABEL_20:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a1, 0, a3, a4, a5, a6, a7, a8);
}

_QWORD *WTF::HashTable<JSC::NativeCallee *,JSC::NativeCallee *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t *)(v11 + 8 * v22);
      v25 = *v24;
      if ((unint64_t)(*v24 + 1) >= 2)
      {
        v26 = *a1;
        v27 = *a1 ? *(_DWORD *)(v26 - 8) : 0;
        v28 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
        v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
        v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
        v31 = v27 & ((v30 >> 31) ^ v30);
        v32 = 1;
        do
        {
          v33 = v31;
          v34 = *(_QWORD *)(v26 + 8 * v31);
          v31 = (v31 + v32++) & v27;
        }
        while (v34);
        v35 = (_QWORD *)(v26 + 8 * v33);
        *v35 = v25;
        if (v24 == (uint64_t *)a3)
          v23 = v35;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
  }
  if (v11)
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void WTF::HashTable<JSC::NativeCallee *,WTF::KeyValuePair<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>>>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashMap<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<WTF::Box<JSC::PCToCodeOriginMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::NativeCallee *>>::removeWithoutEntryConsistencyCheck(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v19;
  unint64_t v20;

  v9 = *a1;
  if (*a1)
    v9 += 16 * *(unsigned int *)(v9 - 4);
  if ((_QWORD *)v9 != a2)
  {
    v10 = a2[1];
    *a2 = -1;
    a2[1] = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr((unsigned int *)v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, (unsigned int *)v10));
      if (!v12)
      {
        atomic_store(1u, (unsigned int *)v10);
        v19 = *(_QWORD *)(v10 + 24);
        if (v19)
          WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
        v20 = *(_QWORD *)(v10 + 32);
        if (v20)
          WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    ++*(_DWORD *)(*a1 - 16);
    v13 = *a1;
    if (*a1)
      v14 = *(_DWORD *)(v13 - 12) - 1;
    else
      v14 = -1;
    *(_DWORD *)(v13 - 12) = v14;
    v15 = *a1;
    if (*a1)
    {
      v16 = 6 * *(_DWORD *)(v15 - 12);
      v17 = *(_DWORD *)(v15 - 4);
      if (v16 < v17 && v17 >= 9)
        WTF::HashTable<JSC::NativeCallee *,WTF::KeyValuePair<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>>>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashMap<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<WTF::Box<JSC::PCToCodeOriginMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::NativeCallee *>>::rehash(a1, v17 >> 1, 0);
    }
  }
}

uint64_t *WTF::HashTable<JSC::NativeCallee *,WTF::KeyValuePair<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>>>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashMap<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<WTF::Box<JSC::PCToCodeOriginMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::NativeCallee *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (uint64_t *)(v6 + 16 * v19);
      v22 = *v21;
      if (*v21 != -1)
      {
        if (v22)
        {
          v29 = *a1;
          if (*a1)
            v30 = *(_DWORD *)(v29 - 8);
          else
            v30 = 0;
          v31 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(v22);
          v32 = 0;
          do
          {
            v33 = v31 & v30;
            v31 = ++v32 + v33;
          }
          while (*(_QWORD *)(v29 + 16 * v33));
          v34 = (uint64_t *)(v29 + 16 * v33);
          v35 = v34[1];
          v34[1] = 0;
          if (v35)
          {
            do
            {
              v36 = __ldaxr((unsigned int *)v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, (unsigned int *)v35));
            if (!v37)
            {
              atomic_store(1u, (unsigned int *)v35);
              v43 = *(_QWORD *)(v35 + 24);
              if (v43)
                WTF::fastFree(v43, v10, v11, v12, v13, v14, v15, v16);
              v44 = *(_QWORD *)(v35 + 32);
              if (v44)
                WTF::fastFree(v44, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v35, v10, v11, v12, v13, v14, v15, v16);
            }
          }
          *v34 = *v21;
          v38 = v6 + 16 * v19;
          v39 = *(_QWORD *)(v38 + 8);
          *(_QWORD *)(v38 + 8) = 0;
          v34[1] = v39;
          v40 = *(_QWORD *)(v38 + 8);
          *(_QWORD *)(v38 + 8) = 0;
          if (v40)
          {
            do
            {
              v41 = __ldaxr((unsigned int *)v40);
              v42 = v41 - 1;
            }
            while (__stlxr(v42, (unsigned int *)v40));
            if (!v42)
            {
              atomic_store(1u, (unsigned int *)v40);
              v45 = *(_QWORD *)(v40 + 24);
              if (v45)
                WTF::fastFree(v45, v10, v11, v12, v13, v14, v15, v16);
              v46 = *(_QWORD *)(v40 + 32);
              if (v46)
                WTF::fastFree(v46, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v40, v10, v11, v12, v13, v14, v15, v16);
            }
          }
          if (v21 == a3)
            v20 = v34;
        }
        else
        {
          v23 = v6 + 16 * v19;
          v24 = *(_QWORD *)(v23 + 8);
          *(_QWORD *)(v23 + 8) = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr((unsigned int *)v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, (unsigned int *)v24));
            if (!v26)
            {
              atomic_store(1u, (unsigned int *)v24);
              v27 = *(_QWORD *)(v24 + 24);
              if (v27)
                WTF::fastFree(v27, v10, v11, v12, v13, v14, v15, v16);
              v28 = *(_QWORD *)(v24 + 32);
              if (v28)
                WTF::fastFree(v28, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v24, v10, v11, v12, v13, v14, v15, v16);
            }
          }
        }
      }
      ++v19;
    }
    while (v19 != v7);
  }
  else
  {
    v20 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v20;
}

uint64_t WTF::HashTable<JSC::NativeCallee *,WTF::KeyValuePair<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>>>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashMap<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<WTF::Box<JSC::PCToCodeOriginMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::NativeCallee *>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<JSC::NativeCallee *,WTF::Box<JSC::PCToCodeOriginMap>,WTF::DefaultHash<JSC::NativeCallee *>,WTF::HashTraits<JSC::NativeCallee *>,WTF::HashTraits<WTF::Box<JSC::PCToCodeOriginMap>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::NativeCallee *>>,JSC::NativeCallee *>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(*a2) & v4;
    v6 = *(_QWORD *)(v3 + 16 * v5);
    if (v6 == *a2)
    {
      return v3 + 16 * v5;
    }
    else
    {
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v4;
        v6 = *(_QWORD *)(v3 + 16 * v5);
        ++v7;
        if (v6 == *a2)
          return v3 + 16 * v5;
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::dataLog<char [59],WTF::CString,char [2],WTF::CString,char [18],JSC::BytecodeIndex,char [13],JSC::SpeculationDump,char [14],JSC::SpeculationDump,char [2],char [2]>(_QWORD *a1, _QWORD *a2, JSC::BytecodeIndex *a3, WTF::PrintStream **a4, WTF::PrintStream **a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  const char *v13;
  const char *v14;
  char v16;
  char **v17;
  char *v18;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v12, "%s", "NarrowingNumberPredictionFuzzerAgent::getPrediction name:(");
  if (*a1)
    v13 = (const char *)(*a1 + 16);
  else
    v13 = 0;
  WTF::PrintStream::printf(v12, "%s", v13);
  WTF::PrintStream::printf(v12, "%s", "#");
  if (*a2)
    v14 = (const char *)(*a2 + 16);
  else
    v14 = 0;
  WTF::PrintStream::printf(v12, "%s", v14);
  WTF::PrintStream::printf(v12, "%s", "),bytecodeIndex:(");
  JSC::BytecodeIndex::dump(a3, v12);
  WTF::PrintStream::printf(v12, "%s", "),original:(");
  JSC::dumpSpeculation(v12, *a4);
  WTF::PrintStream::printf(v12, "%s", "),generated:(");
  JSC::dumpSpeculation(v12, *a5);
  WTF::PrintStream::printf(v12, "%s", ")");
  WTF::PrintStream::printf(v12, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
}

void JSC::NativeErrorConstructorBase::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char **v11;
  char *v12;
  int v13;
  char *v14;
  int *v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  v11 = &(&JSC::errorTypeName(JSC::ErrorTypeWithExtension)::errorTypeNames)[2 * a4];
  v12 = v11[1];
  if (v12)
  {
    v13 = (_DWORD)v12 - 1;
    if (v12 == (char *)1)
    {
      v15 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v14 = *v11;
      v15 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v15 = 2;
      v15[1] = v13;
      *((_QWORD *)v15 + 1) = v14;
      v15[4] = 4;
    }
  }
  else
  {
    v15 = 0;
  }
  v33 = (WTF::StringImpl *)v15;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)1, (JSC::VM *)&v33, 1, a6, a7, a8);
  v24 = v33;
  v33 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), a3, 14, v20, v21, v22, v23);
}

uint64_t JSC::NativeErrorConstructor<(JSC::ErrorType)2>::NativeErrorConstructor(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return JSC::InternalFunction::InternalFunction(a1, a2, a3, (uint64_t)JSC::callRangeError, JSC::constructRangeError);
}

unint64_t JSC::NativeErrorConstructor<(JSC::ErrorType)2>::constructImpl(JSC::VM **a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  unint64_t v20;
  uint64_t v22[3];
  uint64_t v23;
  JSC::VM **v24;

  v24 = a1;
  v8 = a1[7];
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v9 = 10;
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 48);
    if (*(_DWORD *)(a2 + 32) != 2)
    {
      v10 = *(_QWORD *)(a2 + 56);
      goto LABEL_4;
    }
  }
  v10 = 10;
LABEL_4:
  v23 = *(_QWORD *)(a2 + 40);
  if (v23 == *(_QWORD *)(a2 + 24))
  {
    v11 = JSC::LazyClassStructure::get((JSC::LazyClassStructure *)(a1 + 16), (unint64_t)a1);
  }
  else
  {
    v22[0] = (uint64_t)v8;
    v22[1] = (uint64_t)&v24;
    v22[2] = (uint64_t)&v23;
    v11 = (uint64_t)JSC::NativeErrorConstructor<(JSC::ErrorType)2>::constructImpl(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(v22, a2, a3, a4, a5, a6, a7, a8);
  }
  v20 = v11;
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8, v12, v13, v14, v15, v16, v17, v18))
    return 0;
  else
    return JSC::ErrorInstance::create((JSC::JSGlobalObject *)v24, v20, v9, v10, 0, 0, 2, 0, v19);
}

JSC::JSObject *JSC::NativeErrorConstructor<(JSC::ErrorType)2>::constructImpl(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[16];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 16);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::NativeErrorConstructor<(JSC::ErrorType)3>::NativeErrorConstructor(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return JSC::InternalFunction::InternalFunction(a1, a2, a3, (uint64_t)JSC::callReferenceError, JSC::constructReferenceError);
}

unint64_t JSC::NativeErrorConstructor<(JSC::ErrorType)3>::constructImpl(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  unint64_t v20;
  uint64_t v22[3];
  uint64_t v23;
  JSC::JSGlobalObject *v24;

  v24 = a1;
  v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v9 = 10;
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 48);
    if (*(_DWORD *)(a2 + 32) != 2)
    {
      v10 = *(_QWORD *)(a2 + 56);
      goto LABEL_4;
    }
  }
  v10 = 10;
LABEL_4:
  v23 = *(_QWORD *)(a2 + 40);
  if (v23 == *(_QWORD *)(a2 + 24))
  {
    v11 = JSC::JSGlobalObject::errorStructure((unint64_t)a1, 3);
  }
  else
  {
    v22[0] = (uint64_t)v8;
    v22[1] = (uint64_t)&v24;
    v22[2] = (uint64_t)&v23;
    v11 = (uint64_t)JSC::NativeErrorConstructor<(JSC::ErrorType)3>::constructImpl(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(v22, a2, a3, a4, a5, a6, a7, a8);
  }
  v20 = v11;
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8, v12, v13, v14, v15, v16, v17, v18))
    return 0;
  else
    return JSC::ErrorInstance::create(v24, v20, v9, v10, 0, 0, 3, 0, v19);
}

JSC::JSObject *JSC::NativeErrorConstructor<(JSC::ErrorType)3>::constructImpl(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[18];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 18);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

unint64_t JSC::NativeErrorConstructor<(JSC::ErrorType)5>::constructImpl(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  unint64_t v20;
  uint64_t v22[3];
  uint64_t v23;
  JSC::JSGlobalObject *v24;

  v24 = a1;
  v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v9 = 10;
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 48);
    if (*(_DWORD *)(a2 + 32) != 2)
    {
      v10 = *(_QWORD *)(a2 + 56);
      goto LABEL_4;
    }
  }
  v10 = 10;
LABEL_4:
  v23 = *(_QWORD *)(a2 + 40);
  if (v23 == *(_QWORD *)(a2 + 24))
  {
    v11 = JSC::JSGlobalObject::errorStructure((unint64_t)a1, 5);
  }
  else
  {
    v22[0] = (uint64_t)v8;
    v22[1] = (uint64_t)&v24;
    v22[2] = (uint64_t)&v23;
    v11 = (uint64_t)JSC::NativeErrorConstructor<(JSC::ErrorType)5>::constructImpl(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(v22, a2, a3, a4, a5, a6, a7, a8);
  }
  v20 = v11;
  if (*((_DWORD *)v8 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v8, v12, v13, v14, v15, v16, v17, v18))
    return 0;
  else
    return JSC::ErrorInstance::create(v24, v20, v9, v10, 0, 0, 5, 0, v19);
}

JSC::JSObject *JSC::NativeErrorConstructor<(JSC::ErrorType)5>::constructImpl(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[22];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 22);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::NativeErrorConstructor<(JSC::ErrorType)6>::NativeErrorConstructor(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return JSC::InternalFunction::InternalFunction(a1, a2, a3, (uint64_t)JSC::callURIError, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructURIError);
}

unsigned int *JSC::NativeExecutable::destroy(JSC::NativeExecutable *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *result;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  v10 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *, JSC::JSCell *))(*(_QWORD *)v10 + 32))(v10, a2);
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    v15 = result + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 32))(result);
    }
  }
  return result;
}

void JSC::NativeExecutable::visitChildren(JSC::NativeExecutable *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;

  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 9);
  if (v12)
  {
    if ((v12 & 8) != 0)
    {
      if ((*(_BYTE *)(v12 - 79) & 1) == 0)
        goto LABEL_15;
    }
    else
    {
      v13 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != v13)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v13, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFC000) + 8 * ((v12 >> 10) & 0xF) + 0x28) >> (v12 >> 4)) & 1) == 0)
        goto LABEL_15;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_15:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v12, 0, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::NativeExecutable::visitChildren(JSC::NativeExecutable *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD *v11;
  char v12;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v10[0] = a2;
    v10[1] = this;
    v12 = 0;
    v11 = v7;
    *((_QWORD *)a2 + 11) = v10;
    (*(void (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
    *(_QWORD *)(v10[0] + 88) = v11;
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 9));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t JSC::NativeExecutable::create(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, _DWORD **a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t i;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _DWORD **v20;
  uint64_t *v21;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t SlowCase;
  _QWORD *v27;
  _QWORD *v28;

  v9 = (uint64_t)a1;
  v10 = a1 + 11688;
  v11 = a1 + 4841;
  v12 = a1[4841];
  if (v12 < a1[4842])
    goto LABEL_2;
  v12 = a1[4843];
  if ((v12 & 1) == 0)
  {
    v17 = *(_QWORD *)(v12 + 8) ^ a1[4844];
    a1[4842] = v12 + HIDWORD(v17);
    a1[4843] = v12 + (int)v17;
LABEL_2:
    *v11 = v12 + 80;
    goto LABEL_3;
  }
  v27 = a1 + 4838;
  v19 = a1 + 24;
  v20 = a7;
  v21 = a4;
  v23 = a6;
  v24 = a5;
  v25 = a3;
  JSC::sanitizeStackForVM((JSC *)a1, (JSC::VM *)a1, a3, (uint64_t)a4, a5, a6, (uint64_t)a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v27, v19, 80, 0, 0);
  a3 = v25;
  a5 = v24;
  LOBYTE(a6) = v23;
  v9 = (uint64_t)a1;
  a4 = v21;
  a7 = v20;
  v12 = SlowCase;
LABEL_3:
  *(_DWORD *)v12 = 0;
  v13 = v11[355];
  v14 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)v12 = v13 >> 4;
  *(_DWORD *)(v12 + 4) = v14;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_QWORD *)(v12 + 40) = a3;
  *(_QWORD *)(v12 + 48) = a5;
  *(_BYTE *)(v12 + 56) = *(_BYTE *)(v12 + 56) & 0xFC | a6 & 3;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  JSC::NativeExecutable::finishCreation((_QWORD *)v12, v9, a2, a4, a7);
  for (i = *v10; i; i = *(_QWORD *)(i + 224))
  {
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v18 = off_1E358BE38;
    v18[1] = v12;
    v28 = v18;
    JSC::Debugger::dispatchFunctionToObservers(i, &v28);
    (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  }
  return v12;
}

uint64_t JSC::NativeExecutable::finishCreation(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _DWORD **a5)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  v8 = *a3;
  *a3 = 0;
  v9 = (unsigned int *)a1[1];
  a1[1] = v8;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 32))(v9);
    }
  }
  v13 = *a4;
  *a4 = 0;
  v14 = (unsigned int *)a1[2];
  a1[2] = v13;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v14 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 32))(v14);
    }
  }
  a1[3] = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)a1[1] + 40))(a1[1], 1);
  a1[4] = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)a1[2] + 40))(a1[2], 1);
  v25 = *a5;
  if (*a5)
    *v25 += 2;
  v26 = (WTF::StringImpl *)a1[8];
  a1[8] = v25;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)a1[1] + 40))(a1[1], 0);
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a1[2] + 40))(a1[2], 0);
}

uint64_t JSC::NativeExecutable::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 33554440;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::NativeExecutable::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::NativeExecutable::toStringSlow(JSC::NativeExecutable *this, JSC::JSGlobalObject *a2)
{
  JSC::VM *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[2];

  v3 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v14[0] = "function ";
  v14[1] = 10;
  v13[0] = "() {\n    [native code]\n}";
  v13[1] = 25;
  v11 = JSC::jsMakeNontrivialString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>(a2, (uint64_t)v14, (uint64_t *)this + 8, (uint64_t)v13);
  if (*((_DWORD *)v3 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v3, v4, v5, v6, v7, v8, v9, v10))
    return 0;
  __dmb(0xAu);
  *((_QWORD *)this + 9) = v11;
  if (this && v11 && *((_DWORD *)v3 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3 + 192, (unint64_t)this);
  return v11;
}

uint64_t JSC::NullGetterFunctionInternal::callReturnUndefined(JSC::NullGetterFunctionInternal *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return 10;
}

uint64_t JSC::NullSetterFunctionInternal::callThrowError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v4;
  JSC::Heap **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  JSC::Exception *v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(WTF::StringImpl **, JSC::JSGlobalObject *, JSC::CallFrame *);
  WTF::StringImpl **v33;
  WTF::StringImpl *v34[3];

  v4 = *(_QWORD *)(this + 176);
  v5 = *(JSC::Heap ***)(this + 56);
  if ((v4 & 1) != 0)
  {
    v32 = *(uint64_t (**)(WTF::StringImpl **, JSC::JSGlobalObject *, JSC::CallFrame *))(v4 & 0xFFFFFFFFFFFFFFFCLL);
    v33 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v33 = (WTF::StringImpl **)(this - 16);
    v34[0] = *v33;
    v34[1] = (WTF::StringImpl *)this;
    v34[2] = (WTF::StringImpl *)(this + 176);
    v4 = v32(v34, a2, a3);
  }
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x2900000002;
  *(_QWORD *)(v6 + 8) = "Attempted to assign to readonly property.";
  *(_DWORD *)(v6 + 16) = 4;
  v34[0] = (WTF::StringImpl *)v6;
  v7 = JSC::ErrorInstance::create(v5, v4, v34, 0, 0, 0, 5, 0);
  v14 = (JSC::Exception *)v7;
  if ((v7 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x4C)))
  {
    v14 = (JSC::Exception *)JSC::Exception::create((uint64_t)v5, (JSC::VM *)v7, 0, v8, v9, v10, v11, v12);
  }
  JSC::VM::throwException((JSC::VM *)v5, (JSC::JSGlobalObject *)this, v14, v13, v8, v9, v10, v11, v12);
  v22 = v34[0];
  v34[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  return 0;
}

uint64_t JSC::NullSetterFunctionInternal::callReturnUndefined(JSC::NullSetterFunctionInternal *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return 10;
}

unint64_t JSC::NumberConstructor::create(uint64_t *a1, unint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v11;
  uint64_t v12;
  JSC::VM *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t HostFunction;
  unint64_t SlowCase;
  JSC::JSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v11 = (unint64_t *)(a1 + 4786);
  v12 = *(_QWORD *)(a2 + 40);
  HostFunction = JSC::VM::getHostFunction(a1, (uint64_t)JSC::callNumberConstructor, 0, 90, (unint64_t)JSC::constructNumberConstructor, 0, (WTF::StringImpl **)(a1[5244] + 680), a8);
  SlowCase = *v11;
  if (*v11 >= v11[1])
  {
    SlowCase = v11[2];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)a1, v13, v14, v15, v16, v17, v18, v19);
      SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 4783), (uint64_t)(a1 + 24), 32, 0, 0, v31, v32, v33);
      goto LABEL_3;
    }
    v30 = *(_QWORD *)(SlowCase + 8) ^ v11[3];
    v11[1] = SlowCase + HIDWORD(v30);
    v11[2] = SlowCase + (int)v30;
  }
  *v11 = SlowCase + 32;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v22 = (JSC::JSObject *)JSC::JSCallee::JSCallee(SlowCase, (uint64_t)a1, v12, a2);
  *(_QWORD *)(SlowCase + 24) = HostFunction;
  JSC::NumberConstructor::finishCreation(v22, (uint64_t)a1, a3, v28, v23, v24, v25, v26, v27);
  return SlowCase;
}

unint64_t JSC::callNumberConstructor(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  unint64_t v11;
  int v13;
  JSC::JSString *v14;
  double v15;
  JSC::JSGlobalObject *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL hasExceptionsAfterHandlingTraps;
  BOOL v20;
  JSC::JSGlobalObject *v21;
  double v22;
  JSC::JSObject *v23;

  if (*((_DWORD *)a2 + 8) == 1)
    return 0xFFFE000000000000;
  v9 = (JSC::JSGlobalObject *)this;
  v10 = this[7];
  v11 = *((_QWORD *)a2 + 6);
  if (!(v11 >> 49))
  {
    if ((v11 & 0xFFFE000000000002) == 0)
    {
      v13 = *(unsigned __int8 *)(v11 + 5);
      if (v13 == 3)
        goto LABEL_3;
      v14 = (JSC::JSString *)*((_QWORD *)a2 + 6);
      if (v13 == 2)
      {
        JSC::JSString::toNumber(v14, v9, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        goto LABEL_24;
      }
      v16 = v9;
      v17 = JSC::JSCell::toPrimitive((uint64_t)v14, (JSC::VM **)v9, (JSC::Structure *)1, a4, a5, a6, a7, a8);
      v9 = v16;
      v11 = v17;
    }
    v23 = (JSC::JSObject *)v11;
    if (*((_DWORD *)v10 + 20))
    {
      v21 = v9;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v9 = v21;
      if (hasExceptionsAfterHandlingTraps)
      {
LABEL_31:
        v11 = 0;
        goto LABEL_3;
      }
    }
    if (v11 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_3;
    if ((v11 & 0xFFFE000000000002) != 0)
    {
      if (v11 >= 0xFFFE000000000000)
      {
        v15 = (double)(int)v11;
LABEL_23:
        if (!*((_DWORD *)v10 + 20)
          || (v22 = v15,
              v20 = JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8),
              v15 = v22,
              !v20))
        {
LABEL_24:
          if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v18 = (int)v15, v15 == (double)(int)v18)
            && ((_DWORD)v18 || (*(_QWORD *)&v15 & 0x8000000000000000) == 0))
          {
            v11 = v18 | 0xFFFE000000000000;
          }
          else
          {
            v11 = *(_QWORD *)&v15 + 0x2000000000000;
          }
          goto LABEL_3;
        }
        goto LABEL_31;
      }
    }
    else if (*(_BYTE *)(v11 + 5) == 3)
    {
      goto LABEL_3;
    }
    JSC::JSValue::toNumberSlowCase(&v23, v9, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_23;
  }
LABEL_3:
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if (!(v11 >> 49))
    return JSC::JSBigInt::toNumberHeap((JSC::JSBigInt *)v11, a2);
  return v11;
}

unint64_t JSC::constructNumberConstructor(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  double v12;
  unint64_t v13;
  JSC::JSGlobalObject *v14;
  JSC::JSGlobalObject *i;
  char **v16;
  unint64_t v17;
  unint64_t v18;
  JSC::JSObject *SubclassStructure;
  JSC::JSObject *v20;
  unint64_t SlowCase;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int v26;
  double v27;
  int v28;
  unint64_t v29;
  int v30;
  uint64_t (*v31)(JSC::JSObject **);
  JSC::JSObject **v32;
  int v33;
  uint64_t (*v34)(JSC::JSObject **);
  JSC::JSObject **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  double v43;
  int v44;
  JSC::JSObject *v45;
  unint64_t v46;
  char *v47;

  v11 = *(_QWORD *)(this + 56);
  v12 = 0.0;
  if (*((_DWORD *)a2 + 8) == 1)
    goto LABEL_9;
  v13 = *((_QWORD *)a2 + 6);
  if (!(v13 >> 49))
  {
    if ((v13 & 0xFFFE000000000002) == 0)
    {
      v26 = *(unsigned __int8 *)(v13 + 5);
      if (v26 == 3)
        goto LABEL_3;
      if (v26 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)v13, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
LABEL_78:
        if ((*(_QWORD *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v40 = (int)v27, v27 == (double)(int)v40)
          && ((_DWORD)v40 || (*(_QWORD *)&v27 & 0x8000000000000000) == 0))
        {
          v13 = v40 | 0xFFFE000000000000;
        }
        else
        {
          v13 = *(_QWORD *)&v27 + 0x2000000000000;
        }
        goto LABEL_3;
      }
      v13 = JSC::JSCell::toPrimitive(v13, (JSC::VM **)this, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    }
    v45 = (JSC::JSObject *)v13;
    if (*(_DWORD *)(v11 + 80))
    {
      v41 = v13;
      v42 = *(_DWORD *)(v11 + 80);
      if ((v42 & 0x27) != 0 && (v42 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v41;
      if (*(_QWORD *)(v11 + 16))
      {
LABEL_89:
        v13 = 0;
        goto LABEL_3;
      }
    }
    if (v13 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_3;
    if ((v13 & 0xFFFE000000000002) != 0)
    {
      if (v13 >= 0xFFFE000000000000)
      {
        v27 = (double)(int)v13;
LABEL_77:
        if (!*(_DWORD *)(v11 + 80))
          goto LABEL_78;
        v43 = v27;
        v44 = *(_DWORD *)(v11 + 80);
        if ((v44 & 0x27) != 0 && (v44 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v27 = v43;
        if (!*(_QWORD *)(v11 + 16))
          goto LABEL_78;
        goto LABEL_89;
      }
    }
    else if (*(_BYTE *)(v13 + 5) == 3)
    {
      goto LABEL_3;
    }
    JSC::JSValue::toNumberSlowCase(&v45, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    goto LABEL_77;
  }
LABEL_3:
  if (*(_DWORD *)(v11 + 80))
  {
    v33 = *(_DWORD *)(v11 + 80);
    if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
    {
      v39 = v13;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v39;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (!(v13 >> 49))
    v13 = JSC::JSBigInt::toNumberHeap((JSC::JSBigInt *)v13, a2);
  if (v13 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v12 = v13 - 0x2000000000000;
  else
    v12 = (double)(int)v13;
LABEL_9:
  v14 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v14 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v20 = *(JSC::JSObject **)(this + 1536);
    if ((v20 & 1) == 0)
      goto LABEL_23;
    v34 = *(uint64_t (**)(JSC::JSObject **))((unint64_t)v20 & 0xFFFFFFFFFFFFFFFCLL);
    v35 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v35 = (JSC::JSObject **)(this - 16);
    v45 = *v35;
    v46 = this;
    v47 = (char *)(this + 1536);
    SubclassStructure = (JSC::JSObject *)v34(&v45);
  }
  else
  {
    v45 = *(JSC::JSObject **)(this + 56);
    for (i = v14; ; i = (JSC::JSGlobalObject *)*((_QWORD *)i + 2))
    {
      while (1)
      {
        v16 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v16 != &JSC::JSBoundFunction::s_info && v16 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v17 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_18;
      }
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v45, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v17 = 0;
LABEL_18:
    if (*(_DWORD *)(v11 + 80))
    {
      v30 = *(_DWORD *)(v11 + 80);
      if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v11 + 16))
      {
        v20 = 0;
        goto LABEL_23;
      }
    }
    v18 = *(_QWORD *)(v17 + 1536);
    if ((v18 & 1) != 0)
    {
      v31 = *(uint64_t (**)(JSC::JSObject **))(v18 & 0xFFFFFFFFFFFFFFFCLL);
      v32 = (JSC::JSObject **)(v17 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v17 & 8) != 0)
        v32 = (JSC::JSObject **)(v17 - 16);
      v45 = *v32;
      v46 = v17;
      v47 = (char *)(v17 + 1536);
      v18 = v31(&v45);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v14, (JSC::JSObject *)v18, a4, a5, a6, a7, a8);
  }
  v20 = SubclassStructure;
LABEL_23:
  if (*(_DWORD *)(v11 + 80))
  {
    v28 = *(_DWORD *)(v11 + 80);
    if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  SlowCase = *(_QWORD *)(v11 + 38816);
  if (SlowCase >= *(_QWORD *)(v11 + 38824))
  {
    SlowCase = *(_QWORD *)(v11 + 38832);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v11, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v11 + 38792, v11 + 192, 32, 0, 0, v36, v37, v38);
      goto LABEL_26;
    }
    v29 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v11 + 38840);
    *(_QWORD *)(v11 + 38824) = SlowCase + HIDWORD(v29);
    *(_QWORD *)(v11 + 38832) = SlowCase + (int)v29;
  }
  *(_QWORD *)(v11 + 38816) = SlowCase + 32;
LABEL_26:
  *(_DWORD *)SlowCase = 0;
  v22 = *((_DWORD *)v20 + 2);
  *(_DWORD *)SlowCase = (unint64_t)v20 >> 4;
  *(_DWORD *)(SlowCase + 4) = v22;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v23 = (int)v12, v12 == (double)(int)v23)
    && ((_DWORD)v23 || (*(_QWORD *)&v12 & 0x8000000000000000) == 0))
  {
    v24 = v23 | 0xFFFE000000000000;
  }
  else
  {
    v24 = *(_QWORD *)&v12 + 0x2000000000000;
  }
  *(_QWORD *)(SlowCase + 16) = v24;
  if (v24
    && (v24 & 0xFFFE000000000002) == 0
    && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v11 + 192, SlowCase);
  }
  return SlowCase;
}

void JSC::NumberConstructor::finishCreation(JSC::JSObject *a1, uint64_t a2, _DWORD *a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  unint64_t v18;
  const WTF::String *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  WTF::AtomStringImpl *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __n128 v99;
  WTF::AtomStringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __n128 v111;
  WTF::AtomStringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __n128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __n128 v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __n128 v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  int v140;
  WTF::StringImpl *v141;
  WTF::AtomStringImpl *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __n128 v150;
  WTF::StringImpl *v151;
  WTF::AtomStringImpl *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t (*v241)(WTF::StringImpl **);
  WTF::StringImpl **v242;
  uint64_t (*v243)(WTF::StringImpl **);
  WTF::StringImpl **v244;
  WTF::StringImpl *v245;
  uint64_t v246;
  uint64_t v247;

  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(16 * (*a3 & 0xFFFFFFFE) + 0x28);
  v13 = a2 + 41952;
  JSC::JSObject::putDirectWithoutTransition(a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 2160), (uint64_t)a3, 14, a7, a8, a9, a4);
  JSC::JSObject::putDirectWithoutTransition(a1, a2, *(_QWORD *)(*(_QWORD *)v13 + 1768), 0xFFFE000000000001, 6, v14, v15, v16, v17);
  v18 = *(_QWORD *)(*(_QWORD *)v13 + 1968);
  v25 = JSC::jsString((JSC *)a2, (JSC::VM *)(*(_QWORD *)v13 + 680), v19, v20, v21, v22, v23, v24);
  JSC::JSObject::putDirectWithoutTransition(a1, a2, v18, v25, 6, v26, v27, v28, v29);
  WTF::AtomStringImpl::addLiteral((uint64_t)"EPSILON", 7uLL, v30, v31, v32, v33, v34, &v245);
  v35 = v245;
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)v245, 0x3CB2000000000000, 14, v36, v37, v38, v39);
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"MAX_VALUE", 9uLL, v42, v43, v44, v45, v46, &v245);
  v47 = v245;
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)v245, 0x7FF1FFFFFFFFFFFFLL, 14, v48, v49, v50, v51);
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"MIN_VALUE", 9uLL, v54, v55, v56, v57, v58, &v245);
  v59 = v245;
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)v245, 0x2000000000001, 14, v60, v61, v62, v63);
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v177, v178, v179, v180, v181, v182, v183, v184);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"MAX_SAFE_INTEGER", 0x10uLL, v66, v67, v68, v69, v70, &v245);
  v71 = v245;
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)v245, 0x4341FFFFFFFFFFFFLL, 14, v72, v73, v74, v75);
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"MIN_SAFE_INTEGER", 0x10uLL, v78, v79, v80, v81, v82, &v245);
  v83 = v245;
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)v245, 0xC341FFFFFFFFFFFFLL, 14, v84, v85, v86, v87);
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
    {
      WTF::StringImpl::~StringImpl(v83, v88, v89, v90, v91, v92, v93, v94);
      WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
    }
    else
    {
      *(_DWORD *)v83 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"NEGATIVE_INFINITY", 0x11uLL, v90, v91, v92, v93, v94, &v245);
  v95 = v245;
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)v245, 0xFFF2000000000000, 14, v96, v97, v98, v99);
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v100, v101, v102, v103, v104, v105, v106);
      WTF::fastFree(v201, v202, v203, v204, v205, v206, v207, v208);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"POSITIVE_INFINITY", 0x11uLL, v102, v103, v104, v105, v106, &v245);
  v107 = v245;
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)v245, 0x7FF2000000000000, 14, v108, v109, v110, v111);
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v112, v113, v114, v115, v116, v117, v118);
      WTF::fastFree(v209, v210, v211, v212, v213, v214, v215, v216);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, a2, *(_QWORD *)(*(_QWORD *)v13 + 672), 0x7FFA000000000000, 14, v116, v117, v118, v119);
  v124 = *(_QWORD *)(*(_QWORD *)v13 + 2128);
  v125 = *(_QWORD *)(16 * (*a3 & 0xFFFFFFFE) + 0x28);
  v126 = *(_QWORD *)(v125 + 496);
  if ((v126 & 1) != 0)
  {
    v241 = *(uint64_t (**)(WTF::StringImpl **))(v126 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v125 & 8) != 0)
      v242 = (WTF::StringImpl **)(v125 - 16);
    else
      v242 = (WTF::StringImpl **)(v125 & 0xFFFFFFFFFFFFC000 | 8);
    v245 = *v242;
    v246 = v125;
    v247 = v125 + 496;
    v126 = v241(&v245);
  }
  JSC::JSObject::putDirectWithoutTransition(a1, a2, v124, v126, 4, v120, v121, v122, v123);
  v131 = *(_QWORD *)(*(_QWORD *)v13 + 2136);
  v132 = *(_QWORD *)(16 * (*a3 & 0xFFFFFFFE) + 0x28);
  v133 = *(_QWORD *)(v132 + 504);
  if ((v133 & 1) != 0)
  {
    v243 = *(uint64_t (**)(WTF::StringImpl **))(v133 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v132 & 8) != 0)
      v244 = (WTF::StringImpl **)(v132 - 16);
    else
      v244 = (WTF::StringImpl **)(v132 & 0xFFFFFFFFFFFFC000 | 8);
    v245 = *v244;
    v246 = v132;
    v247 = v132 + 504;
    v133 = v243(&v245);
  }
  JSC::JSObject::putDirectWithoutTransition(a1, a2, v131, v133, 4, v127, v128, v129, v130);
  WTF::AtomStringImpl::addLiteral((uint64_t)"isInteger", 9uLL, v134, v135, v136, v137, v138, &v245);
  v139 = v245;
  if (!v245)
  {
    v245 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(a1, a2, v12, (unint64_t *)&v245, 1, (uint64_t)JSC::numberConstructorFuncIsInteger, 0, 89, 4u);
    return;
  }
  v140 = *(_DWORD *)v245 + 2;
  *(_DWORD *)v245 = v140;
  if ((*((_BYTE *)v139 + 16) & 0x20) != 0)
  {
    v141 = *(WTF::StringImpl **)(*(_QWORD *)v13 + 872);
    if (!v141)
      goto LABEL_30;
    v140 = *(_DWORD *)v141;
  }
  else
  {
    v141 = v139;
  }
  *(_DWORD *)v141 = v140 + 2;
LABEL_30:
  v245 = v141;
  v149 = JSC::JSFunction::create(a2, v12, 1, &v245, (uint64_t)JSC::numberConstructorFuncIsInteger, 0, 89, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v151 = v245;
  v245 = 0;
  if (v151)
  {
    if (*(_DWORD *)v151 == 2)
    {
      WTF::StringImpl::~StringImpl(v151, v142, v143, v144, v145, v146, v147, v148);
      WTF::fastFree(v233, v234, v235, v236, v237, v238, v239, v240);
    }
    else
    {
      *(_DWORD *)v151 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)v139, v149, 4, v146, v147, v148, v150);
  v159 = *(_DWORD *)v139 - 2;
  if (*(_DWORD *)v139 == 2)
  {
    WTF::StringImpl::~StringImpl(v139, v152, v153, v154, v155, v156, v157, v158);
    WTF::fastFree(v217, v218, v219, v220, v221, v222, v223, v224);
    v159 = *(_DWORD *)v139;
  }
  else
  {
    *(_DWORD *)v139 = v159;
  }
  v160 = v159 - 2;
  if (v160)
  {
    *(_DWORD *)v139 = v160;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v139, v152, v153, v154, v155, v156, v157, v158);
    WTF::fastFree(v225, v226, v227, v228, v229, v230, v231, v232);
  }
}

uint64_t JSC::numberConstructorFuncIsInteger(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  unint64_t v5;
  double v6;
  uint64_t v7;
  BOOL v8;

  if (*((_DWORD *)a2 + 8) != 1
    && ((v3 = *((_QWORD *)a2 + 6), v3 > 0xFFFDFFFFFFFFFFFFLL)
     || (v5 = v3 - 0x2000000000000, v5 <= 0xFFFBFFFFFFFFFFFFLL)
     && ((v6 = *(double *)&v5, v7 = v5 & 0x7FFFFFFFFFFFFFFFLL, trunc(v6) == v6)
       ? (v8 = v7 < 0x7FF0000000000000)
       : (v8 = 0),
         v8)))
  {
    return 7;
  }
  else
  {
    return 6;
  }
}

unint64_t JSC::constructNumber(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t SlowCase;
  int v14;
  uint64_t v15;
  uint64_t (*v17)(_QWORD *);
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v22[3];

  v10 = *(_QWORD *)(a1 + 56);
  v11 = (unint64_t *)(v10 + 38816);
  v12 = *(_QWORD *)(a1 + 1536);
  if ((v12 & 1) != 0)
  {
    v17 = *(uint64_t (**)(_QWORD *))(v12 & 0xFFFFFFFFFFFFFFFCLL);
    v18 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v18 = (_QWORD *)(a1 - 16);
    v22[0] = *v18;
    v22[1] = a1;
    v22[2] = a1 + 1536;
    v12 = v17(v22);
  }
  SlowCase = *v11;
  if (*v11 < *(_QWORD *)(v10 + 38824))
    goto LABEL_3;
  SlowCase = *(_QWORD *)(v10 + 38832);
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 38840);
    *(_QWORD *)(v10 + 38824) = SlowCase + HIDWORD(v19);
    *(_QWORD *)(v10 + 38832) = SlowCase + (int)v19;
LABEL_3:
    *v11 = SlowCase + 32;
    goto LABEL_4;
  }
  v21 = v12;
  JSC::sanitizeStackForVM((JSC *)v10, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 38792, v10 + 192, 32, 0, 0);
  v12 = v21;
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  v14 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)SlowCase = v12 >> 4;
  *(_DWORD *)(SlowCase + 4) = v14;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v15 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(SlowCase + 16) = a2;
  if (a2
    && ((unint64_t)a2 & 0xFFFE000000000002) == 0
    && *(_DWORD *)(v15 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
  {
    v20 = SlowCase;
    JSC::Heap::writeBarrierSlowPath(v15 + 192, SlowCase);
    return v20;
  }
  return SlowCase;
}

unint64_t JSC::callEvalError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v9)(_QWORD *);
  _QWORD *v10;
  _QWORD v11[3];

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v5 = 10;
  }
  else
  {
    v5 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v6 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v6 = 10;
LABEL_4:
  v7 = *(_QWORD *)(this + 112);
  if ((v7 & 1) != 0)
  {
    v9 = *(uint64_t (**)(_QWORD *))(v7 & 0xFFFFFFFFFFFFFFFCLL);
    v10 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v10 = (_QWORD *)(this - 16);
    v11[0] = *v10;
    v11[1] = this;
    v11[2] = this + 112;
    v7 = v9(v11);
  }
  return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v7, v5, v6, 0, 0, 1, 0, a4);
}

unint64_t JSC::callRangeError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v9)(_QWORD *);
  _QWORD *v10;
  _QWORD v11[3];

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v5 = 10;
  }
  else
  {
    v5 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v6 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v6 = 10;
LABEL_4:
  v7 = *(_QWORD *)(this + 128);
  if ((v7 & 1) != 0)
  {
    v9 = *(uint64_t (**)(_QWORD *))(v7 & 0xFFFFFFFFFFFFFFFCLL);
    v10 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v10 = (_QWORD *)(this - 16);
    v11[0] = *v10;
    v11[1] = this;
    v11[2] = this + 128;
    v7 = v9(v11);
  }
  return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v7, v5, v6, 0, 0, 2, 0, a4);
}

unint64_t JSC::callReferenceError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v9)(_QWORD *);
  _QWORD *v10;
  _QWORD v11[3];

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v5 = 10;
  }
  else
  {
    v5 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v6 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v6 = 10;
LABEL_4:
  v7 = *(_QWORD *)(this + 144);
  if ((v7 & 1) != 0)
  {
    v9 = *(uint64_t (**)(_QWORD *))(v7 & 0xFFFFFFFFFFFFFFFCLL);
    v10 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v10 = (_QWORD *)(this - 16);
    v11[0] = *v10;
    v11[1] = this;
    v11[2] = this + 144;
    v7 = v9(v11);
  }
  return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v7, v5, v6, 0, 0, 3, 0, a4);
}

unint64_t JSC::callSyntaxError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v9)(_QWORD *);
  _QWORD *v10;
  _QWORD v11[3];

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v5 = 10;
  }
  else
  {
    v5 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v6 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v6 = 10;
LABEL_4:
  v7 = *(_QWORD *)(this + 160);
  if ((v7 & 1) != 0)
  {
    v9 = *(uint64_t (**)(_QWORD *))(v7 & 0xFFFFFFFFFFFFFFFCLL);
    v10 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v10 = (_QWORD *)(this - 16);
    v11[0] = *v10;
    v11[1] = this;
    v11[2] = this + 160;
    v7 = v9(v11);
  }
  return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v7, v5, v6, 0, 0, 4, 0, a4);
}

unint64_t JSC::callTypeError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v9)(_QWORD *);
  _QWORD *v10;
  _QWORD v11[3];

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v5 = 10;
  }
  else
  {
    v5 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v6 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v6 = 10;
LABEL_4:
  v7 = *(_QWORD *)(this + 176);
  if ((v7 & 1) != 0)
  {
    v9 = *(uint64_t (**)(_QWORD *))(v7 & 0xFFFFFFFFFFFFFFFCLL);
    v10 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v10 = (_QWORD *)(this - 16);
    v11[0] = *v10;
    v11[1] = this;
    v11[2] = this + 176;
    v7 = v9(v11);
  }
  return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v7, v5, v6, 0, 0, 5, 0, a4);
}

unint64_t JSC::callURIError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v9)(_QWORD *);
  _QWORD *v10;
  _QWORD v11[3];

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v5 = 10;
  }
  else
  {
    v5 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v6 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v6 = 10;
LABEL_4:
  v7 = *(_QWORD *)(this + 192);
  if ((v7 & 1) != 0)
  {
    v9 = *(uint64_t (**)(_QWORD *))(v7 & 0xFFFFFFFFFFFFFFFCLL);
    v10 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v10 = (_QWORD *)(this - 16);
    v11[0] = *v10;
    v11[1] = this;
    v11[2] = this + 192;
    v7 = v9(v11);
  }
  return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v7, v5, v6, 0, 0, 6, 0, a4);
}

unint64_t JSC::constructEvalError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  JSC::JSGlobalObject *v13;
  JSC::JSGlobalObject *i;
  char **v15;
  unint64_t v16;
  unint64_t v17;
  JSC::JSObject *SubclassStructure;
  unint64_t v19;
  int v21;
  int v22;
  uint64_t (*v23)(JSC::VM **);
  JSC::VM **v24;
  uint64_t (*v25)(JSC::VM **);
  JSC::VM **v26;
  JSC::JSGlobalObject *v27;
  unint64_t v28;
  JSC::VM *v29;
  unint64_t v30;
  char *v31;

  v10 = *(_QWORD *)(this + 56);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11 = 10;
  }
  else
  {
    v11 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v12 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v12 = 10;
LABEL_4:
  v13 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v13 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v19 = *(_QWORD *)(this + 112);
    if ((v19 & 1) == 0)
      goto LABEL_18;
    v25 = *(uint64_t (**)(JSC::VM **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v26 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v26 = (JSC::VM **)(this - 16);
    v29 = *v26;
    v30 = this;
    v31 = (char *)(this + 112);
    SubclassStructure = (JSC::JSObject *)v25(&v29);
  }
  else
  {
    v29 = *(JSC::VM **)(this + 56);
    for (i = v13; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v27 + 2))
    {
      while (1)
      {
        v15 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v15 != &JSC::JSBoundFunction::s_info && v15 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v16 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_13;
      }
      v27 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v29, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v16 = 0;
LABEL_13:
    if (*(_DWORD *)(v10 + 80))
    {
      v22 = *(_DWORD *)(v10 + 80);
      if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      {
        v28 = v16;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v16 = v28;
      }
      if (*(_QWORD *)(v10 + 16))
      {
        v19 = 0;
        goto LABEL_18;
      }
    }
    v17 = *(_QWORD *)(v16 + 112);
    if ((v17 & 1) != 0)
    {
      v23 = *(uint64_t (**)(JSC::VM **))(v17 & 0xFFFFFFFFFFFFFFFCLL);
      v24 = (JSC::VM **)(v16 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v16 & 8) != 0)
        v24 = (JSC::VM **)(v16 - 16);
      v29 = *v24;
      v30 = v16;
      v31 = (char *)(v16 + 112);
      v17 = v23(&v29);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v13, (JSC::JSObject *)v17, a4, a5, a6, a7, a8);
  }
  v19 = (unint64_t)SubclassStructure;
  if (!*(_DWORD *)(v10 + 80))
    return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v19, v11, v12, 0, 0, 1, 0, a9);
LABEL_18:
  v21 = *(_DWORD *)(v10 + 80);
  if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
    return 0;
  else
    return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v19, v11, v12, 0, 0, 1, 0, a9);
}

unint64_t JSC::constructSyntaxError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  JSC::JSGlobalObject *v13;
  JSC::JSGlobalObject *i;
  char **v15;
  unint64_t v16;
  unint64_t v17;
  JSC::JSObject *SubclassStructure;
  unint64_t v19;
  int v21;
  int v22;
  uint64_t (*v23)(JSC::VM **);
  JSC::VM **v24;
  uint64_t (*v25)(JSC::VM **);
  JSC::VM **v26;
  JSC::JSGlobalObject *v27;
  unint64_t v28;
  JSC::VM *v29;
  unint64_t v30;
  char *v31;

  v10 = *(_QWORD *)(this + 56);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11 = 10;
  }
  else
  {
    v11 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v12 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v12 = 10;
LABEL_4:
  v13 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v13 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v19 = *(_QWORD *)(this + 160);
    if ((v19 & 1) == 0)
      goto LABEL_18;
    v25 = *(uint64_t (**)(JSC::VM **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v26 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v26 = (JSC::VM **)(this - 16);
    v29 = *v26;
    v30 = this;
    v31 = (char *)(this + 160);
    SubclassStructure = (JSC::JSObject *)v25(&v29);
  }
  else
  {
    v29 = *(JSC::VM **)(this + 56);
    for (i = v13; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v27 + 2))
    {
      while (1)
      {
        v15 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v15 != &JSC::JSBoundFunction::s_info && v15 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v16 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_13;
      }
      v27 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v29, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v16 = 0;
LABEL_13:
    if (*(_DWORD *)(v10 + 80))
    {
      v22 = *(_DWORD *)(v10 + 80);
      if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      {
        v28 = v16;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v16 = v28;
      }
      if (*(_QWORD *)(v10 + 16))
      {
        v19 = 0;
        goto LABEL_18;
      }
    }
    v17 = *(_QWORD *)(v16 + 160);
    if ((v17 & 1) != 0)
    {
      v23 = *(uint64_t (**)(JSC::VM **))(v17 & 0xFFFFFFFFFFFFFFFCLL);
      v24 = (JSC::VM **)(v16 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v16 & 8) != 0)
        v24 = (JSC::VM **)(v16 - 16);
      v29 = *v24;
      v30 = v16;
      v31 = (char *)(v16 + 160);
      v17 = v23(&v29);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v13, (JSC::JSObject *)v17, a4, a5, a6, a7, a8);
  }
  v19 = (unint64_t)SubclassStructure;
  if (!*(_DWORD *)(v10 + 80))
    return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v19, v11, v12, 0, 0, 4, 0, a9);
LABEL_18:
  v21 = *(_DWORD *)(v10 + 80);
  if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
    return 0;
  else
    return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v19, v11, v12, 0, 0, 4, 0, a9);
}

unint64_t JSC::constructURIError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  JSC::JSGlobalObject *v13;
  JSC::JSGlobalObject *i;
  char **v15;
  unint64_t v16;
  unint64_t v17;
  JSC::JSObject *SubclassStructure;
  unint64_t v19;
  int v21;
  int v22;
  uint64_t (*v23)(JSC::VM **);
  JSC::VM **v24;
  uint64_t (*v25)(JSC::VM **);
  JSC::VM **v26;
  JSC::JSGlobalObject *v27;
  unint64_t v28;
  JSC::VM *v29;
  unint64_t v30;
  char *v31;

  v10 = *(_QWORD *)(this + 56);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11 = 10;
  }
  else
  {
    v11 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v12 = *((_QWORD *)a2 + 7);
      goto LABEL_4;
    }
  }
  v12 = 10;
LABEL_4:
  v13 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v13 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v19 = *(_QWORD *)(this + 192);
    if ((v19 & 1) == 0)
      goto LABEL_18;
    v25 = *(uint64_t (**)(JSC::VM **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v26 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v26 = (JSC::VM **)(this - 16);
    v29 = *v26;
    v30 = this;
    v31 = (char *)(this + 192);
    SubclassStructure = (JSC::JSObject *)v25(&v29);
  }
  else
  {
    v29 = *(JSC::VM **)(this + 56);
    for (i = v13; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v27 + 2))
    {
      while (1)
      {
        v15 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v15 != &JSC::JSBoundFunction::s_info && v15 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v16 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_13;
      }
      v27 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v29, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v16 = 0;
LABEL_13:
    if (*(_DWORD *)(v10 + 80))
    {
      v22 = *(_DWORD *)(v10 + 80);
      if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      {
        v28 = v16;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v16 = v28;
      }
      if (*(_QWORD *)(v10 + 16))
      {
        v19 = 0;
        goto LABEL_18;
      }
    }
    v17 = *(_QWORD *)(v16 + 192);
    if ((v17 & 1) != 0)
    {
      v23 = *(uint64_t (**)(JSC::VM **))(v17 & 0xFFFFFFFFFFFFFFFCLL);
      v24 = (JSC::VM **)(v16 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v16 & 8) != 0)
        v24 = (JSC::VM **)(v16 - 16);
      v29 = *v24;
      v30 = v16;
      v31 = (char *)(v16 + 192);
      v17 = v23(&v29);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v13, (JSC::JSObject *)v17, a4, a5, a6, a7, a8);
  }
  v19 = (unint64_t)SubclassStructure;
  if (!*(_DWORD *)(v10 + 80))
    return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v19, v11, v12, 0, 0, 6, 0, a9);
LABEL_18:
  v21 = *(_DWORD *)(v10 + 80);
  if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
    return 0;
  else
    return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v19, v11, v12, 0, 0, 6, 0, a9);
}

uint64_t JSC::numberConstructorFuncIsNaN(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  if (*((_DWORD *)a2 + 8) == 1 || !(*((_QWORD *)a2 + 6) >> 49))
    return 6;
  else
    return 6;
}

uint64_t JSC::numberConstructorFuncIsSafeInteger(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;
  double v5;
  double v6;

  if (*((_DWORD *)a2 + 8) == 1)
    return 6;
  v3 = *((_QWORD *)a2 + 6);
  if (v3 > 0xFFFDFFFFFFFFFFFFLL)
    return 7;
  *(_QWORD *)&v5 = v3 - 0x2000000000000;
  if (*(_QWORD *)&v5 > 0xFFFBFFFFFFFFFFFFLL)
    return 6;
  v6 = trunc(v5);
  if (fabs(v5) <= 9.00719925e15 && v6 == v5)
    return 7;
  else
    return 6;
}

unint64_t JSC::toStringWithRadix@<X0>(unint64_t this@<X0>, double a2@<D0>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  int *v15;
  _BYTE *v16;
  size_t v17;
  int *v18;
  _OWORD v19[136];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v10 = (int)a2;
  if ((double)(int)a2 == a2)
  {
    if (v10 >= 0)
      v11 = (int)a2;
    else
      v11 = -v10;
    v12 = 32;
    do
    {
      v13 = JSC::radixDigits[v11 % this];
      *((_BYTE *)v19 + v12--) = v13;
      v14 = v11 >= this;
      v11 /= this;
    }
    while (v14);
    if (v10 < 0)
    {
      v13 = 45;
      *((_BYTE *)v19 + v12) = 45;
    }
    else
    {
      ++v12;
    }
    if (v12 >= 34)
      __break(1u);
    if (v12 == 33)
    {
      v15 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
LABEL_24:
      *a9 = v15;
      return this;
    }
    if (!((unint64_t)(33 - v12) >> 31))
    {
      v15 = (int *)WTF::fastCompactMalloc((WTF *)(53 - v12));
      this = (unint64_t)(v15 + 5);
      *v15 = 2;
      v15[1] = 33 - v12;
      *((_QWORD *)v15 + 1) = v15 + 5;
      v15[4] = 4;
      if (v12 == 32)
        *(_BYTE *)this = v13;
      else
        this = (unint64_t)memcpy((void *)this, (char *)v19 + v12, 33 - v12);
      goto LABEL_24;
    }
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x198B4BB28);
  }
  if ((_DWORD)this == 10 || (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    return WTF::String::number(a2, a9);
  memset(v19, 0, 512);
  this = (unint64_t)JSC::toStringWithRadixInternal((JSC *)v19, (char (*)[2180])this, a2, a3, a4, a5, a6, a7, a8);
  if (this)
  {
    v16 = (_BYTE *)this;
    this = strlen((const char *)this);
    if (this)
    {
      v17 = this;
      if (this >> 31)
        goto LABEL_31;
      v18 = (int *)WTF::fastCompactMalloc((WTF *)(this + 20));
      this = (unint64_t)(v18 + 5);
      *v18 = 2;
      v18[1] = v17;
      *((_QWORD *)v18 + 1) = v18 + 5;
      v18[4] = 4;
      if (v17 == 1)
        *(_BYTE *)this = *v16;
      else
        this = (unint64_t)memcpy((void *)this, v16, v17);
    }
    else
    {
      v18 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
  }
  else
  {
    v18 = 0;
  }
  *a9 = v18;
  return this;
}

_BYTE *JSC::toStringWithRadixInternal(_BYTE *this, int a2, unsigned int a3)
{
  int **v3;
  unsigned int v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  int *v8;
  _BYTE v9[33];
  uint64_t v10;

  v3 = (int **)this;
  v10 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0)
    v4 = a2;
  else
    v4 = -a2;
  v5 = 32;
  do
  {
    v6 = JSC::radixDigits[v4 % a3];
    v9[v5--] = v6;
    v7 = v4 >= a3;
    v4 /= a3;
  }
  while (v7);
  if (a2 < 0)
  {
    v6 = 45;
    v9[v5] = 45;
  }
  else
  {
    ++v5;
  }
  if (v5 >= 34)
    __break(1u);
  if (v5 == 33)
  {
    v8 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
LABEL_11:
    *v3 = v8;
    return this;
  }
  if (!((unint64_t)(33 - v5) >> 31))
  {
    v8 = (int *)WTF::fastCompactMalloc((WTF *)(53 - v5));
    this = v8 + 5;
    *v8 = 2;
    v8[1] = 33 - v5;
    *((_QWORD *)v8 + 1) = v8 + 5;
    v8[4] = 4;
    if (v5 == 32)
      *this = v6;
    else
      this = memcpy(this, &v9[v5], 33 - v5);
    goto LABEL_11;
  }
  __break(0xC471u);
  return this;
}

_BYTE *JSC::toStringWithRadixInternal(JSC *this, char (*a2)[2180], double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v9;
  _BYTE *v12;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v21;
  char *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  unsigned int v31;
  unint64_t v32;
  WTF *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  char *v53;
  int v54;
  int v55;
  int v56;
  char v57;
  WTF *v58;
  unsigned int v59;
  WTF *v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  BOOL v67;
  int v68;
  int v69;
  WTF *v70;
  WTF *v72;
  int v73;
  int v74;
  char v75;
  WTF *v76;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unint64_t v86;
  WTF *v87;
  WTF *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int v93;
  WTF *v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  WTF *v98;
  uint64_t v99;
  _BYTE v100[144];
  unint64_t v101;
  WTF *v102;
  int v103;
  unsigned int v104;
  _QWORD v105[20];

  v9 = a2;
  v105[19] = *MEMORY[0x1E0C80C00];
  v12 = (char *)this + 1090;
  v14 = -a3;
  if (a3 < 0.0)
    v15 = v14;
  else
    v15 = a3;
  v16 = floor(v15);
  if (v15 - v16 == 0.0)
  {
    *v12 = 0;
    if (v16 >= 2.25179981e15)
      goto LABEL_136;
    v17 = (uint64_t)a3;
    if ((uint64_t)a3 >= 0)
      v18 = (uint64_t)a3;
    else
      v18 = -v17;
    v19 = (char *)this + 1089;
    do
    {
      *v19-- = JSC::radixDigits[v18 % a2];
      v40 = v18 >= a2;
      v18 /= a2;
    }
    while (v40);
    if (v17 < 0)
      *v19 = 45;
    else
      ++v19;
    return v19;
  }
  LOBYTE(v21) = (v16 <= 9.00719925e15) & (uint64_t)v16;
  *((_BYTE *)this + 1090) = 46;
  JSC::Uint16WithFraction::Uint16WithFraction((JSC::Uint16WithFraction *)&v98, v15 - v16, 0);
  v22 = (char *)this + 1091;
  v23 = nextafter(v15, INFINITY);
  v24 = nextafter(v15, -INFINITY);
  v25 = v23 - v15;
  v26 = v15 - v24;
  if (v25 != v26)
  {
    JSC::Uint16WithFraction::Uint16WithFraction((JSC::Uint16WithFraction *)&v102, v25, 1);
    JSC::Uint16WithFraction::Uint16WithFraction((JSC::Uint16WithFraction *)&v94, v26, 1);
    v27 = (void *)HIDWORD(v99);
    if (!HIDWORD(v99))
    {
LABEL_195:
      __break(0xC471u);
      JUMPOUT(0x198B4C574);
    }
    v57 = (v16 <= 9.00719925e15) & (uint64_t)v16;
    while (1)
    {
      v58 = v98;
      if (*(_DWORD *)v98)
        goto LABEL_90;
      if ((_DWORD)v27 == 1)
        goto LABEL_99;
      v59 = *((_DWORD *)v98 + 1);
      if (v59 > 0x80000000)
        goto LABEL_90;
      if ((v59 & 0x80000000) == 0)
        goto LABEL_99;
      if (v27 > 2)
        goto LABEL_90;
      v68 = v57 & 1;
      if ((v9 & 1) == 0)
        v68 = v21 & 1;
      if (v68)
      {
LABEL_90:
        if ((JSC::Uint16WithFraction::sumGreaterThanOne(v98, v27, v102, v104) & 1) != 0)
        {
          v69 = 0;
          goto LABEL_119;
        }
      }
      else
      {
LABEL_99:
        if (v96 >= v27)
          v62 = v27;
        else
          v62 = v96;
        if ((_DWORD)v62)
        {
          v63 = v94;
          while (1)
          {
            v65 = *(_DWORD *)v58;
            v58 = (WTF *)((char *)v58 + 4);
            v64 = v65;
            v66 = *(_DWORD *)v63;
            v63 = (WTF *)((char *)v63 + 4);
            v67 = v64 >= v66;
            if (v64 != v66)
              break;
            if (!--v62)
              goto LABEL_106;
          }
          if (!v67)
          {
LABEL_173:
            v69 = 1;
LABEL_119:
            v70 = v94;
            if (&v97 != (uint64_t *)v94 && v94 != 0)
            {
              v94 = 0;
              v95 = 0;
              WTF::fastFree((unint64_t)v70, v27, a4, a5, a6, a7, a8, a9);
            }
            v72 = v102;
            if (v105 != (_QWORD *)v102 && v102)
            {
              v102 = 0;
              v103 = 0;
              WTF::fastFree((unint64_t)v72, v27, a4, a5, a6, a7, a8, a9);
            }
            if (v69)
              goto LABEL_69;
            goto LABEL_126;
          }
        }
        else
        {
LABEL_106:
          if (v96 > v27)
            goto LABEL_173;
        }
      }
      JSC::Uint16WithFraction::operator*=((uint64_t)&v98, (unsigned __int16)v9);
      if (!HIDWORD(v99))
      {
        __break(0xC471u);
        JUMPOUT(0x198B4C56CLL);
      }
      v60 = v98;
      v21 = *(unsigned int *)v98;
      if ((_DWORD)v21)
      {
        *(_DWORD *)v98 = 0;
        v61 = 1;
        if (HIDWORD(v99) >= 2)
        {
          do
          {
            if (*((_DWORD *)v60 + v61))
              goto LABEL_95;
            ++v61;
          }
          while (HIDWORD(v99) != v61);
          v61 = HIDWORD(v99);
        }
LABEL_95:
        v101 = v61;
      }
      *v22++ = JSC::radixDigits[v21];
      v57 ^= v21;
      JSC::Uint16WithFraction::operator*=((uint64_t)&v102, (unsigned __int16)v9);
      JSC::Uint16WithFraction::operator*=((uint64_t)&v94, (unsigned __int16)v9);
      v27 = (void *)HIDWORD(v99);
      if (!HIDWORD(v99))
        goto LABEL_195;
    }
  }
  JSC::Uint16WithFraction::Uint16WithFraction((JSC::Uint16WithFraction *)&v102, v25, 1);
  v28 = HIDWORD(v99);
  if (!HIDWORD(v99))
  {
LABEL_190:
    __break(0xC471u);
    JUMPOUT(0x198B4C54CLL);
  }
  LOBYTE(v29) = (v16 <= 9.00719925e15) & (uint64_t)v16;
  while (1)
  {
    v30 = v98;
    if (*(_DWORD *)v98)
      break;
    if (v28 != 1)
    {
      v31 = *((_DWORD *)v98 + 1);
      if (v31 > 0x80000000)
        break;
      if ((v31 & 0x80000000) != 0)
      {
        if (v28 > 2)
          break;
        v55 = v21 & 1;
        if ((v9 & 1) == 0)
          v55 = v29 & 1;
        if (v55)
          break;
      }
    }
    if (v104 >= v28)
      v48 = v28;
    else
      v48 = v104;
    if ((_DWORD)v48)
    {
      v49 = 0;
      v33 = v102;
      v50 = 4 * v48;
      while (1)
      {
        v51 = *(_DWORD *)((char *)v98 + v49);
        v52 = *(_DWORD *)((char *)v102 + v49);
        if (v51 != v52)
          break;
        v49 += 4;
        if (v50 == v49)
          goto LABEL_57;
      }
      if (v51 < v52)
      {
        v56 = 0;
        goto LABEL_67;
      }
    }
    else
    {
LABEL_57:
      if (v104 > v28)
      {
        v56 = 0;
        v33 = v102;
        goto LABEL_67;
      }
    }
LABEL_33:
    v41 = v101;
    if (v101 < v28)
    {
      v42 = 0;
      v43 = v28 - 1;
      do
      {
        if (v43 >= HIDWORD(v99))
        {
          __break(0xC471u);
          JUMPOUT(0x198B4C53CLL);
        }
        v44 = v42 + *((unsigned int *)v30 + v43) * (unint64_t)(unsigned __int16)v9;
        *((_DWORD *)v30 + v43) = v44;
        v42 = HIDWORD(v44);
      }
      while (v43-- > v41);
      if (v41)
      {
        v28 = HIDWORD(v99);
        if (v42)
        {
          v46 = v41 - 1;
          v101 = v46;
          if (v46 >= HIDWORD(v99))
          {
            __break(0xC471u);
            JUMPOUT(0x198B4C55CLL);
          }
          *((_DWORD *)v30 + v46) = v42;
          v28 = HIDWORD(v99);
        }
      }
      else
      {
        v28 = HIDWORD(v99);
        if (!HIDWORD(v99))
        {
          __break(0xC471u);
          JUMPOUT(0x198B4C564);
        }
        if (*(_DWORD *)v30 >= 0x10000u)
        {
          HIDWORD(v99) = 1;
          *(_DWORD *)v30 = 0x10000;
          v101 = 0;
          v28 = HIDWORD(v99);
LABEL_179:
          if (!v28)
          {
            __break(0xC471u);
            JUMPOUT(0x198B4C498);
          }
          goto LABEL_43;
        }
      }
    }
    if (v28 < 2)
      goto LABEL_179;
    do
    {
      if (*((_DWORD *)v30 + v28 - 1))
        break;
      HIDWORD(v99) = --v28;
    }
    while (v28 > 1);
LABEL_43:
    v29 = *(unsigned int *)v30;
    if ((_DWORD)v29)
    {
      *(_DWORD *)v30 = 0;
      v47 = 1;
      if (HIDWORD(v99) >= 2)
      {
        while (!*((_DWORD *)v30 + v47))
        {
          if (HIDWORD(v99) == ++v47)
          {
            v47 = HIDWORD(v99);
            break;
          }
        }
      }
      v101 = v47;
    }
    LOBYTE(v21) = v21 ^ v29;
    *v22++ = JSC::radixDigits[v29];
    JSC::Uint16WithFraction::operator*=((uint64_t)&v102, (unsigned __int16)v9);
    v28 = HIDWORD(v99);
    if (!HIDWORD(v99))
      goto LABEL_190;
  }
  v32 = v104;
  if (!v104)
  {
    __break(0xC471u);
    JUMPOUT(0x198B4C554);
  }
  v33 = v102;
  v34 = *(_DWORD *)v102 + *(_DWORD *)v98;
  if (v34)
  {
    if (v34 != 1)
      goto LABEL_66;
    if (v28 > (unint64_t)v104)
      v32 = v28;
    if (v32 > 1)
      goto LABEL_66;
    goto LABEL_33;
  }
  if (v104 >= (unint64_t)v28)
    v35 = v28;
  else
    v35 = v104;
  if (v35 < 2)
    goto LABEL_33;
  v36 = 1;
  while (1)
  {
    v37 = *((_DWORD *)v98 + v36);
    v38 = *((_DWORD *)v102 + v36);
    v40 = __CFADD__(v38, v37);
    v39 = v38 + v37;
    if (v40)
      break;
    v40 = v39 != -1 || ++v36 >= v35;
    if (v40)
      goto LABEL_33;
  }
  if (!v39)
  {
    if (v28 > (unint64_t)v104)
      v32 = v28;
    if (v36 + 1 >= v32)
      goto LABEL_33;
  }
LABEL_66:
  v56 = 1;
LABEL_67:
  if (v105 != (_QWORD *)v33 && v33)
  {
    v102 = 0;
    v103 = 0;
    WTF::fastFree((unint64_t)v33, v27, a4, a5, a6, a7, a8, a9);
  }
  if (!v56)
  {
LABEL_69:
    v53 = v22 + 1;
    do
    {
      v54 = *(v53 - 2);
      --v53;
    }
    while (v54 == 48);
    goto LABEL_131;
  }
  do
  {
LABEL_126:
    v74 = *--v22;
    v73 = v74;
  }
  while (v74 == JSC::radixDigits[v9 - 1]);
  v53 = v22 + 1;
  if (v73 == 57)
  {
    v75 = 97;
  }
  else
  {
    if (v73 == 46)
    {
      v16 = v16 + 1.0;
      v53 = v22;
      goto LABEL_131;
    }
    v75 = v73 + 1;
  }
  *v22 = v75;
LABEL_131:
  *v53 = 0;
  v76 = v98;
  if (v100 != (_BYTE *)v98 && v98 != 0)
  {
    v98 = 0;
    LODWORD(v99) = 0;
    WTF::fastFree((unint64_t)v76, v27, a4, a5, a6, a7, a8, a9);
  }
LABEL_136:
  v98 = (WTF *)v100;
  v99 = 36;
  LODWORD(v78) = LODWORD(v16);
  v79 = (*(_QWORD *)&v16 >> 52) & 0x7FFLL;
  v80 = *(_QWORD *)&v16 & 0xFFFFFFFFFFFFFLL;
  if ((_DWORD)v79)
  {
    v80 |= 0x10000000000000uLL;
    if (v79 <= 0x432)
    {
      v81 = (*(_QWORD *)&v16 >> 52) + 1;
      goto LABEL_139;
    }
    v93 = v79 - 1075;
    if ((v79 - 1075) >= 0x20)
    {
      do
      {
        LODWORD(v102) = 0;
        if (HIDWORD(v99) == (_DWORD)v99)
        {
          WTF::Vector<unsigned int,36ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)&v98, &v102);
        }
        else
        {
          *((_DWORD *)v98 + HIDWORD(v99)) = 0;
          ++HIDWORD(v99);
        }
        v93 -= 32;
      }
      while (v93 > 0x1F);
    }
    v102 = (WTF *)__PAIR64__(HIDWORD(v80), LODWORD(v16));
    v82 = &v103;
    v103 = 0;
    if (v93)
    {
      v103 = HIDWORD(v80) >> -(char)v93;
      LODWORD(v78) = LODWORD(v16) << v93;
      HIDWORD(v102) = (LODWORD(v16) >> -(char)v93) | (HIDWORD(v80) << v93);
      LODWORD(v102) = LODWORD(v16) << v93;
    }
  }
  else
  {
    if (v80)
      v81 = 2;
    else
      v81 = 0;
LABEL_139:
    v78 = v80 >> (52 - v81);
    v102 = (WTF *)v78;
    v82 = &v103;
    v103 = 0;
  }
  if (HIDWORD(v99) == (_DWORD)v99)
  {
    WTF::Vector<unsigned int,36ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)&v98, (unint64_t)&v102);
    v82 = &v103;
    v83 = HIDWORD(v99);
  }
  else
  {
    *((_DWORD *)v98 + HIDWORD(v99)) = v78;
    v83 = ++HIDWORD(v99);
  }
  if (v83 == (_DWORD)v99)
  {
    WTF::Vector<unsigned int,36ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)&v98, (unint64_t)&v102 + 4);
    v82 = &v103;
    v84 = HIDWORD(v99);
  }
  else
  {
    *((_DWORD *)v98 + v83) = HIDWORD(v102);
    v84 = ++HIDWORD(v99);
  }
  if (v84 == (_DWORD)v99)
  {
    WTF::Vector<unsigned int,36ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)&v98, (unint64_t)&v103);
    v85 = HIDWORD(v99);
  }
  else
  {
    *((_DWORD *)v98 + v84) = v103;
    v85 = ++HIDWORD(v99);
  }
  if (v85)
  {
    while (!*((_DWORD *)v98 + v85 - 1))
    {
      HIDWORD(v99) = --v85;
      if (!v85)
        goto LABEL_149;
    }
    while (1)
    {
      v86 = 0;
      v89 = v98;
      v90 = v85 - 1;
      do
      {
        if (v90 >= HIDWORD(v99))
        {
          __break(0xC471u);
          JUMPOUT(0x198B4C544);
        }
        v91 = *((unsigned int *)v89 + v90) | (v86 << 32);
        v92 = v91 / v9;
        v86 = v91 % v9;
        *((_DWORD *)v89 + v90--) = v92;
      }
      while (v90 != -1);
      v85 = HIDWORD(v99);
      if (!HIDWORD(v99))
        break;
      while (!*((_DWORD *)v89 + v85 - 1))
      {
        HIDWORD(v99) = --v85;
        if (!v85)
          goto LABEL_150;
      }
      *--v12 = JSC::radixDigits[v86];
    }
  }
  else
  {
LABEL_149:
    LODWORD(v86) = 0;
  }
LABEL_150:
  *(v12 - 1) = JSC::radixDigits[v86];
  v19 = v12 - 1;
  if (a3 < 0.0)
  {
    *(v12 - 2) = 45;
    v19 = v12 - 2;
  }
  v87 = v98;
  if (v100 != (_BYTE *)v98 && v98 != 0)
  {
    v98 = 0;
    LODWORD(v99) = 0;
    WTF::fastFree((unint64_t)v87, v82, a4, a5, a6, a7, a8, a9);
  }
  return v19;
}

void JSC::NumericStrings::initializeSmallIntCache(JSC::NumericStrings *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  unint64_t v12;
  int **v13;
  int *v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  _BYTE *v29;
  _BYTE *v30;
  int *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t __n;
  _BYTE v42[13];
  uint64_t v43;

  v11 = 0;
  v43 = *MEMORY[0x1E0C80C00];
  while (1)
  {
    v12 = *((_QWORD *)a2 + v11 + 5325);
    v13 = (int **)((char *)this + 16 * v11);
    if (!*v13)
      break;
LABEL_3:
    v13[1] = (int *)v12;
    v14 = *(int **)(v12 + 8);
    if ((v14 & 1) != 0)
      v14 = *JSC::JSRopeString::resolveRope(v12, 0, a3, a4, a9, a5, a6, a7, a8);
    if (v14)
      *v14 += 2;
    v15 = (WTF::StringImpl *)*v13;
    *v13 = v14;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
    if (++v11 == 10)
      return;
  }
  v17 = 0;
  v19 = v11;
  do
  {
    v16 = (v19 % 0xA) | 0x30;
    v42[v17-- + 12] = (v19 % 0xA) | 0x30;
    v18 = v19 > 9;
    v19 /= 0xAu;
  }
  while (v18);
  if (v17 + 14 >= 15)
    __break(1u);
  if (!v17)
  {
    v28 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_21;
  }
  __n = -v17;
  if (!((unint64_t)-v17 >> 31))
  {
    v28 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v17));
    v29 = v28 + 5;
    *v28 = 2;
    v28[1] = -(int)v17;
    *((_QWORD *)v28 + 1) = v28 + 5;
    v28[4] = 4;
    if (v17 == -1)
    {
      *v29 = v16;
    }
    else
    {
      v30 = &v42[v17 + 13];
      v31 = v28;
      memcpy(v29, v30, __n);
      v28 = v31;
    }
LABEL_21:
    v32 = (WTF::StringImpl *)*v13;
    *v13 = v28;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::~StringImpl(v32, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
      }
      else
      {
        *(_DWORD *)v32 -= 2;
      }
    }
    goto LABEL_3;
  }
  __break(0xC471u);
}

uint64_t JSC::int32ToString(uint64_t this, JSC::VM *a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t SlowCase;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t *v27;
  int v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  int *v52;
  _BYTE *v53;
  WTF::StringImpl *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87[3];

  v8 = a2;
  v9 = this;
  v87[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if ((_DWORD)a3 != 10)
  {
    if (a2 < a3)
      return *(_QWORD *)(this + 8 * JSC::radixDigits[(int)a2] + 42216);
LABEL_50:
    JSC::toStringWithRadixInternal(v87, (int)a2, a3);
    SlowCase = JSC::jsNontrivialString(v9, (JSC::VM *)v87, v65, v66, v67, v68, v69, v70);
    v78 = v87[0];
    v87[0] = 0;
    if (v78)
    {
      if (*(_DWORD *)v78 == 2)
      {
        WTF::StringImpl::~StringImpl(v78, v71, v72, v73, v74, v75, v76, v77);
        WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
      }
      else
      {
        *(_DWORD *)v78 -= 2;
      }
    }
    return SlowCase;
  }
  if (a2 > 0xFF)
  {
    v10 = this + 48368;
    v11 = 9 * ((~((_DWORD)a2 << 15) + (_DWORD)a2) ^ ((~((_DWORD)a2 << 15) + (_DWORD)a2) >> 10));
    v12 = (v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11);
    v13 = (v12 ^ BYTE2(v12));
    v14 = (_DWORD *)(this + 48368 + 24 * (v12 ^ BYTE2(v12)));
    if (*v14 == (_DWORD)a2)
    {
      v15 = *(WTF::StringImpl **)(v10 + 24 * (v12 ^ BYTE2(v12)) + 8);
      if (v15)
      {
        SlowCase = *(_QWORD *)(v10 + 24 * v13 + 16);
        if (SlowCase)
          return SlowCase;
LABEL_16:
        v27 = (uint64_t *)(v9 + 39696);
        *(_DWORD *)v15 += 2;
        v28 = *((_DWORD *)v15 + 4);
        v29 = v15;
        if ((v28 & 3) == 2)
        {
          v29 = v15;
          do
          {
            v29 = (WTF::StringImpl *)*((_QWORD *)v29 + 3);
            v28 = *((_DWORD *)v29 + 4);
          }
          while ((v28 & 3) == 2);
        }
        if ((v28 & 8) != 0)
        {
          v30 = 0;
        }
        else
        {
          *((_DWORD *)v29 + 4) = v28 | 8;
          v30 = (unint64_t)*((unsigned int *)v29 + 1) << ((v28 & 4) == 0);
        }
        v31 = v9 + 192;
        SlowCase = *v27;
        if ((unint64_t)*v27 >= *(_QWORD *)(v9 + 39704))
        {
          v63 = v15;
          SlowCase = *(_QWORD *)(v9 + 39712);
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM((JSC *)v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            SlowCase = JSC::LocalAllocator::allocateSlowCase(v9 + 39672, v9 + 192, 16, 0, 0);
          }
          else
          {
            v64 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v9 + 39720);
            *(_QWORD *)(v9 + 39704) = SlowCase + HIDWORD(v64);
            *(_QWORD *)(v9 + 39712) = SlowCase + (int)v64;
            *v27 = SlowCase + 16;
          }
          v31 = v9 + 192;
          v15 = v63;
        }
        else
        {
          *v27 = SlowCase + 16;
        }
        *(_DWORD *)SlowCase = *(_QWORD *)(v9 + 41512) >> 4;
        *(_DWORD *)(SlowCase + 4) = 17302016;
        *(_QWORD *)(SlowCase + 8) = v15;
        if (*(_BYTE *)(v9 + 755))
          __dmb(0xAu);
        if (v30 >= 0x101)
          JSC::Heap::reportExtraMemoryAllocatedSlowCase(v31, 0, SlowCase, v30, a5, a6, a7, a8);
        *(_QWORD *)(v10 + 24 * v13 + 16) = SlowCase;
        return SlowCase;
      }
    }
    *v14 = (_DWORD)a2;
    WTF::String::number((unint64_t)a2, (uint64_t *)v87);
    v21 = v10 + 24 * v13;
    v24 = *(WTF::StringImpl **)(v21 + 8);
    v23 = (WTF::StringImpl **)(v21 + 8);
    v22 = v24;
    v25 = v87[0];
    v87[0] = 0;
    *v23 = v25;
    if (v24)
    {
      v26 = *(_DWORD *)v22 - 2;
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
        v22 = v87[0];
        v87[0] = 0;
        if (!v22)
          goto LABEL_15;
        v26 = *(_DWORD *)v22 - 2;
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::~StringImpl(v22, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
          goto LABEL_15;
        }
      }
      *(_DWORD *)v22 = v26;
    }
LABEL_15:
    v15 = *v23;
    goto LABEL_16;
  }
  v17 = (JSC::VM *)(this + 44272 + 16 * a2);
  if (*(_QWORD *)v17)
  {
LABEL_8:
    v18 = v9 + 44272 + 16 * v8;
    v20 = *(_QWORD *)(v18 + 8);
    v19 = (uint64_t *)(v18 + 8);
    SlowCase = v20;
    if (!v20)
    {
      SlowCase = JSC::jsNontrivialString((JSC *)v9, v17, a3, a4, a5, a6, a7, a8);
      *v19 = SlowCase;
    }
    return SlowCase;
  }
  v48 = 0;
  v49 = a2;
  do
  {
    v50 = (v49 % 0xA) | 0x30;
    *((_BYTE *)&v87[1] + v48-- + 4) = (v49 % 0xA) | 0x30;
    v51 = v49 > 9;
    v49 /= 0xAu;
  }
  while (v51);
  if (v48 + 14 >= 15)
  {
    __break(1u);
    goto LABEL_50;
  }
  if (!v48)
  {
    v52 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_37;
  }
  if (!((unint64_t)-v48 >> 31))
  {
    v52 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v48));
    v53 = v52 + 5;
    *v52 = 2;
    v52[1] = -(int)v48;
    *((_QWORD *)v52 + 1) = v52 + 5;
    v52[4] = 4;
    if (v48 == -1)
      *v53 = v50;
    else
      memcpy(v53, (char *)&v87[1] + v48 + 5, -v48);
LABEL_37:
    v54 = *(WTF::StringImpl **)v17;
    *(_QWORD *)v17 = v52;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::~StringImpl(v54, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
      }
      else
      {
        *(_DWORD *)v54 -= 2;
      }
    }
    goto LABEL_8;
  }
  __break(0xC471u);
  return this;
}

size_t JSC::int52ToString(JSC *this, int64_t a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char *v10;
  BOOL v11;
  size_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  int *v20;
  char *v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  const WTF::String *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC::VM *v47;
  uint64_t v49;
  WTF::AtomStringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  _OWORD v61[68];
  _BYTE v62[1095];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if ((int)a3 > (unint64_t)a2)
    return *((_QWORD *)this + JSC::radixDigits[a2] + 5277);
  if (a2 == (int)a2)
    return JSC::int32ToString((uint64_t)this, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)a3 == 10)
  {
    v39 = (double)a2;
    v40 = JSC::NumericStrings::lookup((JSC *)((char *)this + 44272), (double)a2);
    v47 = (JSC::VM *)(v40 + 8);
    if (*(double *)v40 != v39 || *(_QWORD *)(v40 + 8) == 0)
    {
      v49 = v40;
      *(double *)v40 = v39;
      WTF::String::number(v39, (int **)v61);
      v51 = *(WTF::StringImpl **)(v49 + 8);
      *(_QWORD *)(v49 + 8) = *(_QWORD *)&v61[0];
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
        {
          WTF::StringImpl::~StringImpl(v51, v50, (uint64_t)v41, v42, v43, v44, v45, v46);
          WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
        }
        else
        {
          *(_DWORD *)v51 -= 2;
        }
      }
      *(_QWORD *)(v49 + 16) = 0;
    }
    return JSC::jsNontrivialString(this, v47, v41, v42, v43, v44, v45, v46);
  }
  else
  {
    memset(&v61[2], 0, 480);
    if (a2 >= 0)
      v9 = a2;
    else
      v9 = -a2;
    memset(v61, 0, 32);
    v10 = v62;
    v62[1] = 0;
    do
    {
      *v10-- = JSC::radixDigits[v9 % a3];
      v11 = v9 >= a3;
      v9 /= a3;
    }
    while (v11);
    if (a2 < 0)
      *v10 = 45;
    else
      ++v10;
    result = strlen(v10);
    if (!result)
    {
      v20 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_16;
    }
    v19 = result;
    if (!(result >> 31))
    {
      v20 = (int *)WTF::fastCompactMalloc((WTF *)(result + 20));
      v21 = (char *)(v20 + 5);
      *v20 = 2;
      v20[1] = v19;
      *((_QWORD *)v20 + 1) = v20 + 5;
      v20[4] = 4;
      if (v19 == 1)
        *v21 = *v10;
      else
        memcpy(v21, v10, v19);
LABEL_16:
      v60 = (WTF::StringImpl *)v20;
      v29 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v60, v13, v14, v15, v16, v17, v18);
      v30 = v60;
      v60 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
        {
          WTF::StringImpl::~StringImpl(v30, v22, v23, v24, v25, v26, v27, v28);
          WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
        }
        else
        {
          *(_DWORD *)v30 -= 2;
        }
      }
      return v29;
    }
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::numberToString(JSC *this, JSC::VM *a2, double a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const WTF::String *v9;
  JSC *v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  int v24;
  size_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  _DWORD *v42;
  _DWORD *v43;
  uint64_t SlowCase;
  char *v45;
  unsigned int v46;
  unint64_t v47;
  int *v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  size_t v64;
  size_t v65;
  size_t v66;
  int *v67;
  _BYTE *v68;
  char *v69;
  unint64_t v70;
  int **v71;
  unint64_t v72;
  int v73;
  int *v74;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  WTF::StringImpl *v79;
  _QWORD *v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  int v83;
  int v84;
  _DWORD *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  size_t v104;
  int *v105;
  char *v106;
  int *v107;
  WTF::StringImpl *v108;
  unint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  size_t v118;
  size_t v119;
  int *v120;
  char *v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::AtomStringImpl *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF::StringImpl *v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  JSC *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _DWORD *v154;
  uint64_t *v155;
  _OWORD __dst[136];
  char __s[32];
  uint64_t v158;

  v9 = a2;
  v10 = this;
  v158 = *MEMORY[0x1E0C80C00];
  v11 = (uint64_t *)((char *)this + 39696);
  v12 = (int)a3;
  if ((double)(int)v12 != a3)
  {
    if ((_DWORD)a2 == 10)
    {
      v13 = (char *)this + 54512;
      v14 = (~(*(_QWORD *)&a3 << 32) + *(_QWORD *)&a3) ^ ((~(*(_QWORD *)&a3 << 32) + *(_QWORD *)&a3) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((unint64_t)(v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      LODWORD(v17) = ((v16 >> 31) ^ v16);
      v18 = (double *)((char *)this + 24 * ((v16 >> 31) ^ v16) + 54512);
      if (*v18 == a3)
      {
        v48 = *(int **)&v13[24 * ((v16 >> 31) ^ v16) + 8];
        if (v48)
        {
          SlowCase = *(_QWORD *)&v13[24 * ((v16 >> 31) ^ v16) + 16];
          if (SlowCase)
            return SlowCase;
          goto LABEL_67;
        }
      }
      *v18 = a3;
      v19 = (*(_QWORD *)&a3 >> 52) & 0x7FFLL;
      if ((_DWORD)v19 == 2047)
      {
        if ((*(_QWORD *)&a3 & 0xFFFFFFFFFFFFFLL) != 0)
        {
          qmemcpy(__s, "NaN", 3);
          v20 = &__s[3];
        }
        else
        {
          v45 = __s;
          if ((*(_QWORD *)&a3 & 0x8000000000000000) != 0)
          {
            __s[0] = 45;
            v45 = &__s[1];
          }
          *(_QWORD *)v45 = 0x7974696E69666E49;
          v20 = v45 + 8;
        }
        goto LABEL_58;
      }
      v21 = *(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFLL;
      if ((*(_QWORD *)&a3 & 0x8000000000000000) != 0 && v21)
      {
        __s[0] = 45;
        v22 = &__s[1];
      }
      else
      {
        v22 = __s;
        if (!v21)
        {
          v20 = &__s[1];
          __s[0] = 48;
LABEL_58:
          *v20 = 0;
          v64 = (int)strlen(__s);
          memcpy(__dst, __s, v64);
          *((_BYTE *)__dst + v64) = 0;
          v65 = strlen((const char *)__dst);
          if (!v65)
          {
            v67 = &WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
            goto LABEL_63;
          }
          v66 = v65;
          if (!(v65 >> 31))
          {
            v67 = (int *)WTF::fastCompactMalloc((WTF *)(v65 + 20));
            v68 = v67 + 5;
            *v67 = 2;
            v67[1] = v66;
            *((_QWORD *)v67 + 1) = v67 + 5;
            v67[4] = 4;
            if (v66 == 1)
              *v68 = __dst[0];
            else
              memcpy(v68, __dst, v66);
LABEL_63:
            v69 = &v13[24 * v17];
            v72 = *((_QWORD *)v69 + 1);
            v71 = (int **)(v69 + 8);
            v70 = v72;
            *v71 = v67;
            if (!v72)
            {
LABEL_66:
              v48 = *v71;
LABEL_67:
              *v48 += 2;
              v73 = v48[4];
              v74 = v48;
              if ((v73 & 3) == 2)
              {
                v74 = v48;
                do
                {
                  v74 = (int *)*((_QWORD *)v74 + 3);
                  v73 = v74[4];
                }
                while ((v73 & 3) == 2);
              }
              if ((v73 & 8) != 0)
              {
                v59 = 0;
              }
              else
              {
                v74[4] = v73 | 8;
                v59 = (unint64_t)v74[1] << ((v73 & 4) == 0);
              }
              this = (JSC *)((char *)v10 + 192);
              SlowCase = *v11;
              if (*v11 < (unint64_t)v11[1])
                goto LABEL_71;
              SlowCase = v11[2];
              if ((SlowCase & 1) == 0)
              {
                v109 = *(_QWORD *)(SlowCase + 8) ^ v11[3];
                v11[1] = SlowCase + HIDWORD(v109);
                v11[2] = SlowCase + (int)v109;
LABEL_71:
                *v11 = SlowCase + 16;
                goto LABEL_72;
              }
LABEL_147:
              v155 = v11;
              v147 = this;
              JSC::sanitizeStackForVM(v10, a2, (uint64_t)v9, a5, a6, a7, a8, a9);
              SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)v10 + 39672, v147, 16, 0, 0);
              this = v147;
              v11 = v155;
LABEL_72:
              *(_DWORD *)SlowCase = (unint64_t)v11[227] >> 4;
              *(_DWORD *)(SlowCase + 4) = 17302016;
              *(_QWORD *)(SlowCase + 8) = v48;
              if (!*((_BYTE *)v10 + 755))
              {
LABEL_74:
                if (v59 >= 0x101)
                  JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)this, 0, SlowCase, v59, a6, a7, a8, a9);
                *(_QWORD *)&v13[24 * v17 + 16] = SlowCase;
                return SlowCase;
              }
LABEL_73:
              __dmb(0xAu);
              goto LABEL_74;
            }
            if (*(_DWORD *)v70 != 2)
            {
              *(_DWORD *)v70 -= 2;
              goto LABEL_66;
            }
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v70, a2, (uint64_t)v9, a5, a6, a7, a8, a9);
            v76 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (!v76)
            {
              pas_try_deallocate_slow_no_cache(v70, (uint64_t)&bmalloc_heap_config, 1);
              goto LABEL_66;
            }
            if (!(v70 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v70 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v70)) & 1) != 0)
            {
LABEL_83:
              v77 = *(unsigned int *)(v76 + 8000);
              if (v77 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v76, v70, (os_unfair_lock_s *)5, a5, a6, a7, a8, a9);
              }
              else
              {
                *(_QWORD *)(v76 + 8 * v77) = v70 | 0x5000000000000;
                *(_DWORD *)(v76 + 8000) = v77 + 1;
              }
              goto LABEL_66;
            }
            if (v70 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v70 >> 24)
            {
              a5 = 0;
            }
            else
            {
              a5 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v70 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v70) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a5 == 1)
                goto LABEL_83;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v76, v70, 1, a5, a6, a7, a8, a9);
            goto LABEL_66;
          }
LABEL_156:
          __break(0xC471u);
          JUMPOUT(0x198B4DA80);
        }
      }
      v23 = 2 * (*(_QWORD *)&a3 & 0x800FFFFFFFFFFFFFLL);
      if ((_DWORD)v19)
      {
        v24 = v19 - 1075;
        if (!v23)
        {
          v49 = (631305 * v24 - 261663) >> 21;
          v50 = WTF::dragonbox::detail::cache_holder<WTF::dragonbox::ieee754_binary64,void>::cache[2 * (292 - v49) + 1];
          v51 = 11 - (v24 + ((int)(-1741647 * v49) >> 19));
          v52 = (v50 - (v50 >> 54)) >> v51;
          v53 = (v50 + (v50 >> 53)) >> v51;
          if ((v24 & 0xFFFFFFFE) != 2)
            ++v52;
          v54 = v53 / 0xA;
          v55 = 10 * (v53 / 0xA);
          v56 = (v50 >> (10 - (v24 + ((int)(-1741647 * v49) >> 19)))) + 1;
          if (v24 == -77 && (v56 & 2) != 0)
            v57 = -1;
          else
            v57 = v56 >> 1 < v52;
          v58 = v57 + (v56 >> 1);
          if (v55 >= v52)
            v38 = v54;
          else
            v38 = v58;
          if (v55 < v52)
            v25 = v49;
          else
            v25 = v49 + 1;
          goto LABEL_57;
        }
        v23 |= 0x20000000000000uLL;
      }
      else
      {
        v24 = -1074;
      }
      v25 = ((315653 * v24) >> 20);
      v26 = &WTF::dragonbox::detail::cache_holder<WTF::dragonbox::ieee754_binary64,void>::cache[2
                                                                                              * (294 - ((315653 * v24) >> 20))];
      v27 = *v26;
      v28 = v26[1];
      v29 = v24 + ((1741647 * (2 - ((315653 * v24) >> 20))) >> 19);
      v30 = v28 >> ~(_BYTE)v29;
      v31 = (v23 | 1) << v29;
      v32 = (v28 * (unsigned __int128)(unint64_t)v31) >> 64;
      v33 = v28 * v31;
      v34 = (v27 * (unsigned __int128)(unint64_t)v31) >> 64;
      v35 = __CFADD__(v34, v33);
      v36 = v34 + v33;
      if (v35)
        v37 = v32 + 1;
      else
        v37 = v32;
      v38 = (unint64_t)((v37 * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 7;
      v39 = v37 - 1000 * v38;
      if (v30 <= v39)
      {
        if (v30 < v39
          || (v63 = (__PAIR128__(v28, v27) * (v23 - 1)) >> 64, a5 = v63 >> -(char)v29, (a5 & 1) == 0)
          && (v63 << v29) | ((v27 * (v23 - 1)) >> -(char)v29) | LOBYTE(a3) & 1)
        {
LABEL_33:
          v46 = v39 - (v30 >> 1);
          v38 = ((656 * v46 + 32800) >> 16) + 10 * v38;
          if (((656 * (_WORD)v46 - 32736) & 0xFFF0u) <= 0x28F)
          {
            v47 = (__PAIR128__(v28, v27) * v23) >> 64;
            if ((((v47 >> -(char)v29) ^ ((v46 & 1) == 0)) & 1) != 0)
              v38 -= ((((v27 * v23) >> (64 - v29)) | (v47 << v29)) == 0) & ((656 * v46 + 32800) >> 16);
            else
              --v38;
          }
          goto LABEL_57;
        }
      }
      else if ((LOBYTE(a3) & 1) != 0 && !v36 && !v39)
      {
        --v38;
        v39 = 1000;
        goto LABEL_33;
      }
      v25 = (v25 + 1);
LABEL_57:
      v20 = WTF::dragonbox::detail::to_shortest(v38, v25, (uint64_t)v22, (char *)a5);
      goto LABEL_58;
    }
    if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      memset(__dst, 0, 512);
      v110 = JSC::toStringWithRadixInternal((JSC *)__dst, (char (*)[2180])a2, a3, (uint64_t)a2, a5, a6, a7, a8, a9);
      if (v110)
      {
        v117 = v110;
        v118 = strlen(v110);
        if (v118)
        {
          v119 = v118;
          if (v118 >> 31)
            goto LABEL_156;
          v120 = (int *)WTF::fastCompactMalloc((WTF *)(v118 + 20));
          v121 = (char *)(v120 + 5);
          *v120 = 2;
          v120[1] = v119;
          *((_QWORD *)v120 + 1) = v120 + 5;
          v120[4] = 4;
          if (v119 == 1)
            *v121 = *v117;
          else
            memcpy(v121, v117, v119);
        }
        else
        {
          v120 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
        }
      }
      else
      {
        v120 = 0;
      }
      *(_QWORD *)__s = v120;
      SlowCase = JSC::jsString((uint64_t)v10, (JSC::VM *)__s, v111, v112, v113, v114, v115, v116);
      v137 = *(WTF::StringImpl **)__s;
      *(_QWORD *)__s = 0;
      if (!v137)
        return SlowCase;
LABEL_135:
      if (*(_DWORD *)v137 == 2)
      {
        WTF::StringImpl::~StringImpl(v137, v130, v131, v132, v133, v134, v135, v136);
        WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
      }
      else
      {
        *(_DWORD *)v137 -= 2;
      }
      return SlowCase;
    }
    WTF::String::number(a3, (int **)__dst);
LABEL_150:
    SlowCase = JSC::jsNontrivialString((uint64_t)v10, (JSC::VM *)__dst, v148, v149, v150, v151, v152, v153);
    v137 = *(WTF::StringImpl **)&__dst[0];
    *(_QWORD *)&__dst[0] = 0;
    if (!v137)
      return SlowCase;
    goto LABEL_135;
  }
  if ((_DWORD)a2 != 10)
  {
    if (v12 < a2)
      return *((_QWORD *)this + JSC::radixDigits[(int)v12] + 5277);
    JSC::toStringWithRadixInternal(__dst, (int)a3, a2);
    goto LABEL_150;
  }
  if (v12 > 0xFF)
  {
    v13 = (char *)this + 48368;
    v40 = 9 * ((~((_DWORD)v12 << 15) + v12) ^ ((~((_DWORD)v12 << 15) + v12) >> 10));
    v41 = (v40 ^ (v40 >> 6)) + ~((v40 ^ (v40 >> 6)) << 11);
    LODWORD(v17) = (v41 ^ BYTE2(v41));
    v42 = (_DWORD *)((char *)this + 24 * (v41 ^ BYTE2(v41)) + 48368);
    if (*v42 == (_DWORD)v12)
    {
      v43 = *(_DWORD **)&v13[24 * (v41 ^ BYTE2(v41)) + 8];
      if (v43)
      {
        SlowCase = *(_QWORD *)&v13[24 * v17 + 16];
        if (SlowCase)
          return SlowCase;
LABEL_92:
        *v43 += 2;
        v84 = v43[4];
        v85 = v43;
        if ((v84 & 3) == 2)
        {
          v85 = v43;
          do
          {
            v85 = (_DWORD *)*((_QWORD *)v85 + 3);
            v84 = v85[4];
          }
          while ((v84 & 3) == 2);
        }
        if ((v84 & 8) != 0)
        {
          v59 = 0;
        }
        else
        {
          v85[4] = v84 | 8;
          v59 = (unint64_t)v85[1] << ((v84 & 4) == 0);
        }
        this = (JSC *)((char *)v10 + 192);
        SlowCase = *v11;
        if (*v11 >= (unint64_t)v11[1])
        {
          v154 = v43;
          SlowCase = v11[2];
          if ((SlowCase & 1) != 0)
          {
            JSC::sanitizeStackForVM(v10, a2, (uint64_t)v9, a5, a6, a7, a8, a9);
            SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)v10 + 39672, (char *)v10 + 192, 16, 0, 0);
          }
          else
          {
            v146 = *(_QWORD *)(SlowCase + 8) ^ v11[3];
            v11[1] = SlowCase + HIDWORD(v146);
            v11[2] = SlowCase + (int)v146;
            *v11 = SlowCase + 16;
          }
          this = (JSC *)((char *)v10 + 192);
          v43 = v154;
        }
        else
        {
          *v11 = SlowCase + 16;
        }
        *(_DWORD *)SlowCase = (unint64_t)v11[227] >> 4;
        *(_DWORD *)(SlowCase + 4) = 17302016;
        *(_QWORD *)(SlowCase + 8) = v43;
        if (!*((_BYTE *)v10 + 755))
          goto LABEL_74;
        goto LABEL_73;
      }
    }
    *v42 = v12;
    WTF::String::number((int)a3, (uint64_t *)__dst);
    v78 = &v13[24 * v17];
    v81 = (WTF::StringImpl *)*((_QWORD *)v78 + 1);
    v80 = v78 + 8;
    v79 = v81;
    v82 = *(_QWORD *)&__dst[0];
    *(_QWORD *)&__dst[0] = 0;
    *v80 = v82;
    if (v81)
    {
      v83 = *(_DWORD *)v79 - 2;
      if (*(_DWORD *)v79 == 2)
      {
        WTF::StringImpl::~StringImpl(v79, a2, (uint64_t)v9, a5, a6, a7, a8, a9);
        WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
        v79 = *(WTF::StringImpl **)&__dst[0];
        *(_QWORD *)&__dst[0] = 0;
        if (!v79)
          goto LABEL_91;
        v83 = *(_DWORD *)v79 - 2;
        if (*(_DWORD *)v79 == 2)
        {
          WTF::StringImpl::~StringImpl(v79, a2, (uint64_t)v9, a5, a6, a7, a8, a9);
          WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
          goto LABEL_91;
        }
      }
      *(_DWORD *)v79 = v83;
    }
LABEL_91:
    v43 = (_DWORD *)*v80;
    goto LABEL_92;
  }
  v13 = (char *)this + 44272;
  v59 = (unint64_t)this + 16 * v12 + 44272;
  if (!*(_QWORD *)v59)
  {
    v17 = 0;
    v102 = (int)a3;
    do
    {
      v48 = (int *)((v102 % 0xA) | 0x30);
      *((_BYTE *)__dst + v17-- + 12) = (v102 % 0xA) | 0x30;
      v103 = v102 > 9;
      v102 /= 0xAu;
    }
    while (v103);
    if (v17 + 14 >= 15)
    {
      __break(1u);
      goto LABEL_147;
    }
    if (v17)
    {
      v104 = -v17;
      if ((unint64_t)-v17 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x198B4DA88);
      }
      v105 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v17));
      *v105 = 2;
      v105[1] = -(int)v17;
      *((_QWORD *)v105 + 1) = v105 + 5;
      v105[4] = 4;
      if (v17 == -1)
      {
        *((_BYTE *)v105 + 20) = (_BYTE)v48;
      }
      else
      {
        v106 = (char *)__dst + v17 + 13;
        v107 = v105;
        memcpy(v105 + 5, v106, v104);
        v105 = v107;
      }
    }
    else
    {
      v105 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    v108 = *(WTF::StringImpl **)v59;
    *(_QWORD *)v59 = v105;
    if (v108)
    {
      if (*(_DWORD *)v108 == 2)
      {
        WTF::StringImpl::~StringImpl(v108, a2, (uint64_t)v9, a5, a6, a7, a8, a9);
        WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
      }
      else
      {
        *(_DWORD *)v108 -= 2;
      }
    }
  }
  v60 = &v13[16 * v12];
  v62 = *((_QWORD *)v60 + 1);
  v61 = (uint64_t *)(v60 + 8);
  SlowCase = v62;
  if (!v62)
  {
    SlowCase = JSC::jsNontrivialString(v10, (JSC::VM *)v59, v9, a5, a6, a7, a8, a9);
    *v61 = SlowCase;
  }
  return SlowCase;
}

uint64_t JSC::numberProtoFuncToString(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  unint64_t v14;
  uint64_t v15;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  JSC::Heap *v25;
  unint64_t v26;
  int v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  double *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  size_t v50;
  char *v51;
  int v52;
  size_t v53;
  size_t v54;
  int *v55;
  _BYTE *v56;
  uint64_t v57;
  unint64_t v58;
  int **v59;
  unint64_t v60;
  int v61;
  int *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  _DWORD *v71;
  int *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _DWORD *v81;
  int v82;
  _DWORD *v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int *v87;
  _BYTE *v88;
  char *v89;
  size_t v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  int **v94;
  unint64_t v95;
  int v96;
  int *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  int *v106;
  _BYTE *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t (*v110)(__int128 *);
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  const char *v114;
  const char *v115;
  size_t v116;
  WTF::AtomStringImpl *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  unint64_t v125;
  char *v126;
  int v127;
  int v128;
  unsigned __int8 *v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _BOOL8 v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  double v145;
  double v146;
  double v147;
  BOOL v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  unint64_t v160;
  size_t v161;
  char *v162;
  int v163;
  size_t v164;
  JSC::VM *v165;
  uint64_t v166;
  uint64_t v167;
  size_t v168;
  int *v169;
  _BYTE *v170;
  int v171;
  int *v172;
  unint64_t v173;
  uint64_t v174;
  char *v175;
  unint64_t v176;
  unsigned int v177;
  BOOL v178;
  int *v179;
  int v180;
  int *v181;
  _BYTE *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  unint64_t *v187;
  unint64_t v188;
  int v189;
  uint64_t v190;
  int8x16_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _WORD *v199;
  unint64_t v200;
  uint64_t v201;
  JSC::Heap *v202;
  unint64_t SlowCase;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  double v210;
  WTF::AtomStringImpl *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _WORD *v237;
  _WORD *v238;
  __int128 v239;
  int8x16_t v240;
  int8x16_t v241;
  int8x16_t v242;
  char *v243;
  char *v244;
  char *v245;
  __int16 v246;
  unint64_t v247;
  uint64_t (*v248)(__int128 *);
  _QWORD *v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _WORD *v260;
  _WORD *v261;
  unsigned __int128 v262;
  __int8 v263;
  WTF::StringImpl *v264;
  JSC::JSObject *v265;
  __int128 __dst;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  char __s[8];
  uint64_t v299;
  int8x16x2_t v300;
  int8x16x2_t v301;
  int8x16x2_t v302;

  v299 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(this + 56);
  v11 = v10 + 41968;
  v12 = *((_QWORD *)a2 + 5);
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_3;
  }
  if (v12 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    *(_QWORD *)&v13 = v12 - 0x2000000000000;
    goto LABEL_3;
  }
  if ((v12 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v12 + 5) != 30)
  {
    if (v12 != 10)
    {
      if ((v12 & 0xFFFFFFFFFFFFFFFELL) == 6)
      {
        v187 = (unint64_t *)(v10 + 41984);
        goto LABEL_352;
      }
      if ((v12 & 0xFFFE000000000002) == 0)
      {
        v186 = *(unsigned __int8 *)(v12 + 5);
        switch(v186)
        {
          case 2u:
            v187 = (unint64_t *)(v10 + 42040);
            goto LABEL_352;
          case 4u:
            v187 = (unint64_t *)(v10 + 42048);
            goto LABEL_352;
          case 3u:
            v187 = (unint64_t *)(v10 + 42056);
            goto LABEL_352;
        }
        if (v186 >= 0x17)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xA) & 1) != 0
            && *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28) == this)
          {
            goto LABEL_465;
          }
          if ((v186 & 0xFE) == 0x1A
            || (*(_BYTE *)(v12 + 6) & 4) != 0
            && ((*(void (**)(__int128 *__return_ptr))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0x38))(&__dst),
                (_BYTE)__dst))
          {
            v187 = (unint64_t *)(v10 + 42000);
            goto LABEL_352;
          }
        }
      }
      v187 = (unint64_t *)(v10 + 42024);
      goto LABEL_352;
    }
LABEL_465:
    v187 = (unint64_t *)(v10 + 42032);
LABEL_352:
    v188 = *(_QWORD *)(*v187 + 8);
    if ((v188 & 1) != 0)
      v188 = (unint64_t)*JSC::JSRopeString::resolveRope(*v187, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (v188)
    {
      v189 = *(_DWORD *)(v188 + 4);
      *(_DWORD *)v188 += 2;
      if (v189 < 0)
        goto LABEL_475;
      v190 = (v189 + 39);
      if (__OFADD__(v189, 39))
        goto LABEL_475;
      if ((*(_BYTE *)(v188 + 16) & 4) == 0)
      {
        if (v190 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v190 + 20), &__dst);
          v198 = __dst;
          if ((_QWORD)__dst)
          {
            *(_DWORD *)__dst = 2;
            *(_DWORD *)(v198 + 4) = v190;
            *(_OWORD *)(v198 + 20) = xmmword_199158DF0;
            *(_QWORD *)(v198 + 8) = v198 + 20;
            *(_DWORD *)(v198 + 16) = 0;
            v199 = (_WORD *)(v198 + 98);
            *(_OWORD *)(v198 + 36) = xmmword_199158E00;
            *(_OWORD *)(v198 + 52) = xmmword_199158E10;
            *(_OWORD *)(v198 + 68) = xmmword_199158E20;
            *(_QWORD *)(v198 + 84) = 0x62006900740061;
            *(_DWORD *)(v198 + 92) = 6619244;
            *(_WORD *)(v198 + 96) = 32;
            v191 = *(int8x16_t **)(v188 + 8);
            v233 = *(unsigned int *)(v188 + 4);
            if ((*(_BYTE *)(v188 + 16) & 4) != 0)
            {
              v237 = &v199[v233];
              if (v233 >= 0x40)
              {
                v238 = &v199[v233 & 0xFFFFFFC0];
                v239 = 0uLL;
                do
                {
                  v300.val[0] = *v191;
                  v240 = v191[1];
                  v301.val[0] = v191[2];
                  v241 = v191[3];
                  v191 += 4;
                  v242 = v241;
                  v301.val[1] = 0uLL;
                  v302.val[0] = v240;
                  v300.val[1] = 0uLL;
                  v243 = (char *)v199;
                  vst2q_s8(v243, v300);
                  v243 += 32;
                  v302.val[1] = 0uLL;
                  vst2q_s8(v243, v302);
                  v244 = (char *)(v199 + 32);
                  vst2q_s8(v244, v301);
                  v245 = (char *)(v199 + 48);
                  vst2q_s8(v245, *(int8x16x2_t *)(&v239 - 1));
                  v199 += 64;
                }
                while (v199 != v238);
                v199 = v238;
              }
              while (v199 != v237)
              {
                v246 = v191->u8[0];
                v191 = (int8x16_t *)((char *)v191 + 1);
                *v199++ = v246;
              }
            }
            else if ((_DWORD)v233 == 1)
            {
              *v199 = v191->i16[0];
            }
            else if ((_DWORD)v233)
            {
              v192 = 2 * v233;
LABEL_381:
              memcpy(v199, v191, v192);
            }
LABEL_363:
            *(_QWORD *)__s = v198;
            v200 = *(_QWORD *)(this + 176);
            v201 = *(_QWORD *)(this + 56);
            if ((v200 & 1) != 0)
            {
              v248 = *(uint64_t (**)(__int128 *))(v200 & 0xFFFFFFFFFFFFFFFCLL);
              if ((this & 8) != 0)
                v249 = (_QWORD *)(this - 16);
              else
                v249 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
              *(_QWORD *)&__dst = *v249;
              *((_QWORD *)&__dst + 1) = this;
              *(_QWORD *)&v267 = this + 176;
              v200 = v248(&__dst);
            }
            v202 = *(JSC::Heap **)(v201 + 40448);
            if (!v202)
              v202 = JSC::GCClient::Heap::errorInstanceSpaceSlow((JSC::Heap **)(v201 + 37552));
            SlowCase = *((_QWORD *)v202 + 3);
            if (SlowCase >= *((_QWORD *)v202 + 4))
            {
              SlowCase = *((_QWORD *)v202 + 5);
              if ((SlowCase & 1) != 0)
              {
                JSC::sanitizeStackForVM((JSC *)v201, (JSC::VM *)v191, v192, v193, v194, v195, v196, v197);
                SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v202, v201 + 192, 64, 0, 0, v257, v258, v259);
                goto LABEL_368;
              }
              v250 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v202 + 6);
              *((_QWORD *)v202 + 4) = SlowCase + HIDWORD(v250);
              *((_QWORD *)v202 + 5) = SlowCase + (int)v250;
            }
            *((_QWORD *)v202 + 3) = SlowCase + 64;
LABEL_368:
            *(_DWORD *)SlowCase = 0;
            v204 = *(_DWORD *)(v200 + 8);
            *(_DWORD *)SlowCase = v200 >> 4;
            *(_DWORD *)(SlowCase + 4) = v204;
            *(_WORD *)(SlowCase + 56) = 0;
            *(_OWORD *)(SlowCase + 40) = 0u;
            *(_OWORD *)(SlowCase + 24) = 0u;
            *(_OWORD *)(SlowCase + 8) = 0u;
            *(_BYTE *)(SlowCase + 58) = 5;
            *(_BYTE *)(SlowCase + 59) = *(_BYTE *)(SlowCase + 59) & 0xE0 | 0x10;
            JSC::ErrorInstance::finishCreation(SlowCase, v201, (WTF::StringImpl **)__s, 0, 0, 0, 1, v197, (__n128)0);
            if ((SlowCase & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x4C)))
            {
              SlowCase = JSC::Exception::create(v10, (JSC::VM *)SlowCase, 0, v205, v206, v207, v208, v209);
            }
            v64 = (uint64_t)JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, (JSC::Exception *)SlowCase, v210, v205, v206, v207, v208, v209);
            v218 = *(_QWORD *)__s;
            *(_QWORD *)__s = 0;
            if (!v218)
            {
LABEL_373:
              if (!v188)
                return v64;
              if (*(_DWORD *)v188 != 2)
              {
                *(_DWORD *)v188 -= 2;
                return v64;
              }
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v188, v211, v212, v213, v214, v215, v216, v217);
              v227 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
              if (!v227)
              {
                pas_try_deallocate_slow_no_cache(v188, (uint64_t)&bmalloc_heap_config, 1);
                return v64;
              }
              if (!(v188 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v188 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v188)) & 1) != 0)
              {
                goto LABEL_401;
              }
              if (v188 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v188 >> 24)
              {
                v222 = 0;
              }
              else
              {
                v222 = (*(_DWORD *)((char *)off_1ECF425F8
                                  + ((((v188 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                  + 24) >> (2 * ((BYTE3(v188) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v222 == 1)
                {
LABEL_401:
                  v228 = *(unsigned int *)(v227 + 8000);
                  if (v228 >= 0x3E7)
                  {
                    pas_thread_local_cache_append_deallocation_slow(v227, v188, (os_unfair_lock_s *)5, v222, v223, v224, v225, v226);
                  }
                  else
                  {
                    *(_QWORD *)(v227 + 8 * v228) = v188 | 0x5000000000000;
                    *(_DWORD *)(v227 + 8000) = v228 + 1;
                  }
                  return v64;
                }
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v227, v188, 1, v222, v223, v224, v225, v226);
              return v64;
            }
            if (*(_DWORD *)v218 != 2)
            {
              *(_DWORD *)v218 -= 2;
              goto LABEL_373;
            }
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v218, v211, v212, v213, v214, v215, v216, v217);
            v220 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (!v220)
            {
              pas_try_deallocate_slow_no_cache(v218, (uint64_t)&bmalloc_heap_config, 1);
              goto LABEL_373;
            }
            if (!(v218 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v218 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v218)) & 1) != 0)
            {
LABEL_396:
              v221 = *(unsigned int *)(v220 + 8000);
              if (v221 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v220, v218, (os_unfair_lock_s *)5, v213, v214, v215, v216, v217);
              }
              else
              {
                *(_QWORD *)(v220 + 8 * v221) = v218 | 0x5000000000000;
                *(_DWORD *)(v220 + 8000) = v221 + 1;
              }
              goto LABEL_373;
            }
            if (v218 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v218 >> 24)
            {
              v213 = 0;
            }
            else
            {
              v213 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v218 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v218) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v213 == 1)
                goto LABEL_396;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v220, v218, 1, v213, v214, v215, v216, v217);
            goto LABEL_373;
          }
        }
LABEL_475:
        *(_QWORD *)__s = 0;
        __break(0xC471u);
        JUMPOUT(0x198B4FA84);
      }
    }
    else
    {
      v190 = 39;
    }
    WTF::tryFastCompactMalloc((WTF *)(v190 + 20), &__dst);
    v198 = __dst;
    if ((_QWORD)__dst)
    {
      *(_DWORD *)__dst = 2;
      *(_DWORD *)(v198 + 4) = v190;
      *(_QWORD *)(v198 + 8) = v198 + 20;
      *(_DWORD *)(v198 + 16) = 4;
      qmemcpy((void *)(v198 + 20), "thisNumberValue called on incompatible ", 39);
      if (!v188)
        goto LABEL_363;
      v199 = (_WORD *)(v198 + 59);
      v191 = *(int8x16_t **)(v188 + 8);
      v192 = *(unsigned int *)(v188 + 4);
      if ((*(_BYTE *)(v188 + 16) & 4) != 0)
      {
        if ((_DWORD)v192 == 1)
        {
          *(_BYTE *)v199 = v191->i8[0];
          goto LABEL_363;
        }
        if ((_DWORD)v192)
          goto LABEL_381;
      }
      else
      {
        v260 = (_WORD *)((char *)v199 + v192);
        if (v192 >= 0x10)
        {
          v261 = (_WORD *)((char *)v199 + (v192 & 0xFFFFFFF0));
          do
          {
            v262 = (unsigned __int128)vld2q_s8(v191->i8);
            v191 += 2;
            *(_OWORD *)v199 = v262;
            v199 += 8;
          }
          while (v199 != v261);
          v199 = v261;
        }
        while (v199 != v260)
        {
          v263 = v191->i8[0];
          v191 = (int8x16_t *)((char *)v191 + 2);
          *(_BYTE *)v199 = v263;
          v199 = (_WORD *)((char *)v199 + 1);
        }
      }
      goto LABEL_363;
    }
    goto LABEL_475;
  }
  v144 = *(_QWORD *)(v12 + 16);
  *(double *)a9.i64 = (double)(int)v144;
  if (v144 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v13 = v144 - 0x2000000000000;
  else
    v13 = (double)(int)v144;
LABEL_3:
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14 = 10;
    goto LABEL_29;
  }
  v14 = *((_QWORD *)a2 + 6);
  v265 = (JSC::JSObject *)v14;
  if (v14 != 10)
  {
    if (v14 < 0xFFFE000000000000)
    {
      if (v14 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v265, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      else
        *(_QWORD *)&v145 = v14 - 0x2000000000000;
      v146 = v145 + 0.0;
      if (*(_DWORD *)(v10 + 80))
      {
        v219 = *(_DWORD *)(v10 + 80);
        if ((v219 & 0x27) != 0 && (v219 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v10 + 16))
          goto LABEL_28;
      }
      v147 = trunc(v146);
      v148 = v147 < 2.0 || v147 > 36.0;
      if (!v148)
      {
        v14 = (int)v147;
        goto LABEL_29;
      }
LABEL_7:
      v15 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v15 = 0x3200000002;
      *(_QWORD *)(v15 + 8) = "toString() radix argument must be between 2 and 36";
      *(_DWORD *)(v15 + 16) = 4;
      v264 = (WTF::StringImpl *)v15;
      v23 = *(_QWORD *)(this + 128);
      v24 = *(_QWORD *)(this + 56);
      if ((v23 & 1) != 0)
      {
        v110 = *(uint64_t (**)(__int128 *))(v23 & 0xFFFFFFFFFFFFFFFCLL);
        if ((this & 8) != 0)
          v111 = (_QWORD *)(this - 16);
        else
          v111 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
        *(_QWORD *)&__dst = *v111;
        *((_QWORD *)&__dst + 1) = this;
        *(_QWORD *)&v267 = this + 128;
        v23 = v110(&__dst);
      }
      v25 = *(JSC::Heap **)(v24 + 40448);
      if (!v25)
        v25 = JSC::GCClient::Heap::errorInstanceSpaceSlow((JSC::Heap **)(v24 + 37552));
      v26 = *((_QWORD *)v25 + 3);
      if (v26 >= *((_QWORD *)v25 + 4))
      {
        v26 = *((_QWORD *)v25 + 5);
        if ((v26 & 1) != 0)
        {
          JSC::sanitizeStackForVM((JSC *)v24, v16, v17, v18, v19, v20, v21, v22);
          v26 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v25, v24 + 192, 64, 0, 0, v153, v154, v155);
          goto LABEL_12;
        }
        v112 = *(_QWORD *)(v26 + 8) ^ *((_QWORD *)v25 + 6);
        *((_QWORD *)v25 + 4) = v26 + HIDWORD(v112);
        *((_QWORD *)v25 + 5) = v26 + (int)v112;
      }
      *((_QWORD *)v25 + 3) = v26 + 64;
LABEL_12:
      *(_DWORD *)v26 = 0;
      v27 = *(_DWORD *)(v23 + 8);
      *(_DWORD *)v26 = v23 >> 4;
      *(_DWORD *)(v26 + 4) = v27;
      *(_WORD *)(v26 + 56) = 0;
      *(_OWORD *)(v26 + 40) = 0u;
      *(_OWORD *)(v26 + 24) = 0u;
      *(_OWORD *)(v26 + 8) = 0u;
      *(_BYTE *)(v26 + 58) = 2;
      *(_BYTE *)(v26 + 59) = *(_BYTE *)(v26 + 59) & 0xE0 | 0x10;
      JSC::ErrorInstance::finishCreation(v26, v24, &v264, 0, 0, 0, 1, v22, (__n128)0);
      if ((v26 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x4C)))
      {
        v26 = JSC::Exception::create(v10, (JSC::VM *)v26, 0, a4, a5, a6, a7, a8);
      }
      v30 = *(_QWORD *)(v10 + 16);
      v29 = *(_QWORD *)(v10 + 24);
      if (v30 && v29 == v30)
      {
LABEL_25:
        v36 = v264;
        v264 = 0;
        if (!v36)
        {
LABEL_28:
          v14 = 0;
          goto LABEL_29;
        }
        if (*(_DWORD *)v36 != 2)
        {
          *(_DWORD *)v36 -= 2;
          goto LABEL_28;
        }
        WTF::StringImpl::~StringImpl(v36, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v76 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (!v76)
        {
          pas_try_deallocate_slow_no_cache((unint64_t)v36, (uint64_t)&bmalloc_heap_config, 1);
          goto LABEL_28;
        }
        if (!((unint64_t)v36 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + (((unint64_t)v36 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v36)) & 1) != 0)
        {
LABEL_85:
          v77 = *(unsigned int *)(v76 + 8000);
          if (v77 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v76, (uint64_t)v36, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v76 + 8 * v77) = (unint64_t)v36 | 0x5000000000000;
            *(_DWORD *)(v76 + 8000) = v77 + 1;
          }
          goto LABEL_28;
        }
        if ((unint64_t)v36 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= (unint64_t)v36 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8
                          + (((((unint64_t)v36 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                          + 24) >> (2 * ((BYTE3(v36) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
            goto LABEL_85;
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v76, (unint64_t)v36, 1, a4, a5, a6, a7, a8);
        goto LABEL_28;
      }
      if (v29 == v26)
      {
        *(_QWORD *)(v10 + 16) = v26;
        *(_QWORD *)(v10 + 32) = v26;
        if (!v26)
          goto LABEL_25;
        goto LABEL_23;
      }
      v31 = *(uint64_t **)(v10 + 40);
      if (v31)
      {
        v32 = v31[3];
        if ((v32 & 0xFFFE000000000007) == 3
          || *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x28) + 96) == v32)
        {
          *(_QWORD *)&__dst = *(_QWORD *)(v10 + 48);
          do
          {
            v102 = JSC::CallFrame::callerFrame(v31, &__dst);
            v31 = (uint64_t *)v102;
          }
          while (v102 && (*(_QWORD *)(v102 + 24) & 0xFFFE000000000007) == 3);
        }
        if (!HIBYTE(word_1ECF4C48C))
          goto LABEL_21;
        if (v31 && (v31[3] & 0xFFFE000000000007) != 3)
        {
          v113 = v31[2];
          goto LABEL_175;
        }
      }
      else
      {
        if (!HIBYTE(word_1ECF4C48C))
        {
          v31 = 0;
LABEL_21:
          v33 = *(_QWORD *)(this + 2016);
          if (v33
            && (*(_WORD *)(v33 + 48) & 0x40) != 0
            && (*(_QWORD *)(v33 + 152) || *(_QWORD *)(v33 + 160))
            && !*(_BYTE *)(v26 + 32))
          {
            *(_QWORD *)&__dst = 0;
            if (v31)
            {
              JSC::StackVisitor::visit<(JSC::StackVisitor::EmptyEntryFrameAction)0,JSC::GetCatchHandlerFunctor>((JSC::CallFrame *)v31, (JSC::VM *)v10, &__dst, 0, a5, a6, a7, a8);
              v135 = __dst != 0;
            }
            else
            {
              v135 = 0;
            }
            JSC::Debugger::exception(v33, (WTF::AtomStringImpl *)this, (JSC::Wasm::NameSection *)v31, *(_QWORD *)(v26 + 8), v135, a6, a7, a8, v28);
          }
          *(_BYTE *)(v26 + 32) = 1;
          *(_QWORD *)(v10 + 16) = v26;
          *(_QWORD *)(v10 + 32) = v26;
LABEL_23:
          v34 = (unsigned int *)(v10 + 80);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 | 0x10, v34));
          goto LABEL_25;
        }
        v31 = 0;
      }
      v113 = 0;
LABEL_175:
      *(_QWORD *)&__dst = v113;
      *(_QWORD *)__s = v31;
      WTF::dataLog<char [34],WTF::RawPointer,char [17],JSC::CodeBlock *,char [2]>("Throwing exception in call frame ", (const void **)__s, " for code block ", (uint64_t *)&__dst, "\n");
      __break(0xC471u);
      JUMPOUT(0x198B4E6E0);
    }
    if ((v14 - 37) < 0xFFFFFFDD)
      goto LABEL_7;
  }
LABEL_29:
  if (*(_DWORD *)(v10 + 80))
  {
    v101 = *(_DWORD *)(v10 + 80);
    if ((v101 & 0x27) != 0 && (v101 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v37 = (uint64_t *)(v10 + 39696);
  v38 = (int)v13;
  if (v13 != (double)(int)v38)
  {
    if ((_DWORD)v14 == 10)
    {
      v39 = v10 + 54512;
      v40 = (~(*(_QWORD *)&v13 << 32) + *(_QWORD *)&v13) ^ ((~(*(_QWORD *)&v13 << 32) + *(_QWORD *)&v13) >> 22);
      v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((unint64_t)(v40 + ~(v40 << 13)) >> 8));
      v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
      v43 = ((v42 >> 31) ^ v42);
      v44 = (double *)(v10 + 54512 + 24 * ((v42 >> 31) ^ v42));
      if (*v44 == v13)
      {
        v55 = *(int **)(v39 + 24 * v43 + 8);
        if (v55)
        {
          v64 = *(_QWORD *)(v39 + 24 * v43 + 16);
          if (v64)
            return v64;
LABEL_48:
          *v55 += 2;
          v61 = v55[4];
          v62 = v55;
          if ((v61 & 3) == 2)
          {
            v62 = v55;
            do
            {
              v62 = (int *)*((_QWORD *)v62 + 3);
              v61 = v62[4];
            }
            while ((v61 & 3) == 2);
          }
          if ((v61 & 8) != 0)
          {
            v63 = 0;
          }
          else
          {
            v62[4] = v61 | 8;
            v63 = (unint64_t)v62[1] << ((v61 & 4) == 0);
          }
          v64 = *v37;
          if ((unint64_t)*v37 >= *(_QWORD *)(v10 + 39704))
          {
            v64 = *(_QWORD *)(v10 + 39712);
            if ((v64 & 1) != 0)
            {
              JSC::sanitizeStackForVM((JSC *)v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              v64 = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v150, v151, v152);
              goto LABEL_53;
            }
            v109 = *(_QWORD *)(v64 + 8) ^ *(_QWORD *)(v10 + 39720);
            *(_QWORD *)(v10 + 39704) = v64 + HIDWORD(v109);
            *(_QWORD *)(v10 + 39712) = v64 + (int)v109;
          }
          *v37 = v64 + 16;
LABEL_53:
          *(_DWORD *)v64 = *(_QWORD *)(v10 + 41512) >> 4;
          *(_DWORD *)(v64 + 4) = 17302016;
          *(_QWORD *)(v64 + 8) = v55;
          if (*(_BYTE *)(v10 + 755))
            __dmb(0xAu);
          if (v63 >= 0x101)
            JSC::Heap::reportExtraMemoryAllocatedSlowCase(v10 + 192, 0, v64, v63, a5, a6, a7, a8);
          v65 = v39 + 24 * v43;
LABEL_58:
          *(_QWORD *)(v65 + 16) = v64;
          return v64;
        }
      }
      *v44 = v13;
      v45 = (*(_QWORD *)&v13 >> 52) & 0x7FFLL;
      if ((_DWORD)v45 == 2047)
      {
        if ((*(_QWORD *)&v13 & 0xFFFFFFFFFFFFFLL) != 0)
        {
          qmemcpy(__s, "NaN", 3);
          v46 = &__s[3];
        }
        else
        {
          v73 = __s;
          if ((*(_QWORD *)&v13 & 0x8000000000000000) != 0)
          {
            __s[0] = 45;
            v73 = &__s[1];
          }
          *(_QWORD *)v73 = 0x7974696E69666E49;
          v46 = v73 + 8;
        }
LABEL_40:
        *v46 = 0;
        v52 = strlen(__s);
        memcpy(&__dst, __s, v52);
        *((_BYTE *)&__dst + v52) = 0;
        v53 = strlen((const char *)&__dst);
        if (v53)
        {
          v54 = v53;
          if (v53 >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x198B4F558);
          }
          v55 = (int *)WTF::fastCompactMalloc((WTF *)(v53 + 20));
          v56 = v55 + 5;
          *v55 = 2;
          v55[1] = v54;
          *((_QWORD *)v55 + 1) = v55 + 5;
          v55[4] = 4;
          if (v54 == 1)
            *v56 = __dst;
          else
            memcpy(v56, &__dst, v54);
        }
        else
        {
          v55 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
        }
        v57 = v39 + 24 * v43;
        v60 = *(_QWORD *)(v57 + 8);
        v59 = (int **)(v57 + 8);
        v58 = v60;
        *v59 = v55;
        if (!v60)
          goto LABEL_48;
        if (*(_DWORD *)v58 != 2)
        {
          *(_DWORD *)v58 -= 2;
          goto LABEL_48;
        }
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v58, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v74 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (v74)
        {
          if (!(v58 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v58 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v58)) & 1) != 0)
          {
            goto LABEL_76;
          }
          if (v58 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v58 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v58 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v58) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
            {
LABEL_76:
              v75 = *(unsigned int *)(v74 + 8000);
              if (v75 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v74, v58, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v74 + 8 * v75) = v58 | 0x5000000000000;
                *(_DWORD *)(v74 + 8000) = v75 + 1;
              }
              goto LABEL_78;
            }
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v74, v58, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v58, (uint64_t)&bmalloc_heap_config, 1);
        }
LABEL_78:
        v55 = *v59;
        goto LABEL_48;
      }
      v47 = *(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFLL;
      if ((*(_QWORD *)&v13 & 0x8000000000000000) != 0 && v47)
      {
        __s[0] = 45;
        v48 = &__s[1];
      }
      else
      {
        v48 = __s;
        if (!v47)
        {
          v46 = &__s[1];
          __s[0] = 48;
          goto LABEL_40;
        }
      }
      v49 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(*(_QWORD *)&v13 & 0x800FFFFFFFFFFFFFLL, v45);
      v46 = WTF::dragonbox::detail::to_shortest(v49, v50, (uint64_t)v48, v51);
      goto LABEL_40;
    }
    if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      v296 = 0u;
      v297 = 0u;
      v294 = 0u;
      v295 = 0u;
      v292 = 0u;
      v293 = 0u;
      v290 = 0u;
      v291 = 0u;
      v288 = 0u;
      v289 = 0u;
      v286 = 0u;
      v287 = 0u;
      v284 = 0u;
      v285 = 0u;
      v282 = 0u;
      v283 = 0u;
      v280 = 0u;
      v281 = 0u;
      v278 = 0u;
      v279 = 0u;
      v276 = 0u;
      v277 = 0u;
      v274 = 0u;
      v275 = 0u;
      v272 = 0u;
      v273 = 0u;
      v270 = 0u;
      v271 = 0u;
      v268 = 0u;
      v269 = 0u;
      __dst = 0u;
      v267 = 0u;
      v114 = JSC::toStringWithRadixInternal((JSC *)&__dst, (char (*)[2180])v14, v13, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (!v114)
        return *(_QWORD *)v11;
      v115 = v114;
      v116 = strlen(v114);
      if (v116)
      {
        v124 = v116;
        if (v116 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B4F998);
        }
        v125 = WTF::fastCompactMalloc((WTF *)(v116 + 20));
        v126 = (char *)(v125 + 20);
        *(_DWORD *)v125 = 2;
        *(_DWORD *)(v125 + 4) = v124;
        *(_QWORD *)(v125 + 8) = v125 + 20;
        *(_DWORD *)(v125 + 16) = 4;
        if (v124 == 1)
        {
          v127 = 0;
          *v126 = *v115;
          goto LABEL_189;
        }
        memcpy(v126, v115, v124);
        v127 = 0;
      }
      else
      {
        v125 = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
        v127 = WTF::StringImpl::s_emptyAtomString;
        LODWORD(v124) = dword_1ECF2C424;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
      if (!(_DWORD)v124)
      {
LABEL_192:
        v64 = *(_QWORD *)v11;
        if (v127)
        {
          *(_DWORD *)v125 = v127;
          return v64;
        }
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v125, v117, v118, v119, v120, v121, v122, v123);
        v142 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (!v142)
        {
          pas_try_deallocate_slow_no_cache(v125, (uint64_t)&bmalloc_heap_config, 1);
          return v64;
        }
        if (!(v125 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v125 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v125)) & 1) != 0)
        {
          goto LABEL_240;
        }
        if (v125 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v125 >> 24)
        {
          v137 = 0;
        }
        else
        {
          v137 = (*(_DWORD *)((char *)off_1ECF425F8
                            + ((((v125 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                            + 24) >> (2 * ((BYTE3(v125) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v137 == 1)
          {
LABEL_240:
            v143 = *(unsigned int *)(v142 + 8000);
            if (v143 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v142, v125, (os_unfair_lock_s *)5, v137, v138, v139, v140, v141);
            }
            else
            {
              *(_QWORD *)(v142 + 8 * v143) = v125 | 0x5000000000000;
              *(_DWORD *)(v142 + 8000) = v143 + 1;
            }
            return v64;
          }
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v142, v125, 1, v137, v138, v139, v140, v141);
        return v64;
      }
      if ((_DWORD)v124 != 1)
      {
        v128 = *(_DWORD *)(v125 + 16);
        goto LABEL_216;
      }
LABEL_189:
      v128 = *(_DWORD *)(v125 + 16);
      v129 = *(unsigned __int8 **)(v125 + 8);
      if ((v128 & 4) != 0)
      {
        v130 = *v129;
LABEL_191:
        v11 = v10 + 8 * v130 + 42216;
        goto LABEL_192;
      }
      v130 = *(unsigned __int16 *)v129;
      if (v130 <= 0xFF)
        goto LABEL_191;
LABEL_216:
      v133 = v125;
      if ((v128 & 3) == 2)
      {
        v133 = v125;
        do
        {
          v133 = *(_QWORD *)(v133 + 24);
          v128 = *(_DWORD *)(v133 + 16);
        }
        while ((v128 & 3) == 2);
      }
      if ((v128 & 8) != 0)
      {
        v134 = 0;
      }
      else
      {
        *(_DWORD *)(v133 + 16) = v128 | 8;
        v134 = (unint64_t)*(unsigned int *)(v133 + 4) << ((v128 & 4) == 0);
      }
      v64 = *v37;
      if ((unint64_t)*v37 >= *(_QWORD *)(v10 + 39704))
      {
        v64 = *(_QWORD *)(v10 + 39712);
        if ((v64 & 1) != 0)
        {
          JSC::sanitizeStackForVM((JSC *)v10, v117, v118, v119, v120, v121, v122, v123);
          v64 = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v234, v235, v236);
          goto LABEL_221;
        }
        v176 = *(_QWORD *)(v64 + 8) ^ *(_QWORD *)(v10 + 39720);
        *(_QWORD *)(v10 + 39704) = v64 + HIDWORD(v176);
        *(_QWORD *)(v10 + 39712) = v64 + (int)v176;
      }
      *v37 = v64 + 16;
LABEL_221:
      *(_DWORD *)v64 = *(_QWORD *)(v10 + 41512) >> 4;
      *(_DWORD *)(v64 + 4) = 17302016;
      *(_QWORD *)(v64 + 8) = v125;
      if (*(_BYTE *)(v10 + 755))
        __dmb(0xAu);
      if (v134 >= 0x101)
        JSC::Heap::reportExtraMemoryAllocatedSlowCase(v10 + 192, 0, v64, v134, v120, v121, v122, v123);
      return v64;
    }
    v156 = (*(_QWORD *)&v13 >> 52) & 0x7FFLL;
    if ((_DWORD)v156 == 2047)
    {
      if ((*(_QWORD *)&v13 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", 3);
        v157 = &__s[3];
      }
      else
      {
        v175 = __s;
        if ((*(_QWORD *)&v13 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v175 = &__s[1];
        }
        *(_QWORD *)v175 = 0x7974696E69666E49;
        v157 = v175 + 8;
      }
LABEL_292:
      *v157 = 0;
      v163 = strlen(__s);
      memcpy(&__dst, __s, v163);
      *((_BYTE *)&__dst + v163) = 0;
      v164 = strlen((const char *)&__dst);
      if (v164)
      {
        v168 = v164;
        if (v164 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B4FA30);
        }
        v169 = (int *)WTF::fastCompactMalloc((WTF *)(v164 + 20));
        v170 = v169 + 5;
        *v169 = 2;
        v169[1] = v168;
        *((_QWORD *)v169 + 1) = v169 + 5;
        v169[4] = 4;
        if (v168 == 1)
          *v170 = __dst;
        else
          memcpy(v170, &__dst, v168);
        v171 = 4;
        v172 = v169;
      }
      else
      {
        v169 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        while (1)
        {
          v171 = v169[4];
          if ((v171 & 3) != 2)
            break;
          v169 = (int *)*((_QWORD *)v169 + 3);
        }
        v172 = &WTF::StringImpl::s_emptyAtomString;
        if ((v171 & 8) != 0)
        {
          v173 = 0;
          goto LABEL_303;
        }
      }
      v169[4] = v171 | 8;
      v173 = (unint64_t)v169[1] << ((v171 & 4) == 0);
LABEL_303:
      v174 = v10 + 192;
      v64 = *v37;
      if ((unint64_t)*v37 >= *(_QWORD *)(v10 + 39704))
      {
        v64 = *(_QWORD *)(v10 + 39712);
        if ((v64 & 1) != 0)
        {
          JSC::sanitizeStackForVM((JSC *)v10, v165, v166, v167, a5, a6, a7, a8);
          v64 = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v251, v252, v253);
LABEL_305:
          *(_DWORD *)v64 = *(_QWORD *)(v10 + 41512) >> 4;
          *(_DWORD *)(v64 + 4) = 17302016;
          *(_QWORD *)(v64 + 8) = v172;
          if (!*(_BYTE *)(v10 + 755))
            goto LABEL_307;
          goto LABEL_306;
        }
        v232 = *(_QWORD *)(v64 + 8) ^ *(_QWORD *)(v10 + 39720);
        *(_QWORD *)(v10 + 39704) = v64 + HIDWORD(v232);
        *(_QWORD *)(v10 + 39712) = v64 + (int)v232;
      }
      *v37 = v64 + 16;
      goto LABEL_305;
    }
    v158 = *(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFLL;
    if ((*(_QWORD *)&v13 & 0x8000000000000000) != 0 && v158)
    {
      __s[0] = 45;
      v159 = &__s[1];
    }
    else
    {
      v159 = __s;
      if (!v158)
      {
        v157 = &__s[1];
        __s[0] = 48;
        goto LABEL_292;
      }
    }
    v160 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(*(_QWORD *)&v13 & 0x800FFFFFFFFFFFFFLL, v156);
    v157 = WTF::dragonbox::detail::to_shortest(v160, v161, (uint64_t)v159, v162);
    goto LABEL_292;
  }
  if ((_DWORD)v14 != 10)
  {
    if (v14 > v38)
      return *(_QWORD *)(v10 + 8 * JSC::radixDigits[(int)v38] + 42216);
    if ((int)v38 >= 0)
      v177 = (int)v13;
    else
      v177 = -(int)v38;
    v67 = 32;
    do
    {
      LOBYTE(v70) = JSC::radixDigits[v177 % v14];
      *((_BYTE *)&__dst + v67--) = v70;
      v178 = v177 >= v14;
      v177 /= v14;
    }
    while (v178);
    if ((v38 & 0x80000000) != 0)
    {
      LOBYTE(v70) = 45;
      *((_BYTE *)&__dst + v67) = 45;
    }
    else
    {
      ++v67;
    }
    if (v67 < 34)
    {
      if (v67 == 33)
      {
        v179 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        while (1)
        {
          v180 = v179[4];
          if ((v180 & 3) != 2)
            break;
          v179 = (int *)*((_QWORD *)v179 + 3);
        }
        v181 = &WTF::StringImpl::s_emptyAtomString;
        if ((v180 & 8) != 0)
        {
          v173 = 0;
          goto LABEL_338;
        }
LABEL_337:
        v179[4] = v180 | 8;
        v173 = (unint64_t)v179[1] << ((v180 & 4) == 0);
LABEL_338:
        v174 = v10 + 192;
        v64 = *v37;
        if ((unint64_t)*v37 >= *(_QWORD *)(v10 + 39704))
        {
          v64 = *(_QWORD *)(v10 + 39712);
          if ((v64 & 1) != 0)
          {
            JSC::sanitizeStackForVM((JSC *)v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            v64 = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v254, v255, v256);
LABEL_340:
            *(_DWORD *)v64 = *(_QWORD *)(v10 + 41512) >> 4;
            *(_DWORD *)(v64 + 4) = 17302016;
            *(_QWORD *)(v64 + 8) = v181;
            if (!*(_BYTE *)(v10 + 755))
            {
LABEL_307:
              if (v173 >= 0x101)
                JSC::Heap::reportExtraMemoryAllocatedSlowCase(v174, 0, v64, v173, a5, a6, a7, a8);
              return v64;
            }
LABEL_306:
            __dmb(0xAu);
            goto LABEL_307;
          }
          v247 = *(_QWORD *)(v64 + 8) ^ *(_QWORD *)(v10 + 39720);
          *(_QWORD *)(v10 + 39704) = v64 + HIDWORD(v247);
          *(_QWORD *)(v10 + 39712) = v64 + (int)v247;
        }
        *v37 = v64 + 16;
        goto LABEL_340;
      }
LABEL_332:
      if ((unint64_t)(33 - v67) >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x198B4FA78);
      }
      v179 = (int *)WTF::fastCompactMalloc((WTF *)(53 - v67));
      v182 = v179 + 5;
      *v179 = 2;
      v179[1] = 33 - v67;
      *((_QWORD *)v179 + 1) = v179 + 5;
      v179[4] = 4;
      if (v67 == 32)
        *v182 = v70;
      else
        memcpy(v182, (char *)&__dst + v67, 33 - v67);
      v180 = 4;
      v181 = v179;
      goto LABEL_337;
    }
    goto LABEL_331;
  }
  if (v38 > 0xFF)
  {
    v67 = v10 + 48368;
    v68 = 9 * ((~((_DWORD)v38 << 15) + v38) ^ ((~((_DWORD)v38 << 15) + v38) >> 10));
    v69 = (v68 ^ (v68 >> 6)) + ~((v68 ^ (v68 >> 6)) << 11);
    LODWORD(v70) = (v69 ^ BYTE2(v69));
    v71 = (_DWORD *)(v10 + 48368 + 24 * (v69 ^ BYTE2(v69)));
    if (*v71 == (_DWORD)v38)
    {
      v72 = *(int **)(v67 + 24 * v70 + 8);
      if (v72)
      {
        v64 = *(_QWORD *)(v67 + 24 * v70 + 16);
        if (v64)
          return v64;
LABEL_121:
        *v72 += 2;
        v96 = v72[4];
        v97 = v72;
        if ((v96 & 3) == 2)
        {
          v97 = v72;
          do
          {
            v97 = (int *)*((_QWORD *)v97 + 3);
            v96 = v97[4];
          }
          while ((v96 & 3) == 2);
        }
        if ((v96 & 8) != 0)
        {
          v98 = 0;
        }
        else
        {
          v97[4] = v96 | 8;
          v98 = (unint64_t)v97[1] << ((v96 & 4) == 0);
        }
        v64 = *v37;
        if ((unint64_t)*v37 >= *(_QWORD *)(v10 + 39704))
        {
          v64 = *(_QWORD *)(v10 + 39712);
          if ((v64 & 1) != 0)
          {
            JSC::sanitizeStackForVM((JSC *)v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            v64 = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v183, v184, v185);
            goto LABEL_126;
          }
          v136 = *(_QWORD *)(v64 + 8) ^ *(_QWORD *)(v10 + 39720);
          *(_QWORD *)(v10 + 39704) = v64 + HIDWORD(v136);
          *(_QWORD *)(v10 + 39712) = v64 + (int)v136;
        }
        *v37 = v64 + 16;
LABEL_126:
        *(_DWORD *)v64 = *(_QWORD *)(v10 + 41512) >> 4;
        *(_DWORD *)(v64 + 4) = 17302016;
        *(_QWORD *)(v64 + 8) = v72;
        if (*(_BYTE *)(v10 + 755))
          __dmb(0xAu);
        if (v98 >= 0x101)
          JSC::Heap::reportExtraMemoryAllocatedSlowCase(v10 + 192, 0, v64, v98, a5, a6, a7, a8);
        v65 = v67 + 24 * v70;
        goto LABEL_58;
      }
    }
    *v71 = v38;
    v85 = 0;
    if ((v38 & 0x80000000) != 0)
    {
      v91 = -(int)v38;
      do
      {
        *((_BYTE *)&__dst + v85-- + 12) = (v91 % 0xA) | 0x30;
        v148 = v91 > 9;
        v91 /= 0xAu;
      }
      while (v148);
      *((_BYTE *)&__dst + v85 + 12) = 45;
      if (v85 + 14 < 16)
      {
        if (v85 != 1)
        {
          if ((unint64_t)(1 - v85) >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x198B4F81CLL);
          }
          v87 = (int *)WTF::fastCompactMalloc((WTF *)(21 - v85));
          v88 = v87 + 5;
          *v87 = 2;
          v87[1] = 1 - v85;
          *((_QWORD *)v87 + 1) = v87 + 5;
          v87[4] = 4;
          if (v85)
          {
            v89 = (char *)&__dst + v85 + 12;
            v90 = 1 - v85;
            goto LABEL_111;
          }
          *v88 = 45;
LABEL_117:
          v92 = v67 + 24 * v70;
          v95 = *(_QWORD *)(v92 + 8);
          v94 = (int **)(v92 + 8);
          v93 = v95;
          *v94 = v87;
          if (!v95)
          {
LABEL_120:
            v72 = *v94;
            goto LABEL_121;
          }
          if (*(_DWORD *)v93 != 2)
          {
            *(_DWORD *)v93 -= 2;
            goto LABEL_120;
          }
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v93, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v99 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
          if (!v99)
          {
            pas_try_deallocate_slow_no_cache(v93, (uint64_t)&bmalloc_heap_config, 1);
            goto LABEL_120;
          }
          if (!(v93 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v93 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v93)) & 1) != 0)
          {
LABEL_141:
            v100 = *(unsigned int *)(v99 + 8000);
            if (v100 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v99, v93, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v99 + 8 * v100) = v93 | 0x5000000000000;
              *(_DWORD *)(v99 + 8000) = v100 + 1;
            }
            goto LABEL_120;
          }
          if (v93 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v93 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v93 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v93) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_141;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v99, v93, 1, a4, a5, a6, a7, a8);
          goto LABEL_120;
        }
LABEL_116:
        v87 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        goto LABEL_117;
      }
    }
    else
    {
      do
      {
        v86 = (v38 % 0xA) | 0x30;
        *((_BYTE *)&__dst + v85-- + 12) = (v38 % 0xA) | 0x30;
        v148 = v38 > 9;
        LODWORD(v38) = v38 / 0xA;
      }
      while (v148);
      if (v85 + 14 < 15)
      {
        if (v85)
        {
          if ((unint64_t)-v85 >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x198B4F7B8);
          }
          v87 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v85));
          v88 = v87 + 5;
          *v87 = 2;
          v87[1] = -(int)v85;
          *((_QWORD *)v87 + 1) = v87 + 5;
          v87[4] = 4;
          if (v85 != -1)
          {
            v89 = (char *)&__dst + v85 + 13;
            v90 = -v85;
LABEL_111:
            memcpy(v88, v89, v90);
            goto LABEL_117;
          }
          *v88 = v86;
          goto LABEL_117;
        }
        goto LABEL_116;
      }
    }
    goto LABEL_331;
  }
  v70 = v10 + 44272;
  v67 = v10 + 44272 + 16 * v38;
  if (!*(_QWORD *)v67)
  {
    v103 = 0;
    v104 = (int)v13;
    do
    {
      v105 = (v104 % 0xA) | 0x30;
      *((_BYTE *)&__dst + v103-- + 12) = (v104 % 0xA) | 0x30;
      v148 = v104 > 9;
      v104 /= 0xAu;
    }
    while (v148);
    if (v103 + 14 < 15)
    {
      if (v103)
      {
        if ((unint64_t)-v103 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B4F954);
        }
        v106 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v103));
        v107 = v106 + 5;
        *v106 = 2;
        v106[1] = -(int)v103;
        *((_QWORD *)v106 + 1) = v106 + 5;
        v106[4] = 4;
        if (v103 == -1)
          *v107 = v105;
        else
          memcpy(v107, (char *)&__dst + v103 + 13, -v103);
      }
      else
      {
        v106 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
      v108 = *(_QWORD *)v67;
      *(_QWORD *)v67 = v106;
      if (!v108)
        goto LABEL_91;
      if (*(_DWORD *)v108 != 2)
      {
        *(_DWORD *)v108 -= 2;
        goto LABEL_91;
      }
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v108, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v131 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v131)
      {
        pas_try_deallocate_slow_no_cache(v108, (uint64_t)&bmalloc_heap_config, 1);
        goto LABEL_91;
      }
      if (!(v108 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v108 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v108)) & 1) != 0)
      {
LABEL_202:
        v132 = *(unsigned int *)(v131 + 8000);
        if (v132 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v131, v108, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v131 + 8 * v132) = v108 | 0x5000000000000;
          *(_DWORD *)(v131 + 8000) = v132 + 1;
        }
        goto LABEL_91;
      }
      if (v108 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v108 >> 24)
      {
        a4 = 0;
      }
      else
      {
        a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v108 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v108) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)a4 == 1)
          goto LABEL_202;
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v131, v108, 1, a4, a5, a6, a7, a8);
      goto LABEL_91;
    }
LABEL_331:
    __break(1u);
    goto LABEL_332;
  }
LABEL_91:
  v78 = v70 + 16 * v38;
  v80 = *(_QWORD *)(v78 + 8);
  v79 = (uint64_t *)(v78 + 8);
  v64 = v80;
  if (v80)
    return v64;
  v81 = *(_DWORD **)v67;
  *v81 += 2;
  v82 = v81[4];
  v83 = v81;
  if ((v82 & 3) == 2)
  {
    v83 = v81;
    do
    {
      v83 = (_DWORD *)*((_QWORD *)v83 + 3);
      v82 = v83[4];
    }
    while ((v82 & 3) == 2);
  }
  if ((v82 & 8) != 0)
  {
    v84 = 0;
  }
  else
  {
    v83[4] = v82 | 8;
    v84 = (unint64_t)v83[1] << ((v82 & 4) == 0);
  }
  v64 = *v37;
  if ((unint64_t)*v37 >= *(_QWORD *)(v10 + 39704))
  {
    v64 = *(_QWORD *)(v10 + 39712);
    if ((v64 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v64 = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v229, v230, v231);
      goto LABEL_97;
    }
    v149 = *(_QWORD *)(v64 + 8) ^ *(_QWORD *)(v10 + 39720);
    *(_QWORD *)(v10 + 39704) = v64 + HIDWORD(v149);
    *(_QWORD *)(v10 + 39712) = v64 + (int)v149;
  }
  *v37 = v64 + 16;
LABEL_97:
  *(_DWORD *)v64 = *(_QWORD *)(v10 + 41512) >> 4;
  *(_DWORD *)(v64 + 4) = 17302016;
  *(_QWORD *)(v64 + 8) = v81;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  if (v84 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase(v10 + 192, 0, v64, v84, a5, a6, a7, a8);
  *v79 = v64;
  return v64;
}

JSC::JSObject *JSC::extractToStringRadixArgument(JSC::JSGlobalObject *a1, JSC::JSObject *a2, JSC::VM **a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  const WTF::String *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  WTF::StringImpl *v45;
  JSC::JSObject *v46;

  v46 = a2;
  if (a2 != (JSC::JSObject *)10)
  {
    if ((unint64_t)a2 < 0xFFFE000000000000)
    {
      v43 = JSC::JSValue::toIntegerOrInfinity(&v46, a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      if (*((_DWORD *)*a3 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(*a3, v36, v37, v38, v39, v40, v41, v42))
        return 0;
      if (v43 >= 2.0 && v43 <= 36.0)
        return (JSC::JSObject *)(int)v43;
LABEL_4:
      v11 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v11 = 0x3200000002;
      *(_QWORD *)(v11 + 8) = "toString() radix argument must be between 2 and 36";
      *(_DWORD *)(v11 + 16) = 4;
      v45 = (WTF::StringImpl *)v11;
      v13 = JSC::createRangeError((unint64_t)a1, &v45, v12);
      JSC::VM::throwException(*a3, a1, v13, v14, v15, v16, v17, v18);
      v26 = v45;
      v45 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::~StringImpl(v26, v19, v20, v21, v22, v23, v24, v25);
          WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
        }
        else
        {
          *(_DWORD *)v26 -= 2;
        }
      }
      return 0;
    }
    if (((_DWORD)a2 - 37) < 0xFFFFFFDD)
      goto LABEL_4;
  }
  return a2;
}

unint64_t JSC::numberProtoFuncValueOf(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t result;
  double v11;
  uint64_t v12;
  JSC::Exception *v13;
  unint64_t v14;
  JSC::VM *v15;
  unint64_t v16;
  unint64_t *v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int8x16_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  JSC::Heap *v34;
  unint64_t SlowCase;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  __int128 v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  char *v67;
  char *v68;
  char *v69;
  __int16 v70;
  uint64_t (*v71)(_QWORD *);
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unsigned __int128 v79;
  char v80;
  WTF::StringImpl *v81;
  _QWORD v82[3];
  int8x16x2_t v83;
  int8x16x2_t v84;
  int8x16x2_t v85;

  result = *((_QWORD *)a2 + 5);
  if (result >= 0xFFFE000000000000)
  {
    v11 = (double)(int)result;
LABEL_3:
    if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v12 = (int)v11, v11 == (double)(int)v12)
      && ((_DWORD)v12 || (*(_QWORD *)&v11 & 0x8000000000000000) == 0))
    {
      return v12 | 0xFFFE000000000000;
    }
    else
    {
      return *(_QWORD *)&v11 + 0x2000000000000;
    }
  }
  if (result - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    *(_QWORD *)&v11 = result - 0x2000000000000;
    goto LABEL_3;
  }
  v14 = (unint64_t)this;
  v15 = this[7];
  if ((result & 0xFFFE000000000002) == 0 && *(_BYTE *)(result + 5) == 30)
  {
    v16 = *(_QWORD *)(result + 16);
    v11 = (double)(int)v16;
    if (v16 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v11 = v16 - 0x2000000000000;
    goto LABEL_3;
  }
  v17 = (unint64_t *)((char *)v15 + 41984);
  if (result == 10)
    goto LABEL_108;
  if ((result & 0xFFFFFFFFFFFFFFFELL) == 6)
    goto LABEL_22;
  if ((result & 0xFFFE000000000002) != 0)
    goto LABEL_55;
  v18 = *(unsigned __int8 *)(result + 5);
  switch(v18)
  {
    case 2u:
      v17 = (unint64_t *)((char *)v15 + 42040);
      goto LABEL_22;
    case 4u:
      v17 = (unint64_t *)((char *)v15 + 42048);
      goto LABEL_22;
    case 3u:
      v17 = (unint64_t *)((char *)v15 + 42056);
      goto LABEL_22;
  }
  if (v18 < 0x17)
  {
LABEL_55:
    v17 = (unint64_t *)((char *)v15 + 42024);
    goto LABEL_22;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0xA) & 1) == 0
    || *(_QWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x28) != v14)
  {
    if ((v18 & 0xFE) == 0x1A
      || (*(_BYTE *)(result + 6) & 4) != 0
      && (result = (unint64_t)(*(_QWORD *(**)(_QWORD *__return_ptr))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0x38))(v82),
          LOBYTE(v82[0])))
    {
      v17 = (unint64_t *)((char *)v15 + 42000);
      goto LABEL_22;
    }
    goto LABEL_55;
  }
LABEL_108:
  v17 = (unint64_t *)((char *)v15 + 42032);
LABEL_22:
  v19 = *v17;
  v20 = *(_QWORD *)(*v17 + 8);
  if ((v20 & 1) != 0)
  {
    result = (unint64_t)JSC::JSRopeString::resolveRope(v19, (JSC::JSGlobalObject *)v14, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    v20 = *(_QWORD *)result;
  }
  if (!v20)
  {
    v22 = 39;
LABEL_28:
    result = WTF::tryFastCompactMalloc((WTF *)(v22 + 20), v82);
    v30 = v82[0];
    if (v82[0])
    {
      *(_DWORD *)v82[0] = 2;
      *(_DWORD *)(v30 + 4) = v22;
      *(_QWORD *)(v30 + 8) = v30 + 20;
      *(_DWORD *)(v30 + 16) = 4;
      qmemcpy((void *)(v30 + 20), "thisNumberValue called on incompatible ", 39);
      if (!v20)
        goto LABEL_33;
      v31 = (char *)(v30 + 59);
      v23 = *(int8x16_t **)(v20 + 8);
      v24 = *(unsigned int *)(v20 + 4);
      if ((*(_BYTE *)(v20 + 16) & 4) != 0)
      {
        if ((_DWORD)v24 == 1)
        {
          *v31 = v23->i8[0];
          goto LABEL_33;
        }
        if ((_DWORD)v24)
          goto LABEL_48;
      }
      else
      {
        v77 = &v31[v24];
        if (v24 >= 0x10)
        {
          v78 = &v31[v24 & 0xFFFFFFF0];
          do
          {
            v79 = (unsigned __int128)vld2q_s8(v23->i8);
            v23 += 2;
            *(_OWORD *)v31 = v79;
            v31 += 16;
          }
          while (v31 != v78);
          v31 = v78;
        }
        while (v31 != v77)
        {
          v80 = v23->i8[0];
          v23 = (int8x16_t *)((char *)v23 + 2);
          *v31++ = v80;
        }
      }
      goto LABEL_33;
    }
    goto LABEL_116;
  }
  v21 = *(_DWORD *)(v20 + 4);
  *(_DWORD *)v20 += 2;
  if (v21 < 0)
    goto LABEL_116;
  v22 = (v21 + 39);
  if (__OFADD__(v21, 39))
    goto LABEL_116;
  if ((*(_BYTE *)(v20 + 16) & 4) != 0)
    goto LABEL_28;
  if (v22 <= 0x7FFFFFEF)
  {
    result = WTF::tryFastCompactMalloc((WTF *)(2 * v22 + 20), v82);
    v30 = v82[0];
    if (v82[0])
    {
      *(_DWORD *)v82[0] = 2;
      *(_DWORD *)(v30 + 4) = v22;
      *(_OWORD *)(v30 + 20) = xmmword_199158DF0;
      *(_QWORD *)(v30 + 8) = v30 + 20;
      *(_DWORD *)(v30 + 16) = 0;
      v31 = (char *)(v30 + 98);
      *(_OWORD *)(v30 + 36) = xmmword_199158E00;
      *(_OWORD *)(v30 + 52) = xmmword_199158E10;
      *(_OWORD *)(v30 + 68) = xmmword_199158E20;
      *(_QWORD *)(v30 + 84) = 0x62006900740061;
      *(_DWORD *)(v30 + 92) = 6619244;
      *(_WORD *)(v30 + 96) = 32;
      v23 = *(int8x16_t **)(v20 + 8);
      v60 = *(unsigned int *)(v20 + 4);
      if ((*(_BYTE *)(v20 + 16) & 4) != 0)
      {
        v61 = &v31[2 * v60];
        if (v60 >= 0x40)
        {
          v62 = &v31[2 * (v60 & 0xFFFFFFC0)];
          v63 = 0uLL;
          do
          {
            v83.val[0] = *v23;
            v64 = v23[1];
            v84.val[0] = v23[2];
            v65 = v23[3];
            v23 += 4;
            v66 = v65;
            v84.val[1] = 0uLL;
            v85.val[0] = v64;
            v83.val[1] = 0uLL;
            v67 = v31;
            vst2q_s8(v67, v83);
            v67 += 32;
            v85.val[1] = 0uLL;
            vst2q_s8(v67, v85);
            v68 = v31 + 64;
            vst2q_s8(v68, v84);
            v69 = v31 + 96;
            vst2q_s8(v69, *(int8x16x2_t *)(&v63 - 1));
            v31 += 128;
          }
          while (v31 != v62);
          v31 = v62;
        }
        while (v31 != v61)
        {
          v70 = v23->u8[0];
          v23 = (int8x16_t *)((char *)v23 + 1);
          *(_WORD *)v31 = v70;
          v31 += 2;
        }
      }
      else if ((_DWORD)v60 == 1)
      {
        *(_WORD *)v31 = v23->i16[0];
      }
      else if ((_DWORD)v60)
      {
        v24 = 2 * v60;
LABEL_48:
        memcpy(v31, v23, v24);
      }
LABEL_33:
      v81 = (WTF::StringImpl *)v30;
      v32 = *(_QWORD *)(v14 + 176);
      v33 = *(_QWORD *)(v14 + 56);
      if ((v32 & 1) != 0)
      {
        v71 = *(uint64_t (**)(_QWORD *))(v32 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v14 & 8) != 0)
          v72 = (_QWORD *)(v14 - 16);
        else
          v72 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 8);
        v82[0] = *v72;
        v82[1] = v14;
        v82[2] = v14 + 176;
        v32 = v71(v82);
      }
      v34 = *(JSC::Heap **)(v33 + 40448);
      if (!v34)
        v34 = JSC::GCClient::Heap::errorInstanceSpaceSlow((JSC::Heap **)(v33 + 37552));
      SlowCase = *((_QWORD *)v34 + 3);
      if (SlowCase >= *((_QWORD *)v34 + 4))
      {
        SlowCase = *((_QWORD *)v34 + 5);
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM((JSC *)v33, (JSC::VM *)v23, v24, v25, v26, v27, v28, v29);
          SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v34, v33 + 192, 64, 0, 0, v74, v75, v76);
          goto LABEL_38;
        }
        v73 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v34 + 6);
        *((_QWORD *)v34 + 4) = SlowCase + HIDWORD(v73);
        *((_QWORD *)v34 + 5) = SlowCase + (int)v73;
      }
      *((_QWORD *)v34 + 3) = SlowCase + 64;
LABEL_38:
      *(_DWORD *)SlowCase = 0;
      v36 = *(_DWORD *)(v32 + 8);
      *(_DWORD *)SlowCase = v32 >> 4;
      *(_DWORD *)(SlowCase + 4) = v36;
      *(_WORD *)(SlowCase + 56) = 0;
      *(_OWORD *)(SlowCase + 40) = 0u;
      *(_OWORD *)(SlowCase + 24) = 0u;
      *(_OWORD *)(SlowCase + 8) = 0u;
      *(_BYTE *)(SlowCase + 58) = 5;
      *(_BYTE *)(SlowCase + 59) = *(_BYTE *)(SlowCase + 59) & 0xE0 | 0x10;
      JSC::ErrorInstance::finishCreation(SlowCase, v33, &v81, 0, 0, 0, 1, v29, (__n128)0);
      if ((SlowCase & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x4C)))
      {
        SlowCase = JSC::Exception::create((uint64_t)v15, (JSC::VM *)SlowCase, 0, v37, v38, v39, v40, v41);
      }
      v13 = JSC::VM::throwException(v15, (JSC::JSGlobalObject *)v14, (JSC::Exception *)SlowCase, v42, v37, v38, v39, v40, v41);
      v50 = v81;
      v81 = 0;
      if (!v50)
      {
LABEL_43:
        if (v20)
        {
          if (*(_DWORD *)v20 != 2)
          {
            *(_DWORD *)v20 -= 2;
            return (unint64_t)v13;
          }
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v20, v43, v44, v45, v46, v47, v48, v49);
          v58 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
          if (v58)
          {
            if (!(v20 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v20 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v20)) & 1) != 0)
            {
              goto LABEL_64;
            }
            if (v20 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v20 >> 24)
            {
              v53 = 0;
            }
            else
            {
              v53 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v20 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v20) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v53 == 1)
              {
LABEL_64:
                v59 = *(unsigned int *)(v58 + 8000);
                if (v59 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v58, v20, (os_unfair_lock_s *)5, v53, v54, v55, v56, v57);
                }
                else
                {
                  *(_QWORD *)(v58 + 8 * v59) = v20 | 0x5000000000000;
                  *(_DWORD *)(v58 + 8000) = v59 + 1;
                }
                return (unint64_t)v13;
              }
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v58, v20, 1, v53, v54, v55, v56, v57);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v20, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        return (unint64_t)v13;
      }
      if (*(_DWORD *)v50 != 2)
      {
        *(_DWORD *)v50 -= 2;
        goto LABEL_43;
      }
      WTF::StringImpl::~StringImpl(v50, v43, v44, v45, v46, v47, v48, v49);
      v51 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v51)
      {
        pas_try_deallocate_slow_no_cache((unint64_t)v50, (uint64_t)&bmalloc_heap_config, 1);
        goto LABEL_43;
      }
      if (!((unint64_t)v50 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + (((unint64_t)v50 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v50)) & 1) != 0)
      {
LABEL_59:
        v52 = *(unsigned int *)(v51 + 8000);
        if (v52 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v51, (uint64_t)v50, (os_unfair_lock_s *)5, v45, v46, v47, v48, v49);
        }
        else
        {
          *(_QWORD *)(v51 + 8 * v52) = (unint64_t)v50 | 0x5000000000000;
          *(_DWORD *)(v51 + 8000) = v52 + 1;
        }
        goto LABEL_43;
      }
      if ((unint64_t)v50 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= (unint64_t)v50 >> 24)
      {
        v45 = 0;
      }
      else
      {
        v45 = (*(_DWORD *)((char *)off_1ECF425F8
                         + (((((unint64_t)v50 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                         + 24) >> (2 * ((BYTE3(v50) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v45 == 1)
          goto LABEL_59;
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v51, (unint64_t)v50, 1, v45, v46, v47, v48, v49);
      goto LABEL_43;
    }
  }
LABEL_116:
  __break(0xC471u);
  return result;
}

uint64_t JSC::callObjectConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v9;
  uint64_t result;
  int v11;
  JSC::VM *v12;
  uint64_t v13;

  v9 = (JSC *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1 || (result = *((_QWORD *)a2 + 6), v13 = result, (result & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v11 = *((_DWORD *)this + 212);
    if (v11)
      v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
    else
      v12 = 0;
    return JSC::constructEmptyObject(v9, v12, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else if ((result & 0xFFFE000000000002) != 0)
  {
    return JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v13, this, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else if (*(unsigned __int8 *)(result + 5) <= 0x16u)
  {
    return JSC::JSCell::toObjectSlow((JSC::JSCell *)result, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t JSC::constructWithObjectConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t i;
  char **v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v33;
  int v35;
  JSC::VM *v36;
  uint64_t v37;
  double v38;
  unint64_t InternalFunctionAllocationStructureFromBase;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  unint64_t v48;
  uint64_t Slow;
  JSC::VM *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  int v55;
  unint64_t v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  JSC::VM *v62;

  v9 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if (v9)
    v11 = *((_QWORD *)a2 + 3) == v9;
  else
    v11 = 1;
  if (v11)
  {
    if (*((_DWORD *)a2 + 8) == 1
      || (v30 = *((_QWORD *)a2 + 6), v62 = (JSC::VM *)v30, (v30 & 0xFFFFFFFFFFFFFFF7) == 2))
    {
      v35 = *((_DWORD *)this + 212);
      if (v35)
        v36 = (JSC::VM *)(16 * (v35 & 0xFFFFFFFE));
      else
        v36 = 0;
      return JSC::constructEmptyObject((JSC *)v10, v36, a3, a4, a5, a6, a7, a8);
    }
    else if ((v30 & 0xFFFE000000000002) != 0)
    {
      return JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v62, this, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      if (*(unsigned __int8 *)(v30 + 5) > 0x16u)
        return v30;
      return JSC::JSCell::toObjectSlow((JSC::JSCell *)v30, (JSC::SymbolObject **)this, (uint64_t)a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
    }
  }
  v62 = (JSC::VM *)*((_QWORD *)this + 7);
  for (i = v9; ; i = *(_QWORD *)(i + 16))
  {
    while (1)
    {
      v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
      if (v13 != &JSC::JSBoundFunction::s_info && v13 != &JSC::JSRemoteFunction::s_info)
        break;
      i = *(_QWORD *)(i + 32);
    }
    if (*(_BYTE *)(i + 5) != 61)
    {
      v14 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
      goto LABEL_10;
    }
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)i))
      break;
  }
  JSC::throwTypeError((unint64_t)this, &v62, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v14 = 0;
LABEL_10:
  if (*(_DWORD *)(v10 + 80))
  {
    v40 = *(_DWORD *)(v10 + 80);
    if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v15 = *(_DWORD *)(v14 + 848);
  v16 = 16 * (v15 & 0xFFFFFFFE);
  if (v15)
    v17 = 16 * (v15 & 0xFFFFFFFE);
  else
    v17 = 0;
  v18 = *((_QWORD *)this + 7);
  v19 = *(_QWORD **)(v17 + 40);
  if (*(_BYTE *)(v9 + 5) == 26)
  {
    v20 = *(_QWORD *)(v9 + 24);
    if ((v20 & 1) != 0)
    {
      v33 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v33 + 5) == 8)
        goto LABEL_75;
      v21 = *(_QWORD *)(v33 + 88);
    }
    else
    {
      if (*(_BYTE *)(v20 + 5) == 8)
        goto LABEL_75;
      v21 = *(_QWORD *)(v20 + 88);
    }
    if ((*(_DWORD *)(v21 + 16) & 0x80000000) != 0)
    {
      v50 = *(JSC::VM **)(*(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x28) + 56);
      LODWORD(v62) = 0;
      JSC::JSObject::getDirect((_DWORD *)v9, v50, *(_QWORD *)(*((_QWORD *)v50 + 5244) + 2160), (const JSC::PropertyTable *)&v62, a5, a6, a7, a8);
      if (!v51 || (v62 & 0x70) != 0)
        goto LABEL_75;
      v20 = *(_QWORD *)(v9 + 24);
    }
    if ((v20 & 1) != 0)
      v22 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 48);
    else
      v22 = v20;
    v23 = *(_QWORD *)(v22 + 88);
    if (((1 << *(_BYTE *)(v23 + 50)) & 0x78007) != 0 || (v24 = *(_QWORD **)(v23 + 88)) != 0 && *v24)
    {
      if ((v20 & 1) != 0)
      {
        v25 = v20 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v25 = JSC::FunctionRareData::create((JSC::FunctionRareData *)v18, (JSC::VM *)v20, a3, a4, a5, a6, a7, a8);
        __dmb(0xAu);
        *(_QWORD *)(v9 + 24) = v25 | 1;
        if (v25 && *(_DWORD *)(v18 + 760) >= *(unsigned __int8 *)(v9 + 7))
          JSC::Heap::writeBarrierSlowPath(v18 + 192, v9);
      }
      v26 = *(_DWORD *)(v25 + 40) & 0xFFFFFFFE;
      if ((_DWORD)v26)
      {
        a4 = 16 * v26;
        if (16 * *(unsigned int *)(16 * v26 + 0x4C) == 16 * *(unsigned int *)(v17 + 76)
          && *(_QWORD **)(16 * v26 + 0x28) == v19)
        {
          goto LABEL_29;
        }
      }
      v37 = JSC::JSObject::get((unsigned int *)v9, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v18 + 41952) + 2160), a4, a5, a6, a7, a8);
      if ((v37 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v37 + 5) < 0x17u)
      {
        a4 = v16;
        goto LABEL_29;
      }
      InternalFunctionAllocationStructureFromBase = JSC::FunctionRareData::createInternalFunctionAllocationStructureFromBase((JSC::FunctionRareData *)v25, (JSC::VM *)v18, (JSC::JSGlobalObject *)v19, (JSC::JSObject *)v37, (JSC::Structure *)v17, v38);
LABEL_80:
      a4 = InternalFunctionAllocationStructureFromBase;
      goto LABEL_29;
    }
  }
LABEL_75:
  v53 = JSC::JSObject::get((unsigned int *)v9, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v18 + 41952) + 2160), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v18 + 80))
  {
    v55 = *(_DWORD *)(v18 + 80);
    if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, (uint64_t)a3, v52, a5, a6, a7, a8);
    if (*(_QWORD *)(v18 + 16))
    {
      a4 = 0;
      goto LABEL_29;
    }
  }
  a4 = v16;
  if (*(_BYTE *)(v19[256] + 4) == 2)
  {
    v56 = *(unsigned __int8 *)(v17 + 8);
    v57 = (v56 >> 1) & 7;
    if ((v56 & 0x10) != 0)
      v57 = ((v56 & 0xE) + 10) >> 1;
    v58 = *((_DWORD *)v19 + v57 + 213);
    if (v58)
      v59 = 16 * (v58 & 0xFFFFFFFE);
    else
      v59 = 0;
    a4 = v16;
    if (v59 == v17)
    {
      v60 = *((_DWORD *)v19 + ((v56 >> 1) & 7) + 223);
      if (v60)
        a4 = 16 * (v60 & 0xFFFFFFFE);
      else
        a4 = 0;
    }
  }
  if ((v53 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v53 + 5) >= 0x17u)
  {
    InternalFunctionAllocationStructureFromBase = JSC::StructureCache::emptyStructureForPrototypeFromBaseStructure((JSC::StructureCache *)(v19 + 246), (JSC::JSGlobalObject *)v19, (JSC::JSObject *)v53, (JSC::Structure *)a4, v54);
    goto LABEL_80;
  }
LABEL_29:
  if (*(_DWORD *)(v10 + 80))
  {
    v41 = *(_DWORD *)(v10 + 80);
    if ((v41 & 0x27) != 0 && (v41 & 0x20) == 0)
    {
      v61 = a4;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      a4 = v61;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v27 = 8 * *(unsigned __int8 *)(a4 + 14);
  v28 = *(_QWORD *)(v10 + (((v27 + 31) >> 1) & 0x7F8) + 15024);
  if (!v28)
  {
    v48 = a4;
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, (JSC *)v10, ((_WORD)v27 + 31) & 0xFF0, 0, a5, a6, a7, a8);
    a4 = v48;
    v30 = Slow;
    if (!Slow)
    {
      __break(0xC471u);
      JUMPOUT(0x198B50850);
    }
    goto LABEL_33;
  }
  v29 = *(unsigned int *)(v28 + 60);
  v30 = *(_QWORD *)(v28 + 24);
  if (v30 < *(_QWORD *)(v28 + 32))
    goto LABEL_32;
  v30 = *(_QWORD *)(v28 + 40);
  if ((v30 & 1) == 0)
  {
    v42 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v28 + 48);
    *(_QWORD *)(v28 + 32) = v30 + HIDWORD(v42);
    *(_QWORD *)(v28 + 40) = v30 + (int)v42;
LABEL_32:
    *(_QWORD *)(v28 + 24) = v30 + v29;
    goto LABEL_33;
  }
  v43 = a4;
  JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)v20, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v28, v10 + 192, v29, 0, 0, v44, v45, v46);
  a4 = v43;
  v30 = SlowCase;
LABEL_33:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(a4 + 8);
  *(_DWORD *)v30 = a4 >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  *(_QWORD *)(v30 + 8) = 0;
  bzero((void *)(v30 + 16), v27);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  return v30;
}

void JSC::ObjectConstructor::finishCreation(JSC::JSObject *a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  WTF::StringImpl *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  WTF::StringImpl *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  WTF::StringImpl *v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  WTF::StringImpl *v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  WTF::StringImpl *v81;
  WTF::AtomStringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __n128 v90;
  WTF::StringImpl *v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  WTF::StringImpl *v102;
  WTF::AtomStringImpl *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __n128 v111;
  WTF::StringImpl *v112;
  WTF::AtomStringImpl *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  int v122;
  WTF::StringImpl *v123;
  WTF::AtomStringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __n128 v132;
  WTF::StringImpl *v133;
  WTF::AtomStringImpl *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  int v143;
  WTF::StringImpl *v144;
  WTF::AtomStringImpl *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __n128 v153;
  WTF::StringImpl *v154;
  WTF::AtomStringImpl *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  int v164;
  WTF::StringImpl *v165;
  WTF::AtomStringImpl *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __n128 v174;
  WTF::StringImpl *v175;
  WTF::AtomStringImpl *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  WTF::StringImpl *v186;
  int v187;
  WTF::StringImpl *v188;
  WTF::AtomStringImpl *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __n128 v197;
  WTF::StringImpl *v198;
  WTF::AtomStringImpl *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  WTF::StringImpl *v207;
  WTF::AtomStringImpl *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  __n128 v216;
  WTF::StringImpl *v217;
  WTF::AtomStringImpl *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  int v226;
  WTF::StringImpl *v227;
  uint64_t v228;
  WTF::StringImpl *v229;
  uint64_t v230;
  double v231;
  float v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  WTF::StringImpl *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  __n128 v244;
  WTF::AtomStringImpl *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  void *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  void *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  void *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  void *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  void *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  void *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  void *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  void *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  void *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t v404;
  void *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  void *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  void *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  void *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  void *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  void *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  unint64_t v452;
  void *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  unint64_t v460;
  void *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  void *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  void *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t v484;
  void *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  __n128 v502;
  WTF::StringImpl *v503;
  __int128 v504;

  v12 = a2 + 41952;
  JSC::InternalFunction::finishCreation((unint64_t)a1, (JSC *)a2, (const WTF::String *)1, (JSC::VM *)(*(_QWORD *)(a2 + 41952) + 696), 1, a6, a7, a8);
  JSC::JSObject::putDirectWithoutTransition(a1, a2, *(_QWORD *)(*(_QWORD *)v12 + 2160), a4, 14, v13, v14, v15, v16);
  v17 = JSC::Symbols::getPrototypeOfPrivateName[0] + 4;
  JSC::Symbols::getPrototypeOfPrivateName[0] += 4;
  if ((byte_1ECF2EF30 & 0x20) == 0)
  {
    v18 = (WTF::StringImpl *)JSC::Symbols::getPrototypeOfPrivateName;
LABEL_3:
    *(_DWORD *)v18 = v17 + 2;
    goto LABEL_4;
  }
  v18 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v18)
  {
    v17 = *(_DWORD *)v18;
    goto LABEL_3;
  }
LABEL_4:
  v503 = v18;
  v26 = JSC::JSFunction::create(a2, (uint64_t)a3, 1, &v503, (uint64_t)JSC::objectConstructorGetPrototypeOf, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v28 = v503;
  v503 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v396, v397, v398, v399, v400, v401, v402, v403);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)JSC::Symbols::getPrototypeOfPrivateName, v26, 4, v23, v24, v25, v27);
  v36 = JSC::Symbols::getPrototypeOfPrivateName[0] - 2;
  if (JSC::Symbols::getPrototypeOfPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getPrototypeOfPrivateName, v29, v30, v31, v32, v33, v34, v35);
    WTF::fastFree(v252, v253, v254, v255, v256, v257, v258, v259);
    v36 = JSC::Symbols::getPrototypeOfPrivateName[0];
  }
  else
  {
    JSC::Symbols::getPrototypeOfPrivateName[0] -= 2;
  }
  v37 = v36 - 2;
  if (v37)
  {
    JSC::Symbols::getPrototypeOfPrivateName[0] = v37;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getPrototypeOfPrivateName, v29, v30, v31, v32, v33, v34, v35);
    WTF::fastFree(v260, v261, v262, v263, v264, v265, v266, v267);
  }
  v38 = JSC::Symbols::getOwnPropertyDescriptorPrivateName[0] + 4;
  JSC::Symbols::getOwnPropertyDescriptorPrivateName[0] += 4;
  if ((byte_1ECF31F90 & 0x20) == 0)
  {
    v39 = (WTF::StringImpl *)JSC::Symbols::getOwnPropertyDescriptorPrivateName;
LABEL_13:
    *(_DWORD *)v39 = v38 + 2;
    goto LABEL_14;
  }
  v39 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v39)
  {
    v38 = *(_DWORD *)v39;
    goto LABEL_13;
  }
LABEL_14:
  v503 = v39;
  v47 = JSC::JSFunction::create(a2, (uint64_t)a3, 2, &v503, (uint64_t)JSC::objectConstructorGetOwnPropertyDescriptor, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v49 = v503;
  v503 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v404, v405, v406, v407, v408, v409, v410, v411);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)JSC::Symbols::getOwnPropertyDescriptorPrivateName, v47, 4, v44, v45, v46, v48);
  v57 = JSC::Symbols::getOwnPropertyDescriptorPrivateName[0] - 2;
  if (JSC::Symbols::getOwnPropertyDescriptorPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getOwnPropertyDescriptorPrivateName, v50, v51, v52, v53, v54, v55, v56);
    WTF::fastFree(v268, v269, v270, v271, v272, v273, v274, v275);
    v57 = JSC::Symbols::getOwnPropertyDescriptorPrivateName[0];
  }
  else
  {
    JSC::Symbols::getOwnPropertyDescriptorPrivateName[0] -= 2;
  }
  v58 = v57 - 2;
  if (v58)
  {
    JSC::Symbols::getOwnPropertyDescriptorPrivateName[0] = v58;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getOwnPropertyDescriptorPrivateName, v50, v51, v52, v53, v54, v55, v56);
    WTF::fastFree(v276, v277, v278, v279, v280, v281, v282, v283);
  }
  v59 = JSC::Symbols::getOwnPropertyNamesPrivateName[0] + 4;
  JSC::Symbols::getOwnPropertyNamesPrivateName[0] += 4;
  if ((byte_1ECF31FC0 & 0x20) == 0)
  {
    v60 = (WTF::StringImpl *)JSC::Symbols::getOwnPropertyNamesPrivateName;
LABEL_23:
    *(_DWORD *)v60 = v59 + 2;
    goto LABEL_24;
  }
  v60 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v60)
  {
    v59 = *(_DWORD *)v60;
    goto LABEL_23;
  }
LABEL_24:
  v503 = v60;
  v68 = JSC::JSFunction::create(a2, (uint64_t)a3, 1, &v503, (uint64_t)JSC::objectConstructorGetOwnPropertyNames, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v70 = v503;
  v503 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v61, v62, v63, v64, v65, v66, v67);
      WTF::fastFree(v412, v413, v414, v415, v416, v417, v418, v419);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)JSC::Symbols::getOwnPropertyNamesPrivateName, v68, 4, v65, v66, v67, v69);
  v78 = JSC::Symbols::getOwnPropertyNamesPrivateName[0] - 2;
  if (JSC::Symbols::getOwnPropertyNamesPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getOwnPropertyNamesPrivateName, v71, v72, v73, v74, v75, v76, v77);
    WTF::fastFree(v284, v285, v286, v287, v288, v289, v290, v291);
    v78 = JSC::Symbols::getOwnPropertyNamesPrivateName[0];
  }
  else
  {
    JSC::Symbols::getOwnPropertyNamesPrivateName[0] -= 2;
  }
  v79 = v78 - 2;
  if (v79)
  {
    JSC::Symbols::getOwnPropertyNamesPrivateName[0] = v79;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getOwnPropertyNamesPrivateName, v71, v72, v73, v74, v75, v76, v77);
    WTF::fastFree(v292, v293, v294, v295, v296, v297, v298, v299);
  }
  v80 = JSC::Symbols::getOwnPropertySymbolsPrivateName[0] + 4;
  JSC::Symbols::getOwnPropertySymbolsPrivateName[0] += 4;
  if ((byte_1ECF31FF0 & 0x20) == 0)
  {
    v81 = (WTF::StringImpl *)JSC::Symbols::getOwnPropertySymbolsPrivateName;
LABEL_33:
    *(_DWORD *)v81 = v80 + 2;
    goto LABEL_34;
  }
  v81 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v81)
  {
    v80 = *(_DWORD *)v81;
    goto LABEL_33;
  }
LABEL_34:
  v503 = v81;
  v89 = JSC::JSFunction::create(a2, (uint64_t)a3, 1, &v503, (uint64_t)JSC::objectConstructorGetOwnPropertySymbols, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v91 = v503;
  v503 = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
    {
      WTF::StringImpl::~StringImpl(v91, v82, v83, v84, v85, v86, v87, v88);
      WTF::fastFree(v420, v421, v422, v423, v424, v425, v426, v427);
    }
    else
    {
      *(_DWORD *)v91 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)JSC::Symbols::getOwnPropertySymbolsPrivateName, v89, 4, v86, v87, v88, v90);
  v99 = JSC::Symbols::getOwnPropertySymbolsPrivateName[0] - 2;
  if (JSC::Symbols::getOwnPropertySymbolsPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getOwnPropertySymbolsPrivateName, v92, v93, v94, v95, v96, v97, v98);
    WTF::fastFree(v300, v301, v302, v303, v304, v305, v306, v307);
    v99 = JSC::Symbols::getOwnPropertySymbolsPrivateName[0];
  }
  else
  {
    JSC::Symbols::getOwnPropertySymbolsPrivateName[0] -= 2;
  }
  v100 = v99 - 2;
  if (v100)
  {
    JSC::Symbols::getOwnPropertySymbolsPrivateName[0] = v100;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::getOwnPropertySymbolsPrivateName, v92, v93, v94, v95, v96, v97, v98);
    WTF::fastFree(v308, v309, v310, v311, v312, v313, v314, v315);
  }
  v101 = JSC::Symbols::keysPrivateName[0] + 4;
  JSC::Symbols::keysPrivateName[0] += 4;
  if ((byte_1ECF30B20 & 0x20) == 0)
  {
    v102 = (WTF::StringImpl *)JSC::Symbols::keysPrivateName;
LABEL_43:
    *(_DWORD *)v102 = v101 + 2;
    goto LABEL_44;
  }
  v102 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v102)
  {
    v101 = *(_DWORD *)v102;
    goto LABEL_43;
  }
LABEL_44:
  v503 = v102;
  v110 = JSC::JSFunction::create(a2, (uint64_t)a3, 1, &v503, (uint64_t)JSC::objectConstructorKeys, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v112 = v503;
  v503 = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
    {
      WTF::StringImpl::~StringImpl(v112, v103, v104, v105, v106, v107, v108, v109);
      WTF::fastFree(v428, v429, v430, v431, v432, v433, v434, v435);
    }
    else
    {
      *(_DWORD *)v112 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)JSC::Symbols::keysPrivateName, v110, 4, v107, v108, v109, v111);
  v120 = JSC::Symbols::keysPrivateName[0] - 2;
  if (JSC::Symbols::keysPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::keysPrivateName, v113, v114, v115, v116, v117, v118, v119);
    WTF::fastFree(v316, v317, v318, v319, v320, v321, v322, v323);
    v120 = JSC::Symbols::keysPrivateName[0];
  }
  else
  {
    JSC::Symbols::keysPrivateName[0] -= 2;
  }
  v121 = v120 - 2;
  if (v121)
  {
    JSC::Symbols::keysPrivateName[0] = v121;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::keysPrivateName, v113, v114, v115, v116, v117, v118, v119);
    WTF::fastFree(v324, v325, v326, v327, v328, v329, v330, v331);
  }
  v122 = JSC::Symbols::definePropertyPrivateName[0] + 4;
  JSC::Symbols::definePropertyPrivateName[0] += 4;
  if ((byte_1ECF307C0 & 0x20) == 0)
  {
    v123 = (WTF::StringImpl *)JSC::Symbols::definePropertyPrivateName;
LABEL_53:
    *(_DWORD *)v123 = v122 + 2;
    goto LABEL_54;
  }
  v123 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v123)
  {
    v122 = *(_DWORD *)v123;
    goto LABEL_53;
  }
LABEL_54:
  v503 = v123;
  v131 = JSC::JSFunction::create(a2, (uint64_t)a3, 3, &v503, (uint64_t)JSC::objectConstructorDefineProperty, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v133 = v503;
  v503 = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
    {
      WTF::StringImpl::~StringImpl(v133, v124, v125, v126, v127, v128, v129, v130);
      WTF::fastFree(v436, v437, v438, v439, v440, v441, v442, v443);
    }
    else
    {
      *(_DWORD *)v133 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)JSC::Symbols::definePropertyPrivateName, v131, 4, v128, v129, v130, v132);
  v141 = JSC::Symbols::definePropertyPrivateName[0] - 2;
  if (JSC::Symbols::definePropertyPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::definePropertyPrivateName, v134, v135, v136, v137, v138, v139, v140);
    WTF::fastFree(v332, v333, v334, v335, v336, v337, v338, v339);
    v141 = JSC::Symbols::definePropertyPrivateName[0];
  }
  else
  {
    JSC::Symbols::definePropertyPrivateName[0] -= 2;
  }
  v142 = v141 - 2;
  if (v142)
  {
    JSC::Symbols::definePropertyPrivateName[0] = v142;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::definePropertyPrivateName, v134, v135, v136, v137, v138, v139, v140);
    WTF::fastFree(v340, v341, v342, v343, v344, v345, v346, v347);
  }
  v143 = JSC::Symbols::createPrivateName[0] + 4;
  JSC::Symbols::createPrivateName[0] += 4;
  if ((byte_1ECF30790 & 0x20) == 0)
  {
    v144 = (WTF::StringImpl *)JSC::Symbols::createPrivateName;
LABEL_63:
    *(_DWORD *)v144 = v143 + 2;
    goto LABEL_64;
  }
  v144 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v144)
  {
    v143 = *(_DWORD *)v144;
    goto LABEL_63;
  }
LABEL_64:
  v503 = v144;
  v152 = JSC::JSFunction::create(a2, (uint64_t)a3, 2, &v503, (uint64_t)JSC::objectConstructorCreate, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v154 = v503;
  v503 = 0;
  if (v154)
  {
    if (*(_DWORD *)v154 == 2)
    {
      WTF::StringImpl::~StringImpl(v154, v145, v146, v147, v148, v149, v150, v151);
      WTF::fastFree(v444, v445, v446, v447, v448, v449, v450, v451);
    }
    else
    {
      *(_DWORD *)v154 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)JSC::Symbols::createPrivateName, v152, 4, v149, v150, v151, v153);
  v162 = JSC::Symbols::createPrivateName[0] - 2;
  if (JSC::Symbols::createPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::createPrivateName, v155, v156, v157, v158, v159, v160, v161);
    WTF::fastFree(v348, v349, v350, v351, v352, v353, v354, v355);
    v162 = JSC::Symbols::createPrivateName[0];
  }
  else
  {
    JSC::Symbols::createPrivateName[0] -= 2;
  }
  v163 = v162 - 2;
  if (v163)
  {
    JSC::Symbols::createPrivateName[0] = v163;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::createPrivateName, v155, v156, v157, v158, v159, v160, v161);
    WTF::fastFree(v356, v357, v358, v359, v360, v361, v362, v363);
  }
  v164 = JSC::Symbols::valuesPrivateName[0] + 4;
  JSC::Symbols::valuesPrivateName[0] += 4;
  if ((byte_1ECF30B50 & 0x20) == 0)
  {
    v165 = (WTF::StringImpl *)JSC::Symbols::valuesPrivateName;
LABEL_73:
    *(_DWORD *)v165 = v164 + 2;
    goto LABEL_74;
  }
  v165 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v165)
  {
    v164 = *(_DWORD *)v165;
    goto LABEL_73;
  }
LABEL_74:
  v503 = v165;
  v173 = JSC::JSFunction::create(a2, (uint64_t)a3, 1, &v503, (uint64_t)JSC::objectConstructorValues, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v175 = v503;
  v503 = 0;
  if (v175)
  {
    if (*(_DWORD *)v175 == 2)
    {
      WTF::StringImpl::~StringImpl(v175, v166, v167, v168, v169, v170, v171, v172);
      WTF::fastFree(v452, v453, v454, v455, v456, v457, v458, v459);
    }
    else
    {
      *(_DWORD *)v175 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)JSC::Symbols::valuesPrivateName, v173, 4, v170, v171, v172, v174);
  v183 = JSC::Symbols::valuesPrivateName[0] - 2;
  if (JSC::Symbols::valuesPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::valuesPrivateName, v176, v177, v178, v179, v180, v181, v182);
    WTF::fastFree(v364, v365, v366, v367, v368, v369, v370, v371);
    v183 = JSC::Symbols::valuesPrivateName[0];
  }
  else
  {
    JSC::Symbols::valuesPrivateName[0] -= 2;
  }
  v184 = v183 - 2;
  if (v184)
  {
    JSC::Symbols::valuesPrivateName[0] = v184;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::valuesPrivateName, v176, v177, v178, v179, v180, v181, v182);
    WTF::fastFree(v372, v373, v374, v375, v376, v377, v378, v379);
  }
  v185 = *(_QWORD *)v12;
  v186 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 1456);
  if (!v186)
  {
    v503 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(a1, a2, (uint64_t)a3, (unint64_t *)&v503, 2, (uint64_t)JSC::objectConstructorHasOwn, 0, 0, 4u);
    goto LABEL_90;
  }
  v187 = *(_DWORD *)v186 + 2;
  *(_DWORD *)v186 = v187;
  if ((*((_BYTE *)v186 + 16) & 0x20) != 0)
  {
    v188 = *(WTF::StringImpl **)(v185 + 872);
    if (!v188)
      goto LABEL_85;
    v187 = *(_DWORD *)v188;
  }
  else
  {
    v188 = v186;
  }
  *(_DWORD *)v188 = v187 + 2;
LABEL_85:
  v503 = v188;
  v196 = JSC::JSFunction::create(a2, (uint64_t)a3, 2, &v503, (uint64_t)JSC::objectConstructorHasOwn, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v198 = v503;
  v503 = 0;
  if (v198)
  {
    if (*(_DWORD *)v198 == 2)
    {
      WTF::StringImpl::~StringImpl(v198, v189, v190, v191, v192, v193, v194, v195);
      WTF::fastFree(v484, v485, v486, v487, v488, v489, v490, v491);
    }
    else
    {
      *(_DWORD *)v198 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)v186, v196, 4, v193, v194, v195, v197);
  if (*(_DWORD *)v186 == 2)
  {
    WTF::StringImpl::~StringImpl(v186, v199, v200, v201, v202, v203, v204, v205);
    WTF::fastFree(v460, v461, v462, v463, v464, v465, v466, v467);
  }
  else
  {
    *(_DWORD *)v186 -= 2;
  }
LABEL_90:
  v206 = JSC::Symbols::hasOwnPrivateName[0] + 4;
  JSC::Symbols::hasOwnPrivateName[0] += 4;
  if ((byte_1ECF32020 & 0x20) == 0)
  {
    v207 = (WTF::StringImpl *)JSC::Symbols::hasOwnPrivateName;
LABEL_92:
    *(_DWORD *)v207 = v206 + 2;
    goto LABEL_93;
  }
  v207 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 872);
  if (v207)
  {
    v206 = *(_DWORD *)v207;
    goto LABEL_92;
  }
LABEL_93:
  v503 = v207;
  v215 = JSC::JSFunction::create(a2, (uint64_t)a3, 2, &v503, (uint64_t)JSC::objectConstructorHasOwn, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v217 = v503;
  v503 = 0;
  if (v217)
  {
    if (*(_DWORD *)v217 == 2)
    {
      WTF::StringImpl::~StringImpl(v217, v208, v209, v210, v211, v212, v213, v214);
      WTF::fastFree(v468, v469, v470, v471, v472, v473, v474, v475);
    }
    else
    {
      *(_DWORD *)v217 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)JSC::Symbols::hasOwnPrivateName, v215, 4, v212, v213, v214, v216);
  v225 = JSC::Symbols::hasOwnPrivateName[0] - 2;
  if (JSC::Symbols::hasOwnPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::hasOwnPrivateName, v218, v219, v220, v221, v222, v223, v224);
    WTF::fastFree(v380, v381, v382, v383, v384, v385, v386, v387);
    v225 = JSC::Symbols::hasOwnPrivateName[0];
  }
  else
  {
    JSC::Symbols::hasOwnPrivateName[0] -= 2;
  }
  v226 = v225 - 2;
  if (v226)
  {
    JSC::Symbols::hasOwnPrivateName[0] = v226;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::hasOwnPrivateName, v218, v219, v220, v221, v222, v223, v224);
    WTF::fastFree(v388, v389, v390, v391, v392, v393, v394, v395);
  }
  if (BYTE2(qword_1ECF4C7A0))
  {
    v227 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v12 + 48) + 736);
    if (v227)
    {
      *(_DWORD *)v227 += 2;
      v228 = JSC::BuiltinExecutables::objectConstructorGroupByCodeExecutable(*(JSC::BuiltinExecutables **)(a2 + 93152));
      v229 = *(WTF::StringImpl **)(*(_QWORD *)(a2 + 93152) + 8);
      ++*((_DWORD *)v229 + 2);
      v503 = v229;
      v504 = xmmword_199125300;
      v238 = JSC::UnlinkedFunctionExecutable::link(v228, a2, 0, (uint64_t)&v503, 0, 0, 0, v230, COERCE_DOUBLE(0x1729600016F22), v231, v232);
      v239 = v503;
      v503 = 0;
      if (v239)
      {
        if (*((_DWORD *)v239 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v239 + 8))(v239);
        else
          --*((_DWORD *)v239 + 2);
      }
      v240 = JSC::JSFunction::create(a2, v238, a3, v233, v234, v235, v236, v237);
      JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)v227, v240, 4, v241, v242, v243, v244);
      if (*(_DWORD *)v227 == 2)
      {
        WTF::StringImpl::~StringImpl(v227, v245, v246, v247, v248, v249, v250, v251);
        WTF::fastFree(v476, v477, v478, v479, v480, v481, v482, v483);
      }
      else
      {
        *(_DWORD *)v227 -= 2;
      }
    }
    else
    {
      v492 = JSC::objectConstructorGroupByCodeGenerator((JSC::BuiltinExecutables **)a2, v218);
      v498 = JSC::JSFunction::create(a2, v492, a3, v493, v494, v495, v496, v497);
      JSC::JSObject::putDirectWithoutTransition(a1, a2, 0, v498, 4, v499, v500, v501, v502);
    }
  }
}

uint64_t JSC::objectConstructorGetPrototypeOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v7 = 10;
    return JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v7, (unint64_t)this);
  }
  v4 = *((_QWORD *)a2 + 6);
  v7 = v4;
  if ((v4 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v4 + 5) < 0x17u)
    return JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v7, (unint64_t)this);
  if ((*(_WORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0xC) & 0x800) == 0)
  {
    v5 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x30);
    if (!v5)
      return *(_QWORD *)(v4 + 16);
    return v5;
  }
  return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) + 0xB0))();
}

unint64_t JSC::objectConstructorGetOwnPropertyDescriptor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  JSC::VM *v16;
  WTF::AtomStringImpl *v17;
  const JSC::PropertyDescriptor *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  _QWORD *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  _DWORD *v43;
  WTF::StringImpl *v44;
  int v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  _QWORD *v58;
  uint64_t v59;
  WTF::StringImpl **v60;
  WTF::StringImpl **v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103[4];
  WTF::StringImpl *v104[6];
  int v105;
  char v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v104[0] = (WTF::StringImpl *)10;
    goto LABEL_28;
  }
  v11 = *((_QWORD *)a2 + 6);
  v104[0] = (WTF::StringImpl *)v11;
  if ((v11 & 0xFFFE000000000002) != 0)
  {
LABEL_28:
    v37 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)v104, this, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_29:
    v11 = v37;
    goto LABEL_4;
  }
  if (*(unsigned __int8 *)(v11 + 5) <= 0x16u)
  {
    v37 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v11, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_29;
  }
LABEL_4:
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v13 = *((_QWORD *)this + 7);
    v12 = 10;
    goto LABEL_31;
  }
  v12 = *((_QWORD *)a2 + 7);
  v13 = *((_QWORD *)this + 7);
  if ((v12 & 0xFFFE000000000002) != 0)
  {
LABEL_31:
    v103[0] = (unsigned __int8 *)v12;
    if (*(_DWORD *)(v13 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v14 = *(WTF::StringImpl **)(*(_QWORD *)(v13 + 41952) + 8);
      if (!v14)
        goto LABEL_12;
      goto LABEL_10;
    }
    if ((v12 & 0xFFFE000000000002) == 0)
    {
      v38 = *(unsigned __int8 *)(v12 + 5);
      if (v38 == 2)
      {
LABEL_34:
        if (*(_DWORD *)(v13 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        {
          v14 = 0;
          goto LABEL_12;
        }
        v14 = *(WTF::StringImpl **)(v12 + 8);
        v13 = *((_QWORD *)this + 7);
        if ((v14 & 1) == 0)
        {
          if ((*((_BYTE *)v14 + 16) & 0x10) != 0)
            goto LABEL_10;
          v39 = (_QWORD *)(v13 + 64768);
          v40 = *(WTF::StringImpl **)(v13 + 64768);
          if (v40 != v14)
          {
            *(_DWORD *)v14 += 2;
            *v39 = v14;
            if (v40)
            {
              if (*(_DWORD *)v40 == 2)
              {
                WTF::StringImpl::~StringImpl(v40, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
              }
              else
              {
                *(_DWORD *)v40 -= 2;
              }
            }
            v41 = *(WTF::StringImpl **)(v12 + 8);
            if (v41)
            {
              if ((*((_BYTE *)v41 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v41 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase((unint64_t)v41, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v104);
                v41 = v104[0];
              }
            }
            v42 = *(WTF::StringImpl **)(v13 + 64776);
            *(_QWORD *)(v13 + 64776) = v41;
            if (v42)
            {
              if (*(_DWORD *)v42 == 2)
              {
                WTF::StringImpl::~StringImpl(v42, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
              }
              else
              {
                *(_DWORD *)v42 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) != 0)
          {
LABEL_68:
            v14 = (WTF::StringImpl *)v39[1];
            goto LABEL_10;
          }
          v43 = *(_DWORD **)(v13 + 64776);
          *v43 += 2;
          __dmb(0xAu);
LABEL_63:
          v57 = *(WTF::StringImpl **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = v43;
          v104[0] = v57;
          v58 = (_QWORD *)(v13 + 808);
          v59 = *(unsigned int *)(v13 + 820);
          if ((_DWORD)v59 == *(_DWORD *)(v13 + 816))
          {
            v61 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v58, v59 + 1, (unint64_t)v104);
            v59 = *(unsigned int *)(v13 + 820);
            v60 = (WTF::StringImpl **)(*(_QWORD *)(v13 + 808) + 8 * v59);
            v57 = *v61;
          }
          else
          {
            v60 = (WTF::StringImpl **)(*v58 + 8 * v59);
            v61 = v104;
          }
          *v61 = 0;
          *v60 = v57;
          *(_DWORD *)(v13 + 820) = v59 + 1;
          v62 = v104[0];
          v104[0] = 0;
          if (v62)
          {
            if (*(_DWORD *)v62 == 2)
            {
              WTF::StringImpl::~StringImpl(v62, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
            }
            else
            {
              *(_DWORD *)v62 -= 2;
            }
          }
          goto LABEL_68;
        }
        goto LABEL_45;
      }
      if (v38 == 4)
      {
        v14 = *(WTF::StringImpl **)(v12 + 8);
        v45 = *(_DWORD *)v14;
        *(_DWORD *)v14 += 4;
        v15 = v45 + 2;
        if (v15)
          goto LABEL_11;
        v44 = v14;
LABEL_53:
        WTF::StringImpl::~StringImpl(v44, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
        goto LABEL_12;
      }
    }
    v12 = (uint64_t)JSC::JSValue::toStringSlowCase(v103, (uint64_t)this, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_34;
  }
  if (*(_BYTE *)(v12 + 5) != 2)
  {
    v12 = JSC::JSCell::toPrimitive(*((_QWORD *)a2 + 7), (JSC::VM **)this, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_31;
  }
  v14 = *(WTF::StringImpl **)(v12 + 8);
  if ((v14 & 1) != 0)
  {
LABEL_45:
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v12, this);
    if (*(_DWORD *)(v13 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v14 = 0;
      v44 = v104[0];
      v104[0] = 0;
      if (!v44)
        goto LABEL_12;
    }
    else
    {
      v14 = v104[0];
      if (!v104[0])
        goto LABEL_12;
      *(_DWORD *)v104[0] += 2;
      v104[0] = 0;
      v44 = v14;
    }
    if (*(_DWORD *)v44 != 2)
    {
      *(_DWORD *)v44 -= 2;
      goto LABEL_12;
    }
    goto LABEL_53;
  }
  if ((*((_BYTE *)v14 + 16) & 0x10) == 0)
  {
    v39 = (_QWORD *)(v13 + 64768);
    v54 = *(WTF::StringImpl **)(v13 + 64768);
    if (v54 != v14)
    {
      *(_DWORD *)v14 += 2;
      *v39 = v14;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
        {
          WTF::StringImpl::~StringImpl(v54, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
        }
        else
        {
          *(_DWORD *)v54 -= 2;
        }
      }
      v55 = *(WTF::StringImpl **)(v12 + 8);
      if (v55)
      {
        if ((*((_BYTE *)v55 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v55 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v55, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v104);
          v55 = v104[0];
        }
      }
      v56 = *(WTF::StringImpl **)(v13 + 64776);
      *(_QWORD *)(v13 + 64776) = v55;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
        {
          WTF::StringImpl::~StringImpl(v56, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
        }
        else
        {
          *(_DWORD *)v56 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) != 0)
      goto LABEL_68;
    v43 = *(_DWORD **)(v13 + 64776);
    *v43 += 2;
    __dmb(0xAu);
    goto LABEL_63;
  }
LABEL_10:
  v15 = *(_DWORD *)v14 + 2;
LABEL_11:
  *(_DWORD *)v14 = v15;
LABEL_12:
  if (!*((_DWORD *)v10 + 20)
    || !JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    v16 = (JSC::VM *)*((_QWORD *)this + 7);
    memset(v103, 0, 24);
    v103[3] = (unsigned __int8 *)14;
    v104[2] = (WTF::StringImpl *)0xFFFFFFFF00000000;
    v104[4] = 0;
    v104[5] = 0;
    v104[3] = (WTF::StringImpl *)v11;
    v105 = 0x20000;
    v106 = 0;
    LOBYTE(v107) = 0;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v24 = (*(uint64_t (**)(unint64_t, JSC *, WTF::StringImpl *, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) + 0x68))(v11, this, v14, v104);
    v25 = 0;
    if (v24)
      v25 = JSC::PropertyDescriptor::setPropertySlot((uint64_t)v103, (uint64_t)this, v14, (uint64_t)v104, v20, v21, v22, v23);
    if (v108)
    {
      v26 = *(_DWORD *)(v107 + 4);
      if (!v26)
      {
        __break(0xC471u);
        JUMPOUT(0x198B51A48);
      }
      *(_DWORD *)(v107 + 4) = v26 - 1;
    }
    if (!v25)
    {
      v27 = 10;
      goto LABEL_21;
    }
    if (!*((_DWORD *)v16 + 20)
      || !JSC::VM::hasExceptionsAfterHandlingTraps(v16, (uint64_t)v17, (uint64_t)v18, v19, v20, v21, v22, v23))
    {
      v27 = JSC::constructObjectFromPropertyDescriptor((unint64_t)this, (JSC::JSGlobalObject *)v103, v18, v19, v20, v21, v22, v23);
      goto LABEL_21;
    }
  }
  v27 = 0;
LABEL_21:
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  return v27;
}

unint64_t JSC::objectConstructorGetOwnPropertyNames(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  int64_t v10;
  unint64_t v12;
  uint64_t v13;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v10 = *((_QWORD *)a2 + 6);
  v13 = v10;
  if ((v10 & 0xFFFE000000000002) != 0)
  {
LABEL_8:
    v12 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v13, this, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_9:
    v10 = v12;
    goto LABEL_4;
  }
  if (*(unsigned __int8 *)(v10 + 5) <= 0x16u)
  {
    v12 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v10, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }
LABEL_4:
  if (*((_DWORD *)v9 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  else
  {
    return JSC::ownPropertyKeys((unint64_t)this, v10, 2, 0, a5, a6, a7, a8);
  }
}

unint64_t JSC::objectConstructorGetOwnPropertySymbols(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  int64_t v10;
  unint64_t v12;
  uint64_t v13;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_8;
  }
  v10 = *((_QWORD *)a2 + 6);
  v13 = v10;
  if ((v10 & 0xFFFE000000000002) != 0)
  {
LABEL_8:
    v12 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v13, this, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_9:
    v10 = v12;
    goto LABEL_4;
  }
  if (*(unsigned __int8 *)(v10 + 5) <= 0x16u)
  {
    v12 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v10, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }
LABEL_4:
  if (*((_DWORD *)v9 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  else
  {
    return JSC::ownPropertyKeys((unint64_t)this, v10, 1, 0, a5, a6, a7, a8);
  }
}

unint64_t JSC::objectConstructorKeys(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int64_t v10;
  unint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;

  v9 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v15 = 10;
    goto LABEL_8;
  }
  v10 = *((_QWORD *)a2 + 6);
  v15 = v10;
  if ((v10 & 0xFFFE000000000002) != 0)
  {
LABEL_8:
    v12 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v15, this, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_9:
    v10 = v12;
    goto LABEL_4;
  }
  if (*(unsigned __int8 *)(v10 + 5) <= 0x16u)
  {
    v12 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v10, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_9;
  }
  if (!*(_DWORD *)(v9 + 80))
    return JSC::ownPropertyKeys((unint64_t)this, v10, 2, 1, a5, a6, a7, a8);
LABEL_4:
  v13 = *(_DWORD *)(v9 + 80);
  if ((v13 & 0x27) != 0 && (v13 & 0x20) == 0)
  {
    v14 = (unsigned __int8 *)v10;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v10 = (int64_t)v14;
  }
  if (*(_QWORD *)(v9 + 16))
    return 0;
  else
    return JSC::ownPropertyKeys((unint64_t)this, v10, 2, 1, a5, a6, a7, a8);
}

uint64_t JSC::objectConstructorDefineProperty(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  _QWORD *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  _DWORD *v50;
  WTF::StringImpl *v51;
  _QWORD *v52;
  uint64_t v53;
  WTF::StringImpl **v54;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  JSC::VM *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107[4];
  JSC::VM *v108;
  unsigned __int8 *v109;

  v9 = *((_QWORD *)this + 7);
  v108 = (JSC::VM *)v9;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v108, (uint64_t)"Properties can only be defined on Objects.", 43);
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v11 + 5) <= 0x16u)
    return JSC::throwTypeError((unint64_t)this, &v108, (uint64_t)"Properties can only be defined on Objects.", 43);
  if ((unint64_t)(*((int *)a2 + 8) - 1) < 2)
  {
    v12 = 10;
  }
  else
  {
    v12 = *((_QWORD *)a2 + 7);
    if ((v12 & 0xFFFE000000000002) == 0)
    {
      if (*(_BYTE *)(v12 + 5) == 2)
      {
        v13 = *(WTF::StringImpl **)(v12 + 8);
        if ((v13 & 1) == 0)
        {
          if ((*((_BYTE *)v13 + 16) & 0x10) == 0)
          {
            v47 = *(WTF::StringImpl **)(v9 + 64768);
            if (v47 != v13)
            {
              *(_DWORD *)v13 += 2;
              *(_QWORD *)(v9 + 64768) = v13;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                {
                  WTF::StringImpl::~StringImpl(v47, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
                }
                else
                {
                  *(_DWORD *)v47 -= 2;
                }
              }
              v48 = *(WTF::StringImpl **)(v12 + 8);
              if (v48)
              {
                if ((*((_BYTE *)v48 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v48 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v48, a3, a4, a5, a6, a7, a8, (WTF *)v107);
                  v48 = v107[0];
                }
              }
              v49 = *(WTF::StringImpl **)(v9 + 64776);
              *(_QWORD *)(v9 + 64776) = v48;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                {
                  WTF::StringImpl::~StringImpl(v49, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
                }
                else
                {
                  *(_DWORD *)v49 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
            {
              v50 = *(_DWORD **)(v9 + 64776);
              *v50 += 2;
              __dmb(0xAu);
              v51 = *(WTF::StringImpl **)(v12 + 8);
              *(_QWORD *)(v12 + 8) = v50;
              v107[0] = v51;
              v52 = (_QWORD *)(v9 + 808);
              v53 = *(unsigned int *)(v9 + 820);
              if ((_DWORD)v53 == *(_DWORD *)(v9 + 816))
              {
                v55 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, v53 + 1, (unint64_t)v107);
                v53 = *(unsigned int *)(v9 + 820);
                v54 = (WTF::StringImpl **)(*(_QWORD *)(v9 + 808) + 8 * v53);
                v51 = *v55;
              }
              else
              {
                v54 = (WTF::StringImpl **)(*v52 + 8 * v53);
                v55 = v107;
              }
              *v55 = 0;
              *v54 = v51;
              *(_DWORD *)(v9 + 820) = v53 + 1;
              v56 = v107[0];
              v107[0] = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                {
                  WTF::StringImpl::~StringImpl(v56, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
                }
                else
                {
                  *(_DWORD *)v56 -= 2;
                }
              }
            }
            v13 = *(WTF::StringImpl **)(v9 + 64776);
          }
          goto LABEL_9;
        }
        JSC::JSRopeString::resolveRopeToAtomString(*((JSC::JSRopeString **)a2 + 7), this);
        if (!*(_DWORD *)(v9 + 80))
          goto LABEL_44;
        v57 = (JSC::VM *)v9;
        goto LABEL_87;
      }
      v12 = JSC::JSCell::toPrimitive(*((_QWORD *)a2 + 7), (JSC::VM **)this, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    }
  }
  v109 = (unsigned __int8 *)v12;
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v13 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 41952) + 8);
    if (v13)
    {
LABEL_9:
      v14 = *(_DWORD *)v13 + 2;
LABEL_10:
      *(_DWORD *)v13 = v14;
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  if ((v12 & 0xFFFE000000000002) == 0)
  {
    v25 = *(unsigned __int8 *)(v12 + 5);
    if (v25 == 2)
      goto LABEL_26;
    if (v25 == 4)
    {
      v13 = *(WTF::StringImpl **)(v12 + 8);
      v38 = *(_DWORD *)v13;
      *(_DWORD *)v13 += 4;
      v14 = v38 + 2;
      if (v14)
        goto LABEL_10;
      v37 = v13;
LABEL_51:
      WTF::StringImpl::~StringImpl(v37, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
      goto LABEL_11;
    }
  }
  v12 = (uint64_t)JSC::JSValue::toStringSlowCase(&v109, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_26:
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v13 = 0;
    goto LABEL_11;
  }
  v13 = *(WTF::StringImpl **)(v12 + 8);
  v26 = *((_QWORD *)this + 7);
  if ((v13 & 1) == 0)
  {
    if ((*((_BYTE *)v13 + 16) & 0x10) == 0)
    {
      v27 = *(WTF::StringImpl **)(v26 + 64768);
      if (v27 != v13)
      {
        *(_DWORD *)v13 += 2;
        *(_QWORD *)(v26 + 64768) = v13;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
          {
            WTF::StringImpl::~StringImpl(v27, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
          }
          else
          {
            *(_DWORD *)v27 -= 2;
          }
        }
        v28 = *(WTF::StringImpl **)(v12 + 8);
        if (v28)
        {
          if ((*((_BYTE *)v28 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v28 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v28, a3, a4, a5, a6, a7, a8, (WTF *)v107);
            v28 = v107[0];
          }
        }
        v29 = *(WTF::StringImpl **)(v26 + 64776);
        *(_QWORD *)(v26 + 64776) = v28;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
          {
            WTF::StringImpl::~StringImpl(v29, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
          }
          else
          {
            *(_DWORD *)v29 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
      {
        v30 = *(_DWORD **)(v26 + 64776);
        *v30 += 2;
        __dmb(0xAu);
        v31 = *(WTF::StringImpl **)(v12 + 8);
        *(_QWORD *)(v12 + 8) = v30;
        v107[0] = v31;
        v32 = (_QWORD *)(v26 + 808);
        v33 = *(unsigned int *)(v26 + 820);
        if ((_DWORD)v33 == *(_DWORD *)(v26 + 816))
        {
          v35 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v32, v33 + 1, (unint64_t)v107);
          v33 = *(unsigned int *)(v26 + 820);
          v34 = (WTF::StringImpl **)(*(_QWORD *)(v26 + 808) + 8 * v33);
          v31 = *v35;
        }
        else
        {
          v34 = (WTF::StringImpl **)(*v32 + 8 * v33);
          v35 = v107;
        }
        *v35 = 0;
        *v34 = v31;
        *(_DWORD *)(v26 + 820) = v33 + 1;
        v36 = v107[0];
        v107[0] = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
          {
            WTF::StringImpl::~StringImpl(v36, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
          }
          else
          {
            *(_DWORD *)v36 -= 2;
          }
        }
      }
      v13 = *(WTF::StringImpl **)(v26 + 64776);
    }
    goto LABEL_9;
  }
  JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v12, this);
  if (!*(_DWORD *)(v26 + 80))
  {
LABEL_44:
    v13 = v107[0];
    if (!v107[0])
      goto LABEL_11;
    *(_DWORD *)v107[0] += 2;
    v107[0] = 0;
    v37 = v13;
LABEL_46:
    if (*(_DWORD *)v37 != 2)
    {
      *(_DWORD *)v37 -= 2;
      goto LABEL_11;
    }
    goto LABEL_51;
  }
  v57 = (JSC::VM *)v26;
LABEL_87:
  if (!JSC::VM::hasExceptionsAfterHandlingTraps(v57, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    goto LABEL_44;
  v13 = 0;
  v37 = v107[0];
  v107[0] = 0;
  if (v37)
    goto LABEL_46;
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_12;
LABEL_11:
  v66 = *(_DWORD *)(v9 + 80);
  if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v9 + 16))
  {
    v11 = 0;
  }
  else
  {
LABEL_12:
    memset(v107, 0, 24);
    v107[3] = (WTF::StringImpl *)14;
    if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
      v15 = 10;
    else
      v15 = *((_QWORD *)a2 + 8);
    LOBYTE(v109) = 0;
    if (JSC::toPropertyDescriptor(this, v15, (uint64_t)v107, (const JSC::PropertyTable *)&v109, a5, a6, a7, a8, COERCE_DOUBLE(14)))(*(void (**)(uint64_t, JSC *, WTF::StringImpl *, WTF::StringImpl **, uint64_t))(16* *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)+ 0x90))(v11, this, v13, v107, 1);
    else
      v11 = 2;
  }
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  return v11;
}

JSC::JSGlobalObject *JSC::objectConstructorCreate(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v10;
  JSC::JSObject *v12;
  int v13;
  JSC::VM *v14;
  uint64_t v15;
  JSC::Structure *v16;
  JSC::Symbol *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::JSGlobalObject *v22;
  unint64_t v23;
  unint64_t v25;
  unint64_t v26;
  JSC::VM *v27;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v27 = v10;
  if (*((_DWORD *)a2 + 8) == 1)
    return (JSC::JSGlobalObject *)JSC::throwTypeError((unint64_t)this, &v27, (uint64_t)"Object prototype may only be an Object or null.", 48);
  v12 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  if (((unint64_t)v12 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v12 + 5) > 0x16u)
  {
    v14 = (JSC::VM *)JSC::StructureCache::emptyObjectStructureForPrototype((JSC *)((char *)this + 1968), this, v12, 6, 0, 0, a7, a8, a9);
    goto LABEL_8;
  }
  if (v12 != (JSC::JSObject *)2)
    return (JSC::JSGlobalObject *)JSC::throwTypeError((unint64_t)this, &v27, (uint64_t)"Object prototype may only be an Object or null.", 48);
  v13 = *((_DWORD *)this + 233);
  if (v13)
    v14 = (JSC::VM *)(16 * (v13 & 0xFFFFFFFE));
  else
    v14 = 0;
LABEL_8:
  v22 = (JSC::JSGlobalObject *)JSC::constructEmptyObject(v10, v14, v12, a4, a5, a6, a7, a8);
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    return v22;
  v23 = *((_QWORD *)a2 + 7);
  if (v23 == 10)
    return v22;
  v26 = v23;
  if ((v23 & 0xFFFE000000000002) != 0)
  {
    v25 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v26, this, v16, (uint64_t)v17, v18, v19, v20, v21);
    goto LABEL_19;
  }
  if (*(unsigned __int8 *)(v23 + 5) <= 0x16u)
  {
    v25 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v23, (JSC::SymbolObject **)this, (uint64_t)v16, v17, v18, v19, v20, v21);
LABEL_19:
    v23 = v25;
  }
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v15, (uint64_t)v16, (uint64_t)v17, v18, v19, v20, v21))
  {
    return 0;
  }
  return JSC::defineProperties(this, v22, (JSC::JSObject *)v23, v17, v18, v19, v20, v21);
}

unint64_t JSC::objectConstructorValues(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD *v37;
  int v38;
  unint64_t v39;
  JSC::JSGlobalObject *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t UninitializedRestricted;
  double v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v55;
  _QWORD *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t OutOfMemoryError;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  JSC::VM *v94;
  WTF::StringImpl **v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  int v98;
  int32x4_t v99;
  unint64_t v100;
  JSC::VM *v101;
  int v102;
  uint64_t v103;
  WTF *v104;
  uint64_t v105;
  WTF::StringImpl **v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  int v119;
  WTF *v120;
  uint64_t v121;
  JSC::VM *v122;
  _OWORD v123[4];
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  unint64_t v133;
  JSC::VM *v134;
  JSC::VM *v135[2];

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v134 = v10;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v134, (uint64_t)"Object.values requires that input parameter not be null or undefined", 69);
  v11 = *((_QWORD *)a2 + 6);
  v133 = v11;
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
    return JSC::throwTypeError((unint64_t)this, &v134, (uint64_t)"Object.values requires that input parameter not be null or undefined", 69);
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    v71 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v133, this, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else
  {
    if (*(unsigned __int8 *)(v11 + 5) > 0x16u)
      goto LABEL_5;
    v71 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v11, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v11 = v71;
LABEL_5:
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if ((*(_BYTE *)((16 * *(unsigned int *)v11) | 0x12) & 0x40) == 0)
  {
    JSC::JSObject::reifyAllStaticProperties((JSC::JSObject *)v11, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    if (*((_DWORD *)v10 + 20))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        return 0;
    }
  }
  LOBYTE(v125) = 0;
  v126 = 0x800000000;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v131 = 0u;
  v127 = (unint64_t)&v128 + 8;
  v132 = 0;
  if ((*(_BYTE *)(v11 + 4) & 0xE) == 0)
    goto LABEL_13;
  v69 = *(_BYTE *)(v11 + 4) & 0xF;
  if ((v69 - 3) < 7)
    goto LABEL_13;
  if ((v69 - 10) > 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198B52DCCLL);
  }
  v70 = **(_QWORD **)(v11 + 8);
  if (!v70 || (*(_BYTE *)(v70 + 16) & 4) == 0)
  {
LABEL_13:
    v12 = *(_DWORD *)v11 & 0xFFFFFFFE;
    if (((*(_BYTE *)(v11 + 6) & 0x20) == 0 || (*(_BYTE *)(16 * v12 + 0x12) & 0x40) != 0)
      && !(*(_WORD *)(16 * v12 + 0xC) & 6 | *(_BYTE *)(16 * v12 + 0xA) & 8)
      && (*(_DWORD *)(16 * v12 + 0x10) & 0x20000008) == 0
      && (*(_DWORD *)(16 * v12 + 0x10) & 3) != 2)
    {
      v14 = *(_QWORD *)(16 * v12 + 0x58);
      if (!v14)
      {
        if ((v61 = *(_QWORD *)(16 * v12 + 0x40)) == 0
          || *(_BYTE *)(v61 + 5) != 1 && *(_DWORD *)(v61 + 80) < 2u
          || (JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * v12), v10, 1, a4, a5, a6, a7, a8),
              (v14 = v62) == 0))
        {
LABEL_60:
          v38 = *((_DWORD *)this + 227);
          if (v38)
            v39 = 16 * (v38 & 0xFFFFFFFE);
          else
            v39 = 0;
          LOBYTE(v120) = 0;
          v121 = 0x800000000;
          v122 = (JSC::VM *)((char *)v123 + 8);
          memset(v123, 0, sizeof(v123));
          v124 = 0;
          if ((*(_BYTE *)(v11 + 4) & 0xE) == 0)
            goto LABEL_64;
          v55 = *(_BYTE *)(v11 + 4) & 0xF;
          if ((v55 - 10) >= 4)
          {
            if ((v55 - 4) >= 6)
            {
              if (v55 != 3)
              {
                __break(0xC471u);
                JUMPOUT(0x198B52E68);
              }
LABEL_64:
              if (!*((_DWORD *)v10 + 20)
                || !JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
              {
                v135[0] = v10;
                UninitializedRestricted = JSC::JSArray::tryCreateUninitializedRestricted((uint64_t *)v135, 0, v39, (v126 + v121), a5, a6, a7, a8);
                if (UninitializedRestricted)
                {
                  if ((_DWORD)v121)
                  {
                    v72 = 0;
                    do
                    {
                      JSC::JSObject::initializeIndex(UninitializedRestricted, v135, v72, *((_QWORD *)v122 + v72), a5, a6, a7, a8, v44);
                      ++v72;
                    }
                    while (v72 < v121);
                  }
                  if ((_DWORD)v126)
                  {
                    v45 = 0;
                    do
                    {
                      JSC::JSObject::initializeIndex(UninitializedRestricted, v135, (v45 + v121), *(_QWORD *)(v127 + 8 * v45), a5, a6, a7, a8, v44);
                      ++v45;
                    }
                    while (v45 < v126);
                  }
                  v46 = UninitializedRestricted;
                }
                else
                {
                  v46 = 0;
                }
                if (*((_BYTE *)v135[0] + 755))
                  __dmb(0xAu);
                if (UninitializedRestricted)
                  goto LABEL_74;
                OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, v40);
                JSC::VM::throwException(v10, this, OutOfMemoryError, v64, v65, v66, v67, v68);
              }
              v46 = 0;
LABEL_74:
              JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v121, v40, v41, v42, a5, a6, a7, a8);
              JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v126, v47, v48, v49, v50, v51, v52, v53);
              return v46;
            }
            v60 = (_DWORD *)(*(_QWORD *)(v11 + 8) - 8);
          }
          else
          {
            v56 = *(_QWORD **)(v11 + 8);
            v57 = *((_DWORD *)v56 - 2);
            if (*((_DWORD *)v56 - 1) < v57)
              v57 = *((_DWORD *)v56 - 1);
            if (v57)
              goto LABEL_84;
            v58 = *v56;
            if (!v58)
              goto LABEL_64;
            v59 = *(_QWORD *)(v58 + 8);
            if (!v59)
              goto LABEL_64;
            v60 = (_DWORD *)(v59 - 12);
          }
          if (!*v60)
            goto LABEL_64;
LABEL_84:
          v135[0] = (JSC::VM *)&v120;
          JSC::JSObject::forEachOwnIndexedProperty<(JSC::JSObject::SortMode)1,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1>((JSC::JSObject *)v11, this, (uint64_t *)v135, (uint64_t)a4, a5, a6, a7, a8);
          goto LABEL_64;
        }
      }
      v15 = *(_QWORD *)(v14 + 16);
      v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
      v17 = *(unsigned int *)(v14 + 8);
      v18 = (*(_DWORD *)(v14 + 28) + *(_DWORD *)(v14 + 24));
      if ((v15 & 1) == 0)
      {
        if (!(_DWORD)v18)
          goto LABEL_60;
        v19 = 16 * v18;
        v20 = v16 + 4 * v17 + 8;
        while (1)
        {
          v21 = *(_QWORD *)(v20 - 8);
          if (v21 != 1 && (*(_BYTE *)(v20 + 4) & 4) == 0 && (*(_BYTE *)(v21 + 16) & 0x20) == 0)
            break;
LABEL_28:
          v20 += 16;
          v19 -= 16;
          if (!v19)
            goto LABEL_60;
        }
        v22 = *(_DWORD *)v20;
        v23 = v11 + 16;
        if (*(int *)v20 >= 64)
        {
          v23 = *(_QWORD *)(v11 + 8) - 8;
          v22 = 63 - v22;
        }
        v24 = *(_QWORD *)(v23 + 8 * v22);
        v25 = v126;
        if ((_DWORD)v126 == HIDWORD(v126))
        {
          if (v126 >> 30
            || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v126, 2 * (int)v126))
          {
            LOBYTE(v125) = 1;
LABEL_153:
            __break(0xC471u);
            JUMPOUT(0x198B52DF4);
          }
          v25 = v126;
        }
        else if ((__int128 *)v127 == (__int128 *)((char *)&v128 + 8) || !v127)
        {
          *(_QWORD *)(v127 + 8 * v126) = v24;
          LODWORD(v126) = v25 + 1;
          goto LABEL_27;
        }
        *(_QWORD *)(v127 + 8 * v25) = v24;
        LODWORD(v126) = v25 + 1;
        if (!(_QWORD)v128 && (v24 & 0xFFFE000000000002) == 0 && v24 != 0)
        {
          v27 = (_QWORD *)(v24 & 0xFFFFFFFFFFFFC000 | 8);
          if ((v24 & 8) != 0)
            v27 = (_QWORD *)(v24 - 16);
          *(_QWORD *)&v128 = *v27 + 560;
          v135[0] = (JSC::VM *)&v126;
          WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add((uint64_t *)v128, (uint64_t *)v135, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)&v120);
        }
LABEL_27:
        if ((_BYTE)v125)
          goto LABEL_153;
        goto LABEL_28;
      }
      if (!(_DWORD)v18)
        goto LABEL_60;
      v28 = (unint64_t *)(v16 + v17);
      v29 = 8 * v18;
      while (1)
      {
        v30 = *v28;
        if ((*v28 & 0xFFFFFFFFFFFFLL) != 1
          && (v30 & 0x4000000000000) == 0
          && (*(_BYTE *)((*v28 & 0xFFFFFFFFFFFFLL) + 0x10) & 0x20) == 0)
        {
          break;
        }
LABEL_50:
        ++v28;
        v29 -= 8;
        if (!v29)
          goto LABEL_60;
      }
      v31 = HIBYTE(v30);
      v32 = v30 >> 62;
      v33 = v11 + 16;
      if (v32)
      {
        v33 = *(_QWORD *)(v11 + 8) - 8;
        v31 = 63 - v31;
      }
      v34 = *(_QWORD *)(v33 + 8 * v31);
      v35 = v126;
      if ((_DWORD)v126 == HIDWORD(v126))
      {
        if (v126 >> 30
          || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v126, 2 * (int)v126))
        {
          LOBYTE(v125) = 1;
LABEL_155:
          __break(0xC471u);
          JUMPOUT(0x198B52E1CLL);
        }
        v35 = v126;
      }
      else if ((__int128 *)v127 == (__int128 *)((char *)&v128 + 8) || !v127)
      {
        *(_QWORD *)(v127 + 8 * v126) = v34;
        LODWORD(v126) = v35 + 1;
        goto LABEL_49;
      }
      *(_QWORD *)(v127 + 8 * v35) = v34;
      LODWORD(v126) = v35 + 1;
      if (!(_QWORD)v128 && (v34 & 0xFFFE000000000002) == 0 && v34 != 0)
      {
        v37 = (_QWORD *)(v34 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v34 & 8) != 0)
          v37 = (_QWORD *)(v34 - 16);
        *(_QWORD *)&v128 = *v37 + 560;
        v135[0] = (JSC::VM *)&v126;
        WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add((uint64_t *)v128, (uint64_t *)v135, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)&v120);
      }
LABEL_49:
      if ((_BYTE)v125)
        goto LABEL_155;
      goto LABEL_50;
    }
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v126, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v46 = JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, v73, v74, v75, v76, v77);
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v78, v79, v80, v81, v82, v83, v84))
    return 0;
  v85 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v85 = 1;
  *((_QWORD *)v85 + 1) = (char *)v85 + 24;
  *((_QWORD *)v85 + 2) = 20;
  v120 = v85;
  v121 = 0;
  v122 = v10;
  LOWORD(v123[0]) = 258;
  (*(void (**)(unint64_t, JSC *, WTF **, _QWORD))(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                    + 0x4C)
                                                                  + 0x78))(v11, this, &v120, 0);
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v86, v87, v88, v89, v90, v91, v92))
  {
LABEL_164:
    v46 = 0;
    goto LABEL_165;
  }
  v93 = *((unsigned int *)v120 + 5);
  if ((_DWORD)v93)
  {
    v94 = 0;
    v95 = (WTF::StringImpl **)*((_QWORD *)v120 + 1);
    v96 = 8 * v93;
    while (1)
    {
      v97 = *v95;
      v127 = 0xFFFFFFFF00000000;
      v128 = v11;
      *(_QWORD *)&v129 = 0;
      DWORD2(v129) = 0x20000;
      BYTE12(v129) = 0;
      LOBYTE(v130) = 0;
      BYTE8(v130) = 0;
      v131 = 0uLL;
      v98 = (*(uint64_t (**)(unint64_t, JSC *, WTF::StringImpl *, unint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) + 0x68))(v11, this, v97, &v125);
      if (*((_DWORD *)v10 + 20))
      {
        v119 = v98;
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v86, v87, v88, v89, v90, v91, v92)
          || ((v119 ^ 1) & 1) != 0)
        {
          goto LABEL_130;
        }
      }
      else if (!v98)
      {
        goto LABEL_130;
      }
      if ((v127 & 4) != 0)
        goto LABEL_130;
      if (BYTE12(v129))
        break;
      if (BYTE9(v129) != 1)
      {
        if (BYTE9(v129) == 2)
          v103 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v125, this, v87, v88, v89, v90, v91, v92);
        else
          v103 = JSC::PropertySlot::customGetter((uint64_t)&v125, *((JSC::VM **)this + 7), v97);
        goto LABEL_138;
      }
      v100 = v125;
LABEL_128:
      if (!*((_DWORD *)v10 + 20)
        || !JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v86, v87, v88, v89, v90, v91, v92))
      {
        v101 = v94;
        v94 = (JSC::VM *)((_DWORD)v94 + 1);
        JSC::JSObject::putDirectIndex(v46, (unint64_t)this, v101, v100, v89, v90, v91, v92, v99);
      }
LABEL_130:
      if (BYTE8(v130))
      {
        v102 = *(_DWORD *)(v130 + 4);
        if (!v102)
        {
          __break(0xC471u);
          JUMPOUT(0x198B52DACLL);
        }
        *(_DWORD *)(v130 + 4) = v102 - 1;
      }
      if (*((_DWORD *)v10 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v86, v87, v88, v89, v90, v91, v92))
      {
        goto LABEL_164;
      }
      ++v95;
      v96 -= 8;
      if (!v96)
        goto LABEL_165;
    }
    v103 = JSC::JSObject::get((unsigned int *)v11, (uint64_t)this, (unint64_t)v97, v88, v89, v90, v91, v92);
LABEL_138:
    v100 = v103;
    goto LABEL_128;
  }
LABEL_165:
  if (v121)
    WTF::fastFree(v121 - 16, v86, v87, v88, v89, v90, v91, v92);
  v104 = v120;
  v120 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 1)
    {
      v105 = *((unsigned int *)v104 + 5);
      if ((_DWORD)v105)
      {
        v106 = (WTF::StringImpl **)*((_QWORD *)v104 + 1);
        v107 = 8 * v105;
        do
        {
          v108 = *v106;
          *v106 = 0;
          if (v108)
          {
            if (*(_DWORD *)v108 == 2)
            {
              WTF::StringImpl::~StringImpl(v108, (WTF::AtomStringImpl *)v86, v87, v88, v89, v90, v91, v92);
              WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
            }
            else
            {
              *(_DWORD *)v108 -= 2;
            }
          }
          ++v106;
          v107 -= 8;
        }
        while (v107);
      }
      v117 = *((_QWORD *)v104 + 1);
      if ((WTF *)((char *)v104 + 24) != (WTF *)v117 && v117 != 0)
      {
        *((_QWORD *)v104 + 1) = 0;
        *((_DWORD *)v104 + 4) = 0;
        WTF::fastFree(v117, v86, v87, v88, v89, v90, v91, v92);
      }
      WTF::fastFree((unint64_t)v104, v86, v87, v88, v89, v90, v91, v92);
    }
    else
    {
      --*(_DWORD *)v104;
    }
  }
  return v46;
}

uint64_t JSC::objectConstructorHasOwn(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  JSC::VM *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  unsigned __int8 *v85;
  WTF::StringImpl *v86;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v86 = (WTF::StringImpl *)10;
    goto LABEL_22;
  }
  v11 = *((_QWORD *)a2 + 6);
  v86 = (WTF::StringImpl *)v11;
  if ((v11 & 0xFFFE000000000002) != 0)
  {
LABEL_22:
    v27 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v86, this, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_23:
    v11 = v27;
    goto LABEL_4;
  }
  if (*(unsigned __int8 *)(v11 + 5) <= 0x16u)
  {
    v27 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v11, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_23;
  }
LABEL_4:
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v13 = *((_QWORD *)this + 7);
    v12 = 10;
  }
  else
  {
    v12 = *((_QWORD *)a2 + 7);
    v13 = *((_QWORD *)this + 7);
    if ((v12 & 0xFFFE000000000002) == 0)
    {
      if (*(_BYTE *)(v12 + 5) == 2)
      {
        v14 = *(WTF::StringImpl **)(v12 + 8);
        if ((v14 & 1) == 0)
        {
          if ((*((_BYTE *)v14 + 16) & 0x10) == 0)
          {
            if (*(WTF::StringImpl **)(v13 + 64768) != v14)
            {
              WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v13 + 64768), *(WTF::AtomStringImpl **)(v12 + 8), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              v38 = *(WTF::StringImpl **)(v12 + 8);
              if (v38)
              {
                if ((*((_BYTE *)v38 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v38 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v38, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v86);
                  v38 = v86;
                }
              }
              v39 = *(WTF::StringImpl **)(v13 + 64776);
              *(_QWORD *)(v13 + 64776) = v38;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                {
                  WTF::StringImpl::~StringImpl(v39, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
                }
                else
                {
                  *(_DWORD *)v39 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
            {
              v40 = *(_DWORD **)(v13 + 64776);
              *v40 += 2;
              __dmb(0xAu);
              v41 = *(WTF::StringImpl **)(v12 + 8);
              *(_QWORD *)(v12 + 8) = v40;
              v86 = v41;
              JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v13 + 192, (unint64_t)&v86);
              v42 = v86;
              v86 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                {
                  WTF::StringImpl::~StringImpl(v42, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
                }
                else
                {
                  *(_DWORD *)v42 -= 2;
                }
              }
            }
            v14 = *(WTF::StringImpl **)(v13 + 64776);
          }
LABEL_10:
          *(_DWORD *)v14 += 2;
LABEL_11:
          v84 = v14;
          goto LABEL_12;
        }
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v12, this);
        if (!*(_DWORD *)(v13 + 80))
          goto LABEL_42;
        v43 = (JSC::VM *)v13;
        goto LABEL_82;
      }
      v12 = JSC::JSCell::toPrimitive(*((_QWORD *)a2 + 7), (JSC::VM **)this, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
  v85 = (unsigned __int8 *)v12;
  if (*(_DWORD *)(v13 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    v14 = *(WTF::StringImpl **)(*(_QWORD *)(v13 + 41952) + 8);
    if (!v14)
      goto LABEL_11;
    goto LABEL_10;
  }
  if ((v12 & 0xFFFE000000000002) == 0)
  {
    v28 = *(unsigned __int8 *)(v12 + 5);
    if (v28 == 2)
      goto LABEL_28;
    if (v28 == 4)
    {
      v14 = *(WTF::StringImpl **)(v12 + 8);
      v36 = *(_DWORD *)v14;
      *(_DWORD *)v14 += 4;
      v84 = v14;
      v37 = v36 + 2;
      if (v37)
      {
        *(_DWORD *)v14 = v37;
        goto LABEL_12;
      }
      v35 = v14;
      goto LABEL_64;
    }
  }
  v12 = (uint64_t)JSC::JSValue::toStringSlowCase(&v85, (uint64_t)this, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_28:
  if (*(_DWORD *)(v13 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    v14 = 0;
LABEL_78:
    v84 = 0;
    goto LABEL_12;
  }
  v14 = *(WTF::StringImpl **)(v12 + 8);
  v29 = *((_QWORD *)this + 7);
  if ((v14 & 1) == 0)
  {
    if ((*((_BYTE *)v14 + 16) & 0x10) == 0)
    {
      if (*(WTF::StringImpl **)(v29 + 64768) != v14)
      {
        WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v29 + 64768), *(WTF::AtomStringImpl **)(v12 + 8), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v30 = *(WTF::StringImpl **)(v12 + 8);
        if (v30)
        {
          if ((*((_BYTE *)v30 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v30 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v30, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v86);
            v30 = v86;
          }
        }
        v31 = *(WTF::StringImpl **)(v29 + 64776);
        *(_QWORD *)(v29 + 64776) = v30;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
          {
            WTF::StringImpl::~StringImpl(v31, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
          }
          else
          {
            *(_DWORD *)v31 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
      {
        v32 = *(_DWORD **)(v29 + 64776);
        *v32 += 2;
        __dmb(0xAu);
        v33 = *(WTF::StringImpl **)(v12 + 8);
        *(_QWORD *)(v12 + 8) = v32;
        v86 = v33;
        JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v29 + 192, (unint64_t)&v86);
        v34 = v86;
        v86 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
          {
            WTF::StringImpl::~StringImpl(v34, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
          }
          else
          {
            *(_DWORD *)v34 -= 2;
          }
        }
      }
      v14 = *(WTF::StringImpl **)(v29 + 64776);
    }
    goto LABEL_10;
  }
  JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v12, this);
  if (!*(_DWORD *)(v29 + 80))
  {
LABEL_42:
    v14 = v86;
    if (v86)
    {
      *(_DWORD *)v86 += 2;
      v84 = v14;
      v86 = 0;
      v35 = v14;
      goto LABEL_44;
    }
    goto LABEL_78;
  }
  v43 = (JSC::VM *)v29;
LABEL_82:
  if (!JSC::VM::hasExceptionsAfterHandlingTraps(v43, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    goto LABEL_42;
  v14 = 0;
  v35 = v86;
  v84 = 0;
  v86 = 0;
  if (v35)
  {
LABEL_44:
    if (*(_DWORD *)v35 != 2)
    {
      *(_DWORD *)v35 -= 2;
      goto LABEL_12;
    }
LABEL_64:
    WTF::StringImpl::~StringImpl(v35, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
  }
LABEL_12:
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    v17 = 0;
  }
  else if (JSC::objectPrototypeHasOwnProperty(this, (JSC::JSGlobalObject *)v11, (uint64_t)&v84, (uint64_t)a4, a5, a6, a7, a8))
  {
    v17 = 7;
  }
  else
  {
    v17 = 6;
  }
  v84 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v15, v16, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  return v17;
}

unint64_t JSC::objectConstructorGetOwnPropertyDescriptor(JSC *this, JSC::JSGlobalObject *a2, WTF::StringImpl **a3, const JSC::Identifier *a4)
{
  JSC::VM *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  const JSC::PropertyDescriptor *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  _QWORD v18[4];
  _BYTE v19[16];
  unint64_t v20;
  JSC::JSGlobalObject *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  memset(v18, 0, 24);
  v18[3] = 14;
  v6 = *a3;
  v20 = 0xFFFFFFFF00000000;
  v22 = 0;
  v23 = 0;
  v21 = a2;
  v24 = 0x20000;
  v25 = 0;
  LOBYTE(v26) = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v14 = (*(uint64_t (**)(JSC::JSGlobalObject *, JSC *, WTF::StringImpl *, _BYTE *))(16
                                                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                                                            + 0x68))(a2, this, v6, v19);
  v15 = 0;
  if (v14)
    v15 = JSC::PropertyDescriptor::setPropertySlot((uint64_t)v18, (uint64_t)this, v6, (uint64_t)v19, v10, v11, v12, v13);
  if (v27)
  {
    v16 = *(_DWORD *)(v26 + 4);
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x198B534FCLL);
    }
    *(_DWORD *)(v26 + 4) = v16 - 1;
  }
  if (!v15)
    return 10;
  if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5, v7, (uint64_t)v8, v9, v10, v11, v12, v13))
    return 0;
  return JSC::constructObjectFromPropertyDescriptor((unint64_t)this, (JSC::JSGlobalObject *)v18, v8, v9, v10, v11, v12, v13);
}

unint64_t JSC::constructObjectFromPropertyDescriptor(unint64_t this, JSC::JSGlobalObject *a2, const JSC::PropertyDescriptor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  JSC *v10;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int32x2_t v18;
  int8x16_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const float *v25;
  int8x8_t v26;
  int32x2_t v27;
  int8x16_t v28;
  uint64_t (*v29)(uint64_t *);
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t (*v33)(uint64_t *);
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  JSC *v38;
  char *v39;

  v9 = *((_DWORD *)a2 + 7);
  if ((~v9 & 6) != 0)
    return JSC::constructObjectFromPropertyDescriptorSlow((JSC *)this, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(JSC **)(this + 56);
  if ((v9 & 1) != 0 && *(_QWORD *)a2)
  {
    v13 = *(_QWORD *)(this + 1080);
    if ((v13 & 1) != 0)
    {
      v29 = *(uint64_t (**)(uint64_t *))(v13 & 0xFFFFFFFFFFFFFFFCLL);
      v30 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v30 = (uint64_t *)(this - 16);
      v37 = *v30;
      v38 = (JSC *)this;
      v39 = (char *)(this + 1080);
      v13 = v29(&v37);
    }
    v14 = JSC::constructEmptyObject(v10, (JSC::VM *)v13, a3, a4, a5, a6, a7, a8);
    v15 = v14;
    v16 = *(_QWORD *)a2;
    *(_QWORD *)(v14 + 16) = *(_QWORD *)a2;
    if (v16
      && (v16 & 0xFFFE000000000002) == 0
      && *((_DWORD *)v10 + 190) >= *(unsigned __int8 *)(v14 + 7))
    {
      v31 = (uint64_t)v10 + 192;
      v32 = v15;
      JSC::Heap::writeBarrierSlowPath(v31, v15);
      v15 = v32;
    }
    v17 = *((_DWORD *)a2 + 6);
    v18 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v17), (int8x8_t)0x400000002));
    v19.i64[0] = v18.i32[0];
    v19.i64[1] = v18.i32[1];
    *(int8x16_t *)(v15 + 24) = vbslq_s8(v19, (int8x16_t)vdupq_n_s64(7uLL), (int8x16_t)vdupq_n_s64(6uLL));
    if ((v17 & 8) != 0)
      v20 = 6;
    else
      v20 = 7;
    *(_QWORD *)(v15 + 40) = v20;
    return v15;
  }
  if (!*((_QWORD *)a2 + 1) || *((_QWORD *)a2 + 2) == 0)
    return JSC::constructObjectFromPropertyDescriptorSlow((JSC *)this, a2, a3, a4, a5, a6, a7, a8);
  v21 = *(_QWORD *)(this + 1088);
  if ((v21 & 1) != 0)
  {
    v33 = *(uint64_t (**)(uint64_t *))(v21 & 0xFFFFFFFFFFFFFFFCLL);
    v34 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v34 = (uint64_t *)(this - 16);
    v37 = *v34;
    v38 = (JSC *)this;
    v39 = (char *)(this + 1088);
    v21 = v33(&v37);
  }
  v15 = JSC::constructEmptyObject(v10, (JSC::VM *)v21, a3, a4, a5, a6, a7, a8);
  v22 = *((_QWORD *)a2 + 1);
  *(_QWORD *)(v15 + 16) = v22;
  v23 = (uint64_t)v10 + 192;
  if (v22 && (v22 & 0xFFFE000000000002) == 0 && *((_DWORD *)v10 + 190) >= *(unsigned __int8 *)(v15 + 7))
  {
    v36 = v15;
    JSC::Heap::writeBarrierSlowPath(v23, v15);
    v15 = v36;
    v23 = (uint64_t)v10 + 192;
  }
  v24 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(v15 + 24) = v24;
  if (v24 && (v24 & 0xFFFE000000000002) == 0 && *((_DWORD *)v10 + 190) >= *(unsigned __int8 *)(v15 + 7))
  {
    v35 = v15;
    JSC::Heap::writeBarrierSlowPath(v23, v15);
    v15 = v35;
  }
  v25 = (const float *)((char *)a2 + 24);
  v26 = (int8x8_t)vld1_dup_f32(v25);
  v27 = vceqz_s32((int32x2_t)vand_s8(v26, (int8x8_t)0x800000004));
  v28.i64[0] = v27.i32[0];
  v28.i64[1] = v27.i32[1];
  *(int8x16_t *)(v15 + 32) = vbslq_s8(v28, (int8x16_t)vdupq_n_s64(7uLL), (int8x16_t)vdupq_n_s64(6uLL));
  return v15;
}

unint64_t JSC::objectConstructorGetOwnPropertyDescriptors(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  JSC::VM *v13;
  const JSC::PropertyDescriptor *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t SlowCase;
  uint64_t v24;
  WTF::StringImpl **v25;
  WTF::StringImpl **v26;
  char OwnPropertyDescriptor;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  WTF::StringImpl *v32;
  int v33;
  _WORD *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned __int16 *v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  JSC::VM *v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  WTF *v57;
  unint64_t result;
  uint64_t v59;
  WTF::StringImpl **v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  JSC::VMTraps *v81;
  _QWORD v82[2];
  int v83;
  char v84;
  __int16 v85;
  char v86;
  uint64_t v87;
  WTF *v88[4];
  WTF *v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;

  v9 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v89 = (WTF *)10;
    goto LABEL_84;
  }
  v10 = *((_QWORD *)a2 + 6);
  v89 = (WTF *)v10;
  if ((v10 & 0xFFFE000000000002) != 0)
  {
LABEL_84:
    v53 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v89, this, a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_85:
    v10 = v53;
    goto LABEL_4;
  }
  if (*(unsigned __int8 *)(v10 + 5) <= 0x16u)
  {
    v53 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v10, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    goto LABEL_85;
  }
LABEL_4:
  if (*(_DWORD *)(v9 + 80))
  {
    v54 = *(_DWORD *)(v9 + 80);
    if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v11 = *((_QWORD *)this + 7);
  v12 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v12 = 1;
  *((_QWORD *)v12 + 1) = (char *)v12 + 24;
  *((_QWORD *)v12 + 2) = 20;
  v89 = v12;
  v90 = 0;
  v91 = v11;
  v92 = 259;
  (*(void (**)(unint64_t, JSC *, WTF **, _QWORD))(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                    + 0x4C)
                                                                  + 0x78))(v10, this, &v89, 0);
  if (*(_DWORD *)(v11 + 80))
  {
    v55 = *(_DWORD *)(v11 + 80);
    if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v11 + 16))
      goto LABEL_95;
  }
  v20 = *((_QWORD *)this + 7);
  v21 = *(_QWORD *)(v20 + 15056);
  if (v21)
  {
    v22 = *(unsigned int *)(v21 + 60);
    SlowCase = *(_QWORD *)(v21 + 24);
    if (SlowCase >= *(_QWORD *)(v21 + 32))
    {
      SlowCase = *(_QWORD *)(v21 + 40);
      if ((SlowCase & 1) != 0)
      {
        v74 = v11;
        v75 = *(_QWORD *)(v20 + 15056);
        JSC::sanitizeStackForVM(*((JSC **)this + 7), v13, (uint64_t)v14, v15, v16, v17, v18, v19);
        v76 = v75;
        v11 = v74;
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v76, v20 + 192, v22, 0, 0, v77, v78, v79);
        goto LABEL_9;
      }
      v73 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v21 + 48);
      *(_QWORD *)(v21 + 32) = SlowCase + HIDWORD(v73);
      *(_QWORD *)(v21 + 40) = SlowCase + (int)v73;
    }
    *(_QWORD *)(v21 + 24) = SlowCase + v22;
LABEL_9:
    *(_DWORD *)SlowCase = 0;
    *(_DWORD *)SlowCase = *((_DWORD *)this + 212);
    *(_DWORD *)(SlowCase + 4) = 16783360;
    *(_OWORD *)(SlowCase + 8) = 0u;
    *(_OWORD *)(SlowCase + 24) = 0u;
    *(_OWORD *)(SlowCase + 40) = 0u;
    *(_QWORD *)(SlowCase + 56) = 0;
    if (*(_BYTE *)(v20 + 755))
      __dmb(0xAu);
    if (*(_DWORD *)(v11 + 80))
    {
      v56 = *(_DWORD *)(v11 + 80);
      if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)v14, v15, v16, v17, v18, v19);
      if (*(_QWORD *)(v11 + 16))
      {
LABEL_95:
        SlowCase = 0;
        goto LABEL_96;
      }
    }
    v24 = *((unsigned int *)v89 + 5);
    if (!(_DWORD)v24)
    {
LABEL_96:
      if (v90)
        WTF::fastFree(v90 - 16, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
      v57 = v89;
      v89 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 1)
        {
          v59 = *((unsigned int *)v57 + 5);
          if ((_DWORD)v59)
          {
            v60 = (WTF::StringImpl **)*((_QWORD *)v57 + 1);
            v61 = 8 * v59;
            do
            {
              v62 = *v60;
              *v60 = 0;
              if (v62)
              {
                if (*(_DWORD *)v62 == 2)
                {
                  WTF::StringImpl::~StringImpl(v62, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
                  WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
                }
                else
                {
                  *(_DWORD *)v62 -= 2;
                }
              }
              ++v60;
              v61 -= 8;
            }
            while (v61);
          }
          v71 = *((_QWORD *)v57 + 1);
          if ((WTF *)((char *)v57 + 24) != (WTF *)v71 && v71 != 0)
          {
            *((_QWORD *)v57 + 1) = 0;
            *((_DWORD *)v57 + 4) = 0;
            WTF::fastFree(v71, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
          }
          WTF::fastFree((unint64_t)v57, v13, (uint64_t)v14, v15, v16, v17, v18, v19);
        }
        else
        {
          --*(_DWORD *)v57;
        }
      }
      return SlowCase;
    }
    v25 = (WTF::StringImpl **)*((_QWORD *)v89 + 1);
    v26 = &v25[v24];
    v81 = (JSC::VMTraps *)(v11 + 64);
    while (1)
    {
      memset(v88, 0, 24);
      v88[3] = (WTF *)14;
      OwnPropertyDescriptor = JSC::JSObject::getOwnPropertyDescriptor((_DWORD *)v10, (uint64_t)this, *v25, (uint64_t)v88);
      if (*(_DWORD *)(v11 + 80))
      {
        v45 = *(_DWORD *)(v11 + 80);
        if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
        {
          v80 = OwnPropertyDescriptor;
          JSC::VMTraps::handleTraps(v81, 7u, (uint64_t)v14, v15, v16, v17, v18, v19);
          OwnPropertyDescriptor = v80;
        }
        if (*(_QWORD *)(v11 + 16))
          goto LABEL_95;
      }
      if ((OwnPropertyDescriptor & 1) != 0)
        break;
LABEL_58:
      if (++v25 == v26)
        goto LABEL_96;
    }
    v28 = JSC::constructObjectFromPropertyDescriptor((unint64_t)this, (JSC::JSGlobalObject *)v88, v14, v15, v16, v17, v18, v19);
    v82[0] = 0;
    v82[1] = SlowCase;
    v83 = -1;
    v84 &= 0xF8u;
    v85 = 0;
    v86 = 1;
    v87 = 0;
    v32 = *v25;
    if (!*v25)
      goto LABEL_56;
    v33 = *((_DWORD *)v32 + 4);
    if ((v33 & 0x20) != 0)
      goto LABEL_56;
    v34 = (_WORD *)*((_QWORD *)v32 + 1);
    v35 = *((unsigned int *)v32 + 1);
    if ((v33 & 4) == 0)
    {
      if ((_DWORD)v35)
      {
        v36 = (unsigned __int16)*v34 - 48;
        if (v36 <= 9 && (*v34 != 48 || v35 <= 1))
        {
          v40 = v34 + 1;
          v41 = v35 - 1;
          while (v41)
          {
            if (v36 > 0x19999999)
              goto LABEL_21;
            v42 = *v40 - 48;
            if (v42 > 9)
              goto LABEL_21;
            v37 = 0;
            LODWORD(v35) = 0;
            v38 = 0;
            v43 = __CFADD__(v42, 10 * v36);
            v36 = v42 + 10 * v36;
            ++v40;
            --v41;
            if (v43)
              goto LABEL_43;
          }
          if (v36 == -1)
            v37 = 0;
          else
            v37 = 0x100000000;
          if (v36 == -1)
            LODWORD(v35) = 0;
          else
            LODWORD(v35) = v36;
          if (v36 == -1)
            v38 = 0;
          else
            v38 = v36 & 0xFFFFFF00;
LABEL_43:
          v44 = (JSC::VM *)(v38 | v35);
          if ((v37 & 0x100000000) != 0)
          {
LABEL_44:
            JSC::JSObject::putDirectIndex(SlowCase, (uint64_t)this, v44, v28, 0, 0, v29, v30, v31.n128_f64[0]);
LABEL_57:
            if (*(_DWORD *)(v11 + 80))
            {
              v49 = *(_DWORD *)(v11 + 80);
              if ((v49 & 0x27) != 0 && (v49 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v81, 7u, (uint64_t)v14, v15, v16, v17, v18, v19);
              if (*(_QWORD *)(v11 + 16))
                goto LABEL_95;
            }
            goto LABEL_58;
          }
LABEL_56:
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)SlowCase, *((_QWORD *)this + 7), (unint64_t)v32, v28, 0, (uint64_t)v82, v29, v30, v31);
          goto LABEL_57;
        }
LABEL_21:
        v37 = 0;
        LODWORD(v35) = 0;
      }
      else
      {
        v37 = 0;
      }
      v38 = 0;
      goto LABEL_43;
    }
    if ((_DWORD)v35)
    {
      v46 = *(unsigned __int8 *)v34 - 48;
      if (v46 <= 9 && (v35 < 2 || *(_BYTE *)v34 != 48))
      {
        v50 = v35 - 1;
        v51 = (unsigned __int8 *)v34 + 1;
        while (v50)
        {
          if (v46 > 0x19999999)
            goto LABEL_53;
          v52 = *v51 - 48;
          if (v52 > 9)
            goto LABEL_53;
          LODWORD(v35) = 0;
          v47 = 0;
          v48 = 0;
          v43 = __CFADD__(v52, 10 * v46);
          v46 = v52 + 10 * v46;
          --v50;
          ++v51;
          if (v43)
            goto LABEL_55;
        }
        if (v46 == -1)
          LODWORD(v35) = 0;
        else
          LODWORD(v35) = v46;
        if (v46 == -1)
          v47 = 0;
        else
          v47 = v46 & 0xFFFFFF00;
        if (v46 == -1)
          v48 = 0;
        else
          v48 = 0x100000000;
LABEL_55:
        v44 = (JSC::VM *)(v47 | v35);
        if ((v48 & 0x100000000) != 0)
          goto LABEL_44;
        goto LABEL_56;
      }
LABEL_53:
      LODWORD(v35) = 0;
    }
    v47 = 0;
    v48 = 0;
    goto LABEL_55;
  }
  SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v20 + 14936, *((JSC **)this + 7), 0x40uLL, 0, v16, v17, v18, v19);
  if (SlowCase)
    goto LABEL_9;
  result = 110;
  __break(0xC471u);
  return result;
}

unint64_t JSC::ownPropertyKeys(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  _DWORD *v10;
  uint64_t v12;
  unsigned int v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t SlowCase;
  int v23;
  WTF *v25;
  uint64_t v26;
  JSC::Structure *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  JSC::Structure *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  JSC::VM **v43;
  uint64_t v44;
  unint64_t v45;
  BOOL v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  JSC::VM *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  JSC::VM **v55;
  unint64_t v56;
  BOOL v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unint64_t v61;
  int v62;
  WTF *v63;
  uint64_t v64;
  WTF::StringImpl **v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v78;
  _DWORD *v79;
  unint64_t v80;
  uint64_t v81;
  JSC::VM *v82;
  JSC::VM **v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int32x4_t v89;
  uint64_t v90;
  JSC::VM *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int32x4_t v97;
  JSC::VM *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int32x4_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF *v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  char v117;

  v9 = a3;
  v10 = (_DWORD *)a2;
  v12 = *(_QWORD *)(a1 + 56);
  switch((_DWORD)a3)
  {
    case 2:
      v13 = a4 == 0;
      break;
    case 1:
      v13 = 2;
      break;
    case 3:
      v13 = 3;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198B54590);
  }
  v14 = (unint64_t *)(v12 + 37584);
  if (*(_BYTE *)(a2 + 5) == 61)
  {
    v78 = *(_QWORD *)(a2 + 24);
    if (v78 != 2 && *(_DWORD *)v78 == *(_DWORD *)(a2 + 56))
    {
      v79 = *(_DWORD **)(16 * (*(_DWORD *)v78 & 0xFFFFFFFE) + 0x30);
      if (!v79)
        v79 = *(_DWORD **)(v78 + 16);
      if (*v79 == *(_DWORD *)(a2 + 60) && *(_DWORD *)(a2 + 48) == -1 && ((_DWORD)a4 != 1 || *(_DWORD *)(a2 + 44) == -1))
        v10 = *(_DWORD **)(a2 + 16);
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 2048) + 4) != 2)
  {
    v15 = *(_QWORD *)(16 * (*v10 & 0xFFFFFFFE) + 0x40);
    if (v15)
    {
      if (*(_BYTE *)(v15 + 5) != 1)
      {
        v16 = *(_QWORD *)(v15 + 8 * v13 + 24);
        if (v16 >= 2)
        {
          v17 = *(unsigned __int8 *)(v16 + 4);
          if ((v17 & 0x10) != 0)
            v18 = ((v17 & 0xE) + 10) >> 1;
          else
            v18 = (v17 >> 1) & 7;
          v19 = *(_DWORD *)(a1 + 4 * v18 + 852);
          if (v19)
            v20 = 16 * (v19 & 0xFFFFFFFE);
          else
            v20 = 0;
          v21 = v16 + 16;
          SlowCase = *v14;
          if (*v14 >= *(_QWORD *)(v12 + 37592))
          {
            SlowCase = *(_QWORD *)(v12 + 37600);
            if ((SlowCase & 1) != 0)
            {
              JSC::sanitizeStackForVM(*(JSC **)(a1 + 56), (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
              SlowCase = JSC::LocalAllocator::allocateSlowCase(v12 + 37560, v12 + 192, 16, 0, 0, v106, v107, v108);
LABEL_16:
              *(_DWORD *)SlowCase = 0;
              v23 = *(_DWORD *)(v20 + 8);
              *(_DWORD *)SlowCase = v20 >> 4;
              *(_DWORD *)(SlowCase + 4) = v23;
              *(_QWORD *)(SlowCase + 8) = v21;
              if (*(_BYTE *)(v12 + 755))
                __dmb(0xAu);
              return SlowCase;
            }
            v80 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v12 + 37608);
            *(_QWORD *)(v12 + 37592) = SlowCase + HIDWORD(v80);
            *(_QWORD *)(v12 + 37600) = SlowCase + (int)v80;
          }
          *v14 = SlowCase + 16;
          goto LABEL_16;
        }
      }
    }
  }
  v25 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v25 = 1;
  *((_QWORD *)v25 + 1) = (char *)v25 + 24;
  *((_QWORD *)v25 + 2) = 20;
  v113 = v25;
  v114 = 0;
  v115 = v12;
  v116 = v9;
  v117 = 1;
  (*(void (**)(_DWORD *, unint64_t, WTF **, uint64_t))(16
                                                                      * *(unsigned int *)(16 * (*v10 & 0xFFFFFFFE)
                                                                                        + 0x4C)
                                                                      + 0x78))(v10, a1, &v113, a4);
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v26, (uint64_t)v27, v28, v29, v30, v31, v32))
  {
    goto LABEL_136;
  }
  v34 = (JSC::Structure *)*((unsigned int *)v113 + 5);
  if (v34 >> 5 <= 0xC34 && *(_BYTE *)(*(_QWORD *)(a1 + 2048) + 4) != 2)
  {
    v35 = 16 * (*v10 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v35 + 16) & 3) == 0 && (*(_BYTE *)(v35 + 8) & 0xE) == 0 && (*(_WORD *)(v35 + 12) & 6) == 0)
    {
      v36 = *(_QWORD *)(v35 + 64);
      if (!v36 || *(_BYTE *)(v36 + 5) == 1)
      {
        JSC::Structure::allocateRareData((JSC::Structure *)v35, (JSC::VM *)v12, v27, v28, v29, v30, v31, v32);
        v36 = *(_QWORD *)(v35 + 64);
        v37 = v13;
      }
      else
      {
        v37 = v13;
        v38 = *(_QWORD *)(v36 + 8 * v13 + 24);
        if (v38 == 1)
        {
          v112 = v13;
          v39 = JSC::JSImmutableButterfly::create((JSC::JSImmutableButterfly *)v12, (JSC::VM *)0x19, v34, v28, v29, v30, v31, v32);
          if ((_DWORD)v34)
          {
            v40 = 0;
            v41 = 0;
            v42 = 8 * (_QWORD)v34;
            do
            {
              if (*((_DWORD *)v113 + 5) <= v40)
              {
                __break(0xC471u);
                JUMPOUT(0x198B54648);
              }
              v43 = (JSC::VM **)(*((_QWORD *)v113 + 1) + v41);
              if (v9 != 2 && *v43 && (*((_BYTE *)*v43 + 16) & 0x20) != 0)
              {
                v44 = v39 + v41;
                v45 = JSC::Symbol::create((JSC::Symbol *)v12, *v43, v27, v28, v29, v30, v31, v32);
              }
              else
              {
                v44 = v39 + v41;
                v45 = JSC::jsOwnedString((JSC *)v12, (JSC::VM *)v43, v27, v28, v29, v30, v31, v32);
              }
              *(_QWORD *)(v44 + 16) = v45;
              if (v39)
              {
                v46 = v45 && (v45 & 0xFFFE000000000002) == 0;
                if (v46 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v39 + 7))
                  JSC::Heap::writeBarrierSlowPath(v12 + 192, v39);
              }
              v41 += 8;
              ++v40;
            }
            while (v42 != v41);
          }
          v50 = *(JSC::VM **)(v35 + 64);
          if (!v50 || *((_BYTE *)v50 + 5) == 1)
          {
            JSC::Structure::allocateRareData((JSC::Structure *)v35, (JSC::VM *)v12, v27, v28, v29, v30, v31, v32);
            v50 = *(JSC::VM **)(v35 + 64);
          }
          if (v39 == 1)
          {
            *((_QWORD *)v50 + v112 + 3) = 1;
          }
          else
          {
            __dmb(0xAu);
            *((_QWORD *)v50 + v112 + 3) = v39;
            if (v39 && v50 && *(_DWORD *)(v12 + 760) >= *((unsigned __int8 *)v50 + 7))
              JSC::Heap::writeBarrierSlowPath(v12 + 192, (unint64_t)v50);
          }
          v58 = *(unsigned __int8 *)(v39 + 4);
          if ((v58 & 0x10) != 0)
            v59 = ((v58 & 0xE) + 10) >> 1;
          else
            v59 = (v58 >> 1) & 7;
          v60 = *(_DWORD *)(a1 + 4 * v59 + 852);
          if (v60)
            v61 = 16 * (v60 & 0xFFFFFFFE);
          else
            v61 = 0;
          SlowCase = *v14;
          if (*v14 >= *(_QWORD *)(v12 + 37592))
          {
            SlowCase = *(_QWORD *)(v12 + 37600);
            if ((SlowCase & 1) != 0)
            {
              JSC::sanitizeStackForVM((JSC *)v12, v50, (uint64_t)v27, v28, v29, v30, v31, v32);
              SlowCase = JSC::LocalAllocator::allocateSlowCase(v12 + 37560, v12 + 192, 16, 0, 0, v109, v110, v111);
LABEL_78:
              *(_DWORD *)SlowCase = 0;
              v62 = *(_DWORD *)(v61 + 8);
              *(_DWORD *)SlowCase = v61 >> 4;
              *(_DWORD *)(SlowCase + 4) = v62;
              *(_QWORD *)(SlowCase + 8) = v39 + 16;
              if (*(_BYTE *)(v12 + 755))
                __dmb(0xAu);
              goto LABEL_80;
            }
            v105 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v12 + 37608);
            *(_QWORD *)(v12 + 37592) = SlowCase + HIDWORD(v105);
            *(_QWORD *)(v12 + 37600) = SlowCase + (int)v105;
          }
          *v14 = SlowCase + 16;
          goto LABEL_78;
        }
        if (v38)
          goto LABEL_47;
      }
      *(_QWORD *)(v36 + 8 * v37 + 24) = 1;
    }
LABEL_47:
    v47 = *(_DWORD *)(a1 + 868);
    if (v47)
      v48 = 16 * (v47 & 0xFFFFFFFE);
    else
      v48 = 0;
    v49 = JSC::JSArray::tryCreate((JSC::JSArray *)v12, v48, v34, v28, v29, v30, v31, v32, v33);
    if (v49)
    {
      SlowCase = v49;
      if ((_DWORD)v34)
      {
        v51 = 0;
        v52 = 0;
        v53 = *(_QWORD *)(v49 + 8);
        v54 = 8 * (_QWORD)v34;
        do
        {
          if (*((_DWORD *)v113 + 5) <= v51)
          {
            __break(0xC471u);
            JUMPOUT(0x198B54640);
          }
          v55 = (JSC::VM **)(*((_QWORD *)v113 + 1) + v52);
          if (v9 != 2 && *v55 && (*((_BYTE *)*v55 + 16) & 0x20) != 0)
            v56 = JSC::Symbol::create((JSC::Symbol *)v12, *v55, v27, v28, v29, v30, v31, v32);
          else
            v56 = JSC::jsOwnedString((JSC *)v12, (JSC::VM *)v55, v27, v28, v29, v30, v31, v32);
          *(_QWORD *)(v53 + v52) = v56;
          if (v56)
            v57 = (v56 & 0xFFFE000000000002) == 0;
          else
            v57 = 0;
          if (v57 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
            JSC::Heap::writeBarrierSlowPath(v12 + 192, SlowCase);
          v52 += 8;
          ++v51;
        }
        while (v54 != v52);
      }
      goto LABEL_80;
    }
    goto LABEL_167;
  }
  SlowCase = JSC::constructEmptyArray(a1, 0, 0, 0, v29, v30, v31, v32, v33);
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v50, (uint64_t)v27, v28, v29, v30, v31, v32))
  {
LABEL_136:
    SlowCase = 0;
    goto LABEL_80;
  }
  if (v9 == 1)
  {
    if (!(_DWORD)v34)
      goto LABEL_80;
    v98 = 0;
    while (*((_DWORD *)v113 + 5) > v98)
    {
      v99 = JSC::Symbol::create((JSC::Symbol *)v12, *(JSC::VM **)(*((_QWORD *)v113 + 1) + 8 * (_QWORD)v98), v27, v28, v29, v30, v31, v32);
      JSC::JSObject::putDirectIndex(SlowCase, a1, v98, v99, v100, v101, v102, v103, v104);
      if (*(_DWORD *)(v12 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v50, (uint64_t)v27, v28, v29, v30, v31, v32))
      {
        goto LABEL_136;
      }
      v98 = (JSC::VM *)((char *)v98 + 1);
      if (v34 == v98)
        goto LABEL_80;
    }
LABEL_167:
    __break(0xC471u);
    JUMPOUT(0x198B5448CLL);
  }
  if (v9 == 2)
  {
    if (!(_DWORD)v34)
      goto LABEL_80;
    v90 = 0;
    v91 = 0;
    while (1)
    {
      if (*((_DWORD *)v113 + 5) <= v91)
      {
        __break(0xC471u);
        JUMPOUT(0x198B54658);
      }
      v92 = JSC::jsOwnedString((JSC *)v12, (JSC::VM *)(*((_QWORD *)v113 + 1) + v90), v27, v28, v29, v30, v31, v32);
      JSC::JSObject::putDirectIndex(SlowCase, a1, v91, v92, v93, v94, v95, v96, v97);
      if (*(_DWORD *)(v12 + 80))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v50, (uint64_t)v27, v28, v29, v30, v31, v32))
        {
          goto LABEL_136;
        }
      }
      v91 = (JSC::VM *)((char *)v91 + 1);
      v90 += 8;
      if (v34 == v91)
        goto LABEL_80;
    }
  }
  if ((_DWORD)v34)
  {
    v81 = 0;
    v82 = 0;
    do
    {
      if (*((_DWORD *)v113 + 5) <= v82)
      {
        __break(0xC471u);
        JUMPOUT(0x198B54650);
      }
      v83 = (JSC::VM **)(*((_QWORD *)v113 + 1) + v81);
      if (*v83 && (*((_BYTE *)*v83 + 16) & 0x20) != 0)
        v84 = JSC::Symbol::create((JSC::Symbol *)v12, *v83, v27, v28, v29, v30, v31, v32);
      else
        v84 = JSC::jsOwnedString((JSC *)v12, (JSC::VM *)v83, v27, v28, v29, v30, v31, v32);
      JSC::JSObject::putDirectIndex(SlowCase, a1, v82, v84, v85, v86, v87, v88, v89);
      if (*(_DWORD *)(v12 + 80))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v50, (uint64_t)v27, v28, v29, v30, v31, v32))
        {
          goto LABEL_136;
        }
      }
      v82 = (JSC::VM *)((char *)v82 + 1);
      v81 += 8;
    }
    while (v34 != v82);
  }
LABEL_80:
  if (v114)
    WTF::fastFree(v114 - 16, v50, (uint64_t)v27, v28, v29, v30, v31, v32);
  v63 = v113;
  v113 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 1)
    {
      v64 = *((unsigned int *)v63 + 5);
      if ((_DWORD)v64)
      {
        v65 = (WTF::StringImpl **)*((_QWORD *)v63 + 1);
        v66 = 8 * v64;
        do
        {
          v67 = *v65;
          *v65 = 0;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2)
            {
              WTF::StringImpl::~StringImpl(v67, v50, (uint64_t)v27, v28, v29, v30, v31, v32);
              WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
            }
            else
            {
              *(_DWORD *)v67 -= 2;
            }
          }
          ++v65;
          v66 -= 8;
        }
        while (v66);
      }
      v76 = *((_QWORD *)v63 + 1);
      if ((WTF *)((char *)v63 + 24) != (WTF *)v76 && v76 != 0)
      {
        *((_QWORD *)v63 + 1) = 0;
        *((_DWORD *)v63 + 4) = 0;
        WTF::fastFree(v76, v50, (uint64_t)v27, v28, v29, v30, v31, v32);
      }
      WTF::fastFree((unint64_t)v63, v50, (uint64_t)v27, v28, v29, v30, v31, v32);
    }
    else
    {
      --*(_DWORD *)v63;
    }
  }
  return SlowCase;
}

void JSC::objectAssignGeneric(JSC *this, JSC::JSGlobalObject *a2, JSC::VM *a3, JSC::JSObject *a4, JSC::JSObject *a5)
{
  WTF *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __n128 v21;
  int v22;
  const JSC::PropertyTable *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  JSC::VM *v32;
  JSC::VM *v33;
  int v34;
  int v35;
  BOOL v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  BOOL v44;
  JSC::JSObject *v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  WTF *v51;
  uint64_t v52;
  WTF::StringImpl **v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned __int8 *v66;
  uint64_t v67;
  unsigned int v68;
  JSC::VM *v69[2];
  int v70;
  char v71;
  __int16 v72;
  char v73;
  uint64_t v74;
  _QWORD v75[2];
  unint64_t v76;
  JSC::JSObject *v77;
  JSC::JSObject *v78;
  uint64_t v79;
  __int16 v80;
  __int16 v81;
  char v82;
  uint64_t v83;
  char v84;
  int8x16_t **v85;
  uint64_t v86;
  WTF *v87;
  uint64_t v88;
  JSC::JSGlobalObject *v89;
  __int16 v90;
  JSC::VM *v91;

  v9 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v9 = 1;
  *((_QWORD *)v9 + 1) = (char *)v9 + 24;
  *((_QWORD *)v9 + 2) = 20;
  v87 = v9;
  v88 = 0;
  v89 = a2;
  v90 = 259;
  (*(void (**)(JSC::JSObject *, JSC *, WTF **, _QWORD))(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                   + 0x4C)
                                                                 + 0x78))(a4, this, &v87, 0);
  if (!*((_DWORD *)a2 + 20)
    || !JSC::VM::hasExceptionsAfterHandlingTraps(a2, (uint64_t)v10, v11, v12, v13, v14, v15, v16))
  {
    v17 = *((unsigned int *)v87 + 5);
    if ((_DWORD)v17)
    {
      v18 = 0;
      while (1)
      {
        if (v18 >= *((unsigned int *)v87 + 5))
        {
LABEL_123:
          __break(0xC471u);
          JUMPOUT(0x198B54A98);
        }
        v19 = *((_QWORD *)v87 + 1);
        v76 = 0xFFFFFFFF00000000;
        v77 = a4;
        v78 = 0;
        v79 = 0;
        v80 = 0;
        v81 = 2;
        v82 = 0;
        LOBYTE(v83) = 0;
        v84 = 0;
        v85 = 0;
        v86 = 0;
        v20 = (*(uint64_t (**)(JSC::JSObject *, JSC *, _QWORD, _QWORD *))(16
                                                                                  * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0x68))(a4, this, *(_QWORD *)(v19 + 8 * v18), v75);
        v22 = v20;
        if (*((_DWORD *)a2 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(a2, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
          if (hasExceptionsAfterHandlingTraps)
            v34 = 1;
          else
            v34 = 6;
          if (hasExceptionsAfterHandlingTraps || ((v22 ^ 1) & 1) != 0)
            goto LABEL_31;
        }
        else if (!v20)
        {
          goto LABEL_38;
        }
        if ((v76 & 4) != 0)
        {
LABEL_38:
          v34 = 6;
          goto LABEL_31;
        }
        if (v82)
          break;
        if (HIBYTE(v80) != 1)
        {
          if (HIBYTE(v80) == 2)
          {
            v41 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v75, this, v11, v12, v13, v14, v15, v16);
          }
          else
          {
            if ((v76 & 0x20) != 0)
              v46 = v77;
            else
              v46 = v78;
            v47 = *(WTF::StringImpl **)(v19 + 8 * v18);
            v48 = *(_QWORD *)(16 * (*(_DWORD *)v78 & 0xFFFFFFFE) + 0x28);
            if (HIBYTE(v81) != 1)
              goto LABEL_64;
            if (((unint64_t)v46 & 0xFFFE000000000002) != 0)
              goto LABEL_110;
            v49 = *(unsigned int *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x4C);
            v44 = *(_DWORD *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x4C) != 0;
            if ((_DWORD)v49)
            {
              v43 = 16 * v49;
              if (v85 != (int8x16_t **)v43)
              {
                do
                {
                  v43 = *(_QWORD *)(v43 + 16);
                  v44 = v43 != 0;
                }
                while ((int8x16_t **)v43 != v85 && v43 != 0);
              }
            }
            if (!v44)
            {
LABEL_110:
              v69[0] = *((JSC::VM **)this + 7);
              v41 = JSC::throwDOMAttributeGetterTypeError(v48, v69, v85, v47);
            }
            else
            {
LABEL_64:
              v41 = ((uint64_t (*)(void))v75[0])();
            }
          }
          goto LABEL_52;
        }
        v23 = (const JSC::PropertyTable *)v75[0];
LABEL_11:
        if (*((_DWORD *)a2 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(a2, (uint64_t)v10, v11, v12, v13, v14, v15, v16))
        {
LABEL_84:
          v34 = 1;
          goto LABEL_31;
        }
        v69[0] = 0;
        v69[1] = a3;
        v70 = -1;
        v71 = v71 & 0xF8 | 1;
        v72 = 0;
        v73 = 1;
        v74 = 0;
        v24 = *(_QWORD *)(v19 + 8 * v18);
        v25 = 16 * (*(_DWORD *)a3 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v25 + 0xD) & 4) != 0)
        {
          (*(void (**)(JSC::VM *, JSC *, unint64_t, const JSC::PropertyTable *, JSC::VM **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x4C) + 0x48))(a3, this, v24, v23, v69);
        }
        else
        {
          v26 = *((_QWORD *)this + 7);
          if (!v24)
            goto LABEL_18;
          v27 = *(_DWORD *)(v24 + 16);
          if ((v27 & 0x20) != 0)
            goto LABEL_18;
          v28 = *(_BYTE **)(v24 + 8);
          v29 = *(unsigned int *)(v24 + 4);
          if ((v27 & 4) != 0)
          {
            if (!(_DWORD)v29)
              goto LABEL_18;
            v30 = *v28 - 48;
            if (v30 > 9 || v29 >= 2 && *v28 == 48)
              goto LABEL_18;
            v66 = v28 + 1;
            v67 = v29 - 1;
            while (v67)
            {
              if (v30 <= 0x19999999)
              {
                v68 = *v66 - 48;
                if (v68 <= 9)
                {
                  v40 = __CFADD__(v68, 10 * v30);
                  v30 = v68 + 10 * (_DWORD)v30;
                  ++v66;
                  --v67;
                  if (!v40)
                    continue;
                }
              }
              goto LABEL_18;
            }
          }
          else
          {
            if (!(_DWORD)v29
              || (v30 = *(unsigned __int16 *)v28 - 48, v30 > 9)
              || (*(_WORD *)v28 == 48 ? (v36 = v29 > 1) : (v36 = 0), v36))
            {
LABEL_18:
              if (*(_QWORD *)(*(_QWORD *)(v26 + 41952) + 16) != v24)
              {
                v31 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x10);
                if ((v31 & 0x10) == 0)
                {
                  v32 = a3;
                  while ((*(_WORD *)(v25 + 12) & 0x800) == 0 && (v32 == a3 || (*(_WORD *)(v25 + 12) & 0x400) == 0))
                  {
                    v33 = *(JSC::VM **)(v25 + 48);
                    if (!v33)
                      v33 = (JSC::VM *)*((_QWORD *)v32 + 2);
                    if (v33 == (JSC::VM *)2)
                    {
                      if ((*((_BYTE *)a3 + 6) & 0x20) == 0 || (v31 & 0x400000) != 0)
                      {
                        v91 = (JSC::VM *)*((_QWORD *)this + 7);
                        v42 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a3, v26, v24, (uint64_t)v23, 0, (uint64_t)v69, v15, v16, v21);
                        if (v10 && (v71 & 1) != 0)
                          JSC::throwTypeError((unint64_t)this, &v91, (uint64_t)v42, (uint64_t)v10);
                      }
                      else
                      {
                        JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded((unsigned __int8 *)a3, (unint64_t)this, v24, (uint64_t)v23, (uint64_t)v69, v21, v14, v15, v16);
                      }
                      goto LABEL_29;
                    }
                    v25 = 16 * (*(_DWORD *)v33 & 0xFFFFFFFE);
                    v32 = v33;
                    if ((*(_BYTE *)(v25 + 0x10) & 0x10) != 0)
                      break;
                  }
                }
              }
              JSC::JSObject::putInlineSlow((unsigned __int8 *)a3, (unint64_t)this, v24, v23, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))v69, v14, v15, v16, v21);
              goto LABEL_29;
            }
            v37 = (unsigned __int16 *)(v28 + 2);
            v38 = v29 - 1;
            while (v38)
            {
              if (v30 <= 0x19999999)
              {
                v39 = *v37 - 48;
                if (v39 <= 9)
                {
                  v40 = __CFADD__(v39, 10 * v30);
                  v30 = v39 + 10 * (_DWORD)v30;
                  ++v37;
                  --v38;
                  if (!v40)
                    continue;
                }
              }
              goto LABEL_18;
            }
          }
          if ((_DWORD)v30 == -1)
            goto LABEL_18;
          (*(void (**)(JSC::VM *, JSC *, uint64_t, const JSC::PropertyTable *, uint64_t))(16
                                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C)
                                                                                                 + 0x50))(a3, this, v30, v23, 1);
        }
LABEL_29:
        if (*((_DWORD *)a2 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(a2, (uint64_t)v10, v11, v12, v13, v14, v15, v16))
        {
          goto LABEL_84;
        }
        v34 = 0;
LABEL_31:
        if (v84)
        {
          v35 = *(_DWORD *)(v83 + 4);
          if (!v35)
            goto LABEL_123;
          *(_DWORD *)(v83 + 4) = v35 - 1;
        }
        if ((v34 == 6 || !v34) && ++v18 != v17)
          continue;
        goto LABEL_86;
      }
      v41 = JSC::JSObject::get((unsigned int *)a4, (uint64_t)this, *(_QWORD *)(v19 + 8 * v18), v12, v13, v14, v15, v16);
LABEL_52:
      v23 = (const JSC::PropertyTable *)v41;
      goto LABEL_11;
    }
  }
LABEL_86:
  if (v88)
    WTF::fastFree(v88 - 16, v10, v11, v12, v13, v14, v15, v16);
  v51 = v87;
  v87 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 1)
    {
      v52 = *((unsigned int *)v51 + 5);
      if ((_DWORD)v52)
      {
        v53 = (WTF::StringImpl **)*((_QWORD *)v51 + 1);
        v54 = 8 * v52;
        do
        {
          v55 = *v53;
          *v53 = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
            {
              WTF::StringImpl::~StringImpl(v55, (WTF::AtomStringImpl *)v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
            }
            else
            {
              *(_DWORD *)v55 -= 2;
            }
          }
          ++v53;
          v54 -= 8;
        }
        while (v54);
      }
      v64 = *((_QWORD *)v51 + 1);
      if ((WTF *)((char *)v51 + 24) != (WTF *)v64 && v64 != 0)
      {
        *((_QWORD *)v51 + 1) = 0;
        *((_DWORD *)v51 + 4) = 0;
        WTF::fastFree(v64, v10, v11, v12, v13, v14, v15, v16);
      }
      WTF::fastFree((unint64_t)v51, v10, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      --*(_DWORD *)v51;
    }
  }
}

uint64_t JSC::toPropertyDescriptor(_QWORD *a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  double v107;
  unsigned int *v108;
  unsigned int v109;
  int v110;
  double v111;
  unsigned int *v112;
  unsigned int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  unsigned int v119;
  double v120;
  unsigned int *v121;
  unsigned int v122;
  uint64_t v123;
  int *v124;
  uint64_t v125;
  int *v126;
  unsigned int v127;
  int v128;
  uint64_t v129;
  int *v130;
  BOOL v131;
  BOOL v132;
  BOOL v133;
  _QWORD v134[8];
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  JSC::VM *v142;
  _QWORD *v143;
  _QWORD *v144[2];

  v9 = a1;
  v10 = a1[7];
  v142 = (JSC::VM *)v10;
  if ((a2 & 0xFFFE000000000002) != 0 || (v11 = a2, *(unsigned __int8 *)(a2 + 5) <= 0x16u))
  {
    v40 = "Property description must be an object.";
    v41 = 40;
LABEL_55:
    JSC::throwTypeError((unint64_t)a1, &v142, (uint64_t)v40, v41);
    return 0;
  }
  v140 = 0;
  v141 = a2;
  v138 = 0;
  v139 = 0;
  v136 = 0;
  v137 = 0;
  v135 = 0;
  v14 = a1[297];
  if ((v14 & 1) != 0)
    v15 = (v14 >> 1) & 3;
  else
    v15 = *(unsigned __int8 *)(v14 + 4);
  if (!v15)
  {
    JSC::JSGlobalObject::tryInstallPropertyDescriptorFastPathWatchpoint((JSC::JSGlobalObject *)a1, a9, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    v14 = v9[297];
  }
  if ((v14 & 1) != 0)
    v16 = (v14 >> 1) & 3;
  else
    v16 = *(unsigned __int8 *)(v14 + 4);
  if (v16 != 2)
  {
    v17 = v9[289];
    v18 = (v17 & 1) != 0 ? (v17 >> 1) & 3 : *(unsigned __int8 *)(v17 + 4);
    if (v18 != 2 && *(_BYTE *)(v11 + 5) == 24)
    {
      v19 = (JSC::Structure *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE));
      v20 = *((_QWORD *)v19 + 6);
      if (!v20)
        v20 = *(_QWORD *)(v11 + 16);
      if (v20 == v9[82]
        && ((*(_BYTE *)(v11 + 6) & 0x20) == 0 || (*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x12) & 0x40) != 0)
        && !(*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 6 | *(_BYTE *)(16
                                                                                   * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                   + 0xA) & 8)
        && (*(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x10) & 0x20000008) == 0
        && (*(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x10) & 3) != 2
        && (*(_BYTE *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 8) & 0xE) == 0)
      {
        v134[0] = v10;
        v134[1] = &v140;
        v134[2] = &v141;
        v134[3] = &v139;
        v134[4] = &v138;
        v134[5] = &v137;
        v134[6] = &v136;
        v134[7] = &v135;
        v21 = *((_QWORD *)v19 + 11);
        if (!v21)
        {
          if ((v39 = *((_QWORD *)v19 + 8)) == 0
            || *(_BYTE *)(v39 + 5) != 1 && *(_DWORD *)(v39 + 80) < 2u
            || (JSC::Structure::materializePropertyTable(v19, (JSC::VM *)v10, 1, a4, a5, a6, a7, a8), !v21))
          {
LABEL_107:
            v106 = v140;
            if (!v140)
              goto LABEL_114;
            if (v140 < 0xFFFE000000000000)
            {
              *(_QWORD *)&v107 = v140 - 0x2000000000000;
              if (v140 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
              {
                v131 = v107 < 0.0;
                if (v107 <= 0.0)
                {
                  v108 = (unsigned int *)(a3 + 24);
                  if (!v131)
                    goto LABEL_112;
                  goto LABEL_133;
                }
                goto LABEL_132;
              }
              if ((v140 & 0xFFFE000000000002) != 0)
              {
                v108 = (unsigned int *)(a3 + 24);
                if (v140 != 7)
                {
LABEL_112:
                  v109 = *v108 | 4;
LABEL_113:
                  *v108 = v109;
                  *(_DWORD *)(a3 + 28) |= 2u;
LABEL_114:
                  v110 = v139;
                  if (!v139)
                    goto LABEL_121;
                  if (v139 < 0xFFFE000000000000)
                  {
                    *(_QWORD *)&v111 = v139 - 0x2000000000000;
                    if (v139 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                    {
                      v132 = v111 < 0.0;
                      if (v111 <= 0.0)
                      {
                        v112 = (unsigned int *)(a3 + 24);
                        if (v132)
                          goto LABEL_119;
                        goto LABEL_166;
                      }
LABEL_137:
                      v112 = (unsigned int *)(a3 + 24);
                      goto LABEL_119;
                    }
                    if ((v139 & 0xFFFE000000000002) != 0)
                    {
                      v112 = (unsigned int *)(a3 + 24);
                      if (v139 == 7)
                      {
LABEL_119:
                        v113 = *v112 & 0xFFFFFFF7;
LABEL_120:
                        *v112 = v113;
                        *(_DWORD *)(a3 + 28) |= 4u;
LABEL_121:
                        if (v138)
                          *(_QWORD *)a3 = v138;
                        v114 = v137;
                        if (!v137)
                        {
LABEL_124:
                          v115 = v136;
                          if (!v136)
                          {
LABEL_125:
                            v116 = v135;
                            if (!v135)
                            {
LABEL_126:
                              *(_BYTE *)a4 = 1;
                              goto LABEL_127;
                            }
                            if (v135 == 10)
                              goto LABEL_195;
                            if ((v135 & 0xFFFE000000000002) == 0)
                            {
                              v127 = *(unsigned __int8 *)(v135 + 5);
                              if (v127 >= 0x17)
                              {
                                if ((v127 & 0xFE) != 0x1A)
                                {
                                  if ((*(_BYTE *)(v135 + 6) & 4) != 0)
                                  {
                                    (*(void (**)(_QWORD *__return_ptr))(16
                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v135 & 0xFFFFFFFE) + 0x4C)
                                                                                 + 0x38))(v134);
                                    if (LOBYTE(v134[0]))
                                    {
                                      v116 = v135;
                                      goto LABEL_195;
                                    }
                                  }
                                  goto LABEL_172;
                                }
LABEL_195:
                                *(_QWORD *)(a3 + 16) = v116;
                                *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) & 0xFFFFFFED | 0x10;
                                goto LABEL_126;
                              }
                            }
LABEL_172:
                            v40 = "Setter must be a function.";
                            goto LABEL_144;
                          }
                          if (v136 == 10)
                            goto LABEL_185;
                          if ((v136 & 0xFFFE000000000002) != 0)
                            goto LABEL_143;
                          v119 = *(unsigned __int8 *)(v136 + 5);
                          if (v119 < 0x17)
                            goto LABEL_143;
                          if ((v119 & 0xFE) == 0x1A)
                          {
LABEL_185:
                            *(_QWORD *)(a3 + 8) = v115;
                            *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) & 0xFFFFFFED | 0x10;
                            goto LABEL_125;
                          }
                          if ((*(_BYTE *)(v136 + 6) & 4) != 0)
                          {
                            (*(void (**)(_QWORD *__return_ptr))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v136 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0x38))(v134);
                            if (LOBYTE(v134[0]))
                            {
                              v115 = v136;
                              goto LABEL_185;
                            }
                          }
LABEL_143:
                          v40 = "Getter must be a function.";
LABEL_144:
                          v41 = 27;
LABEL_145:
                          a1 = v9;
                          goto LABEL_55;
                        }
                        if (v137 < 0xFFFE000000000000)
                        {
                          *(_QWORD *)&v120 = v137 - 0x2000000000000;
                          if (v137 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                          {
                            v133 = v120 < 0.0;
                            if (v120 <= 0.0)
                            {
                              v121 = (unsigned int *)(a3 + 24);
                              if (v133)
                                goto LABEL_153;
                              goto LABEL_182;
                            }
LABEL_176:
                            v121 = (unsigned int *)(a3 + 24);
                            goto LABEL_153;
                          }
                          if ((v137 & 0xFFFE000000000002) != 0)
                          {
                            v121 = (unsigned int *)(a3 + 24);
                            if (v137 == 7)
                            {
LABEL_153:
                              v122 = *v121 & 0xFFFFFFFD;
LABEL_154:
                              *v121 = v122;
                              *(_DWORD *)(a3 + 28) |= 1u;
                              goto LABEL_124;
                            }
LABEL_182:
                            v122 = *v121 | 2;
                            goto LABEL_154;
                          }
                          v128 = *(unsigned __int8 *)(v137 + 5);
                          if (v128 == 2)
                          {
                            v129 = *(_QWORD *)(v137 + 8);
                            if ((v129 & 1) != 0)
                              v130 = (int *)(v137 + 16);
                            else
                              v130 = (int *)(v129 + 4);
                            v114 = *v130;
                          }
                          else
                          {
                            if (v128 != 3)
                            {
                              if ((*(_BYTE *)(16 * (*(_DWORD *)v137 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                              {
                                v121 = (unsigned int *)(a3 + 24);
                                if (*(_QWORD **)(16 * (*(_DWORD *)v137 & 0xFFFFFFFE) + 0x28) != v9)
                                  goto LABEL_153;
                                goto LABEL_182;
                              }
                              goto LABEL_176;
                            }
                            v114 = *(_DWORD *)(v137 + 8);
                          }
                        }
                        v121 = (unsigned int *)(a3 + 24);
                        if (v114)
                          goto LABEL_153;
                        goto LABEL_182;
                      }
LABEL_166:
                      v113 = *v112 | 8;
                      goto LABEL_120;
                    }
                    v118 = *(unsigned __int8 *)(v139 + 5);
                    if (v118 == 2)
                    {
                      v125 = *(_QWORD *)(v139 + 8);
                      if ((v125 & 1) != 0)
                        v126 = (int *)(v139 + 16);
                      else
                        v126 = (int *)(v125 + 4);
                      v110 = *v126;
                    }
                    else
                    {
                      if (v118 != 3)
                      {
                        if ((*(_BYTE *)(16 * (*(_DWORD *)v139 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                        {
                          v112 = (unsigned int *)(a3 + 24);
                          if (*(_QWORD **)(16 * (*(_DWORD *)v139 & 0xFFFFFFFE) + 0x28) != v9)
                            goto LABEL_119;
                          goto LABEL_166;
                        }
                        goto LABEL_137;
                      }
                      v110 = *(_DWORD *)(v139 + 8);
                    }
                  }
                  v112 = (unsigned int *)(a3 + 24);
                  if (v110)
                    goto LABEL_119;
                  goto LABEL_166;
                }
LABEL_133:
                v109 = *v108 & 0xFFFFFFFB;
                goto LABEL_113;
              }
              v117 = *(unsigned __int8 *)(v140 + 5);
              if (v117 == 2)
              {
                v123 = *(_QWORD *)(v140 + 8);
                if ((v123 & 1) != 0)
                  v124 = (int *)(v140 + 16);
                else
                  v124 = (int *)(v123 + 4);
                v106 = *v124;
              }
              else
              {
                if (v117 != 3)
                {
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v140 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                  {
                    v108 = (unsigned int *)(a3 + 24);
                    if (*(_QWORD **)(16 * (*(_DWORD *)v140 & 0xFFFFFFFE) + 0x28) == v9)
                      goto LABEL_112;
                    goto LABEL_133;
                  }
LABEL_132:
                  v108 = (unsigned int *)(a3 + 24);
                  goto LABEL_133;
                }
                v106 = *(_DWORD *)(v140 + 8);
              }
            }
            v108 = (unsigned int *)(a3 + 24);
            if (!v106)
              goto LABEL_112;
            goto LABEL_133;
          }
        }
        v143 = v134;
        v144[0] = (_QWORD *)v21;
        v144[1] = &v143;
        v22 = *(_QWORD *)(v21 + 16);
        v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
        if ((v22 & 1) == 0)
        {
          JSC::PropertyTable::forEachProperty<void JSC::Structure::forEachProperty<JSC::toPropertyDescriptor(JSC::JSGlobalObject *,JSC::JSValue,JSC::PropertyDescriptor &,BOOL &)::{lambda(JSC::PropertyTableEntry const&)#1}>(JSC::VM &,JSC::toPropertyDescriptor(JSC::JSGlobalObject *,JSC::JSValue,JSC::PropertyDescriptor &,BOOL &)::{lambda(JSC::PropertyTableEntry const&)#1} const&)::{lambda(JSC::toPropertyDescriptor(JSC::JSGlobalObject *,JSC::JSValue,JSC::PropertyDescriptor &,BOOL &)::{lambda(JSC::PropertyTableEntry const&)#1} const&)#1}>(JSC::toPropertyDescriptor(JSC::JSGlobalObject *,JSC::JSValue,JSC::PropertyDescriptor &,BOOL &)::{lambda(JSC::PropertyTableEntry const&)#1} const&)const::{lambda(JSC::toPropertyDescriptor(JSC::JSGlobalObject *,JSC::JSValue,JSC::PropertyDescriptor &,BOOL &)::{lambda(JSC::PropertyTableEntry const&)#1} const*)#1}::operator()<unsigned int>(v144, v23);
          goto LABEL_107;
        }
        v24 = (*(_DWORD *)(v21 + 28) + *(_DWORD *)(v21 + 24));
        if (!(_DWORD)v24)
          goto LABEL_107;
        v25 = (_QWORD *)(v23 + *(unsigned int *)(v21 + 8));
        v26 = 8 * v24;
        while (1)
        {
          v27 = *v25 & 0xFFFFFFFFFFFFLL;
          if (v27 != 1)
          {
            v28 = HIBYTE(*v25);
            v29 = *(_QWORD **)(*v143 + 41952);
            if (v29[152] == v27)
            {
              v34 = *(_QWORD *)v143[2];
              if (v28 <= 0x3F)
              {
                v35 = v34 + 16;
              }
              else
              {
                v35 = *(_QWORD *)(v34 + 8) - 8;
                v28 = 63 - v28;
              }
              v32 = (_QWORD *)(v35 + 8 * v28);
              v33 = (_QWORD **)(v143 + 1);
            }
            else if (v29[134] == v27)
            {
              v36 = *(_QWORD *)v143[2];
              if (v28 <= 0x3F)
              {
                v37 = v36 + 16;
              }
              else
              {
                v37 = *(_QWORD *)(v36 + 8) - 8;
                v28 = 63 - v28;
              }
              v32 = (_QWORD *)(v37 + 8 * v28);
              v33 = (_QWORD **)(v143 + 3);
            }
            else if (v29[326] == v27)
            {
              v30 = *(_QWORD *)v143[2];
              if (v28 <= 0x3F)
              {
                v31 = v30 + 16;
              }
              else
              {
                v31 = *(_QWORD *)(v30 + 8) - 8;
                v28 = 63 - v28;
              }
              v32 = (_QWORD *)(v31 + 8 * v28);
              v33 = (_QWORD **)(v143 + 4);
            }
            else if (v29[332] == v27)
            {
              v43 = *(_QWORD *)v143[2];
              if (v28 <= 0x3F)
              {
                v44 = v43 + 16;
              }
              else
              {
                v44 = *(_QWORD *)(v43 + 8) - 8;
                v28 = 63 - v28;
              }
              v32 = (_QWORD *)(v44 + 8 * v28);
              v33 = (_QWORD **)(v143 + 5);
            }
            else if (v29[172] == v27)
            {
              v38 = *(_QWORD *)v143[2];
              if (v28 > 0x3F)
              {
                v47 = *(_QWORD *)(v38 + 8) - 8;
                v28 = 63 - v28;
              }
              else
              {
                v47 = v38 + 16;
              }
              v32 = (_QWORD *)(v47 + 8 * v28);
              v33 = (_QWORD **)(v143 + 6);
            }
            else
            {
              if (v29[287] != v27)
                goto LABEL_37;
              v45 = *(_QWORD *)v143[2];
              if (v28 <= 0x3F)
              {
                v46 = v45 + 16;
              }
              else
              {
                v46 = *(_QWORD *)(v45 + 8) - 8;
                v28 = 63 - v28;
              }
              v32 = (_QWORD *)(v46 + 8 * v28);
              v33 = (_QWORD **)(v143 + 7);
            }
            **v33 = *v32;
          }
LABEL_37:
          ++v25;
          v26 -= 8;
          if (!v26)
            goto LABEL_107;
        }
      }
    }
  }
  v48 = (_QWORD *)(v10 + 41952);
  v56 = JSC::JSObject::getIfPropertyExists<JSC::Identifier>(v11, (JSC::JSGlobalObject *)v9, *(_QWORD *)(v10 + 41952) + 1216, (uint64_t)a4, a5, a6, a7, a8);
  v140 = v56;
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v49, v50, v51, v52, v53, v54, v55))
  {
    return 0;
  }
  if (v56)
  {
    v57 = JSC::JSValue::toBoolean((uint64_t *)&v140, (uint64_t)v9);
    v58 = *(_DWORD *)(a3 + 28);
    if (v57)
      v59 = 0;
    else
      v59 = 4;
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) & 0xFFFFFFFB | v59;
    *(_DWORD *)(a3 + 28) = v58 | 2;
    v11 = v141;
  }
  v60 = JSC::JSObject::getIfPropertyExists<JSC::Identifier>(v11, (JSC::JSGlobalObject *)v9, *v48 + 1072, v51, v52, v53, v54, v55);
  v139 = v60;
  if (*(_DWORD *)(v10 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v61, v62, v63, v64, v65, v66, v67))
      return 0;
    v60 = v139;
  }
  if (v60)
  {
    v68 = JSC::JSValue::toBoolean((uint64_t *)&v139, (uint64_t)v9);
    v69 = *(_DWORD *)(a3 + 28);
    if (v68)
      v70 = 0;
    else
      v70 = 8;
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) & 0xFFFFFFF7 | v70;
    *(_DWORD *)(a3 + 28) = v69 | 4;
  }
  v71 = JSC::JSObject::getIfPropertyExists<JSC::Identifier>(v141, (JSC::JSGlobalObject *)v9, *v48 + 2608, v63, v64, v65, v66, v67);
  v138 = v71;
  if (*(_DWORD *)(v10 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v72, v73, v74, v75, v76, v77, v78))
      return 0;
    v71 = v138;
  }
  if (v71)
    *(_QWORD *)a3 = v71;
  v79 = JSC::JSObject::getIfPropertyExists<JSC::Identifier>(v141, (JSC::JSGlobalObject *)v9, *v48 + 2656, v74, v75, v76, v77, v78);
  v137 = v79;
  if (*(_DWORD *)(v10 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v80, v81, v82, v83, v84, v85, v86))
      return 0;
    v79 = v137;
  }
  if (v79)
  {
    v87 = JSC::JSValue::toBoolean((uint64_t *)&v137, (uint64_t)v9);
    v88 = *(_DWORD *)(a3 + 28);
    if (v87)
      v89 = 0;
    else
      v89 = 2;
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) & 0xFFFFFFFD | v89;
    *(_DWORD *)(a3 + 28) = v88 | 1;
  }
  v90 = JSC::JSObject::getIfPropertyExists<JSC::Identifier>(v141, (JSC::JSGlobalObject *)v9, *v48 + 1376, v82, v83, v84, v85, v86);
  v136 = v90;
  if (*(_DWORD *)(v10 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v91, v92, v93, v94, v95, v96, v97))
      return 0;
    v90 = v136;
  }
  if (v90)
  {
    if (v90 != 10)
    {
      if (!JSC::JSValue::isCallable((JSC::JSValue *)&v136))
        goto LABEL_143;
      v90 = v136;
    }
    *(_QWORD *)(a3 + 8) = v90;
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) & 0xFFFFFFED | 0x10;
  }
  v98 = JSC::JSObject::getIfPropertyExists<JSC::Identifier>(v141, (JSC::JSGlobalObject *)v9, *v48 + 2296, v93, v94, v95, v96, v97);
  v135 = v98;
  if (*(_DWORD *)(v10 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v99, v100, v101, v102, v103, v104, v105))
      return 0;
    v98 = v135;
  }
  if (v98)
  {
    if (v98 != 10)
    {
      if (!JSC::JSValue::isCallable((JSC::JSValue *)&v135))
        goto LABEL_172;
      v98 = v135;
    }
    *(_QWORD *)(a3 + 16) = v98;
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a3 + 24) & 0xFFFFFFED | 0x10;
  }
LABEL_127:
  if (*(_OWORD *)(a3 + 8) != 0)
  {
    if (*(_QWORD *)a3)
    {
      v40 = "Invalid property.  'value' present on property with getter or setter.";
      v41 = 70;
    }
    else
    {
      if ((*(_BYTE *)(a3 + 28) & 1) == 0)
        return 1;
      v40 = "Invalid property.  'writable' present on property with getter or setter.";
      v41 = 73;
    }
    goto LABEL_145;
  }
  return 1;
}

JSC::JSGlobalObject *JSC::objectConstructorSeal(JSC *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  JSC::VM *v10;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  JSC::VM *v22;

  v8 = a2;
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v10;
  if (a2 && *((_BYTE *)a2 + 5) == 24 && (*((_BYTE *)a2 + 4) & 0xE) == 0)
  {
    JSC::JSObject::seal(a2, v10, (uint64_t)a3, a4, a5, a6, a7, a8);
    return v8;
  }
  v12 = JSC::setIntegrityLevel<(JSC::IntegrityLevel)0>((uint64_t)this, (uint64_t)v10, a2);
  if (!*((_DWORD *)v10 + 20))
  {
    if ((v12 & 1) != 0)
      return v8;
LABEL_8:
    JSC::throwTypeError((unint64_t)this, &v22, (uint64_t)"Unable to prevent extension in Object.seal", 43);
    return 0;
  }
  v20 = v12;
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v10, v13, v14, v15, v16, v17, v18, v19);
  if (hasExceptionsAfterHandlingTraps)
    v8 = 0;
  if (((hasExceptionsAfterHandlingTraps | v20) & 1) == 0)
    goto LABEL_8;
  return v8;
}

uint64_t JSC::setIntegrityLevel<(JSC::IntegrityLevel)0>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v29;
  WTF::StringImpl **v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v43;
  char v44;
  int v45;
  WTF *v46[4];
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;

  v6 = (*(uint64_t (**)(_DWORD *, uint64_t))(16 * *(unsigned int *)(16 * (*a3 & 0xFFFFFFFE) + 0x4C) + 0x98))(a3, a1);
  v13 = v6;
  if (!*(_DWORD *)(a2 + 80))
  {
    if (v6)
      goto LABEL_3;
    return 0;
  }
  v43 = *(_DWORD *)(a2 + 80);
  if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v7, v8, v9, v10, v11, v12);
  if (*(_QWORD *)(a2 + 16))
    v44 = 0;
  else
    v44 = v13;
  if ((v44 & 1) == 0)
    return 0;
LABEL_3:
  v14 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v14 = 1;
  *((_QWORD *)v14 + 1) = (char *)v14 + 24;
  *((_QWORD *)v14 + 2) = 20;
  v47 = v14;
  v48 = 0;
  v49 = a2;
  v50 = 259;
  (*(void (**)(_DWORD *, uint64_t, WTF **, _QWORD))(16 * *(unsigned int *)(16 * (*a3 & 0xFFFFFFFE) + 0x4C)
                                                            + 0x78))(a3, a1, &v47, 0);
  if (*(_DWORD *)(a2 + 80))
  {
    v45 = *(_DWORD *)(a2 + 80);
    if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v16, v17, v18, v19, v20, v21);
    if (*(_QWORD *)(a2 + 16))
    {
LABEL_43:
      v26 = 0;
      goto LABEL_15;
    }
  }
  v22 = *((unsigned int *)v47 + 5);
  if ((_DWORD)v22)
  {
    v23 = (_QWORD *)*((_QWORD *)v47 + 1);
    v24 = 8 * v22;
    do
    {
      memset(v46, 0, 24);
      v46[3] = (WTF *)0x40000000ELL;
      (*(void (**)(_DWORD *, uint64_t, _QWORD, WTF **, uint64_t))(16
                                                                         * *(unsigned int *)(16 * (*a3 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0x90))(a3, a1, *v23, v46, 1);
      if (*(_DWORD *)(a2 + 80))
      {
        v25 = *(_DWORD *)(a2 + 80);
        if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, v16, v17, v18, v19, v20, v21);
        if (*(_QWORD *)(a2 + 16))
          goto LABEL_43;
      }
      ++v23;
      v24 -= 8;
    }
    while (v24);
  }
  v26 = 1;
LABEL_15:
  if (v48)
    WTF::fastFree(v48 - 16, v15, v16, v17, v18, v19, v20, v21);
  v27 = v47;
  v47 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 1)
    {
      v29 = *((unsigned int *)v27 + 5);
      if ((_DWORD)v29)
      {
        v30 = (WTF::StringImpl **)*((_QWORD *)v27 + 1);
        v31 = 8 * v29;
        do
        {
          v32 = *v30;
          *v30 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
            {
              WTF::StringImpl::~StringImpl(v32, (WTF::AtomStringImpl *)v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
            }
            else
            {
              *(_DWORD *)v32 -= 2;
            }
          }
          ++v30;
          v31 -= 8;
        }
        while (v31);
      }
      v41 = *((_QWORD *)v27 + 1);
      if ((WTF *)((char *)v27 + 24) != (WTF *)v41 && v41 != 0)
      {
        *((_QWORD *)v27 + 1) = 0;
        *((_DWORD *)v27 + 4) = 0;
        WTF::fastFree(v41, v15, v16, v17, v18, v19, v20, v21);
      }
      WTF::fastFree((unint64_t)v27, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      --*(_DWORD *)v27;
    }
  }
  return v26;
}

JSC::JSGlobalObject *JSC::objectConstructorFreeze(JSC *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::JSGlobalObject *v9;
  JSC::VM *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  JSC::VM *v23;

  v9 = a2;
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v11;
  if (a2 && *((_BYTE *)a2 + 5) == 24 && (*((_BYTE *)a2 + 4) & 0xE) == 0)
  {
    JSC::JSObject::freeze(a2, v11, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return v9;
  }
  v12 = JSC::setIntegrityLevel<(JSC::IntegrityLevel)1>((uint64_t)this, v11, a2);
  v20 = v12;
  if (*((_DWORD *)v11 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11, v13, v14, v15, v16, v17, v18, v19);
    if (hasExceptionsAfterHandlingTraps)
      v9 = 0;
    if (((hasExceptionsAfterHandlingTraps | v20) & 1) == 0)
      goto LABEL_5;
  }
  else if ((v12 & 1) == 0)
  {
LABEL_5:
    JSC::throwTypeError((unint64_t)this, &v23, (uint64_t)"Unable to prevent extension in Object.freeze", 45);
    return 0;
  }
  return v9;
}

uint64_t JSC::setIntegrityLevel<(JSC::IntegrityLevel)1>(uint64_t a1, JSC::VM *a2, _DWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  uint64_t i;
  int OwnPropertyDescriptor;
  int v27;
  int v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v32;
  WTF::StringImpl **v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _QWORD v50[3];
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  JSC::VM *v54;
  __int16 v55;

  v6 = (*(uint64_t (**)(_DWORD *, uint64_t))(16 * *(unsigned int *)(16 * (*a3 & 0xFFFFFFFE) + 0x4C) + 0x98))(a3, a1);
  v14 = v6;
  if (*((_DWORD *)a2 + 20))
  {
    v29 = 0;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(a2, v7, v8, v9, v10, v11, v12, v13) || ((v14 ^ 1) & 1) != 0)
      return v29;
  }
  else if (!v6)
  {
    return 0;
  }
  v15 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v15 = 1;
  *((_QWORD *)v15 + 1) = (char *)v15 + 24;
  *((_QWORD *)v15 + 2) = 20;
  v52 = v15;
  v53 = 0;
  v54 = a2;
  v55 = 259;
  (*(void (**)(_DWORD *, uint64_t, WTF **, _QWORD))(16 * *(unsigned int *)(16 * (*a3 & 0xFFFFFFFE) + 0x4C)
                                                            + 0x78))(a3, a1, &v52, 0);
  if (*((_DWORD *)a2 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(a2, (uint64_t)v16, v17, v18, v19, v20, v21, v22))
  {
LABEL_44:
    v29 = 0;
    goto LABEL_13;
  }
  v23 = *((unsigned int *)v52 + 5);
  if ((_DWORD)v23)
  {
    v24 = (WTF::StringImpl **)*((_QWORD *)v52 + 1);
    for (i = 8 * v23; i; i -= 8)
    {
      memset(v50, 0, sizeof(v50));
      v51 = 14;
      v47 = 0;
      v48 = 0uLL;
      v49 = 14;
      OwnPropertyDescriptor = JSC::JSObject::getOwnPropertyDescriptor(a3, a1, *v24, (uint64_t)&v47);
      v27 = OwnPropertyDescriptor;
      if (*((_DWORD *)a2 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(a2, (uint64_t)v16, v17, v18, v19, v20, v21, v22);
        if (hasExceptionsAfterHandlingTraps || ((v27 ^ 1) & 1) != 0)
        {
          if (hasExceptionsAfterHandlingTraps)
            goto LABEL_44;
          goto LABEL_11;
        }
      }
      else if ((OwnPropertyDescriptor & 1) == 0)
      {
        goto LABEL_11;
      }
      v28 = v51;
      if (v48 == 0)
        v28 = v51 | 2;
      LODWORD(v51) = v28 | 8;
      HIDWORD(v51) |= (v48 == 0) | 4;
      (*(void (**)(_DWORD *, uint64_t, WTF::StringImpl *, _QWORD *, uint64_t))(16
                                                                                      * *(unsigned int *)(16 * (*a3 & 0xFFFFFFFE) + 0x4C)
                                                                                      + 0x90))(a3, a1, *v24, v50, 1);
      if (*((_DWORD *)a2 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(a2, (uint64_t)v16, v17, v18, v19, v20, v21, v22))
      {
        goto LABEL_44;
      }
LABEL_11:
      ++v24;
    }
  }
  v29 = 1;
LABEL_13:
  if (v53)
    WTF::fastFree(v53 - 16, v16, v17, v18, v19, v20, v21, v22);
  v30 = v52;
  v52 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
    {
      v32 = *((unsigned int *)v30 + 5);
      if ((_DWORD)v32)
      {
        v33 = (WTF::StringImpl **)*((_QWORD *)v30 + 1);
        v34 = 8 * v32;
        do
        {
          v35 = *v33;
          *v33 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
            {
              WTF::StringImpl::~StringImpl(v35, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
              WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
            }
            else
            {
              *(_DWORD *)v35 -= 2;
            }
          }
          ++v33;
          v34 -= 8;
        }
        while (v34);
      }
      v44 = *((_QWORD *)v30 + 1);
      if ((WTF *)((char *)v30 + 24) != (WTF *)v44 && v44 != 0)
      {
        *((_QWORD *)v30 + 1) = 0;
        *((_DWORD *)v30 + 4) = 0;
        WTF::fastFree(v44, v16, v17, v18, v19, v20, v21, v22);
      }
      WTF::fastFree((unint64_t)v30, v16, v17, v18, v19, v20, v21, v22);
    }
    else
    {
      --*(_DWORD *)v30;
    }
  }
  return v29;
}

uint64_t JSC::objectConstructorIs(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v10;
  unint64_t v11;
  int v12;
  const WTF::StringImpl *v14;
  double v15;
  double v16;

  if (*((_DWORD *)a2 + 8) == 1)
    return 7;
  v10 = *((_QWORD *)a2 + 6);
  v11 = *((_DWORD *)a2 + 8) == 2 ? 10 : *((_QWORD *)a2 + 7);
  if (v10 == v11)
    return 7;
  if (v10 >> 49)
  {
    if (!(v11 >> 49))
      return 6;
    v15 = (double)(int)v10;
    if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v15 = v10 - 0x2000000000000;
    v16 = (double)(int)v11;
    if (v11 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v16 = v11 - 0x2000000000000;
    if (*(_QWORD *)&v15 != *(_QWORD *)&v16)
      return 6;
    return 7;
  }
  if (((v11 | v10) & 0xFFFE000000000002) == 0)
  {
    v12 = *(unsigned __int8 *)(v10 + 5);
    if (v12 == 2)
    {
      if (*(_BYTE *)(v11 + 5) == 2)
      {
        if ((*(_QWORD *)(v10 + 8) & 1) != 0
          || (v14 = *(const WTF::StringImpl **)(v11 + 8), (v14 & 1) != 0))
        {
          if (JSC::JSString::equalSlowCase((JSC::JSString *)v10, this, (JSC::JSString *)v11, a4, a5, a6, a7, a8, a9))
            return 7;
        }
        else if (WTF::equal(*(WTF **)(v10 + 8), v14, (const WTF::StringImpl *)v11))
        {
          return 7;
        }
        return 6;
      }
    }
    else if (v12 == 3 && *(_BYTE *)(v11 + 5) == 3)
    {
      if (!JSC::JSBigInt::equals((JSC::JSBigInt *)v10, (JSC::JSBigInt *)v11, (JSC::JSBigInt *)v11))
        return 6;
      return 7;
    }
    if (v10 == v11)
      return 7;
  }
  return 6;
}

JSC::Structure *JSC::Structure::setCachedPropertyNames(JSC::Structure *result, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Structure *v10;
  unint64_t v11;

  v10 = result;
  v11 = *((_QWORD *)result + 8);
  if (!v11 || *(_BYTE *)(v11 + 5) == 1)
  {
    result = (JSC::Structure *)JSC::Structure::allocateRareData(result, a2, a3, a4, a5, a6, a7, a8);
    v11 = *((_QWORD *)v10 + 8);
  }
  if (a3 == (JSC::Structure *)1)
  {
    *(_QWORD *)(v11 + 24) = 1;
  }
  else
  {
    __dmb(0xAu);
    *(_QWORD *)(v11 + 24) = a3;
    if (a3 && v11 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v11 + 7))
      return (JSC::Structure *)JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v11);
  }
  return result;
}

unint64_t JSC::constructObjectFromPropertyDescriptorSlow(JSC *this, JSC::JSGlobalObject *a2, const JSC::PropertyDescriptor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t SlowCase;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t result;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC *v29;
  JSC *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;

  v9 = *((_QWORD *)this + 7);
  v10 = *(_QWORD *)(v9 + 15056);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 60);
    SlowCase = *(_QWORD *)(v10 + 24);
    if (SlowCase >= *(_QWORD *)(v10 + 32))
    {
      SlowCase = *(_QWORD *)(v10 + 40);
      if ((SlowCase & 1) != 0)
      {
        v30 = this;
        JSC::sanitizeStackForVM((JSC *)v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v10, v9 + 192, v11, 0, 0, v26, v27, v28);
        this = v30;
        goto LABEL_4;
      }
      v24 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 32) = SlowCase + HIDWORD(v24);
      *(_QWORD *)(v10 + 40) = SlowCase + (int)v24;
    }
    *(_QWORD *)(v10 + 24) = SlowCase + v11;
  }
  else
  {
    v29 = this;
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v9 + 14936, (JSC *)v9, 0x40uLL, 0, a5, a6, a7, a8);
    this = v29;
    if (!SlowCase)
    {
      result = 110;
      __break(0xC471u);
      return result;
    }
  }
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  *(_DWORD *)SlowCase = *((_DWORD *)this + 212);
  *(_DWORD *)(SlowCase + 4) = 16783360;
  v13 = 0uLL;
  *(_OWORD *)(SlowCase + 8) = 0u;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 40) = 0u;
  *(_QWORD *)(SlowCase + 56) = 0;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  v14 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2608);
    v31 = 0;
    v32 = SlowCase;
    v33 = -1;
    v13.n128_u64[0] = 0x100000001000000;
    v34 = 0x1000000;
    v35 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v9, v15, v14, 0, (uint64_t)&v31, a7, a8, v13);
  }
  if ((*((_BYTE *)a2 + 28) & 1) != 0)
  {
    if ((*((_DWORD *)a2 + 6) & 2) != 0)
      v25 = 6;
    else
      v25 = 7;
    JSC::JSObject::putDirect((int *)SlowCase, v9, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2656), v25, 0, v13, a6, a7, a8);
  }
  v16 = *((_QWORD *)a2 + 1);
  if (v16)
    JSC::JSObject::putDirect((int *)SlowCase, v9, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 1376), v16, 0, v13, a6, a7, a8);
  v17 = *((_QWORD *)a2 + 2);
  if (v17)
    JSC::JSObject::putDirect((int *)SlowCase, v9, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2296), v17, 0, v13, a6, a7, a8);
  v18 = *((_DWORD *)a2 + 7);
  if ((v18 & 2) != 0)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 1216);
    if ((*((_DWORD *)a2 + 6) & 4) != 0)
      v20 = 6;
    else
      v20 = 7;
    v31 = 0;
    v32 = SlowCase;
    v33 = -1;
    v13.n128_u64[0] = 0x100000001000000;
    v34 = 0x1000000;
    v35 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v9, v19, v20, 0, (uint64_t)&v31, a7, a8, v13);
    v18 = *((_DWORD *)a2 + 7);
  }
  if ((v18 & 4) != 0)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 1072);
    if ((*((_DWORD *)a2 + 6) & 8) != 0)
      v22 = 6;
    else
      v22 = 7;
    v31 = 0;
    v32 = SlowCase;
    v33 = -1;
    v13.n128_u64[0] = 0x100000001000000;
    v34 = 0x1000000;
    v35 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v9, v21, v22, 0, (uint64_t)&v31, a7, a8, v13);
  }
  return SlowCase;
}

void JSC::ObjectPrototype::finishCreation(JSC::ObjectPrototype *this, JSC::VM *a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  WTF::StringImpl *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  WTF::StringImpl *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  WTF::StringImpl *v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  int v80;
  WTF::StringImpl *v81;
  WTF::AtomStringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __n128 v90;
  WTF::StringImpl *v91;
  WTF::AtomStringImpl *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl *v100;
  int v101;
  WTF::StringImpl *v102;
  WTF::AtomStringImpl *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __n128 v111;
  WTF::StringImpl *v112;
  WTF::AtomStringImpl *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  int v122;
  WTF::StringImpl *v123;
  WTF::AtomStringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __n128 v132;
  WTF::StringImpl *v133;
  WTF::AtomStringImpl *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  int v143;
  WTF::StringImpl *v144;
  WTF::AtomStringImpl *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __n128 v153;
  WTF::StringImpl *v154;
  WTF::AtomStringImpl *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  int v164;
  WTF::StringImpl *v165;
  WTF::AtomStringImpl *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __n128 v174;
  WTF::StringImpl *v175;
  WTF::AtomStringImpl *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  int v185;
  WTF::StringImpl *v186;
  WTF::AtomStringImpl *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  __n128 v195;
  WTF::StringImpl *v196;
  WTF::AtomStringImpl *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  void *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  void *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t (*v348)(WTF::StringImpl **);
  WTF::StringImpl **v349;
  WTF::StringImpl *v350;
  WTF::StringImpl *v351[3];

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v12 = (char *)a2 + 41952;
  v13 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2512);
  v14 = *(_QWORD *)(a3 + 512);
  if ((v14 & 1) != 0)
  {
    v348 = *(uint64_t (**)(WTF::StringImpl **))(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a3 & 8) != 0)
      v349 = (WTF::StringImpl **)(a3 - 16);
    else
      v349 = (WTF::StringImpl **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
    v351[0] = *v349;
    v351[1] = (WTF::StringImpl *)a3;
    v351[2] = (WTF::StringImpl *)(a3 + 512);
    v14 = v348(v351);
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v13, v14, 4, a7, a8, a9, a4);
  v15 = *(_QWORD *)v12;
  v16 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 2496);
  if (!v16)
  {
    v350 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v350, 0, (uint64_t)JSC::objectProtoFuncToLocaleString, 0, 0, 4u);
    goto LABEL_13;
  }
  v17 = *(_DWORD *)v16 + 2;
  *(_DWORD *)v16 = v17;
  v350 = v16;
  if ((*((_BYTE *)v16 + 16) & 0x20) != 0)
  {
    v18 = *(WTF::StringImpl **)(v15 + 872);
    if (!v18)
      goto LABEL_8;
    v17 = *(_DWORD *)v18;
  }
  else
  {
    v18 = v16;
  }
  *(_DWORD *)v18 = v17 + 2;
LABEL_8:
  v351[0] = v18;
  v26 = JSC::JSFunction::create((uint64_t)a2, a3, 0, v351, (uint64_t)JSC::objectProtoFuncToLocaleString, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v28 = v351[0];
  v351[0] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v276, v277, v278, v279, v280, v281, v282, v283);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v16, v26, 4, v23, v24, v25, v27);
  if (*(_DWORD *)v16 == 2)
  {
    WTF::StringImpl::~StringImpl(v16, v29, v30, v31, v32, v33, v34, v35);
    WTF::fastFree(v204, v205, v206, v207, v208, v209, v210, v211);
  }
  else
  {
    *(_DWORD *)v16 -= 2;
  }
LABEL_13:
  v36 = *(_QWORD *)v12;
  v37 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 2616);
  if (!v37)
  {
    v350 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v350, 0, (uint64_t)JSC::objectProtoFuncValueOf, 0, 0, 4u);
    goto LABEL_22;
  }
  v38 = *(_DWORD *)v37 + 2;
  *(_DWORD *)v37 = v38;
  v350 = v37;
  if ((*((_BYTE *)v37 + 16) & 0x20) != 0)
  {
    v39 = *(WTF::StringImpl **)(v36 + 872);
    if (!v39)
      goto LABEL_17;
    v38 = *(_DWORD *)v39;
  }
  else
  {
    v39 = v37;
  }
  *(_DWORD *)v39 = v38 + 2;
LABEL_17:
  v351[0] = v39;
  v47 = JSC::JSFunction::create((uint64_t)a2, a3, 0, v351, (uint64_t)JSC::objectProtoFuncValueOf, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v49 = v351[0];
  v351[0] = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v284, v285, v286, v287, v288, v289, v290, v291);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v37, v47, 4, v44, v45, v46, v48);
  if (*(_DWORD *)v37 == 2)
  {
    WTF::StringImpl::~StringImpl(v37, v50, v51, v52, v53, v54, v55, v56);
    WTF::fastFree(v212, v213, v214, v215, v216, v217, v218, v219);
  }
  else
  {
    *(_DWORD *)v37 -= 2;
  }
LABEL_22:
  v57 = *(_QWORD *)v12;
  v58 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 1464);
  if (!v58)
  {
    v350 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v350, 1, (uint64_t)JSC::objectProtoFuncHasOwnProperty, 0, 134, 4u);
    goto LABEL_31;
  }
  v59 = *(_DWORD *)v58 + 2;
  *(_DWORD *)v58 = v59;
  v350 = v58;
  if ((*((_BYTE *)v58 + 16) & 0x20) != 0)
  {
    v60 = *(WTF::StringImpl **)(v57 + 872);
    if (!v60)
      goto LABEL_26;
    v59 = *(_DWORD *)v60;
  }
  else
  {
    v60 = v58;
  }
  *(_DWORD *)v60 = v59 + 2;
LABEL_26:
  v351[0] = v60;
  v68 = JSC::JSFunction::create((uint64_t)a2, a3, 1, v351, (uint64_t)JSC::objectProtoFuncHasOwnProperty, 0, 134, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v70 = v351[0];
  v351[0] = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v61, v62, v63, v64, v65, v66, v67);
      WTF::fastFree(v292, v293, v294, v295, v296, v297, v298, v299);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v58, v68, 4, v65, v66, v67, v69);
  if (*(_DWORD *)v58 == 2)
  {
    WTF::StringImpl::~StringImpl(v58, v71, v72, v73, v74, v75, v76, v77);
    WTF::fastFree(v220, v221, v222, v223, v224, v225, v226, v227);
  }
  else
  {
    *(_DWORD *)v58 -= 2;
  }
LABEL_31:
  v78 = *(_QWORD *)v12;
  v79 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 2152);
  if (!v79)
  {
    v350 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v350, 1, (uint64_t)JSC::objectProtoFuncPropertyIsEnumerable, 0, 0, 4u);
    goto LABEL_40;
  }
  v80 = *(_DWORD *)v79 + 2;
  *(_DWORD *)v79 = v80;
  v350 = v79;
  if ((*((_BYTE *)v79 + 16) & 0x20) != 0)
  {
    v81 = *(WTF::StringImpl **)(v78 + 872);
    if (!v81)
      goto LABEL_35;
    v80 = *(_DWORD *)v81;
  }
  else
  {
    v81 = v79;
  }
  *(_DWORD *)v81 = v80 + 2;
LABEL_35:
  v351[0] = v81;
  v89 = JSC::JSFunction::create((uint64_t)a2, a3, 1, v351, (uint64_t)JSC::objectProtoFuncPropertyIsEnumerable, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v91 = v351[0];
  v351[0] = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
    {
      WTF::StringImpl::~StringImpl(v91, v82, v83, v84, v85, v86, v87, v88);
      WTF::fastFree(v300, v301, v302, v303, v304, v305, v306, v307);
    }
    else
    {
      *(_DWORD *)v91 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v79, v89, 4, v86, v87, v88, v90);
  if (*(_DWORD *)v79 == 2)
  {
    WTF::StringImpl::~StringImpl(v79, v92, v93, v94, v95, v96, v97, v98);
    WTF::fastFree(v228, v229, v230, v231, v232, v233, v234, v235);
  }
  else
  {
    *(_DWORD *)v79 -= 2;
  }
LABEL_40:
  v99 = *(_QWORD *)v12;
  v100 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 1680);
  if (!v100)
  {
    v350 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v350, 1, (uint64_t)JSC::objectProtoFuncIsPrototypeOf, 0, 0, 4u);
    goto LABEL_49;
  }
  v101 = *(_DWORD *)v100 + 2;
  *(_DWORD *)v100 = v101;
  v350 = v100;
  if ((*((_BYTE *)v100 + 16) & 0x20) != 0)
  {
    v102 = *(WTF::StringImpl **)(v99 + 872);
    if (!v102)
      goto LABEL_44;
    v101 = *(_DWORD *)v102;
  }
  else
  {
    v102 = v100;
  }
  *(_DWORD *)v102 = v101 + 2;
LABEL_44:
  v351[0] = v102;
  v110 = JSC::JSFunction::create((uint64_t)a2, a3, 1, v351, (uint64_t)JSC::objectProtoFuncIsPrototypeOf, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v112 = v351[0];
  v351[0] = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
    {
      WTF::StringImpl::~StringImpl(v112, v103, v104, v105, v106, v107, v108, v109);
      WTF::fastFree(v308, v309, v310, v311, v312, v313, v314, v315);
    }
    else
    {
      *(_DWORD *)v112 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v100, v110, 4, v107, v108, v109, v111);
  if (*(_DWORD *)v100 == 2)
  {
    WTF::StringImpl::~StringImpl(v100, v113, v114, v115, v116, v117, v118, v119);
    WTF::fastFree(v236, v237, v238, v239, v240, v241, v242, v243);
  }
  else
  {
    *(_DWORD *)v100 -= 2;
  }
LABEL_49:
  v120 = *(_QWORD *)v12;
  v121 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 816);
  if (!v121)
  {
    v351[0] = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)v351, 2, (uint64_t)JSC::objectProtoFuncDefineGetter, 0, 0, 4u);
    goto LABEL_58;
  }
  v122 = *(_DWORD *)v121 + 2;
  *(_DWORD *)v121 = v122;
  if ((*((_BYTE *)v121 + 16) & 0x20) != 0)
  {
    v123 = *(WTF::StringImpl **)(v120 + 872);
    if (!v123)
      goto LABEL_53;
    v122 = *(_DWORD *)v123;
  }
  else
  {
    v123 = v121;
  }
  *(_DWORD *)v123 = v122 + 2;
LABEL_53:
  v351[0] = v123;
  v131 = JSC::JSFunction::create((uint64_t)a2, a3, 2, v351, (uint64_t)JSC::objectProtoFuncDefineGetter, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v133 = v351[0];
  v351[0] = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
    {
      WTF::StringImpl::~StringImpl(v133, v124, v125, v126, v127, v128, v129, v130);
      WTF::fastFree(v316, v317, v318, v319, v320, v321, v322, v323);
    }
    else
    {
      *(_DWORD *)v133 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v121, v131, 4, v128, v129, v130, v132);
  if (*(_DWORD *)v121 == 2)
  {
    WTF::StringImpl::~StringImpl(v121, v134, v135, v136, v137, v138, v139, v140);
    WTF::fastFree(v244, v245, v246, v247, v248, v249, v250, v251);
  }
  else
  {
    *(_DWORD *)v121 -= 2;
  }
LABEL_58:
  v141 = *(_QWORD *)v12;
  v142 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 824);
  if (!v142)
  {
    v351[0] = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)v351, 2, (uint64_t)JSC::objectProtoFuncDefineSetter, 0, 0, 4u);
    goto LABEL_67;
  }
  v143 = *(_DWORD *)v142 + 2;
  *(_DWORD *)v142 = v143;
  if ((*((_BYTE *)v142 + 16) & 0x20) != 0)
  {
    v144 = *(WTF::StringImpl **)(v141 + 872);
    if (!v144)
      goto LABEL_62;
    v143 = *(_DWORD *)v144;
  }
  else
  {
    v144 = v142;
  }
  *(_DWORD *)v144 = v143 + 2;
LABEL_62:
  v351[0] = v144;
  v152 = JSC::JSFunction::create((uint64_t)a2, a3, 2, v351, (uint64_t)JSC::objectProtoFuncDefineSetter, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v154 = v351[0];
  v351[0] = 0;
  if (v154)
  {
    if (*(_DWORD *)v154 == 2)
    {
      WTF::StringImpl::~StringImpl(v154, v145, v146, v147, v148, v149, v150, v151);
      WTF::fastFree(v324, v325, v326, v327, v328, v329, v330, v331);
    }
    else
    {
      *(_DWORD *)v154 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v142, v152, 4, v149, v150, v151, v153);
  if (*(_DWORD *)v142 == 2)
  {
    WTF::StringImpl::~StringImpl(v142, v155, v156, v157, v158, v159, v160, v161);
    WTF::fastFree(v252, v253, v254, v255, v256, v257, v258, v259);
  }
  else
  {
    *(_DWORD *)v142 -= 2;
  }
LABEL_67:
  v162 = *(_QWORD *)v12;
  v163 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 832);
  if (!v163)
  {
    v351[0] = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)v351, 1, (uint64_t)JSC::objectProtoFuncLookupGetter, 0, 0, 4u);
    goto LABEL_76;
  }
  v164 = *(_DWORD *)v163 + 2;
  *(_DWORD *)v163 = v164;
  if ((*((_BYTE *)v163 + 16) & 0x20) != 0)
  {
    v165 = *(WTF::StringImpl **)(v162 + 872);
    if (!v165)
      goto LABEL_71;
    v164 = *(_DWORD *)v165;
  }
  else
  {
    v165 = v163;
  }
  *(_DWORD *)v165 = v164 + 2;
LABEL_71:
  v351[0] = v165;
  v173 = JSC::JSFunction::create((uint64_t)a2, a3, 1, v351, (uint64_t)JSC::objectProtoFuncLookupGetter, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v175 = v351[0];
  v351[0] = 0;
  if (v175)
  {
    if (*(_DWORD *)v175 == 2)
    {
      WTF::StringImpl::~StringImpl(v175, v166, v167, v168, v169, v170, v171, v172);
      WTF::fastFree(v332, v333, v334, v335, v336, v337, v338, v339);
    }
    else
    {
      *(_DWORD *)v175 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v163, v173, 4, v170, v171, v172, v174);
  if (*(_DWORD *)v163 == 2)
  {
    WTF::StringImpl::~StringImpl(v163, v176, v177, v178, v179, v180, v181, v182);
    WTF::fastFree(v260, v261, v262, v263, v264, v265, v266, v267);
  }
  else
  {
    *(_DWORD *)v163 -= 2;
  }
LABEL_76:
  v183 = *(_QWORD *)v12;
  v184 = *(WTF::StringImpl **)(*(_QWORD *)v12 + 840);
  if (!v184)
  {
    v351[0] = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)v351, 1, (uint64_t)JSC::objectProtoFuncLookupSetter, 0, 0, 4u);
    return;
  }
  v185 = *(_DWORD *)v184 + 2;
  *(_DWORD *)v184 = v185;
  if ((*((_BYTE *)v184 + 16) & 0x20) != 0)
  {
    v186 = *(WTF::StringImpl **)(v183 + 872);
    if (!v186)
      goto LABEL_80;
    v185 = *(_DWORD *)v186;
  }
  else
  {
    v186 = v184;
  }
  *(_DWORD *)v186 = v185 + 2;
LABEL_80:
  v351[0] = v186;
  v194 = JSC::JSFunction::create((uint64_t)a2, a3, 1, v351, (uint64_t)JSC::objectProtoFuncLookupSetter, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v196 = v351[0];
  v351[0] = 0;
  if (v196)
  {
    if (*(_DWORD *)v196 == 2)
    {
      WTF::StringImpl::~StringImpl(v196, v187, v188, v189, v190, v191, v192, v193);
      WTF::fastFree(v340, v341, v342, v343, v344, v345, v346, v347);
    }
    else
    {
      *(_DWORD *)v196 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v184, v194, 4, v191, v192, v193, v195);
  if (*(_DWORD *)v184 == 2)
  {
    WTF::StringImpl::~StringImpl(v184, v197, v198, v199, v200, v201, v202, v203);
    WTF::fastFree(v268, v269, v270, v271, v272, v273, v274, v275);
  }
  else
  {
    *(_DWORD *)v184 -= 2;
  }
}

uint64_t JSC::objectProtoFuncToLocaleString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::VM *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  char OwnStaticPropertySlot;
  int v51;
  _WORD *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  unsigned int v64;
  uint64_t v65;
  JSC *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t result;
  int v72;
  uint64_t v73;
  const WTF::String *v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t TypeError;
  WTF::StringImpl *v83;
  JSC::JSGlobalObject *v84;
  JSC *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  BOOL v104;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int8x16_t **v111;
  JSC *v112;
  uint64_t v113;
  uint64_t *v114;
  unint64_t v115;
  int v116;
  _WORD *v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  int v123;
  unsigned __int16 *v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  JSC::VMTraps *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  JSC::VM *v134;
  uint64_t *v135;
  uint64_t v136;
  JSC::VMTraps *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  unint64_t v147;
  int v148;
  unsigned int v149;
  int v150;
  unint64_t v151;
  int v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  JSC::VM *v156;
  JSC::CallFrame *v157;
  uint64_t *v158;
  JSC::VMTraps *v159;
  char v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t *v163;
  char v164;
  int v165;
  unsigned int v166;
  uint64_t v167;
  unsigned __int8 *v168;
  int v169;
  unint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  char *v174;
  unint64_t v175;
  size_t v176;
  char *v177;
  char *v178;
  int v179;
  uint64_t v180;
  unsigned __int8 *v181;
  JSC::VM **v182;
  uint64_t v183;
  int v184;
  int v185;
  JSC::VM **p_dst;
  uint64_t v187;
  int v188;
  int v189;
  int v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t *v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  int8x16_t **v200;
  JSC::VMTraps *v201;
  JSC *v202;
  uint64_t v203;
  uint64_t *v204;
  unsigned int v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  char v211;
  int v212;
  uint64_t v213;
  int v214;
  unint64_t v215;
  unint64_t v216;
  char v217;
  int v218;
  uint64_t v219;
  unsigned __int8 *v220;
  unsigned int v221;
  unsigned int v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  char v228;
  int v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  char v233;
  int v234;
  unint64_t v235;
  unint64_t v236;
  char v237;
  BOOL v238;
  uint64_t v239;
  unsigned __int8 *v240;
  unsigned int v241;
  unint64_t v242;
  JSC::VMTraps *v243;
  JSC::VMTraps *v244;
  unint64_t v245;
  JSC *v246;
  uint64_t v247;
  JSC::CallFrame *v248;
  JSC::CallFrame *v249;
  JSC::CallFrame *v250;
  JSC::Structure *v251;
  uint64_t v252;
  uint64_t v253;
  JSC::VMTraps *v254;
  JSC::VMTraps *v255;
  JSC::VMTraps *v256;
  JSC::VMTraps *v257;
  JSC::VMTraps *v258;
  JSC::VMTraps *v259;
  JSC::VMTraps *v260;
  uint64_t (*v261)(unint64_t);
  uint64_t v262;
  unint64_t v263;
  _DWORD *v264;
  _DWORD *v265;
  _QWORD v266[2];
  uint64_t v267;
  char v268;
  int8x16_t **v269;
  uint64_t v270;
  JSC::VM *__dst;
  uint64_t v272;
  uint64_t v273;
  char __s[8];
  uint64_t v275;

  v8 = this;
  v275 = *MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  v11 = v10;
  if ((v10 & 0xFFFE000000000002) != 0)
    goto LABEL_121;
  v12 = *(unsigned __int8 *)(v10 + 5);
  if (v12 - 51 < 6)
  {
    v11 = 10;
LABEL_121:
    __dst = (JSC::VM *)v11;
    v115 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&__dst, this, a3, a4, a5, a6, a7, a8);
    goto LABEL_122;
  }
  v13 = *((_QWORD *)a2 + 5);
  if (v12 <= 0x16)
  {
    v115 = JSC::JSCell::toObjectSlow(*((JSC::JSCell **)a2 + 5), (JSC::SymbolObject **)this, (uint64_t)a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
LABEL_122:
    v13 = v115;
  }
  if (*(_DWORD *)(v9 + 80))
  {
    v122 = *(_DWORD *)(v9 + 80);
    if ((v122 & 0x27) != 0 && (v122 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v14 = (uint64_t *)(v9 + 41952);
  v263 = 0xFFFFFFFF00000000;
  LOBYTE(v267) = 0;
  v268 = 0;
  v269 = 0;
  v270 = 0;
  v265 = 0;
  memset(v266, 0, 13);
  v264 = (_DWORD *)v10;
  v15 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2512);
  v16 = (_BYTE *)(v13 + 6);
  v17 = v15 >> 4;
  v18 = v13;
  if ((*(_BYTE *)(v13 + 6) & 8) == 0)
  {
    v19 = (JSC::VM *)*((_QWORD *)v8 + 7);
    v20 = v13;
    do
    {
      v21 = *(_DWORD *)v20 & 0xFFFFFFFE;
      v22 = 16 * v21;
      if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * v21 + 0x20)) != 0)
        goto LABEL_34;
      v23 = *(_QWORD *)(16 * v21 + 0x58);
      if (!v23)
      {
        v24 = *(_QWORD *)(16 * v21 + 0x40);
        if (!v24 || *(_BYTE *)(v24 + 5) != 1 && *(_DWORD *)(v24 + 80) < 2u)
          goto LABEL_34;
        v25 = v19;
        v254 = v19;
        v26 = v15;
        v27 = v17;
        v28 = v13;
        v29 = v10;
        v30 = v8;
        v31 = v9;
        v32 = v14;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v22, v25, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        v14 = v32;
        v9 = v31;
        v8 = v30;
        v10 = v29;
        v13 = v28;
        v17 = v27;
        v15 = v26;
        v19 = v254;
        if (!v23)
          goto LABEL_34;
      }
      if (!*(_DWORD *)(v23 + 24))
        goto LABEL_34;
      v33 = *(_QWORD *)(v23 + 16);
      v34 = v33 & 0xFFFFFFFFFFFFFFFELL;
      v35 = *(unsigned int *)(v23 + 8);
      v36 = *(_DWORD *)(v15 + 16);
      if ((v33 & 1) != 0)
      {
        if ((v36 & 0x20) != 0)
          v36 = *(_DWORD *)(v15 + 32);
        v37 = *(_DWORD *)(v23 + 12);
        v38 = (v36 >> 8) & *(_QWORD *)&v37;
        v39 = *(unsigned __int8 *)(v34 + v38);
        if (!*(_BYTE *)(v34 + v38))
          goto LABEL_34;
        v40 = v34 + v35;
        v41 = 1;
        while (1)
        {
          v42 = *(_QWORD *)(v40 + 8 * (v39 - 1));
          if (v15 == (v42 & 0xFFFFFFFFFFFFLL))
            break;
          v38 = ((_DWORD)v38 + v41) & v37;
          v39 = *(unsigned __int8 *)(v34 + v38);
          ++v41;
          if (!*(_BYTE *)(v34 + v38))
            goto LABEL_34;
        }
        a6 = (v42 >> 16) & 0xFF00000000 | HIBYTE(v42);
      }
      else
      {
        if ((v36 & 0x20) != 0)
          v36 = *(_DWORD *)(v15 + 32);
        v43 = *(_DWORD *)(v23 + 12);
        v44 = v43 & (v36 >> 8);
        v45 = *(_DWORD *)(v34 + 4 * v44);
        if (!v45)
          goto LABEL_34;
        v46 = v34 + 4 * v35;
        v47 = 1;
        while (1)
        {
          v48 = (v45 - 1);
          if (v15 == *(_QWORD *)(v46 + 16 * v48))
            break;
          v44 = (v44 + v47) & v43;
          v45 = *(_DWORD *)(v34 + 4 * v44);
          ++v47;
          if (!v45)
            goto LABEL_34;
        }
        a6 = *(unsigned int *)(v46 + 16 * v48 + 8) | ((unint64_t)*(unsigned __int8 *)(v46 + 16 * v48 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v57 = v20 + 16;
          v58 = a6 << 32;
        }
        else
        {
          v57 = *(_QWORD *)(v20 + 8) - 8;
          v58 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v57 + (v58 >> 29));
        if ((a4 & 0xFFFE000000000002) != 0)
          goto LABEL_56;
        v59 = *(unsigned __int8 *)(a4 + 5);
        if (v59 == 5)
        {
          v66 = v8;
          v67 = v9;
          v68 = v14;
          JSC::JSObject::fillGetterPropertySlot((unsigned int *)v20, (uint64_t)v19, (uint64_t)&v261, a4, SHIDWORD(a6), a6);
          v14 = v68;
          v9 = v67;
          v8 = v66;
          goto LABEL_74;
        }
        if (v59 == 6)
        {
          v108 = *(_DWORD *)(v22 + 16) & 3;
          v109 = *(_QWORD *)(a4 + 16);
          if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
          {
            v261 = *(uint64_t (**)(unint64_t))(a4 + 8);
            v262 = v109;
            LODWORD(v263) = HIDWORD(a6);
            v265 = (_DWORD *)v20;
            BYTE1(v266[1]) = 3;
            if (v108 == 2)
              goto LABEL_74;
            goto LABEL_283;
          }
          v111 = *(int8x16_t ***)(a4 + 24);
          v110 = *(_QWORD *)(a4 + 32);
          v261 = *(uint64_t (**)(unint64_t))(a4 + 8);
          v262 = v109;
          LODWORD(v263) = HIDWORD(a6);
          v265 = (_DWORD *)v20;
          BYTE1(v266[1]) = 3;
          if (v108 != 2)
            LOBYTE(v266[1]) = 1;
          BYTE3(v266[1]) = 1;
          v269 = v111;
          v270 = v110;
        }
        else
        {
LABEL_56:
          v261 = (uint64_t (*)(unint64_t))a4;
          v265 = (_DWORD *)v20;
LABEL_57:
          v263 = __PAIR64__(a6, a5);
          LOWORD(v266[1]) = 257;
        }
LABEL_74:
        if (BYTE1(v266[1]) == 1)
        {
          v65 = (uint64_t)v261;
        }
        else if (BYTE1(v266[1]) == 2)
        {
          v84 = v8;
          v85 = v8;
          v86 = v9;
          v87 = v14;
          v88 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v261, v84, (uint64_t)a3, a4, a5, a6, a7, a8);
          v14 = v87;
          v9 = v86;
          v8 = v85;
          v65 = v88;
        }
        else
        {
          v97 = *(WTF::StringImpl **)(*v14 + 2512);
          v98 = (unint64_t)v265;
          v99 = *(_QWORD *)(16 * (*v265 & 0xFFFFFFFE) + 0x28);
          if ((v263 & 0x20) != 0)
            v98 = (unint64_t)v264;
          v100 = v9;
          if (BYTE3(v266[1]) != 1)
            goto LABEL_111;
          if ((v98 & 0xFFFE000000000002) != 0)
            goto LABEL_300;
          v101 = *(unsigned int *)(16 * (*(_DWORD *)v98 & 0xFFFFFFFE) + 0x4C);
          v102 = *(_DWORD *)(16 * (*(_DWORD *)v98 & 0xFFFFFFFE) + 0x4C) != 0;
          v103 = 16 * v101;
          if ((_DWORD)v101)
            v104 = v269 == (int8x16_t **)v103;
          else
            v104 = 1;
          if (!v104)
          {
            do
            {
              v103 = *(_QWORD *)(v103 + 16);
              v102 = v103 != 0;
            }
            while ((int8x16_t **)v103 != v269 && v103 != 0);
          }
          if (!v102)
          {
LABEL_300:
            __dst = (JSC::VM *)*((_QWORD *)v8 + 7);
            v106 = v14;
            v107 = JSC::throwDOMAttributeGetterTypeError(v99, &__dst, v269, v97);
          }
          else
          {
LABEL_111:
            v106 = v14;
            v107 = v261(v99);
          }
          v14 = v106;
          v65 = v107;
          v9 = v100;
        }
        goto LABEL_76;
      }
LABEL_34:
      if ((*v16 & 0x20) != 0)
      {
        v49 = v14;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v20, v19, v15, (uint64_t)&v261);
        v14 = v49;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_74;
      }
      v18 = *(_QWORD *)(v22 + 48);
      if (!v18)
        v18 = *(_QWORD *)(v20 + 16);
      if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) < 0x17u)
      {
        if (!v15)
          goto LABEL_72;
        v51 = *(_DWORD *)(v15 + 16);
        if ((v51 & 0x20) != 0)
          goto LABEL_72;
        v52 = *(_WORD **)(v15 + 8);
        v53 = *(unsigned int *)(v15 + 4);
        if ((v51 & 4) == 0)
        {
          if ((_DWORD)v53)
          {
            v54 = (unsigned __int16)*v52 - 48;
            if (v54 <= 9 && (*v52 != 48 || v53 <= 1))
            {
              v60 = v52 + 1;
              v61 = v53 - 1;
              while (v61)
              {
                if (v54 > 0x19999999)
                  goto LABEL_48;
                v62 = *v60 - 48;
                if (v62 > 9)
                  goto LABEL_48;
                v55 = 0;
                LOBYTE(v53) = 0;
                v56 = 0;
                v63 = __CFADD__(v62, 10 * v54);
                v54 = v62 + 10 * v54;
                ++v60;
                --v61;
                if (v63)
                  goto LABEL_71;
              }
              v56 = v54 & 0xFFFFFF00;
              v55 = 0x100000000;
              if (v54 == -1)
              {
                v55 = 0;
                LOBYTE(v53) = 0;
              }
              else
              {
                LOBYTE(v53) = v54;
              }
              if (v54 == -1)
                v56 = 0;
LABEL_71:
              v64 = v53;
              if ((v55 & 0x100000000) == 0)
                goto LABEL_72;
LABEL_306:
              v207 = v56 | v64;
              v208 = *((_QWORD *)v8 + 7);
              v259 = (JSC::VMTraps *)(v208 + 64);
              v65 = 10;
              while (2)
              {
                v209 = v14;
                v210 = 16 * (*(_DWORD *)v13 & 0xFFFFFFFE);
                v211 = (*(uint64_t (**)(uint64_t, JSC *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v210 + 0x4C) + 0x70))(v13, v8, v207, &v261);
                if (*(_DWORD *)(v208 + 80))
                {
                  v214 = *(_DWORD *)(v208 + 80);
                  if ((v214 & 0x27) != 0 && (v214 & 0x20) == 0)
                    JSC::VMTraps::handleTraps(v259, 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
                  if (*(_QWORD *)(v208 + 16))
                  {
LABEL_415:
                    v14 = v209;
                    goto LABEL_76;
                  }
                }
                v14 = v209;
                if ((v211 & 1) != 0)
                  goto LABEL_74;
                if (BYTE2(v266[1]) == 3)
                {
                  if (BYTE4(v266[1]))
                    goto LABEL_415;
                  v212 = *(unsigned __int8 *)(v13 + 5);
                  v14 = v209;
                  if (v212 != 61)
                  {
LABEL_311:
                    if ((v212 - 39) <= 0xA)
                    {
                      if ((*(_BYTE *)(v13 + 40) & 7u) > 2)
                      {
                        LOBYTE(__dst) = 0;
                        LOBYTE(v272) = 0;
                        v216 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v13, (uint64_t)&__dst, (uint64_t)a3, a4, a5, a6, a7, a8);
                        v215 = v217 ? v216 : 0;
                      }
                      else
                      {
                        v215 = *(_QWORD *)(v13 + 24);
                      }
                      v14 = v209;
                      if (v215 <= v207)
                        goto LABEL_76;
                    }
                  }
                }
                else
                {
                  v212 = *(unsigned __int8 *)(v13 + 5);
                  if (v212 != 61)
                    goto LABEL_311;
                  if (BYTE2(v266[1]) == 1)
                    goto LABEL_76;
                }
                if ((*(_WORD *)(v210 + 12) & 0x800) == 0 || BYTE2(v266[1]) == 3)
                {
                  v213 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x30);
                  if (!v213)
                    v213 = *(_QWORD *)(v13 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v213 = (*(uint64_t (**)(uint64_t, JSC *))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v13 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0xB0))(v13, v8);
                  }
                  else
                  {
                    v213 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x30);
                    if (!v213)
                      v213 = *(_QWORD *)(v13 + 16);
                  }
                  if (*(_DWORD *)(v208 + 80))
                  {
                    v218 = *(_DWORD *)(v208 + 80);
                    if ((v218 & 0x27) != 0 && (v218 & 0x20) == 0)
                      JSC::VMTraps::handleTraps(v259, 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
                    v14 = v209;
                    if (*(_QWORD *)(v208 + 16))
                      goto LABEL_76;
                  }
                  else
                  {
                    v14 = v209;
                  }
                }
                if ((v213 & 0xFFFE000000000002) != 0)
                  goto LABEL_76;
                v13 = v213;
                if (*(unsigned __int8 *)(v213 + 5) <= 0x16u)
                  goto LABEL_76;
                continue;
              }
            }
LABEL_48:
            v55 = 0;
            LOBYTE(v53) = 0;
          }
          else
          {
            v55 = 0;
          }
          v56 = 0;
          goto LABEL_71;
        }
        if ((_DWORD)v53)
        {
          v205 = *(unsigned __int8 *)v52 - 48;
          if (v205 <= 9 && (v53 < 2 || *(_BYTE *)v52 != 48))
          {
            v219 = v53 - 1;
            v220 = (unsigned __int8 *)v52 + 1;
            while (v219)
            {
              if (v205 > 0x19999999)
                goto LABEL_303;
              v221 = *v220 - 48;
              if (v221 > 9)
                goto LABEL_303;
              v64 = 0;
              LOBYTE(v53) = 0;
              v206 = 0;
              v63 = __CFADD__(v221, 10 * v205);
              v205 = v221 + 10 * v205;
              --v219;
              ++v220;
              if (v63)
                goto LABEL_305;
            }
            if (v205 == -1)
              v64 = 0;
            else
              v64 = v205 & 0xFFFFFF00;
            if (v205 == -1)
              LOBYTE(v53) = 0;
            else
              LOBYTE(v53) = v205;
            if (v205 == -1)
              v206 = 0;
            else
              v206 = 0x100000000;
            goto LABEL_305;
          }
LABEL_303:
          v64 = 0;
          LOBYTE(v53) = 0;
        }
        else
        {
          v64 = 0;
        }
        v206 = 0;
LABEL_305:
        v56 = v53;
        if ((v206 & 0x100000000) == 0)
          goto LABEL_72;
        goto LABEL_306;
      }
      v16 = (_BYTE *)(v18 + 6);
      v20 = v18;
    }
    while ((*(_BYTE *)(v18 + 6) & 8) == 0);
  }
  if (!v15)
    goto LABEL_154;
  v116 = *(_DWORD *)(v15 + 16);
  if ((v116 & 0x20) != 0)
    goto LABEL_154;
  v117 = *(_WORD **)(v15 + 8);
  v118 = *(unsigned int *)(v15 + 4);
  if ((v116 & 4) == 0)
  {
    if ((_DWORD)v118)
    {
      v119 = (unsigned __int16)*v117 - 48;
      if (v119 <= 9 && (*v117 != 48 || v118 <= 1))
      {
        v125 = v117 + 1;
        v126 = v118 - 1;
        while (v126)
        {
          if (v119 > 0x19999999)
            goto LABEL_128;
          v127 = *v125 - 48;
          if (v127 > 9)
            goto LABEL_128;
          v120 = 0;
          LOBYTE(v118) = 0;
          v121 = 0;
          v63 = __CFADD__(v127, 10 * v119);
          v119 = v127 + 10 * v119;
          ++v125;
          --v126;
          if (v63)
            goto LABEL_153;
        }
        v121 = v119 & 0xFFFFFF00;
        v120 = 0x100000000;
        if (v119 == -1)
        {
          v120 = 0;
          LOBYTE(v118) = 0;
        }
        else
        {
          LOBYTE(v118) = v119;
        }
        if (v119 == -1)
          v121 = 0;
LABEL_153:
        v128 = v118;
        if ((v120 & 0x100000000) == 0)
        {
LABEL_154:
          v129 = *((_QWORD *)v8 + 7);
          v130 = (JSC::VMTraps *)(v129 + 64);
          v131 = &__s[1];
          a3 = (JSC::CallFrame *)&__s[3];
          v65 = 10;
          while (1)
          {
            a7 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
            if ((*(_BYTE *)(v18 + 6) & 8) == 0)
            {
              if ((_DWORD)v17 && (v17 & ~*(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x20)) == 0)
              {
                v132 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x58);
                if (v132)
                  goto LABEL_443;
                v133 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x40);
                if (v133 && (*(_BYTE *)(v133 + 5) == 1 || *(_DWORD *)(v133 + 80) >= 2u))
                {
                  v251 = (JSC::Structure *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE));
                  v255 = (JSC::VMTraps *)v131;
                  v134 = (JSC::VM *)v129;
                  v248 = a3;
                  v135 = v14;
                  v136 = v129;
                  v137 = v130;
                  JSC::Structure::materializePropertyTable(v251, v134, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
                  a3 = v248;
                  a7 = (uint64_t)v251;
                  v131 = (char *)v255;
                  v130 = v137;
                  v129 = v136;
                  v14 = v135;
                  if (v132)
                  {
LABEL_443:
                    if (*(_DWORD *)(v132 + 24))
                    {
                      v138 = *(_QWORD *)(v132 + 16);
                      v139 = v138 & 0xFFFFFFFFFFFFFFFELL;
                      v140 = *(unsigned int *)(v132 + 8);
                      v141 = *(_DWORD *)(v15 + 16);
                      if ((v138 & 1) != 0)
                      {
                        if ((v141 & 0x20) != 0)
                          v141 = *(_DWORD *)(v15 + 32);
                        v142 = *(_DWORD *)(v132 + 12);
                        v143 = (v141 >> 8) & *(_QWORD *)&v142;
                        v144 = *(unsigned __int8 *)(v139 + v143);
                        if (*(_BYTE *)(v139 + v143))
                        {
                          v145 = v139 + v140;
                          v146 = 1;
                          while (1)
                          {
                            v147 = *(_QWORD *)(v145 + 8 * (v144 - 1));
                            if (v15 == (v147 & 0xFFFFFFFFFFFFLL))
                              break;
                            v143 = ((_DWORD)v143 + v146) & v142;
                            v144 = *(unsigned __int8 *)(v139 + v143);
                            ++v146;
                            if (!*(_BYTE *)(v139 + v143))
                              goto LABEL_183;
                          }
                          a6 = (v147 >> 16) & 0xFF00000000 | HIBYTE(v147);
LABEL_180:
                          if ((_DWORD)a6 != -1)
                          {
                            a5 = HIDWORD(a6);
                            if ((int)a6 <= 63)
                            {
                              v192 = v18 + 16;
                              v193 = a6 << 32;
                            }
                            else
                            {
                              v192 = *(_QWORD *)(v18 + 8) - 8;
                              v193 = 0x3F00000000 - (a6 << 32);
                            }
                            a4 = *(_QWORD *)(v192 + (v193 >> 29));
                            if ((a4 & 0xFFFE000000000002) != 0)
                              goto LABEL_281;
                            v194 = *(unsigned __int8 *)(a4 + 5);
                            if (v194 == 5)
                            {
                              v195 = v129;
                              v196 = v14;
                              JSC::JSObject::fillGetterPropertySlot((unsigned int *)v18, v195, (uint64_t)&v261, a4, SHIDWORD(a6), a6);
                              v14 = v196;
                              goto LABEL_74;
                            }
                            if (v194 != 6)
                            {
LABEL_281:
                              v261 = (uint64_t (*)(unint64_t))a4;
                              v265 = (_DWORD *)v18;
                              goto LABEL_57;
                            }
                            v197 = *(_DWORD *)(a7 + 16) & 3;
                            v198 = *(_QWORD *)(a4 + 16);
                            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
                            {
                              v200 = *(int8x16_t ***)(a4 + 24);
                              v199 = *(_QWORD *)(a4 + 32);
                              v261 = *(uint64_t (**)(unint64_t))(a4 + 8);
                              v262 = v198;
                              LODWORD(v263) = HIDWORD(a6);
                              v265 = (_DWORD *)v18;
                              BYTE1(v266[1]) = 3;
                              if (v197 != 2)
                                LOBYTE(v266[1]) = 1;
                              BYTE3(v266[1]) = 1;
                              v269 = v200;
                              v270 = v199;
                              goto LABEL_74;
                            }
                            v261 = *(uint64_t (**)(unint64_t))(a4 + 8);
                            v262 = v198;
                            LODWORD(v263) = HIDWORD(a6);
                            v265 = (_DWORD *)v18;
                            BYTE1(v266[1]) = 3;
                            if (v197 == 2)
                              goto LABEL_74;
LABEL_283:
                            LOBYTE(v266[1]) = 1;
                            goto LABEL_74;
                          }
                        }
                      }
                      else
                      {
                        if ((v141 & 0x20) != 0)
                          v141 = *(_DWORD *)(v15 + 32);
                        v148 = *(_DWORD *)(v132 + 12);
                        v149 = v148 & (v141 >> 8);
                        v150 = *(_DWORD *)(v139 + 4 * v149);
                        if (v150)
                        {
                          v151 = v139 + 4 * v140;
                          v152 = 1;
                          while (1)
                          {
                            v153 = (v150 - 1);
                            if (v15 == *(_QWORD *)(v151 + 16 * v153))
                              break;
                            v149 = (v149 + v152) & v148;
                            v150 = *(_DWORD *)(v139 + 4 * v149);
                            ++v152;
                            if (!v150)
                              goto LABEL_183;
                          }
                          a6 = *(unsigned int *)(v151 + 16 * v153 + 8) | ((unint64_t)*(unsigned __int8 *)(v151 + 16 * v153 + 12) << 32);
                          goto LABEL_180;
                        }
                      }
                    }
                  }
                }
              }
LABEL_183:
              if ((*(_BYTE *)(v18 + 6) & 0x20) != 0)
              {
                v252 = a7;
                v256 = (JSC::VMTraps *)v131;
                v156 = (JSC::VM *)v129;
                v157 = a3;
                v158 = v14;
                v247 = v129;
                v159 = v130;
                v160 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v156, v15, (uint64_t)&v261);
                a7 = v252;
                v131 = (char *)v256;
                a3 = v157;
                v130 = v159;
                v129 = v247;
                v14 = v158;
                if ((v160 & 1) != 0)
                  goto LABEL_74;
              }
              goto LABEL_184;
            }
            v250 = a3;
            v253 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
            v258 = (JSC::VMTraps *)v131;
            v244 = v130;
            v245 = v15;
            v246 = v8;
            v163 = v14;
            v164 = (*(uint64_t (**)(uint64_t, JSC *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v253 + 0x4C) + 0x68))(v18, v8, v15, &v261);
            if (*(_DWORD *)(v129 + 80))
            {
              v190 = *(_DWORD *)(v129 + 80);
              if ((v190 & 0x27) != 0 && (v190 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v244, 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v129 + 16))
              {
LABEL_347:
                v14 = v163;
                goto LABEL_76;
              }
            }
            v14 = v163;
            if ((v164 & 1) != 0)
              goto LABEL_74;
            if (BYTE2(v266[1]) == 3)
            {
              if (BYTE4(v266[1]))
                goto LABEL_347;
              v165 = *(unsigned __int8 *)(v18 + 5);
              if (v165 == 61)
                goto LABEL_252;
            }
            else
            {
              v165 = *(unsigned __int8 *)(v18 + 5);
              if (v165 == 61)
              {
                v14 = v163;
                v15 = v245;
                v130 = v244;
                a3 = v250;
                a7 = v253;
                v131 = (char *)v258;
                if (BYTE2(v266[1]) == 1)
                  goto LABEL_76;
                goto LABEL_184;
              }
            }
            if (!v245)
              goto LABEL_252;
            if ((v165 - 50) < 0xFFFFFFF5)
              goto LABEL_252;
            v166 = *(_DWORD *)(v245 + 16);
            if ((v166 & 0x20) != 0)
              goto LABEL_252;
            v167 = *(unsigned int *)(v245 + 4);
            if (!(_DWORD)v167)
              goto LABEL_252;
            v168 = *(unsigned __int8 **)(v245 + 8);
            if ((v166 & 4) != 0)
            {
              v169 = *v168;
              if ((_DWORD)v167 == 1)
              {
LABEL_209:
                v14 = v163;
                v15 = v245;
                v130 = v244;
                a3 = v250;
                a7 = v253;
                v131 = (char *)v258;
                if ((v169 - 48) < 0xA)
                  goto LABEL_76;
                goto LABEL_184;
              }
              if (v169 == 45)
              {
                v169 = v168[1];
                goto LABEL_213;
              }
              if ((v169 - 48) < 0xA)
                goto LABEL_224;
              if ((_DWORD)v167 == 8)
                goto LABEL_223;
            }
            else
            {
              v169 = *(unsigned __int16 *)v168;
              if ((_DWORD)v167 == 1)
                goto LABEL_209;
              if (v169 == 45)
              {
                v169 = *((unsigned __int16 *)v168 + 1);
LABEL_213:
                if ((v169 - 48) < 0xA)
                {
                  if ((_DWORD)v167 == 2)
                    goto LABEL_347;
                  goto LABEL_224;
                }
                if ((_DWORD)v167 != 9)
                  goto LABEL_252;
LABEL_223:
                if (v169 != 73)
                  goto LABEL_252;
                goto LABEL_224;
              }
              if ((v169 - 48) < 0xA || (_DWORD)v167 == 8 && v169 == 73)
                goto LABEL_224;
            }
            if ((_DWORD)v167 != 3 || v169 != 78)
              goto LABEL_252;
LABEL_224:
            v242 = v242 & 0xFFFFFF0000000000 | v167 | ((unint64_t)((v166 >> 2) & 1) << 32);
            JSC::jsToNumber(v168, v242);
            v171 = (v170 >> 52) & 0x7FF;
            if ((_DWORD)v171 == 2047)
            {
              if ((v170 & 0xFFFFFFFFFFFFFLL) != 0)
              {
                qmemcpy(__s, "NaN", 3);
                v172 = (char *)v250;
              }
              else
              {
                if ((v170 & 0x8000000000000000) != 0)
                {
                  __s[0] = 45;
                  v178 = (char *)v258;
                }
                else
                {
                  v178 = __s;
                }
                *(_QWORD *)v178 = 0x7974696E69666E49;
                v172 = v178 + 8;
              }
              goto LABEL_238;
            }
            v173 = v170 & 0x7FFFFFFFFFFFFFFFLL;
            if ((v170 & 0x8000000000000000) != 0 && v173)
            {
              __s[0] = 45;
              v174 = (char *)v258;
            }
            else
            {
              if (!v173)
              {
                __s[0] = 48;
                v172 = (char *)v258;
                goto LABEL_238;
              }
              v174 = __s;
            }
            v175 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v170 & 0x800FFFFFFFFFFFFFLL, v171);
            v172 = WTF::dragonbox::detail::to_shortest(v175, v176, (uint64_t)v174, v177);
LABEL_238:
            *v172 = 0;
            v179 = strlen(__s);
            memcpy(&__dst, __s, v179);
            *((_BYTE *)&__dst + v179) = 0;
            v180 = *(unsigned int *)(v245 + 4);
            v181 = *(unsigned __int8 **)(v245 + 8);
            if ((*(_BYTE *)(v245 + 16) & 4) != 0)
            {
              if ((_DWORD)v180)
              {
                p_dst = &__dst;
                v187 = *(unsigned int *)(v245 + 4);
                do
                {
                  v189 = *(unsigned __int8 *)p_dst;
                  p_dst = (JSC::VM **)((char *)p_dst + 1);
                  v188 = v189;
                  if (!v189 || *v181 != v188)
                    goto LABEL_252;
                  ++v181;
                }
                while (--v187);
              }
            }
            else if ((_DWORD)v180)
            {
              v182 = &__dst;
              v183 = *(unsigned int *)(v245 + 4);
              while (1)
              {
                v185 = *(unsigned __int8 *)v182;
                v182 = (JSC::VM **)((char *)v182 + 1);
                v184 = v185;
                if (!v185 || *(unsigned __int16 *)v181 != v184)
                  break;
                v181 += 2;
                if (!--v183)
                  goto LABEL_250;
              }
LABEL_252:
              v14 = v163;
              v8 = v246;
              v15 = v245;
              v130 = v244;
              a3 = v250;
              a7 = v253;
              v131 = (char *)v258;
              goto LABEL_184;
            }
LABEL_250:
            v14 = v163;
            v8 = v246;
            v15 = v245;
            v130 = v244;
            a3 = v250;
            a7 = v253;
            v131 = (char *)v258;
            if (!*((_BYTE *)&__dst + v180))
              goto LABEL_76;
LABEL_184:
            if ((*(_WORD *)(a7 + 12) & 0x800) == 0)
            {
              v154 = *(_DWORD *)v18;
LABEL_186:
              v155 = *(_QWORD *)(16 * (v154 & 0xFFFFFFFE) + 0x30);
              if (!v155)
                v155 = *(_QWORD *)(v18 + 16);
              goto LABEL_188;
            }
            v154 = *(_DWORD *)v18;
            if (BYTE2(v266[1]) == 3)
              goto LABEL_186;
            v249 = a3;
            v257 = (JSC::VMTraps *)v131;
            v243 = v130;
            v161 = v14;
            v162 = 16 * (v154 & 0xFFFFFFFE);
            if ((*(_WORD *)(v162 + 12) & 0x800) != 0)
            {
              v155 = (*(uint64_t (**)(uint64_t, JSC *))(16 * *(unsigned int *)(v162 + 76) + 0xB0))(v18, v8);
            }
            else
            {
              v155 = *(_QWORD *)(v162 + 48);
              if (!v155)
                v155 = *(_QWORD *)(v18 + 16);
            }
            if (*(_DWORD *)(v129 + 80))
            {
              v191 = *(_DWORD *)(v129 + 80);
              if ((v191 & 0x27) != 0 && (v191 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v243, 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
              v14 = v161;
              v130 = v243;
              v131 = (char *)v257;
              a3 = v249;
              if (*(_QWORD *)(v129 + 16))
                goto LABEL_76;
            }
            else
            {
              v14 = v161;
              v130 = v243;
              v131 = (char *)v257;
              a3 = v249;
            }
LABEL_188:
            if ((v155 & 0xFFFE000000000002) == 0)
            {
              v18 = v155;
              if (*(unsigned __int8 *)(v155 + 5) > 0x16u)
                continue;
            }
            goto LABEL_76;
          }
        }
        goto LABEL_372;
      }
LABEL_128:
      v120 = 0;
      LOBYTE(v118) = 0;
    }
    else
    {
      v120 = 0;
    }
    v121 = 0;
    goto LABEL_153;
  }
  if (!(_DWORD)v118)
  {
    v128 = 0;
    goto LABEL_370;
  }
  v222 = *(unsigned __int8 *)v117 - 48;
  if (v222 > 9 || (v118 >= 2 ? (v238 = *(_BYTE *)v117 == 48) : (v238 = 0), v238))
  {
LABEL_369:
    v128 = 0;
    LOBYTE(v118) = 0;
LABEL_370:
    v223 = 0;
    goto LABEL_371;
  }
  v239 = v118 - 1;
  v240 = (unsigned __int8 *)v117 + 1;
  while (v239)
  {
    if (v222 > 0x19999999)
      goto LABEL_369;
    v241 = *v240 - 48;
    if (v241 > 9)
      goto LABEL_369;
    v128 = 0;
    LOBYTE(v118) = 0;
    v223 = 0;
    v63 = __CFADD__(v241, 10 * v222);
    v222 = v241 + 10 * v222;
    --v239;
    ++v240;
    if (v63)
      goto LABEL_371;
  }
  if (v222 == -1)
    v128 = 0;
  else
    v128 = v222 & 0xFFFFFF00;
  if (v222 == -1)
    LOBYTE(v118) = 0;
  else
    LOBYTE(v118) = v222;
  if (v222 == -1)
    v223 = 0;
  else
    v223 = 0x100000000;
LABEL_371:
  v121 = v118;
  if ((v223 & 0x100000000) == 0)
    goto LABEL_154;
LABEL_372:
  v224 = v121 | v128;
  v225 = *((_QWORD *)v8 + 7);
  v260 = (JSC::VMTraps *)(v225 + 64);
  v65 = 10;
  while (1)
  {
    v209 = v14;
    v226 = 16 * (*(_DWORD *)v13 & 0xFFFFFFFE);
    v227 = (*(uint64_t (**)(uint64_t, JSC *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v226 + 0x4C) + 0x70))(v13, v8, v224, &v261);
    v228 = v227;
    if (*(_DWORD *)(v225 + 80))
      break;
    v14 = v209;
    if ((v227 & 1) != 0)
      goto LABEL_74;
LABEL_375:
    if (BYTE2(v266[1]) == 3)
    {
      if (BYTE4(v266[1]))
        goto LABEL_415;
      v229 = *(unsigned __int8 *)(v13 + 5);
      if (v229 == 61)
        goto LABEL_378;
    }
    else
    {
      v229 = *(unsigned __int8 *)(v13 + 5);
      if (v229 == 61)
      {
        if (BYTE2(v266[1]) == 1)
          goto LABEL_415;
        goto LABEL_378;
      }
    }
    if ((v229 - 39) <= 0xA)
    {
      if ((*(_BYTE *)(v13 + 40) & 7u) > 2)
      {
        LOBYTE(__dst) = 0;
        LOBYTE(v272) = 0;
        v236 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v13, (uint64_t)&__dst, (uint64_t)a3, a4, a5, a6, a7, a8);
        v235 = v237 ? v236 : 0;
      }
      else
      {
        v235 = *(_QWORD *)(v13 + 24);
      }
      if (v235 <= v224)
        goto LABEL_415;
    }
LABEL_378:
    if ((*(_WORD *)(v226 + 12) & 0x800) == 0 || BYTE2(v266[1]) == 3)
    {
      v230 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x30);
      if (!v230)
        v230 = *(_QWORD *)(v13 + 16);
    }
    else
    {
      if ((*(_WORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v230 = (*(uint64_t (**)(uint64_t, JSC *))(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C)
                                                         + 0xB0))(v13, v8);
      }
      else
      {
        v230 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x30);
        if (!v230)
          v230 = *(_QWORD *)(v13 + 16);
      }
      if (*(_DWORD *)(v225 + 80))
      {
        v234 = *(_DWORD *)(v225 + 80);
        if ((v234 & 0x27) != 0 && (v234 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v260, 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v225 + 16))
          goto LABEL_415;
      }
    }
    if ((v230 & 0xFFFE000000000002) != 0)
      goto LABEL_415;
    v13 = v230;
    v14 = v209;
    if (*(unsigned __int8 *)(v230 + 5) <= 0x16u)
      goto LABEL_76;
  }
  v231 = *(_DWORD *)(v225 + 80);
  if ((v231 & 0x27) != 0 && (v231 & 0x20) == 0)
    JSC::VMTraps::handleTraps(v260, 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  v232 = *(_QWORD *)(v225 + 16);
  if (v232)
    v233 = 1;
  else
    v233 = v228;
  if ((v233 & 1) == 0)
    goto LABEL_375;
  v14 = v209;
  if (!v232)
    goto LABEL_74;
LABEL_72:
  v65 = 10;
LABEL_76:
  if (*(_DWORD *)(v9 + 80))
  {
    v123 = *(_DWORD *)(v9 + 80);
    if ((v123 & 0x27) != 0 && (v123 & 0x20) == 0)
    {
      v201 = (JSC::VMTraps *)(v9 + 64);
      v202 = v8;
      v203 = v9;
      v204 = v14;
      JSC::VMTraps::handleTraps(v201, 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v14 = v204;
      v9 = v203;
      v8 = v202;
    }
    if (*(_QWORD *)(v9 + 16))
    {
      result = 0;
      goto LABEL_85;
    }
  }
  if ((v65 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(__dst) = 0;
LABEL_90:
    v73 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v73 = 0xA00000002;
    *(_QWORD *)(v73 + 8) = "Type error";
    *(_DWORD *)(v73 + 16) = 4;
    *(_QWORD *)__s = v73;
    TypeError = JSC::createTypeError((unint64_t)v8, (WTF::StringImpl **)__s, v74);
    v83 = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = 0;
    if (v83)
    {
      if (*(_DWORD *)v83 == 2)
      {
        WTF::StringImpl::~StringImpl(v83, v75, v76, v77, v78, v79, v80, v81);
        WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
      }
      else
      {
        *(_DWORD *)v83 -= 2;
      }
    }
    result = JSC::VM::throwException((JSC::VM *)v9, v8, TypeError, v77, v78, v79, v80, v81);
    goto LABEL_85;
  }
  if (*(_BYTE *)(v65 + 5) != 26)
  {
    v112 = v8;
    v113 = v9;
    v114 = v14;
    (*(void (**)(JSC::VM **__return_ptr, uint64_t))(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE)
                                                                              + 0x4C)
                                                            + 0x38))(&__dst, v65);
    v14 = v114;
    v9 = v113;
    v8 = v112;
    if ((_BYTE)__dst)
      goto LABEL_84;
    goto LABEL_90;
  }
  v69 = *(_QWORD *)(v65 + 24);
  if ((v69 & 1) != 0)
    v69 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v69 + 5) == 8)
  {
    LOBYTE(__dst) = 1;
    v272 = *(_QWORD *)(v69 + 40);
    LOBYTE(v273) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE)
                                                                              + 0x4C));
  }
  else
  {
    LOBYTE(__dst) = 2;
    v70 = *(_QWORD *)(v65 + 16);
    v272 = v69;
    v273 = v70;
  }
LABEL_84:
  result = JSC::call((uint64_t *)v8, v65, (unsigned __int8 *)&__dst, v10, v14[1], a6, a7, a8);
LABEL_85:
  if (v268)
  {
    v72 = *(_DWORD *)(v267 + 4);
    if (!v72)
    {
      __break(0xC471u);
      JUMPOUT(0x198B574A8);
    }
    *(_DWORD *)(v267 + 4) = v72 - 1;
  }
  return result;
}

unint64_t JSC::objectProtoFuncValueOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  unsigned int v10;
  unint64_t v11;

  result = *((_QWORD *)a2 + 5);
  if ((result & 0xFFFE000000000002) != 0)
    goto LABEL_7;
  v10 = *(unsigned __int8 *)(result + 5);
  if (v10 - 51 < 6)
  {
    result = 10;
LABEL_7:
    v11 = result;
    return JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v11, this, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  if (v10 <= 0x16)
    return JSC::JSCell::toObjectSlow((JSC::JSCell *)result, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
  return result;
}

uint64_t JSC::objectProtoFuncHasOwnProperty(JSC *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t (*v26)(unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t);
  JSC::VM *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  _QWORD *v54;
  uint64_t v55;
  WTF::StringImpl **v56;
  WTF::StringImpl **v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unsigned int v74;
  int v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  _DWORD *v82;
  WTF::StringImpl *v83;
  _QWORD *v84;
  uint64_t v85;
  WTF::StringImpl **v86;
  WTF::StringImpl **v87;
  WTF::StringImpl *v88;
  int v89;
  _BYTE *v90;
  uint64_t v91;
  int v92;
  _BYTE *v93;
  uint64_t v94;
  unsigned int v95;
  BOOL v96;
  uint64_t v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  int v105;
  unsigned __int16 *v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  unsigned __int16 *v110;
  uint64_t v111;
  unsigned int v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  JSC::VM *v121;
  unint64_t NotAnObjectError;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int OwnPropertySlotByIndex;
  int v151;
  int v152;
  int v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned __int8 *v187;
  uint64_t v188;
  unsigned int v189;
  unsigned __int8 *v190;
  uint64_t v191;
  unsigned int v192;
  unsigned __int8 *v193;
  WTF::StringImpl *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  int v200;
  char v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  uint64_t v205;

  v9 = *((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11 = 10;
    goto LABEL_50;
  }
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFFFE000000000002) != 0)
  {
LABEL_50:
    v193 = (unsigned __int8 *)v11;
    if (*(_DWORD *)(v9 + 80))
    {
      v152 = *(_DWORD *)(v9 + 80);
      if ((v152 & 0x27) != 0 && (v152 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v9 + 16))
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 8);
        if (!v12)
          goto LABEL_8;
        goto LABEL_6;
      }
    }
    if ((v11 & 0xFFFE000000000002) == 0)
    {
      v47 = *(unsigned __int8 *)(v11 + 5);
      if (v47 == 2)
      {
LABEL_53:
        if (*(_DWORD *)(v9 + 80))
        {
          v153 = *(_DWORD *)(v9 + 80);
          if ((v153 & 0x27) != 0 && (v153 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v9 + 16))
          {
            v12 = 0;
            goto LABEL_8;
          }
        }
        v12 = *(_QWORD *)(v11 + 8);
        v48 = *((_QWORD *)this + 7);
        if ((v12 & 1) == 0)
        {
          if ((*(_BYTE *)(v12 + 16) & 0x10) == 0)
          {
            v49 = *(WTF::StringImpl **)(v48 + 64768);
            if (v49 != (WTF::StringImpl *)v12)
            {
              *(_DWORD *)v12 += 2;
              *(_QWORD *)(v48 + 64768) = v12;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                {
                  WTF::StringImpl::~StringImpl(v49, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
                }
                else
                {
                  *(_DWORD *)v49 -= 2;
                }
              }
              v50 = *(WTF::StringImpl **)(v11 + 8);
              if (v50)
              {
                if ((*((_BYTE *)v50 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v50 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v50, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&v194);
                  v50 = v194;
                }
              }
              v51 = *(WTF::StringImpl **)(v48 + 64776);
              *(_QWORD *)(v48 + 64776) = v50;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                {
                  WTF::StringImpl::~StringImpl(v51, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
                }
                else
                {
                  *(_DWORD *)v51 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
            {
              v52 = *(WTF::StringImpl **)(v48 + 64776);
              *(_DWORD *)v52 += 2;
              v194 = v52;
              __dmb(0xAu);
              v53 = *(WTF::StringImpl **)(v11 + 8);
              *(_QWORD *)(v11 + 8) = v194;
              v194 = v53;
              v54 = (_QWORD *)(v48 + 808);
              v55 = *(unsigned int *)(v48 + 820);
              if ((_DWORD)v55 == *(_DWORD *)(v48 + 816))
              {
                v57 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v54, v55 + 1, (unint64_t)&v194);
                v55 = *(unsigned int *)(v48 + 820);
                v56 = (WTF::StringImpl **)(*(_QWORD *)(v48 + 808) + 8 * v55);
                v53 = *v57;
              }
              else
              {
                v56 = (WTF::StringImpl **)(*v54 + 8 * v55);
                v57 = &v194;
              }
              *v57 = 0;
              *v56 = v53;
              *(_DWORD *)(v48 + 820) = v55 + 1;
              v58 = v194;
              v194 = 0;
              if (v58)
              {
                if (*(_DWORD *)v58 == 2)
                {
                  WTF::StringImpl::~StringImpl(v58, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
                }
                else
                {
                  *(_DWORD *)v58 -= 2;
                }
              }
            }
            v12 = *(_QWORD *)(v48 + 64776);
          }
          goto LABEL_6;
        }
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v11, this);
        if (*(_DWORD *)(v48 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v48, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_220;
        }
        goto LABEL_70;
      }
      if (v47 == 4)
      {
        v12 = *(_QWORD *)(v11 + 8);
        v61 = *(_DWORD *)v12;
        *(_DWORD *)v12 += 4;
        v13 = v61 + 2;
        if (v13)
          goto LABEL_7;
        v59 = (WTF::StringImpl *)v12;
LABEL_83:
        WTF::StringImpl::~StringImpl(v59, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
        goto LABEL_8;
      }
    }
    v11 = (uint64_t)JSC::JSValue::toStringSlowCase(&v193, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_53;
  }
  if (*(_BYTE *)(v11 + 5) != 2)
  {
    v11 = JSC::JSCell::toPrimitive(*((_QWORD *)a2 + 6), (JSC::VM **)this, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    goto LABEL_50;
  }
  v12 = *(_QWORD *)(v11 + 8);
  if ((v12 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString(*((JSC::JSRopeString **)a2 + 6), this);
    if (*(_DWORD *)(v9 + 80))
    {
      v170 = *(_DWORD *)(v9 + 80);
      if ((v170 & 0x27) != 0 && (v170 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v9 + 16))
      {
LABEL_220:
        v12 = 0;
        v59 = v194;
        v194 = 0;
        if (!v59)
          goto LABEL_8;
LABEL_72:
        if (*(_DWORD *)v59 != 2)
        {
          *(_DWORD *)v59 -= 2;
          goto LABEL_8;
        }
        goto LABEL_83;
      }
    }
LABEL_70:
    v12 = (unint64_t)v194;
    if (!v194)
      goto LABEL_8;
    *(_DWORD *)v194 += 2;
    v194 = 0;
    v59 = (WTF::StringImpl *)v12;
    goto LABEL_72;
  }
  if ((*(_BYTE *)(v12 + 16) & 0x10) == 0)
  {
    v79 = *(WTF::StringImpl **)(v9 + 64768);
    if (v79 != (WTF::StringImpl *)v12)
    {
      *(_DWORD *)v12 += 2;
      *(_QWORD *)(v9 + 64768) = v12;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2)
        {
          WTF::StringImpl::~StringImpl(v79, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
        }
        else
        {
          *(_DWORD *)v79 -= 2;
        }
      }
      v80 = *(WTF::StringImpl **)(v11 + 8);
      if (v80)
      {
        if ((*((_BYTE *)v80 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v80 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v80, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (WTF *)&v194);
          v80 = v194;
        }
      }
      v81 = *(WTF::StringImpl **)(v9 + 64776);
      *(_QWORD *)(v9 + 64776) = v80;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
        {
          WTF::StringImpl::~StringImpl(v81, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
        }
        else
        {
          *(_DWORD *)v81 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
    {
      v82 = *(_DWORD **)(v9 + 64776);
      *v82 += 2;
      __dmb(0xAu);
      v83 = *(WTF::StringImpl **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = v82;
      v194 = v83;
      v84 = (_QWORD *)(v9 + 808);
      v85 = *(unsigned int *)(v9 + 820);
      if ((_DWORD)v85 == *(_DWORD *)(v9 + 816))
      {
        v87 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v85 + 1, (unint64_t)&v194);
        v85 = *(unsigned int *)(v9 + 820);
        v86 = (WTF::StringImpl **)(*(_QWORD *)(v9 + 808) + 8 * v85);
        v83 = *v87;
      }
      else
      {
        v86 = (WTF::StringImpl **)(*v84 + 8 * v85);
        v87 = &v194;
      }
      *v87 = 0;
      *v86 = v83;
      *(_DWORD *)(v9 + 820) = v85 + 1;
      v88 = v194;
      v194 = 0;
      if (v88)
      {
        if (*(_DWORD *)v88 == 2)
        {
          WTF::StringImpl::~StringImpl(v88, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
        }
        else
        {
          *(_DWORD *)v88 -= 2;
        }
      }
    }
    v12 = *(_QWORD *)(v9 + 64776);
  }
LABEL_6:
  v13 = *(_DWORD *)v12 + 2;
LABEL_7:
  *(_DWORD *)v12 = v13;
LABEL_8:
  if (*(_DWORD *)(v9 + 80))
  {
    v140 = *(_DWORD *)(v9 + 80);
    if ((v140 & 0x27) != 0 && (v140 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_188;
  }
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    if (v10 >> 49)
    {
      v39 = JSC::constructNumber((uint64_t)this, (JSC::VM *)v10, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      if ((v10 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
LABEL_177:
        v121 = (JSC::VM *)*((_QWORD *)this + 7);
        NotAnObjectError = JSC::createNotAnObjectError((unint64_t)this, v10);
        JSC::VM::throwException(v121, this, NotAnObjectError, v123, v124, v125, v126, v127);
        v10 = 0;
        goto LABEL_12;
      }
      v39 = JSC::constructBooleanFromImmediateBoolean((uint64_t)this, v10, (JSC::Structure *)a3, a4, a5, a6, a7, a8);
    }
LABEL_42:
    v10 = v39;
    goto LABEL_12;
  }
  v14 = *(unsigned __int8 *)(v10 + 5);
  if (v14 - 51 < 6)
  {
    v10 = 10;
    goto LABEL_177;
  }
  if (v14 <= 0x16)
  {
    v39 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v10, (JSC::SymbolObject **)this, a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
    goto LABEL_42;
  }
LABEL_12:
  if (*(_DWORD *)(v9 + 80))
  {
    v141 = *(_DWORD *)(v9 + 80);
    if ((v141 & 0x27) != 0 && (v141 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
    {
LABEL_188:
      v23 = 0;
      goto LABEL_23;
    }
  }
  v15 = *((_QWORD *)this + 7);
  v16 = *(_DWORD *)v10;
  a2 = (JSC::JSGlobalObject *)(v15 + 93072);
  v17 = *(_QWORD *)(v15 + 93072);
  if ((v17 & 1) != 0)
    v17 = (*(uint64_t (**)(_QWORD))(v17 & 0xFFFFFFFFFFFFFFFCLL))(*((_QWORD *)this + 7));
  v18 = v16 & 0xFFFFFFFE;
  v19 = *(_DWORD *)(v12 + 16);
  if (v19 < 0x100)
    LOWORD(v20) = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v12);
  else
    v20 = v19 >> 8;
  v21 = ((_WORD)v20 + (_WORD)v18) & 0x7FF;
  if (*(_DWORD *)(v17 + 16 * v21 + 8) != v18 || *(_QWORD *)(v17 + 16 * v21) != v12)
  {
    v196 = 0xFFFFFFFF00000000;
    v200 = 0x20000;
    v198 = 0;
    v199 = 0;
    v197 = v10;
    v201 = 0;
    LOBYTE(v202) = 0;
    v203 = 0;
    v204 = 0;
    v205 = 0;
    v25 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
    v26 = *(uint64_t (**)(unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(16 * *(unsigned int *)(v25 + 0x4C) + 0x68);
    if (v26 != JSC::JSObject::getOwnPropertySlot)
    {
      OwnPropertySlotByIndex = ((uint64_t (*)(unint64_t, JSC *, unint64_t, WTF::StringImpl **))v26)(v10, this, v12, &v194);
LABEL_263:
      v22 = OwnPropertySlotByIndex;
      goto LABEL_127;
    }
    v27 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((v12 >> 4)
      && ((v12 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x20)) == 0)
    {
      v28 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x58);
      if (v28
        || (v60 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x40)) != 0
        && (*(_BYTE *)(v60 + 5) == 1 || *(_DWORD *)(v60 + 80) >= 2u)
        && (JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)), *((JSC::VM **)this + 7), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v28))
      {
        if (*(_DWORD *)(v28 + 24))
        {
          v29 = *(_QWORD *)(v28 + 16);
          v30 = v29 & 0xFFFFFFFFFFFFFFFELL;
          v31 = *(unsigned int *)(v28 + 8);
          v32 = *(_DWORD *)(v12 + 16);
          if ((v29 & 1) != 0)
          {
            if ((v32 & 0x20) != 0)
              v32 = *(_DWORD *)(v12 + 32);
            v33 = *(_DWORD *)(v28 + 12);
            v34 = (v32 >> 8) & *(_QWORD *)&v33;
            v35 = *(unsigned __int8 *)(v30 + v34);
            if (!*(_BYTE *)(v30 + v34))
              goto LABEL_120;
            v36 = v30 + v31;
            v37 = 1;
            while (1)
            {
              v38 = *(_QWORD *)(v36 + 8 * (v35 - 1));
              if (v12 == (v38 & 0xFFFFFFFFFFFFLL))
                break;
              v34 = ((_DWORD)v34 + v37) & v33;
              v35 = *(unsigned __int8 *)(v30 + v34);
              ++v37;
              if (!*(_BYTE *)(v30 + v34))
                goto LABEL_120;
            }
            a6 = (v38 >> 16) & 0xFF00000000 | HIBYTE(v38);
          }
          else
          {
            if ((v32 & 0x20) != 0)
              v32 = *(_DWORD *)(v12 + 32);
            v73 = *(_DWORD *)(v28 + 12);
            v74 = v73 & (v32 >> 8);
            v75 = *(_DWORD *)(v30 + 4 * v74);
            if (!v75)
              goto LABEL_120;
            v76 = v30 + 4 * v31;
            v77 = 1;
            while (1)
            {
              v78 = (v75 - 1);
              if (v12 == *(_QWORD *)(v76 + 16 * v78))
                break;
              v74 = (v74 + v77) & v73;
              v75 = *(_DWORD *)(v30 + 4 * v74);
              ++v77;
              if (!v75)
                goto LABEL_120;
            }
            a6 = *(unsigned int *)(v76 + 16 * v78 + 8) | ((unint64_t)*(unsigned __int8 *)(v76 + 16 * v78 + 12) << 32);
          }
          if ((_DWORD)a6 != -1)
          {
            a5 = HIDWORD(a6);
            if ((int)a6 <= 63)
            {
              v70 = v10 + 16;
              v71 = a6 << 32;
            }
            else
            {
              v70 = *(_QWORD *)(v10 + 8) - 8;
              v71 = 0x3F00000000 - (a6 << 32);
            }
            a4 = *(_QWORD *)(v70 + (v71 >> 29));
            if ((a4 & 0xFFFE000000000002) != 0)
              goto LABEL_92;
            v72 = *(unsigned __int8 *)(a4 + 5);
            if (v72 != 5)
            {
              if (v72 == 6)
              {
                v136 = *(_DWORD *)(v25 + 16) & 3;
                v137 = *(_QWORD *)(a4 + 16);
                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
                {
                  v139 = *(_QWORD *)(a4 + 24);
                  v138 = *(_QWORD *)(a4 + 32);
                  v194 = *(WTF::StringImpl **)(a4 + 8);
                  v195 = v137;
                  LODWORD(v196) = HIDWORD(a6);
                  v198 = v10;
                  BYTE1(v200) = 3;
                  v22 = 1;
                  if (v136 != 2)
                    LOBYTE(v200) = 1;
                  HIBYTE(v200) = 1;
                  v204 = v139;
                  v205 = v138;
                }
                else
                {
                  v194 = *(WTF::StringImpl **)(a4 + 8);
                  v195 = v137;
                  LODWORD(v196) = HIDWORD(a6);
                  v198 = v10;
                  v22 = 1;
                  BYTE1(v200) = 3;
                  if (v136 != 2)
                    LOBYTE(v200) = 1;
                }
LABEL_127:
                if (*(_DWORD *)(v15 + 80))
                {
                  v151 = *(_DWORD *)(v15 + 80);
                  if ((v151 & 0x27) != 0 && (v151 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  if (*(_QWORD *)(v15 + 16))
                  {
                    v22 = 0;
                    goto LABEL_152;
                  }
                }
                if (v12)
                {
                  v92 = *(_DWORD *)(v12 + 16);
                  if ((v92 & 0x20) == 0)
                  {
                    v93 = *(_BYTE **)(v12 + 8);
                    v94 = *(unsigned int *)(v12 + 4);
                    if ((v92 & 4) != 0)
                    {
                      if (!(_DWORD)v94)
                        goto LABEL_133;
                      v95 = *v93 - 48;
                      if (v95 > 9 || v94 >= 2 && *v93 == 48)
                        goto LABEL_133;
                      v187 = v93 + 1;
                      v188 = v94 - 1;
                      while (v188)
                      {
                        if (v95 <= 0x19999999)
                        {
                          v189 = *v187 - 48;
                          if (v189 <= 9)
                          {
                            v109 = __CFADD__(v189, 10 * v95);
                            v95 = v189 + 10 * v95;
                            ++v187;
                            --v188;
                            if (!v109)
                              continue;
                          }
                        }
                        goto LABEL_133;
                      }
                    }
                    else
                    {
                      if (!(_DWORD)v94)
                        goto LABEL_133;
                      v95 = *(unsigned __int16 *)v93 - 48;
                      if (v95 > 9 || *(_WORD *)v93 == 48 && v94 > 1)
                        goto LABEL_133;
                      v106 = (unsigned __int16 *)(v93 + 2);
                      v107 = v94 - 1;
                      while (v107)
                      {
                        if (v95 <= 0x19999999)
                        {
                          v108 = *v106 - 48;
                          if (v108 <= 9)
                          {
                            v109 = __CFADD__(v108, 10 * v95);
                            v95 = v108 + 10 * v95;
                            ++v106;
                            --v107;
                            if (!v109)
                              continue;
                          }
                        }
                        goto LABEL_133;
                      }
                    }
                    if (v95 != -1)
                    {
LABEL_152:
                      if (v203)
                      {
                        v105 = *(_DWORD *)(v202 + 4);
                        if (!v105)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198B58E3CLL);
                        }
                        *(_DWORD *)(v202 + 4) = v105 - 1;
                      }
                      goto LABEL_20;
                    }
                  }
                }
LABEL_133:
                if (BYTE1(v200))
                  v96 = v200 == 1;
                else
                  v96 = 1;
                if (v96 && *(_BYTE *)(v10 + 5) != 32)
                {
                  v97 = *(_DWORD *)v10 & 0xFFFFFFFE;
                  v98 = *(unsigned __int16 *)(16 * v97 + 0xC);
                  if ((v98 & 8) == 0
                    && (*(_DWORD *)(16 * v97 + 0x10) & 3) != 2
                    && ((v98 & 0x10) == 0 || (v98 & 0x20) != 0))
                  {
                    v99 = (v98 >> 7) & 1;
                    if (BYTE1(v200))
                      LOBYTE(v99) = 0;
                    if ((v99 & 1) == 0 && (*(_DWORD *)(16 * v97 + 0x10) & 3) == 0)
                    {
                      v100 = *(_DWORD *)(v12 + 16);
                      if (v100 < 0x100)
                        LOWORD(v101) = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v12);
                      else
                        v101 = v100 >> 8;
                      v102 = ((_WORD)v101 + (_WORD)v97) & 0x7FF;
                      *(_DWORD *)v12 += 2;
                      v103 = *(WTF::StringImpl **)(v17 + 16 * v102);
                      *(_QWORD *)(v17 + 16 * v102) = v12;
                      if (v103)
                      {
                        if (*(_DWORD *)v103 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v103, a2, a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
                        }
                        else
                        {
                          *(_DWORD *)v103 -= 2;
                        }
                      }
                      v104 = v17 + 16 * v102;
                      *(_DWORD *)(v104 + 8) = v97;
                      *(_BYTE *)(v104 + 12) = v22;
                    }
                  }
                }
                goto LABEL_152;
              }
LABEL_92:
              v194 = (WTF::StringImpl *)a4;
              v198 = v10;
              v196 = __PAIR64__(a6, HIDWORD(a6));
              v22 = 1;
              LOWORD(v200) = 257;
              goto LABEL_127;
            }
            JSC::JSObject::fillGetterPropertySlot((unsigned int *)v10, (uint64_t)v27, (uint64_t)&v194, a4, SHIDWORD(a6), a6);
LABEL_174:
            v22 = 1;
            goto LABEL_127;
          }
        }
      }
    }
LABEL_120:
    if ((*(_BYTE *)(v10 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v10, v27, v12, (uint64_t)&v194) & 1) != 0)
    {
      goto LABEL_174;
    }
    if (v12)
    {
      v89 = *(_DWORD *)(v12 + 16);
      if ((v89 & 0x20) == 0)
      {
        v90 = *(_BYTE **)(v12 + 8);
        v91 = *(unsigned int *)(v12 + 4);
        if ((v89 & 4) != 0)
        {
          if (!(_DWORD)v91)
            goto LABEL_126;
          a3 = *v90 - 48;
          if (a3 > 9 || v91 >= 2 && *v90 == 48)
            goto LABEL_126;
          v190 = v90 + 1;
          v191 = v91 - 1;
          while (v191)
          {
            if (a3 > 0x19999999)
              goto LABEL_126;
            v192 = *v190 - 48;
            if (v192 > 9)
              goto LABEL_126;
            v22 = 0;
            v109 = __CFADD__(v192, 10 * a3);
            a3 = v192 + 10 * (_DWORD)a3;
            ++v190;
            --v191;
            if (v109)
              goto LABEL_127;
          }
        }
        else
        {
          if (!(_DWORD)v91)
            goto LABEL_126;
          a3 = *(unsigned __int16 *)v90 - 48;
          if (a3 > 9 || *(_WORD *)v90 == 48 && v91 > 1)
            goto LABEL_126;
          v110 = (unsigned __int16 *)(v90 + 2);
          v111 = v91 - 1;
          while (v111)
          {
            if (a3 > 0x19999999)
              goto LABEL_126;
            v112 = *v110 - 48;
            if (v112 > 9)
              goto LABEL_126;
            v22 = 0;
            v109 = __CFADD__(v112, 10 * a3);
            a3 = v112 + 10 * (_DWORD)a3;
            ++v110;
            --v111;
            if (v109)
              goto LABEL_127;
          }
        }
        if ((_DWORD)a3 != -1)
        {
          OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex(v10, (uint64_t)this, (const WTF::StringImpl *)a3, (uint64_t)&v194, a5, a6, a7, a8);
          goto LABEL_263;
        }
      }
    }
LABEL_126:
    v22 = 0;
    goto LABEL_127;
  }
  v22 = *(unsigned __int8 *)(v17 + 16 * v21 + 12) != 0;
LABEL_20:
  if (v22)
    v23 = 7;
  else
    v23 = 6;
LABEL_23:
  if (!v12)
    return v23;
  if (*(_DWORD *)v12 != 2)
  {
    *(_DWORD *)v12 -= 2;
    return v23;
  }
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, a2, a3, a4, a5, a6, a7, a8);
  v45 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v45)
  {
    pas_try_deallocate_slow_no_cache(v12, (uint64_t)&bmalloc_heap_config, 1);
    return v23;
  }
  if (v12 >> 43
    || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v12 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v12)) & 1) == 0)
  {
    if (v12 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v12 >> 24)
    {
      v40 = 0;
    }
    else
    {
      v40 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v12 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v12) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)v40 == 1)
        goto LABEL_47;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v45, v12, 1, v40, v41, v42, v43, v44);
    return v23;
  }
LABEL_47:
  v46 = *(unsigned int *)(v45 + 8000);
  if (v46 >= 0x3E7)
  {
    pas_thread_local_cache_append_deallocation_slow(v45, v12, (os_unfair_lock_s *)5, v40, v41, v42, v43, v44);
  }
  else
  {
    *(_QWORD *)(v45 + 8 * v46) = v12 | 0x5000000000000;
    *(_DWORD *)(v45 + 8000) = v46 + 1;
  }
  return v23;
}

uint64_t JSC::objectProtoFuncPropertyIsEnumerable(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned __int8 OwnPropertyDescriptor;
  uint64_t v17;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  _DWORD *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  JSC::VM *v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83[3];
  uint64_t v84;
  unsigned __int8 *v85;

  v10 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11 = 10;
    goto LABEL_22;
  }
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFFFE000000000002) != 0)
  {
LABEL_22:
    v85 = (unsigned __int8 *)v11;
    if (*(_DWORD *)(v10 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v12 = *(WTF::StringImpl **)(*(_QWORD *)(v10 + 41952) + 8);
      if (!v12)
        goto LABEL_8;
      goto LABEL_6;
    }
    if ((v11 & 0xFFFE000000000002) == 0)
    {
      v27 = *(unsigned __int8 *)(v11 + 5);
      if (v27 == 2)
        goto LABEL_25;
      if (v27 == 4)
      {
        v12 = *(WTF::StringImpl **)(v11 + 8);
        v35 = *(_DWORD *)v12;
        *(_DWORD *)v12 += 4;
        v13 = v35 + 2;
        if (v13)
          goto LABEL_7;
        v34 = v12;
LABEL_46:
        WTF::StringImpl::~StringImpl(v34, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
        goto LABEL_8;
      }
    }
    v11 = (uint64_t)JSC::JSValue::toStringSlowCase(&v85, (uint64_t)this, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_25:
    if (*(_DWORD *)(v10 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v12 = 0;
      goto LABEL_8;
    }
    v12 = *(WTF::StringImpl **)(v11 + 8);
    v28 = *((_QWORD *)this + 7);
    if ((v12 & 1) == 0)
    {
      if ((*((_BYTE *)v12 + 16) & 0x10) == 0)
      {
        if (*(WTF::StringImpl **)(v28 + 64768) != v12)
        {
          WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v28 + 64768), *(WTF::AtomStringImpl **)(v11 + 8), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          v29 = *(WTF::StringImpl **)(v11 + 8);
          if (v29)
          {
            if ((*((_BYTE *)v29 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v29 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v29, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v83);
              v29 = v83[0];
            }
          }
          v30 = *(WTF::StringImpl **)(v28 + 64776);
          *(_QWORD *)(v28 + 64776) = v29;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
            {
              WTF::StringImpl::~StringImpl(v30, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
            }
            else
            {
              *(_DWORD *)v30 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
        {
          v31 = *(_DWORD **)(v28 + 64776);
          *v31 += 2;
          __dmb(0xAu);
          v32 = *(WTF::StringImpl **)(v11 + 8);
          *(_QWORD *)(v11 + 8) = v31;
          v83[0] = v32;
          JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v28 + 192, (unint64_t)v83);
          v33 = v83[0];
          v83[0] = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
            {
              WTF::StringImpl::~StringImpl(v33, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
            }
            else
            {
              *(_DWORD *)v33 -= 2;
            }
          }
        }
        v12 = *(WTF::StringImpl **)(v28 + 64776);
      }
      goto LABEL_6;
    }
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v11, this);
    if (!*(_DWORD *)(v28 + 80))
      goto LABEL_39;
    v49 = (JSC::VM *)v28;
    goto LABEL_80;
  }
  if (*(_BYTE *)(v11 + 5) != 2)
  {
    v11 = JSC::JSCell::toPrimitive(*((_QWORD *)a2 + 6), (JSC::VM **)this, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_22;
  }
  v12 = *(WTF::StringImpl **)(v11 + 8);
  if ((v12 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString(*((JSC::JSRopeString **)a2 + 6), this);
    if (!*(_DWORD *)(v10 + 80))
      goto LABEL_39;
    v49 = (JSC::VM *)v10;
LABEL_80:
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v49, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      v12 = 0;
      v34 = v83[0];
      v83[0] = 0;
      if (!v34)
        goto LABEL_8;
LABEL_41:
      if (*(_DWORD *)v34 != 2)
      {
        *(_DWORD *)v34 -= 2;
        goto LABEL_8;
      }
      goto LABEL_46;
    }
LABEL_39:
    v12 = v83[0];
    if (!v83[0])
      goto LABEL_8;
    *(_DWORD *)v83[0] += 2;
    v83[0] = 0;
    v34 = v12;
    goto LABEL_41;
  }
  if ((*((_BYTE *)v12 + 16) & 0x10) == 0)
  {
    if (*(WTF::StringImpl **)(v10 + 64768) != v12)
    {
      WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v10 + 64768), *(WTF::AtomStringImpl **)(v11 + 8), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v44 = *(WTF::StringImpl **)(v11 + 8);
      if (v44)
      {
        if ((*((_BYTE *)v44 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v44 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v44, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v83);
          v44 = v83[0];
        }
      }
      v45 = *(WTF::StringImpl **)(v10 + 64776);
      *(_QWORD *)(v10 + 64776) = v44;
      if (v45)
      {
        if (*(_DWORD *)v45 == 2)
        {
          WTF::StringImpl::~StringImpl(v45, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
        }
        else
        {
          *(_DWORD *)v45 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
    {
      v46 = *(_DWORD **)(v10 + 64776);
      *v46 += 2;
      __dmb(0xAu);
      v47 = *(WTF::StringImpl **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = v46;
      v83[0] = v47;
      JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v10 + 192, (unint64_t)v83);
      v48 = v83[0];
      v83[0] = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
        {
          WTF::StringImpl::~StringImpl(v48, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
        }
        else
        {
          *(_DWORD *)v48 -= 2;
        }
      }
    }
    v12 = *(WTF::StringImpl **)(v10 + 64776);
  }
LABEL_6:
  v13 = *(_DWORD *)v12 + 2;
LABEL_7:
  *(_DWORD *)v12 = v13;
LABEL_8:
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    goto LABEL_68;
  }
  v14 = *((_QWORD *)a2 + 5);
  if ((v14 & 0xFFFE000000000002) != 0)
    goto LABEL_62;
  v15 = *(unsigned __int8 *)(v14 + 5);
  if (v15 - 51 < 6)
  {
    v14 = 10;
LABEL_62:
    v83[0] = (WTF::StringImpl *)v14;
    v50 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)v83, this, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_63;
  }
  if (v15 <= 0x16)
  {
    v50 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v14, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_63:
    v14 = v50;
  }
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
LABEL_68:
    v17 = 0;
    goto LABEL_16;
  }
  memset(v83, 0, sizeof(v83));
  v84 = 14;
  OwnPropertyDescriptor = JSC::JSObject::getOwnPropertyDescriptor((_DWORD *)v14, (uint64_t)this, v12, (uint64_t)v83);
  if ((OwnPropertyDescriptor & ((v84 & 4) == 0)) != 0)
    v17 = 7;
  else
    v17 = 6;
LABEL_16:
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  return v17;
}

uint64_t JSC::objectProtoFuncIsPrototypeOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::VM *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;

  if (*((_DWORD *)a2 + 8) == 1)
    return 6;
  v10 = *((_QWORD *)a2 + 6);
  if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) < 0x17u)
    return 6;
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = *((_QWORD *)a2 + 5);
  if ((v12 & 0xFFFE000000000002) != 0)
    goto LABEL_25;
  v13 = *(unsigned __int8 *)(v12 + 5);
  if (v13 - 51 < 6)
  {
    v12 = 10;
LABEL_25:
    v19 = v12;
    v18 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v19, this, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_26;
  }
  v19 = *((_QWORD *)a2 + 5);
  if (v13 <= 0x16)
  {
    v18 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v12, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_26:
    v12 = v18;
    if (!v18)
      return 0;
    if (*((_DWORD *)a2 + 8) == 1)
      v10 = 10;
    else
      v10 = *((_QWORD *)a2 + 6);
  }
  if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
  {
    v14 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) + 0xB0))();
  }
  else
  {
    v14 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
    if (!v14)
      v14 = *(_QWORD *)(v10 + 16);
  }
  if (*((_DWORD *)v11 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v15 = 6;
  if ((v14 & 0xFFFE000000000002) == 0)
  {
    while (*(unsigned __int8 *)(v14 + 5) >= 0x17u)
    {
      if (v14 == v12)
        return 7;
      if ((*(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
      {
        v16 = (*(uint64_t (**)(uint64_t, JSC *))(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)
                                                        + 0xB0))(v14, this);
      }
      else
      {
        v16 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
        if (!v16)
          v16 = *(_QWORD *)(v14 + 16);
      }
      if (*((_DWORD *)v11 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        return 0;
      }
      v14 = v16;
      if ((v16 & 0xFFFE000000000002) != 0)
        return v15;
    }
  }
  return v15;
}

uint64_t JSC::objectProtoFuncDefineGetter(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  _QWORD *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  _DWORD *v73;
  WTF::StringImpl *v74;
  _QWORD *v75;
  uint64_t v76;
  WTF::StringImpl **v77;
  WTF::StringImpl **v78;
  WTF::StringImpl *v79;
  int v80;
  int v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  WTF::StringImpl *v126[4];
  JSC::VM *v127;
  unsigned __int8 *v128;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v127 = v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0)
    goto LABEL_59;
  v12 = *(unsigned __int8 *)(v11 + 5);
  if (v12 - 51 < 6)
  {
    v11 = 10;
LABEL_59:
    v126[0] = (WTF::StringImpl *)v11;
    v45 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)v126, this, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_60;
  }
  if (v12 > 0x16)
    goto LABEL_4;
  v45 = JSC::JSCell::toObjectSlow(*((JSC::JSCell **)a2 + 5), (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_60:
  v11 = v45;
LABEL_4:
  if (*((_DWORD *)v10 + 20))
  {
    v80 = *((_DWORD *)v10 + 20);
    if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*((_QWORD *)v10 + 2))
      return 0;
  }
  v13 = *((int *)a2 + 8);
  if ((unint64_t)(v13 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    return JSC::throwTypeError((unint64_t)this, &v127, (uint64_t)"invalid getter usage", 21);
  v14 = *((_QWORD *)a2 + 7);
  if ((v14 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError((unint64_t)this, &v127, (uint64_t)"invalid getter usage", 21);
  v15 = *(unsigned __int8 *)(v14 + 5);
  if (v15 < 0x17)
    return JSC::throwTypeError((unint64_t)this, &v127, (uint64_t)"invalid getter usage", 21);
  if ((v15 & 0xFE) == 0x1A)
    goto LABEL_13;
  if ((*(_BYTE *)(v14 + 6) & 4) == 0)
    return JSC::throwTypeError((unint64_t)this, &v127, (uint64_t)"invalid getter usage", 21);
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD))(16
                                                                 * *(unsigned int *)(16
                                                                                   * (*(_DWORD *)v14 & 0xFFFFFFFE)
                                                                                   + 0x4C)
                                                                 + 0x38))(v126, *((_QWORD *)a2 + 7));
  if (!LOBYTE(v126[0]))
    return JSC::throwTypeError((unint64_t)this, &v127, (uint64_t)"invalid getter usage", 21);
  LODWORD(v13) = *((_DWORD *)a2 + 8);
LABEL_13:
  if ((_DWORD)v13 == 1)
  {
    v18 = *((_QWORD *)this + 7);
    v17 = 10;
    goto LABEL_26;
  }
  v17 = *((_QWORD *)a2 + 6);
  v18 = *((_QWORD *)this + 7);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_26;
  if (*(_BYTE *)(v17 + 5) != 2)
  {
    v17 = JSC::JSCell::toPrimitive(v17, (JSC::VM **)this, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
LABEL_26:
    v128 = (unsigned __int8 *)v17;
    if (*(_DWORD *)(v18 + 80))
    {
      v90 = *(_DWORD *)(v18 + 80);
      if ((v90 & 0x27) != 0 && (v90 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v18 + 16))
      {
        v19 = *(WTF::StringImpl **)(*(_QWORD *)(v18 + 41952) + 8);
        if (!v19)
          goto LABEL_43;
LABEL_41:
        v31 = *(_DWORD *)v19 + 2;
LABEL_42:
        *(_DWORD *)v19 = v31;
        goto LABEL_43;
      }
      v17 = (uint64_t)v128;
    }
    if ((v17 & 0xFFFE000000000002) == 0)
    {
      v29 = *(unsigned __int8 *)(v17 + 5);
      if (v29 == 2)
        goto LABEL_38;
      if (v29 == 4)
      {
        v19 = *(WTF::StringImpl **)(v17 + 8);
        v30 = *(_DWORD *)v19;
        *(_DWORD *)v19 += 4;
        v31 = v30 + 2;
        if (!v31)
        {
          v32 = v19;
LABEL_67:
          WTF::StringImpl::~StringImpl(v32, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
          goto LABEL_43;
        }
        goto LABEL_42;
      }
    }
    v17 = (uint64_t)JSC::JSValue::toStringSlowCase(&v128, (uint64_t)this, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_38:
    if (*(_DWORD *)(v18 + 80))
    {
      v91 = *(_DWORD *)(v18 + 80);
      if ((v91 & 0x27) != 0 && (v91 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v18 + 16))
      {
        v19 = 0;
        goto LABEL_43;
      }
    }
    v19 = *(WTF::StringImpl **)(v17 + 8);
    v34 = *((_QWORD *)this + 7);
    if ((v19 & 1) != 0)
    {
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v17, this);
      if (!*(_DWORD *)(v34 + 80))
        goto LABEL_63;
      v125 = *(_DWORD *)(v34 + 80);
      if ((v125 & 0x27) != 0 && (v125 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v34 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v34 + 16))
      {
        v19 = 0;
        v32 = v126[0];
        v126[0] = 0;
        if (!v32)
          goto LABEL_43;
      }
      else
      {
LABEL_63:
        v19 = v126[0];
        if (!v126[0])
          goto LABEL_43;
        *(_DWORD *)v126[0] += 2;
        v126[0] = 0;
        v32 = v19;
      }
      if (*(_DWORD *)v32 == 2)
        goto LABEL_67;
      *(_DWORD *)v32 -= 2;
LABEL_43:
      v10 = v127;
      goto LABEL_19;
    }
    if ((*((_BYTE *)v19 + 16) & 0x10) == 0)
    {
      v70 = *(WTF::StringImpl **)(v34 + 64768);
      if (v70 != v19)
      {
        *(_DWORD *)v19 += 2;
        *(_QWORD *)(v34 + 64768) = v19;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
          {
            WTF::StringImpl::~StringImpl(v70, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
          }
          else
          {
            *(_DWORD *)v70 -= 2;
          }
        }
        v71 = *(WTF::StringImpl **)(v17 + 8);
        if (v71)
        {
          if ((*((_BYTE *)v71 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v71 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v71, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v126);
            v71 = v126[0];
          }
        }
        v72 = *(WTF::StringImpl **)(v34 + 64776);
        *(_QWORD *)(v34 + 64776) = v71;
        if (v72)
        {
          if (*(_DWORD *)v72 == 2)
          {
            WTF::StringImpl::~StringImpl(v72, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
          }
          else
          {
            *(_DWORD *)v72 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v17 + 8) + 16) & 0x10) == 0)
      {
        v73 = *(_DWORD **)(v34 + 64776);
        *v73 += 2;
        __dmb(0xAu);
        v74 = *(WTF::StringImpl **)(v17 + 8);
        *(_QWORD *)(v17 + 8) = v73;
        v126[0] = v74;
        v75 = (_QWORD *)(v34 + 808);
        v76 = *(unsigned int *)(v34 + 820);
        if ((_DWORD)v76 == *(_DWORD *)(v34 + 816))
        {
          v78 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v75, v76 + 1, (unint64_t)v126);
          v76 = *(unsigned int *)(v34 + 820);
          v77 = (WTF::StringImpl **)(*(_QWORD *)(v34 + 808) + 8 * v76);
          v74 = *v78;
        }
        else
        {
          v77 = (WTF::StringImpl **)(*v75 + 8 * v76);
          v78 = v126;
        }
        *v78 = 0;
        *v77 = v74;
        *(_DWORD *)(v34 + 820) = v76 + 1;
        v79 = v126[0];
        v126[0] = 0;
        if (v79)
        {
          if (*(_DWORD *)v79 == 2)
          {
            WTF::StringImpl::~StringImpl(v79, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
          }
          else
          {
            *(_DWORD *)v79 -= 2;
          }
        }
      }
      v19 = *(WTF::StringImpl **)(v34 + 64776);
    }
    goto LABEL_41;
  }
  v19 = *(WTF::StringImpl **)(v17 + 8);
  if ((v19 & 1) == 0)
  {
    if ((*((_BYTE *)v19 + 16) & 0x10) == 0)
    {
      v35 = *(WTF::StringImpl **)(v18 + 64768);
      if (v35 != v19)
      {
        *(_DWORD *)v19 += 2;
        *(_QWORD *)(v18 + 64768) = v19;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
          {
            WTF::StringImpl::~StringImpl(v35, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
          }
          else
          {
            *(_DWORD *)v35 -= 2;
          }
        }
        v36 = *(WTF::StringImpl **)(v17 + 8);
        if (v36)
        {
          if ((*((_BYTE *)v36 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v36 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v36, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v126);
            v36 = v126[0];
          }
        }
        v37 = *(WTF::StringImpl **)(v18 + 64776);
        *(_QWORD *)(v18 + 64776) = v36;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
          {
            WTF::StringImpl::~StringImpl(v37, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
          }
          else
          {
            *(_DWORD *)v37 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v17 + 8) + 16) & 0x10) == 0)
      {
        v38 = *(_DWORD **)(v18 + 64776);
        *v38 += 2;
        __dmb(0xAu);
        v39 = *(WTF::StringImpl **)(v17 + 8);
        *(_QWORD *)(v17 + 8) = v38;
        v126[0] = v39;
        v40 = (_QWORD *)(v18 + 808);
        v41 = *(unsigned int *)(v18 + 820);
        if ((_DWORD)v41 == *(_DWORD *)(v18 + 816))
        {
          v43 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)v126);
          v41 = *(unsigned int *)(v18 + 820);
          v42 = (WTF::StringImpl **)(*(_QWORD *)(v18 + 808) + 8 * v41);
          v39 = *v43;
        }
        else
        {
          v42 = (WTF::StringImpl **)(*v40 + 8 * v41);
          v43 = v126;
        }
        *v43 = 0;
        *v42 = v39;
        *(_DWORD *)(v18 + 820) = v41 + 1;
        v44 = v126[0];
        v126[0] = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
          {
            WTF::StringImpl::~StringImpl(v44, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          }
          else
          {
            *(_DWORD *)v44 -= 2;
          }
        }
      }
      v19 = *(WTF::StringImpl **)(v18 + 64776);
    }
    *(_DWORD *)v19 += 2;
    goto LABEL_19;
  }
  JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v17, this);
  if (!*(_DWORD *)(v18 + 80))
    goto LABEL_33;
  v108 = *(_DWORD *)(v18 + 80);
  if ((v108 & 0x27) != 0 && (v108 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v18 + 16))
  {
    v19 = 0;
    v33 = v126[0];
    v126[0] = 0;
    if (!v33)
      goto LABEL_19;
  }
  else
  {
LABEL_33:
    v19 = v126[0];
    if (!v126[0])
      goto LABEL_19;
    *(_DWORD *)v126[0] += 2;
    v126[0] = 0;
    v33 = v19;
  }
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl(v33, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
  if (!*((_DWORD *)v10 + 20))
    goto LABEL_20;
LABEL_19:
  v81 = *((_DWORD *)v10 + 20);
  if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*((_QWORD *)v10 + 2))
  {
    v16 = 0;
    if (!v19)
      return v16;
  }
  else
  {
LABEL_20:
    v126[1] = (WTF::StringImpl *)v14;
    v126[2] = 0;
    v126[0] = 0;
    v126[3] = (WTF::StringImpl *)0x600000010;
    (*(void (**)(unint64_t, JSC *, WTF::StringImpl *, WTF::StringImpl **, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) + 0x90))(v11, this, v19, v126, 1);
    v16 = 10;
    if (!v19)
      return v16;
  }
  if (*(_DWORD *)v19 == 2)
  {
    WTF::StringImpl::~StringImpl(v19, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
  }
  else
  {
    *(_DWORD *)v19 -= 2;
  }
  return v16;
}

uint64_t JSC::objectProtoFuncDefineSetter(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  _DWORD *v38;
  WTF::StringImpl *v39;
  _QWORD *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  _DWORD *v73;
  WTF::StringImpl *v74;
  _QWORD *v75;
  uint64_t v76;
  WTF::StringImpl **v77;
  WTF::StringImpl **v78;
  WTF::StringImpl *v79;
  int v80;
  int v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  WTF::StringImpl *v126[4];
  JSC::VM *v127;
  unsigned __int8 *v128;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v127 = v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0)
    goto LABEL_59;
  v12 = *(unsigned __int8 *)(v11 + 5);
  if (v12 - 51 < 6)
  {
    v11 = 10;
LABEL_59:
    v126[0] = (WTF::StringImpl *)v11;
    v45 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)v126, this, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_60;
  }
  if (v12 > 0x16)
    goto LABEL_4;
  v45 = JSC::JSCell::toObjectSlow(*((JSC::JSCell **)a2 + 5), (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_60:
  v11 = v45;
LABEL_4:
  if (*((_DWORD *)v10 + 20))
  {
    v80 = *((_DWORD *)v10 + 20);
    if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*((_QWORD *)v10 + 2))
      return 0;
  }
  v13 = *((int *)a2 + 8);
  if ((unint64_t)(v13 - 3) > 0xFFFFFFFFFFFFFFFDLL)
    return JSC::throwTypeError((unint64_t)this, &v127, (uint64_t)"invalid setter usage", 21);
  v14 = *((_QWORD *)a2 + 7);
  if ((v14 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError((unint64_t)this, &v127, (uint64_t)"invalid setter usage", 21);
  v15 = *(unsigned __int8 *)(v14 + 5);
  if (v15 < 0x17)
    return JSC::throwTypeError((unint64_t)this, &v127, (uint64_t)"invalid setter usage", 21);
  if ((v15 & 0xFE) == 0x1A)
    goto LABEL_13;
  if ((*(_BYTE *)(v14 + 6) & 4) == 0)
    return JSC::throwTypeError((unint64_t)this, &v127, (uint64_t)"invalid setter usage", 21);
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD))(16
                                                                 * *(unsigned int *)(16
                                                                                   * (*(_DWORD *)v14 & 0xFFFFFFFE)
                                                                                   + 0x4C)
                                                                 + 0x38))(v126, *((_QWORD *)a2 + 7));
  if (!LOBYTE(v126[0]))
    return JSC::throwTypeError((unint64_t)this, &v127, (uint64_t)"invalid setter usage", 21);
  LODWORD(v13) = *((_DWORD *)a2 + 8);
LABEL_13:
  if ((_DWORD)v13 == 1)
  {
    v18 = *((_QWORD *)this + 7);
    v17 = 10;
    goto LABEL_26;
  }
  v17 = *((_QWORD *)a2 + 6);
  v18 = *((_QWORD *)this + 7);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_26;
  if (*(_BYTE *)(v17 + 5) != 2)
  {
    v17 = JSC::JSCell::toPrimitive(v17, (JSC::VM **)this, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
LABEL_26:
    v128 = (unsigned __int8 *)v17;
    if (*(_DWORD *)(v18 + 80))
    {
      v90 = *(_DWORD *)(v18 + 80);
      if ((v90 & 0x27) != 0 && (v90 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v18 + 16))
      {
        v19 = *(WTF::StringImpl **)(*(_QWORD *)(v18 + 41952) + 8);
        if (!v19)
          goto LABEL_43;
LABEL_41:
        v31 = *(_DWORD *)v19 + 2;
LABEL_42:
        *(_DWORD *)v19 = v31;
        goto LABEL_43;
      }
      v17 = (uint64_t)v128;
    }
    if ((v17 & 0xFFFE000000000002) == 0)
    {
      v29 = *(unsigned __int8 *)(v17 + 5);
      if (v29 == 2)
        goto LABEL_38;
      if (v29 == 4)
      {
        v19 = *(WTF::StringImpl **)(v17 + 8);
        v30 = *(_DWORD *)v19;
        *(_DWORD *)v19 += 4;
        v31 = v30 + 2;
        if (!v31)
        {
          v32 = v19;
LABEL_67:
          WTF::StringImpl::~StringImpl(v32, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
          goto LABEL_43;
        }
        goto LABEL_42;
      }
    }
    v17 = (uint64_t)JSC::JSValue::toStringSlowCase(&v128, (uint64_t)this, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_38:
    if (*(_DWORD *)(v18 + 80))
    {
      v91 = *(_DWORD *)(v18 + 80);
      if ((v91 & 0x27) != 0 && (v91 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v18 + 16))
      {
        v19 = 0;
        goto LABEL_43;
      }
    }
    v19 = *(WTF::StringImpl **)(v17 + 8);
    v34 = *((_QWORD *)this + 7);
    if ((v19 & 1) != 0)
    {
      JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v17, this);
      if (!*(_DWORD *)(v34 + 80))
        goto LABEL_63;
      v125 = *(_DWORD *)(v34 + 80);
      if ((v125 & 0x27) != 0 && (v125 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v34 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v34 + 16))
      {
        v19 = 0;
        v32 = v126[0];
        v126[0] = 0;
        if (!v32)
          goto LABEL_43;
      }
      else
      {
LABEL_63:
        v19 = v126[0];
        if (!v126[0])
          goto LABEL_43;
        *(_DWORD *)v126[0] += 2;
        v126[0] = 0;
        v32 = v19;
      }
      if (*(_DWORD *)v32 == 2)
        goto LABEL_67;
      *(_DWORD *)v32 -= 2;
LABEL_43:
      v10 = v127;
      goto LABEL_19;
    }
    if ((*((_BYTE *)v19 + 16) & 0x10) == 0)
    {
      v70 = *(WTF::StringImpl **)(v34 + 64768);
      if (v70 != v19)
      {
        *(_DWORD *)v19 += 2;
        *(_QWORD *)(v34 + 64768) = v19;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
          {
            WTF::StringImpl::~StringImpl(v70, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
          }
          else
          {
            *(_DWORD *)v70 -= 2;
          }
        }
        v71 = *(WTF::StringImpl **)(v17 + 8);
        if (v71)
        {
          if ((*((_BYTE *)v71 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v71 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v71, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v126);
            v71 = v126[0];
          }
        }
        v72 = *(WTF::StringImpl **)(v34 + 64776);
        *(_QWORD *)(v34 + 64776) = v71;
        if (v72)
        {
          if (*(_DWORD *)v72 == 2)
          {
            WTF::StringImpl::~StringImpl(v72, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
          }
          else
          {
            *(_DWORD *)v72 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v17 + 8) + 16) & 0x10) == 0)
      {
        v73 = *(_DWORD **)(v34 + 64776);
        *v73 += 2;
        __dmb(0xAu);
        v74 = *(WTF::StringImpl **)(v17 + 8);
        *(_QWORD *)(v17 + 8) = v73;
        v126[0] = v74;
        v75 = (_QWORD *)(v34 + 808);
        v76 = *(unsigned int *)(v34 + 820);
        if ((_DWORD)v76 == *(_DWORD *)(v34 + 816))
        {
          v78 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v75, v76 + 1, (unint64_t)v126);
          v76 = *(unsigned int *)(v34 + 820);
          v77 = (WTF::StringImpl **)(*(_QWORD *)(v34 + 808) + 8 * v76);
          v74 = *v78;
        }
        else
        {
          v77 = (WTF::StringImpl **)(*v75 + 8 * v76);
          v78 = v126;
        }
        *v78 = 0;
        *v77 = v74;
        *(_DWORD *)(v34 + 820) = v76 + 1;
        v79 = v126[0];
        v126[0] = 0;
        if (v79)
        {
          if (*(_DWORD *)v79 == 2)
          {
            WTF::StringImpl::~StringImpl(v79, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
          }
          else
          {
            *(_DWORD *)v79 -= 2;
          }
        }
      }
      v19 = *(WTF::StringImpl **)(v34 + 64776);
    }
    goto LABEL_41;
  }
  v19 = *(WTF::StringImpl **)(v17 + 8);
  if ((v19 & 1) == 0)
  {
    if ((*((_BYTE *)v19 + 16) & 0x10) == 0)
    {
      v35 = *(WTF::StringImpl **)(v18 + 64768);
      if (v35 != v19)
      {
        *(_DWORD *)v19 += 2;
        *(_QWORD *)(v18 + 64768) = v19;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
          {
            WTF::StringImpl::~StringImpl(v35, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
          }
          else
          {
            *(_DWORD *)v35 -= 2;
          }
        }
        v36 = *(WTF::StringImpl **)(v17 + 8);
        if (v36)
        {
          if ((*((_BYTE *)v36 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v36 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v36, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)v126);
            v36 = v126[0];
          }
        }
        v37 = *(WTF::StringImpl **)(v18 + 64776);
        *(_QWORD *)(v18 + 64776) = v36;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
          {
            WTF::StringImpl::~StringImpl(v37, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
          }
          else
          {
            *(_DWORD *)v37 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v17 + 8) + 16) & 0x10) == 0)
      {
        v38 = *(_DWORD **)(v18 + 64776);
        *v38 += 2;
        __dmb(0xAu);
        v39 = *(WTF::StringImpl **)(v17 + 8);
        *(_QWORD *)(v17 + 8) = v38;
        v126[0] = v39;
        v40 = (_QWORD *)(v18 + 808);
        v41 = *(unsigned int *)(v18 + 820);
        if ((_DWORD)v41 == *(_DWORD *)(v18 + 816))
        {
          v43 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v41 + 1, (unint64_t)v126);
          v41 = *(unsigned int *)(v18 + 820);
          v42 = (WTF::StringImpl **)(*(_QWORD *)(v18 + 808) + 8 * v41);
          v39 = *v43;
        }
        else
        {
          v42 = (WTF::StringImpl **)(*v40 + 8 * v41);
          v43 = v126;
        }
        *v43 = 0;
        *v42 = v39;
        *(_DWORD *)(v18 + 820) = v41 + 1;
        v44 = v126[0];
        v126[0] = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
          {
            WTF::StringImpl::~StringImpl(v44, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
          }
          else
          {
            *(_DWORD *)v44 -= 2;
          }
        }
      }
      v19 = *(WTF::StringImpl **)(v18 + 64776);
    }
    *(_DWORD *)v19 += 2;
    goto LABEL_19;
  }
  JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v17, this);
  if (!*(_DWORD *)(v18 + 80))
    goto LABEL_33;
  v108 = *(_DWORD *)(v18 + 80);
  if ((v108 & 0x27) != 0 && (v108 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v18 + 16))
  {
    v19 = 0;
    v33 = v126[0];
    v126[0] = 0;
    if (!v33)
      goto LABEL_19;
  }
  else
  {
LABEL_33:
    v19 = v126[0];
    if (!v126[0])
      goto LABEL_19;
    *(_DWORD *)v126[0] += 2;
    v126[0] = 0;
    v33 = v19;
  }
  if (*(_DWORD *)v33 == 2)
  {
    WTF::StringImpl::~StringImpl(v33, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
  }
  else
  {
    *(_DWORD *)v33 -= 2;
  }
  if (!*((_DWORD *)v10 + 20))
    goto LABEL_20;
LABEL_19:
  v81 = *((_DWORD *)v10 + 20);
  if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (*((_QWORD *)v10 + 2))
  {
    v16 = 0;
    if (!v19)
      return v16;
  }
  else
  {
LABEL_20:
    v126[0] = 0;
    v126[1] = 0;
    v126[2] = (WTF::StringImpl *)v14;
    v126[3] = (WTF::StringImpl *)0x600000010;
    (*(void (**)(unint64_t, JSC *, WTF::StringImpl *, WTF::StringImpl **, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) + 0x90))(v11, this, v19, v126, 1);
    v16 = 10;
    if (!v19)
      return v16;
  }
  if (*(_DWORD *)v19 == 2)
  {
    WTF::StringImpl::~StringImpl(v19, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
  }
  else
  {
    *(_DWORD *)v19 -= 2;
  }
  return v16;
}

uint64_t JSC::objectProtoFuncLookupGetter(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _DWORD *v49;
  BOOL v50;
  int v51;
  unsigned __int16 *v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  int v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  _DWORD *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  JSC::VM *v93;
  unint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  _BYTE *v104;
  uint64_t v105;
  JSC::VM *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  unsigned __int16 *v115;
  uint64_t v116;
  unsigned int v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  int v145;
  unsigned int v146;
  uint64_t v147;
  unsigned __int8 *v148;
  int v149;
  double v150;
  const unsigned __int8 *v151;
  unsigned __int8 *v152;
  uint64_t v153;
  unsigned int v154;
  JSC::VM *v155;
  uint64_t v156;
  char v157;
  int v158;
  uint64_t v159;
  unsigned __int8 *v160;
  uint64_t v161;
  unsigned int v162;
  JSC::VM *v163;
  uint64_t v164;
  int v165;
  int v166;
  int v167;
  uint64_t v168;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned __int8 *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  _DWORD *v174;
  uint64_t v175;
  int v176;
  char v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  WTF::StringImpl *v182;
  _DWORD *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;

  v186 = *MEMORY[0x1E0C80C00];
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0)
    goto LABEL_137;
  v12 = *(unsigned __int8 *)(v11 + 5);
  if (v12 - 51 < 6)
  {
    v11 = 10;
LABEL_137:
    v182 = (WTF::StringImpl *)v11;
    v94 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v182, this, a3, a4, a5, a6, a7, a8);
    goto LABEL_138;
  }
  if (v12 <= 0x16)
  {
    v94 = JSC::JSCell::toObjectSlow(*((JSC::JSCell **)a2 + 5), (JSC::SymbolObject **)this, (uint64_t)a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
LABEL_138:
    v11 = v94;
  }
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14 = *((_QWORD *)this + 7);
    v13 = 10;
    goto LABEL_92;
  }
  v13 = *((_QWORD *)a2 + 6);
  v14 = *((_QWORD *)this + 7);
  if ((v13 & 0xFFFE000000000002) != 0)
  {
LABEL_92:
    v170 = (unsigned __int8 *)v13;
    if (*(_DWORD *)(v14 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 8);
      if (!v15)
        goto LABEL_12;
      goto LABEL_10;
    }
    if ((v13 & 0xFFFE000000000002) == 0)
    {
      v67 = *(unsigned __int8 *)(v13 + 5);
      if (v67 == 2)
        goto LABEL_95;
      if (v67 == 4)
      {
        v15 = *(_QWORD *)(v13 + 8);
        v75 = *(_DWORD *)v15;
        *(_DWORD *)v15 += 4;
        v16 = v75 + 2;
        if (v16)
          goto LABEL_11;
        v74 = (WTF::StringImpl *)v15;
LABEL_116:
        WTF::StringImpl::~StringImpl(v74, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
        goto LABEL_12;
      }
    }
    v13 = (uint64_t)JSC::JSValue::toStringSlowCase(&v170, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_95:
    if (*(_DWORD *)(v14 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v15 = 0;
      goto LABEL_12;
    }
    v15 = *(_QWORD *)(v13 + 8);
    v68 = *((_QWORD *)this + 7);
    if ((v15 & 1) == 0)
    {
      if ((*(_BYTE *)(v15 + 16) & 0x10) == 0)
      {
        v14 = v68 + 64768;
        if (*(_QWORD *)(v68 + 64768) != v15)
        {
          WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v68 + 64768), *(WTF::AtomStringImpl **)(v13 + 8), (uint64_t)a3, a4, a5, a6, a7, a8);
          v69 = *(WTF::StringImpl **)(v13 + 8);
          if (v69)
          {
            if ((*((_BYTE *)v69 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v69 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v69, a3, a4, a5, a6, a7, a8, (WTF *)&v182);
              v69 = v182;
            }
          }
          v70 = *(WTF::StringImpl **)(v68 + 64776);
          *(_QWORD *)(v68 + 64776) = v69;
          if (v70)
          {
            if (*(_DWORD *)v70 == 2)
            {
              WTF::StringImpl::~StringImpl(v70, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
            }
            else
            {
              *(_DWORD *)v70 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v13 + 8) + 16) & 0x10) == 0)
        {
          v71 = *(WTF::StringImpl **)(v68 + 64776);
          *(_DWORD *)v71 += 2;
          v182 = v71;
          __dmb(0xAu);
          v72 = *(WTF::StringImpl **)(v13 + 8);
          *(_QWORD *)(v13 + 8) = v182;
          v182 = v72;
          JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v68 + 192, (unint64_t)&v182);
          v73 = v182;
          v182 = 0;
          if (v73)
          {
            if (*(_DWORD *)v73 == 2)
            {
              WTF::StringImpl::~StringImpl(v73, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
            }
            else
            {
              *(_DWORD *)v73 -= 2;
            }
          }
        }
        v15 = *(_QWORD *)(v68 + 64776);
      }
      goto LABEL_10;
    }
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v13, this);
    if (!*(_DWORD *)(v68 + 80))
      goto LABEL_109;
    v93 = (JSC::VM *)v68;
    goto LABEL_197;
  }
  if (*(_BYTE *)(v13 + 5) != 2)
  {
    v13 = JSC::JSCell::toPrimitive(*((_QWORD *)a2 + 6), (JSC::VM **)this, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    goto LABEL_92;
  }
  v15 = *(_QWORD *)(v13 + 8);
  if ((v15 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v13, this);
    if (!*(_DWORD *)(v14 + 80))
      goto LABEL_109;
    v93 = (JSC::VM *)v14;
LABEL_197:
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v93, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v15 = 0;
      v74 = v182;
      v182 = 0;
      if (!v74)
        goto LABEL_12;
LABEL_111:
      if (*(_DWORD *)v74 != 2)
      {
        *(_DWORD *)v74 -= 2;
        goto LABEL_12;
      }
      goto LABEL_116;
    }
LABEL_109:
    v15 = (unint64_t)v182;
    if (!v182)
      goto LABEL_12;
    *(_DWORD *)v182 += 2;
    v182 = 0;
    v74 = (WTF::StringImpl *)v15;
    goto LABEL_111;
  }
  if ((*(_BYTE *)(v15 + 16) & 0x10) == 0)
  {
    if (*(_QWORD *)(v14 + 64768) != v15)
    {
      WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v14 + 64768), *(WTF::AtomStringImpl **)(v13 + 8), (uint64_t)a3, a4, a5, a6, a7, a8);
      v84 = *(WTF::StringImpl **)(v13 + 8);
      if (v84)
      {
        if ((*((_BYTE *)v84 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v84 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v84, a3, a4, a5, a6, a7, a8, (WTF *)&v182);
          v84 = v182;
        }
      }
      v85 = *(WTF::StringImpl **)(v14 + 64776);
      *(_QWORD *)(v14 + 64776) = v84;
      if (v85)
      {
        if (*(_DWORD *)v85 == 2)
        {
          WTF::StringImpl::~StringImpl(v85, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
        }
        else
        {
          *(_DWORD *)v85 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v13 + 8) + 16) & 0x10) == 0)
    {
      v86 = *(_DWORD **)(v14 + 64776);
      *v86 += 2;
      __dmb(0xAu);
      v87 = *(WTF::StringImpl **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = v86;
      v182 = v87;
      JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v14 + 192, (unint64_t)&v182);
      v88 = v182;
      v182 = 0;
      if (v88)
      {
        if (*(_DWORD *)v88 == 2)
        {
          WTF::StringImpl::~StringImpl(v88, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
        }
        else
        {
          *(_DWORD *)v88 -= 2;
        }
      }
    }
    v15 = *(_QWORD *)(v14 + 64776);
  }
LABEL_10:
  v16 = *(_DWORD *)v15 + 2;
LABEL_11:
  *(_DWORD *)v15 = v16;
LABEL_12:
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v45 = 0;
    goto LABEL_71;
  }
  v172 = 0xFFFFFFFF00000000;
  v176 = 0x20000;
  v174 = 0;
  v175 = 0;
  v173 = v11;
  v177 = 0;
  LOBYTE(v178) = 0;
  v179 = 0;
  v180 = 0;
  v181 = 0;
  v17 = v15 >> 4;
  v18 = v11;
  v19 = (_BYTE *)(v11 + 6);
  if ((*(_BYTE *)(v11 + 6) & 8) == 0)
  {
    v14 = *((_QWORD *)this + 7);
    v20 = v11;
    do
    {
      v21 = *(_DWORD *)v20 & 0xFFFFFFFE;
      v22 = 16 * v21;
      if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * v21 + 0x20)) != 0)
        goto LABEL_26;
      v23 = *(_QWORD *)(16 * v21 + 0x58);
      if (!v23)
      {
        v34 = *(_QWORD *)(16 * v21 + 0x40);
        if (!v34 || *(_BYTE *)(v34 + 5) != 1 && *(_DWORD *)(v34 + 80) < 2u)
          goto LABEL_26;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v22, (JSC::VM *)v14, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v23)
          goto LABEL_26;
      }
      if (!*(_DWORD *)(v23 + 24))
        goto LABEL_26;
      v24 = *(_QWORD *)(v23 + 16);
      v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
      v26 = *(unsigned int *)(v23 + 8);
      v27 = *(_DWORD *)(v15 + 16);
      if ((v24 & 1) != 0)
      {
        if ((v27 & 0x20) != 0)
          v27 = *(_DWORD *)(v15 + 32);
        v28 = *(_DWORD *)(v23 + 12);
        v29 = (v27 >> 8) & *(_QWORD *)&v28;
        v30 = *(unsigned __int8 *)(v25 + v29);
        if (!*(_BYTE *)(v25 + v29))
          goto LABEL_26;
        v31 = v25 + v26;
        v32 = 1;
        while (1)
        {
          v33 = *(_QWORD *)(v31 + 8 * (v30 - 1));
          if (v15 == (v33 & 0xFFFFFFFFFFFFLL))
            break;
          v29 = ((_DWORD)v29 + v32) & v28;
          v30 = *(unsigned __int8 *)(v25 + v29);
          ++v32;
          if (!*(_BYTE *)(v25 + v29))
            goto LABEL_26;
        }
        a6 = (v33 >> 16) & 0xFF00000000 | HIBYTE(v33);
      }
      else
      {
        if ((v27 & 0x20) != 0)
          v27 = *(_DWORD *)(v15 + 32);
        v35 = *(_DWORD *)(v23 + 12);
        v36 = v35 & (v27 >> 8);
        v37 = *(_DWORD *)(v25 + 4 * v36);
        if (!v37)
          goto LABEL_26;
        v38 = v25 + 4 * v26;
        v39 = 1;
        while (1)
        {
          v40 = (v37 - 1);
          if (v15 == *(_QWORD *)(v38 + 16 * v40))
            break;
          v36 = (v36 + v39) & v35;
          v37 = *(_DWORD *)(v25 + 4 * v36);
          ++v39;
          if (!v37)
            goto LABEL_26;
        }
        a6 = *(unsigned int *)(v38 + 16 * v40 + 8) | ((unint64_t)*(unsigned __int8 *)(v38 + 16 * v40 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v46 = v20 + 16;
          v47 = a6 << 32;
        }
        else
        {
          v46 = *(_QWORD *)(v20 + 8) - 8;
          v47 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v46 + (v47 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v48 = *(unsigned __int8 *)(a4 + 5);
          if (v48 != 5)
          {
            if (v48 != 6)
              goto LABEL_59;
            v89 = *(_DWORD *)(v22 + 16) & 3;
            v90 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v92 = *(_QWORD *)(a4 + 24);
              v91 = *(_QWORD *)(a4 + 32);
              v170 = *(unsigned __int8 **)(a4 + 8);
              v171 = v90;
              LODWORD(v172) = HIDWORD(a6);
              v174 = (_DWORD *)v20;
              goto LABEL_130;
            }
            v170 = *(unsigned __int8 **)(a4 + 8);
            v171 = v90;
            LODWORD(v172) = HIDWORD(a6);
            v174 = (_DWORD *)v20;
LABEL_184:
            BYTE1(v176) = 3;
            if (v89 != 2)
              LOBYTE(v176) = 1;
            goto LABEL_61;
          }
          v65 = (unsigned int *)v20;
          v66 = v14;
LABEL_88:
          JSC::JSObject::fillGetterPropertySlot(v65, v66, (uint64_t)&v170, a4, a5, a6);
          goto LABEL_61;
        }
LABEL_59:
        v170 = (unsigned __int8 *)a4;
        v174 = (_DWORD *)v20;
LABEL_60:
        v172 = __PAIR64__(a6, a5);
        LOWORD(v176) = 257;
        goto LABEL_61;
      }
LABEL_26:
      if ((*v19 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v20, (JSC::VM *)v14, v15, (uint64_t)&v170) & 1) != 0)
      {
        goto LABEL_61;
      }
      v18 = *(_QWORD *)(v22 + 48);
      if (!v18)
        v18 = *(_QWORD *)(v20 + 16);
      if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) < 0x17u)
      {
        if (v15)
        {
          v41 = *(_DWORD *)(v15 + 16);
          if ((v41 & 0x20) == 0)
          {
            v42 = *(_BYTE **)(v15 + 8);
            v43 = *(unsigned int *)(v15 + 4);
            if ((v41 & 4) != 0)
            {
              if ((_DWORD)v43)
              {
                v44 = *v42 - 48;
                if (v44 <= 9 && (v43 < 2 || *v42 != 48))
                {
                  v152 = v42 + 1;
                  v153 = v43 - 1;
                  v45 = 10;
                  while (v153)
                  {
                    if (v44 <= 0x19999999)
                    {
                      v154 = *v152 - 48;
                      if (v154 <= 9)
                      {
                        v56 = __CFADD__(v154, 10 * v44);
                        v44 = v154 + 10 * (_DWORD)v44;
                        ++v152;
                        --v153;
                        if (!v56)
                          continue;
                      }
                    }
                    goto LABEL_68;
                  }
                  goto LABEL_258;
                }
              }
            }
            else if ((_DWORD)v43)
            {
              v44 = *(unsigned __int16 *)v42 - 48;
              if (v44 <= 9 && (*(_WORD *)v42 != 48 || v43 <= 1))
              {
                v53 = (unsigned __int16 *)(v42 + 2);
                v54 = v43 - 1;
                v45 = 10;
                while (v54)
                {
                  if (v44 <= 0x19999999)
                  {
                    v55 = *v53 - 48;
                    if (v55 <= 9)
                    {
                      v56 = __CFADD__(v55, 10 * v44);
                      v44 = v55 + 10 * (_DWORD)v44;
                      ++v53;
                      --v54;
                      if (!v56)
                        continue;
                    }
                  }
                  goto LABEL_68;
                }
LABEL_258:
                if ((_DWORD)v44 != -1)
                {
                  v155 = (JSC::VM *)*((_QWORD *)this + 7);
                  v45 = 10;
                  while (1)
                  {
                    v156 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
                    v157 = (*(uint64_t (**)(uint64_t, JSC *, uint64_t, unsigned __int8 **))(16 * *(unsigned int *)(v156 + 0x4C)
                                                                                                  + 0x70))(v11, this, v44, &v170);
                    if (*((_DWORD *)v155 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v155, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
                    {
                      break;
                    }
                    if ((v157 & 1) != 0)
                      goto LABEL_61;
                    if (BYTE2(v176) == 3)
                    {
                      if (v177)
                        break;
                      v158 = *(unsigned __int8 *)(v11 + 5);
                      if (v158 == 61)
                        goto LABEL_265;
                    }
                    else
                    {
                      v158 = *(unsigned __int8 *)(v11 + 5);
                      if (v158 == 61)
                      {
                        if (BYTE2(v176) == 1)
                          break;
                        goto LABEL_265;
                      }
                    }
                    if ((v158 - 39) <= 0xA
                      && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8) <= v44)
                    {
                      break;
                    }
LABEL_265:
                    if ((*(_WORD *)(v156 + 12) & 0x800) == 0 || BYTE2(v176) == 3)
                    {
                      v159 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                      if (!v159)
                        v159 = *(_QWORD *)(v11 + 16);
                    }
                    else
                    {
                      if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                      {
                        v159 = (*(uint64_t (**)(uint64_t, JSC *))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0xB0))(v11, this);
                      }
                      else
                      {
                        v159 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                        if (!v159)
                          v159 = *(_QWORD *)(v11 + 16);
                      }
                      if (*((_DWORD *)v155 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v155, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
                      {
                        break;
                      }
                    }
                    if ((v159 & 0xFFFE000000000002) == 0)
                    {
                      v11 = v159;
                      if (*(unsigned __int8 *)(v159 + 5) > 0x16u)
                        continue;
                    }
                    goto LABEL_68;
                  }
                }
              }
            }
          }
        }
LABEL_53:
        v45 = 10;
        goto LABEL_68;
      }
      v19 = (_BYTE *)(v18 + 6);
      v20 = v18;
    }
    while ((*(_BYTE *)(v18 + 6) & 8) == 0);
  }
  if (v15)
  {
    v103 = *(_DWORD *)(v15 + 16);
    if ((v103 & 0x20) == 0)
    {
      v104 = *(_BYTE **)(v15 + 8);
      v105 = *(unsigned int *)(v15 + 4);
      if ((v103 & 4) != 0)
      {
        if ((_DWORD)v105)
        {
          v14 = *v104 - 48;
          if (v14 <= 9 && (v105 < 2 || *v104 != 48))
          {
            v160 = v104 + 1;
            v161 = v105 - 1;
            while (v161)
            {
              if (v14 <= 0x19999999)
              {
                v162 = *v160 - 48;
                if (v162 <= 9)
                {
                  v56 = __CFADD__(v162, 10 * v14);
                  v14 = v162 + 10 * (_DWORD)v14;
                  ++v160;
                  --v161;
                  if (!v56)
                    continue;
                }
              }
              goto LABEL_146;
            }
LABEL_304:
            if ((_DWORD)v14 != -1)
            {
              v163 = (JSC::VM *)*((_QWORD *)this + 7);
              v45 = 10;
              while (1)
              {
                v164 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
                v165 = (*(uint64_t (**)(uint64_t, JSC *, unint64_t, unsigned __int8 **))(16 * *(unsigned int *)(v164 + 0x4C) + 0x70))(v11, this, v14, &v170);
                v166 = v165;
                if (*((_DWORD *)v163 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v163, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  if (((hasExceptionsAfterHandlingTraps | v166) & 1) != 0)
                  {
                    if (!hasExceptionsAfterHandlingTraps)
                      goto LABEL_61;
                    goto LABEL_53;
                  }
                }
                else if ((v165 & 1) != 0)
                {
                  goto LABEL_61;
                }
                if (BYTE2(v176) == 3)
                {
                  if (v177)
                    goto LABEL_53;
                  v167 = *(unsigned __int8 *)(v11 + 5);
                  if (v167 == 61)
                    goto LABEL_311;
                }
                else
                {
                  v167 = *(unsigned __int8 *)(v11 + 5);
                  if (v167 == 61)
                  {
                    if (BYTE2(v176) == 1)
                      goto LABEL_53;
                    goto LABEL_311;
                  }
                }
                if ((v167 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8) <= v14)
                {
                  goto LABEL_53;
                }
LABEL_311:
                if ((*(_WORD *)(v164 + 12) & 0x800) == 0 || BYTE2(v176) == 3)
                {
                  v168 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                  if (!v168)
                    v168 = *(_QWORD *)(v11 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v168 = (*(uint64_t (**)(uint64_t, JSC *))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0xB0))(v11, this);
                  }
                  else
                  {
                    v168 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                    if (!v168)
                      v168 = *(_QWORD *)(v11 + 16);
                  }
                  if (*((_DWORD *)v163 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v163, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_53;
                  }
                }
                if ((v168 & 0xFFFE000000000002) == 0)
                {
                  v11 = v168;
                  if (*(unsigned __int8 *)(v168 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_68;
              }
            }
          }
        }
      }
      else if ((_DWORD)v105)
      {
        v14 = *(unsigned __int16 *)v104 - 48;
        if (v14 <= 9 && (*(_WORD *)v104 != 48 || v105 <= 1))
        {
          v115 = (unsigned __int16 *)(v104 + 2);
          v116 = v105 - 1;
          while (v116)
          {
            if (v14 <= 0x19999999)
            {
              v117 = *v115 - 48;
              if (v117 <= 9)
              {
                v56 = __CFADD__(v117, 10 * v14);
                v14 = v117 + 10 * (_DWORD)v14;
                ++v115;
                --v116;
                if (!v56)
                  continue;
              }
            }
            goto LABEL_146;
          }
          goto LABEL_304;
        }
      }
    }
  }
LABEL_146:
  v106 = (JSC::VM *)*((_QWORD *)this + 7);
  v45 = 10;
  while (1)
  {
    v107 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v18 + 6) & 8) == 0)
      break;
    v144 = (*(uint64_t (**)(uint64_t, JSC *, unint64_t, unsigned __int8 **))(16
                                                                                           * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)
                                                                                           + 0x68))(v18, this, v15, &v170);
    if (*((_DWORD *)v106 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v106, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      goto LABEL_53;
    }
    if ((v144 & 1) != 0)
      goto LABEL_61;
    if (BYTE2(v176) == 3)
    {
      if (v177)
        goto LABEL_53;
      v145 = *(unsigned __int8 *)(v18 + 5);
      if (v145 != 61)
      {
LABEL_219:
        if (!v15)
          goto LABEL_153;
        if ((v145 - 50) < 0xFFFFFFF5)
          goto LABEL_153;
        v146 = *(_DWORD *)(v15 + 16);
        if ((v146 & 0x20) != 0)
          goto LABEL_153;
        v147 = *(unsigned int *)(v15 + 4);
        if (!(_DWORD)v147)
          goto LABEL_153;
        v148 = *(unsigned __int8 **)(v15 + 8);
        if ((v146 & 4) == 0)
        {
          v149 = *(unsigned __int16 *)v148;
          if ((_DWORD)v147 == 1)
            goto LABEL_225;
          if (v149 == 45)
          {
            v149 = *((unsigned __int16 *)v148 + 1);
            goto LABEL_230;
          }
          if ((v149 - 48) >= 0xA && ((_DWORD)v147 != 8 || v149 != 73))
          {
LABEL_243:
            if ((_DWORD)v147 != 3 || v149 != 78)
              goto LABEL_153;
          }
LABEL_236:
          v14 = v14 & 0xFFFFFF0000000000 | v147 | ((unint64_t)((v146 >> 2) & 1) << 32);
          JSC::jsToNumber(v148, v14);
          WTF::numberToString(&v182, v150);
          if (WTF::equal(v15, (unint64_t)&v182, v151))
            goto LABEL_53;
          goto LABEL_153;
        }
        v149 = *v148;
        if ((_DWORD)v147 == 1)
        {
LABEL_225:
          if ((v149 - 48) < 0xA)
            goto LABEL_53;
          goto LABEL_153;
        }
        if (v149 == 45)
        {
          v149 = v148[1];
LABEL_230:
          if ((v149 - 48) < 0xA)
          {
            if ((_DWORD)v147 == 2)
              goto LABEL_53;
            goto LABEL_236;
          }
          if ((_DWORD)v147 != 9)
            goto LABEL_153;
        }
        else
        {
          if ((v149 - 48) < 0xA)
            goto LABEL_236;
          if ((_DWORD)v147 != 8)
            goto LABEL_243;
        }
        if (v149 != 73)
          goto LABEL_153;
        goto LABEL_236;
      }
    }
    else
    {
      v145 = *(unsigned __int8 *)(v18 + 5);
      if (v145 != 61)
        goto LABEL_219;
      if (BYTE2(v176) == 1)
        goto LABEL_53;
    }
LABEL_153:
    if ((*(_WORD *)(v107 + 12) & 0x800) == 0)
    {
      v110 = *(_DWORD *)v18;
LABEL_155:
      v111 = *(_QWORD *)(16 * (v110 & 0xFFFFFFFE) + 0x30);
      if (!v111)
        v111 = *(_QWORD *)(v18 + 16);
      goto LABEL_157;
    }
    v110 = *(_DWORD *)v18;
    if (BYTE2(v176) == 3)
      goto LABEL_155;
    v143 = 16 * (v110 & 0xFFFFFFFE);
    if ((*(_WORD *)(v143 + 12) & 0x800) != 0)
    {
      v111 = (*(uint64_t (**)(uint64_t, JSC *))(16 * *(unsigned int *)(v143 + 76) + 0xB0))(v18, this);
    }
    else
    {
      v111 = *(_QWORD *)(v143 + 48);
      if (!v111)
        v111 = *(_QWORD *)(v18 + 16);
    }
    if (*((_DWORD *)v106 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v106, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      goto LABEL_53;
    }
LABEL_157:
    if ((v111 & 0xFFFE000000000002) == 0)
    {
      v18 = v111;
      if (*(unsigned __int8 *)(v111 + 5) > 0x16u)
        continue;
    }
    goto LABEL_68;
  }
  if (!(_DWORD)v17
    || (v17 & ~*(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE)), v106, (uint64_t)a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v108)|| (v182 = (WTF::StringImpl *)v15, v109 = JSC::PropertyTable::get(v108, (uint64_t *)&v182), a6 = v109, (_DWORD)v109 == -1))
  {
    if ((*(_BYTE *)(v18 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v106, v15, (uint64_t)&v170) & 1) != 0)
    {
      goto LABEL_61;
    }
    goto LABEL_153;
  }
  a5 = HIDWORD(v109);
  if ((int)v109 <= 63)
  {
    v112 = v18 + 16;
    v113 = v109 << 32;
  }
  else
  {
    v112 = *(_QWORD *)(v18 + 8) - 8;
    v113 = 0x3F00000000 - (v109 << 32);
  }
  a4 = *(_QWORD *)(v112 + (v113 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_165:
    v170 = (unsigned __int8 *)a4;
    v174 = (_DWORD *)v18;
    goto LABEL_60;
  }
  v114 = *(unsigned __int8 *)(a4 + 5);
  if (v114 == 5)
  {
    v65 = (unsigned int *)v18;
    v66 = (uint64_t)v106;
    goto LABEL_88;
  }
  if (v114 != 6)
    goto LABEL_165;
  v89 = *(_DWORD *)(v107 + 16) & 3;
  v134 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v170 = *(unsigned __int8 **)(a4 + 8);
    v171 = v134;
    LODWORD(v172) = HIDWORD(v109);
    v174 = (_DWORD *)v18;
    goto LABEL_184;
  }
  v92 = *(_QWORD *)(a4 + 24);
  v91 = *(_QWORD *)(a4 + 32);
  v170 = *(unsigned __int8 **)(a4 + 8);
  v171 = v134;
  LODWORD(v172) = HIDWORD(v109);
  v174 = (_DWORD *)v18;
LABEL_130:
  BYTE1(v176) = 3;
  if (v89 != 2)
    LOBYTE(v176) = 1;
  HIBYTE(v176) = 1;
  v180 = v92;
  v181 = v91;
LABEL_61:
  if (BYTE1(v176) == 2)
  {
    v49 = (_DWORD *)*((_QWORD *)v170 + 1);
    v50 = &JSC::NullGetterFunction::s_info == (char **)(16 * *(unsigned int *)(16 * (*v49 & 0xFFFFFFFE) + 0x4C));
    goto LABEL_65;
  }
  if ((v172 & 0x20) == 0)
    goto LABEL_53;
  v182 = 0;
  v183 = 0;
  v184 = 0;
  v185 = 14;
  if (!JSC::JSObject::getOwnPropertyDescriptor(v174, (uint64_t)this, (WTF::StringImpl *)v15, (uint64_t)&v182))goto LABEL_53;
  v49 = v183;
  v50 = v183 == 0;
LABEL_65:
  if (v50)
    v45 = 10;
  else
    v45 = (uint64_t)v49;
LABEL_68:
  if (v179)
  {
    v51 = *(_DWORD *)(v178 + 4);
    if (!v51)
    {
      __break(0xC471u);
      JUMPOUT(0x198B5AF24);
    }
    *(_DWORD *)(v178 + 4) = v51 - 1;
  }
LABEL_71:
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  return v45;
}

uint64_t JSC::objectProtoFuncLookupSetter(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  JSC::VM *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  _BYTE *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  int v58;
  int v59;
  WTF::StringImpl *v60;
  unint64_t *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  WTF::StringImpl *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  WTF::StringImpl *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *p_dst;
  WTF::StringImpl *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  _BYTE *v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  JSC::VMTraps *v102;
  char *v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  JSC::VM *v107;
  JSC::VMTraps *v108;
  char *v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  int v122;
  unsigned int v123;
  int v124;
  unint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  JSC::VM *v130;
  JSC::CallFrame *v131;
  JSC::VMTraps *v132;
  char *v133;
  _BYTE *v134;
  char OwnStaticPropertySlot;
  _BYTE *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  unsigned __int8 *v144;
  int v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  unint64_t v151;
  size_t v152;
  char *v153;
  char *v154;
  int v155;
  uint64_t v156;
  unsigned __int8 *v157;
  unsigned __int8 *v158;
  uint64_t v159;
  int v160;
  int v161;
  unsigned __int8 *v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int16 *v172;
  uint64_t v173;
  unsigned int v174;
  int v175;
  int v176;
  int v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned __int8 *v212;
  uint64_t v213;
  unsigned int v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  int v219;
  uint64_t v220;
  int v221;
  int v222;
  unint64_t v223;
  unint64_t v224;
  unsigned __int8 *v225;
  uint64_t v226;
  unsigned int v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  char v232;
  int v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  char v237;
  int v238;
  unint64_t v239;
  unint64_t v240;
  int v241;
  unint64_t v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  JSC::VMTraps *v252;
  JSC::VMTraps *v253;
  _BYTE *v254;
  char v255;
  JSC::Structure *v256;
  uint64_t v257;
  unsigned int *v258;
  unsigned __int8 *v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  _DWORD *v263;
  uint64_t v264;
  int v265;
  char v266;
  uint64_t v267;
  char v268;
  uint64_t v269;
  uint64_t v270;
  _DWORD *__dst;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char __s[3];
  _BYTE v276[39];

  *(_QWORD *)&v276[23] = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 7);
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0)
    goto LABEL_132;
  v12 = *(unsigned __int8 *)(v11 + 5);
  if (v12 - 51 < 6)
  {
    v11 = 10;
LABEL_132:
    __dst = (_DWORD *)v11;
    v88 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&__dst, this, a3, a4, a5, a6, a7, a8);
    goto LABEL_133;
  }
  if (v12 <= 0x16)
  {
    v88 = JSC::JSCell::toObjectSlow(*((JSC::JSCell **)a2 + 5), (JSC::SymbolObject **)this, (uint64_t)a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
LABEL_133:
    v11 = v88;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v168 = *(_DWORD *)(v10 + 80);
    if ((v168 & 0x27) != 0 && (v168 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14 = *((_QWORD *)this + 7);
    v13 = 10;
    goto LABEL_87;
  }
  v13 = *((_QWORD *)a2 + 6);
  v14 = *((_QWORD *)this + 7);
  if ((v13 & 0xFFFE000000000002) != 0)
  {
LABEL_87:
    v259 = (unsigned __int8 *)v13;
    if (*(_DWORD *)(v14 + 80))
    {
      v176 = *(_DWORD *)(v14 + 80);
      if ((v176 & 0x27) != 0 && (v176 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v14 + 16))
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v14 + 41952) + 8);
        if (!v15)
          goto LABEL_12;
        goto LABEL_10;
      }
    }
    if ((v13 & 0xFFFE000000000002) == 0)
    {
      v58 = *(unsigned __int8 *)(v13 + 5);
      if (v58 == 2)
      {
LABEL_94:
        if (*(_DWORD *)(v14 + 80))
        {
          v177 = *(_DWORD *)(v14 + 80);
          if ((v177 & 0x27) != 0 && (v177 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v14 + 16))
          {
            v15 = 0;
            goto LABEL_12;
          }
        }
        v15 = *(_QWORD *)(v13 + 8);
        v14 = *((_QWORD *)this + 7);
        if ((v15 & 1) == 0)
        {
          if ((*(_BYTE *)(v15 + 16) & 0x10) != 0)
            goto LABEL_10;
          v61 = (unint64_t *)(v14 + 64768);
          v62 = *(WTF::StringImpl **)(v14 + 64768);
          if (v62 != (WTF::StringImpl *)v15)
          {
            *(_DWORD *)v15 += 2;
            *v61 = v15;
            if (v62)
            {
              if (*(_DWORD *)v62 == 2)
              {
                WTF::StringImpl::~StringImpl(v62, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v204, v205, v206, v207, v208, v209, v210, v211);
              }
              else
              {
                *(_DWORD *)v62 -= 2;
              }
            }
            v63 = *(_QWORD *)(v13 + 8);
            if (v63)
            {
              if ((*(_BYTE *)(v63 + 16) & 0x10) != 0)
              {
                *(_DWORD *)v63 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase(v63, a3, a4, a5, a6, a7, a8, (WTF *)&__dst);
                v63 = (unint64_t)__dst;
              }
            }
            v64 = *(WTF::StringImpl **)(v14 + 64776);
            *(_QWORD *)(v14 + 64776) = v63;
            if (v64)
            {
              if (*(_DWORD *)v64 == 2)
              {
                WTF::StringImpl::~StringImpl(v64, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v196, v197, v198, v199, v200, v201, v202, v203);
              }
              else
              {
                *(_DWORD *)v64 -= 2;
              }
            }
          }
          if ((*(_BYTE *)(*(_QWORD *)(v13 + 8) + 16) & 0x10) != 0)
          {
LABEL_123:
            v15 = v61[1];
            goto LABEL_10;
          }
          v65 = *(_DWORD **)(v14 + 64776);
          *v65 += 2;
          __dst = v65;
          __dmb(0xAu);
          v66 = *(_DWORD **)(v13 + 8);
          v67 = __dst;
LABEL_118:
          *(_QWORD *)(v13 + 8) = v67;
          __dst = v66;
          v71 = (_QWORD *)(v14 + 808);
          v72 = *(unsigned int *)(v14 + 820);
          if ((_DWORD)v72 == *(_DWORD *)(v14 + 816))
          {
            p_dst = (_QWORD *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v71, v72 + 1, (unint64_t)&__dst);
            v72 = *(unsigned int *)(v14 + 820);
            v73 = (_QWORD *)(*(_QWORD *)(v14 + 808) + 8 * v72);
            v66 = (_DWORD *)*p_dst;
          }
          else
          {
            v73 = (_QWORD *)(*v71 + 8 * v72);
            p_dst = &__dst;
          }
          *p_dst = 0;
          *v73 = v66;
          *(_DWORD *)(v14 + 820) = v72 + 1;
          v75 = (WTF::StringImpl *)__dst;
          __dst = 0;
          if (v75)
          {
            if (*(_DWORD *)v75 == 2)
            {
              WTF::StringImpl::~StringImpl(v75, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
            }
            else
            {
              *(_DWORD *)v75 -= 2;
            }
          }
          goto LABEL_123;
        }
        goto LABEL_105;
      }
      if (v58 == 4)
      {
        v15 = *(_QWORD *)(v13 + 8);
        v59 = *(_DWORD *)v15;
        *(_DWORD *)v15 += 4;
        v16 = v59 + 2;
        if (v16)
          goto LABEL_11;
        v60 = (WTF::StringImpl *)v15;
LABEL_129:
        WTF::StringImpl::~StringImpl(v60, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        goto LABEL_12;
      }
    }
    v13 = (uint64_t)JSC::JSValue::toStringSlowCase(&v259, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_94;
  }
  if (*(_BYTE *)(v13 + 5) != 2)
  {
    v13 = JSC::JSCell::toPrimitive(*((_QWORD *)a2 + 6), (JSC::VM **)this, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    goto LABEL_87;
  }
  v15 = *(_QWORD *)(v13 + 8);
  if ((v15 & 1) != 0)
  {
LABEL_105:
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v13, this);
    if (!*(_DWORD *)(v14 + 80))
      goto LABEL_106;
    v194 = *(_DWORD *)(v14 + 80);
    if ((v194 & 0x27) != 0 && (v194 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
    {
      v15 = 0;
      v60 = (WTF::StringImpl *)__dst;
      __dst = 0;
      if (!v60)
        goto LABEL_12;
    }
    else
    {
LABEL_106:
      v15 = (unint64_t)__dst;
      if (!__dst)
        goto LABEL_12;
      *__dst += 2;
      __dst = 0;
      v60 = (WTF::StringImpl *)v15;
    }
    if (*(_DWORD *)v60 != 2)
    {
      *(_DWORD *)v60 -= 2;
      goto LABEL_12;
    }
    goto LABEL_129;
  }
  if ((*(_BYTE *)(v15 + 16) & 0x10) == 0)
  {
    v61 = (unint64_t *)(v14 + 64768);
    v68 = *(WTF::StringImpl **)(v14 + 64768);
    if (v68 != (WTF::StringImpl *)v15)
    {
      *(_DWORD *)v15 += 2;
      *v61 = v15;
      if (v68)
      {
        if (*(_DWORD *)v68 == 2)
        {
          WTF::StringImpl::~StringImpl(v68, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v186, v187, v188, v189, v190, v191, v192, v193);
        }
        else
        {
          *(_DWORD *)v68 -= 2;
        }
      }
      v69 = *(_QWORD *)(v13 + 8);
      if (v69)
      {
        if ((*(_BYTE *)(v69 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v69 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(v69, a3, a4, a5, a6, a7, a8, (WTF *)&__dst);
          v69 = (unint64_t)__dst;
        }
      }
      v70 = *(WTF::StringImpl **)(v14 + 64776);
      *(_QWORD *)(v14 + 64776) = v69;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
        {
          WTF::StringImpl::~StringImpl(v70, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v178, v179, v180, v181, v182, v183, v184, v185);
        }
        else
        {
          *(_DWORD *)v70 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v13 + 8) + 16) & 0x10) != 0)
      goto LABEL_123;
    v67 = *(_DWORD **)(v14 + 64776);
    *v67 += 2;
    __dmb(0xAu);
    v66 = *(_DWORD **)(v13 + 8);
    goto LABEL_118;
  }
LABEL_10:
  v16 = *(_DWORD *)v15 + 2;
LABEL_11:
  *(_DWORD *)v15 = v16;
LABEL_12:
  if (*(_DWORD *)(v10 + 80))
  {
    v169 = *(_DWORD *)(v10 + 80);
    if ((v169 & 0x27) != 0 && (v169 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
    {
      v48 = 0;
      goto LABEL_442;
    }
  }
  v261 = 0xFFFFFFFF00000000;
  v265 = 0x20000;
  v263 = 0;
  v264 = 0;
  v262 = v11;
  v266 = 0;
  LOBYTE(v267) = 0;
  v268 = 0;
  v269 = 0;
  v270 = 0;
  v17 = v15 >> 4;
  v18 = v11;
  v19 = (_BYTE *)(v11 + 6);
  if ((*(_BYTE *)(v11 + 6) & 8) == 0)
  {
    v20 = (JSC::VM *)*((_QWORD *)this + 7);
    v21 = v11;
    do
    {
      v22 = *(_DWORD *)v21 & 0xFFFFFFFE;
      v23 = 16 * v22;
      if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * v22 + 0x20)) != 0)
        goto LABEL_42;
      v24 = *(_QWORD *)(16 * v22 + 0x58);
      if (!v24)
      {
        v25 = *(_QWORD *)(16 * v22 + 0x40);
        if (!v25 || *(_BYTE *)(v25 + 5) != 1 && *(_DWORD *)(v25 + 80) < 2u)
          goto LABEL_42;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v23, v20, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v24)
          goto LABEL_42;
      }
      if (!*(_DWORD *)(v24 + 24))
        goto LABEL_42;
      v26 = *(_QWORD *)(v24 + 16);
      v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
      v28 = *(unsigned int *)(v24 + 8);
      v29 = *(_DWORD *)(v15 + 16);
      if ((v26 & 1) != 0)
      {
        if ((v29 & 0x20) != 0)
          v29 = *(_DWORD *)(v15 + 32);
        v30 = *(_DWORD *)(v24 + 12);
        v31 = (v29 >> 8) & *(_QWORD *)&v30;
        v32 = *(unsigned __int8 *)(v27 + v31);
        if (!*(_BYTE *)(v27 + v31))
          goto LABEL_42;
        v33 = v27 + v28;
        v34 = 1;
        while (1)
        {
          v35 = *(_QWORD *)(v33 + 8 * (v32 - 1));
          if (v15 == (v35 & 0xFFFFFFFFFFFFLL))
            break;
          v31 = ((_DWORD)v31 + v34) & v30;
          v32 = *(unsigned __int8 *)(v27 + v31);
          ++v34;
          if (!*(_BYTE *)(v27 + v31))
            goto LABEL_42;
        }
        a6 = (v35 >> 16) & 0xFF00000000 | HIBYTE(v35);
      }
      else
      {
        if ((v29 & 0x20) != 0)
          v29 = *(_DWORD *)(v15 + 32);
        v36 = *(_DWORD *)(v24 + 12);
        v37 = v36 & (v29 >> 8);
        v38 = *(_DWORD *)(v27 + 4 * v37);
        if (!v38)
          goto LABEL_42;
        v39 = v27 + 4 * v28;
        v40 = 1;
        while (1)
        {
          v41 = (v38 - 1);
          if (v15 == *(_QWORD *)(v39 + 16 * v41))
            break;
          v37 = (v37 + v40) & v36;
          v38 = *(_DWORD *)(v27 + 4 * v37);
          ++v40;
          if (!v38)
            goto LABEL_42;
        }
        a6 = *(unsigned int *)(v39 + 16 * v41 + 8) | ((unint64_t)*(unsigned __int8 *)(v39 + 16 * v41 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v51 = v21 + 16;
          v52 = a6 << 32;
        }
        else
        {
          v51 = *(_QWORD *)(v21 + 8) - 8;
          v52 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v51 + (v52 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v53 = *(unsigned __int8 *)(a4 + 5);
          if (v53 != 5)
          {
            if (v53 != 6)
              goto LABEL_70;
            v76 = *(_DWORD *)(v23 + 16) & 3;
            v77 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v79 = *(_QWORD *)(a4 + 24);
              v78 = *(_QWORD *)(a4 + 32);
              v259 = *(unsigned __int8 **)(a4 + 8);
              v260 = v77;
              LODWORD(v261) = HIDWORD(a6);
              v263 = (_DWORD *)v21;
              goto LABEL_126;
            }
            v259 = *(unsigned __int8 **)(a4 + 8);
            v260 = v77;
            LODWORD(v261) = HIDWORD(a6);
            v263 = (_DWORD *)v21;
LABEL_279:
            BYTE1(v265) = 3;
            if (v76 != 2)
              LOBYTE(v265) = 1;
            goto LABEL_74;
          }
          v54 = (unsigned int *)v21;
          v55 = (uint64_t)v20;
LABEL_73:
          JSC::JSObject::fillGetterPropertySlot(v54, v55, (uint64_t)&v259, a4, a5, a6);
          goto LABEL_74;
        }
LABEL_70:
        v259 = (unsigned __int8 *)a4;
        v263 = (_DWORD *)v21;
LABEL_71:
        v261 = __PAIR64__(a6, a5);
        LOWORD(v265) = 257;
        goto LABEL_74;
      }
LABEL_42:
      if ((*v19 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v21, v20, v15, (uint64_t)&v259) & 1) != 0)
      {
        goto LABEL_74;
      }
      v18 = *(_QWORD *)(v23 + 48);
      if (!v18)
        v18 = *(_QWORD *)(v21 + 16);
      if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) < 0x17u)
      {
        if (!v15)
          goto LABEL_438;
        v42 = *(_DWORD *)(v15 + 16);
        if ((v42 & 0x20) != 0)
          goto LABEL_438;
        v43 = *(_BYTE **)(v15 + 8);
        v44 = *(unsigned int *)(v15 + 4);
        if ((v42 & 4) != 0)
        {
          if (!(_DWORD)v44)
            goto LABEL_438;
          v45 = *v43 - 48;
          if (v45 > 9 || v44 >= 2 && *v43 == 48)
            goto LABEL_438;
          v212 = v43 + 1;
          v213 = v44 - 1;
          v48 = 10;
          while (v213)
          {
            if (v45 <= 0x19999999)
            {
              v214 = *v212 - 48;
              if (v214 <= 9)
              {
                v50 = __CFADD__(v214, 10 * v45);
                v45 = v214 + 10 * v45;
                ++v212;
                --v213;
                if (!v50)
                  continue;
              }
            }
            goto LABEL_439;
          }
        }
        else
        {
          if (!(_DWORD)v44)
            goto LABEL_438;
          v45 = *(unsigned __int16 *)v43 - 48;
          if (v45 > 9 || *(_WORD *)v43 == 48 && v44 > 1)
            goto LABEL_438;
          v46 = (unsigned __int16 *)(v43 + 2);
          v47 = v44 - 1;
          v48 = 10;
          while (v47)
          {
            if (v45 <= 0x19999999)
            {
              v49 = *v46 - 48;
              if (v49 <= 9)
              {
                v50 = __CFADD__(v49, 10 * v45);
                v45 = v49 + 10 * v45;
                ++v46;
                --v47;
                if (!v50)
                  continue;
              }
            }
            goto LABEL_439;
          }
        }
        if (v45 == -1)
          goto LABEL_438;
        v215 = v45;
        v216 = *((_QWORD *)this + 7);
        v48 = 10;
        while (1)
        {
          v217 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
          v218 = (*(uint64_t (**)(uint64_t, JSC *, unint64_t, unsigned __int8 **))(16
                                                                                                 * *(unsigned int *)(v217 + 0x4C)
                                                                                                 + 0x70))(v11, this, v215, &v259);
          if (*(_DWORD *)(v216 + 80))
          {
            v221 = *(_DWORD *)(v216 + 80);
            if ((v221 & 0x27) != 0 && (v221 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v216 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v216 + 16))
              goto LABEL_439;
          }
          if ((v218 & 1) != 0)
            goto LABEL_74;
          if (BYTE2(v265) == 3)
          {
            if (v266)
              goto LABEL_439;
            v219 = *(unsigned __int8 *)(v11 + 5);
            if (v219 != 61)
            {
LABEL_346:
              if ((v219 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v11 + 40) & 7u) > 2)
                {
                  LOBYTE(__dst) = 0;
                  LOBYTE(v272) = 0;
                  v224 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, (uint64_t)&__dst, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v223 = (_BYTE)a2 ? v224 : 0;
                }
                else
                {
                  v223 = *(_QWORD *)(v11 + 24);
                }
                if (v223 <= v215)
                  goto LABEL_439;
              }
            }
          }
          else
          {
            v219 = *(unsigned __int8 *)(v11 + 5);
            if (v219 != 61)
              goto LABEL_346;
            if (BYTE2(v265) == 1)
              goto LABEL_439;
          }
          if ((*(_WORD *)(v217 + 12) & 0x800) == 0 || BYTE2(v265) == 3)
          {
            v220 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
            if (!v220)
              v220 = *(_QWORD *)(v11 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v220 = (*(uint64_t (**)(uint64_t, JSC *))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0xB0))(v11, this);
            }
            else
            {
              v220 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
              if (!v220)
                v220 = *(_QWORD *)(v11 + 16);
            }
            if (*(_DWORD *)(v216 + 80))
            {
              v222 = *(_DWORD *)(v216 + 80);
              if ((v222 & 0x27) != 0 && (v222 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v216 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v216 + 16))
                goto LABEL_439;
            }
          }
          if ((v220 & 0xFFFE000000000002) == 0)
          {
            v11 = v220;
            if (*(unsigned __int8 *)(v220 + 5) > 0x16u)
              continue;
          }
          goto LABEL_439;
        }
      }
      v19 = (_BYTE *)(v18 + 6);
      v21 = v18;
    }
    while ((*(_BYTE *)(v18 + 6) & 8) == 0);
  }
  if (v15)
  {
    v97 = *(_DWORD *)(v15 + 16);
    if ((v97 & 0x20) == 0)
    {
      v98 = *(_BYTE **)(v15 + 8);
      v99 = *(unsigned int *)(v15 + 4);
      if ((v97 & 4) != 0)
      {
        if ((_DWORD)v99)
        {
          v100 = *v98 - 48;
          if (v100 <= 9 && (v99 < 2 || *v98 != 48))
          {
            v225 = v98 + 1;
            v226 = v99 - 1;
            while (v226)
            {
              if (v100 <= 0x19999999)
              {
                v227 = *v225 - 48;
                if (v227 <= 9)
                {
                  v50 = __CFADD__(v227, 10 * v100);
                  v100 = v227 + 10 * v100;
                  ++v225;
                  --v226;
                  if (!v50)
                    continue;
                }
              }
              goto LABEL_140;
            }
LABEL_393:
            if (v100 != -1)
            {
              v228 = v100;
              v229 = *((_QWORD *)this + 7);
              v48 = 10;
              while (1)
              {
                v230 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
                v231 = (*(uint64_t (**)(uint64_t, JSC *, unint64_t, unsigned __int8 **))(16 * *(unsigned int *)(v230 + 0x4C) + 0x70))(v11, this, v228, &v259);
                v232 = v231;
                if (*(_DWORD *)(v229 + 80))
                {
                  v235 = *(_DWORD *)(v229 + 80);
                  if ((v235 & 0x27) != 0 && (v235 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v229 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
                  v236 = *(_QWORD *)(v229 + 16);
                  if (v236)
                    v237 = 1;
                  else
                    v237 = v232;
                  if ((v237 & 1) != 0)
                  {
                    if (!v236)
                      goto LABEL_74;
                    goto LABEL_438;
                  }
                }
                else if ((v231 & 1) != 0)
                {
                  goto LABEL_74;
                }
                if (BYTE2(v265) == 3)
                {
                  if (v266)
                    goto LABEL_439;
                  v233 = *(unsigned __int8 *)(v11 + 5);
                  if (v233 != 61)
                  {
LABEL_399:
                    if ((v233 - 39) <= 0xA)
                    {
                      if ((*(_BYTE *)(v11 + 40) & 7u) > 2)
                      {
                        LOBYTE(__dst) = 0;
                        LOBYTE(v272) = 0;
                        v240 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, (uint64_t)&__dst, (uint64_t)a3, a4, a5, a6, a7, a8);
                        v239 = (_BYTE)a2 ? v240 : 0;
                      }
                      else
                      {
                        v239 = *(_QWORD *)(v11 + 24);
                      }
                      if (v239 <= v228)
                        goto LABEL_439;
                    }
                  }
                }
                else
                {
                  v233 = *(unsigned __int8 *)(v11 + 5);
                  if (v233 != 61)
                    goto LABEL_399;
                  if (BYTE2(v265) == 1)
                    goto LABEL_439;
                }
                if ((*(_WORD *)(v230 + 12) & 0x800) == 0 || BYTE2(v265) == 3)
                {
                  v234 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                  if (!v234)
                    v234 = *(_QWORD *)(v11 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v234 = (*(uint64_t (**)(uint64_t, JSC *))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0xB0))(v11, this);
                  }
                  else
                  {
                    v234 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x30);
                    if (!v234)
                      v234 = *(_QWORD *)(v11 + 16);
                  }
                  if (*(_DWORD *)(v229 + 80))
                  {
                    v238 = *(_DWORD *)(v229 + 80);
                    if ((v238 & 0x27) != 0 && (v238 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v229 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v229 + 16))
                      goto LABEL_439;
                  }
                }
                if ((v234 & 0xFFFE000000000002) == 0)
                {
                  v11 = v234;
                  if (*(unsigned __int8 *)(v234 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_439;
              }
            }
          }
        }
      }
      else if ((_DWORD)v99)
      {
        v100 = *(unsigned __int16 *)v98 - 48;
        if (v100 <= 9 && (*(_WORD *)v98 != 48 || v99 <= 1))
        {
          v172 = (unsigned __int16 *)(v98 + 2);
          v173 = v99 - 1;
          while (v173)
          {
            if (v100 <= 0x19999999)
            {
              v174 = *v172 - 48;
              if (v174 <= 9)
              {
                v50 = __CFADD__(v174, 10 * v100);
                v100 = v174 + 10 * v100;
                ++v172;
                --v173;
                if (!v50)
                  continue;
              }
            }
            goto LABEL_140;
          }
          goto LABEL_393;
        }
      }
    }
  }
LABEL_140:
  v101 = *((_QWORD *)this + 7);
  v102 = (JSC::VMTraps *)(v101 + 64);
  v103 = &__s[1];
  v104 = v276;
  v48 = 10;
  while (1)
  {
    a3 = (JSC::CallFrame *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE));
    if ((*(_BYTE *)(v18 + 6) & 8) == 0)
      break;
    v253 = v102;
    v254 = v104;
    v139 = v103;
    v258 = (unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE));
    v255 = (*(uint64_t (**)(uint64_t, JSC *, unint64_t, unsigned __int8 **))(16 * v258[19] + 0x68))(v18, this, v15, &v259);
    v140 = v101;
    if (*(_DWORD *)(v101 + 80))
    {
      v166 = *(_DWORD *)(v101 + 80);
      if ((v166 & 0x27) != 0 && (v166 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v253, 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v101 + 16))
        goto LABEL_439;
    }
    if ((v255 & 1) != 0)
      goto LABEL_74;
    if (BYTE2(v265) == 3)
    {
      if (v266)
        goto LABEL_439;
      v141 = *(unsigned __int8 *)(v18 + 5);
      if (v141 == 61)
        goto LABEL_240;
    }
    else
    {
      v141 = *(unsigned __int8 *)(v18 + 5);
      if (v141 == 61)
      {
        v102 = v253;
        v104 = v254;
        v103 = v139;
        a3 = (JSC::CallFrame *)v258;
        if (BYTE2(v265) == 1)
          goto LABEL_439;
        goto LABEL_170;
      }
    }
    if (!v15)
      goto LABEL_240;
    if ((v141 - 50) < 0xFFFFFFF5)
      goto LABEL_240;
    v142 = *(_DWORD *)(v15 + 16);
    if ((v142 & 0x20) != 0)
      goto LABEL_240;
    v143 = *(unsigned int *)(v15 + 4);
    if (!(_DWORD)v143)
      goto LABEL_240;
    v144 = *(unsigned __int8 **)(v15 + 8);
    if ((v142 & 4) != 0)
    {
      v145 = *v144;
      if ((_DWORD)v143 == 1)
      {
LABEL_195:
        v102 = v253;
        v104 = v254;
        v103 = v139;
        a3 = (JSC::CallFrame *)v258;
        if ((v145 - 48) < 0xA)
          goto LABEL_439;
        goto LABEL_170;
      }
      if (v145 == 45)
      {
        v145 = v144[1];
        goto LABEL_199;
      }
      if ((v145 - 48) < 0xA)
        goto LABEL_210;
      if ((_DWORD)v143 == 8)
        goto LABEL_209;
    }
    else
    {
      v145 = *(unsigned __int16 *)v144;
      if ((_DWORD)v143 == 1)
        goto LABEL_195;
      if (v145 == 45)
      {
        v145 = *((unsigned __int16 *)v144 + 1);
LABEL_199:
        if ((v145 - 48) < 0xA)
        {
          if ((_DWORD)v143 == 2)
            goto LABEL_439;
          goto LABEL_210;
        }
        if ((_DWORD)v143 != 9)
          goto LABEL_240;
LABEL_209:
        if (v145 != 73)
          goto LABEL_240;
        goto LABEL_210;
      }
      if ((v145 - 48) < 0xA || (_DWORD)v143 == 8 && v145 == 73)
        goto LABEL_210;
    }
    if ((_DWORD)v143 != 3 || v145 != 78)
      goto LABEL_240;
LABEL_210:
    v251 = v251 & 0xFFFFFF0000000000 | v143 | ((unint64_t)((v142 >> 2) & 1) << 32);
    JSC::jsToNumber(v144, v251);
    v147 = (v146 >> 52) & 0x7FF;
    if ((_DWORD)v147 == 2047)
    {
      if ((v146 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v148 = v254;
      }
      else
      {
        if ((v146 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v154 = v139;
        }
        else
        {
          v154 = __s;
        }
        *(_QWORD *)v154 = 0x7974696E69666E49;
        v148 = v154 + 8;
      }
      goto LABEL_224;
    }
    v149 = v146 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v146 & 0x8000000000000000) != 0 && v149)
    {
      __s[0] = 45;
      v150 = v139;
    }
    else
    {
      if (!v149)
      {
        __s[0] = 48;
        v148 = v139;
        goto LABEL_224;
      }
      v150 = __s;
    }
    v151 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v146 & 0x800FFFFFFFFFFFFFLL, v147);
    v148 = WTF::dragonbox::detail::to_shortest(v151, v152, (uint64_t)v150, v153);
LABEL_224:
    *v148 = 0;
    v155 = strlen(__s);
    memcpy(&__dst, __s, v155);
    *((_BYTE *)&__dst + v155) = 0;
    v156 = *(unsigned int *)(v15 + 4);
    v157 = *(unsigned __int8 **)(v15 + 8);
    if ((*(_BYTE *)(v15 + 16) & 4) != 0)
    {
      if ((_DWORD)v156)
      {
        v162 = (unsigned __int8 *)&__dst;
        v163 = *(unsigned int *)(v15 + 4);
        do
        {
          v165 = *v162++;
          v164 = v165;
          if (!v165 || *v157 != v164)
            goto LABEL_240;
          ++v157;
        }
        while (--v163);
      }
    }
    else if ((_DWORD)v156)
    {
      v158 = (unsigned __int8 *)&__dst;
      v159 = *(unsigned int *)(v15 + 4);
      while (1)
      {
        v161 = *v158++;
        v160 = v161;
        if (!v161 || *(unsigned __int16 *)v157 != v160)
          break;
        v157 += 2;
        if (!--v159)
          goto LABEL_236;
      }
LABEL_240:
      v102 = v253;
      v104 = v254;
      v103 = v139;
      v101 = v140;
      a3 = (JSC::CallFrame *)v258;
      goto LABEL_170;
    }
LABEL_236:
    v102 = v253;
    v104 = v254;
    v103 = v139;
    v101 = v140;
    a3 = (JSC::CallFrame *)v258;
    if (!*((_BYTE *)&__dst + v156))
      goto LABEL_439;
LABEL_170:
    if ((*((_WORD *)a3 + 6) & 0x800) == 0)
    {
      v128 = *(_DWORD *)v18;
LABEL_172:
      v129 = *(_QWORD *)(16 * (v128 & 0xFFFFFFFE) + 0x30);
      if (!v129)
        v129 = *(_QWORD *)(v18 + 16);
      goto LABEL_174;
    }
    v128 = *(_DWORD *)v18;
    if (BYTE2(v265) == 3)
      goto LABEL_172;
    v136 = v104;
    v137 = v103;
    v252 = v102;
    v138 = 16 * (v128 & 0xFFFFFFFE);
    if ((*(_WORD *)(v138 + 12) & 0x800) != 0)
    {
      v129 = (*(uint64_t (**)(uint64_t, JSC *))(16 * *(unsigned int *)(v138 + 76) + 0xB0))(v18, this);
    }
    else
    {
      v129 = *(_QWORD *)(v138 + 48);
      if (!v129)
        v129 = *(_QWORD *)(v18 + 16);
    }
    if (*(_DWORD *)(v101 + 80))
    {
      v167 = *(_DWORD *)(v101 + 80);
      if ((v167 & 0x27) != 0 && (v167 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v252, 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v102 = v252;
      v103 = v137;
      v104 = v136;
      if (*(_QWORD *)(v101 + 16))
        goto LABEL_439;
    }
    else
    {
      v102 = v252;
      v103 = v137;
      v104 = v136;
    }
LABEL_174:
    if ((v129 & 0xFFFE000000000002) == 0)
    {
      v18 = v129;
      if (*(unsigned __int8 *)(v129 + 5) > 0x16u)
        continue;
    }
    goto LABEL_439;
  }
  if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_169;
  v105 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x58);
  if (!v105)
  {
    v106 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x40);
    if (!v106 || *(_BYTE *)(v106 + 5) != 1 && *(_DWORD *)(v106 + 80) < 2u)
      goto LABEL_169;
    v107 = (JSC::VM *)v101;
    v256 = (JSC::Structure *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE));
    v108 = v102;
    v109 = v103;
    v110 = v101;
    v111 = v104;
    JSC::Structure::materializePropertyTable(v256, v107, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    a3 = v256;
    v104 = v111;
    v101 = v110;
    v103 = v109;
    v102 = v108;
    if (!v105)
      goto LABEL_169;
  }
  if (!*(_DWORD *)(v105 + 24))
    goto LABEL_169;
  v112 = *(_QWORD *)(v105 + 16);
  v113 = v112 & 0xFFFFFFFFFFFFFFFELL;
  v114 = *(unsigned int *)(v105 + 8);
  v115 = *(_DWORD *)(v15 + 16);
  if ((v112 & 1) != 0)
  {
    if ((v115 & 0x20) != 0)
      v115 = *(_DWORD *)(v15 + 32);
    v116 = *(_DWORD *)(v105 + 12);
    v117 = (v115 >> 8) & *(_QWORD *)&v116;
    v118 = *(unsigned __int8 *)(v113 + v117);
    if (*(_BYTE *)(v113 + v117))
    {
      v119 = v113 + v114;
      v120 = 1;
      while (1)
      {
        v121 = *(_QWORD *)(v119 + 8 * (v118 - 1));
        if (v15 == (v121 & 0xFFFFFFFFFFFFLL))
          break;
        v117 = ((_DWORD)v117 + v120) & v116;
        v118 = *(unsigned __int8 *)(v113 + v117);
        ++v120;
        if (!*(_BYTE *)(v113 + v117))
          goto LABEL_169;
      }
      a6 = (v121 >> 16) & 0xFF00000000 | HIBYTE(v121);
      goto LABEL_166;
    }
    goto LABEL_169;
  }
  if ((v115 & 0x20) != 0)
    v115 = *(_DWORD *)(v15 + 32);
  v122 = *(_DWORD *)(v105 + 12);
  v123 = v122 & (v115 >> 8);
  v124 = *(_DWORD *)(v113 + 4 * v123);
  if (!v124)
    goto LABEL_169;
  v125 = v113 + 4 * v114;
  v126 = 1;
  while (1)
  {
    v127 = (v124 - 1);
    if (v15 == *(_QWORD *)(v125 + 16 * v127))
      break;
    v123 = (v123 + v126) & v122;
    v124 = *(_DWORD *)(v113 + 4 * v123);
    ++v126;
    if (!v124)
      goto LABEL_169;
  }
  a6 = *(unsigned int *)(v125 + 16 * v127 + 8) | ((unint64_t)*(unsigned __int8 *)(v125 + 16 * v127 + 12) << 32);
LABEL_166:
  if ((_DWORD)a6 == -1)
  {
LABEL_169:
    if ((*(_BYTE *)(v18 + 6) & 0x20) != 0)
    {
      v130 = (JSC::VM *)v101;
      v131 = a3;
      v132 = v102;
      v133 = v103;
      v257 = v101;
      v134 = v104;
      OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v130, v15, (uint64_t)&v259);
      a3 = v131;
      v104 = v134;
      v101 = v257;
      v103 = v133;
      v102 = v132;
      if ((OwnStaticPropertySlot & 1) != 0)
        goto LABEL_74;
    }
    goto LABEL_170;
  }
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v170 = v18 + 16;
    v171 = a6 << 32;
  }
  else
  {
    v170 = *(_QWORD *)(v18 + 8) - 8;
    v171 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v170 + (v171 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_285:
    v259 = (unsigned __int8 *)a4;
    v263 = (_DWORD *)v18;
    goto LABEL_71;
  }
  v175 = *(unsigned __int8 *)(a4 + 5);
  if (v175 == 5)
  {
    v54 = (unsigned int *)v18;
    v55 = v101;
    goto LABEL_73;
  }
  if (v175 != 6)
    goto LABEL_285;
  v76 = *((_DWORD *)a3 + 4) & 3;
  v195 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v259 = *(unsigned __int8 **)(a4 + 8);
    v260 = v195;
    LODWORD(v261) = HIDWORD(a6);
    v263 = (_DWORD *)v18;
    goto LABEL_279;
  }
  v79 = *(_QWORD *)(a4 + 24);
  v78 = *(_QWORD *)(a4 + 32);
  v259 = *(unsigned __int8 **)(a4 + 8);
  v260 = v195;
  LODWORD(v261) = HIDWORD(a6);
  v263 = (_DWORD *)v18;
LABEL_126:
  BYTE1(v265) = 3;
  if (v76 != 2)
    LOBYTE(v265) = 1;
  HIBYTE(v265) = 1;
  v269 = v79;
  v270 = v78;
LABEL_74:
  if (BYTE1(v265) == 2)
  {
    v56 = *((_QWORD *)v259 + 2);
    if (*(_BYTE *)(v56 + 5) != 28 || v56 == 0)
      v48 = *((_QWORD *)v259 + 2);
    else
      v48 = 10;
    goto LABEL_439;
  }
  if ((v261 & 0x20) != 0)
  {
    __dst = 0;
    v272 = 0;
    v273 = 0;
    v274 = 14;
    if (JSC::JSObject::getOwnPropertyDescriptor(v263, (uint64_t)this, (WTF::StringImpl *)v15, (uint64_t)&__dst))
    {
      if (v273)
        v48 = v273;
      else
        v48 = 10;
      goto LABEL_439;
    }
  }
LABEL_438:
  v48 = 10;
LABEL_439:
  if (v268)
  {
    v241 = *(_DWORD *)(v267 + 4);
    if (!v241)
    {
      __break(0xC471u);
      JUMPOUT(0x198B5CBACLL);
    }
    *(_DWORD *)(v267 + 4) = v241 - 1;
  }
LABEL_442:
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v243, v244, v245, v246, v247, v248, v249, v250);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  return v48;
}

__CFString *JSC::isPokerBros(JSC *this)
{
  __CFBundle *MainBundle;
  __CFString *result;

  MainBundle = CFBundleGetMainBundle();
  result = (__CFString *)CFBundleGetIdentifier(MainBundle);
  if (result)
  {
    result = (__CFString *)CFEqual(result, CFSTR("com.kpgame.PokerBros"));
    if ((_DWORD)result)
      return (__CFString *)((*((_BYTE *)WTF::sdkAlignedBehaviors((WTF *)result) + 5) & 2) == 0);
  }
  return result;
}

BOOL JSC::objectPrototypeHasOwnProperty(JSC *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v8;
  uint64_t v11;
  int v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t (*v24)(unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t);
  JSC::VM *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  _BYTE *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  int v51;
  _WORD *v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  int v64;
  unsigned __int16 *v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  unsigned __int16 *v70;
  uint64_t v71;
  unsigned int v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t OwnPropertySlotByIndex;
  int v86;
  unsigned __int8 *v87;
  uint64_t v88;
  unsigned int v89;
  unsigned __int8 *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  JSC::JSGlobalObject *v96;
  JSC::JSGlobalObject *v97;
  uint64_t v98;
  int v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;

  v8 = (WTF::StringImpl **)a3;
  v11 = *((_QWORD *)this + 7);
  v12 = *(_DWORD *)a2;
  v13 = (WTF::AtomStringImpl *)(v11 + 93072);
  v14 = *(_QWORD *)(v11 + 93072);
  if ((v14 & 1) != 0)
    v14 = (*(uint64_t (**)(_QWORD))(v14 & 0xFFFFFFFFFFFFFFFCLL))(*((_QWORD *)this + 7));
  v15 = v12 & 0xFFFFFFFE;
  v16 = *v8;
  v17 = *((_DWORD *)*v8 + 4);
  if (v17 < 0x100)
    LOWORD(v18) = WTF::StringImpl::hashSlowCase(*v8);
  else
    v18 = v17 >> 8;
  v19 = ((_WORD)v18 + (_WORD)v15) & 0x7FF;
  if (*(_DWORD *)(v14 + 16 * v19 + 8) == v15 && *(WTF::StringImpl **)(v14 + 16 * v19) == v16)
    return *(_BYTE *)(v14 + 16 * v19 + 12) != 0;
  v95 = 0xFFFFFFFF00000000;
  v97 = 0;
  v98 = 0;
  v96 = a2;
  v99 = 0x20000;
  v100 = 0;
  LOBYTE(v101) = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v22 = *v8;
  v23 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  v24 = *(uint64_t (**)(unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(16 * *(unsigned int *)(v23 + 0x4C) + 0x68);
  if (v24 != JSC::JSObject::getOwnPropertySlot)
  {
    OwnPropertySlotByIndex = ((uint64_t (*)(JSC::JSGlobalObject *, JSC *, WTF::StringImpl *, uint64_t *))v24)(a2, this, *v8, &v93);
LABEL_145:
    v20 = OwnPropertySlotByIndex;
    goto LABEL_53;
  }
  v25 = (JSC::VM *)*((_QWORD *)this + 7);
  if (!((unint64_t)v22 >> 4)
    || (((unint64_t)v22 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x20)) != 0)
  {
    goto LABEL_46;
  }
  v26 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x58);
  if (!v26)
  {
    v37 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x40);
    if (!v37 || *(_BYTE *)(v37 + 5) != 1 && *(_DWORD *)(v37 + 80) < 2u)
      goto LABEL_46;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)), *((JSC::VM **)this + 7), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v26)
      goto LABEL_46;
  }
  if (!*(_DWORD *)(v26 + 24))
    goto LABEL_46;
  v27 = *(_QWORD *)(v26 + 16);
  v28 = v27 & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(unsigned int *)(v26 + 8);
  v30 = *((_DWORD *)v22 + 4);
  if ((v27 & 1) != 0)
  {
    if ((v30 & 0x20) != 0)
      v30 = *((_DWORD *)v22 + 8);
    v31 = *(_DWORD *)(v26 + 12);
    v32 = (v30 >> 8) & *(_QWORD *)&v31;
    v33 = *(unsigned __int8 *)(v28 + v32);
    if (*(_BYTE *)(v28 + v32))
    {
      v34 = v28 + v29;
      v35 = 1;
      while (1)
      {
        v36 = *(_QWORD *)(v34 + 8 * (v33 - 1));
        if (v22 == (WTF::StringImpl *)(v36 & 0xFFFFFFFFFFFFLL))
          break;
        v32 = ((_DWORD)v32 + v35) & v31;
        v33 = *(unsigned __int8 *)(v28 + v32);
        ++v35;
        if (!*(_BYTE *)(v28 + v32))
          goto LABEL_46;
      }
      a6 = (v36 >> 16) & 0xFF00000000 | HIBYTE(v36);
      goto LABEL_28;
    }
LABEL_46:
    if ((*((_BYTE *)a2 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a2, v25, (unint64_t)v22, (uint64_t)&v93) & 1) != 0)
    {
      goto LABEL_103;
    }
    if (v22)
    {
      v47 = *((_DWORD *)v22 + 4);
      if ((v47 & 0x20) == 0)
      {
        v48 = (_BYTE *)*((_QWORD *)v22 + 1);
        v49 = *((unsigned int *)v22 + 1);
        if ((v47 & 4) != 0)
        {
          if (!(_DWORD)v49)
            goto LABEL_52;
          a3 = *v48 - 48;
          if (a3 > 9 || v49 >= 2 && *v48 == 48)
            goto LABEL_52;
          v90 = v48 + 1;
          v91 = v49 - 1;
          while (v91)
          {
            if (a3 > 0x19999999)
              goto LABEL_52;
            v92 = *v90 - 48;
            if (v92 > 9)
              goto LABEL_52;
            v20 = 0;
            v69 = __CFADD__(v92, 10 * a3);
            a3 = v92 + 10 * (_DWORD)a3;
            ++v90;
            --v91;
            if (v69)
              goto LABEL_53;
          }
        }
        else
        {
          if (!(_DWORD)v49)
            goto LABEL_52;
          a3 = *(unsigned __int16 *)v48 - 48;
          if (a3 > 9 || *(_WORD *)v48 == 48 && v49 > 1)
            goto LABEL_52;
          v70 = (unsigned __int16 *)(v48 + 2);
          v71 = v49 - 1;
          while (v71)
          {
            if (a3 > 0x19999999)
              goto LABEL_52;
            v72 = *v70 - 48;
            if (v72 > 9)
              goto LABEL_52;
            v20 = 0;
            v69 = __CFADD__(v72, 10 * a3);
            a3 = v72 + 10 * (_DWORD)a3;
            ++v70;
            --v71;
            if (v69)
              goto LABEL_53;
          }
        }
        if ((_DWORD)a3 != -1)
        {
          OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex((uint64_t)a2, (uint64_t)this, (const WTF::StringImpl *)a3, (uint64_t)&v93, a5, a6, a7, a8);
          goto LABEL_145;
        }
      }
    }
LABEL_52:
    v20 = 0;
    goto LABEL_53;
  }
  if ((v30 & 0x20) != 0)
    v30 = *((_DWORD *)v22 + 8);
  v41 = *(_DWORD *)(v26 + 12);
  v42 = v41 & (v30 >> 8);
  v43 = *(_DWORD *)(v28 + 4 * v42);
  if (!v43)
    goto LABEL_46;
  v44 = v28 + 4 * v29;
  v45 = 1;
  while (1)
  {
    v46 = (v43 - 1);
    if (v22 == *(WTF::StringImpl **)(v44 + 16 * v46))
      break;
    v42 = (v42 + v45) & v41;
    v43 = *(_DWORD *)(v28 + 4 * v42);
    ++v45;
    if (!v43)
      goto LABEL_46;
  }
  a6 = *(unsigned int *)(v44 + 16 * v46 + 8) | ((unint64_t)*(unsigned __int8 *)(v44 + 16 * v46 + 12) << 32);
LABEL_28:
  if ((_DWORD)a6 == -1)
    goto LABEL_46;
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v38 = (char *)a2 + 16;
    v39 = a6 << 32;
  }
  else
  {
    v38 = (char *)(*((_QWORD *)a2 + 1) - 8);
    v39 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)&v38[v39 >> 29];
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_34;
  v40 = *(unsigned __int8 *)(a4 + 5);
  if (v40 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a2, (uint64_t)v25, (uint64_t)&v93, a4, SHIDWORD(a6), a6);
LABEL_103:
    v20 = 1;
    goto LABEL_53;
  }
  if (v40 != 6)
  {
LABEL_34:
    v93 = a4;
    v97 = a2;
    v95 = __PAIR64__(a6, HIDWORD(a6));
    v20 = 1;
    LOWORD(v99) = 257;
    goto LABEL_53;
  }
  v81 = *(_DWORD *)(v23 + 16) & 3;
  v82 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v84 = *(_QWORD *)(a4 + 24);
    v83 = *(_QWORD *)(a4 + 32);
    v93 = *(_QWORD *)(a4 + 8);
    v94 = v82;
    LODWORD(v95) = HIDWORD(a6);
    v97 = a2;
    BYTE1(v99) = 3;
    v20 = 1;
    if (v81 != 2)
      LOBYTE(v99) = 1;
    HIBYTE(v99) = 1;
    v103 = v84;
    v104 = v83;
  }
  else
  {
    v93 = *(_QWORD *)(a4 + 8);
    v94 = v82;
    LODWORD(v95) = HIDWORD(a6);
    v97 = a2;
    v20 = 1;
    BYTE1(v99) = 3;
    if (v81 != 2)
      LOBYTE(v99) = 1;
  }
LABEL_53:
  if (*(_DWORD *)(v11 + 80))
  {
    v86 = *(_DWORD *)(v11 + 80);
    if ((v86 & 0x27) != 0 && (v86 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
    {
      v20 = 0;
      goto LABEL_78;
    }
  }
  v50 = *v8;
  if (!v50)
    goto LABEL_59;
  v51 = *((_DWORD *)v50 + 4);
  if ((v51 & 0x20) != 0)
    goto LABEL_59;
  v52 = (_WORD *)*((_QWORD *)v50 + 1);
  v53 = *((unsigned int *)v50 + 1);
  if ((v51 & 4) == 0)
  {
    if ((_DWORD)v53)
    {
      v54 = (unsigned __int16)*v52 - 48;
      if (v54 <= 9 && (*v52 != 48 || v53 <= 1))
      {
        v66 = v52 + 1;
        v67 = v53 - 1;
        while (v67)
        {
          if (v54 <= 0x19999999)
          {
            v68 = *v66 - 48;
            if (v68 <= 9)
            {
              v69 = __CFADD__(v68, 10 * v54);
              v54 = v68 + 10 * v54;
              ++v66;
              --v67;
              if (!v69)
                continue;
            }
          }
          goto LABEL_59;
        }
        goto LABEL_130;
      }
    }
LABEL_59:
    if (BYTE1(v99))
      v55 = v99 == 1;
    else
      v55 = 1;
    if (v55 && *((_BYTE *)a2 + 5) != 32)
    {
      v56 = *(_DWORD *)a2 & 0xFFFFFFFE;
      v57 = *(unsigned __int16 *)(16 * v56 + 0xC);
      if ((v57 & 8) == 0 && (*(_DWORD *)(16 * v56 + 0x10) & 3) != 2 && ((v57 & 0x10) == 0 || (v57 & 0x20) != 0))
      {
        v58 = (v57 >> 7) & 1;
        if (BYTE1(v99))
          LOBYTE(v58) = 0;
        if ((v58 & 1) == 0 && (*(_DWORD *)(16 * v56 + 0x10) & 3) == 0)
        {
          v59 = *((_DWORD *)v50 + 4);
          if (v59 < 0x100)
            LOWORD(v60) = WTF::StringImpl::hashSlowCase(v50);
          else
            v60 = v59 >> 8;
          v61 = ((_WORD)v60 + (_WORD)v56) & 0x7FF;
          *(_DWORD *)v50 += 2;
          v62 = *(WTF::StringImpl **)(v14 + 16 * v61);
          *(_QWORD *)(v14 + 16 * v61) = v50;
          if (v62)
          {
            if (*(_DWORD *)v62 == 2)
            {
              WTF::StringImpl::~StringImpl(v62, v13, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
            }
            else
            {
              *(_DWORD *)v62 -= 2;
            }
          }
          v63 = v14 + 16 * v61;
          *(_DWORD *)(v63 + 8) = v56;
          *(_BYTE *)(v63 + 12) = v20;
        }
      }
    }
    goto LABEL_78;
  }
  if (!(_DWORD)v53)
    goto LABEL_59;
  v54 = *(unsigned __int8 *)v52 - 48;
  if (v54 > 9 || v53 >= 2 && *(_BYTE *)v52 == 48)
    goto LABEL_59;
  v87 = (unsigned __int8 *)v52 + 1;
  v88 = v53 - 1;
  while (v88)
  {
    if (v54 <= 0x19999999)
    {
      v89 = *v87 - 48;
      if (v89 <= 9)
      {
        v69 = __CFADD__(v89, 10 * v54);
        v54 = v89 + 10 * v54;
        ++v87;
        --v88;
        if (!v69)
          continue;
      }
    }
    goto LABEL_59;
  }
LABEL_130:
  if (v54 == -1)
    goto LABEL_59;
LABEL_78:
  if (v102)
  {
    v64 = *(_DWORD *)(v101 + 4);
    if (!v64)
    {
      __break(0xC471u);
      JUMPOUT(0x198B5D1B0);
    }
    *(_DWORD *)(v101 + 4) = v64 - 1;
  }
  return v20;
}

unint64_t JSC::objectProtoFuncToString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  JSC::Structure *v17;
  uint64_t v18;
  JSC::JSString *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  JSC::VM *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  _WORD *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  JSC::Structure *v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  BOOL v64;
  JSC::VM *v65;
  uint64_t v66;
  int *v67;
  int v68;
  uint64_t v69;
  int *v70;
  int v71;
  uint64_t v72;
  int *v73;
  int v74;
  BOOL v75;
  int v76;
  BOOL v77;
  unint64_t v78;
  unsigned __int16 *v79;
  uint64_t v80;
  unsigned int v81;
  BOOL v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  unint64_t v86;
  JSC::VM *v87;
  unsigned __int8 *v88;
  uint64_t v89;
  char v90;
  int v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  BOOL v99;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int8x16_t **v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  JSC::VM *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  unsigned int v128;
  int v129;
  unint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  unsigned __int16 *v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  int v140;
  _BOOL4 v141;
  JSC::JSRopeString *v142;
  unint64_t v143;
  JSC::JSString *v144;
  uint64_t v145;
  unint64_t v146;
  WTF::StringImpl *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  unsigned __int8 *v160;
  int v161;
  uint64_t v162;
  int *v163;
  int v164;
  int v165;
  _BOOL4 v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  _BOOL4 v176;
  unint64_t OutOfMemoryError;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  double v183;
  const unsigned __int8 *v184;
  unsigned int v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int8 *v195;
  unsigned int v196;
  unsigned __int8 *v197;
  uint64_t v198;
  unsigned int v199;
  JSC::VM *v200;
  unsigned __int8 *v201;
  uint64_t v202;
  int v203;
  int v204;
  int v205;
  uint64_t v206;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  char v208;
  uint64_t v209;
  WTF::StringImpl *v210;
  JSC::JSString *v211;
  uint64_t v212;
  unint64_t v213;
  unsigned __int8 *v214;
  _DWORD *v215;
  _QWORD v216[2];
  uint64_t v217;
  char v218;
  int8x16_t **v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  WTF::StringImpl *v224[18];

  v224[16] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v9 + 5) - 51 <= 5)
  {
    v10 = (JSC::VM *)*((_QWORD *)this + 7);
    goto LABEL_168;
  }
  v209 = *((_QWORD *)a2 + 5);
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v9 == 10)
  {
LABEL_168:
    v106 = 42088;
    return *(_QWORD *)((char *)v10 + v106);
  }
  if (v9 == 2)
  {
    v106 = 42080;
    return *(_QWORD *)((char *)v10 + v106);
  }
  if ((v9 & 0xFFFE000000000002) != 0)
  {
    v105 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v209, this, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else
  {
    if (*(unsigned __int8 *)(v9 + 5) > 0x16u)
      goto LABEL_7;
    v105 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v9, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v9 = v105;
LABEL_7:
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v11 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x40);
  if (v11)
  {
    if (*(_BYTE *)(v11 + 5) != 1)
    {
      v12 = *(_QWORD *)(v11 + 64);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 16);
        if (v13 >= 2)
          return v13;
      }
    }
  }
  v15 = *((_QWORD *)this + 7);
  JSC::inferBuiltinTag(this, v9, a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)&v221);
  if (*(_DWORD *)(v15 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, (uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
    {
      return 0;
    }
  }
  v213 = 0xFFFFFFFF00000000;
  LOBYTE(v217) = 0;
  v218 = 0;
  v219 = 0;
  v220 = 0;
  v215 = 0;
  memset(v216, 0, 13);
  v214 = (unsigned __int8 *)v9;
  v23 = *(_QWORD *)(*(_QWORD *)(v15 + 41952) + 2776);
  v24 = v9 + 6;
  v25 = v23 >> 4;
  v26 = v9;
  if ((*(_BYTE *)(v9 + 6) & 8) == 0)
  {
    v27 = (JSC::VM *)*((_QWORD *)this + 7);
    v28 = (unsigned __int8 *)v9;
    do
    {
      v29 = *(_DWORD *)v28 & 0xFFFFFFFE;
      v30 = 16 * v29;
      if (!(_DWORD)v25 || (v25 & ~*(_DWORD *)(16 * v29 + 0x20)) != 0)
        goto LABEL_27;
      v31 = *(_QWORD *)(16 * v29 + 0x58);
      if (!v31)
      {
        v42 = *(_QWORD *)(16 * v29 + 0x40);
        if (!v42 || *(_BYTE *)(v42 + 5) != 1 && *(_DWORD *)(v42 + 80) < 2u)
          goto LABEL_27;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v30, v27, 1, (const JSC::PropertyTable *)v18, (uint64_t)v19, v20, v21, v22);
        if (!v31)
          goto LABEL_27;
      }
      if (!*(_DWORD *)(v31 + 24))
        goto LABEL_27;
      v32 = *(_QWORD *)(v31 + 16);
      v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
      v34 = *(unsigned int *)(v31 + 8);
      v35 = *(_DWORD *)(v23 + 16);
      if ((v32 & 1) != 0)
      {
        if ((v35 & 0x20) != 0)
          v35 = *(_DWORD *)(v23 + 32);
        v36 = *(_DWORD *)(v31 + 12);
        v37 = (v35 >> 8) & *(_QWORD *)&v36;
        v38 = *(unsigned __int8 *)(v33 + v37);
        if (!*(_BYTE *)(v33 + v37))
          goto LABEL_27;
        v39 = v33 + v34;
        v40 = 1;
        while (1)
        {
          v41 = *(_QWORD *)(v39 + 8 * (v38 - 1));
          if (v23 == (v41 & 0xFFFFFFFFFFFFLL))
            break;
          v37 = ((_DWORD)v37 + v40) & v36;
          v38 = *(unsigned __int8 *)(v33 + v37);
          ++v40;
          if (!*(_BYTE *)(v33 + v37))
            goto LABEL_27;
        }
        v20 = (v41 >> 16) & 0xFF00000000 | HIBYTE(v41);
      }
      else
      {
        if ((v35 & 0x20) != 0)
          v35 = *(_DWORD *)(v23 + 32);
        v43 = *(_DWORD *)(v31 + 12);
        v44 = v43 & (v35 >> 8);
        v45 = *(_DWORD *)(v33 + 4 * v44);
        if (!v45)
          goto LABEL_27;
        v46 = v33 + 4 * v34;
        v47 = 1;
        while (1)
        {
          v48 = (v45 - 1);
          if (v23 == *(_QWORD *)(v46 + 16 * v48))
            break;
          v44 = (v44 + v47) & v43;
          v45 = *(_DWORD *)(v33 + 4 * v44);
          ++v47;
          if (!v45)
            goto LABEL_27;
        }
        v20 = *(unsigned int *)(v46 + 16 * v48 + 8) | ((unint64_t)*(unsigned __int8 *)(v46 + 16 * v48 + 12) << 32);
      }
      if ((_DWORD)v20 != -1)
      {
        v19 = (JSC::JSString *)HIDWORD(v20);
        if ((int)v20 <= 63)
        {
          v60 = (uint64_t)(v28 + 16);
          v61 = v20 << 32;
        }
        else
        {
          v60 = *((_QWORD *)v28 + 1) - 8;
          v61 = 0x3F00000000 - (v20 << 32);
        }
        v18 = *(_QWORD *)(v60 + (v61 >> 29));
        if ((v18 & 0xFFFE000000000002) == 0)
        {
          v62 = *(unsigned __int8 *)(v18 + 5);
          if (v62 != 5)
          {
            if (v62 != 6)
              goto LABEL_71;
            v101 = *(_DWORD *)(v30 + 16) & 3;
            v102 = *(_QWORD *)(v18 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v104 = *(int8x16_t ***)(v18 + 24);
              v103 = *(_QWORD *)(v18 + 32);
              v211 = *(JSC::JSString **)(v18 + 8);
              v212 = v102;
              LODWORD(v213) = HIDWORD(v20);
              v215 = v28;
              goto LABEL_160;
            }
            v211 = *(JSC::JSString **)(v18 + 8);
            v212 = v102;
            LODWORD(v213) = HIDWORD(v20);
            v215 = v28;
LABEL_233:
            BYTE1(v216[1]) = 3;
            if (v101 != 2)
              LOBYTE(v216[1]) = 1;
            goto LABEL_73;
          }
          v84 = (unsigned int *)v28;
          v85 = (uint64_t)v27;
LABEL_127:
          JSC::JSObject::fillGetterPropertySlot(v84, v85, (uint64_t)&v211, v18, (int)v19, v20);
          goto LABEL_73;
        }
LABEL_71:
        v211 = (JSC::JSString *)v18;
        v215 = v28;
LABEL_72:
        v213 = __PAIR64__(v20, v19);
        LOWORD(v216[1]) = 257;
        goto LABEL_73;
      }
LABEL_27:
      if ((*(_BYTE *)v24 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v28, v27, v23, (uint64_t)&v211) & 1) != 0)
      {
        goto LABEL_73;
      }
      v26 = *(_QWORD *)(v30 + 48);
      if (!v26)
        v26 = *((_QWORD *)v28 + 2);
      if ((v26 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v26 + 5) < 0x17u)
      {
        if (!v23)
          goto LABEL_58;
        v49 = *(_DWORD *)(v23 + 16);
        if ((v49 & 0x20) != 0)
          goto LABEL_58;
        v50 = *(_WORD **)(v23 + 8);
        v51 = *(unsigned int *)(v23 + 4);
        if ((v49 & 4) == 0)
        {
          if ((_DWORD)v51)
          {
            v52 = (unsigned __int16)*v50 - 48;
            if (v52 <= 9 && (*v50 != 48 || v51 <= 1))
            {
              v79 = v50 + 1;
              v80 = v51 - 1;
              while (v80)
              {
                if (v52 > 0x19999999)
                  goto LABEL_54;
                v81 = *v79 - 48;
                if (v81 > 9)
                  goto LABEL_54;
                v53 = 0;
                LOBYTE(v51) = 0;
                v54 = 0;
                v82 = __CFADD__(v81, 10 * v52);
                v52 = v81 + 10 * v52;
                ++v79;
                --v80;
                if (v82)
                  goto LABEL_56;
              }
              v54 = v52 & 0xFFFFFF00;
              v53 = 0x100000000;
              if (v52 == -1)
              {
                v53 = 0;
                LOBYTE(v51) = 0;
              }
              else
              {
                LOBYTE(v51) = v52;
              }
              if (v52 == -1)
                v54 = 0;
LABEL_56:
              v55 = v51;
LABEL_57:
              if ((v53 & 0x100000000) == 0)
                goto LABEL_58;
              v86 = v54 | v55;
              v87 = (JSC::VM *)*((_QWORD *)this + 7);
              v88 = (unsigned __int8 *)v9;
              while (2)
              {
                v89 = 16 * (*(_DWORD *)v88 & 0xFFFFFFFE);
                v90 = (*(uint64_t (**)(unsigned __int8 *, JSC *, unint64_t, JSC::JSString **))(16 * *(unsigned int *)(v89 + 0x4C) + 0x70))(v88, this, v86, &v211);
                if (*((_DWORD *)v87 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v87, (uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
                {
                  goto LABEL_58;
                }
                if ((v90 & 1) != 0)
                  goto LABEL_73;
                if (BYTE2(v216[1]) == 3)
                {
                  if (BYTE4(v216[1]))
                    goto LABEL_58;
                  v91 = v88[5];
                  if (v91 != 61)
                    goto LABEL_135;
                }
                else
                {
                  v91 = v88[5];
                  if (v91 == 61)
                  {
                    if (BYTE2(v216[1]) == 1)
                      goto LABEL_58;
                  }
                  else
                  {
LABEL_135:
                    if ((v91 - 39) <= 0xA
                      && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v88, (uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22) <= v86)
                    {
                      goto LABEL_58;
                    }
                  }
                }
                if ((*(_WORD *)(v89 + 12) & 0x800) == 0 || BYTE2(v216[1]) == 3)
                {
                  v92 = *(_QWORD *)(16 * (*(_DWORD *)v88 & 0xFFFFFFFE) + 0x30);
                  if (!v92)
                    v92 = *((_QWORD *)v88 + 2);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v88 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v92 = (*(uint64_t (**)(unsigned __int8 *, JSC *))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v88 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0xB0))(v88, this);
                  }
                  else
                  {
                    v92 = *(_QWORD *)(16 * (*(_DWORD *)v88 & 0xFFFFFFFE) + 0x30);
                    if (!v92)
                      v92 = *((_QWORD *)v88 + 2);
                  }
                  if (*((_DWORD *)v87 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v87, (uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
                  {
                    goto LABEL_58;
                  }
                }
                if ((v92 & 0xFFFE000000000002) != 0)
                  goto LABEL_58;
                v88 = (unsigned __int8 *)v92;
                if (*(unsigned __int8 *)(v92 + 5) <= 0x16u)
                  goto LABEL_58;
                continue;
              }
            }
LABEL_54:
            v53 = 0;
            LOBYTE(v51) = 0;
          }
          else
          {
            v53 = 0;
          }
          v54 = 0;
          goto LABEL_56;
        }
        if ((_DWORD)v51)
        {
          v185 = *(unsigned __int8 *)v50 - 48;
          if (v185 <= 9 && (v51 < 2 || *(_BYTE *)v50 != 48))
          {
            v194 = v51 - 1;
            v195 = (unsigned __int8 *)v50 + 1;
            while (v194)
            {
              if (v185 > 0x19999999)
                goto LABEL_329;
              v196 = *v195 - 48;
              if (v196 > 9)
                goto LABEL_329;
              v55 = 0;
              LOBYTE(v51) = 0;
              v53 = 0;
              v82 = __CFADD__(v196, 10 * v185);
              v185 = v196 + 10 * v185;
              --v194;
              ++v195;
              if (v82)
                goto LABEL_331;
            }
            if (v185 == -1)
              v55 = 0;
            else
              v55 = v185 & 0xFFFFFF00;
            if (v185 == -1)
              LOBYTE(v51) = 0;
            else
              LOBYTE(v51) = v185;
            if (v185 == -1)
              v53 = 0;
            else
              v53 = 0x100000000;
            goto LABEL_331;
          }
LABEL_329:
          v55 = 0;
          LOBYTE(v51) = 0;
        }
        else
        {
          v55 = 0;
        }
        v53 = 0;
LABEL_331:
        v54 = v51;
        goto LABEL_57;
      }
      v24 = v26 + 6;
      v28 = (unsigned __int8 *)v26;
    }
    while ((*(_BYTE *)(v26 + 6) & 8) == 0);
  }
  if (v23)
  {
    v107 = *(_DWORD *)(v23 + 16);
    if ((v107 & 0x20) == 0)
    {
      v108 = *(_BYTE **)(v23 + 8);
      v109 = *(unsigned int *)(v23 + 4);
      if ((v107 & 4) != 0)
      {
        if ((_DWORD)v109)
        {
          v110 = *v108 - 48;
          if (v110 <= 9 && (v109 < 2 || *v108 != 48))
          {
            v197 = v108 + 1;
            v198 = v109 - 1;
            while (v198)
            {
              if (v110 <= 0x19999999)
              {
                v199 = *v197 - 48;
                if (v199 <= 9)
                {
                  v82 = __CFADD__(v199, 10 * v110);
                  v110 = v199 + 10 * (_DWORD)v110;
                  ++v197;
                  --v198;
                  if (!v82)
                    continue;
                }
              }
              goto LABEL_177;
            }
LABEL_381:
            if ((_DWORD)v110 != -1)
            {
              v200 = (JSC::VM *)*((_QWORD *)this + 7);
              v201 = (unsigned __int8 *)v9;
              while (1)
              {
                v202 = 16 * (*(_DWORD *)v201 & 0xFFFFFFFE);
                v203 = (*(uint64_t (**)(unsigned __int8 *, JSC *, uint64_t, JSC::JSString **))(16 * *(unsigned int *)(v202 + 0x4C) + 0x70))(v201, this, v110, &v211);
                v204 = v203;
                if (*((_DWORD *)v200 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v200, (uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22);
                  if (((hasExceptionsAfterHandlingTraps | v204) & 1) != 0)
                  {
                    if (!hasExceptionsAfterHandlingTraps)
                      goto LABEL_73;
                    goto LABEL_58;
                  }
                }
                else if ((v203 & 1) != 0)
                {
                  goto LABEL_73;
                }
                if (BYTE2(v216[1]) == 3)
                {
                  if (BYTE4(v216[1]))
                    goto LABEL_58;
                  v205 = v201[5];
                  if (v205 == 61)
                    goto LABEL_388;
                }
                else
                {
                  v205 = v201[5];
                  if (v205 == 61)
                  {
                    if (BYTE2(v216[1]) == 1)
                      goto LABEL_58;
                    goto LABEL_388;
                  }
                }
                if ((v205 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v201, (uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22) <= v110)
                {
                  goto LABEL_58;
                }
LABEL_388:
                if ((*(_WORD *)(v202 + 12) & 0x800) == 0 || BYTE2(v216[1]) == 3)
                {
                  v206 = *(_QWORD *)(16 * (*(_DWORD *)v201 & 0xFFFFFFFE) + 0x30);
                  if (!v206)
                    v206 = *((_QWORD *)v201 + 2);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v201 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v206 = (*(uint64_t (**)(unsigned __int8 *, JSC *))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v201 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(v201, this);
                  }
                  else
                  {
                    v206 = *(_QWORD *)(16 * (*(_DWORD *)v201 & 0xFFFFFFFE) + 0x30);
                    if (!v206)
                      v206 = *((_QWORD *)v201 + 2);
                  }
                  if (*((_DWORD *)v200 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v200, (uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
                  {
                    goto LABEL_58;
                  }
                }
                if ((v206 & 0xFFFE000000000002) == 0)
                {
                  v201 = (unsigned __int8 *)v206;
                  if (*(unsigned __int8 *)(v206 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_58;
              }
            }
          }
        }
      }
      else if ((_DWORD)v109)
      {
        v110 = *(unsigned __int16 *)v108 - 48;
        if (v110 <= 9 && (*(_WORD *)v108 != 48 || v109 <= 1))
        {
          v136 = (unsigned __int16 *)(v108 + 2);
          v137 = v109 - 1;
          while (v137)
          {
            if (v110 <= 0x19999999)
            {
              v138 = *v136 - 48;
              if (v138 <= 9)
              {
                v82 = __CFADD__(v138, 10 * v110);
                v110 = v138 + 10 * (_DWORD)v110;
                ++v136;
                --v137;
                if (!v82)
                  continue;
              }
            }
            goto LABEL_177;
          }
          goto LABEL_381;
        }
      }
    }
  }
LABEL_177:
  v111 = (JSC::VM *)*((_QWORD *)this + 7);
  while (1)
  {
    v112 = 16 * (*(_DWORD *)v26 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v26 + 6) & 8) == 0)
      break;
    v208 = (*(uint64_t (**)(uint64_t, JSC *, unint64_t, JSC::JSString **))(16
                                                                                         * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x4C)
                                                                                         + 0x68))(v26, this, v23, &v211);
    if (*((_DWORD *)v111 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v111, (uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
    {
      goto LABEL_58;
    }
    if ((v208 & 1) != 0)
      goto LABEL_73;
    if (BYTE2(v216[1]) == 3)
    {
      if (BYTE4(v216[1]))
        goto LABEL_58;
      v157 = *(unsigned __int8 *)(v26 + 5);
      if (v157 != 61)
      {
LABEL_277:
        if (!v23)
          goto LABEL_191;
        if ((v157 - 50) < 0xFFFFFFF5)
          goto LABEL_191;
        v158 = *(_DWORD *)(v23 + 16);
        if ((v158 & 0x20) != 0)
          goto LABEL_191;
        v159 = *(unsigned int *)(v23 + 4);
        if (!(_DWORD)v159)
          goto LABEL_191;
        v160 = *(unsigned __int8 **)(v23 + 8);
        if ((v158 & 4) == 0)
        {
          v161 = *(unsigned __int16 *)v160;
          if ((_DWORD)v159 == 1)
            goto LABEL_283;
          if (v161 == 45)
          {
            v161 = *((unsigned __int16 *)v160 + 1);
            goto LABEL_307;
          }
          if ((v161 - 48) >= 0xA && ((_DWORD)v159 != 8 || v161 != 73))
          {
LABEL_321:
            if ((_DWORD)v159 != 3 || v161 != 78)
              goto LABEL_191;
          }
LABEL_312:
          v24 = v24 & 0xFFFFFF0000000000 | v159 | ((unint64_t)((v158 >> 2) & 1) << 32);
          JSC::jsToNumber(v160, v24);
          WTF::numberToString(v224, v183);
          if (WTF::equal(v23, (unint64_t)v224, v184))
            goto LABEL_58;
          goto LABEL_191;
        }
        v161 = *v160;
        if ((_DWORD)v159 == 1)
        {
LABEL_283:
          if ((v161 - 48) < 0xA)
            goto LABEL_58;
          goto LABEL_191;
        }
        if (v161 == 45)
        {
          v161 = v160[1];
LABEL_307:
          if ((v161 - 48) < 0xA)
          {
            if ((_DWORD)v159 == 2)
              goto LABEL_58;
            goto LABEL_312;
          }
          if ((_DWORD)v159 != 9)
            goto LABEL_191;
        }
        else
        {
          if ((v161 - 48) < 0xA)
            goto LABEL_312;
          if ((_DWORD)v159 != 8)
            goto LABEL_321;
        }
        if (v161 != 73)
          goto LABEL_191;
        goto LABEL_312;
      }
    }
    else
    {
      v157 = *(unsigned __int8 *)(v26 + 5);
      if (v157 != 61)
        goto LABEL_277;
      if (BYTE2(v216[1]) == 1)
        goto LABEL_58;
    }
LABEL_191:
    if ((*(_WORD *)(v112 + 12) & 0x800) == 0)
    {
      v124 = *(_DWORD *)v26;
LABEL_193:
      v125 = *(_QWORD *)(16 * (v124 & 0xFFFFFFFE) + 0x30);
      if (!v125)
        v125 = *(_QWORD *)(v26 + 16);
      goto LABEL_195;
    }
    v124 = *(_DWORD *)v26;
    if (BYTE2(v216[1]) == 3)
      goto LABEL_193;
    v145 = 16 * (v124 & 0xFFFFFFFE);
    if ((*(_WORD *)(v145 + 12) & 0x800) != 0)
    {
      v125 = (*(uint64_t (**)(uint64_t, JSC *))(16 * *(unsigned int *)(v145 + 76) + 0xB0))(v26, this);
    }
    else
    {
      v125 = *(_QWORD *)(v145 + 48);
      if (!v125)
        v125 = *(_QWORD *)(v26 + 16);
    }
    if (*((_DWORD *)v111 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v111, (uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
    {
      goto LABEL_58;
    }
LABEL_195:
    if ((v125 & 0xFFFE000000000002) == 0)
    {
      v26 = v125;
      if (*(unsigned __int8 *)(v125 + 5) > 0x16u)
        continue;
    }
    goto LABEL_58;
  }
  if (!(_DWORD)v25 || (v25 & ~*(_DWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_190;
  v113 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x58);
  if (!v113)
  {
    v126 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x40);
    if (!v126 || *(_BYTE *)(v126 + 5) != 1 && *(_DWORD *)(v126 + 80) < 2u)
      goto LABEL_190;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE)), v111, 1, (const JSC::PropertyTable *)v18, (uint64_t)v19, v20, v21, v22);
    if (!v113)
      goto LABEL_190;
  }
  if (!*(_DWORD *)(v113 + 24))
    goto LABEL_190;
  v114 = *(_QWORD *)(v113 + 16);
  v115 = v114 & 0xFFFFFFFFFFFFFFFELL;
  v116 = *(unsigned int *)(v113 + 8);
  v117 = *(_DWORD *)(v23 + 16);
  if ((v114 & 1) != 0)
  {
    if ((v117 & 0x20) != 0)
      v117 = *(_DWORD *)(v23 + 32);
    v118 = *(_DWORD *)(v113 + 12);
    v119 = (v117 >> 8) & *(_QWORD *)&v118;
    v120 = *(unsigned __int8 *)(v115 + v119);
    if (*(_BYTE *)(v115 + v119))
    {
      v121 = v115 + v116;
      v122 = 1;
      while (1)
      {
        v123 = *(_QWORD *)(v121 + 8 * (v120 - 1));
        if (v23 == (v123 & 0xFFFFFFFFFFFFLL))
          break;
        v119 = ((_DWORD)v119 + v122) & v118;
        v120 = *(unsigned __int8 *)(v115 + v119);
        ++v122;
        if (!*(_BYTE *)(v115 + v119))
          goto LABEL_190;
      }
      v20 = (v123 >> 16) & 0xFF00000000 | HIBYTE(v123);
      goto LABEL_203;
    }
LABEL_190:
    if ((*(_BYTE *)(v26 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v26, v111, v23, (uint64_t)&v211) & 1) != 0)
    {
      goto LABEL_73;
    }
    goto LABEL_191;
  }
  if ((v117 & 0x20) != 0)
    v117 = *(_DWORD *)(v23 + 32);
  v127 = *(_DWORD *)(v113 + 12);
  v128 = v127 & (v117 >> 8);
  v129 = *(_DWORD *)(v115 + 4 * v128);
  if (!v129)
    goto LABEL_190;
  v130 = v115 + 4 * v116;
  v131 = 1;
  while (1)
  {
    v132 = (v129 - 1);
    if (v23 == *(_QWORD *)(v130 + 16 * v132))
      break;
    v128 = (v128 + v131) & v127;
    v129 = *(_DWORD *)(v115 + 4 * v128);
    ++v131;
    if (!v129)
      goto LABEL_190;
  }
  v20 = *(unsigned int *)(v130 + 16 * v132 + 8) | ((unint64_t)*(unsigned __int8 *)(v130 + 16 * v132 + 12) << 32);
LABEL_203:
  if ((_DWORD)v20 == -1)
    goto LABEL_190;
  v19 = (JSC::JSString *)HIDWORD(v20);
  if ((int)v20 <= 63)
  {
    v133 = v26 + 16;
    v134 = v20 << 32;
  }
  else
  {
    v133 = *(_QWORD *)(v26 + 8) - 8;
    v134 = 0x3F00000000 - (v20 << 32);
  }
  v18 = *(_QWORD *)(v133 + (v134 >> 29));
  if ((v18 & 0xFFFE000000000002) != 0)
  {
LABEL_220:
    v211 = (JSC::JSString *)v18;
    v215 = (_DWORD *)v26;
    goto LABEL_72;
  }
  v135 = *(unsigned __int8 *)(v18 + 5);
  if (v135 == 5)
  {
    v84 = (unsigned int *)v26;
    v85 = (uint64_t)v111;
    goto LABEL_127;
  }
  if (v135 != 6)
    goto LABEL_220;
  v101 = *(_DWORD *)(v112 + 16) & 3;
  v139 = *(_QWORD *)(v18 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)))
  {
    v211 = *(JSC::JSString **)(v18 + 8);
    v212 = v139;
    LODWORD(v213) = HIDWORD(v20);
    v215 = (_DWORD *)v26;
    goto LABEL_233;
  }
  v104 = *(int8x16_t ***)(v18 + 24);
  v103 = *(_QWORD *)(v18 + 32);
  v211 = *(JSC::JSString **)(v18 + 8);
  v212 = v139;
  LODWORD(v213) = HIDWORD(v20);
  v215 = (_DWORD *)v26;
LABEL_160:
  BYTE1(v216[1]) = 3;
  if (v101 != 2)
    LOBYTE(v216[1]) = 1;
  BYTE3(v216[1]) = 1;
  v219 = v104;
  v220 = v103;
LABEL_73:
  if (BYTE1(v216[1]) == 1)
  {
    v63 = (uint64_t)v211;
  }
  else
  {
    if (BYTE1(v216[1]) == 2)
    {
      v83 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v211, this, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22);
    }
    else
    {
      v93 = *(WTF::StringImpl **)(*(_QWORD *)(v15 + 41952) + 2776);
      v94 = (unint64_t)v215;
      v95 = *(_QWORD *)(16 * (*v215 & 0xFFFFFFFE) + 0x28);
      if ((v213 & 0x20) != 0)
        v94 = (unint64_t)v214;
      if (BYTE3(v216[1]) != 1)
        goto LABEL_157;
      if ((v94 & 0xFFFE000000000002) != 0)
        goto LABEL_325;
      v96 = *(unsigned int *)(16 * (*(_DWORD *)v94 & 0xFFFFFFFE) + 0x4C);
      v97 = *(_DWORD *)(16 * (*(_DWORD *)v94 & 0xFFFFFFFE) + 0x4C) != 0;
      v98 = 16 * v96;
      if ((_DWORD)v96)
        v99 = v219 == (int8x16_t **)v98;
      else
        v99 = 1;
      if (!v99)
      {
        do
        {
          v98 = *(_QWORD *)(v98 + 16);
          v97 = v98 != 0;
        }
        while ((int8x16_t **)v98 != v219 && v98 != 0);
      }
      if (!v97)
      {
LABEL_325:
        v224[0] = *((WTF::StringImpl **)this + 7);
        v83 = JSC::throwDOMAttributeGetterTypeError(v95, v224, v219, v93);
      }
      else
      {
LABEL_157:
        v83 = ((uint64_t (*)(unint64_t))v211)(v95);
      }
    }
    v63 = v83;
  }
  if (*(_DWORD *)(v15 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, (uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
  {
LABEL_231:
    v13 = 0;
    goto LABEL_63;
  }
  if ((v63 & 0xFFFE000000000002) != 0 || (*(_BYTE *)(v63 + 5) == 2 ? (v64 = v63 == 0) : (v64 = 1), v64))
  {
LABEL_58:
    v13 = v223;
    if (!v223)
    {
      if (v222)
        v146 = v222 - 1;
      else
        v146 = 0;
      WTF::AtomStringImpl::addLiteral(v221, v146, v18, (uint64_t)v19, v20, v21, v22, &v210);
      v147 = v210;
      v210 = 0;
      v224[0] = v147;
      v63 = JSC::jsString(v15, (JSC::VM *)v224, v148, v149, v150, v151, v152, v153);
      v155 = v224[0];
      v224[0] = 0;
      if (v155)
      {
        if (*(_DWORD *)v155 == 2)
        {
          WTF::StringImpl::~StringImpl(v155, v16, (uint64_t)v17, v154, (uint64_t)v19, v20, v21, v22);
          WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
        }
        else
        {
          *(_DWORD *)v155 -= 2;
        }
      }
      v156 = v210;
      v210 = 0;
      if (v156)
      {
        if (*(_DWORD *)v156 == 2)
        {
          WTF::StringImpl::~StringImpl(v156, v16, (uint64_t)v17, v154, (uint64_t)v19, v20, v21, v22);
          WTF::fastFree(v186, v187, v188, v189, v190, v191, v192, v193);
        }
        else
        {
          *(_DWORD *)v156 -= 2;
        }
      }
      goto LABEL_81;
    }
    goto LABEL_59;
  }
LABEL_81:
  v13 = *(_QWORD *)(v15 + 42072);
  v18 = *(_QWORD *)(v15 + 42960);
  v65 = (JSC::VM *)*((_QWORD *)this + 7);
  v66 = *(_QWORD *)(v13 + 8);
  if ((v66 & 1) != 0)
    v67 = (int *)(v13 + 16);
  else
    v67 = (int *)(v66 + 4);
  v68 = *v67;
  v69 = *(_QWORD *)(v63 + 8);
  if ((v69 & 1) != 0)
    v70 = (int *)(v63 + 16);
  else
    v70 = (int *)(v69 + 4);
  v71 = *v70;
  if (!v68)
  {
    if (!v71)
    {
      v13 = *(_QWORD *)(v15 + 42960);
      goto LABEL_102;
    }
    v162 = *(_QWORD *)(v18 + 8);
    if ((v162 & 1) != 0)
      v163 = (int *)(v18 + 16);
    else
      v163 = (int *)(v162 + 4);
    v164 = *v163;
    if (!v164)
    {
      v13 = v63;
      goto LABEL_102;
    }
    v165 = v164 | v71;
    v166 = __OFADD__(v71, v164);
    if (v165 < 0 || v166)
      goto LABEL_304;
    v142 = (JSC::JSRopeString *)*((_QWORD *)this + 7);
    v143 = v63;
    goto LABEL_255;
  }
  v72 = *(_QWORD *)(v18 + 8);
  if ((v72 & 1) != 0)
    v73 = (int *)(v18 + 16);
  else
    v73 = (int *)(v72 + 4);
  v74 = *v73;
  if (!v71)
  {
    if (!v74)
      goto LABEL_102;
    v140 = v74 | v68;
    v141 = __OFADD__(v68, v74);
    if (v140 < 0 || v141)
      goto LABEL_304;
    v142 = (JSC::JSRopeString *)*((_QWORD *)this + 7);
    v143 = *(_QWORD *)(v15 + 42072);
LABEL_255:
    v144 = *(JSC::JSString **)(v15 + 42960);
LABEL_256:
    v78 = JSC::JSRopeString::create(v142, v143, v144, (JSC::JSString *)v18, (uint64_t)v19, v20, v21, v22);
LABEL_101:
    v13 = v78;
    goto LABEL_102;
  }
  if (!v74)
  {
    v175 = v71 | v68;
    v176 = __OFADD__(v68, v71);
    if (v175 < 0 || v176)
      goto LABEL_304;
    v142 = (JSC::JSRopeString *)*((_QWORD *)this + 7);
    v143 = *(_QWORD *)(v15 + 42072);
    v144 = (JSC::JSString *)v63;
    goto LABEL_256;
  }
  if (((v74 | v71) & 0x80000000) == 0)
  {
    v75 = __OFADD__(v71, v74);
    v76 = v71 + v74;
    v77 = v75;
    if ((v68 & 0x80000000) == 0 && !v77 && !__OFADD__(v68, v76))
    {
      v78 = JSC::JSRopeString::create(*((JSC::JSRopeString **)this + 7), *(_QWORD *)(v15 + 42072), (JSC::JSString *)v63, v18, v19, v20, v21, v22);
      goto LABEL_101;
    }
  }
LABEL_304:
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, v16);
  JSC::VM::throwException(v65, this, OutOfMemoryError, v178, v179, v180, v181, v182);
  v13 = 0;
LABEL_102:
  if (*(_DWORD *)(v15 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, (uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v19, v20, v21, v22))
  {
    goto LABEL_231;
  }
LABEL_59:
  v56 = (JSC::Structure *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE));
  v57 = *((_QWORD *)v56 + 8);
  if (!v57 || *(_BYTE *)(v57 + 5) == 1)
  {
    JSC::Structure::allocateRareData(v56, (JSC::VM *)v15, v17, v18, (uint64_t)v19, v20, v21, v22);
    v57 = *((_QWORD *)v56 + 8);
  }
  v58 = *(_QWORD *)(v57 + 64);
  if (!v58 || *(_QWORD *)(v58 + 16) != 1)
    JSC::StructureRareData::cacheSpecialPropertySlow(v57, this, (JSC::VM *)v15, (unint64_t)v56, v13, 0, (uint64_t)&v211, v22);
LABEL_63:
  if (v218)
  {
    v59 = *(_DWORD *)(v217 + 4);
    if (!v59)
    {
      __break(0xC471u);
      JUMPOUT(0x198B5DCF8);
    }
    *(_DWORD *)(v217 + 4) = v59 - 1;
  }
  return v13;
}

uint64_t JSC::JSValue::equalSlowCase(JSC::VM **a1, JSC::JSBigInt *a2, JSC::JSBigInt *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSBigInt *v9;
  int *v10;
  JSC::VM *v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL4 v20;
  _BOOL4 v21;
  int v22;
  int v23;
  WTF *v24;
  const WTF::StringImpl *v25;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  JSC::JSBigInt *v37;
  JSC::JSBigInt *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  JSC::JSBigInt *v53;
  BOOL v54;
  unint64_t v55;
  BOOL hasExceptionsAfterHandlingTraps;
  double v57;
  double v58;
  int **v60;
  int *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  double v65;
  JSC::JSBigInt *v66;
  JSC::JSBigInt *v67;

  v9 = a3;
  v10 = (int *)a2;
  v66 = a3;
  v67 = a2;
  v12 = a1[7];
  v13 = (unint64_t)a3;
  for (i = (unint64_t)a2; ; i = v15)
  {
    while (1)
    {
      if (i >> 49)
      {
        if (v13 >> 49)
        {
          v41 = (double)(int)i;
          if (i <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v41 = i - 0x2000000000000;
          v42 = (double)(int)v13;
          if (v13 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v42 = v13 - 0x2000000000000;
          return v41 == v42;
        }
        v66 = (JSC::JSBigInt *)i;
        v67 = (JSC::JSBigInt *)v13;
        v9 = (JSC::JSBigInt *)i;
        v10 = (int *)v13;
        v15 = v13;
        v13 = i;
      }
      else
      {
        v15 = i;
      }
      v16 = v15 == v13;
      if (v15 == v13)
        return v16;
      v17 = v13 & 0xFFFFFFFFFFFFFFF7;
      if ((v15 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        if (v17 != 2)
        {
          if ((v13 & 0xFFFE000000000002) == 0)
          {
            v43 = *(_DWORD *)v9;
LABEL_78:
            v44 = 16 * (v43 & 0xFFFFFFFE);
            if ((*(_BYTE *)(v44 + 10) & 1) != 0)
              return *(_QWORD *)(v44 + 40) == (_QWORD)a1;
          }
          return 0;
        }
        return 1;
      }
      v18 = v15 & 0xFFFE000000000002;
      if (v17 == 2)
      {
        if (!v18)
        {
          v43 = *v10;
          goto LABEL_78;
        }
        return 0;
      }
      if (v18 || *(unsigned __int8 *)(v15 + 5) < 0x17u)
        break;
      if ((v13 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v13 + 5) > 0x16u)
        return v16;
      i = JSC::JSCell::toPrimitive(v15, a1, 0, a4, a5, a6, a7, a8);
      if (*((_DWORD *)v12 + 20))
      {
        v55 = i;
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v12, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        i = v55;
        if (hasExceptionsAfterHandlingTraps)
          return v16;
      }
      v67 = (JSC::JSBigInt *)i;
      v10 = (int *)i;
      if (i >= 0xFFFE000000000000)
      {
        v10 = (int *)i;
        if (v13 >= 0xFFFE000000000000)
          return i == v13;
      }
    }
    v19 = v13 & 0xFFFE000000000002;
    if ((v13 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v13 + 5) < 0x17u)
      break;
    v9 = (JSC::JSBigInt *)JSC::JSCell::toPrimitive(v13, a1, 0, a4, a5, a6, a7, a8);
    if (*((_DWORD *)v12 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v12, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      return v16;
    }
    v66 = v9;
    v13 = (unint64_t)v9;
  }
  if (v18)
    v20 = 0;
  else
    v20 = *(unsigned __int8 *)(v15 + 5) == 4;
  if (v19)
    v21 = 0;
  else
    v21 = *(unsigned __int8 *)(v13 + 5) == 4;
  if (v20 || v21)
    return 0;
  if (v18)
  {
    if (v19)
      goto LABEL_34;
    v23 = *(unsigned __int8 *)(v13 + 5);
    goto LABEL_33;
  }
  v22 = *(unsigned __int8 *)(v15 + 5);
  if (v19)
  {
    if (v22 == 2)
      goto LABEL_48;
LABEL_34:
    if ((v15 & 0xFFFFFFFFFFFFFFFELL) != 6)
    {
      if ((v13 & 0xFFFFFFFFFFFFFFFELL) == 6)
      {
        JSC::JSValue::toNumberSlowCase(&v66, (JSC::JSGlobalObject *)a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        if ((*(_QWORD *)&v51 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (v52 = (int)v51, v51 == (double)(int)v52)
          && ((_DWORD)v52 || (*(_QWORD *)&v51 & 0x8000000000000000) == 0))
        {
          v53 = (JSC::JSBigInt *)(v52 | 0xFFFE000000000000);
        }
        else
        {
          v53 = (JSC::JSBigInt *)(*(_QWORD *)&v51 + 0x2000000000000);
        }
        v66 = v53;
        if (*((_DWORD *)v12 + 20))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v12, v45, (uint64_t)a3, v46, v47, v48, v49, v50))
            return 0;
        }
      }
      goto LABEL_43;
    }
    if (!(v13 >> 49))
    {
      JSC::JSValue::toNumberSlowCase(&v67, (JSC::JSGlobalObject *)a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      if ((*(_QWORD *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v36 = (int)v35, v35 == (double)(int)v36)
        && ((_DWORD)v36 || (*(_QWORD *)&v35 & 0x8000000000000000) == 0))
      {
        v37 = (JSC::JSBigInt *)(v36 | 0xFFFE000000000000);
      }
      else
      {
        v37 = (JSC::JSBigInt *)(*(_QWORD *)&v35 + 0x2000000000000);
      }
      v67 = v37;
      if (*((_DWORD *)v12 + 20))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v12, v29, (uint64_t)a3, v30, v31, v32, v33, v34))
          return 0;
        v37 = v67;
      }
      v38 = v66;
      v66 = v37;
      v67 = v38;
LABEL_43:
      if (((unint64_t)v67 & 0xFFFE000000000002) != 0 || *((_BYTE *)v67 + 5) != 3)
        return 0;
      if (((unint64_t)v66 & 0xFFFE000000000002) != 0)
      {
        if (!((unint64_t)v66 >> 49))
          return 0;
        return JSC::JSBigInt::equalsToNumber((uint64_t)v67, (unint64_t)v66);
      }
      else
      {
        if (*((_BYTE *)v66 + 5) != 3)
          return 0;
        return JSC::JSBigInt::equals(v67, v66, a3);
      }
    }
    v57 = 0.0;
    if (v15 == 7)
      v57 = 1.0;
    v58 = (double)(int)v13;
    if (v13 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v58 = v13 - 0x2000000000000;
    return v58 == v57;
  }
  v23 = *(unsigned __int8 *)(v13 + 5);
  if (v22 != 2)
  {
LABEL_33:
    v28 = v13;
    if (v23 == 2)
    {
LABEL_49:
      if ((v15 & 0xFFFE000000000002) != 0)
      {
        if (v15 < 0xFFFE000000000000)
        {
          if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            goto LABEL_51;
          *(_QWORD *)&v39 = v15 - 0x2000000000000;
        }
        else
        {
          v39 = (double)(int)v15;
        }
LABEL_52:
        if (!*((_DWORD *)v12 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v12, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          if ((unint64_t)v66 >= 0xFFFE000000000000)
          {
            v40 = (double)(int)v66;
          }
          else if ((unint64_t)v66 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            JSC::JSValue::toNumberSlowCase(&v66, (JSC::JSGlobalObject *)a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          }
          else
          {
            *(_QWORD *)&v40 = (char *)v66 - 0x2000000000000;
          }
          if (!*((_DWORD *)v12 + 20))
            return v39 == v40;
          v65 = v40;
          v54 = JSC::VM::hasExceptionsAfterHandlingTraps(v12, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v40 = v65;
          if (!v54)
            return v39 == v40;
        }
        return 0;
      }
      if (*(_BYTE *)(v15 + 5) != 3)
      {
LABEL_51:
        JSC::JSValue::toNumberSlowCase(&v67, (JSC::JSGlobalObject *)a1, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        v39 = *(double *)a9.i64;
        goto LABEL_52;
      }
      v60 = (int **)(v28 + 8);
      if ((*(_BYTE *)(v28 + 8) & 1) != 0)
        v60 = JSC::JSRopeString::resolveRope(v28, (JSC::JSGlobalObject *)a1, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (*((_DWORD *)v12 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v12, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        return 0;
      }
      v61 = *v60;
      if (*v60)
      {
        v62 = *((_QWORD *)v61 + 1);
        v63 = v61[1] | ((unint64_t)((v61[4] >> 2) & 1) << 32);
      }
      else
      {
        v62 = 0;
        v63 = 0x100000000;
      }
      v13 = (unint64_t)JSC::JSBigInt::stringToBigInt((JSC::JSBigInt *)a1, v62, v63, a4, a5);
      v66 = (JSC::JSBigInt *)v13;
      if (*((_DWORD *)v12 + 20))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v12, v64, (uint64_t)a3, a4, a5, a6, a7, a8))
          return 0;
      }
      if (!v13)
        return 0;
      if (v15 == v13)
        return 1;
      goto LABEL_34;
    }
    goto LABEL_34;
  }
  if (v23 != 2)
  {
LABEL_48:
    v66 = (JSC::JSBigInt *)v15;
    v67 = (JSC::JSBigInt *)v13;
    v28 = v15;
    v15 = v13;
    goto LABEL_49;
  }
  v24 = *(WTF **)(v15 + 8);
  if ((v24 & 1) != 0)
    return JSC::JSString::equalSlowCase((JSC::JSString *)v15, (JSC::JSGlobalObject *)a1, (JSC::JSString *)v13, a4, a5, a6, a7, a8, a9);
  v25 = *(const WTF::StringImpl **)(v13 + 8);
  if ((v25 & 1) != 0)
    return JSC::JSString::equalSlowCase((JSC::JSString *)v15, (JSC::JSGlobalObject *)a1, (JSC::JSString *)v13, a4, a5, a6, a7, a8, a9);
  else
    return WTF::equal(v24, v25, a3);
}

JSC::JSBigInt *JSC::jsAddSlowCase(JSC::VM **a1, unint64_t a2, const WTF::String *a3, JSC::JSString *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  JSC::VM *v12;
  unint64_t v13;
  JSC::VM *v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  int *v25;
  int v26;
  JSC::VM *v27;
  int v28;
  _BOOL4 v29;
  JSC::JSRopeString *v30;
  JSC::JSString *v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  JSC::VM *v40;
  uint64_t v41;
  JSC::VM *v42;
  unsigned int *v43;
  uint64_t v44;
  _BOOL4 v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v58;
  JSC::VM *v59;
  int v60;
  double v61;
  unint64_t v62;
  JSC::JSString *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  JSC::JSRopeString *v68;
  JSC::JSString *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  uint64_t v108;
  uint64_t v109;
  _BOOL4 v110;
  JSC::JSGlobalObject *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  int *v120;
  int v121;
  uint64_t v122;
  int *v123;
  int v124;
  int v125;
  _BOOL4 v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  BOOL v148;
  uint64_t v149;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t OutOfMemoryError;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  double v158;
  WTF::StringImpl *v159;
  unint64_t v160;
  JSC::VM *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;

  v9 = (unint64_t)a3;
  v10 = a2;
  v12 = a1[7];
  if ((a2 & 0xFFFE000000000002) == 0)
    v10 = JSC::JSCell::toPrimitive(a2, a1, 0, (uint64_t)a4, a5, a6, a7, a8);
  v161 = (JSC::VM *)v10;
  if (*((_DWORD *)v12 + 20))
  {
    v88 = *((_DWORD *)v12 + 20);
    if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*((_QWORD *)v12 + 2))
      return 0;
  }
  if ((v9 & 0xFFFE000000000002) == 0)
    v9 = JSC::JSCell::toPrimitive(v9, a1, 0, (uint64_t)a4, a5, a6, a7, a8);
  v160 = v9;
  if (*((_DWORD *)v12 + 20))
  {
    v89 = *((_DWORD *)v12 + 20);
    if ((v89 & 0x27) != 0 && (v89 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*((_QWORD *)v12 + 2))
      return 0;
  }
  v13 = v10 & 0xFFFE000000000002;
  if ((v10 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v10 + 5) == 2)
  {
    if ((v9 & 0xFFFE000000000002) != 0)
    {
      JSC::JSValue::toWTFString((JSC::JSValue *)&v160, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v159, a9);
      if (*((_DWORD *)v12 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v12, (uint64_t)v32, (uint64_t)v39, v34, v35, v36, v37, v38))
      {
        goto LABEL_118;
      }
      v40 = v161;
      v106 = *((_QWORD *)v161 + 1);
      v42 = a1[7];
      v107 = (unsigned int *)((char *)v161 + 16);
      if ((v106 & 1) == 0)
        v107 = (unsigned int *)(v106 + 4);
      v108 = *v107;
      if (!(_DWORD)v108)
        goto LABEL_139;
      if (v159)
      {
        v109 = *((unsigned int *)v159 + 1);
        if ((_DWORD)v109)
        {
          v110 = __OFADD__((_DWORD)v108, (_DWORD)v109);
          if (((v109 | v108) & 0x80000000) == 0 && !v110)
          {
            if ((v106 & 1) == 0 && (unint64_t)(v108 + v109 + 20) < 0x20)
            {
              WTF::tryMakeString<WTF::String,WTF::String>((uint64_t)v161 + 8, (uint64_t *)&v159, (int **)&v163);
              if (v163)
              {
                v162 = v163;
                v163 = 0;
                v9 = JSC::JSString::create((uint64_t)v42, (JSC::VM *)&v162, v112, v113, v114, v115, v116, v117);
                v118 = v162;
                v162 = 0;
                if (v118)
                {
                  if (*(_DWORD *)v118 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v118, v32, (uint64_t)v39, v34, v35, v36, v37, v38);
                    WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
                  }
                  else
                  {
                    *(_DWORD *)v118 -= 2;
                  }
                }
              }
              else
              {
                OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v111);
                JSC::VM::throwException(v42, (JSC::JSGlobalObject *)a1, OutOfMemoryError, v152, v153, v154, v155, v156);
                v9 = 0;
              }
              v57 = v163;
              v163 = 0;
              if (!v57)
                goto LABEL_92;
              if (*(_DWORD *)v57 != 2)
              {
                *(_DWORD *)v57 -= 2;
LABEL_92:
                v71 = v159;
                v159 = 0;
                if (v71)
                {
                  if (*(_DWORD *)v71 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v71, v32, (uint64_t)v39, v34, v35, v36, v37, v38);
                    WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
                  }
                  else
                  {
                    *(_DWORD *)v71 -= 2;
                  }
                }
                return (JSC::JSBigInt *)v9;
              }
LABEL_96:
              WTF::StringImpl::~StringImpl(v57, v32, (uint64_t)v39, v34, v35, v36, v37, v38);
              WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
              goto LABEL_92;
            }
            v69 = (JSC::JSString *)JSC::jsString(a1[7], (JSC::VM *)&v159, v39, v34, v35, v36, v37, v38);
            v68 = v42;
            v62 = (unint64_t)v40;
LABEL_90:
            v70 = JSC::JSRopeString::create(v68, v62, v69, v63, v64, v65, v66, v67);
LABEL_91:
            v9 = v70;
            goto LABEL_92;
          }
LABEL_157:
          v127 = JSC::createOutOfMemoryError((unint64_t)a1, v32);
          JSC::VM::throwException(v42, (JSC::JSGlobalObject *)a1, v127, v128, v129, v130, v131, v132);
LABEL_118:
          v9 = 0;
          goto LABEL_92;
        }
      }
      goto LABEL_138;
    }
    if (*(_BYTE *)(v9 + 5) != 2)
      v9 = JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v160, (JSC::JSGlobalObject *)a1, 1);
    if (*((_DWORD *)v12 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v12, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      return 0;
    }
    a2 = (unint64_t)v161;
    v21 = *((_QWORD *)v161 + 1);
    if ((v21 & 1) != 0)
      v22 = (int *)((char *)v161 + 16);
    else
      v22 = (int *)(v21 + 4);
    v23 = *v22;
    if (!v23)
      return (JSC::JSBigInt *)v9;
    v24 = *(_QWORD *)(v9 + 8);
    if ((v24 & 1) != 0)
      v25 = (int *)(v9 + 16);
    else
      v25 = (int *)(v24 + 4);
    v26 = *v25;
    if (!v26)
      return v161;
    v27 = a1[7];
    v28 = v26 | v23;
    v29 = __OFADD__(v23, v26);
    if ((v28 & 0x80000000) == 0 && !v29)
    {
      v30 = a1[7];
      v31 = (JSC::JSString *)v9;
      return (JSC::JSBigInt *)JSC::JSRopeString::create(v30, a2, v31, a4, a5, a6, a7, a8);
    }
LABEL_162:
    v133 = JSC::createOutOfMemoryError((unint64_t)a1, (JSC::JSGlobalObject *)a2);
    JSC::VM::throwException(v27, (JSC::JSGlobalObject *)a1, v133, v134, v135, v136, v137, v138);
    return 0;
  }
  if ((v9 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v9 + 5) != 2)
  {
    v14 = a1[7];
    v162 = v14;
    if (v10 >> 49)
    {
LABEL_12:
      if (*((_DWORD *)v14 + 20))
      {
        v90 = *((_DWORD *)v14 + 20);
        if ((v90 & 0x27) != 0 && (v90 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v14 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*((_QWORD *)v14 + 2))
          return 0;
      }
      if (v9 >> 49)
        goto LABEL_14;
      v59 = a1[7];
      if ((v9 & 0xFFFE000000000002) == 0)
      {
        v60 = *(unsigned __int8 *)(v9 + 5);
        if (v60 == 3)
          goto LABEL_14;
        if (v60 == 2)
        {
          JSC::JSString::toNumber((JSC::JSString *)v9, (JSC::JSGlobalObject *)a1, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
          goto LABEL_200;
        }
        v9 = JSC::JSCell::toPrimitive(v9, a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
      }
      v163 = (WTF::StringImpl *)v9;
      if (*((_DWORD *)v59 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v59, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
LABEL_207:
        v9 = 0;
        goto LABEL_14;
      }
      if (v9 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        if ((v9 & 0xFFFE000000000002) != 0)
        {
          if (v9 >= 0xFFFE000000000000)
          {
            v61 = (double)(int)v9;
LABEL_199:
            if (!*((_DWORD *)v59 + 20)
              || (v158 = v61,
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v59, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8), v61 = v158, !hasExceptionsAfterHandlingTraps))
            {
LABEL_200:
              if ((*(_QWORD *)&v61 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (v149 = (int)v61, v61 == (double)(int)v149)
                && ((_DWORD)v149 || (*(_QWORD *)&v61 & 0x8000000000000000) == 0))
              {
                v9 = v149 | 0xFFFE000000000000;
              }
              else
              {
                v9 = *(_QWORD *)&v61 + 0x2000000000000;
              }
              goto LABEL_14;
            }
            goto LABEL_207;
          }
LABEL_198:
          JSC::JSValue::toNumberSlowCase(&v163, (JSC::JSGlobalObject *)a1, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
          goto LABEL_199;
        }
        if (*(_BYTE *)(v9 + 5) != 3)
          goto LABEL_198;
      }
LABEL_14:
      if (!*((_DWORD *)v14 + 20))
        goto LABEL_221;
      v91 = *((_DWORD *)v14 + 20);
      if ((v91 & 0x27) != 0 && (v91 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v14 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (!*((_QWORD *)v14 + 2))
      {
LABEL_221:
        if (v10 >> 49 && v9 >> 49)
        {
          v15 = (double)(int)v10;
          if (v10 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v15 = v10 - 0x2000000000000;
          v16 = (double)(int)v9;
          if (v9 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v16 = v9 - 0x2000000000000;
          v17 = v15 + v16;
          if ((*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v18 = (int)v17, v17 == (double)(int)v18)
            && ((_DWORD)v18 || (*(_QWORD *)&v17 & 0x8000000000000000) == 0))
          {
            return (JSC::JSBigInt *)(v18 | 0xFFFE000000000000);
          }
          else
          {
            return (JSC::JSBigInt *)(*(_QWORD *)&v17 + 0x2000000000000);
          }
        }
        if ((v10 & 0xFFFE000000000002) != 0
          || *(_BYTE *)(v10 + 5) != 3
          || (v9 & 0xFFFE000000000002) != 0
          || *(_BYTE *)(v9 + 5) != 3)
        {
          return (JSC::JSBigInt *)JSC::throwTypeError((unint64_t)a1, &v162, (uint64_t)"Invalid mix of BigInt and other type in addition.", 50);
        }
        else
        {
          return JSC::JSBigInt::addImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((JSC::JSBigInt *)a1, v10, v9);
        }
      }
      return 0;
    }
    if (!v13)
    {
      v58 = *(unsigned __int8 *)(v10 + 5);
      if (v58 == 3)
        goto LABEL_12;
      if (v58 == 2)
      {
        JSC::JSString::toNumber((JSC::JSString *)v10, (JSC::JSGlobalObject *)a1, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
        goto LABEL_180;
      }
      v10 = JSC::JSCell::toPrimitive(v10, a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    }
    v163 = (WTF::StringImpl *)v10;
    if (*((_DWORD *)v14 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v14, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
LABEL_187:
      v10 = 0;
      goto LABEL_12;
    }
    if (v10 - 0x2000000000000 < 0xFFFC000000000000)
      goto LABEL_12;
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      if (v10 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v10;
LABEL_179:
        if (!*((_DWORD *)v14 + 20)
          || (v157 = a9.i64[0],
              v148 = JSC::VM::hasExceptionsAfterHandlingTraps(v14, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8),
              a9.i64[0] = v157,
              !v148))
        {
LABEL_180:
          if ((a9.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v147 = (int)*(double *)a9.i64, *(double *)a9.i64 == (double)(int)v147)
            && ((_DWORD)v147 || (a9.i64[0] & 0x8000000000000000) == 0))
          {
            v10 = v147 | 0xFFFE000000000000;
          }
          else
          {
            v10 = a9.i64[0] + 0x2000000000000;
          }
          goto LABEL_12;
        }
        goto LABEL_187;
      }
    }
    else if (*(_BYTE *)(v10 + 5) == 3)
    {
      goto LABEL_12;
    }
    JSC::JSValue::toNumberSlowCase(&v163, (JSC::JSGlobalObject *)a1, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    goto LABEL_179;
  }
  if (v13)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v161, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v159);
    if (*((_DWORD *)v12 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v12, (uint64_t)v32, v33, v34, v35, v36, v37, v38))
    {
      goto LABEL_118;
    }
    v39 = v159;
    v40 = (JSC::VM *)v160;
    if (v159)
    {
      v41 = *((unsigned int *)v159 + 1);
      if ((_DWORD)v41)
      {
        v42 = a1[7];
        v34 = *(_QWORD *)(v160 + 8);
        v43 = (unsigned int *)(v160 + 16);
        if ((v34 & 1) == 0)
          v43 = (unsigned int *)(v34 + 4);
        v44 = *v43;
        if ((_DWORD)v44)
        {
          v45 = __OFADD__((_DWORD)v41, (_DWORD)v44);
          if (((v44 | v41) & 0x80000000) == 0 && !v45)
          {
            if ((v34 & 1) == 0 && (unint64_t)(v41 + v44 + 20) < 0x20)
            {
              if (v34)
                v46 = *(_DWORD *)(v34 + 4);
              else
                v46 = 0;
              if (((v46 | v41) & 0x80000000) != 0
                || (v47 = (v41 + v46), __OFADD__((_DWORD)v41, v46)))
              {
                v163 = 0;
              }
              else
              {
                v48 = *((_DWORD *)v159 + 4);
                v49 = (v48 >> 2) & 1;
                if (v34 && (v48 & 4) != 0)
                  v49 = (*(unsigned __int8 *)(v34 + 16) >> 2) & 1;
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v47, v49, (uint64_t)v159, v34, (int **)&v163);
                if (v163)
                {
                  v162 = v163;
                  v163 = 0;
                  v9 = JSC::JSString::create((uint64_t)v42, (JSC::VM *)&v162, v50, v51, v52, v53, v54, v55);
                  v56 = v162;
                  v162 = 0;
                  if (v56)
                  {
                    if (*(_DWORD *)v56 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v56, v32, (uint64_t)v39, v34, v35, v36, v37, v38);
                      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
                    }
                    else
                    {
                      *(_DWORD *)v56 -= 2;
                    }
                  }
LABEL_77:
                  v57 = v163;
                  v163 = 0;
                  if (!v57)
                    goto LABEL_92;
                  if (*(_DWORD *)v57 != 2)
                  {
                    *(_DWORD *)v57 -= 2;
                    goto LABEL_92;
                  }
                  goto LABEL_96;
                }
              }
              v100 = JSC::createOutOfMemoryError((unint64_t)a1, v32);
              JSC::VM::throwException(v42, (JSC::JSGlobalObject *)a1, v100, v101, v102, v103, v104, v105);
              v9 = 0;
              goto LABEL_77;
            }
            v62 = JSC::jsString(a1[7], (JSC::VM *)&v159, v159, v34, v35, v36, v37, v38);
            v68 = v42;
            v69 = v40;
            goto LABEL_90;
          }
          goto LABEL_157;
        }
LABEL_139:
        v70 = JSC::jsString(v42, (JSC::VM *)&v159, v39, v34, v35, v36, v37, v38);
        goto LABEL_91;
      }
    }
LABEL_138:
    v9 = (unint64_t)v40;
    goto LABEL_92;
  }
  v9 = v10;
  if (*(_BYTE *)(v10 + 5) != 2)
    v9 = JSC::JSValue::toStringSlowCase((JSC::JSValue *)&v161, (JSC::JSGlobalObject *)a1, 1);
  if (*((_DWORD *)v12 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v12, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v31 = (JSC::JSString *)v160;
  v119 = *(_QWORD *)(v9 + 8);
  if ((v119 & 1) != 0)
    v120 = (int *)(v9 + 16);
  else
    v120 = (int *)(v119 + 4);
  v121 = *v120;
  if (!v121)
    return (JSC::JSBigInt *)v160;
  v122 = *(_QWORD *)(v160 + 8);
  if ((v122 & 1) != 0)
    v123 = (int *)(v160 + 16);
  else
    v123 = (int *)(v122 + 4);
  v124 = *v123;
  if (v124)
  {
    v27 = a1[7];
    v125 = v124 | v121;
    v126 = __OFADD__(v121, v124);
    if ((v125 & 0x80000000) == 0 && !v126)
    {
      v30 = a1[7];
      a2 = v9;
      return (JSC::JSBigInt *)JSC::JSRopeString::create(v30, a2, v31, a4, a5, a6, a7, a8);
    }
    goto LABEL_162;
  }
  return (JSC::JSBigInt *)v9;
}

uint64_t JSC::jsTypeStringForValueWithConcurrency(_QWORD *a1, uint64_t a2, unint64_t a3, int a4)
{
  _QWORD *v4;
  unsigned int v5;
  int v7;
  _QWORD v8[3];

  v4 = a1 + 5248;
  if (a3 == 10)
    return a1[5254];
  if ((a3 & 0xFFFFFFFFFFFFFFFELL) == 6)
    return *v4;
  if (a3 >> 49)
    return a1[5251];
  if ((a3 & 0xFFFE000000000002) != 0)
    return v4[5];
  v5 = *(unsigned __int8 *)(a3 + 5);
  if (v5 != 2)
  {
    if (v5 == 4)
      return a1[5256];
    if (v5 == 3)
      return a1[5257];
    if (v5 >= 0x17)
    {
      if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) != 0
        && *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a2)
      {
        return a1[5254];
      }
      v7 = v5 & 0xFE;
      if (a4)
      {
        if (v7 == 26)
          return v4[2];
        if ((*(_BYTE *)(a3 + 6) & 4) != 0)
          return 0;
      }
      else
      {
        if (v7 == 26)
          return v4[2];
        if ((*(_BYTE *)(a3 + 6) & 4) != 0)
        {
          (*(void (**)(_QWORD *__return_ptr, unint64_t))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)a3 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0x38))(v8, a3);
          if (LOBYTE(v8[0]))
            return v4[2];
        }
      }
    }
    return v4[5];
  }
  return a1[5255];
}

uint64_t JSC::parse<BOOL>(char *__s)
{
  size_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;

  if (__s)
  {
    v2 = strlen(__s);
    if (v2 == 3)
    {
      if ((*__s & 0xDF) == 0x59 && (__s[1] & 0xDF) == 0x45 && (__s[2] & 0xDF) == 0x53)
        goto LABEL_23;
      v3 = 3;
    }
    else
    {
      v3 = v2;
      if (v2 == 4)
      {
        if ((*__s & 0xDF) == 0x54 && (__s[1] & 0xDF) == 0x52 && (__s[2] & 0xDF) == 0x55 && (__s[3] & 0xDF) == 0x45)
          goto LABEL_23;
        v3 = 4;
      }
    }
  }
  else
  {
    v3 = 0;
  }
  if (!strcmp(__s, "1"))
  {
LABEL_23:
    v4 = 1;
    goto LABEL_24;
  }
  if (v3 == 2)
  {
    if ((*__s & 0xDF) != 0x4E || (__s[1] & 0xDF) != 0x4F)
      goto LABEL_28;
  }
  else if (v3 != 5
         || (*__s & 0xDF) != 0x46
         || (__s[1] & 0xDF) != 0x41
         || (__s[2] & 0xDF) != 0x4C
         || (__s[3] & 0xDF) != 0x53
         || (__s[4] & 0xDF) != 0x45)
  {
LABEL_28:
    v6 = strcmp(__s, "0");
    v4 = 0;
    v5 = v6 == 0;
    return v4 | (v5 << 8);
  }
  v4 = 0;
LABEL_24:
  v5 = 1;
  return v4 | (v5 << 8);
}

BOOL JSC::Options::setAllJITCodeValidations(JSC::Options *this, const char *a2)
{
  unsigned __int16 v2;

  v2 = JSC::parse<BOOL>((char *)this);
  if (v2 >= 0x100u)
  {
    LOBYTE(word_1ECF4C630) = v2 != 0;
    byte_1ECF4C628 = v2 != 0;
    BYTE5(qword_1ECF4C32A) = v2 != 0;
    BYTE4(qword_1ECF4C32A) = v2 != 0;
  }
  return v2 > 0xFFu;
}

void JSC::Options::executeDumpOptions(JSC::Options *this)
{
  int v1;
  const char *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  unsigned int v68;
  char v69;

  if (dword_1ECF4C234)
  {
    if (dword_1ECF4C234 >= 3u)
      v1 = 3;
    else
      v1 = dword_1ECF4C234;
    v2 = "All JSC options:";
    v3 = 17;
    v4 = "Modified JSC options:";
    v5 = 22;
    if (v1 != 1)
    {
      v5 = 0;
      v4 = 0;
    }
    if (v1 != 2)
    {
      v3 = v5;
      v2 = v4;
    }
    if (v1 == 3)
      v6 = 35;
    else
      v6 = v3;
    if (v1 == 3)
      v7 = (int8x16_t *)"All JSC options with descriptions:";
    else
      v7 = (int8x16_t *)v2;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = 1;
    JSC::Options::dumpAllOptions((uint64_t)&v66, v1, v7, v6, 0, 0, (int8x16_t *)"   ", 4, (int8x16_t *)"\n", 2, 1u);
    v14 = v66;
    if (v66)
      goto LABEL_17;
    if ((v68 & 0x80000000) == 0 && v67 && *(_DWORD *)(v67 + 4) > v68 + (v68 >> 2))
    {
      if ((*(_BYTE *)(v67 + 16) & 4) != 0)
        WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v66, (WTF::AtomStringImpl *)v68, v8, v9, v10, v11, v12, v13);
      else
        WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v66, (WTF::AtomStringImpl *)v68, v8, v9, v10, v11, v12, v13);
      v56 = v66;
      v66 = (WTF::StringImpl *)v67;
      v67 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
        {
          WTF::StringImpl::~StringImpl(v56, v49, v50, v51, v52, v53, v54, v55);
          WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
        }
        else
        {
          *(_DWORD *)v56 -= 2;
        }
      }
    }
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v66);
    v14 = v66;
    if (v66)
LABEL_17:
      *(_DWORD *)v14 += 2;
    v65 = v14;
    WTF::dataLog<WTF::String>((WTF::PrintStream *)&v65);
    v22 = v65;
    v65 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
    v23 = (WTF::StringImpl *)v67;
    v67 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
      }
      else
      {
        *(_DWORD *)v23 -= 2;
      }
    }
    v24 = v66;
    v66 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::~StringImpl(v24, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
      }
      else
      {
        *(_DWORD *)v24 -= 2;
      }
    }
  }
}

uint64_t JSC::Options::dumpAllOptions(uint64_t a1, int a2, int8x16_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, int8x16_t *a7, uint64_t a8, int8x16_t *a9, uint64_t a10, unsigned int a11)
{
  int8x16_t *v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t j;
  uint64_t result;
  size_t v34;
  uint64_t i;
  int8x16_t v36;

  v14 = (int8x16_t *)a5;
  if (a4)
  {
    WTF::StringBuilder::append(a1, a3, a4 - 1, a4, a5, a6, (uint64_t)a7, a8);
    v36.i8[0] = 10;
    v22 = *(_QWORD *)(a1 + 8);
    if (v22
      && ((v23 = *(unsigned int *)(a1 + 16), v23 < *(_DWORD *)(v22 + 4))
        ? (v24 = *(_QWORD *)a1 == 0)
        : (v24 = 0),
          v24))
    {
      v25 = *(_DWORD *)(v22 + 16);
      v26 = *(_QWORD *)(v22 + 8);
      *(_DWORD *)(a1 + 16) = v23 + 1;
      if ((v25 & 4) != 0)
        *(_BYTE *)(v26 + v23) = 10;
      else
        *(_WORD *)(v26 + 2 * v23) = 10;
    }
    else
    {
      WTF::StringBuilder::append(a1, &v36, 1uLL, v17, v18, v19, v20, v21);
    }
  }
  if (v14)
  {
    JSC::Options::dumpOption(a1, a2, 0, a7, a8, a9, a10, a11);
    if (a6)
    {
      v34 = a6 - 1;
      for (i = 1; i != 455; ++i)
      {
        WTF::StringBuilder::append(a1, v14, v34, v27, v28, v29, v30, v31);
        result = JSC::Options::dumpOption(a1, a2, (unsigned __int16)i, a7, a8, a9, a10, a11);
      }
    }
    else
    {
      for (j = 1; j != 455; ++j)
      {
        WTF::StringBuilder::append(a1, v14, 0, v27, v28, v29, v30, v31);
        result = JSC::Options::dumpOption(a1, a2, (unsigned __int16)j, a7, a8, a9, a10, a11);
      }
    }
  }
  else
  {
    do
    {
      result = JSC::Options::dumpOption(a1, a2, (unsigned __int16)v14, a7, a8, a9, a10, a11);
      v14 = (int8x16_t *)((char *)v14 + 1);
    }
    while (v14 != (int8x16_t *)455);
  }
  return result;
}

uint64_t WTF::dataLog<WTF::String>(WTF::PrintStream *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float v12;
  char v14;
  char **v15;
  char *v16;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::printInternal(v4, a1, v5, v6, v7, v8, v9, v10, v11, v12);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::Options::notifyOptionsChanged(JSC::Options *this, uint8x8_t a2)
{
  BOOL v2;
  int8x16_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  char v13;
  int v14;
  unsigned int v15;
  double v16;

  if (dword_1ECF4C72C <= 1)
    dword_1ECF4C72C = -1;
  HIBYTE(qword_1ECF4C780) = 0;
  byte_1ECF4C25E = 0;
  if (!BYTE1(dword_1ECF4C5C0))
  {
    BYTE1(dword_1ECF4C240) = 0;
    goto LABEL_45;
  }
  if (!BYTE1(dword_1ECF4C240))
  {
LABEL_45:
    JSC::disableAllJITOptions(this);
    goto LABEL_46;
  }
  a2.i32[0] = dword_1ECF4C28A;
  if (vmovn_s16((int16x8_t)vmovl_u8(a2)).u32[0])
    v2 = 0;
  else
    v2 = (byte_1ECF4C288 | HIBYTE(word_1ECF4C286) | byte_1ECF4C28E | word_1ECF4C2A0) == 0;
  if (v2 && HIBYTE(word_1ECF4C2A0) == 0)
  {
    v13 = word_1ECF4C286;
  }
  else
  {
    v13 = 1;
    LOBYTE(word_1ECF4C286) = 1;
  }
  v4.i32[0] = *(_DWORD *)&byte_1ECF4C323;
  v4.i8[4] = byte_1ECF4C327;
  v4.i8[5] = qword_1ECF4C32A;
  v4.i16[3] = *(_WORD *)((char *)&qword_1ECF4C32A + 1);
  v4.i16[4] = HIWORD(qword_1ECF4C32A);
  v4.i8[10] = BYTE1(qword_1ECF4C332);
  v4.i8[11] = BYTE5(qword_1ECF4C332);
  v4.i32[3] = *(_DWORD *)((char *)&qword_1ECF4C332 + 6);
  if ((vmaxvq_u8((uint8x16_t)vtstq_s8(v4, v4)) & 1) != 0
    || (v13 | byte_1ECF4C289 | byte_1ECF4C321) | (byte_1ECF4C67A | byte_1ECF4C342 | byte_1ECF4C343)
    || byte_1ECF4C345)
  {
    byte_1ECF4C346 = 1;
  }
  if ((byte_1ECF58F39 & 0x10) != 0)
    JSC::scaleJITPolicy(this);
  if (byte_1ECF4C4E0)
  {
    xmmword_1ECF4C4E4 = xmmword_199158E30;
    v5 = 20;
    LODWORD(xmmword_1ECF4C4F4) = 20;
    *(_QWORD *)((char *)&xmmword_1ECF4C4F4 + 12) = 0x1400000014;
    DWORD2(xmmword_1ECF4C514) = 150000;
    byte_1ECF4C464 = 0;
  }
  else
  {
    v5 = HIDWORD(xmmword_1ECF4C4E4);
  }
  v6 = v5;
  v7 = -1;
  do
    v8 = v6 << (v7++ + 2);
  while (v8 < 0x80000000);
  DWORD2(xmmword_1ECF4C534) = v7;
  if (BYTE1(dword_1ECF4C702))
    v9 = 1;
  else
    v9 = BYTE2(dword_1ECF4C702) == 0;
  if (!v9)
    LOBYTE(word_1ECF4C720) = 0;
  if (HIBYTE(word_1ECF4C79E))
    v10 = HIBYTE(dword_1ECF4C7B0) == 0;
  else
    v10 = 0;
  if (v10)
    HIBYTE(word_1ECF4C79E) = 0;
  if (HIBYTE(word_1ECF4C7B4))
  {
    LOWORD(dword_1ECF4C702) = 1;
    LOBYTE(word_1ECF4C720) = 0;
  }
  else
  {
    if (HIBYTE(dword_1ECF4C7B0))
      v11 = dword_1ECF4C702 == 0;
    else
      v11 = 0;
    if (v11 && byte_1ECF4C798 == 0)
      HIBYTE(word_1ECF4C79E) = 1;
  }
LABEL_46:
  if (BYTE4(qword_1ECF4C664))
    byte_1ECF4C346 = 1;
  if (!HIBYTE(word_1ECF4C349))
    byte_1ECF4C34B = 0;
  if ((_BYTE)word_1ECF4C484)
    byte_1ECF4C464 = 0;
  if (byte_1ECF4C27A)
    LODWORD(xmmword_1ECF4C4B0) = 1;
  if (BYTE2(dword_1ECF4C5C0))
  {
    byte_1ECF4C5C4 = 1;
    byte_1ECF4C400 = 1;
  }
  v14 = dword_1ECF4C250;
  if (!(dword_1ECF4C250 >> 14))
  {
    v14 = 0x4000;
    dword_1ECF4C250 = 0x4000;
  }
  v15 = v14 + 0x4000;
  if (HIDWORD(qword_1ECF4C248) < v15)
    HIDWORD(qword_1ECF4C248) = v15;
  if (!BYTE1(dword_1ECF4C6C3))
    qword_1ECF4C730 = 0;
  if (*(double *)&qword_1ECF4C608 < 0.0)
  {
    v16 = 0.0;
  }
  else
  {
    v16 = 1.0;
    if (*(double *)&qword_1ECF4C608 <= 1.0)
      goto LABEL_64;
  }
  qword_1ECF4C608 = *(_QWORD *)&v16;
LABEL_64:
  if (_MergedGlobals_46 == 1)
  {
    JSC::initializeDatafileToUseOSLog(this);
    _MergedGlobals_46 = 0;
  }
  if (HIBYTE(word_1ECF4C610))
    LOBYTE(word_1ECF4C610) = 1;
  if (!(_BYTE)word_1ECF4C6B5 || BYTE1(qword_1ECF4C780))
    HIBYTE(word_1ECF4C6B5) = 1;
  if (!BYTE3(qword_1ECF4C789))
    LOBYTE(word_1ECF4C6F0) = 0;
  byte_1ECF4C010 = BYTE2(qword_1ECF4C780);
}

void JSC::disableAllJITOptions(JSC *this)
{
  LOBYTE(dword_1ECF4C240) = 1;
  HIBYTE(qword_1ECF4C414) = 0;
  *(_WORD *)((char *)&dword_1ECF4C702 + 1) = 0;
  BYTE1(qword_1ECF4C780) = 0;
  byte_1ECF4C464 = 0;
  byte_1ECF4C245 = 0;
  *(int *)((char *)&dword_1ECF4C240 + 1) = 0;
  if ((BYTE11(xmmword_1ECF58F40) & 0x80) == 0)
    BYTE2(dword_1ECF4C6C3) = 0;
  byte_1ECF4C6B4 = 1;
  byte_1ECF4C288 = 0;
  word_1ECF4C2A0 = 0;
  word_1ECF4C286 = 0;
  byte_1ECF4C28E = 0;
  dword_1ECF4C28A = 0;
}

int32x4_t JSC::scaleJITPolicy(JSC *this)
{
  double v1;
  double v2;
  int64x2_t v3;
  float64x2_t v4;
  int v5;
  int64x2_t v6;
  float64x2_t v7;
  int32x4_t result;

  v1 = *(double *)&qword_1ECF4C4D8;
  v2 = 1.0;
  if (*(double *)&qword_1ECF4C4D8 > 1.0 || (v2 = 0.0, *(double *)&qword_1ECF4C4D8 < 0.0))
  {
    qword_1ECF4C4D8 = *(_QWORD *)&v2;
    v1 = v2;
  }
  v3.i64[0] = SDWORD2(xmmword_1ECF4C4E4);
  v3.i64[1] = SHIDWORD(xmmword_1ECF4C4E4);
  v4 = vcvtq_f64_s64(v3);
  v3.i64[0] = (int)xmmword_1ECF4C4E4;
  v3.i64[1] = SDWORD1(xmmword_1ECF4C4E4);
  xmmword_1ECF4C4E4 = (__int128)vmaxq_s32(vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v3), v1)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v4, v1))), (int32x4_t)xmmword_199158E40);
  v5 = (int)(v1 * (double)(int)xmmword_1ECF4C4F4);
  if (v5 <= 1)
    v5 = 1;
  LODWORD(xmmword_1ECF4C4F4) = v5;
  v6.i64[0] = SHIDWORD(xmmword_1ECF4C4F4);
  v6.i64[1] = unk_1ECF4C504;
  *(int32x2_t *)((char *)&xmmword_1ECF4C4F4 + 12) = vmax_s32(vmovn_s64(vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v6), v1))), (int32x2_t)0x200000002);
  v6.i64[0] = SDWORD2(xmmword_1ECF4C6D8);
  v6.i64[1] = SHIDWORD(xmmword_1ECF4C6D8);
  v7 = vcvtq_f64_s64(v6);
  v6.i64[0] = (int)xmmword_1ECF4C6D8;
  v6.i64[1] = SDWORD1(xmmword_1ECF4C6D8);
  result = vmaxq_s32(vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v6), v1)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v7, v1))), (int32x4_t)xmmword_199158E40);
  xmmword_1ECF4C6D8 = (__int128)result;
  return result;
}

void JSC::initializeDatafileToUseOSLog(JSC *this)
{
  uint64_t v1;
  uint64_t v2;

  if (JSC::initializeDatafileToUseOSLog(void)::alreadyInitialized == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x198B600BCLL);
  }
  v1 = 0;
  switch(byte_1ECF4C285)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x198B6013CLL);
    case 1:
      break;
    case 2:
      v1 = 1;
      break;
    case 3:
      v1 = 2;
      break;
    case 4:
      v1 = 16;
      break;
    case 5:
      v1 = 17;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198B6011CLL);
  }
  WTF::OSLogPrintStream::open((WTF::OSLogPrintStream *)"com.apple.JavaScriptCore", "DataLog", (const char *)v1, &v2);
  if (WTF::s_file && (uint64_t *)WTF::s_file != &WTF::s_lockedFileData)
  {
    __break(0xC471u);
    JUMPOUT(0x198B600DCLL);
  }
  WTF::s_file = v2;
  JSC::initializeDatafileToUseOSLog(void)::alreadyInitialized = 1;
  if (!byte_1ECF4C285)
  {
    __break(0xC471u);
    JUMPOUT(0x198B600FCLL);
  }
}

void JSC::Options::initialize(JSC::Options *this)
{
  char v1;

  std::call_once[abi:sn180100]<JSC::Options::initialize(void)::$_0>((uint64_t)&v1);
}

void std::call_once[abi:sn180100]<JSC::Options::initialize(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&JSC::Options::initialize(void)::initializeOptionsOnceFlag);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&JSC::Options::initialize(void)::initializeOptionsOnceFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Options::initialize(void)::$_0 &&>>);
  }
}

void JSC::Options::finalize(JSC::Options *this)
{
  JSC::Options *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  byte_1ECF4C231 = 1;
  v1 = (JSC::Options *)JSC::Options::assertOptionsAreCoherent(this);
  if (dword_1ECF4C234)
    JSC::Options::executeDumpOptions(v1);
  v9 = JSC::OptionsHelper::g_metadata;
  JSC::OptionsHelper::g_metadata = 0;
  if (v9)
    WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t JSC::Options::assertOptionsAreCoherent(JSC::Options *this)
{
  int v1;
  BOOL v2;
  BOOL v3;
  BOOL v5;
  uint64_t result;

  v1 = dword_1ECF4C240 | BYTE1(dword_1ECF4C240);
  v2 = v1 != 0;
  if (!v1)
    result = WTF::dataLog<char [69]>();
  if (BYTE2(dword_1ECF4C6C3))
    v3 = dword_1ECF4C702 == 0;
  else
    v3 = 0;
  if (v3 && BYTE1(dword_1ECF4C702) == 0)
  {
    result = WTF::dataLog<char [83]>();
    v2 = 0;
  }
  if ((_BYTE)word_1ECF4C484)
    v5 = byte_1ECF4C464 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    result = WTF::dataLog<char [88],char [2]>("Bytecode profiler is not concurrent JIT safe.", "\n");
    if (HIBYTE(word_1ECF4C6B5) | word_1ECF4C6B5)
      goto LABEL_21;
    goto LABEL_20;
  }
  if (!(HIBYTE(word_1ECF4C6B5) | word_1ECF4C6B5))
  {
LABEL_20:
    result = WTF::dataLog<char [84]>();
    goto LABEL_21;
  }
  if (!v2)
LABEL_21:
    __break(0xC471u);
  return result;
}

uint64_t JSC::Options::setOptions(JSC::Options *this, const char *a2)
{
  int64_t v3;
  char *v4;
  uint64_t v5;
  uint8x8_t v6;
  char *v7;
  unsigned int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  const char *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  JSC::Options *v29;
  const char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;

  if (byte_1ECF4C090)
  {
    result = 1052;
    __break(0xC471u);
    return result;
  }
  v54 = 0;
  v55 = 0;
  v3 = strlen((const char *)this);
  v4 = (char *)WTF::fastMalloc((WTF *)(v3 + 1));
  v5 = (uint64_t)memcpy(v4, this, v3 + 1);
  if (v3 < 1)
  {
    v7 = 0;
LABEL_44:
    v28 = 1;
LABEL_45:
    JSC::Options::notifyOptionsChanged((JSC::Options *)v5, v6);
    WTF::fastFree((unint64_t)v4, v31, v32, v33, v34, v35, v36, v37);
    if (v7)
    {
LABEL_46:
      v54 = 0;
      LODWORD(v55) = 0;
      WTF::fastFree((unint64_t)v7, v38, v39, v40, v41, v42, v43, v44);
    }
    return v28 & 1;
  }
  v7 = 0;
  v8 = 0;
  v9 = (unint64_t)&v4[v3];
  v10 = "'=' not found in option string: %p\n";
  v11 = &v4[v3];
  v12 = v4;
  while (1)
  {
    v13 = v12;
    do
    {
      v14 = *v13;
      if ((v14 - 9) >= 5 && v14 != 44 && v14 != 32)
        break;
      ++v13;
    }
    while ((unint64_t)v13 < v9);
    if (v13 == (char *)v9)
    {
LABEL_36:
      if (!v8)
        goto LABEL_44;
      v26 = 0;
      v27 = 8 * v8;
      v28 = 1;
      do
      {
        v29 = *(JSC::Options **)&v7[v26];
        v5 = JSC::Options::setOptionWithoutAlias(v29, (const char *)1);
        if ((v5 & 1) == 0)
        {
          v5 = JSC::Options::setAliasedOption(v29, (const char *)1);
          if ((v5 & 1) == 0)
          {
            v5 = WTF::dataLogF((WTF *)"Failed to set option : %s\n", v30, *(_QWORD *)&v7[v26]);
            v28 = 0;
          }
        }
        v26 += 8;
      }
      while (v27 != v26);
      goto LABEL_45;
    }
    v53 = v13;
    v5 = (uint64_t)strchr(v13, 61);
    if (!v5)
      goto LABEL_49;
    v16 = v5;
    v17 = (_BYTE *)(v5 + 1);
    if (v5 + 3 >= v9 || *v17 != 34)
    {
      v19 = 0;
      v18 = (_BYTE *)(v5 + 1);
      goto LABEL_17;
    }
    v5 = (uint64_t)strchr((char *)(v5 + 2), 34);
    if (!v5)
      break;
    v18 = (_BYTE *)v5;
    v19 = 1;
LABEL_17:
    if ((unint64_t)v18 < v9)
    {
      v20 = v11 - v18;
      while (1)
      {
        v21 = *v18;
        v22 = v21 > 0x2C;
        v23 = (1 << v21) & 0x100100003E00;
        if (!v22 && v23 != 0)
          break;
        ++v18;
        if (!--v20)
        {
          v18 = v11;
          break;
        }
      }
    }
    if ((v19 & 1) != 0)
    {
      v5 = (uint64_t)memmove(v17, (const void *)(v16 + 2), v18 - v17 - 2);
      *(v18 - 2) = 0;
      v13 = v53;
    }
    if (v18 - v13 >= 3 && *v13 == 45 && v13[1] == 45)
      v53 = v13 + 2;
    *v18 = 0;
    v12 = v18 + 1;
    v25 = HIDWORD(v55);
    if (HIDWORD(v55) == (_DWORD)v55)
    {
      v5 = (uint64_t)WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v54, HIDWORD(v55) + 1, (unint64_t)&v53);
      v25 = HIDWORD(v55);
      v7 = v54;
      *(_QWORD *)&v54[8 * HIDWORD(v55)] = *(_QWORD *)v5;
    }
    else
    {
      v7 = v54;
      *(_QWORD *)&v54[8 * HIDWORD(v55)] = v53;
    }
    v8 = v25 + 1;
    HIDWORD(v55) = v8;
    if ((unint64_t)v12 >= v9)
      goto LABEL_36;
  }
  v10 = "Missing trailing '\"' in option string: %p\n";
LABEL_49:
  WTF::dataLogF((WTF *)v10, v15, v13);
  WTF::fastFree((unint64_t)v4, v46, v47, v48, v49, v50, v51, v52);
  v28 = 0;
  v7 = v54;
  if (v54)
    goto LABEL_46;
  return v28 & 1;
}

uint64_t JSC::Options::setOption(JSC::Options *this, const char *a2)
{
  if ((JSC::Options::setOptionWithoutAlias(this, a2) & 1) != 0)
    return 1;
  else
    return JSC::Options::setAliasedOption(this, a2);
}

uint64_t JSC::Options::setOptionWithoutAlias(JSC::Options *this, const char *a2)
{
  int v2;
  uint64_t result;
  _BYTE *v5;
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint8x8_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  const char *v26;
  int v27;
  int v28;
  const char *v29;
  int v30;
  WTF *v31;
  void *v32;
  int v33;
  const char *v34;
  int v35;
  WTF *v36;
  void *v37;
  WTF *v38;
  void *v39;
  int v40;
  int v41;
  int v42;
  WTF *v43;
  void *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  WTF *v49;
  void *v50;
  WTF *v51;
  void *v52;
  WTF *v53;
  void *v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  WTF *v60;
  void *v61;
  WTF *v62;
  void *v63;
  WTF *v64;
  void *v65;
  WTF *v66;
  void *v67;
  int v68;
  WTF *v69;
  void *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  char v149;
  int v150;
  int v151;
  WTF *v152;
  void *v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  WTF *v166;
  void *v167;
  int v168;
  int v169;
  int v170;
  int v171;
  WTF *v172;
  void *v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  const char *v186;
  int v187;
  int v188;
  WTF *v189;
  void *v190;
  WTF *v191;
  void *v192;
  WTF *v193;
  void *v194;
  int v195;
  int v196;
  int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  int v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *__s1;
  _BYTE v214[24];

  v2 = (int)a2;
  result = (uint64_t)strchr((char *)this, 61);
  if (!result)
    return result;
  v5 = (_BYTE *)result;
  v6 = (char *)(result + 1);
  v7 = result - (_QWORD)this;
  if (result - (_QWORD)this != 11)
  {
    v9 = 0;
    v16 = 0;
    v13 = 0;
    switch(v7)
    {
      case 6:
        if (!strncasecmp((const char *)this, "useJIT", 6uLL))
        {
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x20;
          BYTE1(dword_1ECF4C240) = result;
          if (v2)
            goto LABEL_19;
        }
        else
        {
          if (strncasecmp((const char *)this, "logJIT", 6uLL))
          {
            v13 = 0;
            LODWORD(v212) = 0;
            v211 = 0;
            LODWORD(v210) = 0;
            v10 = 0;
            v9 = 0;
            v8 = 0;
            goto LABEL_131;
          }
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x40000000000;
          byte_1ECF4C289 = result;
          if (v2)
            goto LABEL_19;
        }
        return 1;
      case 7:
      case 11:
      case 13:
      case 17:
      case 18:
      case 19:
      case 21:
      case 26:
      case 29:
      case 30:
      case 34:
      case 36:
        goto LABEL_114;
      case 8:
        if (!strncasecmp((const char *)this, "useLLInt", 8uLL))
        {
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x10;
          LOBYTE(dword_1ECF4C240) = result;
          if (v2)
            goto LABEL_19;
          return 1;
        }
        if (strncasecmp((const char *)this, "useOSLog", 8uLL))
        {
          v19 = v2;
          v13 = 0;
          v9 = 0;
          LODWORD(v212) = 0;
          v23 = 0;
          v10 = 0;
          v8 = 0;
          LODWORD(v211) = 1;
          goto LABEL_127;
        }
        result = strlen(v6);
        v57 = result;
        if (result == 5)
        {
          if ((*v6 & 0xDF) == 0x46 && (v5[2] & 0xDF) == 0x41 && (v5[3] & 0xDF) == 0x4C && (v5[4] & 0xDF) == 0x53)
          {
            v58 = v5[5];
LABEL_448:
            if ((v58 & 0xFFFFFFDF) == 0x45)
              goto LABEL_467;
          }
        }
        else if (result == 4 && (*v6 & 0xDF) == 0x4E && (v5[2] & 0xDF) == 0x4F && (v5[3] & 0xDF) == 0x4E)
        {
          v58 = v5[4];
          goto LABEL_448;
        }
        result = strcmp(v6, "0");
        if ((_DWORD)result)
        {
          if (v57 == 4
            && (*v6 & 0xDF) == 0x54
            && (v5[2] & 0xDF) == 0x52
            && (v5[3] & 0xDF) == 0x55
            && (v5[4] & 0xDF) == 0x45)
          {
            goto LABEL_591;
          }
          result = strcmp(v6, "1");
          if (!(_DWORD)result)
            goto LABEL_591;
          if (v57 == 4)
          {
            if ((*v6 & 0xDF) != 0x49 || (v5[2] & 0xDF) != 0x4E || (v5[3] & 0xDF) != 0x46 || (v5[4] & 0xDF) != 0x4F)
              return 0;
            v68 = 2;
          }
          else
          {
            if (v57 != 5)
            {
              if (v57 != 7
                || (*v6 & 0xDF) != 0x44
                || (v5[2] & 0xDF) != 0x45
                || (v5[3] & 0xDF) != 0x46
                || (v5[4] & 0xDF) != 0x41
                || (v5[5] & 0xDF) != 0x55
                || (v5[6] & 0xDF) != 0x4C
                || (v5[7] & 0xDF) != 0x54)
              {
                return 0;
              }
              v68 = 1;
              goto LABEL_592;
            }
            v71 = *v6 & 0xDF;
            if (v71 != 70)
            {
              if (v71 != 69)
              {
                if (v71 != 68
                  || (v5[2] & 0xDF) != 0x45
                  || (v5[3] & 0xDF) != 0x42
                  || (v5[4] & 0xDF) != 0x55
                  || (v5[5] & 0xDF) != 0x47)
                {
                  return 0;
                }
                v68 = 3;
                goto LABEL_592;
              }
              if ((v5[2] & 0xDF) != 0x52 || (v5[3] & 0xDF) != 0x52 || (v5[4] & 0xDF) != 0x4F || (v5[5] & 0xDF) != 0x52)
                return 0;
LABEL_591:
              v68 = 4;
              goto LABEL_592;
            }
            if ((v5[2] & 0xDF) != 0x41 || (v5[3] & 0xDF) != 0x55 || (v5[4] & 0xDF) != 0x4C || (v5[5] & 0xDF) != 0x54)
              return 0;
            v68 = 5;
          }
LABEL_592:
          if (v68 != byte_1ECF4C285)
            _MergedGlobals_46 = 1;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x4000000000;
          byte_1ECF4C285 = v68;
          if (!v2)
            return 1;
          goto LABEL_19;
        }
LABEL_467:
        v68 = 0;
        goto LABEL_592;
      case 9:
        if (!strncasecmp((const char *)this, "useDFGJIT", 9uLL))
        {
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x80;
          HIBYTE(dword_1ECF4C240) = result;
          if (v2)
            goto LABEL_19;
        }
        else
        {
          if (strncasecmp((const char *)this, "useDOMJIT", 9uLL))
          {
            v212 = 0;
            __s1 = v6;
            v8 = 0;
            v9 = 0;
            v208 = 0;
            v209 = 0;
            v210 = 0;
            v211 = 0;
            v10 = 0;
            v11 = 0;
            v12 = 0;
            v13 = 0;
            HIDWORD(v206) = 0;
            v207 = 1;
            goto LABEL_6;
          }
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x200;
          byte_1ECF4C245 = result;
          if (v2)
            goto LABEL_19;
        }
        return 1;
      case 10:
        result = strncasecmp((const char *)this, "configFile", 0xAuLL);
        if ((_DWORD)result)
        {
          v212 = 0;
          __s1 = v6;
          v8 = 0;
          v9 = 0;
          v207 = 0;
          v208 = 0;
          v210 = 0;
          v211 = 0;
          v10 = 0;
          v11 = 0;
          HIDWORD(v206) = 0;
          v12 = 0;
          v13 = 0;
          v209 = 1;
          goto LABEL_6;
        }
        if (*v6)
        {
          v43 = (WTF *)(strlen(v6) + 1);
          v44 = (void *)WTF::fastMalloc(v43);
          result = (uint64_t)memcpy(v44, v6, (size_t)v43);
        }
        else
        {
          v44 = 0;
        }
        *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 8;
        qword_1ECF4C238 = (uint64_t)v44;
        if (!v2)
          return 1;
        goto LABEL_19;
      case 12:
        if (!strncasecmp((const char *)this, "useRegExpJIT", 0xCuLL))
        {
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x100;
          byte_1ECF4C244 = result;
          if (v2)
            goto LABEL_19;
        }
        else
        {
          if (strncasecmp((const char *)this, "useTailCalls", 0xCuLL))
          {
            v9 = 0;
            v13 = 0;
            v16 = 1;
            goto LABEL_114;
          }
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x100000000;
          byte_1ECF4C278 = result;
          if (v2)
            goto LABEL_19;
        }
        return 1;
      case 14:
        if (!strncasecmp((const char *)this, "useBaselineJIT", 0xEuLL))
        {
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x40;
          BYTE2(dword_1ECF4C240) = result;
          if (v2)
            goto LABEL_19;
        }
        else
        {
          if (strncasecmp((const char *)this, "forceICFailure", 0xEuLL))
          {
            v212 = 0;
            __s1 = v6;
            v8 = 0;
            v9 = 0;
            v207 = 0;
            v208 = 0;
            v210 = 0;
            v211 = 0;
            v10 = 0;
            v11 = 0;
            HIDWORD(v206) = 0;
            v12 = 0;
            v13 = 0;
            v209 = 0x100000000;
            goto LABEL_6;
          }
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x40000;
          byte_1ECF4C25D = result;
          if (v2)
            goto LABEL_19;
        }
        return 1;
      case 15:
        if (!strncasecmp((const char *)this, "validateOptions", 0xFuLL))
        {
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 2;
          HIBYTE(word_1ECF4C232) = result;
          if (v2)
            goto LABEL_19;
        }
        else
        {
          if (strncasecmp((const char *)this, "dumpDisassembly", 0xFuLL))
          {
            v13 = 0;
            LODWORD(v212) = 0;
            v211 = 0;
            v10 = 0;
            v9 = 0;
            v8 = 0;
            LODWORD(v210) = 1;
            goto LABEL_131;
          }
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x10000000000;
          HIBYTE(word_1ECF4C286) = result;
          if (v2)
            goto LABEL_19;
        }
        return 1;
      case 16:
        if (!strncasecmp((const char *)this, "reservedZoneSize", 0x10uLL))
        {
          *(_DWORD *)v214 = 0;
          v42 = sscanf(v6, "%u", v214);
          result = 0;
          if (v42 != 1)
            return result;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x2000;
          dword_1ECF4C250 = *(_DWORD *)v214;
          if (v2)
            goto LABEL_19;
        }
        else if (!strncasecmp((const char *)this, "forceUnlinkedDFG", 0x10uLL))
        {
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x80000;
          byte_1ECF4C25E = result;
          if (v2)
            goto LABEL_19;
        }
        else if (!strncasecmp((const char *)this, "validateBytecode", 0x10uLL))
        {
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x8000000;
          HIBYTE(dword_1ECF4C270) = result;
          if (v2)
            goto LABEL_19;
        }
        else if (!strncasecmp((const char *)this, "asyncDisassembly", 0x10uLL))
        {
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x20000000000;
          byte_1ECF4C288 = result;
          if (v2)
            goto LABEL_19;
        }
        else
        {
          result = strncasecmp((const char *)this, "jitDumpDirectory", 0x10uLL);
          if ((_DWORD)result)
          {
            if (!strncasecmp((const char *)this, "printEachOSRExit", 0x10uLL))
            {
              result = JSC::parse<BOOL>(v6);
              if ((unsigned __int16)result < 0x100u)
                return 0;
              *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x800uLL;
              BYTE3(qword_1ECF4C32A) = result;
              if (v2)
                goto LABEL_19;
            }
            else
            {
              if (strncasecmp((const char *)this, "reportParseTimes", 0x10uLL))
              {
                v212 = 0;
                __s1 = v6;
                v205 = 0;
                v206 = 0;
                v14 = 0;
                v204 = 0;
                v24 = 0;
                v207 = 0;
                v208 = 0;
                v12 = 0;
                v209 = 0;
                v210 = 0;
                v211 = 0;
                v11 = 0;
                v9 = 0;
                v8 = 0;
                v201 = 0;
                v200 = 0x100000000;
                goto LABEL_539;
              }
              result = JSC::parse<BOOL>(v6);
              if ((unsigned __int16)result < 0x100u)
                return 0;
              *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x10000000uLL;
              unk_1ECF4C33E = result;
              if (v2)
                goto LABEL_19;
            }
          }
          else
          {
            if (*v6)
            {
              v69 = (WTF *)(strlen(v6) + 1);
              v70 = (void *)WTF::fastMalloc(v69);
              result = (uint64_t)memcpy(v70, v6, (size_t)v69);
            }
            else
            {
              v70 = 0;
            }
            *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x20000000000000;
            qword_1ECF4C2A8 = (uint64_t)v70;
            if (v2)
              goto LABEL_19;
          }
        }
        return 1;
      case 20:
        if (!strncasecmp((const char *)this, "softReservedZoneSize", 0x14uLL))
        {
          *(_DWORD *)v214 = 0;
          v46 = sscanf(v6, "%u", v214);
          result = 0;
          if (v46 != 1)
            return result;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x1000;
          HIDWORD(qword_1ECF4C248) = *(_DWORD *)v214;
          if (v2)
            goto LABEL_19;
        }
        else
        {
          if (strncasecmp((const char *)this, "initialCoolDownCount", 0x14uLL))
          {
            v9 = 0;
            v16 = 0;
            v13 = 1;
            goto LABEL_114;
          }
          *(_DWORD *)v214 = 0;
          v59 = sscanf(v6, "%u", v214);
          result = 0;
          if (v59 != 1)
            return result;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x200000;
          DWORD1(xmmword_1ECF4C260) = *(_DWORD *)v214;
          if (v2)
            goto LABEL_19;
        }
        return 1;
      case 22:
        if (!strncasecmp((const char *)this, "maxPerThreadStackUsage", 0x16uLL))
        {
          *(_DWORD *)v214 = 0;
          v45 = sscanf(v6, "%u", v214);
          result = 0;
          if (v45 != 1)
            return result;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x800;
          LODWORD(qword_1ECF4C248) = *(_DWORD *)v214;
          if (v2)
            goto LABEL_19;
        }
        else if (!strncasecmp((const char *)this, "forceCodeBlockLiveness", 0x16uLL))
        {
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x20000;
          byte_1ECF4C25C = result;
          if (v2)
            goto LABEL_19;
        }
        else if (!strncasecmp((const char *)this, "dumpGeneratedBytecodes", 0x16uLL))
        {
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x1000000;
          LOBYTE(dword_1ECF4C270) = result;
          if (v2)
            goto LABEL_19;
        }
        else
        {
          if (strncasecmp((const char *)this, "alwaysUseShadowChicken", 0x16uLL))
          {
            v19 = v2;
            v9 = 0;
            v16 = 0;
            v13 = 0;
            v22 = 0;
            v20 = 1;
            goto LABEL_118;
          }
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x400000000;
          byte_1ECF4C27A = result;
          if (v2)
            goto LABEL_19;
        }
        return 1;
      case 23:
        if (!strncasecmp((const char *)this, "repatchCountForCoolDown", 0x17uLL))
        {
          *(_DWORD *)v214 = 0;
          v40 = sscanf(v6, "%u", v214);
          result = 0;
          if (v40 != 1)
            return result;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x100000;
          LODWORD(xmmword_1ECF4C260) = *(_DWORD *)v214;
          if (v2)
            goto LABEL_19;
          return 1;
        }
        if (!strncasecmp((const char *)this, "useFunctionDotArguments", 0x17uLL))
        {
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x80000000;
          byte_1ECF4C277 = result;
          if (v2)
            goto LABEL_19;
          return 1;
        }
        v16 = 0;
        v13 = 0;
        v9 = 1;
LABEL_114:
        v19 = v2;
        if (v7 == 26)
        {
          if (!strncasecmp((const char *)this, "optimizeRecursiveTailCalls", 0x1AuLL))
          {
            result = JSC::parse<BOOL>(v6);
            if ((unsigned __int16)result < 0x100u)
              return 0;
            *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x200000000;
            byte_1ECF4C279 = result;
            if (v2)
              goto LABEL_19;
            return 1;
          }
          v20 = 0;
          v22 = 1;
        }
        else
        {
          v20 = 0;
          v22 = 0;
        }
LABEL_118:
        if (!v13)
        {
          LODWORD(v212) = v16;
          v21 = 0;
          goto LABEL_122;
        }
        if (strncasecmp((const char *)this, "shadowChickenLogSize", 0x14uLL))
        {
          LODWORD(v212) = v16;
          v13 = 0;
          v21 = 1;
          goto LABEL_122;
        }
        *(_DWORD *)v214 = 0;
        v48 = sscanf(v6, "%u", v214);
        result = 0;
        if (v48 != 1)
          return result;
        *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x800000000;
        dword_1ECF4C27C = *(_DWORD *)v214;
        if (v19)
          goto LABEL_19;
        return 1;
      case 24:
        if (!strncasecmp((const char *)this, "crashOnDisallowedVMEntry", 0x18uLL))
        {
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x4000;
          LOBYTE(word_1ECF4C254) = result;
          if (v2)
            goto LABEL_19;
        }
        else
        {
          if (strncasecmp((const char *)this, "jitMemoryReservationSize", 0x18uLL))
          {
            v212 = 0;
            __s1 = v6;
            v8 = 0;
            v9 = 0;
            v207 = 0;
            v208 = 0;
            v10 = 0;
            v211 = 0;
            v11 = 0;
            v209 = 0;
            HIDWORD(v206) = 0;
            v12 = 0;
            v13 = 0;
            v210 = 0x100000000;
            goto LABEL_6;
          }
          *(_DWORD *)v214 = 0;
          v56 = sscanf(v6, "%u", v214);
          result = 0;
          if (v56 != 1)
            return result;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x10000;
          dword_1ECF4C258 = *(_DWORD *)v214;
          if (v2)
            goto LABEL_19;
        }
        return 1;
      case 25:
        if (strncasecmp((const char *)this, "repatchBufferingCountdown", 0x19uLL))
        {
          __s1 = v6;
          v8 = 0;
          v9 = 0;
          v207 = 0;
          v208 = 0;
          v210 = 0;
          v211 = 0;
          v10 = 0;
          v11 = 0;
          v209 = 0;
          HIDWORD(v206) = 0;
          v12 = 0;
          v13 = 0;
          v212 = 0x100000000;
          goto LABEL_6;
        }
        *(_DWORD *)v214 = 0;
        v41 = sscanf(v6, "%u", v214);
        result = 0;
        if (v41 != 1)
          return result;
        *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x400000;
        DWORD2(xmmword_1ECF4C260) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      case 27:
        if (strncasecmp((const char *)this, "dumpBytecodeLivenessResults", 0x1BuLL))
        {
          v212 = 0;
          __s1 = v6;
          v8 = 0;
          v9 = 0;
          v210 = 0;
          v211 = 0;
          v10 = 0;
          v11 = 0;
          v207 = 0;
          v209 = 0;
          HIDWORD(v206) = 0;
          v12 = 0;
          v13 = 0;
          v208 = 0x100000000;
          goto LABEL_6;
        }
        result = JSC::parse<BOOL>(v6);
        if ((unsigned __int16)result < 0x100u)
          return 0;
        *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x4000000;
        BYTE2(dword_1ECF4C270) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      case 28:
        if (strncasecmp((const char *)this, "crashIfCantAllocateJITMemory", 0x1CuLL))
        {
          v212 = 0;
          __s1 = v6;
          v8 = 0;
          v9 = 0;
          v207 = 0;
          v208 = 0;
          v210 = 0;
          v211 = 0;
          v10 = 0;
          v209 = 0;
          HIDWORD(v206) = 0;
          v12 = 0;
          v13 = 0;
          v11 = 1;
          goto LABEL_6;
        }
        result = JSC::parse<BOOL>(v6);
        if ((unsigned __int16)result < 0x100u)
          return 0;
        *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x8000;
        HIBYTE(word_1ECF4C254) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      case 31:
        if (strncasecmp((const char *)this, "forceDebuggerBytecodeGeneration", 0x1FuLL))
        {
          v212 = 0;
          __s1 = v6;
          v8 = 0;
          v207 = 0;
          v208 = 0;
          v210 = 0;
          v211 = 0;
          v10 = 0;
          v11 = 0;
          v209 = 0;
          HIDWORD(v206) = 0;
          v12 = 0;
          v13 = 0;
          v9 = 1;
          goto LABEL_6;
        }
        result = JSC::parse<BOOL>(v6);
        if ((unsigned __int16)result < 0x100u)
          return 0;
        *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x10000000;
        byte_1ECF4C274 = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      case 32:
        if (strncasecmp((const char *)this, "initialRepatchBufferingCountdown", 0x20uLL))
        {
          v212 = 0;
          __s1 = v6;
          v8 = 0;
          v9 = 0;
          v207 = 0;
          v208 = 0;
          v210 = 0;
          v211 = 0;
          v10 = 0;
          v11 = 0;
          v209 = 0;
          HIDWORD(v206) = 0;
          v13 = 0;
          v12 = 1;
          goto LABEL_6;
        }
        *(_DWORD *)v214 = 0;
        v47 = sscanf(v6, "%u", v214);
        result = 0;
        if (v47 != 1)
          return result;
        *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x800000;
        HIDWORD(xmmword_1ECF4C260) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      case 33:
        if (strncasecmp((const char *)this, "dumpGeneratedWebAssemblyBytecodes", 0x21uLL))
        {
          v212 = 0;
          __s1 = v6;
          v8 = 0;
          v9 = 0;
          v210 = 0;
          v211 = 0;
          v10 = 0;
          v11 = 0;
          v207 = 0;
          v209 = 0;
          HIDWORD(v206) = 0;
          v12 = 0;
          v13 = 0;
          v208 = 1;
          goto LABEL_6;
        }
        result = JSC::parse<BOOL>(v6);
        if ((unsigned __int16)result < 0x100u)
          return 0;
        *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x2000000;
        BYTE1(dword_1ECF4C270) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      case 35:
        if (strncasecmp((const char *)this, "debuggerTriggersBreakpointException", 0x23uLL))
        {
          v212 = 0;
          __s1 = v6;
          v8 = 0;
          v9 = 0;
          v208 = 0;
          v209 = 0;
          v210 = 0;
          v211 = 0;
          v10 = 0;
          v11 = 0;
          HIDWORD(v206) = 0;
          v207 = 0x100000000;
          v12 = 0;
          v13 = 0;
          goto LABEL_6;
        }
        result = JSC::parse<BOOL>(v6);
        if ((unsigned __int16)result < 0x100u)
          return 0;
        *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x20000000;
        byte_1ECF4C275 = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      case 37:
        if (strncasecmp((const char *)this, "dumpBytecodesBeforeGeneratorification", 0x25uLL))
        {
          if (!strncasecmp((const char *)this, "shadowChickenMaxTailDeletedFramesSize", 0x25uLL))
          {
            *(_DWORD *)v214 = 0;
            v55 = sscanf(v6, "%u", v214);
            result = 0;
            if (v55 != 1)
              return result;
            *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x1000000000;
            dword_1ECF4C280 = *(_DWORD *)v214;
            if (v2)
              goto LABEL_19;
            return 1;
          }
          v19 = v2;
          v9 = 0;
          LODWORD(v212) = 0;
          v20 = 0;
          v21 = 0;
          v22 = 0;
          v13 = 1;
LABEL_122:
          if (v20)
          {
            if (!strncasecmp((const char *)this, "useIterationIntrinsics", 0x16uLL))
            {
              result = JSC::parse<BOOL>(v6);
              if ((unsigned __int16)result < 0x100u)
                return 0;
              *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x2000000000;
              byte_1ECF4C284 = result;
              if (v19)
                goto LABEL_19;
              return 1;
            }
            LODWORD(v211) = 0;
            v23 = 1;
          }
          else
          {
            LODWORD(v211) = 0;
            v23 = 0;
          }
          v10 = v21;
          v8 = v22;
LABEL_127:
          if (v23)
          {
            v2 = v19;
            if (!strncasecmp((const char *)this, "needDisassemblySupport", 0x16uLL))
            {
              result = JSC::parse<BOOL>(v6);
              if ((unsigned __int16)result < 0x100u)
                return 0;
              *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x8000000000;
              LOBYTE(word_1ECF4C286) = result;
              if (v19)
                goto LABEL_19;
              return 1;
            }
            LODWORD(v210) = 0;
            HIDWORD(v211) = 1;
          }
          else
          {
            LODWORD(v210) = 0;
            HIDWORD(v211) = 0;
            v2 = v19;
          }
LABEL_131:
          if (!v9)
          {
            __s1 = v6;
            v207 = 0;
            v208 = 0;
            HIDWORD(v212) = 0;
            HIDWORD(v210) = 0;
            v11 = 0;
            v209 = 0;
            HIDWORD(v206) = 0;
            v12 = 0;
            goto LABEL_6;
          }
          if (strncasecmp((const char *)this, "dumpBaselineDisassembly", 0x17uLL))
          {
            __s1 = v6;
            LODWORD(v205) = 0;
            HIDWORD(v205) = v10;
            v202 = v13;
            v204 = 0;
            v9 = 0;
            v207 = 0;
            v208 = 0;
            HIDWORD(v212) = 0;
            HIDWORD(v210) = 0;
            v11 = 0;
            v209 = 0;
            v12 = 0;
            v14 = 0;
            v15 = 0;
            v206 = 1;
            goto LABEL_134;
          }
          result = JSC::parse<BOOL>(v6);
          if ((unsigned __int16)result < 0x100u)
            return 0;
          *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x80000000000;
          LOBYTE(dword_1ECF4C28A) = result;
          if (v2)
            goto LABEL_19;
          return 1;
        }
        result = JSC::parse<BOOL>(v6);
        if ((unsigned __int16)result < 0x100u)
          return 0;
        *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x40000000;
        byte_1ECF4C276 = result;
        if (v2)
          goto LABEL_19;
        return 1;
      case 38:
        if (strncasecmp((const char *)this, "reportMustSucceedExecutableAllocations", 0x26uLL))
        {
          v212 = 0;
          __s1 = v6;
          v8 = 0;
          v9 = 0;
          v207 = 0;
          v208 = 0;
          v210 = 0;
          v211 = 0;
          v10 = 0;
          v11 = 0;
          v209 = 0;
          v12 = 0;
          v13 = 0;
          HIDWORD(v206) = 1;
          goto LABEL_6;
        }
        result = JSC::parse<BOOL>(v6);
        if ((unsigned __int16)result < 0x100u)
          return 0;
        *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x400;
        byte_1ECF4C246 = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      default:
        v16 = 0;
        v13 = 0;
        goto LABEL_114;
    }
  }
  if (!strncasecmp((const char *)this, "useKernTCSM", 0xBuLL))
  {
    result = JSC::parse<BOOL>(v6);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 1;
    LOBYTE(word_1ECF4C232) = result;
    if (!v2)
      return 1;
LABEL_19:
    JSC::Options::notifyOptionsChanged((JSC::Options *)result, v17);
    return 1;
  }
  if (!strncasecmp((const char *)this, "dumpOptions", 0xBuLL))
  {
    *(_DWORD *)v214 = 0;
    v18 = sscanf(v6, "%u", v214);
    result = 0;
    if (v18 == 1)
    {
      *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 4;
      dword_1ECF4C234 = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  v212 = 0;
  __s1 = v6;
  v8 = 0;
  v9 = 0;
  v207 = 0;
  v208 = 0;
  v210 = 0;
  v211 = 0;
  v10 = 0;
  v11 = 0;
  v209 = 0;
  HIDWORD(v206) = 0;
  v12 = 0;
  v13 = 0;
LABEL_6:
  if (v7 == 21)
  {
    if (!strncasecmp((const char *)this, "dumpRegExpDisassembly", 0x15uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x400000000000;
        HIBYTE(dword_1ECF4C28A) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
    HIDWORD(v205) = v10;
    LODWORD(v206) = 0;
    v202 = v13;
    v204 = 0;
    v14 = 0;
    LODWORD(v205) = 0;
    v15 = 1;
  }
  else if (v7 == 18)
  {
    if (!strncasecmp((const char *)this, "dumpDFGDisassembly", 0x12uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x100000000000;
        BYTE1(dword_1ECF4C28A) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
    if (!strncasecmp((const char *)this, "dumpFTLDisassembly", 0x12uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x200000000000;
        BYTE2(dword_1ECF4C28A) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
    if (!strncasecmp((const char *)this, "dumpBBQDisassembly", 0x12uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x4000000000000;
        LOBYTE(word_1ECF4C2A0) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
    if (!strncasecmp((const char *)this, "dumpOMGDisassembly", 0x12uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x8000000000000;
        HIBYTE(word_1ECF4C2A0) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
    HIDWORD(v205) = v10;
    LODWORD(v206) = 0;
    v202 = v13;
    v204 = 0;
    v14 = 0;
    v15 = 0;
    LODWORD(v205) = 1;
  }
  else if (v8)
  {
    if (!strncasecmp((const char *)this, "dumpWebAssemblyDisassembly", 0x1AuLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x800000000000;
        byte_1ECF4C28E = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
    HIDWORD(v205) = v10;
    LODWORD(v206) = 0;
    v202 = v13;
    v204 = 0;
    v14 = 0;
    v15 = 0;
    LODWORD(v205) = 0;
    v8 = 1;
  }
  else if (v7 == 17)
  {
    if (!strncasecmp((const char *)this, "logJITCodeForPerf", 0x11uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result < 0x100u)
        return 0;
      *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x10000000000000;
      byte_1ECF4C2A2 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    HIDWORD(v205) = v10;
    LODWORD(v206) = 0;
    v202 = v13;
    v8 = 0;
    v14 = 0;
    v15 = 0;
    v204 = 1;
    LODWORD(v205) = 0;
  }
  else if (v7 == 29)
  {
    result = strncasecmp((const char *)this, "dumpWebAssemblySourceFileName", 0x1DuLL);
    if (!(_DWORD)result)
    {
      if (*__s1)
      {
        v49 = (WTF *)(strlen(__s1) + 1);
        v50 = (void *)WTF::fastMalloc(v49);
        result = (uint64_t)memcpy(v50, __s1, (size_t)v49);
      }
      else
      {
        v50 = 0;
      }
      *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x1000000000000;
      *(_QWORD *)&xmmword_1ECF4C290 = v50;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    result = strncasecmp((const char *)this, "webAssemblyOMGFunctionsToDump", 0x1DuLL);
    if (!(_DWORD)result)
    {
      if (*__s1)
      {
        v60 = (WTF *)(strlen(__s1) + 1);
        v61 = (void *)WTF::fastMalloc(v60);
        result = (uint64_t)memcpy(v61, __s1, (size_t)v60);
      }
      else
      {
        v61 = 0;
      }
      *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x2000000000000;
      *((_QWORD *)&xmmword_1ECF4C290 + 1) = v61;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    HIDWORD(v205) = v10;
    LODWORD(v206) = 0;
    v202 = v13;
    v204 = 0;
    v8 = 0;
    v15 = 0;
    LODWORD(v205) = 0;
    v14 = 1;
  }
  else
  {
    HIDWORD(v205) = v10;
    LODWORD(v206) = 0;
    v202 = v13;
    v204 = 0;
    v8 = 0;
    v14 = 0;
    v15 = 0;
    LODWORD(v205) = 0;
  }
LABEL_134:
  if (HIDWORD(v212))
  {
    if (!strncasecmp((const char *)this, "bytecodeRangeToJITCompile", 0x19uLL))
    {
      *(_DWORD *)v214 = 0;
      *(_QWORD *)&v214[8] = 0;
      *(_QWORD *)&v214[16] = 0;
      result = strcmp(__s1, "<null>");
      if ((_DWORD)result)
      {
        if (*__s1 == 33)
          v25 = 3;
        else
          v25 = 2;
        if (*__s1 == 33)
          v26 = __s1 + 1;
        else
          v26 = __s1;
        v27 = sscanf(v26, " %u:%u", &v214[16], &v214[20]);
        if ((v27 + 1) < 2)
          return 0;
        if (v27 == 1)
        {
          *(_DWORD *)&v214[20] = *(_DWORD *)&v214[16];
        }
        else if (*(_DWORD *)&v214[16] > *(_DWORD *)&v214[20])
        {
          return 0;
        }
        v51 = (WTF *)(strlen(__s1) + 1);
        v52 = (void *)WTF::fastMalloc(v51);
        result = (uint64_t)memcpy(v52, __s1, (size_t)v51);
        *(_QWORD *)&v214[8] = v52;
      }
      else
      {
        v25 = 0;
      }
      *(_DWORD *)v214 = v25;
      qword_1ECF4C2C0 = *(_QWORD *)&v214[16];
      v17 = *(uint8x8_t *)&v214[1];
      *(_OWORD *)((char *)&dword_1ECF4C2B0 + 1) = *(_OWORD *)&v214[1];
      *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x40000000000000;
      LOBYTE(dword_1ECF4C2B0) = v25;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    if (!strncasecmp((const char *)this, "bytecodeRangeToDFGCompile", 0x19uLL))
    {
      *(_DWORD *)v214 = 0;
      *(_QWORD *)&v214[8] = 0;
      *(_QWORD *)&v214[16] = 0;
      result = strcmp(__s1, "<null>");
      if ((_DWORD)result)
      {
        if (*__s1 == 33)
          v28 = 3;
        else
          v28 = 2;
        if (*__s1 == 33)
          v29 = __s1 + 1;
        else
          v29 = __s1;
        v30 = sscanf(v29, " %u:%u", &v214[16], &v214[20]);
        if ((v30 + 1) < 2)
          return 0;
        if (v30 == 1)
        {
          *(_DWORD *)&v214[20] = *(_DWORD *)&v214[16];
        }
        else if (*(_DWORD *)&v214[16] > *(_DWORD *)&v214[20])
        {
          return 0;
        }
        v62 = (WTF *)(strlen(__s1) + 1);
        v63 = (void *)WTF::fastMalloc(v62);
        result = (uint64_t)memcpy(v63, __s1, (size_t)v62);
        *(_QWORD *)&v214[8] = v63;
      }
      else
      {
        v28 = 0;
      }
      *(_DWORD *)v214 = v28;
      qword_1ECF4C2D8 = *(_QWORD *)&v214[16];
      v17 = *(uint8x8_t *)&v214[1];
      *(_OWORD *)((char *)&dword_1ECF4C2C8 + 1) = *(_OWORD *)&v214[1];
      *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x80000000000000;
      LOBYTE(dword_1ECF4C2C8) = v28;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    if (!strncasecmp((const char *)this, "bytecodeRangeToFTLCompile", 0x19uLL))
    {
      *(_DWORD *)v214 = 0;
      *(_QWORD *)&v214[8] = 0;
      *(_QWORD *)&v214[16] = 0;
      result = strcmp(__s1, "<null>");
      if ((_DWORD)result)
      {
        if (*__s1 == 33)
          v33 = 3;
        else
          v33 = 2;
        if (*__s1 == 33)
          v34 = __s1 + 1;
        else
          v34 = __s1;
        v35 = sscanf(v34, " %u:%u", &v214[16], &v214[20]);
        if ((v35 + 1) < 2)
          return 0;
        if (v35 == 1)
        {
          *(_DWORD *)&v214[20] = *(_DWORD *)&v214[16];
        }
        else if (*(_DWORD *)&v214[16] > *(_DWORD *)&v214[20])
        {
          return 0;
        }
        v66 = (WTF *)(strlen(__s1) + 1);
        v67 = (void *)WTF::fastMalloc(v66);
        result = (uint64_t)memcpy(v67, __s1, (size_t)v66);
        *(_QWORD *)&v214[8] = v67;
      }
      else
      {
        v33 = 0;
      }
      *(_DWORD *)v214 = v33;
      qword_1ECF4C2F0 = *(_QWORD *)&v214[16];
      v17 = *(uint8x8_t *)&v214[1];
      *(_OWORD *)((char *)&dword_1ECF4C2E0 + 1) = *(_OWORD *)&v214[1];
      *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x100000000000000;
      LOBYTE(dword_1ECF4C2E0) = v33;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  if ((_DWORD)v212)
  {
    result = strncasecmp((const char *)this, "jitAllowlist", 0xCuLL);
    if (!(_DWORD)result)
    {
      if (*__s1)
      {
        v31 = (WTF *)(strlen(__s1) + 1);
        v32 = (void *)WTF::fastMalloc(v31);
        result = (uint64_t)memcpy(v32, __s1, (size_t)v31);
      }
      else
      {
        v32 = 0;
      }
      *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x200000000000000;
      *(_QWORD *)&xmmword_1ECF4C2F8 = v32;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    result = strncasecmp((const char *)this, "dfgAllowlist", 0xCuLL);
    if (!(_DWORD)result)
    {
      if (*__s1)
      {
        v36 = (WTF *)(strlen(__s1) + 1);
        v37 = (void *)WTF::fastMalloc(v36);
        result = (uint64_t)memcpy(v37, __s1, (size_t)v36);
      }
      else
      {
        v37 = 0;
      }
      *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x400000000000000;
      *((_QWORD *)&xmmword_1ECF4C2F8 + 1) = v37;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    result = strncasecmp((const char *)this, "ftlAllowlist", 0xCuLL);
    if (!(_DWORD)result)
    {
      if (*__s1)
      {
        v38 = (WTF *)(strlen(__s1) + 1);
        v39 = (void *)WTF::fastMalloc(v38);
        result = (uint64_t)memcpy(v39, __s1, (size_t)v38);
      }
      else
      {
        v39 = 0;
      }
      *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x800000000000000;
      *(_QWORD *)&xmmword_1ECF4C308 = v39;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    result = strncasecmp((const char *)this, "bbqAllowlist", 0xCuLL);
    if (!(_DWORD)result)
    {
      if (*__s1)
      {
        v53 = (WTF *)(strlen(__s1) + 1);
        v54 = (void *)WTF::fastMalloc(v53);
        result = (uint64_t)memcpy(v54, __s1, (size_t)v53);
      }
      else
      {
        v54 = 0;
      }
      *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x1000000000000000;
      *((_QWORD *)&xmmword_1ECF4C308 + 1) = v54;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    result = strncasecmp((const char *)this, "omgAllowlist", 0xCuLL);
    if (!(_DWORD)result)
    {
      if (*__s1)
      {
        v64 = (WTF *)(strlen(__s1) + 1);
        v65 = (void *)WTF::fastMalloc(v64);
        result = (uint64_t)memcpy(v65, __s1, (size_t)v64);
      }
      else
      {
        v65 = 0;
      }
      *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x2000000000000000;
      qword_1ECF4C318 = (uint64_t)v65;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  HIDWORD(v201) = v7 == 19;
  if (v7 == 19 && !strncasecmp((const char *)this, "dumpSourceAtDFGTime", 0x13uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x4000000000000000;
    byte_1ECF4C320 = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (!v15)
    goto LABEL_149;
  if (!strncasecmp((const char *)this, "dumpBytecodeAtDFGTime", 0x15uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *(_QWORD *)&xmmword_1ECF58F20 = xmmword_1ECF58F20 | 0x8000000000000000;
    byte_1ECF4C321 = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (!strncasecmp((const char *)this, "dumpGraphAfterParsing", 0x15uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 1uLL;
    byte_1ECF4C322 = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
LABEL_149:
  if (HIDWORD(v205) && !strncasecmp((const char *)this, "dumpGraphAtEachPhase", 0x14uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 2uLL;
    byte_1ECF4C323 = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if ((_DWORD)v206)
  {
    if (!strncasecmp((const char *)this, "dumpDFGGraphAtEachPhase", 0x17uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 4uLL;
        byte_1ECF4C324 = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else if (v8)
  {
    if (!strncasecmp((const char *)this, "dumpDFGFTLGraphAtEachPhase", 0x1AuLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result < 0x100u)
        return 0;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 8uLL;
      byte_1ECF4C325 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    v8 = 1;
  }
  if (HIDWORD(v211) && !strncasecmp((const char *)this, "dumpB3GraphAtEachPhase", 0x16uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x10uLL;
    byte_1ECF4C326 = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if ((_DWORD)v206)
  {
    if (!strncasecmp((const char *)this, "dumpAirGraphAtEachPhase", 0x17uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x20uLL;
        byte_1ECF4C327 = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else if (HIDWORD(v212))
  {
    if (!strncasecmp((const char *)this, "verboseDFGBytecodeParsing", 0x19uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result < 0x100u)
        return 0;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x40uLL;
      LOBYTE(word_1ECF4C328) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    HIDWORD(v212) = 1;
  }
  else
  {
    HIDWORD(v212) = 0;
  }
  if (HIDWORD(v210) && !strncasecmp((const char *)this, "safepointBeforeEachPhase", 0x18uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x80uLL;
    HIBYTE(word_1ECF4C328) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if ((_DWORD)v205 && !strncasecmp((const char *)this, "verboseCompilation", 0x12uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x100uLL;
    LOBYTE(qword_1ECF4C32A) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (!v15)
    goto LABEL_364;
  if (!strncasecmp((const char *)this, "verboseFTLCompilation", 0x15uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x200uLL;
    BYTE1(qword_1ECF4C32A) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (!strncasecmp((const char *)this, "logCompilationChanges", 0x15uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x400uLL;
    BYTE2(qword_1ECF4C32A) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
LABEL_364:
  LODWORD(v201) = v7 == 13;
  if (v7 == 13 && !strncasecmp((const char *)this, "useJITAsserts", 0xDuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x1000uLL;
    BYTE4(qword_1ECF4C32A) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (HIDWORD(v209) && !strncasecmp((const char *)this, "validateDoesGC", 0xEuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x2000uLL;
    BYTE5(qword_1ECF4C32A) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (v7 == 13 && !strncasecmp((const char *)this, "validateGraph", 0xDuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x4000uLL;
    BYTE6(qword_1ECF4C32A) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (!HIDWORD(v210))
    goto LABEL_373;
  if (!strncasecmp((const char *)this, "validateGraphAtEachPhase", 0x18uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x8000uLL;
    HIBYTE(qword_1ECF4C32A) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (!strncasecmp((const char *)this, "verboseValidationFailure", 0x18uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x10000uLL;
    LOBYTE(qword_1ECF4C332) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
LABEL_373:
  if ((_DWORD)v209 && !strncasecmp((const char *)this, "verboseOSR", 0xAuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x20000uLL;
    BYTE1(qword_1ECF4C332) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (!v204)
    goto LABEL_378;
  if (!strncasecmp((const char *)this, "verboseDFGOSRExit", 0x11uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x40000uLL;
    BYTE2(qword_1ECF4C332) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (!strncasecmp((const char *)this, "verboseFTLOSRExit", 0x11uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x80000uLL;
    BYTE3(qword_1ECF4C332) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
LABEL_378:
  if ((_DWORD)v210 && !strncasecmp((const char *)this, "verboseCallLink", 0xFuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x100000uLL;
    BYTE4(qword_1ECF4C332) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if ((_DWORD)v206 && !strncasecmp((const char *)this, "verboseCompilationQueue", 0x17uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x200000uLL;
    BYTE5(qword_1ECF4C332) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if ((_DWORD)v205 && !strncasecmp((const char *)this, "reportCompileTimes", 0x12uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x400000uLL;
    BYTE6(qword_1ECF4C332) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (v8 && !strncasecmp((const char *)this, "reportBaselineCompileTimes", 0x1AuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x800000uLL;
    HIBYTE(qword_1ECF4C332) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (v15)
  {
    if (!strncasecmp((const char *)this, "reportDFGCompileTimes", 0x15uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result < 0x100u)
        return 0;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x1000000uLL;
      unk_1ECF4C33A = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    if (!strncasecmp((const char *)this, "reportFTLCompileTimes", 0x15uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result < 0x100u)
        return 0;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x2000000uLL;
      unk_1ECF4C33B = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  if ((_DWORD)v206 && !strncasecmp((const char *)this, "reportTotalCompileTimes", 0x17uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x4000000uLL;
    unk_1ECF4C33C = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (v15)
  {
    if (!strncasecmp((const char *)this, "reportTotalPhaseTimes", 0x15uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result < 0x100u)
        return 0;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x8000000uLL;
      byte_1ECF4C33D = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    v200 = 1;
  }
  else
  {
    v200 = 0;
  }
  v24 = v202;
LABEL_539:
  if (v8 && !strncasecmp((const char *)this, "reportBytecodeCompileTimes", 0x1AuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x20000000uLL;
    unk_1ECF4C33F = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if ((_DWORD)v210 && !strncasecmp((const char *)this, "countParseTimes", 0xFuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x40000000uLL;
    byte_1ECF4C340 = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if ((_DWORD)v205 && !strncasecmp((const char *)this, "verboseExitProfile", 0x12uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x80000000uLL;
    byte_1ECF4C341 = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if ((_DWORD)v209 && !strncasecmp((const char *)this, "verboseCFA", 0xAuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x100000000uLL;
    byte_1ECF4C342 = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (v204 && !strncasecmp((const char *)this, "verboseDFGFailure", 0x11uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x200000000uLL;
    byte_1ECF4C343 = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (HIDWORD(v201) && !strncasecmp((const char *)this, "verboseFTLToJSThunk", 0x13uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x400000000uLL;
    byte_1ECF4C344 = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (v204)
  {
    if (!strncasecmp((const char *)this, "verboseFTLFailure", 0x11uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result < 0x100u)
        return 0;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x800000000uLL;
      byte_1ECF4C345 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    if (!strncasecmp((const char *)this, "alwaysComputeHash", 0x11uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result < 0x100u)
        return 0;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x1000000000uLL;
      byte_1ECF4C346 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  v203 = v14;
  if ((_DWORD)v209 && !strncasecmp((const char *)this, "testTheFTL", 0xAuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x2000000000uLL;
    byte_1ECF4C347 = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  v72 = v24;
  if (HIDWORD(v205) && !strncasecmp((const char *)this, "verboseSanitizeStack", 0x14uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x4000000000uLL;
    byte_1ECF4C348 = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (v204 && !strncasecmp((const char *)this, "useGenerationalGC", 0x11uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x8000000000uLL;
    LOBYTE(word_1ECF4C349) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if ((_DWORD)v210 && !strncasecmp((const char *)this, "useConcurrentGC", 0xFuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x10000000000uLL;
    HIBYTE(word_1ECF4C349) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (HIDWORD(v201) && !strncasecmp((const char *)this, "collectContinuously", 0x13uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x20000000000uLL;
    byte_1ECF4C34B = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (HIDWORD(v208) && !strncasecmp((const char *)this, "collectContinuouslyPeriodMS", 0x1BuLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result != 1)
      return 0;
    v17 = *(uint8x8_t *)v214;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x40000000000uLL;
    qword_1ECF4C350 = *(_QWORD *)v214;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if ((_DWORD)v205 && !strncasecmp((const char *)this, "forceFencedBarrier", 0x12uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x80000000000uLL;
    LOBYTE(dword_1ECF4C358) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (HIDWORD(v200) && !strncasecmp((const char *)this, "verboseVisitRace", 0x10uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x100000000000uLL;
    BYTE1(dword_1ECF4C358) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (v7 == 45)
  {
    if (!strncasecmp((const char *)this, "optimizeParallelSlotVisitorsForStoppedMutator", 0x2DuLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result < 0x100u)
        return 0;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x200000000000uLL;
      BYTE2(dword_1ECF4C358) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  else if (v8)
  {
    if (!strncasecmp((const char *)this, "verboseHeapSnapshotLogging", 0x1AuLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result < 0x100u)
        return 0;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x400000000000uLL;
      HIBYTE(dword_1ECF4C358) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  else if ((_DWORD)v201)
  {
    if (!strncasecmp((const char *)this, "largeHeapSize", 0xDuLL))
    {
      *(_DWORD *)v214 = 0;
      v73 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v73 != 1)
        return result;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x800000000000uLL;
      LODWORD(qword_1ECF4C35C) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    if (!strncasecmp((const char *)this, "smallHeapSize", 0xDuLL))
    {
      *(_DWORD *)v214 = 0;
      v74 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v74 != 1)
        return result;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x1000000000000uLL;
      HIDWORD(qword_1ECF4C35C) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  if (HIDWORD(v205) && !strncasecmp((const char *)this, "smallHeapRAMFraction", 0x14uLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result != 1)
      return 0;
    v17 = *(uint8x8_t *)v214;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x2000000000000uLL;
    *(_QWORD *)&xmmword_1ECF4C368 = *(_QWORD *)v214;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if ((_DWORD)v200)
  {
    if (!strncasecmp((const char *)this, "smallHeapGrowthFactor", 0x15uLL))
    {
      *(_QWORD *)v214 = 0;
      result = sscanf(__s1, "%lf", v214);
      if ((_DWORD)result != 1)
        return 0;
      v17 = *(uint8x8_t *)v214;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x4000000000000uLL;
      *((_QWORD *)&xmmword_1ECF4C368 + 1) = *(_QWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    if (!strncasecmp((const char *)this, "mediumHeapRAMFraction", 0x15uLL))
    {
      *(_QWORD *)v214 = 0;
      result = sscanf(__s1, "%lf", v214);
      if ((_DWORD)result != 1)
        return 0;
      v17 = *(uint8x8_t *)v214;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x8000000000000uLL;
      *(_QWORD *)&xmmword_1ECF4C378 = *(_QWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  if (HIDWORD(v211) && !strncasecmp((const char *)this, "mediumHeapGrowthFactor", 0x16uLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result != 1)
      return 0;
    v17 = *(uint8x8_t *)v214;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x10000000000000uLL;
    *((_QWORD *)&xmmword_1ECF4C378 + 1) = *(_QWORD *)v214;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if ((_DWORD)v200 && !strncasecmp((const char *)this, "largeHeapGrowthFactor", 0x15uLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result != 1)
      return 0;
    v17 = *(uint8x8_t *)v214;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x20000000000000uLL;
    *(_QWORD *)&xmmword_1ECF4C388 = *(_QWORD *)v214;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (HIDWORD(v211) && !strncasecmp((const char *)this, "miniVMHeapGrowthFactor", 0x16uLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result != 1)
      return 0;
    v17 = *(uint8x8_t *)v214;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x40000000000000uLL;
    *((_QWORD *)&xmmword_1ECF4C388 + 1) = *(_QWORD *)v214;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (HIDWORD(v212))
  {
    if (!strncasecmp((const char *)this, "criticalGCMemoryThreshold", 0x19uLL))
    {
      *(_QWORD *)v214 = 0;
      result = sscanf(__s1, "%lf", v214);
      if ((_DWORD)result != 1)
        return 0;
      v17 = *(uint8x8_t *)v214;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x80000000000000uLL;
      *(_QWORD *)&xmmword_1ECF4C398 = *(_QWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    if (!strncasecmp((const char *)this, "minimumMutatorUtilization", 0x19uLL))
    {
      *(_QWORD *)v214 = 0;
      result = sscanf(__s1, "%lf", v214);
      if ((_DWORD)result != 1)
        return 0;
      v17 = *(uint8x8_t *)v214;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x200000000000000uLL;
      *(_QWORD *)&xmmword_1ECF4C3A8 = *(_QWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    if (!strncasecmp((const char *)this, "maximumMutatorUtilization", 0x19uLL))
    {
      *(_QWORD *)v214 = 0;
      result = sscanf(__s1, "%lf", v214);
      if ((_DWORD)result != 1)
        return 0;
      v17 = *(uint8x8_t *)v214;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x400000000000000uLL;
      *((_QWORD *)&xmmword_1ECF4C3A8 + 1) = *(_QWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    if (!strncasecmp((const char *)this, "epsilonMutatorUtilization", 0x19uLL))
    {
      *(_QWORD *)v214 = 0;
      result = sscanf(__s1, "%lf", v214);
      if ((_DWORD)result != 1)
        return 0;
      v17 = *(uint8x8_t *)v214;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x800000000000000uLL;
      *(_QWORD *)&xmmword_1ECF4C3B8 = *(_QWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  else if ((_DWORD)v208)
  {
    if (!strncasecmp((const char *)this, "customFullGCCallbackBailThreshold", 0x21uLL))
    {
      *(_QWORD *)v214 = 0;
      result = sscanf(__s1, "%lf", v214);
      if ((_DWORD)result != 1)
        return 0;
      v17 = *(uint8x8_t *)v214;
      *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x100000000000000uLL;
      *((_QWORD *)&xmmword_1ECF4C398 + 1) = *(_QWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  else if ((_DWORD)v206 && !strncasecmp((const char *)this, "concurrentGCMaxHeadroom", 0x17uLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result != 1)
      return 0;
    v17 = *(uint8x8_t *)v214;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x1000000000000000uLL;
    *((_QWORD *)&xmmword_1ECF4C3B8 + 1) = *(_QWORD *)v214;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (HIDWORD(v205) && !strncasecmp((const char *)this, "concurrentGCPeriodMS", 0x14uLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result != 1)
      return 0;
    v17 = *(uint8x8_t *)v214;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x2000000000000000uLL;
    qword_1ECF4C3C8 = *(_QWORD *)v214;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (v203 && !strncasecmp((const char *)this, "useStochasticMutatorScheduler", 0x1DuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x4000000000000000uLL;
    byte_1ECF4C3D0 = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (HIDWORD(v200) && !strncasecmp((const char *)this, "minimumGCPauseMS", 0x10uLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result != 1)
      return 0;
    v17 = *(uint8x8_t *)v214;
    *((_QWORD *)&xmmword_1ECF58F20 + 1) |= 0x8000000000000000;
    *(_QWORD *)&xmmword_1ECF4C3D8 = *(_QWORD *)v214;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if ((_DWORD)v212 && !strncasecmp((const char *)this, "gcPauseScale", 0xCuLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result != 1)
      return 0;
    v17 = *(uint8x8_t *)v214;
    qword_1ECF58F30 |= 1uLL;
    *((_QWORD *)&xmmword_1ECF4C3D8 + 1) = *(_QWORD *)v214;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (HIDWORD(v200) && !strncasecmp((const char *)this, "gcIncrementBytes", 0x10uLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result != 1)
      return 0;
    v17 = *(uint8x8_t *)v214;
    qword_1ECF58F30 |= 2uLL;
    *(_QWORD *)&xmmword_1ECF4C3E8 = *(_QWORD *)v214;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (HIDWORD(v201) && !strncasecmp((const char *)this, "gcIncrementMaxBytes", 0x13uLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result != 1)
      return 0;
    v17 = *(uint8x8_t *)v214;
    qword_1ECF58F30 |= 4uLL;
    *((_QWORD *)&xmmword_1ECF4C3E8 + 1) = *(_QWORD *)v214;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (HIDWORD(v200) && !strncasecmp((const char *)this, "gcIncrementScale", 0x10uLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result != 1)
      return 0;
    v17 = *(uint8x8_t *)v214;
    qword_1ECF58F30 |= 8uLL;
    qword_1ECF4C3F8 = *(_QWORD *)v214;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (v204 && !strncasecmp((const char *)this, "scribbleFreeCells", 0x11uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    qword_1ECF58F30 |= 0x10uLL;
    byte_1ECF4C400 = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (HIDWORD(v205) && !strncasecmp((const char *)this, "sizeClassProgression", 0x14uLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result != 1)
      return 0;
    v17 = *(uint8x8_t *)v214;
    qword_1ECF58F30 |= 0x20uLL;
    qword_1ECF4C408 = *(_QWORD *)v214;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if ((_DWORD)v206 && !strncasecmp((const char *)this, "preciseAllocationCutoff", 0x17uLL))
  {
    *(_DWORD *)v214 = 0;
    v75 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v75 != 1)
      return result;
    qword_1ECF58F30 |= 0x40uLL;
    dword_1ECF4C410 = *(_DWORD *)v214;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if ((_DWORD)v210 && !strncasecmp((const char *)this, "dumpSizeClasses", 0xFuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    qword_1ECF58F30 |= 0x80uLL;
    LOBYTE(qword_1ECF4C414) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (HIDWORD(v200) && !strncasecmp((const char *)this, "useBumpAllocator", 0x10uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    qword_1ECF58F30 |= 0x100uLL;
    BYTE1(qword_1ECF4C414) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (HIDWORD(v207) && !strncasecmp((const char *)this, "stealEmptyBlocksFromOtherAllocators", 0x23uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    qword_1ECF58F30 |= 0x200uLL;
    BYTE2(qword_1ECF4C414) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (HIDWORD(v212))
  {
    if (!strncasecmp((const char *)this, "eagerlyUpdateTopCallFrame", 0x19uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result < 0x100u)
        return 0;
      qword_1ECF58F30 |= 0x400uLL;
      BYTE3(qword_1ECF4C414) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  else if ((_DWORD)v206 && !strncasecmp((const char *)this, "dumpZappedCellCrashData", 0x17uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    qword_1ECF58F30 |= 0x800uLL;
    BYTE4(qword_1ECF4C414) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (HIDWORD(v200))
  {
    if (!strncasecmp((const char *)this, "useOSREntryToDFG", 0x10uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result < 0x100u)
        return 0;
      qword_1ECF58F30 |= 0x1000uLL;
      BYTE5(qword_1ECF4C414) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    if (!strncasecmp((const char *)this, "useOSREntryToFTL", 0x10uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result < 0x100u)
        return 0;
      qword_1ECF58F30 |= 0x2000uLL;
      BYTE6(qword_1ECF4C414) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  if ((_DWORD)v207 && !strncasecmp((const char *)this, "useFTLJIT", 9uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    qword_1ECF58F30 |= 0x4000uLL;
    HIBYTE(qword_1ECF4C414) = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (v8 && !strncasecmp((const char *)this, "validateFTLOSRExitLiveness", 0x1AuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result < 0x100u)
      return 0;
    qword_1ECF58F30 |= 0x8000uLL;
    byte_1ECF4C41C = result;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (v204 && !strncasecmp((const char *)this, "defaultB3OptLevel", 0x11uLL))
  {
    *(_DWORD *)v214 = 0;
    v77 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v77 != 1)
      return result;
    qword_1ECF58F30 |= 0x10000uLL;
    dword_1ECF4C420 = *(_DWORD *)v214;
    if (!v2)
      return 1;
    goto LABEL_19;
  }
  if (v8)
  {
    if (!strncasecmp((const char *)this, "b3AlwaysFailsBeforeCompile", 0x1AuLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result < 0x100u)
        return 0;
      qword_1ECF58F30 |= 0x20000uLL;
      LOBYTE(dword_1ECF4C424) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  else if ((_DWORD)v206)
  {
    if (!strncasecmp((const char *)this, "b3AlwaysFailsBeforeLink", 0x17uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result < 0x100u)
        return 0;
      qword_1ECF58F30 |= 0x40000uLL;
      BYTE1(dword_1ECF4C424) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    if (!strncasecmp((const char *)this, "validateSerializedValue", 0x17uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result < 0x100u)
        return 0;
      qword_1ECF58F30 |= 0x80000uLL;
      BYTE2(dword_1ECF4C424) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  if ((_DWORD)v209 && !strncasecmp((const char *)this, "ftlCrashes", 0xAuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      qword_1ECF58F30 |= 0x100000uLL;
      HIBYTE(dword_1ECF4C424) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v203 && !strncasecmp((const char *)this, "clobberAllRegsInFTLICSlowPath", 0x1DuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      qword_1ECF58F30 |= 0x200000uLL;
      LOBYTE(word_1ECF4C428) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v200 && !strncasecmp((const char *)this, "useJITDebugAssertions", 0x15uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      qword_1ECF58F30 |= 0x400000uLL;
      HIBYTE(word_1ECF4C428) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v204 && !strncasecmp((const char *)this, "useAccessInlining", 0x11uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      qword_1ECF58F30 |= 0x800000uLL;
      byte_1ECF4C42A = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v210) && !strncasecmp((const char *)this, "maxAccessVariantListSize", 0x18uLL))
  {
    *(_DWORD *)v214 = 0;
    v78 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v78 == 1)
    {
      qword_1ECF58F30 |= 0x1000000uLL;
      dword_1ECF4C42C = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v7 == 30 && !strncasecmp((const char *)this, "usePolyvariantDevirtualization", 0x1EuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      qword_1ECF58F30 |= 0x2000000uLL;
      LOBYTE(word_1ECF4C430) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v11 && !strncasecmp((const char *)this, "usePolymorphicAccessInlining", 0x1CuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      qword_1ECF58F30 |= 0x4000000uLL;
      HIBYTE(word_1ECF4C430) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v7 == 36)
  {
    if (!strncasecmp((const char *)this, "maxPolymorphicAccessInliningListSize", 0x24uLL))
    {
      *(_DWORD *)v214 = 0;
      v76 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v76 == 1)
      {
        qword_1ECF58F30 |= 0x8000000uLL;
        dword_1ECF4C434 = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
    goto LABEL_895;
  }
  if (v8)
  {
    if (!strncasecmp((const char *)this, "usePolymorphicCallInlining", 0x1AuLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        qword_1ECF58F30 |= 0x10000000uLL;
        LOBYTE(word_1ECF4C438) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
    goto LABEL_895;
  }
  if (v7 == 42)
  {
    if (!strncasecmp((const char *)this, "usePolymorphicCallInliningForNonStubStatus", 0x2AuLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        qword_1ECF58F30 |= 0x20000000uLL;
        HIBYTE(word_1ECF4C438) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
    goto LABEL_895;
  }
  if ((_DWORD)v208)
  {
    if (!strncasecmp((const char *)this, "maxPolymorphicCallVariantListSize", 0x21uLL))
    {
      *(_DWORD *)v214 = 0;
      v79 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v79 == 1)
      {
        qword_1ECF58F30 |= 0x40000000uLL;
        LODWORD(xmmword_1ECF4C43C) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
LABEL_895:
    v199 = 0;
    if (!v24)
      goto LABEL_897;
    goto LABEL_896;
  }
  if (v7 == 51)
  {
    if (!strncasecmp((const char *)this, "maxPolymorphicCallVariantListSizeForWebAssemblyToJS", 0x33uLL))
    {
      *(_DWORD *)v214 = 0;
      v87 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v87 == 1)
      {
        qword_1ECF58F30 |= 0x100000000uLL;
        DWORD2(xmmword_1ECF4C43C) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
    v199 = 0x100000000;
    if (!v24)
      goto LABEL_897;
LABEL_896:
    if (!strncasecmp((const char *)this, "maxPolymorphicCallVariantsForInlining", 0x25uLL))
    {
      *(_DWORD *)v214 = 0;
      v80 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v80 == 1)
      {
        qword_1ECF58F30 |= 0x200000000uLL;
        HIDWORD(xmmword_1ECF4C43C) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
    goto LABEL_897;
  }
  if (v7 != 43)
    goto LABEL_895;
  if (!strncasecmp((const char *)this, "maxPolymorphicCallVariantListSizeForTopTier", 0x2BuLL))
  {
    *(_DWORD *)v214 = 0;
    v86 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v86 == 1)
    {
      qword_1ECF58F30 |= 0x80000000uLL;
      DWORD1(xmmword_1ECF4C43C) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  v199 = 1;
  if (v24)
    goto LABEL_896;
LABEL_897:
  if ((_DWORD)v200 && !strncasecmp((const char *)this, "frequentCallThreshold", 0x15uLL))
  {
    *(_DWORD *)v214 = 0;
    v81 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v81 == 1)
    {
      qword_1ECF58F30 |= 0x400000000uLL;
      dword_1ECF4C44C = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (HIDWORD(v211) && !strncasecmp((const char *)this, "minimumCallToKnownRate", 0x16uLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result == 1)
    {
      v17 = *(uint8x8_t *)v214;
      qword_1ECF58F30 |= 0x800000000uLL;
      qword_1ECF4C450 = *(_QWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v200) && !strncasecmp((const char *)this, "createPreHeaders", 0x10uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      qword_1ECF58F30 |= 0x1000000000uLL;
      LOBYTE(dword_1ECF4C458) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v204 && !strncasecmp((const char *)this, "useMovHintRemoval", 0x11uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      qword_1ECF58F30 |= 0x2000000000uLL;
      BYTE1(dword_1ECF4C458) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v205 && !strncasecmp((const char *)this, "usePutStackSinking", 0x12uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      qword_1ECF58F30 |= 0x4000000000uLL;
      BYTE2(dword_1ECF4C458) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v8 && !strncasecmp((const char *)this, "useObjectAllocationSinking", 0x1AuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      qword_1ECF58F30 |= 0x8000000000uLL;
      HIBYTE(dword_1ECF4C458) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v211) && !strncasecmp((const char *)this, "useValueRepElimination", 0x16uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      qword_1ECF58F30 |= 0x10000000000uLL;
      LOBYTE(word_1ECF4C45C) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v200 && !strncasecmp((const char *)this, "useArityFixupInlining", 0x15uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      qword_1ECF58F30 |= 0x20000000000uLL;
      HIBYTE(word_1ECF4C45C) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v206)
  {
    if (!strncasecmp((const char *)this, "logExecutableAllocation", 0x17uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        qword_1ECF58F30 |= 0x40000000000uLL;
        byte_1ECF4C45E = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
    goto LABEL_936;
  }
  if (v7 != 41)
  {
LABEL_936:
    v82 = 0;
    goto LABEL_937;
  }
  if (!strncasecmp((const char *)this, "maxDFGNodesInBasicBlockForPreciseAnalysis", 0x29uLL))
  {
    *(_DWORD *)v214 = 0;
    v85 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v85 == 1)
    {
      qword_1ECF58F30 |= 0x80000000000uLL;
      dword_1ECF4C460 = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  v82 = 1;
LABEL_937:
  if (HIDWORD(v200) && !strncasecmp((const char *)this, "useConcurrentJIT", 0x10uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      qword_1ECF58F30 |= 0x100000000000uLL;
      byte_1ECF4C464 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v206)
  {
    if (!strncasecmp((const char *)this, "numberOfWorklistThreads", 0x17uLL))
    {
      *(_DWORD *)v214 = 0;
      v83 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v83 == 1)
      {
        qword_1ECF58F30 |= 0x200000000000uLL;
        LODWORD(qword_1ECF4C468) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
  }
  else if (v8)
  {
    if (!strncasecmp((const char *)this, "numberOfDFGCompilerThreads", 0x1AuLL))
    {
      *(_DWORD *)v214 = 0;
      v90 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v90 == 1)
      {
        qword_1ECF58F30 |= 0x400000000000uLL;
        HIDWORD(qword_1ECF4C468) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
    if (!strncasecmp((const char *)this, "numberOfFTLCompilerThreads", 0x1AuLL))
    {
      *(_DWORD *)v214 = 0;
      v84 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v84 == 1)
      {
        qword_1ECF58F30 |= 0x800000000000uLL;
        dword_1ECF4C470 = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
  }
  else
  {
    if (v7 == 34)
    {
      if (!strncasecmp((const char *)this, "numberOfWebAssemblyCompilerThreads", 0x22uLL))
      {
        *(_DWORD *)v214 = 0;
        v93 = sscanf(__s1, "%u", v214);
        result = 0;
        if (v93 == 1)
        {
          qword_1ECF58F30 |= 0x1000000000000uLL;
          dword_1ECF4C474 = *(_DWORD *)v214;
          if (!v2)
            return 1;
          goto LABEL_19;
        }
        return result;
      }
      v198 = 1;
      goto LABEL_984;
    }
    if ((_DWORD)v208)
    {
      if (!strncasecmp((const char *)this, "priorityDeltaOfDFGCompilerThreads", 0x21uLL))
      {
        *(_DWORD *)v214 = 0;
        v96 = sscanf(__s1, "%d", v214);
        result = 0;
        if (v96 == 1)
        {
          qword_1ECF58F30 |= 0x2000000000000uLL;
          dword_1ECF4C478 = *(_DWORD *)v214;
          if (!v2)
            return 1;
          goto LABEL_19;
        }
        return result;
      }
      if (!strncasecmp((const char *)this, "priorityDeltaOfFTLCompilerThreads", 0x21uLL))
      {
        *(_DWORD *)v214 = 0;
        v102 = sscanf(__s1, "%d", v214);
        result = 0;
        if (v102 == 1)
        {
          qword_1ECF58F30 |= 0x4000000000000uLL;
          dword_1ECF4C47C = *(_DWORD *)v214;
          if (!v2)
            return 1;
          goto LABEL_19;
        }
        return result;
      }
    }
  }
  v198 = 0;
LABEL_984:
  if (v82 && !strncasecmp((const char *)this, "priorityDeltaOfWebAssemblyCompilerThreads", 0x29uLL))
  {
    *(_DWORD *)v214 = 0;
    v89 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v89 == 1)
    {
      qword_1ECF58F30 |= 0x8000000000000uLL;
      dword_1ECF4C480 = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v7 == 11 && !strncasecmp((const char *)this, "useProfiler", 0xBuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      qword_1ECF58F30 |= 0x10000000000000uLL;
      LOBYTE(word_1ECF4C484) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v211) && !strncasecmp((const char *)this, "dumpProfilerDataAtExit", 0x16uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      qword_1ECF58F30 |= 0x20000000000000uLL;
      HIBYTE(word_1ECF4C484) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v7 == 30)
  {
    if (!strncasecmp((const char *)this, "disassembleBaselineForProfiler", 0x1EuLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        qword_1ECF58F30 |= 0x40000000000000uLL;
        byte_1ECF4C486 = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else if (v9)
  {
    if (!strncasecmp((const char *)this, "abbreviateSourceCodeForProfiler", 0x1FuLL))
    {
      *(_DWORD *)v214 = 0;
      v88 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v88 == 1)
      {
        qword_1ECF58F30 |= 0x80000000000000uLL;
        dword_1ECF4C488 = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
  }
  else if (v7 == 36 && !strncasecmp((const char *)this, "useArchitectureSpecificOptimizations", 0x24uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      qword_1ECF58F30 |= 0x100000000000000uLL;
      LOBYTE(word_1ECF4C48C) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v212 && !strncasecmp((const char *)this, "breakOnThrow", 0xCuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      qword_1ECF58F30 |= 0x200000000000000uLL;
      HIBYTE(word_1ECF4C48C) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  switch(v7)
  {
    case '(':
      if (!strncasecmp((const char *)this, "maximumOptimizationCandidateBytecodeCost", 0x28uLL))
      {
        *(_DWORD *)v214 = 0;
        v94 = sscanf(__s1, "%u", v214);
        result = 0;
        if (v94 == 1)
        {
          qword_1ECF58F30 |= 0x400000000000000uLL;
          LODWORD(xmmword_1ECF4C490) = *(_DWORD *)v214;
          if (!v2)
            return 1;
          goto LABEL_19;
        }
        return result;
      }
      break;
    case '>':
      if (!strncasecmp((const char *)this, "maximumFunctionForClosureCallInlineCandidateBytecodeCostForDFG", 0x3EuLL))
      {
        *(_DWORD *)v214 = 0;
        v106 = sscanf(__s1, "%u", v214);
        result = 0;
        if (v106 == 1)
        {
          qword_1ECF58F30 |= 0x1000000000000000uLL;
          DWORD2(xmmword_1ECF4C490) = *(_DWORD *)v214;
          if (!v2)
            return 1;
          goto LABEL_19;
        }
        return result;
      }
      if (!strncasecmp((const char *)this, "maximumFunctionForClosureCallInlineCandidateBytecodeCostForFTL", 0x3EuLL))
      {
        *(_DWORD *)v214 = 0;
        v97 = sscanf(__s1, "%u", v214);
        result = 0;
        if (v97 == 1)
        {
          qword_1ECF58F30 |= 0x8000000000000000;
          DWORD1(xmmword_1ECF4C4A0) = *(_DWORD *)v214;
          if (!v2)
            return 1;
          goto LABEL_19;
        }
        return result;
      }
      break;
    case '<':
      if (!strncasecmp((const char *)this, "maximumFunctionForConstructInlineCandidateBytecodeCostForDFG", 0x3CuLL))
      {
        *(_DWORD *)v214 = 0;
        v107 = sscanf(__s1, "%u", v214);
        result = 0;
        if (v107 == 1)
        {
          qword_1ECF58F30 |= 0x2000000000000000uLL;
          HIDWORD(xmmword_1ECF4C490) = *(_DWORD *)v214;
          if (!v2)
            return 1;
          goto LABEL_19;
        }
        return result;
      }
      if (!strncasecmp((const char *)this, "maximumFunctionForConstructInlineCandidateBytecodeCostForFTL", 0x3CuLL))
      {
        *(_DWORD *)v214 = 0;
        v98 = sscanf(__s1, "%u", v214);
        result = 0;
        if (v98 == 1)
        {
          unk_1ECF58F38 |= 1uLL;
          DWORD2(xmmword_1ECF4C4A0) = *(_DWORD *)v214;
          if (!v2)
            return 1;
          goto LABEL_19;
        }
        return result;
      }
      break;
    case '7':
      if (!strncasecmp((const char *)this, "maximumFunctionForCallInlineCandidateBytecodeCostForDFG", 0x37uLL))
      {
        *(_DWORD *)v214 = 0;
        v105 = sscanf(__s1, "%u", v214);
        result = 0;
        if (v105 == 1)
        {
          qword_1ECF58F30 |= 0x800000000000000uLL;
          DWORD1(xmmword_1ECF4C490) = *(_DWORD *)v214;
          if (!v2)
            return 1;
          goto LABEL_19;
        }
        return result;
      }
      if (!strncasecmp((const char *)this, "maximumFunctionForCallInlineCandidateBytecodeCostForFTL", 0x37uLL))
      {
        *(_DWORD *)v214 = 0;
        v92 = sscanf(__s1, "%u", v214);
        result = 0;
        if (v92 == 1)
        {
          qword_1ECF58F30 |= 0x4000000000000000uLL;
          LODWORD(xmmword_1ECF4C4A0) = *(_DWORD *)v214;
          if (!v2)
            return 1;
          goto LABEL_19;
        }
        return result;
      }
      break;
    default:
      if (v9 && !strncasecmp((const char *)this, "maximumFTLCandidateBytecodeCost", 0x1FuLL))
      {
        *(_DWORD *)v214 = 0;
        v99 = sscanf(__s1, "%u", v214);
        result = 0;
        if (v99 == 1)
        {
          unk_1ECF58F38 |= 2uLL;
          HIDWORD(xmmword_1ECF4C4A0) = *(_DWORD *)v214;
          if (!v2)
            return 1;
          goto LABEL_19;
        }
        return result;
      }
      break;
  }
  if (HIDWORD(v205) && !strncasecmp((const char *)this, "maximumInliningDepth", 0x14uLL))
  {
    *(_DWORD *)v214 = 0;
    v101 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v101 == 1)
    {
      unk_1ECF58F38 |= 4uLL;
      LODWORD(xmmword_1ECF4C4B0) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (HIDWORD(v210) && !strncasecmp((const char *)this, "maximumInliningRecursion", 0x18uLL))
  {
    *(_DWORD *)v214 = 0;
    v103 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v103 == 1)
    {
      unk_1ECF58F38 |= 8uLL;
      DWORD1(xmmword_1ECF4C4B0) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if ((_DWORD)v208)
  {
    if (!strncasecmp((const char *)this, "maximumInliningCallerBytecodeCost", 0x21uLL))
    {
      *(_DWORD *)v214 = 0;
      v91 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v91 == 1)
      {
        unk_1ECF58F38 |= 0x10uLL;
        DWORD2(xmmword_1ECF4C4B0) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
  }
  else if (HIDWORD(v212) && !strncasecmp((const char *)this, "maximumVarargsForInlining", 0x19uLL))
  {
    *(_DWORD *)v214 = 0;
    v108 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v108 == 1)
    {
      unk_1ECF58F38 |= 0x20uLL;
      HIDWORD(xmmword_1ECF4C4B0) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (HIDWORD(v207) && !strncasecmp((const char *)this, "maximumBinaryStringSwitchCaseLength", 0x23uLL))
  {
    *(_DWORD *)v214 = 0;
    v104 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v104 == 1)
    {
      unk_1ECF58F38 |= 0x40uLL;
      LODWORD(xmmword_1ECF4C4C0) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v7 == 36)
  {
    if (!strncasecmp((const char *)this, "maximumBinaryStringSwitchTotalLength", 0x24uLL))
    {
      *(_DWORD *)v214 = 0;
      v95 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v95 == 1)
      {
        unk_1ECF58F38 |= 0x80uLL;
        DWORD1(xmmword_1ECF4C4C0) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
  }
  else if (v9 && !strncasecmp((const char *)this, "maximumRegExpTestInlineCodesize", 0x1FuLL))
  {
    *(_DWORD *)v214 = 0;
    v112 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v112 == 1)
    {
      unk_1ECF58F38 |= 0x100uLL;
      DWORD2(xmmword_1ECF4C4C0) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v198 && !strncasecmp((const char *)this, "maximumWebAssemblyDepthForInlining", 0x22uLL))
  {
    *(_DWORD *)v214 = 0;
    v109 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v109 == 1)
    {
      unk_1ECF58F38 |= 0x200uLL;
      HIDWORD(xmmword_1ECF4C4C0) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v7 == 39)
  {
    if (!strncasecmp((const char *)this, "maximumWebAssemblyCalleeSizeForInlining", 0x27uLL))
    {
      *(_DWORD *)v214 = 0;
      v111 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v111 == 1)
      {
        unk_1ECF58F38 |= 0x400uLL;
        LODWORD(qword_1ECF4C4D0) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
    if (!strncasecmp((const char *)this, "maximumWebAssemblyCallerSizeForInlining", 0x27uLL))
    {
      *(_DWORD *)v214 = 0;
      v113 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v113 == 1)
      {
        unk_1ECF58F38 |= 0x800uLL;
        HIDWORD(qword_1ECF4C4D0) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
  }
  if (HIDWORD(v209) && !strncasecmp((const char *)this, "jitPolicyScale", 0xEuLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result == 1)
    {
      v17 = *(uint8x8_t *)v214;
      unk_1ECF58F38 |= 0x1000uLL;
      qword_1ECF4C4D8 = *(_QWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v200 && !strncasecmp((const char *)this, "forceEagerCompilation", 0x15uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      unk_1ECF58F38 |= 0x2000uLL;
      byte_1ECF4C4E0 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v8)
  {
    if (!strncasecmp((const char *)this, "thresholdForJITAfterWarmUp", 0x1AuLL))
    {
      *(_DWORD *)v214 = 0;
      v100 = sscanf(__s1, "%d", v214);
      result = 0;
      if (v100 == 1)
      {
        unk_1ECF58F38 |= 0x4000uLL;
        LODWORD(xmmword_1ECF4C4E4) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
  }
  else if (HIDWORD(v201))
  {
    if (!strncasecmp((const char *)this, "thresholdForJITSoon", 0x13uLL))
    {
      *(_DWORD *)v214 = 0;
      v110 = sscanf(__s1, "%d", v214);
      result = 0;
      if (v110 == 1)
      {
        unk_1ECF58F38 |= 0x8000uLL;
        DWORD1(xmmword_1ECF4C4E4) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
  }
  else if (v9 && !strncasecmp((const char *)this, "thresholdForOptimizeAfterWarmUp", 0x1FuLL))
  {
    *(_DWORD *)v214 = 0;
    v121 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v121 == 1)
    {
      unk_1ECF58F38 |= 0x10000uLL;
      DWORD2(xmmword_1ECF4C4E4) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (HIDWORD(v207) && !strncasecmp((const char *)this, "thresholdForOptimizeAfterLongWarmUp", 0x23uLL))
  {
    *(_DWORD *)v214 = 0;
    v115 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v115 == 1)
    {
      unk_1ECF58F38 |= 0x20000uLL;
      HIDWORD(xmmword_1ECF4C4E4) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (HIDWORD(v210) && !strncasecmp((const char *)this, "thresholdForOptimizeSoon", 0x18uLL))
  {
    *(_DWORD *)v214 = 0;
    v116 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v116 == 1)
    {
      unk_1ECF58F38 |= 0x40000uLL;
      LODWORD(xmmword_1ECF4C4F4) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v12 && !strncasecmp((const char *)this, "executionCounterIncrementForLoop", 0x20uLL))
  {
    *(_DWORD *)v214 = 0;
    v117 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v117 == 1)
    {
      unk_1ECF58F38 |= 0x80000uLL;
      DWORD1(xmmword_1ECF4C4F4) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if ((_DWORD)v208 && !strncasecmp((const char *)this, "executionCounterIncrementForEntry", 0x21uLL))
  {
    *(_DWORD *)v214 = 0;
    v118 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v118 == 1)
    {
      unk_1ECF58F38 |= 0x100000uLL;
      DWORD2(xmmword_1ECF4C4F4) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v198 && !strncasecmp((const char *)this, "thresholdForFTLOptimizeAfterWarmUp", 0x22uLL))
  {
    *(_DWORD *)v214 = 0;
    v120 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v120 == 1)
    {
      unk_1ECF58F38 |= 0x200000uLL;
      HIDWORD(xmmword_1ECF4C4F4) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (HIDWORD(v208) && !strncasecmp((const char *)this, "thresholdForFTLOptimizeSoon", 0x1BuLL))
  {
    *(_DWORD *)v214 = 0;
    v122 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v122 == 1)
    {
      unk_1ECF58F38 |= 0x400000uLL;
      unk_1ECF4C504 = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v12 && !strncasecmp((const char *)this, "ftlTierUpCounterIncrementForLoop", 0x20uLL))
  {
    *(_DWORD *)v214 = 0;
    v123 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v123 == 1)
    {
      unk_1ECF58F38 |= 0x800000uLL;
      dword_1ECF4C508 = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v198 && !strncasecmp((const char *)this, "ftlTierUpCounterIncrementForReturn", 0x22uLL))
  {
    *(_DWORD *)v214 = 0;
    v125 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v125 == 1)
    {
      unk_1ECF58F38 |= 0x1000000uLL;
      dword_1ECF4C50C = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v7 == 40)
  {
    if (!strncasecmp((const char *)this, "ftlOSREntryFailureCountForReoptimization", 0x28uLL))
    {
      *(_DWORD *)v214 = 0;
      v114 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v114 == 1)
      {
        unk_1ECF58F38 |= 0x2000000uLL;
        dword_1ECF4C510 = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
  }
  else if (HIDWORD(v212))
  {
    if (!strncasecmp((const char *)this, "ftlOSREntryRetryThreshold", 0x19uLL))
    {
      *(_DWORD *)v214 = 0;
      v119 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v119 == 1)
      {
        unk_1ECF58F38 |= 0x4000000uLL;
        LODWORD(xmmword_1ECF4C514) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
  }
  else if ((_DWORD)v206 && !strncasecmp((const char *)this, "evalThresholdMultiplier", 0x17uLL))
  {
    *(_DWORD *)v214 = 0;
    v130 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v130 == 1)
    {
      unk_1ECF58F38 |= 0x8000000uLL;
      DWORD1(xmmword_1ECF4C514) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v12 && !strncasecmp((const char *)this, "maximumEvalCacheableSourceLength", 0x20uLL))
  {
    *(_DWORD *)v214 = 0;
    v126 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v126 == 1)
    {
      unk_1ECF58F38 |= 0x10000000uLL;
      DWORD2(xmmword_1ECF4C514) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (HIDWORD(v199) && !strncasecmp((const char *)this, "maximumExecutionCountsBetweenCheckpointsForBaseline", 0x33uLL))
  {
    *(_DWORD *)v214 = 0;
    v127 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v127 == 1)
    {
      unk_1ECF58F38 |= 0x20000000uLL;
      HIDWORD(xmmword_1ECF4C514) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v7 == 53)
  {
    if (!strncasecmp((const char *)this, "maximumExecutionCountsBetweenCheckpointsForUpperTiers", 0x35uLL))
    {
      *(_DWORD *)v214 = 0;
      v124 = sscanf(__s1, "%d", v214);
      result = 0;
      if (v124 == 1)
      {
        unk_1ECF58F38 |= 0x40000000uLL;
        LODWORD(xmmword_1ECF4C524) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
  }
  else if (v7 == 45 && !strncasecmp((const char *)this, "highCostBaselineProfilingFunctionBytecodeCost", 0x2DuLL))
  {
    *(_DWORD *)v214 = 0;
    v131 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v131 == 1)
    {
      unk_1ECF58F38 |= 0x80000000uLL;
      DWORD1(xmmword_1ECF4C524) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v12 && !strncasecmp((const char *)this, "likelyToTakeSlowCaseMinimumCount", 0x20uLL))
  {
    *(_DWORD *)v214 = 0;
    v128 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v128 == 1)
    {
      unk_1ECF58F38 |= 0x100000000uLL;
      DWORD2(xmmword_1ECF4C524) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v203)
  {
    if (!strncasecmp((const char *)this, "couldTakeSlowCaseMinimumCount", 0x1DuLL))
    {
      *(_DWORD *)v214 = 0;
      v129 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v129 == 1)
      {
        unk_1ECF58F38 |= 0x200000000uLL;
        HIDWORD(xmmword_1ECF4C524) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
    if (!strncasecmp((const char *)this, "osrExitCountForReoptimization", 0x1DuLL))
    {
      *(_DWORD *)v214 = 0;
      v133 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v133 == 1)
      {
        unk_1ECF58F38 |= 0x400000000uLL;
        LODWORD(xmmword_1ECF4C534) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
  }
  if (v72 && !strncasecmp((const char *)this, "osrExitCountForReoptimizationFromLoop", 0x25uLL))
  {
    *(_DWORD *)v214 = 0;
    v132 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v132 == 1)
    {
      unk_1ECF58F38 |= 0x800000000uLL;
      DWORD1(xmmword_1ECF4C534) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v203 && !strncasecmp((const char *)this, "reoptimizationRetryCounterMax", 0x1DuLL))
  {
    *(_DWORD *)v214 = 0;
    v134 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v134 == 1)
    {
      unk_1ECF58F38 |= 0x1000000000uLL;
      DWORD2(xmmword_1ECF4C534) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (HIDWORD(v210))
  {
    if (!strncasecmp((const char *)this, "minimumOptimizationDelay", 0x18uLL))
    {
      *(_DWORD *)v214 = 0;
      v135 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v135 == 1)
      {
        unk_1ECF58F38 |= 0x2000000000uLL;
        HIDWORD(xmmword_1ECF4C534) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
    if (!strncasecmp((const char *)this, "maximumOptimizationDelay", 0x18uLL))
    {
      *(_DWORD *)v214 = 0;
      v137 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v137 == 1)
      {
        unk_1ECF58F38 |= 0x4000000000uLL;
        dword_1ECF4C544 = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
  }
  if (v8)
  {
    if (!strncasecmp((const char *)this, "desiredProfileLivenessRate", 0x1AuLL))
    {
      *(_QWORD *)v214 = 0;
      result = sscanf(__s1, "%lf", v214);
      if ((_DWORD)result == 1)
      {
        v17 = *(uint8x8_t *)v214;
        unk_1ECF58F38 |= 0x8000000000uLL;
        *(_QWORD *)&xmmword_1ECF4C548 = *(_QWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
    if (!strncasecmp((const char *)this, "desiredProfileFullnessRate", 0x1AuLL))
    {
      *(_QWORD *)v214 = 0;
      result = sscanf(__s1, "%lf", v214);
      if ((_DWORD)result == 1)
      {
        v17 = *(uint8x8_t *)v214;
        unk_1ECF58F38 |= 0x10000000000uLL;
        *((_QWORD *)&xmmword_1ECF4C548 + 1) = *(_QWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else if (v7 == 30 && !strncasecmp((const char *)this, "doubleVoteRatioForDoubleFormat", 0x1EuLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result == 1)
    {
      v17 = *(uint8x8_t *)v214;
      unk_1ECF58F38 |= 0x20000000000uLL;
      *(_QWORD *)&xmmword_1ECF4C558 = *(_QWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v198 && !strncasecmp((const char *)this, "structureCheckVoteRatioForHoisting", 0x22uLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result == 1)
    {
      v17 = *(uint8x8_t *)v214;
      unk_1ECF58F38 |= 0x40000000000uLL;
      *((_QWORD *)&xmmword_1ECF4C558 + 1) = *(_QWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v7 == 30)
  {
    if (!strncasecmp((const char *)this, "checkArrayVoteRatioForHoisting", 0x1EuLL))
    {
      *(_QWORD *)v214 = 0;
      result = sscanf(__s1, "%lf", v214);
      if ((_DWORD)result == 1)
      {
        v17 = *(uint8x8_t *)v214;
        unk_1ECF58F38 |= 0x80000000000uLL;
        qword_1ECF4C568 = *(_QWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else if (v8)
  {
    if (!strncasecmp((const char *)this, "maximumDirectCallStackSize", 0x1AuLL))
    {
      *(_DWORD *)v214 = 0;
      v136 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v136 == 1)
      {
        unk_1ECF58F38 |= 0x100000000000uLL;
        LODWORD(qword_1ECF4C570) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
  }
  else if (v7 == 36 && !strncasecmp((const char *)this, "minimumNumberOfScansBetweenRebalance", 0x24uLL))
  {
    *(_DWORD *)v214 = 0;
    v141 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v141 == 1)
    {
      unk_1ECF58F38 |= 0x200000000000uLL;
      HIDWORD(qword_1ECF4C570) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v204 && !strncasecmp((const char *)this, "numberOfGCMarkers", 0x11uLL))
  {
    *(_DWORD *)v214 = 0;
    v138 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v138 == 1)
    {
      unk_1ECF58F38 |= 0x400000000000uLL;
      dword_1ECF4C578 = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v198 && !strncasecmp((const char *)this, "useParallelMarkingConstraintSolver", 0x22uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      unk_1ECF58F38 |= 0x800000000000uLL;
      byte_1ECF4C57C = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v210) && !strncasecmp((const char *)this, "opaqueRootMergeThreshold", 0x18uLL))
  {
    *(_DWORD *)v214 = 0;
    v139 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v139 == 1)
    {
      unk_1ECF58F38 |= 0x1000000000000uLL;
      LODWORD(qword_1ECF4C580) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v11 && !strncasecmp((const char *)this, "maxHeapSizeAsRAMSizeMultiple", 0x1CuLL))
  {
    *(_DWORD *)v214 = 0;
    v140 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v140 == 1)
    {
      unk_1ECF58F38 |= 0x2000000000000uLL;
      HIDWORD(qword_1ECF4C580) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if ((_DWORD)v205 && !strncasecmp((const char *)this, "minHeapUtilization", 0x12uLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result == 1)
    {
      v17 = *(uint8x8_t *)v214;
      unk_1ECF58F38 |= 0x4000000000000uLL;
      *(_QWORD *)&xmmword_1ECF4C588 = *(_QWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v212) && !strncasecmp((const char *)this, "minMarkedBlockUtilization", 0x19uLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result == 1)
    {
      v17 = *(uint8x8_t *)v214;
      unk_1ECF58F38 |= 0x8000000000000uLL;
      *((_QWORD *)&xmmword_1ECF4C588 + 1) = *(_QWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v210) && !strncasecmp((const char *)this, "slowPathAllocsBetweenGCs", 0x18uLL))
  {
    *(_DWORD *)v214 = 0;
    v142 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v142 == 1)
    {
      unk_1ECF58F38 |= 0x10000000000000uLL;
      dword_1ECF4C598 = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (HIDWORD(v208))
  {
    if (!strncasecmp((const char *)this, "percentCPUPerMBForFullTimer", 0x1BuLL))
    {
      *(_QWORD *)v214 = 0;
      result = sscanf(__s1, "%lf", v214);
      if ((_DWORD)result == 1)
      {
        v17 = *(uint8x8_t *)v214;
        unk_1ECF58F38 |= 0x20000000000000uLL;
        *(_QWORD *)&xmmword_1ECF4C5A0 = *(_QWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
    if (!strncasecmp((const char *)this, "percentCPUPerMBForEdenTimer", 0x1BuLL))
    {
      *(_QWORD *)v214 = 0;
      result = sscanf(__s1, "%lf", v214);
      if ((_DWORD)result == 1)
      {
        v17 = *(uint8x8_t *)v214;
        unk_1ECF58F38 |= 0x40000000000000uLL;
        *((_QWORD *)&xmmword_1ECF4C5A0 + 1) = *(_QWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  if (v11 && !strncasecmp((const char *)this, "collectionTimerMaxPercentCPU", 0x1CuLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result == 1)
    {
      v17 = *(uint8x8_t *)v214;
      unk_1ECF58F38 |= 0x80000000000000uLL;
      qword_1ECF4C5B0 = *(_QWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v201) && !strncasecmp((const char *)this, "forceWeakRandomSeed", 0x13uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      unk_1ECF58F38 |= 0x100000000000000uLL;
      byte_1ECF4C5B8 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v205) && !strncasecmp((const char *)this, "forcedWeakRandomSeed", 0x14uLL))
  {
    *(_DWORD *)v214 = 0;
    v143 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v143 == 1)
    {
      unk_1ECF58F38 |= 0x200000000000000uLL;
      dword_1ECF4C5BC = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if ((_DWORD)v205 && !strncasecmp((const char *)this, "alwaysHaveABadTime", 0x12uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      unk_1ECF58F38 |= 0x400000000000000uLL;
      LOBYTE(dword_1ECF4C5C0) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v200) && !strncasecmp((const char *)this, "allowDoubleShape", 0x10uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      unk_1ECF58F38 |= 0x800000000000000uLL;
      BYTE1(dword_1ECF4C5C0) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v201 && !strncasecmp((const char *)this, "useZombieMode", 0xDuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      unk_1ECF58F38 |= 0x1000000000000000uLL;
      BYTE2(dword_1ECF4C5C0) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v205)
  {
    if (!strncasecmp((const char *)this, "useImmortalObjects", 0x12uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        unk_1ECF58F38 |= 0x2000000000000000uLL;
        HIBYTE(dword_1ECF4C5C0) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
    if (!strncasecmp((const char *)this, "sweepSynchronously", 0x12uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        unk_1ECF58F38 |= 0x4000000000000000uLL;
        byte_1ECF4C5C4 = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  if (!(_DWORD)v206)
  {
    if (v7 != 5)
    {
      if (v7 == 11)
      {
        if (!strncasecmp((const char *)this, "useGlobalGC", 0xBuLL))
        {
          result = JSC::parse<BOOL>(__s1);
          if ((unsigned __int16)result >= 0x100u)
          {
            *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 4;
            LOBYTE(dword_1ECF4C5CE) = result;
            if (!v2)
              return 1;
            goto LABEL_19;
          }
          return 0;
        }
      }
      else if (v7 == 7 && !strncasecmp((const char *)this, "gcAtEnd", 7uLL))
      {
        result = JSC::parse<BOOL>(__s1);
        if ((unsigned __int16)result >= 0x100u)
        {
          *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 8;
          BYTE1(dword_1ECF4C5CE) = result;
          if (!v2)
            return 1;
          goto LABEL_19;
        }
        return 0;
      }
      goto LABEL_1385;
    }
    if (strncasecmp((const char *)this, "logGC", 5uLL))
    {
      if (!strncasecmp((const char *)this, "useGC", 5uLL))
      {
        result = JSC::parse<BOOL>(__s1);
        if ((unsigned __int16)result >= 0x100u)
        {
          *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 2;
          HIBYTE(word_1ECF4C5CC) = result;
          if (!v2)
            return 1;
          goto LABEL_19;
        }
        return 0;
      }
      goto LABEL_1385;
    }
    result = strlen(__s1);
    v145 = result;
    if (result == 2)
    {
      if ((*__s1 & 0xDF) == 0x4E && (v5[2] & 0xDF) == 0x4F)
        goto LABEL_1467;
    }
    else if (result == 5)
    {
      if ((*__s1 & 0xDF) == 0x46 && (v5[2] & 0xDF) == 0x41 && (v5[3] & 0xDF) == 0x4C && (v5[4] & 0xDF) == 0x53)
      {
        v146 = v5[5];
LABEL_1456:
        if ((v146 & 0xFFFFFFDF) == 0x45)
          goto LABEL_1467;
      }
    }
    else if (result == 4 && (*__s1 & 0xDF) == 0x4E && (v5[2] & 0xDF) == 0x4F && (v5[3] & 0xDF) == 0x4E)
    {
      v146 = v5[4];
      goto LABEL_1456;
    }
    result = strcmp(__s1, "0");
    if ((_DWORD)result)
    {
      if (v145 == 3)
      {
        if ((*__s1 & 0xDF) == 0x59 && (v5[2] & 0xDF) == 0x45 && (v5[3] & 0xDF) == 0x53)
          goto LABEL_1508;
      }
      else if (v145 == 4)
      {
        if ((*__s1 & 0xDF) == 0x54 && (v5[2] & 0xDF) == 0x52 && (v5[3] & 0xDF) == 0x55 && (v5[4] & 0xDF) == 0x45)
          goto LABEL_1508;
      }
      else if (v145 == 5
             && (*__s1 & 0xDF) == 0x42
             && (v5[2] & 0xDF) == 0x41
             && (v5[3] & 0xDF) == 0x53
             && (v5[4] & 0xDF) == 0x49
             && (v5[5] & 0xDF) == 0x43)
      {
        goto LABEL_1508;
      }
      result = strcmp(__s1, "1");
      if ((_DWORD)result)
      {
        if (v145 != 7
          || (*__s1 & 0xDF) != 0x56
          || (v5[2] & 0xDF) != 0x45
          || (v5[3] & 0xDF) != 0x52
          || (v5[4] & 0xDF) != 0x42
          || (v5[5] & 0xDF) != 0x4F
          || (v5[6] & 0xDF) != 0x53
          || (v5[7] & 0xDF) != 0x45)
        {
          result = strcmp(__s1, "2");
          if ((_DWORD)result)
            return 0;
        }
        v149 = 2;
LABEL_1509:
        *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 1;
        LOBYTE(word_1ECF4C5CC) = v149;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
LABEL_1508:
      v149 = 1;
      goto LABEL_1509;
    }
LABEL_1467:
    v149 = 0;
    goto LABEL_1509;
  }
  result = strncasecmp((const char *)this, "maxSingleAllocationSize", 0x17uLL);
  if (!(_DWORD)result)
    return result;
LABEL_1385:
  if (HIDWORD(v200) && !strncasecmp((const char *)this, "forceGCSlowPaths", 0x10uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x10;
      BYTE2(dword_1ECF4C5CE) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v201))
  {
    if (!strncasecmp((const char *)this, "forceDidDeferGCWork", 0x13uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x20;
        HIBYTE(dword_1ECF4C5CE) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else if ((_DWORD)v201 && !strncasecmp((const char *)this, "gcMaxHeapSize", 0xDuLL))
  {
    *(_DWORD *)v214 = 0;
    v148 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v148 == 1)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x40;
      LODWORD(qword_1ECF4C5D4) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if ((_DWORD)v212 && !strncasecmp((const char *)this, "forceRAMSize", 0xCuLL))
  {
    *(_DWORD *)v214 = 0;
    v147 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v147 == 1)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x80;
      HIDWORD(qword_1ECF4C5D4) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if ((_DWORD)v205 && !strncasecmp((const char *)this, "recordGCPauseTimes", 0x12uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x100;
      byte_1ECF4C5DC = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v208 && !strncasecmp((const char *)this, "dumpHeapStatisticsAtVMDestruction", 0x21uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x200;
      byte_1ECF4C5DD = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v207) && !strncasecmp((const char *)this, "forceCodeBlockToJettisonDueToOldAge", 0x23uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x400;
      byte_1ECF4C5DE = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v9 && !strncasecmp((const char *)this, "useEagerCodeBlockJettisonTiming", 0x1FuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x800;
      byte_1ECF4C5DF = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v210 && !strncasecmp((const char *)this, "useTypeProfiler", 0xFuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x1000;
      byte_1ECF4C5E0 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v211) && !strncasecmp((const char *)this, "useControlFlowProfiler", 0x16uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x2000;
      byte_1ECF4C5E1 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v201) && !strncasecmp((const char *)this, "useSamplingProfiler", 0x13uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x4000;
      byte_1ECF4C5E2 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v209) && !strncasecmp((const char *)this, "sampleInterval", 0xEuLL))
  {
    *(_DWORD *)v214 = 0;
    v150 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v150 == 1)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x8000;
      dword_1ECF4C5E4 = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v12 && !strncasecmp((const char *)this, "collectExtraSamplingProfilerData", 0x20uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x10000;
      byte_1ECF4C5E8 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v208)
  {
    if (!strncasecmp((const char *)this, "samplingProfilerTopFunctionsCount", 0x21uLL))
    {
      *(_DWORD *)v214 = 0;
      v151 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v151 == 1)
      {
        *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x20000;
        LODWORD(qword_1ECF4C5EC) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
    if (!strncasecmp((const char *)this, "samplingProfilerTopBytecodesCount", 0x21uLL))
    {
      *(_DWORD *)v214 = 0;
      v144 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v144 == 1)
      {
        *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x40000;
        HIDWORD(qword_1ECF4C5EC) = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
  }
  else if (HIDWORD(v206) && !strncasecmp((const char *)this, "samplingProfilerIgnoreExternalSourceID", 0x26uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x80000;
      byte_1ECF4C5F4 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v205))
  {
    result = strncasecmp((const char *)this, "samplingProfilerPath", 0x14uLL);
    if (!(_DWORD)result)
    {
      if (*__s1)
      {
        v152 = (WTF *)(strlen(__s1) + 1);
        v153 = (void *)WTF::fastMalloc(v152);
        result = (uint64_t)memcpy(v153, __s1, (size_t)v152);
      }
      else
      {
        v153 = 0;
      }
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x100000;
      qword_1ECF4C5F8 = (uint64_t)v153;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  if (v7 == 11)
  {
    if (!strncasecmp((const char *)this, "sampleCCode", 0xBuLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x200000;
        LOBYTE(word_1ECF4C600) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else if (v9 && !strncasecmp((const char *)this, "alwaysGeneratePCToCodeOriginMap", 0x1FuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x400000;
      HIBYTE(word_1ECF4C600) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v210) && !strncasecmp((const char *)this, "randomIntegrityAuditRate", 0x18uLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result == 1)
    {
      v17 = *(uint8x8_t *)v214;
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x800000;
      qword_1ECF4C608 = *(_QWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v211 && !strncasecmp((const char *)this, "verifyGC", 8uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x1000000;
      LOBYTE(word_1ECF4C610) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v210 && !strncasecmp((const char *)this, "verboseVerifyGC", 0xFuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x2000000;
      HIBYTE(word_1ECF4C610) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v209 && !strncasecmp((const char *)this, "verifyHeap", 0xAuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x4000000;
      byte_1ECF4C612 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v7 == 39 && !strncasecmp((const char *)this, "numberOfGCCyclesToRecordForVerification", 0x27uLL))
  {
    *(_DWORD *)v214 = 0;
    v154 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v154 == 1)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x8000000;
      LODWORD(qword_1ECF4C614) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (HIDWORD(v210) && !strncasecmp((const char *)this, "exceptionStackTraceLimit", 0x18uLL))
  {
    *(_DWORD *)v214 = 0;
    v155 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v155 == 1)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x10000000;
      HIDWORD(qword_1ECF4C614) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (HIDWORD(v208) && !strncasecmp((const char *)this, "defaultErrorStackTraceLimit", 0x1BuLL))
  {
    *(_DWORD *)v214 = 0;
    v156 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v156 == 1)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x20000000;
      dword_1ECF4C61C = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (HIDWORD(v210) && !strncasecmp((const char *)this, "exitOnResourceExhaustion", 0x18uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x40000000;
      LOBYTE(word_1ECF4C620) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v200) && !strncasecmp((const char *)this, "useExceptionFuzz", 0x10uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x80000000;
      HIBYTE(word_1ECF4C620) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v201) && !strncasecmp((const char *)this, "fireExceptionFuzzAt", 0x13uLL))
  {
    *(_DWORD *)v214 = 0;
    v157 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v157 == 1)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x100000000;
      dword_1ECF4C624 = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v11 && !strncasecmp((const char *)this, "validateDFGExceptionHandling", 0x1CuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x200000000;
      byte_1ECF4C628 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v201))
  {
    if (!strncasecmp((const char *)this, "dumpSimulatedThrows", 0x13uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x400000000;
        byte_1ECF4C629 = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else if ((_DWORD)v206 && !strncasecmp((const char *)this, "validateExceptionChecks", 0x17uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x800000000;
      byte_1ECF4C62A = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v198 && !strncasecmp((const char *)this, "unexpectedExceptionStackTraceLimit", 0x22uLL))
  {
    *(_DWORD *)v214 = 0;
    v158 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v158 == 1)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x1000000000;
      dword_1ECF4C62C = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if ((_DWORD)v200 && !strncasecmp((const char *)this, "validateDFGClobberize", 0x15uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x2000000000;
      LOBYTE(word_1ECF4C630) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v7 == 30 && !strncasecmp((const char *)this, "validateBoundsCheckElimination", 0x1EuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x4000000000;
      HIBYTE(word_1ECF4C630) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v208) && !strncasecmp((const char *)this, "useExecutableAllocationFuzz", 0x1BuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x8000000000;
      byte_1ECF4C632 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v7 == 30 && !strncasecmp((const char *)this, "fireExecutableAllocationFuzzAt", 0x1EuLL))
  {
    *(_DWORD *)v214 = 0;
    v159 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v159 == 1)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x10000000000;
      LODWORD(qword_1ECF4C634) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v72 && !strncasecmp((const char *)this, "fireExecutableAllocationFuzzAtOrAfter", 0x25uLL))
  {
    *(_DWORD *)v214 = 0;
    v160 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v160 == 1)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x20000000000;
      HIDWORD(qword_1ECF4C634) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v7 == 36)
  {
    if (!strncasecmp((const char *)this, "fireExecutableAllocationFuzzRandomly", 0x24uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x40000000000;
        byte_1ECF4C63C = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else if (v7 == 47)
  {
    if (!strncasecmp((const char *)this, "fireExecutableAllocationFuzzRandomlyProbability", 0x2FuLL))
    {
      *(_QWORD *)v214 = 0;
      result = sscanf(__s1, "%lf", v214);
      if ((_DWORD)result == 1)
      {
        v17 = *(uint8x8_t *)v214;
        *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x80000000000;
        qword_1ECF4C640 = *(_QWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else if (v9 && !strncasecmp((const char *)this, "verboseExecutableAllocationFuzz", 0x1FuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x100000000000;
      LOBYTE(word_1ECF4C648) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v209) && !strncasecmp((const char *)this, "useOSRExitFuzz", 0xEuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x200000000000;
      HIBYTE(word_1ECF4C648) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v206 && !strncasecmp((const char *)this, "fireOSRExitFuzzAtStatic", 0x17uLL))
  {
    *(_DWORD *)v214 = 0;
    v162 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v162 == 1)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x400000000000;
      LODWORD(qword_1ECF4C64C) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v204 && !strncasecmp((const char *)this, "fireOSRExitFuzzAt", 0x11uLL))
  {
    *(_DWORD *)v214 = 0;
    v163 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v163 == 1)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x800000000000;
      HIDWORD(qword_1ECF4C64C) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (HIDWORD(v210) && !strncasecmp((const char *)this, "fireOSRExitFuzzAtOrAfter", 0x18uLL))
  {
    *(_DWORD *)v214 = 0;
    v164 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v164 == 1)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x1000000000000;
      dword_1ECF4C654 = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if ((_DWORD)v205 && !strncasecmp((const char *)this, "verboseOSRExitFuzz", 0x12uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x2000000000000;
      byte_1ECF4C658 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v206)
  {
    if (!strncasecmp((const char *)this, "seedOfVMRandomForFuzzer", 0x17uLL))
    {
      *(_DWORD *)v214 = 0;
      v161 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v161 == 1)
      {
        *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x4000000000000;
        dword_1ECF4C65C = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return result;
    }
  }
  else if (HIDWORD(v212) && !strncasecmp((const char *)this, "useRandomizingFuzzerAgent", 0x19uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x8000000000000;
      byte_1ECF4C660 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v11 && !strncasecmp((const char *)this, "seedOfRandomizingFuzzerAgent", 0x1CuLL))
  {
    *(_DWORD *)v214 = 0;
    v165 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v165 == 1)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x10000000000000;
      LODWORD(qword_1ECF4C664) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v8)
  {
    if (!strncasecmp((const char *)this, "dumpFuzzerAgentPredictions", 0x1AuLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x20000000000000;
        BYTE4(qword_1ECF4C664) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else if (v7 == 30)
  {
    if (!strncasecmp((const char *)this, "useDoublePredictionFuzzerAgent", 0x1EuLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x40000000000000;
        BYTE5(qword_1ECF4C664) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else if ((_DWORD)v206)
  {
    if (!strncasecmp((const char *)this, "useFileBasedFuzzerAgent", 0x17uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x80000000000000;
        BYTE6(qword_1ECF4C664) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else if (v7 == 36)
  {
    if (!strncasecmp((const char *)this, "usePredictionFileCreatingFuzzerAgent", 0x24uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x100000000000000;
        HIBYTE(qword_1ECF4C664) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else if (v7 == 40 && !strncasecmp((const char *)this, "requirePredictionForFileBasedFuzzerAgent", 0x28uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x200000000000000;
      byte_1ECF4C66C = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v200)
  {
    result = strncasecmp((const char *)this, "fuzzerPredictionsFile", 0x15uLL);
    if (!(_DWORD)result)
    {
      if (*__s1)
      {
        v166 = (WTF *)(strlen(__s1) + 1);
        v167 = (void *)WTF::fastMalloc(v166);
        result = (uint64_t)memcpy(v167, __s1, (size_t)v166);
      }
      else
      {
        v167 = 0;
      }
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x400000000000000;
      qword_1ECF4C670 = (uint64_t)v167;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  if (v7 == 39)
  {
    if (!strncasecmp((const char *)this, "useNarrowingNumberPredictionFuzzerAgent", 0x27uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x800000000000000;
        byte_1ECF4C678 = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else if (HIDWORD(v206))
  {
    if (!strncasecmp((const char *)this, "useWideningNumberPredictionFuzzerAgent", 0x26uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x1000000000000000;
        byte_1ECF4C679 = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else if ((_DWORD)v201 && !strncasecmp((const char *)this, "logPhaseTimes", 0xDuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x2000000000000000;
      byte_1ECF4C67A = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v200) && !strncasecmp((const char *)this, "rareBlockPenalty", 0x10uLL))
  {
    *(_QWORD *)v214 = 0;
    result = sscanf(__s1, "%lf", v214);
    if ((_DWORD)result == 1)
    {
      v17 = *(uint8x8_t *)v214;
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x4000000000000000;
      qword_1ECF4C680 = *(_QWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v208) && !strncasecmp((const char *)this, "maximumTmpsForGraphColoring", 0x1BuLL))
  {
    *(_DWORD *)v214 = 0;
    v168 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v168 == 1)
    {
      *(_QWORD *)&xmmword_1ECF58F40 = xmmword_1ECF58F40 | 0x8000000000000000;
      LODWORD(qword_1ECF4C688) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (HIDWORD(v205) && !strncasecmp((const char *)this, "airLinearScanVerbose", 0x14uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 1uLL;
      BYTE4(qword_1ECF4C688) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v203 && !strncasecmp((const char *)this, "airLinearScanSpillsEverything", 0x1DuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 2uLL;
      BYTE5(qword_1ECF4C688) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v206 && !strncasecmp((const char *)this, "airForceBriggsAllocator", 0x17uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 4uLL;
      BYTE6(qword_1ECF4C688) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v205) && !strncasecmp((const char *)this, "airForceIRCAllocator", 0x14uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 8uLL;
      HIBYTE(qword_1ECF4C688) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v200) && !strncasecmp((const char *)this, "airRandomizeRegs", 0x10uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x10uLL;
      byte_1ECF4C690 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v205) && !strncasecmp((const char *)this, "airRandomizeRegsSeed", 0x14uLL))
  {
    *(_DWORD *)v214 = 0;
    v169 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v169 == 1)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x20uLL;
      dword_1ECF4C694 = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if ((_DWORD)v205 && !strncasecmp((const char *)this, "coalesceSpillSlots", 0x12uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x40uLL;
      LOBYTE(word_1ECF4C698) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v211) && !strncasecmp((const char *)this, "logAirRegisterPressure", 0x16uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x80uLL;
      HIBYTE(word_1ECF4C698) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v212 && !strncasecmp((const char *)this, "useB3TailDup", 0xCuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x100uLL;
      byte_1ECF4C69A = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v200 && !strncasecmp((const char *)this, "maxB3TailDupBlockSize", 0x15uLL))
  {
    *(_DWORD *)v214 = 0;
    v170 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v170 == 1)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x200uLL;
      LODWORD(qword_1ECF4C69C) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (HIDWORD(v208) && !strncasecmp((const char *)this, "maxB3TailDupBlockSuccessors", 0x1BuLL))
  {
    *(_DWORD *)v214 = 0;
    v171 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v171 == 1)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x400uLL;
      HIDWORD(qword_1ECF4C69C) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v203 && !strncasecmp((const char *)this, "useB3HoistLoopInvariantValues", 0x1DuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x800uLL;
      LOBYTE(word_1ECF4C6A4) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v198 && !strncasecmp((const char *)this, "useB3CanonicalizePrePostIncrements", 0x22uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x1000uLL;
      HIBYTE(word_1ECF4C6A4) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v203 && !strncasecmp((const char *)this, "useAirOptimizePairedLoadStore", 0x1DuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x2000uLL;
      byte_1ECF4C6A6 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v7 == 11 && !strncasecmp((const char *)this, "useDollarVM", 0xBuLL))
  {
    if (byte_1ECF4C1E0)
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x4000uLL;
        LOBYTE(qword_1ECF4C6A7) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
    }
    return 0;
  }
  if (v204)
  {
    result = strncasecmp((const char *)this, "functionOverrides", 0x11uLL);
    if (!(_DWORD)result)
    {
      if (!byte_1ECF4C1E0)
        return 0;
      if (*__s1)
      {
        v172 = (WTF *)(strlen(__s1) + 1);
        v173 = (void *)WTF::fastMalloc(v172);
        result = (uint64_t)memcpy(v173, __s1, (size_t)v172);
      }
      else
      {
        v173 = 0;
      }
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x8000uLL;
      *(uint64_t *)((char *)&qword_1ECF4C6A7 + 1) = (uint64_t)v173;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  if ((_DWORD)v211 && !strncasecmp((const char *)this, "watchdog", 8uLL))
  {
    *(_DWORD *)v214 = 0;
    v174 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v174 == 1)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x10000uLL;
      dword_1ECF4C6B0 = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if ((_DWORD)v210 && !strncasecmp((const char *)this, "usePollingTraps", 0xFuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x20000uLL;
      byte_1ECF4C6B4 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v205) && !strncasecmp((const char *)this, "useMachForExceptions", 0x14uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x40000uLL;
      LOBYTE(word_1ECF4C6B5) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v204 && !strncasecmp((const char *)this, "allowNonSPTagging", 0x11uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x80000uLL;
      HIBYTE(word_1ECF4C6B5) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v209 && !strncasecmp((const char *)this, "useICStats", 0xAuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x100000uLL;
      byte_1ECF4C6B7 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v12 && !strncasecmp((const char *)this, "prototypeHitCountForLLIntCaching", 0x20uLL))
  {
    *(_DWORD *)v214 = 0;
    v175 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v175 == 1)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x200000uLL;
      LODWORD(qword_1ECF4C6B8) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if (v8 && !strncasecmp((const char *)this, "dumpCompiledRegExpPatterns", 0x1AuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x400000uLL;
      BYTE4(qword_1ECF4C6B8) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v210) && !strncasecmp((const char *)this, "verboseRegExpCompilation", 0x18uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x800000uLL;
      BYTE5(qword_1ECF4C6B8) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v200) && !strncasecmp((const char *)this, "dumpModuleRecord", 0x10uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x1000000uLL;
      BYTE6(qword_1ECF4C6B8) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v211) && !strncasecmp((const char *)this, "dumpModuleLoadingState", 0x16uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x2000000uLL;
      HIBYTE(qword_1ECF4C6B8) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v8 && !strncasecmp((const char *)this, "exposeInternalModuleLoader", 0x1AuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x4000000uLL;
      byte_1ECF4C6C0 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v210) && !strncasecmp((const char *)this, "exposePrivateIdentifiers", 0x18uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x8000000uLL;
      byte_1ECF4C6C1 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v210 && !strncasecmp((const char *)this, "useSuperSampler", 0xFuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x10000000uLL;
      byte_1ECF4C6C2 = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v211) && !strncasecmp((const char *)this, "useSourceProviderCache", 0x16uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x20000000uLL;
      LOBYTE(dword_1ECF4C6C3) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if ((_DWORD)v212 && !strncasecmp((const char *)this, "useCodeCache", 0xCuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x40000000uLL;
      BYTE1(dword_1ECF4C6C3) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (HIDWORD(v209) && !strncasecmp((const char *)this, "useWebAssembly", 0xEuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x80000000uLL;
      BYTE2(dword_1ECF4C6C3) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v11 && !strncasecmp((const char *)this, "failToCompileWebAssemblyCode", 0x1CuLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x100000000uLL;
      HIBYTE(dword_1ECF4C6C3) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v7 == 30)
  {
    if (!strncasecmp((const char *)this, "webAssemblyPartialCompileLimit", 0x1EuLL))
    {
      *(_QWORD *)v214 = 0;
      result = sscanf(__s1, "%zu", v214);
      if ((_DWORD)result == 1)
      {
        *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x200000000uLL;
        qword_1ECF4C6C8 = *(_QWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
  }
  else if (v9 && !strncasecmp((const char *)this, "webAssemblyOMGOptimizationLevel", 0x1FuLL))
  {
    *(_DWORD *)v214 = 0;
    v176 = sscanf(__s1, "%u", v214);
    result = 0;
    if (v176 == 1)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x400000000uLL;
      dword_1ECF4C6D0 = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return result;
  }
  if ((_DWORD)v205 && !strncasecmp((const char *)this, "useBBQTierUpChecks", 0x12uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x800000000uLL;
      LOBYTE(word_1ECF4C6D4) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v204 && !strncasecmp((const char *)this, "useWebAssemblyOSR", 0x11uLL))
  {
    result = JSC::parse<BOOL>(__s1);
    if ((unsigned __int16)result >= 0x100u)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x1000000000uLL;
      HIBYTE(word_1ECF4C6D4) = result;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
    return 0;
  }
  if (v198 && !strncasecmp((const char *)this, "thresholdForBBQOptimizeAfterWarmUp", 0x22uLL))
  {
    *(_DWORD *)v214 = 0;
    v177 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v177 == 1)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x2000000000uLL;
      LODWORD(xmmword_1ECF4C6D8) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  else if (HIDWORD(v208) && !strncasecmp((const char *)this, "thresholdForBBQOptimizeSoon", 0x1BuLL))
  {
    *(_DWORD *)v214 = 0;
    v178 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v178 == 1)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x4000000000uLL;
      DWORD1(xmmword_1ECF4C6D8) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  else if (v198 && !strncasecmp((const char *)this, "thresholdForOMGOptimizeAfterWarmUp", 0x22uLL))
  {
    *(_DWORD *)v214 = 0;
    v179 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v179 == 1)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x8000000000uLL;
      DWORD2(xmmword_1ECF4C6D8) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  else if (HIDWORD(v208) && !strncasecmp((const char *)this, "thresholdForOMGOptimizeSoon", 0x1BuLL))
  {
    *(_DWORD *)v214 = 0;
    v180 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v180 == 1)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x10000000000uLL;
      HIDWORD(xmmword_1ECF4C6D8) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  else if (v12 && !strncasecmp((const char *)this, "omgTierUpCounterIncrementForLoop", 0x20uLL))
  {
    *(_DWORD *)v214 = 0;
    v181 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v181 == 1)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x20000000000uLL;
      LODWORD(qword_1ECF4C6E8) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  else if ((_DWORD)v208 && !strncasecmp((const char *)this, "omgTierUpCounterIncrementForEntry", 0x21uLL))
  {
    *(_DWORD *)v214 = 0;
    v182 = sscanf(__s1, "%d", v214);
    result = 0;
    if (v182 == 1)
    {
      *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x40000000000uLL;
      HIDWORD(qword_1ECF4C6E8) = *(_DWORD *)v214;
      if (!v2)
        return 1;
      goto LABEL_19;
    }
  }
  else
  {
    if (HIDWORD(v210) && !strncasecmp((const char *)this, "useWebAssemblyFastMemory", 0x18uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x80000000000uLL;
        LOBYTE(word_1ECF4C6F0) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
    if (HIDWORD(v205) && !strncasecmp((const char *)this, "logWebAssemblyMemory", 0x14uLL))
    {
      result = JSC::parse<BOOL>(__s1);
      if ((unsigned __int16)result >= 0x100u)
      {
        *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x100000000000uLL;
        HIBYTE(word_1ECF4C6F0) = result;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
      return 0;
    }
    if ((_DWORD)v208 && !strncasecmp((const char *)this, "webAssemblyFastMemoryRedzonePages", 0x21uLL))
    {
      *(_DWORD *)v214 = 0;
      v183 = sscanf(__s1, "%u", v214);
      result = 0;
      if (v183 == 1)
      {
        *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x200000000000uLL;
        dword_1ECF4C6F4 = *(_DWORD *)v214;
        if (!v2)
          return 1;
        goto LABEL_19;
      }
    }
    else
    {
      if (v12)
      {
        if (!strncasecmp((const char *)this, "crashIfWebAssemblyCantFastMemory", 0x20uLL))
        {
          result = JSC::parse<BOOL>(__s1);
          if ((unsigned __int16)result >= 0x100u)
          {
            *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x400000000000uLL;
            LOBYTE(word_1ECF4C6F8) = result;
            if (!v2)
              return 1;
            goto LABEL_19;
          }
          return 0;
        }
        if (!strncasecmp((const char *)this, "crashOnFailedWebAssemblyValidate", 0x20uLL))
        {
          result = JSC::parse<BOOL>(__s1);
          if ((unsigned __int16)result >= 0x100u)
          {
            *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x800000000000uLL;
            HIBYTE(word_1ECF4C6F8) = result;
            if (!v2)
              return 1;
            goto LABEL_19;
          }
          return 0;
        }
      }
      if (v203 && !strncasecmp((const char *)this, "maxNumWebAssemblyFastMemories", 0x1DuLL))
      {
        *(_DWORD *)v214 = 0;
        v184 = sscanf(__s1, "%u", v214);
        result = 0;
        if (v184 == 1)
        {
          *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x1000000000000uLL;
          dword_1ECF4C6FC = *(_DWORD *)v214;
          if (!v2)
            return 1;
          goto LABEL_19;
        }
      }
      else
      {
        if ((_DWORD)v206)
        {
          if (!strncasecmp((const char *)this, "verboseBBQJITAllocation", 0x17uLL))
          {
            result = JSC::parse<BOOL>(__s1);
            if ((unsigned __int16)result >= 0x100u)
            {
              *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x2000000000000uLL;
              LOBYTE(word_1ECF4C700) = result;
              if (!v2)
                return 1;
              goto LABEL_19;
            }
            return 0;
          }
        }
        else if (HIDWORD(v212))
        {
          if (!strncasecmp((const char *)this, "verboseBBQJITInstructions", 0x19uLL))
          {
            result = JSC::parse<BOOL>(__s1);
            if ((unsigned __int16)result >= 0x100u)
            {
              *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x4000000000000uLL;
              HIBYTE(word_1ECF4C700) = result;
              if (!v2)
                return 1;
              goto LABEL_19;
            }
            return 0;
          }
        }
        else if (HIDWORD(v201) && !strncasecmp((const char *)this, "useWebAssemblyLLInt", 0x13uLL))
        {
          result = JSC::parse<BOOL>(__s1);
          if ((unsigned __int16)result >= 0x100u)
          {
            *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x8000000000000uLL;
            LOBYTE(dword_1ECF4C702) = result;
            if (!v2)
              return 1;
            goto LABEL_19;
          }
          return 0;
        }
        if ((_DWORD)v207)
        {
          if (!strncasecmp((const char *)this, "useBBQJIT", 9uLL))
          {
            result = JSC::parse<BOOL>(__s1);
            if ((unsigned __int16)result >= 0x100u)
            {
              *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x10000000000000uLL;
              BYTE1(dword_1ECF4C702) = result;
              if (!v2)
                return 1;
              goto LABEL_19;
            }
            return 0;
          }
          if (!strncasecmp((const char *)this, "useOMGJIT", 9uLL))
          {
            result = JSC::parse<BOOL>(__s1);
            if ((unsigned __int16)result >= 0x100u)
            {
              *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x20000000000000uLL;
              BYTE2(dword_1ECF4C702) = result;
              if (!v2)
                return 1;
              goto LABEL_19;
            }
            return 0;
          }
        }
        if (v7 == 30)
        {
          if (!strncasecmp((const char *)this, "useWebAssemblyLLIntPrologueOSR", 0x1EuLL))
          {
            result = JSC::parse<BOOL>(__s1);
            if ((unsigned __int16)result >= 0x100u)
            {
              *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x40000000000000uLL;
              HIBYTE(dword_1ECF4C702) = result;
              if (!v2)
                return 1;
              goto LABEL_19;
            }
            return 0;
          }
          if (!strncasecmp((const char *)this, "useWebAssemblyLLIntEpilogueOSR", 0x1EuLL))
          {
            result = JSC::parse<BOOL>(__s1);
            if ((unsigned __int16)result >= 0x100u)
            {
              *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x100000000000000uLL;
              HIBYTE(word_1ECF4C706) = result;
              if (!v2)
                return 1;
              goto LABEL_19;
            }
            return 0;
          }
        }
        else if (v8)
        {
          if (!strncasecmp((const char *)this, "useWebAssemblyLLIntLoopOSR", 0x1AuLL))
          {
            result = JSC::parse<BOOL>(__s1);
            if ((unsigned __int16)result >= 0x100u)
            {
              *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x80000000000000uLL;
              LOBYTE(word_1ECF4C706) = result;
              if (!v2)
                return 1;
              goto LABEL_19;
            }
            return 0;
          }
        }
        else if (HIDWORD(v206) && !strncasecmp((const char *)this, "webAssemblyFunctionIndexRangeToCompile", 0x26uLL))
        {
          *(_DWORD *)v214 = 0;
          *(_QWORD *)&v214[8] = 0;
          *(_QWORD *)&v214[16] = 0;
          result = strcmp(__s1, "<null>");
          if ((_DWORD)result)
          {
            if (*__s1 == 33)
              v185 = 3;
            else
              v185 = 2;
            if (*__s1 == 33)
              v186 = __s1 + 1;
            else
              v186 = __s1;
            v187 = sscanf(v186, " %u:%u", &v214[16], &v214[20]);
            if ((v187 + 1) < 2)
              return 0;
            if (v187 == 1)
            {
              *(_DWORD *)&v214[20] = *(_DWORD *)&v214[16];
            }
            else if (*(_DWORD *)&v214[16] > *(_DWORD *)&v214[20])
            {
              return 0;
            }
            v193 = (WTF *)(strlen(__s1) + 1);
            v194 = (void *)WTF::fastMalloc(v193);
            result = (uint64_t)memcpy(v194, __s1, (size_t)v193);
            *(_QWORD *)&v214[8] = v194;
          }
          else
          {
            v185 = 0;
          }
          *(_DWORD *)v214 = v185;
          qword_1ECF4C718 = *(_QWORD *)&v214[16];
          v17 = *(uint8x8_t *)&v214[1];
          *(_OWORD *)((char *)&dword_1ECF4C708 + 1) = *(_OWORD *)&v214[1];
          *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x200000000000000uLL;
          LOBYTE(dword_1ECF4C708) = v185;
          if (!v2)
            return 1;
          goto LABEL_19;
        }
        if (v11 && !strncasecmp((const char *)this, "webAssemblyLLIntTiersUpToBBQ", 0x1CuLL))
        {
          result = JSC::parse<BOOL>(__s1);
          if ((unsigned __int16)result >= 0x100u)
          {
            *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x400000000000000uLL;
            LOBYTE(word_1ECF4C720) = result;
            if (!v2)
              return 1;
            goto LABEL_19;
          }
          return 0;
        }
        if (v12 && !strncasecmp((const char *)this, "useEagerWebAssemblyModuleHashing", 0x20uLL))
        {
          result = JSC::parse<BOOL>(__s1);
          if ((unsigned __int16)result >= 0x100u)
          {
            *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x800000000000000uLL;
            HIBYTE(word_1ECF4C720) = result;
            if (!v2)
              return 1;
            goto LABEL_19;
          }
          return 0;
        }
        if (HIDWORD(v208) && !strncasecmp((const char *)this, "useArrayAllocationProfiling", 0x1BuLL))
        {
          result = JSC::parse<BOOL>(__s1);
          if ((unsigned __int16)result >= 0x100u)
          {
            *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x1000000000000000uLL;
            byte_1ECF4C722 = result;
            if (!v2)
              return 1;
            goto LABEL_19;
          }
          return 0;
        }
        if (HIDWORD(v209) && !strncasecmp((const char *)this, "forcePolyProto", 0xEuLL))
        {
          result = JSC::parse<BOOL>(__s1);
          if ((unsigned __int16)result >= 0x100u)
          {
            *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x2000000000000000uLL;
            LOBYTE(dword_1ECF4C723) = result;
            if (!v2)
              return 1;
            goto LABEL_19;
          }
          return 0;
        }
        if ((_DWORD)v210 && !strncasecmp((const char *)this, "forceMiniVMMode", 0xFuLL))
        {
          result = JSC::parse<BOOL>(__s1);
          if ((unsigned __int16)result >= 0x100u)
          {
            *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x4000000000000000uLL;
            BYTE1(dword_1ECF4C723) = result;
            if (!v2)
              return 1;
            goto LABEL_19;
          }
          return 0;
        }
        if (HIDWORD(v209) && !strncasecmp((const char *)this, "useTracePoints", 0xEuLL))
        {
          result = JSC::parse<BOOL>(__s1);
          if ((unsigned __int16)result >= 0x100u)
          {
            *((_QWORD *)&xmmword_1ECF58F40 + 1) |= 0x8000000000000000;
            BYTE2(dword_1ECF4C723) = result;
            if (!v2)
              return 1;
            goto LABEL_19;
          }
          return 0;
        }
        if (!HIDWORD(v201))
          goto LABEL_2427;
        if (!strncasecmp((const char *)this, "useCompilerSignpost", 0x13uLL))
        {
          result = JSC::parse<BOOL>(__s1);
          if ((unsigned __int16)result >= 0x100u)
          {
            qword_1ECF58F50 |= 1uLL;
            HIBYTE(dword_1ECF4C723) = result;
            if (!v2)
              return 1;
            goto LABEL_19;
          }
          return 0;
        }
        result = strncasecmp((const char *)this, "traceLLIntExecution", 0x13uLL);
        if ((_DWORD)result)
        {
LABEL_2427:
          if (!(_DWORD)v205
            || (result = strncasecmp((const char *)this, "traceLLIntSlowPath", 0x12uLL), (_DWORD)result))
          {
            if (HIDWORD(v212) && !strncasecmp((const char *)this, "traceBaselineJITExecution", 0x19uLL))
            {
              result = JSC::parse<BOOL>(__s1);
              if ((unsigned __int16)result >= 0x100u)
              {
                qword_1ECF58F50 |= 8uLL;
                byte_1ECF4C729 = result;
                if (!v2)
                  return 1;
                goto LABEL_19;
              }
              return 0;
            }
            if (v72 && !strncasecmp((const char *)this, "thresholdForGlobalLexicalBindingEpoch", 0x25uLL))
            {
              *(_DWORD *)v214 = 0;
              v188 = sscanf(__s1, "%u", v214);
              result = 0;
              if (v188 == 1)
              {
                qword_1ECF58F50 |= 0x10uLL;
                dword_1ECF4C72C = *(_DWORD *)v214;
                if (!v2)
                  return 1;
                goto LABEL_19;
              }
            }
            else
            {
              if ((_DWORD)v201)
              {
                result = strncasecmp((const char *)this, "diskCachePath", 0xDuLL);
                if (!(_DWORD)result)
                {
                  if (!byte_1ECF4C1E0)
                    return 0;
                  if (*__s1)
                  {
                    v189 = (WTF *)(strlen(__s1) + 1);
                    v190 = (void *)WTF::fastMalloc(v189);
                    result = (uint64_t)memcpy(v190, __s1, (size_t)v189);
                  }
                  else
                  {
                    v190 = 0;
                  }
                  qword_1ECF58F50 |= 0x20uLL;
                  qword_1ECF4C730 = (uint64_t)v190;
                  if (!v2)
                    return 1;
                  goto LABEL_19;
                }
              }
              if (HIDWORD(v209) && !strncasecmp((const char *)this, "forceDiskCache", 0xEuLL))
              {
                if (byte_1ECF4C1E0)
                {
                  result = JSC::parse<BOOL>(__s1);
                  if ((unsigned __int16)result >= 0x100u)
                  {
                    qword_1ECF58F50 |= 0x40uLL;
                    LOBYTE(word_1ECF4C738) = result;
                    if (!v2)
                      return 1;
                    goto LABEL_19;
                  }
                }
                return 0;
              }
              if (v12 && !strncasecmp((const char *)this, "validateAbstractInterpreterState", 0x20uLL))
              {
                if (byte_1ECF4C1E0)
                {
                  result = JSC::parse<BOOL>(__s1);
                  if ((unsigned __int16)result >= 0x100u)
                  {
                    qword_1ECF58F50 |= 0x80uLL;
                    HIBYTE(word_1ECF4C738) = result;
                    if (!v2)
                      return 1;
                    goto LABEL_19;
                  }
                }
                return 0;
              }
              if ((_DWORD)v199
                && !strncasecmp((const char *)this, "validateAbstractInterpreterStateProbability", 0x2BuLL))
              {
                *(_QWORD *)v214 = 0;
                result = sscanf(__s1, "%lf", v214);
                if ((_DWORD)result == 1)
                {
                  v17 = *(uint8x8_t *)v214;
                  qword_1ECF58F50 |= 0x100uLL;
                  qword_1ECF4C740 = *(_QWORD *)v214;
                  if (!v2)
                    return 1;
                  goto LABEL_19;
                }
                return 0;
              }
              if (v204)
              {
                result = strncasecmp((const char *)this, "dumpJITMemoryPath", 0x11uLL);
                if (!(_DWORD)result)
                {
                  if (!byte_1ECF4C1E0)
                    return 0;
                  if (*__s1)
                  {
                    v191 = (WTF *)(strlen(__s1) + 1);
                    v192 = (void *)WTF::fastMalloc(v191);
                    result = (uint64_t)memcpy(v192, __s1, (size_t)v191);
                  }
                  else
                  {
                    v192 = 0;
                  }
                  qword_1ECF58F50 |= 0x200uLL;
                  qword_1ECF4C748 = (uint64_t)v192;
                  if (!v2)
                    return 1;
                  goto LABEL_19;
                }
              }
              if (v8)
              {
                if (!strncasecmp((const char *)this, "dumpJITMemoryFlushInterval", 0x1AuLL))
                {
                  if (byte_1ECF4C1E0)
                  {
                    *(_QWORD *)v214 = 0;
                    result = sscanf(__s1, "%lf", v214);
                    if ((_DWORD)result == 1)
                    {
                      v17 = *(uint8x8_t *)v214;
                      qword_1ECF58F50 |= 0x400uLL;
                      qword_1ECF4C750 = *(_QWORD *)v214;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                  }
                  return 0;
                }
              }
              else if (v9)
              {
                if (!strncasecmp((const char *)this, "useUnlinkedCodeBlockJettisoning", 0x1FuLL))
                {
                  result = JSC::parse<BOOL>(__s1);
                  if ((unsigned __int16)result >= 0x100u)
                  {
                    qword_1ECF58F50 |= 0x800uLL;
                    LOBYTE(word_1ECF4C758) = result;
                    if (!v2)
                      return 1;
                    goto LABEL_19;
                  }
                  return 0;
                }
              }
              else if (HIDWORD(v201) && !strncasecmp((const char *)this, "forceOSRExitToLLInt", 0x13uLL))
              {
                result = JSC::parse<BOOL>(__s1);
                if ((unsigned __int16)result >= 0x100u)
                {
                  qword_1ECF58F50 |= 0x1000uLL;
                  HIBYTE(word_1ECF4C758) = result;
                  if (!v2)
                    return 1;
                  goto LABEL_19;
                }
                return 0;
              }
              if (v12 && !strncasecmp((const char *)this, "getByValICMaxNumberOfIdentifiers", 0x20uLL))
              {
                *(_DWORD *)v214 = 0;
                v195 = sscanf(__s1, "%u", v214);
                result = 0;
                if (v195 == 1)
                {
                  qword_1ECF58F50 |= 0x2000uLL;
                  LODWORD(qword_1ECF4C75C) = *(_DWORD *)v214;
                  if (!v2)
                    return 1;
                  goto LABEL_19;
                }
              }
              else
              {
                if (v7 == 40 && !strncasecmp((const char *)this, "useRandomizingExecutableIslandAllocation", 0x28uLL))
                {
                  result = JSC::parse<BOOL>(__s1);
                  if ((unsigned __int16)result >= 0x100u)
                  {
                    qword_1ECF58F50 |= 0x4000uLL;
                    BYTE4(qword_1ECF4C75C) = result;
                    if (!v2)
                      return 1;
                    goto LABEL_19;
                  }
                  return 0;
                }
                if (v203 && !strncasecmp((const char *)this, "exposeProfilersOnGlobalObject", 0x1DuLL))
                {
                  result = JSC::parse<BOOL>(__s1);
                  if ((unsigned __int16)result >= 0x100u)
                  {
                    qword_1ECF58F50 |= 0x8000uLL;
                    BYTE5(qword_1ECF4C75C) = result;
                    if (!v2)
                      return 1;
                    goto LABEL_19;
                  }
                  return 0;
                }
                if ((_DWORD)v200 && !strncasecmp((const char *)this, "allowUnsupportedTiers", 0x15uLL))
                {
                  result = JSC::parse<BOOL>(__s1);
                  if ((unsigned __int16)result >= 0x100u)
                  {
                    qword_1ECF58F50 |= 0x10000uLL;
                    BYTE6(qword_1ECF4C75C) = result;
                    if (!v2)
                      return 1;
                    goto LABEL_19;
                  }
                  return 0;
                }
                if (HIDWORD(v206))
                {
                  if (!strncasecmp((const char *)this, "returnEarlyFromInfiniteLoopsForFuzzing", 0x26uLL))
                  {
                    result = JSC::parse<BOOL>(__s1);
                    if ((unsigned __int16)result >= 0x100u)
                    {
                      qword_1ECF58F50 |= 0x20000uLL;
                      HIBYTE(qword_1ECF4C75C) = result;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    return 0;
                  }
                }
                else if ((_DWORD)v208 && !strncasecmp((const char *)this, "earlyReturnFromInfiniteLoopsLimit", 0x21uLL))
                {
                  *(_QWORD *)v214 = 0;
                  result = sscanf(__s1, "%zu", v214);
                  if ((_DWORD)result == 1)
                  {
                    qword_1ECF58F50 |= 0x40000uLL;
                    qword_1ECF4C768 = *(_QWORD *)v214;
                    if (!v2)
                      return 1;
                    goto LABEL_19;
                  }
                  return 0;
                }
                if (HIDWORD(v209) && !strncasecmp((const char *)this, "useLICMFuzzing", 0xEuLL))
                {
                  result = JSC::parse<BOOL>(__s1);
                  if ((unsigned __int16)result >= 0x100u)
                  {
                    qword_1ECF58F50 |= 0x80000uLL;
                    byte_1ECF4C770 = result;
                    if (!v2)
                      return 1;
                    goto LABEL_19;
                  }
                  return 0;
                }
                if (v204 && !strncasecmp((const char *)this, "seedForLICMFuzzer", 0x11uLL))
                {
                  *(_DWORD *)v214 = 0;
                  v196 = sscanf(__s1, "%u", v214);
                  result = 0;
                  if (v196 == 1)
                  {
                    qword_1ECF58F50 |= 0x100000uLL;
                    dword_1ECF4C774 = *(_DWORD *)v214;
                    if (!v2)
                      return 1;
                    goto LABEL_19;
                  }
                }
                else
                {
                  if (v11 && !strncasecmp((const char *)this, "allowHoistingLICMProbability", 0x1CuLL))
                  {
                    *(_QWORD *)v214 = 0;
                    result = sscanf(__s1, "%lf", v214);
                    if ((_DWORD)result == 1)
                    {
                      v17 = *(uint8x8_t *)v214;
                      qword_1ECF58F50 |= 0x200000uLL;
                      qword_1ECF4C778 = *(_QWORD *)v214;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    return 0;
                  }
                  if ((_DWORD)v199
                    && !strncasecmp((const char *)this, "exposeCustomSettersOnGlobalObjectForTesting", 0x2BuLL))
                  {
                    result = JSC::parse<BOOL>(__s1);
                    if ((unsigned __int16)result >= 0x100u)
                    {
                      qword_1ECF58F50 |= 0x400000uLL;
                      LOBYTE(qword_1ECF4C780) = result;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    return 0;
                  }
                  if ((_DWORD)v209 && !strncasecmp((const char *)this, "useJITCage", 0xAuLL))
                  {
                    result = JSC::parse<BOOL>(__s1);
                    if ((unsigned __int16)result >= 0x100u)
                    {
                      qword_1ECF58F50 |= 0x800000uLL;
                      BYTE1(qword_1ECF4C780) = result;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    return 0;
                  }
                  if (HIDWORD(v211) && !strncasecmp((const char *)this, "useAllocationProfiling", 0x16uLL))
                  {
                    result = JSC::parse<BOOL>(__s1);
                    if ((unsigned __int16)result >= 0x100u)
                    {
                      qword_1ECF58F50 |= 0x1000000uLL;
                      BYTE2(qword_1ECF4C780) = result;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    return 0;
                  }
                  if (v203 && !strncasecmp((const char *)this, "dumpBaselineJITSizeStatistics", 0x1DuLL))
                  {
                    result = JSC::parse<BOOL>(__s1);
                    if ((unsigned __int16)result >= 0x100u)
                    {
                      qword_1ECF58F50 |= 0x2000000uLL;
                      BYTE3(qword_1ECF4C780) = result;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    return 0;
                  }
                  if (HIDWORD(v210) && !strncasecmp((const char *)this, "dumpDFGJITSizeStatistics", 0x18uLL))
                  {
                    result = JSC::parse<BOOL>(__s1);
                    if ((unsigned __int16)result >= 0x100u)
                    {
                      qword_1ECF58F50 |= 0x4000000uLL;
                      BYTE4(qword_1ECF4C780) = result;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    return 0;
                  }
                  if (v9 && !strncasecmp((const char *)this, "verboseExecutablePoolAllocation", 0x1FuLL))
                  {
                    result = JSC::parse<BOOL>(__s1);
                    if ((unsigned __int16)result >= 0x100u)
                    {
                      qword_1ECF58F50 |= 0x8000000uLL;
                      BYTE5(qword_1ECF4C780) = result;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    return 0;
                  }
                  if ((_DWORD)v212 && !strncasecmp((const char *)this, "useHandlerIC", 0xCuLL))
                  {
                    result = JSC::parse<BOOL>(__s1);
                    if ((unsigned __int16)result >= 0x100u)
                    {
                      qword_1ECF58F50 |= 0x10000000uLL;
                      BYTE6(qword_1ECF4C780) = result;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    return 0;
                  }
                  if (HIDWORD(v209) && !strncasecmp((const char *)this, "useDataICInFTL", 0xEuLL))
                  {
                    result = JSC::parse<BOOL>(__s1);
                    if ((unsigned __int16)result >= 0x100u)
                    {
                      qword_1ECF58F50 |= 0x20000000uLL;
                      HIBYTE(qword_1ECF4C780) = result;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    return 0;
                  }
                  if (HIDWORD(v200) && !strncasecmp((const char *)this, "useDataICSharing", 0x10uLL))
                  {
                    result = JSC::parse<BOOL>(__s1);
                    if ((unsigned __int16)result >= 0x100u)
                    {
                      qword_1ECF58F50 |= 0x40000000uLL;
                      byte_1ECF4C788 = result;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    return 0;
                  }
                  if (v7 == 11)
                  {
                    if (!strncasecmp((const char *)this, "useLLIntICs", 0xBuLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x80000000uLL;
                        LOBYTE(qword_1ECF4C789) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                  }
                  else if (HIDWORD(v212))
                  {
                    if (!strncasecmp((const char *)this, "useBaselineJITCodeSharing", 0x19uLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x100000000uLL;
                        BYTE1(qword_1ECF4C789) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                  }
                  else if (v8 && !strncasecmp((const char *)this, "libpasScavengeContinuously", 0x1AuLL))
                  {
                    result = JSC::parse<BOOL>(__s1);
                    if ((unsigned __int16)result >= 0x100u)
                    {
                      qword_1ECF58F50 |= 0x200000000uLL;
                      BYTE2(qword_1ECF4C789) = result;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    return 0;
                  }
                  if (v12 && !strncasecmp((const char *)this, "useWebAssemblyFaultSignalHandler", 0x20uLL))
                  {
                    result = JSC::parse<BOOL>(__s1);
                    if ((unsigned __int16)result >= 0x100u)
                    {
                      qword_1ECF58F50 |= 0x400000000uLL;
                      BYTE3(qword_1ECF4C789) = result;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    return 0;
                  }
                  if (HIDWORD(v212))
                  {
                    if (!strncasecmp((const char *)this, "dumpUnlinkedDFGValidation", 0x19uLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x800000000uLL;
                        BYTE4(qword_1ECF4C789) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                  }
                  else if (v9)
                  {
                    if (!strncasecmp((const char *)this, "dumpWebAssemblyOpcodeStatistics", 0x1FuLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x1000000000uLL;
                        BYTE5(qword_1ECF4C789) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                  }
                  else if ((_DWORD)v206 && !strncasecmp((const char *)this, "dumpWebAssemblyWarnings", 0x17uLL))
                  {
                    result = JSC::parse<BOOL>(__s1);
                    if ((unsigned __int16)result >= 0x100u)
                    {
                      qword_1ECF58F50 |= 0x2000000000uLL;
                      BYTE6(qword_1ECF4C789) = result;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    return 0;
                  }
                  if ((_DWORD)v200 && !strncasecmp((const char *)this, "useRecursiveJSONParse", 0x15uLL))
                  {
                    result = JSC::parse<BOOL>(__s1);
                    if ((unsigned __int16)result >= 0x100u)
                    {
                      qword_1ECF58F50 |= 0x4000000000uLL;
                      HIBYTE(qword_1ECF4C789) = result;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    return 0;
                  }
                  if (v7 != 30)
                  {
                    if (HIDWORD(v201))
                    {
                      if (!strncasecmp((const char *)this, "useWebAssemblyIPInt", 0x13uLL))
                      {
                        result = JSC::parse<BOOL>(__s1);
                        if ((unsigned __int16)result >= 0x100u)
                        {
                          qword_1ECF58F50 |= 0x10000000000uLL;
                          byte_1ECF4C798 = result;
                          if (!v2)
                            return 1;
                          goto LABEL_19;
                        }
                        return 0;
                      }
                    }
                    else if (v8 && !strncasecmp((const char *)this, "useWebAssemblyIPIntLoopOSR", 0x1AuLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x40000000000uLL;
                        BYTE1(dword_1ECF4C799) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    goto LABEL_2290;
                  }
                  if (strncasecmp((const char *)this, "thresholdForStringReplaceCache", 0x1EuLL))
                  {
                    if (!strncasecmp((const char *)this, "useWebAssemblyIPIntPrologueOSR", 0x1EuLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x20000000000uLL;
                        LOBYTE(dword_1ECF4C799) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    if (!strncasecmp((const char *)this, "useWebAssemblyIPIntEpilogueOSR", 0x1EuLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x80000000000uLL;
                        BYTE2(dword_1ECF4C799) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
LABEL_2290:
                    if (v11)
                    {
                      if (!strncasecmp((const char *)this, "webAssemblyIPIntTiersUpToBBQ", 0x1CuLL))
                      {
                        result = JSC::parse<BOOL>(__s1);
                        if ((unsigned __int16)result >= 0x100u)
                        {
                          qword_1ECF58F50 |= 0x100000000000uLL;
                          HIBYTE(dword_1ECF4C799) = result;
                          if (!v2)
                            return 1;
                          goto LABEL_19;
                        }
                        return 0;
                      }
                      if (!strncasecmp((const char *)this, "webAssemblyIPIntTiersUpToOMG", 0x1CuLL))
                      {
                        result = JSC::parse<BOOL>(__s1);
                        if ((unsigned __int16)result >= 0x100u)
                        {
                          qword_1ECF58F50 |= 0x200000000000uLL;
                          byte_1ECF4C79D = result;
                          if (!v2)
                            return 1;
                          goto LABEL_19;
                        }
                        return 0;
                      }
                    }
                    if (v203 && !strncasecmp((const char *)this, "useInterpretedJSEntryWrappers", 0x1DuLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x400000000000uLL;
                        LOBYTE(word_1ECF4C79E) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    if (v8 && !strncasecmp((const char *)this, "forceAllFunctionsToUseSIMD", 0x1AuLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x800000000000uLL;
                        HIBYTE(word_1ECF4C79E) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    if (HIDWORD(v211) && !strncasecmp((const char *)this, "useArrayBufferTransfer", 0x16uLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x1000000000000uLL;
                        LOBYTE(qword_1ECF4C7A0) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    if (v204 && !strncasecmp((const char *)this, "useArrayFromAsync", 0x11uLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x2000000000000uLL;
                        BYTE1(qword_1ECF4C7A0) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    if (HIDWORD(v201))
                    {
                      if (!strncasecmp((const char *)this, "useArrayGroupMethod", 0x13uLL))
                      {
                        result = JSC::parse<BOOL>(__s1);
                        if ((unsigned __int16)result >= 0x100u)
                        {
                          qword_1ECF58F50 |= 0x4000000000000uLL;
                          BYTE2(qword_1ECF4C7A0) = result;
                          if (!v2)
                            return 1;
                          goto LABEL_19;
                        }
                        return 0;
                      }
                      if (!strncasecmp((const char *)this, "useAtomicsWaitAsync", 0x13uLL))
                      {
                        result = JSC::parse<BOOL>(__s1);
                        if ((unsigned __int16)result >= 0x100u)
                        {
                          qword_1ECF58F50 |= 0x8000000000000uLL;
                          BYTE3(qword_1ECF4C7A0) = result;
                          if (!v2)
                            return 1;
                          goto LABEL_19;
                        }
                        return 0;
                      }
                      if (!strncasecmp((const char *)this, "useImportAttributes", 0x13uLL))
                      {
                        result = JSC::parse<BOOL>(__s1);
                        if ((unsigned __int16)result >= 0x100u)
                        {
                          qword_1ECF58F50 |= 0x20000000000000uLL;
                          BYTE5(qword_1ECF4C7A0) = result;
                          if (!v2)
                            return 1;
                          goto LABEL_19;
                        }
                        return 0;
                      }
                    }
                    else if ((_DWORD)v201 && !strncasecmp((const char *)this, "useSetMethods", 0xDuLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x10000000000000uLL;
                        BYTE4(qword_1ECF4C7A0) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    if ((_DWORD)v200 && !strncasecmp((const char *)this, "useIntlDurationFormat", 0x15uLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x40000000000000uLL;
                        BYTE6(qword_1ECF4C7A0) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    if (v203 && !strncasecmp((const char *)this, "usePromiseWithResolversMethod", 0x1DuLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x80000000000000uLL;
                        HIBYTE(qword_1ECF4C7A0) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    if (HIDWORD(v201) && !strncasecmp((const char *)this, "usePromiseTryMethod", 0x13uLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x100000000000000uLL;
                        LOBYTE(qword_1ECF4C7A8) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    if ((_DWORD)v210 && !strncasecmp((const char *)this, "useRegExpEscape", 0xFuLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x200000000000000uLL;
                        BYTE1(qword_1ECF4C7A8) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    if ((_DWORD)v206 && !strncasecmp((const char *)this, "useResizableArrayBuffer", 0x17uLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x400000000000000uLL;
                        BYTE2(qword_1ECF4C7A8) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    if (HIDWORD(v205) && !strncasecmp((const char *)this, "useSharedArrayBuffer", 0x14uLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x800000000000000uLL;
                        BYTE3(qword_1ECF4C7A8) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    if (HIDWORD(v209) && !strncasecmp((const char *)this, "useShadowRealm", 0xEuLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x1000000000000000uLL;
                        BYTE4(qword_1ECF4C7A8) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    if (HIDWORD(v201))
                    {
                      if (!strncasecmp((const char *)this, "useStringWellFormed", 0x13uLL))
                      {
                        result = JSC::parse<BOOL>(__s1);
                        if ((unsigned __int16)result >= 0x100u)
                        {
                          qword_1ECF58F50 |= 0x2000000000000000uLL;
                          BYTE5(qword_1ECF4C7A8) = result;
                          if (!v2)
                            return 1;
                          goto LABEL_19;
                        }
                        return 0;
                      }
                    }
                    else if (v7 == 11 && !strncasecmp((const char *)this, "useTemporal", 0xBuLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x4000000000000000uLL;
                        BYTE6(qword_1ECF4C7A8) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    if ((_DWORD)v210 && !strncasecmp((const char *)this, "useTrustedTypes", 0xFuLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F50 |= 0x8000000000000000;
                        HIBYTE(qword_1ECF4C7A8) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    if (v8 && !strncasecmp((const char *)this, "useUint8ArrayBase64Methods", 0x1AuLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F58 |= 1uLL;
                        LOBYTE(dword_1ECF4C7B0) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    if (v72 && !strncasecmp((const char *)this, "useWebAssemblyTypedFunctionReferences", 0x25uLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result >= 0x100u)
                      {
                        qword_1ECF58F58 |= 2uLL;
                        BYTE1(dword_1ECF4C7B0) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                      return 0;
                    }
                    if (HIDWORD(v200) && !strncasecmp((const char *)this, "useWebAssemblyGC", 0x10uLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result < 0x100u)
                        return 0;
                      qword_1ECF58F58 |= 4uLL;
                      BYTE2(dword_1ECF4C7B0) = result;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    if ((_DWORD)v205 && !strncasecmp((const char *)this, "useWebAssemblySIMD", 0x12uLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result < 0x100u)
                        return 0;
                      qword_1ECF58F58 |= 8uLL;
                      HIBYTE(dword_1ECF4C7B0) = result;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    if (HIDWORD(v212))
                    {
                      if (!strncasecmp((const char *)this, "useWebAssemblyRelaxedSIMD", 0x19uLL))
                      {
                        result = JSC::parse<BOOL>(__s1);
                        if ((unsigned __int16)result < 0x100u)
                          return 0;
                        qword_1ECF58F58 |= 0x10uLL;
                        LOBYTE(word_1ECF4C7B4) = result;
                        if (!v2)
                          return 1;
                        goto LABEL_19;
                      }
                    }
                    else if ((_DWORD)v206 && !strncasecmp((const char *)this, "useWebAssemblyTailCalls", 0x17uLL))
                    {
                      result = JSC::parse<BOOL>(__s1);
                      if ((unsigned __int16)result < 0x100u)
                        return 0;
                      qword_1ECF58F58 |= 0x20uLL;
                      HIBYTE(word_1ECF4C7B4) = result;
                      if (!v2)
                        return 1;
                      goto LABEL_19;
                    }
                    if (v82)
                    {
                      if (!strncasecmp((const char *)this, "useWebAssemblyExtendedConstantExpressions", 0x29uLL))
                      {
                        result = JSC::parse<BOOL>(__s1);
                        if ((unsigned __int16)result >= 0x100u)
                        {
                          qword_1ECF58F58 |= 0x40uLL;
                          byte_1ECF4C7B6 = result;
                          if (!v2)
                            return 1;
                          goto LABEL_19;
                        }
                      }
                    }
                    return 0;
                  }
                  *(_DWORD *)v214 = 0;
                  v197 = sscanf(__s1, "%u", v214);
                  result = 0;
                  if (v197 == 1)
                  {
                    qword_1ECF58F50 |= 0x8000000000uLL;
                    dword_1ECF4C794 = *(_DWORD *)v214;
                    if (!v2)
                      return 1;
                    goto LABEL_19;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t JSC::Options::setAliasedOption(JSC::Options *this, const char *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t *v16;
  unsigned int v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  size_t v34;
  size_t v35;
  size_t v36;
  size_t v37;
  size_t v38;
  size_t v39;
  size_t v40;
  size_t v41;
  size_t v42;
  unsigned __int16 v43;
  size_t v44;
  size_t v45;
  size_t v46;
  size_t v47;
  size_t v48;
  size_t v49;
  size_t v50;
  size_t v51;
  size_t v52;
  size_t v53;
  size_t v54;
  size_t v55;
  size_t v56;
  size_t v57;
  size_t v58;
  int v59;
  int v60;
  _DWORD *v61;
  JSC::Options *v62;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int8x16_t *v89;
  unsigned int v90;
  int v91;
  int v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;

  v4 = strchr((char *)this, 61);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = 0;
  switch(v4 - (char *)this)
  {
    case 9:
      if (strncasecmp((const char *)this, "disableGC", 9uLL))
        return 0;
      v7 = WTF::fastCompactMalloc((WTF *)0x19);
      *(_QWORD *)v7 = 0x500000002;
      *(_QWORD *)(v7 + 8) = v7 + 20;
      *(_QWORD *)(v7 + 16) = 0x4765737500000004;
      *(_BYTE *)(v7 + 24) = 67;
      v8 = JSC::parse<BOOL>(v5 + 1);
      if (v8 < 0x100u)
        goto LABEL_103;
      if ((_BYTE)v8)
        v16 = (int8x16_t *)"false";
      else
        v16 = (int8x16_t *)"true";
      *(_DWORD *)v7 = 4;
      if ((_BYTE)v8)
        v17 = 5;
      else
        v17 = 4;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v101, v17 + 6, 1, v7, v16, v17);
      v26 = (WTF::StringImpl *)v101;
      if (!v101)
      {
        __break(0xC471u);
        JUMPOUT(0x198B6BFB4);
      }
      goto LABEL_191;
    case 11:
      if (strncasecmp((const char *)this, "validateBCE", 0xBuLL))
        return 0;
      v27 = WTF::fastCompactMalloc((WTF *)0x32);
      *(_QWORD *)v27 = 0x1E00000002;
      *(_QWORD *)(v27 + 8) = v27 + 20;
      *(_DWORD *)(v27 + 16) = 4;
      qmemcpy((void *)(v27 + 20), "validateBoundsCheckElimination", 30);
      *(_DWORD *)v27 = 4;
      v33 = strlen(v5);
      if (v33 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x198B6D438);
      }
      if (__OFADD__((_DWORD)v33, 30)
        || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v33 + 30, 1, v27, v5, v33), (v26 = (WTF::StringImpl *)v101) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x198B6C394);
      }
      goto LABEL_166;
    case 14:
      if (!strncasecmp((const char *)this, "enableProfiler", 0xEuLL))
      {
        v27 = WTF::fastCompactMalloc((WTF *)0x1F);
        *(_QWORD *)v27 = 0xB00000002;
        *(_QWORD *)(v27 + 20) = *(_QWORD *)"useProfiler";
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        *(_DWORD *)(v27 + 27) = 1919249513;
        *(_DWORD *)v27 = 4;
        v50 = strlen(v5);
        if (v50 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D578);
        }
        if (__OFADD__((_DWORD)v50, 11)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v50 + 11, 1, v27, v5, v50), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6CE70);
        }
      }
      else
      {
        if (strncasecmp((const char *)this, "enableDollarVM", 0xEuLL))
          return 0;
        v27 = WTF::fastCompactMalloc((WTF *)0x1F);
        *(_QWORD *)v27 = 0xB00000002;
        *(_QWORD *)(v27 + 20) = *(_QWORD *)"useDollarVM";
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        *(_DWORD *)(v27 + 27) = 1297511009;
        *(_DWORD *)v27 = 4;
        v37 = strlen(v5);
        if (v37 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D6B8);
        }
        if (__OFADD__((_DWORD)v37, 11)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v37 + 11, 1, v27, v5, v37), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6C698);
        }
      }
      goto LABEL_166;
    case 15:
      if (!strncasecmp((const char *)this, "enableTailCalls", 0xFuLL))
      {
        v27 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v27 = 0xC00000002;
        *(_QWORD *)(v27 + 20) = *(_QWORD *)"useTailCalls";
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        *(_DWORD *)(v27 + 28) = 1936485473;
        *(_DWORD *)v27 = 4;
        v49 = strlen(v5);
        if (v49 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D4D8);
        }
        if (__OFADD__((_DWORD)v49, 12)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v49 + 12, 1, v27, v5, v49), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6CDE8);
        }
      }
      else
      {
        if (strncasecmp((const char *)this, "showDisassembly", 0xFuLL))
          return 0;
        v27 = WTF::fastCompactMalloc((WTF *)0x23);
        *(_QWORD *)v27 = 0xF00000002;
        qmemcpy((void *)(v27 + 20), "dumpDisassembly", 15);
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        *(_DWORD *)v27 = 4;
        v36 = strlen(v5);
        if (v36 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D678);
        }
        if (__OFADD__((_DWORD)v36, 15)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v36 + 15, 1, v27, v5, v36), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6C5E0);
        }
      }
      goto LABEL_166;
    case 17:
      if (strncasecmp((const char *)this, "enableOSRExitFuzz", 0x11uLL))
        return 0;
      v27 = WTF::fastCompactMalloc((WTF *)0x22);
      *(_QWORD *)v27 = 0xE00000002;
      qmemcpy((void *)(v27 + 20), "useOSRExitFuzz", 14);
      *(_QWORD *)(v27 + 8) = v27 + 20;
      *(_DWORD *)(v27 + 16) = 4;
      *(_DWORD *)v27 = 4;
      v31 = strlen(v5);
      if (v31 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x198B6D418);
      }
      if (__OFADD__((_DWORD)v31, 14)
        || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v31 + 14, 1, v27, v5, v31), (v26 = (WTF::StringImpl *)v101) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x198B6C244);
      }
      goto LABEL_166;
    case 18:
      if (!strncasecmp((const char *)this, "showDFGDisassembly", 0x12uLL))
      {
        v27 = WTF::fastCompactMalloc((WTF *)0x26);
        *(_QWORD *)v27 = 0x1200000002;
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        *(_WORD *)(v27 + 36) = 31084;
        *(_OWORD *)(v27 + 20) = *(_OWORD *)"dumpDFGDisassembly";
        *(_DWORD *)v27 = 4;
        v47 = strlen(v5);
        if (v47 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D498);
        }
        if (__OFADD__((_DWORD)v47, 18)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v47 + 18, 1, v27, v5, v47), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6CCDCLL);
        }
      }
      else if (!strncasecmp((const char *)this, "showFTLDisassembly", 0x12uLL))
      {
        v27 = WTF::fastCompactMalloc((WTF *)0x26);
        *(_QWORD *)v27 = 0x1200000002;
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        *(_WORD *)(v27 + 36) = 31084;
        *(_OWORD *)(v27 + 20) = *(_OWORD *)"dumpFTLDisassembly";
        *(_DWORD *)v27 = 4;
        v55 = strlen(v5);
        if (v55 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D698);
        }
        if (__OFADD__((_DWORD)v55, 18)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v55 + 18, 1, v27, v5, v55), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D0FCLL);
        }
      }
      else if (!strncasecmp((const char *)this, "objectsAreImmortal", 0x12uLL))
      {
        v27 = WTF::fastCompactMalloc((WTF *)0x26);
        *(_QWORD *)v27 = 0x1200000002;
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        *(_WORD *)(v27 + 36) = 29556;
        *(_OWORD *)(v27 + 20) = *(_OWORD *)"useImmortalObjects";
        *(_DWORD *)v27 = 4;
        v57 = strlen(v5);
        if (v57 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D718);
        }
        if (__OFADD__((_DWORD)v57, 18)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v57 + 18, 1, v27, v5, v57), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D1FCLL);
        }
      }
      else
      {
        if (strncasecmp((const char *)this, "enableTypeProfiler", 0x12uLL))
          return 0;
        v27 = WTF::fastCompactMalloc((WTF *)0x23);
        *(_QWORD *)v27 = 0xF00000002;
        qmemcpy((void *)(v27 + 20), "useTypeProfiler", 15);
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        *(_DWORD *)v27 = 4;
        v34 = strlen(v5);
        if (v34 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D758);
        }
        if (__OFADD__((_DWORD)v34, 15)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v34 + 15, 1, v27, v5, v34), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6C478);
        }
      }
      goto LABEL_166;
    case 19:
      if (!strncasecmp((const char *)this, "enableOSREntryToDFG", 0x13uLL))
      {
        v27 = WTF::fastCompactMalloc((WTF *)0x24);
        *(_QWORD *)v27 = 0x1000000002;
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        *(_OWORD *)(v27 + 20) = *(_OWORD *)"useOSREntryToDFG";
        *(_DWORD *)v27 = 4;
        v51 = strlen(v5);
        if (v51 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D598);
        }
        if (__OFADD__((_DWORD)v51, 16)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v51 + 16, 1, v27, v5, v51), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6CEECLL);
        }
      }
      else if (!strncasecmp((const char *)this, "enableOSREntryToFTL", 0x13uLL))
      {
        v27 = WTF::fastCompactMalloc((WTF *)0x24);
        *(_QWORD *)v27 = 0x1000000002;
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        *(_OWORD *)(v27 + 20) = *(_OWORD *)"useOSREntryToFTL";
        *(_DWORD *)v27 = 4;
        v56 = strlen(v5);
        if (v56 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D6F8);
        }
        if (__OFADD__((_DWORD)v56, 16)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v56 + 16, 1, v27, v5, v56), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D178);
        }
      }
      else if (!strncasecmp((const char *)this, "enableConcurrentJIT", 0x13uLL))
      {
        v27 = WTF::fastCompactMalloc((WTF *)0x24);
        *(_QWORD *)v27 = 0x1000000002;
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        *(_OWORD *)(v27 + 20) = *(_OWORD *)"useConcurrentJIT";
        *(_DWORD *)v27 = 4;
        v58 = strlen(v5);
        if (v58 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D738);
        }
        if (__OFADD__((_DWORD)v58, 16)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v58 + 16, 1, v27, v5, v58), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D780);
        }
      }
      else
      {
        if (strncasecmp((const char *)this, "enableExceptionFuzz", 0x13uLL))
          return 0;
        v27 = WTF::fastCompactMalloc((WTF *)0x24);
        *(_QWORD *)v27 = 0x1000000002;
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        *(_OWORD *)(v27 + 20) = *(_OWORD *)"useExceptionFuzz";
        *(_DWORD *)v27 = 4;
        v38 = strlen(v5);
        if (v38 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D778);
        }
        if (__OFADD__((_DWORD)v38, 16)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v38 + 16, 1, v27, v5, v38), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6C774);
        }
      }
      goto LABEL_166;
    case 20:
      if (strncasecmp((const char *)this, "enableAccessInlining", 0x14uLL))
        return 0;
      v27 = WTF::fastCompactMalloc((WTF *)0x25);
      *(_QWORD *)v27 = 0x1100000002;
      *(_QWORD *)(v27 + 8) = v27 + 20;
      *(_DWORD *)(v27 + 16) = 4;
      *(_BYTE *)(v27 + 36) = 103;
      *(_OWORD *)(v27 + 20) = *(_OWORD *)"useAccessInlining";
      *(_DWORD *)v27 = 4;
      v39 = strlen(v5);
      if (v39 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x198B6D4F8);
      }
      if (__OFADD__((_DWORD)v39, 17)
        || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v39 + 17, 1, v27, v5, v39), (v26 = (WTF::StringImpl *)v101) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x198B6C810);
      }
      goto LABEL_166;
    case 22:
      if (!strncasecmp((const char *)this, "dumpGraphAtEachB3Phase", 0x16uLL))
      {
        v27 = WTF::fastCompactMalloc((WTF *)0x2A);
        *(_QWORD *)v27 = 0x1600000002;
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        qmemcpy((void *)(v27 + 20), "dumpB3GraphAtEachPhase", 22);
        *(_DWORD *)v27 = 4;
        v53 = strlen(v5);
        if (v53 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D5D8);
        }
        if (__OFADD__((_DWORD)v53, 22)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v53 + 22, 1, v27, v5, v53), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6CFF4);
        }
        goto LABEL_166;
      }
      if (strncasecmp((const char *)this, "alwaysDoFullCollection", 0x16uLL))
        return 0;
      v7 = WTF::fastCompactMalloc((WTF *)0x25);
      *(_QWORD *)v7 = 0x1100000002;
      *(_QWORD *)(v7 + 8) = v7 + 20;
      *(_DWORD *)(v7 + 16) = 4;
      *(_BYTE *)(v7 + 36) = 67;
      *(_OWORD *)(v7 + 20) = *(_OWORD *)"useGenerationalGC";
      v43 = JSC::parse<BOOL>(v5 + 1);
      if (v43 < 0x100u)
      {
LABEL_103:
        v6 = 0;
        v26 = (WTF::StringImpl *)v7;
        goto LABEL_176;
      }
      if ((_BYTE)v43)
        v89 = (int8x16_t *)"false";
      else
        v89 = (int8x16_t *)"true";
      *(_DWORD *)v7 = 4;
      if ((_BYTE)v43)
        v90 = 5;
      else
        v90 = 4;
      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v101, v90 | 0x12, 1, v7, v89, v90);
      v26 = (WTF::StringImpl *)v101;
      if (!v101)
      {
        __break(0xC471u);
        JUMPOUT(0x198B6D788);
      }
LABEL_191:
      v102 = v26;
      v91 = *(_DWORD *)v7 - 2;
      if (*(_DWORD *)v7 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v7, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
        v91 = *(_DWORD *)v7;
      }
      else
      {
        *(_DWORD *)v7 = v91;
      }
      v92 = v91 - 2;
      if (v92)
      {
        *(_DWORD *)v7 = v92;
        goto LABEL_170;
      }
      v80 = (WTF::StringImpl *)v7;
      goto LABEL_183;
    case 23:
      if (!strncasecmp((const char *)this, "dumpGraphAtEachDFGPhase", 0x17uLL))
      {
        v27 = WTF::fastCompactMalloc((WTF *)0x2B);
        *(_QWORD *)v27 = 0x1700000002;
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        qmemcpy((void *)(v27 + 20), "dumpDFGGraphAtEachPhase", 23);
        *(_DWORD *)v27 = 4;
        v52 = strlen(v5);
        if (v52 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D5B8);
        }
        if (__OFADD__((_DWORD)v52, 23)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v52 + 23, 1, v27, v5, v52), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6CF70);
        }
      }
      else
      {
        if (strncasecmp((const char *)this, "dumpGraphAtEachAirPhase", 0x17uLL))
          return 0;
        v27 = WTF::fastCompactMalloc((WTF *)0x2B);
        *(_QWORD *)v27 = 0x1700000002;
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        qmemcpy((void *)(v27 + 20), "dumpAirGraphAtEachPhase", 23);
        *(_DWORD *)v27 = 4;
        v42 = strlen(v5);
        if (v42 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D6D8);
        }
        if (__OFADD__((_DWORD)v42, 23)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v42 + 23, 1, v27, v5, v42), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6C9FCLL);
        }
      }
      goto LABEL_166;
    case 25:
      if (!strncasecmp((const char *)this, "enableControlFlowProfiler", 0x19uLL))
      {
        v27 = WTF::fastCompactMalloc((WTF *)0x2A);
        *(_QWORD *)v27 = 0x1600000002;
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        qmemcpy((void *)(v27 + 20), "useControlFlowProfiler", 22);
        *(_DWORD *)v27 = 4;
        v45 = strlen(v5);
        if (v45 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D458);
        }
        if (__OFADD__((_DWORD)v45, 22)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v45 + 22, 1, v27, v5, v45), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6CBD4);
        }
      }
      else
      {
        if (strncasecmp((const char *)this, "maximumInliningCallerSize", 0x19uLL))
          return 0;
        v27 = WTF::fastCompactMalloc((WTF *)0x35);
        *(_QWORD *)v27 = 0x2100000002;
        qmemcpy((void *)(v27 + 20), "maximumInliningCallerBytecodeCost", 33);
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        *(_DWORD *)v27 = 4;
        v30 = strlen(v5);
        if (v30 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D618);
        }
        if (__OFADD__((_DWORD)v30, 33)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v30 + 33, 1, v27, v5, v30), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6C1A8);
        }
      }
      goto LABEL_166;
    case 26:
      if (!strncasecmp((const char *)this, "enableFunctionDotArguments", 0x1AuLL))
      {
        v27 = WTF::fastCompactMalloc((WTF *)0x2B);
        *(_QWORD *)v27 = 0x1700000002;
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        qmemcpy((void *)(v27 + 20), "useFunctionDotArguments", 23);
        *(_DWORD *)v27 = 4;
        v48 = strlen(v5);
        if (v48 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D4B8);
        }
        if (__OFADD__((_DWORD)v48, 23)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v48 + 23, 1, v27, v5, v48), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6CD60);
        }
      }
      else
      {
        if (strncasecmp((const char *)this, "dumpGraphAtEachDFGFTLPhase", 0x1AuLL))
          return 0;
        v27 = WTF::fastCompactMalloc((WTF *)0x2E);
        *(_QWORD *)v27 = 0x1A00000002;
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        qmemcpy((void *)(v27 + 20), "dumpDFGFTLGraphAtEachPhase", 26);
        *(_DWORD *)v27 = 4;
        v35 = strlen(v5);
        if (v35 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D658);
        }
        if (__OFADD__((_DWORD)v35, 26)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v35 + 26, 1, v27, v5, v35), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6C52CLL);
        }
      }
      goto LABEL_166;
    case 29:
      if (!strncasecmp((const char *)this, "enablePolymorphicCallInlining", 0x1DuLL))
      {
        v27 = WTF::fastCompactMalloc((WTF *)0x2E);
        *(_QWORD *)v27 = 0x1A00000002;
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        qmemcpy((void *)(v27 + 20), "usePolymorphicCallInlining", 26);
        *(_DWORD *)v27 = 4;
        v46 = strlen(v5);
        if (v46 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D478);
        }
        if (__OFADD__((_DWORD)v46, 26)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v46 + 26, 1, v27, v5, v46), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6CC58);
        }
      }
      else
      {
        if (strncasecmp((const char *)this, "enableObjectAllocationSinking", 0x1DuLL))
          return 0;
        v27 = WTF::fastCompactMalloc((WTF *)0x2E);
        *(_QWORD *)v27 = 0x1A00000002;
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        qmemcpy((void *)(v27 + 20), "useObjectAllocationSinking", 26);
        *(_DWORD *)v27 = 4;
        v32 = strlen(v5);
        if (v32 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6D638);
        }
        if (__OFADD__((_DWORD)v32, 26)
          || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v32 + 26, 1, v27, v5, v32), (v26 = (WTF::StringImpl *)v101) == 0))
        {
          __break(0xC471u);
          JUMPOUT(0x198B6C2F8);
        }
      }
LABEL_166:
      v102 = v26;
      v59 = *(_DWORD *)v27 - 2;
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v27, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        v59 = *(_DWORD *)v27;
      }
      else
      {
        *(_DWORD *)v27 = v59;
      }
      v60 = v59 - 2;
      if (v60)
      {
        *(_DWORD *)v27 = v60;
      }
      else
      {
        v80 = (WTF::StringImpl *)v27;
LABEL_183:
        WTF::StringImpl::~StringImpl(v80, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
      }
LABEL_170:
      WTF::String::utf8((uint64_t *)&v102, 0, v20, v21, v22, v23, v24, &v101, v25);
      v61 = (_DWORD *)v101;
      if (v101)
        v62 = (JSC::Options *)(v101 + 16);
      else
        v62 = 0;
      v6 = JSC::Options::setOptionWithoutAlias(v62, a2);
      if (v61)
      {
        if (*v61 == 1)
          WTF::fastFree((unint64_t)v61, v9, v10, v11, v12, v13, v14, v15);
        else
          --*v61;
      }
LABEL_176:
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
      break;
    case 30:
      if (strncasecmp((const char *)this, "enableExecutableAllocationFuzz", 0x1EuLL))
        return 0;
      v27 = WTF::fastCompactMalloc((WTF *)0x2F);
      *(_QWORD *)v27 = 0x1B00000002;
      *(_QWORD *)(v27 + 8) = v27 + 20;
      *(_DWORD *)(v27 + 16) = 4;
      qmemcpy((void *)(v27 + 20), "useExecutableAllocationFuzz", 27);
      *(_DWORD *)v27 = 4;
      v29 = strlen(v5);
      if (v29 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x198B6D3F8);
      }
      if (__OFADD__((_DWORD)v29, 27)
        || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v29 + 27, 1, v27, v5, v29), (v26 = (WTF::StringImpl *)v101) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x198B6C0F0);
      }
      goto LABEL_166;
    case 31:
      if (strncasecmp((const char *)this, "enablePolymorphicAccessInlining", 0x1FuLL))
        return 0;
      v27 = WTF::fastCompactMalloc((WTF *)0x30);
      *(_QWORD *)v27 = 0x1C00000002;
      *(_QWORD *)(v27 + 8) = v27 + 20;
      *(_DWORD *)(v27 + 16) = 4;
      qmemcpy((void *)(v27 + 20), "usePolymorphicAccessInlining", 28);
      *(_DWORD *)v27 = 4;
      v40 = strlen(v5);
      if (v40 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x198B6D518);
      }
      if (__OFADD__((_DWORD)v40, 28)
        || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v40 + 28, 1, v27, v5, v40), (v26 = (WTF::StringImpl *)v101) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x198B6C8ACLL);
      }
      goto LABEL_166;
    case 33:
      if (strncasecmp((const char *)this, "enablePolyvariantDevirtualization", 0x21uLL))
        return 0;
      v27 = WTF::fastCompactMalloc((WTF *)0x32);
      *(_QWORD *)v27 = 0x1E00000002;
      *(_QWORD *)(v27 + 8) = v27 + 20;
      *(_DWORD *)(v27 + 16) = 4;
      qmemcpy((void *)(v27 + 20), "usePolyvariantDevirtualization", 30);
      *(_DWORD *)v27 = 4;
      v41 = strlen(v5);
      if (v41 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x198B6D538);
      }
      if (__OFADD__((_DWORD)v41, 30)
        || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v41 + 30, 1, v27, v5, v41), (v26 = (WTF::StringImpl *)v101) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x198B6C948);
      }
      goto LABEL_166;
    case 35:
      if (strncasecmp((const char *)this, "maximumFTLCandidateInstructionCount", 0x23uLL))
        return 0;
      v27 = WTF::fastCompactMalloc((WTF *)0x33);
      *(_QWORD *)v27 = 0x1F00000002;
      *(_QWORD *)(v27 + 8) = v27 + 20;
      *(_DWORD *)(v27 + 16) = 4;
      qmemcpy((void *)(v27 + 20), "maximumFTLCandidateBytecodeCost", 31);
      *(_DWORD *)v27 = 4;
      v54 = strlen(v5);
      if (v54 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x198B6D5F8);
      }
      if (__OFADD__((_DWORD)v54, 31)
        || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v54 + 31, 1, v27, v5, v54), (v26 = (WTF::StringImpl *)v101) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x198B6D078);
      }
      goto LABEL_166;
    case 39:
      if (strncasecmp((const char *)this, "enableArchitectureSpecificOptimizations", 0x27uLL))
        return 0;
      v27 = WTF::fastCompactMalloc((WTF *)0x38);
      *(_QWORD *)v27 = 0x2400000002;
      qmemcpy((void *)(v27 + 20), "useArchitectureSpecificOptimizations", 36);
      *(_QWORD *)(v27 + 8) = v27 + 20;
      *(_DWORD *)(v27 + 16) = 4;
      *(_DWORD *)v27 = 4;
      v44 = strlen(v5);
      if (v44 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x198B6D558);
      }
      if (__OFADD__((_DWORD)v44, 36)
        || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v44 + 36, 1, v27, v5, v44), (v26 = (WTF::StringImpl *)v101) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x198B6CB30);
      }
      goto LABEL_166;
    case 44:
      if (strncasecmp((const char *)this, "maximumOptimizationCandidateInstructionCount", 0x2CuLL))
        return 0;
      v27 = WTF::fastCompactMalloc((WTF *)0x3C);
      *(_QWORD *)v27 = 0x2800000002;
      qmemcpy((void *)(v27 + 20), "maximumOptimizationCandidateBytecodeCost", 40);
      *(_QWORD *)(v27 + 8) = v27 + 20;
      *(_DWORD *)(v27 + 16) = 4;
      *(_DWORD *)v27 = 4;
      v28 = strlen(v5);
      if (v28 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x198B6D3D8);
      }
      if (__OFADD__((_DWORD)v28, 40)
        || (WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(&v101, v28 + 40, 1, v27, v5, v28), (v26 = (WTF::StringImpl *)v101) == 0))
      {
        __break(0xC471u);
        JUMPOUT(0x198B6C054);
      }
      goto LABEL_166;
    default:
      return v6;
  }
  return v6;
}

uint64_t JSC::Options::dumpOption(uint64_t result, int a2, unsigned int a3, int8x16_t *a4, uint64_t a5, int8x16_t *a6, uint64_t a7, uint64_t a8)
{
  int v8;
  __int16 v10;
  uint64_t v11;
  char **v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  char *v20;
  int8x16_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  char **v44;
  char *v45;
  uint64_t v46;
  size_t v47;
  int8x16_t *v49;
  __int128 v50;
  uint64_t v51;
  unsigned __int16 v52;
  __int128 v53;
  uint64_t v54;
  int8x16_t v55;

  if (a3 >= 0x1C7)
  {
    __break(0xC471u);
    JUMPOUT(0x198B6DB88);
  }
  v8 = a8;
  v10 = a3;
  v11 = result;
  v13 = &(&JSC::OptionsHelper::g_constMetaData)[5 * a3];
  v14 = *((unsigned __int16 *)v13 + 17);
  v52 = a3;
  v15 = *((unsigned __int8 *)v13 + 32);
  v16 = (char *)&g_config[70] + v14;
  switch(v15)
  {
    case 0:
    case 7:
    case 8:
      LOBYTE(v53) = *v16;
      break;
    case 1:
    case 3:
      LODWORD(v53) = *(_DWORD *)v16;
      break;
    case 2:
    case 4:
    case 6:
      *(_QWORD *)&v53 = *(_QWORD *)v16;
      break;
    case 5:
      v53 = *(_OWORD *)v16;
      v54 = *(uint64_t *)((char *)&g_config[72] + v14);
      break;
    default:
      break;
  }
  if (*((_BYTE *)&JSC::OptionsHelper::g_constMetaData + 40 * a3 + 33))
  {
    if (*((_BYTE *)&JSC::OptionsHelper::g_constMetaData + 40 * a3 + 33) == 1)
    {
      if (!byte_1ECF4C1E0)
        return result;
    }
    else if (a3 != 52)
    {
      return result;
    }
  }
  v17 = *(_QWORD *)&_MergedGlobals_46[(((unint64_t)a3 >> 3) & 0x1FF8) + 8] & (1 << a3);
  if (a2 == 3)
  {
    v18 = (&JSC::OptionsHelper::g_constMetaData)[5 * a3 + 2] != 0;
  }
  else
  {
    v18 = 0;
    if (a2 == 1 && !v17)
      return result;
  }
  if (a5)
    WTF::StringBuilder::append(result, a4, a5 - 1, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
  v19 = &(&JSC::OptionsHelper::g_constMetaData)[5 * a3];
  v21 = (int8x16_t *)*v19;
  v20 = v19[1];
  if (v20)
  {
    --v20;
    v49 = v21;
    if ((unint64_t)v20 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198B6DBD8);
    }
  }
  else
  {
    v49 = v21;
  }
  LODWORD(v50) = (_DWORD)v20;
  v55.i8[0] = 61;
  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<char,void>>(v11, (uint64_t)&v49, v55.i8, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
  JSC::OptionsHelper::Option::dump((JSC::OptionsHelper::Option *)&v52, (WTF::StringBuilder *)v11, v22, v23, v24, v25, v26, v27);
  if (v8 == 1 && v17 && JSC::OptionsHelper::g_metadata)
  {
    LOWORD(v49) = v10;
    v34 = (__int128 *)(JSC::OptionsHelper::g_metadata + v14);
    switch(v15)
    {
      case 0:
      case 7:
      case 8:
        LOBYTE(v50) = *(_BYTE *)v34;
        break;
      case 1:
      case 3:
        LODWORD(v50) = *(_DWORD *)v34;
        break;
      case 2:
      case 4:
      case 6:
        *(_QWORD *)&v50 = *(_QWORD *)v34;
        break;
      case 5:
        v35 = *v34;
        v51 = *((_QWORD *)v34 + 2);
        v50 = v35;
        break;
      default:
        break;
    }
    v36 = *(_DWORD *)(v11 + 16);
    if ((v36 & 0x80000000) == 0)
    {
      v37 = *(_QWORD *)(v11 + 8);
      if ((v37 || (v37 = *(_QWORD *)v11) != 0) && (*(_BYTE *)(v37 + 16) & 4) == 0)
      {
        v38 = WTF::StringBuilder::extendBufferForAppending<char16_t>(v11, (WTF::AtomStringImpl *)(v36 + 11), v28, v29, v30, v31, v32, v33);
        if (v38)
        {
          *(_OWORD *)v38 = xmmword_199158E50;
          *(_DWORD *)(v38 + 16) = 3801204;
          *(_WORD *)(v38 + 20) = 32;
        }
      }
      else
      {
        v39 = WTF::StringBuilder::extendBufferForAppending<unsigned char>(v11, (WTF::AtomStringImpl *)(v36 + 11), v28, v29, v30, v31, v32, v33);
        if (v39)
        {
          *(_DWORD *)(v39 + 7) = 540701804;
          *(_QWORD *)v39 = *(_QWORD *)" (default: ";
        }
      }
    }
    JSC::OptionsHelper::Option::dump((JSC::OptionsHelper::Option *)&v49, (WTF::StringBuilder *)v11, v28, v29, v30, v31, v32, v33);
    v55.i8[0] = 41;
    v40 = *(_QWORD *)(v11 + 8);
    if (!v40 || (v41 = *(unsigned int *)(v11 + 16), v41 >= *(_DWORD *)(v40 + 4)) || *(_QWORD *)v11)
    {
      WTF::StringBuilder::append(v11, &v55, 1uLL, v29, v30, v31, v32, v33);
    }
    else
    {
      v42 = *(_DWORD *)(v40 + 16);
      v43 = *(_QWORD *)(v40 + 8);
      *(_DWORD *)(v11 + 16) = v41 + 1;
      if ((v42 & 4) != 0)
        *(_BYTE *)(v43 + v41) = 41;
      else
        *(_WORD *)(v43 + 2 * v41) = 41;
    }
  }
  if (v18)
  {
    v44 = &(&JSC::OptionsHelper::g_constMetaData)[5 * v52];
    v46 = (uint64_t)v44[2];
    v45 = v44[3];
    v49 = (int8x16_t *)"   ... ";
    LODWORD(v50) = 7;
    if (v45)
    {
      --v45;
      v55.i64[0] = v46;
      if ((unint64_t)v45 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x198B6DC10);
      }
    }
    else
    {
      v55.i64[0] = v46;
    }
    v55.i32[2] = (int)v45;
    WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v11, &v49, (uint64_t)&v55, v29, v30, v31, v32, v33);
  }
  if (a7)
    v47 = a7 - 1;
  else
    v47 = 0;
  return WTF::StringBuilder::append(v11, a6, v47, v29, v30, v31, v32, v33);
}

uint64_t JSC::Options::dumpAllOptionsInALine(JSC::Options *this, WTF::StringBuilder *a2)
{
  return JSC::Options::dumpAllOptions((uint64_t)this, 2, 0, 0, (uint64_t)" ", 2, 0, 0, 0, 0, 0);
}

void JSC::OptionsHelper::Option::dump(JSC::OptionsHelper::Option *this, WTF::StringBuilder *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int8x16_t *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _WORD *v21;
  const char *v22;
  size_t v23;
  const char *v24;
  size_t v25;
  size_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  int8x16_t v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  char *v46;
  char *v47;
  __int16 v48;
  uint64_t v49;
  WTF::AtomStringImpl *v50;
  WTF::StringImpl *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  _BYTE *v71;
  size_t v72;
  _BYTE *v73;
  char *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  const char *v78;
  int v79;
  _BYTE v80[12];
  int8x16x2_t v81;
  int8x16x2_t v82;
  int8x16x2_t v83;

  *(_QWORD *)&v80[4] = *MEMORY[0x1E0C80C00];
  switch(LOBYTE((&JSC::OptionsHelper::g_constMetaData)[5 * *(unsigned __int16 *)this + 4]))
  {
    case 0:
      if (*((_BYTE *)this + 8))
        v9 = (int8x16_t *)"true";
      else
        v9 = (int8x16_t *)"false";
      v10 = 5;
      if (!*((_BYTE *)this + 8))
        v10 = 6;
      goto LABEL_81;
    case 1:
      LODWORD(v78) = *((_DWORD *)this + 2);
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned int,void>>((uint64_t)a2, (unsigned int *)&v78, a3, a4, a5, a6, a7, a8);
      return;
    case 2:
      WTF::StringBuilder::append<double>((uint64_t)a2, (uint64_t *)this + 1);
      return;
    case 3:
      v11 = *((_DWORD *)this + 2);
      v12 = *((_DWORD *)a2 + 4);
      if ((v11 & 0x80000000) != 0)
      {
        v75 = -v11;
        v13 = 1;
        do
        {
          ++v13;
          v16 = v75 >= 0xA;
          v75 /= 0xAu;
        }
        while (v16);
      }
      else
      {
        v13 = 0;
        v14 = *((_DWORD *)this + 2);
        do
        {
          ++v13;
          v15 = v14 > 9;
          v14 /= 0xAu;
        }
        while (v15);
      }
      v16 = __CFADD__(v13, v12);
      v17 = v13 + v12;
      if (v16)
        v18 = 0xFFFFFFFFLL;
      else
        v18 = v17;
      v19 = *((_QWORD *)a2 + 1);
      if (v19)
      {
        v20 = *(_DWORD *)(v19 + 16);
        if ((v20 & 4) == 0)
          goto LABEL_18;
        v30 = *(_DWORD *)(v19 + 4);
        if (v30 >= v18)
        {
          v51 = *(WTF::StringImpl **)a2;
          *(_QWORD *)a2 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
            {
              WTF::StringImpl::~StringImpl(v51, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
              v19 = *((_QWORD *)a2 + 1);
            }
            else
            {
              *(_DWORD *)v51 -= 2;
            }
          }
          v67 = *((_DWORD *)a2 + 4);
          goto LABEL_111;
        }
        if (v12 < 0)
          return;
LABEL_38:
        v31 = 2 * v30;
        if (2 * v30 >= 0x7FFFFFFF)
          v31 = 0x7FFFFFFF;
        if (v31 <= v18)
          v31 = v18;
        if (v31 <= 0x10)
          v32 = 16;
        else
          v32 = v31;
        if ((v19 || (v19 = *(_QWORD *)a2) != 0) && (*(_BYTE *)(v19 + 16) & 4) == 0)
          WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)a2, (WTF::AtomStringImpl *)v32, a3, a4, a5, a6, a7, a8);
        else
          WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)a2, (WTF::AtomStringImpl *)v32, a3, a4, a5, a6, a7, a8);
        v67 = *((_DWORD *)a2 + 4);
        if ((v67 & 0x80000000) != 0)
          return;
        v19 = *((_QWORD *)a2 + 1);
LABEL_111:
        v68 = *(_QWORD *)(v19 + 8);
        *((_DWORD *)a2 + 4) = v18;
        if (!v68)
          return;
        v69 = (void *)(v68 + v67);
        v70 = 0;
        if ((v11 & 0x80000000) != 0)
        {
          v76 = -v11;
          do
          {
            v80[v70--] = (v76 % 0xA) | 0x30;
            v15 = v76 > 9;
            v76 /= 0xAu;
          }
          while (v15);
          v77 = v70 + 12;
          v71 = (char *)&v78 + v70 + 12;
          *v71 = 45;
          if (v70 + 14 > 14)
            return;
          if (v77 <= 12)
            v77 = 12;
          v72 = v77 - v70 - 11;
        }
        else
        {
          do
          {
            v80[v70--] = (v11 % 0xA) | 0x30;
            v15 = v11 > 9;
            v11 /= 0xAu;
          }
          while (v15);
          if (v70 + 14 > 13)
            return;
          v71 = &v80[v70 + 1];
          v72 = -v70;
        }
        memcpy(v69, v71, v72);
        return;
      }
      if (!*(_QWORD *)a2 || (v20 = *(_DWORD *)(*(_QWORD *)a2 + 16), (v20 & 4) != 0))
      {
        if (!(_DWORD)v18)
          return;
        v30 = *((_DWORD *)a2 + 4);
        if (v12 < 0)
          return;
        goto LABEL_38;
      }
LABEL_18:
      if ((v20 & 4) == 0)
      {
        v21 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)a2, (WTF::AtomStringImpl *)v18, a3, a4, a5, a6, a7, a8);
        goto LABEL_93;
      }
      if (!v12)
      {
        v50 = 0;
        if (!v19)
        {
          v12 = 0;
          goto LABEL_84;
        }
LABEL_83:
        v12 = *(_DWORD *)(v19 + 4);
        goto LABEL_84;
      }
      v49 = *(_QWORD *)a2;
      if (!*(_QWORD *)a2)
        v49 = *((_QWORD *)a2 + 1);
      v50 = *(WTF::AtomStringImpl **)(v49 + 8);
      if (v19)
        goto LABEL_83;
      if (v12 < 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198B6E030);
      }
LABEL_84:
      v52 = 2 * v12;
      if ((2 * v12) >= 0x7FFFFFFF)
        v52 = 0x7FFFFFFF;
      if (v52 <= v18)
        v52 = v18;
      if (v52 <= 0x10)
        v53 = 16;
      else
        v53 = v52;
      WTF::StringBuilder::allocateBuffer<char16_t,unsigned char>((uint64_t)a2, v50, v53, a4, a5, a6, a7, a8);
      v54 = *((unsigned int *)a2 + 4);
      if ((v54 & 0x80000000) == 0)
      {
        v55 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
        *((_DWORD *)a2 + 4) = v18;
        v21 = (_WORD *)(v55 + 2 * v54);
LABEL_93:
        if (v21)
        {
          if ((v11 & 0x80000000) != 0)
          {
            v57 = -v11;
            v58 = 12;
            do
            {
              *((_BYTE *)&v78 + v58--) = (v57 % 0xA) | 0x30;
              v15 = v57 > 9;
              v57 /= 0xAu;
            }
            while (v15);
            *((_BYTE *)&v78 + v58) = 45;
            if (v58 + 2 <= 14)
            {
              do
              {
                *v21++ = *((unsigned __int8 *)&v78 + v58);
                v15 = v58++ < 12;
              }
              while (v15);
            }
          }
          else
          {
            v56 = 0;
            do
            {
              v80[v56--] = (v11 % 0xA) | 0x30;
              v15 = v11 > 9;
              v11 /= 0xAu;
            }
            while (v15);
            if (v56 + 14 <= 13)
            {
              do
              {
                *v21++ = v80[v56 + 1];
                v16 = __CFADD__(v56++, 1);
              }
              while (!v16);
            }
          }
        }
      }
      return;
    case 4:
      v78 = (const char *)*((_QWORD *)this + 1);
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<unsigned long,void>>((uint64_t)a2, (unint64_t *)&v78, a3, a4, a5, a6, a7, a8);
      return;
    case 5:
      if (*((int *)this + 2) < 2)
      {
        v22 = "<null>";
      }
      else
      {
        v22 = (const char *)*((_QWORD *)this + 2);
        if (!v22)
        {
          LODWORD(v23) = 0;
          v78 = 0;
          goto LABEL_35;
        }
      }
      v23 = strlen(v22);
      v78 = v22;
      if (v23 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x198B6E36CLL);
      }
LABEL_35:
      v79 = v23;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>((uint64_t)a2, (uint64_t)&v78, a3, a4, a5, a6, a7, a8);
      return;
    case 6:
      v24 = (const char *)*((_QWORD *)this + 1);
      if (v24)
      {
        v25 = strlen(*((const char **)this + 1));
        if (v25 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B6E34CLL);
        }
        v26 = v25;
        v27 = v25 + 2;
        v28 = v25;
      }
      else
      {
        v26 = 0;
        v28 = 0;
        v27 = 2;
        v24 = "";
      }
      v33 = *((_DWORD *)a2 + 4);
      v16 = __CFADD__(v33, v27);
      v34 = v33 + v27;
      if (v16)
        v35 = 0xFFFFFFFFLL;
      else
        v35 = v34;
      v36 = *((_QWORD *)a2 + 1);
      if ((v36 || (v36 = *(_QWORD *)a2) != 0) && (*(_BYTE *)(v36 + 16) & 4) == 0)
      {
        v37 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a2, (WTF::AtomStringImpl *)v35, a3, a4, a5, a6, a7, a8);
        if (v37)
        {
          *v37 = 34;
          v38 = (char *)(v37 + 1);
          v39 = &v38[2 * v26];
          if ((v26 & 0xFFFFFFC0) != 0)
          {
            v40 = &v38[2 * (v26 & 0xFFFFFFC0)];
            v41 = 0uLL;
            do
            {
              v81.val[0] = *(int8x16_t *)v24;
              v42 = *((int8x16_t *)v24 + 1);
              v82.val[0] = (int8x16_t)*((_OWORD *)v24 + 2);
              v43 = *((_OWORD *)v24 + 3);
              v24 += 64;
              v44 = v43;
              v82.val[1] = 0uLL;
              v83.val[0] = v42;
              v81.val[1] = 0uLL;
              v45 = v38;
              vst2q_s8(v45, v81);
              v45 += 32;
              v83.val[1] = 0uLL;
              vst2q_s8(v45, v83);
              v46 = v38 + 64;
              vst2q_s8(v46, v82);
              v47 = v38 + 96;
              vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
              v38 += 128;
            }
            while (v38 != v40);
            v38 = v40;
          }
          while (v38 != v39)
          {
            v48 = *(unsigned __int8 *)v24++;
            *(_WORD *)v38 = v48;
            v38 += 2;
          }
          *(_WORD *)v39 = 34;
        }
      }
      else
      {
        v73 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)a2, (WTF::AtomStringImpl *)v35, a3, a4, a5, a6, a7, a8);
        if (v73)
        {
          *v73 = 34;
          v74 = v73 + 1;
          if (v28 == 1)
          {
            *v74 = *v24;
          }
          else if (v28)
          {
            memcpy(v73 + 1, v24, v26);
          }
          v74[v26] = 34;
        }
      }
      return;
    case 7:
      v29 = *((unsigned __int8 *)this + 8);
      if (*((_BYTE *)this + 8))
      {
        if (v29 == 2)
        {
          v9 = (int8x16_t *)"Verbose";
LABEL_65:
          v10 = 8;
        }
        else
        {
          if (v29 != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198B6E430);
          }
          v9 = (int8x16_t *)"Basic";
LABEL_80:
          v10 = 6;
        }
      }
      else
      {
        v9 = (int8x16_t *)"None";
LABEL_76:
        v10 = 5;
      }
LABEL_81:
      WTF::StringBuilder::append((uint64_t)a2, v9, v10 - 1, a4, a5, a6, a7, a8);
      return;
    case 8:
      v9 = (int8x16_t *)"none";
      v10 = 5;
      switch(*((_BYTE *)this + 8))
      {
        case 0:
          goto LABEL_81;
        case 1:
          v9 = (int8x16_t *)"default";
          goto LABEL_65;
        case 2:
          v9 = (int8x16_t *)"info";
          goto LABEL_76;
        case 3:
          v9 = (int8x16_t *)"debug";
          goto LABEL_80;
        case 4:
          v9 = (int8x16_t *)"error";
          goto LABEL_80;
        case 5:
          v9 = (int8x16_t *)"fault";
          goto LABEL_80;
        default:
          __break(0xC471u);
          JUMPOUT(0x198B6E450);
      }
    default:
      return;
  }
}

uint64_t WTF::dataLog<char [69]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "INCOHERENT OPTIONS: at least one of useLLInt or useJIT must be true\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [83]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "INCOHERENT OPTIONS: at least one of useWebAssemblyLLInt or useBBQJIT must be true\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [84]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "INCOHERENT OPTIONS: can't restrict pointer tagging to pacibsp and use posix signals");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

char *WTF::StringBuilder::append<double>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char *result;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  int8x16_t v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  char *v34;
  char *v35;
  __int16 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char __s[16];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  size_t __n[2];
  uint64_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;

  v53 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = ((unint64_t)*a2 >> 52) & 0x7FF;
  v5 = v3 & 0x800FFFFFFFFFFFFFLL;
  if ((_DWORD)v4 != 2047)
  {
    v7 = v3 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v5 & 0x8000000000000000) != 0 && v7)
    {
      __s[0] = 45;
      v8 = &__s[1];
    }
    else
    {
      v8 = __s;
      if (!v7)
      {
        v6 = &__s[1];
        __s[0] = 48;
        goto LABEL_8;
      }
    }
    v9 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v5, v4);
    v6 = WTF::dragonbox::detail::to_shortest(v9, v10, (uint64_t)v8, v11);
    goto LABEL_8;
  }
  if ((v3 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    qmemcpy(__s, "NaN", 3);
    v6 = &__s[3];
  }
  else
  {
    v27 = __s;
    if ((v5 & 0x8000000000000000) != 0)
    {
      __s[0] = 45;
      v27 = &__s[1];
    }
    *(_QWORD *)v27 = 0x7974696E69666E49;
    v6 = v27 + 8;
  }
LABEL_8:
  *v6 = 0;
  v12 = strlen(__s);
  memcpy(&v37, __s, v12);
  *((_BYTE *)&v37 + v12) = 0;
  HIDWORD(v44) = strlen((const char *)&v37);
  v19 = *(_DWORD *)(a1 + 16);
  v20 = __CFADD__(v19, HIDWORD(v44));
  v21 = v19 + HIDWORD(v44);
  if (v20)
    v22 = 0xFFFFFFFFLL;
  else
    v22 = v21;
  v23 = *(_QWORD *)(a1 + 8);
  if ((v23 || (v23 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v23 + 16) & 4) == 0)
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v22, v13, v14, v15, v16, v17, v18);
    if (result)
    {
      v49 = v41;
      v50 = v42;
      v51 = v43;
      *(_OWORD *)__n = v44;
      *(_OWORD *)__s = v37;
      v46 = v38;
      v47 = v39;
      v48 = v40;
      v25 = &result[2 * HIDWORD(v44)];
      if (HIDWORD(v44) >= 0x40)
      {
        v28 = &result[2 * (HIDWORD(v44) & 0xFFFFFFC0)];
        v26 = __s;
        v29 = 0uLL;
        do
        {
          v54.val[0] = *(int8x16_t *)v26;
          v30 = *((int8x16_t *)v26 + 1);
          v55.val[0] = (int8x16_t)*((_OWORD *)v26 + 2);
          v31 = *((_OWORD *)v26 + 3);
          v26 += 64;
          v32 = v31;
          v55.val[1] = 0uLL;
          v56.val[0] = v30;
          v54.val[1] = 0uLL;
          v33 = result;
          vst2q_s8(v33, v54);
          v33 += 32;
          v56.val[1] = 0uLL;
          vst2q_s8(v33, v56);
          v34 = result + 64;
          vst2q_s8(v34, v55);
          v35 = result + 96;
          vst2q_s8(v35, *(int8x16x2_t *)(&v29 - 1));
          result += 128;
        }
        while (result != v28);
        result = v28;
      }
      else
      {
        v26 = __s;
      }
      while (result != v25)
      {
        v36 = *v26++;
        *(_WORD *)result = v36;
        result += 2;
      }
    }
  }
  else
  {
    result = (char *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v22, v13, v14, v15, v16, v17, v18);
    if (result)
    {
      v49 = v41;
      v50 = v42;
      v51 = v43;
      *(_OWORD *)__n = v44;
      *(_OWORD *)__s = v37;
      v46 = v38;
      v47 = v39;
      v48 = v40;
      if (HIDWORD(v44) == 1)
      {
        *result = __s[0];
      }
      else if (HIDWORD(v44))
      {
        return (char *)memcpy(result, __s, HIDWORD(v44));
      }
    }
  }
  return result;
}

uint64_t JSC::canUseJITCage(JSC *this)
{
  return 0;
}

uint64_t JSC::OrderedHashTable<JSC::MapTraits>::visitChildren(JSC::JSObject *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

void JSC::OrderedHashTable<JSC::MapTraits>::visitChildren(JSC::JSObject *a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  JSC::JSObject::visitChildren(a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)a1 + 2);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v17 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_9;
    }
    if (!*(_QWORD *)(a2 + 168))
      return;
LABEL_9:
    JSC::SlotVisitor::appendSlow(a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::OrderedHashTable<JSC::SetTraits>::visitChildren(JSC::JSObject *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

void JSC::OrderedHashTable<JSC::SetTraits>::visitChildren(JSC::JSObject *a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  JSC::JSObject::visitChildren(a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)a1 + 2);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v17 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_9;
    }
    if (!*(_QWORD *)(a2 + 168))
      return;
LABEL_9:
    JSC::SlotVisitor::appendSlow(a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

unint64_t JSC::numberProtoFuncToLocaleString(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t result;
  double v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(_DWORD **);
  _DWORD **v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  JSC::Exception *v24;
  int v25;
  uint64_t (*v26)(_DWORD **);
  _DWORD **v27;
  unint64_t v28;
  unint64_t *v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  int8x16_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  JSC::Heap *v46;
  unint64_t SlowCase;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  __int128 v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  char *v79;
  char *v80;
  char *v81;
  __int16 v82;
  uint64_t (*v83)(_DWORD **);
  _DWORD **v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  unsigned __int128 v91;
  char v92;
  WTF::StringImpl *v93;
  _DWORD *v94;
  unint64_t v95;
  char *v96;
  int8x16x2_t v97;
  int8x16x2_t v98;
  int8x16x2_t v99;

  v10 = *(_QWORD *)(this + 56);
  result = *((_QWORD *)a2 + 5);
  if (result >= 0xFFFE000000000000)
  {
    v12 = (double)(int)result;
    goto LABEL_3;
  }
  if (result - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    *(_QWORD *)&v12 = result - 0x2000000000000;
    goto LABEL_3;
  }
  if ((result & 0xFFFE000000000002) == 0 && *(_BYTE *)(result + 5) == 30)
  {
    v28 = *(_QWORD *)(result + 16);
    if (v28 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&v12 = v28 - 0x2000000000000;
    else
      v12 = (double)(int)v28;
LABEL_3:
    if (*((_DWORD *)a2 + 8) == 1
      || ((v13 = *((_QWORD *)a2 + 6), *((_DWORD *)a2 + 8) == 2) ? (v14 = 10) : (v14 = *((_QWORD *)a2 + 7)),
          v13 == 10 && v14 == 10))
    {
      v15 = *(_QWORD *)(this + 296);
      if ((v15 & 1) != 0)
      {
        v16 = *(uint64_t (**)(_DWORD **))(v15 & 0xFFFFFFFFFFFFFFFCLL);
        v17 = (_DWORD **)(this & 0xFFFFFFFFFFFFC000 | 8);
        if ((this & 8) != 0)
          v17 = (_DWORD **)(this - 16);
        v94 = *v17;
        v95 = this;
        v96 = (char *)(this + 296);
        v15 = v16(&v94);
      }
    }
    else
    {
      v18 = *(_QWORD *)(this + 400);
      if ((v18 & 1) != 0)
      {
        v26 = *(uint64_t (**)(_DWORD **))(v18 & 0xFFFFFFFFFFFFFFFCLL);
        v27 = (_DWORD **)(this & 0xFFFFFFFFFFFFC000 | 8);
        if ((this & 8) != 0)
          v27 = (_DWORD **)(this - 16);
        v94 = *v27;
        v95 = this;
        v96 = (char *)(this + 400);
        v18 = v26(&v94);
      }
      v15 = JSC::IntlNumberFormat::create((JSC::IntlNumberFormat *)v10, (JSC::VM *)v18, a3, a4, a5, a6, a7, a8);
      JSC::IntlNumberFormat::initializeNumberFormat(v15, (JSC::JSGlobalObject *)this, v13, (JSC::Symbol *)v14, v19, v20, v21, v22, v23);
    }
    if (!*(_DWORD *)(v10 + 80))
      return JSC::IntlNumberFormat::format((JSC::IntlNumberFormat *)v15, (JSC::JSGlobalObject *)this, v12);
    v25 = *(_DWORD *)(v10 + 80);
    if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
    else
      return JSC::IntlNumberFormat::format((JSC::IntlNumberFormat *)v15, (JSC::JSGlobalObject *)this, v12);
  }
  v29 = (unint64_t *)(v10 + 41984);
  if (result == 10)
    goto LABEL_124;
  if ((result & 0xFFFFFFFFFFFFFFFELL) == 6)
    goto LABEL_47;
  if ((result & 0xFFFE000000000002) != 0)
    goto LABEL_44;
  v30 = *(unsigned __int8 *)(result + 5);
  switch(v30)
  {
    case 2u:
      v29 = (unint64_t *)(v10 + 42040);
      goto LABEL_47;
    case 4u:
      v29 = (unint64_t *)(v10 + 42048);
      goto LABEL_47;
    case 3u:
      v29 = (unint64_t *)(v10 + 42056);
      goto LABEL_47;
  }
  if (v30 < 0x17)
  {
LABEL_44:
    v29 = (unint64_t *)(v10 + 42024);
    goto LABEL_47;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0xA) & 1) == 0
    || *(_QWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x28) != this)
  {
    if ((v30 & 0xFE) == 0x1A
      || (*(_BYTE *)(result + 6) & 4) != 0
      && (result = (unint64_t)(*(_QWORD *(**)(_DWORD **__return_ptr))(16
                                                                                      * *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C)
                                                                                      + 0x38))(&v94),
          (_BYTE)v94))
    {
      v29 = (unint64_t *)(v10 + 42000);
      goto LABEL_47;
    }
    goto LABEL_44;
  }
LABEL_124:
  v29 = (unint64_t *)(v10 + 42032);
LABEL_47:
  v31 = *v29;
  v32 = *(_QWORD *)(v31 + 8);
  if ((v32 & 1) != 0)
  {
    result = (unint64_t)JSC::JSRopeString::resolveRope(v31, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    v32 = *(_QWORD *)result;
    if (*(_QWORD *)result)
      goto LABEL_49;
LABEL_84:
    v34 = 39;
LABEL_52:
    result = WTF::tryFastCompactMalloc((WTF *)(v34 + 20), &v94);
    v42 = v94;
    if (v94)
    {
      *v94 = 2;
      v42[1] = v34;
      *((_QWORD *)v42 + 1) = v42 + 5;
      v42[4] = 4;
      qmemcpy(v42 + 5, "thisNumberValue called on incompatible ", 39);
      if (!v32)
        goto LABEL_59;
      v43 = (char *)v42 + 59;
      v35 = *(int8x16_t **)(v32 + 8);
      v36 = *(unsigned int *)(v32 + 4);
      if ((*(_BYTE *)(v32 + 16) & 4) != 0)
      {
        if ((_DWORD)v36 == 1)
        {
          *v43 = v35->i8[0];
          goto LABEL_59;
        }
        if ((_DWORD)v36)
          goto LABEL_58;
      }
      else
      {
        v89 = &v43[v36];
        if (v36 >= 0x10)
        {
          v90 = &v43[v36 & 0xFFFFFFF0];
          do
          {
            v91 = (unsigned __int128)vld2q_s8(v35->i8);
            v35 += 2;
            *(_OWORD *)v43 = v91;
            v43 += 16;
          }
          while (v43 != v90);
          v43 = v90;
        }
        while (v43 != v89)
        {
          v92 = v35->i8[0];
          v35 = (int8x16_t *)((char *)v35 + 2);
          *v43++ = v92;
        }
      }
      goto LABEL_59;
    }
    goto LABEL_132;
  }
  if (!v32)
    goto LABEL_84;
LABEL_49:
  v33 = *(_DWORD *)(v32 + 4);
  *(_DWORD *)v32 += 2;
  if (v33 < 0)
    goto LABEL_132;
  v34 = (v33 + 39);
  if (__OFADD__(v33, 39))
    goto LABEL_132;
  if ((*(_BYTE *)(v32 + 16) & 4) != 0)
    goto LABEL_52;
  if (v34 <= 0x7FFFFFEF)
  {
    result = WTF::tryFastCompactMalloc((WTF *)(2 * v34 + 20), &v94);
    v42 = v94;
    if (v94)
    {
      *v94 = 2;
      v42[1] = v34;
      *(_OWORD *)(v42 + 5) = xmmword_199158DF0;
      *((_QWORD *)v42 + 1) = v42 + 5;
      v42[4] = 0;
      v43 = (char *)v42 + 98;
      *(_OWORD *)(v42 + 9) = xmmword_199158E00;
      *(_OWORD *)(v42 + 13) = xmmword_199158E10;
      *(_OWORD *)(v42 + 17) = xmmword_199158E20;
      *(_QWORD *)(v42 + 21) = 0x62006900740061;
      v42[23] = 6619244;
      *((_WORD *)v42 + 48) = 32;
      v35 = *(int8x16_t **)(v32 + 8);
      v72 = *(unsigned int *)(v32 + 4);
      if ((*(_BYTE *)(v32 + 16) & 4) != 0)
      {
        v73 = &v43[2 * v72];
        if (v72 >= 0x40)
        {
          v74 = &v43[2 * (v72 & 0xFFFFFFC0)];
          v75 = 0uLL;
          do
          {
            v97.val[0] = *v35;
            v76 = v35[1];
            v98.val[0] = v35[2];
            v77 = v35[3];
            v35 += 4;
            v78 = v77;
            v98.val[1] = 0uLL;
            v99.val[0] = v76;
            v97.val[1] = 0uLL;
            v79 = v43;
            vst2q_s8(v79, v97);
            v79 += 32;
            v99.val[1] = 0uLL;
            vst2q_s8(v79, v99);
            v80 = v43 + 64;
            vst2q_s8(v80, v98);
            v81 = v43 + 96;
            vst2q_s8(v81, *(int8x16x2_t *)(&v75 - 1));
            v43 += 128;
          }
          while (v43 != v74);
          v43 = v74;
        }
        while (v43 != v73)
        {
          v82 = v35->u8[0];
          v35 = (int8x16_t *)((char *)v35 + 1);
          *(_WORD *)v43 = v82;
          v43 += 2;
        }
      }
      else if ((_DWORD)v72 == 1)
      {
        *(_WORD *)v43 = v35->i16[0];
      }
      else if ((_DWORD)v72)
      {
        v36 = 2 * v72;
LABEL_58:
        memcpy(v43, v35, v36);
      }
LABEL_59:
      v93 = (WTF::StringImpl *)v42;
      v44 = *(_QWORD *)(this + 176);
      v45 = *(_QWORD *)(this + 56);
      if ((v44 & 1) != 0)
      {
        v83 = *(uint64_t (**)(_DWORD **))(v44 & 0xFFFFFFFFFFFFFFFCLL);
        if ((this & 8) != 0)
          v84 = (_DWORD **)(this - 16);
        else
          v84 = (_DWORD **)(this & 0xFFFFFFFFFFFFC000 | 8);
        v94 = *v84;
        v95 = this;
        v96 = (char *)(this + 176);
        v44 = v83(&v94);
      }
      v46 = *(JSC::Heap **)(v45 + 40448);
      if (!v46)
        v46 = JSC::GCClient::Heap::errorInstanceSpaceSlow((JSC::Heap **)(v45 + 37552));
      SlowCase = *((_QWORD *)v46 + 3);
      if (SlowCase >= *((_QWORD *)v46 + 4))
      {
        SlowCase = *((_QWORD *)v46 + 5);
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM((JSC *)v45, (JSC::VM *)v35, v36, v37, v38, v39, v40, v41);
          SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v46, v45 + 192, 64, 0, 0, v86, v87, v88);
          goto LABEL_64;
        }
        v85 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v46 + 6);
        *((_QWORD *)v46 + 4) = SlowCase + HIDWORD(v85);
        *((_QWORD *)v46 + 5) = SlowCase + (int)v85;
      }
      *((_QWORD *)v46 + 3) = SlowCase + 64;
LABEL_64:
      *(_DWORD *)SlowCase = 0;
      v48 = *(_DWORD *)(v44 + 8);
      *(_DWORD *)SlowCase = v44 >> 4;
      *(_DWORD *)(SlowCase + 4) = v48;
      *(_WORD *)(SlowCase + 56) = 0;
      *(_OWORD *)(SlowCase + 40) = 0u;
      *(_OWORD *)(SlowCase + 24) = 0u;
      *(_OWORD *)(SlowCase + 8) = 0u;
      *(_BYTE *)(SlowCase + 58) = 5;
      *(_BYTE *)(SlowCase + 59) = *(_BYTE *)(SlowCase + 59) & 0xE0 | 0x10;
      JSC::ErrorInstance::finishCreation(SlowCase, v45, &v93, 0, 0, 0, 1, v41, (__n128)0);
      if ((SlowCase & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x4C)))
      {
        SlowCase = JSC::Exception::create(v10, (JSC::VM *)SlowCase, 0, v49, v50, v51, v52, v53);
      }
      v24 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, (JSC::Exception *)SlowCase, v54, v49, v50, v51, v52, v53);
      v62 = v93;
      v93 = 0;
      if (!v62)
      {
LABEL_69:
        if (v32)
        {
          if (*(_DWORD *)v32 != 2)
          {
            *(_DWORD *)v32 -= 2;
            return (unint64_t)v24;
          }
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v32, v55, v56, v57, v58, v59, v60, v61);
          v70 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
          if (v70)
          {
            if (!(v32 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v32 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v32)) & 1) != 0)
            {
              goto LABEL_81;
            }
            if (v32 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v32 >> 24)
            {
              v65 = 0;
            }
            else
            {
              v65 = (*(_DWORD *)((char *)off_1ECF425F8
                               + ((((v32 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v32) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v65 == 1)
              {
LABEL_81:
                v71 = *(unsigned int *)(v70 + 8000);
                if (v71 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v70, v32, (os_unfair_lock_s *)5, v65, v66, v67, v68, v69);
                }
                else
                {
                  *(_QWORD *)(v70 + 8 * v71) = v32 | 0x5000000000000;
                  *(_DWORD *)(v70 + 8000) = v71 + 1;
                }
                return (unint64_t)v24;
              }
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v70, v32, 1, v65, v66, v67, v68, v69);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v32, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        return (unint64_t)v24;
      }
      if (*(_DWORD *)v62 != 2)
      {
        *(_DWORD *)v62 -= 2;
        goto LABEL_69;
      }
      WTF::StringImpl::~StringImpl(v62, v55, v56, v57, v58, v59, v60, v61);
      v63 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v63)
      {
        pas_try_deallocate_slow_no_cache((unint64_t)v62, (uint64_t)&bmalloc_heap_config, 1);
        goto LABEL_69;
      }
      if (!((unint64_t)v62 >> 43)
        && ((*(unsigned int *)((char *)&bmalloc_megapage_table + (((unint64_t)v62 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v62)) & 1) != 0)
      {
LABEL_76:
        v64 = *(unsigned int *)(v63 + 8000);
        if (v64 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v63, (uint64_t)v62, (os_unfair_lock_s *)5, v57, v58, v59, v60, v61);
        }
        else
        {
          *(_QWORD *)(v63 + 8 * v64) = (unint64_t)v62 | 0x5000000000000;
          *(_DWORD *)(v63 + 8000) = v64 + 1;
        }
        goto LABEL_69;
      }
      if ((unint64_t)v62 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= (unint64_t)v62 >> 24)
      {
        v57 = 0;
      }
      else
      {
        v57 = (*(_DWORD *)((char *)off_1ECF425F8
                         + (((((unint64_t)v62 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                         + 24) >> (2 * ((BYTE3(v62) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)v57 == 1)
          goto LABEL_76;
      }
      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v63, (unint64_t)v62, 1, v57, v58, v59, v60, v61);
      goto LABEL_69;
    }
  }
LABEL_132:
  __break(0xC471u);
  return result;
}

uint64_t JSC::numberProtoFuncToFixed(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  JSC::JSObject *v14;
  double v15;
  uint64_t *v16;
  char *v17;
  size_t v18;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  double v36;
  unsigned __int8 *v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  JSC::VM *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  JSC::Heap *v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  WTF::AtomStringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char **v80;
  unint64_t v81;
  size_t v82;
  char *v83;
  int v84;
  size_t v85;
  size_t v86;
  _BYTE *v87;
  int v88;
  unsigned __int8 *v89;
  unsigned int v90;
  unint64_t v91;
  char **p_s;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(uint64_t *);
  uint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  unint64_t *v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  int8x16_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  JSC::JSObject *v116;
  _WORD *v117;
  unint64_t v118;
  uint64_t v119;
  JSC::Heap *v120;
  unint64_t SlowCase;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double v128;
  WTF::AtomStringImpl *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _WORD *v148;
  _WORD *v149;
  __int128 v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  char *v154;
  char *v155;
  char *v156;
  __int16 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t (*v164)(uint64_t *);
  uint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _WORD *v170;
  _WORD *v171;
  unsigned __int128 v172;
  __int8 v173;
  double v174;
  char *__s;
  int v176;
  int v177;
  uint64_t __dst;
  unint64_t v179;
  char *v180;
  uint64_t v181;
  int8x16x2_t v182;
  int8x16x2_t v183;
  int8x16x2_t v184;

  v181 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(this + 56);
  v11 = v10 + 41968;
  v12 = *((_QWORD *)a2 + 5);
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_3;
  }
  if (v12 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    *(_QWORD *)&v13 = v12 - 0x2000000000000;
    goto LABEL_3;
  }
  if ((v12 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v12 + 5) != 30)
  {
    if (v12 != 10)
    {
      if ((v12 & 0xFFFFFFFFFFFFFFFELL) == 6)
      {
        v105 = (unint64_t *)(v10 + 41984);
        goto LABEL_148;
      }
      if ((v12 & 0xFFFE000000000002) == 0)
      {
        v104 = *(unsigned __int8 *)(v12 + 5);
        switch(v104)
        {
          case 2u:
            v105 = (unint64_t *)(v10 + 42040);
            goto LABEL_148;
          case 4u:
            v105 = (unint64_t *)(v10 + 42048);
            goto LABEL_148;
          case 3u:
            v105 = (unint64_t *)(v10 + 42056);
            goto LABEL_148;
        }
        if (v104 >= 0x17)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xA) & 1) != 0
            && *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28) == this)
          {
            goto LABEL_243;
          }
          if ((v104 & 0xFE) == 0x1A
            || (*(_BYTE *)(v12 + 6) & 4) != 0
            && ((*(void (**)(uint64_t *__return_ptr))(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                + 0x4C)
                                                              + 0x38))(&__dst),
                (_BYTE)__dst))
          {
            v105 = (unint64_t *)(v10 + 42000);
            goto LABEL_148;
          }
        }
      }
      v105 = (unint64_t *)(v10 + 42024);
      goto LABEL_148;
    }
LABEL_243:
    v105 = (unint64_t *)(v10 + 42032);
LABEL_148:
    v106 = *(_QWORD *)(*v105 + 8);
    if ((v106 & 1) != 0)
      v106 = (unint64_t)*JSC::JSRopeString::resolveRope(*v105, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (v106)
    {
      v107 = *(_DWORD *)(v106 + 4);
      *(_DWORD *)v106 += 2;
      if (v107 < 0)
        goto LABEL_251;
      v108 = (v107 + 39);
      if (__OFADD__(v107, 39))
        goto LABEL_251;
      if ((*(_BYTE *)(v106 + 16) & 4) == 0)
      {
        if (v108 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v108 + 20), &__dst);
          v116 = (JSC::JSObject *)__dst;
          if (__dst)
          {
            *(_DWORD *)__dst = 2;
            *((_DWORD *)v116 + 1) = v108;
            *(_OWORD *)((char *)v116 + 20) = xmmword_199158DF0;
            *((_QWORD *)v116 + 1) = (char *)v116 + 20;
            *((_DWORD *)v116 + 4) = 0;
            v117 = (_WORD *)((char *)v116 + 98);
            *(_OWORD *)((char *)v116 + 36) = xmmword_199158E00;
            *(_OWORD *)((char *)v116 + 52) = xmmword_199158E10;
            *(_OWORD *)((char *)v116 + 68) = xmmword_199158E20;
            *(_QWORD *)((char *)v116 + 84) = 0x62006900740061;
            *((_DWORD *)v116 + 23) = 6619244;
            *((_WORD *)v116 + 48) = 32;
            v109 = *(int8x16_t **)(v106 + 8);
            v147 = *(unsigned int *)(v106 + 4);
            if ((*(_BYTE *)(v106 + 16) & 4) != 0)
            {
              v148 = &v117[v147];
              if (v147 >= 0x40)
              {
                v149 = &v117[v147 & 0xFFFFFFC0];
                v150 = 0uLL;
                do
                {
                  v182.val[0] = *v109;
                  v151 = v109[1];
                  v183.val[0] = v109[2];
                  v152 = v109[3];
                  v109 += 4;
                  v153 = v152;
                  v183.val[1] = 0uLL;
                  v184.val[0] = v151;
                  v182.val[1] = 0uLL;
                  v154 = (char *)v117;
                  vst2q_s8(v154, v182);
                  v154 += 32;
                  v184.val[1] = 0uLL;
                  vst2q_s8(v154, v184);
                  v155 = (char *)(v117 + 32);
                  vst2q_s8(v155, v183);
                  v156 = (char *)(v117 + 48);
                  vst2q_s8(v156, *(int8x16x2_t *)(&v150 - 1));
                  v117 += 64;
                }
                while (v117 != v149);
                v117 = v149;
              }
              while (v117 != v148)
              {
                v157 = v109->u8[0];
                v109 = (int8x16_t *)((char *)v109 + 1);
                *v117++ = v157;
              }
            }
            else if ((_DWORD)v147 == 1)
            {
              *v117 = v109->i16[0];
            }
            else if ((_DWORD)v147)
            {
              v110 = 2 * v147;
LABEL_174:
              memcpy(v117, v109, v110);
            }
LABEL_159:
            __s = (char *)v116;
            v118 = *(_QWORD *)(this + 176);
            v119 = *(_QWORD *)(this + 56);
            if ((v118 & 1) != 0)
            {
              v164 = *(uint64_t (**)(uint64_t *))(v118 & 0xFFFFFFFFFFFFFFFCLL);
              if ((this & 8) != 0)
                v165 = (uint64_t *)(this - 16);
              else
                v165 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
              __dst = *v165;
              v179 = this;
              v180 = (char *)(this + 176);
              v118 = v164(&__dst);
            }
            v120 = *(JSC::Heap **)(v119 + 40448);
            if (!v120)
              v120 = JSC::GCClient::Heap::errorInstanceSpaceSlow((JSC::Heap **)(v119 + 37552));
            SlowCase = *((_QWORD *)v120 + 3);
            if (SlowCase >= *((_QWORD *)v120 + 4))
            {
              SlowCase = *((_QWORD *)v120 + 5);
              if ((SlowCase & 1) != 0)
              {
                JSC::sanitizeStackForVM((JSC *)v119, (JSC::VM *)v109, v110, v111, v112, v113, v114, v115);
                SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v120, v119 + 192, 64, 0, 0, v167, v168, v169);
                goto LABEL_164;
              }
              v166 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v120 + 6);
              *((_QWORD *)v120 + 4) = SlowCase + HIDWORD(v166);
              *((_QWORD *)v120 + 5) = SlowCase + (int)v166;
            }
            *((_QWORD *)v120 + 3) = SlowCase + 64;
LABEL_164:
            *(_DWORD *)SlowCase = 0;
            v122 = *(_DWORD *)(v118 + 8);
            *(_DWORD *)SlowCase = v118 >> 4;
            *(_DWORD *)(SlowCase + 4) = v122;
            *(_WORD *)(SlowCase + 56) = 0;
            *(_OWORD *)(SlowCase + 40) = 0u;
            *(_OWORD *)(SlowCase + 24) = 0u;
            *(_OWORD *)(SlowCase + 8) = 0u;
            *(_BYTE *)(SlowCase + 58) = 5;
            *(_BYTE *)(SlowCase + 59) = *(_BYTE *)(SlowCase + 59) & 0xE0 | 0x10;
            JSC::ErrorInstance::finishCreation(SlowCase, v119, (WTF::StringImpl **)&__s, 0, 0, 0, 1, v115, (__n128)0);
            if ((SlowCase & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x4C)))
            {
              SlowCase = JSC::Exception::create(v10, (JSC::VM *)SlowCase, 0, v123, v124, v125, v126, v127);
            }
            v29 = (uint64_t)JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, (JSC::Exception *)SlowCase, v128, v123, v124, v125, v126, v127);
            v136 = (unint64_t)__s;
            __s = 0;
            if (!v136)
            {
LABEL_169:
              if (!v106)
                return v29;
              if (*(_DWORD *)v106 != 2)
              {
                *(_DWORD *)v106 -= 2;
                return v29;
              }
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v106, v129, v130, v131, v132, v133, v134, v135);
              v145 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
              if (!v145)
              {
                pas_try_deallocate_slow_no_cache(v106, (uint64_t)&bmalloc_heap_config, 1);
                return v29;
              }
              if (!(v106 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v106 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v106)) & 1) != 0)
              {
                goto LABEL_192;
              }
              if (v106 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v106 >> 24)
              {
                v140 = 0;
              }
              else
              {
                v140 = (*(_DWORD *)((char *)off_1ECF425F8
                                  + ((((v106 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                  + 24) >> (2 * ((BYTE3(v106) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v140 == 1)
                {
LABEL_192:
                  v146 = *(unsigned int *)(v145 + 8000);
                  if (v146 >= 0x3E7)
                  {
                    pas_thread_local_cache_append_deallocation_slow(v145, v106, (os_unfair_lock_s *)5, v140, v141, v142, v143, v144);
                  }
                  else
                  {
                    *(_QWORD *)(v145 + 8 * v146) = v106 | 0x5000000000000;
                    *(_DWORD *)(v145 + 8000) = v146 + 1;
                  }
                  return v29;
                }
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v145, v106, 1, v140, v141, v142, v143, v144);
              return v29;
            }
            if (*(_DWORD *)v136 != 2)
            {
              *(_DWORD *)v136 -= 2;
              goto LABEL_169;
            }
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v136, v129, v130, v131, v132, v133, v134, v135);
            v138 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (!v138)
            {
              pas_try_deallocate_slow_no_cache(v136, (uint64_t)&bmalloc_heap_config, 1);
              goto LABEL_169;
            }
            if (!(v136 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v136 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v136)) & 1) != 0)
            {
LABEL_187:
              v139 = *(unsigned int *)(v138 + 8000);
              if (v139 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v138, v136, (os_unfair_lock_s *)5, v131, v132, v133, v134, v135);
              }
              else
              {
                *(_QWORD *)(v138 + 8 * v139) = v136 | 0x5000000000000;
                *(_DWORD *)(v138 + 8000) = v139 + 1;
              }
              goto LABEL_169;
            }
            if (v136 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v136 >> 24)
            {
              v131 = 0;
            }
            else
            {
              v131 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v136 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v136) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v131 == 1)
                goto LABEL_187;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v138, v136, 1, v131, v132, v133, v134, v135);
            goto LABEL_169;
          }
        }
LABEL_251:
        __s = 0;
        __break(0xC471u);
        goto LABEL_252;
      }
    }
    else
    {
      v108 = 39;
    }
    WTF::tryFastCompactMalloc((WTF *)(v108 + 20), &__dst);
    v116 = (JSC::JSObject *)__dst;
    if (__dst)
    {
      *(_DWORD *)__dst = 2;
      *((_DWORD *)v116 + 1) = v108;
      *((_QWORD *)v116 + 1) = (char *)v116 + 20;
      *((_DWORD *)v116 + 4) = 4;
      qmemcpy((char *)v116 + 20, "thisNumberValue called on incompatible ", 39);
      if (!v106)
        goto LABEL_159;
      v117 = (_WORD *)((char *)v116 + 59);
      v109 = *(int8x16_t **)(v106 + 8);
      v110 = *(unsigned int *)(v106 + 4);
      if ((*(_BYTE *)(v106 + 16) & 4) != 0)
      {
        if ((_DWORD)v110 == 1)
        {
          *(_BYTE *)v117 = v109->i8[0];
          goto LABEL_159;
        }
        if ((_DWORD)v110)
          goto LABEL_174;
      }
      else
      {
        v170 = (_WORD *)((char *)v117 + v110);
        if (v110 >= 0x10)
        {
          v171 = (_WORD *)((char *)v117 + (v110 & 0xFFFFFFF0));
          do
          {
            v172 = (unsigned __int128)vld2q_s8(v109->i8);
            v109 += 2;
            *(_OWORD *)v117 = v172;
            v117 += 8;
          }
          while (v117 != v171);
          v117 = v171;
        }
        while (v117 != v170)
        {
          v173 = v109->i8[0];
          v109 = (int8x16_t *)((char *)v109 + 2);
          *(_BYTE *)v117 = v173;
          v117 = (_WORD *)((char *)v117 + 1);
        }
      }
      goto LABEL_159;
    }
    goto LABEL_251;
  }
  v94 = *(_QWORD *)(v12 + 16);
  *(double *)a9.i64 = (double)(int)v94;
  if (v94 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v13 = v94 - 0x2000000000000;
  else
    v13 = (double)(int)v94;
LABEL_3:
  if (*((_DWORD *)a2 + 8) == 1)
  {
    __dst = 10;
    goto LABEL_34;
  }
  v14 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  __dst = (uint64_t)v14;
  if ((unint64_t)v14 < 0xFFFE000000000000)
  {
    v137 = (unint64_t)v14 - 0x2000000000000;
    if (v137 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v36 = *(double *)&v137;
      goto LABEL_35;
    }
LABEL_34:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&__dst, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_35:
    v15 = trunc(v36 + 0.0);
    goto LABEL_6;
  }
  v15 = (double)(int)v14;
LABEL_6:
  if (*(_DWORD *)(v10 + 80))
  {
    v48 = *(_DWORD *)(v10 + 80);
    if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
    {
      v174 = v15;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v15 = v174;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((int)v15 < 0x65)
  {
    v16 = (uint64_t *)(v10 + 39696);
    if (fabs(v13) < 1.0e21)
    {
      __s = (char *)&__dst;
      v176 = 124;
      v177 = 0;
      WTF::double_conversion::DoubleToStringConverter::ToFixed((uint64_t)&WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverter(void)::converter, (int)v15, (uint64_t)&__s, v13);
      __s[v177] = 0;
      v17 = __s;
      if (!__s)
        return *(_QWORD *)v11;
      v18 = strlen(__s);
      if (!v18)
      {
        v27 = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        goto LABEL_16;
      }
      v26 = v18;
      if (!(v18 >> 31))
      {
        v27 = WTF::fastCompactMalloc((WTF *)(v18 + 20));
        v28 = (char *)(v27 + 20);
        *(_DWORD *)v27 = 2;
        *(_DWORD *)(v27 + 4) = v26;
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        if (v26 == 1)
          *v28 = *v17;
        else
          memcpy(v28, v17, v26);
LABEL_16:
        v30 = *(_DWORD *)(v27 + 4);
        if (v30 == 1)
        {
          v31 = *(_DWORD *)(v27 + 16);
          v37 = *(unsigned __int8 **)(v27 + 8);
          if ((v31 & 4) != 0)
          {
            v38 = *v37;
          }
          else
          {
            v38 = *(unsigned __int16 *)v37;
            if (v38 > 0xFF)
            {
LABEL_19:
              v32 = v27;
              if ((v31 & 3) == 2)
              {
                v32 = v27;
                do
                {
                  v32 = *(_QWORD *)(v32 + 24);
                  v31 = *(_DWORD *)(v32 + 16);
                }
                while ((v31 & 3) == 2);
              }
              if ((v31 & 8) != 0)
              {
                v33 = 0;
              }
              else
              {
                *(_DWORD *)(v32 + 16) = v31 | 8;
                v33 = (unint64_t)*(unsigned int *)(v32 + 4) << ((v31 & 4) == 0);
              }
              v34 = v10 + 192;
              v29 = *v16;
              if ((unint64_t)*v16 >= *(_QWORD *)(v10 + 39704))
              {
                v29 = *(_QWORD *)(v10 + 39712);
                if ((v29 & 1) != 0)
                {
                  JSC::sanitizeStackForVM((JSC *)v10, v19, v20, v21, v22, v23, v24, v25);
                  v29 = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v97, v98, v99);
LABEL_24:
                  *(_DWORD *)v29 = *(_QWORD *)(v10 + 41512) >> 4;
                  *(_DWORD *)(v29 + 4) = 17302016;
                  *(_QWORD *)(v29 + 8) = v27;
                  if (!*(_BYTE *)(v10 + 755))
                    goto LABEL_26;
                  goto LABEL_25;
                }
                v49 = *(_QWORD *)(v29 + 8) ^ *(_QWORD *)(v10 + 39720);
                *(_QWORD *)(v10 + 39704) = v29 + HIDWORD(v49);
                *(_QWORD *)(v10 + 39712) = v29 + (int)v49;
              }
              *v16 = v29 + 16;
              goto LABEL_24;
            }
          }
          v11 = v10 + 8 * v38 + 42216;
        }
        else if (v30)
        {
          v31 = *(_DWORD *)(v27 + 16);
          goto LABEL_19;
        }
        v29 = *(_QWORD *)v11;
        v39 = *(_DWORD *)v27 - 2;
        if (*(_DWORD *)v27 != 2)
        {
LABEL_40:
          *(_DWORD *)v27 = v39;
          return v29;
        }
        goto LABEL_41;
      }
      __break(0xC471u);
LABEL_252:
      JUMPOUT(0x198B70098);
    }
    v77 = (*(_QWORD *)&v13 >> 52) & 0x7FFLL;
    if ((_DWORD)v77 == 2047)
    {
      if ((*(_QWORD *)&v13 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(&__s, "NaN", 3);
        v78 = (char *)&__s + 3;
      }
      else
      {
        p_s = &__s;
        if ((*(_QWORD *)&v13 & 0x8000000000000000) != 0)
        {
          LOBYTE(__s) = 45;
          p_s = (char **)((char *)&__s + 1);
        }
        *p_s = (char *)0x7974696E69666E49;
        v78 = (char *)(p_s + 1);
      }
LABEL_74:
      *v78 = 0;
      v84 = strlen((const char *)&__s);
      memcpy(&__dst, &__s, v84);
      *((_BYTE *)&__dst + v84) = 0;
      v85 = strlen((const char *)&__dst);
      if (v85)
      {
        v86 = v85;
        if (v85 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B70418);
        }
        v27 = WTF::fastCompactMalloc((WTF *)(v85 + 20));
        v87 = (_BYTE *)(v27 + 20);
        *(_DWORD *)v27 = 2;
        *(_DWORD *)(v27 + 4) = v86;
        *(_QWORD *)(v27 + 8) = v27 + 20;
        *(_DWORD *)(v27 + 16) = 4;
        if (v86 == 1)
        {
          v39 = 0;
          *v87 = __dst;
          goto LABEL_78;
        }
        memcpy(v87, &__dst, v86);
        v39 = 0;
      }
      else
      {
        v27 = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
        v39 = WTF::StringImpl::s_emptyAtomString;
        LODWORD(v86) = dword_1ECF2C424;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
      if (!(_DWORD)v86)
      {
LABEL_81:
        v29 = *(_QWORD *)v11;
        if (v39)
          goto LABEL_40;
LABEL_41:
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v27, v19, v20, v21, v22, v23, v24, v25);
        v45 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
        if (v45)
        {
          if (!(v27 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v27 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v27)) & 1) != 0)
          {
            goto LABEL_44;
          }
          if (v27 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v27 >> 24)
          {
            v40 = 0;
          }
          else
          {
            v40 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v27 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v27) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v40 == 1)
            {
LABEL_44:
              v46 = *(unsigned int *)(v45 + 8000);
              if (v46 < 0x3E7)
              {
                v47 = v27 | 0x5000000000000;
LABEL_46:
                *(_QWORD *)(v45 + 8 * v46) = v47;
                *(_DWORD *)(v45 + 8000) = v46 + 1;
                return v29;
              }
              v96 = v27;
              goto LABEL_119;
            }
          }
          v93 = v27;
LABEL_109:
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v45, v93, 1, v40, v41, v42, v43, v44);
          return v29;
        }
        v95 = v27;
LABEL_117:
        pas_try_deallocate_slow_no_cache(v95, (uint64_t)&bmalloc_heap_config, 1);
        return v29;
      }
      if ((_DWORD)v86 != 1)
      {
        v88 = *(_DWORD *)(v27 + 16);
        goto LABEL_87;
      }
LABEL_78:
      v88 = *(_DWORD *)(v27 + 16);
      v89 = *(unsigned __int8 **)(v27 + 8);
      if ((v88 & 4) != 0)
      {
        v90 = *v89;
LABEL_80:
        v11 = v10 + 8 * v90 + 42216;
        goto LABEL_81;
      }
      v90 = *(unsigned __int16 *)v89;
      if (v90 <= 0xFF)
        goto LABEL_80;
LABEL_87:
      v91 = v27;
      if ((v88 & 3) == 2)
      {
        v91 = v27;
        do
        {
          v91 = *(_QWORD *)(v91 + 24);
          v88 = *(_DWORD *)(v91 + 16);
        }
        while ((v88 & 3) == 2);
      }
      if ((v88 & 8) != 0)
      {
        v33 = 0;
      }
      else
      {
        *(_DWORD *)(v91 + 16) = v88 | 8;
        v33 = (unint64_t)*(unsigned int *)(v91 + 4) << ((v88 & 4) == 0);
      }
      v34 = v10 + 192;
      v29 = *v16;
      if ((unint64_t)*v16 >= *(_QWORD *)(v10 + 39704))
      {
        v29 = *(_QWORD *)(v10 + 39712);
        if ((v29 & 1) != 0)
        {
          JSC::sanitizeStackForVM((JSC *)v10, v19, v20, v21, v22, v23, v24, v25);
          v29 = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v161, v162, v163);
LABEL_92:
          *(_DWORD *)v29 = *(_QWORD *)(v10 + 41512) >> 4;
          *(_DWORD *)(v29 + 4) = 17302016;
          *(_QWORD *)(v29 + 8) = v27;
          if (!*(_BYTE *)(v10 + 755))
          {
LABEL_26:
            if (v33 >= 0x101)
              JSC::Heap::reportExtraMemoryAllocatedSlowCase(v34, 0, v29, v33, v22, v23, v24, v25);
            return v29;
          }
LABEL_25:
          __dmb(0xAu);
          goto LABEL_26;
        }
        v103 = *(_QWORD *)(v29 + 8) ^ *(_QWORD *)(v10 + 39720);
        *(_QWORD *)(v10 + 39704) = v29 + HIDWORD(v103);
        *(_QWORD *)(v10 + 39712) = v29 + (int)v103;
      }
      *v16 = v29 + 16;
      goto LABEL_92;
    }
    v79 = *(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFLL;
    if ((*(_QWORD *)&v13 & 0x8000000000000000) != 0 && v79)
    {
      LOBYTE(__s) = 45;
      v80 = (char **)((char *)&__s + 1);
    }
    else
    {
      v80 = &__s;
      if (!v79)
      {
        v78 = (char *)&__s + 1;
        LOBYTE(__s) = 48;
        goto LABEL_74;
      }
    }
    v81 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(*(_QWORD *)&v13 & 0x800FFFFFFFFFFFFFLL, v77);
    v78 = WTF::dragonbox::detail::to_shortest(v81, v82, (uint64_t)v80, v83);
    goto LABEL_74;
  }
  v50 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v50 = 0x2C00000002;
  *(_QWORD *)(v50 + 8) = "toFixed() argument must be between 0 and 100";
  *(_DWORD *)(v50 + 16) = 4;
  __s = (char *)v50;
  v58 = *(_QWORD *)(this + 128);
  v59 = *(_QWORD *)(this + 56);
  if ((v58 & 1) != 0)
  {
    v100 = *(uint64_t (**)(uint64_t *))(v58 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v101 = (uint64_t *)(this - 16);
    else
      v101 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    __dst = *v101;
    v179 = this;
    v180 = (char *)(this + 128);
    v58 = v100(&__dst);
  }
  v60 = *(JSC::Heap **)(v59 + 40448);
  if (!v60)
    v60 = JSC::GCClient::Heap::errorInstanceSpaceSlow((JSC::Heap **)(v59 + 37552));
  v61 = *((_QWORD *)v60 + 3);
  if (v61 >= *((_QWORD *)v60 + 4))
  {
    v61 = *((_QWORD *)v60 + 5);
    if ((v61 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v59, v51, v52, v53, v54, v55, v56, v57);
      v61 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v60, v59 + 192, 64, 0, 0, v158, v159, v160);
      goto LABEL_62;
    }
    v102 = *(_QWORD *)(v61 + 8) ^ *((_QWORD *)v60 + 6);
    *((_QWORD *)v60 + 4) = v61 + HIDWORD(v102);
    *((_QWORD *)v60 + 5) = v61 + (int)v102;
  }
  *((_QWORD *)v60 + 3) = v61 + 64;
LABEL_62:
  *(_DWORD *)v61 = 0;
  v62 = *(_DWORD *)(v58 + 8);
  *(_DWORD *)v61 = v58 >> 4;
  *(_DWORD *)(v61 + 4) = v62;
  *(_WORD *)(v61 + 56) = 0;
  *(_OWORD *)(v61 + 40) = 0u;
  *(_OWORD *)(v61 + 24) = 0u;
  *(_OWORD *)(v61 + 8) = 0u;
  *(_BYTE *)(v61 + 58) = 2;
  *(_BYTE *)(v61 + 59) = *(_BYTE *)(v61 + 59) & 0xE0 | 0x10;
  JSC::ErrorInstance::finishCreation(v61, v59, (WTF::StringImpl **)&__s, 0, 0, 0, 1, v57, (__n128)0);
  if ((v61 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v61 & 0xFFFFFFFE) + 0x4C)))
  {
    v61 = JSC::Exception::create(v10, (JSC::VM *)v61, 0, v63, v64, v65, v66, v67);
  }
  v29 = (uint64_t)JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, (JSC::Exception *)v61, v68, v63, v64, v65, v66, v67);
  v76 = (unint64_t)__s;
  __s = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 != 2)
    {
      *(_DWORD *)v76 -= 2;
      return v29;
    }
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v76, v69, v70, v71, v72, v73, v74, v75);
    v45 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v45)
    {
      v95 = v76;
      goto LABEL_117;
    }
    if (!(v76 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v76 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v76)) & 1) != 0)
    {
LABEL_98:
      v46 = *(unsigned int *)(v45 + 8000);
      if (v46 < 0x3E7)
      {
        v47 = v76 | 0x5000000000000;
        goto LABEL_46;
      }
      v96 = v76;
LABEL_119:
      pas_thread_local_cache_append_deallocation_slow(v45, v96, (os_unfair_lock_s *)5, v40, v41, v42, v43, v44);
      return v29;
    }
    if (v76 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v76 >> 24)
    {
      v40 = 0;
    }
    else
    {
      v40 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v76 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v76) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)v40 == 1)
        goto LABEL_98;
    }
    v93 = v76;
    goto LABEL_109;
  }
  return v29;
}

uint64_t JSC::numberProtoFuncToExponential(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  double v13;
  JSC::JSObject *v14;
  double v15;
  uint64_t *v16;
  int v17;
  char *p_dst;
  char *v19;
  size_t v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  unint64_t v29;
  char *v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  int v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  JSC::VM *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  JSC::Heap *v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  WTF::AtomStringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  size_t v87;
  char *v88;
  int v89;
  size_t v90;
  JSC::VM *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  size_t v98;
  int *v99;
  _BYTE *v100;
  int v101;
  int *v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(_DWORD **);
  _DWORD **v118;
  unint64_t v119;
  unint64_t v120;
  unsigned int v121;
  unint64_t *v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  int8x16_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _DWORD *v133;
  _WORD *v134;
  unint64_t v135;
  uint64_t v136;
  JSC::Heap *v137;
  unint64_t SlowCase;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  WTF::AtomStringImpl *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _WORD *v171;
  _WORD *v172;
  __int128 v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  char *v177;
  char *v178;
  char *v179;
  __int16 v180;
  uint64_t (*v181)(_DWORD **);
  _DWORD **v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _WORD *v187;
  _WORD *v188;
  unsigned __int128 v189;
  __int8 v190;
  double v191;
  char *__s;
  int v193;
  int v194;
  uint64_t v195;
  _DWORD *__dst;
  unint64_t v197;
  char *v198;
  char __src[8];
  uint64_t v200;
  int8x16x2_t v201;
  int8x16x2_t v202;
  int8x16x2_t v203;

  v200 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(this + 56);
  v11 = (uint64_t *)(v10 + 41968);
  v12 = *((_QWORD *)a2 + 5);
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_3;
  }
  if (v12 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    *(_QWORD *)&v13 = v12 - 0x2000000000000;
    goto LABEL_3;
  }
  if ((v12 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v12 + 5) != 30)
  {
    if (v12 != 10)
    {
      if ((v12 & 0xFFFFFFFFFFFFFFFELL) == 6)
      {
        v122 = (unint64_t *)(v10 + 41984);
        goto LABEL_153;
      }
      if ((v12 & 0xFFFE000000000002) == 0)
      {
        v121 = *(unsigned __int8 *)(v12 + 5);
        switch(v121)
        {
          case 2u:
            v122 = (unint64_t *)(v10 + 42040);
            goto LABEL_153;
          case 4u:
            v122 = (unint64_t *)(v10 + 42048);
            goto LABEL_153;
          case 3u:
            v122 = (unint64_t *)(v10 + 42056);
            goto LABEL_153;
        }
        if (v121 >= 0x17)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xA) & 1) != 0
            && *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28) == this)
          {
            goto LABEL_248;
          }
          if ((v121 & 0xFE) == 0x1A
            || (*(_BYTE *)(v12 + 6) & 4) != 0
            && ((*(void (**)(_DWORD **__return_ptr))(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                + 0x4C)
                                                              + 0x38))(&__dst),
                (_BYTE)__dst))
          {
            v122 = (unint64_t *)(v10 + 42000);
            goto LABEL_153;
          }
        }
      }
      v122 = (unint64_t *)(v10 + 42024);
      goto LABEL_153;
    }
LABEL_248:
    v122 = (unint64_t *)(v10 + 42032);
LABEL_153:
    v123 = *(_QWORD *)(*v122 + 8);
    if ((v123 & 1) != 0)
      v123 = (unint64_t)*JSC::JSRopeString::resolveRope(*v122, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (v123)
    {
      v124 = *(_DWORD *)(v123 + 4);
      *(_DWORD *)v123 += 2;
      if (v124 < 0)
        goto LABEL_256;
      v125 = (v124 + 39);
      if (__OFADD__(v124, 39))
        goto LABEL_256;
      if ((*(_BYTE *)(v123 + 16) & 4) == 0)
      {
        if (v125 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v125 + 20), &__dst);
          v133 = __dst;
          if (__dst)
          {
            *__dst = 2;
            v133[1] = v125;
            *(_OWORD *)(v133 + 5) = xmmword_199158DF0;
            *((_QWORD *)v133 + 1) = v133 + 5;
            v133[4] = 0;
            v134 = (_WORD *)v133 + 49;
            *(_OWORD *)(v133 + 9) = xmmword_199158E00;
            *(_OWORD *)(v133 + 13) = xmmword_199158E10;
            *(_OWORD *)(v133 + 17) = xmmword_199158E20;
            *(_QWORD *)(v133 + 21) = 0x62006900740061;
            v133[23] = 6619244;
            *((_WORD *)v133 + 48) = 32;
            v126 = *(int8x16_t **)(v123 + 8);
            v167 = *(unsigned int *)(v123 + 4);
            if ((*(_BYTE *)(v123 + 16) & 4) != 0)
            {
              v171 = &v134[v167];
              if (v167 >= 0x40)
              {
                v172 = &v134[v167 & 0xFFFFFFC0];
                v173 = 0uLL;
                do
                {
                  v201.val[0] = *v126;
                  v174 = v126[1];
                  v202.val[0] = v126[2];
                  v175 = v126[3];
                  v126 += 4;
                  v176 = v175;
                  v202.val[1] = 0uLL;
                  v203.val[0] = v174;
                  v201.val[1] = 0uLL;
                  v177 = (char *)v134;
                  vst2q_s8(v177, v201);
                  v177 += 32;
                  v203.val[1] = 0uLL;
                  vst2q_s8(v177, v203);
                  v178 = (char *)(v134 + 32);
                  vst2q_s8(v178, v202);
                  v179 = (char *)(v134 + 48);
                  vst2q_s8(v179, *(int8x16x2_t *)(&v173 - 1));
                  v134 += 64;
                }
                while (v134 != v172);
                v134 = v172;
              }
              while (v134 != v171)
              {
                v180 = v126->u8[0];
                v126 = (int8x16_t *)((char *)v126 + 1);
                *v134++ = v180;
              }
            }
            else if ((_DWORD)v167 == 1)
            {
              *v134 = v126->i16[0];
            }
            else if ((_DWORD)v167)
            {
              v127 = 2 * v167;
LABEL_179:
              memcpy(v134, v126, v127);
            }
LABEL_164:
            *(_QWORD *)__src = v133;
            v135 = *(_QWORD *)(this + 176);
            v136 = *(_QWORD *)(this + 56);
            if ((v135 & 1) != 0)
            {
              v181 = *(uint64_t (**)(_DWORD **))(v135 & 0xFFFFFFFFFFFFFFFCLL);
              if ((this & 8) != 0)
                v182 = (_DWORD **)(this - 16);
              else
                v182 = (_DWORD **)(this & 0xFFFFFFFFFFFFC000 | 8);
              __dst = *v182;
              v197 = this;
              v198 = (char *)(this + 176);
              v135 = v181(&__dst);
            }
            v137 = *(JSC::Heap **)(v136 + 40448);
            if (!v137)
              v137 = JSC::GCClient::Heap::errorInstanceSpaceSlow((JSC::Heap **)(v136 + 37552));
            SlowCase = *((_QWORD *)v137 + 3);
            if (SlowCase >= *((_QWORD *)v137 + 4))
            {
              SlowCase = *((_QWORD *)v137 + 5);
              if ((SlowCase & 1) != 0)
              {
                JSC::sanitizeStackForVM((JSC *)v136, (JSC::VM *)v126, v127, v128, v129, v130, v131, v132);
                SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v137, v136 + 192, 64, 0, 0, v184, v185, v186);
                goto LABEL_169;
              }
              v183 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v137 + 6);
              *((_QWORD *)v137 + 4) = SlowCase + HIDWORD(v183);
              *((_QWORD *)v137 + 5) = SlowCase + (int)v183;
            }
            *((_QWORD *)v137 + 3) = SlowCase + 64;
LABEL_169:
            *(_DWORD *)SlowCase = 0;
            v139 = *(_DWORD *)(v135 + 8);
            *(_DWORD *)SlowCase = v135 >> 4;
            *(_DWORD *)(SlowCase + 4) = v139;
            *(_WORD *)(SlowCase + 56) = 0;
            *(_OWORD *)(SlowCase + 40) = 0u;
            *(_OWORD *)(SlowCase + 24) = 0u;
            *(_OWORD *)(SlowCase + 8) = 0u;
            *(_BYTE *)(SlowCase + 58) = 5;
            *(_BYTE *)(SlowCase + 59) = *(_BYTE *)(SlowCase + 59) & 0xE0 | 0x10;
            JSC::ErrorInstance::finishCreation(SlowCase, v136, (WTF::StringImpl **)__src, 0, 0, 0, 1, v132, (__n128)0);
            if ((SlowCase & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x4C)))
            {
              SlowCase = JSC::Exception::create(v10, (JSC::VM *)SlowCase, 0, v140, v141, v142, v143, v144);
            }
            v35 = (uint64_t)JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, (JSC::Exception *)SlowCase, v145, v140, v141, v142, v143, v144);
            v153 = *(_QWORD *)__src;
            *(_QWORD *)__src = 0;
            if (!v153)
            {
LABEL_174:
              if (!v123)
                return v35;
              if (*(_DWORD *)v123 != 2)
              {
                *(_DWORD *)v123 -= 2;
                return v35;
              }
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v123, v146, v147, v148, v149, v150, v151, v152);
              v162 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
              if (!v162)
              {
                pas_try_deallocate_slow_no_cache(v123, (uint64_t)&bmalloc_heap_config, 1);
                return v35;
              }
              if (!(v123 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v123 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v123)) & 1) != 0)
              {
                goto LABEL_197;
              }
              if (v123 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v123 >> 24)
              {
                v157 = 0;
              }
              else
              {
                v157 = (*(_DWORD *)((char *)off_1ECF425F8
                                  + ((((v123 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                  + 24) >> (2 * ((BYTE3(v123) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v157 == 1)
                {
LABEL_197:
                  v163 = *(unsigned int *)(v162 + 8000);
                  if (v163 >= 0x3E7)
                  {
                    pas_thread_local_cache_append_deallocation_slow(v162, v123, (os_unfair_lock_s *)5, v157, v158, v159, v160, v161);
                  }
                  else
                  {
                    *(_QWORD *)(v162 + 8 * v163) = v123 | 0x5000000000000;
                    *(_DWORD *)(v162 + 8000) = v163 + 1;
                  }
                  return v35;
                }
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v162, v123, 1, v157, v158, v159, v160, v161);
              return v35;
            }
            if (*(_DWORD *)v153 != 2)
            {
              *(_DWORD *)v153 -= 2;
              goto LABEL_174;
            }
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v153, v146, v147, v148, v149, v150, v151, v152);
            v155 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (!v155)
            {
              pas_try_deallocate_slow_no_cache(v153, (uint64_t)&bmalloc_heap_config, 1);
              goto LABEL_174;
            }
            if (!(v153 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v153 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v153)) & 1) != 0)
            {
LABEL_192:
              v156 = *(unsigned int *)(v155 + 8000);
              if (v156 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v155, v153, (os_unfair_lock_s *)5, v148, v149, v150, v151, v152);
              }
              else
              {
                *(_QWORD *)(v155 + 8 * v156) = v153 | 0x5000000000000;
                *(_DWORD *)(v155 + 8000) = v156 + 1;
              }
              goto LABEL_174;
            }
            if (v153 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v153 >> 24)
            {
              v148 = 0;
            }
            else
            {
              v148 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v153 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v153) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v148 == 1)
                goto LABEL_192;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v155, v153, 1, v148, v149, v150, v151, v152);
            goto LABEL_174;
          }
        }
LABEL_256:
        *(_QWORD *)__src = 0;
        __break(0xC471u);
        goto LABEL_257;
      }
    }
    else
    {
      v125 = 39;
    }
    WTF::tryFastCompactMalloc((WTF *)(v125 + 20), &__dst);
    v133 = __dst;
    if (__dst)
    {
      *__dst = 2;
      v133[1] = v125;
      *((_QWORD *)v133 + 1) = v133 + 5;
      v133[4] = 4;
      qmemcpy(v133 + 5, "thisNumberValue called on incompatible ", 39);
      if (!v123)
        goto LABEL_164;
      v134 = (_WORD *)((char *)v133 + 59);
      v126 = *(int8x16_t **)(v123 + 8);
      v127 = *(unsigned int *)(v123 + 4);
      if ((*(_BYTE *)(v123 + 16) & 4) != 0)
      {
        if ((_DWORD)v127 == 1)
        {
          *(_BYTE *)v134 = v126->i8[0];
          goto LABEL_164;
        }
        if ((_DWORD)v127)
          goto LABEL_179;
      }
      else
      {
        v187 = (_WORD *)((char *)v134 + v127);
        if (v127 >= 0x10)
        {
          v188 = (_WORD *)((char *)v134 + (v127 & 0xFFFFFFF0));
          do
          {
            v189 = (unsigned __int128)vld2q_s8(v126->i8);
            v126 += 2;
            *(_OWORD *)v134 = v189;
            v134 += 8;
          }
          while (v134 != v188);
          v134 = v188;
        }
        while (v134 != v187)
        {
          v190 = v126->i8[0];
          v126 = (int8x16_t *)((char *)v126 + 2);
          *(_BYTE *)v134 = v190;
          v134 = (_WORD *)((char *)v134 + 1);
        }
      }
      goto LABEL_164;
    }
    goto LABEL_256;
  }
  v113 = *(_QWORD *)(v12 + 16);
  *(double *)a9.i64 = (double)(int)v113;
  if (v113 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v13 = v113 - 0x2000000000000;
  else
    v13 = (double)(int)v113;
LABEL_3:
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v195 = 10;
    goto LABEL_49;
  }
  v14 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v195 = (uint64_t)v14;
  if ((unint64_t)v14 < 0xFFFE000000000000)
  {
    v154 = (unint64_t)v14 - 0x2000000000000;
    if (v154 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v45 = *(double *)&v154;
      goto LABEL_50;
    }
LABEL_49:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v195, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_50:
    v15 = trunc(v45 + 0.0);
    goto LABEL_6;
  }
  v15 = (double)(int)v14;
LABEL_6:
  if (*(_DWORD *)(v10 + 80))
  {
    v53 = *(_DWORD *)(v10 + 80);
    if ((v53 & 0x27) != 0 && (v53 & 0x20) == 0)
    {
      v191 = v15;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v15 = v191;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v16 = (uint64_t *)(v10 + 39696);
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v82 = (*(_QWORD *)&v13 >> 52) & 0x7FFLL;
    if ((_DWORD)v82 == 2047)
    {
      if ((*(_QWORD *)&v13 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__src, "NaN", 3);
        v83 = &__src[3];
      }
      else
      {
        v112 = __src;
        if ((*(_QWORD *)&v13 & 0x8000000000000000) != 0)
        {
          __src[0] = 45;
          v112 = &__src[1];
        }
        *(_QWORD *)v112 = 0x7974696E69666E49;
        v83 = v112 + 8;
      }
LABEL_88:
      *v83 = 0;
      v89 = strlen(__src);
      memcpy(&__dst, __src, v89);
      *((_BYTE *)&__dst + v89) = 0;
      v90 = strlen((const char *)&__dst);
      if (v90)
      {
        v98 = v90;
        if (v90 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B715C4);
        }
        v99 = (int *)WTF::fastCompactMalloc((WTF *)(v90 + 20));
        v100 = v99 + 5;
        *v99 = 2;
        v99[1] = v98;
        *((_QWORD *)v99 + 1) = v99 + 5;
        v99[4] = 4;
        if (v98 == 1)
          *v100 = (_BYTE)__dst;
        else
          memcpy(v100, &__dst, v98);
        v101 = 4;
        v102 = v99;
      }
      else
      {
        v99 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        while (1)
        {
          v101 = v99[4];
          if ((v101 & 3) != 2)
            break;
          v99 = (int *)*((_QWORD *)v99 + 3);
        }
        v102 = &WTF::StringImpl::s_emptyAtomString;
        if ((v101 & 8) != 0)
        {
          v103 = 0;
          goto LABEL_106;
        }
      }
      v99[4] = v101 | 8;
      v103 = (unint64_t)v99[1] << ((v101 & 4) == 0);
LABEL_106:
      v35 = *v16;
      if ((unint64_t)*v16 >= *(_QWORD *)(v10 + 39704))
      {
        v35 = *(_QWORD *)(v10 + 39712);
        if ((v35 & 1) != 0)
        {
          JSC::sanitizeStackForVM((JSC *)v10, v91, v92, v93, v94, v95, v96, v97);
          v35 = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v168, v169, v170);
          goto LABEL_108;
        }
        v120 = *(_QWORD *)(v35 + 8) ^ *(_QWORD *)(v10 + 39720);
        *(_QWORD *)(v10 + 39704) = v35 + HIDWORD(v120);
        *(_QWORD *)(v10 + 39712) = v35 + (int)v120;
      }
      *v16 = v35 + 16;
LABEL_108:
      *(_DWORD *)v35 = *(_QWORD *)(v10 + 41512) >> 4;
      *(_DWORD *)(v35 + 4) = 17302016;
      *(_QWORD *)(v35 + 8) = v102;
      if (*(_BYTE *)(v10 + 755))
        __dmb(0xAu);
      if (v103 >= 0x101)
        JSC::Heap::reportExtraMemoryAllocatedSlowCase(v10 + 192, 0, v35, v103, v94, v95, v96, v97);
      return v35;
    }
    v84 = *(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFLL;
    if ((*(_QWORD *)&v13 & 0x8000000000000000) != 0 && v84)
    {
      __src[0] = 45;
      v85 = &__src[1];
    }
    else
    {
      v85 = __src;
      if (!v84)
      {
        v83 = &__src[1];
        __src[0] = 48;
        goto LABEL_88;
      }
    }
    v86 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(*(_QWORD *)&v13 & 0x800FFFFFFFFFFFFFLL, v82);
    v83 = WTF::dragonbox::detail::to_shortest(v86, v87, (uint64_t)v85, v88);
    goto LABEL_88;
  }
  if ((int)v15 < 0x65)
  {
    __s = (char *)&__dst;
    v193 = 124;
    v194 = 0;
    if (v195 != 10)
    {
      WTF::double_conversion::DoubleToStringConverter::ToExponential((uint64_t)&WTF::double_conversion::DoubleToStringConverter::EcmaScriptConverter(void)::converter, (int)v15, (uint64_t)&__s, v13);
      v17 = v194;
      p_dst = __s;
LABEL_11:
      p_dst[v17] = 0;
      v194 = -1;
      v19 = __s;
      if (!__s)
      {
        v35 = *v11;
        goto LABEL_41;
      }
      v20 = strlen(__s);
      if (!v20)
      {
        v29 = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
        v31 = WTF::StringImpl::s_emptyAtomString;
        LODWORD(v28) = dword_1ECF2C424;
        WTF::StringImpl::s_emptyAtomString += 2;
        goto LABEL_29;
      }
      v28 = v20;
      if (!(v20 >> 31))
      {
        v29 = WTF::fastCompactMalloc((WTF *)(v20 + 20));
        v30 = (char *)(v29 + 20);
        *(_DWORD *)v29 = 2;
        *(_DWORD *)(v29 + 4) = v28;
        *(_QWORD *)(v29 + 8) = v29 + 20;
        *(_DWORD *)(v29 + 16) = 4;
        if (v28 == 1)
        {
          v31 = 0;
          *v30 = *v19;
          goto LABEL_16;
        }
        memcpy(v30, v19, v28);
        v31 = 0;
LABEL_29:
        if (!(_DWORD)v28)
        {
LABEL_19:
          v35 = *v11;
          if (v31)
          {
            *(_DWORD *)v29 = v31;
            goto LABEL_41;
          }
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v29, v21, v22, v23, v24, v25, v26, v27);
          v51 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
          if (!v51)
          {
            pas_try_deallocate_slow_no_cache(v29, (uint64_t)&bmalloc_heap_config, 1);
            goto LABEL_41;
          }
          if (!(v29 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v29 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v29)) & 1) != 0)
          {
LABEL_54:
            v52 = *(unsigned int *)(v51 + 8000);
            if (v52 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v51, v29, (os_unfair_lock_s *)5, v46, v47, v48, v49, v50);
            }
            else
            {
              *(_QWORD *)(v51 + 8 * v52) = v29 | 0x5000000000000;
              *(_DWORD *)(v51 + 8000) = v52 + 1;
            }
LABEL_41:
            if ((v194 & 0x80000000) == 0)
              __s[v194] = 0;
            return v35;
          }
          if (v29 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v29 >> 24)
          {
            v46 = 0;
          }
          else
          {
            v46 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v29 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v29) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v46 == 1)
              goto LABEL_54;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v51, v29, 1, v46, v47, v48, v49, v50);
          goto LABEL_41;
        }
        if ((_DWORD)v28 != 1)
        {
          v32 = *(_DWORD *)(v29 + 16);
          goto LABEL_32;
        }
LABEL_16:
        v32 = *(_DWORD *)(v29 + 16);
        v33 = *(unsigned __int8 **)(v29 + 8);
        if ((v32 & 4) != 0)
        {
          v34 = *v33;
LABEL_18:
          v11 = (uint64_t *)(v10 + 8 * v34 + 42216);
          goto LABEL_19;
        }
        v34 = *(unsigned __int16 *)v33;
        if (v34 <= 0xFF)
          goto LABEL_18;
LABEL_32:
        v42 = v29;
        if ((v32 & 3) == 2)
        {
          v42 = v29;
          do
          {
            v42 = *(_QWORD *)(v42 + 24);
            v32 = *(_DWORD *)(v42 + 16);
          }
          while ((v32 & 3) == 2);
        }
        if ((v32 & 8) != 0)
        {
          v43 = 0;
        }
        else
        {
          *(_DWORD *)(v42 + 16) = v32 | 8;
          v43 = (unint64_t)*(unsigned int *)(v42 + 4) << ((v32 & 4) == 0);
        }
        v35 = *v16;
        if ((unint64_t)*v16 >= *(_QWORD *)(v10 + 39704))
        {
          v35 = *(_QWORD *)(v10 + 39712);
          if ((v35 & 1) != 0)
          {
            JSC::sanitizeStackForVM((JSC *)v10, v21, v22, v23, v24, v25, v26, v27);
            v35 = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v114, v115, v116);
            goto LABEL_37;
          }
          v54 = *(_QWORD *)(v35 + 8) ^ *(_QWORD *)(v10 + 39720);
          *(_QWORD *)(v10 + 39704) = v35 + HIDWORD(v54);
          *(_QWORD *)(v10 + 39712) = v35 + (int)v54;
        }
        *v16 = v35 + 16;
LABEL_37:
        *(_DWORD *)v35 = *(_QWORD *)(v10 + 41512) >> 4;
        *(_DWORD *)(v35 + 4) = 17302016;
        *(_QWORD *)(v35 + 8) = v29;
        if (*(_BYTE *)(v10 + 755))
          __dmb(0xAu);
        if (v43 >= 0x101)
          JSC::Heap::reportExtraMemoryAllocatedSlowCase(v10 + 192, 0, v35, v43, v24, v25, v26, v27);
        goto LABEL_41;
      }
      __break(0xC471u);
LABEL_257:
      JUMPOUT(0x198B7124CLL);
    }
    v36 = (*(_QWORD *)&v13 >> 52) & 0x7FFLL;
    if ((_DWORD)v36 == 2047)
    {
      if ((*(_QWORD *)&v13 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__src, "NaN", 3);
        v41 = &__src[3];
      }
      else
      {
        v104 = __src;
        if ((*(_QWORD *)&v13 & 0x8000000000000000) != 0)
        {
          __src[0] = 45;
          v104 = &__src[1];
        }
        *(_QWORD *)v104 = 0x7974696E69666E49;
        v41 = v104 + 8;
      }
      goto LABEL_27;
    }
    v37 = *(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFLL;
    if ((*(_QWORD *)&v13 & 0x8000000000000000) != 0)
    {
      if (v37)
      {
        __src[0] = 45;
        v38 = &__src[1];
        goto LABEL_26;
      }
    }
    else if (v37)
    {
      v38 = __src;
LABEL_26:
      v39 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(*(_QWORD *)&v13 & 0x800FFFFFFFFFFFFFLL, v36);
      v41 = WTF::dragonbox::detail::to_chars_impl<double,WTF::dragonbox::default_float_traits<double>,(WTF::dragonbox::Mode)2,(WTF::dragonbox::PrintTrailingZero)1>(v39, v40, (uint64_t)v38);
LABEL_27:
      *v41 = 0;
      v17 = strlen(__src);
      p_dst = (char *)&__dst;
      memcpy(&__dst, __src, v17);
      goto LABEL_11;
    }
    *(_DWORD *)__src = 808150320;
    v41 = &__src[4];
    goto LABEL_27;
  }
  v55 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v55 = 0x3200000002;
  *(_QWORD *)(v55 + 8) = "toExponential() argument must be between 0 and 100";
  *(_DWORD *)(v55 + 16) = 4;
  *(_QWORD *)__src = v55;
  v63 = *(_QWORD *)(this + 128);
  v64 = *(_QWORD *)(this + 56);
  if ((v63 & 1) != 0)
  {
    v117 = *(uint64_t (**)(_DWORD **))(v63 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v118 = (_DWORD **)(this - 16);
    else
      v118 = (_DWORD **)(this & 0xFFFFFFFFFFFFC000 | 8);
    __dst = *v118;
    v197 = this;
    v198 = (char *)(this + 128);
    v63 = v117(&__dst);
  }
  v65 = *(JSC::Heap **)(v64 + 40448);
  if (!v65)
    v65 = JSC::GCClient::Heap::errorInstanceSpaceSlow((JSC::Heap **)(v64 + 37552));
  v66 = *((_QWORD *)v65 + 3);
  if (v66 >= *((_QWORD *)v65 + 4))
  {
    v66 = *((_QWORD *)v65 + 5);
    if ((v66 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v64, v56, v57, v58, v59, v60, v61, v62);
      v66 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v65, v64 + 192, 64, 0, 0, v164, v165, v166);
      goto LABEL_71;
    }
    v119 = *(_QWORD *)(v66 + 8) ^ *((_QWORD *)v65 + 6);
    *((_QWORD *)v65 + 4) = v66 + HIDWORD(v119);
    *((_QWORD *)v65 + 5) = v66 + (int)v119;
  }
  *((_QWORD *)v65 + 3) = v66 + 64;
LABEL_71:
  *(_DWORD *)v66 = 0;
  v67 = *(_DWORD *)(v63 + 8);
  *(_DWORD *)v66 = v63 >> 4;
  *(_DWORD *)(v66 + 4) = v67;
  *(_WORD *)(v66 + 56) = 0;
  *(_OWORD *)(v66 + 40) = 0u;
  *(_OWORD *)(v66 + 24) = 0u;
  *(_OWORD *)(v66 + 8) = 0u;
  *(_BYTE *)(v66 + 58) = 2;
  *(_BYTE *)(v66 + 59) = *(_BYTE *)(v66 + 59) & 0xE0 | 0x10;
  JSC::ErrorInstance::finishCreation(v66, v64, (WTF::StringImpl **)__src, 0, 0, 0, 1, v62, (__n128)0);
  if ((v66 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v66 & 0xFFFFFFFE) + 0x4C)))
  {
    v66 = JSC::Exception::create(v10, (JSC::VM *)v66, 0, v68, v69, v70, v71, v72);
  }
  v35 = (uint64_t)JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, (JSC::Exception *)v66, v73, v68, v69, v70, v71, v72);
  v81 = *(_QWORD *)__src;
  *(_QWORD *)__src = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 != 2)
    {
      *(_DWORD *)v81 -= 2;
      return v35;
    }
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v81, v74, v75, v76, v77, v78, v79, v80);
    v110 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v110)
    {
      pas_try_deallocate_slow_no_cache(v81, (uint64_t)&bmalloc_heap_config, 1);
      return v35;
    }
    if (!(v81 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v81 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v81)) & 1) != 0)
    {
      goto LABEL_115;
    }
    if (v81 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v81 >> 24)
    {
      v105 = 0;
    }
    else
    {
      v105 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v81 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v81) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)v105 == 1)
      {
LABEL_115:
        v111 = *(unsigned int *)(v110 + 8000);
        if (v111 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v110, v81, (os_unfair_lock_s *)5, v105, v106, v107, v108, v109);
        }
        else
        {
          *(_QWORD *)(v110 + 8 * v111) = v81 | 0x5000000000000;
          *(_DWORD *)(v110 + 8000) = v111 + 1;
        }
        return v35;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v110, v81, 1, v105, v106, v107, v108, v109);
  }
  return v35;
}

unint64_t JSC::numberProtoFuncToPrecision(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  unint64_t *v14;
  JSC::JSObject *v15;
  double v16;
  const char *v17;
  const char *v18;
  size_t v19;
  JSC::VM *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  double v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  int v46;
  size_t v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  _BYTE *v52;
  int v53;
  int v54;
  unsigned __int8 *v55;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t StatusReg;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  JSC::VM *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  JSC::Heap *v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  WTF::AtomStringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  size_t v108;
  char *v109;
  int v110;
  size_t v111;
  JSC::VM *v112;
  uint64_t v113;
  uint64_t v114;
  size_t v115;
  int *v116;
  _BYTE *v117;
  int v118;
  int *v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t (*v129)(_DWORD **);
  _DWORD **v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  unint64_t *v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  int8x16_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _DWORD *v148;
  _WORD *v149;
  unint64_t v150;
  uint64_t v151;
  JSC::Heap *v152;
  unint64_t SlowCase;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  double v160;
  WTF::AtomStringImpl *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _WORD *v182;
  _WORD *v183;
  __int128 v184;
  int8x16_t v185;
  int8x16_t v186;
  int8x16_t v187;
  char *v188;
  char *v189;
  char *v190;
  __int16 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t (*v195)(_DWORD **);
  _DWORD **v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _WORD *v201;
  _WORD *v202;
  unsigned __int128 v203;
  __int8 v204;
  double v205;
  JSC::JSObject *v206;
  char __s[8];
  _DWORD *__dst;
  unint64_t v209;
  char *v210;
  uint64_t v211;
  int8x16x2_t v212;
  int8x16x2_t v213;
  int8x16x2_t v214;

  v211 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(this + 56);
  v11 = v10 + 41968;
  v12 = *((_QWORD *)a2 + 5);
  if (v12 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v12;
    goto LABEL_3;
  }
  if (v12 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    *(_QWORD *)&v13 = v12 - 0x2000000000000;
    goto LABEL_3;
  }
  if ((v12 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v12 + 5) != 30)
  {
    if (v12 != 10)
    {
      if ((v12 & 0xFFFFFFFFFFFFFFFELL) == 6)
      {
        v137 = (unint64_t *)(v10 + 41984);
        goto LABEL_185;
      }
      if ((v12 & 0xFFFE000000000002) == 0)
      {
        v136 = *(unsigned __int8 *)(v12 + 5);
        switch(v136)
        {
          case 2u:
            v137 = (unint64_t *)(v10 + 42040);
            goto LABEL_185;
          case 4u:
            v137 = (unint64_t *)(v10 + 42048);
            goto LABEL_185;
          case 3u:
            v137 = (unint64_t *)(v10 + 42056);
            goto LABEL_185;
        }
        if (v136 >= 0x17)
        {
          if ((*(_BYTE *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xA) & 1) != 0
            && *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28) == this)
          {
            goto LABEL_279;
          }
          if ((v136 & 0xFE) == 0x1A
            || (*(_BYTE *)(v12 + 6) & 4) != 0
            && ((*(void (**)(_DWORD **__return_ptr))(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                + 0x4C)
                                                              + 0x38))(&__dst),
                (_BYTE)__dst))
          {
            v137 = (unint64_t *)(v10 + 42000);
            goto LABEL_185;
          }
        }
      }
      v137 = (unint64_t *)(v10 + 42024);
      goto LABEL_185;
    }
LABEL_279:
    v137 = (unint64_t *)(v10 + 42032);
LABEL_185:
    v138 = *(_QWORD *)(*v137 + 8);
    if ((v138 & 1) != 0)
      v138 = (unint64_t)*JSC::JSRopeString::resolveRope(*v137, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (v138)
    {
      v139 = *(_DWORD *)(v138 + 4);
      *(_DWORD *)v138 += 2;
      if (v139 < 0)
        goto LABEL_287;
      v140 = (v139 + 39);
      if (__OFADD__(v139, 39))
        goto LABEL_287;
      if ((*(_BYTE *)(v138 + 16) & 4) == 0)
      {
        if (v140 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v140 + 20), &__dst);
          v148 = __dst;
          if (__dst)
          {
            *__dst = 2;
            v148[1] = v140;
            *(_OWORD *)(v148 + 5) = xmmword_199158DF0;
            *((_QWORD *)v148 + 1) = v148 + 5;
            v148[4] = 0;
            v149 = (_WORD *)v148 + 49;
            *(_OWORD *)(v148 + 9) = xmmword_199158E00;
            *(_OWORD *)(v148 + 13) = xmmword_199158E10;
            *(_OWORD *)(v148 + 17) = xmmword_199158E20;
            *(_QWORD *)(v148 + 21) = 0x62006900740061;
            v148[23] = 6619244;
            *((_WORD *)v148 + 48) = 32;
            v141 = *(int8x16_t **)(v138 + 8);
            v178 = *(unsigned int *)(v138 + 4);
            if ((*(_BYTE *)(v138 + 16) & 4) != 0)
            {
              v182 = &v149[v178];
              if (v178 >= 0x40)
              {
                v183 = &v149[v178 & 0xFFFFFFC0];
                v184 = 0uLL;
                do
                {
                  v212.val[0] = *v141;
                  v185 = v141[1];
                  v213.val[0] = v141[2];
                  v186 = v141[3];
                  v141 += 4;
                  v187 = v186;
                  v213.val[1] = 0uLL;
                  v214.val[0] = v185;
                  v212.val[1] = 0uLL;
                  v188 = (char *)v149;
                  vst2q_s8(v188, v212);
                  v188 += 32;
                  v214.val[1] = 0uLL;
                  vst2q_s8(v188, v214);
                  v189 = (char *)(v149 + 32);
                  vst2q_s8(v189, v213);
                  v190 = (char *)(v149 + 48);
                  vst2q_s8(v190, *(int8x16x2_t *)(&v184 - 1));
                  v149 += 64;
                }
                while (v149 != v183);
                v149 = v183;
              }
              while (v149 != v182)
              {
                v191 = v141->u8[0];
                v141 = (int8x16_t *)((char *)v141 + 1);
                *v149++ = v191;
              }
            }
            else if ((_DWORD)v178 == 1)
            {
              *v149 = v141->i16[0];
            }
            else if ((_DWORD)v178)
            {
              v142 = 2 * v178;
LABEL_211:
              memcpy(v149, v141, v142);
            }
LABEL_196:
            *(_QWORD *)__s = v148;
            v150 = *(_QWORD *)(this + 176);
            v151 = *(_QWORD *)(this + 56);
            if ((v150 & 1) != 0)
            {
              v195 = *(uint64_t (**)(_DWORD **))(v150 & 0xFFFFFFFFFFFFFFFCLL);
              if ((this & 8) != 0)
                v196 = (_DWORD **)(this - 16);
              else
                v196 = (_DWORD **)(this & 0xFFFFFFFFFFFFC000 | 8);
              __dst = *v196;
              v209 = this;
              v210 = (char *)(this + 176);
              v150 = v195(&__dst);
            }
            v152 = *(JSC::Heap **)(v151 + 40448);
            if (!v152)
              v152 = JSC::GCClient::Heap::errorInstanceSpaceSlow((JSC::Heap **)(v151 + 37552));
            SlowCase = *((_QWORD *)v152 + 3);
            if (SlowCase >= *((_QWORD *)v152 + 4))
            {
              SlowCase = *((_QWORD *)v152 + 5);
              if ((SlowCase & 1) != 0)
              {
                JSC::sanitizeStackForVM((JSC *)v151, (JSC::VM *)v141, v142, v143, v144, v145, v146, v147);
                SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v152, v151 + 192, 64, 0, 0, v198, v199, v200);
                goto LABEL_201;
              }
              v197 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v152 + 6);
              *((_QWORD *)v152 + 4) = SlowCase + HIDWORD(v197);
              *((_QWORD *)v152 + 5) = SlowCase + (int)v197;
            }
            *((_QWORD *)v152 + 3) = SlowCase + 64;
LABEL_201:
            *(_DWORD *)SlowCase = 0;
            v154 = *(_DWORD *)(v150 + 8);
            *(_DWORD *)SlowCase = v150 >> 4;
            *(_DWORD *)(SlowCase + 4) = v154;
            *(_WORD *)(SlowCase + 56) = 0;
            *(_OWORD *)(SlowCase + 40) = 0u;
            *(_OWORD *)(SlowCase + 24) = 0u;
            *(_OWORD *)(SlowCase + 8) = 0u;
            *(_BYTE *)(SlowCase + 58) = 5;
            *(_BYTE *)(SlowCase + 59) = *(_BYTE *)(SlowCase + 59) & 0xE0 | 0x10;
            JSC::ErrorInstance::finishCreation(SlowCase, v151, (WTF::StringImpl **)__s, 0, 0, 0, 1, v147, (__n128)0);
            if ((SlowCase & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x4C)))
            {
              SlowCase = JSC::Exception::create(v10, (JSC::VM *)SlowCase, 0, v155, v156, v157, v158, v159);
            }
            v30 = (unint64_t)JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, (JSC::Exception *)SlowCase, v160, v155, v156, v157, v158, v159);
            v168 = *(_QWORD *)__s;
            *(_QWORD *)__s = 0;
            if (!v168)
            {
LABEL_206:
              if (!v138)
                return v30;
              if (*(_DWORD *)v138 != 2)
              {
                *(_DWORD *)v138 -= 2;
                return v30;
              }
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v138, v161, v162, v163, v164, v165, v166, v167);
              v176 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
              if (!v176)
              {
                pas_try_deallocate_slow_no_cache(v138, (uint64_t)&bmalloc_heap_config, 1);
                return v30;
              }
              if (!(v138 >> 43)
                && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v138 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v138)) & 1) != 0)
              {
                goto LABEL_227;
              }
              if (v138 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v138 >> 24)
              {
                v171 = 0;
              }
              else
              {
                v171 = (*(_DWORD *)((char *)off_1ECF425F8
                                  + ((((v138 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                  + 24) >> (2 * ((BYTE3(v138) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v171 == 1)
                {
LABEL_227:
                  v177 = *(unsigned int *)(v176 + 8000);
                  if (v177 >= 0x3E7)
                  {
                    pas_thread_local_cache_append_deallocation_slow(v176, v138, (os_unfair_lock_s *)5, v171, v172, v173, v174, v175);
                  }
                  else
                  {
                    *(_QWORD *)(v176 + 8 * v177) = v138 | 0x5000000000000;
                    *(_DWORD *)(v176 + 8000) = v177 + 1;
                  }
                  return v30;
                }
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v176, v138, 1, v171, v172, v173, v174, v175);
              return v30;
            }
            if (*(_DWORD *)v168 != 2)
            {
              *(_DWORD *)v168 -= 2;
              goto LABEL_206;
            }
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v168, v161, v162, v163, v164, v165, v166, v167);
            v169 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
            if (!v169)
            {
              pas_try_deallocate_slow_no_cache(v168, (uint64_t)&bmalloc_heap_config, 1);
              goto LABEL_206;
            }
            if (!(v168 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v168 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v168)) & 1) != 0)
            {
LABEL_222:
              v170 = *(unsigned int *)(v169 + 8000);
              if (v170 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v169, v168, (os_unfair_lock_s *)5, v163, v164, v165, v166, v167);
              }
              else
              {
                *(_QWORD *)(v169 + 8 * v170) = v168 | 0x5000000000000;
                *(_DWORD *)(v169 + 8000) = v170 + 1;
              }
              goto LABEL_206;
            }
            if (v168 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v168 >> 24)
            {
              v163 = 0;
            }
            else
            {
              v163 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v168 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v168) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v163 == 1)
                goto LABEL_222;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v169, v168, 1, v163, v164, v165, v166, v167);
            goto LABEL_206;
          }
        }
LABEL_287:
        *(_QWORD *)__s = 0;
        __break(0xC471u);
        goto LABEL_288;
      }
    }
    else
    {
      v140 = 39;
    }
    WTF::tryFastCompactMalloc((WTF *)(v140 + 20), &__dst);
    v148 = __dst;
    if (__dst)
    {
      *__dst = 2;
      v148[1] = v140;
      *((_QWORD *)v148 + 1) = v148 + 5;
      v148[4] = 4;
      qmemcpy(v148 + 5, "thisNumberValue called on incompatible ", 39);
      if (!v138)
        goto LABEL_196;
      v149 = (_WORD *)((char *)v148 + 59);
      v141 = *(int8x16_t **)(v138 + 8);
      v142 = *(unsigned int *)(v138 + 4);
      if ((*(_BYTE *)(v138 + 16) & 4) != 0)
      {
        if ((_DWORD)v142 == 1)
        {
          *(_BYTE *)v149 = v141->i8[0];
          goto LABEL_196;
        }
        if ((_DWORD)v142)
          goto LABEL_211;
      }
      else
      {
        v201 = (_WORD *)((char *)v149 + v142);
        if (v142 >= 0x10)
        {
          v202 = (_WORD *)((char *)v149 + (v142 & 0xFFFFFFF0));
          do
          {
            v203 = (unsigned __int128)vld2q_s8(v141->i8);
            v141 += 2;
            *(_OWORD *)v149 = v203;
            v149 += 8;
          }
          while (v149 != v202);
          v149 = v202;
        }
        while (v149 != v201)
        {
          v204 = v141->i8[0];
          v141 = (int8x16_t *)((char *)v141 + 2);
          *(_BYTE *)v149 = v204;
          v149 = (_WORD *)((char *)v149 + 1);
        }
      }
      goto LABEL_196;
    }
    goto LABEL_287;
  }
  v125 = *(_QWORD *)(v12 + 16);
  *(double *)a9.i64 = (double)(int)v125;
  if (v125 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v13 = v125 - 0x2000000000000;
  else
    v13 = (double)(int)v125;
LABEL_3:
  v14 = (unint64_t *)(v10 + 39696);
  if (*((_DWORD *)a2 + 8) == 1 || (v15 = (JSC::JSObject *)*((_QWORD *)a2 + 6), v206 = v15, v15 == (JSC::JSObject *)10))
  {
    v37 = (*(_QWORD *)&v13 >> 52) & 0x7FFLL;
    if ((_DWORD)v37 == 2047)
    {
      if ((*(_QWORD *)&v13 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", 3);
        v38 = &__s[3];
      }
      else
      {
        v69 = __s;
        if ((*(_QWORD *)&v13 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v69 = &__s[1];
        }
        *(_QWORD *)v69 = 0x7974696E69666E49;
        v38 = v69 + 8;
      }
LABEL_43:
      *v38 = 0;
      v46 = strlen(__s);
      memcpy(&__dst, __s, v46);
      *((_BYTE *)&__dst + v46) = 0;
      v47 = strlen((const char *)&__dst);
      if (v47)
      {
        v51 = v47;
        if (v47 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B72624);
        }
        v28 = WTF::fastCompactMalloc((WTF *)(v47 + 20));
        v52 = (_BYTE *)(v28 + 20);
        *(_DWORD *)v28 = 2;
        *(_DWORD *)(v28 + 4) = v51;
        *(_QWORD *)(v28 + 8) = v28 + 20;
        *(_DWORD *)(v28 + 16) = 4;
        if (v51 == 1)
        {
          v53 = 0;
          *v52 = (_BYTE)__dst;
          goto LABEL_47;
        }
        memcpy(v52, &__dst, v51);
        v53 = 0;
      }
      else
      {
        v28 = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
        v53 = WTF::StringImpl::s_emptyAtomString;
        LODWORD(v51) = dword_1ECF2C424;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
      if (!(_DWORD)v51)
      {
LABEL_50:
        v30 = *(_QWORD *)v11;
        if (!v53)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v28, v48, v49, v50, v23, v24, v25, v26);
          StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          goto LABEL_79;
        }
LABEL_51:
        *(_DWORD *)v28 = v53;
        return v30;
      }
      if ((_DWORD)v51 != 1)
      {
        v54 = *(_DWORD *)(v28 + 16);
        goto LABEL_56;
      }
LABEL_47:
      v54 = *(_DWORD *)(v28 + 16);
      v55 = *(unsigned __int8 **)(v28 + 8);
      if ((v54 & 4) != 0)
      {
        v56 = *v55;
LABEL_49:
        v11 = v10 + 8 * v56 + 42216;
        goto LABEL_50;
      }
      v56 = *(unsigned __int16 *)v55;
      if (v56 <= 0xFF)
        goto LABEL_49;
LABEL_56:
      v57 = v28;
      if ((v54 & 3) == 2)
      {
        v57 = v28;
        do
        {
          v57 = *(_QWORD *)(v57 + 24);
          v54 = *(_DWORD *)(v57 + 16);
        }
        while ((v54 & 3) == 2);
      }
      if ((v54 & 8) != 0)
      {
        v34 = 0;
      }
      else
      {
        *(_DWORD *)(v57 + 16) = v54 | 8;
        v34 = (unint64_t)*(unsigned int *)(v57 + 4) << ((v54 & 4) == 0);
      }
      v35 = v10 + 192;
      v30 = *v14;
      if (*v14 >= *(_QWORD *)(v10 + 39704))
      {
        v30 = *(_QWORD *)(v10 + 39712);
        if ((v30 & 1) != 0)
        {
          JSC::sanitizeStackForVM((JSC *)v10, v48, v49, v50, v23, v24, v25, v26);
          v30 = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v133, v134, v135);
LABEL_61:
          *(_DWORD *)v30 = *(_QWORD *)(v10 + 41512) >> 4;
          *(_DWORD *)(v30 + 4) = 17302016;
          *(_QWORD *)(v30 + 8) = v28;
          if (*(_BYTE *)(v10 + 755))
            __dmb(0xAu);
          goto LABEL_27;
        }
        v104 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v10 + 39720);
        *(_QWORD *)(v10 + 39704) = v30 + HIDWORD(v104);
        *(_QWORD *)(v10 + 39712) = v30 + (int)v104;
      }
      *v14 = v30 + 16;
      goto LABEL_61;
    }
    v41 = *(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFLL;
    if ((*(_QWORD *)&v13 & 0x8000000000000000) != 0 && v41)
    {
      __s[0] = 45;
      v42 = &__s[1];
    }
    else
    {
      v42 = __s;
      if (!v41)
      {
        v38 = &__s[1];
        __s[0] = 48;
        goto LABEL_43;
      }
    }
    v43 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(*(_QWORD *)&v13 & 0x800FFFFFFFFFFFFFLL, v37);
    v38 = WTF::dragonbox::detail::to_shortest(v43, v44, (uint64_t)v42, v45);
    goto LABEL_43;
  }
  if ((unint64_t)v15 < 0xFFFE000000000000)
  {
    v39 = (unint64_t)v15 - 0x2000000000000;
    if (v39 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase(&v206, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    else
      v40 = *(double *)&v39;
    v16 = trunc(v40 + 0.0);
  }
  else
  {
    v16 = (double)(int)v15;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v73 = *(_DWORD *)(v10 + 80);
    if ((v73 & 0x27) != 0 && (v73 & 0x20) == 0)
    {
      v205 = v16;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v16 = v205;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v102 = (*(_QWORD *)&v13 >> 52) & 0x7FFLL;
    if ((_DWORD)v102 == 2047)
    {
      if ((*(_QWORD *)&v13 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", 3);
        v103 = &__s[3];
      }
      else
      {
        v122 = __s;
        if ((*(_QWORD *)&v13 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v122 = &__s[1];
        }
        *(_QWORD *)v122 = 0x7974696E69666E49;
        v103 = v122 + 8;
      }
LABEL_119:
      *v103 = 0;
      v110 = strlen(__s);
      memcpy(&__dst, __s, v110);
      *((_BYTE *)&__dst + v110) = 0;
      v111 = strlen((const char *)&__dst);
      if (v111)
      {
        v115 = v111;
        if (v111 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198B728C4);
        }
        v116 = (int *)WTF::fastCompactMalloc((WTF *)(v111 + 20));
        v117 = v116 + 5;
        *v116 = 2;
        v116[1] = v115;
        *((_QWORD *)v116 + 1) = v116 + 5;
        v116[4] = 4;
        if (v115 == 1)
          *v117 = (_BYTE)__dst;
        else
          memcpy(v117, &__dst, v115);
        v118 = 4;
        v119 = v116;
      }
      else
      {
        v116 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        while (1)
        {
          v118 = v116[4];
          if ((v118 & 3) != 2)
            break;
          v116 = (int *)*((_QWORD *)v116 + 3);
        }
        v119 = &WTF::StringImpl::s_emptyAtomString;
        if ((v118 & 8) != 0)
        {
          v120 = 0;
          goto LABEL_130;
        }
      }
      v116[4] = v118 | 8;
      v120 = (unint64_t)v116[1] << ((v118 & 4) == 0);
LABEL_130:
      v30 = *v14;
      if (*v14 >= *(_QWORD *)(v10 + 39704))
      {
        v30 = *(_QWORD *)(v10 + 39712);
        if ((v30 & 1) != 0)
        {
          JSC::sanitizeStackForVM((JSC *)v10, v112, v113, v114, v23, v24, v25, v26);
          v30 = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v192, v193, v194);
LABEL_132:
          *(_DWORD *)v30 = *(_QWORD *)(v10 + 41512) >> 4;
          *(_DWORD *)(v30 + 4) = 17302016;
          *(_QWORD *)(v30 + 8) = v119;
          if (*(_BYTE *)(v10 + 755))
            __dmb(0xAu);
          if (v120 >= 0x101)
          {
            v58 = v10 + 192;
            v59 = v30;
            v60 = v120;
            goto LABEL_64;
          }
          return v30;
        }
        v132 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v10 + 39720);
        *(_QWORD *)(v10 + 39704) = v30 + HIDWORD(v132);
        *(_QWORD *)(v10 + 39712) = v30 + (int)v132;
      }
      *v14 = v30 + 16;
      goto LABEL_132;
    }
    v105 = *(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFLL;
    if ((*(_QWORD *)&v13 & 0x8000000000000000) != 0 && v105)
    {
      __s[0] = 45;
      v106 = &__s[1];
    }
    else
    {
      v106 = __s;
      if (!v105)
      {
        v103 = &__s[1];
        __s[0] = 48;
        goto LABEL_119;
      }
    }
    v107 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(*(_QWORD *)&v13 & 0x800FFFFFFFFFFFFFLL, v102);
    v103 = WTF::dragonbox::detail::to_shortest(v107, v108, (uint64_t)v106, v109);
    goto LABEL_119;
  }
  if (((int)v16 - 101) <= 0xFFFFFF9B)
  {
    v75 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v75 = 0x3000000002;
    *(_QWORD *)(v75 + 8) = "toPrecision() argument must be between 1 and 100";
    *(_DWORD *)(v75 + 16) = 4;
    *(_QWORD *)__s = v75;
    v83 = *(_QWORD *)(this + 128);
    v84 = *(_QWORD *)(this + 56);
    if ((v83 & 1) != 0)
    {
      v129 = *(uint64_t (**)(_DWORD **))(v83 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v130 = (_DWORD **)(this - 16);
      else
        v130 = (_DWORD **)(this & 0xFFFFFFFFFFFFC000 | 8);
      __dst = *v130;
      v209 = this;
      v210 = (char *)(this + 128);
      v83 = v129(&__dst);
    }
    v85 = *(JSC::Heap **)(v84 + 40448);
    if (!v85)
      v85 = JSC::GCClient::Heap::errorInstanceSpaceSlow((JSC::Heap **)(v84 + 37552));
    v86 = *((_QWORD *)v85 + 3);
    if (v86 >= *((_QWORD *)v85 + 4))
    {
      v86 = *((_QWORD *)v85 + 5);
      if ((v86 & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v84, v76, v77, v78, v79, v80, v81, v82);
        v86 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v85, v84 + 192, 64, 0, 0, v179, v180, v181);
        goto LABEL_105;
      }
      v131 = *(_QWORD *)(v86 + 8) ^ *((_QWORD *)v85 + 6);
      *((_QWORD *)v85 + 4) = v86 + HIDWORD(v131);
      *((_QWORD *)v85 + 5) = v86 + (int)v131;
    }
    *((_QWORD *)v85 + 3) = v86 + 64;
LABEL_105:
    *(_DWORD *)v86 = 0;
    v87 = *(_DWORD *)(v83 + 8);
    *(_DWORD *)v86 = v83 >> 4;
    *(_DWORD *)(v86 + 4) = v87;
    *(_WORD *)(v86 + 56) = 0;
    *(_OWORD *)(v86 + 40) = 0u;
    *(_OWORD *)(v86 + 24) = 0u;
    *(_OWORD *)(v86 + 8) = 0u;
    *(_BYTE *)(v86 + 58) = 2;
    *(_BYTE *)(v86 + 59) = *(_BYTE *)(v86 + 59) & 0xE0 | 0x10;
    JSC::ErrorInstance::finishCreation(v86, v84, (WTF::StringImpl **)__s, 0, 0, 0, 1, v82, (__n128)0);
    if ((v86 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v86 & 0xFFFFFFFE) + 0x4C)))
    {
      v86 = JSC::Exception::create(v10, (JSC::VM *)v86, 0, v88, v89, v90, v91, v92);
    }
    v30 = (unint64_t)JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, (JSC::Exception *)v86, v93, v88, v89, v90, v91, v92);
    v101 = *(_QWORD *)__s;
    *(_QWORD *)__s = 0;
    if (!v101)
      return v30;
    if (*(_DWORD *)v101 != 2)
    {
      *(_DWORD *)v101 -= 2;
      return v30;
    }
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v101, v94, v95, v96, v97, v98, v99, v100);
    v70 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v70)
    {
      v123 = v101;
      goto LABEL_152;
    }
    if (!(v101 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v101 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v101)) & 1) != 0)
    {
LABEL_139:
      v71 = *(unsigned int *)(v70 + 8000);
      if (v71 < 0x3E7)
      {
        v72 = v101 | 0x5000000000000;
        goto LABEL_84;
      }
      v124 = v101;
LABEL_154:
      pas_thread_local_cache_append_deallocation_slow(v70, v124, (os_unfair_lock_s *)5, v63, v64, v65, v66, v67);
      return v30;
    }
    if (v101 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v101 >> 24)
    {
      v63 = 0;
    }
    else
    {
      v63 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v101 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v101) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)v63 == 1)
        goto LABEL_139;
    }
    v121 = v101;
    goto LABEL_147;
  }
  v17 = (const char *)WTF::numberToFixedPrecisionString((int)v16, (uint64_t)&__dst, 0, v13);
  if (v17)
  {
    v18 = v17;
    v19 = strlen(v17);
    if (!v19)
    {
      v28 = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_17;
    }
    v27 = v19;
    if (!(v19 >> 31))
    {
      v28 = WTF::fastCompactMalloc((WTF *)(v19 + 20));
      v29 = (char *)(v28 + 20);
      *(_DWORD *)v28 = 2;
      *(_DWORD *)(v28 + 4) = v27;
      *(_QWORD *)(v28 + 8) = v28 + 20;
      *(_DWORD *)(v28 + 16) = 4;
      if (v27 == 1)
        *v29 = *v18;
      else
        memcpy(v29, v18, v27);
LABEL_17:
      v31 = *(_DWORD *)(v28 + 4);
      if (v31 == 1)
      {
        v32 = *(_DWORD *)(v28 + 16);
        v61 = *(unsigned __int8 **)(v28 + 8);
        if ((v32 & 4) != 0)
        {
          v62 = *v61;
        }
        else
        {
          v62 = *(unsigned __int16 *)v61;
          if (v62 > 0xFF)
          {
LABEL_20:
            v33 = v28;
            if ((v32 & 3) == 2)
            {
              v33 = v28;
              do
              {
                v33 = *(_QWORD *)(v33 + 24);
                v32 = *(_DWORD *)(v33 + 16);
              }
              while ((v32 & 3) == 2);
            }
            if ((v32 & 8) != 0)
            {
              v34 = 0;
            }
            else
            {
              *(_DWORD *)(v33 + 16) = v32 | 8;
              v34 = (unint64_t)*(unsigned int *)(v33 + 4) << ((v32 & 4) == 0);
            }
            v35 = v10 + 192;
            v30 = *v14;
            if (*v14 >= *(_QWORD *)(v10 + 39704))
            {
              v30 = *(_QWORD *)(v10 + 39712);
              if ((v30 & 1) != 0)
              {
                JSC::sanitizeStackForVM((JSC *)v10, v20, v21, v22, v23, v24, v25, v26);
                v30 = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v126, v127, v128);
LABEL_25:
                *(_DWORD *)v30 = *(_QWORD *)(v10 + 41512) >> 4;
                *(_DWORD *)(v30 + 4) = 17302016;
                *(_QWORD *)(v30 + 8) = v28;
                if (*(_BYTE *)(v10 + 755))
                  __dmb(0xAu);
LABEL_27:
                if (v34 < 0x101)
                  return v30;
                v58 = v35;
                v59 = v30;
                v60 = v34;
LABEL_64:
                JSC::Heap::reportExtraMemoryAllocatedSlowCase(v58, 0, v59, v60, v23, v24, v25, v26);
                return v30;
              }
              v74 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v10 + 39720);
              *(_QWORD *)(v10 + 39704) = v30 + HIDWORD(v74);
              *(_QWORD *)(v10 + 39712) = v30 + (int)v74;
            }
            *v14 = v30 + 16;
            goto LABEL_25;
          }
        }
        v11 = v10 + 8 * v62 + 42216;
      }
      else if (v31)
      {
        v32 = *(_DWORD *)(v28 + 16);
        goto LABEL_20;
      }
      v30 = *(_QWORD *)v11;
      v53 = *(_DWORD *)v28 - 2;
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v28, v20, v21, v22, v23, v24, v25, v26);
        StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_79:
        v70 = *(_QWORD *)(StatusReg + 752);
        if (v70)
        {
          if (!(v28 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v28 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v28)) & 1) != 0)
          {
            goto LABEL_82;
          }
          if (v28 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v28 >> 24)
          {
            v63 = 0;
          }
          else
          {
            v63 = (*(_DWORD *)((char *)off_1ECF425F8
                             + ((((v28 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                             + 24) >> (2 * ((BYTE3(v28) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v63 == 1)
            {
LABEL_82:
              v71 = *(unsigned int *)(v70 + 8000);
              if (v71 < 0x3E7)
              {
                v72 = v28 | 0x5000000000000;
LABEL_84:
                *(_QWORD *)(v70 + 8 * v71) = v72;
                *(_DWORD *)(v70 + 8000) = v71 + 1;
                return v30;
              }
              v124 = v28;
              goto LABEL_154;
            }
          }
          v121 = v28;
LABEL_147:
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v70, v121, 1, v63, v64, v65, v66, v67);
          return v30;
        }
        v123 = v28;
LABEL_152:
        pas_try_deallocate_slow_no_cache(v123, (uint64_t)&bmalloc_heap_config, 1);
        return v30;
      }
      goto LABEL_51;
    }
    __break(0xC471u);
LABEL_288:
    JUMPOUT(0x198B72544);
  }
  return *(_QWORD *)v11;
}

uint64_t JSC::Uint16WithFraction::sumGreaterThanOne(_DWORD *a1, unsigned int a2, _DWORD *a3, unsigned int a4)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  _BOOL4 v13;
  unint64_t v14;
  _BOOL4 v15;

  if (!a2 || !a4)
  {
    __break(0xC471u);
    JUMPOUT(0x198B72A18);
  }
  v4 = a2;
  v5 = *a3 + *a1;
  if (v5)
  {
    if (a2 <= (unint64_t)a4)
      v4 = a4;
    v13 = v4 > 1;
    return v5 != 1 || v13;
  }
  else
  {
    if (a4 >= (unint64_t)a2)
      v6 = a2;
    else
      v6 = a4;
    if (v6 < 2)
    {
      return 0;
    }
    else
    {
      v7 = 1;
      while (1)
      {
        v8 = a1[v7];
        v9 = a3[v7];
        v11 = __CFADD__(v9, v8);
        v10 = v9 + v8;
        if (v11)
          break;
        v11 = v10 != -1 || ++v7 >= v6;
        if (v11)
          return 0;
      }
      v14 = v7 + 1;
      if (a2 <= (unint64_t)a4)
        v4 = a4;
      v15 = v14 < v4;
      return v10 || v15;
    }
  }
}

uint64_t JSC::Uint16WithFraction::operator*=(uint64_t result, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;

  v2 = *(unsigned int *)(result + 12);
  v3 = *(_QWORD *)(result + 160);
  if (v3 >= v2)
  {
    LODWORD(v9) = *(_DWORD *)(result + 12);
    if (v3)
      goto LABEL_9;
  }
  else
  {
    v4 = 0;
    v5 = v2 - 1;
    do
    {
      if (v5 >= *(unsigned int *)(result + 12))
        goto LABEL_21;
      v6 = *(_DWORD **)result;
      v7 = v4 + *(unsigned int *)(*(_QWORD *)result + 4 * v5) * (unint64_t)a2;
      *(_DWORD *)(*(_QWORD *)result + 4 * v5) = v7;
      v4 = HIDWORD(v7);
    }
    while (v5-- > v3);
    v9 = *(unsigned int *)(result + 12);
    if (v3)
    {
      if (v4)
      {
        v10 = v3 - 1;
        *(_QWORD *)(result + 160) = v10;
        if (v10 >= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x198B72B04);
        }
        v6[v10] = v4;
        LODWORD(v9) = *(_DWORD *)(result + 12);
      }
      goto LABEL_9;
    }
  }
  if (!(_DWORD)v9)
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x198B72AFCLL);
  }
  v12 = *(_DWORD **)result;
  if (**(_DWORD **)result >= 0x10000u)
  {
    *(_DWORD *)(result + 12) = 1;
    *v12 = 0x10000;
    *(_QWORD *)(result + 160) = 0;
    return result;
  }
LABEL_9:
  if (v9 >= 2)
  {
    v11 = *(_DWORD **)result;
    do
    {
      if (v11[v9 - 1])
        break;
      LODWORD(v9) = v9 - 1;
      *(_DWORD *)(result + 12) = v9;
    }
    while (v9 > 1);
  }
  return result;
}

JSC::Uint16WithFraction *JSC::Uint16WithFraction::Uint16WithFraction(JSC::Uint16WithFraction *this, double a2, int a3)
{
  double v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = (char *)this + 16;
  *((_DWORD *)this + 2) = 36;
  if (a2 >= 65536.0)
  {
    *(_QWORD *)((char *)this + 12) = 0x1000000000001;
    *((_QWORD *)this + 20) = 0;
  }
  else
  {
    v4 = a2 - floor(a2);
    v5 = *(_QWORD *)&v4 >> 52;
    if ((*(_QWORD *)&v4 & 0xFFFFFFFFFFFFFLL) != 0)
      v6 = -1022;
    else
      v6 = 0;
    if ((v5 & 0x7FF) != 0)
      v7 = *(_QWORD *)&v4 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
    else
      v7 = *(_QWORD *)&v4 & 0xFFFFFFFFFFFFFLL;
    v8 = (v5 & 0x7FF) - 1023;
    *((_DWORD *)this + 3) = 1;
    *((_DWORD *)this + 4) = vcvtmd_u64_f64(a2);
    if ((v5 & 0x7FF) == 0)
      v8 = v6;
    v9 = ~v8 + a3;
    if (v9 >= 32)
    {
      v22 = a3 - v8 + 31;
      do
      {
        v24 = 0;
        v23 = *((unsigned int *)this + 3);
        if ((_DWORD)v23 == *((_DWORD *)this + 2))
        {
          WTF::Vector<unsigned int,36ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>((uint64_t)this, &v24);
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)this + 4 * v23) = 0;
          ++*((_DWORD *)this + 3);
        }
        v22 -= 32;
      }
      while (v22 > 63);
      v9 = v22 - 32;
    }
    v10 = v7 >> 21;
    v11 = (_DWORD)v7 << 11;
    v24 = v7 >> 21;
    v25 = (_DWORD)v7 << 11;
    v26 = 0;
    if (v9)
    {
      v12 = v11 << -(char)v9;
      v13 = ((_DWORD)v10 << -(char)v9) | (v11 >> v9);
      LODWORD(v10) = v10 >> v9;
      v25 = v13;
      v26 = v12;
      v24 = v10;
    }
    v14 = *((unsigned int *)this + 3);
    if ((_DWORD)v14 == *((_DWORD *)this + 2))
    {
      WTF::Vector<unsigned int,36ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)this, (unint64_t)&v24);
      v15 = *((_DWORD *)this + 3);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)this + 4 * v14) = v10;
      v15 = *((_DWORD *)this + 3) + 1;
      *((_DWORD *)this + 3) = v15;
    }
    if (v15 == *((_DWORD *)this + 2))
    {
      WTF::Vector<unsigned int,36ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)this, (unint64_t)&v25);
      v16 = *((_DWORD *)this + 3);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)this + 4 * v15) = v25;
      v16 = *((_DWORD *)this + 3) + 1;
      *((_DWORD *)this + 3) = v16;
    }
    if (v16 == *((_DWORD *)this + 2))
    {
      WTF::Vector<unsigned int,36ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)this, (unint64_t)&v26);
      v17 = *((_DWORD *)this + 3);
    }
    else
    {
      *(_DWORD *)(*(_QWORD *)this + 4 * v16) = v26;
      v17 = *((_DWORD *)this + 3) + 1;
      *((_DWORD *)this + 3) = v17;
    }
    v18 = v17;
    if (v17 >= 2)
    {
      v19 = *(_QWORD *)this;
      do
      {
        if (*(_DWORD *)(v19 + 4 * v18 - 4))
          break;
        v18 = v17 - 1;
        *((_DWORD *)this + 3) = v18;
        --v17;
      }
      while (v18 > 1);
    }
    v20 = 0;
    if (v18)
    {
      while (!*(_DWORD *)(*(_QWORD *)this + 4 * v20))
      {
        if (v18 == ++v20)
        {
          v20 = v18;
          break;
        }
      }
    }
    *((_QWORD *)this + 20) = v20;
  }
  return this;
}

void WTF::Vector<unsigned int,36ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_13:
    *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *a2;
    return;
  }
  v9 = *(const void **)a1;
  if (v8 < 0x25)
  {
    v10 = (void *)(a1 + 16);
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 36;
    goto LABEL_12;
  }
  if (!(v8 >> 30))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)(4 * v8));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v10;
LABEL_12:
    memcpy(v10, v9, 4 * v5);
    if ((const void *)(a1 + 16) != v9 && v9)
    {
      if (*(const void **)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_13;
  }
  __break(0xC471u);
}

uint64_t WTF::Vector<unsigned int,36ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 4 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      if (v10 < 0x25)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 36;
        goto LABEL_30;
      }
      if (!(v10 >> 30))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(4 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 4 * v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x198B72FF4);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0x25)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 36;
    }
    else
    {
      if (v15 >> 30)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(4 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 4 * v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

_DWORD *WTF::Vector<unsigned int,36ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<unsigned int,36ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

unint64_t JSC::objectConstructorSetPrototypeOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  const char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  JSC::VM *v19;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v19 = v9;
  v10 = *((int *)a2 + 8) - 1;
  if (*((_DWORD *)a2 + 8) == 1 || (v11 = *((_QWORD *)a2 + 6), v18 = v11, (v11 & 0xFFFFFFFFFFFFFFF7) == 2))
  {
    v15 = "Cannot set prototype of undefined or null";
    v16 = 42;
    return JSC::throwTypeError((unint64_t)this, &v19, (uint64_t)v15, v16);
  }
  if (v10 < 2
    || ((v12 = *((_QWORD *)a2 + 7), (v12 & 0xFFFE000000000002) != 0) || *(unsigned __int8 *)(v12 + 5) <= 0x16u)
    && v12 != 2)
  {
    v15 = "Prototype value can only be an object or null";
    v16 = 46;
    return JSC::throwTypeError((unint64_t)this, &v19, (uint64_t)v15, v16);
  }
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    v17 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v18, this, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_17;
  }
  v13 = (_DWORD *)v11;
  if (*(unsigned __int8 *)(v11 + 5) <= 0x16u)
  {
    v17 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v11, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_17:
    v13 = (_DWORD *)v17;
  }
  if (*((_DWORD *)v9 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  (*(void (**)(_DWORD *, JSC *, uint64_t, uint64_t))(16
                                                            * *(unsigned int *)(16 * (*v13 & 0xFFFFFFFE) + 0x4C)
                                                            + 0xA8))(v13, this, v12, 1);
  return v11;
}

JSC::JSGlobalObject *JSC::objectConstructorDefineProperties(JSC *this, JSC::JSGlobalObject *a2, uint64_t a3, JSC::JSObject *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::CallFrame *v12;
  uint64_t v13;
  JSC::VM *v14;

  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  v9 = *((int *)a2 + 8);
  if (v9 == 1)
    return (JSC::JSGlobalObject *)JSC::throwTypeError((unint64_t)this, &v14, (uint64_t)"Properties can only be defined on Objects.", 43);
  v10 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 6);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)v10 + 5) <= 0x16u)
    return (JSC::JSGlobalObject *)JSC::throwTypeError((unint64_t)this, &v14, (uint64_t)"Properties can only be defined on Objects.", 43);
  if ((unint64_t)(v9 - 1) <= 1)
  {
    v13 = 10;
  }
  else
  {
    a3 = *((_QWORD *)a2 + 7);
    v13 = a3;
    if ((a3 & 0xFFFE000000000002) == 0)
    {
      if (*(unsigned __int8 *)(a3 + 5) >= 0x17u)
        return JSC::defineProperties(this, v10, (JSC::JSObject *)a3, a4, a5, a6, a7, a8);
      v12 = (JSC::CallFrame *)JSC::JSCell::toObjectSlow((JSC::JSCell *)a3, (JSC::SymbolObject **)this, a3, a4, a5, a6, a7, a8);
      goto LABEL_12;
    }
  }
  v12 = (JSC::CallFrame *)JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v13, this, (JSC::Structure *)a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_12:
  a3 = (uint64_t)v12;
  if (v12)
    return JSC::defineProperties(this, v10, (JSC::JSObject *)a3, a4, a5, a6, a7, a8);
  return 0;
}

JSC::JSGlobalObject *JSC::objectConstructorSeal(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;

  if (*((_DWORD *)a2 + 8) == 1)
    return (JSC::JSGlobalObject *)10;
  v8 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 6);
  if (((unint64_t)v8 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v8 + 5) >= 0x17u)
    return JSC::objectConstructorSeal(this, v8, a3, a4, a5, a6, a7, a8);
  return v8;
}

uint64_t JSC::objectConstructorFreeze(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::JSObject *v9;
  unsigned int v10;
  JSC::VM *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  JSC::VM *v24;

  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  if (((unint64_t)v9 & 0xFFFE000000000002) == 0)
  {
    v10 = *((unsigned __int8 *)v9 + 5);
    if (v10 >= 0x17)
    {
      v12 = (JSC::VM *)*((_QWORD *)this + 7);
      v24 = v12;
      if (v9 && v10 == 24 && (*((_BYTE *)v9 + 4) & 0xE) == 0)
      {
        JSC::JSObject::freeze(v9, v12, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        goto LABEL_11;
      }
      v13 = JSC::setIntegrityLevel<(JSC::IntegrityLevel)1>((uint64_t)this, v12, v9);
      v21 = v13;
      if (*((_DWORD *)v12 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v12, v14, v15, v16, v17, v18, v19, v20);
        if (hasExceptionsAfterHandlingTraps)
          v9 = 0;
        if (((hasExceptionsAfterHandlingTraps | v21) & 1) != 0)
          goto LABEL_11;
      }
      else if ((v13 & 1) != 0)
      {
LABEL_11:
        if (*((_DWORD *)v12 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v12, v14, v15, v16, v17, v18, v19, v20))
          return 0;
        return (uint64_t)v9;
      }
      JSC::throwTypeError((unint64_t)this, &v24, (uint64_t)"Unable to prevent extension in Object.freeze", 45);
      v9 = 0;
      goto LABEL_11;
    }
  }
  return (uint64_t)v9;
}

uint64_t JSC::objectConstructorPreventExtensions(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v3;
  uint64_t v4;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  JSC::VM *v17;

  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v17 = v3;
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  v4 = *((_QWORD *)a2 + 6);
  if ((v4 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v4 + 5) >= 0x17u)
  {
    v6 = (*(uint64_t (**)(_QWORD, JSC *, JSC::CallFrame *))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v4 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x98))(*((_QWORD *)a2 + 6), this, a3);
    v14 = v6;
    if (!*((_DWORD *)v3 + 20))
    {
      if ((v6 & 1) != 0)
        return v4;
      return JSC::throwTypeError((unint64_t)this, &v17, (uint64_t)"Unable to prevent extension in Object.preventExtensions", 56);
    }
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3, v7, v8, v9, v10, v11, v12, v13);
    if (hasExceptionsAfterHandlingTraps)
      v4 = 0;
    if (((hasExceptionsAfterHandlingTraps | v14) & 1) == 0)
      return JSC::throwTypeError((unint64_t)this, &v17, (uint64_t)"Unable to prevent extension in Object.preventExtensions", 56);
  }
  return v4;
}

uint64_t JSC::objectConstructorIsSealed(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  JSC::VM *v10;
  int isSealed;

  if (*((_DWORD *)a2 + 8) == 1)
    return 7;
  v8 = *((_QWORD *)a2 + 6);
  if ((v8 & 0xFFFE000000000002) != 0)
    return 7;
  v9 = *(unsigned __int8 *)(v8 + 5);
  if (v9 < 0x17)
    return 7;
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v8 && v9 == 24 && (*(_BYTE *)(v8 + 4) & 0xE) == 0)
    isSealed = JSC::Structure::isSealed((JSC::Structure *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE)), v10, v8, a4, a5, a6, a7, a8);
  else
    isSealed = JSC::testIntegrityLevel<(JSC::IntegrityLevel)0>((uint64_t)this, v10, (_DWORD *)v8);
  if (isSealed)
    return 7;
  else
    return 6;
}

uint64_t JSC::objectConstructorIsFrozen(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  JSC::VM *v10;
  int isFrozen;

  if (*((_DWORD *)a2 + 8) == 1)
    return 7;
  v8 = *((_QWORD *)a2 + 6);
  if ((v8 & 0xFFFE000000000002) != 0)
    return 7;
  v9 = *(unsigned __int8 *)(v8 + 5);
  if (v9 < 0x17)
    return 7;
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v8 && v9 == 24 && (*(_BYTE *)(v8 + 4) & 0xE) == 0)
    isFrozen = JSC::Structure::isFrozen((JSC::Structure *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE)), v10, v8, a4, a5, a6, a7, a8);
  else
    isFrozen = JSC::testIntegrityLevel<(JSC::IntegrityLevel)1>((uint64_t)this, v10, (_DWORD *)v8);
  if (isFrozen)
    return 7;
  else
    return 6;
}

uint64_t JSC::objectConstructorIsExtensible(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if (*((_DWORD *)a2 + 8) == 1)
    return 6;
  v4 = *((_QWORD *)a2 + 6);
  if ((v4 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v4 + 5) < 0x17u)
    return 6;
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v13 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) + 0xA0))();
  if (*((_DWORD *)v5 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v5, v6, v7, v8, v9, v10, v11, v12))
    return 0;
  if (v13)
    return 7;
  return 6;
}

unint64_t JSC::objectConstructorAssign(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  int *v12;
  int *v13;
  BOOL v14;
  uint64_t v15;
  __n128 v16;
  unsigned __int8 *v17;
  uint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  unint64_t v21;
  JSC::VM *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::Structure *v37;
  int v38;
  int v40;
  int v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _OWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _QWORD *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t SlowCase;
  _OWORD *v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _OWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  __n128 *v99;
  __n128 *v100;
  __n128 *v101;
  __n128 v102;
  unint64_t v103;
  int v104;
  _OWORD *j;
  __int128 v106;
  unint64_t v107;
  uint64_t v108;
  __n128 *v109;
  __n128 *v110;
  __n128 *v111;
  __n128 v112;
  unint64_t v113;
  int v114;
  int v115;
  int v116;
  unint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  BOOL v128;
  BOOL v129;
  int v131;
  _QWORD *v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  _DWORD *v136;
  __n128 v137;
  uint64_t i;
  uint64_t v139;
  JSC::Structure *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  unint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  WTF::AtomStringImpl *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF *v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  WTF *v171;
  unint64_t v173;
  int v174;
  WTF::AtomStringImpl *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  WTF *v182;
  WTF *v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unsigned __int8 *v200;
  unsigned int *v201;
  JSC::VM *v202;
  JSC::JSGlobalObject *v203;
  unint64_t v205;
  char v206;
  uint64_t v207;
  const JSC::PropertyTable *v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  WTF *v226;
  uint64_t v227;
  _BYTE v228[256];
  unint64_t v229;
  JSC::VM *v230;
  unsigned __int8 *v231;
  WTF **v232;
  JSC **v233;
  uint64_t *v234;
  uint64_t v235;
  int *v236;
  JSC *v237;
  int v238;
  char v239;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v230 = v8;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v230, (uint64_t)"Object.assign requires that input parameter not be null or undefined", 69);
  v9 = *((_QWORD *)a2 + 6);
  v229 = v9;
  if ((v9 & 0xFFFFFFFFFFFFFFF7) == 2)
    return JSC::throwTypeError((unint64_t)this, &v230, (uint64_t)"Object.assign requires that input parameter not be null or undefined", 69);
  v203 = a2;
  if ((v9 & 0xFFFE000000000002) != 0)
  {
    v173 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v229, this, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_296;
  }
  if (*(unsigned __int8 *)(v9 + 5) <= 0x16u)
  {
    v173 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v9, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_296:
    v9 = v173;
    a2 = v203;
  }
  if (*((_DWORD *)v8 + 20))
  {
    v174 = *((_DWORD *)v8 + 20);
    if ((v174 & 0x27) != 0 && (v174 & 0x20) == 0)
    {
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v8 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      a2 = v203;
    }
    if (*((_QWORD *)v8 + 2))
      return 0;
  }
  if (*(_BYTE *)(v9 + 5) == 24)
    v10 = (int *)v9;
  else
    v10 = 0;
  v202 = v8;
  if (!v10 || (v11 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE), (*(_BYTE *)(v11 + 0x10) & 0x10) != 0))
  {
LABEL_20:
    v14 = 0;
    LODWORD(v15) = *((_DWORD *)a2 + 8) - 1;
    goto LABEL_21;
  }
  v12 = (int *)v9;
  while (1)
  {
    if ((*(_WORD *)(v11 + 12) & 0x800) != 0 || v12 != v10 && (*(_WORD *)(v11 + 12) & 0x400) != 0)
      goto LABEL_20;
    v13 = *(int **)(v11 + 48);
    if (!v13)
      v13 = (int *)*((_QWORD *)v12 + 2);
    if (v13 == (int *)2)
      break;
    v11 = 16 * (*v13 & 0xFFFFFFFE);
    v12 = v13;
    if ((*(_BYTE *)(v11 + 0x10) & 0x10) != 0)
      goto LABEL_20;
  }
  v14 = (*(_DWORD *)((16 * *v10) | 0x10) & 0x100000) == 0;
  v122 = *((_DWORD *)a2 + 8);
  v15 = (v122 - 1);
  if ((v122 & 0xFFFFFFFE) == 4 && (*(_DWORD *)((16 * *v10) | 0x10) & 0x100000) == 0)
  {
    if (v15 < 2)
    {
LABEL_254:
      v226 = (WTF *)v228;
      v227 = 32;
      v206 = 0;
      v207 = 0x2000000000;
      v208 = (const JSC::PropertyTable *)((char *)&v209 + 8);
      v137 = 0uLL;
      v224 = 0u;
      v209 = 0u;
      v210 = 0u;
      v211 = 0u;
      v212 = 0u;
      v213 = 0u;
      v214 = 0u;
      v215 = 0u;
      v216 = 0u;
      v217 = 0u;
      v218 = 0u;
      v219 = 0u;
      v220 = 0u;
      v221 = 0u;
      v222 = 0u;
      v223 = 0u;
      v225 = 0;
      if (v15 >= 2)
      {
        for (i = 1; i != v15; ++i)
        {
          v236 = *(int **)((char *)a2 + (((i << 32) + 0x600000000) >> 29));
          v139 = *v236 & 0xFFFFFFFE;
          v140 = (JSC::Structure *)(16 * v139);
          v232 = &v226;
          v233 = (JSC **)&v206;
          v234 = (uint64_t *)&v236;
          v141 = *(_QWORD *)(16 * v139 + 0x58);
          if (v141
            || (v151 = *(_QWORD *)(16 * v139 + 0x40)) != 0
            && (*(_BYTE *)(v151 + 5) == 1 || *(_DWORD *)(v151 + 80) >= 2u)
            && (JSC::Structure::materializePropertyTable(v140, v202, 1, a4, a5, a6, a7, a8), (v141 = v152) != 0))
          {
            v142 = *(_QWORD *)(v141 + 16);
            v143 = v142 & 0xFFFFFFFFFFFFFFFELL;
            v144 = *(unsigned int *)(v141 + 8);
            v145 = (*(_DWORD *)(v141 + 28) + *(_DWORD *)(v141 + 24));
            if ((v142 & 1) != 0)
            {
              if ((_DWORD)v145)
              {
                v148 = (unint64_t *)(v143 + v144);
                v149 = 8 * v145;
                do
                {
                  v150 = *v148;
                  if ((*v148 & 0xFFFFFFFFFFFFLL) != 1)
                  {
                    v237 = (JSC *)(*v148 & 0xFFFFFFFFFFFFLL);
                    v238 = HIBYTE(v150);
                    v239 = BYTE6(v150);
                    JSC::objectConstructorAssign(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(&v232, (uint64_t *)&v237, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  }
                  ++v148;
                  v149 -= 8;
                }
                while (v149);
              }
            }
            else if ((_DWORD)v145)
            {
              v146 = 16 * v145;
              v147 = (uint64_t *)(v143 + 4 * v144);
              do
              {
                if (*v147 != 1)
                  JSC::objectConstructorAssign(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(&v232, v147, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                v147 += 2;
                v146 -= 16;
              }
              while (v146);
            }
          }
          a2 = v203;
        }
        a5 = HIDWORD(v227);
        if (HIDWORD(v227))
          JSC::JSObject::putOwnDataPropertyBatching(v9, v202, v226, v208, HIDWORD(v227), a6, a7, a8, v137);
      }
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v207, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (HIDWORD(v227))
      {
        v160 = v226;
        v161 = 8 * HIDWORD(v227);
        do
        {
          v162 = *(WTF::StringImpl **)v160;
          *(_QWORD *)v160 = 0;
          if (v162)
          {
            if (*(_DWORD *)v162 == 2)
            {
              WTF::StringImpl::~StringImpl(v162, v153, v154, v155, v156, v157, v158, v159);
              WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
            }
            else
            {
              *(_DWORD *)v162 -= 2;
            }
          }
          v160 = (WTF *)((char *)v160 + 8);
          v161 -= 8;
        }
        while (v161);
      }
      v171 = v226;
      if (v228 != (_BYTE *)v226 && v226 != 0)
      {
        v226 = 0;
        LODWORD(v227) = 0;
        WTF::fastFree((unint64_t)v171, v153, v154, v155, v156, v157, v158, v159);
      }
      return v9;
    }
    v124 = v15 - 1;
    v125 = 0x700000000;
    v14 = 1;
    while (1)
    {
      v126 = *(_QWORD *)((char *)a2 + (v125 >> 29));
      if ((v126 & 0xFFFE000000000002) != 0
        || *(unsigned __int8 *)(v126 + 5) < 0x17u
        || (v127 = *(_DWORD *)(16 * (*(_DWORD *)v126 & 0xFFFFFFFE) + 0x10), (v127 & 0x400000) == 0))
      {
LABEL_293:
        v14 = 1;
        break;
      }
      if ((v127 & 0x20000000) != 0)
        break;
      v128 = (*(_DWORD *)(16 * (*(_DWORD *)v126 & 0xFFFFFFFE) + 0x10) & 3) != 2
          && (*(_DWORD *)(16 * (*(_DWORD *)v126 & 0xFFFFFFFE) + 0x10) & 8) == 0;
      v129 = v128 && (*(_WORD *)(16 * (*(_DWORD *)v126 & 0xFFFFFFFE) + 0xC) & 6) == 0;
      if (!v129 || (*(_BYTE *)(16 * (*(_DWORD *)v126 & 0xFFFFFFFE) + 0xA) & 8) != 0)
        break;
      if ((*(_BYTE *)(v126 + 4) & 0xE) != 0)
      {
        v131 = *(_BYTE *)(v126 + 4) & 0xF;
        if ((v131 - 10) >= 4)
        {
          if ((v131 - 4) < 6)
          {
            v136 = (_DWORD *)(*(_QWORD *)(v126 + 8) - 8);
            v8 = v202;
            a2 = v203;
LABEL_247:
            if (*v136)
              goto LABEL_293;
            goto LABEL_248;
          }
          v8 = v202;
          a2 = v203;
          if (v131 != 3)
          {
            __break(0xC471u);
LABEL_319:
            JUMPOUT(0x198B74294);
          }
        }
        else
        {
          v132 = *(_QWORD **)(v126 + 8);
          v133 = *((_DWORD *)v132 - 2);
          if (*((_DWORD *)v132 - 1) < v133)
            v133 = *((_DWORD *)v132 - 1);
          if (v133)
            goto LABEL_293;
          v134 = *v132;
          if (v134)
          {
            v135 = *(_QWORD *)(v134 + 8);
            if (v135)
            {
              v136 = (_DWORD *)(v135 - 12);
              goto LABEL_247;
            }
          }
        }
      }
LABEL_248:
      v125 += 0x100000000;
      if (!--v124)
        goto LABEL_254;
    }
  }
LABEL_21:
  v226 = (WTF *)v228;
  v227 = 8;
  v206 = 0;
  v207 = 0x800000000;
  v208 = (const JSC::PropertyTable *)((char *)&v209 + 8);
  v16.n128_u64[0] = 0;
  v209 = 0u;
  v210 = 0u;
  v211 = 0u;
  v212 = 0u;
  *(_QWORD *)&v213 = 0;
  if (v15 < 2)
    goto LABEL_302;
  v201 = (unsigned int *)(v10 + 4);
  v17 = (unsigned __int8 *)(v10 + 1);
  v18 = 1;
  v19 = v8;
  v20 = v15;
  v200 = (unsigned __int8 *)v9;
  while (1)
  {
    v21 = *(_QWORD *)((char *)a2 + (((v18 << 32) + 0x600000000) >> 29));
    v205 = v21;
    if ((v21 & 0xFFFFFFFFFFFFFFF7) == 2)
      goto LABEL_141;
    if ((v21 & 0xFFFE000000000002) != 0)
    {
      v93 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v205, this, a3, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_148;
    }
    if (*(unsigned __int8 *)(v21 + 5) <= 0x16u)
    {
      v93 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v21, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_148:
      v21 = v93;
    }
    if (*((_DWORD *)v19 + 20))
    {
      v104 = *((_DWORD *)v19 + 20);
      if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v19 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*((_QWORD *)v19 + 2))
        break;
    }
    if (v14)
    {
      if ((*(_BYTE *)((16 * *(unsigned int *)v21) | 0x12) & 0x40) == 0)
      {
        JSC::JSObject::reifyAllStaticProperties((JSC::JSObject *)v21, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v16.n128_f64[0]);
        v22 = v230;
        if (*((_DWORD *)v230 + 20))
        {
          v116 = *((_DWORD *)v230 + 20);
          if ((v116 & 0x27) != 0 && (v116 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v230 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          if (*((_QWORD *)v22 + 2))
            break;
        }
      }
      v231 = (unsigned __int8 *)v21;
      v23 = *((_QWORD *)this + 7);
      v24 = v21;
      if (HIDWORD(v227))
      {
        v25 = v226;
        v26 = 8 * HIDWORD(v227);
        do
        {
          v27 = *(WTF::StringImpl **)v25;
          *(_QWORD *)v25 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
            {
              WTF::StringImpl::~StringImpl(v27, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
            }
            else
            {
              *(_DWORD *)v27 -= 2;
            }
          }
          v25 = (WTF *)((char *)v25 + 8);
          v26 -= 8;
        }
        while (v26);
        v24 = (uint64_t)v231;
      }
      HIDWORD(v227) = 0;
      v206 = 0;
      LODWORD(v207) = 0;
      v36 = *(_DWORD *)v24 & 0xFFFFFFFE;
      v37 = (JSC::Structure *)(16 * v36);
      if ((*(_BYTE *)(v24 + 6) & 0x20) != 0 && (*(_BYTE *)(16 * v36 + 0x12) & 0x40) == 0)
        goto LABEL_153;
      if (*(_WORD *)(16 * v36 + 0xC) & 6 | *(_BYTE *)(16 * v36 + 0xA) & 8)
        goto LABEL_153;
      v38 = *(_DWORD *)(16 * v36 + 0x10);
      if ((v38 & 0x20000008) != 0 || (*(_DWORD *)(16 * v36 + 0x10) & 3) == 2)
        goto LABEL_153;
      v40 = *v10;
      if (*(_DWORD *)(16 * (*v10 & 0xFFFFFFFE) + 0x20)
        || *(_BYTE *)(16 * (v40 & 0xFFFFFFFE) + 9) != 24
        || (v41 = *(_DWORD *)(16 * (v40 & 0xFFFFFFFE) + 0x10), (v41 & 3) != 0)
        || v41 & 0x9980000 | *(_BYTE *)(16 * (v40 & 0xFFFFFFFE) + 8) & 0xE
        || ((v42 = *(_QWORD *)(16 * (v40 & 0xFFFFFFFE) + 0x30), (v41 & 0x40000070) == 0x20)
          ? (v43 = v42 == 0)
          : (v43 = 1),
            v43))
      {
LABEL_95:
        if ((*(_BYTE *)(v24 + 4) & 0xE) != 0)
        {
          v94 = *(_BYTE *)(v24 + 4) & 0xF;
          if ((v94 - 3) >= 7)
          {
            if ((v94 - 10) > 3)
            {
              __break(0xC471u);
              JUMPOUT(0x198B74604);
            }
            v95 = **(_QWORD **)(v24 + 8);
            if (v95)
            {
              if ((*(_BYTE *)(v95 + 16) & 4) != 0)
                goto LABEL_153;
            }
          }
        }
        v232 = &v226;
        v233 = (JSC **)&v206;
        v234 = (uint64_t *)&v231;
        JSC::Structure::forEachProperty<JSC::objectAssignFast(JSC::JSGlobalObject *,JSC::JSFinalObject *,JSC::JSObject *,WTF::Vector<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow> &)::{lambda(JSC::PropertyTableEntry const&)#1}>(v37, (JSC::VM *)v23, (uint64_t)&v232, a4, a5, a6, a7, a8);
        if ((v231[4] & 0xE) == 0)
        {
LABEL_105:
          a5 = HIDWORD(v227);
          if (HIDWORD(v227))
            JSC::JSObject::putOwnDataPropertyBatching((unint64_t)v10, (JSC::VM *)v23, v226, v208, HIDWORD(v227), a6, a7, a8, v16);
          v69 = 0;
          goto LABEL_108;
        }
        v63 = v231[4] & 0xF;
        if ((v63 - 10) >= 4)
        {
          if ((v63 - 4) >= 6)
          {
            if (v63 != 3)
            {
              __break(0xC471u);
              JUMPOUT(0x198B74644);
            }
            goto LABEL_105;
          }
          v68 = (_DWORD *)(*((_QWORD *)v231 + 1) - 8);
        }
        else
        {
          v64 = (_QWORD *)*((_QWORD *)v231 + 1);
          v65 = *((_DWORD *)v64 - 2);
          if (*((_DWORD *)v64 - 1) < v65)
            v65 = *((_DWORD *)v64 - 1);
          if (v65)
          {
LABEL_154:
            v236 = v10;
            v237 = this;
            v96 = *((_QWORD *)this + 7);
            v232 = (WTF **)&v236;
            v233 = &v237;
            v234 = &v235;
            v235 = v96;
            JSC::JSObject::forEachOwnIndexedProperty<(JSC::JSObject::SortMode)0,JSC::objectAssignIndexedPropertiesFast(JSC::JSGlobalObject *,JSC::JSObject*,JSC::JSObject*)::{lambda(unsigned int,JSC::JSValue)#1}>((uint64_t)v231, (uint64_t)this, (unint64_t **)&v232, (uint64_t)a4, v62, a6, a7, a8, (int32x4_t)v16);
            if (*(_DWORD *)(v235 + 80))
            {
              v118 = *(_DWORD *)(v235 + 80);
              if ((v118 & 0x27) != 0 && (v118 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v235 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            }
            if (*(_DWORD *)(v23 + 80))
            {
              v97 = *(_DWORD *)(v23 + 80);
              if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v23 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v23 + 16))
              {
LABEL_153:
                v69 = 1;
LABEL_108:
                a2 = v203;
                goto LABEL_136;
              }
            }
            goto LABEL_105;
          }
          v66 = *v64;
          if (!v66)
            goto LABEL_105;
          v67 = *(_QWORD *)(v66 + 8);
          if (!v67)
            goto LABEL_105;
          v68 = (_DWORD *)(v67 - 12);
        }
        if (!*v68)
          goto LABEL_105;
        goto LABEL_154;
      }
      v44 = *(_QWORD *)(16 * (v40 & 0xFFFFFFFE) + 0x60);
      if ((v44 & 1) != 0)
      {
        v45 = (v44 >> 1) & 3;
        if ((v41 & 0x200000) != 0)
          goto LABEL_95;
      }
      else
      {
        v45 = *(unsigned __int8 *)(v44 + 4);
        if ((v41 & 0x200000) != 0)
          goto LABEL_95;
      }
      if (v45 != 2)
        goto LABEL_95;
      if ((v38 & 0x3E000) != 0x1C000)
      {
        v46 = (unint64_t)v37;
        goto LABEL_78;
      }
      v46 = *((_QWORD *)v37 + 8);
      if (!v46)
        goto LABEL_95;
      if (*(_BYTE *)(v46 + 5) != 1)
      {
        v47 = *(_DWORD *)(v46 + 80) & 0xFFFFFFFE;
        if (!(_DWORD)v47)
          goto LABEL_95;
        v46 = 16 * v47;
      }
      if ((*(_DWORD *)(v46 + 16) & 0x3E000) != 0x10000)
        goto LABEL_78;
      if ((*(_BYTE *)(v24 + 4) & 0xE) == 0)
        goto LABEL_71;
      v48 = *(_BYTE *)(v24 + 4) & 0xF;
      if ((v48 - 10) >= 4)
      {
        if ((v48 - 4) < 6)
        {
          v53 = (_DWORD *)(*(_QWORD *)(v24 + 8) - 8);
LABEL_70:
          if (!*v53)
            goto LABEL_71;
LABEL_78:
          if (*(_BYTE *)(v46 + 9) == 24)
          {
            v55 = *(_DWORD *)(v46 + 16);
            if ((v55 & 3) == 0 && !(v55 & 0x9980000 | *(_BYTE *)(v46 + 8) & 0xE) && (v55 & 0x40200070) == 0x200020)
            {
              v56 = *(_QWORD *)(v46 + 48);
              if (v56)
              {
                v57 = *(unsigned __int8 *)(16 * (v40 & 0xFFFFFFFE) + 0xE);
                if ((_DWORD)v57 == *(unsigned __int8 *)(v46 + 14)
                  && v42 == v56
                  && *(_QWORD *)(16 * (v40 & 0xFFFFFFFE) + 0x28) == *(_QWORD *)(v46 + 40))
                {
                  v58 = *(unsigned __int16 *)(v46 + 24);
                  if (v58 == 65534)
                    goto LABEL_90;
                  if (v58 == 0xFFFF)
                    v58 = *(_DWORD *)(*(_QWORD *)(v46 + 64) + 84);
                  if (v58 < 64)
                  {
LABEL_90:
                    v59 = (_OWORD *)(v24 + 16);
                    if (v57 > 0x1E)
                    {
                      v98 = (8 * v57) & 0x7E0;
                      v99 = (__n128 *)(v10 + 4);
                      v100 = (__n128 *)&v201[2 * v57];
                      v101 = (__n128 *)((char *)v201 + v98);
                      while (v99 != v101)
                      {
                        v16 = *(__n128 *)v59;
                        v102 = *((__n128 *)v59 + 1);
                        v59 += 2;
                        *v99 = v16;
                        v99[1] = v102;
                        v99 += 2;
                      }
                      while (v99 != v100)
                      {
                        v103 = *(_QWORD *)v59;
                        v59 = (_OWORD *)((char *)v59 + 8);
                        v16.n128_u64[0] = v103;
                        v99->n128_u64[0] = v103;
                        v99 = (__n128 *)((char *)v99 + 8);
                      }
                    }
                    else if (*(_BYTE *)(16 * (v40 & 0xFFFFFFFE) + 0xE))
                    {
                      v60 = v10 + 4;
                      do
                      {
                        v61 = *(_QWORD *)v59;
                        v59 = (_OWORD *)((char *)v59 + 8);
                        *v60++ = v61;
                        --v57;
                      }
                      while (v57);
                    }
LABEL_126:
                    *v10 = v46 >> 4;
                    *((_BYTE *)v10 + 6) = *((_BYTE *)v10 + 6) & 0x80 | *(_BYTE *)(v46 + 10);
                    *((_BYTE *)v10 + 5) = *(_BYTE *)(v46 + 9);
                    a2 = v203;
                    if (*((unsigned __int8 *)v10 + 4) != *(unsigned __int8 *)(v46 + 8))
                    {
                      do
                      {
                        while (1)
                        {
                          v89 = *v17;
                          v90 = __ldxr(v17);
                          if (v90 == v89)
                            break;
                          __clrex();
                        }
                      }
                      while (__stxr(v89 & 0xC0 | *(_BYTE *)(v46 + 8), v17));
                    }
                    v91 = *((unsigned __int8 *)v10 + 7);
                    v92 = *(_DWORD *)(v23 + 760);
                    if (v92 >= v91)
                    {
                      JSC::Heap::writeBarrierSlowPath(v23 + 192, (unint64_t)v10);
                      a2 = v203;
                      v91 = *((unsigned __int8 *)v10 + 7);
                      v92 = *(_DWORD *)(v23 + 760);
                    }
                    if (v92 >= v91)
                    {
                      JSC::Heap::writeBarrierSlowPath(v23 + 192, (unint64_t)v10);
                      a2 = v203;
                    }
                    v69 = 0;
LABEL_136:
                    v19 = v230;
                    v8 = v202;
                    if (*((_DWORD *)v230 + 20))
                    {
                      v115 = *((_DWORD *)v230 + 20);
                      if ((v115 & 0x27) != 0 && (v115 & 0x20) == 0)
                      {
                        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v230 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                        a2 = v203;
                      }
                      if (*((_QWORD *)v19 + 2))
                        break;
                    }
                    if (!v69)
                    {
                      v14 = 1;
                      goto LABEL_141;
                    }
                    goto LABEL_138;
                  }
                  if ((v58 - 63) > 4)
                  {
                    v73 = (v58 - 64) | ((v58 - 64) >> 1) | (((v58 - 64) | ((v58 - 64) >> 1)) >> 2);
                    v74 = v73 | (v73 >> 4) | ((v73 | (v73 >> 4)) >> 8);
                    v75 = v74 | HIWORD(v74);
                    v72 = v75 + 1;
                    v71 = 8 * v72;
                    v70 = v23 + 6648;
                    if (v75 > 0x3EB)
                      goto LABEL_192;
                  }
                  else
                  {
                    v70 = v23 + 6648;
                    v71 = 32;
                    v72 = 4;
                  }
                  v76 = *(_QWORD *)(v23 + (((v71 + 15) >> 1) & 0x7FFFFFFF8) + 6736);
                  if (v76)
                  {
                    v77 = *(unsigned int *)(v76 + 60);
                    SlowCase = *(_QWORD *)(v76 + 24);
                    if (SlowCase >= *(_QWORD *)(v76 + 32))
                    {
                      SlowCase = *(_QWORD *)(v76 + 40);
                      if ((SlowCase & 1) != 0)
                      {
                        v197 = *(unsigned int *)(v76 + 60);
                        v196 = *(_QWORD *)(v23 + (((v71 + 15) >> 1) & 0x7FFFFFFF8) + 6736);
                        v199 = v72;
                        JSC::sanitizeStackForVM((JSC *)v23, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                        SlowCase = JSC::LocalAllocator::allocateSlowCase(v196, v23 + 192, v197, 0, 0, v119, v120, v121);
                        v72 = v199;
                        goto LABEL_115;
                      }
                      v117 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v76 + 48);
                      *(_QWORD *)(v76 + 32) = SlowCase + HIDWORD(v117);
                      *(_QWORD *)(v76 + 40) = SlowCase + (int)v117;
                    }
                    *(_QWORD *)(v76 + 24) = SlowCase + v77;
LABEL_115:
                    if ((v71 & 7) != 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198B74544);
                    }
                    v79 = (_OWORD *)(*(_QWORD *)(v24 + 8) - 8 * v72 - 8);
                    if (v71 > 0xF0)
                    {
                      for (j = (_OWORD *)SlowCase; j != (_OWORD *)((v71 & 0x7FFFFFFE0) + SlowCase); j += 2)
                      {
                        v16 = *(__n128 *)v79;
                        v106 = v79[1];
                        v79 += 2;
                        *j = v16;
                        j[1] = v106;
                      }
                      while (j != (_OWORD *)(v71 + SlowCase))
                      {
                        v107 = *(_QWORD *)v79;
                        v79 = (_OWORD *)((char *)v79 + 8);
                        v16.n128_u64[0] = v107;
                        *(_QWORD *)j = v107;
                        j = (_OWORD *)((char *)j + 8);
                      }
                    }
                    else
                    {
                      v80 = v71 >> 3;
                      v81 = (_QWORD *)SlowCase;
                      do
                      {
                        v82 = *(_QWORD *)v79;
                        v79 = (_OWORD *)((char *)v79 + 8);
                        *v81++ = v82;
                        --v80;
                      }
                      while (v80);
                    }
                    v83 = (_OWORD *)(v24 + 16);
                    v84 = *(unsigned __int8 *)(v46 + 14);
                    v9 = (unint64_t)v200;
                    if (v84 > 0x1E)
                    {
                      v108 = (8 * v84) & 0x7E0;
                      v109 = (__n128 *)(v10 + 4);
                      v110 = (__n128 *)&v201[2 * v84];
                      v111 = (__n128 *)((char *)v201 + v108);
                      while (v109 != v111)
                      {
                        v16 = *(__n128 *)v83;
                        v112 = *((__n128 *)v83 + 1);
                        v83 += 2;
                        *v109 = v16;
                        v109[1] = v112;
                        v109 += 2;
                      }
                      while (v109 != v110)
                      {
                        v113 = *(_QWORD *)v83;
                        v83 = (_OWORD *)((char *)v83 + 8);
                        v16.n128_u64[0] = v113;
                        v109->n128_u64[0] = v113;
                        v109 = (__n128 *)((char *)v109 + 8);
                      }
                    }
                    else if (*(_BYTE *)(v46 + 14))
                    {
                      v85 = v10 + 4;
                      do
                      {
                        v86 = *(_QWORD *)v83;
                        v83 = (_OWORD *)((char *)v83 + 8);
                        *v85++ = v86;
                        --v84;
                      }
                      while (v84);
                    }
                    v87 = SlowCase + 8 * v72 + 8;
                    v88 = v23 + 192;
                    if (*(_BYTE *)(v23 + 755))
                    {
                      *v10 = v40 | 1;
                      __dmb(0xAu);
                      *((_QWORD *)v10 + 1) = v87;
                      if (*(_DWORD *)(v23 + 760) >= *((unsigned __int8 *)v10 + 7))
                        JSC::Heap::writeBarrierSlowPath(v88, (unint64_t)v10);
                      __dmb(0xAu);
                    }
                    else
                    {
                      *((_QWORD *)v10 + 1) = v87;
                      if (*(_DWORD *)(v23 + 760) >= *((unsigned __int8 *)v10 + 7))
                        JSC::Heap::writeBarrierSlowPath(v88, (unint64_t)v10);
                    }
                    goto LABEL_126;
                  }
LABEL_192:
                  v198 = v72;
                  SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v70, (JSC *)v23, v71, 0, a5, a6, a7, a8);
                  v72 = v198;
                  if (!SlowCase)
                  {
                    __break(0xC471u);
                    goto LABEL_319;
                  }
                  goto LABEL_115;
                }
              }
            }
          }
          goto LABEL_95;
        }
        if (v48 != 3)
        {
          __break(0xC471u);
          JUMPOUT(0x198B74624);
        }
      }
      else
      {
        v49 = *(_QWORD **)(v24 + 8);
        v50 = *((_DWORD *)v49 - 2);
        if (*((_DWORD *)v49 - 1) < v50)
          v50 = *((_DWORD *)v49 - 1);
        if (v50)
          goto LABEL_78;
        v51 = *v49;
        if (v51)
        {
          v52 = *(_QWORD *)(v51 + 8);
          if (v52)
          {
            v53 = (_DWORD *)(v52 - 12);
            goto LABEL_70;
          }
        }
      }
LABEL_71:
      v46 = *(_QWORD *)(v46 + 64);
      if (!v46)
        goto LABEL_95;
      if (*(_BYTE *)(v46 + 5) != 1)
      {
        v54 = *(_DWORD *)(v46 + 80) & 0xFFFFFFFE;
        if (!(_DWORD)v54)
          goto LABEL_95;
        v46 = 16 * v54;
      }
      goto LABEL_78;
    }
    v19 = v230;
LABEL_138:
    JSC::objectAssignGeneric(this, v8, (JSC::VM *)v9, (JSC::JSObject *)v21, (JSC::JSObject *)a5);
    if (*((_DWORD *)v19 + 20))
    {
      v114 = *((_DWORD *)v19 + 20);
      a2 = v203;
      if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
      {
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v19 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        a2 = v203;
      }
      if (*((_QWORD *)v19 + 2))
        break;
      v14 = 0;
    }
    else
    {
      v14 = 0;
      a2 = v203;
    }
LABEL_141:
    if (++v18 == v20)
      goto LABEL_302;
  }
  v9 = 0;
LABEL_302:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v207, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (HIDWORD(v227))
  {
    v185 = v226;
    v186 = 8 * HIDWORD(v227);
    do
    {
      v187 = *(WTF::StringImpl **)v185;
      *(_QWORD *)v185 = 0;
      if (v187)
      {
        if (*(_DWORD *)v187 == 2)
        {
          WTF::StringImpl::~StringImpl(v187, v175, v176, v177, v178, v179, v180, v181);
          WTF::fastFree(v188, v189, v190, v191, v192, v193, v194, v195);
        }
        else
        {
          *(_DWORD *)v187 -= 2;
        }
      }
      v185 = (WTF *)((char *)v185 + 8);
      v186 -= 8;
    }
    while (v186);
  }
  v182 = v226;
  if (v228 != (_BYTE *)v226 && v226 != 0)
  {
    v226 = 0;
    LODWORD(v227) = 0;
    WTF::fastFree((unint64_t)v182, v175, v176, v177, v178, v179, v180, v181);
  }
  return v9;
}

unint64_t JSC::objectConstructorEntries(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  JSC::Structure *v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  int *v42;
  int v43;
  int v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  int *v48;
  int v49;
  unint64_t v50;
  unint64_t UninitializedRestricted;
  JSC::JSGlobalObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int32x4_t v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  WTF *v78;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t *v98;
  JSC::VM *v99;
  unint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  int v104;
  int v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  JSC::JSGlobalObject *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int32x4_t v128;
  int v129;
  WTF *v130;
  uint64_t v131;
  uint64_t v132;
  WTF *v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  JSC::VM *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  unint64_t v153;
  uint64_t v154;
  int *v155;
  int v156;
  int v157;
  unint64_t *v158;
  unint64_t SlowCase;
  unint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 *v169;
  unsigned int v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  WTF::StringImpl **v180;
  uint64_t v181;
  WTF::StringImpl *v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v193;
  unint64_t v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned __int8 *v202;
  unsigned int v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  BOOL v207;
  uint64_t v208;
  unsigned __int8 *v210;
  unsigned int v211;
  unint64_t v212;
  double v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t OutOfMemoryError;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t *v249;
  unint64_t *v250;
  unsigned int v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  unint64_t *v255;
  JSC::VM *v256[3];
  uint64_t (*v257)(unint64_t);
  uint64_t v258;
  unint64_t v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  WTF *v265;
  JSC::Structure *v266;
  uint64_t v267;
  __int16 v268;
  unsigned int *v269;
  unint64_t v270;
  JSC::VM *v271;
  uint64_t v272;
  int v273;
  char v274;

  v10 = *((_QWORD *)this + 7);
  v271 = (JSC::VM *)v10;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v271, (uint64_t)"Object.entries requires that input parameter not be null or undefined", 70);
  v11 = *((_QWORD *)a2 + 6);
  v270 = v11;
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
    return JSC::throwTypeError((unint64_t)this, &v271, (uint64_t)"Object.entries requires that input parameter not be null or undefined", 70);
  v269 = 0;
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    v212 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v270, this, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else
  {
    if (*(unsigned __int8 *)(v11 + 5) > 0x16u)
      goto LABEL_5;
    v212 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v11, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v11 = v212;
LABEL_5:
  v269 = (unsigned int *)v11;
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if ((*(_BYTE *)((16 * *(unsigned int *)v11) | 0x12) & 0x40) == 0)
  {
    JSC::JSObject::reifyAllStaticProperties((JSC::JSObject *)v11, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    if (*(_DWORD *)(v10 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        return 0;
      }
    }
  }
  v12 = (unint64_t *)(v10 + 41968);
  v255 = (unint64_t *)(v10 + 39696);
  v264 = 0;
  v265 = (WTF *)&v267;
  v266 = (JSC::Structure *)8;
  LOBYTE(v257) = 0;
  v258 = 0x800000000;
  v259 = (unint64_t)&v260 + 8;
  v13 = 0uLL;
  v260 = 0u;
  v261 = 0u;
  v262 = 0u;
  v263 = 0u;
  if ((*(_BYTE *)(v11 + 4) & 0xE) == 0)
    goto LABEL_8;
  v24 = *(_BYTE *)(v11 + 4) & 0xF;
  if ((v24 - 10) >= 4)
  {
    if ((v24 - 4) >= 6)
    {
      if (v24 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x198B754D0);
      }
      goto LABEL_8;
    }
    v29 = (_DWORD *)(*(_QWORD *)(v11 + 8) - 8);
  }
  else
  {
    v25 = *(_QWORD **)(v11 + 8);
    v26 = *((_DWORD *)v25 - 2);
    if (*((_DWORD *)v25 - 1) < v26)
      v26 = *((_DWORD *)v25 - 1);
    if (v26)
      goto LABEL_227;
    v27 = *v25;
    if (!v27)
      goto LABEL_8;
    v28 = *(_QWORD *)(v27 + 8);
    if (!v28)
      goto LABEL_8;
    v29 = (_DWORD *)(v28 - 12);
  }
  if (*v29)
  {
LABEL_227:
    v16 = 0;
    v15 = 0;
    goto LABEL_73;
  }
LABEL_8:
  v14 = *(_DWORD *)v11 & 0xFFFFFFFE;
  if ((*(_BYTE *)(v11 + 6) & 0x20) != 0 && (*(_BYTE *)(16 * v14 + 0x12) & 0x40) == 0
    || *(_WORD *)(16 * v14 + 0xC) & 6 | *(_BYTE *)(16 * v14 + 0xA) & 8)
  {
    goto LABEL_227;
  }
  v15 = 0;
  v16 = 0;
  if ((*(_DWORD *)(16 * v14 + 0x10) & 0x20000008) != 0 || (*(_DWORD *)(16 * v14 + 0x10) & 3) == 2)
    goto LABEL_73;
  v256[0] = (JSC::VM *)&v265;
  v256[1] = (JSC::VM *)&v257;
  v256[2] = (JSC::VM *)&v269;
  v17 = *(_QWORD *)(16 * v14 + 0x58);
  if (v17
    || (v131 = *(_QWORD *)(16 * v14 + 0x40)) != 0
    && (*(_BYTE *)(v131 + 5) == 1 || *(_DWORD *)(v131 + 80) >= 2u)
    && (JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * v14), (JSC::VM *)v10, 1, a4, a5, a6, a7, a8),
        (v17 = v132) != 0))
  {
    v18 = *(_QWORD *)(v17 + 16);
    v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
    v20 = *(unsigned int *)(v17 + 8);
    v21 = (*(_DWORD *)(v17 + 28) + *(_DWORD *)(v17 + 24));
    if ((v18 & 1) != 0)
    {
      if ((_DWORD)v21)
      {
        v30 = (unint64_t *)(v19 + v20);
        v31 = 8 * v21;
        do
        {
          v32 = *v30;
          if ((*v30 & 0xFFFFFFFFFFFFLL) != 1)
          {
            v272 = *v30 & 0xFFFFFFFFFFFFLL;
            v273 = HIBYTE(v32);
            v274 = BYTE6(v32);
            JSC::objectConstructorEntries(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()((uint64_t)v256, (uint64_t)&v272, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          }
          ++v30;
          v31 -= 8;
        }
        while (v31);
      }
    }
    else if ((_DWORD)v21)
    {
      v22 = 16 * v21;
      v23 = (_QWORD *)(v19 + 4 * v20);
      do
      {
        if (*v23 != 1)
          JSC::objectConstructorEntries(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()((uint64_t)v256, (uint64_t)v23, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v23 += 2;
        v22 -= 16;
      }
      while (v22);
    }
  }
  v33 = *((_DWORD *)this + 227);
  if (v33)
    v34 = 16 * (v33 & 0xFFFFFFFE);
  else
    v34 = 0;
  v15 = JSC::JSArray::tryCreate((JSC::JSArray *)v10, v34, (JSC::Structure *)HIDWORD(v266), (uint64_t)a4, a5, a6, a7, a8, v13);
  if (!v15)
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, a2);
    JSC::VM::throwException((JSC::VM *)v10, this, OutOfMemoryError, v221, v222, v223, v224, v225);
    v16 = 1;
    goto LABEL_73;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 256) + 4) == 2)
    goto LABEL_195;
  v35 = (JSC::Structure *)(16 * (*v269 & 0xFFFFFFFE));
  v36 = *((_QWORD *)v35 + 8);
  if (!v36 || *(_BYTE *)(v36 + 5) == 1 || (v37 = *(_QWORD *)(v36 + 24), v37 < 2))
  {
    v39 = HIDWORD(v266);
    goto LABEL_133;
  }
  v38 = *(_DWORD *)(v37 + 8);
  v39 = HIDWORD(v266);
  if (HIDWORD(v266) != v38)
  {
LABEL_133:
    if (v39 >> 5 <= 0xC34
      && (*(_BYTE *)(16 * (*v269 & 0xFFFFFFFE) + 0x10) & 3) == 0
      && (*(_BYTE *)(16 * (*v269 & 0xFFFFFFFE) + 8) & 0xE) == 0
      && (*(_WORD *)(16 * (*v269 & 0xFFFFFFFE) + 0xC) & 6) == 0)
    {
      if (!v36 || *(_BYTE *)(v36 + 5) == 1)
      {
        JSC::Structure::allocateRareData((JSC::Structure *)(16 * (*v269 & 0xFFFFFFFE)), (JSC::VM *)v10, a3, (uint64_t)a4, a5, a6, a7, a8);
        v36 = *((_QWORD *)v35 + 8);
      }
      else if (*(_QWORD *)(v36 + 24) == 1)
      {
        v144 = v39;
        v37 = JSC::JSImmutableButterfly::create((JSC::JSImmutableButterfly *)v10, (JSC::VM *)0x19, v39, (uint64_t)a4, a5, a6, a7, a8);
        if ((_DWORD)v144)
        {
          v153 = 0;
          v154 = 16;
          *(_QWORD *)&v152 = 17302016;
          while (1)
          {
            if (v153 >= HIDWORD(v266))
            {
              __break(0xC471u);
              JUMPOUT(0x198B755C8);
            }
            v155 = (int *)*((_QWORD *)v265 + v153);
            if (!v155)
              goto LABEL_246;
            v156 = *v155;
            v157 = v155[1];
            *v155 += 2;
            if (v157 != 1)
              break;
            v169 = (unsigned __int8 *)*((_QWORD *)v155 + 1);
            if ((v155[4] & 4) != 0)
            {
              v170 = *v169;
            }
            else
            {
              v170 = *(unsigned __int16 *)v169;
              if (v170 > 0xFF)
              {
LABEL_146:
                *v155 = v156 + 4;
                v158 = (unint64_t *)(v10 + 39696);
                SlowCase = *v255;
                if (*(_QWORD *)(v10 + 39696) < *(_QWORD *)(v10 + 39704))
                {
                  v160 = SlowCase + 16;
                  goto LABEL_148;
                }
                SlowCase = *(_QWORD *)(v10 + 39712);
                if ((SlowCase & 1) != 0)
                {
                  v254 = v152;
                  JSC::sanitizeStackForVM((JSC *)v10, v145, v146, v147, v148, v149, v150, v151);
                  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v242, v243, v244);
                  v152 = v254;
                  v158 = (unint64_t *)(v10 + 39696);
                }
                else
                {
                  v228 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 39720);
                  v229 = SlowCase + HIDWORD(v228);
                  *(_QWORD *)(v10 + 39712) = SlowCase + (int)v228;
                  v160 = SlowCase + 16;
                  *(_QWORD *)(v10 + 39704) = v229;
                  v158 = (unint64_t *)(v10 + 39696);
LABEL_148:
                  *v158 = v160;
                }
                *(_DWORD *)SlowCase = v158[227] >> 4;
                *(_DWORD *)(SlowCase + 4) = v152;
                *(_QWORD *)(SlowCase + 8) = v155;
                if (*(_BYTE *)(v10 + 755))
                  __dmb(0xAu);
                goto LABEL_151;
              }
            }
            SlowCase = *(_QWORD *)(v10 + 8 * v170 + 42216);
LABEL_151:
            if ((*(_BYTE *)(v37 + 4) & 0xE) == 6)
            {
              v213 = (double)(int)SlowCase;
              if (SlowCase <= 0xFFFDFFFFFFFFFFFFLL)
                *(_QWORD *)&v213 = SlowCase - 0x2000000000000;
              *(double *)(v37 + v154) = v213;
            }
            else
            {
              *(_QWORD *)(v37 + v154) = SlowCase;
              if (SlowCase
                && (SlowCase & 0xFFFE000000000002) == 0
                && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v37 + 7))
              {
                v253 = v152;
                JSC::Heap::writeBarrierSlowPath(v10 + 192, v37);
                v152 = v253;
              }
            }
            if (v155)
            {
              if (*v155 == 2)
              {
                v252 = v152;
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v155, v145, v146, v147, v148, v149, v150, v151);
                WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
                v152 = v252;
              }
              else
              {
                *v155 -= 2;
              }
            }
            ++v153;
            v154 += 8;
            if (v144 == v153)
              goto LABEL_184;
          }
          if (v157)
            goto LABEL_146;
LABEL_246:
          SlowCase = *(_QWORD *)(v10 + 41968);
          goto LABEL_151;
        }
LABEL_184:
        JSC::Structure::setCachedPropertyNames(v35, (JSC::VM *)v10, (JSC::Structure *)v37, v147, v148, v149, v150, v151);
        v12 = (unint64_t *)(v10 + 41968);
LABEL_165:
        v38 = HIDWORD(v266);
        goto LABEL_43;
      }
      v37 = 0;
      *(_QWORD *)(v36 + 24) = 1;
      goto LABEL_165;
    }
LABEL_195:
    v37 = 0;
    goto LABEL_165;
  }
LABEL_43:
  if (!v38)
    goto LABEL_72;
  v40 = 0;
  v41 = v37 + 16;
  while (1)
  {
    if (v37)
    {
      if ((*(_BYTE *)(v37 + 4) & 0xE) == 6)
        v46 = *(_QWORD *)(v41 + 8 * v40) + 0x2000000000000;
      else
        v46 = *(_QWORD *)(v41 + 8 * v40);
      v48 = *(int **)(v46 + 8);
      if ((v48 & 1) != 0)
        v48 = 0;
      v42 = (int *)*((_QWORD *)v265 + v40);
      if (v48 == v42)
        goto LABEL_62;
    }
    else
    {
      v42 = (int *)*((_QWORD *)v265 + v40);
    }
    if (v42)
    {
      v43 = *v42;
      v44 = v42[1];
      *v42 += 2;
      if (v44 == 1)
      {
        v202 = (unsigned __int8 *)*((_QWORD *)v42 + 1);
        if ((v42[4] & 4) != 0)
        {
          v203 = *v202;
        }
        else
        {
          v203 = *(unsigned __int16 *)v202;
          if (v203 > 0xFF)
          {
LABEL_50:
            *v42 = v43 + 4;
            v45 = (unint64_t *)(v10 + 39696);
            v46 = *v255;
            if (*(_QWORD *)(v10 + 39696) >= *(_QWORD *)(v10 + 39704))
            {
              v46 = *(_QWORD *)(v10 + 39712);
              if ((v46 & 1) != 0)
              {
                JSC::sanitizeStackForVM((JSC *)v10, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                v241 = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v238, v239, v240);
                v45 = (unint64_t *)(v10 + 39696);
                v46 = v241;
LABEL_53:
                *(_DWORD *)v46 = v45[227] >> 4;
                *(_DWORD *)(v46 + 4) = 17302016;
                *(_QWORD *)(v46 + 8) = v42;
                if (*(_BYTE *)(v10 + 755))
                  __dmb(0xAu);
                goto LABEL_55;
              }
              v226 = *(_QWORD *)(v46 + 8) ^ *(_QWORD *)(v10 + 39720);
              v227 = v46 + HIDWORD(v226);
              *(_QWORD *)(v10 + 39712) = v46 + (int)v226;
              v47 = v46 + 16;
              *(_QWORD *)(v10 + 39704) = v227;
              v45 = (unint64_t *)(v10 + 39696);
            }
            else
            {
              v47 = v46 + 16;
            }
            *v45 = v47;
            goto LABEL_53;
          }
        }
        v46 = *(_QWORD *)(v10 + 8 * v203 + 42216);
      }
      else
      {
        if (v44)
          goto LABEL_50;
        v46 = *v12;
      }
LABEL_55:
      if (*v42 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v42, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
      }
      else
      {
        *v42 -= 2;
      }
      goto LABEL_62;
    }
    v46 = *v12;
LABEL_62:
    v256[0] = (JSC::VM *)v10;
    v49 = *((_DWORD *)this + 227);
    v50 = v49 ? 16 * (v49 & 0xFFFFFFFE) : 0;
    UninitializedRestricted = JSC::JSArray::tryCreateUninitializedRestricted((uint64_t *)v256, 0, v50, 2, a5, a6, a7, a8);
    if (!UninitializedRestricted)
      break;
    v58 = UninitializedRestricted;
    JSC::JSObject::initializeIndex(UninitializedRestricted, v256, 0, v46, v53, v54, v55, v56, v57);
    if (v258 <= v40)
      v64 = 10;
    else
      v64 = *(_QWORD *)(v259 + 8 * v40);
    JSC::JSObject::initializeIndex(v58, v256, 1, v64, v59, v60, v61, v62, v63);
    if (*((_BYTE *)v256[0] + 755))
      __dmb(0xAu);
    JSC::JSObject::putDirectIndex(v15, (unint64_t)this, (JSC::VM *)v40, v58, v65, v66, v67, v68, v69);
    if (*(_DWORD *)(v10 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      goto LABEL_223;
    }
    if (++v40 >= HIDWORD(v266))
      goto LABEL_72;
  }
  if (*((_BYTE *)v256[0] + 755))
    __dmb(0xAu);
  v214 = JSC::createOutOfMemoryError((unint64_t)this, v52);
  JSC::VM::throwException((JSC::VM *)v10, this, v214, v215, v216, v217, v218, v219);
LABEL_223:
  v15 = 0;
LABEL_72:
  v16 = 1;
LABEL_73:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v258, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (HIDWORD(v266))
  {
    v133 = v265;
    v134 = 8 * HIDWORD(v266);
    do
    {
      v135 = *(WTF::StringImpl **)v133;
      *(_QWORD *)v133 = 0;
      if (v135)
      {
        if (*(_DWORD *)v135 == 2)
        {
          WTF::StringImpl::~StringImpl(v135, v70, v71, v72, v73, v74, v75, v76);
          WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
        }
        else
        {
          *(_DWORD *)v135 -= 2;
        }
      }
      v133 = (WTF *)((char *)v133 + 8);
      v134 -= 8;
    }
    while (v134);
  }
  v78 = v265;
  if (&v267 != (uint64_t *)v265 && v265 != 0)
  {
    v265 = 0;
    LODWORD(v266) = 0;
    WTF::fastFree((unint64_t)v78, v70, v71, v72, v73, v74, v75, v76);
  }
  if ((v16 & 1) == 0)
  {
    v15 = JSC::constructEmptyArray((unint64_t)this, 0, 0, 0, v73, v74, v75, v76, v77);
    if (*(_DWORD *)(v10 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v81, v82, v83, v84, v85, v86, v87))
    {
      return 0;
    }
    v250 = v12;
    v88 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
    *(_DWORD *)v88 = 1;
    *((_QWORD *)v88 + 1) = (char *)v88 + 24;
    *((_QWORD *)v88 + 2) = 20;
    v265 = v88;
    v266 = 0;
    v267 = v10;
    v268 = 258;
    (*(void (**)(void))(16 * *(unsigned int *)(16 * (*v269 & 0xFFFFFFFE) + 0x4C) + 0x78))();
    if (*(_DWORD *)(v10 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)v89, v90, v91, v92, v93, v94, v95))
    {
LABEL_242:
      v15 = 0;
      goto LABEL_115;
    }
    v96 = *((unsigned int *)v265 + 5);
    if (!(_DWORD)v96)
    {
LABEL_115:
      if (v266)
        WTF::fastFree((unint64_t)v266 - 16, v89, v90, v91, v92, v93, v94, v95);
      v130 = v265;
      v265 = 0;
      if (v130)
      {
        if (*(_DWORD *)v130 == 1)
        {
          v179 = *((unsigned int *)v130 + 5);
          if ((_DWORD)v179)
          {
            v180 = (WTF::StringImpl **)*((_QWORD *)v130 + 1);
            v181 = 8 * v179;
            do
            {
              v182 = *v180;
              *v180 = 0;
              if (v182)
              {
                if (*(_DWORD *)v182 == 2)
                {
                  WTF::StringImpl::~StringImpl(v182, (WTF::AtomStringImpl *)v89, v90, v91, v92, v93, v94, v95);
                  WTF::fastFree(v183, v184, v185, v186, v187, v188, v189, v190);
                }
                else
                {
                  *(_DWORD *)v182 -= 2;
                }
              }
              ++v180;
              v181 -= 8;
            }
            while (v181);
          }
          v191 = *((_QWORD *)v130 + 1);
          if ((WTF *)((char *)v130 + 24) != (WTF *)v191 && v191 != 0)
          {
            *((_QWORD *)v130 + 1) = 0;
            *((_DWORD *)v130 + 4) = 0;
            WTF::fastFree(v191, v89, v90, v91, v92, v93, v94, v95);
          }
          WTF::fastFree((unint64_t)v130, v89, v90, v91, v92, v93, v94, v95);
        }
        else
        {
          --*(_DWORD *)v130;
        }
      }
      return v15;
    }
    v251 = 0;
    v97 = (unint64_t *)*((_QWORD *)v265 + 1);
    v98 = &v97[v96];
    v99 = v271;
    while (1)
    {
      v100 = *v97;
      v259 = 0xFFFFFFFF00000000;
      v260 = (unint64_t)v269;
      *(_QWORD *)&v261 = 0;
      DWORD2(v261) = 0x20000;
      BYTE12(v261) = 0;
      LOBYTE(v262) = 0;
      BYTE8(v262) = 0;
      v263 = 0uLL;
      v101 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*v269 & 0xFFFFFFFE) + 0x4C) + 0x68))();
      v102 = v101;
      if (*((_DWORD *)v99 + 20))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v99, (uint64_t)v89, v90, v91, v92, v93, v94, v95)
          || ((v102 ^ 1) & 1) != 0)
        {
          goto LABEL_110;
        }
      }
      else if (!v101)
      {
        goto LABEL_110;
      }
      if ((v259 & 4) != 0)
        goto LABEL_110;
      if (BYTE12(v261))
        break;
      if (BYTE9(v261) != 1)
      {
        if (BYTE9(v261) == 2)
        {
          v193 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v257, this, v90, v91, v92, v93, v94, v95);
        }
        else
        {
          if ((v259 & 0x20) != 0)
            v204 = v260;
          else
            v204 = *((_QWORD *)&v260 + 1);
          v205 = *(_QWORD *)(16 * (**((_DWORD **)&v260 + 1) & 0xFFFFFFFE) + 0x28);
          if (BYTE11(v261) != 1)
            goto LABEL_208;
          if ((v204 & 0xFFFE000000000002) != 0)
            goto LABEL_271;
          v206 = *(unsigned int *)(16 * (*(_DWORD *)v204 & 0xFFFFFFFE) + 0x4C);
          v207 = *(_DWORD *)(16 * (*(_DWORD *)v204 & 0xFFFFFFFE) + 0x4C) != 0;
          if ((_DWORD)v206)
          {
            v208 = 16 * v206;
            if ((_QWORD)v263 != v208)
            {
              do
              {
                v208 = *(_QWORD *)(v208 + 16);
                v207 = v208 != 0;
              }
              while (v208 != (_QWORD)v263 && v208 != 0);
            }
          }
          if (!v207)
          {
LABEL_271:
            v256[0] = *((JSC::VM **)this + 7);
            v193 = JSC::throwDOMAttributeGetterTypeError(v205, v256, (int8x16_t **)v263, (WTF::StringImpl *)v100);
          }
          else
          {
LABEL_208:
            v193 = v257(v205);
          }
        }
        goto LABEL_187;
      }
      v103 = (unint64_t)v257;
LABEL_91:
      if (*((_DWORD *)v99 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v99, (uint64_t)v89, v90, v91, v92, v93, v94, v95))
      {
        goto LABEL_110;
      }
      v249 = v98;
      if (!v100)
      {
        v107 = *v250;
        goto LABEL_102;
      }
      v104 = *(_DWORD *)v100;
      v105 = *(_DWORD *)(v100 + 4);
      *(_DWORD *)v100 += 2;
      if (v105 == 1)
      {
        v210 = *(unsigned __int8 **)(v100 + 8);
        if ((*(_BYTE *)(v100 + 16) & 4) != 0)
        {
          v211 = *v210;
        }
        else
        {
          v211 = *(unsigned __int16 *)v210;
          if (v211 > 0xFF)
          {
LABEL_95:
            *(_DWORD *)v100 = v104 + 4;
            v106 = (unint64_t *)(v10 + 39696);
            v107 = *v255;
            if (*(_QWORD *)(v10 + 39696) < *(_QWORD *)(v10 + 39704))
            {
              v108 = v107 + 16;
              goto LABEL_97;
            }
            v107 = *(_QWORD *)(v10 + 39712);
            if ((v107 & 1) != 0)
            {
              JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)v89, v90, v91, v92, v93, v94, v95);
              v248 = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v245, v246, v247);
              v106 = (unint64_t *)(v10 + 39696);
              v107 = v248;
            }
            else
            {
              v236 = *(_QWORD *)(v107 + 8) ^ *(_QWORD *)(v10 + 39720);
              v237 = v107 + HIDWORD(v236);
              *(_QWORD *)(v10 + 39712) = v107 + (int)v236;
              v108 = v107 + 16;
              *(_QWORD *)(v10 + 39704) = v237;
              v106 = (unint64_t *)(v10 + 39696);
LABEL_97:
              *v106 = v108;
            }
            *(_DWORD *)v107 = v106[227] >> 4;
            *(_DWORD *)(v107 + 4) = 17302016;
            *(_QWORD *)(v107 + 8) = v100;
            if (*(_BYTE *)(v10 + 755))
              __dmb(0xAu);
            goto LABEL_100;
          }
        }
        v107 = *(_QWORD *)(v10 + 8 * v211 + 42216);
      }
      else
      {
        if (v105)
          goto LABEL_95;
        v107 = *v250;
      }
LABEL_100:
      if (*(_DWORD *)v100 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v100, (WTF::AtomStringImpl *)v89, v90, v91, v92, v93, v94, v95);
        WTF::fastFree(v194, v195, v196, v197, v198, v199, v200, v201);
      }
      else
      {
        *(_DWORD *)v100 -= 2;
      }
LABEL_102:
      v256[0] = (JSC::VM *)v10;
      v109 = *((_DWORD *)this + 227);
      if (v109)
        v110 = 16 * (v109 & 0xFFFFFFFE);
      else
        v110 = 0;
      v111 = JSC::JSArray::tryCreateUninitializedRestricted((uint64_t *)v256, 0, v110, 2, v92, v93, v94, v95);
      if (v111)
      {
        v118 = v111;
        JSC::JSObject::initializeIndex(v111, v256, 0, v107, v113, v114, v115, v116, v117);
        JSC::JSObject::initializeIndex(v118, v256, 1, v103, v119, v120, v121, v122, v123);
        if (*((_BYTE *)v256[0] + 755))
          __dmb(0xAu);
        JSC::JSObject::putDirectIndex(v15, (unint64_t)this, (JSC::VM *)v251++, v118, v124, v125, v126, v127, v128);
      }
      else
      {
        if (*((_BYTE *)v256[0] + 755))
          __dmb(0xAu);
        v230 = JSC::createOutOfMemoryError((unint64_t)this, v112);
        JSC::VM::throwException(v99, this, v230, v231, v232, v233, v234, v235);
      }
      v98 = v249;
LABEL_110:
      if (BYTE8(v262))
      {
        v129 = *(_DWORD *)(v262 + 4);
        if (!v129)
        {
          __break(0xC471u);
          JUMPOUT(0x198B75364);
        }
        *(_DWORD *)(v262 + 4) = v129 - 1;
      }
      if (*((_DWORD *)v99 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v99, (uint64_t)v89, v90, v91, v92, v93, v94, v95))
      {
        goto LABEL_242;
      }
      if (++v97 == v98)
        goto LABEL_115;
    }
    v193 = JSC::JSObject::get(v269, (uint64_t)this, v100, v91, v92, v93, v94, v95);
LABEL_187:
    v103 = v193;
    goto LABEL_91;
  }
  return v15;
}

JSC::JSGlobalObject *JSC::defineProperties(JSC *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, JSC::JSObject *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  uint64_t v10;
  JSC::Structure *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  int v29;
  int v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t i;
  uint64_t v55;
  double v56;
  _OWORD *v57;
  __int128 v58;
  uint64_t v59;
  unsigned int v60;
  _OWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  _OWORD *v65;
  unsigned int v66;
  _OWORD *v67;
  _QWORD *v68;
  WTF::StringImpl **v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  _QWORD *v81;
  _QWORD *v82;
  WTF *v83;
  char v84;
  __int128 v85;
  __int128 v86;
  unint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  _OWORD v90[4];
  uint64_t v91;
  WTF *v92;
  uint64_t v93;
  _QWORD v94[64];
  char v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE v98[64];
  uint64_t v99;
  WTF::StringImpl **v100;
  uint64_t v101;
  _BYTE v102[64];
  unsigned int *v103;
  _BYTE v104[24];
  uint64_t v105[2];

  v8 = a2;
  v103 = (unsigned int *)a3;
  v10 = *((_QWORD *)this + 7);
  v100 = (WTF::StringImpl **)v102;
  v101 = 8;
  v95 = 0;
  v96 = 0x800000000;
  memset(v98, 0, sizeof(v98));
  v97 = &v98[8];
  v99 = 0;
  if ((*((_BYTE *)a3 + 4) & 0xE) != 0
    || (v11 = (JSC::Structure *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE)), (*((_BYTE *)a3 + 6) & 0x20) != 0)
    && (*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x12) & 0x40) == 0
    || *(_WORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xC) & 6 | *(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 8
    || ((*(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x10) & 0x20000008) == 0
      ? (v12 = (*(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x10) & 3) == 2)
      : (v12 = 1),
        v12))
  {
    v8 = JSC::definePropertiesSlow(this, a2, a3, a4);
    goto LABEL_56;
  }
  v92 = (WTF *)&v100;
  v93 = (uint64_t)&v95;
  v94[0] = &v103;
  v13 = *((_QWORD *)v11 + 11);
  if (v13
    || (v51 = *((_QWORD *)v11 + 8)) != 0
    && (*(_BYTE *)(v51 + 5) == 1 || *(_DWORD *)(v51 + 80) >= 2u)
    && (JSC::Structure::materializePropertyTable(v11, (JSC::VM *)v10, 1, a4, a5, a6, a7, a8), (v13 = v52) != 0))
  {
    v14 = *(_QWORD *)(v13 + 16);
    v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
    v16 = *(unsigned int *)(v13 + 8);
    v17 = (*(_DWORD *)(v13 + 28) + *(_DWORD *)(v13 + 24));
    if ((v14 & 1) != 0)
    {
      if ((_DWORD)v17)
      {
        v20 = (unint64_t *)(v15 + v16);
        v21 = 8 * v17;
        do
        {
          v22 = *v20;
          if ((*v20 & 0xFFFFFFFFFFFFLL) != 1)
          {
            v87 = *v20 & 0xFFFFFFFFFFFFLL;
            LODWORD(v88) = HIBYTE(v22);
            BYTE4(v88) = BYTE6(v22);
            JSC::defineProperties(JSC::JSGlobalObject *,JSC::JSObject *,JSC::JSObject *)::$_0::operator()((uint64_t)&v92, (uint64_t *)&v87, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          }
          ++v20;
          v21 -= 8;
        }
        while (v21);
      }
    }
    else if ((_DWORD)v17)
    {
      v18 = 16 * v17;
      v19 = (uint64_t *)(v15 + 4 * v16);
      do
      {
        if (*v19 != 1)
          JSC::defineProperties(JSC::JSGlobalObject *,JSC::JSObject *,JSC::JSObject *)::$_0::operator()((uint64_t)&v92, v19, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v19 += 2;
        v18 -= 16;
      }
      while (v18);
    }
  }
  v23 = HIDWORD(v101);
  v91 = 0;
  v92 = (WTF *)v94;
  v93 = 16;
  LOBYTE(v87) = 0;
  v88 = 0x800000000;
  v89 = (_OWORD *)((char *)v90 + 8);
  v24 = 0.0;
  memset(v90, 0, sizeof(v90));
  if (HIDWORD(v101) >= 0x11)
  {
    if (HIDWORD(v101) >> 27)
    {
      __break(0xC471u);
      goto LABEL_157;
    }
    v83 = (WTF *)WTF::fastMalloc((WTF *)(32 * HIDWORD(v101)));
    LODWORD(v93) = v23;
    v92 = v83;
    goto LABEL_23;
  }
  if (HIDWORD(v101))
  {
LABEL_23:
    v25 = 0;
    while (1)
    {
      if (v25 >= v96)
        v26 = 10;
      else
        v26 = *(_QWORD *)&v97[8 * v25];
      v104[0] = 0;
      v85 = 0uLL;
      *(_QWORD *)&v86 = 0;
      *((_QWORD *)&v86 + 1) = 14;
      JSC::toPropertyDescriptor(this, v26, (uint64_t)&v85, (const JSC::PropertyTable *)v104, a5, a6, a7, a8, v24);
      if (*(_QWORD *)(v10 + 16))
        goto LABEL_140;
      if (HIDWORD(v93) == (_DWORD)v93)
      {
        *(_QWORD *)&v24 = WTF::Vector<JSC::PropertyDescriptor,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::PropertyDescriptor&>((uint64_t)&v92, (unint64_t)&v85).n128_u64[0];
      }
      else
      {
        v27 = (_OWORD *)((char *)v92 + 32 * HIDWORD(v93));
        v24 = *(double *)&v85;
        v28 = v86;
        *v27 = v85;
        v27[1] = v28;
        ++HIDWORD(v93);
      }
      if ((_QWORD)v85)
      {
        v29 = v88;
        if ((_DWORD)v88 == HIDWORD(v88) || v89 != (_OWORD *)((char *)v90 + 8) && v89)
        {
          if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v88, v85, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8) == 1)LOBYTE(v87) = 1;
        }
        else
        {
          *((_QWORD *)v89 + v88) = v85;
          LODWORD(v88) = v29 + 1;
        }
      }
      if (*((_QWORD *)&v85 + 1))
      {
        v30 = v88;
        if ((_DWORD)v88 == HIDWORD(v88) || v89 != (_OWORD *)((char *)v90 + 8) && v89)
        {
          if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v88, *((uint64_t *)&v85 + 1), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8) == 1)LOBYTE(v87) = 1;
        }
        else
        {
          *((_QWORD *)v89 + v88) = *((_QWORD *)&v85 + 1);
          LODWORD(v88) = v30 + 1;
        }
      }
      a2 = (JSC::JSGlobalObject *)v86;
      if ((_QWORD)v86)
      {
        v80 = v88;
        if ((_DWORD)v88 == HIDWORD(v88) || v89 != (_OWORD *)((char *)v90 + 8) && v89)
        {
          if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v88, v86, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8) == 1)LOBYTE(v87) = 1;
        }
        else
        {
          *((_QWORD *)v89 + v88) = v86;
          LODWORD(v88) = v80 + 1;
        }
      }
      if (!v104[0])
        break;
      if (v23 == ++v25)
      {
        if (!(_BYTE)v87)
          goto LABEL_46;
LABEL_148:
        __break(0xC471u);
LABEL_157:
        JUMPOUT(0x198B75E00);
      }
    }
    v84 = 0;
    v53 = v25 + 1;
    goto LABEL_68;
  }
  v53 = 0;
  v84 = 1;
LABEL_68:
  if (v53 < v23)
  {
    for (i = v53; v23 != i; ++i)
    {
      if (i >= HIDWORD(v101))
      {
        __break(0xC471u);
        JUMPOUT(0x198B75E48);
      }
      v55 = JSC::JSObject::get(v103, (uint64_t)this, (unint64_t)v100[i], (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16)
        || (v85 = 0uLL,
            *(_QWORD *)&v86 = 0,
            *((_QWORD *)&v86 + 1) = 14,
            v104[0] = 0,
            JSC::toPropertyDescriptor(this, v55, (uint64_t)&v85, (const JSC::PropertyTable *)v104, a5, a6, a7, a8, v56),
            *(_QWORD *)(v10 + 16)))
      {
        v8 = 0;
        goto LABEL_51;
      }
      if (HIDWORD(v93) == (_DWORD)v93)
      {
        WTF::Vector<JSC::PropertyDescriptor,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::PropertyDescriptor&>((uint64_t)&v92, (unint64_t)&v85);
      }
      else
      {
        v57 = (_OWORD *)((char *)v92 + 32 * HIDWORD(v93));
        v58 = v86;
        *v57 = v85;
        v57[1] = v58;
        ++HIDWORD(v93);
      }
      v59 = v85;
      if ((_QWORD)v85)
      {
        v60 = v88;
        if ((_DWORD)v88 == HIDWORD(v88))
        {
          if (v88 >> 30
            || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v88, 2 * (int)v88))
          {
            LOBYTE(v87) = 1;
            goto LABEL_80;
          }
          v60 = v88;
          v61 = v89;
        }
        else
        {
          v61 = v89;
          if (v89 == (_OWORD *)((char *)v90 + 8) || !v89)
          {
            *((_QWORD *)v89 + v88) = v85;
            LODWORD(v88) = v60 + 1;
            goto LABEL_80;
          }
        }
        *((_QWORD *)v61 + v60) = v59;
        LODWORD(v88) = v60 + 1;
        if ((v59 & 0xFFFE000000000002) == 0 && !*(_QWORD *)&v90[0])
        {
          v81 = (_QWORD *)(v59 & 0xFFFFFFFFFFFFC000 | 8);
          if ((v59 & 8) != 0)
            v81 = (_QWORD *)(v59 - 16);
          *(_QWORD *)&v90[0] = *v81 + 560;
          v105[0] = (uint64_t)&v88;
          WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v90[0], v105, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v104);
        }
      }
LABEL_80:
      v62 = *((_QWORD *)&v85 + 1);
      if (!*((_QWORD *)&v85 + 1))
        goto LABEL_81;
      v66 = v88;
      if ((_DWORD)v88 == HIDWORD(v88))
      {
        if (v88 >> 30
          || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v88, 2 * (int)v88))
        {
          LOBYTE(v87) = 1;
          goto LABEL_81;
        }
        v66 = v88;
        v67 = v89;
      }
      else
      {
        v67 = v89;
        if (v89 == (_OWORD *)((char *)v90 + 8) || !v89)
        {
          *((_QWORD *)v89 + v88) = *((_QWORD *)&v85 + 1);
          LODWORD(v88) = v66 + 1;
          goto LABEL_81;
        }
      }
      *((_QWORD *)v67 + v66) = v62;
      LODWORD(v88) = v66 + 1;
      if ((v62 & 0xFFFE000000000002) == 0 && !*(_QWORD *)&v90[0])
      {
        v68 = (_QWORD *)(v62 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v62 & 8) != 0)
          v68 = (_QWORD *)(v62 - 16);
        *(_QWORD *)&v90[0] = *v68 + 560;
        v105[0] = (uint64_t)&v88;
        WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v90[0], v105, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v104);
      }
LABEL_81:
      v63 = v86;
      if ((_QWORD)v86)
      {
        v64 = v88;
        if ((_DWORD)v88 == HIDWORD(v88))
        {
          if (!(v88 >> 30)
            && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v88, 2 * (int)v88))
          {
            v64 = v88;
            v65 = v89;
LABEL_95:
            *((_QWORD *)v65 + v64) = v63;
            LODWORD(v88) = v64 + 1;
            if ((v63 & 0xFFFE000000000002) == 0 && !*(_QWORD *)&v90[0])
            {
              v82 = (_QWORD *)(v63 & 0xFFFFFFFFFFFFC000 | 8);
              if ((v63 & 8) != 0)
                v82 = (_QWORD *)(v63 - 16);
              *(_QWORD *)&v90[0] = *v82 + 560;
              v105[0] = (uint64_t)&v88;
              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v90[0], v105, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v104);
            }
            continue;
          }
          LOBYTE(v87) = 1;
        }
        else
        {
          v65 = v89;
          if (v89 != (_OWORD *)((char *)v90 + 8) && v89)
            goto LABEL_95;
          *((_QWORD *)v89 + v88) = v86;
          LODWORD(v88) = v64 + 1;
        }
      }
    }
  }
  if ((_BYTE)v87)
    goto LABEL_148;
  if ((v84 & 1) == 0)
  {
LABEL_46:
    v31 = 0;
    while (1)
    {
      if (v31 >= HIDWORD(v101))
      {
        __break(0xC471u);
        JUMPOUT(0x198B75E50);
      }
      if (v31 >= HIDWORD(v93))
      {
        __break(0xC471u);
        JUMPOUT(0x198B75E58);
      }
      (*(void (**)(JSC::JSGlobalObject *, JSC *, WTF::StringImpl *, char *, uint64_t))(16
                                                                                               * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x4C)
                                                                                               + 0x90))(v8, this, v100[v31], (char *)v92 + 32 * v31, 1);
      if (*(_DWORD *)(v10 + 80))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
        {
          break;
        }
      }
      if (++v31 == v23)
        goto LABEL_51;
    }
LABEL_140:
    v8 = 0;
  }
LABEL_51:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v88, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v39 = v92;
  if (v94 != (_QWORD *)v92 && v92 != 0)
  {
    v92 = 0;
    LODWORD(v93) = 0;
    WTF::fastFree((unint64_t)v39, v32, v33, v34, v35, v36, v37, v38);
  }
LABEL_56:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v96, v32, v33, v34, v35, v36, v37, v38);
  if (HIDWORD(v101))
  {
    v69 = v100;
    v70 = 8 * HIDWORD(v101);
    do
    {
      v71 = *v69;
      *v69 = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2)
        {
          WTF::StringImpl::~StringImpl(v71, v41, v42, v43, v44, v45, v46, v47);
          WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        }
        else
        {
          *(_DWORD *)v71 -= 2;
        }
      }
      ++v69;
      v70 -= 8;
    }
    while (v70);
  }
  v48 = (unint64_t)v100;
  if (v102 != (_BYTE *)v100 && v100 != 0)
  {
    v100 = 0;
    LODWORD(v101) = 0;
    WTF::fastFree(v48, v41, v42, v43, v44, v45, v46, v47);
  }
  return v8;
}

JSC::JSGlobalObject *JSC::definePropertiesSlow(JSC *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, JSC::JSObject *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  double v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  uint64_t v27;
  int v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  WTF *v33;
  unsigned int v34;
  _QWORD *v35;
  int v36;
  WTF *v37;
  unsigned int v38;
  _QWORD *v39;
  unsigned int v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  WTF *v45;
  uint64_t v46;
  BOOL v47;
  _QWORD *v49;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  WTF *v54;
  uint64_t v55;
  BOOL v56;
  _QWORD *v58;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  WTF *v63;
  uint64_t v64;
  BOOL v65;
  _QWORD *v67;
  uint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t v73;
  WTF::StringImpl **v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v87;
  JSC::JSGlobalObject *v88;
  JSC::JSGlobalObject *v89;
  JSC::JSGlobalObject *v90;
  unsigned int *v91;
  __int128 v92;
  __int128 v93;
  char v94;
  uint64_t v95;
  WTF *v96;
  _OWORD v97[4];
  uint64_t v98;
  WTF *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  _QWORD v105[3];
  uint64_t v106[2];

  v7 = *((_QWORD *)this + 7);
  v8 = WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = v8 + 24;
  *(_QWORD *)(v8 + 16) = 20;
  v101 = v8;
  v102 = 0;
  v103 = v7;
  v104 = 259;
  v91 = (unsigned int *)a3;
  (*(void (**)(JSC::JSObject *, JSC *, unint64_t *, uint64_t))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)a3 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0x78))(a3, this, &v101, 1);
  if (*(_DWORD *)(v7 + 80))
  {
    v87 = *(_DWORD *)(v7 + 80);
    if ((v87 & 0x27) != 0 && (v87 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v7 + 64), 7u, v10, v11, v12, v13, v14, v15);
    if (*(_QWORD *)(v7 + 16))
    {
      a2 = 0;
      goto LABEL_132;
    }
  }
  v16 = *(unsigned int *)(v101 + 20);
  v99 = 0;
  v100 = 0;
  v94 = 0;
  v95 = 0x800000000;
  v96 = (WTF *)((char *)v97 + 8);
  memset(v97, 0, sizeof(v97));
  v98 = 0;
  if (!(_DWORD)v16)
    goto LABEL_130;
  v17 = 0;
  LODWORD(v18) = 0;
  for (i = 0; i != v16; ++i)
  {
    if (*(_DWORD *)(v101 + 20) <= i)
    {
      __break(0xC471u);
      JUMPOUT(0x198B76688);
    }
    v20 = JSC::JSObject::get(v91, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v101 + 8) + 8 * i), v11, v12, v13, v14, v15);
    if (*(_QWORD *)(v7 + 16)
      || (v92 = 0uLL,
          *(_QWORD *)&v93 = 0,
          *((_QWORD *)&v93 + 1) = 14,
          LOBYTE(v105[0]) = 0,
          JSC::toPropertyDescriptor(this, v20, (uint64_t)&v92, (const JSC::PropertyTable *)v105, v12, v13, v14, v15, v21),
          *(_QWORD *)(v7 + 16)))
    {
      a2 = 0;
      goto LABEL_130;
    }
    if ((_DWORD)v18 == (_DWORD)v100)
    {
      v22 = (_OWORD *)WTF::Vector<WTF::Dominators<JSC::B3::CFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v99, v18 + 1, (unint64_t)&v92);
      LODWORD(v18) = HIDWORD(v100);
      v17 = v99;
      v23 = (_OWORD *)((char *)v99 + 32 * HIDWORD(v100));
      v24 = v22[1];
      *v23 = *v22;
      v23[1] = v24;
    }
    else
    {
      v25 = v93;
      v26 = (_OWORD *)((char *)v17 + 32 * v18);
      *v26 = v92;
      v26[1] = v25;
    }
    v18 = (v18 + 1);
    HIDWORD(v100) = v18;
    v27 = v92;
    if ((_QWORD)v92)
    {
      v28 = v95;
      if ((_DWORD)v95 == HIDWORD(v95))
      {
        if (v95 >> 30
          || (WTF::tryFastMalloc((WTF *)(16 * v95), v105), (v29 = (WTF *)v105[0]) == 0))
        {
          v94 = 1;
          goto LABEL_15;
        }
        v88 = a2;
        v34 = v95;
        if ((_DWORD)v95)
        {
          v44 = 0;
          do
          {
            v45 = v96;
            *((_QWORD *)v29 + v44) = *((_QWORD *)v96 + v44);
            v46 = *((_QWORD *)v45 + v44);
            if (*(_QWORD *)&v97[0])
              v47 = 0;
            else
              v47 = (v46 & 0xFFFE000000000002) == 0;
            if (v47 && v46 != 0)
            {
              v49 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFC000 | 8);
              if ((v46 & 8) != 0)
                v49 = (_QWORD *)(v46 - 16);
              *(_QWORD *)&v97[0] = *v49 + 560;
              v106[0] = (uint64_t)&v95;
              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v97[0], v106, v11, v12, v13, v14, v15, (uint64_t)v105);
              v34 = v95;
            }
            ++v44;
          }
          while (v44 < v34);
        }
        if (v96 != (WTF *)((char *)v97 + 8) && v96 != 0)
        {
          WTF::fastFree((unint64_t)v96, v42, v43, v11, v12, v13, v14, v15);
          v34 = v95;
        }
        v96 = v29;
        HIDWORD(v95) = 2 * v28;
        a2 = v88;
      }
      else
      {
        v29 = v96;
        if (v96 == (WTF *)((char *)v97 + 8) || !v96)
        {
          *((_QWORD *)v96 + v95) = v92;
          LODWORD(v95) = v28 + 1;
          goto LABEL_15;
        }
        v34 = v95;
      }
      *((_QWORD *)v29 + v34) = v27;
      LODWORD(v95) = v34 + 1;
      if ((v27 & 0xFFFE000000000002) == 0 && !*(_QWORD *)&v97[0])
      {
        v35 = (_QWORD *)(v27 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v27 & 8) != 0)
          v35 = (_QWORD *)(v27 - 16);
        *(_QWORD *)&v97[0] = *v35 + 560;
        v106[0] = (uint64_t)&v95;
        WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v97[0], v106, v11, v12, v13, v14, v15, (uint64_t)v105);
      }
    }
LABEL_15:
    v30 = *((_QWORD *)&v92 + 1);
    if (!*((_QWORD *)&v92 + 1))
      goto LABEL_16;
    v36 = v95;
    if ((_DWORD)v95 == HIDWORD(v95))
    {
      if (v95 >> 30
        || (WTF::tryFastMalloc((WTF *)(16 * v95), v105), (v37 = (WTF *)v105[0]) == 0))
      {
        v94 = 1;
        goto LABEL_16;
      }
      v90 = a2;
      v40 = v95;
      if ((_DWORD)v95)
      {
        v62 = 0;
        do
        {
          v63 = v96;
          *((_QWORD *)v37 + v62) = *((_QWORD *)v96 + v62);
          v64 = *((_QWORD *)v63 + v62);
          if (*(_QWORD *)&v97[0])
            v65 = 0;
          else
            v65 = (v64 & 0xFFFE000000000002) == 0;
          if (v65 && v64 != 0)
          {
            v67 = (_QWORD *)(v64 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v64 & 8) != 0)
              v67 = (_QWORD *)(v64 - 16);
            *(_QWORD *)&v97[0] = *v67 + 560;
            v106[0] = (uint64_t)&v95;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v97[0], v106, v11, v12, v13, v14, v15, (uint64_t)v105);
            v40 = v95;
          }
          ++v62;
        }
        while (v62 < v40);
      }
      if (v96 != (WTF *)((char *)v97 + 8) && v96 != 0)
      {
        WTF::fastFree((unint64_t)v96, v60, v61, v11, v12, v13, v14, v15);
        v40 = v95;
      }
      v96 = v37;
      HIDWORD(v95) = 2 * v36;
      a2 = v90;
    }
    else
    {
      v37 = v96;
      if (v96 == (WTF *)((char *)v97 + 8) || !v96)
      {
        *((_QWORD *)v96 + v95) = *((_QWORD *)&v92 + 1);
        LODWORD(v95) = v36 + 1;
        goto LABEL_16;
      }
      v40 = v95;
    }
    *((_QWORD *)v37 + v40) = v30;
    LODWORD(v95) = v40 + 1;
    if ((v30 & 0xFFFE000000000002) == 0 && !*(_QWORD *)&v97[0])
    {
      v41 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v30 & 8) != 0)
        v41 = (_QWORD *)(v30 - 16);
      *(_QWORD *)&v97[0] = *v41 + 560;
      v106[0] = (uint64_t)&v95;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v97[0], v106, v11, v12, v13, v14, v15, (uint64_t)v105);
    }
LABEL_16:
    v31 = v93;
    if (!(_QWORD)v93)
      continue;
    v32 = v95;
    if ((_DWORD)v95 == HIDWORD(v95))
    {
      if (v95 >> 30
        || (WTF::tryFastMalloc((WTF *)(16 * v95), v105), (v33 = (WTF *)v105[0]) == 0))
      {
        v94 = 1;
        continue;
      }
      v89 = a2;
      v38 = v95;
      if ((_DWORD)v95)
      {
        v53 = 0;
        do
        {
          v54 = v96;
          *((_QWORD *)v33 + v53) = *((_QWORD *)v96 + v53);
          v55 = *((_QWORD *)v54 + v53);
          if (*(_QWORD *)&v97[0])
            v56 = 0;
          else
            v56 = (v55 & 0xFFFE000000000002) == 0;
          if (v56 && v55 != 0)
          {
            v58 = (_QWORD *)(v55 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v55 & 8) != 0)
              v58 = (_QWORD *)(v55 - 16);
            *(_QWORD *)&v97[0] = *v58 + 560;
            v106[0] = (uint64_t)&v95;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v97[0], v106, v11, v12, v13, v14, v15, (uint64_t)v105);
            v38 = v95;
          }
          ++v53;
        }
        while (v53 < v38);
      }
      if (v96 != (WTF *)((char *)v97 + 8) && v96 != 0)
      {
        WTF::fastFree((unint64_t)v96, v51, v52, v11, v12, v13, v14, v15);
        v38 = v95;
      }
      v96 = v33;
      HIDWORD(v95) = 2 * v32;
      a2 = v89;
    }
    else
    {
      v33 = v96;
      if (v96 == (WTF *)((char *)v97 + 8) || !v96)
      {
        *((_QWORD *)v96 + v95) = v93;
        LODWORD(v95) = v32 + 1;
        continue;
      }
      v38 = v95;
    }
    *((_QWORD *)v33 + v38) = v31;
    LODWORD(v95) = v38 + 1;
    if ((v31 & 0xFFFE000000000002) == 0 && !*(_QWORD *)&v97[0])
    {
      v39 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v31 & 8) != 0)
        v39 = (_QWORD *)(v31 - 16);
      *(_QWORD *)&v97[0] = *v39 + 560;
      v106[0] = (uint64_t)&v95;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v97[0], v106, v11, v12, v13, v14, v15, (uint64_t)v105);
    }
  }
  if (v94)
  {
LABEL_160:
    __break(0xC471u);
    JUMPOUT(0x198B76664);
  }
  v69 = 0;
  while (1)
  {
    if (*(_DWORD *)(v101 + 20) <= v69)
    {
      __break(0xC471u);
      JUMPOUT(0x198B76690);
    }
    if (v18 == v69)
      goto LABEL_160;
    (*(void (**)(JSC::JSGlobalObject *, JSC *, _QWORD, WTF *, uint64_t))(16
                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                                                 + 0x90))(a2, this, *(_QWORD *)(*(_QWORD *)(v101 + 8) + 8 * v69), v17, 1);
    if (*(_DWORD *)(v7 + 80))
    {
      v70 = *(_DWORD *)(v7 + 80);
      if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v7 + 64), 7u, v10, v11, v12, v13, v14, v15);
      if (*(_QWORD *)(v7 + 16))
        break;
    }
    ++v69;
    v17 = (WTF *)((char *)v17 + 32);
    if (v16 == v69)
      goto LABEL_130;
  }
  a2 = 0;
LABEL_130:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v95, v9, v10, v11, v12, v13, v14, v15);
  if (v99)
    WTF::fastFree((unint64_t)v99, v9, v10, v11, v12, v13, v14, v15);
LABEL_132:
  if (v102)
    WTF::fastFree(v102 - 16, v9, v10, v11, v12, v13, v14, v15);
  v71 = v101;
  v101 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 1)
    {
      v73 = *(unsigned int *)(v71 + 20);
      if ((_DWORD)v73)
      {
        v74 = *(WTF::StringImpl ***)(v71 + 8);
        v75 = 8 * v73;
        do
        {
          v76 = *v74;
          *v74 = 0;
          if (v76)
          {
            if (*(_DWORD *)v76 == 2)
            {
              WTF::StringImpl::~StringImpl(v76, (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
              WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
            }
            else
            {
              *(_DWORD *)v76 -= 2;
            }
          }
          ++v74;
          v75 -= 8;
        }
        while (v75);
      }
      v85 = *(_QWORD *)(v71 + 8);
      if (v71 + 24 != v85 && v85 != 0)
      {
        *(_QWORD *)(v71 + 8) = 0;
        *(_DWORD *)(v71 + 16) = 0;
        WTF::fastFree(v85, v9, v10, v11, v12, v13, v14, v15);
      }
      WTF::fastFree(v71, v9, v10, v11, v12, v13, v14, v15);
    }
    else
    {
      --*(_DWORD *)v71;
    }
  }
  return a2;
}

void JSC::defineProperties(JSC::JSGlobalObject *,JSC::JSObject *,JSC::JSObject *)::$_0::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  _DWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  _QWORD *v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  if ((*((_BYTE *)a2 + 12) & 4) == 0)
  {
    v10 = *a2;
    if (*a2)
    {
      if ((*(_BYTE *)(v10 + 16) & 0x20) != 0 && (*(_BYTE *)(v10 + 36) & 4) != 0)
        return;
      v11 = *(_QWORD **)a1;
      v12 = (_DWORD *)(*(_QWORD *)a1 + 12);
      v13 = *v12;
      v14 = (_DWORD *)(*(_QWORD *)a1 + 8);
      if ((_DWORD)v13 != *v14)
      {
        v15 = (_QWORD *)(*v11 + 8 * v13);
        *(_DWORD *)v10 += 2;
        goto LABEL_6;
      }
    }
    else
    {
      v11 = *(_QWORD **)a1;
      v12 = (_DWORD *)(*(_QWORD *)a1 + 12);
      v13 = *v12;
      v14 = (_DWORD *)(*(_QWORD *)a1 + 8);
      if ((_DWORD)v13 != *v14)
      {
        v15 = (_QWORD *)(*v11 + 8 * v13);
        goto LABEL_6;
      }
    }
    v28 = v13 + (v13 >> 2);
    if (v28 >= 0x10)
      v29 = v28 + 1;
    else
      v29 = 16;
    if (v29 <= v13 + 1)
      v30 = v13 + 1;
    else
      v30 = v29;
    v31 = (_QWORD *)*v11;
    if (v30 < 9)
    {
      v32 = v11 + 2;
      *v11 = v11 + 2;
      *v14 = 8;
    }
    else
    {
      if (v30 >> 29)
      {
        __break(0xC471u);
LABEL_57:
        JUMPOUT(0x198B7684CLL);
      }
      v32 = (void *)WTF::fastMalloc((WTF *)(8 * v30));
      *v14 = v30;
      *v11 = v32;
    }
    memcpy(v32, v31, 8 * v13);
    if (v11 + 2 != v31 && v31 != 0)
    {
      if ((_QWORD *)*v11 == v31)
      {
        *v11 = 0;
        *v14 = 0;
      }
      WTF::fastFree((unint64_t)v31, v33, v34, a4, a5, a6, a7, a8);
    }
    v13 = *v12;
    v36 = (_QWORD *)*v11;
    if (v10)
      *(_DWORD *)v10 += 2;
    v15 = &v36[v13];
LABEL_6:
    *v15 = v10;
    *v12 = v13 + 1;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = **(_QWORD **)(a1 + 16);
    v18 = *((_DWORD *)a2 + 2);
    if (v18 <= 63)
    {
      v19 = v17 + 16;
    }
    else
    {
      v19 = *(_QWORD *)(v17 + 8) - 8;
      v18 = 63 - v18;
    }
    v20 = *(_QWORD *)(v19 + 8 * v18);
    v21 = *(unsigned int *)(v16 + 8);
    v22 = (_DWORD *)(v16 + 8);
    if ((_DWORD)v21 == *(_DWORD *)(v16 + 12))
    {
      if (v21 >> 30
        || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(v16 + 8), 2 * (int)v21))
      {
        *(_BYTE *)v16 = 1;
LABEL_32:
        __break(0xC471u);
        goto LABEL_57;
      }
      LODWORD(v21) = *v22;
    }
    else
    {
      v23 = *(_QWORD *)(v16 + 16);
      if (v23 == v16 + 32 || v23 == 0)
      {
        *(_QWORD *)(v23 + 8 * v21) = v20;
        *v22 = v21 + 1;
        goto LABEL_16;
      }
    }
    *(_QWORD *)(*(_QWORD *)(v16 + 16) + 8 * v21) = v20;
    *(_DWORD *)(v16 + 8) = v21 + 1;
    if (!*(_QWORD *)(v16 + 24) && (v20 & 0xFFFE000000000002) == 0 && v20 != 0)
    {
      v26 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v20 & 8) != 0)
        v26 = (_QWORD *)(v20 - 16);
      v27 = (uint64_t *)(*v26 + 560);
      *(_QWORD *)(v16 + 24) = v27;
      v38 = v16 + 8;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v27, &v38, a4, a5, a6, a7, a8, (uint64_t)&v37);
    }
LABEL_16:
    if (!*(_BYTE *)v16)
      return;
    goto LABEL_32;
  }
}

uint64_t WTF::VectorBuffer<JSC::PropertyDescriptor,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 0x11)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 16;
  }
  else
  {
    v3 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

__n128 WTF::Vector<JSC::PropertyDescriptor,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::PropertyDescriptor&>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  __n128 result;
  __int128 v6;

  v3 = WTF::Vector<JSC::PropertyDescriptor,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
  result = *(__n128 *)v3;
  v6 = *(_OWORD *)(v3 + 16);
  *v4 = *(_OWORD *)v3;
  v4[1] = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::PropertyDescriptor,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), v5 + 32 * v6 <= a3))
  {
    v22 = *(unsigned int *)(a1 + 8);
    v23 = v22 + (v22 >> 2);
    if (v23 >= 0x10)
      v24 = v23 + 1;
    else
      v24 = 16;
    if (v24 > a2)
      a2 = v24;
    if (a2 > v22)
    {
      v25 = *(unsigned int *)(a1 + 12);
      WTF::VectorBuffer<JSC::PropertyDescriptor,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
      if ((_DWORD)v25)
      {
        v33 = *(_OWORD **)a1;
        v34 = 32 * v25;
        v35 = (__int128 *)v5;
        do
        {
          v36 = *v35;
          v37 = v35[1];
          v35 += 2;
          *v33 = v36;
          v33[1] = v37;
          v33 += 2;
          v34 -= 32;
        }
        while (v34);
      }
      if (a1 + 16 != v5 && v5)
      {
        if (*(_QWORD *)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v26, v27, v28, v29, v30, v31, v32);
      }
    }
  }
  else
  {
    v7 = (uint64_t)(a3 - v5) >> 5;
    v8 = *(unsigned int *)(a1 + 8);
    v9 = v8 + (v8 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    if (a2 > v8)
    {
      WTF::VectorBuffer<JSC::PropertyDescriptor,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
      v18 = 0;
      v19 = *(_QWORD *)a1;
      do
      {
        v20 = (_OWORD *)(v19 + v18);
        v21 = *(_OWORD *)(v5 + v18 + 16);
        *v20 = *(_OWORD *)(v5 + v18);
        v20[1] = v21;
        v18 += 32;
      }
      while (32 * v6 != v18);
      if (a1 + 16 != v5 && v5)
      {
        if (*(_QWORD *)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v11, v12, v13, v14, v15, v16, v17);
      }
    }
    return *(_QWORD *)a1 + 32 * v7;
  }
  return v3;
}

uint64_t JSC::testIntegrityLevel<(JSC::IntegrityLevel)0>(uint64_t a1, JSC::VM *a2, _DWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v25;
  uint64_t v26;
  int OwnPropertyDescriptor;
  int v28;
  BOOL hasExceptionsAfterHandlingTraps;
  _QWORD v30[3];
  uint64_t v31;
  _QWORD v32[3];
  __int16 v33;

  v6 = (*(uint64_t (**)(_DWORD *, uint64_t))(16 * *(unsigned int *)(16 * (*a3 & 0xFFFFFFFE) + 0x4C) + 0xA0))(a3, a1);
  if (*((_DWORD *)a2 + 20))
  {
    if (((JSC::VM::hasExceptionsAfterHandlingTraps(a2, v7, v8, v9, v10, v11, v12, v13) | v6) & 1) == 0)
      goto LABEL_3;
    return 0;
  }
  if ((v6 & 1) != 0)
    return 0;
LABEL_3:
  v14 = WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = v14 + 24;
  *(_QWORD *)(v14 + 16) = 20;
  v32[0] = v14;
  v32[1] = 0;
  v32[2] = a2;
  v33 = 259;
  (*(void (**)(_DWORD *, uint64_t, _QWORD *, _QWORD))(16
                                                              * *(unsigned int *)(16 * (*a3 & 0xFFFFFFFE) + 0x4C)
                                                              + 0x78))(a3, a1, v32, 0);
  if (*((_DWORD *)a2 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(a2, (uint64_t)v15, v16, v17, v18, v19, v20, v21))
  {
LABEL_17:
    v23 = 0;
    goto LABEL_6;
  }
  v22 = *(unsigned int *)(v32[0] + 20);
  if ((_DWORD)v22)
  {
    v25 = *(WTF::StringImpl ***)(v32[0] + 8);
    v26 = 8 * v22;
    while (1)
    {
      memset(v30, 0, sizeof(v30));
      v31 = 14;
      OwnPropertyDescriptor = JSC::JSObject::getOwnPropertyDescriptor(a3, a1, *v25, (uint64_t)v30);
      v28 = OwnPropertyDescriptor;
      if (*((_DWORD *)a2 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(a2, (uint64_t)v15, v16, v17, v18, v19, v20, v21);
        if (!hasExceptionsAfterHandlingTraps && ((v28 ^ 1) & 1) == 0)
        {
LABEL_11:
          if ((v31 & 8) == 0)
            goto LABEL_17;
          goto LABEL_12;
        }
        if (hasExceptionsAfterHandlingTraps)
          goto LABEL_17;
      }
      else if (OwnPropertyDescriptor)
      {
        goto LABEL_11;
      }
LABEL_12:
      ++v25;
      v23 = 1;
      v26 -= 8;
      if (!v26)
        goto LABEL_6;
    }
  }
  v23 = 1;
LABEL_6:
  JSC::PropertyNameArray::~PropertyNameArray((JSC::PropertyNameArray *)v32, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

uint64_t JSC::testIntegrityLevel<(JSC::IntegrityLevel)1>(uint64_t a1, JSC::VM *a2, _DWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v25;
  uint64_t v26;
  int OwnPropertyDescriptor;
  int v28;
  BOOL hasExceptionsAfterHandlingTraps;
  _QWORD v30[3];
  uint64_t v31;
  _QWORD v32[3];
  __int16 v33;

  v6 = (*(uint64_t (**)(_DWORD *, uint64_t))(16 * *(unsigned int *)(16 * (*a3 & 0xFFFFFFFE) + 0x4C) + 0xA0))(a3, a1);
  if (*((_DWORD *)a2 + 20))
  {
    if (((JSC::VM::hasExceptionsAfterHandlingTraps(a2, v7, v8, v9, v10, v11, v12, v13) | v6) & 1) == 0)
      goto LABEL_3;
    return 0;
  }
  if ((v6 & 1) != 0)
    return 0;
LABEL_3:
  v14 = WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = v14 + 24;
  *(_QWORD *)(v14 + 16) = 20;
  v32[0] = v14;
  v32[1] = 0;
  v32[2] = a2;
  v33 = 259;
  (*(void (**)(_DWORD *, uint64_t, _QWORD *, _QWORD))(16
                                                              * *(unsigned int *)(16 * (*a3 & 0xFFFFFFFE) + 0x4C)
                                                              + 0x78))(a3, a1, v32, 0);
  if (*((_DWORD *)a2 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(a2, (uint64_t)v15, v16, v17, v18, v19, v20, v21))
  {
LABEL_22:
    v23 = 0;
    goto LABEL_6;
  }
  v22 = *(unsigned int *)(v32[0] + 20);
  if ((_DWORD)v22)
  {
    v25 = *(WTF::StringImpl ***)(v32[0] + 8);
    v26 = 8 * v22;
    while (1)
    {
      memset(v30, 0, sizeof(v30));
      v31 = 14;
      OwnPropertyDescriptor = JSC::JSObject::getOwnPropertyDescriptor(a3, a1, *v25, (uint64_t)v30);
      v28 = OwnPropertyDescriptor;
      if (*((_DWORD *)a2 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(a2, (uint64_t)v15, v16, v17, v18, v19, v20, v21);
        if (hasExceptionsAfterHandlingTraps || ((v28 ^ 1) & 1) != 0)
        {
          if (hasExceptionsAfterHandlingTraps)
            goto LABEL_22;
          goto LABEL_14;
        }
      }
      else if (!OwnPropertyDescriptor)
      {
        goto LABEL_14;
      }
      if ((v31 & 8) == 0)
        goto LABEL_22;
      if (v30[0])
      {
        if ((v31 & 2) == 0)
          goto LABEL_22;
      }
      else if ((v31 & 2) == 0 && (v31 & 0x100000000) != 0)
      {
        goto LABEL_22;
      }
LABEL_14:
      ++v25;
      v23 = 1;
      v26 -= 8;
      if (!v26)
        goto LABEL_6;
    }
  }
  v23 = 1;
LABEL_6:
  JSC::PropertyNameArray::~PropertyNameArray((JSC::PropertyNameArray *)v32, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

_QWORD *JSC::objectConstructorAssign(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(_QWORD *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;

  if ((*((_BYTE *)a2 + 12) & 4) == 0)
  {
    v9 = result;
    v10 = *a2;
    if (*a2)
    {
      if ((*(_BYTE *)(v10 + 16) & 0x20) != 0 && (*(_BYTE *)(v10 + 36) & 4) != 0)
        return result;
      v11 = (_QWORD *)*result;
      v12 = (_DWORD *)(*result + 12);
      v13 = *v12;
      v14 = (_DWORD *)(*result + 8);
      if ((_DWORD)v13 != *v14)
      {
        v20 = (_QWORD *)(*v11 + 8 * v13);
        *(_DWORD *)v10 += 2;
        goto LABEL_26;
      }
    }
    else
    {
      v11 = (_QWORD *)*result;
      v12 = (_DWORD *)(*result + 12);
      v13 = *v12;
      v14 = (_DWORD *)(*result + 8);
      if ((_DWORD)v13 != *v14)
      {
        v20 = (_QWORD *)(*v11 + 8 * v13);
        goto LABEL_26;
      }
    }
    v15 = v13 + (v13 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= v13 + 1)
      v17 = v13 + 1;
    else
      v17 = v16;
    v18 = (_QWORD *)*v11;
    if (v17 < 0x21)
    {
      v19 = v11 + 2;
      *v11 = v11 + 2;
      *v14 = 32;
    }
    else
    {
      if (v17 >> 29)
        goto LABEL_45;
      v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
      *v14 = v17;
      *v11 = v19;
    }
    memcpy(v19, v18, 8 * v13);
    if (v11 + 2 != v18 && v18 != 0)
    {
      if ((_QWORD *)*v11 == v18)
      {
        *v11 = 0;
        *v14 = 0;
      }
      WTF::fastFree((unint64_t)v18, v21, a3, a4, a5, a6, a7, a8);
    }
    v13 = *v12;
    v23 = (_QWORD *)*v11;
    if (v10)
      *(_DWORD *)v10 += 2;
    v20 = &v23[v13];
LABEL_26:
    *v20 = v10;
    *v12 = v13 + 1;
    v24 = v9[1];
    v25 = *(_QWORD *)v9[2];
    v26 = *((_DWORD *)a2 + 2);
    if (v26 <= 63)
    {
      v27 = v25 + 16;
    }
    else
    {
      v27 = *(_QWORD *)(v25 + 8) - 8;
      v26 = 63 - v26;
    }
    v28 = *(_QWORD *)(v27 + 8 * v26);
    v29 = *(unsigned int *)(v24 + 8);
    result = (_QWORD *)(v24 + 8);
    if ((_DWORD)v29 != *(_DWORD *)(v24 + 12)
      && ((v30 = *(_QWORD *)(v24 + 16), v30 != v24 + 32) ? (v31 = v30 == 0) : (v31 = 1), v31))
    {
      *(_QWORD *)(v30 + 8 * v29) = v28;
      *(_DWORD *)result = v29 + 1;
    }
    else
    {
      result = (_QWORD *)JSC::MarkedVectorBase::slowAppend((uint64_t)result, v28, a3, a4, a5, a6, a7, a8);
      if ((_DWORD)result == 1)
      {
        *(_BYTE *)v24 = 1;
        goto LABEL_45;
      }
    }
    if (!*(_BYTE *)v24)
      return result;
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x198B7707CLL);
  }
  return result;
}

uint64_t JSC::objectConstructorEntries(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  char **v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  char *v28;

  if ((*(_BYTE *)(a2 + 12) & 4) == 0)
  {
    v9 = *(_DWORD **)a2;
    if ((*(_BYTE *)(*(_QWORD *)a2 + 16) & 0x20) == 0)
    {
      v10 = result;
      v11 = *(char ***)result;
      v12 = *(unsigned int *)(*(_QWORD *)result + 12);
      if ((_DWORD)v12 == *(_DWORD *)(*(_QWORD *)result + 8))
      {
        v21 = v12 + (v12 >> 2);
        if (v21 >= 0x10)
          v22 = v21 + 1;
        else
          v22 = 16;
        if (v22 <= v12 + 1)
          v23 = v12 + 1;
        else
          v23 = v22;
        v24 = *v11;
        if (v23 < 9)
        {
          v25 = (char *)(v11 + 2);
          *v11 = (char *)(v11 + 2);
          *((_DWORD *)v11 + 2) = 8;
        }
        else
        {
          if (v23 >> 29)
            goto LABEL_36;
          v25 = (char *)WTF::fastMalloc((WTF *)(8 * v23));
          *((_DWORD *)v11 + 2) = v23;
          *v11 = v25;
        }
        memcpy(v25, v24, 8 * v12);
        if (v11 + 2 != (char **)v24 && v24 != 0)
        {
          if (*v11 == v24)
          {
            *v11 = 0;
            *((_DWORD *)v11 + 2) = 0;
          }
          WTF::fastFree((unint64_t)v24, v26, a3, a4, a5, a6, a7, a8);
        }
        v12 = *((unsigned int *)v11 + 3);
        v28 = *v11;
        *v9 += 2;
        v13 = &v28[8 * v12];
      }
      else
      {
        v13 = &(*v11)[8 * v12];
        *v9 += 2;
      }
      *(_QWORD *)v13 = v9;
      *((_DWORD *)v11 + 3) = v12 + 1;
      v14 = *(_QWORD *)(v10 + 8);
      v15 = **(_QWORD **)(v10 + 16);
      v16 = *(_DWORD *)(a2 + 8);
      if (v16 <= 63)
      {
        v17 = v15 + 16;
      }
      else
      {
        v17 = *(_QWORD *)(v15 + 8) - 8;
        v16 = 63 - v16;
      }
      v18 = *(_QWORD *)(v17 + 8 * v16);
      v19 = *(unsigned int *)(v14 + 8);
      result = v14 + 8;
      if ((_DWORD)v19 == *(_DWORD *)(v14 + 12) || (v20 = *(_QWORD *)(v14 + 16), v20 != v14 + 32) && v20)
      {
        result = JSC::MarkedVectorBase::slowAppend(result, v18, a3, a4, a5, a6, a7, a8);
        if ((_DWORD)result == 1)
        {
          *(_BYTE *)v14 = 1;
          goto LABEL_36;
        }
      }
      else
      {
        *(_QWORD *)(v20 + 8 * v19) = v18;
        *(_DWORD *)result = v19 + 1;
      }
      if (!*(_BYTE *)v14)
        return result;
LABEL_36:
      __break(0xC471u);
      JUMPOUT(0x198B771C4);
    }
  }
  return result;
}

void JSC::JSObject::forEachOwnIndexedProperty<(JSC::JSObject::SortMode)1,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1>(JSC::JSObject *this, JSC::JSGlobalObject *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  _QWORD *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t *v24;
  int v25;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t DirectIndex;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  int v41;
  BOOL v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  WTF *v58;
  uint64_t v59;
  unsigned int v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  WTF *v65;
  uint64_t v66;
  BOOL v67;
  _QWORD *v69;
  WTF *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  BOOL v91;
  _QWORD *v93;
  uint64_t *v94;
  WTF *v95;
  WTF *v96;
  uint64_t v97;
  _BYTE v98[64];
  char v99[8];
  uint64_t v100;
  WTF *v101;
  _OWORD v102[4];
  uint64_t v103;
  _QWORD v104[3];
  uint64_t v105[2];

  v8 = *((_BYTE *)this + 4) & 0xF;
  if (v8 > 0xD)
    goto LABEL_113;
  if (((1 << v8) & 0x3F0) != 0)
  {
    v25 = *(_DWORD *)(*((_QWORD *)this + 1) - 8);
    if (!v25)
      return;
    v27 = 0;
    v28 = *((_QWORD *)a2 + 7);
    while (1)
    {
      DirectIndex = JSC::JSObject::getDirectIndex(this, (uint64_t ***)a2, v27);
      if (*(_DWORD *)(v28 + 80))
      {
        v41 = *(_DWORD *)(v28 + 80);
        if ((v41 & 0x27) != 0 && (v41 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v28 + 64), 7u, v29, v30, v31, v32, v33, v34);
        if (*(_QWORD *)(v28 + 16))
          return;
      }
      if (DirectIndex)
        break;
LABEL_40:
      v27 = (v27 + 1);
      if (v25 == (_DWORD)v27)
        return;
    }
    v36 = *a3;
    v38 = (WTF *)(*a3 + 8);
    v37 = *(unsigned int *)v38;
    if ((_DWORD)v37 == *(_DWORD *)(*a3 + 12))
    {
      if (v37 >> 30
        || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(*a3 + 8), 2 * (int)v37))
      {
        *(_BYTE *)v36 = 1;
LABEL_159:
        __break(0xC471u);
        JUMPOUT(0x198B779B0);
      }
      LODWORD(v37) = *(_DWORD *)v38;
    }
    else
    {
      v39 = *(_QWORD *)(v36 + 16);
      if (v39 == v36 + 32 || v39 == 0)
      {
        *(_QWORD *)(v39 + 8 * v37) = DirectIndex;
        *(_DWORD *)v38 = v37 + 1;
        goto LABEL_39;
      }
    }
    *(_QWORD *)(*(_QWORD *)(v36 + 16) + 8 * v37) = DirectIndex;
    *(_DWORD *)(v36 + 8) = v37 + 1;
    if (*(_QWORD *)(v36 + 24))
      v42 = 0;
    else
      v42 = (DirectIndex & 0xFFFE000000000002) == 0;
    if (v42)
    {
      v43 = (_QWORD *)(DirectIndex & 0xFFFFFFFFFFFFC000 | 8);
      if ((DirectIndex & 8) != 0)
        v43 = (_QWORD *)(DirectIndex - 16);
      v44 = (uint64_t *)(*v43 + 560);
      *(_QWORD *)(v36 + 24) = v44;
      v96 = v38;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v44, (uint64_t *)&v96, v30, v31, v32, v33, v34, (uint64_t)v99);
    }
LABEL_39:
    if (*(_BYTE *)v36)
      goto LABEL_159;
    goto LABEL_40;
  }
  if (((1 << v8) & 0x3C00) == 0)
  {
    if (((1 << v8) & 0xB) != 0)
      return;
LABEL_113:
    __break(0xC471u);
    JUMPOUT(0x198B777ACLL);
  }
  v11 = (_QWORD *)*((_QWORD *)this + 1);
  v12 = *((_DWORD *)v11 - 2);
  v13 = *((_DWORD *)v11 - 1);
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  if ((_DWORD)v14)
  {
    v15 = v11 + 2;
    while (1)
    {
      v17 = *v15++;
      v16 = v17;
      if (v17)
        break;
LABEL_18:
      if (!--v14)
        goto LABEL_58;
    }
    v18 = *a3;
    v20 = (WTF *)(*a3 + 8);
    v19 = *(unsigned int *)v20;
    if ((_DWORD)v19 == *(_DWORD *)(*a3 + 12))
    {
      if (v19 >> 30
        || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(*a3 + 8), 2 * (int)v19))
      {
        *(_BYTE *)v18 = 1;
LABEL_161:
        __break(0xC471u);
        JUMPOUT(0x198B779D8);
      }
      LODWORD(v19) = *(_DWORD *)v20;
    }
    else
    {
      v21 = *(_QWORD *)(v18 + 16);
      if (v21 == v18 + 32 || v21 == 0)
      {
        *(_QWORD *)(v21 + 8 * v19) = v16;
        *(_DWORD *)v20 = v19 + 1;
        goto LABEL_17;
      }
    }
    *(_QWORD *)(*(_QWORD *)(v18 + 16) + 8 * v19) = v16;
    *(_DWORD *)(v18 + 8) = v19 + 1;
    if ((v16 & 0xFFFE000000000002) == 0 && !*(_QWORD *)(v18 + 24))
    {
      v23 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v16 & 8) != 0)
        v23 = (_QWORD *)(v16 - 16);
      v24 = (uint64_t *)(*v23 + 560);
      *(_QWORD *)(v18 + 24) = v24;
      v96 = v20;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v24, (uint64_t *)&v96, a4, a5, a6, a7, a8, (uint64_t)v99);
    }
LABEL_17:
    if (*(_BYTE *)v18)
      goto LABEL_161;
    goto LABEL_18;
  }
LABEL_58:
  v45 = *v11;
  if (!*v11)
    return;
  v46 = 0;
  LODWORD(v47) = 0;
  v99[0] = 0;
  v100 = 0x800000000;
  v101 = (WTF *)((char *)v102 + 8);
  memset(v102, 0, sizeof(v102));
  v103 = 0;
  v96 = (WTF *)v98;
  v97 = 8;
  v48 = *(_QWORD *)(v45 + 8);
  if (v48)
  {
    v47 = *(unsigned int *)(v48 - 4);
    v49 = v48 + 24 * v47;
    if (*(_DWORD *)(v48 - 12))
    {
      v46 = v48;
      if ((_DWORD)v47)
      {
        v74 = 24 * v47;
        v46 = v48;
        while (*(_QWORD *)v46 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v46 += 24;
          v74 -= 24;
          if (!v74)
          {
            v46 = v49;
            goto LABEL_61;
          }
        }
      }
      goto LABEL_61;
    }
    v46 = v48 + 24 * v47;
  }
  v49 = v48 + 24 * v47;
LABEL_61:
  if (v48)
    v50 = v48 + 24 * *(unsigned int *)(v48 - 4);
  else
    v50 = 0;
  if (v50 == v46)
  {
    v72 = v98;
    v71 = (WTF *)v98;
    goto LABEL_123;
  }
  v51 = 0;
  do
  {
    if ((*(_BYTE *)(v46 + 16) & 4) != 0)
      goto LABEL_75;
    LODWORD(v104[0]) = *(_QWORD *)v46;
    HIDWORD(v104[0]) = v51;
    v52 = HIDWORD(v97);
    if (HIDWORD(v97) == (_DWORD)v97)
    {
      v53 = (uint64_t *)WTF::Vector<std::tuple<unsigned int,unsigned int>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v96, (void *)(HIDWORD(v97) + 1), (unint64_t)v104, a4, a5, a6, a7, a8);
      v52 = HIDWORD(v97);
      v54 = v96;
      v55 = *v53;
    }
    else
    {
      v54 = v96;
      v55 = v104[0];
    }
    *((_QWORD *)v54 + v52) = v55;
    ++HIDWORD(v97);
    v56 = *(_QWORD *)(v46 + 8);
    v57 = v100;
    if ((_DWORD)v100 == HIDWORD(v100))
    {
      if (v100 >> 30
        || (WTF::tryFastMalloc((WTF *)(16 * v100), v104), (v58 = (WTF *)v104[0]) == 0))
      {
        v99[0] = 1;
LABEL_165:
        __break(0xC471u);
        JUMPOUT(0x198B77A28);
      }
      v60 = v100;
      if ((_DWORD)v100)
      {
        v64 = 0;
        do
        {
          v65 = v101;
          *((_QWORD *)v58 + v64) = *((_QWORD *)v101 + v64);
          v66 = *((_QWORD *)v65 + v64);
          if (*(_QWORD *)&v102[0])
            v67 = 0;
          else
            v67 = (v66 & 0xFFFE000000000002) == 0;
          if (v67 && v66 != 0)
          {
            v69 = (_QWORD *)(v66 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v66 & 8) != 0)
              v69 = (_QWORD *)(v66 - 16);
            *(_QWORD *)&v102[0] = *v69 + 560;
            v105[0] = (uint64_t)&v100;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v102[0], v105, a4, a5, a6, a7, a8, (uint64_t)v104);
            v60 = v100;
          }
          ++v64;
        }
        while (v64 < v60);
      }
      if (v101 != (WTF *)((char *)v102 + 8) && v101 != 0)
      {
        WTF::fastFree((unint64_t)v101, v62, v63, a4, a5, a6, a7, a8);
        v60 = v100;
      }
      v101 = v58;
      HIDWORD(v100) = 2 * v57;
      goto LABEL_83;
    }
    v58 = v101;
    if (v101 != (WTF *)((char *)v102 + 8) && v101)
    {
      v60 = v100;
LABEL_83:
      *((_QWORD *)v58 + v60) = v56;
      LODWORD(v100) = v60 + 1;
      if (!*(_QWORD *)&v102[0] && (v56 & 0xFFFE000000000002) == 0 && v56)
      {
        v61 = (_QWORD *)(v56 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v56 & 8) != 0)
          v61 = (_QWORD *)(v56 - 16);
        *(_QWORD *)&v102[0] = *v61 + 560;
        v105[0] = (uint64_t)&v100;
        WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v102[0], v105, a4, a5, a6, a7, a8, (uint64_t)v104);
      }
      goto LABEL_73;
    }
    *((_QWORD *)v101 + v100) = v56;
    LODWORD(v100) = v57 + 1;
LABEL_73:
    if (v99[0])
      goto LABEL_165;
    ++v51;
LABEL_75:
    v59 = v46 + 24;
    v46 = v49;
    if (v59 != v49)
    {
      v46 = v59;
      while (*(_QWORD *)v46 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v46 += 24;
        if (v46 == v49)
        {
          v46 = v49;
          break;
        }
      }
    }
  }
  while (v46 != v50);
  v71 = v96;
  v72 = (char *)v96 + 8 * HIDWORD(v97);
  if (HIDWORD(v97))
  {
    v73 = 126 - 2 * __clz(HIDWORD(v97));
    goto LABEL_124;
  }
LABEL_123:
  v73 = 0;
LABEL_124:
  std::__introsort<std::_ClassicAlgPolicy,void JSC::JSObject::forEachOwnIndexedProperty<(JSC::JSObject::SortMode)1,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1>(JSC::JSGlobalObject *,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1 const&)::{lambda(std::_ClassicAlgPolicy,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1)#1} &,std::tuple<unsigned int,unsigned int> *,false>((uint64_t)v71, v72, v73, 1);
  if (HIDWORD(v97))
  {
    v82 = 0;
    v83 = 4;
    while (1)
    {
      v84 = *(unsigned int *)((char *)v96 + v83);
      v85 = v100 <= v84 ? 10 : *((_QWORD *)v101 + v84);
      v86 = *a3;
      v88 = (_DWORD *)(*a3 + 8);
      v87 = *v88;
      if ((_DWORD)v87 == *(_DWORD *)(*a3 + 12))
        break;
      v89 = *(_QWORD *)(v86 + 16);
      if (v89 != v86 + 32 && v89 != 0)
        goto LABEL_141;
      *(_QWORD *)(v89 + 8 * v87) = v85;
      *v88 = v87 + 1;
LABEL_135:
      if (*(_BYTE *)v86)
        goto LABEL_163;
      ++v82;
      v83 += 8;
      if (v82 >= HIDWORD(v97))
        goto LABEL_152;
    }
    if (v87 >> 30
      || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)(*a3 + 8), 2 * (int)v87))
    {
      *(_BYTE *)v86 = 1;
LABEL_163:
      __break(0xC471u);
      JUMPOUT(0x198B77A00);
    }
    LODWORD(v87) = *v88;
LABEL_141:
    *(_QWORD *)(*(_QWORD *)(v86 + 16) + 8 * v87) = v85;
    *(_DWORD *)(v86 + 8) = v87 + 1;
    if (*(_QWORD *)(v86 + 24))
      v91 = 0;
    else
      v91 = (v85 & 0xFFFE000000000002) == 0;
    if (v91 && v85 != 0)
    {
      v93 = (_QWORD *)(v85 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v85 & 8) != 0)
        v93 = (_QWORD *)(v85 - 16);
      v94 = (uint64_t *)(*v93 + 560);
      *(_QWORD *)(v86 + 24) = v94;
      v105[0] = (uint64_t)v88;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(v94, v105, v77, v78, v79, v80, v81, (uint64_t)v104);
    }
    goto LABEL_135;
  }
LABEL_152:
  v95 = v96;
  if (v98 != (_BYTE *)v96)
  {
    if (v96)
    {
      v96 = 0;
      LODWORD(v97) = 0;
      WTF::fastFree((unint64_t)v95, v75, v76, v77, v78, v79, v80, v81);
    }
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v100, v75, v76, v77, v78, v79, v80, v81);
}

unint64_t WTF::Vector<std::tuple<unsigned int,unsigned int>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 8 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
      {
        v23 = *(_QWORD *)a1;
        return v23 + 8 * ((uint64_t)(v8 - v10) >> 3);
      }
      if (v15 < 9)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 8;
        goto LABEL_32;
      }
      if (!(v15 >> 29))
      {
        v16 = WTF::fastMalloc((WTF *)(8 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_32:
        v24 = 0;
        do
        {
          *(_QWORD *)(v16 + v24) = *(_QWORD *)(v10 + v24);
          v24 += 8;
        }
        while (8 * v11 != v24);
        v23 = *(_QWORD *)a1;
        if (a1 + 16 != v10 && v10)
        {
          if (v23 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          v23 = *(_QWORD *)a1;
        }
        return v23 + 8 * ((uint64_t)(v8 - v10) >> 3);
      }
LABEL_44:
      __break(0xC471u);
      JUMPOUT(0x198B77BF0);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 9)
    {
      v22 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
    }
    else
    {
      if (v20 >> 29)
        goto LABEL_44;
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
    }
    if ((_DWORD)v21)
    {
      v26 = 8 * v21;
      v27 = (uint64_t *)v10;
      do
      {
        v28 = *v27++;
        *v22++ = v28;
        v26 -= 8;
      }
      while (v26);
    }
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,void JSC::JSObject::forEachOwnIndexedProperty<(JSC::JSObject::SortMode)1,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1>(JSC::JSGlobalObject *,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1 const&)::{lambda(std::_ClassicAlgPolicy,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1)#1} &,std::tuple<unsigned int,unsigned int> *,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unsigned int v14;
  int *v15;
  unsigned int v16;
  char *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  unsigned int v34;
  int *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  char *v48;
  unsigned int v49;
  int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  BOOL v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  char *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  BOOL v101;
  uint64_t v102;
  _DWORD *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  char *v108;
  int v109;
  unsigned int *v110;
  int64_t v111;
  int64_t v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  BOOL v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  BOOL v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unsigned int *v127;
  unsigned int *v128;
  char *v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  unint64_t v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  char *v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int *v150;
  uint64_t v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  int v157;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - (char *)v8;
    v10 = (a2 - (char *)v8) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v84 = *((_DWORD *)a2 - 2);
        v85 = *v8;
        if (v84 < *v8)
        {
          *v8 = v84;
          *((_DWORD *)a2 - 2) = v85;
          v86 = v8[1];
          v8[1] = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v86;
        }
        return result;
      case 3:
        LODWORD(v19) = v8[2];
        v66 = (char *)(v8 + 3);
        LODWORD(v13) = *v8;
        v87 = (char *)(v8 + 1);
        v88 = *((_DWORD *)a2 - 2);
        if (v19 < *v8)
        {
          if (v88 >= v19)
            goto LABEL_198;
          *v8 = v88;
          *((_DWORD *)a2 - 2) = v13;
          goto LABEL_200;
        }
        if (v88 < v19)
        {
          v8[2] = v88;
          *((_DWORD *)a2 - 2) = (_DWORD)v19;
          v142 = v8[3];
          v8[3] = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v142;
          v143 = v8[2];
          v144 = *v8;
          if (v143 < *v8)
          {
            *v8 = v143;
            v8[2] = v144;
            goto LABEL_201;
          }
        }
        return result;
      case 4:
        return (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSObject::forEachOwnIndexedProperty<(JSC::JSObject::SortMode)1,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1>(JSC::JSGlobalObject *,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1 const&)::{lambda(std::_ClassicAlgPolicy,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1)#1} &,std::tuple<unsigned int,unsigned int> *>((int *)v8, v8 + 2, v8 + 4, (unsigned int *)a2 - 2);
      case 5:
        result = (uint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSObject::forEachOwnIndexedProperty<(JSC::JSObject::SortMode)1,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1>(JSC::JSGlobalObject *,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1 const&)::{lambda(std::_ClassicAlgPolicy,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1)#1} &,std::tuple<unsigned int,unsigned int> *>((int *)v8, v8 + 2, v8 + 4, v8 + 6);
        v89 = *((_DWORD *)a2 - 2);
        v90 = v8[6];
        if (v89 < v90)
        {
          v8[6] = v89;
          *((_DWORD *)a2 - 2) = v90;
          v91 = v8[7];
          v8[7] = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v91;
          v92 = v8[6];
          v93 = v8[4];
          if (v92 < v93)
          {
            v94 = v8[5];
            v95 = v8[7];
            v8[4] = v92;
            v8[5] = v95;
            v8[6] = v93;
            v8[7] = v94;
            v96 = v8[2];
            if (v92 < v96)
            {
              v97 = v8[3];
              v8[2] = v92;
              v8[3] = v95;
              v8[4] = v96;
              v8[5] = v97;
              v98 = *v8;
              if (v92 < *v8)
              {
                v99 = v8[1];
                *v8 = v92;
                v8[1] = v95;
                v8[2] = v98;
                v8[3] = v99;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v66 = (char *)(v8 + 2);
          v101 = v8 == (unsigned int *)a2 || v66 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v101)
            {
              v102 = 0;
              v103 = v8;
              do
              {
                v104 = *v103;
                v103 = v66;
                if (*(_DWORD *)v66 < v104)
                {
                  v106 = *(_DWORD *)v66;
                  v105 = *((_DWORD *)v66 + 1);
                  v107 = v102;
                  while (1)
                  {
                    v108 = (char *)v8 + v107;
                    v109 = *(unsigned int *)((char *)v8 + v107 + 4);
                    *((_DWORD *)v108 + 2) = v104;
                    *((_DWORD *)v108 + 3) = v109;
                    if (!v107)
                      break;
                    v104 = *((_DWORD *)v108 - 2);
                    v107 -= 8;
                    if (v104 <= v106)
                    {
                      v110 = (unsigned int *)((char *)v8 + v107 + 8);
                      goto LABEL_139;
                    }
                  }
                  v110 = v8;
LABEL_139:
                  *v110 = v106;
                  v110[1] = v105;
                }
                v66 = (char *)(v103 + 2);
                v102 += 8;
              }
              while (v103 + 2 != (_DWORD *)a2);
            }
          }
          else if (!v101)
          {
            v13 = 0;
            v145 = -2;
            v146 = 1;
            while (1)
            {
              v147 = 2 * v13;
              v13 = v146;
              v148 = v8[v147];
              if (*(_DWORD *)v66 < v148)
                break;
LABEL_195:
              v146 = v13 + 1;
              v66 += 8;
              --v145;
              if (v66 == a2)
                return result;
            }
            LODWORD(v19) = *(_DWORD *)v66;
            v149 = *((_DWORD *)v66 + 1);
            v150 = (unsigned int *)v66;
            v151 = v145;
            while (1)
            {
              v152 = v150;
              v153 = *(v150 - 1);
              *v152 = v148;
              v152[1] = v153;
              v117 = __CFADD__(v151++, 1);
              if (v117)
                break;
              v148 = *(v152 - 4);
              v150 = v152 - 2;
              if (v148 <= v19)
              {
                *(v152 - 2) = v19;
                *(v152 - 1) = v149;
                goto LABEL_195;
              }
            }
LABEL_197:
            __break(1u);
LABEL_198:
            v154 = v7[1];
            v155 = v7[3];
            *v7 = v19;
            v7[1] = v155;
            v7[2] = v13;
            v7[3] = v154;
            v156 = *((_DWORD *)a2 - 2);
            if (v156 < v13)
            {
              v7[2] = v156;
              *((_DWORD *)a2 - 2) = v13;
              v87 = v66;
LABEL_200:
              v66 = a2 - 4;
LABEL_201:
              v157 = *(_DWORD *)v87;
              *(_DWORD *)v87 = *(_DWORD *)v66;
              *(_DWORD *)v66 = v157;
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != (unsigned int *)a2)
          {
            v111 = (unint64_t)(v10 - 2) >> 1;
            v112 = v111;
            do
            {
              if (v111 >= v112)
              {
                v113 = (2 * v112) | 1;
                v114 = &v8[2 * v113];
                v115 = *v114;
                if (2 * v112 + 2 < v10)
                {
                  v116 = v114[2];
                  v117 = v115 >= v116;
                  if (v115 <= v116)
                    v115 = v114[2];
                  if (!v117)
                  {
                    v114 += 2;
                    v113 = 2 * v112 + 2;
                  }
                }
                v118 = &v8[2 * v112];
                if (v115 >= *v118)
                {
                  v119 = *v118;
                  v120 = v118[1];
                  do
                  {
                    result = (uint64_t)v118;
                    v118 = v114;
                    *(_DWORD *)result = v115;
                    *(_DWORD *)(result + 4) = v114[1];
                    if (v111 < v113)
                      break;
                    result = (2 * v113) | 1;
                    v114 = &v8[2 * result];
                    v113 = 2 * v113 + 2;
                    v115 = *v114;
                    if (v113 >= v10)
                    {
                      v113 = result;
                    }
                    else
                    {
                      v121 = v114[2];
                      v122 = v115 >= v121;
                      if (v115 <= v121)
                        v115 = v114[2];
                      if (v122)
                        v113 = result;
                      else
                        v114 += 2;
                    }
                  }
                  while (v115 >= v119);
                  *v118 = v119;
                  v118[1] = v120;
                }
              }
              v123 = v112-- <= 0;
            }
            while (!v123);
            v124 = (unint64_t)v9 >> 3;
            do
            {
              v125 = 0;
              v126 = *(char **)v8;
              v127 = v8;
              do
              {
                v128 = &v127[2 * v125];
                v131 = v128[2];
                v129 = (char *)(v128 + 2);
                v130 = v131;
                v132 = (2 * v125) | 1;
                v125 = 2 * v125 + 2;
                if (v125 >= v124)
                {
                  v125 = v132;
                }
                else
                {
                  v133 = *((_DWORD *)v129 + 2);
                  v134 = v130 >= v133;
                  if (v130 <= v133)
                    v130 = *((_DWORD *)v129 + 2);
                  if (v134)
                    v125 = v132;
                  else
                    v129 += 8;
                }
                *v127 = v130;
                v127[1] = *((_DWORD *)v129 + 1);
                v127 = (unsigned int *)v129;
              }
              while (v125 <= (uint64_t)((unint64_t)(v124 - 2) >> 1));
              if (v129 == a2 - 8)
              {
                *(_QWORD *)v129 = v126;
              }
              else
              {
                *(_DWORD *)v129 = *((_DWORD *)a2 - 2);
                *((_DWORD *)v129 + 1) = *((_DWORD *)a2 - 1);
                *((_QWORD *)a2 - 1) = v126;
                v135 = v129 - (char *)v8 + 8;
                if (v135 >= 9)
                {
                  v136 = (((unint64_t)v135 >> 3) - 2) >> 1;
                  v137 = &v8[2 * v136];
                  v138 = *v137;
                  if (*v137 < *(_DWORD *)v129)
                  {
                    v139 = *(_DWORD *)v129;
                    v140 = *((_DWORD *)v129 + 1);
                    do
                    {
                      v141 = v129;
                      v129 = (char *)v137;
                      *(_DWORD *)v141 = v138;
                      *((_DWORD *)v141 + 1) = v137[1];
                      if (!v136)
                        break;
                      v136 = (v136 - 1) >> 1;
                      v137 = &v8[2 * v136];
                      v138 = *v137;
                    }
                    while (*v137 < v139);
                    *(_DWORD *)v129 = v139;
                    *((_DWORD *)v129 + 1) = v140;
                  }
                }
              }
              a2 -= 8;
              v123 = v124-- <= 2;
            }
            while (!v123);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[2 * ((unint64_t)v10 >> 1)];
        LODWORD(v13) = *((_DWORD *)a2 - 2);
        if ((unint64_t)v9 >= 0x401)
        {
          v14 = *v12;
          v15 = (int *)(v8 + 1);
          v16 = *v8;
          if (*v12 >= *v8)
          {
            if (v13 < v14)
            {
              *v12 = v13;
              *((_DWORD *)a2 - 2) = v14;
              v21 = v12[1];
              v12[1] = *((_DWORD *)a2 - 1);
              *((_DWORD *)a2 - 1) = v21;
              v22 = *v8;
              if (*v12 < *v8)
              {
                *v8 = *v12;
                *v12 = v22;
                v23 = (char *)(v12 + 1);
                goto LABEL_22;
              }
            }
          }
          else
          {
            if (v13 < v14)
            {
              *v8 = v13;
              *((_DWORD *)a2 - 2) = v16;
              goto LABEL_21;
            }
            v26 = v8[1];
            v27 = v12[1];
            *v8 = v14;
            v8[1] = v27;
            *v12 = v16;
            v12[1] = v26;
            v28 = *((_DWORD *)a2 - 2);
            if (v28 < v16)
            {
              *v12 = v28;
              *((_DWORD *)a2 - 2) = v16;
              v15 = (int *)(v12 + 1);
LABEL_21:
              v23 = a2 - 4;
LABEL_22:
              v29 = *v15;
              *v15 = *(_DWORD *)v23;
              *(_DWORD *)v23 = v29;
            }
          }
          v30 = &v8[2 * v11];
          v32 = *(v30 - 2);
          v13 = (unint64_t)(v30 - 2);
          v31 = v32;
          v33 = (char *)(v13 + 4);
          v34 = v8[2];
          v35 = (int *)(v8 + 3);
          v36 = *((_DWORD *)a2 - 4);
          if (v32 >= v34)
          {
            if (v36 < v31)
            {
              *(_DWORD *)v13 = v36;
              *((_DWORD *)a2 - 4) = v31;
              v37 = *(_DWORD *)(v13 + 4);
              *(_DWORD *)(v13 + 4) = *((_DWORD *)a2 - 3);
              *((_DWORD *)a2 - 3) = v37;
              v38 = v8[2];
              if (*(_DWORD *)v13 < v38)
              {
                v8[2] = *(_DWORD *)v13;
                *(_DWORD *)v13 = v38;
                goto LABEL_36;
              }
            }
          }
          else
          {
            if (v36 < v31)
            {
              v8[2] = v36;
              *((_DWORD *)a2 - 4) = v34;
              goto LABEL_35;
            }
            v41 = v8[3];
            v42 = *(_DWORD *)(v13 + 4);
            v8[2] = v31;
            v8[3] = v42;
            *(_DWORD *)v13 = v34;
            *(_DWORD *)(v13 + 4) = v41;
            v43 = *((_DWORD *)a2 - 4);
            if (v43 < v34)
            {
              *(_DWORD *)v13 = v43;
              *((_DWORD *)a2 - 4) = v34;
              v35 = (int *)(v13 + 4);
LABEL_35:
              v33 = a2 - 12;
LABEL_36:
              v44 = *v35;
              *v35 = *(_DWORD *)v33;
              *(_DWORD *)v33 = v44;
            }
          }
          v45 = &v8[2 * v11];
          v47 = v45[2];
          v19 = v45 + 2;
          v46 = v47;
          v48 = (char *)(v19 + 1);
          v49 = v8[4];
          v50 = (int *)(v8 + 5);
          v51 = *((_DWORD *)a2 - 6);
          if (v47 >= v49)
          {
            if (v51 < v46)
            {
              *v19 = v51;
              *((_DWORD *)a2 - 6) = v46;
              v52 = v19[1];
              v19[1] = *((_DWORD *)a2 - 5);
              *((_DWORD *)a2 - 5) = v52;
              v46 = *v19;
              v53 = v8[4];
              if (*v19 < v53)
              {
                v8[4] = v46;
                *v19 = v53;
                goto LABEL_46;
              }
            }
          }
          else
          {
            if (v51 < v46)
            {
              v8[4] = v51;
              *((_DWORD *)a2 - 6) = v49;
              goto LABEL_45;
            }
            v54 = v8[5];
            v55 = v19[1];
            v8[4] = v46;
            v8[5] = v55;
            *v19 = v49;
            v19[1] = v54;
            v56 = *((_DWORD *)a2 - 6);
            if (v56 >= v49)
            {
              v46 = v49;
            }
            else
            {
              *v19 = v56;
              *((_DWORD *)a2 - 6) = v49;
              v50 = (int *)(v19 + 1);
LABEL_45:
              v48 = a2 - 20;
LABEL_46:
              v57 = *v50;
              *v50 = *(_DWORD *)v48;
              *(_DWORD *)v48 = v57;
              v46 = *v19;
            }
          }
          v58 = *v12;
          v59 = *(_DWORD *)v13;
          if (*v12 >= *(_DWORD *)v13)
          {
            v60 = v12[1];
            if (v46 >= v58)
              goto LABEL_54;
            v62 = v19[1];
            *v12 = v46;
            v12[1] = v62;
            *v19 = v58;
            v19[1] = v60;
            v19 = v12;
            if (v46 >= v59)
            {
              v60 = v62;
              v58 = v46;
              goto LABEL_54;
            }
          }
          else if (v46 >= v58)
          {
            v60 = *(_DWORD *)(v13 + 4);
            v61 = v12[1];
            *(_DWORD *)v13 = v58;
            *(_DWORD *)(v13 + 4) = v61;
            *v12 = v59;
            v12[1] = v60;
            v13 = (unint64_t)v12;
            if (v46 >= v59)
            {
              v58 = v59;
LABEL_54:
              v64 = *(char **)v8;
              *v8 = v58;
              v8[1] = v60;
              *(_QWORD *)v12 = v64;
              goto LABEL_55;
            }
          }
          *(_DWORD *)v13 = v46;
          *v19 = v59;
          v63 = *(_DWORD *)(v13 + 4);
          *(_DWORD *)(v13 + 4) = v19[1];
          v19[1] = v63;
          v58 = *v12;
          v60 = v12[1];
          goto LABEL_54;
        }
        v17 = (char *)(v8 + 1);
        v18 = *v8;
        v19 = v12 + 1;
        v20 = *v12;
        if (*v8 < *v12)
        {
          if (v13 >= v18)
          {
            LODWORD(v13) = v12[1];
            LODWORD(v19) = v8[1];
            *v12 = v18;
            v12[1] = v19;
            *v8 = v20;
            v8[1] = v13;
            v39 = *((_DWORD *)a2 - 2);
            if (v39 >= v20)
              goto LABEL_55;
            *v8 = v39;
            *((_DWORD *)a2 - 2) = v20;
            v19 = v8 + 1;
          }
          else
          {
            *v12 = v13;
            *((_DWORD *)a2 - 2) = v20;
          }
          v17 = a2 - 4;
          goto LABEL_32;
        }
        if (v13 < v18)
        {
          *v8 = v13;
          *((_DWORD *)a2 - 2) = v18;
          v24 = v8[1];
          v8[1] = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v24;
          LODWORD(v13) = *v8;
          v25 = *v12;
          if (*v8 < *v12)
          {
            *v12 = v13;
            *v8 = v25;
LABEL_32:
            v40 = *v19;
            LODWORD(v13) = *(_DWORD *)v17;
            *v19 = *(_DWORD *)v17;
            *(_DWORD *)v17 = v40;
          }
        }
LABEL_55:
        --a3;
        if ((a4 & 1) == 0 && *(v8 - 2) >= *v8)
        {
          v66 = *(char **)v8;
          if (*((_DWORD *)a2 - 2) <= *(_QWORD *)v8)
          {
            v79 = v8 + 2;
            do
            {
              v8 = v79;
              if (v79 >= (unsigned int *)a2)
                break;
              v79 += 2;
              LODWORD(v13) = *v8;
            }
            while (*v8 <= v66);
          }
          else
          {
            v77 = v8 + 2;
            do
            {
              if (v77 == (unsigned int *)a2)
                goto LABEL_197;
              v78 = *v77;
              v77 += 2;
              LODWORD(v13) = v78;
            }
            while (v78 <= v66);
            v8 = v77 - 2;
          }
          v80 = (unsigned int *)a2;
          if (v8 < (unsigned int *)a2)
          {
            v80 = (unsigned int *)a2;
            while (v80 != v7)
            {
              v81 = *(v80 - 2);
              v80 -= 2;
              LODWORD(v13) = v81;
              if (v81 <= v66)
                goto LABEL_98;
            }
            goto LABEL_197;
          }
LABEL_98:
          if (v8 < v80)
          {
            LODWORD(v13) = *v8;
            LODWORD(v19) = *v80;
            do
            {
              *v8 = v19;
              *v80 = v13;
              LODWORD(v13) = v8[1];
              v8[1] = v80[1];
              v80[1] = v13;
              v19 = v8 + 2;
              do
              {
                if (v19 == (unsigned int *)a2)
                  goto LABEL_197;
                v82 = *v19;
                v19 += 2;
                LODWORD(v13) = v82;
              }
              while (v82 <= v66);
              v8 = v19 - 2;
              do
              {
                if (v80 == v7)
                  goto LABEL_197;
                v83 = *(v80 - 2);
                v80 -= 2;
                LODWORD(v19) = v83;
              }
              while (v83 > v66);
            }
            while (v8 < v80);
          }
          if (v8 - 2 != v7)
          {
            *v7 = *(v8 - 2);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *((_QWORD *)v8 - 1) = v66;
          continue;
        }
        v65 = 0;
        v66 = *(char **)v8;
        do
        {
          v67 = (char *)&v8[v65 + 2];
          if (v67 == a2)
            goto LABEL_197;
          LODWORD(v19) = *(_DWORD *)v67;
          v65 += 2;
        }
        while (*(_DWORD *)v67 < v66);
        v68 = &v8[v65];
        v13 = (unint64_t)a2;
        if (v65 != 2)
        {
          while ((unsigned int *)v13 != v8)
          {
            v69 = *(_DWORD *)(v13 - 8);
            v13 -= 8;
            if (v69 < v66)
              goto LABEL_67;
          }
          goto LABEL_197;
        }
        v13 = (unint64_t)a2;
        do
        {
          if ((unint64_t)v68 >= v13)
            break;
          v70 = *(_DWORD *)(v13 - 8);
          v13 -= 8;
        }
        while (v70 >= v66);
LABEL_67:
        if ((unint64_t)v68 >= v13)
        {
          v8 = (unsigned int *)((char *)v8 + v65 * 4);
        }
        else
        {
          v71 = *(_DWORD *)v13;
          v8 = (unsigned int *)((char *)v8 + v65 * 4);
          v72 = (unsigned int *)v13;
          do
          {
            *v8 = v71;
            *v72 = v19;
            LODWORD(v19) = v8[1];
            v8[1] = v72[1];
            v72[1] = v19;
            v73 = v8 + 2;
            do
            {
              if (v73 == (unsigned int *)a2)
                goto LABEL_197;
              v74 = *v73;
              v73 += 2;
              LODWORD(v19) = v74;
            }
            while (v74 < v66);
            v8 = v73 - 2;
            do
            {
              if (v72 == v7)
                goto LABEL_197;
              v75 = *(v72 - 2);
              v72 -= 2;
              v71 = v75;
            }
            while (v75 >= v66);
          }
          while (v8 < v72);
        }
        if (v8 - 2 != v7)
        {
          *v7 = *(v8 - 2);
          v7[1] = *(v8 - 1);
        }
        *((_QWORD *)v8 - 1) = v66;
        if ((unint64_t)v68 < v13)
        {
LABEL_83:
          result = std::__introsort<std::_ClassicAlgPolicy,void JSC::JSObject::forEachOwnIndexedProperty<(JSC::JSObject::SortMode)1,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1>(JSC::JSGlobalObject *,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1 const&)::{lambda(std::_ClassicAlgPolicy,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1)#1} &,std::tuple<unsigned int,unsigned int> *,false>(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v76 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSObject::forEachOwnIndexedProperty<(JSC::JSObject::SortMode)1,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1>(JSC::JSGlobalObject *,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1 const&)::{lambda(std::_ClassicAlgPolicy,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1)#1} &,std::tuple<unsigned int,unsigned int> *>(v7, (char *)v8 - 8);
        result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSObject::forEachOwnIndexedProperty<(JSC::JSObject::SortMode)1,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1>(JSC::JSGlobalObject *,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1 const&)::{lambda(std::_ClassicAlgPolicy,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1)#1} &,std::tuple<unsigned int,unsigned int> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v76)
            continue;
          goto LABEL_83;
        }
        a2 = (char *)(v8 - 2);
        if (!v76)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSObject::forEachOwnIndexedProperty<(JSC::JSObject::SortMode)1,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1>(JSC::JSGlobalObject *,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1 const&)::{lambda(std::_ClassicAlgPolicy,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1)#1} &,std::tuple<unsigned int,unsigned int> *>(unsigned int *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  int *v12;
  unsigned int v13;
  char *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  int *v19;
  int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  char *v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  _DWORD *v52;
  int v53;
  unsigned int *v54;

  v4 = (a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((_DWORD *)a2 - 2);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *((_DWORD *)a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      v9 = a1[2];
      v10 = (char *)(a1 + 3);
      v11 = *a1;
      v12 = (int *)(a1 + 1);
      v13 = *((_DWORD *)a2 - 2);
      if (v9 < *a1)
      {
        if (v13 >= v9)
        {
          v38 = a1[1];
          v39 = a1[3];
          *a1 = v9;
          a1[1] = v39;
          a1[2] = v11;
          a1[3] = v38;
          v40 = *((_DWORD *)a2 - 2);
          if (v40 >= v11)
            return result;
          a1[2] = v40;
          *((_DWORD *)a2 - 2) = v11;
          v12 = (int *)(a1 + 3);
        }
        else
        {
          *a1 = v13;
          *((_DWORD *)a2 - 2) = v11;
        }
        v10 = a2 - 4;
        goto LABEL_24;
      }
      if (v13 < v9)
      {
        a1[2] = v13;
        *((_DWORD *)a2 - 2) = v9;
        v33 = a1[3];
        a1[3] = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v33;
        v34 = a1[2];
        v35 = *a1;
        if (v34 < *a1)
        {
          *a1 = v34;
          a1[2] = v35;
LABEL_24:
          v41 = *v12;
          *v12 = *(_DWORD *)v10;
          *(_DWORD *)v10 = v41;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSObject::forEachOwnIndexedProperty<(JSC::JSObject::SortMode)1,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1>(JSC::JSGlobalObject *,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1 const&)::{lambda(std::_ClassicAlgPolicy,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1)#1} &,std::tuple<unsigned int,unsigned int> *>((int *)a1, a1 + 2, a1 + 4, (unsigned int *)a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSObject::forEachOwnIndexedProperty<(JSC::JSObject::SortMode)1,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1>(JSC::JSGlobalObject *,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1 const&)::{lambda(std::_ClassicAlgPolicy,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1)#1} &,std::tuple<unsigned int,unsigned int> *>((int *)a1, a1 + 2, a1 + 4, a1 + 6);
      v22 = *((_DWORD *)a2 - 2);
      v23 = a1[6];
      if (v22 < v23)
      {
        a1[6] = v22;
        *((_DWORD *)a2 - 2) = v23;
        v24 = a1[7];
        a1[7] = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v24;
        v25 = a1[6];
        v26 = a1[4];
        if (v25 < v26)
        {
          v27 = a1[5];
          v28 = a1[7];
          a1[4] = v25;
          a1[5] = v28;
          a1[6] = v26;
          a1[7] = v27;
          v29 = a1[2];
          if (v25 < v29)
          {
            v30 = a1[3];
            a1[2] = v25;
            a1[3] = v28;
            a1[4] = v29;
            a1[5] = v30;
            v31 = *a1;
            if (v25 < *a1)
            {
              v32 = a1[1];
              *a1 = v25;
              a1[1] = v28;
              a1[2] = v31;
              a1[3] = v32;
            }
          }
        }
      }
      return 1;
    default:
      v14 = (char *)(a1 + 4);
      v15 = a1[4];
      v16 = a1 + 2;
      v17 = a1[2];
      v19 = (int *)(a1 + 3);
      v18 = *a1;
      v20 = (int *)(a1 + 1);
      if (v17 >= *a1)
      {
        if (v15 >= v17)
          goto LABEL_28;
        v36 = a1[3];
        v37 = a1[5];
        a1[2] = v15;
        a1[3] = v37;
        a1[4] = v17;
        a1[5] = v36;
        v21 = a1;
      }
      else
      {
        if (v15 < v17)
        {
          v21 = a1;
          v16 = a1 + 4;
          v19 = (int *)(a1 + 5);
          goto LABEL_27;
        }
        v42 = a1[1];
        v43 = a1[3];
        *a1 = v17;
        a1[1] = v43;
        v21 = a1 + 2;
        a1[2] = v18;
        a1[3] = v42;
        v16 = a1 + 4;
        v20 = (int *)(a1 + 3);
        v19 = (int *)(a1 + 5);
      }
      if (v15 >= v18)
        goto LABEL_28;
LABEL_27:
      *v21 = v15;
      *v16 = v18;
      v44 = *v20;
      *v20 = *v19;
      *v19 = v44;
LABEL_28:
      v45 = (char *)(a1 + 6);
      if (a1 + 6 == (unsigned int *)a2)
        return 1;
      v46 = 0;
      v47 = 0;
      while (1)
      {
        v48 = *(_DWORD *)v14;
        if (*(_DWORD *)v45 < *(_DWORD *)v14)
        {
          v50 = *(_DWORD *)v45;
          v49 = *((_DWORD *)v45 + 1);
          v51 = v46;
          while (1)
          {
            v52 = (unsigned int *)((char *)a1 + v51);
            v53 = *(unsigned int *)((char *)a1 + v51 + 20);
            v52[6] = v48;
            v52[7] = v53;
            if (v51 == -16)
              break;
            v48 = v52[2];
            v51 -= 8;
            if (v48 <= v50)
            {
              v54 = (unsigned int *)((char *)a1 + v51 + 24);
              goto LABEL_36;
            }
          }
          v54 = a1;
LABEL_36:
          *v54 = v50;
          v54[1] = v49;
          if (++v47 == 8)
            return v45 + 8 == a2;
        }
        v14 = v45;
        v46 += 8;
        v45 += 8;
        if (v45 == a2)
          return 1;
      }
  }
}

int *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,void JSC::JSObject::forEachOwnIndexedProperty<(JSC::JSObject::SortMode)1,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1>(JSC::JSGlobalObject *,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1 const&)::{lambda(std::_ClassicAlgPolicy,JSC::objectConstructorValues(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1)#1} &,std::tuple<unsigned int,unsigned int> *>(int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  int *v4;
  unsigned int v5;
  int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v4 = (int *)(a2 + 1);
  v5 = *a2;
  v6 = result + 1;
  v7 = *result;
  v8 = *a3;
  if (*a2 >= *result)
  {
    if (v8 < v5)
    {
      *a2 = v8;
      *a3 = v5;
      v9 = a2[1];
      a2[1] = a3[1];
      a3[1] = v9;
      v10 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v10;
LABEL_10:
        v13 = *v6;
        *v6 = *v4;
        *v4 = v13;
      }
    }
  }
  else
  {
    if (v8 < v5)
    {
      *result = v8;
      *a3 = v7;
LABEL_9:
      v4 = (int *)(a3 + 1);
      goto LABEL_10;
    }
    *result = v5;
    *a2 = v7;
    v11 = result[1];
    result[1] = a2[1];
    a2[1] = v11;
    v12 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v12;
      v6 = (int *)(a2 + 1);
      goto LABEL_9;
    }
  }
  v14 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v14;
    v15 = a3[1];
    a3[1] = a4[1];
    a4[1] = v15;
    v16 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v16;
      v17 = a2[1];
      a2[1] = a3[1];
      a3[1] = v17;
      v18 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v18;
        v19 = result[1];
        result[1] = a2[1];
        a2[1] = v19;
      }
    }
  }
  return result;
}

_QWORD **JSC::PropertyTable::forEachProperty<void JSC::Structure::forEachProperty<JSC::toPropertyDescriptor(JSC::JSGlobalObject *,JSC::JSValue,JSC::PropertyDescriptor &,BOOL &)::{lambda(JSC::PropertyTableEntry const&)#1}>(JSC::VM &,JSC::toPropertyDescriptor(JSC::JSGlobalObject *,JSC::JSValue,JSC::PropertyDescriptor &,BOOL &)::{lambda(JSC::PropertyTableEntry const&)#1} const&)::{lambda(JSC::toPropertyDescriptor(JSC::JSGlobalObject *,JSC::JSValue,JSC::PropertyDescriptor &,BOOL &)::{lambda(JSC::PropertyTableEntry const&)#1} const&)#1}>(JSC::toPropertyDescriptor(JSC::JSGlobalObject *,JSC::JSValue,JSC::PropertyDescriptor &,BOOL &)::{lambda(JSC::PropertyTableEntry const&)#1} const&)const::{lambda(JSC::toPropertyDescriptor(JSC::JSGlobalObject *,JSC::JSValue,JSC::PropertyDescriptor &,BOOL &)::{lambda(JSC::PropertyTableEntry const&)#1} const*)#1}::operator()<unsigned int>(_QWORD **result, uint64_t a2)
{
  unsigned int v2;
  _QWORD **v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)*result + 7) + *((_DWORD *)*result + 6);
  if (v2)
  {
    v3 = result;
    v4 = a2 + 4 * *((unsigned int *)*result + 2);
    v5 = v4 + 16 * v2;
    do
    {
      if (*(_QWORD *)v4 != 1)
        result = JSC::toPropertyDescriptor(JSC::JSGlobalObject *,JSC::JSValue,JSC::PropertyDescriptor &,BOOL &)::{lambda(JSC::PropertyTableEntry const&)#1}::operator()((_QWORD **)*v3[1], *(_QWORD *)v4, *(_DWORD *)(v4 + 8));
      v4 += 16;
    }
    while (v4 != v5);
  }
  return result;
}

_QWORD **JSC::toPropertyDescriptor(JSC::JSGlobalObject *,JSC::JSValue,JSC::PropertyDescriptor &,BOOL &)::{lambda(JSC::PropertyTableEntry const&)#1}::operator()(_QWORD **result, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (_QWORD *)(*result)[5244];
  if (v3[152] == a2)
  {
    v8 = *result[2];
    if (a3 <= 63)
    {
      v9 = v8 + 16;
    }
    else
    {
      v9 = *(_QWORD *)(v8 + 8) - 8;
      a3 = 63 - a3;
    }
    v6 = (_QWORD *)(v9 + 8 * a3);
    v7 = result + 1;
    goto LABEL_10;
  }
  if (v3[134] == a2)
  {
    v10 = *result[2];
    if (a3 <= 63)
    {
      v11 = v10 + 16;
    }
    else
    {
      v11 = *(_QWORD *)(v10 + 8) - 8;
      a3 = 63 - a3;
    }
    v6 = (_QWORD *)(v11 + 8 * a3);
    v7 = result + 3;
    goto LABEL_10;
  }
  if (v3[326] == a2)
  {
    v4 = *result[2];
    if (a3 <= 63)
    {
      v5 = v4 + 16;
    }
    else
    {
      v5 = *(_QWORD *)(v4 + 8) - 8;
      a3 = 63 - a3;
    }
    v6 = (_QWORD *)(v5 + 8 * a3);
    v7 = result + 4;
LABEL_10:
    **v7 = *v6;
    return result;
  }
  if (v3[332] == a2)
  {
    v14 = *result[2];
    if (a3 <= 63)
    {
      v15 = v14 + 16;
    }
    else
    {
      v15 = *(_QWORD *)(v14 + 8) - 8;
      a3 = 63 - a3;
    }
    v6 = (_QWORD *)(v15 + 8 * a3);
    v7 = result + 5;
    goto LABEL_10;
  }
  if (v3[172] == a2)
  {
    v12 = *result[2];
    if (a3 <= 63)
    {
      v13 = v12 + 16;
    }
    else
    {
      v13 = *(_QWORD *)(v12 + 8) - 8;
      a3 = 63 - a3;
    }
    v6 = (_QWORD *)(v13 + 8 * a3);
    v7 = result + 6;
    goto LABEL_10;
  }
  if (v3[287] == a2)
  {
    v16 = *result[2];
    if (a3 <= 63)
    {
      v17 = v16 + 16;
    }
    else
    {
      v17 = *(_QWORD *)(v16 + 8) - 8;
      a3 = 63 - a3;
    }
    v6 = (_QWORD *)(v17 + 8 * a3);
    v7 = result + 7;
    goto LABEL_10;
  }
  return result;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Options::initialize(void)::$_0 &&>>(WTF *a1)
{
  WTF *v1;
  int v2;
  WTF *v3;
  int v4;
  WTF *v5;
  WTF *v6;
  int v7;
  WTF *v8;
  int v9;
  WTF *v10;
  int v11;
  WTF *v12;
  int v13;
  JSC::OptionsHelper *v14;
  int v15;
  WTF *v16;
  int v17;
  double v18;
  uint64_t v19;
  uint8x8_t v20;
  const char **v21;
  const char *v22;
  char v23;
  JSC::Options *v24;
  const char *v25;
  unsigned int v26;

  word_1ECF4C232 = 1;
  dword_1ECF4C234 = 0;
  qword_1ECF4C238 = 0;
  dword_1ECF4C240 = 16843009;
  *(_WORD *)&byte_1ECF4C244 = 257;
  byte_1ECF4C246 = 0;
  qword_1ECF4C248 = 0x2000000500000;
  dword_1ECF4C250 = 0x10000;
  word_1ECF4C254 = 0;
  dword_1ECF4C258 = 0;
  *(int *)((char *)&dword_1ECF4C258 + 3) = 0;
  xmmword_1ECF4C260 = xmmword_199158E60;
  dword_1ECF4C270 = 0;
  *(int *)((char *)&dword_1ECF4C270 + 3) = 0;
  *(_DWORD *)&byte_1ECF4C277 = 65793;
  *(_QWORD *)&dword_1ECF4C27C = 0x80000003E8;
  byte_1ECF4C284 = 1;
  qword_1ECF4C2A8 = 0;
  *(_WORD *)((char *)&dword_1ECF4C28A + 3) = 0;
  *(_QWORD *)&byte_1ECF4C285 = 0;
  *(_DWORD *)((char *)&xmmword_1ECF4C290 + 15) = 0;
  xmmword_1ECF4C290 = 0uLL;
  dword_1ECF4C2B0 = 0;
  *(_OWORD *)algn_1ECF4C2B4 = v26;
  HIDWORD(qword_1ECF4C2C0) = 0;
  dword_1ECF4C2C8 = 0;
  HIDWORD(qword_1ECF4C2D8) = 0;
  unk_1ECF4C2CC = v26;
  dword_1ECF4C2E0 = 0;
  HIDWORD(qword_1ECF4C2F0) = 0;
  *(_OWORD *)algn_1ECF4C2E4 = v26;
  xmmword_1ECF4C308 = 0uLL;
  *(_OWORD *)&qword_1ECF4C318 = 0uLL;
  xmmword_1ECF4C2F8 = 0uLL;
  word_1ECF4C328 = 256;
  unk_1ECF4C33A = 0;
  *(_QWORD *)&byte_1ECF4C341 = 0;
  qword_1ECF4C32A = 0;
  qword_1ECF4C332 = 0;
  word_1ECF4C349 = 257;
  byte_1ECF4C34B = 0;
  qword_1ECF4C350 = 0x3FF0000000000000;
  dword_1ECF4C358 = 0x1000000;
  qword_1ECF4C35C = 0x10000002000000;
  xmmword_1ECF4C368 = xmmword_199158E70;
  xmmword_1ECF4C378 = xmmword_199158E80;
  xmmword_1ECF4C388 = xmmword_199158E90;
  xmmword_1ECF4C398 = xmmword_199158EA0;
  xmmword_1ECF4C3A8 = xmmword_199158EB0;
  xmmword_1ECF4C3B8 = xmmword_199158EC0;
  qword_1ECF4C3C8 = 0x4000000000000000;
  byte_1ECF4C3D0 = 1;
  xmmword_1ECF4C3D8 = (__int128)vdupq_n_s64(0x3FD3333333333333uLL);
  xmmword_1ECF4C3E8 = xmmword_199158ED0;
  qword_1ECF4C3F8 = 0;
  byte_1ECF4C400 = 0;
  qword_1ECF4C408 = 0x3FF6666666666666;
  dword_1ECF4C410 = 100000;
  qword_1ECF4C414 = 0x101010000010100;
  byte_1ECF4C41C = 0;
  dword_1ECF4C420 = 2;
  word_1ECF4C428 = 0;
  dword_1ECF4C424 = 0;
  byte_1ECF4C42A = 1;
  dword_1ECF4C42C = 8;
  word_1ECF4C430 = 257;
  dword_1ECF4C434 = 8;
  word_1ECF4C438 = 1;
  xmmword_1ECF4C43C = xmmword_199158EE0;
  dword_1ECF4C44C = 2;
  qword_1ECF4C450 = 0x3FE051EB851EB852;
  dword_1ECF4C458 = 16843009;
  word_1ECF4C45C = 257;
  byte_1ECF4C45E = 0;
  dword_1ECF4C460 = 20000;
  byte_1ECF4C464 = 1;
  v1 = (WTF *)WTF::numberOfProcessorCores(a1);
  if ((int)v1 <= 2)
    v2 = 2;
  else
    v2 = 3;
  LODWORD(qword_1ECF4C468) = v2;
  v3 = (WTF *)WTF::numberOfProcessorCores(v1);
  if ((int)v3 <= 2)
    v4 = 1;
  else
    v4 = 2;
  HIDWORD(qword_1ECF4C468) = v4;
  v5 = (WTF *)WTF::numberOfProcessorCores(v3);
  dword_1ECF4C470 = 1;
  v6 = (WTF *)WTF::numberOfProcessorCores(v5);
  if ((int)v6 <= 2)
    v7 = 2;
  else
    v7 = (int)v6;
  dword_1ECF4C474 = v7 - 1;
  v8 = (WTF *)WTF::numberOfProcessorCores(v6);
  if ((int)v8 >= 3)
    v9 = 0;
  else
    v9 = -1;
  dword_1ECF4C478 = v9;
  v10 = (WTF *)WTF::numberOfProcessorCores(v8);
  if ((int)v10 >= 3)
    v11 = 0;
  else
    v11 = -2;
  dword_1ECF4C47C = v11;
  v12 = (WTF *)WTF::numberOfProcessorCores(v10);
  if ((int)v12 >= 3)
    v13 = 0;
  else
    v13 = -1;
  dword_1ECF4C480 = v13;
  word_1ECF4C484 = 0;
  byte_1ECF4C486 = 1;
  dword_1ECF4C488 = 0;
  word_1ECF4C48C = 1;
  xmmword_1ECF4C490 = xmmword_199158EF0;
  xmmword_1ECF4C4A0 = xmmword_199158F00;
  xmmword_1ECF4C4B0 = xmmword_199158F10;
  xmmword_1ECF4C4C0 = xmmword_199158F20;
  qword_1ECF4C4D0 = 0x2710000000C8;
  qword_1ECF4C4D8 = 0x3FF0000000000000;
  byte_1ECF4C4E0 = 0;
  xmmword_1ECF4C4E4 = xmmword_199158F30;
  xmmword_1ECF4C4F4 = xmmword_199158F40;
  unk_1ECF4C504 = xmmword_199158F50;
  xmmword_1ECF4C514 = xmmword_199158F60;
  xmmword_1ECF4C524 = xmmword_199158F70;
  xmmword_1ECF4C534 = xmmword_199158F80;
  dword_1ECF4C544 = 5;
  xmmword_1ECF4C548 = xmmword_199158F90;
  xmmword_1ECF4C558 = xmmword_199158FA0;
  qword_1ECF4C568 = 0x3FF0000000000000;
  qword_1ECF4C570 = 0x64000000C8;
  v14 = (JSC::OptionsHelper *)WTF::numberOfProcessorCores(v12);
  if ((int)v14 >= 8)
    v15 = 8;
  else
    v15 = (int)v14;
  if (v15 <= 1)
    v15 = 1;
  dword_1ECF4C578 = v15;
  byte_1ECF4C57C = 1;
  qword_1ECF4C580 = 1000;
  xmmword_1ECF4C588 = xmmword_199158FB0;
  dword_1ECF4C598 = 0;
  xmmword_1ECF4C5A0 = xmmword_199158FC0;
  qword_1ECF4C5B0 = 0x3FA999999999999ALL;
  byte_1ECF4C5B8 = 0;
  dword_1ECF4C5BC = 0;
  dword_1ECF4C5C0 = 256;
  byte_1ECF4C5C4 = 0;
  dword_1ECF4C5C8 = 0;
  word_1ECF4C5CC = 256;
  dword_1ECF4C5CE = 0;
  qword_1ECF4C5D4 = 0;
  *(uint64_t *)((char *)&qword_1ECF4C5D4 + 7) = 0;
  dword_1ECF4C5E4 = 1000;
  byte_1ECF4C5E8 = 0;
  qword_1ECF4C5EC = 0x280000000CLL;
  byte_1ECF4C5F4 = 0;
  qword_1ECF4C5F8 = 0;
  word_1ECF4C600 = 0;
  qword_1ECF4C608 = 0x3FA999999999999ALL;
  word_1ECF4C610 = 0;
  byte_1ECF4C612 = 0;
  qword_1ECF4C614 = 0x6400000003;
  dword_1ECF4C61C = 100;
  word_1ECF4C620 = 0;
  *(int *)((char *)&dword_1ECF4C624 + 3) = 0;
  dword_1ECF4C624 = 0;
  dword_1ECF4C62C = 100;
  word_1ECF4C630 = 0;
  byte_1ECF4C632 = 0;
  qword_1ECF4C634 = 0;
  byte_1ECF4C63C = 0;
  qword_1ECF4C640 = 0x3FB999999999999ALL;
  word_1ECF4C648 = 0;
  qword_1ECF4C64C = 0;
  dword_1ECF4C654 = 0;
  byte_1ECF4C658 = 1;
  dword_1ECF4C65C = 0;
  byte_1ECF4C660 = 0;
  qword_1ECF4C664 = 1;
  byte_1ECF4C66C = 0;
  *(_DWORD *)((char *)&qword_1ECF4C670 + 7) = 0;
  qword_1ECF4C670 = 0;
  qword_1ECF4C680 = 0x3F50624DD2F1A9FCLL;
  qword_1ECF4C688 = 60000;
  dword_1ECF4C694 = 0;
  byte_1ECF4C690 = 0;
  word_1ECF4C698 = 1;
  byte_1ECF4C69A = 1;
  qword_1ECF4C69C = 0x300000003;
  word_1ECF4C6A4 = 0;
  byte_1ECF4C6A6 = 1;
  *(uint64_t *)((char *)&qword_1ECF4C6A7 + 6) = 0;
  qword_1ECF4C6A7 = 0;
  word_1ECF4C6B5 = 257;
  byte_1ECF4C6B7 = 0;
  qword_1ECF4C6B8 = 2;
  *(_DWORD *)((char *)&qword_1ECF4C6B8 + 7) = 0;
  dword_1ECF4C6C3 = 65793;
  qword_1ECF4C6C8 = 5000;
  dword_1ECF4C6D0 = dword_1ECF4C420;
  word_1ECF4C6D4 = 257;
  xmmword_1ECF4C6D8 = xmmword_199158FD0;
  qword_1ECF4C6E8 = 0xF00000001;
  word_1ECF4C6F0 = 1;
  dword_1ECF4C6F4 = 128;
  word_1ECF4C6F8 = 0;
  dword_1ECF4C6FC = 3;
  word_1ECF4C700 = 0;
  word_1ECF4C706 = 257;
  dword_1ECF4C702 = 16843009;
  dword_1ECF4C708 = 0;
  HIDWORD(qword_1ECF4C718) = 0;
  unk_1ECF4C70C = v26;
  word_1ECF4C720 = 1;
  byte_1ECF4C722 = 1;
  *(int *)((char *)&dword_1ECF4C723 + 3) = 0;
  dword_1ECF4C723 = 0;
  dword_1ECF4C72C = -1;
  qword_1ECF4C730 = 0;
  word_1ECF4C738 = 0;
  qword_1ECF4C740 = 0x3FE0000000000000;
  qword_1ECF4C748 = 0;
  qword_1ECF4C750 = 0x4024000000000000;
  word_1ECF4C758 = 0;
  qword_1ECF4C75C = 4;
  qword_1ECF4C768 = 1300000000;
  byte_1ECF4C770 = 0;
  dword_1ECF4C774 = 424242;
  qword_1ECF4C778 = 0x3FE0000000000000;
  byte_1ECF4C788 = 0;
  qword_1ECF4C780 = 0;
  qword_1ECF4C789 = 0x100000001000101;
  dword_1ECF4C794 = 4096;
  byte_1ECF4C798 = 0;
  byte_1ECF4C79D = 1;
  dword_1ECF4C799 = 16843009;
  word_1ECF4C79E = 0;
  qword_1ECF4C7A0 = 0x101010101010101;
  qword_1ECF4C7A8 = 0x10000010000;
  dword_1ECF4C7B0 = 16777472;
  word_1ECF4C7B4 = 0;
  byte_1ECF4C7B6 = 1;
  JSC::OptionsHelper::initialize(v14);
  *((_QWORD *)&xmmword_1ECF4C3A8 + 1) = 0x3FE3333333333333;
  *((_QWORD *)&xmmword_1ECF4C3B8 + 1) = 0x3FF6666666666666;
  *(_QWORD *)&xmmword_1ECF4C3D8 = 0x3FF0000000000000;
  byte_1ECF4C3D0 = 0;
  v17 = WTF::numberOfProcessorCores(v16);
  v18 = 0.0;
  if (v17 < 2)
    v18 = 1.0;
  qword_1ECF4C3F8 = *(_QWORD *)&v18;
  *(_QWORD *)&xmmword_1ECF4C368 = 0x3FE999999999999ALL;
  *(_QWORD *)&xmmword_1ECF4C378 = 0x3FECCCCCCCCCCCCDLL;
  if ((_BYTE)dword_1ECF4C702 && !(_BYTE)word_1ECF4C720)
    *((_QWORD *)&xmmword_1ECF4C6D8 + 1) = 0x64000005DCLL;
  v19 = (uint64_t)_NSGetEnviron();
  v21 = *(const char ***)v19;
  v22 = **(const char ***)v19;
  if (v22)
  {
    v23 = 1;
    do
    {
      ++v21;
      while (1)
      {
        v19 = strncmp("JSC_", v22, 4uLL);
        if (!(_DWORD)v19)
        {
          v24 = (JSC::Options *)(v22 + 4);
          v19 = JSC::Options::setOptionWithoutAlias(v24, (const char *)1);
          if ((v19 & 1) == 0)
          {
            v19 = JSC::Options::setAliasedOption(v24, (const char *)1);
            if (!(_DWORD)v19)
              break;
          }
        }
        v25 = *v21++;
        v22 = v25;
        if (!v25)
        {
          if (v23 & 1 | (HIBYTE(word_1ECF4C232) == 0))
            goto LABEL_41;
LABEL_39:
          __break(0xC471u);
          JUMPOUT(0x198B79500);
        }
      }
      v19 = WTF::dataLog<char [24],char *,char [2]>(v21 - 1);
      v23 = 0;
      v22 = *v21;
    }
    while (*v21);
    if (!HIBYTE(word_1ECF4C232))
      goto LABEL_41;
    goto LABEL_39;
  }
LABEL_41:
  JSC::Options::notifyOptionsChanged((JSC::Options *)v19, v20);
  if ((_BYTE)word_1ECF4C6B5)
  {
    if (byte_1ECF4C090)
    {
      __break(0xC471u);
      JUMPOUT(0x198B79590);
    }
    byte_1ECF4C0A8 = 1;
  }
}

void JSC::OptionsHelper::initialize(JSC::OptionsHelper *this)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  xmmword_1ECF58F40 = 0u;
  *(_OWORD *)&qword_1ECF58F50 = 0u;
  xmmword_1ECF58F20 = 0u;
  *(_OWORD *)&qword_1ECF58F30 = 0u;
  JSC::OptionsHelper::g_metadata = 0;
  v1 = (void *)WTF::fastMalloc((WTF *)0x588);
  bzero(v1, 0x588uLL);
  memcpy(v1, &unk_1ECF4C230, 0x588uLL);
  v9 = JSC::OptionsHelper::g_metadata;
  JSC::OptionsHelper::g_metadata = (uint64_t)v1;
  if (v9)
    WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
}

uint64_t WTF::dataLog<char [24],char *,char [2]>(const char **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "ERROR: invalid option: ");
  WTF::PrintStream::printf(v4, "%s", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

_BYTE *WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<std::span<char const,18446744073709551615ul>,void>>(_BYTE *result, unsigned int a2, int a3, uint64_t a4, _OWORD *a5, unsigned int a6)
{
  int **v10;
  int *v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  _WORD *v15;
  int8x16_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  int8x16_t v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;
  char *v40;
  __int16 v41;
  unsigned __int128 *v42;
  unsigned __int128 *v43;
  unsigned __int128 v44;
  char v45;
  _DWORD *v46;
  int8x16x2_t v47;
  int8x16x2_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;

  v10 = (int **)result;
  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(a2 + 20), &v46);
        v11 = v46;
        if (v46)
        {
          v12 = v46 + 5;
          *v46 = 2;
          v11[1] = a2;
          *((_QWORD *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          if (a4)
          {
            v13 = *(_BYTE **)(a4 + 8);
            v14 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) != 0)
            {
              if ((_DWORD)v14 == 1)
              {
                *v12 = *v13;
              }
              else if ((_DWORD)v14)
              {
                memcpy(v11 + 5, v13, v14);
              }
            }
            else
            {
              if (v14 < 0x10)
              {
                v42 = (unsigned __int128 *)(v11 + 5);
              }
              else
              {
                v42 = (unsigned __int128 *)&v12[v14 & 0xFFFFFFF0];
                v43 = (unsigned __int128 *)(v11 + 5);
                do
                {
                  v44 = (unsigned __int128)vld2q_s8(v13);
                  v13 += 32;
                  *v43++ = v44;
                }
                while (v43 != v42);
              }
              while (v42 != (unsigned __int128 *)&v12[v14])
              {
                v45 = *v13;
                v13 += 2;
                *(_BYTE *)v42 = v45;
                v42 = (unsigned __int128 *)((char *)v42 + 1);
              }
            }
            v18 = *(unsigned int *)(a4 + 4);
          }
          else
          {
            v18 = 0;
          }
          result = &v12[v18];
          if (a6 == 1)
          {
            *result = *(_BYTE *)a5;
          }
          else if (a6)
          {
            result = memcpy(result, a5, a6);
          }
        }
        goto LABEL_38;
      }
LABEL_41:
      v11 = 0;
      goto LABEL_38;
    }
LABEL_40:
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_38;
  }
  if (!a2)
    goto LABEL_40;
  if (a2 > 0x7FFFFFEF)
    goto LABEL_41;
  result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20), &v46);
  v11 = v46;
  if (v46)
  {
    v15 = v46 + 5;
    *v46 = 2;
    v11[1] = a2;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    if (a4)
    {
      v16 = *(int8x16_t **)(a4 + 8);
      v17 = *(unsigned int *)(a4 + 4);
      if ((*(_BYTE *)(a4 + 16) & 4) != 0)
      {
        v19 = (char *)&v15[v17];
        if (v17 >= 0x40)
        {
          v20 = (char *)&v15[v17 & 0xFFFFFFC0];
          v21 = 0uLL;
          v22 = (char *)(v11 + 5);
          do
          {
            v47.val[0] = *v16;
            v23 = v16[1];
            v49.val[0] = v16[2];
            v24 = v16[3];
            v16 += 4;
            v25 = v24;
            v49.val[1] = 0uLL;
            v51.val[0] = v23;
            v47.val[1] = 0uLL;
            v26 = v22;
            vst2q_s8(v26, v47);
            v26 += 32;
            v51.val[1] = 0uLL;
            vst2q_s8(v26, v51);
            v27 = v22 + 64;
            vst2q_s8(v27, v49);
            v28 = v22 + 96;
            vst2q_s8(v28, *(int8x16x2_t *)(&v21 - 1));
            v22 += 128;
          }
          while (v22 != v20);
        }
        else
        {
          v20 = (char *)(v11 + 5);
        }
        while (v20 != v19)
        {
          v29 = v16->u8[0];
          v16 = (int8x16_t *)((char *)v16 + 1);
          *(_WORD *)v20 = v29;
          v20 += 2;
        }
      }
      else if ((_DWORD)v17 == 1)
      {
        *v15 = v16->i16[0];
      }
      else if ((_DWORD)v17)
      {
        result = memcpy(v11 + 5, v16, 2 * v17);
      }
      v30 = *(unsigned int *)(a4 + 4);
    }
    else
    {
      v30 = 0;
    }
    v31 = (char *)&v15[v30];
    v32 = &v31[2 * a6];
    if ((a6 & 0xFFFFFFC0) != 0)
    {
      v33 = &v31[2 * (a6 & 0xFFFFFFC0)];
      v34 = 0uLL;
      do
      {
        v48.val[0] = (int8x16_t)*a5;
        v35 = *((int8x16_t *)a5 + 1);
        v50.val[0] = (int8x16_t)a5[2];
        v36 = a5[3];
        a5 += 4;
        v37 = v36;
        v50.val[1] = 0uLL;
        v52.val[0] = v35;
        v48.val[1] = 0uLL;
        v38 = v31;
        vst2q_s8(v38, v48);
        v38 += 32;
        v52.val[1] = 0uLL;
        vst2q_s8(v38, v52);
        v39 = v31 + 64;
        vst2q_s8(v39, v50);
        v40 = v31 + 96;
        vst2q_s8(v40, *(int8x16x2_t *)(&v34 - 1));
        v31 += 128;
      }
      while (v31 != v33);
      v31 = v33;
    }
    while (v31 != v32)
    {
      v41 = *(unsigned __int8 *)a5;
      a5 = (_OWORD *)((char *)a5 + 1);
      *(_WORD *)v31 = v41;
      v31 += 2;
    }
  }
LABEL_38:
  *v10 = v11;
  return result;
}

_BYTE *WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(_BYTE *result, unsigned int a2, int a3, uint64_t a4, int8x16_t *a5, unsigned int a6)
{
  _QWORD *v10;
  _DWORD *v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  _WORD *v15;
  int8x16_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  char *v31;
  unsigned __int128 *v32;
  unsigned __int128 *v33;
  unsigned __int128 v34;
  char v35;
  _DWORD *v36;
  int8x16x2_t v37;
  int8x16x2_t v38;
  int8x16x2_t v39;

  v10 = result;
  if (a3)
  {
    if ((a2 & 0x80000000) == 0)
    {
      result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(a2 + 20), &v36);
      v11 = v36;
      if (v36)
      {
        v12 = v36 + 5;
        *v36 = 2;
        v11[1] = a2;
        *((_QWORD *)v11 + 1) = v11 + 5;
        v11[4] = 4;
        if (a4)
        {
          v13 = *(_BYTE **)(a4 + 8);
          v14 = *(unsigned int *)(a4 + 4);
          if ((*(_BYTE *)(a4 + 16) & 4) != 0)
          {
            if ((_DWORD)v14 == 1)
            {
              *v12 = *v13;
            }
            else if ((_DWORD)v14)
            {
              memcpy(v11 + 5, v13, v14);
            }
          }
          else
          {
            if (v14 < 0x10)
            {
              v32 = (unsigned __int128 *)(v11 + 5);
            }
            else
            {
              v32 = (unsigned __int128 *)&v12[v14 & 0xFFFFFFF0];
              v33 = (unsigned __int128 *)(v11 + 5);
              do
              {
                v34 = (unsigned __int128)vld2q_s8(v13);
                v13 += 32;
                *v33++ = v34;
              }
              while (v33 != v32);
            }
            while (v32 != (unsigned __int128 *)&v12[v14])
            {
              v35 = *v13;
              v13 += 2;
              *(_BYTE *)v32 = v35;
              v32 = (unsigned __int128 *)((char *)v32 + 1);
            }
          }
          v18 = *(unsigned int *)(a4 + 4);
        }
        else
        {
          v18 = 0;
        }
        v12[v18] = 61;
        result = &v12[v18 + 1];
        if (a6 == 1)
        {
          *result = a5->i8[0];
        }
        else if (a6)
        {
          result = memcpy(result, a5, a6);
        }
      }
      goto LABEL_31;
    }
LABEL_33:
    v11 = 0;
    goto LABEL_31;
  }
  if (a2 > 0x7FFFFFEF)
    goto LABEL_33;
  result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20), &v36);
  v11 = v36;
  if (v36)
  {
    v15 = v36 + 5;
    *v36 = 2;
    v11[1] = a2;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    if (a4)
    {
      v16 = *(int8x16_t **)(a4 + 8);
      v17 = *(unsigned int *)(a4 + 4);
      if ((*(_BYTE *)(a4 + 16) & 4) != 0)
      {
        v19 = (char *)&v15[v17];
        if (v17 >= 0x40)
        {
          v20 = (char *)&v15[v17 & 0xFFFFFFC0];
          v21 = 0uLL;
          v22 = (char *)(v11 + 5);
          do
          {
            v37.val[0] = *v16;
            v23 = v16[1];
            v38.val[0] = v16[2];
            v24 = v16[3];
            v16 += 4;
            v25 = v24;
            v38.val[1] = 0uLL;
            v39.val[0] = v23;
            v37.val[1] = 0uLL;
            v26 = v22;
            vst2q_s8(v26, v37);
            v26 += 32;
            v39.val[1] = 0uLL;
            vst2q_s8(v26, v39);
            v27 = v22 + 64;
            vst2q_s8(v27, v38);
            v28 = v22 + 96;
            vst2q_s8(v28, *(int8x16x2_t *)(&v21 - 1));
            v22 += 128;
          }
          while (v22 != v20);
        }
        else
        {
          v20 = (char *)(v11 + 5);
        }
        while (v20 != v19)
        {
          v29 = v16->u8[0];
          v16 = (int8x16_t *)((char *)v16 + 1);
          *(_WORD *)v20 = v29;
          v20 += 2;
        }
      }
      else if ((_DWORD)v17 == 1)
      {
        *v15 = v16->i16[0];
      }
      else if ((_DWORD)v17)
      {
        memcpy(v11 + 5, v16, 2 * v17);
      }
      v30 = *(unsigned int *)(a4 + 4);
    }
    else
    {
      v30 = 0;
    }
    v31 = (char *)&v15[v30];
    *(_WORD *)v31 = 61;
    result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v31 + 2, a5, a6);
  }
LABEL_31:
  *v10 = v11;
  return result;
}

uint64_t JSC::PredictionFileCreatingFuzzerAgent::PredictionFileCreatingFuzzerAgent(uint64_t result)
{
  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)result = off_1E35AC890;
  return result;
}

uint64_t JSC::PredictionFileCreatingFuzzerAgent::getPredictionInternal(double a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  const char *v15;
  _DWORD *v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _DWORD *v26;

  v10 = *(_DWORD *)(a5 + 24);
  v11 = v10 > 0x33;
  v12 = (1 << v10) & 0x98C01858C070BLL;
  if (v11 || v12 == 0)
  {
    result = 65;
    __break(0xC471u);
  }
  else
  {
    WTF::String::utf8((uint64_t *)(a5 + 40), 0, a6, a7, a8, a9, a10, &v26, a2);
    v16 = v26;
    v17 = v26 + 4;
    if (!v26)
      v17 = 0;
    WTF::dataLogF((WTF *)"%s:%llx\n", v15, v17, a6);
    if (v16)
    {
      if (*v16 == 1)
        WTF::fastFree((unint64_t)v16, v18, v19, v20, v21, v22, v23, v24);
      else
        --*v16;
    }
    return a6;
  }
  return result;
}

unsigned int *JSC::ProgramExecutable::destroy(JSC::ProgramExecutable *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _DWORD *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *result;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  v9 = (_QWORD *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v9)
  {
    if (*v9)
      WTF::fastFree(*v9 - 16, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v10 + 8))(v10, a2);
    else
      --v10[2];
  }
  v11 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *, JSC::JSCell *))(*(_QWORD *)v11 + 32))(v11, a2);
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    v16 = result + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 32))(result);
    }
  }
  return result;
}

void JSC::ProgramExecutable::visitChildren(JSC::ProgramExecutable *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD **v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  JSC::ProgramExecutable *v27;

  JSC::GlobalExecutable::visitChildren((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  v10 = (_QWORD **)*((_QWORD *)this + 12);
  if (v10)
  {
    v27 = this;
    v11 = (unsigned __int8 *)this + 4;
    while (1)
    {
      v12 = *v11;
      if ((v12 & 0x40) != 0)
        break;
      v13 = __ldaxr(v11);
      if (v13 == v12)
      {
        if (!__stxr(v12 | 0x40, v11))
          goto LABEL_9;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v11);
LABEL_9:
    v14 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::begin(v10);
    v22 = v14;
    v23 = (_QWORD *)v15;
    if (*v10)
      v24 = (uint64_t)&(*v10)[2 * *((unsigned int *)*v10 - 1)];
    else
      v24 = 0;
    if ((_QWORD *)v24 != v14)
    {
      do
      {
        v25 = v22[1];
        if (!v25)
          goto LABEL_16;
        if ((v25 & 8) != 0)
        {
          v26 = 0;
          if ((*(_BYTE *)(v25 - 79) & 1) == 0)
            goto LABEL_24;
        }
        else
        {
          v26 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v25 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v16, v17, v18, v19, v20, v21);
          if (((*(_QWORD *)((v25 & 0xFFFFFFFFFFFFC000) + v26 + 8 * ((v25 >> 10) & 0xF) + 0x28) >> (v25 >> 4)) & 1) == 0)
            goto LABEL_24;
        }
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_16;
LABEL_24:
        JSC::SlotVisitor::appendSlow((uint64_t)a2, v25, v26, v17, v18, v19, v20, v21);
LABEL_16:
        while (1)
        {
          v22 += 2;
          if (v22 == v23)
            break;
          if (*v22 < 0xFFFFFFFFFFFFFFFELL)
            goto LABEL_18;
        }
        v22 = v23;
LABEL_18:
        ;
      }
      while (v22 != (_QWORD *)v24);
    }
    WTF::Locker<JSC::JSCellLock,void>::~Locker(&v27, v15, v16, v17, v18, v19, v20, v21);
  }
}

void JSC::ProgramExecutable::visitChildren(JSC::ProgramExecutable *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  _QWORD **v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  _QWORD v23[2];
  uint64_t v24;
  char v25;

  v23[0] = a2;
  v23[1] = this;
  v25 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v24 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198B7A0BCLL);
  }
  *((_QWORD *)a2 + 11) = v23;
  JSC::GlobalExecutable::visitChildren((unint64_t)this, a2, a3);
  v6 = (_QWORD **)*((_QWORD *)this + 12);
  if (v6)
  {
    v7 = (unsigned __int8 *)this + 4;
    while (1)
    {
      v8 = *v7;
      if ((v8 & 0x40) != 0)
        break;
      v9 = __ldaxr(v7);
      if (v9 == v8)
      {
        if (!__stxr(v8 | 0x40, v7))
          goto LABEL_11;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_11:
    v10 = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::begin(v6);
    v17 = v10;
    v19 = v18;
    if (*v6)
      v20 = (uint64_t)&(*v6)[2 * *((unsigned int *)*v6 - 1)];
    else
      v20 = 0;
    if ((_QWORD *)v20 == v10)
    {
LABEL_22:
      while (1)
      {
        v21 = *v7;
        if ((v21 & 0xC0) != 0x40)
          break;
        v22 = __ldxr(v7);
        if (v22 == v21)
        {
          if (!__stxr(v21 & 0xBF, v7))
            goto LABEL_21;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 4, 0, v11, v12, v13, v14, v15, v16);
    }
    else
    {
      do
      {
        (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, v17[1]);
        while (1)
        {
          v17 += 2;
          if (v17 == v19)
            break;
          if (*v17 < 0xFFFFFFFFFFFFFFFELL)
            goto LABEL_17;
        }
        v17 = v19;
LABEL_17:
        ;
      }
      while (v17 != (_QWORD *)v20);
      if (this)
        goto LABEL_22;
    }
  }
LABEL_21:
  *(_QWORD *)(v23[0] + 88) = v24;
}

_QWORD *JSC::ProgramExecutable::initializeGlobalProperties(JSC::ProgramExecutable *this, JSC::VM *a2, JSC::JSGlobalObject *a3, JSC::JSScope *a4)
{
  char *v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  WTF::AtomStringImpl *v13;
  const WTF::StringImpl *v14;
  const JSC::PropertyTable *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v29;
  int v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl **v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  WTF::StringImpl **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  char v56;
  BOOL v57;
  char v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t i;
  _DWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  unsigned int v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t *v90;
  WTF::StringImpl *v91;
  int v92;
  int v93;
  char v94;
  int v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  uint64_t **v129;
  uint64_t *v130;
  unint64_t v131;
  unsigned int v132;
  WTF::AtomStringImpl *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  unint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  unint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  _QWORD *v158;
  _QWORD *TypeError;
  WTF::StringImpl *v160;
  int v161;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t *v167;
  unsigned __int8 *v168;
  uint64_t v169;
  uint64_t v171;
  JSC::WatchpointSet *v172;
  int v173;
  uint64_t *v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  const WTF::String *v198;
  WTF::StringImpl *v199;
  unint64_t v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  SourceProvider *var0;
  uint64_t v210;
  _BYTE *v211;
  unint64_t v212;
  unint64_t ErrorForDuplicateGlobalVariableDeclaration;
  WTF::AtomStringImpl *v214;
  WTF::AtomStringImpl *v215;
  WTF::AtomStringImpl *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  int v225;
  WTF::StringImpl *v226;
  unint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  WTF::StringImpl *v236;
  int v237;
  unint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  int v247;
  _BYTE *v248;
  JSC::JSCell *v249;
  _BYTE *v250;
  _QWORD *v251;
  unsigned __int8 *v252;
  uint64_t v253;
  uint64_t *v254;
  unint64_t v255;
  _QWORD *v256;
  SourceCode v257;
  WTF::StringImpl *v258;
  __int128 v259;
  __int128 v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  WTF::StringImpl *v265;
  unsigned int v266;
  __int16 v267;
  WTF::StringImpl *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int *v272[2];
  unint64_t v273;
  JSC::JSGlobalObject *v274;
  uint64_t v275;
  uint64_t v276;
  __int16 v277;
  __int16 v278;
  char v279;
  uint64_t v280;
  char v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284[2];

  v8 = (char *)a2 + 64;
  v9 = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v9 + 1;
  if (!v9 && *((_QWORD *)a2 + 2))
    JSC::VMTraps::deferTerminationSlow((uint64_t)a2 + 64);
  if (!a4)
  {
    __break(0xC471u);
    JUMPOUT(0x198B7B14CLL);
  }
  if (!a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198B7B16CLL);
  }
  LOBYTE(v10) = 0;
  LODWORD(v258) = 0x100000;
  v259 = 0u;
  v260 = 0u;
  v261 = 0;
  v262 = -1;
  v263 = -1;
  v264 = -1;
  v265 = 0;
  v266 = -1;
  v267 = 0;
  v11 = *((_QWORD *)a3 + 252);
  if (v11)
    v10 = (*(unsigned __int16 *)(v11 + 48) >> 6) & 1;
  if (byte_1ECF4C274)
    LOBYTE(v10) = 1;
  if (byte_1ECF4C275)
    LOBYTE(v10) = 1;
  if (*(_QWORD *)(*((_QWORD *)a3 + 7) + 93168))
    LOBYTE(v10) = v10 | 2;
  if (*(_QWORD *)(*((_QWORD *)a3 + 7) + 93280))
    v12 = v10 | 4;
  else
    v12 = v10;
  v251 = (_QWORD *)((char *)this + 40);
  v256 = (_QWORD *)JSC::CodeCache::getUnlinkedGlobalCodeBlock<JSC::UnlinkedProgramCodeBlock,JSC::ProgramExecutable>(*((_QWORD *)a2 + 11642), a2, (uint64_t)this, (uint64_t)this + 40, *((_BYTE *)this + 68) & 1, 0, v12, (uint64_t)&v258, 0);
  v21 = *((_QWORD *)a3 + 252);
  if (v21)
    (*(void (**)(uint64_t, JSC::JSGlobalObject *, _QWORD, _QWORD, WTF::StringImpl **))(*(_QWORD *)v21 + 16))(v21, a3, *v251, v266, &v265);
  v248 = v8;
  if ((_BYTE)v267)
  {
    v208 = *v251;
    if (*v251)
      ++*(_DWORD *)(v208 + 8);
    v257.var0.var0 = (SourceProvider *)v208;
    *(_OWORD *)&v257.var1 = *((_OWORD *)this + 3);
    TypeError = (_QWORD *)JSC::ParserError::toErrorObject(&v258, a3, &v257, 0xFFFFFFFFLL, v16, v17, v18, v19);
    var0 = v257.var0.var0;
    v257.var0.var0 = 0;
    if (var0)
    {
      if (*((_DWORD *)var0 + 2) == 1)
        (*(void (**)(SourceProvider *))(*(_QWORD *)var0 + 8))(var0);
      else
        --*((_DWORD *)var0 + 2);
    }
    goto LABEL_220;
  }
  v22 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x30);
  if (!v22)
    v22 = *((_QWORD *)a3 + 2);
  if (v22 && (v22 & 0xFFFE000000000002) == 0)
  {
    do
    {
      v23 = *(unsigned __int8 *)(v22 + 5);
      if (v23 < 0x17)
        break;
      if (v23 == 61)
      {
        v197 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v197 = 0x3300000002;
        *(_QWORD *)(v197 + 8) = "Proxy is not allowed in the global prototype chain.";
        *(_DWORD *)(v197 + 16) = 4;
        v272[0] = (int *)v197;
        TypeError = (_QWORD *)JSC::createTypeError((unint64_t)a3, (WTF::StringImpl **)v272, v198);
        v199 = (WTF::StringImpl *)v272[0];
        v272[0] = 0;
        if (!v199)
          goto LABEL_220;
        goto LABEL_330;
      }
      v24 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x30);
      if (!v24)
        v24 = *(_QWORD *)(v22 + 16);
      v25 = v24 && (v24 & 0xFFFE000000000002) == 0;
      v22 = v24;
    }
    while (v25);
  }
  v255 = *((_QWORD *)a3 + 9);
  v26 = *(_QWORD *)(v255 + 24);
  v27 = (unsigned __int8 *)(v26 + 20);
  if (__ldaxr((unsigned __int8 *)(v26 + 20)))
  {
    __clrex();
LABEL_34:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v26 + 20);
    goto LABEL_35;
  }
  if (__stxr(1u, v27))
    goto LABEL_34;
LABEL_35:
  v29 = *(_QWORD *)(v26 + 8);
  if (v29)
    v253 = *(unsigned int *)(v29 - 12);
  else
    v253 = 0;
  v30 = __ldxr(v27);
  if (v30 != 1)
  {
    __clrex();
    goto LABEL_41;
  }
  if (__stlxr(0, v27))
LABEL_41:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v26 + 20), 0, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
  v31 = (unsigned int *)v256[16];
  if (v31)
    v32 = *v31;
  else
    v32 = 0;
  v33 = v256[30];
  v249 = this;
  if (!v33)
  {
    v36 = 0;
    v34 = 0;
LABEL_231:
    v35 = (WTF::StringImpl **)(v33 + 16 * v34);
    goto LABEL_51;
  }
  v34 = *(unsigned int *)(v33 - 4);
  v35 = (WTF::StringImpl **)(v33 + 16 * v34);
  if (!*(_DWORD *)(v33 - 12))
  {
    v36 = (WTF::StringImpl **)(v33 + 16 * v34);
    goto LABEL_231;
  }
  v36 = (WTF::StringImpl **)v256[30];
  if ((_DWORD)v34)
  {
    v37 = 16 * v34;
    v36 = (WTF::StringImpl **)v256[30];
    while ((unint64_t)*v36 + 1 <= 1)
    {
      v36 += 2;
      v37 -= 16;
      if (!v37)
      {
        v36 = v35;
        break;
      }
    }
  }
LABEL_51:
  v250 = (char *)a2 + 93122;
  if (v33)
    v38 = (WTF::StringImpl **)(v33 + 16 * *(unsigned int *)(v33 - 4));
  else
    v38 = 0;
  while (v36 != v38)
  {
    v39 = *v36;
    if (v253)
    {
      if ((JSC::JSObject::hasProperty(v255, (uint64_t)a3, (unint64_t)*v36, v15, v16, v17, v18, v19) & 1) != 0)
      {
        if (((_WORD)v36[1] & 2) == 0
          || *v250
          || (*((_BYTE *)v249 + 68) & 1) != 0
          || (JSC::JSGlobalLexicalEnvironment::isConstVariable(v255, *v36, v45, v46, v47, v48, v49, v50) & 1) == 0)
        {
          TypeError = (_QWORD *)JSC::createErrorForDuplicateGlobalVariableDeclaration(a3, (uint64_t)*v36);
          goto LABEL_220;
        }
        goto LABEL_64;
      }
      v39 = *v36;
    }
    v268 = 0;
    v269 = 0;
    v270 = 0;
    v271 = 14;
    v273 = 0xFFFFFFFF00000000;
    v274 = a3;
    v275 = 0;
    v276 = 0;
    v277 = 0;
    v278 = 2;
    v279 = 0;
    LOBYTE(v280) = 0;
    v281 = 0;
    v282 = 0;
    v283 = 0;
    v40 = (*(uint64_t (**)(JSC::JSGlobalObject *, JSC::JSGlobalObject *, WTF::StringImpl *, int **))(16 * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) + 0x68))(a3, a3, v39, v272);
    v41 = 0;
    if (v40)
      v41 = JSC::PropertyDescriptor::setPropertySlot((uint64_t)&v268, (uint64_t)a3, v39, (uint64_t)v272, v16, v17, v18, v19);
    if (v281)
    {
      v42 = *(_DWORD *)(v280 + 4);
      if (!v42)
      {
        __break(0xC471u);
        JUMPOUT(0x198B7B034);
      }
      *(_DWORD *)(v280 + 4) = v42 - 1;
    }
    if (v41)
    {
      if ((v271 & 8) != 0)
        v43 = 2;
      else
        v43 = 1;
    }
    else
    {
      v43 = 0;
    }
    if (*((_DWORD *)a2 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(a2, (uint64_t)v13, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19))
    {
      TypeError = 0;
      goto LABEL_220;
    }
    if (v43 == 2)
    {
      v210 = (uint64_t)*v36;
      if (*v36)
      {
        v211 = *(_BYTE **)(v210 + 8);
        v212 = *(unsigned int *)(v210 + 4) | ((unint64_t)((*(_DWORD *)(v210 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v211 = 0;
        v212 = 0x100000000;
      }
      WTF::makeString<WTF::ASCIILiteral,WTF::StringView,char>((int8x16_t *)"Can't create duplicate variable that shadows a global property: '", 66, v211, v212, 39, v272);
      TypeError = (_QWORD *)JSC::createSyntaxError(a3, (WTF::StringImpl **)v272, 0);
      v199 = (WTF::StringImpl *)v272[0];
      v272[0] = 0;
      if (!v199)
        goto LABEL_220;
LABEL_330:
      if (*(_DWORD *)v199 == 2)
      {
        WTF::StringImpl::~StringImpl(v199, v13, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
        WTF::fastFree(v200, v201, v202, v203, v204, v205, v206, v207);
      }
      else
      {
        *(_DWORD *)v199 -= 2;
      }
      goto LABEL_220;
    }
LABEL_64:
    v44 = v36 + 2;
    v36 = v35;
    if (v44 != v35)
    {
      v36 = v44;
      while ((unint64_t)*v36 + 1 <= 1)
      {
        v36 += 2;
        if (v36 == v35)
        {
          v36 = v35;
          break;
        }
      }
    }
  }
  if (v253)
  {
    v182 = v256[27];
    if (v182)
    {
      v183 = *(unsigned int *)(v182 - 4);
      v184 = v182 + 16 * v183;
      if (*(_DWORD *)(v182 - 12))
      {
        v185 = v256[27];
        if ((_DWORD)v183)
        {
          v186 = 16 * v183;
          v185 = v256[27];
          while ((unint64_t)(*(_QWORD *)v185 + 1) <= 1)
          {
            v185 += 16;
            v186 -= 16;
            if (!v186)
            {
              v185 = v184;
              goto LABEL_292;
            }
          }
        }
        goto LABEL_292;
      }
      v185 = v182 + 16 * v183;
    }
    else
    {
      v185 = 0;
      v183 = 0;
    }
    v184 = v182 + 16 * v183;
LABEL_292:
    if (v182)
      v187 = v182 + 16 * *(unsigned int *)(v182 - 4);
    else
      v187 = 0;
    while (v185 != v187)
    {
      if ((*(_WORD *)(v185 + 8) & 0x200) == 0
        && (JSC::JSObject::hasProperty(v255, (uint64_t)a3, *(_QWORD *)v185, v15, v16, v17, v18, v19) & 1) != 0)
      {
        ErrorForDuplicateGlobalVariableDeclaration = JSC::createErrorForDuplicateGlobalVariableDeclaration(a3, *(_QWORD *)v185);
        goto LABEL_351;
      }
      v188 = v185 + 16;
      v185 = v184;
      if (v188 != v184)
      {
        v185 = v188;
        while ((unint64_t)(*(_QWORD *)v185 + 1) <= 1)
        {
          v185 += 16;
          if (v185 == v184)
          {
            v185 = v184;
            break;
          }
        }
      }
    }
  }
  if (!v32)
  {
LABEL_87:
    if ((*(_BYTE *)((16 * *(unsigned int *)a3) | 0x12) & 0x10) != 0)
    {
      TypeError = (_QWORD *)v256[27];
      v214 = (WTF::AtomStringImpl *)WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::PackedPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::VariableEnvironmentEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::VariableEnvironmentEntryHashTraits,WTF::HashTableTraits>::begin(TypeError);
      v215 = v214;
      v216 = v13;
      v217 = TypeError ? (uint64_t)&TypeError[2 * *((unsigned int *)TypeError - 1)] : 0;
      if ((WTF::AtomStringImpl *)v217 != v214)
      {
        do
        {
          if ((*((_WORD *)v215 + 4) & 0x280) == 0)
          {
            JSC::Identifier::fromUid(*(WTF::StringImpl **)v215, (uint64_t)a2, v14, (uint64_t)v15, v16, v17, v18, v19, v272);
            JSC::JSGlobalObject::canDeclareGlobalVar(a3, (const JSC::Identifier *)v272, v218, v219, v220, v221, v222, v223);
            v225 = v224;
            if ((v224 & 1) == 0)
              TypeError = (_QWORD *)JSC::createErrorForInvalidGlobalVarDeclaration(a3, (WTF::StringImpl **)v272, v14);
            v226 = (WTF::StringImpl *)v272[0];
            v272[0] = 0;
            if (v226)
            {
              if (*(_DWORD *)v226 == 2)
              {
                WTF::StringImpl::~StringImpl(v226, v13, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
                WTF::fastFree(v227, v228, v229, v230, v231, v232, v233, v234);
              }
              else
              {
                *(_DWORD *)v226 -= 2;
              }
            }
            if (!v225)
              goto LABEL_220;
          }
          while (1)
          {
            v215 = (WTF::AtomStringImpl *)((char *)v215 + 16);
            if (v215 == v216)
              break;
            if ((unint64_t)(*(_QWORD *)v215 + 1) > 1)
              goto LABEL_360;
          }
          v215 = v216;
LABEL_360:
          ;
        }
        while (v215 != (WTF::AtomStringImpl *)v217);
      }
    }
    *((_QWORD *)v249 + 10) = v256;
    if (v249 && v256 && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)v249 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)v249);
    if ((*(_BYTE *)((16 * *(unsigned int *)a3) | 0x10) & 3) == 0)
      JSC::JSObject::convertToDictionary(a3, a2, v20, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
    if ((*((_BYTE *)v249 + 68) & 1) != 0)
    {
LABEL_110:
      if (v32)
      {
        for (i = 0; i != v32; ++i)
        {
          v68 = (_DWORD *)v256[16];
          if (*v68 <= i)
          {
            __break(0xC471u);
            JUMPOUT(0x198B7B004);
          }
          v69 = *(_QWORD **)&v68[2 * i + 2];
          JSC::JSGlobalObject::createGlobalFunctionBinding<(JSC::BindingCreationContext)0>((uint64_t)a3, v69 + 9, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
          if (*((_QWORD *)a2 + 11646) | *((_QWORD *)a2 + 11660))
          {
            v70 = *v251;
            if (*v251)
            {
              v71 = *(_DWORD *)(v70 + 112);
              if (!v71)
              {
                do
                  v82 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
                while (__stlxr(v82 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
                v83 = __CFADD__(v82, 1);
                v71 = v82 + 1;
                *(_DWORD *)(v70 + 112) = v71;
                if (v83)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198B7B0D0);
                }
              }
            }
            else
            {
              v71 = 1;
            }
            v72 = v69[5];
            v73 = v69[2];
            v268 = (WTF::StringImpl *)v71;
            LODWORD(v269) = 0;
            v284[0] = 0;
            WTF::HashMap<WTF::GenericHashKey<long,WTF::DefaultHash<long>>,WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>,WTF::HashTraits<WTF::GenericHashKey<long,WTF::DefaultHash<long>>>,WTF::HashTraits<WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>>((uint64_t *)a2 + 11659, &v268, (uint64_t *)v284, (uint64_t)v15, v16, v17, v18, v19, (uint64_t)v272);
            v81 = v272[0];
            if (v284[0])
              WTF::fastFree((unint64_t)(v284[0] - 2), v74, v75, v76, v77, v78, v79, v80);
            v268 = (WTF::StringImpl *)(v73 & 0x7FFFFFFF | ((unint64_t)(v72 & 0x7FFFFFFF) << 32));
            LODWORD(v269) = 0;
            LOBYTE(v284[0]) = 0;
            WTF::HashMap<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>,BOOL,WTF::DefaultHash<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<WTF::GenericHashKey<JSC::FunctionHasExecutedCache::FunctionRange,JSC::FunctionHasExecutedCache::FunctionRange::Hash>>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>((uint64_t *)v81 + 2, &v268, v284, (uint64_t)v272);
          }
        }
      }
      v84 = v256[27];
      if (v84)
      {
        v85 = *(unsigned int *)(v84 - 4);
        v86 = (unint64_t *)(v84 + 16 * v85);
        if (*(_DWORD *)(v84 - 12))
        {
          v87 = (unint64_t *)v256[27];
          if ((_DWORD)v85)
          {
            v88 = 16 * v85;
            v87 = (unint64_t *)v256[27];
            while (*v87 + 1 <= 1)
            {
              v87 += 2;
              v88 -= 16;
              if (!v88)
              {
                v87 = v86;
                break;
              }
            }
          }
LABEL_133:
          if (v84)
            v89 = (unint64_t *)(v84 + 16 * *(unsigned int *)(v84 - 4));
          else
            v89 = 0;
          if (v89 != v87)
          {
            while ((v87[1] & 0x280) != 0)
            {
LABEL_137:
              v90 = v87 + 2;
              v87 = v86;
              if (v90 != v86)
              {
                v87 = v90;
                while (*v87 + 1 <= 1)
                {
                  v87 += 2;
                  if (v87 == v86)
                  {
                    v87 = v86;
                    break;
                  }
                }
              }
              if (v87 == v89)
                goto LABEL_159;
            }
            v91 = (WTF::StringImpl *)*v87;
            v92 = *(_DWORD *)(*v87 + 16);
            if ((v92 & 0x20) != 0)
            {
              v93 = *(_DWORD *)v91 + 2;
            }
            else
            {
              if ((v92 & 0x10) != 0)
              {
                v93 = *(_DWORD *)v91 + 2;
                *(_DWORD *)v91 = v93;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase(*((uint64_t **)a2 + 5239), *v87, v14, (uint64_t)v15, v16, v17, v18, v19, v272);
                v91 = (WTF::StringImpl *)v272[0];
                v93 = *v272[0];
              }
              *(_DWORD *)v91 = v93 + 2;
              if (!v93)
              {
                WTF::StringImpl::~StringImpl(v91, v13, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
                WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
                goto LABEL_149;
              }
            }
            *(_DWORD *)v91 = v93;
LABEL_149:
            v268 = v91;
            v273 = 0xFFFFFFFF00000000;
            v274 = a3;
            v275 = 0;
            v276 = 0;
            v277 = 0;
            v278 = 2;
            v279 = 0;
            LOBYTE(v280) = 0;
            v281 = 0;
            v282 = 0;
            v283 = 0;
            JSC::JSGlobalObject::getOwnPropertySlot((uint64_t)a3, (uint64_t)a3, (unint64_t)v91, (uint64_t)v272, v16, v17, v18, v19);
            if ((v94 & 1) == 0)
              JSC::JSGlobalObject::addSymbolTableEntry(a3, &v268, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
            if (v281)
            {
              v95 = *(_DWORD *)(v280 + 4);
              if (!v95)
              {
                __break(0xC471u);
                JUMPOUT(0x198B7B0F0);
              }
              *(_DWORD *)(v280 + 4) = v95 - 1;
            }
            v268 = 0;
            if (*(_DWORD *)v91 == 2)
            {
              WTF::StringImpl::~StringImpl(v91, v13, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
              WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
            }
            else
            {
              *(_DWORD *)v91 -= 2;
            }
            goto LABEL_137;
          }
LABEL_159:
          v112 = *(_QWORD *)(v255 + 24);
          if (__ldaxr((unsigned __int8 *)(v112 + 20)))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)(v112 + 20)))
          {
LABEL_162:
            v114 = v256[30];
            v252 = (unsigned __int8 *)(v112 + 20);
            if (v114)
            {
              v115 = *(unsigned int *)(v114 - 4);
              v116 = v114 + 16 * v115;
              if (*(_DWORD *)(v114 - 12))
              {
                v117 = v256[30];
                if ((_DWORD)v115)
                {
                  v118 = 16 * v115;
                  v117 = v256[30];
                  while ((unint64_t)(*(_QWORD *)v117 + 1) <= 1)
                  {
                    v117 += 16;
                    v118 -= 16;
                    if (!v118)
                    {
                      v117 = v116;
                      break;
                    }
                  }
                }
LABEL_169:
                if (v114)
                  v119 = v114 + 16 * *(unsigned int *)(v114 - 4);
                else
                  v119 = 0;
                if (v119 != v117)
                {
                  v254 = (uint64_t *)(v112 + 8);
                  v120 = (unsigned __int8 *)(v255 + 4);
                  do
                  {
                    if ((*(_WORD *)(v117 + 8) & 2) == 0
                      || *v250
                      || (*((_BYTE *)v249 + 68) & 1) != 0
                      || (JSC::SymbolTable::contains(*v254, *(_QWORD *)v117) & 1) == 0)
                    {
                      v121 = (*(_DWORD *)(v112 + 16) + 1);
                      *(_DWORD *)(v112 + 16) = v121;
                      v122 = 11;
                      if ((*(_WORD *)(v117 + 8) & 2) == 0)
                        v122 = 9;
                      v284[0] = (uint64_t *)(v122 | (v121 << 6));
                      if ((_DWORD)v121 == -1)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198B7B4F0);
                      }
                      JSC::SymbolTableEntry::prepareToWatch((JSC::SymbolTableEntry *)v284, v13, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
                      if (*(_QWORD *)(v112 + 48))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198B7AF80);
                      }
                      v128 = *(WTF::StringImpl **)v117;
                      v129 = (uint64_t **)v284[0];
                      if (((uint64_t)v284[0] & 1) != 0)
                        v129 = v284;
                      v130 = *v129;
                      if ((v130 & 0x30u) <= 0x10uLL)
                      {
                        v131 = (unint64_t)v130 >> 6;
                        v132 = *(_DWORD *)(v112 + 16);
                        if (v132 == -1 || v132 < v131)
                          *(_DWORD *)(v112 + 16) = v131;
                      }
                      if (v128)
                        *(_DWORD *)v128 += 2;
                      v268 = v128;
                      WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::add<JSC::SymbolTableEntry&>(v254, (WTF::AtomStringImpl *)&v268, v284, v123, v124, v125, v126, v127, (uint64_t)v272);
                      v140 = v268;
                      v268 = 0;
                      if (v140)
                      {
                        if (*(_DWORD *)v140 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v140, v133, v134, v135, v136, v137, v138, v139);
                          WTF::fastFree(v141, v142, v143, v144, v145, v146, v147, v148);
                        }
                        else
                        {
                          *(_DWORD *)v140 -= 2;
                        }
                      }
                      while (1)
                      {
                        v149 = *v120;
                        if ((v149 & 0x40) != 0)
                          break;
                        v150 = __ldaxr(v120);
                        if (v150 == v149)
                        {
                          if (!__stxr(v149 | 0x40, v120))
                            goto LABEL_194;
                        }
                        else
                        {
                          __clrex();
                        }
                      }
                      WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v120);
LABEL_194:
                      v151 = *(_QWORD *)(v255 + 32);
                      WTF::SegmentedVector<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,16ul>::grow(v255 + 32, v151 + 1);
                      if (v151 >> 4 >= *(unsigned int *)(v255 + 52))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198B7B514);
                      }
                      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v255 + 40) + 8 * (v151 >> 4)) + 8 * (v151 & 0xF)) = 0;
                      while (1)
                      {
                        v152 = *v120;
                        if ((v152 & 0xC0) != 0x40)
                          break;
                        v153 = __ldxr(v120);
                        if (v153 == v152)
                        {
                          if (!__stxr(v152 & 0xBF, v120))
                            goto LABEL_201;
                        }
                        else
                        {
                          __clrex();
                        }
                      }
                      WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v120, 0, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
LABEL_201:
                      if ((_DWORD)v121 != (_DWORD)v151)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198B7AFA0);
                      }
                      if (((uint64_t)v284[0] & 1) == 0)
                        JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)v284, v13, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
                    }
                    v154 = v117 + 16;
                    v117 = v116;
                    if (v154 != v116)
                    {
                      v117 = v154;
                      while ((unint64_t)(*(_QWORD *)v117 + 1) <= 1)
                      {
                        v117 += 16;
                        if (v117 == v116)
                        {
                          v117 = v116;
                          break;
                        }
                      }
                    }
                  }
                  while (v117 != v119);
                }
                v155 = __ldxr(v252);
                if (v155 == 1)
                {
                  if (!__stlxr(0, v252))
                  {
LABEL_215:
                    v156 = v256[30];
                    if (v156)
                      v157 = *(_DWORD *)(v156 - 12);
                    else
                      v157 = 0;
                    v158 = (_QWORD *)v256[32];
                    if (v158)
                    {
                      v158 = (_QWORD *)*v158;
                      if (v158)
                        LODWORD(v158) = *((_DWORD *)v158 - 3);
                    }
                    if (!(v157 + (_DWORD)v158))
                      goto LABEL_219;
                    if (v156)
                    {
                      v163 = *(unsigned int *)(v156 - 4);
                      v164 = (uint64_t *)(v156 + 16 * v163);
                      if (*(_DWORD *)(v156 - 12))
                      {
                        v165 = (uint64_t *)v256[30];
                        if ((_DWORD)v163)
                        {
                          v166 = 16 * v163;
                          v165 = (uint64_t *)v256[30];
                          while ((unint64_t)(*v165 + 1) <= 1)
                          {
                            v165 += 2;
                            v166 -= 16;
                            if (!v166)
                            {
                              v165 = v164;
                              goto LABEL_251;
                            }
                          }
                        }
                        goto LABEL_251;
                      }
                      v165 = (uint64_t *)(v156 + 16 * v163);
                    }
                    else
                    {
                      v165 = 0;
                      v163 = 0;
                    }
                    v164 = (uint64_t *)(v156 + 16 * v163);
LABEL_251:
                    if (v156)
                      v167 = (uint64_t *)(v156 + 16 * *(unsigned int *)(v156 - 4));
                    else
                      v167 = 0;
                    if (v167 == v165)
                    {
LABEL_283:
                      v180 = *((_DWORD *)a3 + 794) + 1;
                      *((_DWORD *)a3 + 794) = v180;
                      if (v180 == dword_1ECF4C72C)
                      {
                        *((_DWORD *)a3 + 794) = 1;
                        v181 = *((_QWORD *)a2 + 90);
                        v272[0] = (int *)a3;
                        JSC::CodeBlockSet::iterate<JSC::JSGlobalObject::bumpGlobalLexicalBindingEpoch(JSC::VM &)::$_0>(v181, v272, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
                      }
LABEL_219:
                      TypeError = 0;
                      goto LABEL_220;
                    }
                    v168 = (unsigned __int8 *)a3 + 3168;
                    while (1)
                    {
                      v169 = *v165;
                      if (__ldaxr(v168))
                        break;
                      if (__stxr(1u, v168))
                        goto LABEL_257;
LABEL_258:
                      v171 = *((_QWORD *)a3 + 395);
                      if (!v171)
                        goto LABEL_259;
                      v175 = *(_DWORD *)(v169 + 16);
                      if ((v175 & 0x20) != 0)
                        v175 = *(_DWORD *)(v169 + 32);
                      v176 = *(_DWORD *)(v171 - 8);
                      v177 = v176 & (v175 >> 8);
                      v178 = *(_QWORD *)(v171 + 16 * v177);
                      if (v178 != v169)
                      {
                        v179 = 1;
                        while (v178)
                        {
                          v177 = ((_DWORD)v177 + v179) & v176;
                          v178 = *(_QWORD *)(v171 + 16 * v177);
                          ++v179;
                          if (v178 == v169)
                            goto LABEL_276;
                        }
LABEL_259:
                        v172 = 0;
                        goto LABEL_260;
                      }
LABEL_276:
                      v172 = *(JSC::WatchpointSet **)(v171 + 16 * v177 + 8);
LABEL_260:
                      v173 = __ldxr(v168);
                      if (v173 != 1)
                      {
                        __clrex();
LABEL_264:
                        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a3 + 3168, 0, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
                        goto LABEL_265;
                      }
                      if (__stlxr(0, v168))
                        goto LABEL_264;
LABEL_265:
                      if (v172 && *((_BYTE *)v172 + 4) == 1)
                        JSC::WatchpointSet::fireAllSlow(v172, a2, "Lexical binding shadows an existing global property", (uint64_t)v15, v16, v17, v18, v19, v20);
                      v174 = v165 + 2;
                      v165 = v164;
                      if (v174 != v164)
                      {
                        v165 = v174;
                        while ((unint64_t)(*v165 + 1) <= 1)
                        {
                          v165 += 2;
                          if (v165 == v164)
                          {
                            v165 = v164;
                            break;
                          }
                        }
                      }
                      if (v165 == v167)
                        goto LABEL_283;
                    }
                    __clrex();
LABEL_257:
                    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a3 + 3168);
                    goto LABEL_258;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v252, 0, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
                goto LABEL_215;
              }
              v117 = v114 + 16 * v115;
            }
            else
            {
              v117 = 0;
              v115 = 0;
            }
            v116 = v114 + 16 * v115;
            goto LABEL_169;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v112 + 20);
          goto LABEL_162;
        }
        v87 = (unint64_t *)(v84 + 16 * v85);
      }
      else
      {
        v87 = 0;
        v85 = 0;
      }
      v86 = (unint64_t *)(v84 + 16 * v85);
      goto LABEL_133;
    }
    v60 = v256[27];
    if (v60)
    {
      v61 = *(unsigned int *)(v60 - 4);
      v62 = v60 + 16 * v61;
      if (*(_DWORD *)(v60 - 12))
      {
        v63 = v256[27];
        if ((_DWORD)v61)
        {
          v64 = 16 * v61;
          v63 = v256[27];
          while ((unint64_t)(*(_QWORD *)v63 + 1) <= 1)
          {
            v63 += 16;
            v64 -= 16;
            if (!v64)
            {
              v63 = v62;
              goto LABEL_100;
            }
          }
        }
        goto LABEL_100;
      }
      v63 = v60 + 16 * v61;
    }
    else
    {
      v63 = 0;
      v61 = 0;
    }
    v62 = v60 + 16 * v61;
LABEL_100:
    if (v60)
      v65 = v60 + 16 * *(unsigned int *)(v60 - 4);
    else
      v65 = 0;
    while (v63 != v65)
    {
      if ((*(_WORD *)(v63 + 8) & 0x200) != 0)
      {
        JSC::Identifier::fromUid(*(WTF::StringImpl **)v63, (uint64_t)a2, v14, (uint64_t)v15, v16, v17, v18, v19, v272);
        if (!v253
          || (JSC::JSObject::hasProperty(v255, (uint64_t)a3, (unint64_t)v272[0], v15, v16, v17, v18, v19) & 1) == 0)
        {
          JSC::JSGlobalObject::canDeclareGlobalVar(a3, (const JSC::Identifier *)v272, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
          if (v235)
            JSC::JSGlobalObject::createGlobalVarBinding<(JSC::BindingCreationContext)0>(a3, (unint64_t *)v272, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
        }
        v236 = (WTF::StringImpl *)v272[0];
        v272[0] = 0;
        if (v236)
        {
          if (*(_DWORD *)v236 == 2)
          {
            WTF::StringImpl::~StringImpl(v236, v13, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
            WTF::fastFree(v238, v239, v240, v241, v242, v243, v244, v245);
          }
          else
          {
            *(_DWORD *)v236 -= 2;
          }
        }
      }
      v66 = v63 + 16;
      v63 = v62;
      if (v66 != v62)
      {
        v63 = v66;
        while ((unint64_t)(*(_QWORD *)v63 + 1) <= 1)
        {
          v63 += 16;
          if (v63 == v62)
          {
            v63 = v62;
            break;
          }
        }
      }
    }
    goto LABEL_110;
  }
  v51 = 0;
  while (1)
  {
    v52 = (_DWORD *)v256[16];
    if (*v52 <= v51)
    {
      __break(0xC471u);
      JUMPOUT(0x198B7AFD4);
    }
    v53 = *(_QWORD *)&v52[2 * v51 + 2];
    v282 = 0;
    v283 = 0;
    v55 = *(_QWORD *)(v53 + 72);
    v54 = (uint64_t *)(v53 + 72);
    v273 = 0xFFFFFFFF00000000;
    v274 = a3;
    v275 = 0;
    v276 = 0;
    v277 = 0;
    v278 = 2;
    v279 = 0;
    LOBYTE(v280) = 0;
    v281 = 0;
    JSC::JSGlobalObject::getOwnPropertySlot((uint64_t)a3, (uint64_t)a3, v55, (uint64_t)v272, v16, v17, v18, v19);
    if ((v56 & 1) != 0)
    {
      if ((v273 & 8) == 0)
      {
        v58 = 1;
        goto LABEL_82;
      }
      v57 = (v273 & 0x36) == 0;
    }
    else
    {
      v57 = (*(_BYTE *)((16 * *(unsigned int *)a3) | 0x12) & 0x10) == 0;
    }
    v58 = v57;
LABEL_82:
    if (v281)
    {
      v59 = *(_DWORD *)(v280 + 4);
      if (!v59)
      {
        __break(0xC471u);
        JUMPOUT(0x198B7B054);
      }
      *(_DWORD *)(v280 + 4) = v59 - 1;
    }
    if ((v58 & 1) != 0)
      goto LABEL_86;
    if ((byte_1ECF58F61 & 1) != 0)
    {
      v237 = _MergedGlobals_47;
    }
    else
    {
      v246 = WTF::linkedOnOrAfterSDKWithBehavior((WTF *)0x57);
      v237 = v246 ^ 1;
      _MergedGlobals_47 = v246 ^ 1;
      byte_1ECF58F61 = 1;
    }
    if (!v237)
      break;
    v247 = *((_DWORD *)a2 + 23281);
    *((_DWORD *)a2 + 23281) = 1;
    JSC::JSCell::deleteProperty((unint64_t)a3, (uint64_t)a3, *v54, v15, v16, v17, v18, v19);
    *((_DWORD *)a2 + 23281) = v247;
LABEL_86:
    if (v32 == ++v51)
      goto LABEL_87;
  }
  ErrorForDuplicateGlobalVariableDeclaration = JSC::createErrorForInvalidGlobalFunctionDeclaration(a3, (WTF::StringImpl **)v54, v14);
LABEL_351:
  TypeError = (_QWORD *)ErrorForDuplicateGlobalVariableDeclaration;
LABEL_220:
  v160 = v265;
  v265 = 0;
  if (v160)
  {
    if (*(_DWORD *)v160 == 2)
    {
      WTF::StringImpl::~StringImpl(v160, v13, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19);
      WTF::fastFree(v189, v190, v191, v192, v193, v194, v195, v196);
    }
    else
    {
      *(_DWORD *)v160 -= 2;
    }
  }
  v161 = *((_DWORD *)a2 + 22) - 1;
  *((_DWORD *)a2 + 22) = v161;
  if (!v161 && v248[93377])
    JSC::VMTraps::undoDeferTerminationSlow(v248, 1);
  return TypeError;
}

uint64_t JSC::SymbolTable::contains(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;

  if (!a1)
    return 0;
  v4 = *(_DWORD *)(a1 - 8);
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 0x20) != 0)
    v5 = *(_DWORD *)(a2 + 32);
  v6 = v4 & (v5 >> 8);
  v7 = *(_QWORD *)(a1 + 16 * v6);
  if (v7 == a2)
    return 1;
  v8 = 1;
  do
  {
    v2 = v7 != 0;
    if (!v7)
      break;
    v6 = (v6 + v8) & v4;
    v7 = *(_QWORD *)(a1 + 16 * v6);
    ++v8;
  }
  while (v7 != a2);
  return v2;
}

_QWORD *JSC::ProgramExecutable::ensureTemplateObjectMap(JSC::ProgramExecutable *this, JSC::VM *a2)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v2 = (_QWORD **)((char *)this + 96);
  v3 = (_QWORD *)*((_QWORD *)this + 12);
  if (!v3)
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v5 = 0;
    v19 = v5;
    __dmb(0xAu);
    std::unique_ptr<WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>>::operator=[abi:sn180100](v2, &v19, v6, v7, v8, v9, v10, v11);
    v3 = *v2;
    std::unique_ptr<WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](&v19, v12, v13, v14, v15, v16, v17, v18);
  }
  return v3;
}

BOOL JSC::PropertyDescriptor::writable(JSC::PropertyDescriptor *this)
{
  return (*((_BYTE *)this + 24) & 2) == 0;
}

BOOL JSC::PropertyDescriptor::enumerable(JSC::PropertyDescriptor *this)
{
  return (*((_BYTE *)this + 24) & 4) == 0;
}

BOOL JSC::PropertyDescriptor::configurable(JSC::PropertyDescriptor *this)
{
  return (*((_BYTE *)this + 24) & 8) == 0;
}

uint64_t JSC::PropertyDescriptor::isDataDescriptor(JSC::PropertyDescriptor *this)
{
  if (*(_QWORD *)this)
    return 1;
  else
    return *((_BYTE *)this + 28) & 1;
}

BOOL JSC::PropertyDescriptor::isAccessorDescriptor(JSC::PropertyDescriptor *this)
{
  return *((_QWORD *)this + 1) || *((_QWORD *)this + 2) != 0;
}

uint64_t JSC::PropertyDescriptor::setUndefined(uint64_t this)
{
  *(_QWORD *)this = 10;
  *(_DWORD *)(this + 24) = 14;
  return this;
}

unint64_t JSC::PropertyDescriptor::slowGetterSetter(JSC::PropertyDescriptor *this, JSC::GetterSetter **a2, uint64_t a3, uint64_t a4, JSC::JSObject *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  JSC::JSGlobalObject *v13;
  JSC::JSObject *v14;

  v9 = *((_QWORD *)this + 1);
  v8 = *((_QWORD *)this + 2);
  v10 = v9 == 10 || v9 == 0;
  v11 = 10;
  if (!v10)
    v11 = *((_QWORD *)this + 1);
  if (v8)
    v12 = v8 == 10;
  else
    v12 = 1;
  if (v12)
    v8 = 10;
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    v13 = 0;
  }
  else if (*(unsigned __int8 *)(v11 + 5) <= 0x16u)
  {
    v13 = 0;
  }
  else
  {
    v13 = (JSC::JSGlobalObject *)v11;
  }
  if ((v8 & 0xFFFE000000000002) != 0)
  {
    v14 = 0;
  }
  else if (*(unsigned __int8 *)(v8 + 5) <= 0x16u)
  {
    v14 = 0;
  }
  else
  {
    v14 = (JSC::JSObject *)v8;
  }
  return JSC::GetterSetter::create(a2[7], (JSC::VM *)a2, v13, v14, a5, a6, a7, a8);
}

uint64_t JSC::PropertyDescriptor::getter(JSC::PropertyDescriptor *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t JSC::PropertyDescriptor::setter(JSC::PropertyDescriptor *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t JSC::PropertyDescriptor::setDescriptor(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(result + 24) = a3 & 0xFFFFFFBF;
  if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 5)
  {
    *(_DWORD *)(result + 24) = a3 & 0xFFFFFFBD;
    v4 = *(_QWORD *)(a2 + 8);
    if (&JSC::NullGetterFunction::s_info == (char **)(16
                                                     * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C)))
      v4 = 10;
    *(_QWORD *)(result + 8) = v4;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_BYTE *)(v5 + 5) == 28 && v5 != 0)
      v5 = 10;
    *(_QWORD *)(result + 16) = v5;
    v3 = 6;
  }
  else
  {
    *(_QWORD *)result = a2;
    v3 = 7;
  }
  *(_DWORD *)(result + 28) = v3;
  return result;
}

int64x2_t JSC::PropertyDescriptor::setAccessorDescriptor(JSC::PropertyDescriptor *this, int a2)
{
  int64x2_t result;

  result = vdupq_n_s64(0xAuLL);
  *(int64x2_t *)((char *)this + 8) = result;
  *((_DWORD *)this + 6) = a2 & 0xFFFFFFFD;
  *((_DWORD *)this + 7) = 6;
  return result;
}

uint64_t JSC::PropertyDescriptor::setAccessorDescriptor(uint64_t this, JSC::GetterSetter *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  *(_DWORD *)(this + 24) = a3 & 0xFFFFFFFD;
  v3 = *((_QWORD *)a2 + 1);
  if (&JSC::NullGetterFunction::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C)))
    v3 = 10;
  *(_QWORD *)(this + 8) = v3;
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
    v5 = *(_BYTE *)(v4 + 5) == 28;
  else
    v5 = 0;
  if (v5)
    v4 = 10;
  *(_QWORD *)(this + 16) = v4;
  *(_DWORD *)(this + 28) = 6;
  return this;
}

uint64_t JSC::PropertyDescriptor::setWritable(uint64_t this, int a2)
{
  unsigned int v2;

  if (a2)
    v2 = *(_DWORD *)(this + 24) & 0xFFFFFFFD;
  else
    v2 = *(_DWORD *)(this + 24) | 2;
  *(_DWORD *)(this + 24) = v2;
  *(_DWORD *)(this + 28) |= 1u;
  return this;
}

uint64_t JSC::PropertyDescriptor::setEnumerable(uint64_t this, int a2)
{
  unsigned int v2;

  if (a2)
    v2 = *(_DWORD *)(this + 24) & 0xFFFFFFFB;
  else
    v2 = *(_DWORD *)(this + 24) | 4;
  *(_DWORD *)(this + 24) = v2;
  *(_DWORD *)(this + 28) |= 2u;
  return this;
}

uint64_t JSC::PropertyDescriptor::setConfigurable(uint64_t this, int a2)
{
  unsigned int v2;

  if (a2)
    v2 = *(_DWORD *)(this + 24) & 0xFFFFFFF7;
  else
    v2 = *(_DWORD *)(this + 24) | 8;
  *(_DWORD *)(this + 24) = v2;
  *(_DWORD *)(this + 28) |= 4u;
  return this;
}

uint64_t JSC::PropertyDescriptor::setSetter(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 24) = *(_DWORD *)(result + 24) & 0xFFFFFFED | 0x10;
  return result;
}

uint64_t JSC::PropertyDescriptor::setGetter(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 24) = *(_DWORD *)(result + 24) & 0xFFFFFFED | 0x10;
  return result;
}

BOOL JSC::PropertyDescriptor::equalTo(JSC::PropertyDescriptor *this, JSC::JSGlobalObject *a2, const JSC::PropertyDescriptor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  JSC::VM *v15;
  int v16;
  BOOL v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  _BOOL4 v23;
  _BOOL8 result;
  const WTF::StringImpl *v25;
  _BOOL4 v26;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v28;
  int v29;
  const WTF::StringImpl *v30;
  double v31;
  unint64_t v32;
  int v33;
  double v34;
  const WTF::StringImpl *v35;
  double v36;
  double v37;

  v11 = *(_QWORD *)a3;
  v12 = *(_QWORD *)a3 == 0;
  v13 = *(_QWORD *)this;
  if (((v12 ^ (*(_QWORD *)this == 0)) & 1) != 0
    || (*((_QWORD *)a3 + 1) == 0) != (*((_QWORD *)this + 1) == 0)
    || (*((_QWORD *)a3 + 2) == 0) != (*((_QWORD *)this + 2) == 0))
  {
    return 0;
  }
  if (!v13)
    goto LABEL_16;
  v15 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (v11 == v13)
  {
    if (!*((_DWORD *)v15 + 20))
      goto LABEL_16;
    v18 = 1;
    goto LABEL_33;
  }
  if (!(v11 >> 49))
  {
    if (((v13 | v11) & 0xFFFE000000000002) == 0)
    {
      v16 = *(unsigned __int8 *)(v11 + 5);
      if (v16 == 2)
      {
        if (*(_BYTE *)(v13 + 5) == 2)
        {
          if ((*(_QWORD *)(v11 + 8) & 1) != 0
            || (v25 = *(const WTF::StringImpl **)(v13 + 8), (v25 & 1) != 0))
          {
            v26 = JSC::JSString::equalSlowCase((JSC::JSString *)v11, a2, (JSC::JSString *)v13, a4, a5, a6, a7, a8, a9);
          }
          else
          {
            v26 = WTF::equal(*(WTF **)(v11 + 8), v25, (const WTF::StringImpl *)v13);
          }
          goto LABEL_30;
        }
      }
      else if (v16 == 3 && *(_BYTE *)(v13 + 5) == 3)
      {
        v26 = JSC::JSBigInt::equals((JSC::JSBigInt *)v11, *(JSC::JSBigInt **)this, (JSC::JSBigInt *)v13);
LABEL_30:
        v18 = v26;
        goto LABEL_14;
      }
      v17 = v11 == v13;
      goto LABEL_11;
    }
LABEL_56:
    v18 = 0;
    goto LABEL_14;
  }
  if (!(v13 >> 49))
    goto LABEL_56;
  *(double *)a9.i64 = (double)(int)v11;
  if (v11 <= 0xFFFDFFFFFFFFFFFFLL)
    a9.i64[0] = v11 - 0x2000000000000;
  v31 = (double)(int)v13;
  if (v13 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v31 = v13 - 0x2000000000000;
  v17 = a9.i64[0] == *(_QWORD *)&v31;
LABEL_11:
  v18 = v17;
LABEL_14:
  if (!*((_DWORD *)v15 + 20))
  {
    if (!v18)
      return 0;
LABEL_16:
    v19 = *((_QWORD *)this + 1);
    if (!v19)
      goto LABEL_17;
    v28 = *((_QWORD *)a3 + 1);
    if (v28 >= 0xFFFE000000000000)
    {
      if (v19 >= 0xFFFE000000000000)
        goto LABEL_42;
      if (!(v19 >> 49))
      {
LABEL_39:
        if (((v28 | v19) & 0xFFFE000000000002) == 0)
        {
          v29 = *(unsigned __int8 *)(v28 + 5);
          if (v29 == 2)
          {
            if (*(_BYTE *)(v19 + 5) == 2)
            {
              if ((*(_QWORD *)(v28 + 8) & 1) != 0
                || (v30 = *(const WTF::StringImpl **)(v19 + 8), (v30 & 1) != 0))
              {
                if (!JSC::JSString::equalSlowCase((JSC::JSString *)v28, a2, (JSC::JSString *)v19, a4, a5, a6, a7, a8, a9))return 0;
              }
              else
              {
                result = WTF::equal(*(WTF **)(v28 + 8), v30, (const WTF::StringImpl *)v19);
                if (!result)
                  return result;
              }
              goto LABEL_17;
            }
          }
          else if (v29 == 3 && *(_BYTE *)(v19 + 5) == 3)
          {
            if (!JSC::JSBigInt::equals((JSC::JSBigInt *)v28, *((JSC::JSBigInt **)this + 1), (JSC::JSBigInt *)v19))
              return 0;
            goto LABEL_17;
          }
        }
LABEL_42:
        if (v28 != v19)
          return 0;
LABEL_17:
        v20 = *((_QWORD *)this + 2);
        if (!v20)
        {
LABEL_18:
          v21 = *((_DWORD *)this + 6) ^ *((_DWORD *)a3 + 6);
          v22 = *((_DWORD *)this + 7) & *((_DWORD *)a3 + 7);
          if (((v22 & 1) == 0 || (v21 & 2) == 0) && ((v22 & 4) == 0 || (v21 & 8) == 0))
          {
            v23 = (v22 & 2) == 0;
            return (v21 & 4) == 0 || v23;
          }
          return 0;
        }
        v32 = *((_QWORD *)a3 + 2);
        if (v32 >= 0xFFFE000000000000)
        {
          if (v20 >= 0xFFFE000000000000)
            goto LABEL_65;
          if (!(v20 >> 49))
          {
LABEL_62:
            if (((v32 | v20) & 0xFFFE000000000002) == 0)
            {
              v33 = *(unsigned __int8 *)(v32 + 5);
              if (v33 == 2)
              {
                if (*(_BYTE *)(v20 + 5) == 2)
                {
                  if ((*(_QWORD *)(v32 + 8) & 1) != 0
                    || (v35 = *(const WTF::StringImpl **)(v20 + 8), (v35 & 1) != 0))
                  {
                    if (!JSC::JSString::equalSlowCase((JSC::JSString *)v32, a2, (JSC::JSString *)v20, a4, a5, a6, a7, a8, a9))return 0;
                  }
                  else
                  {
                    result = WTF::equal(*(WTF **)(v32 + 8), v35, (const WTF::StringImpl *)v20);
                    if (!result)
                      return result;
                  }
                  goto LABEL_18;
                }
              }
              else if (v33 == 3 && *(_BYTE *)(v20 + 5) == 3)
              {
                if (!JSC::JSBigInt::equals((JSC::JSBigInt *)v32, *((JSC::JSBigInt **)this + 2), (JSC::JSBigInt *)v20))
                  return 0;
                goto LABEL_18;
              }
            }
LABEL_65:
            if (v32 != v20)
              return 0;
            goto LABEL_18;
          }
        }
        else if (!(v20 >> 49) || !(v32 >> 49))
        {
          goto LABEL_62;
        }
        v36 = (double)(int)v32;
        if (v32 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v36 = v32 - 0x2000000000000;
        *(_QWORD *)&v37 = v20 - 0x2000000000000;
        if (v20 > 0xFFFDFFFFFFFFFFFFLL)
          v37 = (double)(int)v20;
        if (v36 != v37)
          return 0;
        goto LABEL_18;
      }
    }
    else if (!(v19 >> 49) || !(v28 >> 49))
    {
      goto LABEL_39;
    }
    *(double *)a9.i64 = (double)(int)v28;
    if (v28 <= 0xFFFDFFFFFFFFFFFFLL)
      a9.i64[0] = v28 - 0x2000000000000;
    *(_QWORD *)&v34 = v19 - 0x2000000000000;
    if (v19 > 0xFFFDFFFFFFFFFFFFLL)
      v34 = (double)(int)v19;
    if (*(double *)a9.i64 != v34)
      return 0;
    goto LABEL_17;
  }
LABEL_33:
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v15, (uint64_t)a2, v13, a4, a5, a6, a7, a8);
  result = 0;
  if (!hasExceptionsAfterHandlingTraps && v18)
    goto LABEL_16;
  return result;
}

uint64_t JSC::PropertyDescriptor::attributesOverridingCurrent(JSC::PropertyDescriptor *this, const JSC::PropertyDescriptor *a2)
{
  int v2;
  BOOL v3;
  int v4;

  v2 = *((_DWORD *)a2 + 6);
  if (*(_QWORD *)this)
    v3 = 0;
  else
    v3 = (*((_DWORD *)this + 7) & 1) == 0;
  if (!v3 && *(_OWORD *)((char *)a2 + 8) != 0)
    v2 |= 2u;
  v4 = 2 * (*((_DWORD *)this + 7) & 7);
  if (*((_QWORD *)this + 1) || *((_QWORD *)this + 2))
    v4 |= 0x10u;
  return *((_DWORD *)this + 6) & v4 | v2 & ~v4 & 0xFFFFFFDF;
}

uint64_t JSC::PropertyDescriptor::setPropertySlot(uint64_t a1, uint64_t a2, WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t **v26;
  int i;
  unsigned int v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t Allocator;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t **v55;
  int v56;
  unsigned int v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int8x16_t **v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v83;
  uint64_t (*v84)(_QWORD);
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t j;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  int v92;
  uint64_t k;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  int v97;
  uint64_t *v98;
  uint64_t v99;
  int v100;
  BOOL v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  __int128 v114;
  char v115;
  WTF::StringImpl *v116;
  unint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  __int128 v120;
  uint64_t v121;

  v10 = *(unsigned __int8 *)(a4 + 49);
  if (v10 == 2)
  {
    v84 = *(uint64_t (**)(_QWORD))a4;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a4 + 16) & 0xFFFFFFFD;
    v85 = *((_QWORD *)v84 + 1);
    if (&JSC::NullGetterFunction::s_info == (char **)(16
                                                     * *(unsigned int *)(16 * (*(_DWORD *)v85 & 0xFFFFFFFE) + 0x4C)))
      v85 = 10;
    *(_QWORD *)(a1 + 8) = v85;
    v86 = *((_QWORD *)v84 + 2);
    if (v86)
      v87 = *(_BYTE *)(v86 + 5) == 28;
    else
      v87 = 0;
    if (v87)
      v86 = 10;
    goto LABEL_104;
  }
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_DWORD *)(a4 + 16);
  if ((v13 & 0x20) == 0)
  {
    if (v10 == 1)
    {
      v14 = *(_QWORD *)a4;
    }
    else
    {
      v75 = *(_QWORD *)(a4 + 32);
      v76 = *(_QWORD *)(16 * (*(_DWORD *)v75 & 0xFFFFFFFE) + 0x28);
      if (*(_BYTE *)(a4 + 51) != 1)
        goto LABEL_94;
      v77 = *(int8x16_t ***)(a4 + 72);
      if ((v75 & 0xFFFE000000000002) != 0)
        goto LABEL_178;
      v78 = *(unsigned int *)(16 * (*(_DWORD *)v75 & 0xFFFFFFFE) + 0x4C);
      v79 = *(_DWORD *)(16 * (*(_DWORD *)v75 & 0xFFFFFFFE) + 0x4C) != 0;
      v80 = 16 * v78;
      if ((_DWORD)v78)
        v81 = v77 == (int8x16_t **)v80;
      else
        v81 = 1;
      if (!v81)
      {
        do
        {
          v80 = *(_QWORD *)(v80 + 16);
          v79 = v80 != 0;
        }
        while ((int8x16_t **)v80 != v77 && v80 != 0);
      }
      if (!v79)
      {
LABEL_178:
        *(_QWORD *)&v120 = v12;
        v83 = JSC::throwDOMAttributeGetterTypeError(v76, (JSC::VM **)&v120, v77, a3);
      }
      else
      {
LABEL_94:
        v83 = (*(uint64_t (**)(unint64_t))a4)(v76);
      }
      v14 = v83;
    }
    if (*(_DWORD *)(v12 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      return 0;
    }
    v15 = *(_DWORD *)(a4 + 16);
    *(_DWORD *)(a1 + 24) = v15 & 0xFFFFFFBF;
    if ((v14 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v14 + 5) != 5)
    {
      *(_QWORD *)a1 = v14;
      v16 = 7;
LABEL_9:
      *(_DWORD *)(a1 + 28) = v16;
      return 1;
    }
    *(_DWORD *)(a1 + 24) = v15 & 0xFFFFFFBD;
    v112 = *(_QWORD *)(v14 + 8);
    if (&JSC::NullGetterFunction::s_info == (char **)(16
                                                     * *(unsigned int *)(16 * (*(_DWORD *)v112 & 0xFFFFFFFE) + 0x4C)))
      v112 = 10;
    *(_QWORD *)(a1 + 8) = v112;
    v86 = *(_QWORD *)(v14 + 16);
    if (*(_BYTE *)(v86 + 5) == 28 && v86 != 0)
      v86 = 10;
LABEL_104:
    *(_QWORD *)(a1 + 16) = v86;
    v16 = 6;
    goto LABEL_9;
  }
  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(0xAuLL);
  *(_DWORD *)(a1 + 24) = v13 & 0xFFFFFFCD | 0x10;
  *(_DWORD *)(a1 + 28) = 6;
  v18 = *(_QWORD *)(16 * (**(_DWORD **)(a4 + 32) & 0xFFFFFFFE) + 0x28);
  v19 = *(_QWORD *)a4;
  if (!*(_QWORD *)a4)
    goto LABEL_54;
  if (*(_BYTE *)(a4 + 51) == 1)
  {
    v20 = *(_OWORD *)(a4 + 72);
    v115 = 1;
  }
  else
  {
    v115 = 0;
    v20 = 0uLL;
  }
  v114 = v20;
  v119 = a3;
  ++*(_DWORD *)(v12 + 916);
  v116 = a3;
  v117 = v19;
  v21 = v20;
  v118 = v20;
  v22 = (uint64_t *)(v18 + 3232);
  v23 = *(_QWORD *)(v18 + 3232);
  if (v23
    || (WTF::HashTable<JSC::Weak<JSC::JSCustomGetterFunction>,JSC::Weak<JSC::JSCustomGetterFunction>,WTF::IdentityExtractor,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomGetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomGetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomGetterFunction>>::rehash((uint64_t *)(v18 + 3232), 8uLL, 0, a4, a5, a6, a7, a8), (v23 = *v22) != 0))
  {
    v24 = *(_DWORD *)(v23 - 8);
  }
  else
  {
    v24 = 0;
  }
  v25 = JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomGetterFunction>::hash((uint64_t *)&v116, v19, v21);
  v26 = 0;
  for (i = 1; ; ++i)
  {
    v28 = v25 & v24;
    v29 = (uint64_t **)(v23 + 8 * (v25 & v24));
    v30 = *v29;
    if (*v29 == (uint64_t *)-1)
    {
      v26 = (uint64_t **)(v23 + 8 * v28);
      goto LABEL_29;
    }
    if (!v30)
      break;
    v31 = *v30;
    if (*v30 && (v30[1] & 3) == 0 && *(WTF::StringImpl **)(v31 + 32) == v116 && *(_QWORD *)(v31 + 40) == v117)
    {
      v32 = *(_BYTE *)(v31 + 64) ? *(_QWORD *)(v31 + 48) : 0;
      if (v32 == v118)
        goto LABEL_45;
    }
LABEL_29:
    v25 = i + v28;
  }
  if (v26)
  {
    *v26 = 0;
    --*(_DWORD *)(*v22 - 16);
    v29 = v26;
  }
  v120 = v114;
  LOBYTE(v121) = v115;
  JSC::JSCustomGetterFunction::create(v12, v18, (unint64_t *)&v119, v19, &v120, a6, a7, a8);
  if (Allocator)
  {
    v106 = Allocator;
    if ((Allocator & 8) != 0)
      v107 = (Allocator - 112) | 1;
    else
      v107 = Allocator & 0xFFFFFFFFFFFFC000;
    if ((v107 & 1) != 0)
      v108 = (_QWORD *)(v107 + 47);
    else
      v108 = (_QWORD *)(*(_QWORD *)v107 + 32);
    Allocator = v108[2];
    if (!Allocator)
      Allocator = JSC::WeakSet::findAllocator(v108, v107);
    v108[2] = *(_QWORD *)Allocator;
    *(_QWORD *)Allocator = v106;
    *(_QWORD *)(Allocator + 8) = 0;
    *(_QWORD *)(Allocator + 16) = 0;
  }
  v34 = *v29;
  *v29 = (uint64_t *)Allocator;
  if (v34)
    v34[1] = 3;
  v35 = *v22;
  if (*v22)
    v36 = *(_DWORD *)(v35 - 12) + 1;
  else
    v36 = 1;
  *(_DWORD *)(v35 - 12) = v36;
  v37 = *v22;
  if (*v22)
    v38 = *(_DWORD *)(v37 - 12);
  else
    v38 = 0;
  v39 = (*(_DWORD *)(v37 - 16) + v38);
  v40 = *(unsigned int *)(v37 - 4);
  if (v40 > 0x400)
  {
    if (v40 <= 2 * v39)
      goto LABEL_110;
  }
  else if (3 * v40 <= 4 * v39)
  {
    if (!(_DWORD)v40)
      goto LABEL_43;
LABEL_110:
    for (j = 0; j != v40; ++j)
    {
      v89 = *v22;
      v90 = *(_QWORD **)(*v22 + 8 * j);
      if ((unint64_t)v90 + 1 >= 2 && (!*v90 || (v90[1] & 3) != 0))
      {
        v90[1] = 3;
        *(_QWORD *)(v89 + 8 * j) = -1;
        ++*(_DWORD *)(*v22 - 16);
        v104 = *v22;
        if (*v22)
          v105 = *(_DWORD *)(v104 - 12);
        else
          v105 = 0;
        *(_DWORD *)(v104 - 12) = v105 - 1;
      }
    }
    v91 = *v22;
    if (*v22 && (v92 = *(_DWORD *)(v91 - 4)) != 0)
      v41 = (v92 << (6 * *(_DWORD *)(v91 - 12) >= (2 * v92)));
    else
LABEL_43:
      v41 = 8;
    v29 = WTF::HashTable<JSC::Weak<JSC::JSCustomGetterFunction>,JSC::Weak<JSC::JSCustomGetterFunction>,WTF::IdentityExtractor,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomGetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomGetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomGetterFunction>>::rehash((uint64_t *)(v18 + 3232), v41, (uint64_t)v29, a4, a5, a6, a7, a8);
  }
LABEL_45:
  v42 = *v29;
  if (*v29)
  {
    if ((v42[1] & 3) != 0)
      v43 = 0;
    else
      v43 = *v42;
  }
  else
  {
    v43 = 0;
  }
  v44 = *(_DWORD *)(v12 + 916) - 1;
  *(_DWORD *)(v12 + 916) = v44;
  if (*(unsigned __int8 *)(v12 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v45 = v44 == 0;
  else
    v45 = 0;
  if (v45)
  {
    *(_BYTE *)(v12 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v12 + 192, 0);
  }
  *(_QWORD *)(a1 + 8) = v43;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) & 0xFFFFFFED | 0x10;
LABEL_54:
  v46 = *(_QWORD *)(a4 + 8);
  if (!v46)
    return 1;
  v116 = a3;
  ++*(_DWORD *)(v12 + 916);
  v47 = (uint64_t *)(v18 + 3256);
  v48 = *(_QWORD *)(v18 + 3256);
  if (v48
    || (WTF::HashTable<JSC::Weak<JSC::JSCustomSetterFunction>,JSC::Weak<JSC::JSCustomSetterFunction>,WTF::IdentityExtractor,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomSetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomSetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomSetterFunction>>::rehash((uint64_t *)(v18 + 3256), 8uLL, 0, a4, a5, a6, a7, a8), (v48 = *v47) != 0))
  {
    v49 = *(_DWORD *)(v48 - 8);
  }
  else
  {
    v49 = 0;
  }
  *(_QWORD *)&v120 = a3;
  *((_QWORD *)&v120 + 1) = v46;
  v121 = 0;
  v50 = JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomGetterFunction>::hash((uint64_t *)&v120, v46, 0);
  v55 = 0;
  v56 = 1;
  while (2)
  {
    v57 = v50 & v49;
    v58 = (uint64_t **)(v48 + 8 * (v50 & v49));
    v59 = *v58;
    if (*v58 == (uint64_t *)-1)
    {
      v55 = (uint64_t **)(v48 + 8 * v57);
LABEL_67:
      v50 = v56 + v57;
      ++v56;
      continue;
    }
    break;
  }
  if (v59)
  {
    v60 = *v59;
    if (*v59 && (v59[1] & 3) == 0 && *(WTF::StringImpl **)(v60 + 32) == a3 && *(_QWORD *)(v60 + 40) == v46)
      goto LABEL_128;
    goto LABEL_67;
  }
  if (v55)
  {
    *v55 = 0;
    --*(_DWORD *)(*v47 - 16);
    v58 = v55;
  }
  JSC::JSCustomSetterFunction::create(v12, v18, (unint64_t *)&v116, v46, v51, v52, v53, v54);
  if (v61)
  {
    v109 = v61;
    if ((v61 & 8) != 0)
      v110 = (v61 - 112) | 1;
    else
      v110 = v61 & 0xFFFFFFFFFFFFC000;
    if ((v110 & 1) != 0)
      v111 = (_QWORD *)(v110 + 47);
    else
      v111 = (_QWORD *)(*(_QWORD *)v110 + 32);
    v61 = v111[2];
    if (!v61)
      v61 = JSC::WeakSet::findAllocator(v111, v110);
    v111[2] = *(_QWORD *)v61;
    *(_QWORD *)v61 = v109;
    *(_QWORD *)(v61 + 8) = 0;
    *(_QWORD *)(v61 + 16) = 0;
  }
  v67 = *v58;
  *v58 = (uint64_t *)v61;
  if (v67)
    v67[1] = 3;
  v68 = *v47;
  if (*v47)
    v69 = *(_DWORD *)(v68 - 12) + 1;
  else
    v69 = 1;
  *(_DWORD *)(v68 - 12) = v69;
  v70 = *v47;
  if (*v47)
    v71 = *(_DWORD *)(v70 - 12);
  else
    v71 = 0;
  v72 = (*(_DWORD *)(v70 - 16) + v71);
  v73 = *(unsigned int *)(v70 - 4);
  if (v73 > 0x400)
  {
    if (v73 <= 2 * v72)
      goto LABEL_119;
  }
  else if (3 * v73 <= 4 * v72)
  {
    if (!(_DWORD)v73)
      goto LABEL_80;
LABEL_119:
    for (k = 0; k != v73; ++k)
    {
      v94 = *v47;
      v95 = *(_QWORD **)(*v47 + 8 * k);
      if ((unint64_t)v95 + 1 >= 2 && (!*v95 || (v95[1] & 3) != 0))
      {
        v95[1] = 3;
        *(_QWORD *)(v94 + 8 * k) = -1;
        ++*(_DWORD *)(*v47 - 16);
        v102 = *v47;
        if (*v47)
          v103 = *(_DWORD *)(v102 - 12);
        else
          v103 = 0;
        *(_DWORD *)(v102 - 12) = v103 - 1;
      }
    }
    v96 = *v47;
    if (*v47 && (v97 = *(_DWORD *)(v96 - 4)) != 0)
      v74 = (v97 << (6 * *(_DWORD *)(v96 - 12) >= (2 * v97)));
    else
LABEL_80:
      v74 = 8;
    v58 = WTF::HashTable<JSC::Weak<JSC::JSCustomSetterFunction>,JSC::Weak<JSC::JSCustomSetterFunction>,WTF::IdentityExtractor,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomSetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomSetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomSetterFunction>>::rehash(v47, v74, (uint64_t)v58, v62, v63, v64, v65, v66);
  }
LABEL_128:
  v98 = *v58;
  if (!*v58 || (v98[1] & 3) != 0)
    v99 = 0;
  else
    v99 = *v98;
  v100 = *(_DWORD *)(v12 + 916) - 1;
  *(_DWORD *)(v12 + 916) = v100;
  if (*(unsigned __int8 *)(v12 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v101 = v100 == 0;
  else
    v101 = 0;
  if (v101)
  {
    *(_BYTE *)(v12 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v12 + 192, 0);
  }
  *(_QWORD *)(a1 + 16) = v99;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 24) & 0xFFFFFFED | 0x10;
  return 1;
}

uint64_t JSC::PropertySlot::functionGetter(JSC::PropertySlot *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unsigned int *v22;
  int v23;
  unsigned int v24;
  JSC::VM *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  JSC::VM *v36;
  uint64_t (*v38)();
  unsigned int *v39;
  unsigned int v40;
  int v41;
  int v42;
  JSC::PropertySlot *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  _DWORD *v63;
  JSC::VM *v64;
  int v65;
  unsigned int *v66;
  int v67;
  unsigned int v68;
  unsigned int *v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  JSC::VM *v78;
  uint64_t (*v79)();
  unsigned int *v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  JSC::PropertySlot *v88;
  uint64_t v89;
  unint64_t v90;
  BOOL v91;
  uint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  JSC::VM *v115;
  uint64_t v116;
  _DWORD *v117;
  uint64_t v118;
  JSC::VM *v119[2];
  JSC::VM *v120;
  JSC::VM *v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  unint64_t v128;

  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 3);
  v11 = *((_QWORD *)a2 + 7);
  if (*(_DWORD *)(v11 + 80))
  {
    v82 = *(_DWORD *)(v11 + 80);
    if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
    {
      v104 = *((_QWORD *)this + 3);
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v10 = v104;
    }
    v83 = *(_QWORD *)(v11 + 16);
    if (v83)
      return *(_QWORD *)(v83 + 8);
  }
  v12 = *(_QWORD *)(v9 + 8);
  if (*(_BYTE *)(v12 + 5) == 26)
  {
    v13 = *(_QWORD *)(v12 + 24);
    if ((v13 & 1) != 0)
    {
      v13 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v13 + 5) != 8)
        goto LABEL_5;
    }
    else if (*(_BYTE *)(v13 + 5) != 8)
    {
LABEL_5:
      v14 = 0;
      LOBYTE(v112) = 2;
      v15 = *(_QWORD *)(v12 + 16);
      v113 = v13;
      v114 = v15;
      v110 = 0;
      v111 = 0;
      v16 = *((_QWORD *)a2 + 7);
      v119[0] = (JSC::VM *)v16;
      v17 = 1;
      goto LABEL_6;
    }
    v41 = 1;
    LOBYTE(v112) = 1;
    v113 = *(_QWORD *)(v13 + 40);
    v42 = &JSC::JSBoundFunction::s_info == (char **)(16
                                                   * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C));
    LOBYTE(v114) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                              + 0x4C));
  }
  else
  {
    v54 = v10;
    this = (JSC::PropertySlot *)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(16
                                                                                          * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)
                                                                                          + 0x38))(&v112, v12);
    v10 = v54;
    v41 = v112;
    v42 = v114;
  }
  v110 = 0;
  v111 = 0;
  v16 = *((_QWORD *)a2 + 7);
  if (v41 == 2 || !v42)
  {
    v119[0] = (JSC::VM *)v16;
    if (v41 != 2)
    {
      v17 = 0;
      v15 = 0;
      v13 = 0;
      v14 = v113;
      v18 = (_DWORD *)v12;
LABEL_7:
      v19 = v16 + 90568;
      v20 = *(_QWORD *)(16 * (*v18 & 0xFFFFFFFE) + 0x28);
      v115 = (JSC::VM *)v16;
      v116 = v20;
      if (*(_QWORD *)(v16 + 90568))
      {
LABEL_8:
        *(_QWORD *)(v16 + 32) = 0;
        if ((unint64_t)&v108 < *(_QWORD *)(v16 + 8) || v111 > 0x10000)
        {
          v32 = JSC::throwStackOverflowError(v20, v119, a3, v15, a5, a6, a7, a8);
        }
        else if (*(_DWORD *)(v16 + 4))
        {
          v32 = JSC::Interpreter::checkVMEntryPermission(this);
        }
        else
        {
          v21 = *(_DWORD *)(v16 + 80);
          if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
          {
            v84 = *(_DWORD *)(v16 + 80);
            if ((v84 & 0x27) != 0 && (v84 & 0x20) == 0)
            {
              v105 = v10;
              v106 = v14;
              v107 = v15;
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, a3, v15, a5, a6, a7, a8);
              v15 = v107;
              v14 = v106;
              v10 = v105;
            }
            v32 = *(_QWORD *)(v16 + 16);
            if (v32)
              goto LABEL_27;
          }
          v22 = (unsigned int *)(v16 + 80);
          v23 = *(_DWORD *)(v16 + 80);
          if ((v23 & 0x20) == 0)
          {
            do
              v24 = __ldaxr(v22);
            while (__stlxr(v24 | 0x20, v22));
          }
          v25 = 0;
          v26 = 0;
          v120 = 0;
          if (v17)
          {
            if (*(_BYTE *)(v13 + 5) == 8
              || (*(_QWORD *)(v13 + 8)
                ? (v38 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                : (v38 = 0),
                  v38))
            {
              v120 = *(JSC::VM **)(v13 + 96);
            }
            else
            {
              v52 = v10;
              v53 = v14;
              JSC::ScriptExecutable::prepareForExecutionImpl(v13, v16, v12, v15, 0, &v120);
              v14 = v53;
              v10 = v52;
            }
            v32 = *((_QWORD *)v119[0] + 2);
            if (v32)
            {
              if ((v23 & 0x20) == 0)
              {
                do
                  v85 = __ldaxr(v22);
                while (__stlxr(v85 & 0xFFFFFFDF, v22));
              }
              v19 = v16 + 90568;
              goto LABEL_27;
            }
            *((_BYTE *)v120 + 17) = 0;
            v26 = *(_QWORD *)(v13 + 8);
            v39 = (unsigned int *)(v26 + 8);
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 + 1, v39));
            v25 = v120;
          }
          v121 = v25;
          v122 = v12;
          v127 = v110;
          v128 = v20;
          v27 = 1;
          v123 = 1;
          if (v25)
          {
            v28 = *((_DWORD *)v25 + 7);
            v29 = v28 >= 2;
            v30 = v28 | 1;
            if (v29)
              v27 = v30;
            else
              v27 = 1;
          }
          v126 = v27;
          v124 = 0;
          v125 = v10;
          if ((v23 & 0x20) == 0)
          {
            do
              v31 = __ldaxr(v22);
            while (__stlxr(v31 & 0xFFFFFFDF, v22));
          }
          if (v17)
          {
            v32 = vmEntryToJavaScript(*(_QWORD *)(v26 + 16), (JSC::VM *)v16, (uint64_t)&v121, v15, a5, a6, a7, a8);
            v19 = v16 + 90568;
            goto LABEL_23;
          }
          v32 = vmEntryToNative(v14, (JSC::VM *)v16, (uint64_t)&v121, v15, a5, a6, a7, a8);
          v19 = v16 + 90568;
          if (v26)
          {
LABEL_23:
            v33 = (unsigned int *)(v26 + 8);
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              atomic_store(1u, (unsigned int *)(v26 + 8));
              (*(void (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
            }
          }
        }
LABEL_27:
        v36 = v115;
        if (*((JSC::VM ***)v115 + 11321) == &v115)
        {
          *((_QWORD *)v115 + 11321) = 0;
          if (*((_BYTE *)v36 + 56))
            JSC::VM::executeEntryScopeServicesOnExit(v36, a2, a3, v15, a5, a6, a7, a8);
        }
        *(_BYTE *)(v19 + 2552) = 1;
        return v32;
      }
      *(_QWORD *)v19 = &v115;
      v43 = *(JSC::PropertySlot **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v43)
      {
        v44 = v10;
        v45 = v14;
        v46 = v15;
        this = (JSC::PropertySlot *)WTF::Thread::initializeCurrentTLS(this);
        v15 = v46;
        v14 = v45;
        v10 = v44;
        v43 = this;
      }
      if ((*((_BYTE *)v43 + 5) & 0x20) == 0)
      {
        v97 = v15;
        v98 = v14;
        v99 = v10;
        *((_BYTE *)v43 + 5) |= 0x20u;
        if (BYTE2(dword_1ECF4C6C3))
          JSC::Wasm::startTrackingCurrentThread(this, (uint64_t)a2, a3, v15, a5, a6, a7, a8);
        WTF::registerThreadForMachExceptionHandling(v43, a2, a3, v15, a5, a6, a7, a8);
        v10 = v99;
        v14 = v98;
        v15 = v97;
      }
      this = v115;
      if (*((_BYTE *)v115 + 56))
      {
        v49 = v15;
        v50 = v14;
        v51 = v10;
      }
      else
      {
        v47 = *((_QWORD *)v115 + 11624);
        v48 = atomic_load(&JSC::lastTimeZoneID);
        if (v47 == v48)
          goto LABEL_8;
        v49 = v15;
        v50 = v14;
        v51 = v10;
        this = v115;
      }
      JSC::VM::executeEntryScopeServicesOnEntry(this, a2, a3, v15, a5, a6, a7, a8);
      v10 = v51;
      v14 = v50;
      v15 = v49;
      goto LABEL_8;
    }
    v14 = 0;
    v17 = 1;
    v13 = v113;
    v15 = v114;
LABEL_6:
    v18 = (_DWORD *)v15;
    goto LABEL_7;
  }
  if (*(_DWORD *)(v12 + 88))
    return JSC::Interpreter::executeBoundCall();
  v55 = v16 + 90568;
  v56 = *(_QWORD *)(v12 + 32);
  v57 = *(_QWORD *)(v12 + 40);
  v58 = *(unsigned __int8 *)(v56 + 5);
  v109 = v16 + 90568;
  if (v58 == 26)
  {
    v59 = *(_QWORD *)(v56 + 24);
    if ((v59 & 1) != 0)
      v59 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v59 + 5) != 8)
    {
      v60 = 0;
      LOBYTE(v115) = 2;
      v61 = *(_DWORD **)(v56 + 16);
      v116 = v59;
      v117 = v61;
      v120 = (JSC::VM *)v16;
      v62 = 1;
      v63 = v61;
      goto LABEL_64;
    }
    LOBYTE(v115) = 1;
    v60 = *(_QWORD *)(v59 + 40);
    v116 = v60;
    LOBYTE(v117) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v56 & 0xFFFFFFFE)
                                                                              + 0x4C));
    v120 = (JSC::VM *)v16;
    goto LABEL_99;
  }
  v95 = v57;
  v96 = v56;
  this = (JSC::PropertySlot *)(*(_QWORD *(**)(JSC::VM **__return_ptr, uint64_t))(16
                                                                                         * *(unsigned int *)(16 * (*(_DWORD *)v56 & 0xFFFFFFFE) + 0x4C)
                                                                                         + 0x38))(&v115, v56);
  v120 = (JSC::VM *)v16;
  if (v115 != 2)
  {
    v60 = v116;
    v56 = v96;
    v55 = v109;
    v57 = v95;
LABEL_99:
    v62 = 0;
    v61 = 0;
    v59 = 0;
    v63 = (_DWORD *)v56;
    goto LABEL_64;
  }
  v60 = 0;
  v62 = 1;
  v59 = v116;
  v61 = v117;
  v63 = v117;
  v56 = v96;
  v55 = v109;
  v57 = v95;
LABEL_64:
  v64 = *(JSC::VM **)(16 * (*v63 & 0xFFFFFFFE) + 0x28);
  v119[0] = (JSC::VM *)v16;
  v119[1] = v64;
  if (!*(_QWORD *)v55)
  {
    v86 = v57;
    v87 = v56;
    *(_QWORD *)v55 = v119;
    v88 = *(JSC::PropertySlot **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v88)
    {
      this = (JSC::PropertySlot *)WTF::Thread::initializeCurrentTLS(this);
      v88 = this;
    }
    if ((*((_BYTE *)v88 + 5) & 0x20) == 0)
    {
      *((_BYTE *)v88 + 5) |= 0x20u;
      if (BYTE2(dword_1ECF4C6C3))
        JSC::Wasm::startTrackingCurrentThread(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::registerThreadForMachExceptionHandling(v88, a2, a3, a4, a5, a6, a7, a8);
    }
    this = v119[0];
    if (!*((_BYTE *)v119[0] + 56))
    {
      v89 = *((_QWORD *)v119[0] + 11624);
      v90 = atomic_load(&JSC::lastTimeZoneID);
      v91 = v89 == v90;
      v56 = v87;
      v55 = v109;
      v57 = v86;
      if (v91)
        goto LABEL_65;
      this = v119[0];
    }
    JSC::VM::executeEntryScopeServicesOnEntry(this, a2, a3, a4, a5, a6, a7, a8);
    v56 = v87;
    v55 = v109;
    v57 = v86;
  }
LABEL_65:
  *(_QWORD *)(v16 + 32) = 0;
  if ((unint64_t)&v108 < *(_QWORD *)(v16 + 8) || v111 > 0x10000)
  {
    v32 = JSC::throwStackOverflowError((unint64_t)v64, &v120, a3, a4, a5, a6, a7, a8);
    goto LABEL_84;
  }
  if (*(_DWORD *)(v16 + 4))
  {
    v32 = JSC::Interpreter::checkVMEntryPermission(this);
    goto LABEL_84;
  }
  v65 = *(_DWORD *)(v16 + 80);
  if ((v65 & 0x27) == 0
    || (v65 & 0x20) != 0
    || (v100 = v56,
        v101 = v57,
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, (uint64_t)a2, a3, a4, a5, a6, a7, a8), v57 = v101, v56 = v100, !hasExceptionsAfterHandlingTraps))
  {
    v66 = (unsigned int *)(v16 + 80);
    v67 = *(_DWORD *)(v16 + 80);
    if ((v67 & 0x20) == 0)
    {
      do
        v68 = __ldaxr(v66);
      while (__stlxr(v68 | 0x20, v66));
    }
    v69 = 0;
    v70 = 0;
    v118 = 0;
    if (v62)
    {
      if (*(_BYTE *)(v59 + 5) == 8
        || (*(_QWORD *)(v59 + 8)
          ? (v79 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
          : (v79 = 0),
            v79))
      {
        v118 = *(_QWORD *)(v59 + 96);
      }
      else
      {
        v92 = v56;
        v93 = v61;
        v94 = v57;
        JSC::ScriptExecutable::prepareForExecutionImpl(v59, v16, v56, v93, 0, &v118);
        v57 = v94;
        v56 = v92;
      }
      v32 = *((_QWORD *)v120 + 2);
      if (v32)
      {
        if ((v67 & 0x20) == 0)
        {
          do
            v103 = __ldaxr(v66);
          while (__stlxr(v103 & 0xFFFFFFDF, v66));
        }
        goto LABEL_133;
      }
      *(_BYTE *)(v118 + 17) = 0;
      v70 = *(_QWORD *)(v59 + 8);
      v80 = (unsigned int *)(v70 + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 + 1, v80));
      v69 = (unsigned int *)v118;
    }
    v121 = (JSC::VM *)v69;
    v122 = v56;
    v127 = v110;
    v128 = (unint64_t)v64;
    v71 = 1;
    v123 = 1;
    if (v69)
    {
      v72 = v69[7];
      v29 = v72 >= 2;
      v73 = v72 | 1;
      if (v29)
        v71 = v73;
      else
        v71 = 1;
    }
    v126 = v71;
    v124 = 0;
    v125 = v57;
    if ((v67 & 0x20) == 0)
    {
      do
        v74 = __ldaxr(v66);
      while (__stlxr(v74 & 0xFFFFFFDF, v66));
    }
    if (v62)
    {
      v32 = vmEntryToJavaScript(*(_QWORD *)(v70 + 16), (JSC::VM *)v16, (uint64_t)&v121, a4, a5, a6, a7, a8);
      v55 = v109;
    }
    else
    {
      v32 = vmEntryToNative(v60, (JSC::VM *)v16, (uint64_t)&v121, a4, a5, a6, a7, a8);
      v55 = v109;
      if (!v70)
        goto LABEL_84;
    }
    v75 = (unsigned int *)(v70 + 8);
    do
    {
      v76 = __ldaxr(v75);
      v77 = v76 - 1;
    }
    while (__stlxr(v77, v75));
    if (!v77)
    {
      atomic_store(1u, (unsigned int *)(v70 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 32))(v70);
    }
    goto LABEL_84;
  }
  v32 = *(_QWORD *)(v16 + 16);
LABEL_133:
  v55 = v109;
LABEL_84:
  v78 = v119[0];
  if (*((JSC::VM ***)v119[0] + 11321) == v119)
  {
    *((_QWORD *)v119[0] + 11321) = 0;
    if (*((_BYTE *)v78 + 56))
      JSC::VM::executeEntryScopeServicesOnExit(v78, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_BYTE *)(v55 + 2552) = 1;
  return v32;
}

uint64_t JSC::PropertySlot::customGetter(uint64_t a1, JSC::VM *a2, WTF::StringImpl *a3)
{
  unint64_t v5;
  unint64_t v6;
  int8x16_t **v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  JSC::VM *v14;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  if ((*(_BYTE *)(a1 + 16) & 0x20) != 0)
    v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(a1 + 51) != 1)
    return (*(uint64_t (**)(unint64_t, unint64_t, WTF::StringImpl *))a1)(v6, v5, a3);
  v7 = *(int8x16_t ***)(a1 + 72);
  if ((v5 & 0xFFFE000000000002) == 0)
  {
    v8 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
    v9 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
    v10 = 16 * v8;
    if ((_DWORD)v8)
      v11 = v7 == (int8x16_t **)v10;
    else
      v11 = 1;
    if (!v11)
    {
      do
      {
        v10 = *(_QWORD *)(v10 + 16);
        v9 = v10 != 0;
      }
      while ((int8x16_t **)v10 != v7 && v10 != 0);
    }
    if (v9)
      return (*(uint64_t (**)(unint64_t, unint64_t, WTF::StringImpl *))a1)(v6, v5, a3);
  }
  v14 = a2;
  return JSC::throwDOMAttributeGetterTypeError(v6, &v14, v7, a3);
}

void JSC::PropertyTable::destroy(JSC::PropertyTable *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl **v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t StatusReg;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v9 = *((_QWORD *)this + 2);
  v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
  v11 = *((unsigned int *)this + 2);
  v12 = (*((_DWORD *)this + 7) + *((_DWORD *)this + 6));
  if ((v9 & 1) != 0)
  {
    if (!(_DWORD)v12)
      goto LABEL_31;
    v16 = (_QWORD *)(v10 + v11);
    v17 = 8 * v12;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v19 = *v16 & 0xFFFFFFFFFFFFLL;
      if (v19 != 1)
      {
        if (*(_DWORD *)v19 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)(*v16 & 0xFFFFFFFFFFFFLL), a2, a3, a4, a5, a6, a7, a8);
          v20 = *(_QWORD *)(StatusReg + 752);
          if (v20)
          {
            if (!(v19 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v19 >> 27) & 0x1FFFFC)) >> SBYTE3(v19)) & 1) != 0)
            {
LABEL_13:
              v21 = *(unsigned int *)(v20 + 8000);
              if (v21 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v20, v19, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v20 + 8 * v21) = v19 | 0x5000000000000;
                *(_DWORD *)(v20 + 8000) = v21 + 1;
              }
              goto LABEL_7;
            }
            if (v19 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v19 >> 24)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v19 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v19) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_13;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v20, v19, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v19, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v19 -= 2;
        }
      }
LABEL_7:
      ++v16;
      v17 -= 8;
      if (!v17)
        goto LABEL_31;
    }
  }
  if ((_DWORD)v12)
  {
    v13 = 16 * v12;
    v14 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v15 = (WTF::StringImpl **)(v10 + 4 * v11);
    do
    {
      v22 = (unint64_t)*v15;
      if (*v15 != (WTF::StringImpl *)1)
      {
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::~StringImpl(*v15, a2, a3, a4, a5, a6, a7, a8);
          v23 = *(_QWORD *)(v14 + 752);
          if (v23)
          {
            if (!(v22 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v22 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v22)) & 1) != 0)
            {
LABEL_29:
              v24 = *(unsigned int *)(v23 + 8000);
              if (v24 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v23, v22, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v23 + 8 * v24) = v22 | 0x5000000000000;
                *(_DWORD *)(v23 + 8000) = v24 + 1;
              }
              goto LABEL_23;
            }
            if (v22 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v22 >> 24)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v22 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v22) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_29;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v23, v22, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v22, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
        else
        {
          *(_DWORD *)v22 -= 2;
        }
      }
LABEL_23:
      v15 += 2;
      v13 -= 16;
    }
    while (v13);
  }
LABEL_31:
  v25 = *((_QWORD *)this + 2);
  v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
  v27 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v28 = *(_QWORD *)(v27 + 752);
  if (!v28)
  {
    pas_try_deallocate_slow_no_cache(v26, (uint64_t)&bmalloc_heap_config, 1);
    goto LABEL_36;
  }
  if (v26 >> 43
    || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v25 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v25)) & 1) == 0)
  {
    v34 = v25 >> 24;
    v35 = (v25 >> 24) - *off_1ECF425F8;
    if (v34 < *off_1ECF425F8 || off_1ECF425F8[1] <= v34)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((v35 >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * (v35 & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
        goto LABEL_34;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v28, v26, 1, a4, a5, a6, a7, a8);
    goto LABEL_36;
  }
LABEL_34:
  v29 = *(unsigned int *)(v28 + 8000);
  if (v29 >= 0x3E7)
  {
    pas_thread_local_cache_append_deallocation_slow(v28, v26, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(v28 + 8 * v29) = v26 | 0x5000000000000;
    *(_DWORD *)(v28 + 8000) = v29 + 1;
  }
LABEL_36:
  v30 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (!v30)
    return;
  v31 = *(_QWORD *)v30;
  if (*(_QWORD *)v30)
  {
    *(_QWORD *)v30 = 0;
    *(_DWORD *)(v30 + 8) = 0;
    WTF::fastFree(v31, (void *)v26, a3, a4, a5, a6, a7, a8);
  }
  v32 = *(_QWORD *)(v27 + 752);
  if (!v32)
  {
    pas_try_deallocate_slow_no_cache(v30, (uint64_t)&bmalloc_heap_config, 1);
    return;
  }
  if (v30 >> 43
    || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v30 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v30)) & 1) == 0)
  {
    if (v30 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v30 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v30 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v30) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
        goto LABEL_42;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v32, v30, 1, a4, a5, a6, a7, a8);
    return;
  }
LABEL_42:
  v33 = *(unsigned int *)(v32 + 8000);
  if (v33 >= 0x3E7)
  {
    pas_thread_local_cache_append_deallocation_slow(v32, v30, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(v32 + 8 * v33) = v30 | 0x5000000000000;
    *(_DWORD *)(v32 + 8000) = v33 + 1;
  }
}

void JSC::PropertyTable::visitChildren(JSC::PropertyTable *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  if (*((_BYTE *)a2 + 184))
  {
    v12 = *((unsigned int *)this + 2);
    v13 = 3;
    if ((*((_QWORD *)this + 2) & 1) == 0)
      v13 = 4;
    v14 = ((v12 >> 1) + 1) << v13;
    if ((*((_QWORD *)this + 2) & 1) == 0)
      v12 *= 4;
    v15 = v14 + v12;
    *((_QWORD *)a2 + 18) += v15;
    v16 = *((_QWORD *)a2 + 20);
    v17 = __CFADD__(v16, v15);
    v18 = v16 + v15;
    if (v17)
      *((_BYTE *)a2 + 152) = 1;
    else
      *((_QWORD *)a2 + 20) = v18;
  }
}

uint64_t JSC::PropertyTable::visitChildren(JSC::PropertyTable *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  _QWORD v10[2];
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  _QWORD *v14;
  char v15;

  v10[0] = a2;
  v10[1] = this;
  v12 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v11 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v13[0] = a2;
    v13[1] = this;
    v15 = 0;
    v14 = v10;
    *((_QWORD *)a2 + 11) = v13;
    (*(void (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
    *(_QWORD *)(v13[0] + 88) = v14;
    v6 = *((unsigned int *)this + 2);
    v7 = 4 * v6;
    v8 = 3;
    if ((*((_QWORD *)this + 2) & 1) != 0)
      v7 = *((unsigned int *)this + 2);
    else
      v8 = 4;
    result = (*(uint64_t (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 96))(a2, (((v6 >> 1) + 1) << v8) + v7);
    *(_QWORD *)(v10[0] + 88) = v11;
  }
  return result;
}

unint64_t JSC::PropertyTable::create(JSC::PropertyTable *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  _QWORD *v10;
  char *v11;
  unint64_t SlowCase;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unint64_t *v16;
  uint64_t v17;
  char v18;
  size_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t impl_casual_case;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  char v33;
  unint64_t v34;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;

  v8 = a2;
  v10 = (_QWORD *)((char *)this + 39168);
  v11 = (char *)this + 192;
  SlowCase = *((_QWORD *)this + 4896);
  if (SlowCase < *((_QWORD *)this + 4897))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4898);
  if ((SlowCase & 1) == 0)
  {
    v41 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4899);
    *((_QWORD *)this + 4897) = SlowCase + HIDWORD(v41);
    *((_QWORD *)this + 4898) = SlowCase + (int)v41;
LABEL_2:
    *v10 = SlowCase + 48;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM(this, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)this + 39144, v11, 48, 0, 0);
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v13 = v10[323];
  v14 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)SlowCase = v13 >> 4;
  *(_DWORD *)(SlowCase + 4) = v14;
  if (v8 >= 8)
  {
    v39 = v8 | (v8 >> 1) | ((v8 | (v8 >> 1)) >> 2);
    v40 = v39 | (v39 >> 4) | ((v39 | (v39 >> 4)) >> 8);
    v15 = 2 * (v40 | HIWORD(v40)) + 2;
  }
  else
  {
    v15 = 16;
  }
  *(_QWORD *)(SlowCase + 16) = 0;
  v16 = (unint64_t *)(SlowCase + 16);
  *(_DWORD *)(SlowCase + 8) = v15;
  *(_DWORD *)(SlowCase + 12) = v15 - 1;
  v17 = v15;
  v18 = 3;
  if (v15 >= 0x1FE)
  {
    v18 = 4;
    v17 = 4 * v15;
  }
  v19 = ((unint64_t)((v15 >> 1) + 1) << v18) + v17;
  *(_QWORD *)(SlowCase + 24) = 0;
  *(_QWORD *)(SlowCase + 32) = 0;
  v20 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v20)
    goto LABEL_11;
  v21 = (v19 + 15) >> 4;
  if (v19 <= 0x1A0)
  {
    v22 = 23 * v21 + 7;
    goto LABEL_13;
  }
  if (v19 <= 0x2710)
  {
    v22 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v21 + 626);
    if (*(_DWORD *)(v20 + 8052) > v22)
    {
LABEL_13:
      v25 = v20 + 8 * v22;
      v26 = v25 + 8064;
      *(_BYTE *)(v25 + 8064) = 1;
      v27 = *(unsigned int *)(v25 + 8080);
      if ((_DWORD)v27)
      {
        *(_DWORD *)(v26 + 16) = v27 - *(_DWORD *)(v26 + 20);
        impl_casual_case = *(_QWORD *)(v26 + 8) - v27;
      }
      else
      {
        v36 = *(_QWORD *)(v26 + 40);
        v37 = *(_QWORD *)(v26 + 24);
        if (!v36)
        {
          if (*(_BYTE *)(v26 + 5) == 6)
          {
            v42 = *(unsigned int *)(v26 + 32);
            v43 = *(_DWORD *)(v26 + 36);
            if (v42 < v43)
            {
              *(_QWORD *)(v26 + 8 * v42 + 56) = 0;
              v44 = (unint64_t *)(8 * v22 + 8 * v42 + v20 + 8128);
              v45 = v43 - 1 - v42;
              while (v45)
              {
                v37 += 1024;
                v47 = *v44++;
                v46 = v47;
                LODWORD(v42) = v42 + 1;
                --v45;
                if (v47)
                {
                  v36 = __rbit64(v46);
                  *(_DWORD *)(v26 + 32) = v42;
                  *(_QWORD *)(v26 + 24) = v37;
                  goto LABEL_35;
                }
              }
              *(_DWORD *)(v26 + 32) = v43;
            }
          }
          *(_BYTE *)v26 = 0;
          goto LABEL_11;
        }
LABEL_35:
        v38 = __clz(v36);
        *(_QWORD *)(v26 + 40) = v36 & ~(0x8000000000000000 >> v38);
        impl_casual_case = v37 + 16 * v38;
      }
      *(_BYTE *)v26 = 0;
      v23 = 1;
      goto LABEL_16;
    }
  }
LABEL_11:
  impl_casual_case = (unint64_t)bmalloc_allocate_impl_casual_case(v19, 1, a3, a4, a5, a6, a7, a8);
LABEL_16:
  if ((v23 & 1) != 0 && (v23 & 0xFFFFFFFF00000000) != 0x100000000)
  {
    if (!(v19 >> 24))
      goto LABEL_25;
    v28 = pas_page_malloc_cached_alignment;
    if (!pas_page_malloc_cached_alignment)
    {
      v28 = pas_page_malloc_alignment_slow();
      pas_page_malloc_cached_alignment = v28;
    }
    if (((v28 - 1) & (v19 | impl_casual_case)) != 0)
    {
LABEL_25:
      bzero((void *)impl_casual_case, v19);
    }
    else
    {
      if (!v28)
        pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
      mmap((void *)impl_casual_case, v19, 3, 4114, 889192448, 0);
    }
  }
  v29 = impl_casual_case | (v15 < 0x1FE);
  *v16 = v29;
  if (*((_BYTE *)this + 755))
  {
    __dmb(0xAu);
    v29 = *v16;
  }
  v30 = *(unsigned int *)(SlowCase + 8);
  v31 = 4 * v30;
  v32 = (v29 & 1) == 0;
  v33 = 3;
  if (v32)
    v33 = 4;
  else
    v31 = *(unsigned int *)(SlowCase + 8);
  v34 = (((v30 >> 1) + 1) << v33) + v31;
  if (v34 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v11, 0, SlowCase, v34, a5, a6, a7, a8);
  return SlowCase;
}

unint64_t JSC::PropertyTable::clone(JSC::PropertyTable *this, JSC::VM *a2, const JSC::PropertyTable *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const JSC::PropertyTable *v8;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t SlowCase;

  v8 = a2;
  v10 = (char *)this + 192;
  v11 = *((_QWORD *)this + 4896);
  if (v11 < *((_QWORD *)this + 4897))
    goto LABEL_2;
  v11 = *((_QWORD *)this + 4898);
  if ((v11 & 1) == 0)
  {
    v21 = *(_QWORD *)(v11 + 8) ^ *((_QWORD *)this + 4899);
    *((_QWORD *)this + 4897) = v11 + HIDWORD(v21);
    *((_QWORD *)this + 4898) = v11 + (int)v21;
LABEL_2:
    *((_QWORD *)this + 4896) = v11 + 48;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a2, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)this + 39144, v10, 48, 0, 0);
  v8 = a2;
  v11 = SlowCase;
LABEL_3:
  *(_DWORD *)v11 = 0;
  JSC::PropertyTable::PropertyTable((JSC::PropertyTable *)v11, this, v8);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v16 = *(unsigned int *)(v11 + 8);
  v17 = 4 * v16;
  v18 = 3;
  if ((*(_QWORD *)(v11 + 16) & 1) != 0)
    v17 = *(unsigned int *)(v11 + 8);
  else
    v18 = 4;
  v19 = (((v16 >> 1) + 1) << v18) + v17;
  if (v19 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v10, 0, v11, v19, v12, v13, v14, v15);
  return v11;
}

unint64_t JSC::PropertyTable::clone(JSC::PropertyTable *this, JSC::VM *a2, const JSC::PropertyTable *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v22;
  uint64_t SlowCase;
  unsigned int v24;
  const JSC::PropertyTable *v25;

  v9 = (uint64_t)a2;
  v11 = (char *)this + 192;
  v12 = *((_QWORD *)this + 4896);
  if (v12 < *((_QWORD *)this + 4897))
    goto LABEL_2;
  v12 = *((_QWORD *)this + 4898);
  if ((v12 & 1) == 0)
  {
    v22 = *(_QWORD *)(v12 + 8) ^ *((_QWORD *)this + 4899);
    *((_QWORD *)this + 4897) = v12 + HIDWORD(v22);
    *((_QWORD *)this + 4898) = v12 + (int)v22;
LABEL_2:
    *((_QWORD *)this + 4896) = v12 + 48;
    goto LABEL_3;
  }
  v25 = a3;
  v24 = a2;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a2, (uint64_t)a3, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)this + 39144, v11, 48, 0, 0);
  v9 = v24;
  a3 = v25;
  v12 = SlowCase;
LABEL_3:
  *(_DWORD *)v12 = 0;
  JSC::PropertyTable::PropertyTable((JSC::PropertyTable *)v12, this, v9, a3, a5, a6, a7, a8);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v17 = *(unsigned int *)(v12 + 8);
  v18 = 4 * v17;
  v19 = 3;
  if ((*(_QWORD *)(v12 + 16) & 1) != 0)
    v18 = *(unsigned int *)(v12 + 8);
  else
    v19 = 4;
  v20 = (((v17 >> 1) + 1) << v19) + v18;
  if (v20 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v11, 0, v12, v20, v13, v14, v15, v16);
  return v12;
}

JSC::PropertyTable *JSC::PropertyTable::PropertyTable(JSC::PropertyTable *this, JSC::VM *a2, const JSC::PropertyTable *a3)
{
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD **v23;
  _QWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  JSC::PropertyTable *result;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::PropertyTable *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;

  v5 = *((_QWORD *)a2 + 5219);
  v6 = *(_DWORD *)(v5 + 8);
  *(_DWORD *)this = v5 >> 4;
  *((_DWORD *)this + 1) = v6;
  *((_QWORD *)this + 1) = *((_QWORD *)a3 + 1);
  v7 = *((unsigned int *)a3 + 2);
  v8 = 4 * v7;
  v9 = *((_QWORD *)a3 + 2) & 1;
  if (v9)
    v10 = 3;
  else
    v10 = 4;
  if ((*((_QWORD *)a3 + 2) & 1) != 0)
    v8 = *((unsigned int *)a3 + 2);
  v11 = WTF::fastMalloc((WTF *)((((v7 >> 1) + 1) << v10) + v8));
  v12 = v9 | v11;
  *((_QWORD *)this + 2) = v9 | v11;
  *((_QWORD *)this + 3) = *((_QWORD *)a3 + 3);
  *((_QWORD *)this + 4) = 0;
  v13 = (void *)(v11 & 0xFFFFFFFFFFFFFFFELL);
  v14 = *((unsigned int *)this + 2);
  v15 = 4 * v14;
  v16 = (v12 & 1) == 0;
  if ((v12 & 1) != 0)
    v17 = 3;
  else
    v17 = 4;
  if (!v16)
    v15 = *((unsigned int *)this + 2);
  memcpy(v13, (const void *)(*((_QWORD *)a3 + 2) & 0xFFFFFFFFFFFFFFFELL), (((v14 >> 1) + 1) << v17) + v15);
  v18 = *((_QWORD *)this + 2);
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v20 = *((unsigned int *)this + 2);
  v21 = (*((_DWORD *)this + 7) + *((_DWORD *)this + 6));
  if ((v18 & 1) != 0)
  {
    if ((_DWORD)v21)
    {
      v24 = (_QWORD *)(v19 + v20);
      v25 = 8 * v21;
      do
      {
        v26 = (_DWORD *)(*v24 & 0xFFFFFFFFFFFFLL);
        if (v26 != (_DWORD *)1)
          *v26 += 2;
        ++v24;
        v25 -= 8;
      }
      while (v25);
    }
  }
  else if ((_DWORD)v21)
  {
    v22 = 16 * v21;
    v23 = (_DWORD **)(v19 + 4 * v20);
    do
    {
      if (*v23 != (_DWORD *)1)
        **v23 += 2;
      v23 += 2;
      v22 -= 16;
    }
    while (v22);
  }
  v27 = *((_QWORD *)a3 + 4);
  if (!v27)
    return this;
  result = (JSC::PropertyTable *)WTF::fastMalloc((WTF *)0x10);
  v36 = result;
  v37 = *(unsigned int *)(v27 + 12);
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  *((_DWORD *)result + 3) = v37;
  if (!(_DWORD)v37)
  {
LABEL_25:
    v38 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v36;
    if (v38)
    {
      v39 = *(_QWORD *)v38;
      if (*(_QWORD *)v38)
      {
        *(_QWORD *)v38 = 0;
        *(_DWORD *)(v38 + 8) = 0;
        WTF::fastFree(v39, v29, v30, v31, v32, v33, v34, v35);
      }
      WTF::fastFree(v38, v29, v30, v31, v32, v33, v34, v35);
    }
    return this;
  }
  if (!(v37 >> 30))
  {
    v40 = (void *)WTF::fastMalloc((WTF *)(4 * v37));
    *((_DWORD *)v36 + 2) = v37;
    *(_QWORD *)v36 = v40;
    memcpy(v40, *(const void **)v27, 4 * *(unsigned int *)(v27 + 12));
    goto LABEL_25;
  }
  __break(0xC471u);
  return result;
}

JSC::PropertyTable *JSC::PropertyTable::PropertyTable(JSC::PropertyTable *this, JSC::VM *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  unsigned int *v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  JSC::PropertyTable *result;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  JSC::PropertyTable *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  unsigned int *v69;
  unint64_t *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  const JSC::PropertyTable *v74;
  unsigned int **v75;

  v10 = *((_QWORD *)a2 + 5219);
  v11 = *(_DWORD *)(v10 + 8);
  *(_DWORD *)this = v10 >> 4;
  *((_DWORD *)this + 1) = v11;
  if (a3 >= 8)
  {
    v36 = a3 | (a3 >> 1) | ((a3 | (a3 >> 1)) >> 2);
    v37 = v36 | (v36 >> 4) | ((v36 | (v36 >> 4)) >> 8);
    v12 = 2 * (v37 | HIWORD(v37)) + 2;
  }
  else
  {
    v12 = 16;
  }
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 2) = v12;
  *((_DWORD *)this + 3) = v12 - 1;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v13 = v12;
  v14 = 1;
  v15 = 3;
  if (v12 >= 0x1FE)
  {
    v15 = 4;
    v14 = 0;
    v13 = 4 * v12;
  }
  if ((*((_BYTE *)a4 + 16) & 1) != 0)
    v16 = v15;
  else
    v16 = 4;
  if ((*((_BYTE *)a4 + 16) & 1) != 0)
    v17 = v14;
  else
    v17 = 0;
  if ((*((_BYTE *)a4 + 16) & 1) == 0)
    v13 = 4 * v12;
  v18 = WTF::fastZeroedMalloc(v13 + ((unint64_t)((v12 >> 1) + 1) << v16), (unint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  *((_QWORD *)this + 2) = v17 | v18;
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (((v17 | v18) & 1) != 0)
  {
    v73 = v18 & 0xFFFFFFFFFFFFFFFELL;
    v74 = a4;
    v72 = v19 + *((unsigned int *)this + 2);
    v69 = (unsigned int *)this;
    v70 = &v73;
    v71 = &v72;
    v75 = &v69;
    v20 = *((_QWORD *)a4 + 2);
    v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
    if ((v20 & 1) != 0)
    {
      v22 = *((_DWORD *)a4 + 7) + *((_DWORD *)a4 + 6);
      if (v22)
      {
        v23 = (uint64_t *)(v21 + *((unsigned int *)a4 + 2));
        v24 = &v23[v22];
        do
        {
          v25 = *v23;
          if ((*v23 & 0xFFFFFFFFFFFFLL) != 1)
          {
            v26 = *(_DWORD *)((*v23 & 0xFFFFFFFFFFFFLL) + 0x10);
            if ((v26 & 0x20) != 0)
              v26 = *(_DWORD *)((*v23 & 0xFFFFFFFFFFFFLL) + 0x20);
            v27 = 0;
            v28 = v69;
            v29 = *v70;
            v30 = *v71;
            v31 = v26 >> 8;
            v32 = v69[3];
            do
            {
              v33 = v31 & v32;
              v34 = *(unsigned __int8 *)(v29 + (v31 & v32));
              v31 = ++v27 + (v31 & v32);
            }
            while (v34);
            v35 = v69[7] + v69[6];
            *(_BYTE *)(v29 + v33) = *((_BYTE *)v69 + 28) + *((_BYTE *)v69 + 24) + 1;
            *(_QWORD *)(v30 + 8 * v35) = v25;
            ++v28[6];
            *(_DWORD *)(*v23 & 0xFFFFFFFFFFFFLL) += 2;
          }
          ++v23;
        }
        while (v23 != v24);
      }
    }
    else
    {
      _ZZNK3JSC13PropertyTable15forEachPropertyIZZNS0_C1ERNS_2VMEjRKS0_ENK3__0clIhEEDaPT_EUlRS9_E_EEvRKS9_ENKUlPSD_E_clIjEES8_SF_(&v74, v21);
    }
  }
  else
  {
    v73 = v18 & 0xFFFFFFFFFFFFFFFELL;
    v74 = a4;
    v38 = v19 + 4 * *((unsigned int *)this + 2);
    v69 = (unsigned int *)this;
    v70 = &v73;
    v71 = &v72;
    v72 = v38;
    v75 = &v69;
    v39 = *((_QWORD *)a4 + 2);
    v40 = v39 & 0xFFFFFFFFFFFFFFFELL;
    if ((v39 & 1) != 0)
    {
      v41 = *((_DWORD *)a4 + 7) + *((_DWORD *)a4 + 6);
      if (v41)
      {
        v42 = (unint64_t *)(v40 + *((unsigned int *)a4 + 2));
        v43 = &v42[v41];
        do
        {
          v44 = *v42;
          v45 = *v42 & 0xFFFFFFFFFFFFLL;
          if (v45 != 1)
          {
            v46 = *(_DWORD *)((*v42 & 0xFFFFFFFFFFFFLL) + 0x10);
            if ((v46 & 0x20) != 0)
              v46 = *(_DWORD *)((*v42 & 0xFFFFFFFFFFFFLL) + 0x20);
            v47 = 0;
            v48 = v69;
            v49 = *v70;
            v50 = *v71;
            v51 = v46 >> 8;
            do
            {
              v52 = v51 & v69[3];
              v51 = ++v47 + v52;
            }
            while (*(_DWORD *)(v49 + 4 * v52));
            v53 = v69[7] + v69[6];
            *(_DWORD *)(v49 + 4 * v52) = v53 + 1;
            v54 = v50 + 16 * v53;
            *(_QWORD *)v54 = v45;
            *(_DWORD *)(v54 + 8) = HIBYTE(v44);
            *(_BYTE *)(v54 + 12) = BYTE6(v44);
            ++v48[6];
            *(_DWORD *)(*v42 & 0xFFFFFFFFFFFFLL) += 2;
          }
          ++v42;
        }
        while (v42 != v43);
      }
    }
    else
    {
      _ZZNK3JSC13PropertyTable15forEachPropertyIZZNS0_C1ERNS_2VMEjRKS0_ENK3__0clIjEEDaPT_EUlRS9_E_EEvRKS9_ENKUlPSD_E_clIjEES8_SF_(&v74, v40);
    }
  }
  v55 = *((_QWORD *)a4 + 4);
  if (!v55)
    return this;
  result = (JSC::PropertyTable *)WTF::fastMalloc((WTF *)0x10);
  v64 = result;
  v65 = *(unsigned int *)(v55 + 12);
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0;
  *((_DWORD *)result + 3) = v65;
  if (!(_DWORD)v65)
  {
LABEL_41:
    v66 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v64;
    if (v66)
    {
      v67 = *(_QWORD *)v66;
      if (*(_QWORD *)v66)
      {
        *(_QWORD *)v66 = 0;
        *(_DWORD *)(v66 + 8) = 0;
        WTF::fastFree(v67, v57, v58, v59, v60, v61, v62, v63);
      }
      WTF::fastFree(v66, v57, v58, v59, v60, v61, v62, v63);
    }
    return this;
  }
  if (!(v65 >> 30))
  {
    v68 = (void *)WTF::fastMalloc((WTF *)(4 * v65));
    *((_DWORD *)v64 + 2) = v65;
    *(_QWORD *)v64 = v68;
    memcpy(v68, *(const void **)v55, 4 * *(unsigned int *)(v55 + 12));
    goto LABEL_41;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::PropertyTable::forEachPropertyMutable<JSC::PropertyTable::seal(void)::$_0>(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = *(_QWORD *)(result + 16);
  v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
  v3 = *(unsigned int *)(result + 8);
  v4 = (*(_DWORD *)(result + 28) + *(_DWORD *)(result + 24));
  if ((v1 & 1) != 0)
  {
    if ((_DWORD)v4)
    {
      v7 = (_QWORD *)(v2 + v3);
      v8 = 8 * v4;
      do
      {
        if ((*v7 & 0xFFFFFFFFFFFFLL) != 1)
          *v7 |= 0x8000000000000uLL;
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
  }
  else if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    v6 = (_BYTE *)(v2 + 4 * v3 + 12);
    do
    {
      if (*(_QWORD *)(v6 - 12) != 1)
        *v6 |= 8u;
      v6 += 16;
      v5 -= 16;
    }
    while (v5);
  }
  return result;
}

uint64_t JSC::PropertyTable::isSealed(JSC::PropertyTable *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  BOOL v12;

  v1 = *((_QWORD *)this + 2);
  v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
  v3 = *((unsigned int *)this + 2);
  v4 = (*((_DWORD *)this + 7) + *((_DWORD *)this + 6));
  if ((v1 & 1) != 0)
  {
    if ((_DWORD)v4)
    {
      v7 = (unint64_t *)(v2 + v3);
      v8 = 8 * v4 - 8;
      do
      {
        v9 = *v7++;
        v10 = (v9 >> 51) & 1;
        if ((v9 & 0xFFFFFFFFFFFFLL) == 1)
          result = 1;
        else
          result = v10;
        v12 = (_DWORD)result != 1 || v8 == 0;
        v8 -= 8;
      }
      while (!v12);
      return result;
    }
    return 1;
  }
  if (!(_DWORD)v4)
    return 1;
  v5 = 16 * v4;
  for (i = v2 + 4 * v3; *(_QWORD *)i == 1 || (*(_BYTE *)(i + 12) & 8) != 0; i += 16)
  {
    v5 -= 16;
    if (!v5)
      return 1;
  }
  return 0;
}

uint64_t JSC::PropertyTable::isFrozen(JSC::PropertyTable *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 2);
  v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
  v3 = *((unsigned int *)this + 2);
  v4 = (*((_DWORD *)this + 7) + *((_DWORD *)this + 6));
  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v4)
    {
      v5 = 16 * v4;
      for (i = v2 + 4 * v3; ; i += 16)
      {
        if (*(_QWORD *)i != 1)
        {
          result = 0;
          if ((*(_BYTE *)(i + 12) & 8) == 0 || (*(_BYTE *)(i + 12) & 0x12) == 0)
            break;
        }
        v5 -= 16;
        if (!v5)
          return 1;
      }
      return result;
    }
    return 1;
  }
  if (!(_DWORD)v4)
    return 1;
  v8 = (_QWORD *)(v2 + v3);
  v9 = 8 * v4;
  while (1)
  {
    if ((*v8 & 0xFFFFFFFFFFFFLL) != 1)
    {
      result = 0;
      v10 = HIWORD(*v8);
      if ((v10 & 8) == 0 || (v10 & 0x12) == 0)
        break;
    }
    ++v8;
    v9 -= 8;
    if (!v9)
      return 1;
  }
  return result;
}

uint64_t JSC::PropertyTable::renumberPropertyOffsets(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;

  v17 = a2;
  v15 = 0;
  v16 = a3;
  v14 = -1;
  v13[0] = a4;
  v13[1] = &v15;
  v13[2] = &v17;
  v13[3] = &v14;
  v13[4] = &v16;
  JSC::PropertyTable::forEachPropertyMutable<JSC::PropertyTable::renumberPropertyOffsets(JSC::JSObject *,unsigned int,WTF::Vector<JSC::JSValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0>(a1, (uint64_t)v13);
  std::unique_ptr<WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]((unint64_t *)(a1 + 32), v5, v6, v7, v8, v9, v10, v11);
  return v14;
}

uint64_t JSC::PropertyTable::forEachPropertyMutable<JSC::PropertyTable::renumberPropertyOffsets(JSC::JSObject *,unsigned int,WTF::Vector<JSC::JSValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  BOOL v15;
  char v16;
  int v17;
  int v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  int v30;

  v2 = *(_QWORD *)(result + 16);
  v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
  v4 = *(unsigned int *)(result + 8);
  v5 = (*(_DWORD *)(result + 28) + *(_DWORD *)(result + 24));
  if ((v2 & 1) != 0)
  {
    if ((_DWORD)v5)
    {
      v19 = (unint64_t *)(v3 + v4);
      v20 = 8 * v5;
      do
      {
        v21 = *v19;
        if ((*v19 & 0xFFFFFFFFFFFFLL) != 1)
        {
          v22 = **(_QWORD **)(a2 + 16);
          v23 = HIBYTE(v21);
          if (v21 >> 62)
            v24 = (_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * (63 - v23) - 8);
          else
            v24 = (_QWORD *)(v22 + 8 * v23 + 16);
          v25 = **(unsigned int **)(a2 + 8);
          if (*(_DWORD *)(*(_QWORD *)a2 + 12) <= v25)
          {
LABEL_26:
            __break(0xC471u);
            JUMPOUT(0x198B7E534);
          }
          *(_QWORD *)(**(_QWORD **)a2 + 8 * v25) = *v24;
          v26 = *(int **)(a2 + 8);
          v27 = *v26;
          v28 = **(_DWORD **)(a2 + 32);
          v15 = __OFSUB__(*v26, v28);
          v29 = *v26 - v28;
          v16 = (v29 < 0) ^ v15;
          v30 = v29 + 64;
          if (!v16)
            v27 = v30;
          **(_DWORD **)(a2 + 24) = v27;
          *((_BYTE *)v19 + 7) = v27;
          ++*v26;
        }
        ++v19;
        v20 -= 8;
      }
      while (v20);
    }
  }
  else if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = (int *)(v3 + 4 * v4 + 8);
    do
    {
      if (*((_QWORD *)v7 - 1) != 1)
      {
        v8 = **(_QWORD **)(a2 + 16);
        v9 = *v7;
        if (*v7 <= 63)
        {
          v10 = v8 + 16;
        }
        else
        {
          v10 = *(_QWORD *)(v8 + 8) - 8;
          v9 = 63 - v9;
        }
        v11 = **(unsigned int **)(a2 + 8);
        if (*(_DWORD *)(*(_QWORD *)a2 + 12) <= v11)
          goto LABEL_26;
        *(_QWORD *)(**(_QWORD **)a2 + 8 * v11) = *(_QWORD *)(v10 + 8 * v9);
        v12 = *(int **)(a2 + 8);
        v13 = *v12;
        v14 = **(_DWORD **)(a2 + 32);
        v15 = __OFSUB__(*v12, v14);
        v17 = *v12 - v14;
        v16 = (v17 < 0) ^ v15;
        v18 = v17 + 64;
        if (!v16)
          v13 = v18;
        **(_DWORD **)(a2 + 24) = v13;
        *v7 = v13;
        ++*v12;
      }
      v7 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  return result;
}

unint64_t JSC::ProxyConstructor::create(JSC::ProxyConstructor *this, JSC::JSGlobalObject **a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t SlowCase;
  JSC::ProxyConstructor *v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  SlowCase = *((_QWORD *)this + 4819);
  if (SlowCase >= *((_QWORD *)this + 4820))
  {
    SlowCase = *((_QWORD *)this + 4821);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM(this, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v14, v15, v16);
      goto LABEL_3;
    }
    v13 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4822);
    *((_QWORD *)this + 4820) = SlowCase + HIDWORD(v13);
    *((_QWORD *)this + 4821) = SlowCase + (int)v13;
  }
  *((_QWORD *)this + 4819) = SlowCase + 48;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v11 = (JSC::ProxyConstructor *)JSC::InternalFunction::InternalFunction(SlowCase, (uint64_t)this, (unint64_t)a2, (uint64_t)JSC::callProxy, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructProxyObject);
  JSC::ProxyConstructor::finishCreation(v11, this, a2[5]);
  return SlowCase;
}

void JSC::ProxyConstructor::finishCreation(JSC::ProxyConstructor *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  WTF::StringImpl *v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x500000002;
  *(_QWORD *)(v6 + 8) = "Proxy";
  *(_DWORD *)(v6 + 16) = 4;
  v61 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)this, a2, (const WTF::String *)2, (JSC::VM *)&v61, 1, v7, v8, v9);
  v17 = v61;
  v61 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"revocable", 9uLL, v12, v13, v14, v15, v16, &v61);
  v18 = v61;
  if (v61 && (*((_BYTE *)v61 + 16) & 0x20) == 0)
  {
    v19 = v61;
LABEL_7:
    *(_DWORD *)v19 += 2;
    goto LABEL_8;
  }
  v19 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v19)
    goto LABEL_7;
LABEL_8:
  v61 = v19;
  v27 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 2, &v61, (uint64_t)JSC::makeRevocableProxy, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v29 = v61;
  v61 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v18, v27, 4, v24, v25, v26, v28);
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
}

JSC::Exception *JSC::callProxy(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"Proxy", 6);
}

unint64_t JSC::constructProxyObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *((int *)a2 + 8) - 1;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v5 = 10;
    goto LABEL_6;
  }
  v5 = *((_QWORD *)a2 + 6);
  if (v3 == 1)
  {
LABEL_6:
    v6 = 10;
    return JSC::ProxyObject::create((unint64_t)this, v5, v6);
  }
  v6 = *((_QWORD *)a2 + 7);
  return JSC::ProxyObject::create((unint64_t)this, v5, v6);
}

unint64_t JSC::makeRevocableProxy(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  JSC::ProxyObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::Structure *v12;
  unint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  JSC *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t result;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t (*v65)(WTF::StringImpl **);
  WTF::StringImpl **v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t SlowCase;
  JSC *v73;
  uint64_t Slow;
  JSC *v75;
  JSC::VM *v76;
  WTF::StringImpl *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v4 = *(_QWORD *)(this + 56);
  v76 = (JSC::VM *)v4;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
    return JSC::throwTypeError(this, &v76, (uint64_t)"Proxy.revocable needs to be called with two arguments: the target and the handler", 82);
  v12 = (JSC::Structure *)JSC::ProxyObject::create(this, *((_QWORD *)a2 + 6), *((_QWORD *)a2 + 7));
  if (*(_DWORD *)(v4 + 80))
  {
    v64 = *(_DWORD *)(v4 + 80);
    if ((v64 & 0x27) != 0 && (v64 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v6, (uint64_t)v7, v8, v9, v10, v11);
    if (*(_QWORD *)(v4 + 16))
      return 0;
  }
  v13 = *(_QWORD *)(this + 1136);
  if ((v13 & 1) != 0)
  {
    v65 = *(uint64_t (**)(WTF::StringImpl **))(v13 & 0xFFFFFFFFFFFFFFFCLL);
    v66 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v66 = (WTF::StringImpl **)(this - 16);
    v77 = *v66;
    v78 = this;
    v79 = this + 1136;
    v13 = v65(&v77);
  }
  v21 = JSC::ProxyRevoke::create((JSC::ProxyRevoke *)v4, (JSC::VM *)v13, v12, v7, v8, v9, v10, v11);
  v22 = *(JSC **)(this + 56);
  v23 = *((_QWORD *)v22 + 1882);
  if (v23)
  {
    v24 = *(unsigned int *)(v23 + 60);
    v5 = *(_QWORD *)(v23 + 24);
    if (v5 >= *(_QWORD *)(v23 + 32))
    {
      v5 = *(_QWORD *)(v23 + 40);
      if ((v5 & 1) != 0)
      {
        v68 = (uint64_t)v22 + 192;
        v75 = *(JSC **)(this + 56);
        JSC::sanitizeStackForVM(v75, v14, v15, v16, v17, v18, v19, v20);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v23, v68, v24, 0, 0, v69, v70, v71);
        v22 = v75;
        v5 = SlowCase;
        goto LABEL_8;
      }
      v67 = *(_QWORD *)(v5 + 8) ^ *(_QWORD *)(v23 + 48);
      *(_QWORD *)(v23 + 32) = v5 + HIDWORD(v67);
      *(_QWORD *)(v23 + 40) = v5 + (int)v67;
    }
    *(_QWORD *)(v23 + 24) = v5 + v24;
LABEL_8:
    *(_DWORD *)v5 = 0;
    *(_DWORD *)v5 = *(_DWORD *)(this + 848);
    *(_DWORD *)(v5 + 4) = 16783360;
    *(_OWORD *)(v5 + 8) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(_OWORD *)(v5 + 40) = 0u;
    *(_QWORD *)(v5 + 56) = 0;
    if (*((_BYTE *)v22 + 755))
      __dmb(0xAu);
    WTF::AtomStringImpl::addLiteral((uint64_t)"proxy", 5uLL, v16, v17, v18, v19, v20, &v77);
    v25 = v77;
    v77 = 0;
    v78 = v5;
    v79 = 0x1000000FFFFFFFFLL;
    v26.n128_u64[0] = 0x100000001000000;
    v80 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v5, v4, (unint64_t)v25, (uint64_t)v12, 0, (uint64_t)&v77, v27, v28, v26);
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::~StringImpl(v25, v29, v30, v31, v32, v33, v34, v35);
        WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
      }
      else
      {
        *(_DWORD *)v25 -= 2;
      }
    }
    WTF::AtomStringImpl::addLiteral((uint64_t)"revoke", 6uLL, v31, v32, v33, v34, v35, &v77);
    v36 = v77;
    v77 = 0;
    v78 = v5;
    v79 = 0x1000000FFFFFFFFLL;
    v37.n128_u64[0] = 0x100000001000000;
    v80 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v5, v4, (unint64_t)v36, v21, 0, (uint64_t)&v77, v38, v39, v37);
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::~StringImpl(v36, v40, v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      }
      else
      {
        *(_DWORD *)v36 -= 2;
      }
    }
    return v5;
  }
  v73 = *(JSC **)(this + 56);
  Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v22 + 14936, v73, 0x40uLL, 0, v17, v18, v19, v20);
  v22 = v73;
  v5 = Slow;
  if (Slow)
    goto LABEL_8;
  result = 110;
  __break(0xC471u);
  return result;
}

_QWORD *_ZZNK3JSC13PropertyTable15forEachPropertyIZZNS0_C1ERNS_2VMEjRKS0_ENK3__0clIhEEDaPT_EUlRS9_E_EEvRKS9_ENKUlPSD_E_clIjEES8_SF_(_QWORD *result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _DWORD *v17;

  v2 = *(_DWORD *)(*result + 28) + *(_DWORD *)(*result + 24);
  if (v2)
  {
    v3 = a2 + 4 * *(unsigned int *)(*result + 8);
    v4 = v3 + 16 * v2;
    do
    {
      v5 = *(_DWORD **)v3;
      if (*(_QWORD *)v3 != 1)
      {
        v6 = v5[4];
        if ((v6 & 0x20) != 0)
          v6 = v5[8];
        v7 = 0;
        v8 = result[1];
        v9 = *(unsigned int **)v8;
        v10 = **(_QWORD **)(v8 + 8);
        v11 = **(_QWORD **)(v8 + 16);
        v12 = v6 >> 8;
        v13 = v9[3];
        do
        {
          v14 = v12 & v13;
          v15 = *(unsigned __int8 *)(v10 + (v12 & v13));
          v12 = ++v7 + (v12 & v13);
        }
        while (v15);
        v16 = v9[7] + v9[6];
        *(_BYTE *)(v10 + v14) = *((_BYTE *)v9 + 28) + *((_BYTE *)v9 + 24) + 1;
        v17 = *(_DWORD **)v3;
        *(_QWORD *)(v11 + 8 * v16) = *(_QWORD *)v3 | ((unint64_t)(*(unsigned __int8 *)(v3 + 12) | (*(_DWORD *)(v3 + 8) << 8)) << 48);
        ++v9[6];
        *v17 += 2;
      }
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

_QWORD *_ZZNK3JSC13PropertyTable15forEachPropertyIZZNS0_C1ERNS_2VMEjRKS0_ENK3__0clIjEEDaPT_EUlRS9_E_EEvRKS9_ENKUlPSD_E_clIjEES8_SF_(_QWORD *result, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  _DWORD *v16;

  v2 = *(_DWORD *)(*result + 28) + *(_DWORD *)(*result + 24);
  if (v2)
  {
    v3 = (_QWORD *)(a2 + 4 * *(unsigned int *)(*result + 8));
    v4 = &v3[2 * v2];
    do
    {
      v5 = (_DWORD *)*v3;
      if (*v3 != 1)
      {
        v6 = v5[4];
        if ((v6 & 0x20) != 0)
          v6 = v5[8];
        v7 = 0;
        v8 = result[1];
        v9 = *(_DWORD **)v8;
        v10 = **(_QWORD **)(v8 + 8);
        v11 = **(_QWORD **)(v8 + 16);
        v12 = v6 >> 8;
        do
        {
          v13 = v12 & v9[3];
          v12 = ++v7 + v13;
        }
        while (*(_DWORD *)(v10 + 4 * v13));
        v14 = v9[7] + v9[6];
        *(_DWORD *)(v10 + 4 * v13) = v14 + 1;
        v15 = (_QWORD *)(v11 + 16 * v14);
        v16 = (_DWORD *)*v3;
        *(_QWORD *)((char *)v15 + 5) = *(_QWORD *)((char *)v3 + 5);
        *v15 = v16;
        ++v9[6];
        *(_DWORD *)*v3 += 2;
      }
      v3 += 2;
    }
    while (v3 != v4);
  }
  return result;
}

unint64_t *std::unique_ptr<WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100](unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unint64_t JSC::ProxyObject::create(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::Heap *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t SlowCase;
  uint64_t v25;

  v6 = *(_QWORD *)(a1 + 56);
  v8 = JSC::ProxyObject::structureForTarget(a1, a2);
  v14 = *(JSC::Heap **)(v6 + 40688);
  if (!v14)
  {
    v19 = v8;
    v14 = JSC::GCClient::Heap::proxyObjectSpaceSlow((JSC::Heap **)(v6 + 37552));
    v8 = v19;
  }
  v15 = *((_QWORD *)v14 + 3);
  if (v15 >= *((_QWORD *)v14 + 4))
  {
    v15 = *((_QWORD *)v14 + 5);
    if ((v15 & 1) != 0)
    {
      v20 = (uint64_t)v14;
      v25 = v8;
      JSC::sanitizeStackForVM((JSC *)v6, v7, v8, v9, v10, v11, v12, v13);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v20, v6 + 192, 64, 0, 0, v21, v22, v23);
      v8 = v25;
      v15 = SlowCase;
      goto LABEL_5;
    }
    v18 = *(_QWORD *)(v15 + 8) ^ *((_QWORD *)v14 + 6);
    *((_QWORD *)v14 + 4) = v15 + HIDWORD(v18);
    *((_QWORD *)v14 + 5) = v15 + (int)v18;
  }
  *((_QWORD *)v14 + 3) = v15 + 64;
LABEL_5:
  *(_DWORD *)v15 = 0;
  v16 = JSC::ProxyObject::ProxyObject(v15, v6, v8);
  JSC::ProxyObject::finishCreation(v16, v6, a1, a2, a3);
  return v15;
}

uint64_t JSC::ProxyObject::getCallData@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  if ((*(_BYTE *)(this + 32) & 1) != 0)
  {
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = JSC::performProxyCall;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return this;
}

uint64_t JSC::ProxyObject::getConstructData@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  if ((*(_BYTE *)(this + 32) & 2) != 0)
  {
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = JSC::performProxyConstruct;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return this;
}

uint64_t JSC::ProxyObject::put(JSC::JSCell *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  WTF::AtomStringImpl *v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t HandlerTrap;
  _DWORD *v25;
  int v26;
  WTF::StringImpl *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  int v37;
  int v38;
  int v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  JSC::VM *v48;
  double v49;
  BOOL v50;
  uint64_t v51;
  unint64_t v52;
  WTF::StringImpl *v53;
  int v54;
  BOOL v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  int v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  unint64_t v85;
  WTF::StringImpl *v86;
  int v87;
  char v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  uint64_t v91;
  _DWORD *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  _BYTE v97[24];
  JSC::VM *v98[2];

  *(_BYTE *)(a5 + 23) = 0;
  v9 = *(_BYTE *)(a5 + 20);
  *(_BYTE *)(a5 + 20) = v9 | 4;
  v10 = *(_QWORD *)(a5 + 8);
  v11 = *(_QWORD *)(a2 + 56);
  v98[0] = (JSC::VM *)v11;
  if ((unint64_t)&v83 < *(_QWORD *)(v11 + 8))
  {
    JSC::throwStackOverflowError(a2, v98, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if (a3 && (*(_BYTE *)(a3 + 16) & 0x20) != 0 && (*(_BYTE *)(a3 + 36) & 4) != 0)
    return 0;
  v14 = *((_QWORD *)a1 + 3);
  if (v14 == 2)
  {
    JSC::throwTypeError(a2, v98, (uint64_t)"Proxy has already been revoked. No more operations are allowed to be performed on it", 85);
    return 0;
  }
  v85 = a4;
  v97[0] = 0;
  HandlerTrap = JSC::ProxyObject::getHandlerTrap(a1, (JSC::VM **)a2, v14, (uint64_t)v97, *(_QWORD *)(v11 + 41952) + 2296, 4uLL, a7, a8);
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v17, (uint64_t)v18, v19, v20, v21, v22, v23))
  {
    return 0;
  }
  v25 = (_DWORD *)*((_QWORD *)a1 + 2);
  if (!HandlerTrap)
    return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*v25 & 0xFFFFFFFE) + 0x4C) + 0x48))();
  v88 = 0;
  v90 = (WTF::StringImpl *)&v92;
  v91 = 0;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v96 = 0;
  v92 = v25;
  v89 = 0x800000001;
  v26 = *(_DWORD *)(a3 + 16);
  v84 = v25;
  if ((v26 & 0x20) != 0)
  {
    *(_DWORD *)a3 += 2;
    v27 = (WTF::StringImpl *)a3;
  }
  else
  {
    if ((v26 & 0x10) != 0)
    {
      *(_DWORD *)a3 += 2;
      v27 = (WTF::StringImpl *)a3;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v11 + 41912), a3, v18, v19, v20, v21, v22, v23, &v86);
      v27 = v86;
    }
    v28 = *(_DWORD *)v27;
    *(_DWORD *)v27 += 2;
    if (v28)
    {
      *(_DWORD *)v27 = v28;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v27, v17, (uint64_t)v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
  }
  v29 = JSC::identifierToSafePublicJSValue((JSC *)v11, v27, v18, v19, v20, v21, v22, v23);
  v36 = (WTF::AtomStringImpl *)v29;
  v37 = v89;
  if ((_DWORD)v89 == HIDWORD(v89) || v90 != (WTF::StringImpl *)&v92 && v90)
  {
    if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v89, v29, v30, v31, v32, v33, v34, v35) == 1)
      v88 = 1;
  }
  else
  {
    *((_QWORD *)v90 + v89) = v29;
    LODWORD(v89) = v37 + 1;
  }
  if (*(_DWORD *)v27 == 2)
  {
    WTF::StringImpl::~StringImpl(v27, v36, v30, v31, v32, v33, v34, v35);
    WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
  }
  else
  {
    *(_DWORD *)v27 -= 2;
  }
  v38 = v89;
  if ((_DWORD)v89 == HIDWORD(v89) || v90 != (WTF::StringImpl *)&v92 && v90)
  {
    if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v89, v85, v30, v31, v32, v33, v34, v35) == 1)
      v88 = 1;
  }
  else
  {
    *((_QWORD *)v90 + v89) = v85;
    LODWORD(v89) = v38 + 1;
  }
  if ((v10 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v10 + 5) - 51 <= 5)
    v10 = 10;
  v39 = v89;
  if ((_DWORD)v89 == HIDWORD(v89) || v90 != (WTF::StringImpl *)&v92 && v90)
  {
    if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v89, v10, v30, v31, v32, v33, v34, v35) == 1)
      v88 = 1;
  }
  else
  {
    *((_QWORD *)v90 + v89) = v10;
    LODWORD(v89) = v39 + 1;
  }
  v86 = v90;
  v87 = v89;
  result = JSC::call(a2, HandlerTrap, v97, v14, &v86);
  v47 = result;
  v48 = v98[0];
  if (*((_DWORD *)v98[0] + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v98[0], (uint64_t)v40, v41, v42, v43, v44, v45, v46);
    if ((result & 1) != 0)
      goto LABEL_44;
  }
  if (v47 >= 0xFFFE000000000000)
  {
    v55 = (_DWORD)v47 == 0;
    goto LABEL_59;
  }
  *(_QWORD *)&v49 = v47 - 0x2000000000000;
  if (v47 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v49 <= 0.0)
    {
      v50 = v49 < 0.0;
      goto LABEL_37;
    }
    goto LABEL_57;
  }
  if ((v47 & 0xFFFE000000000002) != 0)
  {
    v50 = v47 == 7;
    goto LABEL_37;
  }
  v54 = *(unsigned __int8 *)(v47 + 5);
  if (v54 == 2)
  {
    v72 = *(_QWORD *)(v47 + 8);
    if ((v72 & 1) != 0)
      v73 = (int *)(v47 + 16);
    else
      v73 = (int *)(v72 + 4);
    v74 = *v73;
    goto LABEL_74;
  }
  if (v54 == 3)
  {
    v74 = *(_DWORD *)(v47 + 8);
LABEL_74:
    v55 = v74 == 0;
    goto LABEL_59;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_57:
    v50 = 1;
    goto LABEL_37;
  }
  v55 = *(_QWORD *)(16 * (*(_DWORD *)v47 & 0xFFFFFFFE) + 0x28) == a2;
LABEL_59:
  v50 = !v55;
LABEL_37:
  if (*((_DWORD *)v48 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v48, (uint64_t)v40, v41, v42, v43, v44, v45, v46);
    if ((result & 1) != 0)
      goto LABEL_44;
  }
  if (v50)
  {
    v40 = v84;
    if ((*(_DWORD *)((16 * *v84) | 0x10) & 0x80000000) == 0
      || (JSC::ProxyObject::validatePositiveSetTrapResult((JSC::JSGlobalObject *)a2, v84, (WTF::StringImpl *)a3, v85),
          !*((_DWORD *)v48 + 20))
      || !JSC::VM::hasExceptionsAfterHandlingTraps(v48, (uint64_t)v40, v41, v42, v43, v44, v45, v46))
    {
      v15 = 1;
LABEL_45:
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v89, v40, v41, v42, v43, v44, v45, v46);
      return v15;
    }
LABEL_44:
    v15 = 0;
    goto LABEL_45;
  }
  if ((v9 & 1) == 0)
    goto LABEL_44;
  v51 = *(unsigned int *)(a3 + 4);
  if ((v51 & 0x80000000) != 0
    || __OFADD__((_DWORD)v51, 1)
    || (result = (v51 + 62), __OFADD__(v51 + 1, 61)))
  {
    v86 = 0;
  }
  else
  {
    v52 = ((unint64_t)*(unsigned int *)(a3 + 16) >> 2) & 1;
    result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>(result, v52, (int8x16_t *)"Proxy object's 'set' trap returned falsy value for property '", 0x3Du, *(_BYTE **)(a3 + 8), v51 & 0xFFFFFFFEFFFFFFFFLL | (v52 << 32), 39, (int **)&v86);
    if (v86)
    {
      JSC::throwTypeError(a2, v98, &v86);
      v53 = v86;
      v86 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
        {
          WTF::StringImpl::~StringImpl(v53, (WTF::AtomStringImpl *)v40, v41, v42, v43, v44, v45, v46);
          WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
        }
        else
        {
          *(_DWORD *)v53 -= 2;
        }
      }
      goto LABEL_44;
    }
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::ProxyObject::putByIndex(JSC::JSCell *a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::ProxyObject::putByIndexCommon(a1, a2, a1, a3, a4, a5, a7, a8);
}

uint64_t JSC::ProxyObject::deleteProperty(uint64_t a1, uint64_t *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Method;
  WTF::StringImpl *v28;
  _DWORD *v29;
  int v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  int v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  JSC::VM *v66;
  double v67;
  _BOOL4 v68;
  int v69;
  BOOL v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  char v94;
  const char *v95;
  unint64_t v96;
  uint64_t v97;
  int v99;
  int v100;
  int v101;
  BOOL v102;
  int v103;
  int v104;
  uint64_t v105;
  _QWORD v106[3];
  uint64_t v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  _DWORD *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  unsigned __int8 v117[24];
  JSC::VM *v118;
  WTF::StringImpl *v119;
  int v120;
  unint64_t v121;
  _DWORD *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  char v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;

  v9 = a2[7];
  v118 = (JSC::VM *)v9;
  if ((unint64_t)&v105 < *(_QWORD *)(v9 + 8))
  {
    JSC::throwStackOverflowError((unint64_t)a2, &v118, (uint64_t)a3, a4, a5, a6, a7, a8);
    return 0;
  }
  if (a3 && (a3[16] & 0x20) != 0 && (a3[36] & 4) != 0)
    return 0;
  v13 = *(unsigned int **)(a1 + 24);
  if (v13 != (unsigned int *)2)
  {
    v117[0] = 0;
    WTF::AtomStringImpl::addLiteral((uint64_t)"deleteProperty", 0xEuLL, a4, a5, a6, a7, a8, &v108);
    v15 = v108;
    v119 = v108;
    v16 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v16 = 0x4100000002;
    *(_QWORD *)(v16 + 8) = "'deleteProperty' property of a Proxy's handler should be callable";
    *(_DWORD *)(v16 + 16) = 4;
    v108 = (WTF::StringImpl *)v16;
    Method = JSC::JSObject::getMethod(v13, (unint64_t)a2, (uint64_t)v117, (unint64_t *)&v119, &v108, v17, v18, v19);
    v28 = v108;
    v108 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v20, (uint64_t)v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
        if (v15)
        {
LABEL_11:
          if (*(_DWORD *)v15 == 2)
          {
            WTF::StringImpl::~StringImpl(v15, v20, (uint64_t)v21, v22, v23, v24, v25, v26);
            WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
          }
          else
          {
            *(_DWORD *)v15 -= 2;
          }
        }
LABEL_13:
        if (*(_DWORD *)(v9 + 80))
        {
          v99 = *(_DWORD *)(v9 + 80);
          if ((v99 & 0x27) != 0 && (v99 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v21, v22, v23, v24, v25, v26);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v29 = *(_DWORD **)(a1 + 16);
        if (Method == 10)
          return (*(uint64_t (**)(_DWORD *, uint64_t *, _BYTE *, uint64_t))(16
                                                                                  * *(unsigned int *)(16 * (*v29 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0x58))(v29, a2, a3, a4);
        LOBYTE(v108) = 0;
        v110 = (WTF::StringImpl *)&v112;
        v111 = 0;
        v113 = 0u;
        v114 = 0u;
        v115 = 0u;
        v116 = 0;
        v112 = v29;
        v109 = 0x800000001;
        v30 = *((_DWORD *)a3 + 4);
        if ((v30 & 0x20) != 0)
        {
          *(_DWORD *)a3 += 2;
          v31 = (WTF::StringImpl *)a3;
        }
        else
        {
          if ((v30 & 0x10) != 0)
          {
            *(_DWORD *)a3 += 2;
            v31 = (WTF::StringImpl *)a3;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v9 + 41912), (unint64_t)a3, v21, v22, v23, v24, v25, v26, &v119);
            v31 = v119;
          }
          v48 = *(_DWORD *)v31;
          *(_DWORD *)v31 += 2;
          if (v48)
          {
            *(_DWORD *)v31 = v48;
          }
          else
          {
            WTF::StringImpl::~StringImpl(v31, v20, (uint64_t)v21, v22, v23, v24, v25, v26);
            WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
          }
        }
        v49 = JSC::identifierToSafePublicJSValue((JSC *)v9, v31, v21, v22, v23, v24, v25, v26);
        v56 = (WTF::AtomStringImpl *)v49;
        v57 = v109;
        if ((_DWORD)v109 == HIDWORD(v109) || v110 != (WTF::StringImpl *)&v112 && v110)
        {
          if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v109, v49, v50, v51, v52, v53, v54, v55) == 1)
            LOBYTE(v108) = 1;
        }
        else
        {
          *((_QWORD *)v110 + v109) = v49;
          LODWORD(v109) = v57 + 1;
        }
        if (*(_DWORD *)v31 == 2)
        {
          WTF::StringImpl::~StringImpl(v31, v56, v50, v51, v52, v53, v54, v55);
          WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
        }
        else
        {
          *(_DWORD *)v31 -= 2;
        }
        v119 = v110;
        v120 = v109;
        v65 = JSC::call(a2, Method, v117, (uint64_t)v13, (uint64_t)&v119, v53, v54, v55);
        v66 = v118;
        if (*((_DWORD *)v118 + 20))
        {
          v100 = *((_DWORD *)v118 + 20);
          if ((v100 & 0x27) != 0 && (v100 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v118 + 64), 7u, v59, v60, v61, v62, v63, v64);
          if (*((_QWORD *)v66 + 2))
            goto LABEL_70;
        }
        if (v65 >= 0xFFFE000000000000)
        {
          v70 = (_DWORD)v65 == 0;
        }
        else
        {
          *(_QWORD *)&v67 = v65 - 0x2000000000000;
          if (v65 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            if (v67 > 0.0)
              goto LABEL_39;
            v68 = v67 < 0.0;
LABEL_53:
            if (*((_DWORD *)v66 + 20))
            {
              v101 = *((_DWORD *)v66 + 20);
              if ((v101 & 0x27) != 0 && (v101 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VM *)((char *)v66 + 64), 7u, v59, v60, v61, v62, v63, v64);
              if (*((_QWORD *)v66 + 2))
                v102 = 0;
              else
                v102 = v68;
              if (!v102)
                goto LABEL_70;
            }
            else if (!v68)
            {
              goto LABEL_70;
            }
            v90 = 16 * (*v29 & 0xFFFFFFFE);
            if ((*(_WORD *)(v90 + 0x12) & 0x4010) == 0)
            {
LABEL_66:
              v14 = 1;
LABEL_71:
              JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v109, v58, v59, v60, v61, v62, v63, v64);
              return v14;
            }
            memset(v106, 0, sizeof(v106));
            v107 = 14;
            v121 = 0xFFFFFFFF00000000;
            v123 = 0;
            v124 = 0;
            v122 = v29;
            v125 = 0x20000;
            v126 = 0;
            LOBYTE(v127) = 0;
            v128 = 0;
            v129 = 0;
            v130 = 0;
            v91 = (*(uint64_t (**)(_DWORD *, uint64_t *, _BYTE *, WTF::StringImpl **))(16
                                                                                              * *(unsigned int *)(v90 + 76)
                                                                                              + 0x68))(v29, a2, a3, &v119);
            v92 = 0;
            if (v91)
              v92 = JSC::PropertyDescriptor::setPropertySlot((uint64_t)v106, (uint64_t)a2, (WTF::StringImpl *)a3, (uint64_t)&v119, v61, v62, v63, v64);
            if (v128)
            {
              v93 = *(_DWORD *)(v127 + 4);
              if (!v93)
              {
                __break(0xC471u);
                JUMPOUT(0x198B7F8D4);
              }
              *(_DWORD *)(v127 + 4) = v93 - 1;
            }
            if (v92)
            {
              if ((v107 & 8) != 0)
              {
                v95 = "Proxy handler's 'deleteProperty' method should return false when the target's property is not configurable";
                v96 = (unint64_t)a2;
                v97 = 107;
              }
              else
              {
                v94 = (*(uint64_t (**)(_DWORD *, uint64_t *))(16
                                                                     * *(unsigned int *)(16 * (*v29 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0xA0))(v29, a2);
                if (*((_DWORD *)v66 + 20))
                {
                  v104 = *((_DWORD *)v66 + 20);
                  if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v66 + 64), 7u, v59, v60, v61, v62, v63, v64);
                  if (*((_QWORD *)v66 + 2))
                    goto LABEL_70;
                }
                if ((v94 & 1) != 0)
                  goto LABEL_65;
                v95 = "Proxy handler's 'deleteProperty' method should return false when the target has property and is not extensible";
                v96 = (unint64_t)a2;
                v97 = 111;
              }
              JSC::throwTypeError(v96, &v118, (uint64_t)v95, v97);
              goto LABEL_70;
            }
LABEL_65:
            if (!*((_DWORD *)v66 + 20))
              goto LABEL_66;
            v103 = *((_DWORD *)v66 + 20);
            if ((v103 & 0x27) != 0 && (v103 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VM *)((char *)v66 + 64), 7u, v59, v60, v61, v62, v63, v64);
            if (!*((_QWORD *)v66 + 2))
              goto LABEL_66;
LABEL_70:
            v14 = 0;
            goto LABEL_71;
          }
          if ((v65 & 0xFFFE000000000002) != 0)
          {
            v68 = v65 == 7;
            goto LABEL_53;
          }
          v69 = *(unsigned __int8 *)(v65 + 5);
          if (v69 == 2)
          {
            v87 = *(_QWORD *)(v65 + 8);
            if ((v87 & 1) != 0)
              v88 = (int *)(v65 + 16);
            else
              v88 = (int *)(v87 + 4);
            v89 = *v88;
          }
          else
          {
            if (v69 != 3)
            {
              if ((*(_BYTE *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE) + 0xA) & 1) == 0)
              {
LABEL_39:
                v68 = 1;
                goto LABEL_53;
              }
              v70 = *(_QWORD *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
              goto LABEL_50;
            }
            v89 = *(_DWORD *)(v65 + 8);
          }
          v70 = v89 == 0;
        }
LABEL_50:
        v68 = !v70;
        goto LABEL_53;
      }
      *(_DWORD *)v28 -= 2;
    }
    if (v15)
      goto LABEL_11;
    goto LABEL_13;
  }
  JSC::throwTypeError((unint64_t)a2, &v118, (uint64_t)"Proxy has already been revoked. No more operations are allowed to be performed on it", 85);
  return 0;
}

uint64_t JSC::ProxyObject::deletePropertyByIndex(JSC::ProxyObject *this, uint64_t ***a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t **v19;
  unsigned int *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Method;
  WTF::StringImpl *v28;
  _DWORD *v29;
  int v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  int v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  JSC::VM *v66;
  double v67;
  _BOOL4 v68;
  int v69;
  BOOL v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  char v94;
  const char *v95;
  JSC::JSCell *v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  BOOL v111;
  int v112;
  int v113;
  WTF::StringImpl *v114;
  _QWORD v115[3];
  uint64_t v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  uint64_t v120;
  _DWORD *v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  unsigned __int8 v126[24];
  uint64_t **v127;
  WTF::StringImpl *v128;
  int v129;
  unint64_t v130;
  _DWORD *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  char v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;

  JSC::Identifier::from(a2[7], (unint64_t)a3, a3, a4, a5, a6, a7, a8, (int **)&v114);
  v18 = v114;
  v19 = a2[7];
  v127 = v19;
  if (&v114 < (WTF::StringImpl **)v19[1])
  {
    JSC::throwStackOverflowError((unint64_t)a2, (JSC::VM **)&v127, (uint64_t)v12, v13, v14, v15, v16, v17);
    goto LABEL_6;
  }
  if (v114 && (*((_BYTE *)v114 + 16) & 0x20) != 0 && (*((_BYTE *)v114 + 36) & 4) != 0)
    goto LABEL_6;
  v20 = (unsigned int *)*((_QWORD *)this + 3);
  if (v20 == (unsigned int *)2)
  {
    JSC::throwTypeError((unint64_t)a2, (JSC::VM **)&v127, (uint64_t)"Proxy has already been revoked. No more operations are allowed to be performed on it", 85);
LABEL_6:
    v21 = 0;
    goto LABEL_72;
  }
  v126[0] = 0;
  WTF::AtomStringImpl::addLiteral((uint64_t)"deleteProperty", 0xEuLL, v13, v14, v15, v16, v17, &v117);
  v22 = v117;
  v128 = v117;
  v23 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v23 = 0x4100000002;
  *(_QWORD *)(v23 + 8) = "'deleteProperty' property of a Proxy's handler should be callable";
  *(_DWORD *)(v23 + 16) = 4;
  v117 = (WTF::StringImpl *)v23;
  Method = JSC::JSObject::getMethod(v20, (unint64_t)a2, (uint64_t)v126, (unint64_t *)&v128, &v117, v24, v25, v26);
  v28 = v117;
  v117 = 0;
  if (!v28)
  {
LABEL_10:
    if (v22)
      goto LABEL_11;
    goto LABEL_13;
  }
  if (*(_DWORD *)v28 != 2)
  {
    *(_DWORD *)v28 -= 2;
    goto LABEL_10;
  }
  WTF::StringImpl::~StringImpl(v28, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
  WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
  if (v22)
  {
LABEL_11:
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
LABEL_13:
  if (*((_DWORD *)v19 + 20))
  {
    v108 = *((_DWORD *)v19 + 20);
    if ((v108 & 0x27) != 0 && (v108 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v19 + 8), 7u, (uint64_t)v12, v13, v14, v15, v16, v17);
    if (v19[2])
      goto LABEL_6;
  }
  v29 = (_DWORD *)*((_QWORD *)this + 2);
  if (Method == 10)
  {
    v21 = (*(uint64_t (**)(_DWORD *, uint64_t ***, JSC::JSGlobalObject *))(16
                                                                                  * *(unsigned int *)(16 * (*v29 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0x60))(v29, a2, a3);
    goto LABEL_72;
  }
  LOBYTE(v117) = 0;
  v119 = (WTF::StringImpl *)&v121;
  v120 = 0;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v125 = 0;
  v121 = v29;
  v118 = 0x800000001;
  v30 = *((_DWORD *)v18 + 4);
  if ((v30 & 0x20) != 0)
  {
    *(_DWORD *)v18 += 2;
    v31 = v18;
  }
  else
  {
    if ((v30 & 0x10) != 0)
    {
      *(_DWORD *)v18 += 2;
      v31 = v18;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(v19[5239], (unint64_t)v18, v12, v13, v14, v15, v16, v17, &v128);
      v31 = v128;
    }
    v48 = *(_DWORD *)v31;
    *(_DWORD *)v31 += 2;
    if (v48)
    {
      *(_DWORD *)v31 = v48;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v31, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
    }
  }
  v49 = JSC::identifierToSafePublicJSValue((JSC *)v19, v31, v12, v13, v14, v15, v16, v17);
  v56 = (WTF::AtomStringImpl *)v49;
  v57 = v118;
  if ((_DWORD)v118 == HIDWORD(v118) || v119 != (WTF::StringImpl *)&v121 && v119)
  {
    if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v118, v49, v50, v51, v52, v53, v54, v55) == 1)
      LOBYTE(v117) = 1;
  }
  else
  {
    *((_QWORD *)v119 + v118) = v49;
    LODWORD(v118) = v57 + 1;
  }
  if (*(_DWORD *)v31 == 2)
  {
    WTF::StringImpl::~StringImpl(v31, v56, v50, v51, v52, v53, v54, v55);
    WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
  }
  else
  {
    *(_DWORD *)v31 -= 2;
  }
  v128 = v119;
  v129 = v118;
  v65 = JSC::call((uint64_t *)a2, Method, v126, (uint64_t)v20, (uint64_t)&v128, v53, v54, v55);
  v66 = (JSC::VM *)v127;
  if (*((_DWORD *)v127 + 20))
  {
    v109 = *((_DWORD *)v127 + 20);
    if ((v109 & 0x27) != 0 && (v109 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v127 + 8), 7u, v59, v60, v61, v62, v63, v64);
    if (*((_QWORD *)v66 + 2))
      goto LABEL_70;
  }
  if (v65 >= 0xFFFE000000000000)
  {
    v70 = (_DWORD)v65 == 0;
    goto LABEL_50;
  }
  *(_QWORD *)&v67 = v65 - 0x2000000000000;
  if (v65 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v65 & 0xFFFE000000000002) != 0)
    {
      v68 = v65 == 7;
      goto LABEL_53;
    }
    v69 = *(unsigned __int8 *)(v65 + 5);
    if (v69 == 2)
    {
      v87 = *(_QWORD *)(v65 + 8);
      if ((v87 & 1) != 0)
        v88 = (int *)(v65 + 16);
      else
        v88 = (int *)(v87 + 4);
      v89 = *v88;
    }
    else
    {
      if (v69 != 3)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
LABEL_39:
          v68 = 1;
          goto LABEL_53;
        }
        v70 = *(_QWORD *)(16 * (*(_DWORD *)v65 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
        goto LABEL_50;
      }
      v89 = *(_DWORD *)(v65 + 8);
    }
    v70 = v89 == 0;
LABEL_50:
    v68 = !v70;
    goto LABEL_53;
  }
  if (v67 > 0.0)
    goto LABEL_39;
  v68 = v67 < 0.0;
LABEL_53:
  if (*((_DWORD *)v66 + 20))
  {
    v110 = *((_DWORD *)v66 + 20);
    if ((v110 & 0x27) != 0 && (v110 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v66 + 64), 7u, v59, v60, v61, v62, v63, v64);
    if (*((_QWORD *)v66 + 2))
      v111 = 0;
    else
      v111 = v68;
    if (!v111)
      goto LABEL_70;
  }
  else if (!v68)
  {
    goto LABEL_70;
  }
  v90 = 16 * (*v29 & 0xFFFFFFFE);
  if ((*(_WORD *)(v90 + 0x12) & 0x4010) != 0)
  {
    memset(v115, 0, sizeof(v115));
    v116 = 14;
    v130 = 0xFFFFFFFF00000000;
    v132 = 0;
    v133 = 0;
    v131 = v29;
    v134 = 0x20000;
    v135 = 0;
    LOBYTE(v136) = 0;
    v137 = 0;
    v138 = 0;
    v139 = 0;
    v91 = (*(uint64_t (**)(_DWORD *, uint64_t ***, WTF::StringImpl *, WTF::StringImpl **))(16 * *(unsigned int *)(v90 + 76)
                                                                                                  + 0x68))(v29, a2, v18, &v128);
    v92 = 0;
    if (v91)
      v92 = JSC::PropertyDescriptor::setPropertySlot((uint64_t)v115, (uint64_t)a2, v18, (uint64_t)&v128, v61, v62, v63, v64);
    if (v137)
    {
      v93 = *(_DWORD *)(v136 + 4);
      if (!v93)
      {
        __break(0xC471u);
        JUMPOUT(0x198B7FF38);
      }
      *(_DWORD *)(v136 + 4) = v93 - 1;
    }
    if (v92)
    {
      if ((v116 & 8) != 0)
      {
        v95 = "Proxy handler's 'deleteProperty' method should return false when the target's property is not configurable";
        v96 = (JSC::JSCell *)a2;
        v97 = 107;
      }
      else
      {
        v94 = (*(uint64_t (**)(_DWORD *, uint64_t ***))(16
                                                               * *(unsigned int *)(16 * (*v29 & 0xFFFFFFFE) + 0x4C)
                                                               + 0xA0))(v29, a2);
        if (*((_DWORD *)v66 + 20))
        {
          v113 = *((_DWORD *)v66 + 20);
          if ((v113 & 0x27) != 0 && (v113 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v66 + 64), 7u, v59, v60, v61, v62, v63, v64);
          if (*((_QWORD *)v66 + 2))
            goto LABEL_70;
        }
        if ((v94 & 1) != 0)
          goto LABEL_65;
        v95 = "Proxy handler's 'deleteProperty' method should return false when the target has property and is not extensible";
        v96 = (JSC::JSCell *)a2;
        v97 = 111;
      }
      JSC::throwTypeError((unint64_t)v96, (JSC::VM **)&v127, (uint64_t)v95, v97);
      goto LABEL_70;
    }
LABEL_65:
    if (!*((_DWORD *)v66 + 20))
      goto LABEL_66;
    v112 = *((_DWORD *)v66 + 20);
    if ((v112 & 0x27) != 0 && (v112 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v66 + 64), 7u, v59, v60, v61, v62, v63, v64);
    if (!*((_QWORD *)v66 + 2))
      goto LABEL_66;
LABEL_70:
    v21 = 0;
    goto LABEL_71;
  }
LABEL_66:
  v21 = 1;
LABEL_71:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v118, v58, v59, v60, v61, v62, v63, v64);
LABEL_72:
  v98 = v114;
  v114 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  return v21;
}

uint64_t JSC::ProxyObject::getOwnPropertySlot(JSC::JSCell *a1, JSC::JSGlobalObject *a2, WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v12;
  JSC::VM *v13;

  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 52) = 1;
  if (*(_BYTE *)(a4 + 50) == 3)
  {
    v10 = 0;
    *(_QWORD *)a4 = 10;
    *(_DWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 1;
    return v10;
  }
  v13 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((unint64_t)&v12 < *((_QWORD *)v13 + 1))
  {
    JSC::throwStackOverflowError((unint64_t)a2, &v13, (uint64_t)a3, a4, a5, a6, a7, a8);
    return 0;
  }
  v8 = *(unsigned __int8 *)(a4 + 50);
  if (*(_BYTE *)(a4 + 50))
  {
    if (v8 == 2)
      return JSC::ProxyObject::performInternalMethodGetOwnProperty(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v8 == 1)
      return JSC::ProxyObject::performHasProperty(a1, a2, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  return JSC::ProxyObject::performGet(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::ProxyObject::getOwnPropertySlotByIndex(JSC::ProxyObject *this, uint64_t ***a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OwnPropertySlotCommon;
  WTF::StringImpl *v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  JSC::Identifier::from(a2[7], (unint64_t)a3, a3, a4, (uint64_t)a5, a6, a7, a8, (int **)&v33);
  OwnPropertySlotCommon = JSC::ProxyObject::getOwnPropertySlotCommon(this, (JSC::JSGlobalObject *)a2, v33, a4, v11, v12, v13, v14);
  v23 = v33;
  v33 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  return OwnPropertySlotCommon;
}

void JSC::ProxyObject::getOwnPropertyNames(JSC::ProxyObject *a1, JSC::JSGlobalObject *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  __int16 v11;
  WTF *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  WTF::StringImpl **v28;
  uint64_t *v29;
  int OwnPropertySlotCommon;
  int v31;
  int v32;
  int v33;
  WTF::StringImpl *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  WTF *v63;
  uint64_t v64;
  WTF::StringImpl **v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE v79[16];
  unint64_t v80;
  JSC::ProxyObject *v81;
  uint64_t v82;
  uint64_t v83;
  __int16 v84;
  __int16 v85;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  WTF *v91;
  uint64_t v92;
  JSC::VM *v93;
  __int16 v94;
  WTF::StringImpl *v95[2];
  char v96;
  uint64_t v97;
  WTF::StringImpl *v98;

  if (!(_DWORD)a4)
  {
    JSC::ProxyObject::performGetOwnPropertyNames(a1, a2, (JSC::PropertyNameArray *)a3, a4, a5, a6, a7, a8);
    return;
  }
  v10 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v11 = *((_WORD *)a3 + 12);
  v12 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)v12 = 1;
  *((_QWORD *)v12 + 1) = (char *)v12 + 24;
  *((_QWORD *)v12 + 2) = 20;
  v91 = v12;
  v92 = 0;
  v93 = v10;
  v94 = v11;
  v13 = a3;
  JSC::ProxyObject::performGetOwnPropertyNames(a1, a2, (JSC::PropertyNameArray *)&v91, v14, v15, v16, v17, v18);
  if (!*((_DWORD *)v10 + 20)
    || !JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v19, (uint64_t)v20, v21, v22, v23, v24, v25))
  {
    v26 = *((unsigned int *)v91 + 5);
    if ((_DWORD)v26)
    {
      v27 = (WTF::StringImpl **)*((_QWORD *)v91 + 1);
      v28 = &v27[v26];
      v29 = a3 + 1;
      while (1)
      {
        v80 = 0xFFFFFFFF00000000;
        v81 = a1;
        v82 = 0;
        v83 = 0;
        v84 = 0;
        v85 = 2;
        v86 = 0;
        LOBYTE(v87) = 0;
        v88 = 0;
        v89 = 0;
        v90 = 0;
        OwnPropertySlotCommon = JSC::ProxyObject::getOwnPropertySlotCommon(a1, a2, *v27, (uint64_t)v79, v22, v23, v24, v25);
        v31 = OwnPropertySlotCommon;
        if (*((_DWORD *)v10 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v19, (uint64_t)v20, v21, v22, v23, v24, v25);
          if (hasExceptionsAfterHandlingTraps)
            v32 = 1;
          else
            v32 = 5;
          if (hasExceptionsAfterHandlingTraps || ((v31 ^ 1) & 1) != 0)
            goto LABEL_9;
        }
        else if (!OwnPropertySlotCommon)
        {
          goto LABEL_8;
        }
        if ((v80 & 4) == 0)
        {
          v98 = *v27;
          v34 = v98;
          v35 = *((_DWORD *)v98 + 4);
          if ((v35 & 0x20) == 0)
          {
            if ((v13[3] & 2) != 0)
              goto LABEL_19;
LABEL_34:
            v32 = 0;
            v13 = a3;
            goto LABEL_9;
          }
          if ((v13[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v98 + 36) & 4) != 0)
            goto LABEL_34;
LABEL_19:
          v36 = *a3;
          v37 = *(unsigned int *)(*a3 + 20);
          if (v37 <= 0x13)
          {
            if ((_DWORD)v37)
            {
              v45 = *(WTF::StringImpl ***)(v36 + 8);
              while (*v45 != v98)
              {
                ++v45;
                if (!--v37)
                  goto LABEL_24;
              }
              goto LABEL_34;
            }
          }
          else
          {
            if (!*v29 || !*(_DWORD *)(*v29 - 12))
            {
              v42 = *(uint64_t **)(v36 + 8);
              v43 = 8 * v37;
              do
              {
                v44 = *v42++;
                v97 = v44;
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(v29, &v97, v21, v22, v23, v24, v25, (uint64_t)v95);
                v43 -= 8;
              }
              while (v43);
            }
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add(v29, (uint64_t *)&v98, v21, v22, v23, v24, v25, (uint64_t)v95);
            if (!v96)
              goto LABEL_34;
            v34 = v98;
            v36 = *a3;
            v35 = *((_DWORD *)v98 + 4);
          }
LABEL_24:
          if ((v35 & 0x20) == 0)
          {
            if ((v35 & 0x10) != 0)
            {
              *(_DWORD *)v34 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a3[2] + 41912), (unint64_t)v34, v20, v21, v22, v23, v24, v25, v95);
              v34 = v95[0];
            }
            v38 = *(_DWORD *)v34;
            *(_DWORD *)v34 += 2;
            if (v38)
            {
LABEL_28:
              *(_DWORD *)v34 = v38;
            }
            else
            {
              WTF::StringImpl::~StringImpl(v34, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
              WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
            }
            v95[0] = v34;
            v39 = *(unsigned int *)(v36 + 20);
            if ((_DWORD)v39 == *(_DWORD *)(v36 + 16))
            {
              WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier>(v36 + 8, (unint64_t)v95);
            }
            else
            {
              v40 = *(_QWORD *)(v36 + 8);
              v95[0] = 0;
              *(_QWORD *)(v40 + 8 * v39) = v34;
              *(_DWORD *)(v36 + 20) = v39 + 1;
            }
            v41 = v95[0];
            v95[0] = 0;
            if (v41)
            {
              if (*(_DWORD *)v41 == 2)
              {
                WTF::StringImpl::~StringImpl(v41, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
                WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
              }
              else
              {
                *(_DWORD *)v41 -= 2;
              }
            }
            goto LABEL_34;
          }
          v38 = *(_DWORD *)v34 + 2;
          goto LABEL_28;
        }
LABEL_8:
        v32 = 5;
LABEL_9:
        if (v88)
        {
          v33 = *(_DWORD *)(v87 + 4);
          if (!v33)
          {
            __break(0xC471u);
            JUMPOUT(0x198B80460);
          }
          *(_DWORD *)(v87 + 4) = v33 - 1;
        }
        if ((v32 == 5 || !v32) && ++v27 != v28)
          continue;
        break;
      }
    }
  }
  if (v92)
    WTF::fastFree(v92 - 16, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
  v63 = v91;
  v91 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 1)
    {
      v64 = *((unsigned int *)v63 + 5);
      if ((_DWORD)v64)
      {
        v65 = (WTF::StringImpl **)*((_QWORD *)v63 + 1);
        v66 = 8 * v64;
        do
        {
          v67 = *v65;
          *v65 = 0;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2)
            {
              WTF::StringImpl::~StringImpl(v67, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
              WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
            }
            else
            {
              *(_DWORD *)v67 -= 2;
            }
          }
          ++v65;
          v66 -= 8;
        }
        while (v66);
      }
      v76 = *((_QWORD *)v63 + 1);
      if ((WTF *)((char *)v63 + 24) != (WTF *)v76 && v76 != 0)
      {
        *((_QWORD *)v63 + 1) = 0;
        *((_DWORD *)v63 + 4) = 0;
        WTF::fastFree(v76, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
      }
      WTF::fastFree((unint64_t)v63, v19, (uint64_t)v20, v21, v22, v23, v24, v25);
    }
    else
    {
      --*(_DWORD *)v63;
    }
  }
}

uint64_t JSC::ProxyObject::defineOwnProperty(uint64_t a1, uint64_t *a2, unint64_t a3, JSC::JSGlobalObject *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v13;
  unsigned int *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  const JSC::PropertyDescriptor *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Method;
  WTF::StringImpl *v28;
  WTF::AtomStringImpl *v29;
  const WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  WTF::StringImpl *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  int v48;
  JSC::MarkedVectorBase *v49;
  int v50;
  WTF::AtomStringImpl *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  JSC::VM *v59;
  BOOL v60;
  uint64_t v61;
  int v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char OwnPropertyDescriptor;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __n128 v105;
  _BOOL4 v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t *v117;
  WTF::StringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  unsigned int *v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  unsigned __int8 v131[24];
  JSC::VM *v132[2];

  v9 = a2[7];
  v132[0] = (JSC::VM *)v9;
  if ((unint64_t)&v115 < *(_QWORD *)(v9 + 8))
  {
    JSC::throwStackOverflowError((unint64_t)a2, v132, a3, (uint64_t)a4, a5, a6, a7, a8);
    return 0;
  }
  v13 = *(unsigned int **)(a1 + 16);
  if (a3 && (*(_BYTE *)(a3 + 16) & 0x20) != 0 && (*(_BYTE *)(a3 + 36) & 4) != 0)
    return 0;
  v14 = *(unsigned int **)(a1 + 24);
  if (v14 == (unsigned int *)2)
  {
    JSC::throwTypeError((unint64_t)a2, v132, (uint64_t)"Proxy has already been revoked. No more operations are allowed to be performed on it", 85);
    return 0;
  }
  v131[0] = 0;
  v15 = (unint64_t *)(*(_QWORD *)(v9 + 41952) + 1144);
  v16 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v16 = 0x4100000002;
  *(_QWORD *)(v16 + 8) = "'defineProperty' property of a Proxy's handler should be callable";
  *(_DWORD *)(v16 + 16) = 4;
  v122 = (WTF::StringImpl *)v16;
  Method = JSC::JSObject::getMethod(v14, (unint64_t)a2, (uint64_t)v131, v15, &v122, v17, v18, v19);
  v28 = v122;
  v122 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v20, (uint64_t)v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v20, (uint64_t)v21, v22, v23, v24, v25, v26))
  {
    return 0;
  }
  if (Method == 10)
    return (*(uint64_t (**)(unsigned int *, uint64_t *, unint64_t, JSC::JSGlobalObject *, uint64_t))(16 * *(unsigned int *)(16 * (*v13 & 0xFFFFFFFE) + 0x4C) + 0x90))(v13, a2, a3, a4, a5);
  v116 = a5;
  v36 = JSC::constructObjectFromPropertyDescriptor((unint64_t)a2, a4, v21, v22, v23, v24, v25, v26);
  LOBYTE(v122) = 0;
  v117 = &v123;
  v124 = (WTF::StringImpl *)&v126;
  v125 = 0;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0;
  v126 = v13;
  v123 = 0x800000001;
  v37 = *(_DWORD *)(a3 + 16);
  if ((v37 & 0x20) != 0)
  {
    *(_DWORD *)a3 += 2;
    v38 = (WTF::StringImpl *)a3;
  }
  else
  {
    if ((v37 & 0x10) != 0)
    {
      *(_DWORD *)a3 += 2;
      v38 = (WTF::StringImpl *)a3;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v9 + 41912), a3, v30, v31, v32, v33, v34, v35, &v118);
      v38 = v118;
    }
    v39 = *(_DWORD *)v38;
    *(_DWORD *)v38 += 2;
    if (v39)
    {
      *(_DWORD *)v38 = v39;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v38, v29, (uint64_t)v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
    }
  }
  v40 = JSC::identifierToSafePublicJSValue((JSC *)v9, v38, v30, v31, v32, v33, v34, v35);
  v47 = (WTF::AtomStringImpl *)v40;
  v48 = v123;
  if ((_DWORD)v123 == HIDWORD(v123) || v124 != (WTF::StringImpl *)&v126 && v124)
  {
    v49 = (JSC::MarkedVectorBase *)v117;
    if (JSC::MarkedVectorBase::slowAppend((uint64_t)v117, v40, v41, v42, v43, v44, v45, v46) == 1)
      LOBYTE(v122) = 1;
  }
  else
  {
    *((_QWORD *)v124 + v123) = v40;
    LODWORD(v123) = v48 + 1;
    v49 = (JSC::MarkedVectorBase *)v117;
  }
  if (*(_DWORD *)v38 == 2)
  {
    WTF::StringImpl::~StringImpl(v38, v47, v41, v42, v43, v44, v45, v46);
    WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
  }
  else
  {
    *(_DWORD *)v38 -= 2;
  }
  v50 = v123;
  if ((_DWORD)v123 == HIDWORD(v123) || v124 != (WTF::StringImpl *)&v126 && v124)
  {
    if (JSC::MarkedVectorBase::slowAppend((uint64_t)v49, v36, v41, v42, v43, v44, v45, v46) == 1)
      LOBYTE(v122) = 1;
  }
  else
  {
    *((_QWORD *)v124 + v123) = v36;
    LODWORD(v123) = v50 + 1;
  }
  v118 = v124;
  LODWORD(v119) = v123;
  v58 = JSC::call(a2, Method, v131, (uint64_t)v14, (uint64_t)&v118, v44, v45, v46);
  v59 = v132[0];
  if (*((_DWORD *)v132[0] + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v132[0], (uint64_t)v51, (uint64_t)v52, v53, v54, v55, v56, v57))
  {
    goto LABEL_73;
  }
  if (v58 >= 0xFFFE000000000000)
  {
    v72 = (_DWORD)v58 == 0;
    goto LABEL_46;
  }
  if (v58 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v58 & 0xFFFE000000000002) != 0)
    {
      v60 = v58 == 7;
      goto LABEL_30;
    }
    v63 = *(unsigned __int8 *)(v58 + 5);
    if (v63 == 2)
    {
      v89 = *(_QWORD *)(v58 + 8);
      if ((v89 & 1) != 0)
        v90 = (int *)(v58 + 16);
      else
        v90 = (int *)(v89 + 4);
      v91 = *v90;
    }
    else
    {
      if (v63 != 3)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v60 = 1;
          goto LABEL_30;
        }
        v72 = *(_QWORD *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
        goto LABEL_46;
      }
      v91 = *(_DWORD *)(v58 + 8);
    }
    v72 = v91 == 0;
LABEL_46:
    v60 = !v72;
    goto LABEL_30;
  }
  v60 = COERCE_DOUBLE(v58 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v58 - 0x2000000000000) < 0.0;
LABEL_30:
  if (*((_DWORD *)v59 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v59, (uint64_t)v51, (uint64_t)v52, v53, v54, v55, v56, v57))
  {
LABEL_73:
    v61 = 0;
    goto LABEL_36;
  }
  if (!v60)
  {
    if (v116)
    {
      WTF::makeString<WTF::ASCIILiteral,WTF::StringView,char>((int8x16_t *)"Proxy's 'defineProperty' trap returned falsy value for property '", 66, *(_BYTE **)(a3 + 8), *(unsigned int *)(a3 + 4) | ((unint64_t)((*(_DWORD *)(a3 + 16) >> 2) & 1) << 32), 39, (int **)&v118);
      JSC::throwTypeError((unint64_t)a2, v132, &v118);
      v92 = v118;
      v118 = 0;
      if (v92)
      {
        if (*(_DWORD *)v92 == 2)
        {
          WTF::StringImpl::~StringImpl(v92, v51, (uint64_t)v52, v53, v54, v55, v56, v57);
          WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
        }
        else
        {
          *(_DWORD *)v92 -= 2;
        }
      }
    }
    goto LABEL_99;
  }
  if ((*((_BYTE *)a4 + 28) & 4) != 0 && (*((_BYTE *)a4 + 24) & 8) != 0)
  {
    v93 = 1;
    goto LABEL_81;
  }
  if ((*(_WORD *)((16 * *v13) | 0x12) & 0x4010) != 0)
  {
    v93 = 0;
LABEL_81:
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v121 = 14;
    OwnPropertyDescriptor = JSC::JSObject::getOwnPropertyDescriptor(v13, (uint64_t)a2, (WTF::StringImpl *)a3, (uint64_t)&v118);
    if (*((_DWORD *)v59 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v59, v94, v95, v96, v97, v98, v99, v100))
      goto LABEL_99;
    v104 = (*(uint64_t (**)(unsigned int *, uint64_t *))(16
                                                                * *(unsigned int *)(16 * (*v13 & 0xFFFFFFFE) + 0x4C)
                                                                + 0xA0))(v13, a2);
    if (*((_DWORD *)v59 + 20))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps(v59, (uint64_t)v51, v102, v103, v54, v55, v56, v57))
        goto LABEL_99;
    }
    if ((OwnPropertyDescriptor & 1) != 0)
    {
      v106 = JSC::validateAndApplyPropertyDescriptor((JSC::VM **)a2, 0, a3, v104, (uint64_t)a4, 1, (uint64_t)&v118, 0, v105);
      if (*((_DWORD *)v59 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v59, (uint64_t)v51, (uint64_t)v52, v53, v54, v55, v56, v57))
      {
        goto LABEL_99;
      }
      if (!v106)
      {
        v52 = "Proxy's 'defineProperty' trap did not define a property on its target that is compatible with the trap's input descriptor";
        v53 = 122;
        goto LABEL_98;
      }
      if (v93 && (v121 & 8) == 0)
      {
        v52 = "Proxy's 'defineProperty' trap did not define a non-configurable property on its target even though the inp"
              "ut descriptor to the trap said it must do so";
        v53 = 151;
LABEL_98:
        JSC::throwTypeError((unint64_t)a2, v132, (uint64_t)v52, v53);
LABEL_99:
        v61 = 0;
        goto LABEL_100;
      }
      if ((v118 || (v121 & 0x100000000) != 0)
        && (v121 & 0xA) == 8
        && (*((_BYTE *)a4 + 28) & 1) != 0
        && (*((_BYTE *)a4 + 24) & 2) != 0)
      {
        v52 = "Proxy's 'defineProperty' trap returned true for a non-writable input descriptor when the target's property"
              " is non-configurable and writable";
        v53 = 140;
        goto LABEL_98;
      }
    }
    else
    {
      if ((_DWORD)v104)
        v53 = 151;
      else
        v53 = 155;
      if ((_DWORD)v104)
        v52 = "Proxy's 'defineProperty' trap returned true for a non-configurable field even though getOwnPropertyDescrip"
              "tor of the Proxy's target returned undefined";
      else
        v52 = "Proxy's 'defineProperty' trap returned true even though getOwnPropertyDescriptor of the Proxy's target ret"
              "urned undefined and the target is non-extensible";
      if (((v93 | v104 ^ 1) & 1) != 0)
        goto LABEL_98;
    }
    v61 = 1;
LABEL_100:
    v49 = (JSC::MarkedVectorBase *)v117;
    goto LABEL_36;
  }
  v61 = 1;
LABEL_36:
  JSC::MarkedVectorBase::~MarkedVectorBase(v49, v51, (uint64_t)v52, v53, v54, v55, v56, v57);
  return v61;
}

uint64_t JSC::ProxyObject::setPrototype(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v11;
  _BOOL8 v12;
  WTF::StringImpl *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Method;
  WTF::StringImpl *v27;
  uint64_t v28;
  void *v29;
  const WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  double v37;
  BOOL v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  uint64_t v57;
  int *v58;
  int v59;
  char v60;
  int8x16_t v61;
  char v62;
  unint64_t v63;
  int v64;
  BOOL v65;
  char v66;
  const char *v67;
  unint64_t v68;
  uint64_t v69;
  WTF *v70;
  const WTF::StringImpl *v71;
  BOOL v72;
  double v74;
  double v75;
  int v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  char v81;
  int v82;
  int v83;
  uint64_t v84;
  char v85;
  int v86;
  WTF::StringImpl *v87;
  int v88;
  WTF::StringImpl *v89;
  _QWORD v90[3];
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  unsigned __int8 v96[24];
  JSC::VM *v97;

  v9 = a2[7];
  v97 = (JSC::VM *)v9;
  if ((unint64_t)&v87 < *(_QWORD *)(v9 + 8))
  {
    JSC::throwStackOverflowError((unint64_t)a2, &v97, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  v11 = *(unsigned int **)(a1 + 24);
  if (v11 != (unsigned int *)2)
  {
    v12 = a4;
    v96[0] = 0;
    WTF::AtomStringImpl::addLiteral((uint64_t)"setPrototypeOf", 0xEuLL, a4, a5, a6, a7, a8, &v89);
    v14 = v89;
    v87 = v89;
    v15 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v15 = 0x4100000002;
    *(_QWORD *)(v15 + 8) = "'setPrototypeOf' property of a Proxy's handler should be callable";
    *(_DWORD *)(v15 + 16) = 4;
    v89 = (WTF::StringImpl *)v15;
    Method = JSC::JSObject::getMethod(v11, (unint64_t)a2, (uint64_t)v96, (unint64_t *)&v87, &v89, v16, v17, v18);
    v27 = v89;
    v89 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::~StringImpl(v27, v19, v20, v21, v22, v23, v24, v25);
        WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
        if (v14)
        {
LABEL_9:
          if (*(_DWORD *)v14 == 2)
          {
            WTF::StringImpl::~StringImpl(v14, v19, v20, v21, v22, v23, v24, v25);
            WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
          }
          else
          {
            *(_DWORD *)v14 -= 2;
          }
        }
LABEL_11:
        if (*(_DWORD *)(v9 + 80))
        {
          v76 = *(_DWORD *)(v9 + 80);
          if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v20, v21, v22, v23, v24, v25);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v28 = *(_QWORD *)(a1 + 16);
        if (Method == 10)
          return (*(uint64_t (**)(_QWORD, uint64_t *, unint64_t, _BOOL8))(16
                                                                                        * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C)
                                                                                        + 0xA8))(*(_QWORD *)(a1 + 16), a2, a3, v12);
        LOBYTE(v89) = 0;
        v90[1] = &v91;
        v90[2] = 0;
        v93 = 0u;
        v94 = 0u;
        v95 = 0;
        v91 = v28;
        v92 = a3;
        v90[0] = 0x800000002;
        v87 = (WTF::StringImpl *)&v91;
        v88 = 2;
        v36 = JSC::call(a2, Method, v96, (uint64_t)v11, (uint64_t)&v87, v23, v24, v25);
        if (*(_DWORD *)(v9 + 80))
        {
          v77 = *(_DWORD *)(v9 + 80);
          if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v30, v31, v32, v33, v34, v35);
          if (*(_QWORD *)(v9 + 16))
            goto LABEL_63;
        }
        if (v36 >= 0xFFFE000000000000)
        {
          v56 = (_DWORD)v36 == 0;
          goto LABEL_32;
        }
        *(_QWORD *)&v37 = v36 - 0x2000000000000;
        if (v36 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
        {
          v38 = v37 > 0.0 || v37 < 0.0;
          goto LABEL_35;
        }
        if ((v36 & 0xFFFE000000000002) != 0)
        {
          v38 = v36 == 7;
LABEL_35:
          if (*(_DWORD *)(v9 + 80))
          {
            v78 = *(_DWORD *)(v9 + 80);
            if ((v78 & 0x27) != 0 && (v78 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v30, v31, v32, v33, v34, v35);
            if (*(_QWORD *)(v9 + 16))
              goto LABEL_63;
          }
          if (!v38)
          {
            if (!v12)
            {
LABEL_66:
              JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v90, v29, (uint64_t)v30, v31, v32, v33, v34, v35);
              return v12;
            }
            v67 = "Proxy 'setPrototypeOf' returned false indicating it could not set the prototype value. The operation w"
                  "as expected to succeed";
            v68 = (unint64_t)a2;
            v69 = 125;
            goto LABEL_62;
          }
          v60 = (*(uint64_t (**)(uint64_t, uint64_t *))(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE)
                                                                                + 0x4C)
                                                              + 0xA0))(v28, a2);
          v62 = v60;
          if (*(_DWORD *)(v9 + 80))
          {
            v79 = *(_DWORD *)(v9 + 80);
            if ((v79 & 0x27) != 0 && (v79 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v30, v31, v32, v33, v34, v35);
            v80 = *(_QWORD *)(v9 + 16);
            v12 = v80 == 0;
            if (v80)
              v81 = 1;
            else
              v81 = v62;
            if ((v81 & 1) != 0)
              goto LABEL_66;
          }
          else if ((v60 & 1) != 0)
          {
            goto LABEL_65;
          }
          if ((*(_WORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
          {
            v63 = (*(uint64_t (**)(uint64_t, uint64_t *))(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0xB0))(v28, a2);
          }
          else
          {
            v63 = *(_QWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x30);
            if (!v63)
              v63 = *(_QWORD *)(v28 + 16);
          }
          if (*(_DWORD *)(v9 + 80))
          {
            v82 = *(_DWORD *)(v9 + 80);
            if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v30, v31, v32, v33, v34, v35);
            if (*(_QWORD *)(v9 + 16))
              goto LABEL_63;
          }
          if (v63 == a3)
          {
            if (*(_DWORD *)(v9 + 80))
            {
              v86 = *(_DWORD *)(v9 + 80);
              if ((v86 & 0x27) != 0 && (v86 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v30, v31, v32, v33, v34, v35);
              v12 = *(_QWORD *)(v9 + 16) == 0;
              goto LABEL_66;
            }
            goto LABEL_65;
          }
          if (a3 >> 49)
          {
            if (v63 >> 49)
            {
              v74 = (double)(int)a3;
              if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
                *(_QWORD *)&v74 = a3 - 0x2000000000000;
              v75 = (double)(int)v63;
              if (v63 <= 0xFFFDFFFFFFFFFFFFLL)
                *(_QWORD *)&v75 = v63 - 0x2000000000000;
              v65 = *(_QWORD *)&v74 == *(_QWORD *)&v75;
              goto LABEL_49;
            }
          }
          else if (((a3 | v63) & 0xFFFE000000000002) == 0)
          {
            v64 = *(unsigned __int8 *)(a3 + 5);
            if (v64 == 2)
            {
              if (*(_BYTE *)(v63 + 5) == 2)
              {
                v70 = *(WTF **)(a3 + 8);
                if ((v70 & 1) != 0
                  || (v71 = *(const WTF::StringImpl **)(v63 + 8), (v71 & 1) != 0))
                {
                  v72 = JSC::JSString::equalSlowCase((JSC::JSString *)a3, (JSC::JSGlobalObject *)a2, (JSC::JSString *)v63, v31, v32, v33, v34, v35, v61);
                }
                else
                {
                  v72 = WTF::equal(v70, v71, v30);
                }
                goto LABEL_58;
              }
            }
            else if (v64 == 3 && *(_BYTE *)(v63 + 5) == 3)
            {
              v72 = JSC::JSBigInt::equals((JSC::JSBigInt *)a3, (JSC::JSBigInt *)v63, v30);
LABEL_58:
              v66 = v72;
LABEL_59:
              if (*(_DWORD *)(v9 + 80))
              {
                v83 = *(_DWORD *)(v9 + 80);
                if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v30, v31, v32, v33, v34, v35);
                v84 = *(_QWORD *)(v9 + 16);
                v12 = v84 == 0;
                if (v84)
                  v85 = 1;
                else
                  v85 = v66;
                if ((v85 & 1) != 0)
                  goto LABEL_66;
                goto LABEL_61;
              }
              if ((v66 & 1) == 0)
              {
LABEL_61:
                v67 = "Proxy 'setPrototypeOf' trap returned true when its target is non-extensible and the new prototype "
                      "value is not the same as the current prototype value. It should have returned false";
                v68 = (unint64_t)a2;
                v69 = 182;
LABEL_62:
                JSC::throwTypeError(v68, &v97, (uint64_t)v67, v69);
LABEL_63:
                v12 = 0;
                goto LABEL_66;
              }
LABEL_65:
              v12 = 1;
              goto LABEL_66;
            }
            v65 = a3 == v63;
LABEL_49:
            v66 = v65;
            goto LABEL_59;
          }
          v66 = 0;
          goto LABEL_59;
        }
        v55 = *(unsigned __int8 *)(v36 + 5);
        if (v55 == 2)
        {
          v57 = *(_QWORD *)(v36 + 8);
          if ((v57 & 1) != 0)
            v58 = (int *)(v36 + 16);
          else
            v58 = (int *)(v57 + 4);
          v59 = *v58;
        }
        else
        {
          if (v55 != 3)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0xA) & 1) == 0)
            {
              v38 = 1;
              goto LABEL_35;
            }
            v56 = *(_QWORD *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_32:
            v38 = !v56;
            goto LABEL_35;
          }
          v59 = *(_DWORD *)(v36 + 8);
        }
        v56 = v59 == 0;
        goto LABEL_32;
      }
      *(_DWORD *)v27 -= 2;
    }
    if (v14)
      goto LABEL_9;
    goto LABEL_11;
  }
  JSC::throwTypeError((unint64_t)a2, &v97, (uint64_t)"Proxy has already been revoked. No more operations are allowed to be performed on it", 85);
  return 0;
}

uint64_t JSC::ProxyObject::getPrototype(JSC::ProxyObject *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Method;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int8 v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x16_t v43;
  unsigned __int8 v44;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unint64_t v65;
  unint64_t v66;
  BOOL v67;
  _BOOL4 v68;
  WTF::StringImpl *v69;
  int v70;
  WTF::StringImpl *v71;
  _QWORD v72[3];
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  unsigned __int8 v78[24];
  JSC::VM *v79;

  v9 = *((_QWORD *)a2 + 7);
  v79 = (JSC::VM *)v9;
  if ((unint64_t)&v69 < *(_QWORD *)(v9 + 8))
  {
    JSC::throwStackOverflowError((unint64_t)a2, &v79, (uint64_t)a3, a4, a5, a6, a7, a8);
    return 0;
  }
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  if (v11 == (unsigned int *)2)
  {
    JSC::throwTypeError((unint64_t)a2, &v79, (uint64_t)"Proxy has already been revoked. No more operations are allowed to be performed on it", 85);
    return 0;
  }
  v78[0] = 0;
  WTF::AtomStringImpl::addLiteral((uint64_t)"getPrototypeOf", 0xEuLL, a4, a5, a6, a7, a8, &v71);
  v12 = v71;
  v69 = v71;
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x4100000002;
  *(_QWORD *)(v13 + 8) = "'getPrototypeOf' property of a Proxy's handler should be callable";
  *(_DWORD *)(v13 + 16) = 4;
  v71 = (WTF::StringImpl *)v13;
  Method = JSC::JSObject::getMethod(v11, (unint64_t)a2, (uint64_t)v78, (unint64_t *)&v69, &v71, v14, v15, v16);
  v25 = v71;
  v71 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v17, v18, v19, v20, v21, v22, v23))
  {
    return 0;
  }
  v26 = *((_QWORD *)this + 2);
  if (Method != 10)
  {
    LOBYTE(v71) = 0;
    v72[1] = &v73;
    v72[2] = 0;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0;
    v73 = v26;
    v72[0] = 0x800000001;
    v69 = (WTF::StringImpl *)&v73;
    v70 = 1;
    v34 = JSC::call((uint64_t *)a2, Method, v78, (uint64_t)v11, (uint64_t)&v69, v21, v22, v23);
    if (*(_DWORD *)(v9 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v27, v28, v29, v30, v31, v32, v33))
    {
      goto LABEL_31;
    }
    if (((v34 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v34 + 5) <= 0x16u) && v34 != 2)
    {
      v62 = "Proxy handler's 'getPrototypeOf' trap should either return an object or null";
      v63 = 77;
LABEL_30:
      JSC::throwTypeError((unint64_t)a2, &v79, (uint64_t)v62, v63);
      goto LABEL_31;
    }
    v35 = (*(uint64_t (**)(uint64_t, JSC::JSObject *))(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE)
                                                                                + 0x4C)
                                                              + 0xA0))(v26, a2);
    v44 = v35;
    if (*(_DWORD *)(v9 + 80))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v36, v37, v38, v39, v40, v41, v42);
      if (hasExceptionsAfterHandlingTraps)
        v65 = 0;
      else
        v65 = v34;
      if (((hasExceptionsAfterHandlingTraps | v44) & 1) != 0)
      {
        v34 = v65;
        goto LABEL_17;
      }
    }
    else if ((v35 & 1) != 0)
    {
LABEL_17:
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v72, v36, v37, v38, v39, v40, v41, v42);
      return v34;
    }
    if ((*(_WORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
    {
      v66 = (*(uint64_t (**)(uint64_t, JSC::JSObject *))(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0xB0))(v26, a2);
    }
    else
    {
      v66 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x30);
      if (!v66)
        v66 = *(_QWORD *)(v26 + 16);
    }
    if (*(_DWORD *)(v9 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v36, v37, v38, v39, v40, v41, v42))
    {
LABEL_31:
      v34 = 0;
      goto LABEL_17;
    }
    if (v66 == v34)
    {
      if (*(_DWORD *)(v9 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v36, v37, v38, v39, v40, v41, v42))
      {
        v34 = 0;
      }
      goto LABEL_17;
    }
    if (v66 >> 49)
    {
      if (!*(_DWORD *)(v9 + 80))
      {
LABEL_47:
        v62 = "Proxy's 'getPrototypeOf' trap for a non-extensible target should return the same value as the target's prototype";
        v63 = 113;
        goto LABEL_30;
      }
      v67 = 0;
    }
    else
    {
      v67 = JSC::JSValue::strictEqual(a2, v66, v34, v38, v39, v40, v41, v42, v43);
      if (!*(_DWORD *)(v9 + 80))
        goto LABEL_46;
    }
    v68 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v36, v37, v38, v39, v40, v41, v42);
    if (v68)
      v34 = 0;
    if (v68)
      goto LABEL_17;
LABEL_46:
    if (v67)
      goto LABEL_17;
    goto LABEL_47;
  }
  if ((*(_WORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
    return (*(uint64_t (**)(_QWORD, JSC::JSObject *))(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE)
                                                                                + 0x4C)
                                                              + 0xB0))(*((_QWORD *)this + 2), a2);
  v34 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x30);
  if (!v34)
    return *(_QWORD *)(v26 + 16);
  return v34;
}

void JSC::ProxyObject::visitChildren(JSC::ProxyObject *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  int v21;

  JSC::JSInternalFieldObjectImpl<2u>::visitChildren(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_DWORD *)this + 14);
  v17 = v16 & 0xFFFFFFFE;
  if ((v16 & 0xFFFFFFFE) != 0)
  {
    v18 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v17) & 0xFFFFFC000 | 0x20) != v18)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v17) & 0xFFFFFC000), v18, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)(((16 * v17) & 0xFFFFFC000) + 8 * ((v17 >> 6) & 0xF) + 0x28) >> (v17 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v17, 0, v11, v12, v13, v14, v15);
    }
  }
  v19 = *((_DWORD *)this + 15);
  v20 = v19 & 0xFFFFFFFE;
  if ((v19 & 0xFFFFFFFE) != 0)
  {
    v21 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v20) & 0xFFFFFC000 | 0x20) != v21)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v20) & 0xFFFFFC000), v21, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)(((16 * v20) & 0xFFFFFC000) + 8 * ((v20 >> 6) & 0xF) + 0x28) >> (v20 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v20, 0, v11, v12, v13, v14, v15);
    }
  }
}

uint64_t JSC::ProxyObject::visitChildren(JSC::ProxyObject *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  uint64_t v12;
  char v13;
  _QWORD v14[2];
  _QWORD *v15;
  char v16;

  v11[0] = a2;
  v11[1] = this;
  v13 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v12 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v14[0] = a2;
    v14[1] = this;
    v16 = 0;
    v15 = v11;
    *((_QWORD *)a2 + 11) = v14;
    JSC::JSObject::visitChildren(this, a2, a3);
    if ((*((_QWORD *)this + 2) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 3) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v14[0] + 88) = v15;
    v6 = *((_DWORD *)this + 14);
    if (v6)
      v7 = 16 * (v6 & 0xFFFFFFFE);
    else
      v7 = 0;
    (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v7);
    v8 = *((_DWORD *)this + 15);
    if (v8)
      v9 = 16 * (v8 & 0xFFFFFFFE);
    else
      v9 = 0;
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v9);
    *(_QWORD *)(v11[0] + 88) = v12;
  }
  return result;
}

uint64_t JSC::ProxyObject::ProxyObject(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v4;

  v4 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)a1 = a3 >> 4;
  *(_DWORD *)(a1 + 4) = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) &= 0xFCu;
  *(_QWORD *)(a1 + 56) = 0;
  memset_pattern16((void *)(a1 + 36), &unk_1991591C0, 0x14uLL);
  return a1;
}

{
  int v4;

  v4 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)a1 = a3 >> 4;
  *(_DWORD *)(a1 + 4) = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) &= 0xFCu;
  *(_QWORD *)(a1 + 56) = 0;
  memset_pattern16((void *)(a1 + 36), &unk_1991591C0, 0x14uLL);
  return a1;
}

uint64_t JSC::ProxyObject::structureForTarget(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t result;
  uint64_t (*v5)(_QWORD *);
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD v10[3];

  if ((a2 & 0xFFFE000000000002) == 0
    && (v3 = *(unsigned __int8 *)(a2 + 5), v3 >= 0x17)
    && ((v3 & 0xFE) == 0x1A
     || (*(_BYTE *)(a2 + 6) & 4) != 0
     && ((*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0x38))(v10, a2), LOBYTE(v10[0]))))
  {
    result = *(_QWORD *)(a1 + 1128);
    if ((result & 1) != 0)
    {
      v5 = *(uint64_t (**)(_QWORD *))(result & 0xFFFFFFFFFFFFFFFCLL);
      v6 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v6 = (uint64_t *)(a1 - 16);
      v7 = *v6;
      v8 = a1 + 1128;
      goto LABEL_15;
    }
  }
  else
  {
    result = *(_QWORD *)(a1 + 1120);
    if ((result & 1) != 0)
    {
      v5 = *(uint64_t (**)(_QWORD *))(result & 0xFFFFFFFFFFFFFFFCLL);
      v9 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v9 = (uint64_t *)(a1 - 16);
      v7 = *v9;
      v8 = a1 + 1120;
LABEL_15:
      v10[0] = v7;
      v10[1] = a1;
      v10[2] = v8;
      return v5(v10);
    }
  }
  return result;
}

uint64_t JSC::ProxyObject::finishCreation(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9;
  char *v10;
  char v11;
  char v12;
  uint64_t result;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  JSC::VM *v18;
  _QWORD v19[3];

  v18 = (JSC::VM *)a2;
  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  if ((a4 & 0xFFFE000000000002) != 0 || (v9 = *(unsigned __int8 *)(a4 + 5), v9 <= 0x16))
  {
    v14 = a3;
    v15 = "A Proxy's 'target' should be an Object";
    v16 = 39;
    return JSC::throwTypeError(v14, &v18, (uint64_t)v15, v16);
  }
  if ((a5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a5 + 5) <= 0x16u)
  {
    v14 = a3;
    v15 = "A Proxy's 'handler' should be an Object";
    v16 = 40;
    return JSC::throwTypeError(v14, &v18, (uint64_t)v15, v16);
  }
  if ((v9 & 0xFE) == 0x1A)
  {
    v10 = (char *)(a1 + 32);
    v11 = *(_BYTE *)(a1 + 32) | 1;
    *(_BYTE *)(a1 + 32) = v11;
    goto LABEL_16;
  }
  if ((*(_BYTE *)(a4 + 6) & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)
                                                          + 0x38))(v19, a4);
    v17 = LOBYTE(v19[0]);
    v10 = (char *)(a1 + 32);
    v11 = *(_BYTE *)(a1 + 32) & 0xFE | (LOBYTE(v19[0]) != 0);
    *(_BYTE *)(a1 + 32) = v11;
    if (!v17)
      goto LABEL_10;
LABEL_16:
    if ((*(_WORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0xC) & 1) == 0
      || (*(_BYTE *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0xA) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198B81B34);
    }
    goto LABEL_10;
  }
  v10 = (char *)(a1 + 32);
  v11 = *(_BYTE *)(a1 + 32) & 0xFE;
  *(_BYTE *)(a1 + 32) = v11;
LABEL_10:
  if (*(unsigned __int8 *)(a4 + 5) < 0x17u)
  {
    v12 = 0;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)
                                                          + 0x40))(v19, a4);
    v12 = 2 * (LOBYTE(v19[0]) != 0);
    v11 = *v10;
  }
  *(_BYTE *)(a1 + 32) = v11 & 0xFD | v12;
  *(_QWORD *)(a1 + 16) = a4;
  result = a2 + 192;
  if (a4 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(result, a1);
    result = a2 + 192;
  }
  *(_QWORD *)(a1 + 24) = a5;
  if (a5)
  {
    if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
      return JSC::Heap::writeBarrierSlowPath(result, a1);
  }
  return result;
}

uint64_t JSC::ProxyObject::getHandlerTrap(JSC::JSCell *a1, JSC::VM **a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v8;
  JSC::JSGlobalObject *v9;
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::JSCell *v12;
  JSC::VM *v13;
  int v14;
  char *v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  JSC::VM *v42;
  WTF::StringImpl **v43;
  JSC::JSGlobalObject *v44;
  JSC::JSGlobalObject *v45;
  unint64_t v46;
  JSC::VM *v47;
  char *v48;
  unint64_t v49;
  int v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  _WORD *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  JSC::VM *v61;
  unint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  uint64_t v72;
  unsigned int v73;
  BOOL v74;
  JSC::JSGlobalObject *v75;
  uint64_t v76;
  JSC::VM *v77;
  uint64_t v78;
  uint64_t v79;
  JSC::VM *v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  JSC::JSGlobalObject *v86;
  char *v87;
  unint64_t v88;
  char OwnStaticPropertySlot;
  JSC::JSGlobalObject *v90;
  char *v91;
  JSC::JSGlobalObject *v92;
  JSC::JSGlobalObject *v93;
  WTF::StringImpl *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  BOOL v100;
  JSC::JSGlobalObject *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int8x16_t **v106;
  JSC::JSGlobalObject *v107;
  int v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  JSC::JSGlobalObject *v126;
  char *v127;
  unint64_t v128;
  int v129;
  unsigned int v130;
  int v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  char *v136;
  JSC::JSGlobalObject *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  unsigned __int16 *v142;
  uint64_t v143;
  unsigned int v144;
  JSC::JSGlobalObject *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  JSC::JSGlobalObject *v149;
  int v150;
  int v151;
  int v152;
  uint64_t v153;
  unsigned int v154;
  JSC::JSGlobalObject *v155;
  unint64_t v156;
  char v157;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  int v159;
  uint64_t v160;
  uint64_t v161;
  int8x16_t **v162;
  JSC::JSGlobalObject *v163;
  char *v164;
  unint64_t v165;
  WTF::StringImpl *v166;
  WTF::AtomStringImpl *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  WTF::StringImpl *v174;
  char *v175;
  JSC::JSGlobalObject *v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int *v179;
  JSC::JSGlobalObject *v180;
  int v181;
  int v182;
  unint64_t v183;
  WTF::StringImpl *v184;
  WTF::AtomStringImpl *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  WTF::StringImpl *v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _BOOL4 v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  JSC::VM *v226;
  char *v227;
  WTF::StringImpl **v228;
  JSC::JSGlobalObject *v229;
  unint64_t v230;
  unsigned __int8 *v231;
  uint64_t v232;
  unsigned int v233;
  _BOOL4 v234;
  int v235;
  unsigned int v236;
  uint64_t v237;
  unsigned __int8 *v238;
  int v239;
  double v240;
  const unsigned __int8 *v241;
  BOOL v242;
  uint64_t v243;
  unsigned __int8 *v244;
  uint64_t v245;
  int v246;
  unsigned int v247;
  int v248;
  BOOL v249;
  JSC::JSGlobalObject *v250;
  char *v251;
  BOOL v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  JSC::JSGlobalObject *v256;
  char *v257;
  char *v258;
  WTF::StringImpl **v259;
  WTF::StringImpl **v260;
  WTF *v261;
  WTF *v262;
  WTF *v263;
  WTF *v264;
  JSC::VM *v265;
  JSC::VM *v266;
  JSC::VM *v267;
  uint64_t (*v268)(unint64_t);
  uint64_t v269;
  unint64_t v270;
  _DWORD *v271;
  _DWORD *v272;
  _QWORD v273[2];
  uint64_t v274;
  char v275;
  int8x16_t **v276;
  uint64_t v277;
  JSC::VM *v278;
  WTF::StringImpl *v279[2];
  uint64_t v280;
  uint64_t v281;

  v8 = (WTF::StringImpl **)a5;
  v9 = (JSC::JSGlobalObject *)a4;
  v10 = a3;
  v11 = (JSC::JSGlobalObject *)a2;
  v12 = a1;
  v281 = *MEMORY[0x1E0C80C00];
  v13 = a2[7];
  v278 = v13;
  v14 = *((_DWORD *)a1 + 14);
  v15 = (char *)a1 + 4 * a6;
  if (*(_DWORD *)a3 != v14)
    goto LABEL_20;
  v16 = *(_DWORD **)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x30);
  if (!v16)
    v16 = *(_DWORD **)(a3 + 16);
  if (*v16 == *((_DWORD *)a1 + 15))
  {
    v17 = *((_DWORD *)v15 + 9);
    if (v17 != 0x80000000)
    {
      if (v17 != -1)
      {
        if (v17 <= 63)
        {
          v18 = a3 + 16;
        }
        else
        {
          v18 = *(_QWORD *)(a3 + 8) - 8;
          v17 = 63 - v17;
        }
        v19 = *(_QWORD *)(v18 + 8 * v17);
        if ((v19 & 0xFFFFFFFFFFFFFFF7) != 2)
        {
          if ((v19 & 0xFFFE000000000002) != 0)
          {
            LOBYTE(v279[0]) = 0;
          }
          else if (*(_BYTE *)(v19 + 5) == 26)
          {
            v20 = *(_QWORD *)(v19 + 24);
            if ((v20 & 1) != 0)
              v20 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFFELL) + 48);
            if (*(_BYTE *)(v20 + 5) == 8)
            {
              LOBYTE(v279[0]) = 1;
              v279[1] = *(WTF::StringImpl **)(v20 + 40);
              LOBYTE(v280) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)v19 & 0xFFFFFFFE)
                                                                                        + 0x4C));
            }
            else
            {
              LOBYTE(v279[0]) = 2;
              v21 = *(_QWORD *)(v19 + 16);
              v279[1] = (WTF::StringImpl *)v20;
              v280 = v21;
            }
          }
          else
          {
            v102 = (JSC::JSGlobalObject *)a2;
            (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)v19 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0x38))(v279, v19);
            v11 = v102;
          }
          *(_OWORD *)v9 = *(_OWORD *)v279;
          *((_QWORD *)v9 + 2) = v280;
          if (*(_BYTE *)v9)
            return v19;
          v165 = (unint64_t)v11;
          v166 = *v8;
          if (*v8)
            *(_DWORD *)v166 += 2;
          WTF::makeString<char,WTF::String,WTF::ASCIILiteral>((uint64_t)v279, (uint64_t)v166);
          JSC::throwTypeError(v165, &v278, v279);
          v174 = v279[0];
          v279[0] = 0;
          if (v174)
          {
            if (*(_DWORD *)v174 == 2)
            {
              WTF::StringImpl::~StringImpl(v174, v167, v168, v169, v170, v171, v172, v173);
              WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
            }
            else
            {
              *(_DWORD *)v174 -= 2;
            }
          }
          if (v166)
          {
            if (*(_DWORD *)v166 == 2)
            {
              WTF::StringImpl::~StringImpl(v166, v167, v168, v169, v170, v171, v172, v173);
              WTF::fastFree(v201, v202, v203, v204, v205, v206, v207, v208);
            }
            else
            {
              *(_DWORD *)v166 -= 2;
            }
          }
        }
      }
      return 0;
    }
  }
  else
  {
LABEL_20:
    if (v14)
    {
      v163 = (JSC::JSGlobalObject *)a2;
      v164 = (char *)a1 + 4 * a6;
      memset_pattern16((char *)a1 + 36, &unk_1991591C0, 0x14uLL);
      v15 = v164;
      v11 = v163;
    }
  }
  v270 = 0xFFFFFFFF00000000;
  LOBYTE(v274) = 0;
  v275 = 0;
  v276 = 0;
  v277 = 0;
  v272 = 0;
  memset(v273, 0, 13);
  v271 = (_DWORD *)v10;
  v23 = (unint64_t)*v8;
  v24 = (unint64_t)*v8 >> 4;
  v25 = v10;
  v26 = (_BYTE *)(v10 + 6);
  if ((*(_BYTE *)(v10 + 6) & 8) == 0)
  {
    v27 = v10;
    do
    {
      v28 = *(_DWORD *)v27 & 0xFFFFFFFE;
      v29 = 16 * v28;
      if (!(_DWORD)v24 || (v24 & ~*(_DWORD *)(16 * v28 + 0x20)) != 0)
        goto LABEL_35;
      v30 = *(_QWORD *)(16 * v28 + 0x58);
      if (!v30)
      {
        v41 = *(_QWORD *)(16 * v28 + 0x40);
        if (!v41 || *(_BYTE *)(v41 + 5) != 1 && *(_DWORD *)(v41 + 80) < 2u)
          goto LABEL_35;
        v42 = v13;
        v43 = v8;
        v44 = v11;
        v261 = (WTF *)v10;
        v265 = v12;
        v45 = v9;
        v46 = v23;
        v47 = v13;
        v48 = v15;
        v49 = v24;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v29, v42, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        v24 = v49;
        v15 = v48;
        v13 = v47;
        v23 = v46;
        v9 = v45;
        v10 = (uint64_t)v261;
        v12 = v265;
        v11 = v44;
        v8 = v43;
        if (!v30)
          goto LABEL_35;
      }
      if (!*(_DWORD *)(v30 + 24))
        goto LABEL_35;
      v31 = *(_QWORD *)(v30 + 16);
      v32 = v31 & 0xFFFFFFFFFFFFFFFELL;
      v33 = *(unsigned int *)(v30 + 8);
      v34 = *(_DWORD *)(v23 + 16);
      if ((v31 & 1) != 0)
      {
        if ((v34 & 0x20) != 0)
          v34 = *(_DWORD *)(v23 + 32);
        v35 = *(_DWORD *)(v30 + 12);
        v36 = (v34 >> 8) & *(_QWORD *)&v35;
        v37 = *(unsigned __int8 *)(v32 + v36);
        if (!*(_BYTE *)(v32 + v36))
          goto LABEL_35;
        v38 = v32 + v33;
        v39 = 1;
        while (1)
        {
          v40 = *(_QWORD *)(v38 + 8 * (v37 - 1));
          if (v23 == (v40 & 0xFFFFFFFFFFFFLL))
            break;
          v36 = ((_DWORD)v36 + v39) & v35;
          v37 = *(unsigned __int8 *)(v32 + v36);
          ++v39;
          if (!*(_BYTE *)(v32 + v36))
            goto LABEL_35;
        }
        a6 = (v40 >> 16) & 0xFF00000000 | HIBYTE(v40);
      }
      else
      {
        if ((v34 & 0x20) != 0)
          v34 = *(_DWORD *)(v23 + 32);
        v50 = *(_DWORD *)(v30 + 12);
        v51 = v50 & (v34 >> 8);
        v52 = *(_DWORD *)(v32 + 4 * v51);
        if (!v52)
          goto LABEL_35;
        v53 = v32 + 4 * v33;
        v54 = 1;
        while (1)
        {
          v55 = (v52 - 1);
          if (v23 == *(_QWORD *)(v53 + 16 * v55))
            break;
          v51 = (v51 + v54) & v50;
          v52 = *(_DWORD *)(v32 + 4 * v51);
          ++v54;
          if (!v52)
            goto LABEL_35;
        }
        a6 = *(unsigned int *)(v53 + 16 * v55 + 8) | ((unint64_t)*(unsigned __int8 *)(v53 + 16 * v55 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v68 = v27 + 16;
          v69 = a6 << 32;
        }
        else
        {
          v68 = *(_QWORD *)(v27 + 8) - 8;
          v69 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v68 + (v69 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v70 = *(unsigned __int8 *)(a4 + 5);
          if (v70 == 5)
          {
            v90 = v11;
            v91 = v15;
            JSC::JSObject::fillGetterPropertySlot((unsigned int *)v27, (uint64_t)v13, (uint64_t)&v268, a4, SHIDWORD(a6), a6);
            v15 = v91;
            v11 = v90;
LABEL_142:
            v60 = 1;
            goto LABEL_64;
          }
          if (v70 == 6)
          {
            v103 = *(_DWORD *)(v29 + 16) & 3;
            v104 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v106 = *(int8x16_t ***)(a4 + 24);
              v105 = *(_QWORD *)(a4 + 32);
              v268 = *(uint64_t (**)(unint64_t))(a4 + 8);
              v269 = v104;
              LODWORD(v270) = HIDWORD(a6);
              v272 = (_DWORD *)v27;
              BYTE1(v273[1]) = 3;
              v60 = 1;
              if (v103 != 2)
                LOBYTE(v273[1]) = 1;
              BYTE3(v273[1]) = 1;
              v276 = v106;
              v277 = v105;
            }
            else
            {
              v268 = *(uint64_t (**)(unint64_t))(a4 + 8);
              v269 = v104;
              LODWORD(v270) = HIDWORD(a6);
              v272 = (_DWORD *)v27;
              v60 = 1;
              BYTE1(v273[1]) = 3;
              if (v103 != 2)
                LOBYTE(v273[1]) = 1;
            }
            goto LABEL_64;
          }
        }
        v268 = (uint64_t (*)(unint64_t))a4;
        v272 = (_DWORD *)v27;
        v270 = __PAIR64__(a6, HIDWORD(a6));
        v60 = 1;
        LOWORD(v273[1]) = 257;
        goto LABEL_64;
      }
LABEL_35:
      if ((*v26 & 0x20) != 0)
      {
        v86 = v11;
        v87 = v15;
        v260 = v8;
        v88 = v24;
        OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v27, v13, v23, (uint64_t)&v268);
        v24 = v88;
        v8 = v260;
        v15 = v87;
        v11 = v86;
        if ((OwnStaticPropertySlot & 1) != 0)
          goto LABEL_142;
      }
      v25 = *(_QWORD *)(v29 + 48);
      if (!v25)
        v25 = *(_QWORD *)(v27 + 16);
      if ((v25 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v25 + 5) < 0x17u)
      {
        if (!v23)
          goto LABEL_63;
        v56 = *(_DWORD *)(v23 + 16);
        if ((v56 & 0x20) != 0)
          goto LABEL_63;
        v57 = *(_WORD **)(v23 + 8);
        v58 = *(unsigned int *)(v23 + 4);
        if ((v56 & 4) == 0)
        {
          if ((_DWORD)v58)
          {
            v59 = (unsigned __int16)*v57 - 48;
            if (v59 <= 9 && (*v57 != 48 || v58 <= 1))
            {
              v71 = v57 + 1;
              v72 = v58 - 1;
              while (v72)
              {
                if (v59 > 0x19999999)
                  goto LABEL_63;
                v73 = *v71 - 48;
                if (v73 > 9)
                  goto LABEL_63;
                v60 = 0;
                v74 = __CFADD__(v73, 10 * v59);
                v59 = v73 + 10 * (_DWORD)v59;
                ++v71;
                --v72;
                if (v74)
                  goto LABEL_64;
              }
              if ((_DWORD)v59 != -1)
                goto LABEL_123;
            }
          }
LABEL_63:
          v60 = 0;
          goto LABEL_64;
        }
        a4 = (uint64_t)v12;
        a3 = v10;
        a2 = (JSC::VM **)v9;
        v226 = v13;
        v227 = v15;
        v228 = v8;
        v229 = v11;
        if (!(_DWORD)v58
          || (v59 = *(unsigned __int8 *)v57 - 48, v59 > 9)
          || v58 >= 2 && *(_BYTE *)v57 == 48)
        {
LABEL_303:
          v60 = 0;
          v11 = v229;
          v8 = v228;
          v15 = v227;
          v13 = v226;
          v9 = (JSC::JSGlobalObject *)a2;
          v10 = a3;
          v12 = (JSC::JSCell *)a4;
          goto LABEL_64;
        }
        v231 = (unsigned __int8 *)v57 + 1;
        v232 = v58 - 1;
        while (v232)
        {
          if (v59 > 0x19999999)
            goto LABEL_303;
          v233 = *v231 - 48;
          if (v233 > 9)
            goto LABEL_303;
          v60 = 0;
          v74 = __CFADD__(v233, 10 * v59);
          v59 = v233 + 10 * (_DWORD)v59;
          ++v231;
          --v232;
          v11 = v229;
          v8 = v228;
          v15 = v227;
          v13 = v226;
          v9 = (JSC::JSGlobalObject *)a2;
          v10 = a3;
          v12 = (JSC::JSCell *)a4;
          if (v74)
            goto LABEL_64;
        }
        v11 = v229;
        v8 = v228;
        v15 = v227;
        v13 = v226;
        v9 = (JSC::JSGlobalObject *)a2;
        v10 = a3;
        v12 = (JSC::JSCell *)a4;
        if ((_DWORD)v59 == -1)
          goto LABEL_63;
LABEL_123:
        v77 = (JSC::VM *)*((_QWORD *)v11 + 7);
        v78 = v10;
        v256 = v11;
        v257 = v15;
        v259 = v8;
        while (2)
        {
          v79 = 16 * (*(_DWORD *)v78 & 0xFFFFFFFE);
          v80 = v77;
          v81 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v79 + 0x4C) + 0x70))(v78, v11, v59, &v268);
          v77 = v80;
          v82 = v81;
          if (*((_DWORD *)v80 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v80, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v77 = v80;
            if (((hasExceptionsAfterHandlingTraps | v82) & 1) != 0)
            {
              v60 = !hasExceptionsAfterHandlingTraps;
              goto LABEL_139;
            }
          }
          else if ((v81 & 1) != 0)
          {
            v60 = 1;
LABEL_139:
            v11 = v256;
            v8 = v259;
            goto LABEL_140;
          }
          v11 = v256;
          v15 = v257;
          if (BYTE2(v273[1]) == 3)
          {
            if (BYTE4(v273[1]))
            {
              v60 = 0;
              v11 = v256;
              goto LABEL_250;
            }
            v83 = *(unsigned __int8 *)(v78 + 5);
            v11 = v256;
            v15 = v257;
            v77 = v80;
            if (v83 != 61)
              goto LABEL_128;
          }
          else
          {
            v83 = *(unsigned __int8 *)(v78 + 5);
            if (v83 == 61)
            {
              if (BYTE2(v273[1]) == 1)
                goto LABEL_316;
            }
            else
            {
LABEL_128:
              if ((v83 - 39) <= 0xA)
              {
                v230 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v78, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                v77 = v80;
                v11 = v256;
                v15 = v257;
                if (v230 <= v59)
                {
LABEL_316:
                  v60 = 0;
                  v8 = v259;
                  goto LABEL_64;
                }
              }
            }
          }
          if ((*(_WORD *)(v79 + 12) & 0x800) == 0 || BYTE2(v273[1]) == 3)
          {
            v84 = *(_QWORD *)(16 * (*(_DWORD *)v78 & 0xFFFFFFFE) + 0x30);
            if (!v84)
              v84 = *(_QWORD *)(v78 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v78 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v84 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v78 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0xB0))(v78, v256);
            }
            else
            {
              v84 = *(_QWORD *)(16 * (*(_DWORD *)v78 & 0xFFFFFFFE) + 0x30);
              if (!v84)
                v84 = *(_QWORD *)(v78 + 16);
            }
            if (*((_DWORD *)v80 + 20))
            {
              v252 = JSC::VM::hasExceptionsAfterHandlingTraps(v80, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
              v77 = v80;
              v11 = v256;
              v15 = v257;
              if (v252)
                goto LABEL_316;
            }
            else
            {
              v11 = v256;
              v15 = v257;
              v77 = v80;
            }
          }
          if ((v84 & 0xFFFE000000000002) != 0)
            goto LABEL_316;
          v60 = 0;
          v85 = *(unsigned __int8 *)(v84 + 5);
          v78 = v84;
          v8 = v259;
          if (v85 <= 0x16)
            goto LABEL_64;
          continue;
        }
      }
      v26 = (_BYTE *)(v25 + 6);
      v27 = v25;
    }
    while ((*(_BYTE *)(v25 + 6) & 8) == 0);
  }
  if (v23)
  {
    v108 = *(_DWORD *)(v23 + 16);
    if ((v108 & 0x20) == 0)
    {
      v109 = *(_BYTE **)(v23 + 8);
      v110 = *(unsigned int *)(v23 + 4);
      if ((v108 & 4) != 0)
      {
        if ((_DWORD)v110)
        {
          v243 = *v109 - 48;
          if (v243 <= 9 && (v110 < 2 || *v109 != 48))
          {
            v244 = v109 + 1;
            v245 = v110 - 1;
            while (v245)
            {
              if (v243 <= 0x19999999)
              {
                v246 = v243;
                v247 = *v244 - 48;
                if (v247 <= 9)
                {
                  v248 = 5 * v246;
                  v74 = __CFADD__(v247, 2 * v248);
                  v243 = v247 + 2 * v248;
                  ++v244;
                  --v245;
                  if (!v74)
                    continue;
                }
              }
              goto LABEL_171;
            }
            v111 = v243;
            if ((_DWORD)v243 != -1)
              goto LABEL_233;
          }
        }
      }
      else if ((_DWORD)v110)
      {
        v111 = *(unsigned __int16 *)v109 - 48;
        if (v111 <= 9 && (*(_WORD *)v109 != 48 || v110 <= 1))
        {
          v142 = (unsigned __int16 *)(v109 + 2);
          v143 = v110 - 1;
          while (v143)
          {
            if (v111 <= 0x19999999)
            {
              v144 = *v142 - 48;
              if (v144 <= 9)
              {
                v74 = __CFADD__(v144, 10 * v111);
                v111 = v144 + 10 * (_DWORD)v111;
                ++v142;
                --v143;
                if (!v74)
                  continue;
              }
            }
            goto LABEL_171;
          }
          if ((_DWORD)v111 != -1)
          {
LABEL_233:
            v146 = v111;
            v267 = (JSC::VM *)*((_QWORD *)v11 + 7);
            v147 = v10;
            v257 = v15;
            v259 = v8;
            while (1)
            {
              v148 = 16 * (*(_DWORD *)v147 & 0xFFFFFFFE);
              v149 = v11;
              v150 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v148 + 0x4C) + 0x70))(v147, v11, v146, &v268);
              v151 = v150;
              if (*((_DWORD *)v267 + 20))
              {
                v209 = JSC::VM::hasExceptionsAfterHandlingTraps(v267, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                if (((v209 | v151) & 1) != 0)
                {
                  v60 = !v209;
                  goto LABEL_249;
                }
              }
              else if ((v150 & 1) != 0)
              {
                v60 = 1;
                goto LABEL_249;
              }
              if (BYTE2(v273[1]) == 3)
              {
                if (BYTE4(v273[1]))
                  goto LABEL_384;
                v152 = *(unsigned __int8 *)(v147 + 5);
                if (v152 == 61)
                  goto LABEL_239;
              }
              else
              {
                v152 = *(unsigned __int8 *)(v147 + 5);
                if (v152 == 61)
                {
                  if (BYTE2(v273[1]) == 1)
                    goto LABEL_384;
                  goto LABEL_239;
                }
              }
              if ((v152 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v147, (uint64_t)a2, a3, a4, a5, a6, a7, a8) <= v146)
              {
                goto LABEL_384;
              }
LABEL_239:
              if ((*(_WORD *)(v148 + 12) & 0x800) == 0 || BYTE2(v273[1]) == 3)
              {
                v153 = *(_QWORD *)(16 * (*(_DWORD *)v147 & 0xFFFFFFFE) + 0x30);
                if (!v153)
                  v153 = *(_QWORD *)(v147 + 16);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v147 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v153 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)v147 & 0xFFFFFFFE) + 0x4C)
                                                                                   + 0xB0))(v147, v149);
                }
                else
                {
                  v153 = *(_QWORD *)(16 * (*(_DWORD *)v147 & 0xFFFFFFFE) + 0x30);
                  if (!v153)
                    v153 = *(_QWORD *)(v147 + 16);
                }
                if (*((_DWORD *)v267 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v267, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
                {
LABEL_384:
                  v60 = 0;
LABEL_249:
                  v11 = v149;
LABEL_250:
                  v8 = v259;
                  goto LABEL_140;
                }
              }
              if ((v153 & 0xFFFE000000000002) != 0)
                goto LABEL_384;
              v60 = 0;
              v154 = *(unsigned __int8 *)(v153 + 5);
              v147 = v153;
              v11 = v149;
              v15 = v257;
              v8 = v259;
              if (v154 <= 0x16)
                goto LABEL_64;
            }
          }
        }
      }
    }
  }
LABEL_171:
  v266 = (JSC::VM *)*((_QWORD *)v11 + 7);
  while (1)
  {
    a2 = (JSC::VM **)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE));
    if ((*(_BYTE *)(v25 + 6) & 8) == 0)
    {
      if ((_DWORD)v24 && (v24 & ~*(_DWORD *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x20)) == 0)
      {
        v112 = *(_QWORD *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x58);
        if (v112)
          goto LABEL_408;
        v125 = *(_QWORD *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x40);
        if (v125 && (*(_BYTE *)(v125 + 5) == 1 || *(_DWORD *)(v125 + 80) >= 2u))
        {
          v262 = (WTF *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE));
          v126 = v11;
          v127 = v15;
          v128 = v24;
          JSC::Structure::materializePropertyTable(v262, v266, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          a2 = (JSC::VM **)v262;
          v24 = v128;
          v15 = v127;
          v11 = v126;
          if (v112)
          {
LABEL_408:
            if (*(_DWORD *)(v112 + 24))
            {
              v113 = *(_QWORD *)(v112 + 16);
              v114 = v113 & 0xFFFFFFFFFFFFFFFELL;
              v115 = *(unsigned int *)(v112 + 8);
              v116 = *(_DWORD *)(v23 + 16);
              if ((v113 & 1) != 0)
              {
                if ((v116 & 0x20) != 0)
                  v116 = *(_DWORD *)(v23 + 32);
                v117 = *(_DWORD *)(v112 + 12);
                v118 = (v116 >> 8) & *(_QWORD *)&v117;
                v119 = *(unsigned __int8 *)(v114 + v118);
                if (*(_BYTE *)(v114 + v118))
                {
                  v120 = v114 + v115;
                  v121 = 1;
                  while (1)
                  {
                    v122 = *(_QWORD *)(v120 + 8 * (v119 - 1));
                    if (v23 == (v122 & 0xFFFFFFFFFFFFLL))
                      break;
                    v118 = ((_DWORD)v118 + v121) & v117;
                    v119 = *(unsigned __int8 *)(v114 + v118);
                    ++v121;
                    if (!*(_BYTE *)(v114 + v118))
                      goto LABEL_184;
                  }
                  a6 = (v122 >> 16) & 0xFF00000000 | HIBYTE(v122);
                  goto LABEL_197;
                }
              }
              else
              {
                if ((v116 & 0x20) != 0)
                  v116 = *(_DWORD *)(v23 + 32);
                v129 = *(_DWORD *)(v112 + 12);
                v130 = v129 & (v116 >> 8);
                v131 = *(_DWORD *)(v114 + 4 * v130);
                if (v131)
                {
                  v132 = v114 + 4 * v115;
                  v133 = 1;
                  while (1)
                  {
                    v134 = (v131 - 1);
                    if (v23 == *(_QWORD *)(v132 + 16 * v134))
                      break;
                    v130 = (v130 + v133) & v129;
                    v131 = *(_DWORD *)(v114 + 4 * v130);
                    ++v133;
                    if (!v131)
                      goto LABEL_184;
                  }
                  a6 = *(unsigned int *)(v132 + 16 * v134 + 8) | ((unint64_t)*(unsigned __int8 *)(v132 + 16 * v134 + 12) << 32);
LABEL_197:
                  if ((_DWORD)a6 == -1)
                    goto LABEL_184;
                  v136 = v15;
                  v137 = v11;
                  a5 = HIDWORD(a6);
                  if ((int)a6 <= 63)
                  {
                    v138 = v25 + 16;
                    v139 = a6 << 32;
                  }
                  else
                  {
                    v138 = *(_QWORD *)(v25 + 8) - 8;
                    v139 = 0x3F00000000 - (a6 << 32);
                  }
                  a4 = *(_QWORD *)(v138 + (v139 >> 29));
                  if ((a4 & 0xFFFE000000000002) == 0)
                  {
                    v140 = *(unsigned __int8 *)(a4 + 5);
                    if (v140 == 5)
                    {
                      JSC::JSObject::fillGetterPropertySlot((unsigned int *)v25, (uint64_t)v266, (uint64_t)&v268, a4, SHIDWORD(a6), a6);
                      v60 = 1;
                      goto LABEL_216;
                    }
                    if (v140 == 6)
                    {
                      v159 = (_DWORD)a2[2] & 3;
                      v160 = *(_QWORD *)(a4 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v162 = *(int8x16_t ***)(a4 + 24);
                        v161 = *(_QWORD *)(a4 + 32);
                        v268 = *(uint64_t (**)(unint64_t))(a4 + 8);
                        v269 = v160;
                        LODWORD(v270) = HIDWORD(a6);
                        v272 = (_DWORD *)v25;
                        BYTE1(v273[1]) = 3;
                        v60 = 1;
                        if (v159 != 2)
                          LOBYTE(v273[1]) = 1;
                        BYTE3(v273[1]) = 1;
                        v276 = v162;
                        v277 = v161;
                      }
                      else
                      {
                        v268 = *(uint64_t (**)(unint64_t))(a4 + 8);
                        v269 = v160;
                        LODWORD(v270) = HIDWORD(a6);
                        v272 = (_DWORD *)v25;
                        v60 = 1;
                        BYTE1(v273[1]) = 3;
                        if (v159 != 2)
                          LOBYTE(v273[1]) = 1;
                      }
                      goto LABEL_216;
                    }
                  }
                  v268 = (uint64_t (*)(unint64_t))a4;
                  v272 = (_DWORD *)v25;
                  v270 = __PAIR64__(a6, HIDWORD(a6));
                  v60 = 1;
                  LOWORD(v273[1]) = 257;
LABEL_216:
                  v11 = v137;
                  v15 = v136;
                  goto LABEL_64;
                }
              }
            }
          }
        }
      }
LABEL_184:
      if ((*(_BYTE *)(v25 + 6) & 0x20) != 0)
      {
        v263 = (WTF *)a2;
        v155 = v11;
        v258 = v15;
        v156 = v24;
        v157 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v25, v266, v23, (uint64_t)&v268);
        a2 = (JSC::VM **)v263;
        v24 = v156;
        v15 = v258;
        v11 = v155;
        if ((v157 & 1) != 0)
          goto LABEL_142;
      }
      goto LABEL_185;
    }
    v255 = v24;
    v257 = v15;
    v179 = (unsigned int *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE));
    v180 = v11;
    v181 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * v179[19] + 0x68))(v25, v11, v23, &v268);
    v182 = v181;
    if (*((_DWORD *)v266 + 20))
    {
      v234 = JSC::VM::hasExceptionsAfterHandlingTraps(v266, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      if (((v234 | v182) & 1) != 0)
      {
        v60 = !v234;
        goto LABEL_283;
      }
    }
    else if ((v181 & 1) != 0)
    {
      v60 = 1;
      goto LABEL_283;
    }
    if (BYTE2(v273[1]) == 3)
      break;
    v235 = *(unsigned __int8 *)(v25 + 5);
    if (v235 != 61)
      goto LABEL_332;
    v11 = v180;
    v15 = v257;
    v24 = v255;
    a2 = (JSC::VM **)v179;
    if (BYTE2(v273[1]) == 1)
      goto LABEL_63;
LABEL_185:
    if ((*((_WORD *)a2 + 6) & 0x800) != 0)
    {
      v123 = *(_DWORD *)v25;
      if (BYTE2(v273[1]) != 3)
      {
        v254 = v24;
        v264 = (WTF *)v10;
        v175 = v15;
        v176 = v11;
        v177 = 16 * (v123 & 0xFFFFFFFE);
        if ((*(_WORD *)(v177 + 12) & 0x800) != 0)
        {
          v178 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v177 + 76) + 0xB0))(v25, v11);
        }
        else
        {
          v178 = *(_QWORD *)(v177 + 48);
          if (!v178)
            v178 = *(_QWORD *)(v25 + 16);
        }
        if (*((_DWORD *)v266 + 20))
        {
          v249 = JSC::VM::hasExceptionsAfterHandlingTraps(v266, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v11 = v176;
          v15 = v175;
          v10 = (uint64_t)v264;
          v24 = v254;
          v124 = v178;
          if (v249)
            goto LABEL_63;
        }
        else
        {
          v11 = v176;
          v15 = v175;
          v10 = (uint64_t)v264;
          v24 = v254;
          v124 = v178;
        }
        goto LABEL_189;
      }
    }
    else
    {
      v123 = *(_DWORD *)v25;
    }
    v124 = *(_QWORD *)(16 * (v123 & 0xFFFFFFFE) + 0x30);
    if (!v124)
      v124 = *(_QWORD *)(v25 + 16);
LABEL_189:
    if ((v124 & 0xFFFE000000000002) != 0)
      goto LABEL_63;
    v60 = 0;
    v25 = v124;
    if (*(unsigned __int8 *)(v124 + 5) <= 0x16u)
      goto LABEL_64;
  }
  if (!BYTE4(v273[1]))
  {
    v235 = *(unsigned __int8 *)(v25 + 5);
    if (v235 == 61)
      goto LABEL_350;
LABEL_332:
    if (!v23
      || (v235 - 50) < 0xFFFFFFF5
      || (v236 = *(_DWORD *)(v23 + 16), (v236 & 0x20) != 0)
      || (v237 = *(unsigned int *)(v23 + 4), !(_DWORD)v237))
    {
LABEL_350:
      v11 = v180;
      v15 = v257;
      v24 = v255;
      a2 = (JSC::VM **)v179;
      goto LABEL_185;
    }
    v238 = *(unsigned __int8 **)(v23 + 8);
    if ((v236 & 4) == 0)
    {
      v239 = *(unsigned __int16 *)v238;
      if ((_DWORD)v237 == 1)
        goto LABEL_338;
      if (v239 == 45)
      {
        v239 = *((unsigned __int16 *)v238 + 1);
        goto LABEL_342;
      }
      if ((v239 - 48) >= 0xA && ((_DWORD)v237 != 8 || v239 != 73))
      {
LABEL_353:
        if ((_DWORD)v237 != 3 || v239 != 78)
          goto LABEL_350;
      }
LABEL_346:
      v253 = v253 & 0xFFFFFF0000000000 | v237 | ((unint64_t)((v236 >> 2) & 1) << 32);
      JSC::jsToNumber(v238, v253);
      WTF::numberToString(v279, v240);
      v242 = WTF::equal(v23, (unint64_t)v279, v241);
      v11 = v180;
      v15 = v257;
      v24 = v255;
      a2 = (JSC::VM **)v179;
      if (v242)
        goto LABEL_63;
      goto LABEL_185;
    }
    v239 = *v238;
    if ((_DWORD)v237 == 1)
    {
LABEL_338:
      v11 = v180;
      v15 = v257;
      v24 = v255;
      a2 = (JSC::VM **)v179;
      if ((v239 - 48) < 0xA)
        goto LABEL_63;
      goto LABEL_185;
    }
    if (v239 == 45)
    {
      v239 = v238[1];
LABEL_342:
      if ((v239 - 48) < 0xA)
      {
        if ((_DWORD)v237 == 2)
          goto LABEL_387;
        goto LABEL_346;
      }
      if ((_DWORD)v237 != 9)
        goto LABEL_350;
    }
    else
    {
      if ((v239 - 48) < 0xA)
        goto LABEL_346;
      if ((_DWORD)v237 != 8)
        goto LABEL_353;
    }
    if (v239 != 73)
      goto LABEL_350;
    goto LABEL_346;
  }
LABEL_387:
  v60 = 0;
LABEL_283:
  v11 = v180;
LABEL_140:
  v15 = v257;
LABEL_64:
  v61 = v278;
  if (*((_DWORD *)v278 + 20))
  {
    v135 = *((_DWORD *)v278 + 20);
    if ((v135 & 0x27) != 0 && (v135 & 0x20) == 0)
    {
      v250 = v11;
      v251 = v15;
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v278 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v15 = v251;
      v11 = v250;
    }
    if (*((_QWORD *)v61 + 2))
      goto LABEL_209;
  }
  if (!BYTE1(v273[1]) || BYTE1(v273[1]) == 1 && LOBYTE(v273[1]) == 1 && v272 == (_DWORD *)v10)
  {
    v62 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
    if (!v62)
      v62 = *(_QWORD *)(v10 + 16);
    if (*(_BYTE *)(v10 + 5) == 24)
    {
      v63 = (*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x10) & 3) == 0 && (v62 & 0xFFFE000000000002) == 0;
      if (v63
        && &JSC::ObjectPrototype::s_info == (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v62 & 0xFFFFFFFE) + 0x4C))
        && (*(_BYTE *)(16 * (*(_DWORD *)v62 & 0xFFFFFFFE) + 0x10) & 3) == 0)
      {
        *((_DWORD *)v15 + 9) = HIDWORD(v270);
        if ((*(_DWORD *)v10 & 0xFFFFFFFE) != 0)
        {
          *((_DWORD *)v12 + 14) = *(_DWORD *)v10 & 0xFFFFFFFE;
          if (*((_DWORD *)v13 + 190) >= *((unsigned __int8 *)v12 + 7))
          {
            v92 = v11;
            JSC::Heap::writeBarrierSlowPath((uint64_t)v13 + 192, (unint64_t)v12);
            v11 = v92;
          }
        }
        else
        {
          *((_DWORD *)v12 + 14) = 0;
        }
        if ((*(_DWORD *)v62 & 0xFFFFFFFE) != 0)
        {
          *((_DWORD *)v12 + 15) = *(_DWORD *)v62 & 0xFFFFFFFE;
          if (*((_DWORD *)v13 + 190) >= *((unsigned __int8 *)v12 + 7))
          {
            v93 = v11;
            JSC::Heap::writeBarrierSlowPath((uint64_t)v13 + 192, (unint64_t)v12);
            v11 = v93;
          }
        }
        else
        {
          *((_DWORD *)v12 + 15) = 0;
        }
      }
    }
  }
  if (!v60)
    goto LABEL_209;
  if (BYTE1(v273[1]) == 1)
  {
    v64 = (uint64_t)v268;
  }
  else
  {
    if (BYTE1(v273[1]) == 2)
    {
      v75 = v11;
      v76 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v268, v11, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v94 = *v8;
      v95 = (unint64_t)v272;
      v96 = *(_QWORD *)(16 * (*v272 & 0xFFFFFFFE) + 0x28);
      if ((v270 & 0x20) != 0)
        v95 = (unint64_t)v271;
      if (BYTE3(v273[1]) != 1)
        goto LABEL_159;
      if ((v95 & 0xFFFE000000000002) != 0)
        goto LABEL_300;
      v97 = *(unsigned int *)(16 * (*(_DWORD *)v95 & 0xFFFFFFFE) + 0x4C);
      v98 = *(_DWORD *)(16 * (*(_DWORD *)v95 & 0xFFFFFFFE) + 0x4C) != 0;
      v99 = 16 * v97;
      if ((_DWORD)v97)
        v100 = v276 == (int8x16_t **)v99;
      else
        v100 = 1;
      if (!v100)
      {
        do
        {
          v99 = *(_QWORD *)(v99 + 16);
          v98 = v99 != 0;
        }
        while ((int8x16_t **)v99 != v276 && v99 != 0);
      }
      if (!v98)
      {
LABEL_300:
        v279[0] = *((WTF::StringImpl **)v11 + 7);
        v75 = v11;
        v76 = JSC::throwDOMAttributeGetterTypeError(v96, v279, v276, v94);
      }
      else
      {
LABEL_159:
        v75 = v11;
        v76 = v268(v96);
      }
    }
    v11 = v75;
    v64 = v76;
  }
  if (*((_DWORD *)v61 + 20))
  {
    v145 = v11;
    v19 = 0;
    if (!JSC::VM::hasExceptionsAfterHandlingTraps(v61, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    {
      v11 = v145;
      if ((v64 & 0xFFFFFFFFFFFFFFF7) != 2)
      {
LABEL_90:
        if ((v64 & 0xFFFE000000000002) != 0)
        {
          LOBYTE(v279[0]) = 0;
        }
        else if (*(_BYTE *)(v64 + 5) == 26)
        {
          v65 = *(_QWORD *)(v64 + 24);
          if ((v65 & 1) != 0)
            v65 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFFFFELL) + 48);
          if (*(_BYTE *)(v65 + 5) == 8)
          {
            LOBYTE(v279[0]) = 1;
            v279[1] = *(WTF::StringImpl **)(v65 + 40);
            LOBYTE(v280) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v64 & 0xFFFFFFFE)
                                                                                      + 0x4C));
          }
          else
          {
            LOBYTE(v279[0]) = 2;
            v66 = *(_QWORD *)(v64 + 16);
            v279[1] = (WTF::StringImpl *)v65;
            v280 = v66;
          }
        }
        else
        {
          v107 = v11;
          (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v64 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0x38))(v279, v64);
          v11 = v107;
        }
        *(_OWORD *)v9 = *(_OWORD *)v279;
        *((_QWORD *)v9 + 2) = v280;
        if (!*(_BYTE *)v9)
        {
          v183 = (unint64_t)v11;
          v184 = *v8;
          if (*v8)
            *(_DWORD *)v184 += 2;
          WTF::makeString<char,WTF::String,WTF::ASCIILiteral>((uint64_t)v279, (uint64_t)v184);
          JSC::throwTypeError(v183, &v278, v279);
          v192 = v279[0];
          v279[0] = 0;
          if (v192)
          {
            if (*(_DWORD *)v192 == 2)
            {
              WTF::StringImpl::~StringImpl(v192, v185, v186, v187, v188, v189, v190, v191);
              WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
            }
            else
            {
              *(_DWORD *)v192 -= 2;
            }
          }
          if (v184)
          {
            if (*(_DWORD *)v184 == 2)
            {
              WTF::StringImpl::~StringImpl(v184, v185, v186, v187, v188, v189, v190, v191);
              WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
            }
            else
            {
              *(_DWORD *)v184 -= 2;
            }
          }
          goto LABEL_209;
        }
        v19 = v64;
      }
    }
  }
  else
  {
    if ((v64 & 0xFFFFFFFFFFFFFFF7) != 2)
      goto LABEL_90;
LABEL_209:
    v19 = 0;
  }
  if (v275)
  {
    v67 = *(_DWORD *)(v274 + 4);
    if (!v67)
    {
      __break(0xC471u);
      JUMPOUT(0x198B82898);
    }
    *(_DWORD *)(v274 + 4) = v67 - 1;
  }
  return v19;
}

uint64_t JSC::ProxyObject::validateGetTrapResult(JSC::JSGlobalObject *a1, unint64_t a2, _DWORD *a3, WTF::StringImpl *a4)
{
  JSC::VM *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  int v17;
  int v18;
  uint64_t v19;
  const char *v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  double v24;
  double v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::VM *v30;
  _BYTE v31[16];
  unint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  v7 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v30 = v7;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 14;
  v32 = 0xFFFFFFFF00000000;
  v34 = 0;
  v35 = 0;
  v33 = a3;
  v36 = 0x20000;
  v37 = 0;
  LOBYTE(v38) = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  result = (*(uint64_t (**)(_DWORD *, JSC::JSGlobalObject *, WTF::StringImpl *, _BYTE *))(16 * *(unsigned int *)(16 * (*a3 & 0xFFFFFFFE) + 0x4C)
                                                                                                  + 0x68))(a3, a1, a4, v31);
  v17 = 0;
  if ((_DWORD)result)
  {
    result = JSC::PropertyDescriptor::setPropertySlot((uint64_t)&v26, (uint64_t)a1, a4, (uint64_t)v31, v12, v13, v14, v15);
    v17 = result;
  }
  if (v39)
  {
    v18 = *(_DWORD *)(v38 + 4);
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x198B83434);
    }
    *(_DWORD *)(v38 + 4) = v18 - 1;
  }
  if (*((_DWORD *)v7 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v7, v9, v10, v11, v12, v13, v14, v15);
    if ((result & 1) != 0 || ((v17 ^ 1) & 1) != 0)
      return result;
  }
  else if (!v17)
  {
    return result;
  }
  if ((v29 & 8) == 0)
    return result;
  v19 = v26;
  if (v26)
  {
    if ((v29 & 2) == 0)
      goto LABEL_14;
    if (v26 != a2)
    {
      if (v26 >> 49)
      {
        if (!(a2 >> 49))
        {
          if (!*((_DWORD *)v7 + 20))
            goto LABEL_23;
          v23 = 0;
          goto LABEL_38;
        }
        v24 = (double)(int)v26;
        if (v26 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v24 = v26 - 0x2000000000000;
        v25 = (double)(int)a2;
        if (a2 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v25 = a2 - 0x2000000000000;
        v23 = *(_QWORD *)&v24 == *(_QWORD *)&v25;
LABEL_21:
        if (!*((_DWORD *)v7 + 20))
        {
LABEL_22:
          if (v23)
            return result;
LABEL_23:
          v20 = "Proxy handler's 'get' result of a non-configurable and non-writable property should be the same value as"
                " the target's property";
          v21 = (unint64_t)a1;
          v22 = 127;
          return JSC::throwTypeError(v21, &v30, (uint64_t)v20, v22);
        }
LABEL_38:
        result = JSC::VM::hasExceptionsAfterHandlingTraps(v7, v19, v10, v11, v12, v13, v14, v15);
        if ((result & 1) != 0)
          return result;
        goto LABEL_22;
      }
LABEL_20:
      result = JSC::JSValue::strictEqual(a1, v26, a2, v11, v12, v13, v14, v15, v16);
      v23 = result;
      goto LABEL_21;
    }
LABEL_28:
    if (*((_DWORD *)v7 + 20))
      return JSC::VM::hasExceptionsAfterHandlingTraps(v7, v26, v10, v11, v12, v13, v14, v15);
    return result;
  }
  if ((v29 & 2) != 0 && (v29 & 0x100000000) != 0)
  {
    if (v26 != a2)
      goto LABEL_20;
    goto LABEL_28;
  }
LABEL_14:
  if (v27 == 10 && a2 != 10)
  {
    v20 = "Proxy handler's 'get' result of a non-configurable accessor property without a getter should be undefined";
    v21 = (unint64_t)a1;
    v22 = 106;
    return JSC::throwTypeError(v21, &v30, (uint64_t)v20, v22);
  }
  return result;
}

uint64_t JSC::ProxyObject::performGet(JSC::JSCell *a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  JSC::Interpreter *HandlerTrap;
  WTF::AtomStringImpl *v18;
  uint64_t *v19;
  int v20;
  unint64_t v21;
  int v22;
  uint64_t *v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  int v43;
  unsigned int v44;
  JSC::CodeBlock *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  JSC::JSGlobalObject *v51;
  WTF *v52;
  _DWORD *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  JSC::VM *v57;
  JSC::VM *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t result;
  uint64_t (*v63)();
  unsigned int *v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned int v90;
  uint64_t v91;
  WTF *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  BOOL v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  _DWORD *v126;
  JSC::VM *v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  unsigned int *v131;
  int v132;
  unsigned int v133;
  JSC::CodeBlock *v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  JSC::VM *v142;
  JSC::JSGlobalObject *v143;
  unint64_t v144;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v146;
  uint64_t (*v147)();
  unsigned int *v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _BYTE *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unsigned int v165;
  unsigned int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  unsigned int v176;
  int v177;
  unint64_t v178;
  int v179;
  uint64_t v180;
  unsigned int v181;
  int v182;
  _BYTE *v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  int v189;
  unsigned __int16 *v190;
  uint64_t v191;
  unsigned int v192;
  int v193;
  uint64_t v194;
  WTF *v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  int v200;
  unsigned int *v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  int v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  _BOOL4 v215;
  unint64_t v216;
  unsigned int v217;
  int v218;
  _WORD *v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  unsigned int v223;
  unsigned int v224;
  JSC::VM *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unsigned int v231;
  unsigned int v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  int v236;
  unint64_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  unsigned int v242;
  int v243;
  unint64_t v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  unsigned __int16 *v253;
  uint64_t v254;
  unsigned int v255;
  unint64_t v256;
  JSC::VM *v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  int v261;
  int v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t v266;
  char v267;
  int v268;
  unsigned int v269;
  uint64_t v270;
  unsigned __int8 *v271;
  int v272;
  _BOOL4 v273;
  double v274;
  const unsigned __int8 *v275;
  uint64_t v276;
  unsigned __int8 *v277;
  unsigned int v278;
  JSC::VM *v279;
  uint64_t v280;
  uint64_t v281;
  char v282;
  int v283;
  uint64_t v284;
  unsigned int v285;
  unint64_t v286;
  unint64_t v287;
  JSC::Interpreter *v288;
  unint64_t v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  unsigned int v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unsigned __int8 *v297;
  unsigned int v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  JSC::JSGlobalObject *v309;
  WTF *v310;
  uint64_t *v311;
  unint64_t v312;
  unsigned int v313;
  char v314[8];
  uint64_t v315;
  _DWORD *v316;
  JSC::VM *v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  __int128 v323;
  uint64_t v324;
  char v325;
  uint64_t v326;
  uint64_t v327;
  JSC::VM *v328;
  uint64_t v329;
  _DWORD *v330;
  JSC::CodeBlock *v331;
  JSC::VM *v332[2];
  JSC::CodeBlock *v333;
  char v334[8];
  uint64_t v335;
  uint64_t *v336;
  uint64_t *v337;
  uint64_t v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  uint64_t v343;

  v8 = a4;
  v10 = (unint64_t)a1;
  v343 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)a2 + 7);
  v12 = *(_QWORD *)(a4 + 24);
  v317 = (JSC::VM *)v11;
  if ((unint64_t)&v300 < *(_QWORD *)(v11 + 8))
  {
    JSC::throwStackOverflowError((unint64_t)a2, &v317, a3, a4, a5, a6, a7, a8);
    goto LABEL_182;
  }
  v13 = a3;
  v14 = *((_QWORD *)a1 + 2);
  if (a3 && (*(_BYTE *)(a3 + 16) & 0x20) != 0 && (*(_BYTE *)(a3 + 36) & 4) != 0)
  {
    v50 = 10;
    goto LABEL_72;
  }
  v15 = *((_QWORD *)a1 + 3);
  if (v15 == 2)
  {
    v50 = JSC::throwTypeError((unint64_t)a2, &v317, (uint64_t)"Proxy has already been revoked. No more operations are allowed to be performed on it", 85);
    goto LABEL_72;
  }
  v16 = (uint64_t *)(v11 + 39696);
  v314[0] = 0;
  HandlerTrap = (JSC::Interpreter *)JSC::ProxyObject::getHandlerTrap(a1, (JSC::VM **)a2, v15, (uint64_t)v314, *(_QWORD *)(v11 + 41952) + 1376, 1uLL, a7, a8);
  a3 = (uint64_t)HandlerTrap;
  if (*(_DWORD *)(v11 + 80))
  {
    v151 = *(_DWORD *)(v11 + 80);
    if ((v151 & 0x27) != 0 && (v151 & 0x20) == 0)
    {
      v288 = HandlerTrap;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)HandlerTrap, a4, a5, a6, a7, a8);
      a3 = (uint64_t)v288;
    }
    if (*(_QWORD *)(v11 + 16))
    {
LABEL_182:
      v50 = 0;
      goto LABEL_72;
    }
  }
  v309 = a2;
  v310 = (WTF *)v13;
  v308 = v14;
  if (a3)
  {
    v307 = v15;
    v334[0] = 0;
    v19 = &v338;
    v337 = 0;
    v339 = 0u;
    v340 = 0u;
    v341 = 0u;
    v342 = 0;
    v336 = &v338;
    v338 = v14;
    v335 = 0x800000001;
    v20 = *(_DWORD *)(v13 + 16);
    if ((v20 & 0x20) != 0)
    {
      *(_DWORD *)v13 += 2;
      v21 = v13;
    }
    else
    {
      if ((v20 & 0x10) != 0)
      {
        *(_DWORD *)v13 += 2;
        v21 = v13;
      }
      else
      {
        v66 = v13;
        v67 = a3;
        WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v11 + 41912), v66, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, &v318);
        a3 = v67;
        v21 = v318;
      }
      v22 = *(_DWORD *)v21;
      *(_DWORD *)v21 += 2;
      if (v22)
      {
        *(_DWORD *)v21 = v22;
      }
      else
      {
        v80 = a3;
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v18, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
        a3 = v80;
      }
    }
    v23 = &v335;
    v24 = *(_DWORD *)(v21 + 16);
    v311 = &v338;
    v305 = &v335;
    if ((v24 & 0x20) != 0 && (*(_BYTE *)(v21 + 36) & 4) == 0)
    {
      v119 = a3;
      HandlerTrap = (JSC::Interpreter *)JSC::Symbol::create((JSC::Symbol *)v11, (JSC::VM *)v21, (WTF::SymbolImpl *)a3, a4, a5, a6, a7, a8);
      a3 = v119;
      v23 = v305;
      v28 = (uint64_t)HandlerTrap;
      goto LABEL_25;
    }
    v25 = *(_DWORD *)(v21 + 4);
    if (v25 != 1)
    {
      if (!v25)
      {
        v28 = *(_QWORD *)(v11 + 41968);
        goto LABEL_25;
      }
LABEL_15:
      *(_DWORD *)v21 += 2;
      v26 = v21;
      if ((v24 & 3) == 2)
      {
        v26 = v21;
        do
        {
          v26 = *(_QWORD *)(v26 + 24);
          v24 = *(_DWORD *)(v26 + 16);
        }
        while ((v24 & 3) == 2);
      }
      if ((v24 & 8) != 0)
      {
        v27 = 0;
      }
      else
      {
        *(_DWORD *)(v26 + 16) = v24 | 8;
        v27 = (unint64_t)*(unsigned int *)(v26 + 4) << ((v24 & 4) == 0);
      }
      v28 = *v16;
      if ((unint64_t)*v16 >= *(_QWORD *)(v11 + 39704))
      {
        v28 = *(_QWORD *)(v11 + 39712);
        if ((v28 & 1) != 0)
        {
          v304 = a3;
          JSC::sanitizeStackForVM((JSC *)v11, v18, a3, a4, a5, a6, a7, a8);
          HandlerTrap = (JSC::Interpreter *)JSC::LocalAllocator::allocateSlowCase(v11 + 39672, v11 + 192, 16, 0, 0, v247, v248, v249);
          a3 = v304;
          v23 = v305;
          v28 = (uint64_t)HandlerTrap;
          goto LABEL_20;
        }
        v155 = *(_QWORD *)(v28 + 8) ^ *(_QWORD *)(v11 + 39720);
        *(_QWORD *)(v11 + 39704) = v28 + HIDWORD(v155);
        *(_QWORD *)(v11 + 39712) = v28 + (int)v155;
      }
      *v16 = v28 + 16;
LABEL_20:
      *(_DWORD *)v28 = *(_QWORD *)(v11 + 41512) >> 4;
      *(_DWORD *)(v28 + 4) = 17302016;
      *(_QWORD *)(v28 + 8) = v21;
      if (*(_BYTE *)(v11 + 755))
        __dmb(0xAu);
      if (v27 >= 0x101)
      {
        v91 = a3;
        JSC::Heap::reportExtraMemoryAllocatedSlowCase(v11 + 192, 0, v28, v27, a5, a6, a7, a8);
        a3 = v91;
        v23 = v305;
      }
      v19 = v311;
LABEL_25:
      v29 = v335;
      if ((_DWORD)v335 == HIDWORD(v335) || v336 != v19 && v336)
      {
        v68 = v28;
        v69 = a3;
        HandlerTrap = (JSC::Interpreter *)JSC::MarkedVectorBase::slowAppend((uint64_t)v23, v68, a3, a4, a5, a6, a7, a8);
        a3 = v69;
        v23 = v305;
        if ((_DWORD)HandlerTrap == 1)
          v334[0] = 1;
      }
      else
      {
        v336[v335] = v28;
        LODWORD(v335) = v29 + 1;
      }
      if (*(_DWORD *)v21 == 2)
      {
        v71 = a3;
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v18, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
        a3 = v71;
        v23 = v305;
      }
      else
      {
        *(_DWORD *)v21 -= 2;
      }
      if ((v12 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v12 + 5) - 51 <= 5)
        v12 = 10;
      v30 = v335;
      if ((_DWORD)v335 == HIDWORD(v335) || v336 != v19 && v336)
      {
        v70 = a3;
        HandlerTrap = (JSC::Interpreter *)JSC::MarkedVectorBase::slowAppend((uint64_t)v23, v12, a3, a4, a5, a6, a7, a8);
        a3 = v70;
        if ((_DWORD)HandlerTrap == 1)
          v334[0] = 1;
      }
      else
      {
        v336[v335] = v12;
        LODWORD(v335) = v30 + 1;
      }
      v312 = (unint64_t)v336;
      v31 = v335;
      v313 = v335;
      v32 = *((_QWORD *)a2 + 7);
      v33 = v32 + 90568;
      v34 = v314[0];
      if (v314[0] == 2 || !(_BYTE)v316)
      {
        v332[0] = (JSC::VM *)v32;
        v306 = v11;
        if (v314[0] == 2)
        {
          v36 = 0;
          v35 = v315;
          a4 = (uint64_t)v316;
          v37 = v316;
        }
        else
        {
          a4 = 0;
          v35 = 0;
          v36 = v315;
          v37 = (_DWORD *)a3;
        }
        v38 = *(_QWORD *)(16 * (*v37 & 0xFFFFFFFE) + 0x28);
        v328 = (JSC::VM *)v32;
        v329 = v38;
        if (*(_QWORD *)v33)
        {
LABEL_43:
          *(_QWORD *)(v32 + 32) = 0;
          if ((unint64_t)&v300 < *(_QWORD *)(v32 + 8) || v313 > 0x10000)
          {
            v146 = JSC::throwStackOverflowError(v38, v332, a3, a4, a5, a6, a7, a8);
          }
          else
          {
            if (!*(_DWORD *)(v32 + 4))
            {
              v39 = *(_DWORD *)(v32 + 80);
              if ((v39 & 0x27) == 0 || (v39 & 0x20) != 0)
                goto LABEL_47;
              v153 = *(_DWORD *)(v32 + 80);
              if ((v153 & 0x27) != 0 && (v153 & 0x20) == 0)
              {
                v304 = a3;
                v290 = v31;
                v291 = v36;
                v292 = a4;
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v32 + 64), 7u, a3, a4, a5, a6, a7, a8);
                a4 = v292;
                v36 = v291;
                v31 = v290;
                a3 = v304;
              }
              v50 = *(_QWORD *)(v32 + 16);
              if (!v50)
              {
LABEL_47:
                v40 = v10;
                v41 = v8;
                v42 = (unsigned int *)(v32 + 80);
                v43 = *(_DWORD *)(v32 + 80);
                if ((v43 & 0x20) == 0)
                {
                  do
                    v44 = __ldaxr(v42);
                  while (__stlxr(v44 | 0x20, v42));
                }
                v45 = 0;
                v46 = 0;
                v333 = 0;
                if (v34 == 2)
                {
                  if (*(_BYTE *)(v35 + 5) == 8
                    || (*(_QWORD *)(v35 + 8)
                      ? (v63 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                      : (v63 = 0),
                        v63))
                  {
                    v333 = *(JSC::CodeBlock **)(v35 + 96);
                  }
                  else
                  {
                    v103 = a3;
                    LODWORD(v303) = v31;
                    v304 = v36;
                    JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v35, v32, a3, (const WTF::StringImpl *)a4, 0, &v333, a7, a8);
                    v36 = v304;
                    v31 = v303;
                    a3 = v103;
                  }
                  v50 = *((_QWORD *)v332[0] + 2);
                  if (v50)
                  {
                    if ((v43 & 0x20) == 0)
                    {
                      do
                        v181 = __ldaxr(v42);
                      while (__stlxr(v181 & 0xFFFFFFDF, v42));
                    }
                    v8 = v41;
                    v10 = v40;
                    v11 = v306;
                    v51 = v309;
                    v52 = v310;
                    v53 = (_DWORD *)v308;
                    v33 = v32 + 90568;
                    goto LABEL_62;
                  }
                  *((_BYTE *)v333 + 17) = 0;
                  v46 = *(_QWORD *)(v35 + 8);
                  v64 = (unsigned int *)(v46 + 8);
                  do
                    v65 = __ldaxr(v64);
                  while (__stlxr(v65 + 1, v64));
                  v45 = v333;
                }
                v47 = v31 + 1;
                v318 = (unint64_t)v45;
                v319 = a3;
                *(_QWORD *)&v323 = v312;
                *((_QWORD *)&v323 + 1) = v38;
                LODWORD(v320) = v31 + 1;
                if (v45)
                {
                  v48 = *((_DWORD *)v45 + 7);
                  if (v48 <= v47)
                    v47 = v31 + 1;
                  else
                    v47 = v48;
                }
                LODWORD(v322) = v47 | 1;
                HIDWORD(v320) = 0;
                v11 = v306;
                v321 = v307;
                if ((v43 & 0x20) == 0)
                {
                  do
                    v49 = __ldaxr(v42);
                  while (__stlxr(v49 & 0xFFFFFFDF, v42));
                }
                if (v34 == 2)
                {
                  v50 = vmEntryToJavaScript(*(_QWORD *)(v46 + 16), (JSC::VM *)v32, (uint64_t)&v318, a4, a5, a6, a7, a8);
                  v8 = v41;
                  v10 = v40;
                  v51 = v309;
                  v52 = v310;
                  v53 = (_DWORD *)v308;
                  v33 = v32 + 90568;
                  goto LABEL_58;
                }
                v50 = vmEntryToNative(v36, (JSC::VM *)v32, (uint64_t)&v318, a4, a5, a6, a7, a8);
                v8 = v41;
                v10 = v40;
                v51 = v309;
                v52 = v310;
                v53 = (_DWORD *)v308;
                v33 = v32 + 90568;
                if (v46)
                {
LABEL_58:
                  v54 = (unsigned int *)(v46 + 8);
                  do
                  {
                    v55 = __ldaxr(v54);
                    v56 = v55 - 1;
                  }
                  while (__stlxr(v56, v54));
                  if (!v56)
                  {
                    atomic_store(1u, (unsigned int *)(v46 + 8));
                    v154 = v50;
                    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 32))(v46);
                    v50 = v154;
                  }
                }
LABEL_62:
                v57 = v328;
                if (*((JSC::VM ***)v328 + 11321) == &v328)
                {
                  *((_QWORD *)v328 + 11321) = 0;
                  if (*((_BYTE *)v57 + 56))
                  {
                    v102 = v50;
                    JSC::VM::executeEntryScopeServicesOnExit(v57, v18, a3, a4, a5, a6, a7, a8);
                    v50 = v102;
                  }
                }
                *(_BYTE *)(v33 + 2552) = 1;
                goto LABEL_64;
              }
LABEL_163:
              v11 = v306;
              v51 = v309;
              v52 = v310;
              v53 = (_DWORD *)v308;
              goto LABEL_62;
            }
            v146 = JSC::Interpreter::checkVMEntryPermission(HandlerTrap);
          }
          v50 = v146;
          goto LABEL_163;
        }
        *(_QWORD *)v33 = &v328;
        v92 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v92)
        {
          v93 = a3;
          v94 = v31;
          v95 = v36;
          v303 = a4;
          HandlerTrap = (JSC::Interpreter *)WTF::Thread::initializeCurrentTLS(HandlerTrap);
          a4 = v303;
          v36 = v95;
          v31 = v94;
          a3 = v93;
          v92 = HandlerTrap;
        }
        v96 = *((_BYTE *)v92 + 5);
        if ((v96 & 0x20) == 0)
        {
          v303 = a4;
          v304 = v36;
          v205 = v31;
          v206 = a3;
          *((_BYTE *)v92 + 5) = v96 | 0x20;
          if (BYTE2(dword_1ECF4C6C3))
            JSC::Wasm::startTrackingCurrentThread(HandlerTrap, (uint64_t)v18, a3, a4, a5, a6, a7, a8);
          WTF::registerThreadForMachExceptionHandling(v92, v18, a3, a4, a5, a6, a7, a8);
          a3 = v206;
          v31 = v205;
          a4 = v303;
          v36 = v304;
        }
        HandlerTrap = v328;
        if (*((_BYTE *)v328 + 56))
        {
          v303 = a4;
          v99 = v36;
          v100 = v31;
          v101 = a3;
        }
        else
        {
          v97 = *((_QWORD *)v328 + 11624);
          v98 = atomic_load(&JSC::lastTimeZoneID);
          if (v97 == v98)
            goto LABEL_43;
          v303 = a4;
          v99 = v36;
          v100 = v31;
          v101 = a3;
          HandlerTrap = v328;
        }
        JSC::VM::executeEntryScopeServicesOnEntry(HandlerTrap, v18, a3, a4, a5, a6, a7, a8);
        a3 = v101;
        v31 = v100;
        v36 = v99;
        a4 = v303;
        goto LABEL_43;
      }
      if (*(_DWORD *)(a3 + 88))
      {
        v50 = JSC::Interpreter::executeBoundCall(HandlerTrap, v32, a3, (uint64_t)&v312, a5, a6, a7, a8);
        v51 = v309;
        v52 = v310;
        v53 = (_DWORD *)v308;
LABEL_64:
        v58 = v317;
        if (*((_DWORD *)v317 + 20))
        {
          v152 = *((_DWORD *)v317 + 20);
          if ((v152 & 0x27) != 0 && (v152 & 0x20) == 0)
          {
            v289 = v50;
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v317 + 64), 7u, a3, a4, a5, a6, a7, a8);
            v50 = v289;
          }
          if (*((_QWORD *)v58 + 2))
            goto LABEL_191;
        }
        if ((*(_DWORD *)((16 * *v53) | 0x10) & 0x80000000) != 0)
        {
          v143 = v51;
          v144 = v50;
          JSC::ProxyObject::validateGetTrapResult(v143, v50, v53, v52);
          v50 = v144;
          if (*((_DWORD *)v58 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v58, (uint64_t)v18, a3, a4, a5, a6, a7, a8);
            v50 = v144;
            if (hasExceptionsAfterHandlingTraps)
LABEL_191:
              v50 = 0;
          }
        }
        v59 = v337;
        v60 = v311;
        if (v337)
        {
          v105 = *v337;
          if (*v337)
          {
            v106 = *(_DWORD *)(v105 - 8);
            v107 = ((unint64_t)v305 + ~((_QWORD)v305 << 32)) ^ (((unint64_t)v305 + ~((_QWORD)v305 << 32)) >> 22);
            v108 = 9 * ((v107 + ~(v107 << 13)) ^ ((v107 + ~(v107 << 13)) >> 8));
            v109 = (v108 ^ (v108 >> 15)) + ~((v108 ^ (v108 >> 15)) << 27);
            v110 = v106 & ((v109 >> 31) ^ v109);
            v111 = *(uint64_t **)(v105 + 8 * v110);
            if (v111 != v305)
            {
              v120 = 1;
              while (v111)
              {
                v110 = ((_DWORD)v110 + v120) & v106;
                v111 = *(uint64_t **)(v105 + 8 * v110);
                ++v120;
                if (v111 == v305)
                  goto LABEL_110;
              }
              v110 = *(unsigned int *)(v105 - 4);
            }
LABEL_110:
            if (v110 != *(_DWORD *)(v105 - 4))
            {
              *(_QWORD *)(v105 + 8 * v110) = -1;
              ++*(_DWORD *)(*v59 - 16);
              v112 = *v59;
              v113 = *v59 ? *(_DWORD *)(v112 - 12) - 1 : -1;
              *(_DWORD *)(v112 - 12) = v113;
              v114 = *v59;
              if (*v59)
              {
                v115 = 6 * *(_DWORD *)(v114 - 12);
                v116 = *(_DWORD *)(v114 - 4);
                v117 = v115 < v116 && v116 >= 9;
                if (v117)
                {
                  v118 = v50;
                  WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(v59, v116 >> 1, 0, a4, a5, a6, a7, a8);
                  v50 = v118;
                }
              }
            }
          }
        }
        if (v336 != v60 && v336 != 0)
        {
          v104 = v50;
          WTF::fastFree((unint64_t)v336, v18, a3, a4, a5, a6, a7, a8);
          v50 = v104;
        }
        goto LABEL_72;
      }
      v307 = v10;
      v122 = *(_QWORD *)(a3 + 32);
      v121 = *(_QWORD *)(a3 + 40);
      if (*(_BYTE *)(v122 + 5) == 26)
      {
        v123 = *(_QWORD *)(v122 + 24);
        if ((v123 & 1) != 0)
          v123 = *(_QWORD *)((v123 & 0xFFFFFFFFFFFFFFFELL) + 48);
        if (*(_BYTE *)(v123 + 5) != 8)
        {
          v124 = 0;
          LOBYTE(v328) = 2;
          a4 = *(_QWORD *)(v122 + 16);
          v329 = v123;
          v330 = (_DWORD *)a4;
          v333 = (JSC::CodeBlock *)v32;
          v125 = 1;
          v126 = (_DWORD *)a4;
          goto LABEL_136;
        }
        LOBYTE(v328) = 1;
        v124 = *(_QWORD *)(v123 + 40);
        v329 = v124;
        LOBYTE(v330) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                * *(unsigned int *)(16
                                                                                  * (*(_DWORD *)v122 & 0xFFFFFFFE)
                                                                                  + 0x4C));
        v333 = (JSC::CodeBlock *)v32;
      }
      else
      {
        v203 = *(_QWORD *)(a3 + 40);
        v204 = v335;
        HandlerTrap = (JSC::Interpreter *)(*(_QWORD *(**)(JSC::VM **__return_ptr, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)v122 & 0xFFFFFFFE) + 0x4C) + 0x38))(&v328, *(_QWORD *)(a3 + 32));
        v333 = (JSC::CodeBlock *)v32;
        if (v328 == 2)
        {
          v124 = 0;
          v125 = 1;
          v123 = v329;
          a4 = (uint64_t)v330;
          v126 = v330;
          v31 = v204;
          v121 = v203;
LABEL_136:
          v127 = *(JSC::VM **)(16 * (*v126 & 0xFFFFFFFE) + 0x28);
          v332[0] = (JSC::VM *)v32;
          v332[1] = v127;
          v304 = v32 + 90568;
          if (*(_QWORD *)v33)
          {
LABEL_137:
            *(_QWORD *)(v32 + 32) = 0;
            if ((unint64_t)&v300 < *(_QWORD *)(v32 + 8) || v313 > 0x10000)
            {
              v130 = v11;
              v211 = JSC::throwStackOverflowError((unint64_t)v127, &v333, a3, a4, a5, a6, a7, a8);
            }
            else
            {
              if (!*(_DWORD *)(v32 + 4))
              {
                v128 = v8;
                v129 = *(_DWORD *)(v32 + 80);
                if ((v129 & 0x27) != 0 && (v129 & 0x20) == 0)
                {
                  v212 = v31;
                  v213 = v121;
                  v214 = v124;
                  v301 = a4;
                  v215 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v32, (uint64_t)v18, a3, a4, a5, a6, a7, a8);
                  a4 = v301;
                  v124 = v214;
                  v121 = v213;
                  v31 = v212;
                  if (v215)
                  {
                    v130 = v11;
                    v50 = *(_QWORD *)(v32 + 16);
LABEL_306:
                    v8 = v128;
                    goto LABEL_300;
                  }
                }
                v130 = v11;
                v131 = (unsigned int *)(v32 + 80);
                v132 = *(_DWORD *)(v32 + 80);
                if ((v132 & 0x20) == 0)
                {
                  do
                    v133 = __ldaxr(v131);
                  while (__stlxr(v133 | 0x20, v131));
                }
                v134 = 0;
                v135 = 0;
                v331 = 0;
                if (v125)
                {
                  if (*(_BYTE *)(v123 + 5) == 8
                    || (*(_QWORD *)(v123 + 8)
                      ? (v147 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                      : (v147 = 0),
                        v147))
                  {
                    v331 = *(JSC::CodeBlock **)(v123 + 96);
                  }
                  else
                  {
                    v200 = v31;
                    v302 = v124;
                    v303 = v121;
                    JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v123, v32, v122, (const WTF::StringImpl *)a4, 0, &v331, a7, a8);
                    v124 = v302;
                    v121 = v303;
                    v31 = v200;
                  }
                  v50 = *((_QWORD *)v333 + 2);
                  if (v50)
                  {
                    if ((v132 & 0x20) == 0)
                    {
                      do
                        v217 = __ldaxr(v131);
                      while (__stlxr(v217 & 0xFFFFFFDF, v131));
                    }
                    goto LABEL_306;
                  }
                  *((_BYTE *)v331 + 17) = 0;
                  v135 = *(_QWORD *)(v123 + 8);
                  v148 = (unsigned int *)(v135 + 8);
                  do
                    v149 = __ldaxr(v148);
                  while (__stlxr(v149 + 1, v148));
                  v134 = v331;
                }
                v136 = v31 + 1;
                v318 = (unint64_t)v134;
                v319 = v122;
                *(_QWORD *)&v323 = v312;
                *((_QWORD *)&v323 + 1) = v127;
                LODWORD(v320) = v31 + 1;
                if (v134)
                {
                  v137 = *((_DWORD *)v134 + 7);
                  if (v137 <= v136)
                    v136 = v31 + 1;
                  else
                    v136 = v137;
                }
                v10 = v307;
                LODWORD(v322) = v136 | 1;
                HIDWORD(v320) = 0;
                v321 = v121;
                if ((v132 & 0x20) == 0)
                {
                  do
                    v138 = __ldaxr(v131);
                  while (__stlxr(v138 & 0xFFFFFFDF, v131));
                }
                if (v125)
                {
                  v50 = vmEntryToJavaScript(*(_QWORD *)(v135 + 16), (JSC::VM *)v32, (uint64_t)&v318, a4, a5, a6, a7, a8);
                  v8 = v128;
                  v51 = v309;
                  v52 = v310;
                  v53 = (_DWORD *)v308;
                }
                else
                {
                  v50 = vmEntryToNative(v124, (JSC::VM *)v32, (uint64_t)&v318, a4, a5, a6, a7, a8);
                  v8 = v128;
                  v51 = v309;
                  v52 = v310;
                  v53 = (_DWORD *)v308;
                  if (!v135)
                    goto LABEL_156;
                }
                v139 = (unsigned int *)(v135 + 8);
                do
                {
                  v140 = __ldaxr(v139);
                  v141 = v140 - 1;
                }
                while (__stlxr(v141, v139));
                if (!v141)
                {
                  atomic_store(1u, (unsigned int *)(v135 + 8));
                  v216 = v50;
                  (*(void (**)(uint64_t))(*(_QWORD *)v135 + 32))(v135);
                  v50 = v216;
                }
                goto LABEL_156;
              }
              v130 = v11;
              v211 = JSC::Interpreter::checkVMEntryPermission(HandlerTrap);
            }
            v50 = v211;
LABEL_300:
            v10 = v307;
            v53 = (_DWORD *)v308;
            v51 = v309;
            v52 = v310;
LABEL_156:
            v142 = v332[0];
            if (*((JSC::VM ***)v332[0] + 11321) == v332)
            {
              *((_QWORD *)v332[0] + 11321) = 0;
              if (*((_BYTE *)v142 + 56))
              {
                v198 = v50;
                JSC::VM::executeEntryScopeServicesOnExit(v142, v18, a3, a4, a5, a6, a7, a8);
                v50 = v198;
              }
            }
            *(_BYTE *)(v304 + 2552) = 1;
            v11 = v130;
            goto LABEL_64;
          }
          v301 = a4;
          v302 = v124;
          v303 = v121;
          v193 = v31;
          v194 = v11;
          *(_QWORD *)v304 = v332;
          v195 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
          if (!v195)
          {
            HandlerTrap = (JSC::Interpreter *)WTF::Thread::initializeCurrentTLS(HandlerTrap);
            v195 = HandlerTrap;
          }
          if ((*((_BYTE *)v195 + 5) & 0x20) == 0)
          {
            *((_BYTE *)v195 + 5) |= 0x20u;
            if (BYTE2(dword_1ECF4C6C3))
              JSC::Wasm::startTrackingCurrentThread(HandlerTrap, (uint64_t)v18, a3, a4, a5, a6, a7, a8);
            WTF::registerThreadForMachExceptionHandling(v195, v18, a3, a4, a5, a6, a7, a8);
          }
          HandlerTrap = v332[0];
          if (!*((_BYTE *)v332[0] + 56))
          {
            v196 = *((_QWORD *)v332[0] + 11624);
            v197 = atomic_load(&JSC::lastTimeZoneID);
            v11 = v194;
            v31 = v193;
            v124 = v302;
            v121 = v303;
            a4 = v301;
            if (v196 == v197)
              goto LABEL_137;
            HandlerTrap = v332[0];
          }
          JSC::VM::executeEntryScopeServicesOnEntry(HandlerTrap, v18, a3, a4, a5, a6, a7, a8);
          v11 = v194;
          v31 = v193;
          v124 = v302;
          v121 = v303;
          a4 = v301;
          goto LABEL_137;
        }
        v124 = v329;
        v31 = v204;
        v121 = v203;
      }
      v125 = 0;
      a4 = 0;
      v123 = 0;
      v126 = (_DWORD *)v122;
      goto LABEL_136;
    }
    v89 = *(unsigned __int8 **)(v21 + 8);
    if ((v24 & 4) != 0)
    {
      v90 = *v89;
    }
    else
    {
      v90 = *(unsigned __int16 *)v89;
      if (v90 > 0xFF)
        goto LABEL_15;
    }
    v28 = *(_QWORD *)(v11 + 8 * v90 + 42216);
    goto LABEL_25;
  }
  v307 = v10;
  v320 = 0xFFFFFFFF00000000;
  LOBYTE(v324) = 0;
  v325 = 0;
  v326 = 0;
  v327 = 0;
  v322 = 0;
  *(_QWORD *)&v323 = 0;
  v321 = v12;
  *(_QWORD *)((char *)&v323 + 5) = 0;
  v156 = v13 >> 4;
  v157 = (_BYTE *)(v14 + 6);
  if ((*(_BYTE *)(v14 + 6) & 8) == 0)
  {
    v10 = *((_QWORD *)v309 + 7);
    v158 = v14;
    do
    {
      v159 = *(_DWORD *)v158 & 0xFFFFFFFE;
      v160 = 16 * v159;
      if (!(_DWORD)v156 || (v156 & ~*(_DWORD *)(16 * v159 + 0x20)) != 0)
        goto LABEL_212;
      v161 = *(_QWORD *)(16 * v159 + 0x58);
      if (!v161)
      {
        v174 = *(_QWORD *)(16 * v159 + 0x40);
        if (!v174 || *(_BYTE *)(v174 + 5) != 1 && *(_DWORD *)(v174 + 80) < 2u)
          goto LABEL_212;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v160, (JSC::VM *)v10, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v161)
          goto LABEL_212;
      }
      if (!*(_DWORD *)(v161 + 24))
        goto LABEL_212;
      v162 = *(_QWORD *)(v161 + 16);
      v163 = v162 & 0xFFFFFFFFFFFFFFFELL;
      v164 = *(unsigned int *)(v161 + 8);
      v165 = *((_DWORD *)v310 + 4);
      if ((v162 & 1) != 0)
      {
        if ((v165 & 0x20) != 0)
          v165 = *((_DWORD *)v310 + 8);
        v166 = *(_DWORD *)(v161 + 12);
        v167 = (v165 >> 8) & *(_QWORD *)&v166;
        v168 = *(unsigned __int8 *)(v163 + v167);
        if (!*(_BYTE *)(v163 + v167))
          goto LABEL_212;
        v169 = v163 + v164;
        v170 = 1;
        while (1)
        {
          v171 = *(_QWORD *)(v169 + 8 * (v168 - 1));
          if (v310 == (WTF *)(v171 & 0xFFFFFFFFFFFFLL))
            break;
          v167 = ((_DWORD)v167 + v170) & v166;
          v168 = *(unsigned __int8 *)(v163 + v167);
          ++v170;
          if (!*(_BYTE *)(v163 + v167))
            goto LABEL_212;
        }
        a6 = (v171 >> 16) & 0xFF00000000 | HIBYTE(v171);
      }
      else
      {
        if ((v165 & 0x20) != 0)
          v165 = *((_DWORD *)v310 + 8);
        v175 = *(_DWORD *)(v161 + 12);
        v176 = v175 & (v165 >> 8);
        v177 = *(_DWORD *)(v163 + 4 * v176);
        if (!v177)
          goto LABEL_212;
        v178 = v163 + 4 * v164;
        v179 = 1;
        while (1)
        {
          v180 = (v177 - 1);
          if (*(WTF **)(v178 + 16 * v180) == v310)
            break;
          v176 = (v176 + v179) & v175;
          v177 = *(_DWORD *)(v163 + 4 * v176);
          ++v179;
          if (!v177)
            goto LABEL_212;
        }
        a6 = *(unsigned int *)(v178 + 16 * v180 + 8) | ((unint64_t)*(unsigned __int8 *)(v178 + 16 * v180 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        v172 = v11;
        a5 = HIDWORD(a6);
        v173 = v8;
        if ((int)a6 <= 63)
        {
          v186 = v158 + 16;
          v187 = a6 << 32;
        }
        else
        {
          v186 = *(_QWORD *)(v158 + 8) - 8;
          v187 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v186 + (v187 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v188 = *(unsigned __int8 *)(a4 + 5);
          if (v188 != 5)
          {
            if (v188 != 6)
              goto LABEL_248;
            v207 = *(_DWORD *)(v160 + 16) & 3;
            v208 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v210 = *(_QWORD *)(a4 + 24);
              v209 = *(_QWORD *)(a4 + 32);
              v318 = *(_QWORD *)(a4 + 8);
              v319 = v208;
              LODWORD(v320) = HIDWORD(a6);
              v322 = v158;
              goto LABEL_295;
            }
            v318 = *(_QWORD *)(a4 + 8);
            v319 = v208;
            LODWORD(v320) = HIDWORD(a6);
            v322 = v158;
LABEL_379:
            BYTE9(v323) = 3;
            if (v207 != 2)
              BYTE8(v323) = 1;
            goto LABEL_250;
          }
          v201 = (unsigned int *)v158;
          v202 = v10;
LABEL_282:
          JSC::JSObject::fillGetterPropertySlot(v201, v202, (uint64_t)&v318, a4, a5, a6);
          goto LABEL_250;
        }
LABEL_248:
        v318 = a4;
        v322 = v158;
LABEL_249:
        v320 = __PAIR64__(a6, a5);
        WORD4(v323) = 257;
        goto LABEL_250;
      }
LABEL_212:
      v172 = v11;
      v173 = v8;
      if ((*v157 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v158, (JSC::VM *)v10, (unint64_t)v310, (uint64_t)&v318) & 1) != 0)
      {
        goto LABEL_250;
      }
      v14 = *(_QWORD *)(v160 + 48);
      if (!v14)
        v14 = *(_QWORD *)(v158 + 16);
      if ((v14 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v14 + 5) < 0x17u)
      {
        if (v310)
        {
          v182 = *((_DWORD *)v310 + 4);
          if ((v182 & 0x20) == 0)
          {
            v183 = (_BYTE *)*((_QWORD *)v310 + 1);
            v184 = *((unsigned int *)v310 + 1);
            if ((v182 & 4) != 0)
            {
              if (!(_DWORD)v184)
                goto LABEL_475;
              v185 = *v183 - 48;
              if (v185 > 9 || v184 >= 2 && *v183 == 48)
                goto LABEL_475;
              v276 = v184 - 1;
              v277 = v183 + 1;
              while (1)
              {
                if (!v276)
                  goto LABEL_460;
                if (v185 > 0x19999999)
                  break;
                v278 = *v277 - 48;
                if (v278 > 9)
                  break;
                v117 = __CFADD__(v278, 10 * v185);
                v185 = v278 + 10 * v185;
                --v276;
                ++v277;
                v8 = v173;
                v50 = 10;
                if (v117)
                  goto LABEL_253;
              }
LABEL_473:
              v8 = v173;
            }
            else if ((_DWORD)v184)
            {
              v185 = *(unsigned __int16 *)v183 - 48;
              if (v185 <= 9 && (*(_WORD *)v183 != 48 || v184 <= 1))
              {
                v190 = (unsigned __int16 *)(v183 + 2);
                v191 = v184 - 1;
                while (v191)
                {
                  if (v185 > 0x19999999)
                    goto LABEL_473;
                  v192 = *v190 - 48;
                  if (v192 > 9)
                    goto LABEL_473;
                  v117 = __CFADD__(v192, 10 * v185);
                  v185 = v192 + 10 * v185;
                  ++v190;
                  --v191;
                  v8 = v173;
                  v50 = 10;
                  if (v117)
                    goto LABEL_253;
                }
LABEL_460:
                if (v185 != -1)
                {
                  v279 = (JSC::VM *)*((_QWORD *)v309 + 7);
                  while (1)
                  {
                    v280 = 16 * (*(_DWORD *)v308 & 0xFFFFFFFE);
                    v282 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v280 + 0x4C) + 0x70))();
                    if (*((_DWORD *)v279 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v279, v281, a3, a4, a5, a6, a7, a8))
                    {
                      break;
                    }
                    if ((v282 & 1) != 0)
                      goto LABEL_250;
                    if (BYTE10(v323) == 3)
                    {
                      if (BYTE12(v323))
                        break;
                      v283 = *(unsigned __int8 *)(v308 + 5);
                      if (v283 == 61)
                        goto LABEL_467;
                    }
                    else
                    {
                      v283 = *(unsigned __int8 *)(v308 + 5);
                      if (v283 == 61)
                      {
                        if (BYTE10(v323) == 1)
                          break;
                        goto LABEL_467;
                      }
                    }
                    if ((v283 - 39) <= 0xA)
                    {
                      if ((*(_BYTE *)(v308 + 40) & 7u) > 2)
                      {
                        v334[0] = 0;
                        LOBYTE(v335) = 0;
                        v295 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v308, (uint64_t)v334, a3, a4, a5, a6, a7, a8);
                        v286 = (_BYTE)v281 ? v295 : 0;
                      }
                      else
                      {
                        v286 = *(_QWORD *)(v308 + 24);
                      }
                      if (v286 <= v185)
                        break;
                    }
LABEL_467:
                    if ((*(_WORD *)(v280 + 12) & 0x800) == 0 || BYTE10(v323) == 3)
                    {
                      v284 = *(_QWORD *)(16 * (*(_DWORD *)v308 & 0xFFFFFFFE) + 0x30);
                      if (!v284)
                        v284 = *(_QWORD *)(v308 + 16);
                    }
                    else
                    {
                      if ((*(_WORD *)(16 * (*(_DWORD *)v308 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                      {
                        v284 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                         * *(unsigned int *)(16 * (*(_DWORD *)v308 & 0xFFFFFFFE) + 0x4C)
                                                                                         + 0xB0))(v308, v309);
                      }
                      else
                      {
                        v284 = *(_QWORD *)(16 * (*(_DWORD *)v308 & 0xFFFFFFFE) + 0x30);
                        if (!v284)
                          v284 = *(_QWORD *)(v308 + 16);
                      }
                      if (*((_DWORD *)v279 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v279, v281, a3, a4, a5, a6, a7, a8))
                      {
                        break;
                      }
                    }
                    if ((v284 & 0xFFFE000000000002) != 0)
                      goto LABEL_473;
                    v285 = *(unsigned __int8 *)(v284 + 5);
                    v308 = v284;
                    v8 = v173;
                    v50 = 10;
                    if (v285 <= 0x16)
                      goto LABEL_253;
                  }
                }
LABEL_475:
                v50 = 10;
                goto LABEL_252;
              }
            }
          }
        }
        v50 = 10;
        goto LABEL_253;
      }
      v157 = (_BYTE *)(v14 + 6);
      v158 = v14;
      v11 = v172;
    }
    while ((*(_BYTE *)(v14 + 6) & 8) == 0);
  }
  v172 = v11;
  v173 = v8;
  if (!v310)
    goto LABEL_319;
  v218 = *((_DWORD *)v310 + 4);
  if ((v218 & 0x20) != 0)
    goto LABEL_319;
  v219 = (_WORD *)*((_QWORD *)v310 + 1);
  v220 = *((unsigned int *)v310 + 1);
  if ((v218 & 4) == 0)
  {
    if ((_DWORD)v220)
    {
      v221 = (unsigned __int16)*v219 - 48;
      if (v221 <= 9 && (*v219 != 48 || v220 <= 1))
      {
        v253 = v219 + 1;
        v254 = v220 - 1;
        while (v254)
        {
          if (v221 > 0x19999999)
            goto LABEL_315;
          v255 = *v253 - 48;
          if (v255 > 9)
            goto LABEL_315;
          v222 = 0;
          LOBYTE(v220) = 0;
          v223 = 0;
          v117 = __CFADD__(v255, 10 * v221);
          v221 = v255 + 10 * v221;
          ++v253;
          --v254;
          if (v117)
            goto LABEL_317;
        }
        v223 = v221 & 0xFFFFFF00;
        v222 = 0x100000000;
        if (v221 == -1)
        {
          v222 = 0;
          LOBYTE(v220) = 0;
        }
        else
        {
          LOBYTE(v220) = v221;
        }
        if (v221 == -1)
          v223 = 0;
        goto LABEL_317;
      }
LABEL_315:
      v222 = 0;
      LOBYTE(v220) = 0;
    }
    else
    {
      v222 = 0;
    }
    v223 = 0;
LABEL_317:
    v224 = v220;
    goto LABEL_318;
  }
  if ((_DWORD)v220)
  {
    v293 = *(unsigned __int8 *)v219 - 48;
    if (v293 <= 9 && (v220 < 2 || *(_BYTE *)v219 != 48))
    {
      v296 = v220 - 1;
      v297 = (unsigned __int8 *)v219 + 1;
      while (v296)
      {
        if (v293 > 0x19999999)
          goto LABEL_508;
        v298 = *v297 - 48;
        if (v298 > 9)
          goto LABEL_508;
        v224 = 0;
        LOBYTE(v220) = 0;
        v222 = 0;
        v117 = __CFADD__(v298, 10 * v293);
        v293 = v298 + 10 * v293;
        --v296;
        ++v297;
        if (v117)
          goto LABEL_510;
      }
      if (v293 == -1)
        v224 = 0;
      else
        v224 = v293 & 0xFFFFFF00;
      if (v293 == -1)
        LOBYTE(v220) = 0;
      else
        LOBYTE(v220) = v293;
      if (v293 == -1)
        v222 = 0;
      else
        v222 = 0x100000000;
      goto LABEL_510;
    }
LABEL_508:
    v224 = 0;
    LOBYTE(v220) = 0;
  }
  else
  {
    v224 = 0;
  }
  v222 = 0;
LABEL_510:
  v223 = v220;
LABEL_318:
  if ((v222 & 0x100000000) != 0)
  {
    v256 = v223 | v224;
    v257 = (JSC::VM *)*((_QWORD *)v309 + 7);
    while (1)
    {
      v258 = 16 * (*(_DWORD *)v308 & 0xFFFFFFFE);
      v259 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(v258 + 0x4C) + 0x70))();
      v261 = v259;
      if (*((_DWORD *)v257 + 20))
      {
        v273 = JSC::VM::hasExceptionsAfterHandlingTraps(v257, v260, a3, a4, a5, a6, a7, a8);
        if (((v273 | v261) & 1) != 0)
        {
          if (!v273)
            goto LABEL_250;
          goto LABEL_475;
        }
      }
      else if ((v259 & 1) != 0)
      {
        goto LABEL_250;
      }
      if (BYTE10(v323) == 3)
      {
        if (BYTE12(v323))
          goto LABEL_475;
        v262 = *(unsigned __int8 *)(v308 + 5);
        if (v262 == 61)
          goto LABEL_390;
      }
      else
      {
        v262 = *(unsigned __int8 *)(v308 + 5);
        if (v262 == 61)
        {
          if (BYTE10(v323) == 1)
            goto LABEL_475;
          goto LABEL_390;
        }
      }
      if ((v262 - 39) <= 0xA)
      {
        if ((*(_BYTE *)(v308 + 40) & 7u) > 2)
        {
          v334[0] = 0;
          LOBYTE(v335) = 0;
          v299 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v308, (uint64_t)v334, a3, a4, a5, a6, a7, a8);
          v294 = (_BYTE)v260 ? v299 : 0;
        }
        else
        {
          v294 = *(_QWORD *)(v308 + 24);
        }
        if (v294 <= v256)
          goto LABEL_475;
      }
LABEL_390:
      if ((*(_WORD *)(v258 + 12) & 0x800) == 0 || BYTE10(v323) == 3)
      {
        v263 = *(_QWORD *)(16 * (*(_DWORD *)v308 & 0xFFFFFFFE) + 0x30);
        if (!v263)
          v263 = *(_QWORD *)(v308 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v308 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v263 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)v308 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0xB0))(v308, v309);
        }
        else
        {
          v263 = *(_QWORD *)(16 * (*(_DWORD *)v308 & 0xFFFFFFFE) + 0x30);
          if (!v263)
            v263 = *(_QWORD *)(v308 + 16);
        }
        if (*((_DWORD *)v257 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v257, v260, a3, a4, a5, a6, a7, a8))
          goto LABEL_475;
      }
      if ((v263 & 0xFFFE000000000002) != 0)
        goto LABEL_473;
      v264 = *(unsigned __int8 *)(v263 + 5);
      v308 = v263;
      v8 = v173;
      v50 = 10;
      if (v264 <= 0x16)
        goto LABEL_253;
    }
  }
LABEL_319:
  v225 = (JSC::VM *)*((_QWORD *)v309 + 7);
  while (1)
  {
    v226 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v14 + 6) & 8) == 0)
      break;
    v267 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, WTF *, unint64_t *))(16
                                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)
                                                                                                + 0x68))(v14, v309, v310, &v318);
    if (*((_DWORD *)v225 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v225, (uint64_t)v18, a3, a4, a5, a6, a7, a8))
      goto LABEL_475;
    if ((v267 & 1) != 0)
      goto LABEL_250;
    if (BYTE10(v323) == 3)
    {
      if (BYTE12(v323))
        goto LABEL_475;
      v268 = *(unsigned __int8 *)(v14 + 5);
      if (v268 != 61)
      {
LABEL_417:
        if (!v310)
          goto LABEL_333;
        if ((v268 - 50) < 0xFFFFFFF5)
          goto LABEL_333;
        v269 = *((_DWORD *)v310 + 4);
        if ((v269 & 0x20) != 0)
          goto LABEL_333;
        v270 = *((unsigned int *)v310 + 1);
        if (!(_DWORD)v270)
          goto LABEL_333;
        v271 = (unsigned __int8 *)*((_QWORD *)v310 + 1);
        if ((v269 & 4) == 0)
        {
          v272 = *(unsigned __int16 *)v271;
          if ((_DWORD)v270 == 1)
            goto LABEL_423;
          if (v272 == 45)
          {
            v272 = *((unsigned __int16 *)v271 + 1);
            goto LABEL_428;
          }
          if ((v272 - 48) >= 0xA && ((_DWORD)v270 != 8 || v272 != 73))
          {
LABEL_445:
            if ((_DWORD)v270 != 3 || v272 != 78)
              goto LABEL_333;
          }
LABEL_435:
          v10 = v10 & 0xFFFFFF0000000000 | v270 | ((unint64_t)((v269 >> 2) & 1) << 32);
          JSC::jsToNumber(v271, v10);
          WTF::numberToString(v334, v274);
          if (WTF::equal((unint64_t)v310, (unint64_t)v334, v275))
            goto LABEL_475;
          goto LABEL_333;
        }
        v272 = *v271;
        if ((_DWORD)v270 == 1)
        {
LABEL_423:
          if ((v272 - 48) < 0xA)
            goto LABEL_475;
          goto LABEL_333;
        }
        if (v272 == 45)
        {
          v272 = v271[1];
LABEL_428:
          if ((v272 - 48) < 0xA)
          {
            if ((_DWORD)v270 == 2)
              goto LABEL_475;
            goto LABEL_435;
          }
          if ((_DWORD)v270 != 9)
            goto LABEL_333;
        }
        else
        {
          if ((v272 - 48) < 0xA)
            goto LABEL_435;
          if ((_DWORD)v270 != 8)
            goto LABEL_445;
        }
        if (v272 != 73)
          goto LABEL_333;
        goto LABEL_435;
      }
    }
    else
    {
      v268 = *(unsigned __int8 *)(v14 + 5);
      if (v268 != 61)
        goto LABEL_417;
      if (BYTE10(v323) == 1)
        goto LABEL_475;
    }
LABEL_333:
    if ((*(_WORD *)(v226 + 12) & 0x800) != 0)
    {
      v238 = *(_DWORD *)v14;
      if (BYTE10(v323) != 3)
      {
        v266 = 16 * (v238 & 0xFFFFFFFE);
        if ((*(_WORD *)(v266 + 12) & 0x800) != 0)
        {
          v239 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v266 + 76) + 0xB0))(v14, v309);
        }
        else
        {
          v239 = *(_QWORD *)(v266 + 48);
          if (!v239)
            v239 = *(_QWORD *)(v14 + 16);
        }
        if (*((_DWORD *)v225 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v225, (uint64_t)v18, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_475;
        }
        goto LABEL_337;
      }
    }
    else
    {
      v238 = *(_DWORD *)v14;
    }
    v239 = *(_QWORD *)(16 * (v238 & 0xFFFFFFFE) + 0x30);
    if (!v239)
      v239 = *(_QWORD *)(v14 + 16);
LABEL_337:
    if ((v239 & 0xFFFE000000000002) != 0)
      goto LABEL_473;
    v14 = v239;
    v8 = v173;
    v50 = 10;
    if (*(unsigned __int8 *)(v239 + 5) <= 0x16u)
      goto LABEL_253;
  }
  if (!(_DWORD)v156 || (v156 & ~*(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_332;
  v227 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x58);
  if (!v227)
  {
    v240 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x40);
    if (!v240 || *(_BYTE *)(v240 + 5) != 1 && *(_DWORD *)(v240 + 80) < 2u)
      goto LABEL_332;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE)), v225, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v227)
      goto LABEL_332;
  }
  if (!*(_DWORD *)(v227 + 24))
    goto LABEL_332;
  v228 = *(_QWORD *)(v227 + 16);
  v229 = v228 & 0xFFFFFFFFFFFFFFFELL;
  v230 = *(unsigned int *)(v227 + 8);
  v231 = *((_DWORD *)v310 + 4);
  if ((v228 & 1) != 0)
  {
    if ((v231 & 0x20) != 0)
      v231 = *((_DWORD *)v310 + 8);
    v232 = *(_DWORD *)(v227 + 12);
    v233 = (v231 >> 8) & *(_QWORD *)&v232;
    v234 = *(unsigned __int8 *)(v229 + v233);
    if (*(_BYTE *)(v229 + v233))
    {
      v235 = v229 + v230;
      v236 = 1;
      while (1)
      {
        v237 = *(_QWORD *)(v235 + 8 * (v234 - 1));
        if (v310 == (WTF *)(v237 & 0xFFFFFFFFFFFFLL))
          break;
        v233 = ((_DWORD)v233 + v236) & v232;
        v234 = *(unsigned __int8 *)(v229 + v233);
        ++v236;
        if (!*(_BYTE *)(v229 + v233))
          goto LABEL_332;
      }
      a6 = (v237 >> 16) & 0xFF00000000 | HIBYTE(v237);
      goto LABEL_345;
    }
LABEL_332:
    if ((*(_BYTE *)(v14 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v14, v225, (unint64_t)v310, (uint64_t)&v318) & 1) != 0)
    {
      goto LABEL_250;
    }
    goto LABEL_333;
  }
  if ((v231 & 0x20) != 0)
    v231 = *((_DWORD *)v310 + 8);
  v241 = *(_DWORD *)(v227 + 12);
  v242 = v241 & (v231 >> 8);
  v243 = *(_DWORD *)(v229 + 4 * v242);
  if (!v243)
    goto LABEL_332;
  v244 = v229 + 4 * v230;
  v245 = 1;
  while (1)
  {
    v246 = (v243 - 1);
    if (*(WTF **)(v244 + 16 * v246) == v310)
      break;
    v242 = (v242 + v245) & v241;
    v243 = *(_DWORD *)(v229 + 4 * v242);
    ++v245;
    if (!v243)
      goto LABEL_332;
  }
  a6 = *(unsigned int *)(v244 + 16 * v246 + 8) | ((unint64_t)*(unsigned __int8 *)(v244 + 16 * v246 + 12) << 32);
LABEL_345:
  if ((_DWORD)a6 == -1)
    goto LABEL_332;
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v250 = v14 + 16;
    v251 = a6 << 32;
  }
  else
  {
    v250 = *(_QWORD *)(v14 + 8) - 8;
    v251 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v250 + (v251 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_361:
    v318 = a4;
    v322 = v14;
    goto LABEL_249;
  }
  v252 = *(unsigned __int8 *)(a4 + 5);
  if (v252 == 5)
  {
    v201 = (unsigned int *)v14;
    v202 = (uint64_t)v225;
    goto LABEL_282;
  }
  if (v252 != 6)
    goto LABEL_361;
  v207 = *(_DWORD *)(v226 + 16) & 3;
  v265 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v318 = *(_QWORD *)(a4 + 8);
    v319 = v265;
    LODWORD(v320) = HIDWORD(a6);
    v322 = v14;
    goto LABEL_379;
  }
  v210 = *(_QWORD *)(a4 + 24);
  v209 = *(_QWORD *)(a4 + 32);
  v318 = *(_QWORD *)(a4 + 8);
  v319 = v265;
  LODWORD(v320) = HIDWORD(a6);
  v322 = v14;
LABEL_295:
  BYTE9(v323) = 3;
  if (v207 != 2)
    BYTE8(v323) = 1;
  BYTE11(v323) = 1;
  v326 = v210;
  v327 = v209;
LABEL_250:
  if (BYTE9(v323) == 1)
  {
    v50 = v318;
  }
  else
  {
    if (BYTE9(v323) == 2)
      v199 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v318, v309, a3, a4, a5, a6, a7, a8);
    else
      v199 = JSC::PropertySlot::customGetter((uint64_t)&v318, *((JSC::VM **)v309 + 7), v310);
    v50 = v199;
  }
LABEL_252:
  v8 = v173;
LABEL_253:
  v10 = v307;
  v11 = v172;
  if (v325)
  {
    v189 = *(_DWORD *)(v324 + 4);
    if (!v189)
    {
      __break(0xC471u);
      JUMPOUT(0x198B84AE8);
    }
    *(_DWORD *)(v324 + 4) = v189 - 1;
  }
LABEL_72:
  if (*(_DWORD *)(v11 + 80))
  {
    v150 = *(_DWORD *)(v11 + 80);
    if ((v150 & 0x27) != 0 && (v150 & 0x20) == 0)
    {
      v287 = v50;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v50 = v287;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  *(_QWORD *)v8 = v50;
  *(_DWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 32) = v10;
  result = 1;
  *(_BYTE *)(v8 + 49) = 1;
  return result;
}

uint64_t JSC::ProxyObject::performInternalMethodGetOwnProperty(JSC::JSCell *a1, JSC::JSGlobalObject *a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _DWORD *v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t HandlerTrap;
  uint64_t v23;
  int v25;
  WTF::StringImpl *v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  int v36;
  JSC::MarkedVectorBase *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  JSC::JSObject *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::VM *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  char v62;
  BOOL v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  JSC::JSGlobalObject *v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  const char *v88;
  JSC::JSGlobalObject *v89;
  uint64_t v90;
  uint64_t *v91;
  _QWORD v92[3];
  uint64_t v93;
  char v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _DWORD *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  unsigned __int8 v103[24];
  JSC::VM *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  char v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE v116[9];

  v9 = *((_QWORD *)a2 + 7);
  v104 = (JSC::VM *)v9;
  if ((unint64_t)&v91 < *(_QWORD *)(v9 + 8))
  {
    JSC::throwStackOverflowError((unint64_t)a2, &v104, (uint64_t)a3, a4, a5, a6, a7, a8);
    return 0;
  }
  v13 = (_DWORD *)*((_QWORD *)a1 + 2);
  if (a3 && (a3[16] & 0x20) != 0 && (a3[36] & 4) != 0)
    return 0;
  v14 = *((_QWORD *)a1 + 3);
  if (v14 == 2)
  {
    JSC::throwTypeError((unint64_t)a2, &v104, (uint64_t)"Proxy has already been revoked. No more operations are allowed to be performed on it", 85);
    return 0;
  }
  v103[0] = 0;
  HandlerTrap = JSC::ProxyObject::getHandlerTrap(a1, (JSC::VM **)a2, v14, (uint64_t)v103, *(_QWORD *)(v9 + 41952) + 1384, 2uLL, a7, a8);
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v15, (uint64_t)v16, v17, v18, v19, v20, v21))
  {
    return 0;
  }
  if (HandlerTrap)
  {
    v94 = 0;
    v91 = &v95;
    v96 = &v98;
    v97 = 0;
    v99 = 0u;
    v100 = 0u;
    v101 = 0u;
    v102 = 0;
    v98 = v13;
    v95 = 0x800000001;
    v25 = *((_DWORD *)a3 + 4);
    if ((v25 & 0x20) != 0)
    {
      *(_DWORD *)a3 += 2;
      v26 = (WTF::StringImpl *)a3;
    }
    else
    {
      if ((v25 & 0x10) != 0)
      {
        *(_DWORD *)a3 += 2;
        v26 = (WTF::StringImpl *)a3;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v9 + 41912), (unint64_t)a3, v16, v17, v18, v19, v20, v21, &v105);
        v26 = (WTF::StringImpl *)v105;
      }
      v27 = *(_DWORD *)v26;
      *(_DWORD *)v26 += 2;
      if (v27)
      {
        *(_DWORD *)v26 = v27;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v26, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
      }
    }
    v28 = JSC::identifierToSafePublicJSValue((JSC *)v9, v26, v16, v17, v18, v19, v20, v21);
    v35 = (WTF::AtomStringImpl *)v28;
    v36 = v95;
    if ((_DWORD)v95 == HIDWORD(v95) || v96 != &v98 && v96)
    {
      v37 = (JSC::MarkedVectorBase *)v91;
      if (JSC::MarkedVectorBase::slowAppend((uint64_t)v91, v28, v29, v30, v31, v32, v33, v34) == 1)
        v94 = 1;
    }
    else
    {
      v96[v95] = v28;
      LODWORD(v95) = v36 + 1;
      v37 = (JSC::MarkedVectorBase *)v91;
    }
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v35, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    v105 = (uint64_t)v96;
    LODWORD(v106) = v95;
    v45 = JSC::call((uint64_t *)a2, HandlerTrap, v103, v14, (uint64_t)&v105, v32, v33, v34);
    v46 = v104;
    if (*((_DWORD *)v104 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v104, (uint64_t)v38, v39, v40, (uint64_t)v41, v42, v43, v44))
    {
      goto LABEL_23;
    }
    if (v45 == 10)
    {
      if ((*(_WORD *)((16 * *v13) | 0x12) & 0x4010) == 0)
        goto LABEL_23;
    }
    else if ((v45 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v45 + 5) <= 0x16u)
    {
      v82 = "result of 'getOwnPropertyDescriptor' call should either be an Object or undefined";
      v83 = a2;
      v84 = 82;
      goto LABEL_59;
    }
    memset(v92, 0, sizeof(v92));
    v93 = 14;
    *((_QWORD *)&v106 + 1) = 0xFFFFFFFF00000000;
    v108 = 0;
    v109 = 0;
    v107 = (uint64_t)v13;
    v110 = 0x20000;
    v111 = 0;
    LOBYTE(v112) = 0;
    v113 = 0;
    v114 = 0;
    v115 = 0;
    v47 = 0;
    if ((*(unsigned int (**)(_DWORD *, JSC::JSGlobalObject *, _BYTE *, uint64_t *))(16
                                                                                             * *(unsigned int *)(16 * (*v13 & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0x68))(v13, a2, a3, &v105))
    {
      v47 = JSC::PropertyDescriptor::setPropertySlot((uint64_t)v92, (uint64_t)a2, (WTF::StringImpl *)a3, (uint64_t)&v105, (uint64_t)v41, v42, v43, v44);
    }
    if (v113)
    {
      v48 = *(_DWORD *)(v112 + 4);
      if (!v48)
      {
        __break(0xC471u);
        JUMPOUT(0x198B858C4);
      }
      *(_DWORD *)(v112 + 4) = v48 - 1;
    }
    if (*((_DWORD *)v46 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v46, (uint64_t)v38, v39, v40, (uint64_t)v41, v42, v43, v44))
    {
      goto LABEL_23;
    }
    if (v45 != 10)
    {
      v52 = (*(uint64_t (**)(_DWORD *, JSC::JSGlobalObject *))(16
                                                                       * *(unsigned int *)(16 * (*v13 & 0xFFFFFFFE)
                                                                                         + 0x4C)
                                                                       + 0xA0))(v13, a2);
      if (*((_DWORD *)v46 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v46, v49, v50, v51, (uint64_t)v41, v42, v43, v44))
      {
        goto LABEL_23;
      }
      v105 = 0;
      v106 = 0uLL;
      v107 = 14;
      v116[0] = 0;
      JSC::toPropertyDescriptor(a2, v45, (uint64_t)&v105, (const JSC::PropertyTable *)v116, (uint64_t)v41, v42, v43, v44, v53);
      if (*((_DWORD *)v46 + 20))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v46, v54, v55, v56, v57, v58, v59, v60))
          goto LABEL_23;
      }
      if (!(_QWORD)v106)
      {
        if (!*((_QWORD *)&v106 + 1))
        {
          if (!v105)
            v105 = 10;
          if ((v107 & 0x100000000) == 0)
            JSC::PropertyDescriptor::setWritable((uint64_t)&v105, 0);
          goto LABEL_45;
        }
        JSC::PropertyDescriptor::setGetter((uint64_t)&v105, 10);
      }
      if (!*((_QWORD *)&v106 + 1))
        JSC::PropertyDescriptor::setSetter((uint64_t)&v105, 10);
LABEL_45:
      v62 = BYTE4(v107);
      if ((v107 & 0x200000000) == 0)
      {
        JSC::PropertyDescriptor::setEnumerable((uint64_t)&v105, 0);
        v62 = BYTE4(v107);
      }
      if ((v62 & 4) == 0)
        JSC::PropertyDescriptor::setConfigurable((uint64_t)&v105, 0);
      v63 = JSC::validateAndApplyPropertyDescriptor((JSC::VM **)a2, 0, (unint64_t)a3, v52, (uint64_t)&v105, v47, (uint64_t)v92, 0, v61);
      if (*((_DWORD *)v46 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v46, (uint64_t)v38, v39, v40, (uint64_t)v41, v42, v43, v44))
      {
        goto LABEL_23;
      }
      if (v63)
      {
        v64 = v107;
        if ((v107 & 8) == 0)
          goto LABEL_52;
        if (!(_DWORD)v47 || (v93 & 8) == 0)
        {
          v88 = "Result from 'getOwnPropertyDescriptor' can't be non-configurable when the 'target' doesn't have it as an"
                " own property or if it is a configurable own property on 'target'";
          v89 = a2;
          v90 = 170;
          goto LABEL_90;
        }
        v37 = (JSC::MarkedVectorBase *)v91;
        if ((v93 & 2) != 0 || (v107 & 2) == 0 || (v107 & 0x100000000) == 0)
        {
LABEL_52:
          if (v106 == 0)
          {
            v65 = v105;
            if (!v105)
              v65 = 10;
            *(_QWORD *)a4 = v65;
            *(_DWORD *)(a4 + 16) = v64;
            *(_QWORD *)(a4 + 32) = a1;
            v23 = 1;
            *(_BYTE *)(a4 + 49) = 1;
            goto LABEL_24;
          }
          v85 = JSC::PropertyDescriptor::slowGetterSetter((JSC::PropertyDescriptor *)&v105, (JSC::GetterSetter **)a2, v39, v40, v41, v42, v43, v44);
          if (!*((_DWORD *)v46 + 20)
            || !JSC::VM::hasExceptionsAfterHandlingTraps(v46, (uint64_t)v38, v39, v40, (uint64_t)v41, v42, v43, v44))
          {
            v86 = v107;
            *(_QWORD *)a4 = v85;
            *(_DWORD *)(a4 + 16) = v86;
            *(_QWORD *)(a4 + 32) = a1;
            *(_BYTE *)(a4 + 49) = 2;
            v23 = 1;
            goto LABEL_24;
          }
LABEL_23:
          v23 = 0;
LABEL_24:
          JSC::MarkedVectorBase::~MarkedVectorBase(v37, v38, v39, v40, (uint64_t)v41, v42, v43, v44);
          return v23;
        }
        v82 = "Result from 'getOwnPropertyDescriptor' can't be non-configurable and non-writable when the target's property is writable";
        v83 = a2;
        v84 = 121;
      }
      else
      {
        v82 = "Result from 'getOwnPropertyDescriptor' fails the IsCompatiblePropertyDescriptor test";
        v83 = a2;
        v84 = 85;
      }
LABEL_59:
      JSC::throwTypeError((unint64_t)v83, &v104, (uint64_t)v82, v84);
      goto LABEL_23;
    }
    if ((_DWORD)v47)
    {
      if ((v93 & 8) != 0)
      {
        v88 = "When the result of 'getOwnPropertyDescriptor' is undefined the target must be configurable";
        v89 = a2;
        v90 = 91;
        goto LABEL_90;
      }
      v87 = (*(uint64_t (**)(_DWORD *, JSC::JSGlobalObject *))(16
                                                                       * *(unsigned int *)(16 * (*v13 & 0xFFFFFFFE)
                                                                                         + 0x4C)
                                                                       + 0xA0))(v13, a2);
      if (*((_DWORD *)v46 + 20))
      {
        if (((JSC::VM::hasExceptionsAfterHandlingTraps(v46, (uint64_t)v38, v39, v40, (uint64_t)v41, v42, v43, v44) | v87) & 1) != 0)
          goto LABEL_91;
        goto LABEL_85;
      }
      if ((v87 & 1) == 0)
      {
LABEL_85:
        v88 = "When 'getOwnPropertyDescriptor' returns undefined, the 'target' of a Proxy should be extensible";
        v89 = a2;
        v90 = 96;
LABEL_90:
        JSC::throwTypeError((unint64_t)v89, &v104, (uint64_t)v88, v90);
      }
    }
LABEL_91:
    v23 = 0;
    v37 = (JSC::MarkedVectorBase *)v91;
    goto LABEL_24;
  }
  return (*(uint64_t (**)(_DWORD *, JSC::JSGlobalObject *, _BYTE *, uint64_t))(16
                                                                                      * *(unsigned int *)(16 * (*v13 & 0xFFFFFFFE) + 0x4C)
                                                                                      + 0x68))(v13, a2, a3, a4);
}

unint64_t JSC::identifierToSafePublicJSValue(JSC *this, JSC::VM *a2, const JSC::Identifier *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t *v10;
  JSC::VM *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned __int8 *v16;
  unsigned int v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t SlowCase;
  unint64_t v22;
  JSC::VM *v23;
  JSC *v24;

  if (!a2)
    return *((_QWORD *)this + 5246);
  v8 = *((_DWORD *)a2 + 4);
  if ((v8 & 0x20) != 0 && (*((_BYTE *)a2 + 36) & 4) == 0)
    return JSC::Symbol::create(this, a2, a3, a4, a5, a6, a7, a8);
  v9 = *((_DWORD *)a2 + 1);
  if (v9 != 1)
  {
    if (v9)
      goto LABEL_5;
    return *((_QWORD *)this + 5246);
  }
  v16 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  if ((v8 & 4) != 0)
  {
    v17 = *v16;
    return *((_QWORD *)this + v17 + 5277);
  }
  v17 = *(unsigned __int16 *)v16;
  if (v17 <= 0xFF)
    return *((_QWORD *)this + v17 + 5277);
LABEL_5:
  v10 = (uint64_t *)((char *)this + 39696);
  *(_DWORD *)a2 += 2;
  v11 = a2;
  if ((v8 & 3) == 2)
  {
    v11 = a2;
    do
    {
      v11 = (JSC::VM *)*((_QWORD *)v11 + 3);
      v8 = *((_DWORD *)v11 + 4);
    }
    while ((v8 & 3) == 2);
  }
  if ((v8 & 8) != 0)
  {
    v12 = 0;
  }
  else
  {
    *((_DWORD *)v11 + 4) = v8 | 8;
    v12 = (unint64_t)*((unsigned int *)v11 + 1) << ((v8 & 4) == 0);
  }
  v13 = (char *)this + 192;
  v14 = *v10;
  if ((unint64_t)*v10 >= *((_QWORD *)this + 4963))
  {
    v14 = *((_QWORD *)this + 4964);
    if ((v14 & 1) != 0)
    {
      v19 = (char *)this + 39672;
      v23 = a2;
      v24 = this;
      v22 = v12;
      v20 = (char *)this + 192;
      JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, v12, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v19, v20, 16, 0, 0);
      v13 = v20;
      v12 = v22;
      a2 = v23;
      v14 = SlowCase;
      this = v24;
      goto LABEL_10;
    }
    v18 = *(_QWORD *)(v14 + 8) ^ *((_QWORD *)this + 4965);
    *((_QWORD *)this + 4963) = v14 + HIDWORD(v18);
    *((_QWORD *)this + 4964) = v14 + (int)v18;
  }
  *v10 = v14 + 16;
LABEL_10:
  *(_DWORD *)v14 = (unint64_t)v10[227] >> 4;
  *(_DWORD *)(v14 + 4) = 17302016;
  *(_QWORD *)(v14 + 8) = a2;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if (v12 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v13, 0, v14, v12, a5, a6, a7, a8);
  return v14;
}

BOOL JSC::ProxyObject::performHasProperty(JSC::JSCell *a1, JSC::JSGlobalObject *a2, WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  const WTF::StringImpl *v12;
  const JSC::PropertyTable *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t HandlerTrap;
  WTF::StringImpl *v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::AtomStringImpl *v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  JSC::VM *v39;
  _BOOL4 v40;
  uint64_t v41;
  int v43;
  BOOL v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  int v63;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  uint64_t v65;
  WTF::StringImpl *v66;
  int v67;
  char v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  _DWORD *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  unsigned __int8 v77[24];
  uint64_t *v78[4];
  _DWORD *v79;
  JSC::VM *v80;
  uint64_t *v81;
  WTF::StringImpl *v82;

  v81 = (uint64_t *)a2;
  v82 = a3;
  v8 = *((_QWORD *)a2 + 7);
  v80 = (JSC::VM *)v8;
  if ((unint64_t)&v65 < *(_QWORD *)(v8 + 8))
  {
    JSC::throwStackOverflowError((unint64_t)a2, &v80, (uint64_t)a3, a4, a5, a6, a7, a8);
    return 0;
  }
  v9 = (_DWORD *)*((_QWORD *)a1 + 2);
  v78[3] = (uint64_t *)a4;
  v79 = v9;
  *(_QWORD *)a4 = 10;
  *(_DWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 32) = a1;
  *(_BYTE *)(a4 + 49) = 1;
  v78[0] = (uint64_t *)&v79;
  v78[1] = (uint64_t *)&v81;
  v78[2] = (uint64_t *)&v82;
  if (a3 && (*((_BYTE *)a3 + 16) & 0x20) != 0 && (*((_BYTE *)a3 + 36) & 4) != 0)
    return 0;
  v10 = *((_QWORD *)a1 + 3);
  if (v10 == 2)
  {
    JSC::throwTypeError((unint64_t)a2, &v80, (uint64_t)"Proxy has already been revoked. No more operations are allowed to be performed on it", 85);
    return 0;
  }
  v77[0] = 0;
  HandlerTrap = JSC::ProxyObject::getHandlerTrap(a1, (JSC::VM **)a2, v10, (uint64_t)v77, *(_QWORD *)(v8 + 41952) + 1440, 0, a7, a8);
  if (*(_DWORD *)(v8 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8, (uint64_t)v11, (uint64_t)v12, (uint64_t)v13, v14, v15, v16, v17))
  {
    return 0;
  }
  if (!HandlerTrap)
    return JSC::ProxyObject::performHasProperty(JSC::JSGlobalObject *,JSC::PropertyName,JSC::PropertySlot &)::$_0::operator()(v78, (uint64_t)v11, (uint64_t)v12, v13, v14, v15, v16, v17);
  v68 = 0;
  v70 = (WTF::StringImpl *)&v72;
  v71 = 0;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0;
  v72 = v79;
  v69 = 0x800000001;
  v19 = v82;
  v20 = *((_DWORD *)v82 + 4);
  if ((v20 & 0x20) != 0)
  {
    v21 = *(_DWORD *)v82 + 2;
  }
  else
  {
    if ((v20 & 0x10) != 0)
    {
      *(_DWORD *)v82 += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v8 + 41912), (unint64_t)v82, v12, (uint64_t)v13, v14, v15, v16, v17, &v66);
      v19 = v66;
    }
    v21 = *(_DWORD *)v19;
    *(_DWORD *)v19 += 2;
    if (!v21)
    {
      WTF::StringImpl::~StringImpl(v19, v11, (uint64_t)v12, (uint64_t)v13, v14, v15, v16, v17);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
      goto LABEL_12;
    }
  }
  *(_DWORD *)v19 = v21;
LABEL_12:
  v22 = JSC::identifierToSafePublicJSValue((JSC *)v8, v19, v12, (uint64_t)v13, v14, v15, v16, v17);
  v29 = (WTF::AtomStringImpl *)v22;
  v30 = v69;
  if ((_DWORD)v69 == HIDWORD(v69) || v70 != (WTF::StringImpl *)&v72 && v70)
  {
    if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v69, v22, v23, v24, v25, v26, v27, v28) == 1)
      v68 = 1;
  }
  else
  {
    *((_QWORD *)v70 + v69) = v22;
    LODWORD(v69) = v30 + 1;
  }
  if (*(_DWORD *)v19 == 2)
  {
    WTF::StringImpl::~StringImpl(v19, v29, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
  }
  else
  {
    *(_DWORD *)v19 -= 2;
  }
  v66 = v70;
  v67 = v69;
  v38 = JSC::call(v81, HandlerTrap, v77, v10, (uint64_t)&v66, v26, v27, v28);
  v39 = v80;
  if (*((_DWORD *)v80 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v80, (uint64_t)v31, v32, v33, v34, v35, v36, v37))
  {
    goto LABEL_65;
  }
  if (v38 >= 0xFFFE000000000000)
  {
    v44 = (_DWORD)v38 == 0;
    goto LABEL_34;
  }
  if (v38 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v38 & 0xFFFE000000000002) != 0)
    {
      v40 = v38 == 7;
      goto LABEL_23;
    }
    v43 = *(unsigned __int8 *)(v38 + 5);
    if (v43 == 2)
    {
      v61 = *(_QWORD *)(v38 + 8);
      if ((v61 & 1) != 0)
        v62 = (int *)(v38 + 16);
      else
        v62 = (int *)(v61 + 4);
      v63 = *v62;
    }
    else
    {
      if (v43 != 3)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v40 = 1;
          goto LABEL_23;
        }
        v44 = *(_QWORD *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x28) == (_QWORD)v81;
        goto LABEL_34;
      }
      v63 = *(_DWORD *)(v38 + 8);
    }
    v44 = v63 == 0;
LABEL_34:
    v40 = !v44;
    goto LABEL_23;
  }
  v40 = COERCE_DOUBLE(v38 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v38 - 0x2000000000000) < 0.0;
LABEL_23:
  if (*((_DWORD *)v39 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v39, (uint64_t)v31, v32, v33, v34, v35, v36, v37);
    if (hasExceptionsAfterHandlingTraps || v40)
    {
      v41 = !hasExceptionsAfterHandlingTraps;
      goto LABEL_26;
    }
LABEL_62:
    v31 = v79;
    if ((*(_WORD *)((16 * *v79) | 0x12) & 0x4010) != 0)
    {
      JSC::ProxyObject::validateNegativeHasTrapResult((unint64_t)v81, v79, v82);
      if (*((_DWORD *)v39 + 20))
        JSC::VM::hasExceptionsAfterHandlingTraps(v39, (uint64_t)v31, v32, v33, v34, v35, v36, v37);
    }
LABEL_65:
    v41 = 0;
    goto LABEL_26;
  }
  if (!v40)
    goto LABEL_62;
  v41 = 1;
LABEL_26:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v69, v31, v32, v33, v34, v35, v36, v37);
  return v41;
}

BOOL JSC::ProxyObject::performHasProperty(JSC::JSGlobalObject *,JSC::PropertyName,JSC::PropertySlot &)::$_0::operator()(uint64_t **a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  _WORD *v38;
  uint64_t v39;
  unsigned int v40;
  _BOOL8 result;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned __int16 *v47;
  uint64_t i;
  unsigned int v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  BOOL v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  int v72;
  unsigned int *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  _BYTE *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  BOOL v86;
  unsigned __int16 *v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  JSC::VMTraps *v92;
  char *v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  JSC::VM *v98;
  JSC::VMTraps *v99;
  char *v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  unint64_t v112;
  int v113;
  unsigned int v114;
  int v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  JSC::VM *v121;
  JSC::VMTraps *v122;
  char *v123;
  uint64_t v124;
  _BYTE *v125;
  char OwnStaticPropertySlot;
  _BYTE *v127;
  char *v128;
  uint64_t v129;
  char v130;
  char v131;
  int v132;
  int v133;
  unsigned int v134;
  uint64_t v135;
  unsigned __int8 *v136;
  int v137;
  unint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  size_t v144;
  char *v145;
  char *v146;
  int v147;
  uint64_t v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;
  uint64_t v151;
  int v152;
  int v153;
  unsigned __int8 *v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  uint64_t v159;
  char v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned __int8 *v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  int v183;
  int v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  char v188;
  int v189;
  unint64_t v190;
  unint64_t v191;
  char v192;
  uint64_t v194;
  unsigned __int8 *v195;
  unsigned int v196;
  unint64_t v197;
  JSC::VMTraps *v198;
  JSC::VMTraps *v199;
  _BYTE *v200;
  char *v201;
  JSC::Structure *v202;
  uint64_t v203;
  uint64_t v204;
  _BYTE __dst[8];
  char v206;
  char __s[3];
  _BYTE v208[39];

  *(_QWORD *)&v208[23] = *MEMORY[0x1E0C80C00];
  v8 = **a1;
  v9 = *a1[1];
  v10 = (uint64_t)a1[3];
  v11 = *a1[2];
  v12 = (_BYTE *)(v8 + 6);
  v13 = v11 >> 4;
  v14 = v8;
  if ((*(_BYTE *)(v8 + 6) & 8) == 0)
  {
    v15 = *(JSC::VM **)(v9 + 56);
    v16 = **a1;
    do
    {
      v17 = *(_DWORD *)v16 & 0xFFFFFFFE;
      v18 = 16 * v17;
      if (!(_DWORD)v13 || (v13 & ~*(_DWORD *)(16 * v17 + 0x20)) != 0)
        goto LABEL_30;
      v19 = *(_QWORD *)(16 * v17 + 0x58);
      if (!v19)
      {
        v20 = *(_QWORD *)(16 * v17 + 0x40);
        if (!v20 || *(_BYTE *)(v20 + 5) != 1 && *(_DWORD *)(v20 + 80) < 2u)
          goto LABEL_30;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v18, v15, 1, a4, a5, a6, a7, a8);
        if (!v19)
          goto LABEL_30;
      }
      if (!*(_DWORD *)(v19 + 24))
        goto LABEL_30;
      v21 = *(_QWORD *)(v19 + 16);
      v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
      v23 = *(unsigned int *)(v19 + 8);
      v24 = *(_DWORD *)(v11 + 16);
      if ((v21 & 1) != 0)
      {
        if ((v24 & 0x20) != 0)
          v24 = *(_DWORD *)(v11 + 32);
        v25 = *(_DWORD *)(v19 + 12);
        v26 = (v24 >> 8) & *(_QWORD *)&v25;
        v27 = *(unsigned __int8 *)(v22 + v26);
        if (!*(_BYTE *)(v22 + v26))
          goto LABEL_30;
        v28 = v22 + v23;
        v29 = 1;
        while (1)
        {
          v30 = *(_QWORD *)(v28 + 8 * (v27 - 1));
          if (v11 == (v30 & 0xFFFFFFFFFFFFLL))
            break;
          v26 = ((_DWORD)v26 + v29) & v25;
          v27 = *(unsigned __int8 *)(v22 + v26);
          ++v29;
          if (!*(_BYTE *)(v22 + v26))
            goto LABEL_30;
        }
        a6 = (v30 >> 16) & 0xFF00000000 | HIBYTE(v30);
      }
      else
      {
        if ((v24 & 0x20) != 0)
          v24 = *(_DWORD *)(v11 + 32);
        v31 = *(_DWORD *)(v19 + 12);
        v32 = v31 & (v24 >> 8);
        v33 = *(_DWORD *)(v22 + 4 * v32);
        if (!v33)
          goto LABEL_30;
        v34 = v22 + 4 * v23;
        v35 = 1;
        while (1)
        {
          v36 = (v33 - 1);
          if (v11 == *(_QWORD *)(v34 + 16 * v36))
            break;
          v32 = (v32 + v35) & v31;
          v33 = *(_DWORD *)(v22 + 4 * v32);
          ++v35;
          if (!v33)
            goto LABEL_30;
        }
        a6 = *(unsigned int *)(v34 + 16 * v36 + 8) | ((unint64_t)*(unsigned __int8 *)(v34 + 16 * v36 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        v42 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v43 = v16 + 16;
          v44 = a6 << 32;
        }
        else
        {
          v43 = *(_QWORD *)(v16 + 8) - 8;
          v44 = 0x3F00000000 - (a6 << 32);
        }
        v45 = *(_QWORD *)(v43 + (v44 >> 29));
        if ((v45 & 0xFFFE000000000002) == 0)
        {
          v46 = *(unsigned __int8 *)(v45 + 5);
          if (v46 != 5)
          {
            if (v46 != 6)
              goto LABEL_51;
            v75 = *(_DWORD *)(v18 + 16) & 3;
            v77 = *(_QWORD *)(v45 + 8);
            v76 = *(_QWORD *)(v45 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v45 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v79 = *(_QWORD *)(v45 + 24);
              v78 = *(_QWORD *)(v45 + 32);
              *(_QWORD *)v10 = v77;
              *(_QWORD *)(v10 + 8) = v76;
              *(_DWORD *)(v10 + 16) = HIDWORD(a6);
              *(_QWORD *)(v10 + 32) = v16;
              goto LABEL_112;
            }
            *(_QWORD *)v10 = v77;
            *(_QWORD *)(v10 + 8) = v76;
            *(_DWORD *)(v10 + 16) = HIDWORD(a6);
            *(_QWORD *)(v10 + 32) = v16;
LABEL_270:
            result = 1;
            *(_BYTE *)(v10 + 49) = 3;
            if (v75 != 2)
              *(_BYTE *)(v10 + 48) = 1;
            return result;
          }
          v73 = (unsigned int *)v16;
          v74 = (uint64_t)v15;
LABEL_107:
          JSC::JSObject::fillGetterPropertySlot(v73, v74, v10, v45, v42, a6);
          return 1;
        }
LABEL_51:
        *(_QWORD *)v10 = v45;
        *(_QWORD *)(v10 + 32) = v16;
LABEL_52:
        *(_DWORD *)(v10 + 16) = v42;
        *(_DWORD *)(v10 + 20) = a6;
        result = 1;
        *(_WORD *)(v10 + 48) = 257;
        return result;
      }
LABEL_30:
      if ((*v12 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v16, v15, v11, v10) & 1) != 0)
        return 1;
      v14 = *(_QWORD *)(v18 + 48);
      if (!v14)
        v14 = *(_QWORD *)(v16 + 16);
      if ((v14 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v14 + 5) < 0x17u)
      {
        if (!v11)
          return 0;
        v37 = *(_DWORD *)(v11 + 16);
        if ((v37 & 0x20) != 0)
          return 0;
        v38 = *(_WORD **)(v11 + 8);
        v39 = *(unsigned int *)(v11 + 4);
        if ((v37 & 4) == 0)
        {
          if ((_DWORD)v39)
          {
            v40 = (unsigned __int16)*v38 - 48;
            if (v40 <= 9 && (*v38 != 48 || v39 <= 1))
            {
              v47 = v38 + 1;
              for (i = v39 - 1; i; --i)
              {
                if (v40 > 0x19999999)
                  return 0;
                v49 = *v47 - 48;
                if (v49 > 9)
                  return 0;
                result = 0;
                v50 = __CFADD__(v49, 10 * v40);
                v40 = v49 + 10 * v40;
                ++v47;
                if (v50)
                  return result;
              }
              if (v40 != -1)
                goto LABEL_62;
            }
          }
          return 0;
        }
        if (!(_DWORD)v39)
          return 0;
        v40 = *(unsigned __int8 *)v38 - 48;
        if (v40 > 9 || v39 >= 2 && *(_BYTE *)v38 == 48)
          return 0;
        v167 = v39 - 1;
        v168 = (unsigned __int8 *)v38 + 1;
        while (v167)
        {
          if (v40 > 0x19999999)
            return 0;
          v169 = *v168 - 48;
          if (v169 > 9)
            return 0;
          result = 0;
          v50 = __CFADD__(v169, 10 * v40);
          v40 = v169 + 10 * v40;
          --v167;
          ++v168;
          if (v50)
            return result;
        }
        if (v40 == -1)
          return 0;
LABEL_62:
        v51 = v40;
        v52 = *(_QWORD *)(v9 + 56);
        while (2)
        {
          v53 = 16 * (*(_DWORD *)v8 & 0xFFFFFFFE);
          v54 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(16
                                                                                       * *(unsigned int *)(v53 + 0x4C)
                                                                                       + 0x70))(v8, v9, v51, v10);
          v61 = v54;
          if (*(_DWORD *)(v52 + 80))
          {
            v65 = *(_DWORD *)(v52 + 80);
            if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v52 + 64), 7u, v55, v56, v57, v58, v59, v60);
            v66 = *(_QWORD *)(v52 + 16);
            v67 = v66 == 0;
            if (v66)
              v68 = 1;
            else
              v68 = v61;
            if ((v68 & 1) != 0)
              return v67;
          }
          else if ((v54 & 1) != 0)
          {
            return 1;
          }
          v62 = *(unsigned __int8 *)(v10 + 50);
          if (v62 == 3)
          {
            if (*(_BYTE *)(v10 + 52))
              return 0;
            v63 = *(unsigned __int8 *)(v8 + 5);
            if (v63 != 61)
              goto LABEL_67;
          }
          else
          {
            v63 = *(unsigned __int8 *)(v8 + 5);
            if (v63 == 61)
            {
              if (v62 == 1)
                return 0;
            }
            else
            {
LABEL_67:
              if ((v63 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v8 + 40) & 7u) > 2)
                {
                  __dst[0] = 0;
                  v206 = 0;
                  v70 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v8, (uint64_t)__dst, v55, v56, v57, v58, v59, v60);
                  v69 = v71 ? v70 : 0;
                }
                else
                {
                  v69 = *(_QWORD *)(v8 + 24);
                }
                if (v69 <= v51)
                  return 0;
              }
            }
          }
          if ((*(_WORD *)(v53 + 12) & 0x800) == 0 || *(_BYTE *)(v10 + 50) == 3)
          {
            v64 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x30);
            if (!v64)
              v64 = *(_QWORD *)(v8 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v64 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE)
                                                                                  + 0x4C)
                                                                + 0xB0))(v8, v9);
            }
            else
            {
              v64 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x30);
              if (!v64)
                v64 = *(_QWORD *)(v8 + 16);
            }
            if (*(_DWORD *)(v52 + 80))
            {
              v72 = *(_DWORD *)(v52 + 80);
              if ((v72 & 0x27) != 0 && (v72 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v52 + 64), 7u, v55, v56, v57, v58, v59, v60);
              if (*(_QWORD *)(v52 + 16))
                return 0;
            }
          }
          if ((v64 & 0xFFFE000000000002) != 0)
            return 0;
          result = 0;
          v8 = v64;
          if (*(unsigned __int8 *)(v64 + 5) <= 0x16u)
            return result;
          continue;
        }
      }
      v12 = (_BYTE *)(v14 + 6);
      v16 = v14;
    }
    while ((*(_BYTE *)(v14 + 6) & 8) == 0);
  }
  if (!v11)
    goto LABEL_139;
  v80 = *(_DWORD *)(v11 + 16);
  if ((v80 & 0x20) != 0)
    goto LABEL_139;
  v81 = *(_BYTE **)(v11 + 8);
  v82 = *(unsigned int *)(v11 + 4);
  if ((v80 & 4) != 0)
  {
    if ((_DWORD)v82)
    {
      v170 = *v81 - 48;
      if (v170 <= 9 && (v82 < 2 || *v81 != 48))
      {
        v194 = v82 - 1;
        v195 = v81 + 1;
        while (v194)
        {
          if (v170 > 0x19999999)
            goto LABEL_294;
          v196 = *v195 - 48;
          if (v196 > 9)
            goto LABEL_294;
          v90 = 0;
          LOBYTE(v82) = 0;
          v171 = 0;
          v50 = __CFADD__(v196, 10 * v170);
          v170 = v196 + 10 * v170;
          --v194;
          ++v195;
          if (v50)
            goto LABEL_296;
        }
        if (v170 == -1)
          v90 = 0;
        else
          v90 = v170 & 0xFFFFFF00;
        if (v170 == -1)
          LOBYTE(v82) = 0;
        else
          LOBYTE(v82) = v170;
        if (v170 == -1)
          v171 = 0;
        else
          v171 = 0x100000000;
LABEL_296:
        v85 = v82;
        if ((v171 & 0x100000000) == 0)
          goto LABEL_139;
        goto LABEL_297;
      }
LABEL_294:
      v90 = 0;
      LOBYTE(v82) = 0;
    }
    else
    {
      v90 = 0;
    }
    v171 = 0;
    goto LABEL_296;
  }
  if (!(_DWORD)v82)
  {
    v84 = 0;
    goto LABEL_121;
  }
  v83 = *(unsigned __int16 *)v81 - 48;
  if (v83 > 9 || (*(_WORD *)v81 == 48 ? (v86 = v82 > 1) : (v86 = 0), v86))
  {
LABEL_120:
    v84 = 0;
    LOBYTE(v82) = 0;
LABEL_121:
    v85 = 0;
    goto LABEL_138;
  }
  v87 = (unsigned __int16 *)(v81 + 2);
  v88 = v82 - 1;
  while (v88)
  {
    if (v83 > 0x19999999)
      goto LABEL_120;
    v89 = *v87 - 48;
    if (v89 > 9)
      goto LABEL_120;
    v84 = 0;
    LOBYTE(v82) = 0;
    v85 = 0;
    v50 = __CFADD__(v89, 10 * v83);
    v83 = v89 + 10 * v83;
    ++v87;
    --v88;
    if (v50)
      goto LABEL_138;
  }
  v85 = v83 & 0xFFFFFF00;
  v84 = 0x100000000;
  if (v83 == -1)
  {
    v84 = 0;
    LOBYTE(v82) = 0;
  }
  else
  {
    LOBYTE(v82) = v83;
  }
  if (v83 == -1)
    v85 = 0;
LABEL_138:
  v90 = v82;
  if ((v84 & 0x100000000) != 0)
  {
LABEL_297:
    v172 = v85 | v90;
    v173 = *(_QWORD *)(v9 + 56);
    while (1)
    {
      v174 = 16 * (*(_DWORD *)v8 & 0xFFFFFFFE);
      v175 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(16
                                                                                    * *(unsigned int *)(v174 + 0x4C)
                                                                                    + 0x70))(v8, v9, v172, v10);
      v182 = v175;
      if (*(_DWORD *)(v173 + 80))
      {
        v186 = *(_DWORD *)(v173 + 80);
        if ((v186 & 0x27) != 0 && (v186 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v173 + 64), 7u, v176, v177, v178, v179, v180, v181);
        v187 = *(_QWORD *)(v173 + 16);
        v67 = v187 == 0;
        if (v187)
          v188 = 1;
        else
          v188 = v182;
        if ((v188 & 1) != 0)
          return v67;
      }
      else if ((v175 & 1) != 0)
      {
        return 1;
      }
      v183 = *(unsigned __int8 *)(v10 + 50);
      if (v183 == 3)
      {
        if (*(_BYTE *)(v10 + 52))
          return 0;
        v184 = *(unsigned __int8 *)(v8 + 5);
        if (v184 == 61)
          goto LABEL_303;
      }
      else
      {
        v184 = *(unsigned __int8 *)(v8 + 5);
        if (v184 == 61)
        {
          if (v183 == 1)
            return 0;
          goto LABEL_303;
        }
      }
      if ((v184 - 39) <= 0xA)
      {
        if ((*(_BYTE *)(v8 + 40) & 7u) > 2)
        {
          __dst[0] = 0;
          v206 = 0;
          v191 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v8, (uint64_t)__dst, v176, v177, v178, v179, v180, v181);
          v190 = v192 ? v191 : 0;
        }
        else
        {
          v190 = *(_QWORD *)(v8 + 24);
        }
        if (v190 <= v172)
          return 0;
      }
LABEL_303:
      if ((*(_WORD *)(v174 + 12) & 0x800) == 0 || *(_BYTE *)(v10 + 50) == 3)
      {
        v185 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x30);
        if (!v185)
          v185 = *(_QWORD *)(v8 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v185 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE)
                                                                               + 0x4C)
                                                             + 0xB0))(v8, v9);
        }
        else
        {
          v185 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x30);
          if (!v185)
            v185 = *(_QWORD *)(v8 + 16);
        }
        if (*(_DWORD *)(v173 + 80))
        {
          v189 = *(_DWORD *)(v173 + 80);
          if ((v189 & 0x27) != 0 && (v189 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v173 + 64), 7u, v176, v177, v178, v179, v180, v181);
          if (*(_QWORD *)(v173 + 16))
            return 0;
        }
      }
      if ((v185 & 0xFFFE000000000002) != 0)
        return 0;
      result = 0;
      v8 = v185;
      if (*(unsigned __int8 *)(v185 + 5) <= 0x16u)
        return result;
    }
  }
LABEL_139:
  v91 = *(_QWORD *)(v9 + 56);
  v92 = (JSC::VMTraps *)(v91 + 64);
  v93 = &__s[1];
  v94 = v208;
  while (1)
  {
    v95 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v14 + 6) & 8) == 0)
      break;
    v200 = v94;
    v201 = v93;
    v199 = v92;
    v204 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
    v130 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(16
                                                                                  * *(unsigned int *)(v204 + 0x4C)
                                                                                  + 0x68))(v14, v9, v11, v10);
    v131 = v130;
    if (*(_DWORD *)(v91 + 80))
    {
      v158 = *(_DWORD *)(v91 + 80);
      if ((v158 & 0x27) != 0 && (v158 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v199, 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v159 = *(_QWORD *)(v91 + 16);
      v67 = v159 == 0;
      if (v159)
        v160 = 1;
      else
        v160 = v131;
      if ((v160 & 1) != 0)
        return v67;
    }
    else if ((v130 & 1) != 0)
    {
      return 1;
    }
    v132 = *(unsigned __int8 *)(v10 + 50);
    if (v132 == 3)
    {
      if (*(_BYTE *)(v10 + 52))
        return 0;
      v133 = *(unsigned __int8 *)(v14 + 5);
      if (v133 == 61)
        goto LABEL_239;
    }
    else
    {
      v133 = *(unsigned __int8 *)(v14 + 5);
      if (v133 == 61)
      {
        v92 = v199;
        v94 = v200;
        v93 = v201;
        v95 = v204;
        if (v132 == 1)
          return 0;
        goto LABEL_169;
      }
    }
    if (!v11)
      goto LABEL_239;
    if ((v133 - 50) < 0xFFFFFFF5)
      goto LABEL_239;
    v134 = *(_DWORD *)(v11 + 16);
    if ((v134 & 0x20) != 0)
      goto LABEL_239;
    v135 = *(unsigned int *)(v11 + 4);
    if (!(_DWORD)v135)
      goto LABEL_239;
    v136 = *(unsigned __int8 **)(v11 + 8);
    if ((v134 & 4) != 0)
    {
      v137 = *v136;
      if ((_DWORD)v135 == 1)
      {
LABEL_194:
        v92 = v199;
        v94 = v200;
        v93 = v201;
        v95 = v204;
        if ((v137 - 48) < 0xA)
          return 0;
        goto LABEL_169;
      }
      if (v137 == 45)
      {
        v137 = v136[1];
        goto LABEL_198;
      }
      if ((v137 - 48) < 0xA)
        goto LABEL_209;
      if ((_DWORD)v135 == 8)
        goto LABEL_208;
    }
    else
    {
      v137 = *(unsigned __int16 *)v136;
      if ((_DWORD)v135 == 1)
        goto LABEL_194;
      if (v137 == 45)
      {
        v137 = *((unsigned __int16 *)v136 + 1);
LABEL_198:
        if ((v137 - 48) < 0xA)
        {
          if ((_DWORD)v135 == 2)
            return 0;
          goto LABEL_209;
        }
        if ((_DWORD)v135 != 9)
          goto LABEL_239;
LABEL_208:
        if (v137 != 73)
          goto LABEL_239;
        goto LABEL_209;
      }
      if ((v137 - 48) < 0xA || (_DWORD)v135 == 8 && v137 == 73)
        goto LABEL_209;
    }
    if ((_DWORD)v135 != 3 || v137 != 78)
      goto LABEL_239;
LABEL_209:
    v197 = v197 & 0xFFFFFF0000000000 | v135 | ((unint64_t)((v134 >> 2) & 1) << 32);
    JSC::jsToNumber(v136, v197);
    v139 = (v138 >> 52) & 0x7FF;
    if ((_DWORD)v139 == 2047)
    {
      if ((v138 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v140 = v200;
      }
      else
      {
        if ((v138 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v146 = v201;
        }
        else
        {
          v146 = __s;
        }
        *(_QWORD *)v146 = 0x7974696E69666E49;
        v140 = v146 + 8;
      }
      goto LABEL_223;
    }
    v141 = v138 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v138 & 0x8000000000000000) != 0 && v141)
    {
      __s[0] = 45;
      v142 = v201;
    }
    else
    {
      if (!v141)
      {
        __s[0] = 48;
        v140 = v201;
        goto LABEL_223;
      }
      v142 = __s;
    }
    v143 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v138 & 0x800FFFFFFFFFFFFFLL, v139);
    v140 = WTF::dragonbox::detail::to_shortest(v143, v144, (uint64_t)v142, v145);
LABEL_223:
    *v140 = 0;
    v147 = strlen(__s);
    memcpy(__dst, __s, v147);
    __dst[v147] = 0;
    v148 = *(unsigned int *)(v11 + 4);
    v149 = *(unsigned __int8 **)(v11 + 8);
    if ((*(_BYTE *)(v11 + 16) & 4) != 0)
    {
      if ((_DWORD)v148)
      {
        v154 = __dst;
        v155 = *(unsigned int *)(v11 + 4);
        do
        {
          v157 = *v154++;
          v156 = v157;
          if (!v157 || *v149 != v156)
            goto LABEL_239;
          ++v149;
        }
        while (--v155);
      }
    }
    else if ((_DWORD)v148)
    {
      v150 = __dst;
      v151 = *(unsigned int *)(v11 + 4);
      while (1)
      {
        v153 = *v150++;
        v152 = v153;
        if (!v153 || *(unsigned __int16 *)v149 != v152)
          break;
        v149 += 2;
        if (!--v151)
          goto LABEL_235;
      }
LABEL_239:
      v92 = v199;
      v94 = v200;
      v93 = v201;
      v95 = v204;
      goto LABEL_169;
    }
LABEL_235:
    v92 = v199;
    v94 = v200;
    v93 = v201;
    v95 = v204;
    if (!__dst[v148])
      return 0;
LABEL_169:
    if ((*(_WORD *)(v95 + 12) & 0x800) != 0)
    {
      v119 = *(_DWORD *)v14;
      if (*(_BYTE *)(v10 + 50) != 3)
      {
        v127 = v94;
        v128 = v93;
        v198 = v92;
        v129 = 16 * (v119 & 0xFFFFFFFE);
        if ((*(_WORD *)(v129 + 12) & 0x800) != 0)
        {
          v120 = (*(uint64_t (**)(uint64_t, uint64_t))(16 * *(unsigned int *)(v129 + 76) + 0xB0))(v14, v9);
        }
        else
        {
          v120 = *(_QWORD *)(v129 + 48);
          if (!v120)
            v120 = *(_QWORD *)(v14 + 16);
        }
        if (*(_DWORD *)(v91 + 80))
        {
          v161 = *(_DWORD *)(v91 + 80);
          if ((v161 & 0x27) != 0 && (v161 & 0x20) == 0)
            JSC::VMTraps::handleTraps(v198, 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
          v92 = v198;
          v93 = v128;
          v94 = v127;
          if (*(_QWORD *)(v91 + 16))
            return 0;
        }
        else
        {
          v92 = v198;
          v93 = v128;
          v94 = v127;
        }
        goto LABEL_173;
      }
    }
    else
    {
      v119 = *(_DWORD *)v14;
    }
    v120 = *(_QWORD *)(16 * (v119 & 0xFFFFFFFE) + 0x30);
    if (!v120)
      v120 = *(_QWORD *)(v14 + 16);
LABEL_173:
    if ((v120 & 0xFFFE000000000002) != 0)
      return 0;
    result = 0;
    v14 = v120;
    if (*(unsigned __int8 *)(v120 + 5) <= 0x16u)
      return result;
  }
  if (!(_DWORD)v13 || (v13 & ~*(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_168;
  v96 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x58);
  if (!v96)
  {
    v97 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x40);
    if (!v97 || *(_BYTE *)(v97 + 5) != 1 && *(_DWORD *)(v97 + 80) < 2u)
      goto LABEL_168;
    v202 = (JSC::Structure *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE));
    v98 = (JSC::VM *)v91;
    v99 = v92;
    v100 = v93;
    v101 = v91;
    v102 = v94;
    JSC::Structure::materializePropertyTable(v202, v98, 1, a4, a5, a6, a7, a8);
    v95 = (uint64_t)v202;
    v94 = v102;
    v91 = v101;
    v93 = v100;
    v92 = v99;
    if (!v96)
      goto LABEL_168;
  }
  if (!*(_DWORD *)(v96 + 24))
    goto LABEL_168;
  v103 = *(_QWORD *)(v96 + 16);
  v104 = v103 & 0xFFFFFFFFFFFFFFFELL;
  v105 = *(unsigned int *)(v96 + 8);
  v106 = *(_DWORD *)(v11 + 16);
  if ((v103 & 1) != 0)
  {
    if ((v106 & 0x20) != 0)
      v106 = *(_DWORD *)(v11 + 32);
    v107 = *(_DWORD *)(v96 + 12);
    v108 = (v106 >> 8) & *(_QWORD *)&v107;
    v109 = *(unsigned __int8 *)(v104 + v108);
    if (*(_BYTE *)(v104 + v108))
    {
      v110 = v104 + v105;
      v111 = 1;
      while (1)
      {
        v112 = *(_QWORD *)(v110 + 8 * (v109 - 1));
        if (v11 == (v112 & 0xFFFFFFFFFFFFLL))
          break;
        v108 = ((_DWORD)v108 + v111) & v107;
        v109 = *(unsigned __int8 *)(v104 + v108);
        ++v111;
        if (!*(_BYTE *)(v104 + v108))
          goto LABEL_168;
      }
      a6 = (v112 >> 16) & 0xFF00000000 | HIBYTE(v112);
      goto LABEL_165;
    }
    goto LABEL_168;
  }
  if ((v106 & 0x20) != 0)
    v106 = *(_DWORD *)(v11 + 32);
  v113 = *(_DWORD *)(v96 + 12);
  v114 = v113 & (v106 >> 8);
  v115 = *(_DWORD *)(v104 + 4 * v114);
  if (!v115)
    goto LABEL_168;
  v116 = v104 + 4 * v105;
  v117 = 1;
  while (1)
  {
    v118 = (v115 - 1);
    if (v11 == *(_QWORD *)(v116 + 16 * v118))
      break;
    v114 = (v114 + v117) & v113;
    v115 = *(_DWORD *)(v104 + 4 * v114);
    ++v117;
    if (!v115)
      goto LABEL_168;
  }
  a6 = *(unsigned int *)(v116 + 16 * v118 + 8) | ((unint64_t)*(unsigned __int8 *)(v116 + 16 * v118 + 12) << 32);
LABEL_165:
  if ((_DWORD)a6 == -1)
  {
LABEL_168:
    if ((*(_BYTE *)(v14 + 6) & 0x20) != 0)
    {
      v203 = v95;
      v121 = (JSC::VM *)v91;
      v122 = v92;
      v123 = v93;
      v124 = v91;
      v125 = v94;
      OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v14, v121, v11, v10);
      v95 = v203;
      v94 = v125;
      v91 = v124;
      v93 = v123;
      v92 = v122;
      if ((OwnStaticPropertySlot & 1) != 0)
        return 1;
    }
    goto LABEL_169;
  }
  v42 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v162 = v14 + 16;
    v163 = a6 << 32;
  }
  else
  {
    v162 = *(_QWORD *)(v14 + 8) - 8;
    v163 = 0x3F00000000 - (a6 << 32);
  }
  v45 = *(_QWORD *)(v162 + (v163 >> 29));
  if ((v45 & 0xFFFE000000000002) != 0)
  {
LABEL_268:
    *(_QWORD *)v10 = v45;
    *(_QWORD *)(v10 + 32) = v14;
    goto LABEL_52;
  }
  v164 = *(unsigned __int8 *)(v45 + 5);
  if (v164 == 5)
  {
    v73 = (unsigned int *)v14;
    v74 = v91;
    goto LABEL_107;
  }
  if (v164 != 6)
    goto LABEL_268;
  v75 = *(_DWORD *)(v95 + 16) & 3;
  v166 = *(_QWORD *)(v45 + 8);
  v165 = *(_QWORD *)(v45 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x4C)))
  {
    *(_QWORD *)v10 = v166;
    *(_QWORD *)(v10 + 8) = v165;
    *(_DWORD *)(v10 + 16) = HIDWORD(a6);
    *(_QWORD *)(v10 + 32) = v14;
    goto LABEL_270;
  }
  v79 = *(_QWORD *)(v45 + 24);
  v78 = *(_QWORD *)(v45 + 32);
  *(_QWORD *)v10 = v166;
  *(_QWORD *)(v10 + 8) = v165;
  *(_DWORD *)(v10 + 16) = HIDWORD(a6);
  *(_QWORD *)(v10 + 32) = v14;
LABEL_112:
  *(_BYTE *)(v10 + 49) = 3;
  result = 1;
  if (v75 != 2)
    *(_BYTE *)(v10 + 48) = 1;
  *(_BYTE *)(v10 + 51) = 1;
  *(_QWORD *)(v10 + 72) = v79;
  *(_QWORD *)(v10 + 80) = v78;
  return result;
}

void JSC::ProxyObject::validateNegativeHasTrapResult(unint64_t a1, _DWORD *a2, WTF::StringImpl *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  const char *v24;
  uint64_t v25;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  _QWORD v31[3];
  uint64_t v32;
  JSC::VM *v33;
  _BYTE v34[16];
  unint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;

  v6 = *(_QWORD *)(a1 + 56);
  v33 = (JSC::VM *)v6;
  memset(v31, 0, sizeof(v31));
  v32 = 14;
  v35 = 0xFFFFFFFF00000000;
  v37 = 0;
  v38 = 0;
  v36 = a2;
  v39 = 0x20000;
  v40 = 0;
  LOBYTE(v41) = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v13 = (*(uint64_t (**)(_DWORD *, unint64_t, WTF::StringImpl *, _BYTE *))(16
                                                                                          * *(unsigned int *)(16 * (*a2 & 0xFFFFFFFE) + 0x4C)
                                                                                          + 0x68))(a2, a1, a3, v34);
  v14 = 0;
  if (v13)
    v14 = JSC::PropertyDescriptor::setPropertySlot((uint64_t)v31, a1, a3, (uint64_t)v34, v9, v10, v11, v12);
  if (v42)
  {
    v15 = *(_DWORD *)(v41 + 4);
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x198B871E0);
    }
    *(_DWORD *)(v41 + 4) = v15 - 1;
  }
  if (*(_DWORD *)(v6 + 80))
  {
    v26 = *(_DWORD *)(v6 + 80);
    if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
    {
      v30 = v14;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v6 + 64), 7u, v7, v8, v9, v10, v11, v12);
      LOBYTE(v14) = v30;
    }
    if (*(_QWORD *)(v6 + 16))
      v27 = 0;
    else
      v27 = v14;
    if ((v27 & 1) == 0)
      return;
  }
  else if (!v14)
  {
    return;
  }
  if ((v32 & 8) != 0)
  {
    v24 = "Proxy 'has' must return 'true' for non-configurable properties";
    v25 = 63;
    goto LABEL_13;
  }
  v16 = (*(uint64_t (**)(_DWORD *, unint64_t))(16
                                                              * *(unsigned int *)(16 * (*a2 & 0xFFFFFFFE) + 0x4C)
                                                              + 0xA0))(a2, a1);
  v23 = v16;
  if (!*(_DWORD *)(v6 + 80))
  {
    if ((v16 & 1) != 0)
      return;
    goto LABEL_11;
  }
  v28 = *(_DWORD *)(v6 + 80);
  if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v6 + 64), 7u, v17, v18, v19, v20, v21, v22);
  if (*(_QWORD *)(v6 + 16))
    v29 = 1;
  else
    v29 = v23;
  if ((v29 & 1) == 0)
  {
LABEL_11:
    v24 = "Proxy 'has' must return 'true' for a non-extensible 'target' object with a configurable property";
    v25 = 97;
LABEL_13:
    JSC::throwTypeError(a1, &v33, (uint64_t)v24, v25);
  }
}

uint64_t JSC::ProxyObject::getOwnPropertySlotCommon(JSC::JSCell *a1, JSC::JSGlobalObject *a2, WTF::StringImpl *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v12;
  JSC::VM *v13;

  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 52) = 1;
  if (*(_BYTE *)(a4 + 50) == 3)
  {
    v10 = 0;
    *(_QWORD *)a4 = 10;
    *(_DWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 1;
    return v10;
  }
  v13 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((unint64_t)&v12 < *((_QWORD *)v13 + 1))
  {
    JSC::throwStackOverflowError((unint64_t)a2, &v13, (uint64_t)a3, a4, a5, a6, a7, a8);
    return 0;
  }
  v8 = *(unsigned __int8 *)(a4 + 50);
  if (*(_BYTE *)(a4 + 50))
  {
    if (v8 == 2)
      return JSC::ProxyObject::performInternalMethodGetOwnProperty(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v8 == 1)
      return JSC::ProxyObject::performHasProperty(a1, a2, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  return JSC::ProxyObject::performGet(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void JSC::ProxyObject::validatePositiveSetTrapResult(JSC::JSGlobalObject *a1, _DWORD *a2, WTF::StringImpl *a3, unint64_t a4)
{
  uint64_t v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int8x16_t v15;
  int v16;
  int v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  char v23;
  int v24;
  const WTF::StringImpl *v25;
  BOOL v26;
  double v27;
  double v28;
  int v29;
  char v30;
  JSC::JSBigInt *v31;
  __int128 v32;
  uint64_t v33;
  JSC::VM *v34;
  _BYTE v35[16];
  unint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;

  v7 = *((_QWORD *)a1 + 7);
  v34 = (JSC::VM *)v7;
  v31 = 0;
  v32 = 0uLL;
  v33 = 14;
  v36 = 0xFFFFFFFF00000000;
  v38 = 0;
  v39 = 0;
  v37 = a2;
  v40 = 0x20000;
  v41 = 0;
  LOBYTE(v42) = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v14 = (*(uint64_t (**)(_DWORD *, JSC::JSGlobalObject *, WTF::StringImpl *, _BYTE *))(16
                                                                                               * *(unsigned int *)(16 * (*a2 & 0xFFFFFFFE) + 0x4C)
                                                                                               + 0x68))(a2, a1, a3, v35);
  v16 = 0;
  if (v14)
    v16 = JSC::PropertyDescriptor::setPropertySlot((uint64_t)&v31, (uint64_t)a1, a3, (uint64_t)v35, v10, v11, v12, v13);
  if (v43)
  {
    v17 = *(_DWORD *)(v42 + 4);
    if (!v17)
    {
      __break(0xC471u);
      JUMPOUT(0x198B87584);
    }
    *(_DWORD *)(v42 + 4) = v17 - 1;
  }
  if (!v16 || (v33 & 8) == 0)
    return;
  if (v31)
  {
    if ((v33 & 2) == 0)
      goto LABEL_10;
    if (v31 != (JSC::JSBigInt *)a4)
    {
      if ((unint64_t)v31 >> 49)
      {
        if (a4 >> 49)
        {
          v27 = (double)(int)v31;
          if ((unint64_t)v31 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v27 = (char *)v31 - 0x2000000000000;
          v28 = (double)(int)a4;
          if (a4 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v28 = a4 - 0x2000000000000;
          v22 = *(_QWORD *)&v27 == *(_QWORD *)&v28;
LABEL_19:
          v23 = v22;
LABEL_34:
          if (*(_DWORD *)(v7 + 80))
          {
            v29 = *(_DWORD *)(v7 + 80);
            if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v7 + 64), 7u, (uint64_t)v8, v9, v10, v11, v12, v13);
            if (*(_QWORD *)(v7 + 16))
              v30 = 1;
            else
              v30 = v23;
            if ((v30 & 1) != 0)
              return;
          }
          else if ((v23 & 1) != 0)
          {
            return;
          }
          v18 = "Proxy handler's 'set' on a non-configurable and non-writable property on 'target' should either return f"
                "alse or be the same value already on the 'target'";
          v19 = (unint64_t)a1;
          v20 = 154;
          goto LABEL_37;
        }
LABEL_46:
        v23 = 0;
        goto LABEL_34;
      }
LABEL_15:
      if ((((unint64_t)v31 | a4) & 0xFFFE000000000002) == 0)
      {
        v21 = *((unsigned __int8 *)v31 + 5);
        if (v21 == 2)
        {
          if (*(_BYTE *)(a4 + 5) == 2)
          {
            if ((*((_QWORD *)v31 + 1) & 1) != 0
              || (v25 = *(const WTF::StringImpl **)(a4 + 8), (v25 & 1) != 0))
            {
              v26 = JSC::JSString::equalSlowCase(v31, a1, (JSC::JSString *)a4, v9, v10, v11, v12, v13, v15);
            }
            else
            {
              v26 = WTF::equal(*((WTF **)v31 + 1), v25, v8);
            }
            goto LABEL_33;
          }
        }
        else if (v21 == 3 && *(_BYTE *)(a4 + 5) == 3)
        {
          v26 = JSC::JSBigInt::equals(v31, (JSC::JSBigInt *)a4, v8);
LABEL_33:
          v23 = v26;
          goto LABEL_34;
        }
        v22 = v31 == (JSC::JSBigInt *)a4;
        goto LABEL_19;
      }
      goto LABEL_46;
    }
LABEL_25:
    if (*(_DWORD *)(v7 + 80))
    {
      v24 = *(_DWORD *)(v7 + 80);
      if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v7 + 64), 7u, (uint64_t)v8, v9, v10, v11, v12, v13);
    }
    return;
  }
  if ((v33 & 2) != 0 && (v33 & 0x100000000) != 0)
  {
    if (v31 != (JSC::JSBigInt *)a4)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_10:
  if (v32 != 0 && *((_QWORD *)&v32 + 1) == 10)
  {
    v18 = "Proxy handler's 'set' method on a non-configurable accessor property without a setter should return false";
    v19 = (unint64_t)a1;
    v20 = 106;
LABEL_37:
    JSC::throwTypeError(v19, &v34, (uint64_t)v18, v20);
  }
}

uint64_t JSC::ProxyObject::putByIndexCommon(JSC::JSCell *a1, unint64_t a2, const WTF::StringImpl *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t result;
  uint64_t HandlerTrap;
  _DWORD *v28;
  int v29;
  WTF::StringImpl *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  int v40;
  int v41;
  int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  JSC::VM *v51;
  int v52;
  double v53;
  BOOL v54;
  _DWORD *v55;
  uint64_t v56;
  unint64_t v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  BOOL v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  int v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  int v98;
  JSC::MarkedVectorBase *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  uint64_t v106;
  _DWORD *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  _BYTE v112[24];
  JSC::VM *v113[2];

  v8 = a6;
  v10 = (uint64_t)a3;
  v13 = *(_QWORD *)(a2 + 56);
  JSC::Identifier::from((uint64_t **)v13, a4, a3, a4, a5, a6, a7, a8, (int **)&v100);
  if (*(_DWORD *)(v13 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19, v20))
  {
    v24 = 0;
    goto LABEL_8;
  }
  v21 = v100;
  v22 = *(_QWORD *)(a2 + 56);
  v113[0] = (JSC::VM *)v22;
  if ((unint64_t)&v96 < *(_QWORD *)(v22 + 8))
  {
    JSC::throwStackOverflowError(a2, v113, (uint64_t)v15, v16, v17, v18, v19, v20);
    goto LABEL_7;
  }
  if (v100 && (*((_BYTE *)v100 + 16) & 0x20) != 0 && (*((_BYTE *)v100 + 36) & 4) != 0)
    goto LABEL_7;
  v23 = *((_QWORD *)a1 + 3);
  if (v23 != 2)
  {
    v112[0] = 0;
    HandlerTrap = JSC::ProxyObject::getHandlerTrap(a1, (JSC::VM **)a2, v23, (uint64_t)v112, *(_QWORD *)(v22 + 41952) + 2296, 4uLL, v19, v20);
    if (*(_DWORD *)(v22 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v22, (uint64_t)v14, (uint64_t)v15, v16, v17, v18, v19, v20))
    {
      goto LABEL_7;
    }
    v28 = (_DWORD *)*((_QWORD *)a1 + 2);
    if (!HandlerTrap)
    {
      v103 = 0;
      v104 = v10;
      LODWORD(v105) = -1;
      BYTE4(v105) = v8;
      *(_WORD *)((char *)&v105 + 5) = 0;
      HIBYTE(v105) = 1;
      v106 = 0;
      v24 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*v28 & 0xFFFFFFFE) + 0x4C) + 0x48))();
      goto LABEL_8;
    }
    v98 = v8;
    LOBYTE(v103) = 0;
    v99 = (JSC::MarkedVectorBase *)&v104;
    v105 = (WTF::StringImpl *)&v107;
    v106 = 0;
    v108 = 0u;
    v109 = 0u;
    v110 = 0u;
    v111 = 0;
    v107 = v28;
    v104 = 0x800000001;
    v29 = *((_DWORD *)v21 + 4);
    v97 = v28;
    if ((v29 & 0x20) != 0)
    {
      *(_DWORD *)v21 += 2;
      v30 = v21;
    }
    else
    {
      if ((v29 & 0x10) != 0)
      {
        *(_DWORD *)v21 += 2;
        v30 = v21;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v22 + 41912), (unint64_t)v21, v15, v16, v17, v18, v19, v20, &v101);
        v30 = v101;
      }
      v31 = *(_DWORD *)v30;
      *(_DWORD *)v30 += 2;
      if (v31)
      {
        *(_DWORD *)v30 = v31;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v30, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
        WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
      }
    }
    v32 = JSC::identifierToSafePublicJSValue((JSC *)v22, v30, v15, v16, v17, v18, v19, v20);
    v39 = (WTF::AtomStringImpl *)v32;
    v40 = v104;
    if ((_DWORD)v104 == HIDWORD(v104) || v105 != (WTF::StringImpl *)&v107 && v105)
    {
      if (JSC::MarkedVectorBase::slowAppend((uint64_t)v99, v32, v33, v34, v35, v36, v37, v38) == 1)
        LOBYTE(v103) = 1;
    }
    else
    {
      *((_QWORD *)v105 + v104) = v32;
      LODWORD(v104) = v40 + 1;
    }
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v39, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
    v41 = v104;
    if ((_DWORD)v104 == HIDWORD(v104) || v105 != (WTF::StringImpl *)&v107 && v105)
    {
      if (JSC::MarkedVectorBase::slowAppend((uint64_t)v99, a5, v33, v34, v35, v36, v37, v38) == 1)
        LOBYTE(v103) = 1;
    }
    else
    {
      *((_QWORD *)v105 + v104) = a5;
      LODWORD(v104) = v41 + 1;
    }
    if ((v10 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v10 + 5) - 51 <= 5)
      v10 = 10;
    v42 = v104;
    if ((_DWORD)v104 == HIDWORD(v104) || v105 != (WTF::StringImpl *)&v107 && v105)
    {
      if (JSC::MarkedVectorBase::slowAppend((uint64_t)v99, v10, v33, v34, v35, v36, v37, v38) == 1)
        LOBYTE(v103) = 1;
    }
    else
    {
      *((_QWORD *)v105 + v104) = v10;
      LODWORD(v104) = v42 + 1;
    }
    v101 = v105;
    v102 = v104;
    result = JSC::call(a2, HandlerTrap, v112, v23, &v101);
    v50 = result;
    v51 = v113[0];
    v52 = v98;
    if (*((_DWORD *)v113[0] + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v113[0], (uint64_t)v43, v44, v45, v46, v47, v48, v49);
      if ((result & 1) != 0)
        goto LABEL_55;
    }
    if (v50 >= 0xFFFE000000000000)
    {
      v68 = (_DWORD)v50 == 0;
      goto LABEL_64;
    }
    *(_QWORD *)&v53 = v50 - 0x2000000000000;
    if (v50 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      if (v53 <= 0.0)
      {
        v54 = v53 < 0.0;
        goto LABEL_41;
      }
      goto LABEL_62;
    }
    if ((v50 & 0xFFFE000000000002) != 0)
    {
      v54 = v50 == 7;
      goto LABEL_41;
    }
    v67 = *(unsigned __int8 *)(v50 + 5);
    if (v67 == 2)
    {
      v85 = *(_QWORD *)(v50 + 8);
      if ((v85 & 1) != 0)
        v86 = (int *)(v50 + 16);
      else
        v86 = (int *)(v85 + 4);
      v87 = *v86;
    }
    else
    {
      if (v67 != 3)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
LABEL_62:
          v54 = 1;
          goto LABEL_41;
        }
        v68 = *(_QWORD *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x28) == a2;
LABEL_64:
        v54 = !v68;
LABEL_41:
        v55 = v97;
        if (!*((_DWORD *)v51 + 20)
          || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v51, (uint64_t)v43, v44, v45, v46, v47, v48, v49),
              (result & 1) == 0))
        {
          if (v54)
          {
            if ((*(_DWORD *)((16 * *v55) | 0x10) & 0x80000000) == 0
              || (JSC::ProxyObject::validatePositiveSetTrapResult((JSC::JSGlobalObject *)a2, v55, v21, a5),
                  !*((_DWORD *)v51 + 20))
              || !JSC::VM::hasExceptionsAfterHandlingTraps(v51, (uint64_t)v43, v44, v45, v46, v47, v48, v49))
            {
              v24 = 1;
LABEL_56:
              JSC::MarkedVectorBase::~MarkedVectorBase(v99, v43, v44, v45, v46, v47, v48, v49);
              goto LABEL_8;
            }
          }
          else if (v52)
          {
            v56 = *((unsigned int *)v21 + 1);
            if ((v56 & 0x80000000) != 0
              || __OFADD__((_DWORD)v56, 1)
              || (result = (v56 + 62), __OFADD__(v56 + 1, 61)))
            {
              v101 = 0;
            }
            else
            {
              v57 = ((unint64_t)*((unsigned int *)v21 + 4) >> 2) & 1;
              result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>(result, v57, (int8x16_t *)"Proxy object's 'set' trap returned falsy value for property '", 0x3Du, *((_BYTE **)v21 + 1), v56 & 0xFFFFFFFEFFFFFFFFLL | (v57 << 32), 39, (int **)&v101);
              if (v101)
              {
                JSC::throwTypeError(a2, v113, &v101);
                v58 = v101;
                v101 = 0;
                if (v58)
                {
                  if (*(_DWORD *)v58 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v58, (WTF::AtomStringImpl *)v43, v44, v45, v46, v47, v48, v49);
                    WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
                  }
                  else
                  {
                    *(_DWORD *)v58 -= 2;
                  }
                }
                goto LABEL_55;
              }
            }
            __break(0xC471u);
            return result;
          }
        }
LABEL_55:
        v24 = 0;
        goto LABEL_56;
      }
      v87 = *(_DWORD *)(v50 + 8);
    }
    v68 = v87 == 0;
    goto LABEL_64;
  }
  JSC::throwTypeError(a2, v113, (uint64_t)"Proxy has already been revoked. No more operations are allowed to be performed on it", 85);
LABEL_7:
  v24 = 0;
LABEL_8:
  v25 = v100;
  v100 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  return v24;
}

uint64_t JSC::performProxyCall(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  unsigned int *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Method;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  _OWORD v84[4];
  uint64_t v85;
  WTF::StringImpl *v86;
  int v87;
  unsigned __int8 v88[24];
  JSC::VM *v89;

  v9 = *((_QWORD *)this + 7);
  v89 = (JSC::VM *)v9;
  if ((unint64_t)&v81 < *(_QWORD *)(v9 + 8))
  {
    JSC::throwStackOverflowError((unint64_t)this, &v89, (uint64_t)a3, a4, a5, a6, a7, a8);
    return 0;
  }
  v11 = *((_QWORD *)a2 + 3);
  v12 = *(unsigned int **)(v11 + 24);
  if (v12 == (unsigned int *)2)
    return JSC::throwTypeError((unint64_t)this, &v89, (uint64_t)"Proxy has already been revoked. No more operations are allowed to be performed on it", 85);
  v88[0] = 0;
  WTF::AtomStringImpl::addLiteral((uint64_t)"apply", 5uLL, a4, a5, a6, a7, a8, &v81);
  v13 = v81;
  v86 = v81;
  v14 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v14 = 0x3800000002;
  *(_QWORD *)(v14 + 8) = "'apply' property of a Proxy's handler should be callable";
  *(_DWORD *)(v14 + 16) = 4;
  v81 = (WTF::StringImpl *)v14;
  Method = JSC::JSObject::getMethod(v12, (unint64_t)this, (uint64_t)v88, (unint64_t *)&v86, &v81, v15, v16, v17);
  v26 = v81;
  v81 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v18, v19, v20, v21, v22, v23, v24))
  {
    return 0;
  }
  v27 = *(_QWORD *)(v11 + 16);
  if (Method == 10)
  {
    if (*(_BYTE *)(v27 + 5) == 26)
    {
      v28 = *(_QWORD *)(v27 + 24);
      if ((v28 & 1) != 0)
        v28 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v28 + 5) == 8)
      {
        LOBYTE(v81) = 1;
        v82 = *(_QWORD *)(v28 + 40);
        LOBYTE(v83) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE)
                                                                                 + 0x4C));
      }
      else
      {
        LOBYTE(v81) = 2;
        v29 = *(WTF::StringImpl **)(v27 + 16);
        v82 = v28;
        v83 = v29;
      }
    }
    else
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v27 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x38))(&v81, *(_QWORD *)(v11 + 16));
      if (!(_BYTE)v81)
      {
        __break(0xC471u);
        JUMPOUT(0x198B87D94);
      }
    }
    v30 = *((_QWORD *)a2 + 5);
    v86 = (JSC::JSGlobalObject *)((char *)a2 + 48);
    v87 = *((_DWORD *)a2 + 8) - 1;
    return JSC::call((uint64_t *)this, v27, (unsigned __int8 *)&v81, v30, (uint64_t)&v86, v22, v23, v24);
  }
  v81 = (JSC::JSGlobalObject *)((char *)a2 + 48);
  LODWORD(v82) = *((_DWORD *)a2 + 8) - 1;
  v57 = JSC::constructArray((unint64_t)this, 0, (uint64_t)&v81, 0, v21, v22, v23, v24);
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v50, v51, v52, v53, v54, v55, v56))
  {
    return 0;
  }
  LOBYTE(v81) = 0;
  v82 = 0x800000000;
  v83 = (WTF::StringImpl *)((char *)v84 + 8);
  memset(v84, 0, sizeof(v84));
  v85 = 0;
  JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v81, v27, v51, v52, v53, v54, v55, v56);
  v64 = *((_QWORD *)a2 + 5);
  if ((v64 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v64 + 5) - 51 <= 5)
    v64 = 10;
  JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v81, v64, v58, v59, v60, v61, v62, v63);
  JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v81, v57, v65, v66, v67, v68, v69, v70);
  v86 = v83;
  v87 = v82;
  v32 = JSC::call((uint64_t *)this, Method, v88, (uint64_t)v12, (uint64_t)&v86, v71, v72, v73);
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v82, v74, v75, v76, v77, v78, v79, v80);
  return v32;
}

uint64_t JSC::performProxyConstruct(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  unsigned int *v12;
  WTF::StringImpl *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t Method;
  WTF::StringImpl *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  _QWORD v69[3];
  WTF::Thread *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  int v76;
  unsigned __int8 v77[24];
  JSC::VM *v78;

  v9 = *((_QWORD *)this + 7);
  v78 = (JSC::VM *)v9;
  if ((unint64_t)&v66 < *(_QWORD *)(v9 + 8))
  {
    JSC::throwStackOverflowError((unint64_t)this, &v78, (uint64_t)a3, a4, a5, a6, a7, a8);
    return 0;
  }
  v11 = *((_QWORD *)a2 + 3);
  v12 = *(unsigned int **)(v11 + 24);
  if (v12 == (unsigned int *)2)
    return JSC::throwTypeError((unint64_t)this, &v78, (uint64_t)"Proxy has already been revoked. No more operations are allowed to be performed on it", 85);
  v77[0] = 0;
  WTF::AtomStringImpl::addLiteral((uint64_t)"construct", 9uLL, a4, a5, a6, a7, a8, &v68);
  v14 = v68;
  v75 = v68;
  v15 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v15 = 0x3C00000002;
  *(_QWORD *)(v15 + 8) = "'construct' property of a Proxy's handler should be callable";
  *(_DWORD *)(v15 + 16) = 4;
  v68 = (WTF::StringImpl *)v15;
  Method = JSC::JSObject::getMethod(v12, (unint64_t)this, (uint64_t)v77, (unint64_t *)&v75, &v68, v16, v17, v18);
  v27 = v68;
  v68 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
      if (!v14)
        goto LABEL_10;
      goto LABEL_8;
    }
    *(_DWORD *)v27 -= 2;
  }
  if (!v14)
    goto LABEL_10;
LABEL_8:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::~StringImpl(v14, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
  }
  else
  {
    *(_DWORD *)v14 -= 2;
  }
LABEL_10:
  if (*(_DWORD *)(v9 + 80))
  {
    v61 = *(_DWORD *)(v9 + 80);
    if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v20, v21, v22, v23, v24, v25);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v28 = *(_QWORD *)(v11 + 16);
  if (Method == 10)
  {
    if ((v28 & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v68) = 0;
    }
    else
    {
      if (*(_BYTE *)(v28 + 5) == 26)
        JSC::JSFunction::getConstructData((uint64_t *)&v68, *(uint64_t **)(v11 + 16), v19);
      else
        (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD))(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v28 & 0xFFFFFFFE)
                                                                                         + 0x4C)
                                                                       + 0x40))(&v68, *(_QWORD *)(v11 + 16));
      if ((_BYTE)v68)
      {
        v75 = (JSC::JSGlobalObject *)((char *)a2 + 48);
        v76 = *((_DWORD *)a2 + 8) - 1;
        return JSC::Interpreter::executeConstruct((JSC::VM *)(*((_QWORD *)this + 7) + 90560), (WTF::Thread *)v28, (unsigned __int8 *)&v68, (uint64_t)&v75, *((WTF **)a2 + 5), v29, v30, v31);
      }
    }
    __break(0xC471u);
    JUMPOUT(0x198B881D8);
  }
  v68 = (JSC::JSGlobalObject *)((char *)a2 + 48);
  LODWORD(v69[0]) = *((_DWORD *)a2 + 8) - 1;
  v33 = *((_QWORD *)this + 7);
  v34 = *((_DWORD *)this + 224);
  v35 = v34 ? 16 * (v34 & 0xFFFFFFFE) : 0;
  if (!*(_DWORD *)(v33 + 80))
    goto LABEL_22;
  v62 = *(_DWORD *)(v33 + 80);
  if ((v62 & 0x27) != 0 && (v62 & 0x20) == 0)
  {
    v67 = *((_QWORD *)this + 7);
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v33 + 64), 7u, v20, v21, v22, v23, v24, v25);
    v33 = v67;
  }
  if (*(_QWORD *)(v33 + 16))
    v36 = 0;
  else
LABEL_22:
    v36 = JSC::constructArray((uint64_t)this, v35, (uint64_t)&v68, v21, v22, v23, v24, v25);
  if (*(_DWORD *)(v9 + 80))
  {
    v63 = *(_DWORD *)(v9 + 80);
    if ((v63 & 0x27) != 0 && (v63 & 0x20) == 0)
    {
      v65 = v36;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v20, v21, v22, v23, v24, v25);
      v36 = v65;
    }
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  LOBYTE(v68) = 0;
  v69[1] = &v70;
  v69[2] = 0;
  v72 = 0u;
  v73 = 0u;
  v74 = 0;
  v75 = (WTF::StringImpl *)&v70;
  v70 = (WTF::Thread *)v28;
  v71 = v36;
  *((_QWORD *)&v71 + 1) = *((_QWORD *)a2 + 5);
  v69[0] = 0x800000003;
  v76 = 3;
  v32 = JSC::call((uint64_t *)this, Method, v77, (uint64_t)v12, (uint64_t)&v75, v23, v24, v25);
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_26;
  v64 = *(_DWORD *)(v9 + 80);
  if ((v64 & 0x27) != 0 && (v64 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v38, v39, v40, v41, v42, v43);
  if (*(_QWORD *)(v9 + 16))
  {
    v32 = 0;
  }
  else
  {
LABEL_26:
    if ((v32 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v32 + 5) <= 0x16u)
      v32 = JSC::throwTypeError((unint64_t)this, &v78, (uint64_t)"Result from Proxy handler's 'construct' method should be an object", 67);
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v69, v37, v38, v39, v40, v41, v42, v43);
  return v32;
}

uint64_t JSC::ProxyObject::performPreventExtensions(JSC::ProxyObject *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Method;
  WTF::StringImpl *v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int hasExceptionsAfterHandlingTraps;
  int v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  int v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  _OWORD v75[4];
  uint64_t v76;
  unsigned __int8 v77[24];
  JSC::VM *v78;

  v9 = *((_QWORD *)a2 + 7);
  v78 = (JSC::VM *)v9;
  if ((unint64_t)&v68 < *(_QWORD *)(v9 + 8))
  {
    JSC::throwStackOverflowError((unint64_t)a2, &v78, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  if (v11 == (unsigned int *)2)
  {
    JSC::throwTypeError((unint64_t)a2, &v78, (uint64_t)"Proxy has already been revoked. No more operations are allowed to be performed on it", 85);
    return 0;
  }
  v77[0] = 0;
  JSC::Identifier::add(v9, "preventExtensions", 18, a4, a5, a6, a7, a8, &v72);
  v12 = v72;
  v69 = v72;
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x4400000002;
  *(_QWORD *)(v13 + 8) = "'preventExtensions' property of a Proxy's handler should be callable";
  *(_DWORD *)(v13 + 16) = 4;
  v72 = (WTF::StringImpl *)v13;
  Method = JSC::JSObject::getMethod(v11, (unint64_t)a2, (uint64_t)v77, (unint64_t *)&v69, &v72, v14, v15, v16);
  v25 = v72;
  v72 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v17, v18, v19, v20, v21, v22, v23))
  {
    return 0;
  }
  v26 = (_DWORD *)*((_QWORD *)this + 2);
  if (Method != 10)
  {
    LOBYTE(v72) = 0;
    v73 = 0x800000000;
    v74 = (WTF::StringImpl *)((char *)v75 + 8);
    memset(v75, 0, sizeof(v75));
    v76 = 0;
    JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v72, (uint64_t)v26, v18, v19, v20, v21, v22, v23);
    v69 = v74;
    v70 = v73;
    v71 = JSC::call((uint64_t *)a2, Method, v77, (uint64_t)v11, (uint64_t)&v69, v45, v46, v47);
    if (*(_DWORD *)(v9 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v48, v49, v50, v51, v52, v53, v54))
    {
      goto LABEL_23;
    }
    v55 = JSC::JSValue::toBoolean(&v71, (uint64_t)a2);
    v63 = v55;
    if (*(_DWORD *)(v9 + 80))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v56, v57, v58, v59, v60, v61, v62);
      v27 = v63 & ~hasExceptionsAfterHandlingTraps;
      if ((hasExceptionsAfterHandlingTraps & 1) != 0 || ((v63 ^ 1) & 1) != 0)
        goto LABEL_24;
    }
    else if (!(_DWORD)v55)
    {
      goto LABEL_23;
    }
    v64 = (*(uint64_t (**)(_DWORD *, JSC::JSGlobalObject *))(16
                                                                     * *(unsigned int *)(16 * (*v26 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0xA0))(v26, a2);
    v65 = v64;
    if (*(_DWORD *)(v9 + 80))
    {
      v67 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v56, v57, v58, v59, v60, v61, v62);
      v27 = v63 & ~v67;
      if ((v67 & 1) != 0 || ((v65 ^ 1) & 1) != 0)
        goto LABEL_24;
    }
    else
    {
      v27 = v63;
      if (!v64)
      {
LABEL_24:
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v73, v56, v57, v58, v59, v60, v61, v62);
        return v27;
      }
    }
    JSC::throwTypeError((unint64_t)a2, &v78, (uint64_t)"Proxy's 'preventExtensions' trap returned true even though its target is extensible. It should have returned false", 115);
LABEL_23:
    v27 = 0;
    goto LABEL_24;
  }
  return (*(uint64_t (**)(_QWORD, JSC::JSGlobalObject *))(16
                                                                  * *(unsigned int *)(16 * (*v26 & 0xFFFFFFFE) + 0x4C)
                                                                  + 0x98))(*((_QWORD *)this + 2), a2);
}

uint64_t JSC::ProxyObject::performIsExtensible(JSC::ProxyObject *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Method;
  WTF::StringImpl *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  const char *v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  int v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  _OWORD v79[4];
  uint64_t v80;
  unsigned __int8 v81[24];
  JSC::VM *v82;

  v9 = *((_QWORD *)a2 + 7);
  v82 = (JSC::VM *)v9;
  if ((unint64_t)&v72 < *(_QWORD *)(v9 + 8))
  {
    JSC::throwStackOverflowError((unint64_t)a2, &v82, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  v11 = (unsigned int *)*((_QWORD *)this + 3);
  if (v11 == (unsigned int *)2)
  {
    JSC::throwTypeError((unint64_t)a2, &v82, (uint64_t)"Proxy has already been revoked. No more operations are allowed to be performed on it", 85);
    return 0;
  }
  v81[0] = 0;
  JSC::Identifier::add(v9, "isExtensible", 13, a4, a5, a6, a7, a8, &v76);
  v12 = v76;
  v73 = v76;
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x3F00000002;
  *(_QWORD *)(v13 + 8) = "'isExtensible' property of a Proxy's handler should be callable";
  *(_DWORD *)(v13 + 16) = 4;
  v76 = (WTF::StringImpl *)v13;
  Method = JSC::JSObject::getMethod(v11, (unint64_t)a2, (uint64_t)v81, (unint64_t *)&v73, &v76, v14, v15, v16);
  v25 = v76;
  v76 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v17, v18, v19, v20, v21, v22, v23))
  {
    return 0;
  }
  v26 = (_DWORD *)*((_QWORD *)this + 2);
  if (Method == 10)
    return (*(uint64_t (**)(_QWORD, JSC::JSGlobalObject *))(16
                                                                    * *(unsigned int *)(16 * (*v26 & 0xFFFFFFFE) + 0x4C)
                                                                    + 0xA0))(*((_QWORD *)this + 2), a2);
  LOBYTE(v76) = 0;
  v77 = 0x800000000;
  v78 = (WTF::StringImpl *)((char *)v79 + 8);
  memset(v79, 0, sizeof(v79));
  v80 = 0;
  JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v76, (uint64_t)v26, v18, v19, v20, v21, v22, v23);
  v73 = v78;
  v74 = v77;
  v75 = JSC::call((uint64_t *)a2, Method, v81, (uint64_t)v11, (uint64_t)&v73, v29, v30, v31);
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v32, v33, v34, v35, v36, v37, v38)
    || (v27 = JSC::JSValue::toBoolean(&v75, (uint64_t)a2), *(_DWORD *)(v9 + 80))
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v39, v40, v41, v42, v43, v44, v45)
    || (v53 = (*(uint64_t (**)(_DWORD *, JSC::JSGlobalObject *))(16
                                                                         * *(unsigned int *)(16 * (*v26 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0xA0))(v26, a2), *(_DWORD *)(v9 + 80))&& JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v46, v47, v48, v49, v50, v51, v52))
  {
    v27 = 0;
  }
  else if ((_DWORD)v27 != v53)
  {
    if (v53)
      v54 = "Proxy object's 'isExtensible' trap returned false when the target is extensible. It should have returned true";
    else
      v54 = "Proxy object's 'isExtensible' trap returned true when the target is non-extensible. It should have returned false";
    if (v53)
      v55 = 110;
    else
      v55 = 114;
    JSC::throwTypeError((unint64_t)a2, &v82, (uint64_t)v54, v55);
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v77, v46, v47, v48, v49, v50, v51, v52);
  return v27;
}

void JSC::ProxyObject::performGetOwnPropertyNames(JSC::ProxyObject *this, JSC::JSGlobalObject *a2, JSC::PropertyNameArray *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t HandlerTrap;
  _DWORD *v21;
  JSC::MarkedVectorBase *v22;
  WTF::AtomStringImpl *v23;
  const WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  JSC::VM *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t Index;
  int v38;
  uint64_t v39;
  int v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl **v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  JSC::VM *v71;
  _DWORD *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  _QWORD *v93;
  uint64_t v94;
  WTF::StringImpl **v95;
  WTF::StringImpl **v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  JSC::VM *v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  WTF::StringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF::StringImpl **v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int OwnPropertyDescriptor;
  uint64_t *v155;
  _QWORD *v156;
  uint64_t *v157;
  void *v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  _BYTE *v172;
  unint64_t v173;
  int8x16_t *v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  JSC::VM *v217;
  int8x16_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  int v222;
  unint64_t v223;
  _QWORD *v224;
  _DWORD *v225;
  JSC::MarkedVectorBase *v226;
  JSC::VM *v227;
  uint64_t v228[3];
  WTF::StringImpl *v229;
  WTF::StringImpl *v230[3];
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  WTF::StringImpl *v234;
  uint64_t v235;
  uint64_t v236;
  __int16 v237;
  uint64_t v238;
  char v239;
  _QWORD v240[3];
  _DWORD *v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  unsigned __int8 v246[24];
  JSC::VM *v247[2];

  v9 = *((_QWORD *)a2 + 7);
  v247[0] = (JSC::VM *)v9;
  if ((unint64_t)&v224 < *(_QWORD *)(v9 + 8))
  {
    JSC::throwStackOverflowError((unint64_t)a2, v247, (uint64_t)a3, a4, a5, a6, a7, a8);
    return;
  }
  v11 = *((_QWORD *)this + 3);
  if (v11 == 2)
  {
    JSC::throwTypeError((unint64_t)a2, v247, (uint64_t)"Proxy has already been revoked. No more operations are allowed to be performed on it", 85);
    return;
  }
  v246[0] = 0;
  HandlerTrap = JSC::ProxyObject::getHandlerTrap(this, (JSC::VM **)a2, v11, (uint64_t)v246, *(_QWORD *)(v9 + 41952) + 2112, 3uLL, a7, a8);
  if (!*(_DWORD *)(v9 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v13, v14, v15, v16, v17, v18, v19))
  {
    v21 = (_DWORD *)*((_QWORD *)this + 2);
    if (!HandlerTrap)
    {
      (*(void (**)(_QWORD, JSC::JSGlobalObject *, JSC::PropertyNameArray *, _QWORD))(16
                                                                                              * *(unsigned int *)(16 * (*v21 & 0xFFFFFFFE) + 0x4C)
                                                                                              + 0x78))(*((_QWORD *)this + 2), a2, a3, 0);
      return;
    }
    v239 = 0;
    v22 = (JSC::MarkedVectorBase *)v240;
    v240[2] = 0;
    v242 = 0u;
    v243 = 0u;
    v244 = 0u;
    v245 = 0;
    v240[1] = &v241;
    v241 = v21;
    v240[0] = 0x800000001;
    v234 = (WTF::StringImpl *)&v241;
    LODWORD(v235) = 1;
    v30 = JSC::call((uint64_t *)a2, HandlerTrap, v246, v11, (uint64_t)&v234, v17, v18, v19);
    if (!*(_DWORD *)(v9 + 80)
      || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v23, (uint64_t)v24, v25, v26, v27, v28, v29))
    {
      if ((v30 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v30 + 5) > 0x16u)
      {
        v238 = 0;
        v32 = (JSC::VM *)*((_QWORD *)a2 + 7);
        v226 = (JSC::MarkedVectorBase *)v240;
        v227 = v32;
        v33 = *(unsigned __int8 *)(v30 + 5);
        v225 = v21;
        if (v33 == 36)
        {
          if ((*(_BYTE *)(v30 + 4) & 0xE) == 0)
          {
            if (*((_DWORD *)v227 + 20))
              JSC::VM::hasExceptionsAfterHandlingTraps(v227, (uint64_t)v23, (uint64_t)v24, v25, v26, v27, v28, v29);
            goto LABEL_71;
          }
          v34 = *(unsigned int *)(*(_QWORD *)(v30 + 8) - 8);
LABEL_11:
          if ((!*((_DWORD *)v227 + 20)
             || !JSC::VM::hasExceptionsAfterHandlingTraps(v227, (uint64_t)v23, (uint64_t)v24, v25, v26, v27, v28, v29))
            && v34)
          {
            v35 = 0;
            v36 = (_QWORD *)((char *)a3 + 8);
            while (1)
            {
              Index = JSC::JSObject::getIndex((JSC::JSObject *)v30, a2, v35, v25, v26, v27, v28, v29);
              if (*((_DWORD *)v227 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v227, (uint64_t)v23, (uint64_t)v24, v25, v26, v27, v28, v29))
              {
                goto LABEL_71;
              }
              if ((Index & 0xFFFE000000000002) != 0)
                goto LABEL_70;
              v38 = *(unsigned __int8 *)(Index + 5);
              if (v38 != 2)
                break;
              v42 = *((_QWORD *)a2 + 7);
              v41 = *(WTF::StringImpl **)(Index + 8);
              if ((v41 & 1) == 0)
              {
                if ((*((_BYTE *)v41 + 16) & 0x10) == 0)
                {
                  v87 = (_QWORD *)(v42 + 64768);
                  v88 = *(WTF::StringImpl **)(v42 + 64768);
                  v224 = (_QWORD *)(v42 + 64768);
                  if (v88 != v41)
                  {
                    *(_DWORD *)v41 += 2;
                    *v87 = v41;
                    if (v88)
                    {
                      if (*(_DWORD *)v88 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v88, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
                        WTF::fastFree(v185, v186, v187, v188, v189, v190, v191, v192);
                        v87 = v224;
                      }
                      else
                      {
                        *(_DWORD *)v88 -= 2;
                      }
                    }
                    v89 = *(WTF::StringImpl **)(Index + 8);
                    if (v89)
                    {
                      if ((*((_BYTE *)v89 + 16) & 0x10) != 0)
                      {
                        *(_DWORD *)v89 += 2;
                      }
                      else
                      {
                        WTF::AtomStringImpl::addSlowCase((unint64_t)v89, v24, v25, v26, v27, v28, v29, (WTF *)&v234);
                        v89 = v234;
                      }
                      v87 = v224;
                    }
                    v90 = (WTF::StringImpl *)v87[1];
                    v87[1] = v89;
                    if (v90)
                    {
                      if (*(_DWORD *)v90 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v90, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
                        WTF::fastFree(v177, v178, v179, v180, v181, v182, v183, v184);
                        v87 = v224;
                      }
                      else
                      {
                        *(_DWORD *)v90 -= 2;
                      }
                    }
                  }
                  if ((*(_BYTE *)(*(_QWORD *)(Index + 8) + 16) & 0x10) == 0)
                  {
LABEL_95:
                    v91 = (WTF::StringImpl *)v87[1];
                    *(_DWORD *)v91 += 2;
                    v234 = v91;
                    __dmb(0xAu);
                    v92 = *(WTF::StringImpl **)(Index + 8);
                    *(_QWORD *)(Index + 8) = v234;
                    v234 = v92;
                    v93 = (_QWORD *)(v42 + 808);
                    v94 = *(unsigned int *)(v42 + 820);
                    if ((_DWORD)v94 == *(_DWORD *)(v42 + 816))
                    {
                      v96 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, v94 + 1, (unint64_t)&v234);
                      v87 = v224;
                      v94 = *(unsigned int *)(v42 + 820);
                      v95 = (WTF::StringImpl **)(*(_QWORD *)(v42 + 808) + 8 * v94);
                      v92 = *v96;
                    }
                    else
                    {
                      v95 = (WTF::StringImpl **)(*v93 + 8 * v94);
                      v96 = &v234;
                    }
                    *v96 = 0;
                    *v95 = v92;
                    *(_DWORD *)(v42 + 820) = v94 + 1;
                    v97 = v234;
                    v234 = 0;
                    if (v97)
                    {
                      if (*(_DWORD *)v97 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v97, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
                        WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
                        v87 = v224;
                      }
                      else
                      {
                        *(_DWORD *)v97 -= 2;
                      }
                    }
                  }
LABEL_100:
                  v41 = (WTF::StringImpl *)v87[1];
                }
LABEL_27:
                v43 = *(_DWORD *)v41 + 2;
LABEL_28:
                *(_DWORD *)v41 = v43;
                goto LABEL_29;
              }
LABEL_65:
              JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)Index, a2);
              if (*(_DWORD *)(v42 + 80)
                && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v42, (uint64_t)v23, (uint64_t)v24, v25, v26, v27, v28, v29))
              {
                v41 = 0;
                v78 = v234;
                v234 = 0;
                if (!v78)
                  goto LABEL_29;
              }
              else
              {
                v41 = v234;
                if (!v234)
                  goto LABEL_29;
                *(_DWORD *)v234 += 2;
                v234 = 0;
                v78 = v41;
              }
              if (*(_DWORD *)v78 == 2)
                goto LABEL_86;
              *(_DWORD *)v78 -= 2;
LABEL_29:
              if (*((_DWORD *)v247[0] + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v247[0], (uint64_t)v23, (uint64_t)v24, v25, v26, v27, v28, v29))
              {
                goto LABEL_78;
              }
              v230[0] = v41;
              WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(&v238, (uint64_t *)v230, v25, v26, v27, v28, v29, (uint64_t)&v234);
              if (!(_BYTE)v236)
              {
                JSC::throwTypeError((unint64_t)a2, v247, (uint64_t)"Proxy handler's 'ownKeys' trap result must not contain any duplicate names", 75);
LABEL_78:
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v41, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
                    WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
                  }
                  else
                  {
                    *(_DWORD *)v41 -= 2;
                  }
                }
                goto LABEL_71;
              }
              v230[0] = v41;
              v44 = *((_DWORD *)v41 + 4);
              if ((v44 & 0x20) != 0)
              {
                if ((*((_BYTE *)a3 + 24) & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v41 + 36) & 4) != 0)
                {
LABEL_46:
                  if (*(_DWORD *)v41 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v41, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
                    WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
                  }
                  else
                  {
                    *(_DWORD *)v41 -= 2;
                  }
                  goto LABEL_48;
                }
              }
              else if ((*((_BYTE *)a3 + 24) & 2) == 0)
              {
                goto LABEL_46;
              }
              v45 = *(_QWORD *)a3;
              v46 = *(unsigned int *)(*(_QWORD *)a3 + 20);
              if (v46 <= 0x13)
              {
                if (!(_DWORD)v46)
                {
LABEL_58:
                  v47 = v41;
LABEL_38:
                  if ((v44 & 0x20) == 0)
                  {
                    if ((v44 & 0x10) != 0)
                    {
                      *(_DWORD *)v47 += 2;
                    }
                    else
                    {
                      WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*((_QWORD *)a3 + 2) + 41912), (unint64_t)v47, v24, v25, v26, v27, v28, v29, &v234);
                      v47 = v234;
                    }
                    v48 = *(_DWORD *)v47;
                    *(_DWORD *)v47 += 2;
                    if (v48)
                    {
LABEL_42:
                      *(_DWORD *)v47 = v48;
                    }
                    else
                    {
                      WTF::StringImpl::~StringImpl(v47, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
                      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
                    }
                    v234 = v47;
                    v49 = *(unsigned int *)(v45 + 20);
                    if ((_DWORD)v49 == *(_DWORD *)(v45 + 16))
                    {
                      v73 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45 + 8, v49 + 1, (unint64_t)&v234);
                      v74 = *(unsigned int *)(v45 + 20);
                      v75 = *(_QWORD *)(v45 + 8);
                      v76 = *v73;
                      *v73 = 0;
                      *(_QWORD *)(v75 + 8 * v74) = v76;
                      v77 = v234;
                      *(_DWORD *)(v45 + 20) = v74 + 1;
                      v234 = 0;
                      if (v77)
                      {
                        if (*(_DWORD *)v77 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v77, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
                          WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
                        }
                        else
                        {
                          *(_DWORD *)v77 -= 2;
                        }
                      }
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)(v45 + 8) + 8 * v49) = v47;
                      *(_DWORD *)(v45 + 20) = v49 + 1;
                    }
                    goto LABEL_45;
                  }
                  v48 = *(_DWORD *)v47 + 2;
                  goto LABEL_42;
                }
                v53 = *(WTF::StringImpl ***)(v45 + 8);
                while (*v53 != v41)
                {
                  ++v53;
                  if (!--v46)
                    goto LABEL_58;
                }
              }
              else
              {
                if (!*v36 || !*(_DWORD *)(*v36 - 12))
                {
                  v50 = *(uint64_t **)(v45 + 8);
                  v51 = 8 * v46;
                  do
                  {
                    v52 = *v50++;
                    v228[0] = v52;
                    WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)a3 + 1, v228, v25, v26, v27, v28, v29, (uint64_t)&v234);
                    v51 -= 8;
                  }
                  while (v51);
                }
                WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)a3 + 1, (uint64_t *)v230, v25, v26, v27, v28, v29, (uint64_t)&v234);
                if ((_BYTE)v236)
                {
                  v47 = v230[0];
                  v45 = *(_QWORD *)a3;
                  v44 = *((_DWORD *)v230[0] + 4);
                  goto LABEL_38;
                }
              }
LABEL_45:
              if (v41)
                goto LABEL_46;
LABEL_48:
              if (++v35 == v34)
                goto LABEL_71;
            }
            if (v38 != 4)
            {
LABEL_70:
              JSC::throwTypeError((unint64_t)a2, v247, (uint64_t)"Proxy handler's 'ownKeys' method must return an array-like object containing only Strings and Symbols", 102);
              goto LABEL_71;
            }
            v39 = *((_QWORD *)a2 + 7);
            Index = JSC::JSCell::toPrimitive(Index, (JSC::VM **)a2, (JSC::Structure *)2, v25, v26, v27, v28, v29);
            v230[0] = (WTF::StringImpl *)Index;
            if (*(_DWORD *)(v39 + 80)
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v39, (uint64_t)v23, (uint64_t)v24, v25, v26, v27, v28, v29))
            {
              v41 = *(WTF::StringImpl **)(*(_QWORD *)(v39 + 41952) + 8);
              if (!v41)
                goto LABEL_29;
              goto LABEL_27;
            }
            if ((Index & 0xFFFE000000000002) == 0)
            {
              v40 = *(unsigned __int8 *)(Index + 5);
              if (v40 == 2)
              {
LABEL_21:
                if (*(_DWORD *)(v39 + 80)
                  && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v39, (uint64_t)v23, (uint64_t)v24, v25, v26, v27, v28, v29))
                {
                  v41 = 0;
                  goto LABEL_29;
                }
                v41 = *(WTF::StringImpl **)(Index + 8);
                v42 = *((_QWORD *)a2 + 7);
                if ((v41 & 1) == 0)
                {
                  if ((*((_BYTE *)v41 + 16) & 0x10) == 0)
                  {
                    v87 = (_QWORD *)(v42 + 64768);
                    v98 = *(WTF::StringImpl **)(v42 + 64768);
                    v224 = (_QWORD *)(v42 + 64768);
                    if (v98 != v41)
                    {
                      *(_DWORD *)v41 += 2;
                      *v87 = v41;
                      if (v98)
                      {
                        if (*(_DWORD *)v98 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v98, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
                          WTF::fastFree(v201, v202, v203, v204, v205, v206, v207, v208);
                          v87 = v224;
                        }
                        else
                        {
                          *(_DWORD *)v98 -= 2;
                        }
                      }
                      v99 = *(WTF::StringImpl **)(Index + 8);
                      if (v99)
                      {
                        if ((*((_BYTE *)v99 + 16) & 0x10) != 0)
                        {
                          *(_DWORD *)v99 += 2;
                        }
                        else
                        {
                          WTF::AtomStringImpl::addSlowCase((unint64_t)v99, v24, v25, v26, v27, v28, v29, (WTF *)&v234);
                          v99 = v234;
                        }
                        v87 = v224;
                      }
                      v100 = (WTF::StringImpl *)v87[1];
                      v87[1] = v99;
                      if (v100)
                      {
                        if (*(_DWORD *)v100 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v100, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
                          WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
                          v87 = v224;
                        }
                        else
                        {
                          *(_DWORD *)v100 -= 2;
                        }
                      }
                    }
                    if ((*(_BYTE *)(*(_QWORD *)(Index + 8) + 16) & 0x10) == 0)
                      goto LABEL_95;
                    goto LABEL_100;
                  }
                  goto LABEL_27;
                }
                goto LABEL_65;
              }
              if (v40 == 4)
              {
                v41 = *(WTF::StringImpl **)(Index + 8);
                v70 = *(_DWORD *)v41;
                *(_DWORD *)v41 += 4;
                v43 = v70 + 2;
                if (!v43)
                {
                  v78 = v41;
LABEL_86:
                  WTF::StringImpl::~StringImpl(v78, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
                  WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
                  goto LABEL_29;
                }
                goto LABEL_28;
              }
            }
            Index = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)v230, (uint64_t)a2, (JSC::Structure *)1, v25, v26, v27, v28, v29);
            goto LABEL_21;
          }
LABEL_71:
          v71 = v247[0];
          v72 = v225;
          v22 = v226;
          if (*((_DWORD *)v247[0] + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v247[0], (uint64_t)v23, (uint64_t)v24, v25, v26, v27, v28, v29))
          {
            goto LABEL_73;
          }
          if ((*(_WORD *)(16 * (*v72 & 0xFFFFFFFE) + 0x12) & 0x4010) == 0)
            goto LABEL_73;
          v135 = (*(uint64_t (**)(_DWORD *, JSC::JSGlobalObject *))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*v72 & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0xA0))(v72, a2);
          if (*((_DWORD *)v71 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v71, v128, v129, v130, v131, v132, v133, v134))
              goto LABEL_73;
          }
          v136 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0xB8);
          *(_DWORD *)v136 = 1;
          *((_QWORD *)v136 + 1) = (char *)v136 + 24;
          *((_QWORD *)v136 + 2) = 20;
          v234 = v136;
          v235 = 0;
          v236 = v9;
          v237 = 259;
          (*(void (**)(_DWORD *, JSC::JSGlobalObject *, WTF::StringImpl **, _QWORD))(16
                                                                                              * *(unsigned int *)(16 * (*v72 & 0xFFFFFFFE) + 0x4C)
                                                                                              + 0x78))(v72, a2, &v234, 0);
          if (*((_DWORD *)v71 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v71, v137, v138, v139, v140, v141, v142, v143))
          {
LABEL_211:
            JSC::PropertyNameArray::~PropertyNameArray((JSC::PropertyNameArray *)&v234, v158, v159, v149, v150, v151, v152, v153);
LABEL_73:
            if (v238)
              WTF::fastFree(v238 - 16, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
            goto LABEL_75;
          }
          v232 = 0;
          v233 = 0;
          v144 = *((unsigned int *)v234 + 5);
          if ((_DWORD)v144)
          {
            v145 = (WTF::StringImpl **)*((_QWORD *)v234 + 1);
            v146 = 8 * v144;
            while (1)
            {
              memset(v230, 0, sizeof(v230));
              v231 = 14;
              OwnPropertyDescriptor = JSC::JSObject::getOwnPropertyDescriptor(v72, (uint64_t)a2, *v145, (uint64_t)v230);
              if (*((_DWORD *)v71 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v71, v147, v148, v149, v150, v151, v152, v153))
              {
                goto LABEL_207;
              }
              if (OwnPropertyDescriptor && (v231 & 8) != 0)
                break;
              if ((v135 & 1) == 0)
              {
                v229 = *v145;
                v155 = (uint64_t *)&v232;
LABEL_164:
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(v155, (uint64_t *)&v229, v149, v150, v151, v152, v153, (uint64_t)v228);
              }
              ++v145;
              v146 -= 8;
              if (!v146)
              {
                v156 = v233;
                v157 = WTF::HashSet<JSC::InlineWatchpointSet *,WTF::DefaultHash<JSC::InlineWatchpointSet *>,WTF::HashTraits<JSC::InlineWatchpointSet *>,WTF::HashTableTraits>::begin(v233);
                v160 = v157;
                v161 = (uint64_t *)v158;
                if (v156)
                {
                  v162 = &v156[*((unsigned int *)v156 - 1)];
                  goto LABEL_170;
                }
                goto LABEL_197;
              }
            }
            v229 = *v145;
            v155 = (uint64_t *)&v233;
            goto LABEL_164;
          }
          v160 = WTF::HashSet<JSC::InlineWatchpointSet *,WTF::DefaultHash<JSC::InlineWatchpointSet *>,WTF::HashTraits<JSC::InlineWatchpointSet *>,WTF::HashTableTraits>::begin(0);
          v161 = (uint64_t *)v158;
LABEL_197:
          v162 = 0;
LABEL_170:
          if (v162 != v160)
          {
            while (1)
            {
              v163 = *v160;
              if ((WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::remove(&v238, *v160, v159, v149, v150, v151, v152, v153) & 1) == 0)break;
              while (++v160 != v161)
              {
                if ((unint64_t)(*v160 + 1) > 1)
                  goto LABEL_176;
              }
              v160 = v161;
LABEL_176:
              if (v160 == v162)
                goto LABEL_177;
            }
            if (v163)
            {
              v172 = *(_BYTE **)(v163 + 8);
              v173 = *(unsigned int *)(v163 + 4) | ((unint64_t)((*(_DWORD *)(v163 + 16) >> 2) & 1) << 32);
            }
            else
            {
              v172 = 0;
              v173 = 0x100000000;
            }
            v174 = (int8x16_t *)"Proxy object's 'target' has the non-configurable property '";
            v175 = 60;
            goto LABEL_204;
          }
LABEL_177:
          if ((v135 & 1) == 0)
          {
            v164 = v232;
            v165 = WTF::HashSet<JSC::InlineWatchpointSet *,WTF::DefaultHash<JSC::InlineWatchpointSet *>,WTF::HashTraits<JSC::InlineWatchpointSet *>,WTF::HashTableTraits>::begin(v232);
            v166 = v165;
            v167 = (uint64_t *)v158;
            if (v164)
              v168 = &v164[*((unsigned int *)v164 - 1)];
            else
              v168 = 0;
            if (v168 != v165)
            {
              while (1)
              {
                v169 = *v166;
                if ((WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::remove(&v238, *v166, v159, v149, v150, v151, v152, v153) & 1) == 0)break;
                while (++v166 != v167)
                {
                  if ((unint64_t)(*v166 + 1) > 1)
                    goto LABEL_186;
                }
                v166 = v167;
LABEL_186:
                if (v166 == v168)
                  goto LABEL_187;
              }
              if (v169)
              {
                v172 = *(_BYTE **)(v169 + 8);
                v173 = *(unsigned int *)(v169 + 4) | ((unint64_t)((*(_DWORD *)(v169 + 16) >> 2) & 1) << 32);
              }
              else
              {
                v172 = 0;
                v173 = 0x100000000;
              }
              v174 = (int8x16_t *)"Proxy object's non-extensible 'target' has configurable property '";
              v175 = 67;
LABEL_204:
              WTF::makeString<WTF::ASCIILiteral,WTF::StringView,WTF::ASCIILiteral>(v174, v175, v172, v173, (int8x16_t *)"' that was not in the result from the 'ownKeys' trap", 53, (int **)v230);
              JSC::throwTypeError((unint64_t)a2, v247, v230);
              v176 = v230[0];
              v230[0] = 0;
              if (v176)
              {
                if (*(_DWORD *)v176 == 2)
                {
                  WTF::StringImpl::~StringImpl(v176, (WTF::AtomStringImpl *)v158, v159, v149, v150, v151, v152, v153);
                  WTF::fastFree(v209, v210, v211, v212, v213, v214, v215, v216);
                }
                else
                {
                  *(_DWORD *)v176 -= 2;
                }
              }
              goto LABEL_207;
            }
LABEL_187:
            if (v238 && *(_DWORD *)(v238 - 12))
              JSC::throwTypeError((unint64_t)a2, v247, (uint64_t)"Proxy handler's 'ownKeys' method returned a key that was not present in its non-extensible target", 98);
          }
LABEL_207:
          if (v232)
            WTF::fastFree((unint64_t)(v232 - 2), v158, v159, v149, v150, v151, v152, v153);
          if (v233)
            WTF::fastFree((unint64_t)(v233 - 2), v158, v159, v149, v150, v151, v152, v153);
          goto LABEL_211;
        }
        if (v33 == 35)
        {
          if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 0x20) == 0)
          {
            v127 = *(WTF::StringImpl **)(*(_QWORD *)(v30 + 8) - 16);
            v234 = v127;
            if ((unint64_t)v127 >= 0xFFFE000000000000)
            {
              v34 = v127 & ~((int)v127 >> 31);
              goto LABEL_11;
            }
            goto LABEL_135;
          }
LABEL_134:
          v125 = v227;
          v234 = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)v30, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)v227 + 5244) + 1768), v25, v26, v27, v28, v29);
          if (*((_DWORD *)v125 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v227, v126, (uint64_t)v24, v25, v26, v27, v28, v29))
          {
            v34 = 0;
            goto LABEL_11;
          }
LABEL_135:
          v34 = JSC::JSValue::toLength(&v234, a2, (uint64_t)v24, v25, v26, v27, v28, v29, v31);
          goto LABEL_11;
        }
        if (v33 != 33)
        {
          if (v33 == 34)
          {
            v34 = JSC::ScopedArguments::length((JSC::ScopedArguments *)v30, a2, (uint64_t)v24, v25, v26, v27, v28, v29);
            goto LABEL_11;
          }
          goto LABEL_134;
        }
        v170 = *(_QWORD *)(v30 + 40);
        if (!v170
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v170 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          LODWORD(v171) = *(_DWORD *)(v30 + 32);
LABEL_195:
          v34 = v171;
          goto LABEL_11;
        }
        v217 = v227;
        v171 = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)v30, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)v227 + 5244) + 1768), v25, v26, v27, v28, v29);
        v234 = v171;
        if (!*((_DWORD *)v217 + 20)
          || !JSC::VM::hasExceptionsAfterHandlingTraps(v227, (uint64_t)v23, (uint64_t)v24, v25, v26, v27, v28, v29))
        {
          if ((unint64_t)v171 >= 0xFFFE000000000000)
            goto LABEL_195;
          v219 = (unint64_t)v171 - 0x2000000000000;
          if ((unint64_t)v171 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            JSC::JSValue::toNumberSlowCase(&v234, a2, (uint64_t)v24, v25, v26, v27, v28, v29, v218);
            v219 = v223;
          }
          v220 = (v219 >> 52) & 0x7FF;
          if ((v220 - 1023) <= 0x53)
          {
            v221 = v219 >> (51 - (v219 >> 52));
            if (v220 > 0x433)
              LODWORD(v221) = v219 << ((v219 >> 52) - 51);
            if (v220 >= 0x41F)
              v222 = v221;
            else
              v222 = (((1 << ((v219 >> 52) + 1)) - 1) & v221) + (1 << ((v219 >> 52) + 1));
            if ((v219 & 0x8000000000000000) == 0)
              LODWORD(v171) = v222;
            else
              LODWORD(v171) = -v222;
            goto LABEL_195;
          }
        }
        LODWORD(v171) = 0;
        goto LABEL_195;
      }
      JSC::throwTypeError((unint64_t)a2, v247, (uint64_t)"Proxy handler's 'ownKeys' method must return an object", 55);
    }
LABEL_75:
    JSC::MarkedVectorBase::~MarkedVectorBase(v22, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
  }
}

uint64_t WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::remove(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v22;

  v8 = *a1;
  if (!*a1)
    return 0;
  v9 = *(_DWORD *)(v8 - 8);
  v10 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = *(_QWORD *)(v8 + 8 * v13);
  if (v14 != a2)
  {
    v22 = 1;
    while (v14)
    {
      v13 = ((_DWORD)v13 + v22) & v9;
      v14 = *(_QWORD *)(v8 + 8 * v13);
      ++v22;
      if (v14 == a2)
        goto LABEL_3;
    }
    v13 = *(unsigned int *)(v8 - 4);
  }
LABEL_3:
  if (v13 == *(_DWORD *)(v8 - 4))
    return 0;
  *(_QWORD *)(v8 + 8 * v13) = -1;
  ++*(_DWORD *)(*a1 - 16);
  v15 = *a1;
  if (*a1)
    v16 = *(_DWORD *)(v15 - 12) - 1;
  else
    v16 = -1;
  *(_DWORD *)(v15 - 12) = v16;
  v17 = *a1;
  if (*a1)
  {
    v18 = 6 * *(_DWORD *)(v17 - 12);
    v19 = *(_DWORD *)(v17 - 4);
    if (v18 < v19 && v19 >= 9)
      WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::rehash(a1, v19 >> 1, 0, a4, a5, a6, a7, a8);
  }
  return 1;
}

BOOL JSC::ProxyObject::isRevoked(JSC::ProxyObject *this)
{
  return *((_QWORD *)this + 3) == 2;
}

void JSC::ProxyRevoke::visitChildren(JSC::ProxyRevoke *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v18;

  JSC::InternalFunction::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 0xFFFE000000000002) == 0 && v16 != 0)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_12;
    }
    else
    {
      v18 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v18)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v18, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_12;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_12:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::ProxyRevoke::visitChildren(JSC::ProxyRevoke *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    result = JSC::InternalFunction::visitChildren(this, a2, a3);
    if ((*((_QWORD *)this + 6) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t JSC::ProxyRevoke::create(JSC::ProxyRevoke *this, JSC::VM *a2, JSC::Structure *a3, JSC::ProxyObject *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  unint64_t SlowCase;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v11 = (_QWORD *)*((_QWORD *)this + 5087);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::proxyRevokeSpaceSlow((JSC::Heap **)this + 4694);
  SlowCase = v11[3];
  if (SlowCase >= v11[4])
  {
    SlowCase = v11[5];
    if ((SlowCase & 1) != 0)
    {
      v19 = (uint64_t)v11;
      JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v19, (uint64_t)this + 192, 64, 0, 0, v20, v21, v22);
      goto LABEL_5;
    }
    v18 = *(_QWORD *)(SlowCase + 8) ^ v11[6];
    v11[4] = SlowCase + HIDWORD(v18);
    v11[5] = SlowCase + (int)v18;
  }
  v11[3] = SlowCase + 64;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v13 = JSC::InternalFunction::InternalFunction(SlowCase, (uint64_t)this, (unint64_t)a2, (uint64_t)JSC::performProxyRevoke, 0);
  *(_QWORD *)(SlowCase + 48) = a3;
  JSC::InternalFunction::finishCreation(v13, this, 0, (JSC::VM *)&WTF::emptyStringData, 0, v14, v15, v16);
  return SlowCase;
}

uint64_t JSC::performProxyRevoke(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;

  v3 = *((_QWORD *)a2 + 3);
  v4 = *(_QWORD *)(v3 + 48);
  if (v4 == 2)
    return 10;
  v5 = *(_QWORD *)(v4 + 24);
  v6 = v5 != 2 && (v5 & 0xFFFE000000000002) == 0;
  if (v6 && *(unsigned __int8 *)(v5 + 5) > 0x16u)
  {
    *(_QWORD *)(v4 + 24) = 2;
    *(_QWORD *)(v3 + 48) = 2;
    return 10;
  }
  result = 1282;
  __break(0xC471u);
  return result;
}

uint64_t JSC::RandomizingFuzzerAgent::RandomizingFuzzerAgent(uint64_t result)
{
  unint64_t v1;

  *(_QWORD *)result = off_1E35ACBC0;
  LODWORD(v1) = qword_1ECF4C664;
  *(_DWORD *)(result + 8) = qword_1ECF4C664;
  if ((_DWORD)v1)
    v1 = v1;
  else
    v1 = 1;
  *(_QWORD *)(result + 16) = v1;
  *(_QWORD *)(result + 24) = ((v1 >> 26) | (v1 << 23)) ^ ((v1 ^ (v1 << 23)) >> 17);
  *(_BYTE *)(result + 32) = 0;
  return result;
}

WTF::PrintStream *JSC::RandomizingFuzzerAgent::getPrediction(JSC::RandomizingFuzzerAgent *this, JSC::CodeBlock *a2, const JSC::CodeOrigin *a3, WTF::PrintStream *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  WTF::PrintStream *v19;
  unint64_t v20;
  void *v21;
  WTF *v22;
  WTF *v23;
  int v24;
  WTF::PrintStream *v26;
  WTF::PrintStream *v27;
  int v28;
  WTF *v29;
  WTF *v30;

  v12 = (unsigned __int8 *)this + 32;
  if (__ldaxr((unsigned __int8 *)this + 32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 32);
LABEL_5:
  v14 = *((_QWORD *)this + 3);
  v15 = *((_QWORD *)this + 2) ^ (*((_QWORD *)this + 2) << 23);
  v16 = (v14 >> 26) ^ (v15 >> 17) ^ v14 ^ v15;
  v17 = v16 + v14;
  v18 = ((v14 ^ (v14 << 23)) >> 17) ^ (v16 >> 26) ^ v14 ^ (v14 << 23) ^ v16;
  *((_QWORD *)this + 2) = v16;
  *((_QWORD *)this + 3) = v18;
  v19 = (WTF::PrintStream *)(((_DWORD)v18 + (_DWORD)v16) & 0xFFFFFFF7 | ((unint64_t)(v17 & 0x3FFF) << 32));
  if (BYTE4(qword_1ECF4C664))
  {
    JSC::CodeBlock::inferredName(a2);
    JSC::CodeBlock::hashAsStringIfPossible(a2, (uint64_t *)&v29);
    v20 = *(_QWORD *)a3;
    if ((*(_QWORD *)a3 & 2) != 0)
    {
      LODWORD(v20) = -1;
    }
    else if ((v20 & 1) != 0)
    {
      LODWORD(v20) = *(_DWORD *)((v20 & 0xFFFFFFFF8) + 8);
    }
    else
    {
      v20 >>= 36;
    }
    v28 = v20;
    v26 = v19;
    v27 = a4;
    WTF::dataLog<char [21],WTF::CString,char [2],WTF::CString,char [18],JSC::BytecodeIndex,char [13],JSC::SpeculationDump,char [14],JSC::SpeculationDump,char [2],char [2]>(&v30, &v29, (JSC::BytecodeIndex *)&v28, &v27, &v26);
    v22 = v29;
    v29 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        WTF::fastFree((unint64_t)v22, v21, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v22;
    }
    v23 = v30;
    v30 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        WTF::fastFree((unint64_t)v23, v21, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v23;
    }
  }
  v24 = __ldxr(v12);
  if (v24 == 1)
  {
    if (!__stlxr(0, v12))
      return v19;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v12, 0, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  return v19;
}

void JSC::ReflectObject::finishCreation(JSC::ReflectObject *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v5 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x700000002;
  *(_QWORD *)(v6 + 8) = "Reflect";
  *(_DWORD *)(v6 + 16) = 4;
  v34 = (WTF::StringImpl *)v6;
  v13 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v34, v7, v8, v9, v10, v11, v12);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v5, v13, 6, v14, v15, v16, v17);
  v25 = v34;
  v34 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
}

void JSC::RegExp::destroy(JSC::RegExp *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  JSC::Yarr::YarrCodeBlock *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::Yarr::BytecodePattern *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    v10 = *(_QWORD **)(v9 + 24);
    if (v10)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v10, a2, a3, a4, a5, a6, a7, a8);
    v11 = *(unsigned int *)(v9 + 20);
    if ((_DWORD)v11)
    {
      v40 = *(WTF::StringImpl ***)(v9 + 8);
      v41 = 8 * v11;
      do
      {
        v42 = *v40;
        *v40 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
          {
            WTF::StringImpl::~StringImpl(v42, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
          }
          else
          {
            *(_DWORD *)v42 -= 2;
          }
        }
        ++v40;
        v41 -= 8;
      }
      while (v41);
    }
    v12 = *(_QWORD *)(v9 + 8);
    if (v12)
    {
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = (JSC::Yarr::YarrCodeBlock *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
  {
    JSC::Yarr::YarrCodeBlock::~YarrCodeBlock(v13, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  v22 = (JSC::Yarr::BytecodePattern *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v22)
  {
    JSC::Yarr::BytecodePattern::~BytecodePattern(v22, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
  }
  v31 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
}

void JSC::RegExp::dumpToStream(JSC::RegExp *this, const JSC::JSCell *a2, WTF::PrintStream *a3)
{
  __int16 v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  char *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  WTF::PrintStream *v26;
  const char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  char v40;
  void (**v41)(WTF::StringPrintStream *__hidden);
  char v42;
  void (**v43)(WTF::StringPrintStream *__hidden);
  _BYTE *v44;
  __int128 v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = *((_WORD *)this + 9);
  if ((v4 & 1) != 0)
  {
    LOBYTE(v43) = 100;
    v5 = 1;
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else
  {
    v5 = 0;
    if ((v4 & 2) == 0)
      goto LABEL_3;
  }
  v35 = v5++;
  *(_BYTE *)((unint64_t)&v43 | v35) = 103;
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  v36 = v5++;
  *(_BYTE *)((unint64_t)&v43 | v36) = 105;
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
LABEL_33:
    *((_BYTE *)&v43 + v5++) = 115;
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_32:
  v37 = v5++;
  *(_BYTE *)((unint64_t)&v43 | v37) = 109;
  if ((v4 & 0x10) != 0)
    goto LABEL_33;
LABEL_6:
  if ((v4 & 0x20) == 0)
    goto LABEL_7;
LABEL_34:
  *((_BYTE *)&v43 + v5++) = 117;
LABEL_7:
  v6 = *((_QWORD *)this + 1);
  if ((v4 & 0x40) != 0)
  {
    *((_BYTE *)&v43 + v5++) = 118;
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_9;
  }
  *((_BYTE *)&v43 + v5++) = 121;
LABEL_9:
  *((_BYTE *)&v43 + v5) = 0;
  v41 = v43;
  v42 = (char)v44;
  v43 = off_1E3572250;
  v44 = v46;
  v45 = xmmword_199122F80;
  v46[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v43, "%s", "/");
  if (v6)
  {
    v13 = *(char **)(v6 + 8);
    v14 = *(unsigned int *)(v6 + 4);
    if ((*(_BYTE *)(v6 + 16) & 4) != 0)
      WTF::StringImpl::utf8ForCharacters(v13, v14, (uint64_t)&v38, v12);
    else
      WTF::StringImpl::utf8ForCharacters((uint64_t)v13, v14, 0, v7, v8, v9, v10, v11, (uint64_t)&v38);
    WTF::printExpectedCStringHelper((WTF::PrintStream *)&v43, "StringImpl*", &v38);
    if (v39 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v39])(&v40, &v38);
  }
  else
  {
    WTF::PrintStream::printf((WTF::PrintStream *)&v43, "%s", "(null StringImpl*)");
  }
  WTF::PrintStream::printf((WTF::PrintStream *)&v43, "%s", "/");
  WTF::PrintStream::printf((WTF::PrintStream *)&v43, "%s", (const char *)&v41);
  v43[5]((WTF::StringPrintStream *)&v43);
  v22 = v44;
  if (!v44)
  {
    v24 = 0;
    v25 = 0;
LABEL_21:
    WTF::fastFree(v25, v15, v16, v17, v18, v19, v20, v21);
    goto LABEL_22;
  }
  v23 = v45;
  if ((unint64_t)v45 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x198B8A11CLL);
  }
  v24 = WTF::fastMalloc((WTF *)(v45 + 17));
  *(_DWORD *)v24 = 1;
  *(_QWORD *)(v24 + 8) = v23;
  memcpy((void *)(v24 + 16), v22, v23);
  *(_BYTE *)(v24 + 16 + v23) = 0;
  v25 = (unint64_t)v44;
  if (v44 != v46)
    goto LABEL_21;
LABEL_22:
  v26 = (WTF::PrintStream *)(*(uint64_t (**)(const JSC::JSCell *))(*(_QWORD *)a2 + 32))(a2);
  v27 = (const char *)(v24 + 16);
  if (!v24)
    v27 = 0;
  WTF::PrintStream::printf(v26, "%s", v27);
  (*(void (**)(const JSC::JSCell *))(*(_QWORD *)a2 + 40))(a2);
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
      WTF::fastFree(v24, v28, v29, v30, v31, v32, v33, v34);
    else
      --*(_DWORD *)v24;
  }
}

uint64_t JSC::RegExp::estimatedSize(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    v1 = 48 * *(unsigned int *)(*(_QWORD *)v1 + 8);
  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = v2[3];
    if (v3)
      v3 = *(unsigned int *)(v3 + 4);
    v4 = v2[5];
    if (v4)
      v4 = *(unsigned int *)(v4 + 4);
    v5 = v2[7];
    if (v5)
      v5 = *(unsigned int *)(v5 + 4);
    v6 = v2[9];
    if (v6)
      v6 = *(unsigned int *)(v6 + 4);
    v1 += v3 + v4 + v5 + v6;
  }
  if ((a1 & 8) != 0)
    v7 = *(_QWORD *)(a1 - 88);
  else
    v7 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v7 + v1;
}

unint64_t *std::unique_ptr<JSC::RegExp::RareData>::operator=[abi:sn180100](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v11 = *(_QWORD **)(v10 + 24);
    if (v11)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v11, a2, a3, a4, a5, a6, a7, a8);
    v12 = *(unsigned int *)(v10 + 20);
    if ((_DWORD)v12)
    {
      v15 = *(WTF::StringImpl ***)(v10 + 8);
      v16 = 8 * v12;
      do
      {
        v17 = *v15;
        *v15 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::~StringImpl(v17, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
          }
          else
          {
            *(_DWORD *)v17 -= 2;
          }
        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
    v13 = *(_QWORD *)(v10 + 8);
    if (v13)
    {
      *(_QWORD *)(v10 + 8) = 0;
      *(_DWORD *)(v10 + 16) = 0;
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unint64_t *std::unique_ptr<JSC::RegExp::RareData>::~unique_ptr[abi:sn180100](unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *(_QWORD **)(v9 + 24);
    if (v10)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v10, a2, a3, a4, a5, a6, a7, a8);
    v11 = *(unsigned int *)(v9 + 20);
    if ((_DWORD)v11)
    {
      v14 = *(WTF::StringImpl ***)(v9 + 8);
      v15 = 8 * v11;
      do
      {
        v16 = *v14;
        *v14 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
          {
            WTF::StringImpl::~StringImpl(v16, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
          }
          else
          {
            *(_DWORD *)v16 -= 2;
          }
        }
        ++v14;
        v15 -= 8;
      }
      while (v15);
    }
    v12 = *(_QWORD *)(v9 + 8);
    if (v12)
    {
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unint64_t JSC::RegExp::create(uint64_t a1, const WTF::StringImpl *a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::RegExpCache::lookupOrCreate(*(_QWORD *)(a1 + 93032), a1, a2, a3, a5, a6, a7, a8);
}

unint64_t JSC::RegExpCache::lookupOrCreate(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 *v20;
  unsigned int *v21;
  WTF::StringImpl *v22;
  int v24;
  unsigned int v25;
  unsigned int v26;
  WTF *v27;
  BOOL v29;
  BOOL v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v37;
  int v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  __int16 v42;
  int v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned __int16 *v65;
  unsigned int *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  BOOL v76;
  uint64_t v77;
  BOOL v78;
  unsigned int v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int16 *v100;
  unsigned int *v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  WTF::AtomStringImpl *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  WTF::AtomStringImpl *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  BOOL v174;
  uint64_t v175;
  _OWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t Allocator;
  unint64_t v196;
  uint64_t SlowCase;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  unsigned int v202;
  int v203;
  unsigned int v204;
  unsigned int v205;
  WTF::StringImpl *v207;
  int v208;
  uint64_t v209;
  WTF::AtomStringImpl *v210;
  _QWORD *v212;
  _OWORD *v213;
  unsigned __int16 v214;
  _BYTE v215[6];
  uint64_t v216;
  _OWORD *v217;
  uint64_t v218;
  _OWORD v219[3];
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;

  v9 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v9 += 2;
  v10 = (unsigned __int16)a4;
  v11 = v9 & 0xFFFFFFFFFFLL;
  v210 = (WTF::AtomStringImpl *)(v9 & 0xFFFFFFFFFFLL);
  v13 = (_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 8);
  v212 = (_QWORD *)(a1 + 8);
  v208 = (unsigned __int16)a4;
  if (v12)
  {
    v14 = *(_DWORD *)(a1 + 16);
    v15 = v14 - 1;
    v16 = *(_DWORD *)(a1 + 24);
    v17 = *(_DWORD *)((v9 & 0xFFFFFFFFFFLL) + 0x10);
    if (v17 < 0x100)
    {
      v79 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)(v9 & 0xFFFFFFFFFFLL));
      v10 = v208;
      v13 = v212;
      v11 = v9 & 0xFFFFFFFFFFLL;
      v18 = v79;
      v12 = *v212;
    }
    else
    {
      v18 = v17 >> 8;
    }
    v19 = (v18 ^ v16) & v15;
    v20 = (unsigned __int16 *)(v12 + 16 * v19);
    v21 = (unsigned int *)(v20 + 1);
    v22 = (WTF::StringImpl *)(*(unsigned int *)(v20 + 1) | ((unint64_t)*((unsigned __int8 *)v20 + 6) << 32));
    if (*v20 || v22 != 0)
    {
      v24 = -1;
      if (v11)
      {
        do
        {
          v25 = *((_DWORD *)v22 + 4);
          if (v25 < 0x100)
          {
            v26 = WTF::StringImpl::hashSlowCase(v22);
            v10 = v208;
            v13 = v212;
            v11 = v9 & 0xFFFFFFFFFFLL;
          }
          else
          {
            v26 = v25 >> 8;
          }
          if (++v24 > ((v19 + v14 - ((v26 ^ v16) & v15)) & v15))
            break;
          if (v26 == v18 && *v20 == v10)
          {
            v27 = (WTF *)(*v21 | ((unint64_t)*((unsigned __int8 *)v21 + 4) << 32));
            if (v27)
            {
              if (v27 == (WTF *)v11)
                goto LABEL_40;
              v29 = WTF::equal(v27, (const WTF::StringImpl *)v11, a3);
              v10 = v208;
              v13 = v212;
              v11 = v9 & 0xFFFFFFFFFFLL;
              if (v29)
                goto LABEL_40;
            }
          }
          v19 = (v19 + 1) & v15;
          v20 = (unsigned __int16 *)(*v13 + 16 * v19);
          v21 = (unsigned int *)(v20 + 1);
          v22 = (WTF::StringImpl *)(*(unsigned int *)(v20 + 1) | ((unint64_t)*((unsigned __int8 *)v20 + 6) << 32));
        }
        while (*v20 || v22 != 0);
      }
      else
      {
        do
        {
          v32 = *((_DWORD *)v22 + 4);
          if (v32 <= 0xFF)
          {
            v31 = WTF::StringImpl::hashSlowCase(v22);
            v10 = v208;
            v13 = v212;
            v11 = v9 & 0xFFFFFFFFFFLL;
          }
          else
          {
            v31 = v32 >> 8;
          }
          if (++v24 > ((v19 + v14 - ((v31 ^ v16) & v15)) & v15))
            break;
          if (v31 == v18 && *v20 == v10 && !(*v21 | ((unint64_t)*((unsigned __int8 *)v21 + 4) << 32)))
          {
LABEL_40:
            v33 = *((_QWORD *)v20 + 1);
            if (v33)
            {
              if ((*(_BYTE *)(v33 + 8) & 3) == 0)
              {
                v34 = *(_QWORD *)v33;
                if (*(_QWORD *)v33)
                {
                  v35 = (WTF::StringImpl *)v11;
                  goto LABEL_44;
                }
              }
            }
            break;
          }
          v19 = (v19 + 1) & v15;
          v20 = (unsigned __int16 *)(*v13 + 16 * v19);
          v21 = (unsigned int *)(v20 + 1);
          v22 = (WTF::StringImpl *)(*(unsigned int *)(v20 + 1) | ((unint64_t)*((unsigned __int8 *)v20 + 6) << 32));
          if (*v20)
            v30 = 0;
          else
            v30 = v22 == 0;
        }
        while (!v30);
      }
    }
  }
  v34 = *(_QWORD *)(a2 + 39256);
  if (v34 >= *(_QWORD *)(a2 + 39264))
  {
    v34 = *(_QWORD *)(a2 + 39272);
    if ((v34 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)a2, (JSC::VM *)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(a2 + 39232, a2 + 192, 64, 0, 0);
      LOWORD(v10) = v208;
      v34 = SlowCase;
      goto LABEL_50;
    }
    v194 = *(_QWORD *)(v34 + 8) ^ *(_QWORD *)(a2 + 39280);
    *(_QWORD *)(a2 + 39264) = v34 + HIDWORD(v194);
    *(_QWORD *)(a2 + 39272) = v34 + (int)v194;
  }
  *(_QWORD *)(a2 + 39256) = v34 + 64;
LABEL_50:
  *(_DWORD *)v34 = 0;
  v37 = *(_QWORD *)(a2 + 41616);
  v38 = *(_DWORD *)(v37 + 8);
  *(_DWORD *)v34 = v37 >> 4;
  *(_DWORD *)(v34 + 4) = v38;
  v39 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v39 += 2;
  *(_QWORD *)(v34 + 8) = v39;
  *(_BYTE *)(v34 + 16) = 3;
  *(_WORD *)(v34 + 18) = v10;
  *(_BYTE *)(v34 + 20) = 0;
  *(_DWORD *)(v34 + 24) = 0;
  *(_QWORD *)(v34 + 40) = 0;
  *(_QWORD *)(v34 + 48) = 0;
  *(_QWORD *)(v34 + 32) = 0;
  if (*(_BYTE *)(a2 + 755))
  {
    __dmb(0xAu);
    v39 = *(_QWORD *)(v34 + 8);
  }
  if (v39)
  {
    v40 = *(char **)(v39 + 8);
    v41 = *(unsigned int *)(v39 + 4) | ((unint64_t)((*(_DWORD *)(v39 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v40 = 0;
    v41 = 0x100000000;
  }
  v42 = *(_WORD *)(v34 + 18);
  LOBYTE(v214) = 0;
  *(_WORD *)v215 = v42;
  v216 = 0;
  *(_DWORD *)&v215[2] = 0;
  v217 = v219;
  v218 = 4;
  v219[2] = 0u;
  v220 = 0u;
  v221 = 0u;
  v222 = 0u;
  v223 = 0u;
  v224 = 0u;
  v225 = 0u;
  v226 = 0u;
  v227 = 0u;
  v43 = JSC::Yarr::YarrPattern::compile(&v214, v40, v41);
  *(_BYTE *)(v34 + 20) = v43;
  if (v43)
  {
    *(_BYTE *)(v34 + 16) = 0;
  }
  else
  {
    *(_DWORD *)(v34 + 24) = *(_DWORD *)&v215[2];
    if (HIDWORD(v220) || (_QWORD)v221 && *(_DWORD *)(v221 - 12))
    {
      v176 = (_OWORD *)WTF::fastMalloc((WTF *)0x20);
      *v176 = 0u;
      v176[1] = 0u;
      v213 = v176;
      std::unique_ptr<JSC::RegExp::RareData>::operator=[abi:sn180100]((unint64_t *)(v34 + 48), (unint64_t *)&v213, v177, v178, v179, v180, v181, v182);
      std::unique_ptr<JSC::RegExp::RareData>::~unique_ptr[abi:sn180100]((unint64_t *)&v213, v183, v184, v185, v186, v187, v188, v189);
      v190 = *(_QWORD *)(v34 + 48);
      *(_DWORD *)v190 = HIDWORD(v216);
      v191 = *(_QWORD *)(v190 + 8);
      *(_QWORD *)(v190 + 8) = v220;
      *(_QWORD *)&v220 = v191;
      LODWORD(v191) = *(_DWORD *)(v190 + 16);
      *(_DWORD *)(v190 + 16) = DWORD2(v220);
      DWORD2(v220) = v191;
      LODWORD(v191) = *(_DWORD *)(v190 + 20);
      *(_DWORD *)(v190 + 20) = HIDWORD(v220);
      HIDWORD(v220) = v191;
      v192 = *(_QWORD *)(v34 + 48);
      v193 = *(_QWORD *)(v192 + 24);
      *(_QWORD *)(v192 + 24) = v221;
      *(_QWORD *)&v221 = v193;
    }
  }
  JSC::Yarr::YarrPattern::~YarrPattern((JSC::Yarr::YarrPattern *)&v214, v44, v45, v46, v47, v48, v49, v50);
  if ((v34 & 8) != 0)
    v51 = (v34 - 112) | 1;
  else
    v51 = v34 & 0xFFFFFFFFFFFFC000;
  v52 = (uint64_t)v212;
  if ((v51 & 1) != 0)
    v53 = (_QWORD *)(v51 + 47);
  else
    v53 = (_QWORD *)(*(_QWORD *)v51 + 32);
  v54 = (_QWORD *)v53[2];
  if (!v54)
  {
    Allocator = JSC::WeakSet::findAllocator(v53, v51);
    v52 = (uint64_t)v212;
    v54 = (_QWORD *)Allocator;
  }
  v53[2] = *v54;
  *v54 = v34;
  v54[1] = a1;
  v54[2] = 0;
  v56 = *(unsigned int *)(a1 + 16);
  v55 = *(unsigned int *)(a1 + 20);
  if (10 * v55 >= (unint64_t)(9 * v56)
    || *(_BYTE *)(a1 + 28) && (v52 = (uint64_t)v212, v56 <= 2 * (int)v55))
  {
    if ((_DWORD)v56)
      v196 = (2 * v56);
    else
      v196 = 8;
    WTF::RobinHoodHashTable<JSC::RegExpKey,WTF::KeyValuePair<JSC::RegExpKey,JSC::Weak<JSC::RegExp>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::RegExpKey,JSC::Weak<JSC::RegExp>>>,WTF::DefaultHash<JSC::RegExpKey>,WTF::HashMap<JSC::RegExpKey,JSC::Weak<JSC::RegExp>,WTF::DefaultHash<JSC::RegExpKey>,WTF::HashTraits<JSC::RegExpKey>,WTF::HashTraits<JSC::Weak<JSC::RegExp>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::RegExpKey>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(v52, v196, (uint64_t)a3, a4, a5, a6, a7, a8);
    v56 = *(unsigned int *)(a1 + 16);
  }
  v11 = v9 & 0xFFFFFFFFFFLL;
  v57 = v208;
  v58 = v56 - 1;
  v59 = *(unsigned int *)(a1 + 24);
  v60 = *(_DWORD *)((v9 & 0xFFFFFFFFFFLL) + 0x10);
  v207 = (WTF::StringImpl *)(v9 & 0xFFFFFFFFFFLL);
  if (v60 < 0x100)
  {
    v131 = v56;
    v132 = *(unsigned int *)(a1 + 24);
    v133 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)(v9 & 0xFFFFFFFFFFLL));
    v59 = v132;
    v56 = v131;
    v57 = v208;
    v11 = v9 & 0xFFFFFFFFFFLL;
    v61 = v133;
  }
  else
  {
    v61 = v60 >> 8;
  }
  v62 = (v61 ^ v59) & v58;
  v63 = v212;
  v64 = *v212;
  v65 = (unsigned __int16 *)(*v212 + 16 * v62);
  v66 = (unsigned int *)(v65 + 1);
  v67 = (WTF::StringImpl *)(*(unsigned int *)(v65 + 1) | ((unint64_t)*((unsigned __int8 *)v65 + 6) << 32));
  if (*v65 || v67)
  {
    v72 = 0;
    while (1)
    {
      v73 = *((_DWORD *)v67 + 4);
      if (v73 < 0x100)
      {
        v77 = v56;
        v204 = v59;
        v74 = WTF::StringImpl::hashSlowCase(v67);
        v59 = v204;
        v56 = v77;
        v57 = v208;
        v63 = v212;
        v11 = (uint64_t)v210;
      }
      else
      {
        v74 = v73 >> 8;
      }
      v75 = (v62 + v56 - ((v74 ^ v59) & v58)) & v58;
      if (v72 > v75)
        break;
      if (v74 == v61 && *v65 == v57)
      {
        v171 = *v66 | ((unint64_t)*((unsigned __int8 *)v66 + 4) << 32);
        if (v11 && v171)
        {
          if ((WTF::StringImpl *)v171 == v207)
            goto LABEL_148;
          v172 = v56;
          v173 = v59;
          v174 = WTF::equal((WTF *)v171, v207, a3);
          v59 = v173;
          v56 = v172;
          v57 = v208;
          v63 = v212;
          v11 = (uint64_t)v210;
          if (v174)
          {
LABEL_148:
            v175 = *((_QWORD *)v65 + 1);
            *((_QWORD *)v65 + 1) = v54;
            if (v175)
              *(_QWORD *)(v175 + 8) = 3;
            v35 = v207;
            goto LABEL_44;
          }
        }
        else if (!(v171 | v11))
        {
          goto LABEL_148;
        }
      }
      v62 = ((_DWORD)v62 + 1) & v58;
      ++v72;
      v64 = *v63;
      v65 = (unsigned __int16 *)(*v63 + 16 * v62);
      v66 = (unsigned int *)(v65 + 1);
      v67 = (WTF::StringImpl *)(*(unsigned int *)(v65 + 1) | ((unint64_t)*((unsigned __int8 *)v65 + 6) << 32));
      if (*v65)
        v76 = 0;
      else
        v76 = v67 == 0;
      if (v76)
      {
        v78 = v72 >= 0x80;
        v35 = v207;
        if (v78)
          *(_BYTE *)(a1 + 28) = 1;
        goto LABEL_72;
      }
    }
    if (v72 >= 0x80)
      *(_BYTE *)(a1 + 28) = 1;
    v88 = *v65;
    v214 = *v65;
    v89 = *((unsigned __int8 *)v66 + 4);
    v90 = *v66;
    *v66 = 0;
    *((_BYTE *)v66 + 4) = 0;
    v215[4] = v89;
    *(_DWORD *)v215 = v90;
    v91 = v64 + 16 * v62;
    v94 = *(_QWORD *)(v91 + 8);
    v93 = (uint64_t *)(v91 + 8);
    v92 = v94;
    *v93 = 0;
    v216 = v94;
    v95 = (WTF::StringImpl *)(*v66 | ((unint64_t)*((unsigned __int8 *)v66 + 4) << 32));
    *v66 = 0;
    *((_BYTE *)v66 + 4) = 0;
    v203 = v56;
    v205 = v59;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
      {
        v202 = v88;
        v198 = v90;
        v200 = v92;
        v142 = v89;
        WTF::StringImpl::~StringImpl(v95, (WTF::AtomStringImpl *)v11, v90, a4, a5, a6, a7, a8);
        WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
        v90 = v198;
        v92 = v200;
        v89 = v142;
        v88 = v202;
        v59 = v205;
        LODWORD(v56) = v203;
        LOWORD(v57) = v208;
        v63 = v212;
        v11 = (uint64_t)v210;
      }
      else
      {
        *(_DWORD *)v95 -= 2;
      }
    }
    *(_QWORD *)v65 = 0;
    *((_QWORD *)v65 + 1) = 0;
    *v65 = v57;
    if (v11)
      *(_DWORD *)v207 += 2;
    v96 = (WTF::StringImpl *)(*v66 | ((unint64_t)*((unsigned __int8 *)v66 + 4) << 32));
    *v66 = v11;
    *((_BYTE *)v66 + 4) = BYTE4(v11);
    if (v96)
    {
      if (*(_DWORD *)v96 == 2)
      {
        v151 = (WTF::AtomStringImpl *)v88;
        v152 = v92;
        v153 = v89;
        v154 = v90;
        WTF::StringImpl::~StringImpl(v96, (WTF::AtomStringImpl *)v11, v90, a4, a5, a6, a7, a8);
        WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
        v90 = v154;
        v89 = v153;
        v92 = v152;
        v88 = (unint64_t)v151;
        v59 = v205;
        LODWORD(v56) = v203;
        v63 = v212;
      }
      else
      {
        *(_DWORD *)v96 -= 2;
      }
    }
    v97 = *v93;
    *v93 = (uint64_t)v54;
    if (v97)
      *(_QWORD *)(v97 + 8) = 3;
    v98 = ((_DWORD)v62 + 1) & v58;
    v99 = *v63;
    v100 = (unsigned __int16 *)(*v63 + 16 * v98);
    v101 = (unsigned int *)(v100 + 1);
    v102 = (WTF::StringImpl *)(*(unsigned int *)(v100 + 1) | ((unint64_t)*((unsigned __int8 *)v100 + 6) << 32));
    if (*v100 || v102)
    {
      v103 = v92;
      v104 = v88;
      v105 = v90 | (v89 << 32);
      do
      {
        v106 = *((_DWORD *)v102 + 4);
        if (v106 < 0x100)
        {
          v117 = v59;
          v201 = v88;
          v118 = v92;
          v209 = v103;
          v199 = v104;
          v107 = WTF::StringImpl::hashSlowCase(v102);
          v104 = v199;
          v103 = v209;
          v92 = v118;
          LODWORD(v88) = v201;
          v59 = v117;
          LODWORD(v56) = v203;
          v63 = v212;
        }
        else
        {
          v107 = v106 >> 8;
        }
        v108 = v75 + 1;
        v75 = (v98 + v56 - ((v107 ^ v59) & v58)) & v58;
        if (v108 <= v75)
        {
          v75 = v108;
        }
        else
        {
          v88 = *v100;
          v109 = *((unsigned __int8 *)v101 + 4);
          v110 = *v101;
          *v101 = 0;
          *((_BYTE *)v101 + 4) = 0;
          v111 = v99 + 16 * v98;
          v113 = *(_QWORD *)(v111 + 8);
          v112 = (uint64_t *)(v111 + 8);
          v92 = v113;
          *v112 = 0;
          *v100 = v104;
          v114 = (WTF::StringImpl *)(*v101 | ((unint64_t)*((unsigned __int8 *)v101 + 4) << 32));
          *v101 = v105;
          *((_BYTE *)v101 + 4) = BYTE4(v105);
          if (v114)
          {
            if (*(_DWORD *)v114 == 2)
            {
              v119 = (WTF::AtomStringImpl *)v88;
              v120 = v92;
              v121 = v103;
              WTF::StringImpl::~StringImpl(v114, (WTF::AtomStringImpl *)v104, v90, a4, a5, a6, a7, a8);
              WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
              v103 = v121;
              v92 = v120;
              v88 = (unint64_t)v119;
              v59 = v205;
              LODWORD(v56) = v203;
              v63 = v212;
            }
            else
            {
              *(_DWORD *)v114 -= 2;
            }
          }
          v105 = v110 | (v109 << 32);
          v115 = *v112;
          *v112 = v103;
          if (v115)
            *(_QWORD *)(v115 + 8) = 3;
          v103 = v92;
          v104 = v88;
        }
        v98 = ((_DWORD)v98 + 1) & v58;
        v99 = *v63;
        v100 = (unsigned __int16 *)(*v63 + 16 * v98);
        v101 = (unsigned int *)(v100 + 1);
        v102 = (WTF::StringImpl *)(*(unsigned int *)(v100 + 1) | ((unint64_t)*((unsigned __int8 *)v100 + 6) << 32));
        if (*v100)
          v116 = 0;
        else
          v116 = v102 == 0;
      }
      while (!v116);
      v214 = v88;
      *(_DWORD *)v215 = v105;
      v215[4] = BYTE4(v105);
      v216 = v92;
    }
    WTF::GenericHashTraits<WTF::KeyValuePair<JSC::RegExpKey,JSC::Weak<JSC::RegExp>>>::assignToEmpty<WTF::KeyValuePair<JSC::RegExpKey,JSC::Weak<JSC::RegExp>>,WTF::KeyValuePair<JSC::RegExpKey,JSC::Weak<JSC::RegExp>>>((uint64_t)v100, (uint64_t)&v214, v90, a4, a5, a6, a7, a8);
    v69 = a1;
    v35 = v207;
    if (v216)
      *(_QWORD *)(v216 + 8) = 3;
    v130 = (WTF::StringImpl *)(*(unsigned int *)v215 | ((unint64_t)v215[4] << 32));
    v11 = (uint64_t)v210;
    if (v130)
    {
      if (*(_DWORD *)v130 == 2)
      {
        WTF::StringImpl::~StringImpl(v130, v210, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
        v11 = (uint64_t)v210;
      }
      else
      {
        *(_DWORD *)v130 -= 2;
      }
    }
  }
  else
  {
    v35 = v207;
LABEL_72:
    *v65 = v57;
    if (v11)
      *(_DWORD *)v35 += 2;
    v68 = (WTF::StringImpl *)(*v66 | ((unint64_t)*((unsigned __int8 *)v66 + 4) << 32));
    *v66 = v11;
    *((_BYTE *)v66 + 4) = BYTE4(v11);
    v69 = a1;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
      {
        WTF::StringImpl::~StringImpl(v68, (WTF::AtomStringImpl *)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
        v11 = (uint64_t)v210;
      }
      else
      {
        *(_DWORD *)v68 -= 2;
      }
    }
    v70 = v64 + 16 * v62;
    v71 = *(_QWORD *)(v70 + 8);
    *(_QWORD *)(v70 + 8) = v54;
    if (v71)
      *(_QWORD *)(v71 + 8) = 3;
  }
  ++*(_DWORD *)(v69 + 20);
LABEL_44:
  if (v11)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, (WTF::AtomStringImpl *)v11, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  return v34;
}

void JSC::RegExp::byteCodeCompileIfNecessary(JSC::RegExp *this, JSC::VM *a2)
{
  JSC::Yarr::BytecodePattern **v2;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::Yarr::BytecodePattern *v28;
  _BYTE v29[216];

  v2 = (JSC::Yarr::BytecodePattern **)((char *)this + 32);
  if (!*((_QWORD *)this + 4))
  {
    v5 = *((_QWORD *)this + 1);
    if (v5)
    {
      v6 = *(char **)(v5 + 8);
      v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v6 = 0;
      v7 = 0x100000000;
    }
    JSC::Yarr::YarrPattern::YarrPattern((uint64_t)v29, v6, v7, *((_WORD *)this + 9), (_BYTE *)this + 20);
    if (*((_BYTE *)this + 20)
      || (JSC::Yarr::byteCompile((unint64_t)v29, (uint64_t)a2 + 93040, (_BYTE *)this + 20, (uint64_t)a2 + 93048, (uint64_t *)&v28), std::unique_ptr<JSC::Yarr::BytecodePattern>::operator=[abi:sn180100](v2, &v28, v15, v16, v17, v18, v19, v20), std::unique_ptr<JSC::Yarr::BytecodePattern>::~unique_ptr[abi:sn180100](&v28, v21, v22, v23, v24, v25, v26, v27), !*v2))
    {
      *((_BYTE *)this + 16) = 0;
    }
    JSC::Yarr::YarrPattern::~YarrPattern((JSC::Yarr::YarrPattern *)v29, v8, v9, v10, v11, v12, v13, v14);
  }
}

JSC::Yarr::BytecodePattern **std::unique_ptr<JSC::Yarr::BytecodePattern>::operator=[abi:sn180100](JSC::Yarr::BytecodePattern **a1, JSC::Yarr::BytecodePattern **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Yarr::BytecodePattern *v9;
  JSC::Yarr::BytecodePattern *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    JSC::Yarr::BytecodePattern::~BytecodePattern(v10, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  return a1;
}

JSC::Yarr::BytecodePattern **std::unique_ptr<JSC::Yarr::BytecodePattern>::~unique_ptr[abi:sn180100](JSC::Yarr::BytecodePattern **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Yarr::BytecodePattern *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    JSC::Yarr::BytecodePattern::~BytecodePattern(v9, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return a1;
}

void JSC::RegExp::compile(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  unsigned __int8 *v7;
  int v8;
  int v9;
  uint64_t v10;
  int **v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned __int16 v15;
  int v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::Yarr::YarrCodeBlock *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  JSC::Yarr::BytecodePattern *v51;
  JSC::Yarr::BytecodePattern *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::Yarr::BytecodePattern *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  JSC::Yarr::BytecodePattern *v84;
  __int128 v85;
  uint64_t v86;
  unsigned __int16 v87[2];
  int v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  _BYTE v92[176];

  v7 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v8 = *v7;
    if ((v8 & 0x40) != 0)
      break;
    v9 = __ldaxr(v7);
    if (v9 == v8)
    {
      if (!__stxr(v8 | 0x40, v7))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 4);
LABEL_8:
  v11 = (int **)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v12 = *(unsigned int *)(v10 + 16);
    v13 = *(char **)(v10 + 8);
    LODWORD(v10) = *(_DWORD *)(v10 + 4);
    v14 = (v12 >> 2) & 1;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  v15 = *(_WORD *)(a1 + 18);
  LOBYTE(v87[0]) = 0;
  v87[1] = v15;
  v89 = 0;
  v88 = 0;
  v90 = v92;
  v91 = 4;
  memset(&v92[32], 0, 144);
  v16 = JSC::Yarr::YarrPattern::compile(v87, v13, v10 | (unint64_t)(v14 << 32));
  *(_BYTE *)(a1 + 20) = v16;
  if (v16)
    goto LABEL_35;
  if (*(unsigned __int8 *)(a1 + 16) - 1 < 2)
    goto LABEL_12;
  v70 = *(_QWORD *)(a2 + 93032);
  v71 = *v11;
  if (!*v11 || (v72 = *v71, v73 = v71[1], *v71 += 2, v73 <= 0x100))
  {
    v74 = *(unsigned int *)(v70 + 32);
    if (v74 >= 0x40)
    {
      __break(1u);
      return;
    }
    *(_QWORD *)(v70 + 8 * v74 + 40) = a1;
    if ((_DWORD)v74 == 63)
      v75 = 0;
    else
      v75 = v74 + 1;
    *(_DWORD *)(v70 + 32) = v75;
    if (!v71)
      goto LABEL_49;
    v72 = *v71 - 2;
  }
  if (v72)
  {
    *v71 = v72;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v71, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
  }
LABEL_49:
  *(_BYTE *)(a1 + 16) = 2;
LABEL_12:
  if ((v87[0] & 8) == 0 && (v87[0] & 4) == 0 && byte_1ECF4C244)
  {
    v24 = *(_QWORD *)(a1 + 40);
    if (!v24)
    {
      v24 = WTF::fastMalloc((WTF *)0x70);
      *(_OWORD *)v24 = 0u;
      *(_OWORD *)(v24 + 16) = 0u;
      *(_OWORD *)(v24 + 32) = 0u;
      *(_OWORD *)(v24 + 48) = 0u;
      *(_OWORD *)(v24 + 64) = 0u;
      *(_OWORD *)(v24 + 80) = 0u;
      *(_QWORD *)(v24 + 96) = a1;
      *(_WORD *)(v24 + 104) = 0;
      *(_BYTE *)(v24 + 106) = 0;
      v32 = *(JSC::Yarr::YarrCodeBlock **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v24;
      if (v32)
      {
        JSC::Yarr::YarrCodeBlock::~YarrCodeBlock(v32, v25, v26, v27, v28, v29, v30, v31);
        WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
        v24 = *(_QWORD *)(a1 + 40);
      }
    }
    v41 = *v11 ? *((_QWORD *)*v11 + 1) : 0;
    v85 = *a4;
    v86 = *((_QWORD *)a4 + 2);
    v42 = 1;
    JSC::Yarr::jitCompile((uint64_t)v87, v41);
    if (*(unsigned __int16 *)(v24 + 105) < 0x100u)
      goto LABEL_21;
  }
  if (BYTE4(qword_1ECF4C6B8))
    WTF::dataLog<char [38],WTF::String,char [3],char [2]>((WTF::PrintStream *)(a1 + 8));
  *(_BYTE *)(a1 + 16) = 2;
  JSC::Yarr::byteCompile((unint64_t)v87, a2 + 93040, (_BYTE *)(a1 + 20), a2 + 93048, (uint64_t *)&v84);
  v51 = v84;
  v84 = 0;
  v52 = *(JSC::Yarr::BytecodePattern **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v51;
  if (v52)
  {
    JSC::Yarr::BytecodePattern::~BytecodePattern(v52, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    v61 = v84;
    v84 = 0;
    if (v61)
    {
      JSC::Yarr::BytecodePattern::~BytecodePattern(v61, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    v51 = *(JSC::Yarr::BytecodePattern **)(a1 + 32);
  }
  if (!v51)
  {
LABEL_35:
    v42 = 0;
LABEL_21:
    *(_BYTE *)(a1 + 16) = v42;
  }
  JSC::Yarr::YarrPattern::~YarrPattern((JSC::Yarr::YarrPattern *)v87, v17, v18, v19, v20, v21, v22, v23);
  while (1)
  {
    v49 = *v7;
    if ((v49 & 0xC0) != 0x40)
      break;
    v50 = __ldxr(v7);
    if (v50 == v49)
    {
      if (!__stxr(v49 & 0xBF, v7))
        return;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v7, 0, v43, v44, v45, v46, v47, v48);
}

void JSC::RegExp::match(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _BOOL8 v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  const void *v44;
  int v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  void *v53;
  unsigned __int8 *v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  __int128 v74;
  void *v75;
  uint64_t v76;
  JSC::JSGlobalObject **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v12 = *(_QWORD *)(a2 + 56);
  v80 = a2;
  v13 = *a3;
  if (*a3)
  {
    v14 = *(_DWORD *)(v13 + 16);
    v15 = (v14 & 4) == 0;
    v16 = *(_QWORD *)(v13 + 8);
    LODWORD(v13) = *(_DWORD *)(v13 + 4);
    v17 = (v14 >> 2) & 1;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    LOBYTE(v17) = 1;
  }
  v18 = *(unsigned __int8 *)(a1 + 16);
  if (v18 == 1)
  {
    v19 = *(_QWORD *)(a1 + 40);
    if (v15)
    {
      v57 = *(_QWORD *)(v19 + 40);
      if (v57 && *(_DWORD *)(v57 + 4))
        goto LABEL_7;
    }
    else
    {
      v20 = *(_QWORD *)(v19 + 24);
      if (v20 && *(_DWORD *)(v20 + 4))
      {
LABEL_7:
        v77 = (JSC::JSGlobalObject **)&v80;
        v78 = v12;
        v79 = a1;
        goto LABEL_8;
      }
    }
    goto LABEL_62;
  }
  if (v18 != 2 && v18 != 0)
  {
LABEL_62:
    *(_QWORD *)&v74 = v16;
    DWORD2(v74) = v13;
    BYTE12(v74) = v17;
    LOBYTE(v75) = 1;
    JSC::RegExp::compile(a1, v12, v15, &v74);
    v18 = *(unsigned __int8 *)(a1 + 16);
  }
  v77 = (JSC::JSGlobalObject **)&v80;
  v78 = v12;
  v79 = a1;
  if (!v18)
    goto LABEL_54;
LABEL_8:
  v21 = *(_DWORD **)(a1 + 48);
  if (v21 && v21[5])
    v22 = *v21 + 2 * *(_DWORD *)(a1 + 24);
  else
    v22 = 2 * *(_DWORD *)(a1 + 24);
  v23 = v22 + 2;
  v24 = v23;
  v25 = *(unsigned int *)(a5 + 12);
  if (v25 < v23)
  {
    v41 = *(unsigned int *)(a5 + 8);
    if (v41 < v23)
    {
      v73 = v23;
      v42 = v41 + (v41 >> 2);
      if (v42 >= 0x10)
        v43 = v42 + 1;
      else
        v43 = 16;
      if (v43 <= v24)
        v43 = v24;
      if (v43 >> 30)
      {
        __break(0xC471u);
        return;
      }
      v44 = *(const void **)a5;
      v45 = v43;
      v46 = (void *)WTF::fastMalloc((WTF *)(4 * v43));
      *(_DWORD *)(a5 + 8) = v45;
      *(_QWORD *)a5 = v46;
      memcpy(v46, v44, 4 * v25);
      v23 = v73;
      if (v44)
      {
        if (*(const void **)a5 == v44)
        {
          *(_QWORD *)a5 = 0;
          *(_DWORD *)(a5 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v44, v47, v48, v49, v50, a6, a7, a8);
        v23 = v73;
      }
    }
  }
  v26 = (uint64_t *)(v12 + 90552);
  *(_DWORD *)(a5 + 12) = v23;
  v27 = *(_QWORD *)a5;
  if (*(_BYTE *)(a1 + 16) != 1)
    goto LABEL_64;
  v28 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 104);
  v75 = 0;
  v76 = 0;
  v29 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)&v74 = v12;
  *((_QWORD *)&v74 + 1) = v29;
  *v26 = a1;
  if (v28)
  {
    v51 = (unsigned __int8 *)(v12 + 93049);
    if (__ldaxr((unsigned __int8 *)(v12 + 93049)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v51))
    {
LABEL_39:
      v53 = *(void **)(v12 + 93056);
      if (!v53)
      {
        v53 = (void *)WTF::fastMalloc((WTF *)0x2000);
        bzero(v53, 0x2000uLL);
        v72 = *(_QWORD *)(v12 + 93056);
        *(_QWORD *)(v12 + 93056) = v53;
        if (v72)
        {
          WTF::fastFree(v72, v65, v66, v67, v68, v69, v70, v71);
          v53 = *(void **)(v12 + 93056);
        }
      }
      v75 = v53;
      LODWORD(v76) = 0x2000;
      goto LABEL_13;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v51);
    goto LABEL_39;
  }
LABEL_13:
  v30 = *a3;
  if (!*a3)
  {
    v31 = 0;
    v32 = 0;
    goto LABEL_16;
  }
  if ((*(_BYTE *)(v30 + 16) & 4) != 0)
  {
    v31 = *(_QWORD *)(v30 + 8);
    v32 = *(unsigned int *)(v30 + 4);
LABEL_16:
    v33 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, __int128 *))(*(_QWORD *)(a1 + 40) + 16))(v31, a4, v32, v27, &v74);
    goto LABEL_17;
  }
  v33 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, __int128 *))(*(_QWORD *)(a1 + 40) + 32))(*(_QWORD *)(v30 + 8), a4, *(unsigned int *)(v30 + 4), v27, &v74);
LABEL_17:
  v40 = v33;
  if (!v75)
    goto LABEL_18;
  v54 = (unsigned __int8 *)(v74 + 93049);
  v55 = __ldxr((unsigned __int8 *)(v74 + 93049));
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_45;
  }
  if (__stlxr(0, v54))
LABEL_45:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v54, 0, v34, v35, v36, v37, v38, v39);
LABEL_18:
  if (!HIDWORD(v76))
    *(_QWORD *)(v74 + 90552) = 0;
  if (v40 != -2)
    goto LABEL_21;
  JSC::RegExp::byteCodeCompileIfNecessary((JSC::RegExp *)a1, (JSC::VM *)v12);
  if (!*(_BYTE *)(a1 + 16))
  {
LABEL_54:
    JSC::RegExp::matchInline<WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,(JSC::Yarr::MatchFrom)0>(JSC::JSGlobalObject *,JSC::VM &,WTF::String const&,unsigned int,WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(void)#1}::operator()(&v77);
    return;
  }
LABEL_64:
  *v26 = a1;
  v58 = *a3;
  if (*a3)
  {
    v59 = *(_QWORD *)(v58 + 8);
    v60 = *(unsigned int *)(v58 + 4) | ((unint64_t)((*(_DWORD *)(v58 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v59 = 0;
    v60 = 0x100000000;
  }
  JSC::Yarr::interpret(*(_QWORD *)(a1 + 32), v59, v60, a4, v27, a6, a7, a8);
  *v26 = 0;
LABEL_21:
  if (*a3 && (*(_DWORD *)(*a3 + 4) & 0x80000000) != 0)
  {
    v61 = 0;
    v62 = 1;
    do
    {
      v63 = v62 - 1;
      v64 = *(_DWORD *)(v27 + 4 * v63);
      if (v64 <= -2 || (v64 & 0x80000000) == 0 && *(int *)(v27 + 4 * v62) <= -2)
      {
        *(_DWORD *)(v27 + 4 * v63) = -1;
        *(_DWORD *)(v27 + 4 * v62) = -1;
      }
      ++v61;
      v62 += 2;
    }
    while (v61 <= *(_DWORD *)(a1 + 24));
  }
}

BOOL JSC::RegExp::matchConcurrently(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  WTF::Thread *v27;
  uint64_t v28;
  int v29;
  unint64_t StatusReg;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  _BOOL8 v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v52;
  __int128 v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[7];
  __int16 v57;
  char v58;

  v10 = a4;
  v14 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v15 = *v14;
    if ((v15 & 0x40) != 0)
      break;
    v16 = __ldaxr(v14);
    if (v16 == v15)
    {
      if (!__stxr(v15 | 0x40, v14))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 4);
LABEL_8:
  v17 = *(_QWORD *)a3;
  v18 = *(unsigned __int8 *)(a1 + 16);
  if (!*(_QWORD *)a3)
  {
    if (v18 == 1)
      goto LABEL_11;
LABEL_71:
    if (v18 == 2)
      goto LABEL_18;
    goto LABEL_72;
  }
  if (v18 != 1)
    goto LABEL_71;
  v19 = *(_DWORD *)(v17 + 16);
  if ((v19 & 4) == 0)
  {
    v20 = *(_QWORD *)(a1 + 40);
    v40 = *(_QWORD *)(v20 + 40);
    if (v40 && *(_DWORD *)(v40 + 4))
      goto LABEL_15;
    goto LABEL_72;
  }
LABEL_11:
  v20 = *(_QWORD *)(a1 + 40);
  v21 = *(_QWORD *)(v20 + 24);
  if (v21 && *(_DWORD *)(v21 + 4))
  {
    if (!v17)
    {
      v22 = 0;
      LOBYTE(v23) = 1;
      goto LABEL_74;
    }
    v19 = *(_DWORD *)(v17 + 16);
LABEL_15:
    v22 = *(_QWORD *)(v17 + 8);
    LODWORD(v17) = *(_DWORD *)(v17 + 4);
    v23 = (v19 >> 2) & 1;
    if ((v19 & 4) == 0)
    {
      v24 = *(_QWORD *)(v20 + 40);
      if (v24 && *(_DWORD *)(v24 + 4))
        goto LABEL_18;
      v52 = 1;
LABEL_81:
      *(_QWORD *)&v53 = v22;
      DWORD2(v53) = v17;
      BYTE12(v53) = v23;
      *(_WORD *)((char *)&v53 + 13) = v57;
      HIBYTE(v53) = v58;
      LOBYTE(v54) = 1;
      *(_DWORD *)((char *)&v54 + 1) = *(_DWORD *)v56;
      HIDWORD(v54) = *(_DWORD *)&v56[3];
      JSC::RegExp::compile(a1, (uint64_t)a2, v52, &v53);
      if (!*(_BYTE *)(a1 + 16))
        goto LABEL_82;
LABEL_18:
      v25 = *(_DWORD **)(a1 + 48);
      if (v25 && v25[5])
        v26 = *v25 + 2 * *(_DWORD *)(a1 + 24);
      else
        v26 = 2 * *(_DWORD *)(a1 + 24);
      WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize((uint64_t)a6, v26 + 2);
      v28 = *a6;
      if (*(_BYTE *)(a1 + 16) != 1)
      {
        if (*(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736))
        {
LABEL_49:
          v43 = *(_QWORD *)a3;
          if (*(_QWORD *)a3)
          {
            v44 = *(_QWORD *)(v43 + 8);
            v45 = *(unsigned int *)(v43 + 4) | ((unint64_t)((*(_DWORD *)(v43 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v44 = 0;
            v45 = 0x100000000;
          }
          v36 = JSC::Yarr::interpret(*(_QWORD *)(a1 + 32), v44, v45, v10, v28, (uint64_t)a6, a7, a8);
LABEL_33:
          if (*(_QWORD *)a3 && (*(_DWORD *)(*(_QWORD *)a3 + 4) & 0x80000000) != 0)
          {
            v46 = 0;
            v47 = v36 < -1;
            v48 = 1;
            do
            {
              v49 = v48 - 1;
              v50 = *(_DWORD *)(v28 + 4 * v49);
              if (v50 <= -2 || (v50 & 0x80000000) == 0 && *(int *)(v28 + 4 * v48) <= -2)
              {
                *(_DWORD *)(v28 + 4 * v49) = -1;
                *(_DWORD *)(v28 + 4 * v48) = -1;
                v47 = 1;
              }
              ++v46;
              v48 += 2;
            }
            while (v46 <= *(_DWORD *)(a1 + 24));
            if (v47)
              v36 = -1;
          }
          goto LABEL_35;
        }
LABEL_48:
        WTF::Thread::initializeCurrentTLS(v27);
        goto LABEL_49;
      }
      v29 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 104);
      *(_QWORD *)&v53 = a2;
      v54 = 0;
      v55 = 0x100000000;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v31 = *(_QWORD *)(StatusReg + 736);
      if (!v31)
        v31 = WTF::Thread::initializeCurrentTLS(0);
      *((_QWORD *)&v53 + 1) = *(_QWORD *)(v31 + 24) + dword_1ECF4C250;
      if (v29)
      {
        v54 = JSC::VM::acquireRegExpPatternContexBuffer(a2);
        LODWORD(v55) = 0x2000;
      }
      v32 = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
      {
        if ((*(_BYTE *)(v32 + 16) & 4) == 0)
        {
          v35 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, __int128 *))(*(_QWORD *)(a1 + 40) + 32))(*(_QWORD *)(v32 + 8), v10, *(unsigned int *)(v32 + 4), v28, &v53);
LABEL_29:
          v36 = v35;
          if (!v54)
            goto LABEL_30;
          v41 = (unsigned __int8 *)(v53 + 93049);
          v42 = __ldxr((unsigned __int8 *)(v53 + 93049));
          if (v42 == 1)
          {
            if (!__stlxr(0, v41))
            {
LABEL_30:
              if (!HIDWORD(v55))
                *(_QWORD *)(v53 + 90552) = 0;
              if (v36 != -2)
                goto LABEL_33;
              JSC::RegExp::byteCodeCompileIfNecessary((JSC::RegExp *)a1, a2);
              if (*(_BYTE *)(a1 + 16))
              {
                if (*(_QWORD *)(StatusReg + 736))
                  goto LABEL_49;
                goto LABEL_48;
              }
LABEL_82:
              v36 = -1;
LABEL_35:
              *a5 = v36;
              v37 = *(_BYTE *)(a1 + 16) != 0;
              goto LABEL_36;
            }
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v41, 0, a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
          goto LABEL_30;
        }
        v33 = *(_QWORD *)(v32 + 8);
        v34 = *(unsigned int *)(v32 + 4);
      }
      else
      {
        v33 = 0;
        v34 = 0;
      }
      v35 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, __int128 *))(*(_QWORD *)(a1 + 40) + 16))(v33, v10, v34, v28, &v53);
      goto LABEL_29;
    }
    v21 = *(_QWORD *)(v20 + 24);
    if (!v21)
    {
LABEL_84:
      v52 = 0;
      goto LABEL_81;
    }
LABEL_74:
    if (*(_DWORD *)(v21 + 4))
      goto LABEL_18;
    goto LABEL_84;
  }
LABEL_72:
  v37 = 0;
LABEL_36:
  while (1)
  {
    v38 = *v14;
    if ((v38 & 0xC0) != 0x40)
      break;
    v39 = __ldxr(v14);
    if (v39 == v38)
    {
      if (!__stxr(v38 & 0xBF, v14))
        return v37;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14, 0, a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  return v37;
}

void JSC::RegExp::compileMatchOnly(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  unsigned __int8 *v7;
  int v8;
  int v9;
  uint64_t v10;
  int **v11;
  char *v12;
  unint64_t v13;
  unsigned __int16 v14;
  int v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::Yarr::YarrCodeBlock *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  JSC::Yarr::BytecodePattern *v77;
  __int128 v78;
  uint64_t v79;
  unsigned __int16 v80[2];
  int v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  _BYTE v85[176];

  v7 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v8 = *v7;
    if ((v8 & 0x40) != 0)
      break;
    v9 = __ldaxr(v7);
    if (v9 == v8)
    {
      if (!__stxr(v8 | 0x40, v7))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 4);
LABEL_8:
  v11 = (int **)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v12 = *(char **)(v10 + 8);
    v13 = *(unsigned int *)(v10 + 4) | ((unint64_t)((*(_DWORD *)(v10 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v12 = 0;
    v13 = 0x100000000;
  }
  v14 = *(_WORD *)(a1 + 18);
  LOBYTE(v80[0]) = 0;
  v80[1] = v14;
  v82 = 0;
  v81 = 0;
  v83 = v85;
  v84 = 4;
  memset(&v85[32], 0, 144);
  v15 = JSC::Yarr::YarrPattern::compile(v80, v12, v13);
  *(_BYTE *)(a1 + 20) = v15;
  if (v15)
  {
    LOBYTE(v41) = 0;
    goto LABEL_22;
  }
  if (*(unsigned __int8 *)(a1 + 16) - 1 >= 2)
  {
    v63 = *(_QWORD *)(a2 + 93032);
    v64 = *v11;
    if (!*v11 || (v65 = *v64, v66 = v64[1], *v64 += 2, v66 <= 0x100))
    {
      v67 = *(unsigned int *)(v63 + 32);
      if (v67 >= 0x40)
      {
        __break(1u);
        return;
      }
      *(_QWORD *)(v63 + 8 * v67 + 40) = a1;
      if ((_DWORD)v67 == 63)
        v68 = 0;
      else
        v68 = v67 + 1;
      *(_DWORD *)(v63 + 32) = v68;
      if (!v64)
        goto LABEL_47;
      v65 = *v64 - 2;
    }
    if (v65)
    {
      *v64 = v65;
    }
    else
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v64, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
LABEL_47:
    *(_BYTE *)(a1 + 16) = 2;
  }
  if ((v80[0] & 8) == 0 && (v80[0] & 4) == 0 && byte_1ECF4C244)
  {
    v23 = *(_QWORD *)(a1 + 40);
    if (!v23)
    {
      v23 = WTF::fastMalloc((WTF *)0x70);
      *(_OWORD *)v23 = 0u;
      *(_OWORD *)(v23 + 16) = 0u;
      *(_OWORD *)(v23 + 32) = 0u;
      *(_OWORD *)(v23 + 48) = 0u;
      *(_OWORD *)(v23 + 64) = 0u;
      *(_OWORD *)(v23 + 80) = 0u;
      *(_QWORD *)(v23 + 96) = a1;
      *(_WORD *)(v23 + 104) = 0;
      *(_BYTE *)(v23 + 106) = 0;
      v31 = *(JSC::Yarr::YarrCodeBlock **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v23;
      if (v31)
      {
        JSC::Yarr::YarrCodeBlock::~YarrCodeBlock(v31, v24, v25, v26, v27, v28, v29, v30);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
        v23 = *(_QWORD *)(a1 + 40);
      }
    }
    v40 = *v11 ? *((_QWORD *)*v11 + 1) : 0;
    v78 = *a4;
    v79 = *((_QWORD *)a4 + 2);
    JSC::Yarr::jitCompile((uint64_t)v80, v40);
    if (*(unsigned __int16 *)(v23 + 105) < 0x100u)
    {
      LOBYTE(v41) = 1;
LABEL_22:
      *(_BYTE *)(a1 + 16) = v41;
      goto LABEL_23;
    }
  }
  if (BYTE4(qword_1ECF4C6B8))
    WTF::dataLog<char [38],WTF::String,char [3],char [2]>((WTF::PrintStream *)(a1 + 8));
  *(_BYTE *)(a1 + 16) = 2;
  JSC::Yarr::byteCompile((unint64_t)v80, a2 + 93040, (_BYTE *)(a1 + 20), a2 + 93048, (uint64_t *)&v77);
  std::unique_ptr<JSC::Yarr::BytecodePattern>::operator=[abi:sn180100]((JSC::Yarr::BytecodePattern **)(a1 + 32), &v77, v50, v51, v52, v53, v54, v55);
  std::unique_ptr<JSC::Yarr::BytecodePattern>::~unique_ptr[abi:sn180100](&v77, v56, v57, v58, v59, v60, v61, v62);
  v41 = *(_QWORD *)(a1 + 32);
  if (!v41)
    goto LABEL_22;
LABEL_23:
  JSC::Yarr::YarrPattern::~YarrPattern((JSC::Yarr::YarrPattern *)v80, v16, v17, v18, v19, v20, v21, v22);
  while (1)
  {
    v48 = *v7;
    if ((v48 & 0xC0) != 0x40)
      break;
    v49 = __ldxr(v7);
    if (v49 == v48)
    {
      if (!__stxr(v48 & 0xBF, v7))
        return;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v7, 0, v42, v43, v44, v45, v46, v47);
}

uint64_t JSC::RegExp::match(JSC::RegExp *this, JSC::JSGlobalObject *a2, const WTF::String *a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  _BOOL8 v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v35;
  void *v37;
  unsigned __int8 *v38;
  int v39;
  _DWORD *v41;
  int v42;
  int v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  __int128 v66;
  void *v67;
  uint64_t v68;
  JSC::JSGlobalObject **v69;
  uint64_t v70;
  JSC::RegExp *v71;
  JSC::JSGlobalObject *v72;

  v11 = *((_QWORD *)a2 + 7);
  v12 = (_QWORD *)(v11 + 90552);
  v72 = a2;
  v13 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v14 = *(_DWORD *)(v13 + 16);
    v15 = (v14 & 4) == 0;
    v16 = *(_QWORD *)(v13 + 8);
    LODWORD(v13) = *(_DWORD *)(v13 + 4);
    v17 = (v14 >> 2) & 1;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    LOBYTE(v17) = 1;
  }
  v18 = *((unsigned __int8 *)this + 16);
  if (v18 == 1)
  {
    v19 = *((_QWORD *)this + 5);
    if (v15)
    {
      v57 = *(_QWORD *)(v19 + 72);
      if (v57 && *(_DWORD *)(v57 + 4))
        goto LABEL_7;
    }
    else
    {
      v20 = *(_QWORD *)(v19 + 56);
      if (v20 && *(_DWORD *)(v20 + 4))
      {
LABEL_7:
        v69 = &v72;
        v70 = v11;
        v71 = this;
        goto LABEL_8;
      }
    }
  }
  else if (v18 == 2 || v18 == 0)
  {
    goto LABEL_36;
  }
  *(_QWORD *)&v66 = v16;
  DWORD2(v66) = v13;
  BYTE12(v66) = v17;
  LOBYTE(v67) = 1;
  JSC::RegExp::compileMatchOnly((uint64_t)this, v11, v15, &v66);
  v18 = *((unsigned __int8 *)this + 16);
LABEL_36:
  v69 = &v72;
  v70 = v11;
  v71 = this;
  if (v18 != 1)
  {
    if (!v18)
      return JSC::RegExp::matchInline<(JSC::Yarr::MatchFrom)0>(JSC::JSGlobalObject *,JSC::VM &,WTF::String const&,unsigned int)::{lambda(void)#1}::operator()(&v69);
LABEL_41:
    *(_QWORD *)&v66 = &v67;
    *((_QWORD *)&v66 + 1) = 32;
    v41 = (_DWORD *)*((_QWORD *)this + 6);
    if (v41 && v41[5])
      v42 = *v41 + 2 * *((_DWORD *)this + 6);
    else
      v42 = 2 * *((_DWORD *)this + 6);
    v43 = v42 + 2;
    v44 = &v67;
    if ((v42 + 2) >= 0x21)
    {
      WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v66, v43);
      v44 = (void **)v66;
    }
    HIDWORD(v66) = v43;
    *v12 = this;
    v45 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v46 = *(_QWORD *)(v45 + 8);
      v47 = *(unsigned int *)(v45 + 4) | ((unint64_t)((*(_DWORD *)(v45 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v46 = 0;
      v47 = 0x100000000;
    }
    v48 = JSC::Yarr::interpret(*((_QWORD *)this + 4), v46, v47, a4, (uint64_t)v44, a6, a7, a8);
    *v12 = 0;
    if ((v48 & 0x80000000) != 0)
      v33 = -1;
    else
      v33 = v48;
    v56 = v66;
    if (&v67 != (void **)v66 && (_QWORD)v66)
    {
      *(_QWORD *)&v66 = 0;
      DWORD2(v66) = 0;
      WTF::fastFree(v56, v49, v50, v51, v52, v53, v54, v55);
    }
    return v33;
  }
  v19 = *((_QWORD *)this + 5);
LABEL_8:
  v21 = *(unsigned __int8 *)(v19 + 104);
  v67 = 0;
  v68 = 0;
  v22 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)&v66 = v11;
  *((_QWORD *)&v66 + 1) = v22;
  *v12 = this;
  if (!v21)
    goto LABEL_9;
  v35 = (unsigned __int8 *)(v11 + 93049);
  if (__ldaxr((unsigned __int8 *)(v11 + 93049)))
  {
    __clrex();
LABEL_21:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v35);
    goto LABEL_22;
  }
  if (__stxr(1u, v35))
    goto LABEL_21;
LABEL_22:
  v37 = *(void **)(v11 + 93056);
  if (!v37)
  {
    v37 = (void *)WTF::fastMalloc((WTF *)0x2000);
    bzero(v37, 0x2000uLL);
    v65 = *(_QWORD *)(v11 + 93056);
    *(_QWORD *)(v11 + 93056) = v37;
    if (v65)
    {
      WTF::fastFree(v65, v58, v59, v60, v61, v62, v63, v64);
      v37 = *(void **)(v11 + 93056);
    }
  }
  v67 = v37;
  LODWORD(v68) = 0x2000;
LABEL_9:
  v23 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
  {
    v24 = 0;
    v25 = 0;
    goto LABEL_12;
  }
  if ((*(_BYTE *)(v23 + 16) & 4) != 0)
  {
    v24 = *(_QWORD *)(v23 + 8);
    v25 = *(unsigned int *)(v23 + 4);
LABEL_12:
    v26 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, __int128 *))(*((_QWORD *)this + 5) + 48))(v24, a4, v25, 0, &v66);
    goto LABEL_13;
  }
  v26 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, __int128 *))(*((_QWORD *)this + 5) + 64))(*(_QWORD *)(v23 + 8), a4, *(unsigned int *)(v23 + 4), 0, &v66);
LABEL_13:
  v33 = v26;
  if (!v67)
    goto LABEL_14;
  v38 = (unsigned __int8 *)(v66 + 93049);
  v39 = __ldxr((unsigned __int8 *)(v66 + 93049));
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, v38))
LABEL_28:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v38, 0, v27, v28, v29, v30, v31, v32);
LABEL_14:
  if (!HIDWORD(v68))
    *(_QWORD *)(v66 + 90552) = 0;
  if (v33 == -2)
  {
    JSC::RegExp::byteCodeCompileIfNecessary(this, (JSC::VM *)v11);
    if (!*((_BYTE *)this + 16))
      return JSC::RegExp::matchInline<(JSC::Yarr::MatchFrom)0>(JSC::JSGlobalObject *,JSC::VM &,WTF::String const&,unsigned int)::{lambda(void)#1}::operator()(&v69);
    goto LABEL_41;
  }
  return v33;
}

uint64_t JSC::RegExp::matchConcurrently(WTF::Thread *a1, JSC::VM *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;
  _DWORD *v39;
  int v40;
  int v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  void *v47;
  unint64_t v48;
  uint64_t v50;
  __int128 v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[7];
  __int16 v55;
  char v56;

  v9 = a4;
  v12 = (uint64_t)a1;
  v13 = (unsigned __int8 *)a1 + 4;
  while (1)
  {
    v14 = *v13;
    if ((v14 & 0x40) != 0)
      break;
    v15 = __ldaxr(v13);
    if (v15 == v14)
    {
      if (!__stxr(v14 | 0x40, v13))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  a1 = (WTF::Thread *)WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)a1 + 4);
LABEL_8:
  v16 = *a3;
  v17 = *(unsigned __int8 *)(v12 + 16);
  if (!*a3)
  {
    if (v17 == 1)
      goto LABEL_11;
LABEL_69:
    if (v17 == 2)
      goto LABEL_45;
    goto LABEL_70;
  }
  if (v17 != 1)
    goto LABEL_69;
  v18 = *(_DWORD *)(v16 + 16);
  if ((v18 & 4) == 0)
  {
    v19 = *(_QWORD *)(v12 + 40);
    v36 = *(_QWORD *)(v19 + 72);
    if (v36 && *(_DWORD *)(v36 + 4))
      goto LABEL_15;
    goto LABEL_70;
  }
LABEL_11:
  v19 = *(_QWORD *)(v12 + 40);
  v20 = *(_QWORD *)(v19 + 56);
  if (v20 && *(_DWORD *)(v20 + 4))
  {
    if (!v16)
    {
      v21 = 0;
      LOBYTE(v22) = 1;
      goto LABEL_72;
    }
    v18 = *(_DWORD *)(v16 + 16);
LABEL_15:
    v21 = *(_QWORD *)(v16 + 8);
    LODWORD(v16) = *(_DWORD *)(v16 + 4);
    v22 = (v18 >> 2) & 1;
    if ((v18 & 4) == 0)
    {
      v23 = *(_QWORD *)(v19 + 72);
      if (v23 && *(_DWORD *)(v23 + 4))
      {
LABEL_18:
        v24 = *(unsigned __int8 *)(v19 + 104);
        *(_QWORD *)&v51 = a2;
        v52 = 0;
        v53 = 0x100000000;
        v25 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v25)
          v25 = WTF::Thread::initializeCurrentTLS(0);
        *((_QWORD *)&v51 + 1) = *(_QWORD *)(v25 + 24) + dword_1ECF4C250;
        if (v24)
        {
          v52 = JSC::VM::acquireRegExpPatternContexBuffer(a2);
          LODWORD(v53) = 0x2000;
        }
        v26 = *a3;
        if (*a3)
        {
          if ((*(_BYTE *)(v26 + 16) & 4) == 0)
          {
            v29 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, __int128 *))(*(_QWORD *)(v12 + 40) + 64))(*(_QWORD *)(v26 + 8), v9, *(unsigned int *)(v26 + 4), 0, &v51);
LABEL_26:
            v31 = v29;
            v32 = v30;
            if (v52)
            {
              v37 = (unsigned __int8 *)(v51 + 93049);
              v38 = __ldxr((unsigned __int8 *)(v51 + 93049));
              if (v38 == 1)
              {
                if (!__stlxr(0, v37))
                  goto LABEL_27;
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v37, 0, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
            }
LABEL_27:
            if (!HIDWORD(v53))
              *(_QWORD *)(v51 + 90552) = 0;
            if (v31 != -2)
              goto LABEL_30;
            JSC::RegExp::byteCodeCompileIfNecessary((JSC::RegExp *)v12, a2);
            if (*(_BYTE *)(v12 + 16))
              goto LABEL_45;
            v32 = 0;
LABEL_63:
            v31 = -1;
LABEL_30:
            *a5 = v31;
            a5[1] = v32;
            v33 = 1;
            goto LABEL_31;
          }
          v27 = *(_QWORD *)(v26 + 8);
          v28 = *(unsigned int *)(v26 + 4);
        }
        else
        {
          v27 = 0;
          v28 = 0;
        }
        v29 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, __int128 *))(*(_QWORD *)(v12 + 40) + 48))(v27, v9, v28, 0, &v51);
        goto LABEL_26;
      }
      v50 = 1;
      goto LABEL_65;
    }
    v20 = *(_QWORD *)(v19 + 56);
    if (!v20)
    {
LABEL_79:
      v50 = 0;
LABEL_65:
      *(_QWORD *)&v51 = v21;
      DWORD2(v51) = v16;
      BYTE12(v51) = v22;
      *(_WORD *)((char *)&v51 + 13) = v55;
      HIBYTE(v51) = v56;
      LOBYTE(v52) = 1;
      *(_DWORD *)((char *)&v52 + 1) = *(_DWORD *)v54;
      HIDWORD(v52) = *(_DWORD *)&v54[3];
      JSC::RegExp::compileMatchOnly(v12, (uint64_t)a2, v50, &v51);
      v32 = *(unsigned __int8 *)(v12 + 16);
      if (!*(_BYTE *)(v12 + 16))
        goto LABEL_63;
      if ((_DWORD)v32 == 1)
      {
        v19 = *(_QWORD *)(v12 + 40);
        goto LABEL_18;
      }
LABEL_45:
      *(_QWORD *)&v51 = &v52;
      *((_QWORD *)&v51 + 1) = 32;
      v39 = *(_DWORD **)(v12 + 48);
      if (v39 && v39[5])
        v40 = *v39 + 2 * *(_DWORD *)(v12 + 24);
      else
        v40 = 2 * *(_DWORD *)(v12 + 24);
      v41 = v40 + 2;
      v42 = &v52;
      if ((v40 + 2) >= 0x21)
      {
        a1 = (WTF::Thread *)WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v51, v41);
        v42 = (void **)v51;
      }
      HIDWORD(v51) = v41;
      if (!*(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736))
        WTF::Thread::initializeCurrentTLS(a1);
      v43 = *a3;
      if (*a3)
      {
        v44 = *(_QWORD *)(v43 + 8);
        v45 = *(unsigned int *)(v43 + 4) | ((unint64_t)((*(_DWORD *)(v43 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v44 = 0;
        v45 = 0x100000000;
      }
      v46 = JSC::Yarr::interpret(*(_QWORD *)(v12 + 32), v44, v45, v9, (uint64_t)v42, a6, a7, a8);
      if ((v46 & 0x80000000) != 0)
      {
        v32 = 0;
        v31 = -1;
      }
      else
      {
        v31 = v46;
        v32 = *((unsigned int *)v42 + 1);
      }
      v48 = v51;
      if (&v52 != (void **)v51 && (_QWORD)v51)
      {
        *(_QWORD *)&v51 = 0;
        DWORD2(v51) = 0;
        WTF::fastFree(v48, v47, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
      }
      goto LABEL_30;
    }
LABEL_72:
    if (*(_DWORD *)(v20 + 4))
      goto LABEL_18;
    goto LABEL_79;
  }
LABEL_70:
  v33 = 0;
LABEL_31:
  while (1)
  {
    v34 = *v13;
    if ((v34 & 0xC0) != 0x40)
      break;
    v35 = __ldxr(v13);
    if (v35 == v34)
    {
      if (!__stxr(v34 & 0xBF, v13))
        return v33;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
  return v33;
}

void JSC::RegExp::deleteCode(JSC::RegExp *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  JSC::Yarr::BytecodePattern *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v9 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v10 = *v9;
    if ((v10 & 0x40) != 0)
      break;
    v11 = __ldaxr(v9);
    if (v11 == v10)
    {
      if (!__stxr(v10 | 0x40, v9))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_8:
  if (*((unsigned __int8 *)this + 16) - 1 <= 1)
  {
    *((_BYTE *)this + 16) = 3;
    v12 = *((_QWORD *)this + 5);
    if (v12)
    {
      v13 = *(unsigned int **)(v12 + 24);
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
        }
      }
      v16 = *(unsigned int **)(v12 + 40);
      *(_QWORD *)(v12 + 32) = 0;
      *(_QWORD *)(v12 + 40) = 0;
      if (v16)
      {
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v16);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v16, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
        }
      }
      v19 = *(unsigned int **)(v12 + 56);
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      if (v19)
      {
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          atomic_store(1u, v19);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v19, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
        }
      }
      v22 = *(unsigned int **)(v12 + 72);
      *(_QWORD *)(v12 + 64) = 0;
      *(_QWORD *)(v12 + 72) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v22, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
        }
      }
      if (*(_BYTE *)(v12 + 106))
        *(_BYTE *)(v12 + 106) = 0;
      if (*(_DWORD *)(v12 + 8))
      {
        v25 = *(unsigned int *)(v12 + 12);
        if ((_DWORD)v25)
        {
          v26 = *(unint64_t **)v12;
          v27 = 8 * v25;
          do
          {
            v28 = *v26;
            *v26 = 0;
            if (v28)
              WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
            ++v26;
            v27 -= 8;
          }
          while (v27);
          *(_DWORD *)(v12 + 12) = 0;
        }
        v29 = *(_QWORD *)v12;
        if (*(_QWORD *)v12)
        {
          *(_QWORD *)v12 = 0;
          *(_DWORD *)(v12 + 8) = 0;
          WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
    v30 = (JSC::Yarr::BytecodePattern *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v30)
    {
      JSC::Yarr::BytecodePattern::~BytecodePattern(v30, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
  }
  while (1)
  {
    v39 = *v9;
    if ((v39 & 0xC0) != 0x40)
      break;
    v40 = __ldxr(v9);
    if (v40 == v39)
    {
      if (!__stxr(v39 & 0xBF, v9))
        return;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::RegExp::escapedPattern(JSC::RegExp *this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *i;
  int v16;
  char v18;
  BOOL v19;
  int v20;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  unsigned int v79;
  char v80;
  int8x16_t v81;

  v9 = *((_QWORD *)this + 1);
  if (!v9)
    goto LABEL_110;
  v10 = *(unsigned __int8 **)(v9 + 8);
  v11 = *(unsigned int *)(v9 + 4);
  if ((*(_BYTE *)(v9 + 16) & 4) == 0)
  {
    JSC::escapePattern<char16_t>(a8, (WTF::AtomStringImpl *)v9, *(_QWORD *)(v9 + 8), *(unsigned int *)(v9 + 4), a4, a5, a6, a7);
    return;
  }
  if (!(_DWORD)v11)
  {
LABEL_110:
    v76 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v76 = 0x400000002;
    *(_QWORD *)(v76 + 8) = "(?:)";
    *(_DWORD *)(v76 + 16) = 4;
    *a8 = v76;
    return;
  }
  v12 = 0;
  v13 = 0;
  v14 = *(unsigned int *)(v9 + 4);
  for (i = *(unsigned __int8 **)(v9 + 8); ; ++i)
  {
    v16 = *i;
    if ((v12 & 1) != 0)
      break;
    if (v13)
    {
      v13 = v16 != 93;
      break;
    }
    if (v16 != 91)
    {
      if (v16 == 47)
        goto LABEL_16;
      v13 = 0;
      break;
    }
    v13 = 1;
LABEL_87:
    v12 = (v16 == 92) & ~v12;
    if (!--v14)
    {
      *(_DWORD *)v9 += 2;
      *a8 = v9;
      return;
    }
  }
  if (v16 != 13 && v16 != 10)
    goto LABEL_87;
LABEL_16:
  v18 = 0;
  v19 = 0;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v80 = 1;
  do
  {
    v20 = *v10;
    if ((v18 & 1) != 0)
      goto LABEL_18;
    if (v19)
    {
      v19 = v20 != 93;
      goto LABEL_18;
    }
    if (v20 == 91)
    {
      v19 = 1;
LABEL_65:
      v81.i8[0] = v20;
      if (!v78)
        goto LABEL_85;
      v36 = v79;
      if (v79 >= *((_DWORD *)v78 + 1) || v77 != 0)
        goto LABEL_85;
      v38 = *((_DWORD *)v78 + 4);
      v39 = *((_QWORD *)v78 + 1);
      ++v79;
      if ((v38 & 4) != 0)
        *(_BYTE *)(v39 + v36) = v20;
      else
        *(_WORD *)(v39 + 2 * v36) = v20;
      goto LABEL_51;
    }
    if (v20 == 47)
    {
      v81.i8[0] = 92;
      if (v78 && ((v32 = v79, v79 < *((_DWORD *)v78 + 1)) ? (v33 = v77 == 0) : (v33 = 0), v33))
      {
        v34 = *((_DWORD *)v78 + 4);
        v35 = *((_QWORD *)v78 + 1);
        ++v79;
        if ((v34 & 4) != 0)
          *(_BYTE *)(v35 + v32) = 92;
        else
          *(_WORD *)(v35 + 2 * v32) = 92;
      }
      else
      {
        WTF::StringBuilder::append((uint64_t)&v77, &v81, 1uLL, a3, a4, a5, a6, a7);
      }
      v19 = 0;
      goto LABEL_65;
    }
    v19 = 0;
LABEL_18:
    if (v20 != 13 && v20 != 10)
      goto LABEL_65;
    if ((v18 & 1) == 0)
    {
      v81.i8[0] = 92;
      if (v78 && ((v22 = v79, v79 < *((_DWORD *)v78 + 1)) ? (v23 = v77 == 0) : (v23 = 0), v23))
      {
        v24 = *((_DWORD *)v78 + 4);
        v25 = *((_QWORD *)v78 + 1);
        ++v79;
        if ((v24 & 4) != 0)
          *(_BYTE *)(v25 + v22) = 92;
        else
          *(_WORD *)(v25 + 2 * v22) = 92;
      }
      else
      {
        WTF::StringBuilder::append((uint64_t)&v77, &v81, 1uLL, a3, a4, a5, a6, a7);
      }
    }
    if (v20 == 10)
    {
      v81.i8[0] = 110;
      if (!v78)
        goto LABEL_85;
      v26 = v79;
      if (v79 >= *((_DWORD *)v78 + 1) || v77 != 0)
        goto LABEL_85;
      v28 = *((_DWORD *)v78 + 4);
      v29 = *((_QWORD *)v78 + 1);
      ++v79;
      if ((v28 & 4) != 0)
      {
        *(_BYTE *)(v29 + v26) = 110;
        goto LABEL_51;
      }
      v75 = 110;
    }
    else
    {
      v81.i8[0] = 114;
      if (!v78 || ((v26 = v79, v79 < *((_DWORD *)v78 + 1)) ? (v30 = v77 == 0) : (v30 = 0), !v30))
      {
LABEL_85:
        WTF::StringBuilder::append((uint64_t)&v77, &v81, 1uLL, a3, a4, a5, a6, a7);
        goto LABEL_51;
      }
      v31 = *((_DWORD *)v78 + 4);
      v29 = *((_QWORD *)v78 + 1);
      ++v79;
      if ((v31 & 4) != 0)
      {
        *(_BYTE *)(v29 + v26) = 114;
        goto LABEL_51;
      }
      v75 = 114;
    }
    *(_WORD *)(v29 + 2 * v26) = v75;
LABEL_51:
    v18 = (v20 == 92) & ~v18;
    ++v10;
    --v11;
  }
  while (v11);
  v40 = v77;
  if (v77)
    goto LABEL_75;
  if ((v79 & 0x80000000) == 0 && v78 && *((_DWORD *)v78 + 1) > v79 + (v79 >> 2))
  {
    if ((*((_BYTE *)v78 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v77, (WTF::AtomStringImpl *)v79, a2, a3, a4, a5, a6, a7);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v77, (WTF::AtomStringImpl *)v79, a2, a3, a4, a5, a6, a7);
    v66 = v77;
    v77 = v78;
    v78 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
      {
        WTF::StringImpl::~StringImpl(v66, v59, v60, v61, v62, v63, v64, v65);
        WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
      }
      else
      {
        *(_DWORD *)v66 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v77);
  v40 = v77;
  if (v77)
LABEL_75:
    *(_DWORD *)v40 += 2;
  *a8 = v40;
  v41 = v78;
  v78 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, (WTF::AtomStringImpl *)v9, a2, a3, a4, a5, a6, a7);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  v42 = v77;
  v77 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, (WTF::AtomStringImpl *)v9, a2, a3, a4, a5, a6, a7);
      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
}

void JSC::escapePattern<char16_t>(_QWORD *a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 *v9;
  char v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *i;
  int v15;
  char v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  unsigned int v86;
  char v87;
  int8x16_t v88;

  if (!a4)
  {
    v51 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v51 = 0x400000002;
    *(_QWORD *)(v51 + 8) = "(?:)";
    *(_DWORD *)(v51 + 16) = 4;
    *a1 = v51;
    return;
  }
  v9 = (unsigned __int16 *)a3;
  v10 = 0;
  v11 = 0;
  v12 = 2 * a4;
  v13 = 2 * a4;
  for (i = (unsigned __int16 *)a3; ; ++i)
  {
    v15 = *i;
    if ((v10 & 1) != 0)
      break;
    if (v11)
    {
      v11 = v15 != 93;
      break;
    }
    if (v15 != 91)
    {
      if (v15 == 47)
        goto LABEL_19;
      v11 = 0;
      break;
    }
    v11 = 1;
LABEL_16:
    v10 = (v15 == 92) & ~v10;
    v13 -= 2;
    if (!v13)
    {
      *(_DWORD *)a2 += 2;
      *a1 = a2;
      return;
    }
  }
  if (v15 != 10 && v15 != 13 && (v15 & 0xFFFE) != 8232)
    goto LABEL_16;
LABEL_19:
  v18 = 0;
  v19 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 1;
  do
  {
    v20 = *v9;
    if ((v18 & 1) != 0)
      goto LABEL_36;
    if (v19)
    {
      v19 = v20 != 93;
      goto LABEL_36;
    }
    if (v20 == 91)
    {
      v19 = 1;
LABEL_64:
      v88.i16[0] = v20;
      if (!v85)
        goto LABEL_100;
      v35 = v86;
      if (v86 >= *((_DWORD *)v85 + 1) || v84 != 0)
        goto LABEL_100;
      if ((*((_BYTE *)v85 + 16) & 4) == 0)
      {
        v37 = *((_QWORD *)v85 + 1);
        ++v86;
        *(_WORD *)(v37 + 2 * v35) = v20;
        goto LABEL_101;
      }
      if (v20 <= 0xFF)
      {
        v48 = *((_QWORD *)v85 + 1);
        ++v86;
        *(_BYTE *)(v48 + v35) = v20;
      }
      else
      {
LABEL_100:
        WTF::StringBuilder::append((uint64_t)&v84, &v88, 1uLL, a4, a5, a6, a7, a8);
      }
      goto LABEL_101;
    }
    if (v20 == 47)
    {
      v88.i8[0] = 92;
      if (v85 && ((v21 = v86, v86 < *((_DWORD *)v85 + 1)) ? (v22 = v84 == 0) : (v22 = 0), v22))
      {
        v23 = *((_DWORD *)v85 + 4);
        v24 = *((_QWORD *)v85 + 1);
        ++v86;
        if ((v23 & 4) != 0)
          *(_BYTE *)(v24 + v21) = 92;
        else
          *(_WORD *)(v24 + 2 * v21) = 92;
      }
      else
      {
        WTF::StringBuilder::append((uint64_t)&v84, &v88, 1uLL, a4, a5, a6, a7, a8);
      }
      v19 = 0;
      goto LABEL_64;
    }
    v19 = 0;
LABEL_36:
    if (v20 != 10 && v20 != 13 && (v20 & 0xFFFE) != 8232)
      goto LABEL_64;
    if ((v18 & 1) == 0)
    {
      v88.i8[0] = 92;
      if (v85 && ((v27 = v86, v86 < *((_DWORD *)v85 + 1)) ? (v28 = v84 == 0) : (v28 = 0), v28))
      {
        v29 = *((_DWORD *)v85 + 4);
        v30 = *((_QWORD *)v85 + 1);
        ++v86;
        if ((v29 & 4) != 0)
          *(_BYTE *)(v30 + v27) = 92;
        else
          *(_WORD *)(v30 + 2 * v27) = 92;
      }
      else
      {
        WTF::StringBuilder::append((uint64_t)&v84, &v88, 1uLL, a4, a5, a6, a7, a8);
      }
    }
    switch(v20)
    {
      case 0x2028u:
        if ((v86 & 0x80000000) != 0)
          break;
        v38 = v85;
        if ((v85 || (v38 = v84) != 0) && (*((_BYTE *)v38 + 16) & 4) == 0)
        {
          v39 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v84, (WTF::AtomStringImpl *)(v86 + 5), a3, a4, a5, a6, a7, a8);
          if (!v39)
            break;
          *(_QWORD *)v39 = 0x32003000320075;
          v40 = 56;
LABEL_92:
          *(_WORD *)(v39 + 8) = v40;
          break;
        }
        v46 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v84, (WTF::AtomStringImpl *)(v86 + 5), a3, a4, a5, a6, a7, a8);
        if (v46)
        {
          v47 = 56;
LABEL_97:
          *(_BYTE *)(v46 + 4) = v47;
          *(_DWORD *)v46 = 842019445;
        }
        break;
      case 0xDu:
        v88.i8[0] = 114;
        if (!v85 || ((v41 = v86, v86 < *((_DWORD *)v85 + 1)) ? (v42 = v84 == 0) : (v42 = 0), !v42))
        {
LABEL_104:
          WTF::StringBuilder::append((uint64_t)&v84, &v88, 1uLL, a4, a5, a6, a7, a8);
          break;
        }
        v43 = *((_DWORD *)v85 + 4);
        v44 = *((_QWORD *)v85 + 1);
        ++v86;
        if ((v43 & 4) != 0)
          *(_BYTE *)(v44 + v41) = 114;
        else
          *(_WORD *)(v44 + 2 * v41) = 114;
        break;
      case 0xAu:
        v88.i8[0] = 110;
        if (!v85)
          goto LABEL_104;
        v31 = v86;
        if (v86 >= *((_DWORD *)v85 + 1) || v84 != 0)
          goto LABEL_104;
        v33 = *((_DWORD *)v85 + 4);
        v34 = *((_QWORD *)v85 + 1);
        ++v86;
        if ((v33 & 4) != 0)
          *(_BYTE *)(v34 + v31) = 110;
        else
          *(_WORD *)(v34 + 2 * v31) = 110;
        break;
      default:
        if ((v86 & 0x80000000) != 0)
          break;
        v45 = v85;
        if ((v85 || (v45 = v84) != 0) && (*((_BYTE *)v45 + 16) & 4) == 0)
        {
          v39 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)&v84, (WTF::AtomStringImpl *)(v86 + 5), a3, a4, a5, a6, a7, a8);
          if (!v39)
            break;
          *(_QWORD *)v39 = 0x32003000320075;
          v40 = 57;
          goto LABEL_92;
        }
        v46 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v84, (WTF::AtomStringImpl *)(v86 + 5), a3, a4, a5, a6, a7, a8);
        if (v46)
        {
          v47 = 57;
          goto LABEL_97;
        }
        break;
    }
LABEL_101:
    v18 = (v20 == 92) & ~v18;
    ++v9;
    v12 -= 2;
  }
  while (v12);
  v49 = v84;
  if (v84)
    goto LABEL_111;
  if ((v86 & 0x80000000) == 0 && v85 && *((_DWORD *)v85 + 1) > v86 + (v86 >> 2))
  {
    if ((*((_BYTE *)v85 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v84, (WTF::AtomStringImpl *)v86, a3, a4, a5, a6, a7, a8);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v84, (WTF::AtomStringImpl *)v86, a3, a4, a5, a6, a7, a8);
    v75 = v84;
    v84 = v85;
    v85 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
      {
        WTF::StringImpl::~StringImpl(v75, v68, v69, v70, v71, v72, v73, v74);
        WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
      }
      else
      {
        *(_DWORD *)v75 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v84);
  v49 = v84;
  if (v84)
LABEL_111:
    *(_DWORD *)v49 += 2;
  *a1 = v49;
  v50 = v85;
  v85 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
      v49 = v84;
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v84 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
}

void JSC::RegExp::toSourceString(JSC::RegExp *this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  __int16 v10;
  unsigned int v11;
  size_t v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _WORD *v27;
  int8x16_t *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  char *v40;
  char *v41;
  char *v42;
  __int16 v43;
  _WORD *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  int8x16_t v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  char *v54;
  char *v55;
  __int16 v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int128 *v68;
  unsigned __int128 *v69;
  unsigned __int128 v70;
  __int8 v71;
  WTF::StringImpl *v72;
  _DWORD *v73;
  char __s[8];
  uint64_t v75;
  int8x16x2_t v76;
  int8x16x2_t v77;
  int8x16x2_t v78;
  int8x16x2_t v79;
  int8x16x2_t v80;
  int8x16x2_t v81;

  v75 = *MEMORY[0x1E0C80C00];
  JSC::RegExp::escapedPattern(this, a2, a3, a4, a5, a6, a7, &v72);
  v10 = *((_WORD *)this + 9);
  if ((v10 & 1) != 0)
  {
    __s[0] = 100;
    v11 = 1;
    if ((v10 & 2) == 0)
    {
LABEL_3:
      if ((v10 & 4) == 0)
        goto LABEL_4;
      goto LABEL_58;
    }
  }
  else
  {
    v11 = 0;
    if ((v10 & 2) == 0)
      goto LABEL_3;
  }
  v65 = v11++;
  *(_BYTE *)((unint64_t)__s | v65) = 103;
  if ((v10 & 4) == 0)
  {
LABEL_4:
    if ((v10 & 8) == 0)
      goto LABEL_5;
    goto LABEL_59;
  }
LABEL_58:
  v66 = v11++;
  *(_BYTE *)((unint64_t)__s | v66) = 105;
  if ((v10 & 8) == 0)
  {
LABEL_5:
    if ((v10 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_60;
  }
LABEL_59:
  v67 = v11++;
  *(_BYTE *)((unint64_t)__s | v67) = 109;
  if ((v10 & 0x10) == 0)
  {
LABEL_6:
    if ((v10 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_61;
  }
LABEL_60:
  __s[v11++] = 115;
  if ((v10 & 0x20) == 0)
  {
LABEL_7:
    if ((v10 & 0x40) == 0)
      goto LABEL_8;
LABEL_62:
    __s[v11++] = 118;
    if ((v10 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_63;
  }
LABEL_61:
  __s[v11++] = 117;
  if ((v10 & 0x40) != 0)
    goto LABEL_62;
LABEL_8:
  if ((v10 & 0x80) == 0)
    goto LABEL_9;
LABEL_63:
  __s[v11++] = 121;
LABEL_9:
  __s[v11] = 0;
  v12 = strlen(__s);
  if (v12 >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198B8D4E4);
  }
  v13 = v12;
  v14 = v72;
  if (v72)
    v15 = *((_DWORD *)v72 + 1);
  else
    v15 = 0;
  v16 = v12 + 1;
  if (__OFADD__((_DWORD)v12, 1))
    goto LABEL_68;
  if (v15 < 0)
    goto LABEL_68;
  v17 = __OFADD__(v15, v16);
  v18 = v15 + v16;
  if (v17)
    goto LABEL_68;
  v19 = (v18 + 1);
  if (__OFADD__(v18, 1))
    goto LABEL_68;
  if (v72 && (*((_BYTE *)v72 + 16) & 4) == 0)
  {
    if (v19 <= 0x7FFFFFEF)
    {
      WTF::tryFastCompactMalloc((WTF *)(2 * (v18 + 1) + 20), &v73);
      v26 = v73;
      if (v73)
      {
        *v73 = 2;
        v26[1] = v19;
        *((_WORD *)v26 + 10) = 47;
        *((_QWORD *)v26 + 1) = v26 + 5;
        v26[4] = 0;
        v27 = (_WORD *)v26 + 11;
        v28 = (int8x16_t *)*((_QWORD *)v14 + 1);
        v29 = *((unsigned int *)v14 + 1);
        if ((*((_BYTE *)v14 + 16) & 4) != 0)
        {
          v33 = (char *)&v27[v29];
          if (v29 >= 0x40)
          {
            v34 = (char *)&v27[v29 & 0xFFFFFFC0];
            v35 = 0uLL;
            v36 = (char *)v26 + 22;
            do
            {
              v76.val[0] = *v28;
              v37 = v28[1];
              v78.val[0] = v28[2];
              v38 = v28[3];
              v28 += 4;
              v39 = v38;
              v78.val[1] = 0uLL;
              v80.val[0] = v37;
              v76.val[1] = 0uLL;
              v40 = v36;
              vst2q_s8(v40, v76);
              v40 += 32;
              v80.val[1] = 0uLL;
              vst2q_s8(v40, v80);
              v41 = v36 + 64;
              vst2q_s8(v41, v78);
              v42 = v36 + 96;
              vst2q_s8(v42, *(int8x16x2_t *)(&v35 - 1));
              v36 += 128;
            }
            while (v36 != v34);
          }
          else
          {
            v34 = (char *)v26 + 22;
          }
          while (v34 != v33)
          {
            v43 = v28->u8[0];
            v28 = (int8x16_t *)((char *)v28 + 1);
            *(_WORD *)v34 = v43;
            v34 += 2;
          }
        }
        else if ((_DWORD)v29 == 1)
        {
          *v27 = v28->i16[0];
        }
        else if ((_DWORD)v29)
        {
          memcpy((char *)v26 + 22, v28, 2 * v29);
        }
        v44 = &v27[*((unsigned int *)v14 + 1)];
        *v44 = 47;
        v45 = (char *)(v44 + 1);
        v46 = &v45[2 * v13];
        if ((v13 & 0xFFFFFFC0) != 0)
        {
          v48 = &v45[2 * (v13 & 0xFFFFFFC0)];
          v47 = __s;
          v49 = 0uLL;
          do
          {
            v77.val[0] = *(int8x16_t *)v47;
            v50 = *((int8x16_t *)v47 + 1);
            v79.val[0] = (int8x16_t)*((_OWORD *)v47 + 2);
            v51 = *((_OWORD *)v47 + 3);
            v47 += 64;
            v52 = v51;
            v79.val[1] = 0uLL;
            v81.val[0] = v50;
            v77.val[1] = 0uLL;
            v53 = v45;
            vst2q_s8(v53, v77);
            v53 += 32;
            v81.val[1] = 0uLL;
            vst2q_s8(v53, v81);
            v54 = v45 + 64;
            vst2q_s8(v54, v79);
            v55 = v45 + 96;
            vst2q_s8(v55, *(int8x16x2_t *)(&v49 - 1));
            v45 += 128;
          }
          while (v45 != v48);
          v45 = v48;
        }
        else
        {
          v47 = __s;
        }
        while (v45 != v46)
        {
          v56 = *v47++;
          *(_WORD *)v45 = v56;
          v45 += 2;
        }
        goto LABEL_51;
      }
    }
LABEL_68:
    *a8 = 0;
    __break(0xC471u);
    JUMPOUT(0x198B8D504);
  }
  if ((v19 & 0x80000000) != 0)
    goto LABEL_68;
  WTF::tryFastCompactMalloc((WTF *)(v19 + 20), &v73);
  v26 = v73;
  if (!v73)
    goto LABEL_68;
  *v73 = 2;
  v26[1] = v19;
  *((_BYTE *)v26 + 20) = 47;
  *((_QWORD *)v26 + 1) = v26 + 5;
  v26[4] = 4;
  v30 = (char *)v26 + 21;
  if (v14)
  {
    v28 = (int8x16_t *)*((_QWORD *)v14 + 1);
    v20 = *((unsigned int *)v14 + 1);
    if ((*((_BYTE *)v14 + 16) & 4) != 0)
    {
      if ((_DWORD)v20 == 1)
      {
        *v30 = v28->i8[0];
      }
      else if ((_DWORD)v20)
      {
        memcpy((char *)v26 + 21, v28, v20);
      }
    }
    else
    {
      if (v20 < 0x10)
      {
        v68 = (unsigned __int128 *)((char *)v26 + 21);
      }
      else
      {
        v68 = (unsigned __int128 *)&v30[v20 & 0xFFFFFFF0];
        v69 = (unsigned __int128 *)((char *)v26 + 21);
        do
        {
          v70 = (unsigned __int128)vld2q_s8(v28->i8);
          v28 += 2;
          *v69++ = v70;
        }
        while (v69 != v68);
      }
      while (v68 != (unsigned __int128 *)&v30[v20])
      {
        v71 = v28->i8[0];
        v28 = (int8x16_t *)((char *)v28 + 2);
        *(_BYTE *)v68 = v71;
        v68 = (unsigned __int128 *)((char *)v68 + 1);
      }
    }
    v31 = *((unsigned int *)v14 + 1);
  }
  else
  {
    v31 = 0;
  }
  v30[v31] = 47;
  v32 = &v30[v31 + 1];
  if (v13 == 1)
  {
    *v32 = __s[0];
  }
  else if (v13)
  {
    memcpy(v32, __s, v13);
  }
LABEL_51:
  *a8 = v26;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, (WTF::AtomStringImpl *)v28, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
}

void JSC::RegExpCache::finalize(uint64_t a1, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int16 *v19;
  unsigned int *v20;
  WTF::StringImpl *v21;
  BOOL v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  WTF *v26;
  BOOL v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  WTF::StringImpl *v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  BOOL v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  WTF::StringImpl *v65;
  unsigned int v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  WTF::StringImpl *v84;
  uint64_t *v85;

  v9 = *(unsigned __int16 *)(*(_QWORD *)a2 + 18);
  v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  if (v10)
    *(_DWORD *)v10 += 2;
  v11 = v10 & 0xFFFFFFFFFFLL;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(unsigned int *)(a1 + 16);
  v84 = (WTF::StringImpl *)(v10 & 0xFFFFFFFFFFLL);
  v85 = (uint64_t *)(a1 + 8);
  v83 = v10;
  if (v12)
  {
    v14 = v13 - 1;
    v15 = *(_DWORD *)(a1 + 24);
    v16 = *(_DWORD *)((v10 & 0xFFFFFFFFFFLL) + 0x10);
    if (v16 < 0x100)
    {
      v66 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)(v10 & 0xFFFFFFFFFFLL));
      v11 = (uint64_t)v84;
      v17 = v66;
      v12 = *v85;
    }
    else
    {
      v17 = v16 >> 8;
    }
    v18 = (v17 ^ v15) & v14;
    v19 = (unsigned __int16 *)(v12 + 16 * v18);
    v20 = (unsigned int *)(v19 + 1);
    v21 = (WTF::StringImpl *)(*(unsigned int *)(v19 + 1) | ((unint64_t)*((unsigned __int8 *)v19 + 6) << 32));
    if (*v19)
      v22 = 0;
    else
      v22 = v21 == 0;
    if (!v22)
    {
      v23 = -1;
      if (v11)
      {
        do
        {
          v24 = *((_DWORD *)v21 + 4);
          if (v24 < 0x100)
          {
            v25 = WTF::StringImpl::hashSlowCase(v21);
            v11 = (uint64_t)v84;
          }
          else
          {
            v25 = v24 >> 8;
          }
          if (++v23 > ((v18 + (_DWORD)v13 - ((v25 ^ v15) & v14)) & v14))
            break;
          if (v25 == v17 && *v19 == v9)
          {
            v26 = (WTF *)(*v20 | ((unint64_t)*((unsigned __int8 *)v20 + 4) << 32));
            if (v26)
            {
              if (v26 == (WTF *)v11)
                goto LABEL_40;
              v28 = WTF::equal(v26, v84, a3);
              v11 = (uint64_t)v84;
              if (v28)
                goto LABEL_40;
            }
          }
          v18 = (v18 + 1) & v14;
          v19 = (unsigned __int16 *)(*v85 + 16 * v18);
          v20 = (unsigned int *)(v19 + 1);
          v21 = (WTF::StringImpl *)(*(unsigned int *)(v19 + 1) | ((unint64_t)*((unsigned __int8 *)v19 + 6) << 32));
        }
        while (*v19 || v21 != 0);
      }
      else
      {
        do
        {
          v31 = *((_DWORD *)v21 + 4);
          if (v31 <= 0xFF)
          {
            v30 = WTF::StringImpl::hashSlowCase(v21);
            v11 = (uint64_t)v84;
          }
          else
          {
            v30 = v31 >> 8;
          }
          if (++v23 > ((v18 + (_DWORD)v13 - ((v30 ^ v15) & v14)) & v14))
            break;
          if (v30 == v17 && *v19 == v9 && !(*v20 | ((unint64_t)*((unsigned __int8 *)v20 + 4) << 32)))
          {
LABEL_40:
            v12 = *(_QWORD *)(a1 + 8);
            v13 = *(unsigned int *)(a1 + 16);
            goto LABEL_41;
          }
          v18 = (v18 + 1) & v14;
          v19 = (unsigned __int16 *)(*v85 + 16 * v18);
          v20 = (unsigned int *)(v19 + 1);
          v21 = (WTF::StringImpl *)(*(unsigned int *)(v19 + 1) | ((unint64_t)*((unsigned __int8 *)v19 + 6) << 32));
          if (*v19)
            v29 = 0;
          else
            v29 = v21 == 0;
        }
        while (!v29);
      }
    }
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(unsigned int *)(a1 + 16);
    v19 = (unsigned __int16 *)(v12 + 16 * v13);
  }
  else
  {
    v19 = (unsigned __int16 *)(16 * v13);
  }
LABEL_41:
  if ((unsigned __int16 *)(v12 + 16 * v13) != v19)
  {
    v32 = (WTF::StringImpl *)(*(unsigned int *)(v19 + 1) | ((unint64_t)*((unsigned __int8 *)v19 + 6) << 32));
    *(_DWORD *)(v19 + 1) = 0;
    *((_BYTE *)v19 + 6) = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::~StringImpl(v32, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
        v11 = (uint64_t)v84;
      }
      else
      {
        *(_DWORD *)v32 -= 2;
      }
    }
    v33 = *((_QWORD *)v19 + 1);
    if (v33)
      *(_QWORD *)(v33 + 8) = 3;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    v34 = *(_DWORD *)(a1 + 16);
    v35 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v35;
    v36 = v34 - 1;
    v37 = *(_QWORD *)(a1 + 8);
    v38 = (unint64_t)v19 - v37;
    v39 = ((((unint64_t)v19 - v37) >> 4) + 1) & (v34 - 1);
    v40 = v37 + 16 * v39;
    v41 = (unsigned int *)(v40 + 2);
    v42 = (WTF::StringImpl *)(*(unsigned int *)(v40 + 2) | ((unint64_t)*(unsigned __int8 *)(v40 + 6) << 32));
    if (*(_WORD *)v40)
      v43 = 0;
    else
      v43 = v42 == 0;
    if (!v43)
    {
      v44 = *(_DWORD *)(a1 + 24);
      v45 = v37 + (v38 & 0xFFFFFFFF0);
      v46 = v39;
      do
      {
        v47 = *((_DWORD *)v42 + 4);
        if (v47 < 0x100)
        {
          v48 = WTF::StringImpl::hashSlowCase(v42);
          v11 = (uint64_t)v84;
        }
        else
        {
          v48 = v47 >> 8;
        }
        if (((v46 + v34 - ((v48 ^ v44) & v36)) & v36) == 0)
          break;
        WTF::GenericHashTraits<WTF::KeyValuePair<JSC::RegExpKey,JSC::Weak<JSC::RegExp>>>::assignToEmpty<WTF::KeyValuePair<JSC::RegExpKey,JSC::Weak<JSC::RegExp>>,WTF::KeyValuePair<JSC::RegExpKey,JSC::Weak<JSC::RegExp>>>(v45, v40, (uint64_t)a3, a4, a5, a6, a7, a8);
        v49 = v37 + 16 * v39;
        v52 = *(_QWORD *)(v49 + 8);
        v50 = (_QWORD *)(v49 + 8);
        v51 = v52;
        if (v52)
        {
          *(_QWORD *)(v51 + 8) = 3;
          *v50 = 0;
        }
        v53 = (WTF::StringImpl *)(*v41 | ((unint64_t)*((unsigned __int8 *)v41 + 4) << 32));
        *v41 = 0;
        *((_BYTE *)v41 + 4) = 0;
        v11 = (uint64_t)v84;
        if (v53)
        {
          if (*(_DWORD *)v53 == 2)
          {
            WTF::StringImpl::~StringImpl(v53, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
            v11 = (uint64_t)v84;
          }
          else
          {
            *(_DWORD *)v53 -= 2;
          }
        }
        *(_QWORD *)v40 = 0;
        *(_QWORD *)(v40 + 8) = 0;
        v39 = (v46 + 1) & v36;
        v37 = *v85;
        v45 = *v85 + 16 * v46;
        v40 = *v85 + 16 * v39;
        v41 = (unsigned int *)(v40 + 2);
        v42 = (WTF::StringImpl *)(*(unsigned int *)(v40 + 2) | ((unint64_t)*(unsigned __int8 *)(v40 + 6) << 32));
        v54 = !*(_WORD *)v40 && v42 == 0;
        v46 = (v46 + 1) & v36;
      }
      while (!v54);
      v34 = *(_DWORD *)(a1 + 16);
      v35 = *(_DWORD *)(a1 + 20);
    }
    v63 = 6 * v35;
    if (v34 >= 9 && v63 < v34)
    {
      WTF::RobinHoodHashTable<JSC::RegExpKey,WTF::KeyValuePair<JSC::RegExpKey,JSC::Weak<JSC::RegExp>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::RegExpKey,JSC::Weak<JSC::RegExp>>>,WTF::DefaultHash<JSC::RegExpKey>,WTF::HashMap<JSC::RegExpKey,JSC::Weak<JSC::RegExp>,WTF::DefaultHash<JSC::RegExpKey>,WTF::HashTraits<JSC::RegExpKey>,WTF::HashTraits<JSC::Weak<JSC::RegExp>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::RegExpKey>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash((uint64_t)v85, v34 >> 1, (uint64_t)a3, a4, a5, a6, a7, a8);
      v11 = (uint64_t)v84;
    }
  }
  if (v11)
  {
    v65 = (WTF::StringImpl *)(v83 & 0xFFFFFFFFFFLL);
    if (*(_DWORD *)(v83 & 0xFFFFFFFFFFLL) == 2)
    {
      WTF::StringImpl::~StringImpl(v65, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
    }
    else
    {
      *(_DWORD *)v65 = *(_DWORD *)(v83 & 0xFFFFFFFFFFLL) - 2;
    }
  }
}

void JSC::RegExpCache::visitAggregate(JSC::RegExpCache *this, JSC::SlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  char *v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;

  v10 = 0;
  v11 = (char *)this + 40;
  do
  {
    v12 = *(_QWORD *)&v11[v10];
    if (!v12)
      goto LABEL_8;
    if ((v12 & 8) != 0)
    {
      if ((*(_BYTE *)(v12 - 79) & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      v13 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != v13)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v13, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFC000) + 8 * ((v12 >> 10) & 0xF) + 0x28) >> (v12 >> 4)) & 1) != 0)
      {
LABEL_7:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_8;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v12, 0, a4, a5, a6, a7, a8);
LABEL_8:
    v10 += 8;
  }
  while (v10 != 512);
  v14 = *((_QWORD *)this + 69);
  if (!v14)
    return;
  if ((v14 & 8) != 0)
  {
    if ((*(_BYTE *)(v14 - 79) & 1) != 0)
      goto LABEL_14;
    goto LABEL_19;
  }
  v15 = *((_DWORD *)a2 + 33);
  if (*(_DWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 0x20) != v15)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v14 & 0xFFFFFFFFFFFFC000), v15, a3, a4, a5, a6, a7, a8);
  if (((*(_QWORD *)((v14 & 0xFFFFFFFFFFFFC000) + 8 * ((v14 >> 10) & 0xF) + 0x28) >> (v14 >> 4)) & 1) == 0)
  {
LABEL_19:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v14, 0, a4, a5, a6, a7, a8);
    return;
  }
LABEL_14:
  if (*((_QWORD *)a2 + 21))
    goto LABEL_19;
}

void JSC::RegExpCachedResult::visitAggregate(JSC::RegExpCachedResult *this, JSC::SlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;

  v10 = *((_QWORD *)this + 3);
  if (v10)
  {
    if ((v10 & 8) != 0)
    {
      if ((*(_BYTE *)(v10 - 79) & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      v11 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 0x20) != v11)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v10 & 0xFFFFFFFFFFFFC000), v11, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v10 & 0xFFFFFFFFFFFFC000) + 8 * ((v10 >> 10) & 0xF) + 0x28) >> (v10 >> 4)) & 1) != 0)
      {
LABEL_6:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_7;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v10, 0, a4, a5, a6, a7, a8);
  }
LABEL_7:
  v12 = *((_QWORD *)this + 4);
  if (!v12)
    goto LABEL_13;
  if ((v12 & 8) != 0)
  {
    if ((*(_BYTE *)(v12 - 79) & 1) != 0)
      goto LABEL_12;
  }
  else
  {
    v13 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != v13)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v13, a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFC000) + 8 * ((v12 >> 10) & 0xF) + 0x28) >> (v12 >> 4)) & 1) != 0)
    {
LABEL_12:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_13;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v12, 0, a4, a5, a6, a7, a8);
LABEL_13:
  if (!*((_BYTE *)this + 16))
    return;
  v14 = *((_QWORD *)this + 6);
  if (v14)
  {
    if ((v14 & 8) != 0)
    {
      if ((*(_BYTE *)(v14 - 79) & 1) != 0)
        goto LABEL_20;
    }
    else
    {
      v15 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 0x20) != v15)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v14 & 0xFFFFFFFFFFFFC000), v15, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v14 & 0xFFFFFFFFFFFFC000) + 8 * ((v14 >> 10) & 0xF) + 0x28) >> (v14 >> 4)) & 1) != 0)
      {
LABEL_20:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_21;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v14, 0, a4, a5, a6, a7, a8);
  }
LABEL_21:
  v16 = *((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_27;
  if ((v16 & 8) != 0)
  {
    if ((*(_BYTE *)(v16 - 79) & 1) != 0)
      goto LABEL_26;
  }
  else
  {
    v17 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
    {
LABEL_26:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_27;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, a4, a5, a6, a7, a8);
LABEL_27:
  v18 = *((_QWORD *)this + 7);
  if (!v18)
    goto LABEL_33;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) != 0)
      goto LABEL_32;
  }
  else
  {
    v19 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != v19)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), v19, a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) != 0)
    {
LABEL_32:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_33;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v18, 0, a4, a5, a6, a7, a8);
LABEL_33:
  v20 = *((_QWORD *)this + 8);
  if (v20)
  {
    if ((v20 & 8) != 0)
    {
      if ((*(_BYTE *)(v20 - 79) & 1) == 0)
        goto LABEL_39;
    }
    else
    {
      v21 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != v21)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000), v21, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) == 0)
        goto LABEL_39;
    }
    if (*((_QWORD *)a2 + 21))
LABEL_39:
      JSC::SlotVisitor::appendSlow((uint64_t)a2, v20, 0, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::RegExpCachedResult::lastResult(JSC::RegExpCachedResult *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  JSC::JSString *v12;
  JSC *v13;
  JSC::JSGlobalObject *v14;
  unint64_t EmptyRegExpMatchesArray;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  JSC::JSGlobalObject *v25;
  uint64_t v26;
  JSC::JSGlobalObject *v27;

  if (*((_BYTE *)this + 16))
    return *((_QWORD *)this + 5);
  v10 = *((_QWORD *)a2 + 7);
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 6) = v11;
  if (a3 && v11 && *(_DWORD *)(v10 + 760) >= *((unsigned __int8 *)a3 + 7))
  {
    v25 = a2;
    JSC::Heap::writeBarrierSlowPath(v10 + 192, (unint64_t)a3);
    a2 = v25;
  }
  v12 = (JSC::JSString *)*((_QWORD *)this + 4);
  if (!v12)
  {
    v27 = a2;
    v26 = *(_QWORD *)(v10 + 93032);
    v12 = *(JSC::JSString **)(v26 + 552);
    if (!v12)
    {
      v12 = (JSC::JSString *)JSC::RegExpCache::lookupOrCreate(*(_QWORD *)(v10 + 93032), v10, (const WTF::StringImpl *)&WTF::emptyStringData, 0, a5, a6, a7, a8);
      *(_QWORD *)(v26 + 552) = v12;
    }
    *((_QWORD *)this + 4) = v12;
    if (a3 && v12)
    {
      a2 = v27;
      if (*(_DWORD *)(v10 + 760) >= *((unsigned __int8 *)a3 + 7))
      {
        JSC::Heap::writeBarrierSlowPath(v10 + 192, (unint64_t)a3);
        a2 = v27;
        v12 = (JSC::JSString *)*((_QWORD *)this + 4);
      }
    }
    else
    {
      a2 = v27;
    }
  }
  v13 = a2;
  v14 = (JSC::JSGlobalObject *)*((_QWORD *)this + 3);
  if (*(_QWORD *)this == -1)
    EmptyRegExpMatchesArray = JSC::createEmptyRegExpMatchesArray(v13, v14, v12, (JSC::RegExp *)0xFFFFFFFFFFFFFFFFLL, a5, a6, a7, a8);
  else
    EmptyRegExpMatchesArray = (unint64_t)JSC::createRegExpMatchesArray(v13, v14, v12, *(JSC::RegExp **)this, a5, a6, a7, a8);
  v23 = EmptyRegExpMatchesArray;
  if (!*(_DWORD *)(v10 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v16, v17, v18, v19, v20, v21, v22))
  {
    *((_QWORD *)this + 5) = v23;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    *((_BYTE *)this + 16) = 1;
    if (a3)
    {
      if (*(_DWORD *)(v10 + 760) >= *((unsigned __int8 *)a3 + 7))
        JSC::Heap::writeBarrierSlowPath(v10 + 192, (unint64_t)a3);
    }
    return *((_QWORD *)this + 5);
  }
  return 0;
}

JSC::JSObject *JSC::createRegExpMatchesArray(JSC *this, JSC::JSGlobalObject *a2, JSC::JSString *a3, JSC::RegExp *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v12;
  int **v13;
  int *v14;
  unsigned int v15;
  _BOOL8 v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WTF::AtomStringImpl *v34;
  JSC::Structure *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  int v42;
  JSC::JSObject *v43;
  unint64_t v44;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  JSC *v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t SlowCase;
  _QWORD *v66;
  _QWORD *v67;
  int v68;
  JSC::JSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned __int8 *v78;
  void *v80;
  unsigned __int8 *v81;
  int v82;
  JSC::JSObject *UninitializedRestricted;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  int v89;
  unint64_t v90;
  JSC::JSObject *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  JSC::JSObject *v103;
  int v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int *v113;
  int *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  JSC::VM *v142;
  int v143;
  JSC::VM *v144;
  int v145;
  JSC::Structure *v146;
  JSC *v147;
  unsigned int v148;
  uint64_t v149;
  JSC::JSObject *Uninitialized;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int i;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  void **v160;
  void *v161;
  const WTF::String *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unint64_t v169;
  uint64_t IndexQuickly;
  int *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __n128 v175;
  WTF::StringImpl *v176;
  BOOL v177;
  int *v178;
  WTF::StringImpl *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __n128 v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  JSC::JSObject *v206;
  unint64_t v207;
  JSC::JSObject *v208;
  unsigned int v209;
  unsigned int v210;
  BOOL v211;
  unsigned int v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  unint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t __dst;
  unsigned int v226[6];
  __int128 v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  JSC **v233;
  JSC::JSGlobalObject **v234;
  uint64_t v235;
  unsigned int *v236;
  JSC::JSGlobalObject **v237;
  BOOL *v238;
  int **v239;
  unint64_t *v240;
  unsigned __int8 *v241;
  JSC::JSObject **v242;
  JSC **v243;
  int **v244;
  int *v245;
  unint64_t v246;
  int *v247;
  unsigned __int8 v248;
  BOOL v249;
  JSC::JSObject *v250;
  JSC::JSObject *v251;
  int *v252;
  uint64_t v253;
  _BYTE v254[128];
  JSC::JSGlobalObject *v255;
  JSC *v256;
  WTF::StringImpl *v257[2];

  v8 = a4;
  v12 = *((_QWORD *)this + 7);
  *(_OWORD *)v226 = xmmword_199154590;
  v13 = (int **)((char *)a2 + 8);
  if ((*((_BYTE *)a2 + 8) & 1) != 0)
    v13 = JSC::JSRopeString::resolveRope((unint64_t)a2, this, (uint64_t)a3, (uint64_t)a4, (int8x16_t)xmmword_199154590, a5, a6, a7, a8);
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v255 = a2;
  v256 = this;
  v252 = (int *)v254;
  v253 = 32;
  v232 = this;
  v14 = *v13;
  if (*v13)
  {
    v15 = v14[4];
    v16 = (v15 & 4) == 0;
    v17 = *((_QWORD *)v14 + 1);
    LODWORD(v14) = v14[1];
    v18 = (v15 >> 2) & 1;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    LOBYTE(v18) = 1;
  }
  v19 = *((unsigned __int8 *)a3 + 16);
  if (v19 == 1)
  {
    v20 = *((_QWORD *)a3 + 5);
    if (v16)
    {
      v120 = *(_QWORD *)(v20 + 40);
      if (v120 && *(_DWORD *)(v120 + 4))
        goto LABEL_10;
    }
    else
    {
      v21 = *(_QWORD *)(v20 + 24);
      if (v21 && *(_DWORD *)(v21 + 4))
      {
LABEL_10:
        v234 = &v232;
        v235 = v12;
        v236 = (unsigned int *)a3;
        goto LABEL_11;
      }
    }
    goto LABEL_165;
  }
  if (v19 != 2 && *((_BYTE *)a3 + 16))
  {
LABEL_165:
    *(_QWORD *)&v227 = v17;
    DWORD2(v227) = (_DWORD)v14;
    BYTE12(v227) = v18;
    LOBYTE(v228) = 1;
    JSC::RegExp::compile((uint64_t)a3, v12, v16, &v227);
    v19 = *((unsigned __int8 *)a3 + 16);
  }
  v234 = &v232;
  v235 = v12;
  v236 = (unsigned int *)a3;
  if (!v19)
    goto LABEL_100;
LABEL_11:
  v22 = (_DWORD *)*((_QWORD *)a3 + 6);
  if (v22 && v22[5])
    v23 = *v22 + 2 * *((_DWORD *)a3 + 6);
  else
    v23 = 2 * *((_DWORD *)a3 + 6);
  v24 = v23 + 2;
  v25 = HIDWORD(v253);
  if (HIDWORD(v253) < (unint64_t)(v23 + 2) && v253 < (unint64_t)v24)
  {
    v110 = v253 + ((unint64_t)v253 >> 2);
    if (v110 >= 0x10)
      v111 = v110 + 1;
    else
      v111 = 16;
    if (v111 <= v24)
      v112 = v24;
    else
      v112 = v111;
    v113 = v252;
    if (v112 < 0x21)
    {
      v252 = (int *)v254;
      LODWORD(v253) = 32;
      v114 = (int *)v254;
    }
    else
    {
      if (v112 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x198B8EF34);
      }
      v114 = (int *)WTF::fastMalloc((WTF *)(4 * v112));
      LODWORD(v253) = v112;
      v252 = v114;
    }
    memcpy(v114, v113, 4 * v25);
    if (v254 != (_BYTE *)v113 && v113)
    {
      if (v252 == v113)
      {
        v252 = 0;
        LODWORD(v253) = 0;
      }
      WTF::fastFree((unint64_t)v113, v115, v116, v117, v118, a6, a7, a8);
    }
  }
  v26 = (_QWORD *)(v12 + 90552);
  HIDWORD(v253) = v24;
  v27 = v252;
  if (*((_BYTE *)a3 + 16) != 1)
    goto LABEL_167;
  v28 = *(unsigned __int8 *)(*((_QWORD *)a3 + 5) + 104);
  v228 = 0;
  v229 = 0;
  v29 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)&v227 = v12;
  *((_QWORD *)&v227 + 1) = v29;
  *v26 = a3;
  if (v28)
  {
    v78 = (unsigned __int8 *)(v12 + 93049);
    if (__ldaxr((unsigned __int8 *)(v12 + 93049)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v78))
    {
LABEL_86:
      v80 = *(void **)(v12 + 93056);
      if (!v80)
      {
        v80 = (void *)WTF::fastMalloc((WTF *)0x2000);
        bzero(v80, 0x2000uLL);
        v138 = *(_QWORD *)(v12 + 93056);
        *(_QWORD *)(v12 + 93056) = v80;
        if (v138)
        {
          WTF::fastFree(v138, v131, v132, v133, v134, v135, v136, v137);
          v80 = *(void **)(v12 + 93056);
        }
      }
      v228 = v80;
      LODWORD(v229) = 0x2000;
      goto LABEL_17;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v78);
    goto LABEL_86;
  }
LABEL_17:
  v30 = *v13;
  if (!*v13)
  {
    v31 = 0;
    v32 = 0;
    goto LABEL_20;
  }
  if ((v30[4] & 4) != 0)
  {
    v31 = *((_QWORD *)v30 + 1);
    v32 = v30[1];
LABEL_20:
    v33 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _DWORD *, __int128 *))(*((_QWORD *)a3 + 5) + 16))(v31, v8, v32, v27, &v227);
    goto LABEL_21;
  }
  v33 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _DWORD *, __int128 *))(*((_QWORD *)a3 + 5) + 32))(*((_QWORD *)v30 + 1), v8, v30[1], v27, &v227);
LABEL_21:
  v42 = v33;
  if (!v228)
    goto LABEL_22;
  v81 = (unsigned __int8 *)(v227 + 93049);
  v82 = __ldxr((unsigned __int8 *)(v227 + 93049));
  if (v82 != 1)
  {
    __clrex();
    goto LABEL_92;
  }
  if (__stlxr(0, v81))
LABEL_92:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v81, 0, (uint64_t)v35, v36, v37, v38, v39, v40);
LABEL_22:
  if (!HIDWORD(v229))
    *(_QWORD *)(v227 + 90552) = 0;
  if (v42 == -2)
  {
    JSC::RegExp::byteCodeCompileIfNecessary(a3, (JSC::VM *)v12);
    if (*((_BYTE *)a3 + 16))
    {
LABEL_167:
      *v26 = a3;
      v121 = *v13;
      if (*v13)
      {
        v122 = v121[4];
        v123 = *((_QWORD *)v121 + 1);
        LODWORD(v121) = v121[1];
        v124 = (v122 >> 2) & 1;
      }
      else
      {
        v123 = 0;
        v124 = 1;
      }
      v42 = JSC::Yarr::interpret(*((_QWORD *)a3 + 4), v123, v121 | (unint64_t)(v124 << 32), v8, (uint64_t)v27, a6, a7, a8);
      *v26 = 0;
      goto LABEL_25;
    }
LABEL_100:
    v42 = JSC::RegExp::matchInline<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,(JSC::Yarr::MatchFrom)0>(JSC::JSGlobalObject *,JSC::VM &,WTF::String const&,unsigned int,WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(void)#1}::operator()(&v234);
    goto LABEL_27;
  }
LABEL_25:
  if (*v13 && (*v13)[1] < 0)
  {
    v210 = 0;
    v211 = v42 < -1;
LABEL_233:
    v212 = 2 * v210;
    do
    {
      v213 = v212;
      v214 = v27[v212];
      if (v214 <= -2)
      {
        v215 = (v213 + 1);
LABEL_240:
        v27[v213] = -1;
        v27[v215] = -1;
        ++v210;
        v211 = 1;
        if (v210 <= *((_DWORD *)a3 + 6))
          goto LABEL_233;
        goto LABEL_28;
      }
      if ((v214 & 0x80000000) == 0)
      {
        v215 = (v213 + 1);
        if ((int)v27[v215] < -1)
          goto LABEL_240;
      }
      ++v210;
      v212 = v213 + 2;
    }
    while (v210 <= *((_DWORD *)a3 + 6));
    if (!v211)
      goto LABEL_27;
    goto LABEL_28;
  }
LABEL_27:
  if (v42 != -1)
  {
    *(_QWORD *)v226 = v42;
    if (HIDWORD(v253) <= 1)
    {
      __break(0xC471u);
      JUMPOUT(0x198B8EE58);
    }
    *(_QWORD *)&v226[2] = v252[1];
    v250 = 0;
    v251 = 0;
    v47 = *((_DWORD *)a3 + 6);
    v48 = *((_QWORD *)a3 + 6);
    if (v48)
    {
      v119 = *(_DWORD *)(v48 + 20);
      v249 = v119 != 0;
      v51 = *((_BYTE *)a3 + 18) & 1;
      v248 = *((_BYTE *)a3 + 18) & 1;
      v247 = 0;
      if (v119)
      {
        v143 = *((_DWORD *)v256 + 233);
        if (v143)
          v144 = (JSC::VM *)(16 * (v143 & 0xFFFFFFFE));
        else
          v144 = 0;
        v49 = JSC::constructEmptyObject((JSC *)v12, v144, v35, v36, v37, v38, v39, v40);
        v51 = v248;
      }
      else
      {
        v49 = 0;
      }
    }
    else
    {
      v49 = 0;
      v249 = 0;
      v50 = *((unsigned __int8 *)a3 + 18);
      v51 = v50 & 1;
      v248 = v50 & 1;
    }
    v247 = (int *)v49;
    v52 = v256;
    if (v51)
    {
      v139 = *((_DWORD *)v256 + 254);
      if (v139)
        v140 = 16 * (v139 & 0xFFFFFFFE);
      else
        v140 = 0;
      v245 = 0;
      v246 = v140;
      if (v249)
      {
        v141 = *((_DWORD *)v256 + 233);
        if (v141)
          v142 = (JSC::VM *)(16 * (v141 & 0xFFFFFFFE));
        else
          v142 = 0;
        v53 = JSC::constructEmptyObject((JSC *)v12, v142, v35, v36, v37, v38, v39, v40);
        v52 = v256;
      }
      else
      {
        v53 = 0;
      }
    }
    else
    {
      v53 = 0;
      v54 = *((_DWORD *)v256 + 253);
      if (v54)
        v55 = 16 * (v54 & 0xFFFFFFFE);
      else
        v55 = 0;
      v246 = v55;
    }
    v234 = &v251;
    v235 = v12;
    v236 = v226;
    v237 = &v255;
    v238 = &v249;
    v239 = &v247;
    v240 = &v246;
    v241 = &v248;
    v242 = &v250;
    v243 = &v256;
    v244 = &v245;
    v245 = (int *)v53;
    v232 = (WTF::StringImpl *)v12;
    v233 = &v256;
    if (*(_BYTE *)(*((_QWORD *)v52 + 256) + 4) == 2)
    {
      *(_QWORD *)&v227 = v12;
      BYTE8(v227) = 0;
      v230 = v12;
      v231 = (WTF::StringImpl *)v12;
      UninitializedRestricted = (JSC::JSObject *)JSC::JSArray::tryCreateUninitializedRestricted((uint64_t *)&v231, (JSC::VM *)&v227, v246, v47 + 1, v37, v38, v39, v40);
      v251 = UninitializedRestricted;
      if (v248)
      {
        v89 = *((_DWORD *)v256 + 255);
        if (v89)
          v90 = 16 * (v89 & 0xFFFFFFFE);
        else
          v90 = 0;
        v250 = (JSC::JSObject *)JSC::JSArray::tryCreateUninitializedRestricted(&v230, (JSC::VM *)&v227, v90, v47 + 1, v84, v85, v86, v87);
        UninitializedRestricted = v251;
      }
      if (!UninitializedRestricted)
      {
        __break(0xC471u);
        JUMPOUT(0x198B8E9B4);
      }
      JSC::createRegExpMatchesArray(JSC::VM &,JSC::JSGlobalObject *,JSC::JSString *,WTF::String const&,JSC::RegExp *,unsigned int,JSC::MatchResult &)::{lambda(void)#1}::operator()((uint64_t)&v234, v88);
      v91 = v251;
      v95 = JSC::jsSubstringOfResolved(v12, (uint64_t)&v227, (uint64_t)v255, v226[0], v226[2] - v226[0], v92, v93, v94);
      JSC::JSObject::initializeIndexWithoutBarrier((uint64_t)v91, (uint64_t)&v231, 0, v95);
      if (v47)
      {
        v96 = 1;
        v97 = 2;
        do
        {
          if (HIDWORD(v253) <= v97)
          {
            __break(0xC471u);
            JUMPOUT(0x198B8EF14);
          }
          v98 = v252[v97];
          if ((v98 & 0x80000000) != 0)
          {
            v99 = 10;
          }
          else
          {
            if (HIDWORD(v253) <= v97 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198B8EF24);
            }
            v99 = JSC::jsSubstringOfResolved(v12, (uint64_t)&v227, (uint64_t)v255, v98, (v252[v97 + 1] - v98), v38, v39, v40);
          }
          JSC::JSObject::initializeIndexWithoutBarrier((uint64_t)v251, (uint64_t)&v231, v96++, v99);
          v97 += 2;
        }
        while (v96 <= v47);
      }
      if (v248)
      {
        v100 = 0;
        v101 = 0;
        do
        {
          if (HIDWORD(v253) <= v100)
          {
            __break(0xC471u);
            JUMPOUT(0x198B8EF1CLL);
          }
          v102 = v252[v100];
          v103 = v250;
          if ((v102 & 0x80000000) != 0)
          {
            v107 = *((_QWORD *)v250 + 1);
            if ((*((_BYTE *)v250 + 4) & 0xFu) - 8 >= 2)
            {
              switch(*((_BYTE *)v250 + 4) & 0xF)
              {
                case 3:
                  __break(0xC471u);
                  JUMPOUT(0x198B8EED8);
                case 4:
                case 5:
                  __break(0xC471u);
                  JUMPOUT(0x198B8EEB8);
                case 6:
                case 7:
                  __break(0xC471u);
                  JUMPOUT(0x198B8EE98);
                case 0xA:
                case 0xB:
                case 0xC:
                case 0xD:
                  *(_QWORD *)(v107 + 8 * v101 + 16) = 10;
                  break;
                default:
                  __break(0xC471u);
                  JUMPOUT(0x198B8EEF8);
              }
            }
            else
            {
              *(_QWORD *)(v107 + 8 * v101) = 10;
            }
          }
          else
          {
            if (HIDWORD(v253) <= v100 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198B8EF2CLL);
            }
            __dst = v252[v100 + 1];
            v257[0] = v232;
            v104 = *((_DWORD *)*v233 + 227);
            if (v104)
              v105 = 16 * (v104 & 0xFFFFFFFE);
            else
              v105 = 0;
            v106 = JSC::JSArray::tryCreateUninitializedRestricted((uint64_t *)v257, (JSC::VM *)&v227, v105, 2, v37, v38, v39, v40);
            JSC::JSObject::initializeIndexWithoutBarrier(v106, (uint64_t)v257, 0, v102 | 0xFFFE000000000000);
            JSC::JSObject::initializeIndexWithoutBarrier(v106, (uint64_t)v257, 1u, __dst | 0xFFFE000000000000);
            if (*((_BYTE *)v257[0] + 755))
              __dmb(0xAu);
            JSC::JSObject::initializeIndexWithoutBarrier((uint64_t)v103, (uint64_t)&v230, v101, v106);
          }
          ++v101;
          v100 += 2;
        }
        while (v101 <= v47);
      }
      if (*(_BYTE *)(v230 + 755))
        __dmb(0xAu);
      if (!*((_BYTE *)v231 + 755))
        goto LABEL_75;
LABEL_74:
      __dmb(0xAu);
LABEL_75:
      if (BYTE8(v227))
        JSC::Heap::collectIfNecessaryOrDefer(v227 + 192, 0);
      if (v249 && v47)
      {
        for (i = 1; i <= v47; ++i)
        {
          JSC::RegExp::getCaptureGroupNameForSubpatternId((uint64_t)a3, i, v257);
          if (v257[0])
          {
            v156 = *((unsigned int *)v257[0] + 1);
            if ((_DWORD)v156)
            {
              v157 = *((_DWORD *)v257[0] + 4);
              v158 = *((_QWORD *)v257[0] + 1);
              v159 = HIDWORD(v253);
              *(_QWORD *)&v227 = &v228;
              DWORD2(v227) = 32;
              HIDWORD(v227) = HIDWORD(v253);
              if (HIDWORD(v253) >= 0x21)
              {
                if (HIDWORD(v253) >> 30)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198B8EF54);
                }
                v160 = (void **)WTF::fastMalloc((WTF *)(4 * HIDWORD(v253)));
                DWORD2(v227) = v159;
                *(_QWORD *)&v227 = v160;
                v159 = HIDWORD(v253);
              }
              else
              {
                v160 = &v228;
              }
              memcpy(v160, v252, 4 * v159);
              v224 = v224 & 0xFFFFFF0000000000 | v156 | ((unint64_t)((v157 >> 2) & 1) << 32);
              v168 = JSC::RegExp::subpatternIdForGroupName<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, v158, v224, (uint64_t)&v227);
              v169 = v227;
              if (&v228 != (void **)v227 && (_QWORD)v227)
              {
                *(_QWORD *)&v227 = 0;
                DWORD2(v227) = 0;
                WTF::fastFree(v169, v161, (uint64_t)v162, v163, v164, v165, v166, v167);
              }
              if (v168)
                IndexQuickly = JSC::JSObject::getIndexQuickly(v251, v168);
              else
                IndexQuickly = 10;
              v171 = v247;
              JSC::Identifier::fromString((uint64_t **)v12, v257, v162, v163, v164, v165, v166, v167, &v231);
              JSC::JSObject::putDirect(v171, v12, (unint64_t)v231, IndexQuickly, 0, v175, v172, v173, v174);
              v176 = v231;
              v231 = 0;
              if (v176)
              {
                if (*(_DWORD *)v176 == 2)
                {
                  WTF::StringImpl::~StringImpl(v176, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
                  WTF::fastFree(v195, v196, v197, v198, v199, v200, v201, v202);
                }
                else
                {
                  *(_DWORD *)v176 -= 2;
                }
              }
              if (v168)
                v177 = v248 == 0;
              else
                v177 = 1;
              if (!v177)
              {
                v178 = v245;
                JSC::Identifier::fromString((uint64_t **)v12, v257, v35, v36, v37, v38, v39, v40, &v231);
                v179 = v231;
                v180 = JSC::JSObject::getIndexQuickly(v250, v168);
                JSC::JSObject::putDirect(v178, v12, (unint64_t)v179, v180, 0, v184, v181, v182, v183);
                v185 = v231;
                v231 = 0;
                if (v185)
                {
                  if (*(_DWORD *)v185 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v185, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
                    WTF::fastFree(v216, v217, v218, v219, v220, v221, v222, v223);
                  }
                  else
                  {
                    *(_DWORD *)v185 -= 2;
                  }
                }
              }
            }
            v186 = v257[0];
            v257[0] = 0;
            if (v186)
            {
              if (*(_DWORD *)v186 == 2)
              {
                WTF::StringImpl::~StringImpl(v186, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
                WTF::fastFree(v187, v188, v189, v190, v191, v192, v193, v194);
              }
              else
              {
                *(_DWORD *)v186 -= 2;
              }
            }
          }
        }
      }
      v43 = v251;
      goto LABEL_29;
    }
    *(_QWORD *)&v227 = v12;
    BYTE8(v227) = 0;
    v257[0] = (WTF::StringImpl *)v12;
    v56 = v47 + 1;
    if (v47 + 1 > 0x10000000)
    {
      SlowCase = 0;
      goto LABEL_59;
    }
    v57 = v246;
    v58 = *(unsigned __int16 *)(v246 + 24);
    if (v58 == 65534)
      goto LABEL_49;
    if (v58 == 0xFFFF)
      v58 = *(_DWORD *)(*(_QWORD *)(v246 + 64) + 84);
    if (v58 < 64)
    {
LABEL_49:
      v59 = 0;
    }
    else if ((v58 - 63) >= 5)
    {
      v76 = (v58 - 64) | ((v58 - 64) >> 1) | (((v58 - 64) | ((v58 - 64) >> 1)) >> 2);
      v77 = v76 | (v76 >> 4) | ((v76 | (v76 >> 4)) >> 8);
      v59 = (v77 | HIWORD(v77)) + 1;
    }
    else
    {
      v59 = 4;
    }
    v60 = v59;
    v61 = v59 + (unint64_t)v56;
    v62 = 8 * v61;
    if (v61 <= 0x3EB && (v63 = *(_QWORD *)(v12 + (((unint64_t)(v62 + 23) >> 1) & 0xFFFFFFFF8) + 6736)) != 0)
    {
      v64 = *(unsigned int *)(v63 + 60);
      SlowCase = *(_QWORD *)(v63 + 24);
      if (SlowCase >= *(_QWORD *)(v63 + 32))
      {
        SlowCase = *(_QWORD *)(v63 + 40);
        if ((SlowCase & 1) == 0)
        {
          v109 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v63 + 48);
          *(_QWORD *)(v63 + 32) = SlowCase + HIDWORD(v109);
          *(_QWORD *)(v63 + 40) = SlowCase + (int)v109;
          *(_QWORD *)(v63 + 24) = SlowCase + v64;
          goto LABEL_55;
        }
        JSC::sanitizeStackForVM((JSC *)v12, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v63, v12 + 192, v64, (uint64_t)&v227, 1, v128, v129, v130);
      }
      else
      {
        *(_QWORD *)(v63 + 24) = SlowCase + v64;
      }
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v12 + 6648, (JSC *)v12, v62 + 8, (uint64_t)&v227, v37, v38, v39, v40);
    }
    if (!SlowCase)
      goto LABEL_59;
LABEL_55:
    v41.n128_u64[0] = (unint64_t)vdup_n_s32(v56);
    v66 = (_QWORD *)(SlowCase + 8 * v60);
    *v66 = v41.n128_u64[0];
    v67 = v66 + 1;
    SlowCase = *(_QWORD *)(v12 + 37584);
    if (SlowCase >= *(_QWORD *)(v12 + 37592))
    {
      SlowCase = *(_QWORD *)(v12 + 37600);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v12, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v12 + 37560, v12 + 192, 16, (uint64_t)&v227, 0, v125, v126, v127);
LABEL_57:
        *(_DWORD *)SlowCase = 0;
        v68 = *(_DWORD *)(v57 + 8);
        *(_DWORD *)SlowCase = v57 >> 4;
        *(_DWORD *)(SlowCase + 4) = v68;
        *(_QWORD *)(SlowCase + 8) = v67;
        if (*(_BYTE *)(v12 + 755))
          __dmb(0xAu);
LABEL_59:
        v251 = (JSC::JSObject *)SlowCase;
        if (v248)
        {
          v145 = *((_DWORD *)v256 + 255);
          if (v145)
            v146 = (JSC::Structure *)(16 * (v145 & 0xFFFFFFFE));
          else
            v146 = 0;
          if (v56 > 0x10000000)
          {
            Uninitialized = 0;
          }
          else
          {
            v147 = v257[0];
            v148 = JSC::Structure::outOfLineCapacity(v146);
            Uninitialized = (JSC::JSObject *)JSC::Butterfly::tryCreateUninitialized(v147, 0, 0, v148, 1, 8 * (v47 + 1), (uint64_t)&v227, v149);
            if (Uninitialized)
            {
              *((_DWORD *)Uninitialized - 2) = v56;
              *((_DWORD *)Uninitialized - 1) = v56;
              Uninitialized = (JSC::JSObject *)JSC::JSArray::createWithButterfly((uint64_t)v147, (JSC::VM *)&v227, (unint64_t)v146, (uint64_t)Uninitialized, v151, v152, v153, v154);
            }
          }
          v250 = Uninitialized;
          SlowCase = (unint64_t)v251;
        }
        if (!SlowCase)
        {
          __break(0xC471u);
          JUMPOUT(0x198B8E664);
        }
        JSC::createRegExpMatchesArray(JSC::VM &,JSC::JSGlobalObject *,JSC::JSString *,WTF::String const&,JSC::RegExp *,unsigned int,JSC::MatchResult &)::{lambda(void)#1}::operator()((uint64_t)&v234, v41);
        v69 = v251;
        **((_QWORD **)v69 + 1) = JSC::jsSubstringOfResolved(v12, (uint64_t)&v227, (uint64_t)v255, v226[0], v226[2] - v226[0], v70, v71, v72);
        if (v47)
        {
          v73 = 1;
          v74 = 2;
          do
          {
            if (HIDWORD(v253) <= v74)
            {
              __break(0xC471u);
              JUMPOUT(0x198B8EE14);
            }
            v36 = v252[v74];
            if ((v36 & 0x80000000) != 0)
            {
              v75 = 10;
            }
            else
            {
              if (HIDWORD(v253) <= v74 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x198B8EE50);
              }
              v75 = JSC::jsSubstringOfResolved(v12, (uint64_t)&v227, (uint64_t)v255, v36, (v252[v74 + 1] - v36), v38, v39, v40);
            }
            *(_QWORD *)(*((_QWORD *)v251 + 1) + 8 * v73++) = v75;
            v74 += 2;
          }
          while (v73 <= v47);
        }
        if (v248)
        {
          v203 = 0;
          v204 = 0;
          do
          {
            if (HIDWORD(v253) <= v203)
            {
              __break(0xC471u);
              JUMPOUT(0x198B8EF44);
            }
            v205 = v252[v203];
            if ((v205 & 0x80000000) != 0)
            {
              v208 = v250;
              v209 = v204;
              v207 = 10;
            }
            else
            {
              if (HIDWORD(v253) <= v203 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x198B8EF4CLL);
              }
              v206 = v250;
              v207 = JSC::createRegExpMatchesArray(JSC::VM &,JSC::JSGlobalObject *,JSC::JSString *,WTF::String const&,JSC::RegExp *,unsigned int,JSC::MatchResult &)::{lambda(JSC::GCDeferralContext &,int,int)#1}::operator()((uint64_t *)&v232, (JSC::VM *)&v227, v205, v252[v203 + 1], v37, v38, v39, v40);
              v208 = v206;
              v209 = v204;
            }
            JSC::JSObject::initializeIndexWithoutBarrier((uint64_t)v208, (uint64_t)v257, v209, v207);
            ++v204;
            v203 += 2;
          }
          while (v204 <= v47);
        }
        if (*((_BYTE *)v257[0] + 755))
          __dmb(0xAu);
        if (!*(_BYTE *)(v12 + 755))
          goto LABEL_75;
        goto LABEL_74;
      }
      v108 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v12 + 37608);
      *(_QWORD *)(v12 + 37592) = SlowCase + HIDWORD(v108);
      *(_QWORD *)(v12 + 37600) = SlowCase + (int)v108;
    }
    *(_QWORD *)(v12 + 37584) = SlowCase + 16;
    goto LABEL_57;
  }
LABEL_28:
  v43 = 0;
  *(_OWORD *)v226 = xmmword_199154590;
LABEL_29:
  v44 = (unint64_t)v252;
  if (v254 != (_BYTE *)v252 && v252 != 0)
  {
    v252 = 0;
    LODWORD(v253) = 0;
    WTF::fastFree(v44, v34, (uint64_t)v35, v36, v37, v38, v39, v40);
  }
  return v43;
}

JSC::JSGlobalObject *JSC::RegExpCachedResult::leftContext(JSC::JSGlobalObject **this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  JSC::JSGlobalObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
  JSC::RegExpCachedResult::lastResult((JSC::RegExpCachedResult *)this, a2, a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v12, v13, v14, v15, v16, v17, v18))
    return 0;
  v20 = this[7];
  if (!v20)
  {
    v20 = JSC::jsSubstring(a2, this[6], 0, *(unsigned int *)this, v15, v16, v17, v18, v19);
    if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v21, v22, v23, v24, v25, v26, v27))
      return 0;
    this[7] = v20;
    if (a3 && v20 && *((_DWORD *)v11 + 190) >= *((unsigned __int8 *)a3 + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)v11 + 192, (unint64_t)a3);
      return this[7];
    }
  }
  return v20;
}

JSC::JSGlobalObject *JSC::RegExpCachedResult::rightContext(JSC::JSGlobalObject **this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  JSC::JSGlobalObject *v20;
  JSC::JSGlobalObject *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
  JSC::RegExpCachedResult::lastResult((JSC::RegExpCachedResult *)this, a2, a3, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v12, v13, v14, v15, v16, v17, v18))
    return 0;
  v20 = this[8];
  if (!v20)
  {
    v21 = this[6];
    v22 = *((_QWORD *)v21 + 1);
    if ((v22 & 1) != 0)
      v23 = (_DWORD *)((char *)v21 + 16);
    else
      v23 = (_DWORD *)(v22 + 4);
    v20 = JSC::jsSubstring(a2, v21, (JSC::JSString *)*((unsigned int *)this + 2), (*v23 - *((_DWORD *)this + 2)), v15, v16, v17, v18, v19);
    if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v24, v25, v26, v27, v28, v29, v30))
      return 0;
    this[8] = v20;
    if (a3 && v20 && *((_DWORD *)v11 + 190) >= *((unsigned __int8 *)a3 + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)v11 + 192, (unint64_t)a3);
      return this[8];
    }
  }
  return v20;
}

unint64_t JSC::callRegExpConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v10;
  int v11;

  v10 = (char *)a2 + 48;
  v11 = *((_DWORD *)a2 + 8) - 1;
  return JSC::constructRegExp(this, (uint64_t)&v10, *((_QWORD *)a2 + 3), 0, a6, a7, a8, a9, a4);
}

unint64_t JSC::constructWithRegExpConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v10;
  int v11;

  v10 = (char *)a2 + 48;
  v11 = *((_DWORD *)a2 + 8) - 1;
  return JSC::constructRegExp(this, (uint64_t)&v10, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 5), a6, a7, a8, a9, a4);
}

void JSC::RegExpConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::VM *v21;
  uint64_t v22;
  JSC::JSGlobalObject *v23;
  JSC::JSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __n128 v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;

  v11 = (_QWORD *)((char *)a2 + 41952);
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)2, (JSC::VM *)(*((_QWORD *)a2 + 5244) + 736), 1, a6, a7, a8);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*v11 + 2160), (uint64_t)a3, 14, v12, v13, v14, v15);
  v21 = *(JSC::VM **)(16 * (*a3 & 0xFFFFFFFE) + 0x28);
  if (BYTE1(qword_1ECF4C7A8))
  {
    JSC::Identifier::add((uint64_t)a2, "escape", 7, v16, v17, v18, v19, v20, &v62);
    v46 = v62;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(a1, (uint64_t)a2, (uint64_t)v21, (unint64_t *)&v62, 1, (uint64_t)JSC::regExpConstructorEscape, 0, 0, 4u);
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v47, v48, v49, v50, v51, v52, v53);
        WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
  }
  v22 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v22 = 0x1400000002;
  *(_QWORD *)(v22 + 8) = "get [Symbol.species]";
  *(_DWORD *)(v22 + 16) = 4;
  v62 = (WTF::StringImpl *)v22;
  v23 = (JSC::JSGlobalObject *)JSC::JSFunction::create((uint64_t)a2, (uint64_t)v21, 0, &v62, (uint64_t)JSC::globalFuncSpeciesGetter, 0, 155, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v35 = JSC::GetterSetter::create(a2, v21, v23, 0, v24, v25, v26, v27);
  v37 = v62;
  v62 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  JSC::JSObject::putDirectNonIndexAccessorWithoutTransition((unsigned int *)a1, (uint64_t)a2, *(_QWORD *)(*v11 + 2752), v35, (const JSC::PropertyTable *)0x16, v32, v33, v34, v36);
}

uint64_t JSC::regExpConstructorEscape(JSC *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  int **v11;
  WTF::AtomStringImpl *v12;
  int8x16_t v13;
  __int128 v14;
  int *v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  _DWORD *v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  float v49;
  int v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  int v53;
  _WORD *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  int *v58;
  int v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  _WORD *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  __int16 v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  int8x16_t v101;
  int8x16_t v102;
  __int128 v103;
  char *v104;
  char *v105;
  char *v106;
  _BYTE *v107;
  _WORD *v108;
  __int16 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::AtomStringImpl *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  _BYTE *v170;
  JSC::CallFrame *v171;
  JSC::CallFrame *v172;
  uint64_t v173;
  _WORD *v174;
  char v175;
  _WORD *v176;
  int *v177;
  WTF::AtomStringImpl *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  WTF::AtomStringImpl *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  WTF::StringImpl *v221;
  unint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  _BYTE v235[4];
  int v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  unsigned int v240;
  char v241;
  JSC::VM *v242;
  const char *v243;
  WTF::StringImpl *v244;
  char v245;
  __int8 v246[9];
  int8x16x2_t v247;
  int8x16x2_t v248;

  v9 = *((_QWORD *)this + 7);
  v242 = (JSC::VM *)v9;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v242, (uint64_t)"RegExp.escape requires a string", 32);
  v10 = *((_QWORD *)a2 + 6);
  if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
    return JSC::throwTypeError((unint64_t)this, &v242, (uint64_t)"RegExp.escape requires a string", 32);
  v11 = (int **)(v10 + 8);
  if ((*(_BYTE *)(v10 + 8) & 1) != 0)
    v11 = JSC::JSRopeString::resolveRope(*((_QWORD *)a2 + 6), this, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v9 + 80))
  {
LABEL_247:
    v230 = *(_DWORD *)(v9 + 80);
    if ((v230 & 0x27) != 0 && (v230 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v238 = 0;
  v239 = 0;
  v240 = 0;
  v241 = 1;
  if (*v11)
    v12 = (WTF::AtomStringImpl *)(*v11)[1];
  else
    v12 = 0;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v238, v12, a3, a4, a5, a6, a7, a8);
  v15 = *v11;
  if (*v11)
  {
    v16 = 0;
    *(_QWORD *)&v17 = 0;
    do
    {
      v18 = v15[1];
      if (v16 >= v18)
        break;
      if ((v15[4] & 4) != 0)
      {
        v21 = *(unsigned __int8 *)(*((_QWORD *)v15 + 1) + v16++);
      }
      else
      {
        v19 = *((_QWORD *)v15 + 1);
        v20 = v16 + 1;
        v21 = *(unsigned __int16 *)(v19 + 2 * v16);
        if ((v21 & 0xFC00) == 0xD800)
        {
          if (v20 == v18)
          {
            v16 = v18;
          }
          else
          {
            if (v18 <= v20)
            {
              __break(1u);
              goto LABEL_247;
            }
            v22 = *(unsigned __int16 *)(v19 + 2 * v20);
            v23 = (v22 & 0xFC00) == 56320;
            v24 = v22 + (v21 << 10) - 56613888;
            if (v23)
              v21 = v24;
            if (v23)
              v16 += 2;
            else
              ++v16;
          }
        }
        else
        {
          ++v16;
        }
      }
      if (!v240 && (v21 - 48 < 0xA || (v21 | 0x20) - 97 <= 0x19))
      {
        JSC::toStringWithRadix(0x10uLL, (double)v21, a3, a4, a5, a6, a7, a8, (int **)&v243);
        v32 = (int *)v243;
        if (v243)
        {
          v33 = *((_DWORD *)v243 + 1);
          if (v33 >= 0xFFFFFFFE)
            v34 = -1;
          else
            v34 = v33 + 2;
        }
        else
        {
          v34 = 2;
        }
        v35 = v34 + v240;
        if (__CFADD__(v34, v240))
          v35 = 0xFFFFFFFFLL;
        v36 = v239;
        if ((v239 || (v36 = v238) != 0) && (*((_BYTE *)v36 + 16) & 4) == 0 || v243 && (v243[16] & 4) == 0)
        {
          v37 = (_DWORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v238, (WTF::AtomStringImpl *)v35, v26, v27, v28, v29, v30, v31);
          if (v37)
          {
            *v37 = 7864412;
            v39 = (char *)(v37 + 1);
            if (v32)
            {
              v38 = (_OWORD *)*((_QWORD *)v32 + 1);
              v40 = v32[1];
              if ((v32[4] & 4) != 0)
              {
                if (v40 >= 0x40)
                {
                  v89 = &v39[2 * (v40 & 0xFFFFFFC0)];
                  v100 = v39;
                  do
                  {
                    v13 = *(int8x16_t *)v38;
                    v101 = *((int8x16_t *)v38 + 1);
                    v14 = v38[2];
                    v102 = *((int8x16_t *)v38 + 3);
                    v38 += 4;
                    v248.val[1] = 0u;
                    v248.val[0] = v102;
                    v103 = 0u;
                    v247.val[0] = v101;
                    v17 = 0u;
                    v104 = v100;
                    vst2q_s8(v104, *(int8x16x2_t *)v13.i8);
                    v104 += 32;
                    v247.val[1] = 0u;
                    vst2q_s8(v104, v247);
                    v105 = v100 + 64;
                    vst2q_s8(v105, *(int8x16x2_t *)&v14);
                    v106 = v100 + 96;
                    vst2q_s8(v106, v248);
                    v100 += 128;
                  }
                  while (v100 != v89);
                }
                else
                {
                  v89 = v39;
                }
                v90 = &v39[2 * v40];
                while (v89 != v90)
                {
                  v91 = *(unsigned __int8 *)v38;
                  v38 = (_OWORD *)((char *)v38 + 1);
                  *(_WORD *)v89 = v91;
                  v89 += 2;
                }
              }
              else
              {
                if ((_DWORD)v40 != 1)
                {
                  if (!(_DWORD)v40)
                    goto LABEL_110;
                  a3 = 2 * v40;
                  goto LABEL_45;
                }
                *(_WORD *)v39 = *(_WORD *)v38;
              }
            }
          }
        }
        else
        {
          v80 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v238, (WTF::AtomStringImpl *)v35, v26, v27, v28, v29, v30, v31);
          if (v80)
          {
            *v80 = 30812;
            v39 = (char *)(v80 + 1);
            if (v32)
            {
              v38 = (_OWORD *)*((_QWORD *)v32 + 1);
              a3 = v32[1];
              if ((v32[4] & 4) != 0)
              {
                if ((_DWORD)a3 == 1)
                {
                  *v39 = *(_BYTE *)v38;
                }
                else if ((_DWORD)a3)
                {
LABEL_45:
                  memcpy(v39, v38, a3);
                }
              }
              else
              {
                if (a3 < 0x10)
                {
                  v171 = (JSC::CallFrame *)v39;
                }
                else
                {
                  v171 = (JSC::CallFrame *)&v39[a3 & 0xFFFFFFF0];
                  v172 = (JSC::CallFrame *)v39;
                  do
                  {
                    *(int8x16x2_t *)v13.i8 = vld2q_s8((const char *)v38);
                    v38 += 2;
                    *(int8x16_t *)v172 = v13;
                    v172 = (JSC::CallFrame *)((char *)v172 + 16);
                  }
                  while (v172 != v171);
                }
                for (; v171 != (JSC::CallFrame *)&v39[a3]; v171 = (JSC::CallFrame *)((char *)v171 + 1))
                {
                  v175 = *(_BYTE *)v38;
                  v38 = (_OWORD *)((char *)v38 + 2);
                  *(_BYTE *)v171 = v175;
                }
              }
            }
          }
        }
LABEL_110:
        v58 = (int *)v243;
        v243 = 0;
        if (v58)
        {
LABEL_111:
          v59 = *v58 - 2;
          if (*v58 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v58, (WTF::AtomStringImpl *)v38, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
          }
          else
          {
LABEL_112:
            *v58 = v59;
          }
        }
        goto LABEL_148;
      }
      v243 = "^$\\.*+?()[]{}|/";
      LODWORD(v244) = 15;
      BYTE4(v244) = 1;
      if (WTF::StringView::find((uint64_t)&v243, (unsigned __int16)v21, 0, *(double *)v13.i64, *(double *)&v17, *(float *)&v14) == -1)
      {
        switch(v21)
        {
          case 9u:
            if (v240 >= 0xFFFFFFFE)
              v56 = 0xFFFFFFFFLL;
            else
              v56 = v240 + 2;
            v57 = v239;
            if ((v239 || (v57 = v238) != 0) && (*((_BYTE *)v57 + 16) & 4) == 0)
            {
              v58 = (int *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v238, (WTF::AtomStringImpl *)v56, v41, v42, v43, v44, v45, v46);
              if (v58)
              {
                v59 = 7602268;
                goto LABEL_112;
              }
            }
            else
            {
              v108 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v238, (WTF::AtomStringImpl *)v56, v41, v42, v43, v44, v45, v46);
              if (v108)
              {
                v109 = 29788;
                goto LABEL_147;
              }
            }
            break;
          case 0xAu:
            if (v240 >= 0xFFFFFFFE)
              v66 = 0xFFFFFFFFLL;
            else
              v66 = v240 + 2;
            v67 = v239;
            if ((v239 || (v67 = v238) != 0) && (*((_BYTE *)v67 + 16) & 4) == 0)
            {
              v58 = (int *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v238, (WTF::AtomStringImpl *)v66, v41, v42, v43, v44, v45, v46);
              if (v58)
              {
                v59 = 7209052;
                goto LABEL_112;
              }
            }
            else
            {
              v108 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v238, (WTF::AtomStringImpl *)v66, v41, v42, v43, v44, v45, v46);
              if (v108)
              {
                v109 = 28252;
                goto LABEL_147;
              }
            }
            break;
          case 0xBu:
            if (v240 >= 0xFFFFFFFE)
              v62 = 0xFFFFFFFFLL;
            else
              v62 = v240 + 2;
            v63 = v239;
            if ((v239 || (v63 = v238) != 0) && (*((_BYTE *)v63 + 16) & 4) == 0)
            {
              v58 = (int *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v238, (WTF::AtomStringImpl *)v62, v41, v42, v43, v44, v45, v46);
              if (v58)
              {
                v59 = 7733340;
                goto LABEL_112;
              }
            }
            else
            {
              v108 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v238, (WTF::AtomStringImpl *)v62, v41, v42, v43, v44, v45, v46);
              if (v108)
              {
                v109 = 30300;
                goto LABEL_147;
              }
            }
            break;
          case 0xCu:
            if (v240 >= 0xFFFFFFFE)
              v64 = 0xFFFFFFFFLL;
            else
              v64 = v240 + 2;
            v65 = v239;
            if ((v239 || (v65 = v238) != 0) && (*((_BYTE *)v65 + 16) & 4) == 0)
            {
              v58 = (int *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v238, (WTF::AtomStringImpl *)v64, v41, v42, v43, v44, v45, v46);
              if (v58)
              {
                v59 = 6684764;
                goto LABEL_112;
              }
            }
            else
            {
              v108 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v238, (WTF::AtomStringImpl *)v64, v41, v42, v43, v44, v45, v46);
              if (v108)
              {
                v109 = 26204;
                goto LABEL_147;
              }
            }
            break;
          case 0xDu:
            if (v240 >= 0xFFFFFFFE)
              v60 = 0xFFFFFFFFLL;
            else
              v60 = v240 + 2;
            v61 = v239;
            if ((v239 || (v61 = v238) != 0) && (*((_BYTE *)v61 + 16) & 4) == 0)
            {
              v58 = (int *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v238, (WTF::AtomStringImpl *)v60, v41, v42, v43, v44, v45, v46);
              if (v58)
              {
                v59 = 7471196;
                goto LABEL_112;
              }
            }
            else
            {
              v108 = (_WORD *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v238, (WTF::AtomStringImpl *)v60, v41, v42, v43, v44, v45, v46);
              if (v108)
              {
                v109 = 29276;
LABEL_147:
                *v108 = v109;
              }
            }
            break;
          default:
            LODWORD(v244) = 16;
            BYTE4(v244) = 1;
            if (WTF::StringView::find((uint64_t)&v243, (unsigned __int16)v21, 0, v47, v48, v49) != -1)
              goto LABEL_97;
            if ((unsigned __int16)v21 > 0xFFu)
            {
              if (u_charType((unsigned __int16)v21) == 12 || (unsigned __int16)v21 == 65279)
                goto LABEL_151;
            }
            else if (v21 <= 0x20u && ((1 << v21) & 0x100001A00) != 0
                   || v21 == 160
                   || (unsigned __int16)v21 == 10
                   || (unsigned __int16)v21 == 13)
            {
LABEL_97:
              if (v21 <= 0xFF)
              {
                JSC::toStringWithRadix(0x10uLL, (double)v21, v68, v69, v70, v71, v72, v73, (int **)&v234);
                v235[0] = 48;
                v236 = 2;
                v78 = v234;
                if (v234)
                  *(_DWORD *)v234 += 2;
                v237 = v78;
                v246[0] = 92;
                v245 = 120;
                v243 = v235;
                v244 = v78;
                WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<WTF::String>,void>>((uint64_t)&v238, v246, &v245, &v243, v74, v75, v76, v77);
                v79 = v237;
                v237 = 0;
                if (v79)
                {
                  if (*(_DWORD *)v79 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v79, (WTF::AtomStringImpl *)v38, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
                  }
                  else
                  {
                    *(_DWORD *)v79 -= 2;
                  }
                }
                v58 = (int *)v234;
                v234 = 0;
                if (v58)
                  goto LABEL_111;
                break;
              }
LABEL_151:
              if (HIWORD(v21))
              {
                JSC::toStringWithRadix(0x10uLL, (double)(unsigned __int16)((v21 >> 10) - 10304), v68, v69, v70, v71, v72, v73, (int **)&v232);
                v235[0] = 48;
                v236 = 4;
                v120 = v232;
                if (v232)
                  *(_DWORD *)v232 += 2;
                v237 = v120;
                v246[0] = 92;
                v245 = 117;
                v243 = v235;
                v244 = v120;
                WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<WTF::String>,void>>((uint64_t)&v238, v246, &v245, &v243, v116, v117, v118, v119);
                v128 = v237;
                v237 = 0;
                if (v128)
                {
                  if (*(_DWORD *)v128 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v128, v121, v122, v123, v124, v125, v126, v127);
                    WTF::fastFree(v144, v145, v146, v147, v148, v149, v150, v151);
                  }
                  else
                  {
                    *(_DWORD *)v128 -= 2;
                  }
                }
                v129 = v232;
                v232 = 0;
                if (v129)
                {
                  if (*(_DWORD *)v129 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v129, v121, v122, v123, v124, v125, v126, v127);
                    WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
                  }
                  else
                  {
                    *(_DWORD *)v129 -= 2;
                  }
                }
                JSC::toStringWithRadix(0x10uLL, (double)(v21 & 0x3FF | 0xDC00), v122, v123, v124, v125, v126, v127, (int **)&v231);
                v235[0] = 48;
                v236 = 4;
                v134 = v231;
                if (v231)
                  *(_DWORD *)v231 += 2;
                v237 = v134;
                v246[0] = 92;
                v245 = 117;
                v243 = v235;
                v244 = v134;
                WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<WTF::String>,void>>((uint64_t)&v238, v246, &v245, &v243, v130, v131, v132, v133);
                v135 = v237;
                v237 = 0;
                if (v135)
                {
                  if (*(_DWORD *)v135 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v135, (WTF::AtomStringImpl *)v38, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
                  }
                  else
                  {
                    *(_DWORD *)v135 -= 2;
                  }
                }
                v58 = (int *)v231;
                v231 = 0;
                if (v58)
                  goto LABEL_111;
                break;
              }
LABEL_152:
              JSC::toStringWithRadix(0x10uLL, (double)v21, v68, v69, v70, v71, v72, v73, (int **)&v233);
              v235[0] = 48;
              v236 = 4;
              v114 = v233;
              if (v233)
                *(_DWORD *)v233 += 2;
              v237 = v114;
              v246[0] = 92;
              v245 = 117;
              v243 = v235;
              v244 = v114;
              WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<WTF::String>,void>>((uint64_t)&v238, v246, &v245, &v243, v110, v111, v112, v113);
              v115 = v237;
              v237 = 0;
              if (v115)
              {
                if (*(_DWORD *)v115 == 2)
                {
                  WTF::StringImpl::~StringImpl(v115, (WTF::AtomStringImpl *)v38, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
                }
                else
                {
                  *(_DWORD *)v115 -= 2;
                }
              }
              v58 = (int *)v233;
              v233 = 0;
              if (v58)
                goto LABEL_111;
              break;
            }
            if ((unsigned __int16)(v21 & 0xFFFE) >> 1 == 4116)
              goto LABEL_97;
            if (v21 >> 11 == 27)
              goto LABEL_152;
            if (HIWORD(v21))
            {
              if (v240 >= 0xFFFFFFFE)
                v173 = 0xFFFFFFFFLL;
              else
                v173 = v240 + 2;
              v174 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v238, (WTF::AtomStringImpl *)v173, v68, v69, v70, v71, v72, v73);
              if (v174)
              {
                *v174 = (v21 >> 10) - 10304;
                v174[1] = v21 & 0x3FF | 0xDC00;
              }
              break;
            }
            v168 = v240 + 1;
            if (v240 == -1)
              v168 = 0xFFFFFFFFLL;
            v169 = v239;
            if (v239 || (v169 = v238) != 0)
            {
              if (v21 <= 0xFF && (*((_DWORD *)v169 + 4) & 4) != 0)
              {
LABEL_194:
                v170 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v238, (WTF::AtomStringImpl *)v168, v68, v69, v70, v71, v72, v73);
                if (v170)
                  *v170 = v21;
                break;
              }
            }
            else if (v21 <= 0xFF)
            {
              goto LABEL_194;
            }
            v176 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v238, (WTF::AtomStringImpl *)v168, v68, v69, v70, v71, v72, v73);
            if (v176)
              *v176 = v21;
            break;
        }
      }
      else
      {
        if (v21 < 0x10000)
          v50 = 2;
        else
          v50 = 3;
        v51 = v240 + v50;
        if (__CFADD__(v240, v50))
          v51 = 0xFFFFFFFFLL;
        v52 = v239;
        if (v239 || (v52 = v238) != 0)
        {
          v53 = *((_DWORD *)v52 + 4) & 4;
          if (v21 > 0xFF || v53 == 0)
          {
LABEL_58:
            v55 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v238, (WTF::AtomStringImpl *)v51, v41, v42, v43, v44, v45, v46);
            if (v55)
            {
              *v55 = 92;
              if (v21 >= 0x10000)
              {
                v55[2] = v21 & 0x3FF | 0xDC00;
                v21 = (v21 >> 10) - 10304;
              }
              v55[1] = v21;
            }
            goto LABEL_148;
          }
        }
        else if (v21 > 0xFF)
        {
          goto LABEL_58;
        }
        v107 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v238, (WTF::AtomStringImpl *)v51, v41, v42, v43, v44, v45, v46);
        if (v107)
        {
          *v107 = 92;
          v107[1] = v21;
        }
      }
LABEL_148:
      v15 = *v11;
    }
    while (*v11);
  }
  v177 = (int *)v238;
  if (v238)
    goto LABEL_218;
  if ((v240 & 0x80000000) == 0 && v239 && *((_DWORD *)v239 + 1) > v240 + (v240 >> 2))
  {
    if ((*((_BYTE *)v239 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v238, (WTF::AtomStringImpl *)v240, a3, a4, a5, a6, a7, a8);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v238, (WTF::AtomStringImpl *)v240, a3, a4, a5, a6, a7, a8);
    v221 = v238;
    v238 = v239;
    v239 = 0;
    if (v221)
    {
      if (*(_DWORD *)v221 == 2)
      {
        WTF::StringImpl::~StringImpl(v221, v214, v215, v216, v217, v218, v219, v220);
        WTF::fastFree(v222, v223, v224, v225, v226, v227, v228, v229);
      }
      else
      {
        *(_DWORD *)v221 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v238);
  v177 = (int *)v238;
  if (v238)
LABEL_218:
    *v177 += 2;
  v243 = (const char *)v177;
  v185 = JSC::jsString(v9, (JSC::VM *)&v243, a3, a4, a5, a6, a7, a8);
  v186 = (WTF::StringImpl *)v243;
  v243 = 0;
  if (v186)
  {
    if (*(_DWORD *)v186 == 2)
    {
      WTF::StringImpl::~StringImpl(v186, v178, v179, v180, v181, v182, v183, v184);
      WTF::fastFree(v190, v191, v192, v193, v194, v195, v196, v197);
    }
    else
    {
      *(_DWORD *)v186 -= 2;
    }
  }
  v187 = v239;
  v239 = 0;
  if (v187)
  {
    if (*(_DWORD *)v187 == 2)
    {
      WTF::StringImpl::~StringImpl(v187, v178, v179, v180, v181, v182, v183, v184);
      WTF::fastFree(v198, v199, v200, v201, v202, v203, v204, v205);
    }
    else
    {
      *(_DWORD *)v187 -= 2;
    }
  }
  v188 = v238;
  v238 = 0;
  if (v188)
  {
    if (*(_DWORD *)v188 == 2)
    {
      WTF::StringImpl::~StringImpl(v188, v178, v179, v180, v181, v182, v183, v184);
      WTF::fastFree(v206, v207, v208, v209, v210, v211, v212, v213);
    }
    else
    {
      *(_DWORD *)v188 -= 2;
    }
  }
  return v185;
}

uint64_t JSC::regExpConstructorDollar(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t result;
  JSC::VM *v11;

  v11 = (JSC::VM *)a1[7];
  if (a1[31] != a2)
    return JSC::throwTypeError((unint64_t)a1, &v11, (uint64_t)"RegExp.$N getters require RegExp constructor as |this|", 55);
  if (*(_DWORD *)(a3 + 4) <= 1u)
  {
    result = 1161;
    __break(0xC471u);
  }
  else
  {
    v8 = *(_QWORD *)(a3 + 8);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
      v9 = *(unsigned __int8 *)(v8 + 1);
    else
      v9 = *(unsigned __int16 *)(v8 + 2);
    return JSC::RegExpGlobalData::getBackref((JSC::RegExpGlobalData *)(a1 + 265), (JSC::JSGlobalObject *)a1, (v9 - 48), a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t JSC::regExpConstructorInput(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  JSC::VM *v4;

  v4 = *(JSC::VM **)(a1 + 56);
  if (*(_QWORD *)(a1 + 248) != a2)
    return JSC::throwTypeError(a1, &v4, (uint64_t)"RegExp.input getter requires RegExp constructor as |this|", 58);
  v2 = 2168;
  if (!*(_BYTE *)(a1 + 2136))
    v2 = 2144;
  return *(_QWORD *)(a1 + v2);
}

uint64_t JSC::regExpConstructorMultiline(unint64_t a1, uint64_t a2)
{
  JSC::VM *v3;

  v3 = *(JSC::VM **)(a1 + 56);
  if (*(_QWORD *)(a1 + 248) != a2)
    return JSC::throwTypeError(a1, &v3, (uint64_t)"RegExp.multiline getter require RegExp constructor as |this|", 61);
  if (*(_BYTE *)(a1 + 2192))
    return 7;
  return 6;
}

uint64_t JSC::regExpConstructorLastMatch(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;

  v9 = (JSC::VM *)a1[7];
  if (a1[31] == a2)
    return JSC::RegExpGlobalData::getBackref((JSC::RegExpGlobalData *)(a1 + 265), (JSC::JSGlobalObject *)a1, 0, a4, a5, a6, a7, a8);
  else
    return JSC::throwTypeError((unint64_t)a1, &v9, (uint64_t)"RegExp.lastMatch getter require RegExp constructor as |this|", 61);
}

uint64_t JSC::regExpConstructorLastParen(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;

  v9 = (JSC::VM *)a1[7];
  if (a1[31] == a2)
    return JSC::RegExpGlobalData::getLastParen((JSC::RegExpGlobalData *)(a1 + 265), (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8);
  else
    return JSC::throwTypeError((unint64_t)a1, &v9, (uint64_t)"RegExp.lastParen getter require RegExp constructor as |this|", 61);
}

JSC::JSGlobalObject *JSC::regExpConstructorLeftContext(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;

  v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*((_QWORD *)a1 + 31) == a2)
    return JSC::RegExpCachedResult::leftContext((JSC::JSGlobalObject **)a1 + 265, a1, a1, a4, a5, a6, a7, a8);
  else
    return (JSC::JSGlobalObject *)JSC::throwTypeError((unint64_t)a1, &v9, (uint64_t)"RegExp.leftContext getter require RegExp constructor as |this|", 63);
}

JSC::JSGlobalObject *JSC::regExpConstructorRightContext(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;

  v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*((_QWORD *)a1 + 31) == a2)
    return JSC::RegExpCachedResult::rightContext((JSC::JSGlobalObject **)a1 + 265, a1, a1, a4, a5, a6, a7, a8);
  else
    return (JSC::JSGlobalObject *)JSC::throwTypeError((unint64_t)a1, &v9, (uint64_t)"RegExp.rightContext getter require RegExp constructor as |this|", 64);
}

uint64_t JSC::setRegExpConstructorInput(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned __int8 *v35;
  JSC::VM *v36;

  v9 = *((_QWORD *)a1 + 7);
  v36 = (JSC::VM *)v9;
  if (*((_QWORD *)a1 + 31) != a2)
  {
    JSC::throwTypeError((unint64_t)a1, &v36, (uint64_t)"RegExp.input setters require RegExp constructor as |this|", 58);
    return 0;
  }
  v10 = (unsigned __int8 *)a3;
  v35 = (unsigned __int8 *)a3;
  if ((a3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a3 + 5) != 2)
    v10 = JSC::JSValue::toStringSlowCase(&v35, (uint64_t)a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v9 + 80))
  {
    v31 = *(_DWORD *)(v9 + 80);
    if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v11 = *((_QWORD *)a1 + 7);
  JSC::RegExpCachedResult::lastResult((JSC::JSGlobalObject *)((char *)a1 + 2120), a1, a1, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_6;
  v32 = *(_DWORD *)(v11 + 80);
  if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v12, v13, v14, v15, v16, v17);
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_6:
    JSC::RegExpCachedResult::leftContext((JSC::JSGlobalObject **)a1 + 265, a1, a1, v13, v14, v15, v16, v17);
    if (!*(_DWORD *)(v11 + 80))
      goto LABEL_7;
    v33 = *(_DWORD *)(v11 + 80);
    if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v18, v19, v20, v21, v22, v23);
    if (!*(_QWORD *)(v11 + 16))
    {
LABEL_7:
      JSC::RegExpCachedResult::rightContext((JSC::JSGlobalObject **)a1 + 265, a1, a1, v19, v20, v21, v22, v23);
      if (!*(_DWORD *)(v11 + 80))
        goto LABEL_8;
      v34 = *(_DWORD *)(v11 + 80);
      if ((v34 & 0x27) != 0 && (v34 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v24, v25, v26, v27, v28, v29);
      if (!*(_QWORD *)(v11 + 16))
      {
LABEL_8:
        *((_QWORD *)a1 + 271) = v10;
        if (v10)
        {
          if (*(_DWORD *)(v11 + 760) >= *((unsigned __int8 *)a1 + 7))
            JSC::Heap::writeBarrierSlowPath(v11 + 192, (unint64_t)a1);
        }
      }
    }
  }
  return 1;
}

uint64_t JSC::setRegExpConstructorMultiline(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double v9;
  BOOL v10;
  int v12;
  BOOL v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  JSC::VM *v21;

  v8 = *(_QWORD *)(a1 + 56);
  v21 = (JSC::VM *)v8;
  if (*(_QWORD *)(a1 + 248) != a2)
  {
    JSC::throwTypeError(a1, &v21, (uint64_t)"RegExp.multiline setters require RegExp constructor as |this|", 62);
    return 0;
  }
  if (a3 >= 0xFFFE000000000000)
  {
    v13 = (_DWORD)a3 == 0;
    goto LABEL_18;
  }
  *(_QWORD *)&v9 = a3 - 0x2000000000000;
  if (a3 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v10 = v9 > 0.0 || v9 < 0.0;
    goto LABEL_21;
  }
  if ((a3 & 0xFFFE000000000002) == 0)
  {
    v12 = *(unsigned __int8 *)(a3 + 5);
    if (v12 == 2)
    {
      v14 = *(_QWORD *)(a3 + 8);
      if ((v14 & 1) != 0)
        v15 = (int *)(a3 + 16);
      else
        v15 = (int *)(v14 + 4);
      v16 = *v15;
    }
    else
    {
      if (v12 != 3)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v10 = 1;
          goto LABEL_21;
        }
        v13 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28) == a1;
LABEL_18:
        v10 = !v13;
        goto LABEL_21;
      }
      v16 = *(_DWORD *)(a3 + 8);
    }
    v13 = v16 == 0;
    goto LABEL_18;
  }
  v10 = a3 == 7;
LABEL_21:
  if (*(_DWORD *)(v8 + 80))
  {
    v17 = *(_DWORD *)(v8 + 80);
    if ((v17 & 0x27) != 0 && (v17 & 0x20) == 0)
    {
      v19 = a1;
      v20 = v8;
      v18 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v10 = v18;
      a1 = v19;
      v8 = v20;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  *(_BYTE *)(a1 + 2192) = v10;
  return 1;
}

unint64_t JSC::constructRegExp(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 **v15;
  JSC::JSCell *v16;
  unint64_t v17;
  unsigned int v18;
  _BOOL4 v19;
  int v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::JSObject *RegExpStructure;
  int8x16_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 v43;
  _BOOL8 v44;
  unsigned int v45;
  _BYTE *v46;
  unint64_t v47;
  uint64_t v48;
  JSC::JSCell *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  JSC::VM *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  _BYTE *v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  _BYTE *v69;
  uint64_t v70;
  JSC::VM *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  JSC::JSCell *v84;
  uint64_t v85;
  unsigned int v86;
  _BYTE *v87;
  unint64_t v88;
  uint64_t v89;
  JSC::JSCell *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  _WORD *v96;
  uint64_t v97;
  uint64_t v98;
  JSC::VM *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  JSC::VM *v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  _WORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned __int16 *v128;
  unsigned int v129;
  BOOL v130;
  uint64_t v131;
  unsigned int *v132;
  uint64_t v133;
  unsigned __int16 *v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  unsigned __int16 *v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int *v142;
  uint64_t v143;
  unsigned int *v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  JSC::VM *v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  unsigned __int16 *v164;
  unsigned int v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  unsigned __int16 *v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  unsigned __int16 *v183;
  unsigned int v184;
  JSC::VM *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  int v193;
  unsigned int v194;
  uint64_t v195;
  unsigned __int8 *v196;
  int v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  unsigned __int8 *v201;
  int v202;
  char v203;
  int v204;
  unsigned int v205;
  uint64_t v206;
  unsigned __int8 *v207;
  int v208;
  double v209;
  const unsigned __int8 *v210;
  double v211;
  const unsigned __int8 *v212;
  double v213;
  const unsigned __int8 *v214;
  uint64_t v215;
  unsigned __int8 *v216;
  unsigned int v217;
  JSC::VM *v218;
  uint64_t v219;
  char v220;
  int v221;
  uint64_t v222;
  unsigned __int8 *v223;
  uint64_t v224;
  unsigned int v225;
  int v226;
  uint64_t v227;
  unsigned __int8 *v228;
  unsigned int v229;
  JSC::VM *v230;
  uint64_t v231;
  char v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int *v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int *v243;
  uint64_t v244;
  uint64_t Index;
  int v246;
  char v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int *v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  char v254;
  uint64_t v255;
  int v256;
  _BYTE *v257;
  uint64_t v258;
  int v259;
  _BYTE *v260;
  uint64_t v261;
  int v262;
  _BYTE *v263;
  uint64_t v264;
  unsigned __int16 *v265;
  uint64_t v266;
  unsigned int v267;
  unsigned __int16 *v269;
  uint64_t v270;
  unsigned int v271;
  unsigned __int16 *v273;
  uint64_t v274;
  unsigned int v275;
  uint64_t v276;
  unsigned __int8 *v277;
  unsigned int v278;
  JSC::VM *v279;
  uint64_t v280;
  int v281;
  int v282;
  int v283;
  uint64_t v284;
  _BOOL4 v285;
  unsigned __int8 *v286;
  uint64_t v287;
  unsigned int v288;
  int v289;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  uint64_t v291;
  unsigned __int8 *v292;
  unsigned int v293;
  JSC::VM *v294;
  uint64_t v295;
  int v296;
  int v297;
  int v298;
  uint64_t v299;
  _BOOL4 v300;
  unsigned __int8 *v301;
  uint64_t v302;
  unsigned int v303;
  uint64_t v304;
  JSC::JSCell *v305;
  unsigned __int8 *v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t v310;
  JSC::JSCell *v311;
  unsigned __int8 *v312;
  uint64_t v313;
  unsigned int v314;
  uint64_t v315;
  JSC::JSCell *v316;
  unint64_t v317;
  JSC::VM *v318;
  char v319;
  JSC::VM *v320;
  JSC::VM *v321;
  JSC::VM *v322;
  JSC::VM *v323;
  JSC::VM *v324;
  unint64_t v325;
  JSC::VM *v326;
  uint64_t v327;
  JSC::VM *v328;
  uint64_t v329;
  unint64_t v330;
  int64_t v331;
  WTF *v332;
  char v333;
  unint64_t v334;
  int v335;
  unint64_t v336;
  JSC::JSCell *v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  JSC::JSCell *v341;
  uint64_t v342;
  _QWORD v343[2];
  uint64_t v344;
  char v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348[18];

  v9 = a4;
  v10 = a3;
  v348[16] = *MEMORY[0x1E0C80C00];
  v12 = *((_QWORD *)a1 + 7);
  v13 = v12 + 41952;
  v14 = *(_DWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(unsigned __int8 ***)a2;
    v16 = **(JSC::JSCell ***)a2;
    v337 = v16;
    if (v14 == 1)
      v17 = 10;
    else
      v17 = (unint64_t)v15[1];
    if (((unint64_t)v16 & 0xFFFE000000000002) != 0)
    {
      v19 = 0;
    }
    else
    {
      v18 = *((unsigned __int8 *)v16 + 5);
      v19 = v18 == 59;
      if (v18 >= 0x17)
      {
        v146 = JSC::JSObject::get((unsigned int *)v16, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)v13 + 2720), a4, a5, a6, a7, a8);
        v348[0] = v146;
        if (!*(_DWORD *)(v12 + 80)
          || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
        {
          if (v146 == 10)
            v20 = *((unsigned __int8 *)v16 + 5) == 59;
          else
            v20 = JSC::JSValue::toBoolean(v348, (uint64_t)a1);
          goto LABEL_7;
        }
      }
    }
    v20 = 0;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v17 = 10;
    v337 = (JSC::JSCell *)10;
  }
LABEL_7:
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if (v9)
    v21 = 0;
  else
    v21 = v20;
  if ((v21 & 1) == 0)
  {
    v22 = (unint64_t)v337;
    goto LABEL_13;
  }
  v22 = (unint64_t)v337;
  if (v17 == 10)
  {
    v325 = *(_QWORD *)(*(_QWORD *)v13 + 1080);
    a9.i64[0] = 0xFFFFFFFF00000000;
    v340 = 0xFFFFFFFF00000000;
    LOBYTE(v344) = 0;
    v345 = 0;
    v346 = 0;
    v347 = 0;
    v342 = 0;
    memset(v343, 0, 13);
    v341 = v337;
    if (((unint64_t)v337 & 0xFFFE000000000002) != 0)
      goto LABEL_631;
    v318 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v64 = *((unsigned __int8 *)v337 + 5);
    if (v64 > 0x16)
      goto LABEL_63;
    if (v64 != 2)
    {
LABEL_631:
      v248 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v337, (unint64_t)a1);
      if (!v248)
        goto LABEL_185;
      v22 = v248;
      v318 = (JSC::VM *)*((_QWORD *)a1 + 7);
LABEL_63:
      v65 = (_BYTE *)(v22 + 6);
      v322 = (JSC::VM *)(v325 >> 4);
      v331 = v22;
      if ((*(_BYTE *)(v22 + 6) & 8) == 0)
      {
        v328 = (JSC::VM *)v22;
        while (1)
        {
          v332 = (WTF *)(16 * (*(_DWORD *)v328 & 0xFFFFFFFE));
          if ((_DWORD)v322)
          {
            if ((v322 & ~*(_DWORD *)(16 * (*(_DWORD *)v328 & 0xFFFFFFFE) + 0x20)) == 0)
            {
              JSC::Structure::ensurePropertyTableIfNotEmpty(v332, v318, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
              if (v66)
              {
                v348[0] = v325;
                v67 = JSC::PropertyTable::get(v66, v348);
                a6 = v67;
                if ((_DWORD)v67 != -1)
                {
                  a5 = HIDWORD(v67);
                  if ((int)v67 <= 63)
                  {
                    v109 = (uint64_t)v328 + 16;
                    v110 = v67 << 32;
                  }
                  else
                  {
                    v109 = *((_QWORD *)v328 + 1) - 8;
                    v110 = 0x3F00000000 - (v67 << 32);
                  }
                  a4 = *(_QWORD *)(v109 + (v110 >> 29));
                  if ((a4 & 0xFFFE000000000002) == 0)
                  {
                    v111 = *(unsigned __int8 *)(a4 + 5);
                    if (v111 == 5)
                    {
                      v142 = (unsigned int *)v328;
                      v143 = (uint64_t)v318;
                      goto LABEL_233;
                    }
                    if (v111 == 6)
                    {
                      v151 = *((_DWORD *)v332 + 4) & 3;
                      v152 = *(_QWORD *)(a4 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v154 = *(_QWORD *)(a4 + 24);
                        v153 = *(_QWORD *)(a4 + 32);
                        v338 = *(_QWORD *)(a4 + 8);
                        v339 = v152;
                        LODWORD(v340) = HIDWORD(v67);
                        v155 = v328;
                        goto LABEL_254;
                      }
                      v338 = *(_QWORD *)(a4 + 8);
                      v339 = v152;
                      LODWORD(v340) = HIDWORD(v67);
                      v185 = v328;
                      goto LABEL_323;
                    }
                  }
                  v338 = a4;
                  v112 = v328;
LABEL_154:
                  v342 = (uint64_t)v112;
                  v340 = __PAIR64__(a6, a5);
                  LOWORD(v343[1]) = 257;
                  goto LABEL_155;
                }
              }
            }
          }
          if ((*v65 & 0x20) != 0
            && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v328, v318, v325, (uint64_t)&v338) & 1) != 0)
          {
            goto LABEL_155;
          }
          v331 = *((_QWORD *)v332 + 6);
          if (!v331)
            v331 = *((_QWORD *)v328 + 2);
          if ((v331 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v331 + 5) < 0x17u)
            break;
          v65 = (_BYTE *)(v331 + 6);
          v328 = (JSC::VM *)v331;
          if ((*(_BYTE *)(v331 + 6) & 8) != 0)
            goto LABEL_75;
        }
        if (!v325)
          goto LABEL_185;
        v119 = *(_DWORD *)(v325 + 16);
        if ((v119 & 0x20) != 0)
          goto LABEL_185;
        v120 = *(_BYTE **)(v325 + 8);
        v121 = *(unsigned int *)(v325 + 4);
        if ((v119 & 4) != 0)
        {
          if (!(_DWORD)v121)
            goto LABEL_185;
          v122 = *v120 - 48;
          if (v122 > 9 || v121 >= 2 && *v120 == 48)
            goto LABEL_185;
          v223 = v120 + 1;
          v224 = v121 - 1;
          v329 = 10;
          while (v224)
          {
            if (v122 <= 0x19999999)
            {
              v225 = *v223 - 48;
              if (v225 <= 9)
              {
                v130 = __CFADD__(v225, 10 * v122);
                v122 = v225 + 10 * (_DWORD)v122;
                ++v223;
                --v224;
                if (!v130)
                  continue;
              }
            }
            goto LABEL_158;
          }
        }
        else
        {
          if (!(_DWORD)v121)
            goto LABEL_185;
          v122 = *(unsigned __int16 *)v120 - 48;
          if (v122 > 9 || *(_WORD *)v120 == 48 && v121 > 1)
            goto LABEL_185;
          v134 = (unsigned __int16 *)(v120 + 2);
          v135 = v121 - 1;
          v329 = 10;
          while (v135)
          {
            if (v122 <= 0x19999999)
            {
              v136 = *v134 - 48;
              if (v136 <= 9)
              {
                v130 = __CFADD__(v136, 10 * v122);
                v122 = v136 + 10 * (_DWORD)v122;
                ++v134;
                --v135;
                if (!v130)
                  continue;
              }
            }
            goto LABEL_158;
          }
        }
        if ((_DWORD)v122 == -1)
          goto LABEL_185;
        v323 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v329 = 10;
        while (1)
        {
          v320 = (JSC::VM *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE));
          v333 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, uint64_t, uint64_t *))(16 * *((unsigned int *)v320 + 19) + 0x70))(v22, a1, v122, &v338);
          if (*((_DWORD *)v323 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v323, a2, a3, a4, a5, a6, a7, a8))
            goto LABEL_185;
          if ((v333 & 1) != 0)
            goto LABEL_155;
          if (BYTE2(v343[1]) == 3)
          {
            if (BYTE4(v343[1]))
              goto LABEL_185;
            v226 = *(unsigned __int8 *)(v22 + 5);
            if (v226 == 61)
              goto LABEL_530;
          }
          else
          {
            v226 = *(unsigned __int8 *)(v22 + 5);
            if (v226 == 61)
            {
              if (BYTE2(v343[1]) == 1)
                goto LABEL_185;
              goto LABEL_530;
            }
          }
          if ((v226 - 39) <= 0xA
            && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v22, a2, a3, a4, a5, a6, a7, a8) <= v122)
          {
            goto LABEL_185;
          }
LABEL_530:
          if ((*((_WORD *)v320 + 6) & 0x800) == 0 || BYTE2(v343[1]) == 3)
          {
            v334 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x30);
            if (!v334)
              v334 = *(_QWORD *)(v22 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v334 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                        * *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C)
                                                                                        + 0xB0))(v22, a1);
            }
            else
            {
              v334 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x30);
              if (!v334)
                v334 = *(_QWORD *)(v22 + 16);
            }
            if (*((_DWORD *)v323 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v323, a2, a3, a4, a5, a6, a7, a8))
              goto LABEL_185;
          }
          if ((v334 & 0xFFFE000000000002) == 0)
          {
            v22 = v334;
            if (*(unsigned __int8 *)(v334 + 5) > 0x16u)
              continue;
          }
          goto LABEL_158;
        }
      }
LABEL_75:
      if (v325)
      {
        v68 = *(_DWORD *)(v325 + 16);
        if ((v68 & 0x20) == 0)
        {
          v69 = *(_BYTE **)(v325 + 8);
          v70 = *(unsigned int *)(v325 + 4);
          if ((v68 & 4) != 0)
          {
            if ((_DWORD)v70)
            {
              if (*v69 - 48 <= 9)
              {
                v178 = *v69 - 48;
                if (v70 < 2 || *v69 != 48)
                {
                  v286 = v69 + 1;
                  v287 = v70 - 1;
                  while (v287)
                  {
                    if (v178 <= 0x19999999)
                    {
                      v288 = *v286 - 48;
                      if (v288 <= 9)
                      {
                        v130 = __CFADD__(v288, 10 * v178);
                        v178 = v288 + 10 * (_DWORD)v178;
                        ++v286;
                        --v287;
                        if (!v130)
                          continue;
                      }
                    }
                    goto LABEL_80;
                  }
LABEL_743:
                  if ((_DWORD)v178 != -1)
                  {
                    v324 = (JSC::VM *)*((_QWORD *)a1 + 7);
                    v329 = 10;
                    while (1)
                    {
                      v321 = (JSC::VM *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE));
                      v335 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, uint64_t, uint64_t *))(16 * *((unsigned int *)v321 + 19) + 0x70))(v22, a1, v178, &v338);
                      if (*((_DWORD *)v324 + 20))
                      {
                        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v324, a2, a3, a4, a5, a6, a7, a8);
                        if (((hasExceptionsAfterHandlingTraps | v335) & 1) != 0)
                        {
                          if (!hasExceptionsAfterHandlingTraps)
                            goto LABEL_155;
LABEL_185:
                          v113 = 10;
LABEL_157:
                          v329 = v113;
                          goto LABEL_158;
                        }
                      }
                      else if ((v335 & 1) != 0)
                      {
                        goto LABEL_155;
                      }
                      if (BYTE2(v343[1]) == 3)
                      {
                        if (BYTE4(v343[1]))
                          goto LABEL_185;
                        v289 = *(unsigned __int8 *)(v22 + 5);
                        if (v289 == 61)
                          goto LABEL_750;
                      }
                      else
                      {
                        v289 = *(unsigned __int8 *)(v22 + 5);
                        if (v289 == 61)
                        {
                          if (BYTE2(v343[1]) == 1)
                            goto LABEL_185;
                          goto LABEL_750;
                        }
                      }
                      if ((v289 - 39) <= 0xA
                        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v22, a2, a3, a4, a5, a6, a7, a8) <= v178)
                      {
                        goto LABEL_185;
                      }
LABEL_750:
                      if ((*((_WORD *)v321 + 6) & 0x800) == 0 || BYTE2(v343[1]) == 3)
                      {
                        v336 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x30);
                        if (!v336)
                          v336 = *(_QWORD *)(v22 + 16);
                      }
                      else
                      {
                        if ((*(_WORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                        {
                          v336 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C) + 0xB0))(v22, a1);
                        }
                        else
                        {
                          v336 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x30);
                          if (!v336)
                            v336 = *(_QWORD *)(v22 + 16);
                        }
                        if (*((_DWORD *)v324 + 20)
                          && JSC::VM::hasExceptionsAfterHandlingTraps(v324, a2, a3, a4, a5, a6, a7, a8))
                        {
                          goto LABEL_185;
                        }
                      }
                      if ((v336 & 0xFFFE000000000002) == 0)
                      {
                        v22 = v336;
                        if (*(unsigned __int8 *)(v336 + 5) > 0x16u)
                          continue;
                      }
                      goto LABEL_158;
                    }
                  }
                }
              }
            }
          }
          else if ((_DWORD)v70)
          {
            if (*(unsigned __int16 *)v69 - 48 <= 9)
            {
              v178 = *(unsigned __int16 *)v69 - 48;
              if (*(_WORD *)v69 != 48 || v70 <= 1)
              {
                v179 = (unsigned __int16 *)(v69 + 2);
                v180 = v70 - 1;
                while (v180)
                {
                  if (v178 <= 0x19999999)
                  {
                    v181 = *v179 - 48;
                    if (v181 <= 9)
                    {
                      v130 = __CFADD__(v181, 10 * v178);
                      v178 = v181 + 10 * (_DWORD)v178;
                      ++v179;
                      --v180;
                      if (!v130)
                        continue;
                    }
                  }
                  goto LABEL_80;
                }
                goto LABEL_743;
              }
            }
          }
        }
      }
LABEL_80:
      v71 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v329 = 10;
      while (1)
      {
        v72 = *(_DWORD *)v331 & 0xFFFFFFFE;
        v73 = 16 * v72;
        if ((*(_BYTE *)(v331 + 6) & 8) != 0)
        {
          v319 = (*(uint64_t (**)(int64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(16 * v72 + 0x4C) + 0x68))(v331, a1, v325, &v338);
          if (*((_DWORD *)v71 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v71, a2, a3, a4, a5, a6, a7, a8))
            goto LABEL_185;
          if ((v319 & 1) != 0)
            goto LABEL_155;
          if (BYTE2(v343[1]) == 3)
          {
            if (BYTE4(v343[1]))
              goto LABEL_185;
            v198 = *(unsigned __int8 *)(v331 + 5);
            if (v198 != 61)
            {
LABEL_392:
              if (!v325)
                goto LABEL_87;
              if ((v198 - 50) < 0xFFFFFFF5)
                goto LABEL_87;
              v199 = *(_DWORD *)(v325 + 16);
              if ((v199 & 0x20) != 0)
                goto LABEL_87;
              v200 = *(unsigned int *)(v325 + 4);
              if (!(_DWORD)v200)
                goto LABEL_87;
              v201 = *(unsigned __int8 **)(v325 + 8);
              if ((v199 & 4) == 0)
              {
                v202 = *(unsigned __int16 *)v201;
                if ((_DWORD)v200 == 1)
                  goto LABEL_398;
                if (v202 == 45)
                {
                  v202 = *((unsigned __int16 *)v201 + 1);
                  goto LABEL_427;
                }
                if ((v202 - 48) >= 0xA && ((_DWORD)v200 != 8 || v202 != 73))
                {
LABEL_461:
                  if ((_DWORD)v200 != 3 || v202 != 78)
                    goto LABEL_87;
                }
LABEL_449:
                v317 = v317 & 0xFFFFFF0000000000 | v200 | ((unint64_t)((v199 >> 2) & 1) << 32);
                JSC::jsToNumber(v201, v317);
                WTF::numberToString(v348, v211);
                if (WTF::equal(v325, (unint64_t)v348, v212))
                  goto LABEL_185;
                goto LABEL_87;
              }
              v202 = *v201;
              if ((_DWORD)v200 == 1)
              {
LABEL_398:
                if ((v202 - 48) < 0xA)
                  goto LABEL_185;
                goto LABEL_87;
              }
              if (v202 == 45)
              {
                v202 = v201[1];
LABEL_427:
                if ((v202 - 48) < 0xA)
                {
                  if ((_DWORD)v200 == 2)
                    goto LABEL_185;
                  goto LABEL_449;
                }
                if ((_DWORD)v200 != 9)
                  goto LABEL_87;
              }
              else
              {
                if ((v202 - 48) < 0xA)
                  goto LABEL_449;
                if ((_DWORD)v200 != 8)
                  goto LABEL_461;
              }
              if (v202 != 73)
                goto LABEL_87;
              goto LABEL_449;
            }
          }
          else
          {
            v198 = *(unsigned __int8 *)(v331 + 5);
            if (v198 != 61)
              goto LABEL_392;
            if (BYTE2(v343[1]) == 1)
              goto LABEL_185;
          }
        }
        else
        {
          if ((_DWORD)v322)
          {
            if ((v322 & ~*(_DWORD *)(16 * v72 + 0x20)) == 0)
            {
              JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v73, v71, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
              if (v74)
              {
                v348[0] = v325;
                v75 = JSC::PropertyTable::get(v74, v348);
                a6 = v75;
                if ((_DWORD)v75 != -1)
                {
                  a5 = HIDWORD(v75);
                  if ((int)v75 <= 63)
                  {
                    v172 = v331 + 16;
                    v173 = v75 << 32;
                  }
                  else
                  {
                    v172 = *(_QWORD *)(v331 + 8) - 8;
                    v173 = 0x3F00000000 - (v75 << 32);
                  }
                  a4 = *(_QWORD *)(v172 + (v173 >> 29));
                  if ((a4 & 0xFFFE000000000002) == 0)
                  {
                    v174 = *(unsigned __int8 *)(a4 + 5);
                    if (v174 != 5)
                    {
                      if (v174 != 6)
                        goto LABEL_296;
                      v151 = *(_DWORD *)(v73 + 16) & 3;
                      v187 = *(_QWORD *)(a4 + 16);
                      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                             * *(unsigned int *)(16
                                                                                               * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                               + 0x4C)))
                      {
                        v154 = *(_QWORD *)(a4 + 24);
                        v153 = *(_QWORD *)(a4 + 32);
                        v338 = *(_QWORD *)(a4 + 8);
                        v339 = v187;
                        LODWORD(v340) = HIDWORD(v75);
                        v155 = (JSC::VM *)v331;
LABEL_254:
                        v342 = (uint64_t)v155;
                        BYTE1(v343[1]) = 3;
                        if (v151 != 2)
                          LOBYTE(v343[1]) = 1;
                        BYTE3(v343[1]) = 1;
                        v346 = v154;
                        v347 = v153;
LABEL_155:
                        if (BYTE1(v343[1]) == 1)
                        {
                          v113 = v338;
                          goto LABEL_157;
                        }
                        if (BYTE1(v343[1]) == 2)
                          v140 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v338, a1, a3, a4, a5, a6, a7, a8);
                        else
                          v140 = JSC::PropertySlot::customGetter((uint64_t)&v338, *((JSC::VM **)a1 + 7), (WTF::StringImpl *)v325);
                        v329 = v140;
LABEL_158:
                        if (v345)
                        {
                          v114 = *(_DWORD *)(v344 + 4);
                          if (!v114)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x198B91628);
                          }
                          *(_DWORD *)(v344 + 4) = v114 - 1;
                        }
                        if (!*(_DWORD *)(v12 + 80)
                          || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
                        {
                          v22 = (unint64_t)v337;
                          if (v329 == v10)
                          {
                            if (((unint64_t)v337 & 0xFFFE000000000002) == 0)
                              return JSC::JSCell::getObject((uint64_t)v337);
                            return 0;
                          }
                          goto LABEL_13;
                        }
                        return 0;
                      }
                      v338 = *(_QWORD *)(a4 + 8);
                      v339 = v187;
                      LODWORD(v340) = HIDWORD(v75);
                      v185 = (JSC::VM *)v331;
LABEL_323:
                      v342 = (uint64_t)v185;
                      BYTE1(v343[1]) = 3;
                      if (v151 != 2)
                        LOBYTE(v343[1]) = 1;
                      goto LABEL_155;
                    }
                    v142 = (unsigned int *)v331;
                    v143 = (uint64_t)v71;
LABEL_233:
                    JSC::JSObject::fillGetterPropertySlot(v142, v143, (uint64_t)&v338, a4, a5, a6);
                    goto LABEL_155;
                  }
LABEL_296:
                  v338 = a4;
                  v112 = (JSC::VM *)v331;
                  goto LABEL_154;
                }
              }
            }
          }
          if ((*(_BYTE *)(v331 + 6) & 0x20) != 0
            && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v331, v71, v325, (uint64_t)&v338) & 1) != 0)
          {
            goto LABEL_155;
          }
        }
LABEL_87:
        if ((*(_WORD *)(v73 + 12) & 0x800) == 0)
        {
          v76 = *(_DWORD *)v331;
LABEL_89:
          v77 = *(_QWORD *)(16 * (v76 & 0xFFFFFFFE) + 0x30);
          if (!v77)
            v77 = *(_QWORD *)(v331 + 16);
          goto LABEL_91;
        }
        v76 = *(_DWORD *)v331;
        if (BYTE2(v343[1]) == 3)
          goto LABEL_89;
        v190 = 16 * (v76 & 0xFFFFFFFE);
        if ((*(_WORD *)(v190 + 12) & 0x800) != 0)
        {
          v77 = (*(uint64_t (**)(int64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v190 + 76)
                                                                                 + 0xB0))(v331, a1);
        }
        else
        {
          v77 = *(_QWORD *)(v190 + 48);
          if (!v77)
            v77 = *(_QWORD *)(v331 + 16);
        }
        if (*((_DWORD *)v71 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v71, a2, a3, a4, a5, a6, a7, a8))
          goto LABEL_185;
LABEL_91:
        if ((v77 & 0xFFFE000000000002) == 0)
        {
          v331 = v77;
          if (*(unsigned __int8 *)(v77 + 5) > 0x16u)
            continue;
        }
        goto LABEL_158;
      }
    }
    if (*(_QWORD *)(*((_QWORD *)v318 + 5244) + 1768) == v325)
    {
      v242 = *((_QWORD *)v337 + 1);
      if ((v242 & 1) != 0)
        v243 = (unsigned int *)((char *)v337 + 16);
      else
        v243 = (unsigned int *)(v242 + 4);
      v244 = *v243;
      if ((v244 & 0x80000000) != 0)
      {
        *(double *)a9.i64 = (double)v244;
        Index = COERCE__INT64((double)v244) + 0x2000000000000;
      }
      else
      {
        Index = v244 | 0xFFFE000000000000;
      }
      v246 = 14;
      goto LABEL_628;
    }
    if (v325)
    {
      v259 = *(_DWORD *)(v325 + 16);
      if ((v259 & 0x20) == 0)
      {
        v260 = *(_BYTE **)(v325 + 8);
        v261 = *(unsigned int *)(v325 + 4);
        if ((v259 & 4) != 0)
        {
          if (!(_DWORD)v261)
            goto LABEL_657;
          a3 = *v260 - 48;
          if (a3 > 9)
            goto LABEL_657;
          if (v261 >= 2 && *v260 == 48)
            goto LABEL_657;
          v307 = v260 + 1;
          v308 = v261 - 1;
          while (v308)
          {
            if (a3 > 0x19999999)
              goto LABEL_657;
            v309 = *v307 - 48;
            if (v309 > 9)
              goto LABEL_657;
            v247 = 0;
            v130 = __CFADD__(v309, 10 * a3);
            a3 = v309 + 10 * (_DWORD)a3;
            ++v307;
            --v308;
            if (v130)
              goto LABEL_629;
          }
        }
        else
        {
          if (!(_DWORD)v261)
            goto LABEL_657;
          a3 = *(unsigned __int16 *)v260 - 48;
          if (a3 > 9)
            goto LABEL_657;
          if (*(_WORD *)v260 == 48 && v261 > 1)
            goto LABEL_657;
          v269 = (unsigned __int16 *)(v260 + 2);
          v270 = v261 - 1;
          while (v270)
          {
            if (a3 > 0x19999999)
              goto LABEL_657;
            v271 = *v269 - 48;
            if (v271 > 9)
              goto LABEL_657;
            v247 = 0;
            v130 = __CFADD__(v271, 10 * a3);
            a3 = v271 + 10 * (_DWORD)a3;
            ++v269;
            --v270;
            if (v130)
              goto LABEL_629;
          }
        }
        if ((_DWORD)a3 != -1)
        {
          v310 = *((_QWORD *)v337 + 1);
          v311 = (v310 & 1) != 0 ? (JSC::JSCell *)((char *)v337 + 16) : (JSC::JSCell *)(v310 + 4);
          if (*(_DWORD *)v311 > a3)
          {
            Index = JSC::JSString::getIndex(v337, a1, a3, a4, a5, a6, a7, a8, a9);
            if (!*((_DWORD *)v318 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v318, a2, a3, a4, a5, a6, a7, a8))
            {
              v246 = 10;
LABEL_628:
              v338 = Index;
              LODWORD(v340) = v246;
              v342 = 0;
              v247 = 1;
              BYTE1(v343[1]) = 1;
              goto LABEL_629;
            }
          }
        }
      }
    }
LABEL_657:
    v247 = 0;
LABEL_629:
    if (*((_DWORD *)v318 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v318, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_185;
    if ((v247 & 1) != 0)
      goto LABEL_155;
    goto LABEL_631;
  }
LABEL_13:
  if (v19)
  {
    v25 = *(_QWORD *)(v22 + 16);
    RegExpStructure = JSC::getRegExpStructure((uint64_t)a1, v9, a3, (JSC::Structure *)a4, a5, a6, a7, a8);
    if (*(_DWORD *)(v12 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v26, (uint64_t)v27, v28, v29, v30, v31, v32))
    {
      return 0;
    }
    v35 = (_BYTE *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17 == 10)
      goto LABEL_24;
    v43 = JSC::toFlags(a1, v17, v27, v28, v29, v30, v31, v32, v34);
    if (*(_DWORD *)(v12 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v36, v37, v38, v39, v40, v41, v42))
    {
      return 0;
    }
    v35 = (_BYTE *)JSC::RegExpCache::lookupOrCreate(*(_QWORD *)(v12 + 93032), v12, (const WTF::StringImpl *)(v35 + 8), v43, v39, v40, v41, v42);
    if (!v35[20])
    {
LABEL_24:
      if (v9)
        v44 = *((_QWORD *)a1 + 31) == v9;
      else
        v44 = 1;
      return JSC::RegExpObject::create((JSC::RegExpObject *)v12, RegExpStructure, (JSC::Structure *)v35, (JSC::RegExp *)v44, v29, v30, v31, v32);
    }
    v166 = JSC::Yarr::errorToThrow(a1, v35[20]);
    JSC::VM::throwException((JSC::VM *)v12, a1, v166, v167, v168, v169, v170, v171);
    return 0;
  }
  if (!v20)
  {
    v23 = v22;
    return JSC::regExpCreate((uint64_t)a1, v9, v23, (JSC::Structure *)v17, a5, a6, a7, a8, a9);
  }
  v330 = *(_QWORD *)(*(_QWORD *)v13 + 2336);
  a9.i64[0] = 0xFFFFFFFF00000000;
  v340 = 0xFFFFFFFF00000000;
  LOBYTE(v344) = 0;
  v345 = 0;
  v346 = 0;
  v347 = 0;
  v342 = 0;
  memset(v343, 0, 13);
  v341 = (JSC::JSCell *)v22;
  if ((v22 & 0xFFFE000000000002) == 0)
  {
    v326 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v45 = *(unsigned __int8 *)(v22 + 5);
    if (v45 > 0x16)
      goto LABEL_29;
    if (v45 == 2)
    {
      if (*(_QWORD *)(*((_QWORD *)v326 + 5244) + 1768) == v330)
      {
        v235 = *(_QWORD *)(v22 + 8);
        if ((v235 & 1) != 0)
          v236 = (unsigned int *)(v22 + 16);
        else
          v236 = (unsigned int *)(v235 + 4);
        v237 = *v236;
        if ((v237 & 0x80000000) != 0)
        {
          *(double *)a9.i64 = (double)v237;
          v238 = COERCE__INT64((double)v237) + 0x2000000000000;
        }
        else
        {
          v238 = v237 | 0xFFFE000000000000;
        }
        v239 = 14;
        goto LABEL_611;
      }
      if (v330)
      {
        v256 = *(_DWORD *)(v330 + 16);
        if ((v256 & 0x20) == 0)
        {
          v257 = *(_BYTE **)(v330 + 8);
          v258 = *(unsigned int *)(v330 + 4);
          if ((v256 & 4) != 0)
          {
            if (!(_DWORD)v258)
              goto LABEL_651;
            a3 = *v257 - 48;
            if (a3 > 9 || v258 >= 2 && *v257 == 48)
              goto LABEL_651;
            v301 = v257 + 1;
            v302 = v258 - 1;
            while (v302)
            {
              if (a3 > 0x19999999)
                goto LABEL_651;
              v303 = *v301 - 48;
              if (v303 > 9)
                goto LABEL_651;
              v240 = 0;
              v130 = __CFADD__(v303, 10 * a3);
              a3 = v303 + 10 * (_DWORD)a3;
              ++v301;
              --v302;
              if (v130)
                goto LABEL_612;
            }
          }
          else
          {
            if (!(_DWORD)v258)
              goto LABEL_651;
            a3 = *(unsigned __int16 *)v257 - 48;
            if (a3 > 9 || *(_WORD *)v257 == 48 && v258 > 1)
              goto LABEL_651;
            v265 = (unsigned __int16 *)(v257 + 2);
            v266 = v258 - 1;
            while (v266)
            {
              if (a3 > 0x19999999)
                goto LABEL_651;
              v267 = *v265 - 48;
              if (v267 > 9)
                goto LABEL_651;
              v240 = 0;
              v130 = __CFADD__(v267, 10 * a3);
              a3 = v267 + 10 * (_DWORD)a3;
              ++v265;
              --v266;
              if (v130)
                goto LABEL_612;
            }
          }
          if ((_DWORD)a3 != -1)
          {
            v304 = *(_QWORD *)(v22 + 8);
            v305 = (JSC::JSCell *)((v304 & 1) != 0 ? v22 + 16 : v304 + 4);
            if (*(_DWORD *)v305 > a3)
            {
              v238 = JSC::JSString::getIndex((JSC::JSString *)v22, a1, a3, a4, a5, a6, a7, a8, a9);
              if (!*((_DWORD *)v326 + 20)
                || !JSC::VM::hasExceptionsAfterHandlingTraps(v326, a2, a3, a4, a5, a6, a7, a8))
              {
                v239 = 10;
LABEL_611:
                v338 = v238;
                LODWORD(v340) = v239;
                v342 = 0;
                v240 = 1;
                BYTE1(v343[1]) = 1;
                goto LABEL_612;
              }
            }
          }
        }
      }
LABEL_651:
      v240 = 0;
LABEL_612:
      if (*((_DWORD *)v326 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v326, a2, a3, a4, a5, a6, a7, a8))
        goto LABEL_147;
      if ((v240 & 1) != 0)
        goto LABEL_101;
    }
  }
  v241 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v337, (unint64_t)a1);
  if (!v241)
    goto LABEL_147;
  v22 = v241;
  v326 = (JSC::VM *)*((_QWORD *)a1 + 7);
LABEL_29:
  v46 = (_BYTE *)(v22 + 6);
  v47 = v330 >> 4;
  v48 = v22;
  if ((*(_BYTE *)(v22 + 6) & 8) == 0)
  {
    v49 = (JSC::JSCell *)v22;
    while (1)
    {
      v50 = *(_DWORD *)v49 & 0xFFFFFFFE;
      v51 = 16 * v50;
      if ((_DWORD)v47)
      {
        if ((v47 & ~*(_DWORD *)(16 * v50 + 0x20)) == 0)
        {
          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v51, v326, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (v52)
          {
            v348[0] = v330;
            v53 = JSC::PropertyTable::get(v52, v348);
            a6 = v53;
            if ((_DWORD)v53 != -1)
              break;
          }
        }
      }
      if ((*v46 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v49, v326, v330, (uint64_t)&v338) & 1) != 0)
      {
        goto LABEL_101;
      }
      v48 = *(_QWORD *)(v51 + 48);
      if (!v48)
        v48 = *((_QWORD *)v49 + 2);
      if ((v48 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v48 + 5) < 0x17u)
      {
        if (!v330)
          goto LABEL_147;
        v105 = *(_DWORD *)(v330 + 16);
        if ((v105 & 0x20) != 0)
          goto LABEL_147;
        v106 = *(_BYTE **)(v330 + 8);
        v107 = *(unsigned int *)(v330 + 4);
        if ((v105 & 4) != 0)
        {
          if (!(_DWORD)v107)
            goto LABEL_147;
          v108 = *v106 - 48;
          if (v108 > 9 || v107 >= 2 && *v106 == 48)
            goto LABEL_147;
          v215 = v107 - 1;
          v216 = v106 + 1;
          v327 = 10;
          while (v215)
          {
            if (v108 <= 0x19999999)
            {
              v217 = *v216 - 48;
              if (v217 <= 9)
              {
                v130 = __CFADD__(v217, 10 * v108);
                v108 = v217 + 10 * (_DWORD)v108;
                --v215;
                ++v216;
                if (!v130)
                  continue;
              }
            }
            goto LABEL_104;
          }
        }
        else
        {
          if (!(_DWORD)v107)
            goto LABEL_147;
          v108 = *(unsigned __int16 *)v106 - 48;
          if (v108 > 9 || *(_WORD *)v106 == 48 && v107 > 1)
            goto LABEL_147;
          v127 = v107 - 1;
          v128 = (unsigned __int16 *)(v106 + 2);
          v327 = 10;
          while (v127)
          {
            if (v108 <= 0x19999999)
            {
              v129 = *v128 - 48;
              if (v129 <= 9)
              {
                v130 = __CFADD__(v129, 10 * v108);
                v108 = v129 + 10 * (_DWORD)v108;
                --v127;
                ++v128;
                if (!v130)
                  continue;
              }
            }
            goto LABEL_104;
          }
        }
        if ((_DWORD)v108 == -1)
          goto LABEL_147;
        v218 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v327 = 10;
        while (1)
        {
          v219 = 16 * (*(_DWORD *)v22 & 0xFFFFFFFE);
          v220 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, uint64_t, uint64_t *))(16 * *(unsigned int *)(v219 + 0x4C) + 0x70))(v22, a1, v108, &v338);
          if (*((_DWORD *)v218 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v218, a2, a3, a4, a5, a6, a7, a8))
            goto LABEL_147;
          if ((v220 & 1) != 0)
            goto LABEL_101;
          if (BYTE2(v343[1]) == 3)
          {
            if (BYTE4(v343[1]))
              goto LABEL_147;
            v221 = *(unsigned __int8 *)(v22 + 5);
            if (v221 == 61)
              goto LABEL_490;
          }
          else
          {
            v221 = *(unsigned __int8 *)(v22 + 5);
            if (v221 == 61)
            {
              if (BYTE2(v343[1]) == 1)
                goto LABEL_147;
              goto LABEL_490;
            }
          }
          if ((v221 - 39) <= 0xA
            && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v22, a2, a3, a4, a5, a6, a7, a8) <= v108)
          {
            goto LABEL_147;
          }
LABEL_490:
          if ((*(_WORD *)(v219 + 12) & 0x800) == 0 || BYTE2(v343[1]) == 3)
          {
            v222 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x30);
            if (!v222)
              v222 = *(_QWORD *)(v22 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v222 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                        * *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C)
                                                                                        + 0xB0))(v22, a1);
            }
            else
            {
              v222 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x30);
              if (!v222)
                v222 = *(_QWORD *)(v22 + 16);
            }
            if (*((_DWORD *)v218 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v218, a2, a3, a4, a5, a6, a7, a8))
              goto LABEL_147;
          }
          if ((v222 & 0xFFFE000000000002) == 0)
          {
            v22 = v222;
            if (*(unsigned __int8 *)(v222 + 5) > 0x16u)
              continue;
          }
          goto LABEL_104;
        }
      }
      v46 = (_BYTE *)(v48 + 6);
      v49 = (JSC::JSCell *)v48;
      if ((*(_BYTE *)(v48 + 6) & 8) != 0)
        goto LABEL_41;
    }
    a5 = HIDWORD(v53);
    if ((int)v53 <= 63)
    {
      v78 = (uint64_t)v49 + 16;
      v79 = v53 << 32;
    }
    else
    {
      v78 = *((_QWORD *)v49 + 1) - 8;
      v79 = 0x3F00000000 - (v53 << 32);
    }
    a4 = *(_QWORD *)(v78 + (v79 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_99;
    v80 = *(unsigned __int8 *)(a4 + 5);
    if (v80 != 5)
    {
      if (v80 != 6)
      {
LABEL_99:
        v338 = a4;
        v342 = (uint64_t)v49;
LABEL_100:
        v340 = __PAIR64__(a6, a5);
        LOWORD(v343[1]) = 257;
        goto LABEL_101;
      }
      v147 = *(_DWORD *)(v51 + 16) & 3;
      v148 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v150 = *(_QWORD *)(a4 + 24);
        v149 = *(_QWORD *)(a4 + 32);
        v338 = *(_QWORD *)(a4 + 8);
        v339 = v148;
        LODWORD(v340) = HIDWORD(v53);
        v342 = (uint64_t)v49;
        goto LABEL_246;
      }
      v338 = *(_QWORD *)(a4 + 8);
      v339 = v148;
      LODWORD(v340) = HIDWORD(v53);
      v342 = (uint64_t)v49;
LABEL_282:
      BYTE1(v343[1]) = 3;
      if (v147 != 2)
        LOBYTE(v343[1]) = 1;
      goto LABEL_101;
    }
    v132 = (unsigned int *)v49;
    v133 = (uint64_t)v326;
LABEL_207:
    JSC::JSObject::fillGetterPropertySlot(v132, v133, (uint64_t)&v338, a4, a5, a6);
    goto LABEL_101;
  }
LABEL_41:
  if (v330)
  {
    v54 = *(_DWORD *)(v330 + 16);
    if ((v54 & 0x20) == 0)
    {
      v55 = *(_BYTE **)(v330 + 8);
      v56 = *(unsigned int *)(v330 + 4);
      if ((v54 & 4) != 0)
      {
        if ((_DWORD)v56)
        {
          v57 = *v55 - 48;
          if (v57 <= 9 && (v56 < 2 || *v55 != 48))
          {
            v276 = v56 - 1;
            v277 = v55 + 1;
            while (v276)
            {
              if (v57 <= 0x19999999)
              {
                v278 = *v277 - 48;
                if (v278 <= 9)
                {
                  v130 = __CFADD__(v278, 10 * v57);
                  v57 = v278 + 10 * (_DWORD)v57;
                  --v276;
                  ++v277;
                  if (!v130)
                    continue;
                }
              }
              goto LABEL_46;
            }
LABEL_705:
            if ((_DWORD)v57 != -1)
            {
              v279 = (JSC::VM *)*((_QWORD *)a1 + 7);
              v327 = 10;
              while (1)
              {
                v280 = 16 * (*(_DWORD *)v22 & 0xFFFFFFFE);
                v281 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, uint64_t, uint64_t *))(16 * *(unsigned int *)(v280 + 0x4C) + 0x70))(v22, a1, v57, &v338);
                v282 = v281;
                if (*((_DWORD *)v279 + 20))
                {
                  v285 = JSC::VM::hasExceptionsAfterHandlingTraps(v279, a2, a3, a4, a5, a6, a7, a8);
                  if (((v285 | v282) & 1) != 0)
                  {
                    if (!v285)
                      goto LABEL_101;
LABEL_147:
                    v81 = 10;
LABEL_103:
                    v327 = v81;
                    goto LABEL_104;
                  }
                }
                else if ((v281 & 1) != 0)
                {
                  goto LABEL_101;
                }
                if (BYTE2(v343[1]) == 3)
                {
                  if (BYTE4(v343[1]))
                    goto LABEL_147;
                  v283 = *(unsigned __int8 *)(v22 + 5);
                  if (v283 == 61)
                    goto LABEL_712;
                }
                else
                {
                  v283 = *(unsigned __int8 *)(v22 + 5);
                  if (v283 == 61)
                  {
                    if (BYTE2(v343[1]) == 1)
                      goto LABEL_147;
                    goto LABEL_712;
                  }
                }
                if ((v283 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v22, a2, a3, a4, a5, a6, a7, a8) <= v57)
                {
                  goto LABEL_147;
                }
LABEL_712:
                if ((*(_WORD *)(v280 + 12) & 0x800) == 0 || BYTE2(v343[1]) == 3)
                {
                  v284 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x30);
                  if (!v284)
                    v284 = *(_QWORD *)(v22 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v284 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                              * *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C)
                                                                                              + 0xB0))(v22, a1);
                  }
                  else
                  {
                    v284 = *(_QWORD *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x30);
                    if (!v284)
                      v284 = *(_QWORD *)(v22 + 16);
                  }
                  if (*((_DWORD *)v279 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v279, a2, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_147;
                  }
                }
                if ((v284 & 0xFFFE000000000002) == 0)
                {
                  v22 = v284;
                  if (*(unsigned __int8 *)(v284 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_104;
              }
            }
          }
        }
      }
      else if ((_DWORD)v56)
      {
        v57 = *(unsigned __int16 *)v55 - 48;
        if (v57 <= 9 && (*(_WORD *)v55 != 48 || v56 <= 1))
        {
          v163 = v56 - 1;
          v164 = (unsigned __int16 *)(v55 + 2);
          while (v163)
          {
            if (v57 <= 0x19999999)
            {
              v165 = *v164 - 48;
              if (v165 <= 9)
              {
                v130 = __CFADD__(v165, 10 * v57);
                v57 = v165 + 10 * (_DWORD)v57;
                --v163;
                ++v164;
                if (!v130)
                  continue;
              }
            }
            goto LABEL_46;
          }
          goto LABEL_705;
        }
      }
    }
  }
LABEL_46:
  v58 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v327 = 10;
  while (1)
  {
    v59 = 16 * (*(_DWORD *)v48 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v48 + 6) & 8) == 0)
      break;
    v192 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v48 & 0xFFFFFFFE) + 0x4C)
                                                                                                  + 0x68))(v48, a1, v330, &v338);
    if (*((_DWORD *)v58 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v58, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_147;
    if ((v192 & 1) != 0)
      goto LABEL_101;
    if (BYTE2(v343[1]) == 3)
    {
      if (BYTE4(v343[1]))
        goto LABEL_147;
      v193 = *(unsigned __int8 *)(v48 + 5);
      if (v193 != 61)
      {
LABEL_380:
        if (!v330)
          goto LABEL_53;
        if ((v193 - 50) < 0xFFFFFFF5)
          goto LABEL_53;
        v194 = *(_DWORD *)(v330 + 16);
        if ((v194 & 0x20) != 0)
          goto LABEL_53;
        v195 = *(unsigned int *)(v330 + 4);
        if (!(_DWORD)v195)
          goto LABEL_53;
        v196 = *(unsigned __int8 **)(v330 + 8);
        if ((v194 & 4) == 0)
        {
          v197 = *(unsigned __int16 *)v196;
          if ((_DWORD)v195 == 1)
            goto LABEL_386;
          if (v197 == 45)
          {
            v197 = *((unsigned __int16 *)v196 + 1);
            goto LABEL_417;
          }
          if ((v197 - 48) >= 0xA && ((_DWORD)v195 != 8 || v197 != 73))
          {
LABEL_445:
            if ((_DWORD)v195 != 3 || v197 != 78)
              goto LABEL_53;
          }
LABEL_423:
          v325 = v325 & 0xFFFFFF0000000000 | v195 | ((unint64_t)((v194 >> 2) & 1) << 32);
          JSC::jsToNumber(v196, v325);
          WTF::numberToString(v348, v209);
          if (WTF::equal(v330, (unint64_t)v348, v210))
            goto LABEL_147;
          goto LABEL_53;
        }
        v197 = *v196;
        if ((_DWORD)v195 == 1)
        {
LABEL_386:
          if ((v197 - 48) < 0xA)
            goto LABEL_147;
          goto LABEL_53;
        }
        if (v197 == 45)
        {
          v197 = v196[1];
LABEL_417:
          if ((v197 - 48) < 0xA)
          {
            if ((_DWORD)v195 == 2)
              goto LABEL_147;
            goto LABEL_423;
          }
          if ((_DWORD)v195 != 9)
            goto LABEL_53;
        }
        else
        {
          if ((v197 - 48) < 0xA)
            goto LABEL_423;
          if ((_DWORD)v195 != 8)
            goto LABEL_445;
        }
        if (v197 != 73)
          goto LABEL_53;
        goto LABEL_423;
      }
    }
    else
    {
      v193 = *(unsigned __int8 *)(v48 + 5);
      if (v193 != 61)
        goto LABEL_380;
      if (BYTE2(v343[1]) == 1)
        goto LABEL_147;
    }
LABEL_53:
    if ((*(_WORD *)(v59 + 12) & 0x800) == 0)
    {
      v62 = *(_DWORD *)v48;
LABEL_55:
      v63 = *(_QWORD *)(16 * (v62 & 0xFFFFFFFE) + 0x30);
      if (!v63)
        v63 = *(_QWORD *)(v48 + 16);
      goto LABEL_57;
    }
    v62 = *(_DWORD *)v48;
    if (BYTE2(v343[1]) == 3)
      goto LABEL_55;
    v189 = 16 * (v62 & 0xFFFFFFFE);
    if ((*(_WORD *)(v189 + 12) & 0x800) != 0)
    {
      v63 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v189 + 76) + 0xB0))(v48, a1);
    }
    else
    {
      v63 = *(_QWORD *)(v189 + 48);
      if (!v63)
        v63 = *(_QWORD *)(v48 + 16);
    }
    if (*((_DWORD *)v58 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v58, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_147;
LABEL_57:
    if ((v63 & 0xFFFE000000000002) == 0)
    {
      v48 = v63;
      if (*(unsigned __int8 *)(v63 + 5) > 0x16u)
        continue;
    }
    goto LABEL_104;
  }
  if (!(_DWORD)v47
    || (v47 & ~*(_DWORD *)(16 * (*(_DWORD *)v48 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v48 & 0xFFFFFFFE)), v58, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v60)|| (v348[0] = v330, v61 = JSC::PropertyTable::get(v60, v348), a6 = v61, (_DWORD)v61 == -1))
  {
    if ((*(_BYTE *)(v48 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v48, v58, v330, (uint64_t)&v338) & 1) != 0)
    {
      goto LABEL_101;
    }
    goto LABEL_53;
  }
  a5 = HIDWORD(v61);
  if ((int)v61 <= 63)
  {
    v160 = v48 + 16;
    v161 = v61 << 32;
  }
  else
  {
    v160 = *(_QWORD *)(v48 + 8) - 8;
    v161 = 0x3F00000000 - (v61 << 32);
  }
  a4 = *(_QWORD *)(v160 + (v161 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_271:
    v338 = a4;
    v342 = v48;
    goto LABEL_100;
  }
  v162 = *(unsigned __int8 *)(a4 + 5);
  if (v162 == 5)
  {
    v132 = (unsigned int *)v48;
    v133 = (uint64_t)v58;
    goto LABEL_207;
  }
  if (v162 != 6)
    goto LABEL_271;
  v147 = *(_DWORD *)(v59 + 16) & 3;
  v186 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v338 = *(_QWORD *)(a4 + 8);
    v339 = v186;
    LODWORD(v340) = HIDWORD(v61);
    v342 = v48;
    goto LABEL_282;
  }
  v150 = *(_QWORD *)(a4 + 24);
  v149 = *(_QWORD *)(a4 + 32);
  v338 = *(_QWORD *)(a4 + 8);
  v339 = v186;
  LODWORD(v340) = HIDWORD(v61);
  v342 = v48;
LABEL_246:
  BYTE1(v343[1]) = 3;
  if (v147 != 2)
    LOBYTE(v343[1]) = 1;
  BYTE3(v343[1]) = 1;
  v346 = v150;
  v347 = v149;
LABEL_101:
  if (BYTE1(v343[1]) == 1)
  {
    v81 = v338;
    goto LABEL_103;
  }
  if (BYTE1(v343[1]) == 2)
    v131 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v338, a1, a3, a4, a5, a6, a7, a8);
  else
    v131 = JSC::PropertySlot::customGetter((uint64_t)&v338, *((JSC::VM **)a1 + 7), (WTF::StringImpl *)v330);
  v327 = v131;
LABEL_104:
  if (v345)
  {
    v82 = *(_DWORD *)(v344 + 4);
    if (!v82)
    {
      __break(0xC471u);
      JUMPOUT(0x198B91448);
    }
    *(_DWORD *)(v344 + 4) = v82 - 1;
  }
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if (v17 != 10)
    goto LABEL_178;
  v83 = *(_QWORD *)(*(_QWORD *)v13 + 1304);
  v84 = v337;
  a9.i64[0] = 0xFFFFFFFF00000000;
  v340 = 0xFFFFFFFF00000000;
  LOBYTE(v344) = 0;
  v345 = 0;
  v346 = 0;
  v347 = 0;
  v342 = 0;
  memset(v343, 0, 13);
  v341 = v337;
  if (((unint64_t)v337 & 0xFFFE000000000002) != 0)
    goto LABEL_644;
  v85 = *((_QWORD *)a1 + 7);
  v86 = *((unsigned __int8 *)v337 + 5);
  if (v86 > 0x16)
    goto LABEL_111;
  if (v86 != 2)
    goto LABEL_644;
  if (*(_QWORD *)(*(_QWORD *)(v85 + 41952) + 1768) != v83)
  {
    if (v83)
    {
      v262 = *(_DWORD *)(v83 + 16);
      if ((v262 & 0x20) == 0)
      {
        v263 = *(_BYTE **)(v83 + 8);
        v264 = *(unsigned int *)(v83 + 4);
        if ((v262 & 4) != 0)
        {
          if ((_DWORD)v264)
          {
            a3 = *v263 - 48;
            if (a3 <= 9 && (v264 < 2 || *v263 != 48))
            {
              v312 = v263 + 1;
              v313 = v264 - 1;
              while (v313)
              {
                if (a3 > 0x19999999)
                  goto LABEL_663;
                v314 = *v312 - 48;
                if (v314 > 9)
                  goto LABEL_663;
                v254 = 0;
                v130 = __CFADD__(v314, 10 * a3);
                a3 = v314 + 10 * (_DWORD)a3;
                ++v312;
                --v313;
                if (v130)
                  goto LABEL_642;
              }
LABEL_899:
              if ((_DWORD)a3 != -1)
              {
                v315 = *((_QWORD *)v337 + 1);
                v316 = (v315 & 1) != 0 ? (JSC::JSCell *)((char *)v337 + 16) : (JSC::JSCell *)(v315 + 4);
                if (*(_DWORD *)v316 > a3)
                {
                  v252 = JSC::JSString::getIndex(v337, a1, a3, a4, a5, a6, a7, a8, a9);
                  if (!*(_DWORD *)(v85 + 80)
                    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v85, a2, a3, a4, a5, a6, a7, a8))
                  {
                    v253 = 10;
                    goto LABEL_641;
                  }
                }
              }
            }
          }
        }
        else if ((_DWORD)v264)
        {
          a3 = *(unsigned __int16 *)v263 - 48;
          if (a3 <= 9 && (*(_WORD *)v263 != 48 || v264 <= 1))
          {
            v273 = (unsigned __int16 *)(v263 + 2);
            v274 = v264 - 1;
            while (v274)
            {
              if (a3 > 0x19999999)
                goto LABEL_663;
              v275 = *v273 - 48;
              if (v275 > 9)
                goto LABEL_663;
              v254 = 0;
              v130 = __CFADD__(v275, 10 * a3);
              a3 = v275 + 10 * (_DWORD)a3;
              ++v273;
              --v274;
              if (v130)
                goto LABEL_642;
            }
            goto LABEL_899;
          }
        }
      }
    }
LABEL_663:
    v254 = 0;
    goto LABEL_642;
  }
  v249 = *((_QWORD *)v337 + 1);
  if ((v249 & 1) != 0)
    v250 = (unsigned int *)((char *)v337 + 16);
  else
    v250 = (unsigned int *)(v249 + 4);
  v251 = *v250;
  if ((v251 & 0x80000000) != 0)
  {
    *(double *)a9.i64 = (double)v251;
    v252 = COERCE__INT64((double)v251) + 0x2000000000000;
  }
  else
  {
    v252 = v251 | 0xFFFE000000000000;
  }
  v253 = 14;
LABEL_641:
  v338 = v252;
  LODWORD(v340) = v253;
  v342 = 0;
  v254 = 1;
  BYTE1(v343[1]) = 1;
LABEL_642:
  if (*(_DWORD *)(v85 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v85, a2, a3, a4, a5, a6, a7, a8))
    goto LABEL_191;
  if ((v254 & 1) != 0)
    goto LABEL_172;
LABEL_644:
  v255 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v337, (unint64_t)a1);
  if (!v255)
    goto LABEL_191;
  v84 = (JSC::JSCell *)v255;
  v85 = *((_QWORD *)a1 + 7);
LABEL_111:
  v87 = (char *)v84 + 6;
  v88 = v83 >> 4;
  v89 = (uint64_t)v84;
  if ((*((_BYTE *)v84 + 6) & 8) == 0)
  {
    v90 = v84;
    while (1)
    {
      v91 = *(_DWORD *)v90 & 0xFFFFFFFE;
      v92 = 16 * v91;
      if ((_DWORD)v88)
      {
        if ((v88 & ~*(_DWORD *)(16 * v91 + 0x20)) == 0)
        {
          JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v92, (JSC::VM *)v85, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
          if (v93)
          {
            v348[0] = v83;
            v94 = JSC::PropertyTable::get(v93, v348);
            a6 = v94;
            if ((_DWORD)v94 != -1)
              break;
          }
        }
      }
      if ((*v87 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v90, (JSC::VM *)v85, v83, (uint64_t)&v338) & 1) != 0)
      {
        goto LABEL_172;
      }
      v89 = *(_QWORD *)(v92 + 48);
      if (!v89)
        v89 = *((_QWORD *)v90 + 2);
      if ((v89 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v89 + 5) < 0x17u)
      {
        if (!v83)
          goto LABEL_191;
        v123 = *(_DWORD *)(v83 + 16);
        if ((v123 & 0x20) != 0)
          goto LABEL_191;
        v124 = *(_WORD **)(v83 + 8);
        v125 = *(unsigned int *)(v83 + 4);
        if ((v123 & 4) == 0)
        {
          if ((_DWORD)v125)
          {
            v126 = (unsigned __int16)*v124 - 48;
            if (v126 <= 9 && (*v124 != 48 || v125 <= 1))
            {
              v137 = v125 - 1;
              v138 = v124 + 1;
              v17 = 10;
              while (v137)
              {
                if (v126 <= 0x19999999)
                {
                  v139 = *v138 - 48;
                  if (v139 <= 9)
                  {
                    v130 = __CFADD__(v139, 10 * v126);
                    v126 = v139 + 10 * (_DWORD)v126;
                    --v137;
                    ++v138;
                    if (!v130)
                      continue;
                  }
                }
                goto LABEL_174;
              }
              goto LABEL_549;
            }
          }
          goto LABEL_191;
        }
        if (!(_DWORD)v125)
          goto LABEL_191;
        v126 = *(unsigned __int8 *)v124 - 48;
        if (v126 > 9 || v125 >= 2 && *(_BYTE *)v124 == 48)
          goto LABEL_191;
        v227 = v125 - 1;
        v228 = (unsigned __int8 *)v124 + 1;
        v17 = 10;
        while (v227)
        {
          if (v126 <= 0x19999999)
          {
            v229 = *v228 - 48;
            if (v229 <= 9)
            {
              v130 = __CFADD__(v229, 10 * v126);
              v126 = v229 + 10 * (_DWORD)v126;
              --v227;
              ++v228;
              if (!v130)
                continue;
            }
          }
          goto LABEL_174;
        }
LABEL_549:
        if ((_DWORD)v126 == -1)
        {
LABEL_191:
          v17 = 10;
          goto LABEL_174;
        }
        v230 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v17 = 10;
        while (2)
        {
          v231 = 16 * (*(_DWORD *)v84 & 0xFFFFFFFE);
          v232 = (*(uint64_t (**)(JSC::JSCell *, JSC::JSGlobalObject *, uint64_t, uint64_t *))(16 * *(unsigned int *)(v231 + 0x4C) + 0x70))(v84, a1, v126, &v338);
          if (*((_DWORD *)v230 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v230, a2, a3, a4, a5, a6, a7, a8))
            goto LABEL_191;
          if ((v232 & 1) != 0)
            goto LABEL_172;
          if (BYTE2(v343[1]) == 3)
          {
            if (BYTE4(v343[1]))
              goto LABEL_191;
            v233 = *((unsigned __int8 *)v84 + 5);
            if (v233 != 61)
              goto LABEL_555;
          }
          else
          {
            v233 = *((unsigned __int8 *)v84 + 5);
            if (v233 == 61)
            {
              if (BYTE2(v343[1]) == 1)
                goto LABEL_191;
            }
            else
            {
LABEL_555:
              if ((v233 - 39) <= 0xA
                && JSC::JSArrayBufferView::length(v84, a2, a3, a4, a5, a6, a7, a8) <= v126)
              {
                goto LABEL_191;
              }
            }
          }
          if ((*(_WORD *)(v231 + 12) & 0x800) == 0 || BYTE2(v343[1]) == 3)
          {
            v234 = *(_QWORD *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0x30);
            if (!v234)
              v234 = *((_QWORD *)v84 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v234 = (*(uint64_t (**)(JSC::JSCell *, JSC::JSGlobalObject *))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0xB0))(v84, a1);
            }
            else
            {
              v234 = *(_QWORD *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0x30);
              if (!v234)
                v234 = *((_QWORD *)v84 + 2);
            }
            if (*((_DWORD *)v230 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v230, a2, a3, a4, a5, a6, a7, a8))
              goto LABEL_191;
          }
          if ((v234 & 0xFFFE000000000002) != 0)
            goto LABEL_174;
          v84 = (JSC::JSCell *)v234;
          if (*(unsigned __int8 *)(v234 + 5) <= 0x16u)
            goto LABEL_174;
          continue;
        }
      }
      v87 = (_BYTE *)(v89 + 6);
      v90 = (JSC::JSCell *)v89;
      if ((*(_BYTE *)(v89 + 6) & 8) != 0)
        goto LABEL_123;
    }
    a5 = HIDWORD(v94);
    if ((int)v94 <= 63)
    {
      v115 = (uint64_t)v90 + 16;
      v116 = v94 << 32;
    }
    else
    {
      v115 = *((_QWORD *)v90 + 1) - 8;
      v116 = 0x3F00000000 - (v94 << 32);
    }
    a4 = *(_QWORD *)(v115 + (v116 >> 29));
    if ((a4 & 0xFFFE000000000002) == 0)
    {
      v117 = *(unsigned __int8 *)(a4 + 5);
      if (v117 != 5)
      {
        if (v117 != 6)
          goto LABEL_170;
        v156 = *(_DWORD *)(v92 + 16) & 3;
        v157 = *(_QWORD *)(a4 + 16);
        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
        {
          v159 = *(_QWORD *)(a4 + 24);
          v158 = *(_QWORD *)(a4 + 32);
          v338 = *(_QWORD *)(a4 + 8);
          v339 = v157;
          LODWORD(v340) = HIDWORD(v94);
          v342 = (uint64_t)v90;
          goto LABEL_259;
        }
        v338 = *(_QWORD *)(a4 + 8);
        v339 = v157;
        LODWORD(v340) = HIDWORD(v94);
        v342 = (uint64_t)v90;
LABEL_326:
        BYTE1(v343[1]) = 3;
        if (v156 != 2)
          LOBYTE(v343[1]) = 1;
        goto LABEL_172;
      }
      v144 = (unsigned int *)v90;
      v145 = v85;
LABEL_235:
      JSC::JSObject::fillGetterPropertySlot(v144, v145, (uint64_t)&v338, a4, a5, a6);
      goto LABEL_172;
    }
LABEL_170:
    v338 = a4;
    v342 = (uint64_t)v90;
LABEL_171:
    v340 = __PAIR64__(a6, a5);
    LOWORD(v343[1]) = 257;
    goto LABEL_172;
  }
LABEL_123:
  if (!v83)
    goto LABEL_128;
  v95 = *(_DWORD *)(v83 + 16);
  if ((v95 & 0x20) != 0)
    goto LABEL_128;
  v96 = *(_WORD **)(v83 + 8);
  v97 = *(unsigned int *)(v83 + 4);
  if ((v95 & 4) == 0)
  {
    if ((_DWORD)v97)
    {
      v98 = (unsigned __int16)*v96 - 48;
      if (v98 <= 9 && (*v96 != 48 || v97 <= 1))
      {
        v182 = v97 - 1;
        v183 = v96 + 1;
        while (v182)
        {
          if (v98 <= 0x19999999)
          {
            v184 = *v183 - 48;
            if (v184 <= 9)
            {
              v130 = __CFADD__(v184, 10 * v98);
              v98 = v184 + 10 * (_DWORD)v98;
              --v182;
              ++v183;
              if (!v130)
                continue;
            }
          }
          goto LABEL_128;
        }
        goto LABEL_770;
      }
    }
    goto LABEL_128;
  }
  if ((_DWORD)v97)
  {
    v98 = *(unsigned __int8 *)v96 - 48;
    if (v98 <= 9 && (v97 < 2 || *(_BYTE *)v96 != 48))
    {
      v291 = v97 - 1;
      v292 = (unsigned __int8 *)v96 + 1;
      while (v291)
      {
        if (v98 <= 0x19999999)
        {
          v293 = *v292 - 48;
          if (v293 <= 9)
          {
            v130 = __CFADD__(v293, 10 * v98);
            v98 = v293 + 10 * (_DWORD)v98;
            --v291;
            ++v292;
            if (!v130)
              continue;
          }
        }
        goto LABEL_128;
      }
LABEL_770:
      if ((_DWORD)v98 != -1)
      {
        v294 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v17 = 10;
        while (1)
        {
          v295 = 16 * (*(_DWORD *)v84 & 0xFFFFFFFE);
          v296 = (*(uint64_t (**)(JSC::JSCell *, JSC::JSGlobalObject *, uint64_t, uint64_t *))(16 * *(unsigned int *)(v295 + 0x4C) + 0x70))(v84, a1, v98, &v338);
          v297 = v296;
          if (*((_DWORD *)v294 + 20))
          {
            v300 = JSC::VM::hasExceptionsAfterHandlingTraps(v294, a2, a3, a4, a5, a6, a7, a8);
            if (((v300 | v297) & 1) != 0)
            {
              if (!v300)
                goto LABEL_172;
              goto LABEL_191;
            }
          }
          else if ((v296 & 1) != 0)
          {
            goto LABEL_172;
          }
          if (BYTE2(v343[1]) == 3)
          {
            if (BYTE4(v343[1]))
              goto LABEL_191;
            v298 = *((unsigned __int8 *)v84 + 5);
            if (v298 == 61)
              goto LABEL_777;
          }
          else
          {
            v298 = *((unsigned __int8 *)v84 + 5);
            if (v298 == 61)
            {
              if (BYTE2(v343[1]) == 1)
                goto LABEL_191;
              goto LABEL_777;
            }
          }
          if ((v298 - 39) <= 0xA
            && JSC::JSArrayBufferView::length(v84, a2, a3, a4, a5, a6, a7, a8) <= v98)
          {
            goto LABEL_191;
          }
LABEL_777:
          if ((*(_WORD *)(v295 + 12) & 0x800) == 0 || BYTE2(v343[1]) == 3)
          {
            v299 = *(_QWORD *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0x30);
            if (!v299)
              v299 = *((_QWORD *)v84 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v299 = (*(uint64_t (**)(JSC::JSCell *, JSC::JSGlobalObject *))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0xB0))(v84, a1);
            }
            else
            {
              v299 = *(_QWORD *)(16 * (*(_DWORD *)v84 & 0xFFFFFFFE) + 0x30);
              if (!v299)
                v299 = *((_QWORD *)v84 + 2);
            }
            if (*((_DWORD *)v294 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v294, a2, a3, a4, a5, a6, a7, a8))
              goto LABEL_191;
          }
          if ((v299 & 0xFFFE000000000002) == 0)
          {
            v84 = (JSC::JSCell *)v299;
            if (*(unsigned __int8 *)(v299 + 5) > 0x16u)
              continue;
          }
          goto LABEL_174;
        }
      }
    }
  }
LABEL_128:
  v99 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v17 = 10;
  while (1)
  {
    v100 = 16 * (*(_DWORD *)v89 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v89 + 6) & 8) == 0)
      break;
    v203 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v89 & 0xFFFFFFFE) + 0x4C)
                                                                                                  + 0x68))(v89, a1, v83, &v338);
    if (*((_DWORD *)v99 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v99, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_191;
    if ((v203 & 1) != 0)
      goto LABEL_172;
    if (BYTE2(v343[1]) == 3)
    {
      if (BYTE4(v343[1]))
        goto LABEL_191;
      v204 = *(unsigned __int8 *)(v89 + 5);
      if (v204 != 61)
      {
LABEL_404:
        if (!v83)
          goto LABEL_135;
        if ((v204 - 50) < 0xFFFFFFF5)
          goto LABEL_135;
        v205 = *(_DWORD *)(v83 + 16);
        if ((v205 & 0x20) != 0)
          goto LABEL_135;
        v206 = *(unsigned int *)(v83 + 4);
        if (!(_DWORD)v206)
          goto LABEL_135;
        v207 = *(unsigned __int8 **)(v83 + 8);
        if ((v205 & 4) == 0)
        {
          v208 = *(unsigned __int16 *)v207;
          if ((_DWORD)v206 == 1)
            goto LABEL_410;
          if (v208 == 45)
          {
            v208 = *((unsigned __int16 *)v207 + 1);
            goto LABEL_432;
          }
          if ((v208 - 48) >= 0xA && ((_DWORD)v206 != 8 || v208 != 73))
          {
LABEL_469:
            if ((_DWORD)v206 != 3 || v208 != 78)
              goto LABEL_135;
          }
LABEL_452:
          v330 = v330 & 0xFFFFFF0000000000 | v206 | ((unint64_t)((v205 >> 2) & 1) << 32);
          JSC::jsToNumber(v207, v330);
          WTF::numberToString(v348, v213);
          if (WTF::equal(v83, (unint64_t)v348, v214))
            goto LABEL_191;
          goto LABEL_135;
        }
        v208 = *v207;
        if ((_DWORD)v206 == 1)
        {
LABEL_410:
          if ((v208 - 48) < 0xA)
            goto LABEL_191;
          goto LABEL_135;
        }
        if (v208 == 45)
        {
          v208 = v207[1];
LABEL_432:
          if ((v208 - 48) < 0xA)
          {
            if ((_DWORD)v206 == 2)
              goto LABEL_191;
            goto LABEL_452;
          }
          if ((_DWORD)v206 != 9)
            goto LABEL_135;
        }
        else
        {
          if ((v208 - 48) < 0xA)
            goto LABEL_452;
          if ((_DWORD)v206 != 8)
            goto LABEL_469;
        }
        if (v208 != 73)
          goto LABEL_135;
        goto LABEL_452;
      }
    }
    else
    {
      v204 = *(unsigned __int8 *)(v89 + 5);
      if (v204 != 61)
        goto LABEL_404;
      if (BYTE2(v343[1]) == 1)
        goto LABEL_191;
    }
LABEL_135:
    if ((*(_WORD *)(v100 + 12) & 0x800) == 0)
    {
      v103 = *(_DWORD *)v89;
LABEL_137:
      v104 = *(_QWORD *)(16 * (v103 & 0xFFFFFFFE) + 0x30);
      if (!v104)
        v104 = *(_QWORD *)(v89 + 16);
      goto LABEL_139;
    }
    v103 = *(_DWORD *)v89;
    if (BYTE2(v343[1]) == 3)
      goto LABEL_137;
    v191 = 16 * (v103 & 0xFFFFFFFE);
    if ((*(_WORD *)(v191 + 12) & 0x800) != 0)
    {
      v104 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v191 + 76) + 0xB0))(v89, a1);
    }
    else
    {
      v104 = *(_QWORD *)(v191 + 48);
      if (!v104)
        v104 = *(_QWORD *)(v89 + 16);
    }
    if (*((_DWORD *)v99 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v99, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_191;
LABEL_139:
    if ((v104 & 0xFFFE000000000002) == 0)
    {
      v89 = v104;
      if (*(unsigned __int8 *)(v104 + 5) > 0x16u)
        continue;
    }
    goto LABEL_174;
  }
  if (!(_DWORD)v88
    || (v88 & ~*(_DWORD *)(16 * (*(_DWORD *)v89 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v89 & 0xFFFFFFFE)), v99, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v101)|| (v348[0] = v83, v102 = JSC::PropertyTable::get(v101, v348), a6 = v102, (_DWORD)v102 == -1))
  {
    if ((*(_BYTE *)(v89 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v89, v99, v83, (uint64_t)&v338) & 1) != 0)
    {
      goto LABEL_172;
    }
    goto LABEL_135;
  }
  a5 = HIDWORD(v102);
  if ((int)v102 <= 63)
  {
    v175 = v89 + 16;
    v176 = v102 << 32;
  }
  else
  {
    v175 = *(_QWORD *)(v89 + 8) - 8;
    v176 = 0x3F00000000 - (v102 << 32);
  }
  a4 = *(_QWORD *)(v175 + (v176 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_302:
    v338 = a4;
    v342 = v89;
    goto LABEL_171;
  }
  v177 = *(unsigned __int8 *)(a4 + 5);
  if (v177 == 5)
  {
    v144 = (unsigned int *)v89;
    v145 = (uint64_t)v99;
    goto LABEL_235;
  }
  if (v177 != 6)
    goto LABEL_302;
  v156 = *(_DWORD *)(v100 + 16) & 3;
  v188 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v338 = *(_QWORD *)(a4 + 8);
    v339 = v188;
    LODWORD(v340) = HIDWORD(v102);
    v342 = v89;
    goto LABEL_326;
  }
  v159 = *(_QWORD *)(a4 + 24);
  v158 = *(_QWORD *)(a4 + 32);
  v338 = *(_QWORD *)(a4 + 8);
  v339 = v188;
  LODWORD(v340) = HIDWORD(v102);
  v342 = v89;
LABEL_259:
  BYTE1(v343[1]) = 3;
  if (v156 != 2)
    LOBYTE(v343[1]) = 1;
  BYTE3(v343[1]) = 1;
  v346 = v159;
  v347 = v158;
LABEL_172:
  if (BYTE1(v343[1]) == 1)
  {
    v17 = v338;
  }
  else
  {
    if (BYTE1(v343[1]) == 2)
      v141 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v338, a1, a3, a4, a5, a6, a7, a8);
    else
      v141 = JSC::PropertySlot::customGetter((uint64_t)&v338, *((JSC::VM **)a1 + 7), (WTF::StringImpl *)v83);
    v17 = v141;
  }
LABEL_174:
  if (v345)
  {
    v118 = *(_DWORD *)(v344 + 4);
    if (!v118)
    {
      __break(0xC471u);
      JUMPOUT(0x198B91648);
    }
    *(_DWORD *)(v344 + 4) = v118 - 1;
  }
  if (*(_DWORD *)(v12 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, a4, a5, a6, a7, a8))
    return 0;
LABEL_178:
  v23 = v327;
  v337 = (JSC::JSCell *)v327;
  return JSC::regExpCreate((uint64_t)a1, v9, v23, (JSC::Structure *)v17, a5, a6, a7, a8, a9);
}

