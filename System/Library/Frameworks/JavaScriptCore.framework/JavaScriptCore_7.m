__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::doubleToStrictInt52(_QWORD *a1, unint64_t a2, unint64_t a3, JSC::B3::Value *a4)
{
  JSC::FTL::Output *v8;
  __int128 *v9;
  JSC::B3::Value *v10;
  JSC::B3::Value *v11;
  int8x8_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::BasicBlock *v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::B3::Value *v22;
  JSC::B3::Value *v23;
  JSC::B3::Value *v24;
  JSC::B3::Value *v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::B3::Value *v33;
  JSC::B3::Value *v34;
  JSC::B3::Value *v35;
  JSC::B3::Value *v36;
  JSC::B3::Value *v37;
  JSC::B3::Value *v38;
  int8x8_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v8 = (JSC::FTL::Output *)(a1 + 3455);
  v9 = JSC::FTL::Output::doubleToInt64((JSC::FTL::Output *)(a1 + 3455), a4);
  v10 = (JSC::B3::Value *)JSC::FTL::Output::intToDouble(v8, (JSC::B3::Value *)v9);
  v11 = JSC::FTL::Output::doubleNotEqualOrUnordered(v8, a4, v10);
  a3 &= 0xFF00FFFFFFFFFFFFLL;
  v13 = JSC::FTL::Output::newBlock(v8);
  v14 = JSC::FTL::Output::newBlock(v8);
  v15 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v8);
  v16 = JSC::FTL::Output::isZero64(v8, (JSC::B3::Value *)v9);
  JSC::FTL::Output::branch(v8, (uint64_t)v16, v13, v14, NAN, NAN, v17, v18, v19, v20);
  a1[3472] = v13;
  v21 = a1[3473];
  a1[3473] = v14;
  v22 = JSC::FTL::Output::bitCast(v8, (uint64_t)a4);
  v23 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v8, 0x8000000000000000);
  v24 = JSC::FTL::Output::bitAnd(v8, v22, v23);
  v25 = JSC::FTL::Output::notZero64(v8, v24);
  JSC::FTL::Output::jump(v8, v15, v27, v28, v29, v30, v31, v32);
  a1[3472] = v14;
  a1[3473] = v15;
  v33 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v8, 0xFFF8000000000000);
  v34 = (JSC::B3::Value *)JSC::FTL::Output::add(v8, v33, (JSC::B3::Value *)v9);
  v35 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v8, 52);
  v36 = JSC::FTL::Output::lShr(v8, v34, v35);
  v37 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v8, 4094);
  v38 = JSC::FTL::Output::belowOrEqual(v8, v36, v37);
  JSC::FTL::Output::jump(v8, v15, v40, v41, v42, v43, v44, v45);
  a1[3472] = v15;
  a1[3473] = v21;
  return v9;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isNotNumber(JSC::B3::Value **this, JSC::B3::Value *a2, uint64_t a3)
{
  JSC::FTL::Output *v3;
  JSC::B3::Value *v4;
  uint64_t v6;
  JSC::B3::Value *v7;

  if ((a3 & 0xFF00000000) != 0)
  {
    if ((a3 & 0xFFFFFF00FFFFFFFFLL) != 0)
    {
LABEL_3:
      v3 = (JSC::FTL::Output *)(this + 3455);
      v4 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(this + 3455), a2, this[3487]);
      return JSC::FTL::Output::isZero64(v3, v4);
    }
    v6 = 3456;
  }
  else
  {
    v6 = 3455;
  }
  v7 = this[v6];
  if (!v7)
    goto LABEL_3;
  return v7;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isCellOrMiscOrBigInt32(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, uint64_t a3)
{
  JSC::B3::Value *v4;
  uint64_t v5;
  JSC::B3::Value *v6;
  JSC::B3::Value *v7;
  char **v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  char *v12;
  uint64_t v13;
  JSC::B3::Value *v14;

  if ((a3 & 0xFFFFD0FF00000008) == 0)
  {
    v13 = 27640;
    goto LABEL_10;
  }
  if ((a3 & 0x2F00FFFFFFF7) == 0)
  {
    v13 = 27648;
LABEL_10:
    v7 = *(JSC::B3::Value **)((char *)this + v13);
    if (v7)
      return v7;
  }
  v4 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), a2, *((JSC::B3::Value **)this + 3487));
  v5 = *((_QWORD *)this + 3472);
  v6 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v7 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), (uint64_t)v4, *((_QWORD *)this + 3459));
  JSC::B3::Procedure::addValueImpl(v6, v7);
  v14 = v7;
  v8 = (char **)(v5 + 8);
  v9 = *(unsigned int *)(v5 + 20);
  if ((_DWORD)v9 == *(_DWORD *)(v5 + 16))
  {
    v12 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v9 + 1, (unint64_t)&v14);
    v9 = *(unsigned int *)(v5 + 20);
    *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v9) = *(_QWORD *)v12;
    v10 = v14;
  }
  else
  {
    *(_QWORD *)&(*v8)[8 * v9] = v7;
    v10 = v7;
  }
  *(_DWORD *)(v5 + 20) = v9 + 1;
  *((_QWORD *)v10 + 4) = v5;
  return v7;
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::doubleToInt32(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, double a3, double a4)
{
  int v6;
  __int128 *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  char v15;

  v6 = JSC::MacroAssemblerARM64::s_jscvtCheckState;
  if (!JSC::MacroAssemblerARM64::s_jscvtCheckState)
  {
    JSC::MacroAssemblerARM64::collectCPUFeatures(this);
    v6 = JSC::MacroAssemblerARM64::s_jscvtCheckState;
  }
  if (v6 != 2)
  v7 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 1);
  v14 = 0;
  v15 = 3;
  JSC::B3::StackmapValue::append(v7, (uint64_t)a2, (unint64_t)&v14);
  v8 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E3575768;
  v9 = (unsigned int *)*((_QWORD *)v7 + 7);
  *((_QWORD *)v7 + 7) = v8;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  *((_QWORD *)v7 + 14) = 0;
  *((_QWORD *)v7 + 15) = 0;
  *((_QWORD *)v7 + 16) = 0;
  return v7;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::numberOrNotCellNorBigIntToInt32(uint64_t a1, unint64_t a2, JSC::B3::Value *a3)
{
  JSC::FTL::Output *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::B3::BasicBlock *v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  double v40;
  double v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::B3::Value *v56;
  uint64_t v57;
  uint64_t v58;
  int8x8_t v59;
  JSC::B3::Value *v60;
  JSC::B3::Value *v61;
  JSC::B3::Value *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  JSC::B3::Value *v80;
  uint64_t v81;
  uint64_t v82;
  int8x8_t v83;
  JSC::B3::Value *v84;
  double v85;
  double v86;
  __int128 v87;
  WTF *v88;
  uint64_t v89;

  v6 = (JSC::FTL::Output *)(a1 + 27640);
  v7 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v8 = JSC::FTL::Output::newBlock(v6);
  v9 = (a2 >> 50) & 0x3F;
  if ((_DWORD)v9 == 42)
  {
    v10 = JSC::FTL::Output::newBlock(v6);
    v11 = JSC::FTL::Output::newBlock(v6);
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  v12 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v6);
  v88 = 0;
  v89 = 0;
  v13 = JSC::FTL::Output::below(v6, a3, *(JSC::B3::Value **)(a1 + 27896));
  JSC::FTL::Output::branch(v6, (uint64_t)v13, v8, v7, NAN, NAN, v14, v15, v16, v17);
  *(_QWORD *)(a1 + 27776) = v7;
  v18 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v8;
  v19 = JSC::FTL::Output::castToInt32(v6, a3);
  *(_QWORD *)&v87 = JSC::FTL::Output::anchor(v6, v19);
  *((_QWORD *)&v87 + 1) = v20;
  WTF::Vector<JSC::FTL::ValueFromBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v88, (unint64_t)&v87);
  JSC::FTL::Output::jump(v6, v12, v21, v22, v23, v24, v25, v26);
  *(_QWORD *)(a1 + 27776) = v8;
  if ((_DWORD)v9 == 4)
  {
    *(_QWORD *)(a1 + 27784) = v12;
    if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, 0x7300000000, v28, v29, v30, v31, v32))
    {
    }
  }
  else
  {
    *(_QWORD *)(a1 + 27784) = v10;
    JSC::FTL::Output::branch(v6, (uint64_t)v34, v11, v10, NAN, NAN, v35, v36, v37, v38);
    *(_QWORD *)(a1 + 27776) = v10;
    *(_QWORD *)(a1 + 27784) = v11;
    *(_QWORD *)&v87 = JSC::FTL::Output::anchor(v6, (JSC::B3::Value *)v42);
    *((_QWORD *)&v87 + 1) = v43;
    v50 = HIDWORD(v89);
    if (HIDWORD(v89) == (_DWORD)v89)
    {
      WTF::Vector<JSC::FTL::ValueFromBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v88, (unint64_t)&v87);
    }
    else
    {
      *((_OWORD *)v88 + HIDWORD(v89)) = v87;
      HIDWORD(v89) = v50 + 1;
    }
    JSC::FTL::Output::jump(v6, v12, v44, v45, v46, v47, v48, v49);
    *(_QWORD *)(a1 + 27776) = v11;
    *(_QWORD *)(a1 + 27784) = v12;
    if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, 0xFFFFD3FF00000008, v51, v52, v53, v54, v55))
    {
    }
    v60 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v6, 7);
    v61 = JSC::FTL::Output::equal(v6, a3, v60);
    v62 = (JSC::B3::Value *)JSC::FTL::Output::select(v6, (uint64_t)v61, *(_QWORD *)(a1 + 27664), *(_QWORD *)(a1 + 27656), 0);
  }
  *(_QWORD *)&v87 = JSC::FTL::Output::anchor(v6, v62);
  *((_QWORD *)&v87 + 1) = v63;
  v70 = HIDWORD(v89);
  if (HIDWORD(v89) == (_DWORD)v89)
  {
    WTF::Vector<JSC::FTL::ValueFromBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v88, (unint64_t)&v87);
  }
  else
  {
    *((_OWORD *)v88 + HIDWORD(v89)) = v87;
    HIDWORD(v89) = v70 + 1;
  }
  JSC::FTL::Output::jump(v6, v12, v64, v65, v66, v67, v68, v69);
  *(_QWORD *)(a1 + 27776) = v12;
  *(_QWORD *)(a1 + 27784) = v18;
  v78 = JSC::FTL::Output::phi<WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v6, 1, (unsigned int *)&v88);
  if (v88)
    WTF::fastFree((unint64_t)v88, v71, v72, v73, v74, v75, v76, v77);
  return v78;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::doubleToInt32(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, double a3, double a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  JSC::B3::BasicBlock *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  JSC::B3::Value *v50;
  uint64_t v51;
  uint64_t v52;
  char **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::B3::Value *v61;
  uint64_t v62;
  uint64_t v63;
  char **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  JSC::B3::Value *v68;
  JSC::B3::Value *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char **v74;
  uint64_t v75;
  JSC::B3::Value *v76;
  uint64_t v77;
  uint64_t v78;
  JSC::B3::Value *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF *v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  JSC::B3::Value *v97;
  uint64_t v98;
  uint64_t v99;
  JSC::B3::Value *v100;
  JSC::B3::Value *v101;
  uint64_t v102;
  JSC::B3::Value *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char **v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF *v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  JSC::B3::Value *v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char **v131;
  uint64_t v132;
  uint64_t v133;
  WTF *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  __int128 *v145;
  __int128 *v146;
  uint64_t v147;
  WTF *v149;
  uint64_t v150;
  _BYTE v151[32];
  __int128 v152;
  uint64_t v153;
  _QWORD *v154;

  v5 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v6 = v5;
  v7 = *((_QWORD *)this + 3473);
  if (v7)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v7, v5);
  }
  else
  {
    *(_QWORD *)&v152 = v5;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    v8[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v8;
    v154 = v8;
    v8[2] = v6;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v152, (uint64_t *)&v154, v9, v10, v11, v12, v13, (uint64_t)&v149);
    v14 = v154;
    v15 = (_QWORD *)*((_QWORD *)this + 3479);
    *v154 = (char *)this + 27824;
    v14[1] = v15;
    *v15 = v14;
    *((_QWORD *)this + 3479) = v14;
  }
  v16 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v17 = v16;
  v18 = *((_QWORD *)this + 3473);
  if (v18)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v18, v16);
  }
  else
  {
    *(_QWORD *)&v152 = v16;
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v19 = 0u;
    *((_OWORD *)v19 + 1) = 0u;
    v19[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v19;
    v154 = v19;
    v19[2] = v17;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v152, (uint64_t *)&v154, v20, v21, v22, v23, v24, (uint64_t)&v149);
    v25 = v154;
    v26 = (_QWORD *)*((_QWORD *)this + 3479);
    *v154 = (char *)this + 27824;
    v25[1] = v26;
    *v26 = v25;
    *((_QWORD *)this + 3479) = v25;
  }
  v27 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v28 = (JSC::B3::BasicBlock *)v27;
  v29 = *((_QWORD *)this + 3473);
  if (v29)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v29, v27);
  }
  else
  {
    *(_QWORD *)&v152 = v27;
    v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v30 = 0u;
    *((_OWORD *)v30 + 1) = 0u;
    v30[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v30;
    v154 = v30;
    v30[2] = v28;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v152, (uint64_t *)&v154, v31, v32, v33, v34, v35, (uint64_t)&v149);
    v36 = v154;
    v37 = (_QWORD *)*((_QWORD *)this + 3479);
    *v154 = (char *)this + 27824;
    v36[1] = v37;
    *v37 = v36;
    *((_QWORD *)this + 3479) = v36;
  }
  v38 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v39 = v38;
  v40 = *((_QWORD *)this + 3473);
  if (v40)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v40, v38);
  }
  else
  {
    *(_QWORD *)&v152 = v38;
    v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v41 = 0u;
    *((_OWORD *)v41 + 1) = 0u;
    v41[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v41;
    v154 = v41;
    v41[2] = v39;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v152, (uint64_t *)&v154, v42, v43, v44, v45, v46, (uint64_t)&v149);
    v47 = v154;
    v48 = (_QWORD *)*((_QWORD *)this + 3479);
    *v154 = (char *)this + 27824;
    v47[1] = v48;
    *v48 = v47;
    *((_QWORD *)this + 3479) = v47;
  }
  v149 = (WTF *)v151;
  v150 = 2;
  v49 = *((_QWORD *)this + 3472);
  v50 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v51 = *((_QWORD *)this + 3471);
  v52 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v52 + 8) = -1;
  *(_WORD *)(v52 + 12) = 5;
  *(_DWORD *)(v52 + 16) = 4;
  *(_BYTE *)(v52 + 20) = 0;
  *(_QWORD *)(v52 + 24) = v51;
  *(_QWORD *)(v52 + 32) = 0;
  *(_QWORD *)v52 = off_1E357DC30;
  *(_QWORD *)(v52 + 40) = 0xC1DFFFFFFFC00000;
  JSC::B3::Procedure::addValueImpl(v50, (JSC::B3::Value *)v52);
  *(_QWORD *)&v152 = v52;
  v53 = (char **)(v49 + 8);
  v54 = *(unsigned int *)(v49 + 20);
  if ((_DWORD)v54 == *(_DWORD *)(v49 + 16))
  {
    v139 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v53, v54 + 1, (unint64_t)&v152);
    v54 = *(unsigned int *)(v49 + 20);
    *(_QWORD *)(*(_QWORD *)(v49 + 8) + 8 * v54) = *(_QWORD *)v139;
    v55 = v152;
  }
  else
  {
    *(_QWORD *)&(*v53)[8 * v54] = v52;
    v55 = v52;
  }
  *(_DWORD *)(v49 + 20) = v54 + 1;
  *(_QWORD *)(v55 + 32) = v49;
  v56 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(*((_QWORD *)this + 3472), *((_QWORD *)this + 3470), 56, *((_QWORD *)this + 3471), (uint64_t)a2, v52);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, v56, v6, (uint64_t)v28, NAN, NAN, v57, v58, v59, v60);
  *((_QWORD *)this + 3472) = v6;
  v147 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v17;
  v61 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v62 = *((_QWORD *)this + 3471);
  v63 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v63 + 8) = -1;
  *(_WORD *)(v63 + 12) = 5;
  *(_DWORD *)(v63 + 16) = 4;
  *(_BYTE *)(v63 + 20) = 0;
  *(_QWORD *)(v63 + 24) = v62;
  *(_QWORD *)(v63 + 32) = 0;
  *(_QWORD *)v63 = off_1E357DC30;
  *(_QWORD *)(v63 + 40) = 0x41DFFFFFFFC00000;
  JSC::B3::Procedure::addValueImpl(v61, (JSC::B3::Value *)v63);
  *(_QWORD *)&v152 = v63;
  v64 = (char **)(v6 + 8);
  v65 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v65 == *(_DWORD *)(v6 + 16))
  {
    v140 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v64, v65 + 1, (unint64_t)&v152);
    v65 = *(unsigned int *)(v6 + 20);
    *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v65) = *(_QWORD *)v140;
    v66 = v152;
  }
  else
  {
    *(_QWORD *)&(*v64)[8 * v65] = v63;
    v66 = v63;
  }
  *(_DWORD *)(v6 + 20) = v65 + 1;
  *(_QWORD *)(v66 + 32) = v6;
  v67 = *((_QWORD *)this + 3472);
  v68 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v69 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(55, *((_QWORD *)this + 3471), (uint64_t)a2, v63);
  JSC::B3::Procedure::addValueImpl(v68, v69);
  *(_QWORD *)&v152 = v69;
  v74 = (char **)(v67 + 8);
  v75 = *(unsigned int *)(v67 + 20);
  if ((_DWORD)v75 == *(_DWORD *)(v67 + 16))
  {
    v141 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v74, v75 + 1, (unint64_t)&v152);
    v75 = *(unsigned int *)(v67 + 20);
    *(_QWORD *)(*(_QWORD *)(v67 + 8) + 8 * v75) = *(_QWORD *)v141;
    v76 = (JSC::B3::Value *)v152;
  }
  else
  {
    *(_QWORD *)&(*v74)[8 * v75] = v69;
    v76 = v69;
  }
  *(_DWORD *)(v67 + 20) = v75 + 1;
  *((_QWORD *)v76 + 4) = v67;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v69, v17, (uint64_t)v28, NAN, NAN, v70, v71, v72, v73);
  *((_QWORD *)this + 3472) = v17;
  *((_QWORD *)this + 3473) = v28;
  v77 = JSC::FTL::Output::doubleToInt((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), a2);
  v78 = *((_QWORD *)this + 3472);
  v79 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v80 = *((_QWORD *)this + 3471);
  v81 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v81 + 8) = -1;
  *(_WORD *)(v81 + 12) = 152;
  *(_BYTE *)(v81 + 20) = 1;
  *(_QWORD *)v81 = &unk_1E357EDA0;
  *(_DWORD *)(v81 + 16) = 0;
  *(_QWORD *)(v81 + 40) = 0;
  *(_QWORD *)(v81 + 48) = v77;
  *(_QWORD *)(v81 + 24) = v80;
  *(_QWORD *)(v81 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v79, (JSC::B3::Value *)v81);
  *(_QWORD *)&v152 = v81;
  v87 = (char **)(v78 + 8);
  v88 = *(unsigned int *)(v78 + 20);
  if ((_DWORD)v88 == *(_DWORD *)(v78 + 16))
  {
    v142 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v87, v88 + 1, (unint64_t)&v152);
    v88 = *(unsigned int *)(v78 + 20);
    *(_QWORD *)(*(_QWORD *)(v78 + 8) + 8 * v88) = *(_QWORD *)v142;
    v89 = v152;
  }
  else
  {
    *(_QWORD *)&(*v87)[8 * v88] = v81;
    v89 = v81;
  }
  *(_DWORD *)(v78 + 20) = v88 + 1;
  *(_QWORD *)(v89 + 32) = v78;
  v90 = *((_QWORD *)this + 3472);
  *(_QWORD *)&v152 = v81;
  *((_QWORD *)&v152 + 1) = v90;
  v91 = HIDWORD(v150);
  if (HIDWORD(v150) == (_DWORD)v150)
  {
    v145 = (__int128 *)WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v149, (void *)(HIDWORD(v150) + 1), (unint64_t)&v152, v82, v83, v84, v85, v86);
    v91 = HIDWORD(v150);
    v92 = v149;
    v93 = *v145;
  }
  else
  {
    v92 = v149;
    v93 = v152;
  }
  *((_OWORD *)v92 + v91) = v93;
  ++HIDWORD(v150);
  v94 = *((_QWORD *)this + 3472);
  v95 = *((_QWORD *)this + 3470);
  v96 = *((_QWORD *)this + 3471);
  *(_QWORD *)&v152 = v39;
  BYTE8(v152) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v94, v95, 154, v96, (uint64_t *)&v152, v84, v85, v86);
  *((_QWORD *)this + 3472) = v28;
  *((_QWORD *)this + 3473) = v39;
  v97 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v98 = *((_QWORD *)this + 3471);
  v153 = 0;
  v152 = 0uLL;
  v99 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)operationToInt32);
  v100 = JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value *,JSC::B3::Value *>(v28, v97, 2, v98, &v152, v99, (uint64_t)a2);
  v101 = JSC::FTL::Output::castToInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v100);
  v102 = *((_QWORD *)this + 3472);
  v103 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v104 = *((_QWORD *)this + 3471);
  v105 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v105 + 8) = -1;
  *(_WORD *)(v105 + 12) = 152;
  *(_DWORD *)(v105 + 16) = 0;
  *(_BYTE *)(v105 + 20) = 1;
  *(_QWORD *)v105 = &unk_1E357EDA0;
  *(_QWORD *)(v105 + 40) = 0;
  *(_QWORD *)(v105 + 48) = v101;
  *(_QWORD *)(v105 + 24) = v104;
  *(_QWORD *)(v105 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v103, (JSC::B3::Value *)v105);
  *(_QWORD *)&v152 = v105;
  v111 = (char **)(v102 + 8);
  v112 = *(unsigned int *)(v102 + 20);
  if ((_DWORD)v112 == *(_DWORD *)(v102 + 16))
  {
    v143 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v111, v112 + 1, (unint64_t)&v152);
    v112 = *(unsigned int *)(v102 + 20);
    *(_QWORD *)(*(_QWORD *)(v102 + 8) + 8 * v112) = *(_QWORD *)v143;
    v113 = v152;
  }
  else
  {
    *(_QWORD *)&(*v111)[8 * v112] = v105;
    v113 = v105;
  }
  *(_DWORD *)(v102 + 20) = v112 + 1;
  *(_QWORD *)(v113 + 32) = v102;
  v114 = *((_QWORD *)this + 3472);
  *(_QWORD *)&v152 = v105;
  *((_QWORD *)&v152 + 1) = v114;
  v115 = HIDWORD(v150);
  if (HIDWORD(v150) == (_DWORD)v150)
  {
    v146 = (__int128 *)WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v149, (void *)(HIDWORD(v150) + 1), (unint64_t)&v152, v106, v107, v108, v109, v110);
    v115 = HIDWORD(v150);
    v116 = v149;
    v117 = *v146;
  }
  else
  {
    v116 = v149;
    v117 = v152;
  }
  *((_OWORD *)v116 + v115) = v117;
  ++HIDWORD(v150);
  v118 = *((_QWORD *)this + 3472);
  v119 = *((_QWORD *)this + 3470);
  v120 = *((_QWORD *)this + 3471);
  *(_QWORD *)&v152 = v39;
  BYTE8(v152) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v118, v119, 154, v120, (uint64_t *)&v152, v108, v109, v110);
  *((_QWORD *)this + 3472) = v39;
  *((_QWORD *)this + 3473) = v147;
  v121 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v122 = *((_QWORD *)this + 3471);
  v123 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v123 = off_1E357F5F0;
  *(_DWORD *)(v123 + 8) = -1;
  *(_WORD *)(v123 + 12) = 153;
  *(_DWORD *)(v123 + 16) = 1;
  *(_BYTE *)(v123 + 20) = 0;
  *(_QWORD *)(v123 + 24) = v122;
  *(_QWORD *)(v123 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v121, (JSC::B3::Value *)v123);
  *(_QWORD *)&v152 = v123;
  v131 = (char **)(v39 + 8);
  v132 = *(unsigned int *)(v39 + 20);
  if ((_DWORD)v132 == *(_DWORD *)(v39 + 16))
  {
    v144 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v131, v132 + 1, (unint64_t)&v152);
    v132 = *(unsigned int *)(v39 + 20);
    *(_QWORD *)(*(_QWORD *)(v39 + 8) + 8 * v132) = *(_QWORD *)v144;
    v133 = v152;
  }
  else
  {
    *(_QWORD *)&(*v131)[8 * v132] = v123;
    v133 = v123;
  }
  *(_DWORD *)(v39 + 20) = v132 + 1;
  *(_QWORD *)(v133 + 32) = v39;
  v134 = v149;
  if (HIDWORD(v150))
  {
    v135 = 16 * HIDWORD(v150);
    v136 = (_QWORD *)((char *)v149 + 8);
    do
    {
      v137 = *(v136 - 1);
      if (v137 || *v136)
      {
        if ((*(_WORD *)(v137 + 12) & 0xFFF) != 0x98)
          v137 = 0;
        *(_QWORD *)(v137 + 40) = v123;
      }
      v136 += 2;
      v135 -= 16;
    }
    while (v135);
  }
  if (v151 != (_BYTE *)v134 && v134)
  {
    v149 = 0;
    LODWORD(v150) = 0;
    WTF::fastFree((unint64_t)v134, v124, v125, v126, v127, v128, v129, v130);
  }
  return v123;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::doubleToInt32(JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  char v10;
  char v11;
  unsigned int v12;

  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(char **)(a3 + 8);
    v10 = v9[16];
    v11 = *v9;
    v12 = a2[50];
    if (v12 + 4 > a2[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v12 = a2[50];
    }
    *(_DWORD *)(*((_QWORD *)a2 + 7) + v12) = (32 * (v10 & 0x7F) - 1024) | v11 & 0x7F | 0x1E7E0000;
    a2[50] += 4;
  }
}

JSC::B3::Value *JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value *,JSC::B3::Value *>(JSC::B3::BasicBlock *a1, JSC::B3::Value *a2, int a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  JSC::B3::Value *v8;
  __int128 v10;
  uint64_t v11;

  v10 = *a5;
  v11 = *((_QWORD *)a5 + 2);
  v8 = JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value *,JSC::B3::Value *>(a2, a3, a4, (uint64_t)&v10, a6, a7);
  JSC::B3::BasicBlock::append(a1, v8);
  return v8;
}

JSC::B3::Value *JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value *,JSC::B3::Value *>(JSC::B3::Value *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  JSC::B3::Value *v7;
  __int128 v9;
  uint64_t v10;

  v9 = *(_OWORD *)a4;
  v10 = *(_QWORD *)(a4 + 16);
  v7 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value*,JSC::B3::Value*>(a2, a3, &v9, a5, a6);
  JSC::B3::Procedure::addValueImpl(a1, v7);
  return v7;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value*,JSC::B3::Value*>(int a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = WTF::fastMalloc((WTF *)0x68);
  return JSC::B3::CCallValue::CCallValue<JSC::B3::Value *,JSC::B3::Value *>(v10, a1, a2, a3, a4, a5);
}

uint64_t JSC::B3::CCallValue::CCallValue<JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, int a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  __int128 v8;
  uint64_t result;

  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = 82;
  *(_DWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 20) = 4;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)a1, 4, a5, a6);
  *(_QWORD *)a1 = &unk_1E357CF78;
  v8 = *a4;
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 40) = v8;
  if (*(_DWORD *)(a1 + 76))
    return a1;
  result = 68;
  __break(0xC471u);
  return result;
}

uint64_t *JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>(uint64_t *result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v8;
  uint64_t v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  if (a2 == 4)
  {
    v8 = (uint64_t *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)result);
    v9[0] = a3;
    v9[1] = a4;
    return WTF::Vector<JSC::B3::Value *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v8, v9, 2uLL);
  }
  else
  {
    v4 = 5;
    switch(*((_BYTE *)result + 12))
    {
      case 0:
      case 1:
      case 2:
      case 8:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x4F:
      case 0x99:
      case 0x9A:
      case 0x9B:
      case 0x9D:
      case 0x9E:
      case 0x9F:
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x50:
      case 0x54:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
        v4 = 6;
        break;
      case 7:
      case 0x51:
      case 0x59:
      case 0x9C:
        v4 = 7;
        break;
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x52:
        v4 = 8;
        break;
      case 0x53:
        v4 = 22;
        break;
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
        v4 = 14;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197D6703CLL);
    }
    v5 = &result[v4];
    *v5 = a3;
    v5[1] = a4;
  }
  return result;
}

uint64_t *WTF::Vector<JSC::B3::Value *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  int v3;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a3;
  v5 = result;
  *result = (uint64_t)(result + 2);
  result[1] = 3;
  v6 = 8 * a3;
  if (a3 < 4)
  {
    if (!a3)
      return v5;
    v7 = 0;
    do
    {
LABEL_6:
      v9 = *a2++;
      *(_QWORD *)(*v5 + 8 * v7++) = v9;
      v6 -= 8;
    }
    while (v6);
    *((_DWORD *)v5 + 3) = v7;
    return v5;
  }
  if (!(a3 >> 29))
  {
    v8 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v5 + 2) = v3;
    *v5 = v8;
    v7 = *((_DWORD *)v5 + 3);
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isCell(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, uint64_t a3)
{
  JSC::B3::Value *v4;
  uint64_t v5;
  JSC::B3::Value *v6;
  JSC::B3::Value *v7;
  char **v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  char *v12;
  uint64_t v13;
  JSC::B3::Value *v14;

  if ((a3 & 0xFFFFD3FF00000008) == 0)
  {
    v13 = 27640;
    goto LABEL_10;
  }
  if ((a3 & 0x2C00FFFFFFF7) == 0)
  {
    v13 = 27648;
LABEL_10:
    v7 = *(JSC::B3::Value **)((char *)this + v13);
    if (v7)
      return v7;
  }
  v4 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), a2, *((JSC::B3::Value **)this + 3488));
  v5 = *((_QWORD *)this + 3472);
  v6 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v7 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), (uint64_t)v4, *((_QWORD *)this + 3459));
  JSC::B3::Procedure::addValueImpl(v6, v7);
  v14 = v7;
  v8 = (char **)(v5 + 8);
  v9 = *(unsigned int *)(v5 + 20);
  if ((_DWORD)v9 == *(_DWORD *)(v5 + 16))
  {
    v12 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v9 + 1, (unint64_t)&v14);
    v9 = *(unsigned int *)(v5 + 20);
    *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v9) = *(_QWORD *)v12;
    v10 = v14;
  }
  else
  {
    *(_QWORD *)&(*v8)[8 * v9] = v7;
    v10 = v7;
  }
  *(_DWORD *)(v5 + 20) = v9 + 1;
  *((_QWORD *)v10 + 4) = v5;
  return v7;
}

__n128 WTF::Vector<JSC::FTL::ValueFromBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<JSC::FTL::ValueFromBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

uint64_t WTF::Vector<JSC::FTL::ValueFromBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::FTL::ValueFromBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 16 * v10;
      v20 = (__int128 *)v5;
      do
      {
        v21 = *v20++;
        *v11++ = v21;
        v19 -= 16;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::FTL::ValueFromBlock,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = 16 * v8;
        v18 = (__int128 *)v7;
        do
        {
          v19 = *v18++;
          *v9++ = v19;
          v17 -= 16;
        }
        while (v17);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isBoolean(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, uint64_t a3)
{
  JSC::B3::Value *v5;
  JSC::B3::Value *v6;
  JSC::B3::Value *v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  uint64_t v10;
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;
  char **v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  char *v17;
  uint64_t v18;
  JSC::B3::Value *v19;

  if ((a3 & 0xFFFFFEFFFFFFFFFFLL) == 0)
  {
    v18 = 27640;
    goto LABEL_10;
  }
  if ((a3 & 0x10000000000) == 0)
  {
    v18 = 27648;
LABEL_10:
    v12 = *(JSC::B3::Value **)((char *)this + v18);
    if (v12)
      return v12;
  }
  v5 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 6);
  v6 = JSC::FTL::Output::bitXor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), a2, v5);
  v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), -2);
  v8 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v6, v7);
  v9 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v8);
  v10 = *((_QWORD *)this + 3472);
  v11 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v12 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), (uint64_t)v9, *((_QWORD *)this + 3457));
  JSC::B3::Procedure::addValueImpl(v11, v12);
  v19 = v12;
  v13 = (char **)(v10 + 8);
  v14 = *(unsigned int *)(v10 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v10 + 16))
  {
    v17 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v19);
    v14 = *(unsigned int *)(v10 + 20);
    *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8 * v14) = *(_QWORD *)v17;
    v15 = v19;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v12;
    v15 = v12;
  }
  *(_DWORD *)(v10 + 20) = v14 + 1;
  *((_QWORD *)v15 + 4) = v10;
  return v12;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculate(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  char **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  unint64_t v29;
  JSC::B3::Value *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::B3::Value *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  JSC::B3::Value *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  JSC::B3::Value *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  JSC::B3::Value *v61;
  uint64_t v62;
  JSC::B3::Value *v63;
  char **v64;
  uint64_t v65;
  uint64_t v66;
  int8x8_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  JSC::B3::Value *v82;
  char **v83;
  uint64_t v84;
  uint64_t v85;
  JSC::B3::Value *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  JSC::B3::Value **v107;
  JSC::B3::Value *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  void *v122;
  JSC::B3::Value *v123;
  JSC::B3::Value *v124;
  uint64_t v125;
  uint64_t v126;
  int8x8_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  JSC::B3::Value **v133;
  uint64_t v134;
  JSC::B3::Value *v135;
  JSC::B3::Value *v136;
  uint64_t v137;
  JSC::B3::Value *v138;
  JSC::B3::Value *v139;
  char **v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  void *v154;
  JSC::B3::Value *v155;
  uint64_t v156;
  uint64_t v157;
  int8x8_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  _QWORD *v193;
  uint64_t v194;

  switch((a2 >> 50) & 0x3F)
  {
    case 0uLL:
    case 2uLL:
    case 7uLL:
    case 9uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x2EuLL:
    case 0x31uLL:
    case 0x34uLL:
      return;
    case 1uLL:
      return;
    case 3uLL:
      return;
    case 4uLL:
      v55 = *(_QWORD *)(a1 + 28152);
      v56 = *(_QWORD *)(v55 + 8);
      v57 = (_QWORD *)(v56 + 24);
      v58 = (_QWORD *)(v56 + 8);
      if ((a2 & 1) != 0)
        v58 = v57;
      v59 = *v58 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v60 = (void *)*(unsigned int *)(v55 + 88);
      if ((_DWORD)v60 != *(_DWORD *)(v59 + 20))
      {
        if ((*(_QWORD *)(v59 + 8) & 0x2800FFFFFFF7) != 0)
          JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v59, v60, v48, v49, v50, v51, v52, v53);
        else
          *(_DWORD *)(v59 + 20) = (_DWORD)v60;
      }
      if ((*(_QWORD *)(v59 + 8) & 0xFFFFFF8CFFFFFFFFLL) == 0)
        return;
      v61 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v54, *(JSC::B3::Value **)(a1 + 27896));
      v62 = *(_QWORD *)(a1 + 27776);
      v63 = *(JSC::B3::Value **)(a1 + 27760);
      v21 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v61, *(_QWORD *)(a1 + 27672));
      JSC::B3::Procedure::addValueImpl(v63, v21);
      v191 = (uint64_t)v21;
      v64 = (char **)(v62 + 8);
      v65 = *(unsigned int *)(v62 + 20);
      if ((_DWORD)v65 == *(_DWORD *)(v62 + 16))
      {
        v163 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v64, v65 + 1, (unint64_t)&v191);
        v65 = *(unsigned int *)(v62 + 20);
        *(_QWORD *)(*(_QWORD *)(v62 + 8) + 8 * v65) = *(_QWORD *)v163;
        v66 = v191;
      }
      else
      {
        *(_QWORD *)&(*v64)[8 * v65] = v21;
        v66 = (uint64_t)v21;
      }
      *(_DWORD *)(v62 + 20) = v65 + 1;
      *(_QWORD *)(v66 + 32) = v62;
      v25 = a1;
      v26 = 16;
      v27 = v54;
      v28 = a2;
      v29 = 0x7300000000;
      goto LABEL_9;
    case 5uLL:
      return;
    case 6uLL:
      return;
    case 8uLL:
      return;
    case 0xAuLL:
      return;
    case 0xBuLL:
      return;
    case 0xCuLL:
      return;
    case 0xDuLL:
      return;
    case 0xEuLL:
      return;
    case 0xFuLL:
      return;
    case 0x10uLL:
      return;
    case 0x11uLL:
      return;
    case 0x12uLL:
      return;
    case 0x13uLL:
      return;
    case 0x14uLL:
      return;
    case 0x15uLL:
      return;
    case 0x16uLL:
      return;
    case 0x19uLL:
      return;
    case 0x1BuLL:
      return;
    case 0x1DuLL:
      return;
    case 0x1EuLL:
      return;
    case 0x1FuLL:
      return;
    case 0x22uLL:
      return;
    case 0x23uLL:
      return;
    case 0x24uLL:
      return;
    case 0x25uLL:
      return;
    case 0x26uLL:
      return;
    case 0x27uLL:
      return;
    case 0x28uLL:
      return;
    case 0x29uLL:
    case 0x2AuLL:
      return;
    case 0x2BuLL:
      return;
    case 0x2CuLL:
      return;
    case 0x2DuLL:
      if (!JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(a1 + 28128, a2, a3, a4, a5, a6, a7, a8))return;
      v87 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
      v88 = v87;
      v89 = *(_QWORD *)(a1 + 27784);
      if (v89)
      {
        WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v89, v87);
      }
      else
      {
        v194 = v87;
        v165 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *(_OWORD *)v165 = 0u;
        *((_OWORD *)v165 + 1) = 0u;
        v165[3] = *(_QWORD *)(a1 + 27816);
        *(_QWORD *)(a1 + 27816) = v165;
        v193 = v165;
        v165[2] = v88;
        WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), &v194, (uint64_t *)&v193, v166, v167, v168, v169, v170, (uint64_t)&v191);
        v171 = v193;
        v172 = *(_QWORD **)(a1 + 27832);
        *v193 = a1 + 27824;
        v171[1] = v172;
        *v172 = v171;
        *(_QWORD *)(a1 + 27832) = v171;
      }
      v90 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
      v91 = v90;
      v92 = *(_QWORD *)(a1 + 27784);
      if (v92)
      {
        WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v92, v90);
      }
      else
      {
        v194 = v90;
        v173 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *(_OWORD *)v173 = 0u;
        *((_OWORD *)v173 + 1) = 0u;
        v173[3] = *(_QWORD *)(a1 + 27816);
        *(_QWORD *)(a1 + 27816) = v173;
        v193 = v173;
        v173[2] = v91;
        WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), &v194, (uint64_t *)&v193, v174, v175, v176, v177, v178, (uint64_t)&v191);
        v179 = v193;
        v180 = *(_QWORD **)(a1 + 27832);
        *v193 = a1 + 27824;
        v179[1] = v180;
        *v180 = v179;
        *(_QWORD *)(a1 + 27832) = v179;
      }
      v93 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
      v94 = v93;
      v95 = *(_QWORD *)(a1 + 27784);
      if (v95)
      {
        WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v95, v93);
      }
      else
      {
        v194 = v93;
        v181 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *(_OWORD *)v181 = 0u;
        *((_OWORD *)v181 + 1) = 0u;
        v181[3] = *(_QWORD *)(a1 + 27816);
        *(_QWORD *)(a1 + 27816) = v181;
        v193 = v181;
        v181[2] = v94;
        WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), &v194, (uint64_t *)&v193, v182, v183, v184, v185, v186, (uint64_t)&v191);
        v187 = v193;
        v188 = *(_QWORD **)(a1 + 27832);
        *v193 = a1 + 27824;
        v187[1] = v188;
        *v188 = v187;
        *(_QWORD *)(a1 + 27832) = v187;
      }
      v107 = (JSC::B3::Value **)(a1 + 27640);
      if ((v102 & 0xFFFFFFFCFFFFFFFFLL) == 0)
        goto LABEL_90;
      if ((v102 & 0x300000000) != 0)
        goto LABEL_41;
      v107 = (JSC::B3::Value **)(a1 + 27648);
LABEL_90:
      v108 = *v107;
      if (!*v107)
LABEL_41:
        v108 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::Output *)(a1 + 27640), v86, *(JSC::B3::Value **)(a1 + 27896));
      JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v108, v94, v88, NAN, NAN, v103, v104, v105, v106);
      *(_QWORD *)(a1 + 27776) = v88;
      v115 = *(_QWORD *)(a1 + 27784);
      *(_QWORD *)(a1 + 27784) = v91;
      v116 = *(_QWORD *)(a1 + 28152);
      v117 = *(_QWORD *)(v116 + 8);
      v118 = a2 & 0xFF00FFFFFFFFFFFELL;
      v119 = (_QWORD *)(v117 + 24);
      v120 = (_QWORD *)(v117 + 8);
      if ((a2 & 1) != 0)
        v120 = v119;
      v121 = *v120 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v122 = (void *)*(unsigned int *)(v116 + 88);
      if ((_DWORD)v122 != *(_DWORD *)(v121 + 20))
      {
        if ((*(_QWORD *)(v121 + 8) & 0x2800FFFFFFF7) != 0)
          JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v121, v122, v109, v110, v111, v112, v113, v114);
        else
          *(_DWORD *)(v121 + 20) = (_DWORD)v122;
      }
      if ((*(_BYTE *)(v121 + 12) & 0xF0) != 0)
      {
        v123 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v86, *(JSC::B3::Value **)(a1 + 27896));
        v124 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), v123);
      }
      v133 = (JSC::B3::Value **)(a1 + 27640);
      if ((v128 & 0xFFFFD3FF00000008) == 0)
        goto LABEL_93;
      if ((v128 & 0x2C00FFFFFFF7) != 0)
        goto LABEL_49;
      v133 = (JSC::B3::Value **)(a1 + 27648);
LABEL_93:
      v139 = *v133;
      if (!*v133)
      {
LABEL_49:
        v134 = v115;
        v135 = v86;
        v136 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v86, *(JSC::B3::Value **)(a1 + 27904));
        v137 = *(_QWORD *)(a1 + 27776);
        v138 = *(JSC::B3::Value **)(a1 + 27760);
        v139 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v136, *(_QWORD *)(a1 + 27672));
        JSC::B3::Procedure::addValueImpl(v138, v139);
        v191 = (uint64_t)v139;
        v140 = (char **)(v137 + 8);
        v141 = *(unsigned int *)(v137 + 20);
        if ((_DWORD)v141 == *(_DWORD *)(v137 + 16))
        {
          v189 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v140, v141 + 1, (unint64_t)&v191);
          v141 = *(unsigned int *)(v137 + 20);
          *(_QWORD *)(*(_QWORD *)(v137 + 8) + 8 * v141) = *(_QWORD *)v189;
          v142 = v191;
        }
        else
        {
          *(_QWORD *)&(*v140)[8 * v141] = v139;
          v142 = (uint64_t)v139;
        }
        *(_DWORD *)(v137 + 20) = v141 + 1;
        *(_QWORD *)(v142 + 32) = v137;
        v115 = v134;
        v86 = v135;
        v118 = a2 & 0xFF00FFFFFFFFFFFELL;
      }
      JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v139, v91, v94, NAN, NAN, v129, v130, v131, v132);
      *(_QWORD *)(a1 + 27776) = v91;
      *(_QWORD *)(a1 + 27784) = v94;
      v149 = *(_QWORD *)(a1 + 28152);
      v150 = *(_QWORD *)(v149 + 8);
      v151 = (_QWORD *)(v150 + 24);
      v152 = (_QWORD *)(v150 + 8);
      if ((a2 & 1) != 0)
        v152 = v151;
      v153 = *v152 + 32 * *(unsigned int *)(v118 + 20);
      v154 = (void *)*(unsigned int *)(v149 + 88);
      if ((_DWORD)v154 != *(_DWORD *)(v153 + 20))
      {
        if ((*(_QWORD *)(v153 + 8) & 0x2800FFFFFFF7) != 0)
          JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v153, v154, v143, v144, v145, v146, v147, v148);
        else
          *(_DWORD *)(v153 + 20) = (_DWORD)v154;
      }
      if ((*(_QWORD *)(v153 + 8) & 0x80030000000) != 0)
      {
      }
      v159 = *(_QWORD *)(a1 + 27776);
      v160 = *(_QWORD *)(a1 + 27760);
      v161 = *(_QWORD *)(a1 + 27768);
      v191 = v94;
      v192 = 0;
      JSC::B3::BasicBlock::appendNewControlValue(v159, v160, 154, v161, &v191, v146, v147, v148);
      *(_QWORD *)(a1 + 27776) = v94;
      *(_QWORD *)(a1 + 27784) = v115;
      return;
    case 0x2FuLL:
      if (!JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(a1 + 28128, a2, a3, a4, a5, a6, a7, a8))return;
      v12 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), -9);
      v13 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v11, v12);
      v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), 2);
      v15 = (*(uint64_t (**)(JSC::B3::Value *, uint64_t))(*(_QWORD *)v13 + 312))(v13, v14);
      if (v15 == 2)
      {
        v19 = *(_QWORD *)(a1 + 27776);
        v20 = *(JSC::B3::Value **)(a1 + 27760);
        v21 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(a1 + 27768), (uint64_t)v13, v14);
        JSC::B3::Procedure::addValueImpl(v20, v21);
        v191 = (uint64_t)v21;
        v22 = (char **)(v19 + 8);
        v23 = *(unsigned int *)(v19 + 20);
        if ((_DWORD)v23 == *(_DWORD *)(v19 + 16))
        {
          v162 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22, v23 + 1, (unint64_t)&v191);
          v23 = *(unsigned int *)(v19 + 20);
          *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8 * v23) = *(_QWORD *)v162;
          v24 = v191;
        }
        else
        {
          *(_QWORD *)&(*v22)[8 * v23] = v21;
          v24 = (uint64_t)v21;
        }
        *(_DWORD *)(v19 + 20) = v23 + 1;
        *(_QWORD *)(v24 + 32) = v19;
      }
      else
      {
        v190 = 27648;
        if (v15 == 1)
          v190 = 27640;
        v21 = *(JSC::B3::Value **)(a1 + v190);
      }
      v25 = a1;
      v26 = 16;
      v27 = v11;
      v28 = a2;
      v29 = 0x20000000000;
      goto LABEL_9;
    case 0x30uLL:
      return;
    case 0x32uLL:
      if (!JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(a1 + 28128, a2, a3, a4, a5, a6, a7, a8))return;
      v75 = *(_QWORD *)(a1 + 28152);
      v76 = *(_QWORD *)(v75 + 8);
      v77 = (_QWORD *)(v76 + 24);
      v78 = (_QWORD *)(v76 + 8);
      if ((a2 & 1) != 0)
        v78 = v77;
      v79 = *v78 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v80 = (void *)*(unsigned int *)(v75 + 88);
      if ((_DWORD)v80 != *(_DWORD *)(v79 + 20))
      {
        if ((*(_QWORD *)(v79 + 8) & 0x2800FFFFFFF7) != 0)
          JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v79, v80, v68, v69, v70, v71, v72, v73);
        else
          *(_DWORD *)(v79 + 20) = (_DWORD)v80;
      }
      if ((*(_QWORD *)(v79 + 8) & 0xFFFFFFCFFFFFFFFFLL) == 0)
        return;
      v81 = *(_QWORD *)(a1 + 27776);
      v82 = *(JSC::B3::Value **)(a1 + 27760);
      v21 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(a1 + 27768), v74, v74);
      JSC::B3::Procedure::addValueImpl(v82, v21);
      v191 = (uint64_t)v21;
      v83 = (char **)(v81 + 8);
      v84 = *(unsigned int *)(v81 + 20);
      if ((_DWORD)v84 == *(_DWORD *)(v81 + 16))
      {
        v164 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v83, v84 + 1, (unint64_t)&v191);
        v84 = *(unsigned int *)(v81 + 20);
        *(_QWORD *)(*(_QWORD *)(v81 + 8) + 8 * v84) = *(_QWORD *)v164;
        v85 = v191;
      }
      else
      {
        *(_QWORD *)&(*v83)[8 * v84] = v21;
        v85 = (uint64_t)v21;
      }
      *(_DWORD *)(v81 + 20) = v84 + 1;
      *(_QWORD *)(v85 + 32) = v81;
      v25 = a1;
      v26 = 4;
      v27 = (WTF *)v74;
      v28 = a2;
      v29 = 0x3000000000;
LABEL_9:
      return;
    case 0x33uLL:
      return;
    default:
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x5442, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::speculate(Edge)", "Unsupported speculation use kind");
      __break(0xC471u);
      JUMPOUT(0x197D684DCLL);
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateCellOrOther(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  JSC::B3::Value *v5;
  uint64_t v6;
  JSC::B3::BasicBlock *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  uint64_t v34;
  int8x8_t v35;

  v2 = (a2 >> 50) & 0x3F;
  if ((_DWORD)v2)
  {
    v4 = (_QWORD *)result;
    if (v2 > 0x34 || ((1 << v2) & 0x12400001800284) == 0)
    {
      v6 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(v4 + 3455));
      v7 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(v4 + 3455));
      JSC::FTL::Output::branch(v4 + 3455, (uint64_t)v15, (uint64_t)v7, v6, NAN, NAN, v16, v17, v18, v19);
      v4[3472] = v6;
      v20 = v4[3473];
      v4[3473] = v7;
      if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(v4[3519], a2, 0x2E00FFFFFFF7, v21, v22, v23, v24, v25))
      {
      }
      result = JSC::FTL::Output::jump((JSC::FTL::Output *)(v4 + 3455), v7, v26, v27, v28, v29, v30, v31);
      v4[3472] = v7;
      v4[3473] = v20;
    }
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateAnyInt(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  JSC::B3::Value *v11;

  result = JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(a1 + 28128, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
  }
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateArray(uint64_t a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateFunction(_QWORD *a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateObjectOrOther(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::BasicBlock *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::B3::Value *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  uint64_t v40;
  uint64_t v41;
  int8x8_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  JSC::B3::Value *v54;
  uint64_t v55;
  uint64_t v56;
  int8x8_t v57;

  result = JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(a1 + 28128, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v12 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    v13 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    v14 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v22, v13, v12, NAN, NAN, v23, v24, v25, v26);
    *(_QWORD *)(a1 + 27776) = v12;
    v27 = *(_QWORD *)(a1 + 27784);
    *(_QWORD *)(a1 + 27784) = v13;
    if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, 0xFFFFF3FF0FFFFFFFLL, v28, v29, v30, v31, v32))
    {
    }
    JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v14, v33, v34, v35, v36, v37, v38);
    *(_QWORD *)(a1 + 27776) = v13;
    *(_QWORD *)(a1 + 27784) = v14;
    if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, 0x2E00FFFFFFF7, v43, v44, v45, v46, v47))
    {
    }
    result = JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v14, v48, v49, v50, v51, v52, v53);
    *(_QWORD *)(a1 + 27776) = v14;
    *(_QWORD *)(a1 + 27784) = v27;
  }
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateRegExpObject(uint64_t a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculatePromiseObject(_QWORD *a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  JSC::B3::Value *v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  JSC::B3::Value *v32;
  JSC::B3::Value *v33;
  uint64_t v34;
  JSC::B3::Value *v35;
  JSC::B3::Value *v36;
  uint64_t v37;
  uint64_t v38;
  int8x8_t v39;
  char **v40;
  uint64_t v41;
  JSC::B3::Value *v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  JSC::B3::Value *v52;

  v19 = a1[3519];
  v20 = *(_QWORD *)(v19 + 8);
  v21 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v22 = (uint64_t *)(v20 + 24);
  v23 = (uint64_t *)(v20 + 8);
  if ((a2 & 1) != 0)
    v23 = v22;
  v24 = *v23;
  v25 = *v23 + 32 * v21;
  v26 = *(_DWORD *)(v19 + 88);
  v27 = *(_DWORD *)(v25 + 20);
  if (v26 != v27)
  {
    if ((*(_QWORD *)(v25 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v27 ^ v26) >= 2)
      {
        v43 = *(_QWORD *)v25;
        if (*(_QWORD *)v25 != 4)
        {
          *(_QWORD *)v25 = v43 | 2;
          v44 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v43 & 1) != 0)
          {
            v48 = 2 * *v44;
            while (v48 * 4)
            {
              v49 = *(_QWORD *)&v44[v48];
              if ((*(_BYTE *)(v49 + 19) & 0xC) == 0)
              {
                v50 = *(_QWORD *)(v49 + 96);
                v51 = (v50 & 1) != 0 ? (v50 >> 1) & 3 : *(unsigned __int8 *)(v50 + 4);
                v48 -= 2;
                if (v51 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v44, v11, v12, v13, v14, v15, v16, v17);
              goto LABEL_35;
            }
          }
          else if (v44)
          {
            if ((*((_BYTE *)v44 + 19) & 0xC) != 0
              || ((v45 = *((_QWORD *)v44 + 12), (v45 & 1) != 0)
                ? (v46 = (v45 >> 1) & 3)
                : (v46 = *(unsigned __int8 *)(v45 + 4)),
                  v46 == 2))
            {
LABEL_35:
              *(_QWORD *)v25 = 4;
            }
          }
        }
        *(_DWORD *)(v24 + 32 * v21 + 16) = -21020677;
      }
      if ((v26 & 1) != 0)
        *(_QWORD *)v25 &= ~2uLL;
    }
    *(_DWORD *)(v25 + 20) = v26;
  }
  if ((*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFEFFFFFLL) != 0)
  {
    v28 = a1[395];
    if (v28)
    {
      v29 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v28);
      v30 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), v18, v29);
    }
    else
    {
      v30 = (uint64_t)v18;
    }
    v31 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(a1 + 3455, (uint64_t)(a1 + 392), v30);
    v32 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), 68);
    v33 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 3455), v31, v32);
    v34 = a1[3472];
    v35 = (JSC::B3::Value *)a1[3470];
    v36 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, a1[3471], (uint64_t)v33, a1[3457]);
    JSC::B3::Procedure::addValueImpl(v35, v36);
    v52 = v36;
    v40 = (char **)(v34 + 8);
    v41 = *(unsigned int *)(v34 + 20);
    if ((_DWORD)v41 == *(_DWORD *)(v34 + 16))
    {
      v47 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v40, v41 + 1, (unint64_t)&v52);
      v41 = *(unsigned int *)(v34 + 20);
      *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v41) = *(_QWORD *)v47;
      v42 = v52;
    }
    else
    {
      *(_QWORD *)&(*v40)[8 * v41] = v36;
      v42 = v36;
    }
    *(_DWORD *)(v34 + 20) = v41 + 1;
    *((_QWORD *)v42 + 4) = v34;
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateProxyObject(_QWORD *a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  JSC::B3::Value *v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  JSC::B3::Value *v32;
  JSC::B3::Value *v33;
  uint64_t v34;
  JSC::B3::Value *v35;
  JSC::B3::Value *v36;
  uint64_t v37;
  uint64_t v38;
  int8x8_t v39;
  char **v40;
  uint64_t v41;
  JSC::B3::Value *v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  JSC::B3::Value *v52;

  v19 = a1[3519];
  v20 = *(_QWORD *)(v19 + 8);
  v21 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v22 = (uint64_t *)(v20 + 24);
  v23 = (uint64_t *)(v20 + 8);
  if ((a2 & 1) != 0)
    v23 = v22;
  v24 = *v23;
  v25 = *v23 + 32 * v21;
  v26 = *(_DWORD *)(v19 + 88);
  v27 = *(_DWORD *)(v25 + 20);
  if (v26 != v27)
  {
    if ((*(_QWORD *)(v25 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v27 ^ v26) >= 2)
      {
        v43 = *(_QWORD *)v25;
        if (*(_QWORD *)v25 != 4)
        {
          *(_QWORD *)v25 = v43 | 2;
          v44 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v43 & 1) != 0)
          {
            v48 = 2 * *v44;
            while (v48 * 4)
            {
              v49 = *(_QWORD *)&v44[v48];
              if ((*(_BYTE *)(v49 + 19) & 0xC) == 0)
              {
                v50 = *(_QWORD *)(v49 + 96);
                v51 = (v50 & 1) != 0 ? (v50 >> 1) & 3 : *(unsigned __int8 *)(v50 + 4);
                v48 -= 2;
                if (v51 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v44, v11, v12, v13, v14, v15, v16, v17);
              goto LABEL_35;
            }
          }
          else if (v44)
          {
            if ((*((_BYTE *)v44 + 19) & 0xC) != 0
              || ((v45 = *((_QWORD *)v44 + 12), (v45 & 1) != 0)
                ? (v46 = (v45 >> 1) & 3)
                : (v46 = *(unsigned __int8 *)(v45 + 4)),
                  v46 == 2))
            {
LABEL_35:
              *(_QWORD *)v25 = 4;
            }
          }
        }
        *(_DWORD *)(v24 + 32 * v21 + 16) = -21020677;
      }
      if ((v26 & 1) != 0)
        *(_QWORD *)v25 &= ~2uLL;
    }
    *(_DWORD *)(v25 + 20) = v26;
  }
  if ((*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFDFFFFFFLL) != 0)
  {
    v28 = a1[395];
    if (v28)
    {
      v29 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v28);
      v30 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), v18, v29);
    }
    else
    {
      v30 = (uint64_t)v18;
    }
    v31 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(a1 + 3455, (uint64_t)(a1 + 392), v30);
    v32 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), 61);
    v33 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 3455), v31, v32);
    v34 = a1[3472];
    v35 = (JSC::B3::Value *)a1[3470];
    v36 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, a1[3471], (uint64_t)v33, a1[3457]);
    JSC::B3::Procedure::addValueImpl(v35, v36);
    v52 = v36;
    v40 = (char **)(v34 + 8);
    v41 = *(unsigned int *)(v34 + 20);
    if ((_DWORD)v41 == *(_DWORD *)(v34 + 16))
    {
      v47 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v40, v41 + 1, (unint64_t)&v52);
      v41 = *(unsigned int *)(v34 + 20);
      *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v41) = *(_QWORD *)v47;
      v42 = v52;
    }
    else
    {
      *(_QWORD *)&(*v40)[8 * v41] = v36;
      v42 = v36;
    }
    *(_DWORD *)(v34 + 20) = v41 + 1;
    *((_QWORD *)v42 + 4) = v34;
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateDerivedArray(_QWORD *a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  JSC::B3::Value *v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  JSC::B3::Value *v32;
  JSC::B3::Value *v33;
  uint64_t v34;
  JSC::B3::Value *v35;
  JSC::B3::Value *v36;
  uint64_t v37;
  uint64_t v38;
  int8x8_t v39;
  char **v40;
  uint64_t v41;
  JSC::B3::Value *v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  JSC::B3::Value *v52;

  v19 = a1[3519];
  v20 = *(_QWORD *)(v19 + 8);
  v21 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v22 = (uint64_t *)(v20 + 24);
  v23 = (uint64_t *)(v20 + 8);
  if ((a2 & 1) != 0)
    v23 = v22;
  v24 = *v23;
  v25 = *v23 + 32 * v21;
  v26 = *(_DWORD *)(v19 + 88);
  v27 = *(_DWORD *)(v25 + 20);
  if (v26 != v27)
  {
    if ((*(_QWORD *)(v25 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v27 ^ v26) >= 2)
      {
        v43 = *(_QWORD *)v25;
        if (*(_QWORD *)v25 != 4)
        {
          *(_QWORD *)v25 = v43 | 2;
          v44 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v43 & 1) != 0)
          {
            v48 = 2 * *v44;
            while (v48 * 4)
            {
              v49 = *(_QWORD *)&v44[v48];
              if ((*(_BYTE *)(v49 + 19) & 0xC) == 0)
              {
                v50 = *(_QWORD *)(v49 + 96);
                v51 = (v50 & 1) != 0 ? (v50 >> 1) & 3 : *(unsigned __int8 *)(v50 + 4);
                v48 -= 2;
                if (v51 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v44, v11, v12, v13, v14, v15, v16, v17);
              goto LABEL_35;
            }
          }
          else if (v44)
          {
            if ((*((_BYTE *)v44 + 19) & 0xC) != 0
              || ((v45 = *((_QWORD *)v44 + 12), (v45 & 1) != 0)
                ? (v46 = (v45 >> 1) & 3)
                : (v46 = *(unsigned __int8 *)(v45 + 4)),
                  v46 == 2))
            {
LABEL_35:
              *(_QWORD *)v25 = 4;
            }
          }
        }
        *(_DWORD *)(v24 + 32 * v21 + 16) = -21020677;
      }
      if ((v26 & 1) != 0)
        *(_QWORD *)v25 &= ~2uLL;
    }
    *(_DWORD *)(v25 + 20) = v26;
  }
  if ((*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFBFFFFFFLL) != 0)
  {
    v28 = a1[395];
    if (v28)
    {
      v29 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v28);
      v30 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), v18, v29);
    }
    else
    {
      v30 = (uint64_t)v18;
    }
    v31 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(a1 + 3455, (uint64_t)(a1 + 392), v30);
    v32 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), 37);
    v33 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 3455), v31, v32);
    v34 = a1[3472];
    v35 = (JSC::B3::Value *)a1[3470];
    v36 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, a1[3471], (uint64_t)v33, a1[3457]);
    JSC::B3::Procedure::addValueImpl(v35, v36);
    v52 = v36;
    v40 = (char **)(v34 + 8);
    v41 = *(unsigned int *)(v34 + 20);
    if ((_DWORD)v41 == *(_DWORD *)(v34 + 16))
    {
      v47 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v40, v41 + 1, (unint64_t)&v52);
      v41 = *(unsigned int *)(v34 + 20);
      *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v41) = *(_QWORD *)v47;
      v42 = v52;
    }
    else
    {
      *(_QWORD *)&(*v40)[8 * v41] = v36;
      v42 = v36;
    }
    *(_DWORD *)(v34 + 20) = v41 + 1;
    *((_QWORD *)v42 + 4) = v34;
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateDateObject(uint64_t a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateMapObject(uint64_t a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateSetObject(uint64_t a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateWeakMapObject(uint64_t a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateWeakSetObject(_QWORD *a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateDataViewObject(uint64_t a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateStringOrOther(_QWORD *a1, unint64_t a2)
{
  JSC::B3::Value *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateSymbol(_QWORD *a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateStringObject(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;

  v11 = a1[3519];
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v11 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v26 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v26 | 2;
          v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v26 & 1) != 0)
          {
            v30 = 2 * *v27;
            while (v30 * 4)
            {
              v31 = *(_QWORD *)&v27[v30];
              if ((*(_BYTE *)(v31 + 19) & 0xC) == 0)
              {
                v32 = *(_QWORD *)(v31 + 96);
                v33 = (v32 & 1) != 0 ? (v32 >> 1) & 3 : *(unsigned __int8 *)(v32 + 4);
                v30 -= 2;
                if (v33 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v27, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_29;
            }
          }
          else if (v27)
          {
            if ((*((_BYTE *)v27 + 19) & 0xC) != 0
              || ((v28 = *((_QWORD *)v27 + 12), (v28 & 1) != 0)
                ? (v29 = (v28 >> 1) & 3)
                : (v29 = *(unsigned __int8 *)(v28 + 4)),
                  v29 == 2))
            {
LABEL_29:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFDFFFFLL) != 0)
  {
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateStringOrStringObject(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::B3::Value *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  JSC::B3::Value *v62;
  JSC::B3::Value *v63;
  JSC::B3::Value *v64;
  JSC::B3::Value *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int8x8_t v73;
  uint64_t v74;
  JSC::B3::Value *v75;
  JSC::B3::Value *v76;
  char **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  int v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int *v109;
  uint64_t v110;
  unsigned int v111;
  char *v112;
  uint64_t v113;
  unsigned int *v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  WTF *v131;
  uint64_t v132;
  char v133;
  _QWORD *v134;
  uint64_t v135;

  v11 = *(_QWORD *)(a1 + 28152);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = a2 & 0xFF00FFFFFFFFFFFELL;
  v14 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v15 = (uint64_t *)(v12 + 24);
  v16 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v16 = v15;
  v17 = *v16;
  v18 = *v16 + 32 * v14;
  v19 = *(_DWORD *)(v11 + 88);
  v20 = *(_DWORD *)(v18 + 20);
  if (v19 != v20)
  {
    if ((*(_QWORD *)(v18 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v20 ^ v19) >= 2)
      {
        v104 = *(_QWORD *)v18;
        if (*(_QWORD *)v18 != 4)
        {
          *(_QWORD *)v18 = v104 | 2;
          v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v104 & 1) != 0)
          {
            v119 = 2 * *v105;
            while (v119 * 4)
            {
              v120 = *(_QWORD *)&v105[v119];
              if ((*(_BYTE *)(v120 + 19) & 0xC) == 0)
              {
                v121 = *(_QWORD *)(v120 + 96);
                v122 = (v121 & 1) != 0 ? (v121 >> 1) & 3 : *(unsigned __int8 *)(v121 + 4);
                v119 -= 2;
                if (v122 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v105, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_89;
            }
          }
          else if (v105)
          {
            if ((*((_BYTE *)v105 + 19) & 0xC) != 0
              || ((v106 = *((_QWORD *)v105 + 12), (v106 & 1) != 0)
                ? (v107 = (v106 >> 1) & 3)
                : (v107 = *(unsigned __int8 *)(v106 + 4)),
                  v107 == 2))
            {
LABEL_89:
              *(_QWORD *)v18 = 4;
            }
          }
        }
        *(_DWORD *)(v17 + 32 * v14 + 16) = -21020677;
      }
      if ((v19 & 1) != 0)
        *(_QWORD *)v18 &= ~2uLL;
    }
    *(_DWORD *)(v18 + 20) = v19;
  }
  if ((*(_QWORD *)(v18 + 8) & 0xFFFFFFFFCFFDFFFFLL) != 0)
  {
    v29 = *(_QWORD *)(a1 + 28152);
    v30 = *(_QWORD *)(v29 + 8);
    v31 = *(unsigned int *)(v13 + 20);
    v32 = (uint64_t *)(v30 + 24);
    v33 = (uint64_t *)(v30 + 8);
    if ((a2 & 1) != 0)
      v33 = v32;
    v34 = *v33;
    v35 = *v33 + 32 * v31;
    v36 = *(_DWORD *)(v29 + 88);
    v37 = *(_DWORD *)(v35 + 20);
    if (v36 != v37)
    {
      if ((*(_QWORD *)(v35 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v37 ^ v36) >= 2)
        {
          v108 = *(_QWORD *)v35;
          if (*(_QWORD *)v35 != 4)
          {
            *(_QWORD *)v35 = v108 | 2;
            v109 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v108 & 1) != 0)
            {
              v123 = 2 * *v109;
              while (v123 * 4)
              {
                v124 = *(_QWORD *)&v109[v123];
                if ((*(_BYTE *)(v124 + 19) & 0xC) == 0)
                {
                  v125 = *(_QWORD *)(v124 + 96);
                  v126 = (v125 & 1) != 0 ? (v125 >> 1) & 3 : *(unsigned __int8 *)(v125 + 4);
                  v123 -= 2;
                  if (v126 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v109, v21, v22, v23, v24, v25, v26, v27);
                goto LABEL_99;
              }
            }
            else if (v109)
            {
              if ((*((_BYTE *)v109 + 19) & 0xC) != 0
                || ((v110 = *((_QWORD *)v109 + 12), (v110 & 1) != 0)
                  ? (v111 = (v110 >> 1) & 3)
                  : (v111 = *(unsigned __int8 *)(v110 + 4)),
                    v111 == 2))
              {
LABEL_99:
                *(_QWORD *)v35 = 4;
              }
            }
          }
          *(_DWORD *)(v34 + 32 * v31 + 16) = -21020677;
        }
        if ((v36 & 1) != 0)
          *(_QWORD *)v35 &= ~2uLL;
      }
      *(_DWORD *)(v35 + 20) = v36;
    }
    if ((*(_QWORD *)(v35 + 8) & 0xFFFFFFFFCFFDFFFFLL) != 0)
    {
      v38 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
      v39 = v38;
      v40 = *(_QWORD *)(a1 + 27784);
      if (v40)
      {
        WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v40, v38);
      }
      else
      {
        v135 = v38;
        v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *(_OWORD *)v41 = 0u;
        *((_OWORD *)v41 + 1) = 0u;
        v41[3] = *(_QWORD *)(a1 + 27816);
        *(_QWORD *)(a1 + 27816) = v41;
        v134 = v41;
        v41[2] = v39;
        WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), &v135, (uint64_t *)&v134, v42, v43, v44, v45, v46, (uint64_t)&v132);
        v47 = v134;
        v48 = *(_QWORD **)(a1 + 27832);
        *v134 = a1 + 27824;
        v47[1] = v48;
        *v48 = v47;
        *(_QWORD *)(a1 + 27832) = v47;
      }
      v49 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
      v50 = v49;
      v51 = *(_QWORD *)(a1 + 27784);
      if (v51)
      {
        WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v51, v49);
      }
      else
      {
        v135 = v49;
        v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
        *(_OWORD *)v52 = 0u;
        *((_OWORD *)v52 + 1) = 0u;
        v52[3] = *(_QWORD *)(a1 + 27816);
        *(_QWORD *)(a1 + 27816) = v52;
        v134 = v52;
        v52[2] = v50;
        WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), &v135, (uint64_t *)&v134, v53, v54, v55, v56, v57, (uint64_t)&v132);
        v58 = v134;
        v59 = *(_QWORD **)(a1 + 27832);
        *v134 = a1 + 27824;
        v58[1] = v59;
        *v59 = v58;
        *(_QWORD *)(a1 + 27832) = v58;
      }
      v60 = *(_QWORD *)(a1 + 3160);
      v61 = (uint64_t)v28;
      if (v60)
      {
        v62 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v60);
        v61 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v28, v62);
      }
      v131 = v28;
      v63 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)(a1 + 27640), a1 + 3136, v61);
      v64 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 2);
      v65 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), v63, v64);
      JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v65, v50, v39, NAN, NAN, v66, v67, v68, v69);
      *(_QWORD *)(a1 + 27776) = v39;
      v70 = *(_QWORD *)(a1 + 27784);
      *(_QWORD *)(a1 + 27784) = v50;
      v71 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 76);
      v72 = (*(uint64_t (**)(JSC::B3::Value *, uint64_t))(*(_QWORD *)v63 + 312))(v63, v71);
      if (v72 == 2)
      {
        v74 = *(_QWORD *)(a1 + 27776);
        v75 = *(JSC::B3::Value **)(a1 + 27760);
        v76 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(a1 + 27768), (uint64_t)v63, v71);
        JSC::B3::Procedure::addValueImpl(v75, v76);
        v132 = (uint64_t)v76;
        v77 = (char **)(v74 + 8);
        v78 = *(unsigned int *)(v74 + 20);
        if ((_DWORD)v78 == *(_DWORD *)(v74 + 16))
        {
          v112 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v77, v78 + 1, (unint64_t)&v132);
          v78 = *(unsigned int *)(v74 + 20);
          *(_QWORD *)(*(_QWORD *)(v74 + 8) + 8 * v78) = *(_QWORD *)v112;
          v79 = v132;
        }
        else
        {
          *(_QWORD *)&(*v77)[8 * v78] = v76;
          v79 = (uint64_t)v76;
        }
        *(_DWORD *)(v74 + 20) = v78 + 1;
        *(_QWORD *)(v79 + 32) = v74;
      }
      else
      {
        v117 = 27648;
        if (v72 == 1)
          v117 = 27640;
        v76 = *(JSC::B3::Value **)(a1 + v117);
      }
      v80 = *(_QWORD *)(a1 + 27776);
      v81 = *(_QWORD *)(a1 + 27760);
      v82 = *(_QWORD *)(a1 + 27768);
      v132 = v50;
      v133 = 0;
      JSC::B3::BasicBlock::appendNewControlValue(v80, v81, 154, v82, &v132, v83, v84, v85);
      *(_QWORD *)(a1 + 27776) = v50;
      *(_QWORD *)(a1 + 27784) = v70;
      v93 = *(_QWORD *)(a1 + 28152);
      v94 = *(_QWORD *)(v93 + 8);
      v95 = *(unsigned int *)(v13 + 20);
      v96 = (uint64_t *)(v94 + 24);
      v97 = (uint64_t *)(v94 + 8);
      if ((a2 & 1) != 0)
        v97 = v96;
      v98 = *v97;
      v99 = *v97 + 32 * v95;
      v100 = *(_DWORD *)(v93 + 88);
      v101 = *(_DWORD *)(v99 + 20);
      if (v100 != v101)
      {
        if ((*(_QWORD *)(v99 + 8) & 0x2800FFFFFFF7) != 0)
        {
          if ((v101 ^ v100) >= 2)
          {
            v113 = *(_QWORD *)v99;
            if (*(_QWORD *)v99 != 4)
            {
              *(_QWORD *)v99 = v113 | 2;
              v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v113 & 1) != 0)
              {
                v127 = 2 * *v114;
                while (v127 * 4)
                {
                  v128 = *(_QWORD *)&v114[v127];
                  if ((*(_BYTE *)(v128 + 19) & 0xC) == 0)
                  {
                    v129 = *(_QWORD *)(v128 + 96);
                    v130 = (v129 & 1) != 0 ? (v129 >> 1) & 3 : *(unsigned __int8 *)(v129 + 4);
                    v127 -= 2;
                    if (v130 != 2)
                      continue;
                  }
                  WTF::fastFree((unint64_t)v114, v86, v87, v88, v89, v90, v91, v92);
                  goto LABEL_109;
                }
              }
              else if (v114)
              {
                if ((*((_BYTE *)v114 + 19) & 0xC) != 0
                  || ((v115 = *((_QWORD *)v114 + 12), (v115 & 1) != 0)
                    ? (v116 = (v115 >> 1) & 3)
                    : (v116 = *(unsigned __int8 *)(v115 + 4)),
                      v116 == 2))
                {
LABEL_109:
                  *(_QWORD *)v99 = 4;
                }
              }
            }
            *(_DWORD *)(v98 + 32 * v95 + 16) = -21020677;
          }
          if ((v100 & 1) != 0)
            *(_QWORD *)v99 &= ~2uLL;
        }
        *(_DWORD *)(v99 + 20) = v100;
      }
      v102 = (uint64_t *)(v99 + 8);
      v103 = *(_QWORD *)(v99 + 8);
      if ((v103 & 0x30020000) != v103)
      {
        if ((v103 & 0x2800FFFFFFF7) != 0)
        {
          if (!JSC::DFG::AbstractValue::filterSlow((JSC::DFG::AbstractValue *)v99, 0x30020000uLL, v87, v88, v89, v90, v91, v92))return;
        }
        else
        {
          *v102 = v103 & 0x30020000;
          if ((v103 & 0x30020000) != 0)
            return;
          *v102 = 0;
          v118 = v98 + 32 * v95;
          *(_DWORD *)(v118 + 16) = 0;
          if ((*(_QWORD *)v99 & 1) != 0)
            WTF::fastFree(*(_QWORD *)v99 & 0xFFFFFFFFFFFFFFFCLL, v86, v87, v88, v89, v90, v91, v92);
          *(_QWORD *)v99 = 0;
          *(_QWORD *)(v118 + 24) = 0;
        }
        *(_BYTE *)(*(_QWORD *)(a1 + 28152) + 80) = 0;
      }
    }
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateRealNumber(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  JSC::B3::Value *v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  JSC::B3::Value *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int8x8_t v57;
  JSC::B3::Value **v58;
  JSC::B3::Value *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;

  result = JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(a1 + 28128, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v12 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v11, *(JSC::B3::Value **)(a1 + 27896));
    v13 = JSC::FTL::Output::bitCast((_QWORD *)(a1 + 27640), v12);
    v14 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v15 = v14;
    v16 = *(_QWORD *)(a1 + 27784);
    if (v16)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v16, v14);
    }
    else
    {
      v70 = v14;
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v17 = 0u;
      *((_OWORD *)v17 + 1) = 0u;
      v17[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v17;
      v69 = v17;
      v17[2] = v15;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), &v70, (uint64_t *)&v69, v18, v19, v20, v21, v22, (uint64_t)&v67);
      v23 = v69;
      v24 = *(_QWORD **)(a1 + 27832);
      *v69 = a1 + 27824;
      v23[1] = v24;
      *v24 = v23;
      *(_QWORD *)(a1 + 27832) = v23;
    }
    v25 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v26 = v25;
    v27 = *(_QWORD *)(a1 + 27784);
    if (v27)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v27, v25);
    }
    else
    {
      v70 = v25;
      v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v28 = 0u;
      *((_OWORD *)v28 + 1) = 0u;
      v28[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v28;
      v69 = v28;
      v28[2] = v26;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), &v70, (uint64_t *)&v69, v29, v30, v31, v32, v33, (uint64_t)&v67);
      v34 = v69;
      v35 = *(_QWORD **)(a1 + 27832);
      *v69 = a1 + 27824;
      v34[1] = v35;
      *v35 = v34;
      *(_QWORD *)(a1 + 27832) = v34;
    }
    v36 = *(_QWORD *)(a1 + 27776);
    v37 = *(JSC::B3::Value **)(a1 + 27760);
    v38 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v13, (uint64_t)v13);
    JSC::B3::Procedure::addValueImpl(v37, v38);
    v67 = (uint64_t)v38;
    v43 = (char **)(v36 + 8);
    v44 = *(unsigned int *)(v36 + 20);
    if ((_DWORD)v44 == *(_DWORD *)(v36 + 16))
    {
      v66 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v43, v44 + 1, (unint64_t)&v67);
      v44 = *(unsigned int *)(v36 + 20);
      *(_QWORD *)(*(_QWORD *)(v36 + 8) + 8 * v44) = *(_QWORD *)v66;
      v45 = v67;
    }
    else
    {
      *(_QWORD *)&(*v43)[8 * v44] = v38;
      v45 = (uint64_t)v38;
    }
    *(_DWORD *)(v36 + 20) = v44 + 1;
    *(_QWORD *)(v45 + 32) = v36;
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v38, v26, v15, 1.0, 0.0, v39, v40, v41, v42);
    *(_QWORD *)(a1 + 27776) = v15;
    v46 = *(_QWORD *)(a1 + 27784);
    *(_QWORD *)(a1 + 27784) = v26;
    v47 = *(_QWORD *)(*(_QWORD *)(a1 + 28224) + 24);
    v58 = (JSC::B3::Value **)(a1 + 27640);
    if ((v54 & 0x300000000) != 0)
    {
      if ((v54 & 0xFFFFFFCCFFFFFFFFLL) != 0)
      {
LABEL_12:
        v59 = JSC::FTL::Output::below((JSC::FTL::Output *)(a1 + 27640), v11, *(JSC::B3::Value **)(a1 + 27896));
LABEL_13:
        v60 = *(_QWORD *)(a1 + 27776);
        v61 = *(_QWORD *)(a1 + 27760);
        v62 = *(_QWORD *)(a1 + 27768);
        v67 = v26;
        v68 = 0;
        result = JSC::B3::BasicBlock::appendNewControlValue(v60, v61, 154, v62, &v67, v63, v64, v65);
        *(_QWORD *)(a1 + 27776) = v26;
        *(_QWORD *)(a1 + 27784) = v46;
        return result;
      }
      v58 = (JSC::B3::Value **)(a1 + 27648);
    }
    v59 = *v58;
    if (*v58)
      goto LABEL_13;
    goto LABEL_12;
  }
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateDoubleRepAnyInt(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int8x8_t v10;
  JSC::B3::Value *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  JSC::DFG::AbstractValue *v26;
  unsigned int v27;
  int v28;
  unsigned int *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  JSC::DFG::AbstractValue *v47;
  JSC::DFG::AbstractValue *v48;

  if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck((uint64_t)(a1 + 3516), a2, a3, a4, a5, a6, a7, a8))
  {
    v19 = a1[3519];
    v20 = *(_QWORD *)(v19 + 8);
    v21 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v22 = (uint64_t *)(v20 + 24);
    v23 = (uint64_t *)(v20 + 8);
    if ((a2 & 1) != 0)
      v23 = v22;
    v24 = *v23;
    v25 = *v23 + 32 * v21;
    v26 = (JSC::DFG::AbstractValue *)v25;
    v27 = *(_DWORD *)(v19 + 88);
    v29 = (unsigned int *)(v25 + 20);
    v28 = *(_DWORD *)(v25 + 20);
    if (v27 != v28)
    {
      if ((*(_QWORD *)(v25 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v28 ^ v27) >= 2)
        {
          v34 = *(_QWORD *)v25;
          if (*(_QWORD *)v25 != 4)
          {
            *(_QWORD *)v25 = v34 | 2;
            v35 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v34 & 1) != 0)
            {
              v39 = 2 * *v35;
              while (v39 * 4)
              {
                v40 = *(_QWORD *)&v35[v39];
                if ((*(_BYTE *)(v40 + 19) & 0xC) == 0)
                {
                  v41 = *(_QWORD *)(v40 + 96);
                  v42 = (v41 & 1) != 0 ? (v41 >> 1) & 3 : *(unsigned __int8 *)(v41 + 4);
                  v39 -= 2;
                  if (v42 != 2)
                    continue;
                }
                v48 = (JSC::DFG::AbstractValue *)v25;
                v44 = v25;
                v45 = v21;
                v46 = v27;
                v43 = (unsigned int *)(v25 + 20);
                WTF::fastFree((unint64_t)v35, v12, v13, v14, v15, v16, v17, v18);
                v29 = v43;
                v25 = v44;
                v27 = v46;
                v21 = v45;
                v26 = v48;
                goto LABEL_38;
              }
            }
            else if (v35)
            {
              if ((*((_BYTE *)v35 + 19) & 0xC) != 0
                || ((v36 = *((_QWORD *)v35 + 12), (v36 & 1) != 0)
                  ? (v37 = (v36 >> 1) & 3)
                  : (v37 = *(unsigned __int8 *)(v36 + 4)),
                    v37 == 2))
              {
LABEL_38:
                *(_QWORD *)v26 = 4;
              }
            }
          }
          *(_DWORD *)(v24 + 32 * v21 + 16) = -21020677;
        }
        if ((v27 & 1) != 0)
          *(_QWORD *)v26 &= ~2uLL;
      }
      *v29 = v27;
    }
    v32 = *(_QWORD *)(v25 + 8);
    v30 = (uint64_t *)(v25 + 8);
    v31 = v32;
    v33 = v32 & 0x1000000000;
    if ((v32 & 0x1000000000) != v32)
    {
      if ((v31 & 0x2800FFFFFFF7) != 0)
      {
        if (!JSC::DFG::AbstractValue::filterSlow(v26, 0x1000000000uLL, v13, v14, v15, v16, v17, v18))
          return;
      }
      else
      {
        *v30 = v33;
        if (v33)
          return;
        *v30 = 0;
        v38 = v24 + 32 * v21;
        *(_DWORD *)(v38 + 16) = 0;
        v47 = v26;
        if ((*(_QWORD *)v26 & 1) != 0)
          WTF::fastFree(*(_QWORD *)v26 & 0xFFFFFFFFFFFFFFFCLL, v12, v13, v14, v15, v16, v17, v18);
        *(_QWORD *)v47 = 0;
        *(_QWORD *)(v38 + 24) = 0;
      }
      *(_BYTE *)(a1[3519] + 80) = 0;
    }
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateHeapBigInt(_QWORD *a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateNotStringVar(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::BasicBlock *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::B3::Value *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::B3::Value *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t Ptr;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  result = JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, -536870913, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v12 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    v13 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    v14 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v22, v12, (uint64_t)v14, NAN, NAN, v23, v24, v25, v26);
    *(_QWORD *)(a1 + 27776) = v12;
    v27 = *(_QWORD *)(a1 + 27784);
    *(_QWORD *)(a1 + 27784) = v13;
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v35, v13, (uint64_t)v14, NAN, NAN, v36, v37, v38, v39);
    *(_QWORD *)(a1 + 27776) = v13;
    *(_QWORD *)(a1 + 27784) = v14;
    Ptr = JSC::FTL::Output::loadPtr((JSC::FTL::Output *)(a1 + 27640), v11, *(const JSC::FTL::AbstractHeap **)(a1 + 26504));
    result = JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v14, v45, v46, v47, v48, v49, v50);
    *(_QWORD *)(a1 + 27776) = v14;
    *(_QWORD *)(a1 + 27784) = v27;
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateNotSymbol(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  JSC::B3::Value *v11;
  uint64_t v12;
  JSC::B3::BasicBlock *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  int8x8_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  result = JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(a1[3519], a2, -1073741825, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v12 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
    v13 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
    JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v21, v12, (uint64_t)v13, NAN, NAN, v22, v23, v24, v25);
    a1[3472] = v12;
    v26 = a1[3473];
    a1[3473] = v13;
    JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 3455), v13, v29, v30, v31, v32, v33, v34);
    a1[3472] = v13;
    a1[3473] = v26;
    return JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::filter<JSC::DFG::Edge>((uint64_t)(a1 + 3516), a2, 0xFFFFFFFFBFFFFFFFLL, v35, v36, v37, v38, v39);
  }
  return result;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateNotCell(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Value *result;

  result = (JSC::B3::Value *)JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck((uint64_t)(a1 + 3516), a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateNotDouble(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::B3::Value **v29;
  JSC::B3::Value *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  JSC::B3::Value *v44;
  JSC::B3::Value *v45;
  uint64_t v46;
  uint64_t v47;
  int8x8_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  char v69;
  _QWORD *v70;
  uint64_t v71;

  result = JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(a1 + 28128, a2, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)result)
    return result;
  v12 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 27784);
  if (v14)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v14, v12);
  }
  else
  {
    v71 = v12;
    v52 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v52 = 0u;
    *((_OWORD *)v52 + 1) = 0u;
    v52[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v52;
    v70 = v52;
    v52[2] = v13;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), &v71, (uint64_t *)&v70, v53, v54, v55, v56, v57, (uint64_t)&v68);
    v58 = v70;
    v59 = *(_QWORD **)(a1 + 27832);
    *v70 = a1 + 27824;
    v58[1] = v59;
    *v59 = v58;
    *(_QWORD *)(a1 + 27832) = v58;
  }
  v15 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v16 = v15;
  v17 = *(_QWORD *)(a1 + 27784);
  if (v17)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v17, v15);
  }
  else
  {
    v71 = v15;
    v60 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v60 = 0u;
    *((_OWORD *)v60 + 1) = 0u;
    v60[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v60;
    v70 = v60;
    v60[2] = v16;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), &v71, (uint64_t *)&v70, v61, v62, v63, v64, v65, (uint64_t)&v68);
    v66 = v70;
    v67 = *(_QWORD **)(a1 + 27832);
    *v70 = a1 + 27824;
    v66[1] = v67;
    *v67 = v66;
    *(_QWORD *)(a1 + 27832) = v66;
  }
  v29 = (JSC::B3::Value **)(a1 + 27640);
  if ((v24 & 0xFFFFFFFCFFFFFFFFLL) == 0)
  {
LABEL_22:
    v30 = *v29;
    if (*v29)
      goto LABEL_9;
    goto LABEL_8;
  }
  if ((v24 & 0x300000000) == 0)
  {
    v29 = (JSC::B3::Value **)(a1 + 27648);
    goto LABEL_22;
  }
LABEL_8:
  v30 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::Output *)(a1 + 27640), v11, *(JSC::B3::Value **)(a1 + 27896));
LABEL_9:
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v30, v16, v13, NAN, NAN, v25, v26, v27, v28);
  *(_QWORD *)(a1 + 27776) = v13;
  v37 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v16;
  v38 = *(_QWORD *)(a1 + 28152);
  v39 = *(_QWORD *)(v38 + 8);
  v40 = (_QWORD *)(v39 + 24);
  v41 = (_QWORD *)(v39 + 8);
  if ((a2 & 1) != 0)
    v41 = v40;
  v42 = *v41 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v43 = (void *)*(unsigned int *)(v38 + 88);
  if ((_DWORD)v43 != *(_DWORD *)(v42 + 20))
  {
    if ((*(_QWORD *)(v42 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v42, v43, v31, v32, v33, v34, v35, v36);
    else
      *(_DWORD *)(v42 + 20) = (_DWORD)v43;
  }
  if ((*(_BYTE *)(v42 + 12) & 0xF0) != 0)
  {
    v44 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v11, *(JSC::B3::Value **)(a1 + 27896));
    v45 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), v44);
  }
  v49 = *(_QWORD *)(a1 + 27776);
  v50 = *(_QWORD *)(a1 + 27760);
  v51 = *(_QWORD *)(a1 + 27768);
  v68 = v16;
  v69 = 0;
  result = JSC::B3::BasicBlock::appendNewControlValue(v49, v50, 154, v51, &v68, v34, v35, v36);
  *(_QWORD *)(a1 + 27776) = v16;
  *(_QWORD *)(a1 + 27784) = v37;
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateNeitherDoubleNorHeapBigInt(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::BasicBlock *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::B3::Value *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  uint64_t v40;
  uint64_t v41;
  int8x8_t v42;
  uint64_t v43;
  JSC::B3::Value *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  JSC::B3::Value *v60;
  uint64_t v61;
  uint64_t v62;
  int8x8_t v63;

  result = JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(a1 + 28128, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v12 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    v13 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    v14 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v22, (uint64_t)v14, v12, NAN, NAN, v23, v24, v25, v26);
    *(_QWORD *)(a1 + 27776) = v12;
    v27 = *(_QWORD *)(a1 + 27784);
    *(_QWORD *)(a1 + 27784) = v13;
    if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, 0xFFFFFF0FFFFFFFFFLL, v28, v29, v30, v31, v32))
    {
    }
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v44, v13, (uint64_t)v14, NAN, NAN, v45, v46, v47, v48);
    *(_QWORD *)(a1 + 27776) = v13;
    *(_QWORD *)(a1 + 27784) = v14;
    if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, 0xFFFFF7FFFFFFFFFFLL, v49, v50, v51, v52, v53))
    {
    }
    result = JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v14, v54, v55, v56, v57, v58, v59);
    *(_QWORD *)(a1 + 27776) = v14;
    *(_QWORD *)(a1 + 27784) = v27;
  }
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateMisc(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Value *v10;
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;

  if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(a1 + 28128, a2, a3, a4, a5, a6, a7, a8))
  {
    v11 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), 14);
    v12 = JSC::FTL::Output::above((JSC::FTL::Output *)(a1 + 27640), v10, v11);
  }
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isNotOther(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  JSC::FTL::Output *v3;
  JSC::B3::Value *v4;
  JSC::B3::Value *v5;
  JSC::B3::Value *v6;

  v3 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v4 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), -9);
  v5 = JSC::FTL::Output::bitAnd(v3, a2, v4);
  v6 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v3, 2);
  return JSC::FTL::Output::notEqual(v3, v5, v6);
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t result;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;

  v8 = (a2 >> 50) & 0x3F;
  if (v8 >= 0x35)
  {
    result = 210;
    __break(0xC471u);
  }
  else
  {
    v9 = qword_199124750[v8];
    v10 = *(_QWORD *)(a1 + 24);
    v11 = *(_QWORD *)(v10 + 8);
    v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v13 = (uint64_t *)(v11 + 24);
    v14 = (uint64_t *)(v11 + 8);
    if ((a2 & 1) != 0)
      v14 = v13;
    v15 = *v14;
    v16 = *v14 + 32 * v12;
    v17 = *(_DWORD *)(v10 + 88);
    v18 = *(_DWORD *)(v16 + 20);
    if (v17 != v18)
    {
      if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v18 ^ v17) >= 2)
        {
          v20 = *(_QWORD *)v16;
          if (*(_QWORD *)v16 != 4)
          {
            *(_QWORD *)v16 = v20 | 2;
            v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v20 & 1) != 0)
            {
              v24 = 2 * *v21;
              while (v24 * 4)
              {
                v25 = *(_QWORD *)&v21[v24];
                if ((*(_BYTE *)(v25 + 19) & 0xC) == 0)
                {
                  v26 = *(_QWORD *)(v25 + 96);
                  v27 = (v26 & 1) != 0 ? (v26 >> 1) & 3 : *(unsigned __int8 *)(v26 + 4);
                  v24 -= 2;
                  if (v27 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v21, (void *)a2, a3, a4, a5, a6, a7, a8);
                goto LABEL_19;
              }
            }
            else if (v21)
            {
              if ((*((_BYTE *)v21 + 19) & 0xC) != 0
                || ((v22 = *((_QWORD *)v21 + 12), (v22 & 1) != 0)
                  ? (v23 = (v22 >> 1) & 3)
                  : (v23 = *(unsigned __int8 *)(v22 + 4)),
                    v23 == 2))
              {
LABEL_19:
                *(_QWORD *)v16 = 4;
              }
            }
          }
          *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
        }
        if ((v17 & 1) != 0)
          *(_QWORD *)v16 &= ~2uLL;
      }
      *(_DWORD *)(v16 + 20) = v17;
    }
    return (*(_QWORD *)(v16 + 8) & v9) != 0;
  }
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateObject(_QWORD *a1, uint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  JSC::B3::Value *v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;

  v11 = a1[3519];
  v12 = *(_QWORD *)(v11 + 8);
  v13 = (_QWORD *)(v12 + 24);
  v14 = (_QWORD *)(v12 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v11 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0xFFFFDFFFF0000008) != 0)
  {
    v17 = a1[395];
    if (v17)
    {
      v18 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v17);
      v19 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), a3, v18);
    }
    else
    {
      v19 = (uint64_t)a3;
    }
    v20 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(a1 + 3455, (uint64_t)(a1 + 392), v19);
    v21 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), 23);
    v22 = JSC::FTL::Output::below((JSC::FTL::Output *)(a1 + 3455), v20, v21);
  }
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isNotObject(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  JSC::FTL::Output *v4;
  uint64_t v5;
  JSC::B3::Value *v6;
  JSC::B3::Value *v7;
  JSC::B3::Value *v8;

  v4 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v5 = *((_QWORD *)this + 395);
  if (v5)
  {
    v6 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v5);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add(v4, a2, v6);
  }
  v7 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(v4, (uint64_t)this + 3136, (uint64_t)a2);
  v8 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v4, 23);
  return JSC::FTL::Output::below(v4, v7, v8);
}

uint64_t JSC::FTL::Output::load8ZeroExt32(JSC::FTL::Output *this, JSC::B3::Value *a2, const JSC::FTL::AbstractHeap *a3)
{
  uint64_t v6;
  JSC::B3::Value *v7;

  v6 = *((_QWORD *)a3 + 3);
  if (v6)
  {
    v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(this, v6);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add(this, a2, v7);
  }
  return JSC::FTL::Output::load8ZeroExt32(this, (uint64_t)a3, (uint64_t)a2);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateArray(uint64_t a1, unint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;

  if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, 2, a4, a5, a6, a7, a8))
  {
    v12 = JSC::FTL::Output::logicalNot((JSC::FTL::Output *)(a1 + 27640), v11);
  }
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isType(uint64_t a1, JSC::B3::Value *a2, __int16 a3)
{
  int v4;
  JSC::FTL::Output *v5;
  uint64_t v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  JSC::B3::Value *v10;
  int v12;
  JSC::B3::Value *v13;
  JSC::B3::Value *v14;
  JSC::B3::Value *v15;
  JSC::B3::Value *v16;
  JSC::B3::Value *v17;

  v4 = HIBYTE(a3);
  v5 = (JSC::FTL::Output *)(a1 + 27640);
  v6 = a1 + 3136;
  v7 = *(_QWORD *)(a1 + 3160);
  if (HIBYTE(a3) == a3)
  {
    if (v7)
    {
      v8 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v7);
      a2 = (JSC::B3::Value *)JSC::FTL::Output::add(v5, a2, v8);
    }
    v9 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(v5, v6, (uint64_t)a2);
    v10 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v5, v4);
    return JSC::FTL::Output::equal(v5, v9, v10);
  }
  else
  {
    v12 = a3;
    if (v7)
    {
      v13 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v7);
      a2 = (JSC::B3::Value *)JSC::FTL::Output::add(v5, a2, v13);
    }
    v14 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(v5, v6, (uint64_t)a2);
    v15 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v5, v12);
    v16 = JSC::FTL::Output::sub(v5, v14, v15);
    v17 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v5, v4 - v12);
    return JSC::FTL::Output::belowOrEqual(v5, v16, v17);
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateFunction(_QWORD *a1, uint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  JSC::B3::Value *v22;
  uint64_t v23;
  JSC::B3::Value *v24;
  JSC::B3::Value *v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  char **v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  char *v32;
  JSC::B3::Value *v33;

  v11 = a1[3519];
  v12 = *(_QWORD *)(v11 + 8);
  v13 = (_QWORD *)(v12 + 24);
  v14 = (_QWORD *)(v12 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v11 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFFBLL) != 0)
  {
    v17 = a1[395];
    if (v17)
    {
      v18 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v17);
      v19 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), a3, v18);
    }
    else
    {
      v19 = (uint64_t)a3;
    }
    v20 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(a1 + 3455, (uint64_t)(a1 + 392), v19);
    v21 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), 26);
    v22 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 3455), v20, v21);
    v23 = a1[3472];
    v24 = (JSC::B3::Value *)a1[3470];
    v25 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, a1[3471], (uint64_t)v22, a1[3457]);
    JSC::B3::Procedure::addValueImpl(v24, v25);
    v33 = v25;
    v29 = (char **)(v23 + 8);
    v30 = *(unsigned int *)(v23 + 20);
    if ((_DWORD)v30 == *(_DWORD *)(v23 + 16))
    {
      v32 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)&v33);
      v30 = *(unsigned int *)(v23 + 20);
      *(_QWORD *)(*(_QWORD *)(v23 + 8) + 8 * v30) = *(_QWORD *)v32;
      v31 = v33;
    }
    else
    {
      *(_QWORD *)&(*v29)[8 * v30] = v25;
      v31 = v25;
    }
    *(_DWORD *)(v23 + 20) = v30 + 1;
    *((_QWORD *)v31 + 4) = v23;
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateFinalObject(_QWORD *a1, uint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  JSC::B3::Value *v22;
  uint64_t v23;
  JSC::B3::Value *v24;
  JSC::B3::Value *v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  char **v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  char *v32;
  JSC::B3::Value *v33;

  v11 = a1[3519];
  v12 = *(_QWORD *)(v11 + 8);
  v13 = (_QWORD *)(v12 + 24);
  v14 = (_QWORD *)(v12 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v11 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if (*(_QWORD *)(v15 + 8) >= 2uLL)
  {
    v17 = a1[395];
    if (v17)
    {
      v18 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v17);
      v19 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), a3, v18);
    }
    else
    {
      v19 = (uint64_t)a3;
    }
    v20 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(a1 + 3455, (uint64_t)(a1 + 392), v19);
    v21 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), 24);
    v22 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 3455), v20, v21);
    v23 = a1[3472];
    v24 = (JSC::B3::Value *)a1[3470];
    v25 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, a1[3471], (uint64_t)v22, a1[3457]);
    JSC::B3::Procedure::addValueImpl(v24, v25);
    v33 = v25;
    v29 = (char **)(v23 + 8);
    v30 = *(unsigned int *)(v23 + 20);
    if ((_DWORD)v30 == *(_DWORD *)(v23 + 16))
    {
      v32 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)&v33);
      v30 = *(unsigned int *)(v23 + 20);
      *(_QWORD *)(*(_QWORD *)(v23 + 8) + 8 * v30) = *(_QWORD *)v32;
      v31 = v33;
    }
    else
    {
      *(_QWORD *)&(*v29)[8 * v30] = v25;
      v31 = v25;
    }
    *(_DWORD *)(v23 + 20) = v30 + 1;
    *((_QWORD *)v31 + 4) = v23;
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateRegExpObject(uint64_t a1, uint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  JSC::B3::Value *v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  int8x8_t v21;

  v11 = *(_QWORD *)(a1 + 28152);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = (_QWORD *)(v12 + 24);
  v14 = (_QWORD *)(v12 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v11 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFBFFFFLL) != 0)
  {
    v18 = JSC::FTL::Output::logicalNot((JSC::FTL::Output *)(a1 + 27640), v17);
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateDateObject(uint64_t a1, unint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;

  if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, 0x80000, a4, a5, a6, a7, a8))
  {
    v12 = JSC::FTL::Output::logicalNot((JSC::FTL::Output *)(a1 + 27640), v11);
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateMapObject(uint64_t a1, uint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  JSC::B3::Value *v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  int8x8_t v21;

  v11 = *(_QWORD *)(a1 + 28152);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = (_QWORD *)(v12 + 24);
  v14 = (_QWORD *)(v12 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v11 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFDFFFFFLL) != 0)
  {
    v18 = JSC::FTL::Output::logicalNot((JSC::FTL::Output *)(a1 + 27640), v17);
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateSetObject(uint64_t a1, uint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  JSC::B3::Value *v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  int8x8_t v21;

  v11 = *(_QWORD *)(a1 + 28152);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = (_QWORD *)(v12 + 24);
  v14 = (_QWORD *)(v12 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v11 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFBFFFFFLL) != 0)
  {
    v18 = JSC::FTL::Output::logicalNot((JSC::FTL::Output *)(a1 + 27640), v17);
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateWeakMapObject(uint64_t a1, unint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;

  if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, 0x800000, a4, a5, a6, a7, a8))
  {
    v12 = JSC::FTL::Output::logicalNot((JSC::FTL::Output *)(a1 + 27640), v11);
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateWeakSetObject(_QWORD *a1, uint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  JSC::B3::Value *v24;
  JSC::B3::Value *v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  JSC::B3::Value *v28;
  uint64_t v29;
  uint64_t v30;
  int8x8_t v31;
  char **v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  JSC::B3::Value *v44;

  v11 = a1[3519];
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v11 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v35 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v35 | 2;
          v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v35 & 1) != 0)
          {
            v40 = 2 * *v36;
            while (v40 * 4)
            {
              v41 = *(_QWORD *)&v36[v40];
              if ((*(_BYTE *)(v41 + 19) & 0xC) == 0)
              {
                v42 = *(_QWORD *)(v41 + 96);
                v43 = (v42 & 1) != 0 ? (v42 >> 1) & 3 : *(unsigned __int8 *)(v42 + 4);
                v40 -= 2;
                if (v43 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v36, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              goto LABEL_35;
            }
          }
          else if (v36)
          {
            if ((*((_BYTE *)v36 + 19) & 0xC) != 0
              || ((v37 = *((_QWORD *)v36 + 12), (v37 & 1) != 0)
                ? (v38 = (v37 >> 1) & 3)
                : (v38 = *(unsigned __int8 *)(v37 + 4)),
                  v38 == 2))
            {
LABEL_35:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFEFFFFFFLL) != 0)
  {
    v20 = a1[395];
    if (v20)
    {
      v21 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v20);
      v22 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), a3, v21);
    }
    else
    {
      v22 = (uint64_t)a3;
    }
    v23 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(a1 + 3455, (uint64_t)(a1 + 392), v22);
    v24 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), 72);
    v25 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 3455), v23, v24);
    v26 = a1[3472];
    v27 = (JSC::B3::Value *)a1[3470];
    v28 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, a1[3471], (uint64_t)v25, a1[3457]);
    JSC::B3::Procedure::addValueImpl(v27, v28);
    v44 = v28;
    v32 = (char **)(v26 + 8);
    v33 = *(unsigned int *)(v26 + 20);
    if ((_DWORD)v33 == *(_DWORD *)(v26 + 16))
    {
      v39 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32, v33 + 1, (unint64_t)&v44);
      v33 = *(unsigned int *)(v26 + 20);
      *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * v33) = *(_QWORD *)v39;
      v34 = v44;
    }
    else
    {
      *(_QWORD *)&(*v32)[8 * v33] = v28;
      v34 = v28;
    }
    *(_DWORD *)(v26 + 20) = v33 + 1;
    *((_QWORD *)v34 + 4) = v26;
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateDataViewObject(uint64_t a1, unint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;

  if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(*(_QWORD *)(a1 + 28152), a2, 0x200000000000, a4, a5, a6, a7, a8))
  {
    v12 = JSC::FTL::Output::logicalNot((JSC::FTL::Output *)(a1 + 27640), v11);
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateString(_QWORD *a1, uint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  uint64_t v29;
  JSC::B3::Value *v30;
  JSC::B3::Value *v31;
  char **v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  char *v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  JSC::B3::Value *v45;

  v11 = a1[3519];
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v11 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v36 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v36 | 2;
          v37 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v36 & 1) != 0)
          {
            v41 = 2 * *v37;
            while (v41 * 4)
            {
              v42 = *(_QWORD *)&v37[v41];
              if ((*(_BYTE *)(v42 + 19) & 0xC) == 0)
              {
                v43 = *(_QWORD *)(v42 + 96);
                v44 = (v43 & 1) != 0 ? (v43 >> 1) & 3 : *(unsigned __int8 *)(v43 + 4);
                v41 -= 2;
                if (v44 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v37, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              goto LABEL_27;
            }
          }
          else if (v37)
          {
            if ((*((_BYTE *)v37 + 19) & 0xC) != 0
              || ((v38 = *((_QWORD *)v37 + 12), (v38 & 1) != 0)
                ? (v39 = (v38 >> 1) & 3)
                : (v39 = *(unsigned __int8 *)(v38 + 4)),
                  v39 == 2))
            {
LABEL_27:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0xFFFFFFFFCFFFFFFFLL) != 0)
  {
    v20 = a1[395];
    if (v20)
    {
      v21 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v20);
      v22 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), a3, v21);
    }
    else
    {
      v22 = (uint64_t)a3;
    }
    v23 = JSC::FTL::Output::load8ZeroExt32(a1 + 3455, (uint64_t)(a1 + 392), v22);
    v24 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), 2);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 312))(v23, v24);
    if (v25 == 2)
    {
      v29 = a1[3472];
      v30 = (JSC::B3::Value *)a1[3470];
      v31 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, a1[3471], v23, v24);
      JSC::B3::Procedure::addValueImpl(v30, v31);
      v45 = v31;
      v32 = (char **)(v29 + 8);
      v33 = *(unsigned int *)(v29 + 20);
      if ((_DWORD)v33 == *(_DWORD *)(v29 + 16))
      {
        v35 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32, v33 + 1, (unint64_t)&v45);
        v33 = *(unsigned int *)(v29 + 20);
        *(_QWORD *)(*(_QWORD *)(v29 + 8) + 8 * v33) = *(_QWORD *)v35;
        v34 = v45;
      }
      else
      {
        *(_QWORD *)&(*v32)[8 * v33] = v31;
        v34 = v31;
      }
      *(_DWORD *)(v29 + 20) = v33 + 1;
      *((_QWORD *)v34 + 4) = v29;
    }
    else
    {
      v40 = 3456;
      if (v25 == 1)
        v40 = 3455;
      v31 = (JSC::B3::Value *)a1[v40];
    }
  }
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isNotString(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, uint64_t a3)
{
  JSC::FTL::Output *v4;
  char *v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  uint64_t v11;
  uint64_t v12;

  if ((a3 & 0x30000000) != 0)
  {
    if ((a3 & 0x2800CFFFFFF7) != 0)
      goto LABEL_3;
    v11 = 27648;
  }
  else
  {
    v11 = 27640;
  }
  v12 = *(_QWORD *)((char *)this + v11);
  if (v12)
    return (JSC::B3::Value *)v12;
LABEL_3:
  v4 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v5 = (char *)this + 3136;
  v6 = *((_QWORD *)this + 395);
  if (v6)
  {
    v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v6);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add(v4, a2, v7);
  }
  v8 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(v4, (uint64_t)v5, (uint64_t)a2);
  v9 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v4, 2);
  return JSC::FTL::Output::notEqual(v4, v8, v9);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateStringOrOther(_QWORD *a1, unint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  JSC::B3::BasicBlock *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::B3::Value *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  uint64_t v40;
  uint64_t v41;
  int8x8_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  JSC::B3::Value *v54;
  uint64_t v55;
  uint64_t v56;
  int8x8_t v57;

  result = JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck((uint64_t)(a1 + 3516), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v12 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
    v13 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
    v14 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 3455));
    JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v22, v12, v13, NAN, NAN, v23, v24, v25, v26);
    a1[3472] = v12;
    v27 = a1[3473];
    a1[3473] = v13;
    if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(a1[3519], a2, 0xFFFFD3FF30000008, v28, v29, v30, v31, v32))
    {
    }
    JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 3455), v14, v33, v34, v35, v36, v37, v38);
    a1[3472] = v13;
    a1[3473] = v14;
    if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(a1[3519], a2, 0x2E00FFFFFFF7, v43, v44, v45, v46, v47))
    {
    }
    result = JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 3455), v14, v48, v49, v50, v51, v52, v53);
    a1[3472] = v14;
    a1[3473] = v27;
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowStringIdent(_QWORD *a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const JSC::FTL::AbstractHeap *v17;
  uint64_t v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v17 = (const JSC::FTL::AbstractHeap *)a1[3313];
  v18 = *((_QWORD *)v17 + 3);
  v19 = (uint64_t)v11;
  if (v18)
  {
    v20 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v18);
    v19 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), v11, v20);
  }
  v21 = JSC::FTL::Output::load((uint64_t)(a1 + 3455), v17, v19, 2);
  return v21;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowString(_QWORD *a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return v11;
}

uint64_t JSC::FTL::Output::loadPtr(JSC::FTL::Output *this, JSC::B3::Value *a2, const JSC::FTL::AbstractHeap *a3)
{
  uint64_t v6;
  JSC::B3::Value *v7;

  v6 = *((_QWORD *)a3 + 3);
  if (v6)
  {
    v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(this, v6);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add(this, a2, v7);
  }
  return JSC::FTL::Output::load((uint64_t)this, a3, (uint64_t)a2, 2);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateStringIdent(uint64_t a1, uint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Value *v8;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  JSC::B3::Value *v19;
  int8x8_t v20;
  uint64_t v21;
  JSC::B3::Value *v22;
  JSC::B3::Value *v23;
  JSC::B3::Value *v24;
  JSC::B3::Value *v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  JSC::B3::Value *v28;
  int8x8_t v29;
  char **v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  JSC::DFG::AbstractValue *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  JSC::B3::Value *v51;

  v8 = (JSC::B3::Value *)a4;
  v12 = *(_QWORD *)(a1 + 28152);
  v13 = *(_QWORD *)(v12 + 8);
  v14 = a2 & 0xFF00FFFFFFFFFFFELL;
  v15 = (_QWORD *)(v13 + 24);
  v16 = (_QWORD *)(v13 + 8);
  if ((a2 & 1) != 0)
    v16 = v15;
  v17 = *v16 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v18 = (void *)*(unsigned int *)(v12 + 88);
  if ((_DWORD)v18 != *(_DWORD *)(v17 + 20))
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v17, v18, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v17 + 20) = (_DWORD)v18;
  }
  if ((*(_BYTE *)(v17 + 11) & 0x20) != 0)
  {
    v21 = *(_QWORD *)(a1 + 5224);
    if (v21)
    {
      v22 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v21);
      v8 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v8, v22);
    }
    v23 = (JSC::B3::Value *)JSC::FTL::Output::load(a1 + 27640, (const JSC::FTL::AbstractHeap *)(a1 + 5200), (uint64_t)v8, 1);
    v24 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 16);
    v25 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v23, v24);
    v26 = *(_QWORD *)(a1 + 27776);
    v27 = *(JSC::B3::Value **)(a1 + 27760);
    v28 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *(_QWORD *)(a1 + 27768), (uint64_t)v25, *(_QWORD *)(a1 + 27656));
    JSC::B3::Procedure::addValueImpl(v27, v28);
    v51 = v28;
    v30 = (char **)(v26 + 8);
    v31 = *(unsigned int *)(v26 + 20);
    if ((_DWORD)v31 == *(_DWORD *)(v26 + 16))
    {
      v50 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v30, v31 + 1, (unint64_t)&v51);
      v31 = *(unsigned int *)(v26 + 20);
      *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * v31) = *(_QWORD *)v50;
      v32 = v51;
    }
    else
    {
      *(_QWORD *)&(*v30)[8 * v31] = v28;
      v32 = v28;
    }
    *(_DWORD *)(v26 + 20) = v31 + 1;
    *((_QWORD *)v32 + 4) = v26;
    v39 = *(_QWORD *)(a1 + 28152);
    v40 = *(_QWORD *)(v39 + 8);
    v41 = (_QWORD *)(v40 + 24);
    v42 = (_QWORD *)(v40 + 8);
    if ((a2 & 1) != 0)
      v42 = v41;
    v43 = *v42 + 32 * *(unsigned int *)(v14 + 20);
    v44 = (JSC::DFG::AbstractValue *)v43;
    v45 = *(unsigned int *)(v39 + 88);
    if ((_DWORD)v45 != *(_DWORD *)(v43 + 20))
    {
      if ((*(_QWORD *)(v43 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v43, (void *)v45, v33, v34, v35, v36, v37, v38);
      else
        *(_DWORD *)(v43 + 20) = v45;
    }
    v48 = *(_QWORD *)(v43 + 8);
    v47 = (unint64_t *)(v43 + 8);
    v46 = v48;
    v49 = v48 & 0xFFFFFFFFDFFFFFFFLL;
    if ((v48 & 0xFFFFFFFFDFFFFFFFLL) != v48)
    {
      if ((v46 & 0x2800FFFFFFF7) != 0)
      {
        if (JSC::DFG::AbstractValue::filterSlow(v44, 0xFFFFFFFFDFFFFFFFLL, v33, v34, v35, v36, v37, v38))
LABEL_16:
          *(_BYTE *)(*(_QWORD *)(a1 + 28152) + 80) = 0;
      }
      else
      {
        *v47 = v49;
        if (!v49)
        {
          JSC::DFG::AbstractValue::clear(v44, v45, v33, v34, v35, v36, v37, v38);
          goto LABEL_16;
        }
      }
    }
  }
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isRopeString(JSC::DFG::Graph **a1, JSC::B3::Value *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::DFG::Graph *v24;
  unsigned int v25;
  JSC::FTL::Output *v26;
  const JSC::FTL::AbstractHeap *v27;
  uint64_t v28;
  JSC::B3::Value *v29;
  JSC::B3::Value *v30;
  JSC::B3::Value *v31;
  JSC::B3::Value *v32;
  JSC::DFG::Graph *v33;
  __int128 *v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  __int128 v53;

  v10 = a3 & 0xFF00FFFFFFFFFFFFLL;
  if ((a3 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_6;
    return a1[3456];
  if (v18)
  {
    if ((v18 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v18 + 5) == 2 && (*(_BYTE *)(v18 + 8) & 1) == 0)
      return a1[3456];
  }
  v24 = *a1;
  v25 = *(unsigned __int16 *)(v10 + 18);
  if (v25 <= 2)
    goto LABEL_18;
  if (*(unsigned __int16 *)(v10 + 18) > 0xB5u)
  {
    if (v25 != 182)
    {
      if (v25 != 355 && v25 != 348)
        goto LABEL_6;
      v35 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
      goto LABEL_19;
    }
LABEL_18:
    v35 = *(__int128 **)(v10 + 72);
LABEL_19:
    DWORD2(v53) = 0;
    *(_QWORD *)&v53 = v35;
    goto LABEL_20;
  }
  if (v25 != 3)
    goto LABEL_6;
  v53 = *(_OWORD *)*(_QWORD *)(v10 + 72);
LABEL_20:
  JSC::DFG::LazyJSValue::tryGetString((uint64_t **)&v53, v24, v19, v20, v21, v22, v23, (int **)&v52);
  v43 = v52;
  if (v52)
  {
    v33 = a1[3456];
    v52 = 0;
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
    return v33;
  }
LABEL_6:
  v26 = (JSC::FTL::Output *)(a1 + 3455);
  v27 = a1[3313];
  v28 = *((_QWORD *)v27 + 3);
  if (v28)
  {
    v29 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v26, v28);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add(v26, a2, v29);
  }
  v30 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)v26, v27, (uint64_t)a2, 2);
  v31 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v26, 1);
  v32 = JSC::FTL::Output::bitAnd(v26, v30, v31);
  return JSC::FTL::Output::notZero64(v26, v32);
}

uint64_t JSC::FTL::Output::load32(JSC::FTL::Output *this, JSC::B3::Value *a2, const JSC::FTL::AbstractHeap *a3)
{
  uint64_t v6;
  JSC::B3::Value *v7;

  v6 = *((_QWORD *)a3 + 3);
  if (v6)
  {
    v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(this, v6);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add(this, a2, v7);
  }
  return JSC::FTL::Output::load((uint64_t)this, a3, (uint64_t)a2, 1);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateSymbol(_QWORD *a1, uint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  JSC::B3::Value *v28;
  char **v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  char *v32;
  uint64_t v33;
  JSC::B3::Value *v34;

  v11 = a1[3519];
  v12 = *(_QWORD *)(v11 + 8);
  v13 = (_QWORD *)(v12 + 24);
  v14 = (_QWORD *)(v12 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (void *)*(unsigned int *)(v11 + 88);
  if ((_DWORD)v16 != *(_DWORD *)(v15 + 20))
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v15, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v15 + 20) = (_DWORD)v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0xFFFFFFFFBFFFFFFFLL) != 0)
  {
    v17 = a1[395];
    if (v17)
    {
      v18 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v17);
      v19 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), a3, v18);
    }
    else
    {
      v19 = (uint64_t)a3;
    }
    v20 = JSC::FTL::Output::load8ZeroExt32(a1 + 3455, (uint64_t)(a1 + 392), v19);
    v21 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), 4);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 312))(v20, v21);
    if (v22 == 2)
    {
      v26 = a1[3472];
      v27 = (JSC::B3::Value *)a1[3470];
      v28 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, a1[3471], v20, v21);
      JSC::B3::Procedure::addValueImpl(v27, v28);
      v34 = v28;
      v29 = (char **)(v26 + 8);
      v30 = *(unsigned int *)(v26 + 20);
      if ((_DWORD)v30 == *(_DWORD *)(v26 + 16))
      {
        v32 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)&v34);
        v30 = *(unsigned int *)(v26 + 20);
        *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * v30) = *(_QWORD *)v32;
        v31 = v34;
      }
      else
      {
        *(_QWORD *)&(*v29)[8 * v30] = v28;
        v31 = v28;
      }
      *(_DWORD *)(v26 + 20) = v30 + 1;
      *((_QWORD *)v31 + 4) = v26;
    }
    else
    {
      v33 = 3456;
      if (v22 == 1)
        v33 = 3455;
      v28 = (JSC::B3::Value *)a1[v33];
    }
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateStringObjectForCell(_QWORD *a1, uint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int8x8_t v45;
  uint64_t v46;
  JSC::B3::Value *v47;
  JSC::B3::Value *v48;
  char **v49;
  uint64_t v50;
  JSC::B3::Value *v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  unsigned int v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  JSC::B3::Value *v70;

  v11 = a1[3519];
  v12 = *(_QWORD *)(v11 + 8);
  v13 = a2 & 0xFF00FFFFFFFFFFFELL;
  v14 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v15 = (uint64_t *)(v12 + 24);
  v16 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v16 = v15;
  v17 = *v16;
  v18 = *v16 + 32 * v14;
  v19 = *(_DWORD *)(v11 + 88);
  v20 = *(_DWORD *)(v18 + 20);
  if (v19 != v20)
  {
    if ((*(_QWORD *)(v18 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v20 ^ v19) >= 2)
      {
        v52 = *(_QWORD *)v18;
        if (*(_QWORD *)v18 != 4)
        {
          *(_QWORD *)v18 = v52 | 2;
          v53 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v52 & 1) != 0)
          {
            v62 = 2 * *v53;
            while (v62 * 4)
            {
              v63 = *(_QWORD *)&v53[v62];
              if ((*(_BYTE *)(v63 + 19) & 0xC) == 0)
              {
                v64 = *(_QWORD *)(v63 + 96);
                v65 = (v64 & 1) != 0 ? (v64 >> 1) & 3 : *(unsigned __int8 *)(v64 + 4);
                v62 -= 2;
                if (v65 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v53, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              goto LABEL_58;
            }
          }
          else if (v53)
          {
            if ((*((_BYTE *)v53 + 19) & 0xC) != 0
              || ((v54 = *((_QWORD *)v53 + 12), (v54 & 1) != 0)
                ? (v55 = (v54 >> 1) & 3)
                : (v55 = *(unsigned __int8 *)(v54 + 4)),
                  v55 == 2))
            {
LABEL_58:
              *(_QWORD *)v18 = 4;
            }
          }
        }
        *(_DWORD *)(v17 + 32 * v14 + 16) = -21020677;
      }
      if ((v19 & 1) != 0)
        *(_QWORD *)v18 &= ~2uLL;
    }
    *(_DWORD *)(v18 + 20) = v19;
  }
  if ((*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFDFFFFLL) != 0)
  {
    v21 = a1[395];
    v22 = (uint64_t)a3;
    if (v21)
    {
      v23 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v21);
      v22 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), a3, v23);
    }
    v31 = JSC::FTL::Output::load8ZeroExt32(a1 + 3455, (uint64_t)(a1 + 392), v22);
    v32 = a1[3519];
    v33 = *(_QWORD *)(v32 + 8);
    v34 = *(unsigned int *)(v13 + 20);
    v35 = (uint64_t *)(v33 + 24);
    v36 = (uint64_t *)(v33 + 8);
    if ((a2 & 1) != 0)
      v36 = v35;
    v37 = *v36;
    v38 = *v36 + 32 * v34;
    v39 = *(_DWORD *)(v32 + 88);
    v40 = *(_DWORD *)(v38 + 20);
    if (v39 != v40)
    {
      if ((*(_QWORD *)(v38 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v40 ^ v39) >= 2)
        {
          v56 = *(_QWORD *)v38;
          if (*(_QWORD *)v38 != 4)
          {
            *(_QWORD *)v38 = v56 | 2;
            v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v56 & 1) != 0)
            {
              v66 = 2 * *v57;
              while (v66 * 4)
              {
                v67 = *(_QWORD *)&v57[v66];
                if ((*(_BYTE *)(v67 + 19) & 0xC) == 0)
                {
                  v68 = *(_QWORD *)(v67 + 96);
                  v69 = (v68 & 1) != 0 ? (v68 >> 1) & 3 : *(unsigned __int8 *)(v68 + 4);
                  v66 -= 2;
                  if (v69 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v57, v24, v25, v26, v27, v28, v29, v30);
                goto LABEL_67;
              }
            }
            else if (v57)
            {
              if ((*((_BYTE *)v57 + 19) & 0xC) != 0
                || ((v58 = *((_QWORD *)v57 + 12), (v58 & 1) != 0)
                  ? (v59 = (v58 >> 1) & 3)
                  : (v59 = *(unsigned __int8 *)(v58 + 4)),
                    v59 == 2))
              {
LABEL_67:
                *(_QWORD *)v38 = 4;
              }
            }
          }
          *(_DWORD *)(v37 + 32 * v34 + 16) = -21020677;
        }
        if ((v39 & 1) != 0)
          *(_QWORD *)v38 &= ~2uLL;
      }
      *(_DWORD *)(v38 + 20) = v39;
    }
    if ((*(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFDFFFFLL) != 0)
    {
      v41 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), 76);
      v42 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 312))(v31, v41);
      if (v42 == 2)
      {
        v46 = a1[3472];
        v47 = (JSC::B3::Value *)a1[3470];
        v48 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, a1[3471], v31, v41);
        JSC::B3::Procedure::addValueImpl(v47, v48);
        v70 = v48;
        v49 = (char **)(v46 + 8);
        v50 = *(unsigned int *)(v46 + 20);
        if ((_DWORD)v50 == *(_DWORD *)(v46 + 16))
        {
          v60 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v49, v50 + 1, (unint64_t)&v70);
          v50 = *(unsigned int *)(v46 + 20);
          *(_QWORD *)(*(_QWORD *)(v46 + 8) + 8 * v50) = *(_QWORD *)v60;
          v51 = v70;
        }
        else
        {
          *(_QWORD *)&(*v49)[8 * v50] = v48;
          v51 = v48;
        }
        *(_DWORD *)(v46 + 20) = v50 + 1;
        *((_QWORD *)v51 + 4) = v46;
      }
      else
      {
        v61 = 3456;
        if (v42 == 1)
          v61 = 3455;
        v48 = (JSC::B3::Value *)a1[v61];
      }
    }
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateHeapBigInt(_QWORD *a1, uint64_t a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int8x8_t v28;
  uint64_t v29;
  JSC::B3::Value *v30;
  JSC::B3::Value *v31;
  char **v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  JSC::B3::Value *v45;

  v11 = a1[3519];
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v12 + 24);
  v15 = (uint64_t *)(v12 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v11 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v35 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v35 | 2;
          v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v35 & 1) != 0)
          {
            v41 = 2 * *v36;
            while (v41 * 4)
            {
              v42 = *(_QWORD *)&v36[v41];
              if ((*(_BYTE *)(v42 + 19) & 0xC) == 0)
              {
                v43 = *(_QWORD *)(v42 + 96);
                v44 = (v43 & 1) != 0 ? (v43 >> 1) & 3 : *(unsigned __int8 *)(v43 + 4);
                v41 -= 2;
                if (v44 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v36, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              goto LABEL_40;
            }
          }
          else if (v36)
          {
            if ((*((_BYTE *)v36 + 19) & 0xC) != 0
              || ((v37 = *((_QWORD *)v36 + 12), (v37 & 1) != 0)
                ? (v38 = (v37 >> 1) & 3)
                : (v38 = *(unsigned __int8 *)(v37 + 4)),
                  v38 == 2))
            {
LABEL_40:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0xFFFFF7FFFFFFFFFFLL) != 0)
  {
    v20 = a1[395];
    if (v20)
    {
      v21 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v20);
      v22 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), a3, v21);
    }
    else
    {
      v22 = (uint64_t)a3;
    }
    v23 = JSC::FTL::Output::load8ZeroExt32(a1 + 3455, (uint64_t)(a1 + 392), v22);
    v24 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 3455), 3);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 312))(v23, v24);
    if (v25 == 2)
    {
      v29 = a1[3472];
      v30 = (JSC::B3::Value *)a1[3470];
      v31 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, a1[3471], v23, v24);
      JSC::B3::Procedure::addValueImpl(v30, v31);
      v45 = v31;
      v32 = (char **)(v29 + 8);
      v33 = *(unsigned int *)(v29 + 20);
      if ((_DWORD)v33 == *(_DWORD *)(v29 + 16))
      {
        v39 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v32, v33 + 1, (unint64_t)&v45);
        v33 = *(unsigned int *)(v29 + 20);
        *(_QWORD *)(*(_QWORD *)(v29 + 8) + 8 * v33) = *(_QWORD *)v39;
        v34 = v45;
      }
      else
      {
        *(_QWORD *)&(*v32)[8 * v33] = v31;
        v34 = v31;
      }
      *(_DWORD *)(v29 + 20) = v33 + 1;
      *((_QWORD *)v34 + 4) = v29;
    }
    else
    {
      v40 = 3456;
      if (v25 == 1)
        v40 = 3455;
      v31 = (JSC::B3::Value *)a1[v40];
    }
  }
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isString(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, uint64_t a3)
{
  JSC::FTL::Output *v4;
  char *v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  uint64_t v11;
  uint64_t v12;

  if ((a3 & 0x2800CFFFFFF7) != 0)
  {
    if ((a3 & 0x30000000) != 0)
      goto LABEL_3;
    v11 = 27648;
  }
  else
  {
    v11 = 27640;
  }
  v12 = *(_QWORD *)((char *)this + v11);
  if (v12)
    return (JSC::B3::Value *)v12;
LABEL_3:
  v4 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v5 = (char *)this + 3136;
  v6 = *((_QWORD *)this + 395);
  if (v6)
  {
    v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v6);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add(v4, a2, v7);
  }
  v8 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(v4, (uint64_t)v5, (uint64_t)a2);
  v9 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v4, 2);
  return JSC::FTL::Output::equal(v4, v8, v9);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isSymbol(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, uint64_t a3)
{
  JSC::FTL::Output *v3;
  JSC::B3::Value *v4;
  JSC::B3::Value *v5;
  uint64_t v7;
  uint64_t v8;

  if ((a3 & 0x2800BFFFFFF7) != 0)
  {
    if ((a3 & 0x40000000) != 0)
    {
LABEL_3:
      v3 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
      v4 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), a2, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3136));
      v5 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v3, 4);
      return JSC::FTL::Output::equal(v3, v4, v5);
    }
    v7 = 27648;
  }
  else
  {
    v7 = 27640;
  }
  v8 = *(_QWORD *)((char *)this + v7);
  if (!v8)
    goto LABEL_3;
  return (JSC::B3::Value *)v8;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowNotCell(uint64_t *a1, unint64_t a2)
{
  JSC::B3::Value *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  uint64_t v11;
  uint64_t v12;
  int8x8_t v13;

  if (JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::needsTypeCheck(a1[3519], a2, 0xFFFFD3FF00000008, v5, v6, v7, v8, v9))
  {
  }
  return v4;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isInt32(JSC::B3::Value **this, JSC::B3::Value *a2, uint64_t a3)
{
  uint64_t v4;
  JSC::B3::Value *v5;

  if ((a3 & 0xFFFFFFFCFFFFFFFFLL) != 0)
  {
    if ((a3 & 0x300000000) != 0)
      return JSC::FTL::Output::aboveOrEqual((JSC::FTL::Output *)(this + 3455), a2, this[3487]);
    v4 = 3456;
  }
  else
  {
    v4 = 3455;
  }
  v5 = this[v4];
  if (!v5)
    return JSC::FTL::Output::aboveOrEqual((JSC::FTL::Output *)(this + 3455), a2, this[3487]);
  return v5;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isHeapBigInt(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, uint64_t a3)
{
  JSC::FTL::Output *v4;
  char *v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  uint64_t v11;
  uint64_t v12;

  if ((a3 & 0x2000FFFFFFF7) != 0)
  {
    if ((a3 & 0x80000000000) != 0)
      goto LABEL_3;
    v11 = 27648;
  }
  else
  {
    v11 = 27640;
  }
  v12 = *(_QWORD *)((char *)this + v11);
  if (v12)
    return (JSC::B3::Value *)v12;
LABEL_3:
  v4 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v5 = (char *)this + 3136;
  v6 = *((_QWORD *)this + 395);
  if (v6)
  {
    v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v6);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add(v4, a2, v7);
  }
  v8 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(v4, (uint64_t)v5, (uint64_t)a2);
  v9 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v4, 3);
  return JSC::FTL::Output::equal(v4, v8, v9);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isObject(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, uint64_t a3)
{
  JSC::FTL::Output *v4;
  char *v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  uint64_t v11;
  uint64_t v12;

  if ((a3 & 0x800F0000000) != 0)
  {
    if ((a3 & 0x20000FFFFFF7) != 0)
      goto LABEL_3;
    v11 = 27648;
  }
  else
  {
    v11 = 27640;
  }
  v12 = *(_QWORD *)((char *)this + v11);
  if (v12)
    return (JSC::B3::Value *)v12;
LABEL_3:
  v4 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v5 = (char *)this + 3136;
  v6 = *((_QWORD *)this + 395);
  if (v6)
  {
    v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v6);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add(v4, a2, v7);
  }
  v8 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(v4, (uint64_t)v5, (uint64_t)a2);
  v9 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v4, 23);
  return JSC::FTL::Output::aboveOrEqual(v4, v8, v9);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,long long,WTF::UniquedStringImpl *),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationToObject);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::weakPointer(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)this + 24) + 280), (unint64_t)a2, a3, a4, a5, a6, a7, a8);
  return JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)a2);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,long long),JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  JSC::DFG::Node *v14;

  v12 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationCallObjectConstructor);
  v13 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *>((_QWORD *)(a1 + 27640), v11, v12, *a2, *a3);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::callPreflight(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v9 = v37;
  v10 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
  v11 = *(_QWORD *)(v10 + 64);
  if ((v37 & 1) != 0)
  {
    v31 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
    if ((v37 & 2) != 0
      || ((v32 = *(unsigned int *)((v37 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v32 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else if (v32 >> 28)
    {
      v35 = *(_QWORD *)(v10 + 64);
      v36 = WTF::fastMalloc((WTF *)0x10);
      v11 = v35;
      *(_QWORD *)v36 = v31;
      *(_DWORD *)(v36 + 8) = v32;
      v34 = 1;
      v31 = v36;
    }
    else
    {
      v34 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
      v31 = v32 << 36;
    }
    v9 = v31 | v34;
  }
  v38 = v9;
  v19 = JSC::DFG::CodeOriginPool::addCodeOrigin(v11, &v38);
  if ((v38 & 1) != 0 && (v38 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v38 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
  v20 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v19);
  v21 = (JSC::B3::Value *)*((_QWORD *)this + 3484);
  if (!*((_QWORD *)this + 2855))
    JSC::FTL::IndexedAbstractHeap::initialize((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 22536), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 22800), 4);
  v22 = *((_QWORD *)this + 2853);
  if (v22 != -4)
  {
    v23 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v22 + 4);
    v21 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v21, v23);
  }
  JSC::FTL::Output::store((uint64_t)this + 27640, v20, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 22800), (uint64_t)v21);
  if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
}

uint64_t JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a1 + 136);
  v7 = JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::Value **)(a1 + 120), a2, *(_QWORD *)(a1 + 128), a3, a4, a5, a6);
  v13 = v7;
  v8 = (char **)(v6 + 8);
  v9 = *(unsigned int *)(v6 + 20);
  if ((_DWORD)v9 == *(_DWORD *)(v6 + 16))
  {
    v12 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v9 + 1, (unint64_t)&v13);
    v9 = *(unsigned int *)(v6 + 20);
    *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8 * v9) = *(_QWORD *)v12;
    v10 = v13;
  }
  else
  {
    *(_QWORD *)&(*v8)[8 * v9] = v7;
    v10 = v7;
  }
  *(_DWORD *)(v6 + 20) = v9 + 1;
  *(_QWORD *)(v10 + 32) = v6;
  return v7;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::resultTypeForOperation<JSC::ExceptionOperationResult<JSC::JSCell *>>(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;

  v2 = (unsigned int *)(a1 + 28264);
  result = *(unsigned int *)(a1 + 28264);
  if ((result & 0x80000000) == 0)
  {
    v4 = *(_QWORD *)(a1 + 27848);
    v13 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v13 = 0x200000002;
    v14 = 0x200000002;
    result = JSC::B3::Procedure::addTuple(v4, (unint64_t)&v13);
    *v2 = result;
    v12 = v13;
    if (v13)
    {
      v13 = 0;
      LODWORD(v14) = 0;
      WTF::fastFree((unint64_t)v12, v5, v6, v7, v8, v9, v10, v11);
      return *v2;
    }
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::operationExceptionCheckAndExtractResultIfNeeded<JSC::ExceptionOperationResult<JSC::JSCell *>>(uint64_t a1, JSC::B3::Value *a2, JSC::DFG::Node *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::DFG *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  char v17;
  _QWORD *v18;
  JSC::JSCell *v19;
  JSC::B3::Value *Ptr;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::B3::Value *v25;
  JSC::DFG *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x8_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  JSC::DFG *v95;
  unint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  int64x2_t v99;
  _QWORD *v100;
  uint64_t v101;

  if (!JSC::DFG::mayExit(*(JSC::DFG **)a1, *(JSC::DFG::Graph **)(a1 + 28224), a3))
    goto LABEL_21;
  v12 = *(JSC::DFG **)a1;
  v13 = *(_QWORD *)(a1 + 28192);
  if ((v13 & 1) == 0)
  {
    v14 = *((_QWORD *)v12 + 4);
LABEL_4:
    v15 = (_QWORD *)(v13 & 0xFFFFFFFF8);
    v16 = 1;
    v17 = 1;
    goto LABEL_5;
  }
  v80 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v81 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v81 != 0x3FFFFFFF) ? (v82 = v81 == -1) : (v82 = 1), v82))
  {
    v83 = 2;
  }
  else if (v81 >> 28)
  {
    v92 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v92 = v80;
    *(_DWORD *)(v92 + 8) = v81;
    v83 = 1;
    v80 = v92;
  }
  else
  {
    v83 = v80;
    v80 = 0;
  }
  v13 = v80 | v83;
  v14 = *((_QWORD *)v12 + 4);
  if (((v80 | v83) & 1) == 0)
    goto LABEL_4;
  v84 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v85 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v85 != 0x3FFFFFFF) ? (v86 = v85 == -1) : (v86 = 1), v86))
  {
    v87 = 2;
  }
  else if (v85 >> 28)
  {
    v94 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v94 = v84;
    *(_DWORD *)(v94 + 8) = v85;
    v87 = 1;
    v84 = v94;
  }
  else
  {
    v87 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    v84 = 0;
  }
  v88 = v84 | v87;
  v15 = (_QWORD *)(v88 & 0xFFFFFFFF8);
  if ((v88 & 1) != 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = (_QWORD *)*v15;
    goto LABEL_6;
  }
  v17 = 0;
  v16 = 1;
LABEL_5:
  v18 = v15;
LABEL_6:
  if (v18)
    v14 = v18[1];
  v19 = *(JSC::JSCell **)(v14 + 8);
  if ((v16 & 1) == 0 && v15)
    WTF::fastFree((unint64_t)v15, v5, v6, v7, v8, v9, v10, v11);
  if ((v17 & 1) == 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v5, v6, v7, v8, v9, v10, v11);
  Ptr = a2;
  if ((*((_DWORD *)a2 + 4) & 0x80000000) != 0)
    Ptr = (JSC::B3::Value *)JSC::FTL::Output::extract((JSC::FTL::Output *)(a1 + 27640), a2, 1u);
  if (HIBYTE(word_1ECF4C620))
  {
    v72 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationExceptionFuzz);
    JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::BasicBlock **)(a1 + 27776), *(JSC::B3::Value **)(a1 + 27760), 0, *(_QWORD *)(a1 + 27768), v72, v79);
    Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::Output *)(a1 + 27640), *(JSC::B3::Value **)(a1 + 27880), (const JSC::FTL::AbstractHeap *)(a1 + 6304));
  }
  v25 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), Ptr);
  v97 = 0;
  v98 = 2;
  v26 = *(JSC::DFG **)a1;
  v27 = *(_QWORD *)(a1 + 28200);
  if ((v27 & 1) != 0)
  {
    v89 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
    if ((v27 & 2) != 0
      || (v90 = *(unsigned int *)((v27 & 0xFFFFFFFF8) + 8), (_DWORD)v90 == 0x3FFFFFFF)
      || (_DWORD)v90 == -1)
    {
      v91 = 2;
    }
    else if (v90 >> 28)
    {
      v95 = *(JSC::DFG **)a1;
      v93 = WTF::fastMalloc((WTF *)0x10);
      v26 = v95;
      *(_QWORD *)v93 = v89;
      *(_DWORD *)(v93 + 8) = v90;
      v91 = 1;
      v89 = v93;
    }
    else
    {
      v91 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
      v89 = v90 << 36;
    }
    v27 = v89 | v91;
  }
  v96 = v27;
  v35 = JSC::DFG::Graph::willCatchExceptionInMachineFrame((uint64_t)v26, &v96, &v98, &v97, v21, v22, v23, v24);
  if ((v96 & 1) != 0 && (v96 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v96 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
  if (v35)
  {
    JSC::CodeOrigin::CodeOrigin(&v101, (const JSC::CodeOrigin *)&v98);
    v64 = (int8x8_t)JSC::DFG::NodeOrigin::withForExitAndExitOK(&v99, (uint64_t *)(a1 + 28192), (unint64_t *)&v101, v59, v60, v61, v62, v63).u64[0];
    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v99, v65, v66, v67, v68, v69, v70, v71);
    if ((v101 & 1) != 0 && (v101 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v101 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  }
  else
  {
    v36 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v37 = v36;
    v38 = *(_QWORD *)(a1 + 27784);
    if (v38)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v38, v36);
    }
    else
    {
      v101 = v36;
      v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v51 = 0u;
      *((_OWORD *)v51 + 1) = 0u;
      v51[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v51;
      v100 = v51;
      v51[2] = v37;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), &v101, (uint64_t *)&v100, v52, v53, v54, v55, v56, (uint64_t)&v99);
      v57 = v100;
      v58 = *(_QWORD **)(a1 + 27832);
      *v100 = a1 + 27824;
      v57[1] = v58;
      *v58 = v57;
      *(_QWORD *)(a1 + 27832) = v57;
    }
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v25, *(_QWORD *)(a1 + 27856), v37, 0.0, 1.0, v39, v40, v41, v42);
    *(_QWORD *)(a1 + 27776) = v37;
  }
  if ((v98 & 1) != 0 && (v98 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v98 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
LABEL_21:
  if ((*((_DWORD *)a2 + 4) & 0x80000000) != 0)
    return JSC::FTL::Output::extract((JSC::FTL::Output *)(a1 + 27640), a2, 0);
  return (uint64_t)a2;
}

uint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::codeOriginDescriptionOfCallSite(uint64_t *this, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;

  v8 = a2[3524];
  if ((v8 & 1) != 0)
  {
    v18 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 2) != 0
      || ((v19 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v19 != 0x3FFFFFFF)
        ? (v20 = (_DWORD)v19 == -1)
        : (v20 = 1),
          v20))
    {
      v21 = 2;
    }
    else if (v19 >> 28)
    {
      v32 = this;
      v27 = a2;
      v28 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
      v29 = WTF::fastMalloc((WTF *)0x10);
      a2 = v27;
      v18 = v29;
      this = v32;
      *(_QWORD *)v18 = v28;
      *(_DWORD *)(v18 + 8) = v19;
      v21 = 1;
    }
    else
    {
      v21 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
      v18 = v19 << 36;
    }
    v8 = v18 | v21;
  }
  *this = v8;
  if (*(unsigned __int16 *)(a2[3528] + 18) - 249 <= 3)
  {
    v9 = (_QWORD *)(v8 & 0xFFFFFFFF8);
    v10 = (_QWORD *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 1) != 0)
      v10 = (_QWORD *)*v9;
    do
    {
      v11 = v10;
      v12 = v10[2];
      v13 = v10[3] >> 60;
      v10 = (_QWORD *)(v12 & 0xFFFFFFFF8);
      if ((v12 & 1) != 0)
        v10 = (_QWORD *)*v10;
      v14 = (v13 < 0xC) & (0x824u >> v13);
      if (v10)
        v15 = v14;
      else
        v15 = 0;
    }
    while ((v15 & 1) != 0);
    if (v14)
      v16 = 0;
    else
      v16 = v11 + 2;
    if (v16 != this)
    {
      if ((v8 & 1) != 0 && v9)
      {
        v22 = this;
        WTF::fastFree(v8 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        this = v22;
      }
      v17 = *v16;
      if ((*v16 & 1) != 0)
      {
        v31 = this;
        v23 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
        if ((v17 & 2) != 0
          || ((v24 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v24 != 0x3FFFFFFF)
            ? (v25 = (_DWORD)v24 == -1)
            : (v25 = 1),
              v25))
        {
          v26 = 2;
        }
        else if (v24 >> 28)
        {
          v30 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v30 = v23;
          *(_DWORD *)(v30 + 8) = v24;
          v26 = 1;
          v23 = v30;
        }
        else
        {
          v26 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
          v23 = v24 << 36;
        }
        v17 = v23 | v26;
        this = v31;
      }
      *this = v17;
    }
  }
  return this;
}

uint64_t JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(JSC::B3::Value *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v14 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v14 = off_1E357F5F0;
  *(_DWORD *)(v14 + 8) = -1;
  *(_WORD *)(v14 + 12) = 82;
  *(_DWORD *)(v14 + 16) = a2;
  *(_BYTE *)(v14 + 20) = 4;
  *(_QWORD *)(v14 + 24) = a3;
  *(_QWORD *)(v14 + 32) = 0;
  v15 = JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v14);
  *(_QWORD *)v15 = v15 + 16;
  *(_QWORD *)(v15 + 8) = 3;
  v16 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v15 = v16;
  v17 = *(unsigned int *)(v15 + 12);
  *(_QWORD *)(v16 + 8 * v17) = a4;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 1)) = a5;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 2)) = a6;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 3)) = a7;
  *(_DWORD *)(v15 + 8) = 4;
  *(_DWORD *)(v15 + 12) = v17 + 4;
  *(_QWORD *)v14 = &unk_1E357CF78;
  *(_OWORD *)(v14 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v14 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v14 + 76))
    return (uint64_t)JSC::B3::Procedure::addValueImpl(a1, (JSC::B3::Value *)v14);
  result = 60;
  __break(0xC471u);
  return result;
}

int64x2_t JSC::DFG::NodeOrigin::withForExitAndExitOK(int64x2_t *a1, uint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int64x2_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v9 = *a2;
  if ((*a2 & 2) != 0)
  {
    result = vdupq_n_s64(2uLL);
    *a1 = result;
    a1[1].i16[0] = 0;
  }
  else
  {
    if ((v9 & 1) != 0)
    {
      v15 = v9 & 0xFFFFFFFF8;
      v16 = *(_QWORD *)v15;
      v17 = *(unsigned int *)(v15 + 8);
      if ((_DWORD)v17 == 0x3FFFFFFF || (_DWORD)v17 == -1)
      {
        v19 = 2;
      }
      else if (v17 >> 28)
      {
        v34 = (unint64_t)a2;
        v28 = v17;
        v29 = WTF::fastMalloc((WTF *)0x10);
        a2 = (uint64_t *)v34;
        *(_QWORD *)v29 = v16;
        *(_DWORD *)(v29 + 8) = v28;
        v19 = 1;
        v16 = v29;
      }
      else
      {
        v19 = v16;
        v16 = v17 << 36;
      }
      v9 = v16 | v19;
    }
    a1->i64[0] = v9;
    v11 = a2[1];
    if ((v11 & 1) != 0)
    {
      v20 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
      if ((v11 & 2) != 0
        || ((v21 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v21 != 0x3FFFFFFF)
          ? (v22 = (_DWORD)v21 == -1)
          : (v22 = 1),
            v22))
      {
        v23 = 2;
      }
      else if (v21 >> 28)
      {
        v35 = (unint64_t)a2;
        v30 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8);
        v31 = WTF::fastMalloc((WTF *)0x10);
        a2 = (uint64_t *)v35;
        *(_QWORD *)v31 = v20;
        *(_DWORD *)(v31 + 8) = v30;
        v23 = 1;
        v20 = v31;
      }
      else
      {
        v23 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
        v20 = v21 << 36;
      }
      v11 = v20 | v23;
    }
    a1->i64[1] = v11;
    a1[1].i16[0] = *((_WORD *)a2 + 8);
    v12 = *a3;
    if (&a1->u64[1] != a3 && (*a3 & 2) == 0)
    {
      if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(v11 & 0xFFFFFFFF8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v12 = *a3;
      }
      if ((v12 & 1) != 0)
      {
        v24 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
        if ((v12 & 2) != 0
          || ((v25 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
            ? (v26 = (_DWORD)v25 == -1)
            : (v26 = 1),
              v26))
        {
          v27 = 2;
        }
        else if (v25 >> 28)
        {
          v32 = v25;
          v33 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v33 = v24;
          *(_DWORD *)(v33 + 8) = v32;
          v27 = 1;
          v24 = v33;
        }
        else
        {
          v27 = v24;
          v24 = v25 << 36;
        }
        v12 = v24 | v27;
      }
      a1->i64[1] = v12;
    }
    a1[1].i8[0] = 1;
  }
  return result;
}

JSC::B3::Value *JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(JSC::B3::BasicBlock *a1, JSC::B3::Value *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  JSC::B3::Value *v8;

  v8 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(a3, a4, a5, a6);
  JSC::B3::Procedure::addValueImpl(a2, v8);
  JSC::B3::BasicBlock::append(a1, v8);
  return v8;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = WTF::fastMalloc((WTF *)0x68);
  return JSC::B3::CCallValue::CCallValue<JSC::B3::Value *,JSC::B3::Value *>(v8, a1, a2, a3, a4);
}

uint64_t JSC::B3::CCallValue::CCallValue<JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = 82;
  *(_DWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 20) = 4;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)a1, 4, a4, a5);
  *(_QWORD *)a1 = &unk_1E357CF78;
  *(_OWORD *)(a1 + 40) = xmmword_1991243D0;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(a1 + 76))
    return a1;
  result = 60;
  __break(0xC471u);
  return result;
}

uint64_t JSC::FTL::Output::call<JSC::B3::Value *>(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  JSC::B3::Value *v11;
  uint64_t v12;
  _QWORD *v13;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  char *v18;
  uint64_t v19;

  v10 = a1[16];
  v9 = a1[17];
  v11 = (JSC::B3::Value *)a1[15];
  v12 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v12 = off_1E357F5F0;
  *(_DWORD *)(v12 + 8) = -1;
  *(_WORD *)(v12 + 12) = 82;
  *(_DWORD *)(v12 + 16) = a2;
  *(_BYTE *)(v12 + 20) = 4;
  *(_QWORD *)(v12 + 24) = v10;
  *(_QWORD *)(v12 + 32) = 0;
  v13 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v12);
  v13[2] = a3;
  *v13 = v13 + 2;
  v13[3] = a4;
  v13[4] = a5;
  v13[1] = 0x300000003;
  *(_QWORD *)v12 = &unk_1E357CF78;
  *(_OWORD *)(v12 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v12 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v12 + 76))
  {
    JSC::B3::Procedure::addValueImpl(v11, (JSC::B3::Value *)v12);
    v19 = v12;
    v14 = (char **)(v9 + 8);
    v15 = *(unsigned int *)(v9 + 20);
    if ((_DWORD)v15 == *(_DWORD *)(v9 + 16))
    {
      v18 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v15 + 1, (unint64_t)&v19);
      v15 = *(unsigned int *)(v9 + 20);
      *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v15) = *(_QWORD *)v18;
      v16 = v19;
    }
    else
    {
      *(_QWORD *)&(*v14)[8 * v15] = v12;
      v16 = v12;
    }
    *(_DWORD *)(v9 + 20) = v15 + 1;
    *(_QWORD *)(v16 + 32) = v9;
    return v12;
  }
  else
  {
    result = 60;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  JSC::DFG::Node *v22;
  char **v23;
  uint64_t v24;
  WTF *v25;
  uint64_t result;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  char *v36;
  WTF *v37;
  uint64_t v38;

  v12 = (int *)(a1 + 28264);
  v13 = *(_DWORD *)(a1 + 28264);
  if ((v13 & 0x80000000) == 0)
  {
    v27 = *(_QWORD *)(a1 + 27848);
    v37 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v37 = 0x200000002;
    v38 = 0x200000002;
    v13 = JSC::B3::Procedure::addTuple(v27, (unint64_t)&v37);
    *v12 = v13;
    v35 = v37;
    if (v37)
    {
      v37 = 0;
      LODWORD(v38) = 0;
      WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
      v13 = *v12;
    }
  }
  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v15 = *a3;
  v16 = *a4;
  v17 = *(_QWORD *)(a1 + 27776);
  v18 = *(JSC::B3::Value **)(a1 + 27760);
  v19 = *(_QWORD *)(a1 + 27768);
  v20 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v20 = off_1E357F5F0;
  *(_DWORD *)(v20 + 8) = -1;
  *(_WORD *)(v20 + 12) = 82;
  *(_DWORD *)(v20 + 16) = v13;
  *(_BYTE *)(v20 + 20) = 4;
  *(_QWORD *)(v20 + 24) = v19;
  *(_QWORD *)(v20 + 32) = 0;
  v21 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v20);
  v21[2] = v14;
  *v21 = v21 + 2;
  v21[3] = v15;
  v21[4] = v16;
  v21[1] = 0x300000003;
  *(_QWORD *)v20 = &unk_1E357CF78;
  *(_OWORD *)(v20 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v20 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v20 + 76))
  {
    JSC::B3::Procedure::addValueImpl(v18, (JSC::B3::Value *)v20);
    v37 = (WTF *)v20;
    v23 = (char **)(v17 + 8);
    v24 = *(unsigned int *)(v17 + 20);
    if ((_DWORD)v24 == *(_DWORD *)(v17 + 16))
    {
      v36 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v37);
      v24 = *(unsigned int *)(v17 + 20);
      *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v24) = *(_QWORD *)v36;
      v25 = v37;
    }
    else
    {
      *(_QWORD *)&(*v23)[8 * v24] = v20;
      v25 = (WTF *)v20;
    }
    *(_DWORD *)(v17 + 20) = v24 + 1;
    *((_QWORD *)v25 + 4) = v17;
  }
  else
  {
    result = 60;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock>(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  uint64_t v27;

  v14 = a1[16];
  v15 = a1[17];
  v16 = (JSC::B3::Value *)a1[15];
  v17 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v17 = off_1E357F5F0;
  *(_DWORD *)(v17 + 8) = -1;
  *(_WORD *)(v17 + 12) = 153;
  *(_DWORD *)(v17 + 16) = a2;
  *(_BYTE *)(v17 + 20) = 0;
  *(_QWORD *)(v17 + 24) = v14;
  *(_QWORD *)(v17 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v16, (JSC::B3::Value *)v17);
  v27 = v17;
  v18 = (char **)(v15 + 8);
  v19 = *(unsigned int *)(v15 + 20);
  if ((_DWORD)v19 == *(_DWORD *)(v15 + 16))
  {
    v25 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18, v19 + 1, (unint64_t)&v27);
    v19 = *(unsigned int *)(v15 + 20);
    *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8 * v19) = *(_QWORD *)v25;
    v20 = v27;
  }
  else
  {
    *(_QWORD *)&(*v18)[8 * v19] = v17;
    v20 = v17;
  }
  *(_DWORD *)(v15 + 20) = v19 + 1;
  *(_QWORD *)(v20 + 32) = v15;
  if (a3 || a4)
  {
    if ((*(_WORD *)(a3 + 12) & 0xFFF) == 0x98)
      v21 = a3;
    else
      v21 = 0;
    *(_QWORD *)(v21 + 40) = v17;
  }
  if (a5 || a6)
  {
    if ((*(_WORD *)(a5 + 12) & 0xFFF) == 0x98)
      v22 = a5;
    else
      v22 = 0;
    *(_QWORD *)(v22 + 40) = v17;
  }
  if (a7 || a8)
  {
    if ((*(_WORD *)(a7 + 12) & 0xFFF) == 0x98)
      v23 = a7;
    else
      v23 = 0;
    *(_QWORD *)(v23 + 40) = v17;
  }
  return v17;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::resultTypeForOperation<JSC::ExceptionOperationResult<long long>>(uint64_t a1)
{
  unsigned int *v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;

  v2 = (unsigned int *)(a1 + 28264);
  result = *(unsigned int *)(a1 + 28264);
  if ((result & 0x80000000) == 0)
  {
    v4 = *(_QWORD *)(a1 + 27848);
    v18 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v18 = 0x200000002;
    v19 = 0x200000002;
    v12 = (_QWORD *)(v4 + 32);
    v13 = *(unsigned int *)(v4 + 44);
    if ((_DWORD)v13 == *(_DWORD *)(v4 + 40))
    {
      v14 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v13 + 1, (unint64_t)&v18);
      v15 = *(_QWORD *)(v4 + 32) + 16 * *(unsigned int *)(v4 + 44);
    }
    else
    {
      v15 = *v12 + 16 * v13;
      v14 = (unint64_t)&v18;
    }
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = 0;
    v16 = *(_QWORD *)v14;
    *(_QWORD *)v14 = 0;
    *(_QWORD *)v15 = v16;
    LODWORD(v16) = *(_DWORD *)(v14 + 8);
    *(_DWORD *)(v14 + 8) = 0;
    *(_DWORD *)(v15 + 8) = v16;
    LODWORD(v16) = *(_DWORD *)(v14 + 12);
    *(_DWORD *)(v14 + 12) = 0;
    *(_DWORD *)(v15 + 12) = v16;
    ++*(_DWORD *)(v4 + 44);
    result = v13 | 0x80000000;
    *v2 = result;
    v17 = v18;
    if (v18)
    {
      v18 = 0;
      LODWORD(v19) = 0;
      WTF::fastFree((unint64_t)v17, v5, v6, v7, v8, v9, v10, v11);
      return *v2;
    }
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::operationExceptionCheckAndExtractResultIfNeeded<JSC::ExceptionOperationResult<long long>>(uint64_t a1, JSC::B3::Value *a2, JSC::DFG::Node *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::DFG *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  char v17;
  _QWORD *v18;
  JSC::JSCell *v19;
  JSC::B3::Value *Ptr;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::B3::Value *v25;
  JSC::DFG *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  int8x8_t v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  JSC::DFG *v88;
  unint64_t v89;
  unsigned int *v90;
  uint64_t v91;
  int64x2_t v92;
  _QWORD *v93;
  uint64_t v94;

  if (!JSC::DFG::mayExit(*(JSC::DFG **)a1, *(JSC::DFG::Graph **)(a1 + 28224), a3))
    goto LABEL_21;
  v12 = *(JSC::DFG **)a1;
  v13 = *(_QWORD *)(a1 + 28192);
  if ((v13 & 1) == 0)
  {
    v14 = *((_QWORD *)v12 + 4);
LABEL_4:
    v15 = (_QWORD *)(v13 & 0xFFFFFFFF8);
    v16 = 1;
    v17 = 1;
    goto LABEL_5;
  }
  v61 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v62 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v62 != 0x3FFFFFFF) ? (v63 = v62 == -1) : (v63 = 1), v63))
  {
    v64 = 2;
  }
  else if (v62 >> 28)
  {
    v84 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v84 = v61;
    *(_DWORD *)(v84 + 8) = v62;
    v64 = 1;
    v61 = v84;
  }
  else
  {
    v64 = v61;
    v61 = 0;
  }
  v13 = v61 | v64;
  v14 = *((_QWORD *)v12 + 4);
  if (((v61 | v64) & 1) == 0)
    goto LABEL_4;
  v65 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v66 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v66 != 0x3FFFFFFF) ? (v67 = v66 == -1) : (v67 = 1), v67))
  {
    v68 = 2;
  }
  else if (v66 >> 28)
  {
    v86 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v86 = v65;
    *(_DWORD *)(v86 + 8) = v66;
    v68 = 1;
    v65 = v86;
  }
  else
  {
    v68 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    v65 = 0;
  }
  v69 = v65 | v68;
  v15 = (_QWORD *)(v69 & 0xFFFFFFFF8);
  if ((v69 & 1) != 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = (_QWORD *)*v15;
    goto LABEL_6;
  }
  v17 = 0;
  v16 = 1;
LABEL_5:
  v18 = v15;
LABEL_6:
  if (v18)
    v14 = v18[1];
  v19 = *(JSC::JSCell **)(v14 + 8);
  if ((v16 & 1) == 0 && v15)
    WTF::fastFree((unint64_t)v15, v5, v6, v7, v8, v9, v10, v11);
  if ((v17 & 1) == 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v5, v6, v7, v8, v9, v10, v11);
  Ptr = a2;
  if ((*((_DWORD *)a2 + 4) & 0x80000000) != 0)
    Ptr = (JSC::B3::Value *)JSC::FTL::Output::extract((JSC::FTL::Output *)(a1 + 27640), a2, 1u);
  if (HIBYTE(word_1ECF4C620))
  {
    v73 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationExceptionFuzz);
    JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::BasicBlock **)(a1 + 27776), *(JSC::B3::Value **)(a1 + 27760), 0, *(_QWORD *)(a1 + 27768), v73, v80);
    Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::Output *)(a1 + 27640), *(JSC::B3::Value **)(a1 + 27880), (const JSC::FTL::AbstractHeap *)(a1 + 6304));
  }
  v25 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), Ptr);
  v90 = 0;
  v91 = 2;
  v26 = *(JSC::DFG **)a1;
  v27 = *(_QWORD *)(a1 + 28200);
  if ((v27 & 1) != 0)
  {
    v70 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
    if ((v27 & 2) != 0
      || (v71 = *(unsigned int *)((v27 & 0xFFFFFFFF8) + 8), (_DWORD)v71 == 0x3FFFFFFF)
      || (_DWORD)v71 == -1)
    {
      v72 = 2;
    }
    else if (v71 >> 28)
    {
      v88 = *(JSC::DFG **)a1;
      v85 = WTF::fastMalloc((WTF *)0x10);
      v26 = v88;
      *(_QWORD *)v85 = v70;
      *(_DWORD *)(v85 + 8) = v71;
      v72 = 1;
      v70 = v85;
    }
    else
    {
      v72 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
      v70 = v71 << 36;
    }
    v27 = v70 | v72;
  }
  v89 = v27;
  v35 = JSC::DFG::Graph::willCatchExceptionInMachineFrame((uint64_t)v26, &v89, &v91, &v90, v21, v22, v23, v24);
  if ((v89 & 1) != 0 && (v89 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v89 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
  if (v35)
  {
    v59 = v91;
    if ((v91 & 1) != 0)
    {
      v81 = *(_QWORD *)(v91 & 0xFFFFFFFF8);
      if ((v91 & 2) != 0
        || (v82 = *(unsigned int *)((v91 & 0xFFFFFFFF8) + 8), (_DWORD)v82 == 0x3FFFFFFF)
        || (_DWORD)v82 == -1)
      {
        v83 = 2;
      }
      else if (v82 >> 28)
      {
        v87 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v87 = v81;
        *(_DWORD *)(v87 + 8) = v82;
        v83 = 1;
        v81 = v87;
      }
      else
      {
        v83 = *(_QWORD *)(v91 & 0xFFFFFFFF8);
        v81 = v82 << 36;
      }
      v59 = v81 | v83;
    }
    v94 = v59;
    v60 = (int8x8_t)JSC::DFG::NodeOrigin::withForExitAndExitOK(&v92, (uint64_t *)(a1 + 28192), (unint64_t *)&v94, v30, v31, v32, v33, v34).u64[0];
    if ((v92.i8[8] & 1) != 0 && (v92.i64[1] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v92.i64[1] & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
    if ((v92.i8[0] & 1) != 0 && (v92.i64[0] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v92.i64[0] & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
    if ((v94 & 1) != 0 && (v94 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v94 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  }
  else
  {
    v36 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v37 = v36;
    v38 = *(_QWORD *)(a1 + 27784);
    if (v38)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v38, v36);
    }
    else
    {
      v94 = v36;
      v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v51 = 0u;
      *((_OWORD *)v51 + 1) = 0u;
      v51[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v51;
      v93 = v51;
      v51[2] = v37;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), &v94, (uint64_t *)&v93, v52, v53, v54, v55, v56, (uint64_t)&v92);
      v57 = v93;
      v58 = *(_QWORD **)(a1 + 27832);
      *v93 = a1 + 27824;
      v57[1] = v58;
      *v58 = v57;
      *(_QWORD *)(a1 + 27832) = v57;
    }
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v25, *(_QWORD *)(a1 + 27856), v37, 0.0, 1.0, v39, v40, v41, v42);
    *(_QWORD *)(a1 + 27776) = v37;
  }
  if ((v91 & 1) != 0 && (v91 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v91 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
LABEL_21:
  if ((*((_DWORD *)a2 + 4) & 0x80000000) != 0)
    return JSC::FTL::Output::extract((JSC::FTL::Output *)(a1 + 27640), a2, 0);
  return (uint64_t)a2;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::preparePatchpointForExceptions(unsigned int **a1, uint64_t a2, JSC::B3::StackmapValue *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x8_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[2];
  __int16 v84;
  uint64_t v85;
  char v86;
  WTF *v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  int64x2_t v92;
  __int16 v93;
  unint64_t v94;
  __n128 *v95;
  uint64_t v96;

  v95 = 0;
  v96 = 2;
  v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 28200);
  if ((v12 & 1) != 0)
  {
    v59 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v60 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v60 != 0x3FFFFFFF)
        ? (v61 = (_DWORD)v60 == -1)
        : (v61 = 1),
          v61))
    {
      v62 = 2;
    }
    else if (v60 >> 28)
    {
      v78 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v78 = v59;
      *(_DWORD *)(v78 + 8) = v60;
      v62 = 1;
      v59 = v78;
    }
    else
    {
      v62 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v59 = v60 << 36;
    }
    v12 = v59 | v62;
  }
  v94 = v12;
  v20 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v11, &v94, &v96, (unsigned int **)&v95, a5, a6, a7, a8);
  if ((v94 & 1) != 0 && (v94 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v94 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  if ((v20 & 1) != 0)
  {
    if ((_BYTE)qword_1ECF4C32A)
      v28 = 0;
    else
      v28 = byte_1ECF4C323 == 0;
    if (!v28 || BYTE1(qword_1ECF4C32A) != 0)
    {
      v87 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24) + 272);
      WTF::dataLog<char [36],unsigned long,char [21],JSC::DFG::AvailabilityMap,char [2]>(&v87, a2 + 27992);
    }
    v30 = v96;
    if ((v96 & 1) != 0)
    {
      v63 = *(_QWORD *)(v96 & 0xFFFFFFFF8);
      if ((v96 & 2) != 0
        || ((v64 = *(unsigned int *)((v96 & 0xFFFFFFFF8) + 8), (_DWORD)v64 != 0x3FFFFFFF)
          ? (v65 = (_DWORD)v64 == -1)
          : (v65 = 1),
            v65))
      {
        v66 = 2;
      }
      else if (v64 >> 28)
      {
        v79 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v79 = v63;
        *(_DWORD *)(v79 + 8) = v64;
        v66 = 1;
        v63 = v79;
      }
      else
      {
        v66 = *(_QWORD *)(v96 & 0xFFFFFFFF8);
        v63 = v64 << 36;
      }
      v30 = v63 | v66;
    }
    v91 = v30;
    v38 = (int8x8_t)JSC::DFG::NodeOrigin::withForExitAndExitOK(&v92, (uint64_t *)(a2 + 28192), (unint64_t *)&v91, v15, v16, v17, v18, v19).u64[0];
    if ((v91 & 1) != 0 && (v91 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v91 & 0xFFFFFFFF8, v31, v32, v33, v34, v35, v36, v37);
    v40 = v39;
    v41 = JSC::B3::StackmapValue::numChildren(a3);
    if (*((_DWORD *)a3 + 4))
      v42 = v41 + 1;
    else
      v42 = v41;
    v43 = v96;
    if ((v96 & 1) != 0)
    {
      v67 = *(_QWORD *)(v96 & 0xFFFFFFFF8);
      if ((v96 & 2) != 0
        || (v68 = *(unsigned int *)((v96 & 0xFFFFFFFF8) + 8), (_DWORD)v68 == 0x3FFFFFFF)
        || (_DWORD)v68 == -1)
      {
        v69 = 2;
      }
      else if (v68 >> 28)
      {
        v82 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v82 = v67;
        *(_DWORD *)(v82 + 8) = v68;
        v69 = 1;
        v67 = v82;
      }
      else
      {
        v69 = *(_QWORD *)(v96 & 0xFFFFFFFF8);
        v67 = v68 << 36;
      }
      v43 = v67 | v69;
    }
    v85 = 0;
    v86 = 2;
    v51 = v87;
    if (v89)
    {
      v52 = 8 * v89;
      do
      {
        v53 = *(_QWORD *)v51;
        v51 = (WTF *)((char *)v51 + 8);
        JSC::B3::StackmapValue::append((__int128 *)a3, v53, (unint64_t)&v85);
        v52 -= 8;
      }
      while (v52);
      v51 = v87;
    }
    if (&v90 != (uint64_t *)v51 && v51 != 0)
    {
      v87 = 0;
      v88 = 0;
      WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
    }
    if ((v43 & 1) != 0 && (v43 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v43 & 0xFFFFFFFF8, v44, v45, v46, v47, v48, v49, v50);
    v55 = *(_QWORD *)(a2 + 8);
    v56 = v92.i64[0];
    if ((v92.i8[0] & 1) != 0)
    {
      v70 = *(_QWORD *)(v92.i64[0] & 0xFFFFFFFF8);
      if ((v92.i8[0] & 2) != 0
        || ((v71 = *(unsigned int *)((v92.i64[0] & 0xFFFFFFFF8) + 8), (_DWORD)v71 != 0x3FFFFFFF)
          ? (v72 = (_DWORD)v71 == -1)
          : (v72 = 1),
            v72))
      {
        v73 = 2;
      }
      else if (v71 >> 28)
      {
        v80 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v80 = v70;
        *(_DWORD *)(v80 + 8) = v71;
        v73 = 1;
        v70 = v80;
      }
      else
      {
        v73 = *(_QWORD *)(v92.i64[0] & 0xFFFFFFFF8);
        v70 = v71 << 36;
      }
      v56 = v70 | v73;
    }
    v83[0] = v56;
    v57 = v92.i64[1];
    if ((v92.i8[8] & 1) != 0)
    {
      v74 = *(_QWORD *)(v92.i64[1] & 0xFFFFFFFF8);
      if ((v92.i8[8] & 2) != 0
        || ((v75 = *(unsigned int *)((v92.i64[1] & 0xFFFFFFFF8) + 8), (_DWORD)v75 != 0x3FFFFFFF)
          ? (v76 = (_DWORD)v75 == -1)
          : (v76 = 1),
            v76))
      {
        v77 = 2;
      }
      else if (v75 >> 28)
      {
        v81 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v81 = v74;
        *(_DWORD *)(v81 + 8) = v75;
        v77 = 1;
        v74 = v81;
      }
      else
      {
        v77 = *(_QWORD *)(v92.i64[1] & 0xFFFFFFFF8);
        v74 = v75 << 36;
      }
      v57 = v74 | v77;
      v58 = ((v74 | v77) & 1) == 0;
    }
    else
    {
      v58 = 1;
    }
    v83[1] = v57;
    v84 = v93;
    JSC::FTL::PatchpointExceptionHandle::create(v55, v40, (uint64_t)v83, *(_DWORD *)(a2 + 28216), v42, v95, (uint64_t *)&v87);
    *a1 = (unsigned int *)v87;
    if (!v58 && (v57 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v57 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
    if ((v56 & 1) != 0 && (v56 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v56 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
    if ((v92.i8[8] & 1) != 0 && (v92.i64[1] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v92.i64[1] & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
    if ((v92.i8[0] & 1) != 0 && (v92.i64[0] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v92.i64[0] & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
  }
  else
  {
    JSC::FTL::PatchpointExceptionHandle::defaultHandle(*(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 28216), a1);
  }
  if ((v96 & 1) != 0 && (v96 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v96 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::appendOSRExitDescriptor(uint64_t a1, char a2, int8x8_t a3, uint64_t a4, JSC::DFG::Node *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v11 = (unsigned int *)(a1 + 28004);
  JSC::DFG::Graph::methodOfGettingAValueProfileFor(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), a5, (uint64_t)a5, a6, a7, a8, a9, (uint64_t)v24, a3);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v28 = a2;
  v14 = *v11;
  v13 = v11[1];
  v26 = v11[2];
  v27 = v13;
  v25 = v14 - (v26 + v13);
  WTF::SegmentedVector<JSC::FTL::OSRExitDescriptor,8ul>::append<JSC::DataFormat,JSC::MethodOfGettingAValueProfile const&,unsigned long,unsigned long,unsigned long>(v12 + 272, &v28, (uint64_t)v24, &v27, &v26, (unsigned int *)&v25, v15, v16);
  if ((unint64_t)(*(_QWORD *)(v12 + 272) - 1) >> 3 >= *(unsigned int *)(v12 + 292))
  {
    __break(0xC471u);
  }
  else if ((v24[0] & 1) != 0 && (v24[0] & 0xFFFFFFFF8) != 0)
  {
    WTF::fastFree(v24[0] & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  }
}

uint64_t JSC::B3::StackmapValue::numChildren(JSC::B3::StackmapValue *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = 40;
  switch(*((_BYTE *)this + 12))
  {
    case 0:
    case 1:
    case 2:
    case 8:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x4F:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9D:
    case 0x9E:
    case 0x9F:
      goto LABEL_2;
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x50:
    case 0x54:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
      return *((unsigned int *)this + 15);
    case 7:
    case 0x51:
    case 0x59:
    case 0x9C:
      v1 = 56;
LABEL_2:
      result = *(unsigned int *)((char *)this + v1 + 12);
      break;
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x52:
      result = *((unsigned int *)this + 19);
      break;
    case 0x53:
      result = *((unsigned int *)this + 47);
      break;
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
      result = *((unsigned int *)this + 31);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197D6EF84);
  }
  return result;
}

uint64_t WTF::dataLog<char [36],unsigned long,char [21],JSC::DFG::AvailabilityMap,char [2]>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  WTF::PrintStream *v7;
  char v9;
  uint64_t **v10;
  uint64_t *v11[7];
  char v12;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v11[0] = (uint64_t *)&v9;
    v10 = v11;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "    Patchpoint exception OSR exit #");
  WTF::PrintStream::printf(v6, "%lu", *a1);
  WTF::PrintStream::printf(v6, "%s", " with availability: ");
  v11[0] = (uint64_t *)(a2 + 24);
  v11[1] = (uint64_t *)"=>";
  v11[2] = (uint64_t *)3;
  v11[3] = (uint64_t *)", ";
  v11[4] = (uint64_t *)3;
  v11[5] = (uint64_t *)&str_90_2;
  v11[6] = (uint64_t *)1;
  v12 = 0;
  v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  WTF::PrintStream::printf(v7, "%s", "{locals = ");
  JSC::Operands<JSC::DFG::Availability,WTF::Vector<JSC::DFG::Availability,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dump(a2, (uint64_t)v7);
  WTF::PrintStream::printf(v7, "%s", "; heap = ");
  WTF::MapDump<WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>>::dump(v11, (uint64_t)v7);
  WTF::PrintStream::printf(v7, "%s", "}");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(unsigned int *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  do
  {
    v8 = __ldaxr(a1);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, a1));
  if (!v9)
  {
    atomic_store(1u, a1);
    JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)a1, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileUnaryMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),void>(JSC::UnaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 40);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileUnaryMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),void>(JSC::UnaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 5);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileUnaryMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),void>(JSC::UnaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  char v6;
  JSC::FTL::ExceptionTarget *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _BYTE *v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int i;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  WTF *v47;
  WTF *v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  WTF *v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  WTF *v99;
  unsigned int v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  const void *v105;
  void *v106;
  _BYTE *v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  unint64_t v118;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _OWORD *v142;
  int v143;
  int v144;
  void *v145;
  int v146;
  int v147;
  void *v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  WTF *v158;
  JSC::FTL::ExceptionTarget *v159[17];

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 16), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v159);
  v7 = v159[0];
  JSC::FTL::ExceptionTarget::jumps(v159[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v158);
  v159[0] = 0;
  if (v7)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v7);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v7));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v7);
      v112 = (unsigned int *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      if (v112)
      {
        do
        {
          v113 = __ldaxr(v112);
          v114 = v113 - 1;
        }
        while (__stlxr(v114, v112));
        if (!v114)
        {
          atomic_store(1u, v112);
          WTF::fastFree((unint64_t)v112, v8, v9, v10, v11, v12, v13, v14);
        }
      }
      v115 = (unsigned int *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (v115)
      {
        do
        {
          v116 = __ldaxr(v115);
          v117 = v116 - 1;
        }
        while (__stlxr(v117, v115));
        if (!v117)
        {
          atomic_store(1u, v115);
          WTF::fastFree((unint64_t)v115, v8, v9, v10, v11, v12, v13, v14);
        }
      }
      WTF::fastFree((unint64_t)v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  v17 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = -1;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_QWORD *)(v17 + 72) = 0;
  *(_QWORD *)(v17 + 16) = -1;
  *(_QWORD *)(v17 + 32) = v17 + 48;
  *(_DWORD *)(v17 + 40) = 2;
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v20 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v20 = v18;
  *(_BYTE *)(v20 + 56) = 0;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 8) = 0u;
  *(_WORD *)(v20 + 57) = -1;
  *(_QWORD *)(v20 + 64) = 0;
  *(_QWORD *)(v20 + 64) = *(_QWORD *)(v19 + 40);
  *(_QWORD *)(v19 + 40) = v20;
  v25 = a3[5];
  if (!v25)
  {
    __break(0xC471u);
    goto LABEL_136;
  }
  if (v25 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D6FCD4);
  }
  if (!a3[9])
  {
    __break(0xC471u);
    JUMPOUT(0x197D6FCDCLL);
  }
  v26 = v20;
  v27 = (_BYTE *)*((_QWORD *)a3 + 1);
  v28 = *v27 & 0x7F;
  LOBYTE(v27) = v27[16] & 0x7F;
  v29 = **((_BYTE **)a3 + 3);
  *(_BYTE *)(v20 + 57) = v28;
  *(_BYTE *)(v20 + 58) = (_BYTE)v27;
  *(_BYTE *)(v20 + 59) = v29;
  if (JSC::JITMathIC<JSC::JITNegGenerator,JSC::UnaryArithProfile>::generateInline(v20, a2, v17 + 8, 0, v21, v22, v23, v24))
  {
    for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v30, v31, v32, v33, v34, v35, v36);
        i = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
      i = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
    do
      v38 = __ldaxr((unsigned int *)v17);
    while (__stlxr(v38 + 1, (unsigned int *)v17));
    v39 = *(_QWORD *)(a1 + 24);
    v139 = v17;
    v140 = v39;
    v40 = *(_QWORD *)a3;
    v41 = a3[5];
    v142 = 0;
    v143 = 0;
    v141 = v40;
    v144 = v41;
    if (!(_DWORD)v41)
      goto LABEL_18;
    if (!(v41 >> 28))
    {
      v42 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v41));
      v143 = v41;
      v142 = v42;
      v43 = a3[5];
      if ((_DWORD)v43)
      {
        v44 = (__int128 *)*((_QWORD *)a3 + 1);
        v45 = 16 * v43;
        do
        {
          v46 = *v44++;
          *v42++ = v46;
          v45 -= 16;
        }
        while (v45);
      }
LABEL_18:
      v47 = (WTF *)a3[9];
      v145 = 0;
      v146 = 0;
      v147 = (int)v47;
      if ((_DWORD)v47)
      {
        v146 = (int)v47;
        v145 = (void *)WTF::fastMalloc(v47);
        memcpy(v145, *((const void **)a3 + 3), a3[9]);
      }
      v48 = (WTF *)a3[13];
      v148 = 0;
      v149 = 0;
      v150 = (int)v48;
      if ((_DWORD)v48)
      {
        v149 = (int)v48;
        v148 = (void *)WTF::fastMalloc(v48);
        memcpy(v148, *((const void **)a3 + 5), a3[13]);
      }
      v151 = *((_QWORD *)a3 + 7);
      v49 = *(_QWORD *)(a1 + 40);
      if ((v49 & 1) != 0)
      {
        v120 = *(_QWORD *)(v49 & 0xFFFFFFFF8);
        if ((v49 & 2) != 0
          || ((v121 = *(unsigned int *)((v49 & 0xFFFFFFFF8) + 8), (_DWORD)v121 != 0x3FFFFFFF)
            ? (v122 = (_DWORD)v121 == -1)
            : (v122 = 1),
              v122))
        {
          v123 = 2;
        }
        else if (v121 >> 28)
        {
          v132 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v132 = v120;
          *(_DWORD *)(v132 + 8) = v121;
          v123 = 1;
          v120 = v132;
        }
        else
        {
          v123 = *(_QWORD *)(v49 & 0xFFFFFFFF8);
          v120 = v121 << 36;
        }
        v49 = v120 | v123;
      }
      v152 = v49;
      v50 = (unsigned int *)v158;
      if (v158)
      {
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 + 1, v50));
      }
      v52 = *(_QWORD *)(a1 + 48);
      v53 = *(_QWORD *)(a1 + 56);
      v153 = v50;
      v154 = v52;
      v155 = v26;
      v156 = v53;
      v157 = i;
      v54 = *((_QWORD *)a3 + 7);
      v55 = WTF::fastMalloc((WTF *)0x90);
      *(_DWORD *)(v55 + 8) = 1;
      *(_QWORD *)v55 = off_1E35757B8;
      v63 = *(unsigned int *)(v54 + 12);
      if ((_DWORD)v63 != *(_DWORD *)(v54 + 8))
      {
        v64 = (uint64_t *)(*(_QWORD *)v54 + 8 * v63);
LABEL_27:
        *v64 = v55;
        *(_DWORD *)(v54 + 12) = v63 + 1;
        goto LABEL_42;
      }
      v102 = v63 + (v63 >> 2);
      if (v102 >= 0x10)
        v103 = v102 + 1;
      else
        v103 = 16;
      if (v103 <= v63 + 1)
        v104 = v63 + 1;
      else
        v104 = v103;
      if (!(v104 >> 29))
      {
        v105 = *(const void **)v54;
        v106 = (void *)WTF::fastMalloc((WTF *)(8 * v104));
        *(_DWORD *)(v54 + 8) = v104;
        *(_QWORD *)v54 = v106;
        memcpy(v106, v105, 8 * v63);
        if (v105)
        {
          if (*(const void **)v54 == v105)
          {
            *(_QWORD *)v54 = 0;
            *(_DWORD *)(v54 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v105, v56, v57, v58, v59, v60, v61, v62);
        }
        v63 = *(unsigned int *)(v54 + 12);
        v64 = (uint64_t *)(*(_QWORD *)v54 + 8 * v63);
        goto LABEL_27;
      }
      __break(0xC471u);
LABEL_136:
      JUMPOUT(0x197D6FCCCLL);
    }
LABEL_134:
    __break(0xC471u);
    JUMPOUT(0x197D6FCF4);
  }
  v79 = *(_QWORD **)(a1 + 24);
  v80 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v81 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v82 = a3[9];
  if ((_DWORD)v82)
  {
    v83 = (_BYTE *)*((_QWORD *)a3 + 3);
    do
    {
      v84 = *v83 & 0x7F;
      if (v84 >= 0x40)
        goto LABEL_133;
      v85 = 1 << v84;
      v81 &= ~v85;
      v80 &= ~v85;
      ++v83;
    }
    while (--v82);
  }
  v86 = a3[13];
  if ((_DWORD)v86)
  {
    v107 = (_BYTE *)*((_QWORD *)a3 + 5);
    do
    {
      v108 = (*v107 + 32) & 0x7F;
      if (v108 >= 0x40)
        goto LABEL_133;
      v109 = 1 << v108;
      v81 &= ~v109;
      v80 &= ~v109;
      ++v107;
    }
    while (--v86);
  }
  v139 = v81;
  v140 = v80;
  v87 = *(_QWORD *)(a1 + 40);
  if ((v87 & 1) != 0)
  {
    v124 = *(_QWORD *)(v87 & 0xFFFFFFFF8);
    if ((v87 & 2) != 0
      || ((v125 = *(unsigned int *)((v87 & 0xFFFFFFFF8) + 8), (_DWORD)v125 != 0x3FFFFFFF)
        ? (v126 = (_DWORD)v125 == -1)
        : (v126 = 1),
          v126))
    {
      v127 = 2;
    }
    else if (v125 >> 28)
    {
      v133 = v79;
      v134 = WTF::fastMalloc((WTF *)0x10);
      v79 = v133;
      *(_QWORD *)v134 = v124;
      *(_DWORD *)(v134 + 8) = v125;
      v127 = 1;
      v124 = v134;
    }
    else
    {
      v127 = v124;
      v124 = v125 << 36;
    }
    v87 = v124 | v127;
  }
  v88 = a3[5];
  if (!v88)
  {
    __break(0xC471u);
    JUMPOUT(0x197D6FCE4);
  }
  v89 = v158;
  v90 = *(_QWORD *)(a1 + 56);
  v91 = **((_BYTE **)a3 + 1);
  v92 = *(_QWORD *)(a2 + 336);
  v93 = *(_QWORD *)(a1 + 40);
  if ((v93 & 1) != 0)
  {
    v128 = *(_QWORD *)(v93 & 0xFFFFFFFF8);
    if ((v93 & 2) != 0
      || ((v129 = *(_DWORD *)((v93 & 0xFFFFFFFF8) + 8), v129 != 0x3FFFFFFF) ? (v130 = v129 == -1) : (v130 = 1), v130))
    {
      v131 = 2;
    }
    else if (v129 >> 28)
    {
      v138 = v79;
      v136 = v90;
      v137 = **((_BYTE **)a3 + 1);
      v135 = WTF::fastMalloc((WTF *)0x10);
      v91 = v137;
      v90 = v136;
      v79 = v138;
      *(_QWORD *)v135 = v128;
      *(_DWORD *)(v135 + 8) = v129;
      v88 = a3[5];
      v131 = 1;
      v128 = v135;
    }
    else
    {
      v131 = v128;
      v128 = 0;
    }
    v93 = v128 | v131;
  }
  if (v88 <= 1)
  {
    __break(0xC471u);
LABEL_133:
    __break(1u);
    goto LABEL_134;
  }
  v94 = v91 & 0x7F;
  v95 = (uint64_t *)(v93 & 0xFFFFFFFF8);
  v96 = v93 & 0xFFFFFFFF8;
  if ((v93 & 1) == 0)
  {
    if (!v96)
      goto LABEL_40;
    goto LABEL_39;
  }
  v96 = *v95;
  if (*v95)
LABEL_39:
    v92 = *(_QWORD *)(v96 + 8);
LABEL_40:
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID>((uint64_t)v159, v79, &v139, a2, v87, (uint64_t)v89 + 8, v90, v94, *(_QWORD *)(v92 + 8), *(_BYTE *)(*((_QWORD *)a3 + 1) + 16) & 0x7F);
  if ((v93 & 1) != 0 && v95)
    WTF::fastFree(v93 & 0xFFFFFFFF8, v72, v73, v74, v75, v76, v77, v78);
  if ((v87 & 1) != 0 && (v87 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v87 & 0xFFFFFFFF8, v72, v73, v74, v75, v76, v77, v78);
  do
  {
LABEL_42:
    v97 = __ldaxr((unsigned int *)v17);
    v98 = v97 - 1;
  }
  while (__stlxr(v98, (unsigned int *)v17));
  if (!v98)
  {
    atomic_store(1u, (unsigned int *)v17);
    v110 = *(_QWORD *)(v17 + 32);
    if (v17 + 48 != v110 && v110 != 0)
    {
      *(_QWORD *)(v17 + 32) = 0;
      *(_DWORD *)(v17 + 40) = 0;
      WTF::fastFree(v110, v72, v73, v74, v75, v76, v77, v78);
    }
    WTF::fastFree(v17, v72, v73, v74, v75, v76, v77, v78);
  }
  v99 = v158;
  v158 = 0;
  if (v99)
  {
    do
    {
      v100 = __ldaxr((unsigned int *)v99);
      v101 = v100 - 1;
    }
    while (__stlxr(v101, (unsigned int *)v99));
    if (!v101)
    {
      atomic_store(1u, (unsigned int *)v99);
      v118 = *((_QWORD *)v99 + 1);
      if ((WTF *)((char *)v99 + 24) != (WTF *)v118 && v118 != 0)
      {
        *((_QWORD *)v99 + 1) = 0;
        *((_DWORD *)v99 + 4) = 0;
        WTF::fastFree(v118, v72, v73, v74, v75, v76, v77, v78);
      }
      WTF::fastFree((unint64_t)v99, v72, v73, v74, v75, v76, v77, v78);
    }
  }
  *(_BYTE *)(a2 + 212) = v6;
}

uint64_t void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileUnaryMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),void>(JSC::UnaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::~(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v20;
  unint64_t v22;

  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v20 = *(_QWORD *)(v9 + 8);
      if (v9 + 24 != v20 && v20 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 80);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 56);
  if (v13)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 40);
  if (v14)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 24);
  if (v15)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v16));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v16);
      v22 = *(_QWORD *)(v16 + 32);
      if (v16 + 48 != v22 && v22 != 0)
      {
        *(_QWORD *)(v16 + 32) = 0;
        *(_DWORD *)(v16 + 40) = 0;
        WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;

  v13 = a5;
  v17 = *(_QWORD *)(*a2 + 16);
  if ((a5 & 1) == 0)
  {
    if ((a5 & 2) == 0)
      goto LABEL_3;
LABEL_37:
    v23 = 0xFFFFFFFFLL;
    goto LABEL_7;
  }
  v39 = *(_QWORD *)(a5 & 0xFFFFFFFF8);
  if ((a5 & 2) != 0
    || ((v40 = *(unsigned int *)((a5 & 0xFFFFFFFF8) + 8), (_DWORD)v40 != 0x3FFFFFFF)
      ? (v41 = (_DWORD)v40 == -1)
      : (v41 = 1),
        v41))
  {
    v42 = 2;
  }
  else if (v40 >> 28)
  {
    v51 = a2;
    v49 = WTF::fastMalloc((WTF *)0x10);
    a2 = v51;
    *(_QWORD *)v49 = v39;
    *(_DWORD *)(v49 + 8) = v40;
    v42 = 1;
    v39 = v49;
  }
  else
  {
    v42 = *(_QWORD *)(a5 & 0xFFFFFFFF8);
    v39 = v40 << 36;
  }
  v13 = v39 | v42;
  if (((v39 | v42) & 2) != 0)
    goto LABEL_37;
LABEL_3:
  v18 = *(_QWORD *)(a2[3] + 64);
  v19 = v13;
  if ((v13 & 1) != 0)
  {
    v43 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    v44 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v44 == 0x3FFFFFFF || (_DWORD)v44 == -1)
    {
      v46 = 2;
    }
    else if (v44 >> 28)
    {
      v50 = *(_QWORD *)(a2[3] + 64);
      v47 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8);
      v48 = WTF::fastMalloc((WTF *)0x10);
      v18 = v50;
      *(_QWORD *)v48 = v43;
      *(_DWORD *)(v48 + 8) = v47;
      v46 = 1;
      v43 = v48;
    }
    else
    {
      v46 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      v43 = v44 << 36;
    }
    v19 = v43 | v46;
  }
  v52 = v19;
  v22 = JSC::DFG::CodeOriginPool::addCodeOrigin(v18, &v52);
  if ((v52 & 1) != 0 && (v52 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v52 & 0xFFFFFFFF8, v20, v21, a4, a5, a6, a7, a8);
  if (v22)
  {
    v23 = v22;
LABEL_7:
    if (!*(_BYTE *)(a4 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197D6FFC4);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a4, (JSC::ARM64LogicalImmediate *)v23, a4 + 264, a4, a5, a6, a7, a8);
    v31 = *(_DWORD *)(a4 + 200);
    if (v31 + 4 > *(_DWORD *)(a4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), v24, v25, v26, v27, v28, v29, v30);
      v31 = *(_DWORD *)(a4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + v31) = -1207811152;
    *(_DWORD *)(a4 + 200) += 4;
  }
  JSC::FTL::callOperation<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID>(a1, v17, a3[1] | *a3, (_DWORD *)a4, a6, a7, a8, a9, a10);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v32, v33, v34, v35, v36, v37, v38);
}

unint64_t *WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::~Box(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 8);
      if (v9 + 24 != v13 && v13 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(unsigned int *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  do
  {
    v8 = __ldaxr(a1);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, a1));
  if (!v9)
  {
    atomic_store(1u, a1);
    JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)a1, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
  }
}

void JSC::MacroAssemblerARM64::patchableJump(JSC::MacroAssemblerARM64 *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  JSC::AssemblerBuffer *v11;
  int i;
  unsigned int v13;
  unint64_t v14;
  JSC::AssemblerBuffer *v15;

  *((_BYTE *)this + 328) = 1;
  v11 = (JSC::MacroAssemblerARM64 *)((char *)this + 56);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      v15 = v11;
      JSC::AssemblerBuffer::outOfLineGrow(v11, a2, a3, a4, a5, a6, a7, a8);
      v11 = v15;
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  v13 = i;
  if ((i + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, a2, a3, a4, a5, a6, a7, a8);
    v13 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v13) = 335544320;
  *((_DWORD *)this + 50) += 4;
  v14 = 0xFF000F4500000000;
  if (!*((_BYTE *)this + 328))
    v14 = 0xFF000F4100000000;
  *((_BYTE *)this + 328) = 0;
  *(_DWORD *)a9 = i;
  *(_QWORD *)(a9 + 4) = v14;
}

uint64_t void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileUnaryMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),void>(JSC::UnaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  WTF *v12;
  void *v13;
  WTF *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v3 = result;
  v4 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)result = v4;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(unsigned int *)(a2 + 36);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 36) = v6;
  if ((_DWORD)v6)
  {
    if (v6 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v7 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v6));
    *(_DWORD *)(v3 + 32) = v6;
    *(_QWORD *)(v3 + 24) = v7;
    v8 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v8)
    {
      v9 = *(__int128 **)(a2 + 24);
      v10 = 16 * v8;
      do
      {
        v11 = *v9++;
        *v7++ = v11;
        v10 -= 16;
      }
      while (v10);
    }
  }
  v12 = (WTF *)*(unsigned int *)(a2 + 52);
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 52) = (_DWORD)v12;
  if ((_DWORD)v12)
  {
    v13 = (void *)WTF::fastMalloc(v12);
    *(_DWORD *)(v3 + 48) = (_DWORD)v12;
    *(_QWORD *)(v3 + 40) = v13;
    memcpy(v13, *(const void **)(a2 + 40), *(unsigned int *)(a2 + 52));
  }
  v14 = (WTF *)*(unsigned int *)(a2 + 68);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 68) = (_DWORD)v14;
  if ((_DWORD)v14)
  {
    v19 = (void *)WTF::fastMalloc(v14);
    *(_DWORD *)(v3 + 64) = (_DWORD)v14;
    *(_QWORD *)(v3 + 56) = v19;
    memcpy(v19, *(const void **)(a2 + 56), *(unsigned int *)(a2 + 68));
  }
  v15 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v3 + 72) = *(_QWORD *)(a2 + 72);
  if ((v15 & 1) != 0)
  {
    v20 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v21 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v21 != 0x3FFFFFFF)
        ? (v22 = (_DWORD)v21 == -1)
        : (v22 = 1),
          v22))
    {
      v23 = 2;
    }
    else if (v21 >> 28)
    {
      v24 = v21;
      v25 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v25 = v20;
      *(_DWORD *)(v25 + 8) = v24;
      v23 = 1;
      v20 = v25;
    }
    else
    {
      v23 = v20;
      v20 = v21 << 36;
    }
    v15 = v20 | v23;
  }
  *(_QWORD *)(v3 + 80) = v15;
  v16 = *(unsigned int **)(a2 + 88);
  if (v16)
  {
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  *(_QWORD *)(v3 + 88) = v16;
  v18 = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(v3 + 112) = *(_QWORD *)(a2 + 112);
  *(_OWORD *)(v3 + 96) = v18;
  *(_DWORD *)(v3 + 120) = *(_DWORD *)(a2 + 120);
  return v3;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileUnaryMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),void>(JSC::UnaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileUnaryMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),void>(JSC::UnaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileUnaryMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),void>(JSC::UnaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileUnaryMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),void>(JSC::UnaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileUnaryMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),void>(JSC::UnaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileUnaryMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),void>(JSC::UnaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int i;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int j;
  unsigned int v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  const void *v85;
  void *v86;
  unsigned int v87;
  unsigned int v88;
  _BYTE *v89;
  unsigned int v90;
  uint64_t v91;
  _BYTE *v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  BOOL v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  __int16 v131;
  char v132;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(unsigned int *)(v11 + 44);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = 12 * v12;
    while (v14 < *(unsigned int *)(v11 + 44))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(v11 + 32) + v13), a2, a3, a4, a5, a6, a7, a8);
      ++v14;
      v13 += 12;
      if (v15 == v13)
        goto LABEL_7;
    }
    __break(0xC471u);
LABEL_148:
    JUMPOUT(0x197D70B64);
  }
LABEL_7:
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v17 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v17 + 16) = i;
  if (*(_BYTE *)(v17 + 72))
  {
    v18 = *(_QWORD **)(a1 + 24);
    v19 = *(_QWORD *)(a1 + 32);
    v21 = *(_QWORD *)(v19 + 96);
    v20 = *(_QWORD *)(v19 + 104);
    v22 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 48) + 216) & 0xFF003FF80000 | v21;
    v23 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v23)
    {
      v24 = *(_BYTE **)(a1 + 56);
      do
      {
        v25 = *v24 & 0x7F;
        if (v25 >= 0x40)
          goto LABEL_147;
        v26 = 1 << v25;
        v22 &= ~v26;
        v20 &= ~v26;
        ++v24;
      }
      while (--v23);
    }
    v27 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v27)
    {
      v89 = *(_BYTE **)(a1 + 72);
      do
      {
        v90 = (*v89 + 32) & 0x7F;
        if (v90 >= 0x40)
          goto LABEL_147;
        v91 = 1 << v90;
        v22 &= ~v91;
        v20 &= ~v91;
        ++v89;
      }
      while (--v27);
    }
    v127 = v22;
    v128 = v20;
    v28 = *(_QWORD *)(a1 + 96);
    if ((v28 & 1) != 0)
    {
      v97 = *(_QWORD *)(v28 & 0xFFFFFFFF8);
      if ((v28 & 2) != 0
        || ((v98 = *(unsigned int *)((v28 & 0xFFFFFFFF8) + 8), (_DWORD)v98 != 0x3FFFFFFF)
          ? (v99 = (_DWORD)v98 == -1)
          : (v99 = 1),
            v99))
      {
        v100 = 2;
      }
      else if (v98 >> 28)
      {
        v114 = v18;
        v115 = WTF::fastMalloc((WTF *)0x10);
        v18 = v114;
        *(_QWORD *)v115 = v97;
        *(_DWORD *)(v115 + 8) = v98;
        v100 = 1;
        v97 = v115;
      }
      else
      {
        v100 = v97;
        v97 = v98 << 36;
      }
      v28 = v97 | v100;
    }
    v29 = *(_DWORD *)(a1 + 52);
    if (!v29)
    {
      __break(0xC471u);
      JUMPOUT(0x197D70B74);
    }
    v31 = *(_QWORD *)(a1 + 104);
    v30 = *(_QWORD *)(a1 + 112);
    v32 = **(_BYTE **)(a1 + 40);
    v33 = *(_QWORD *)(a2 + 336);
    v34 = *(_QWORD *)(a1 + 96);
    if ((v34 & 1) != 0)
    {
      v101 = *(_QWORD *)(v34 & 0xFFFFFFFF8);
      if ((v34 & 2) != 0
        || ((v102 = *(_DWORD *)((v34 & 0xFFFFFFFF8) + 8), v102 != 0x3FFFFFFF) ? (v103 = v102 == -1) : (v103 = 1), v103))
      {
        v104 = 2;
      }
      else if (v102 >> 28)
      {
        v116 = v101;
        v124 = *(_QWORD *)(a2 + 336);
        v126 = v18;
        v120 = *(_QWORD *)(a1 + 104);
        v122 = *(_QWORD *)(a1 + 112);
        v101 = WTF::fastMalloc((WTF *)0x10);
        v31 = v120;
        v30 = v122;
        v33 = v124;
        v18 = v126;
        *(_QWORD *)v101 = v116;
        *(_DWORD *)(v101 + 8) = v102;
        v29 = *(_DWORD *)(a1 + 52);
        v104 = 1;
      }
      else
      {
        v104 = v101;
        v101 = 0;
      }
      v34 = v101 | v104;
    }
    if (v29 <= 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197D70B7CLL);
    }
    v35 = v31 + 8;
    v36 = v32 & 0x7F;
    v37 = (uint64_t *)(v34 & 0xFFFFFFFF8);
    v38 = v34 & 0xFFFFFFFF8;
    if ((v34 & 1) != 0)
    {
      v38 = *v37;
      if (!*v37)
      {
LABEL_21:
        JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)&v129, v18, &v127, a2, v28, v35, v30, v36, *(_QWORD *)(v33 + 8), *(_BYTE *)(*(_QWORD *)(a1 + 40) + 16) & 0x7F, *(JSC::ARM64LogicalImmediate **)(a1 + 120));
        if ((v34 & 1) == 0)
          goto LABEL_36;
        goto LABEL_77;
      }
    }
    else if (!v38)
    {
      goto LABEL_21;
    }
    v33 = *(_QWORD *)(v38 + 8);
    goto LABEL_21;
  }
  v46 = *(_QWORD **)(a1 + 24);
  v47 = *(_QWORD *)(a1 + 32);
  v49 = *(_QWORD *)(v47 + 96);
  v48 = *(_QWORD *)(v47 + 104);
  v50 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 48) + 216) & 0xFF003FF80000 | v49;
  v51 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v51)
  {
    v52 = *(_BYTE **)(a1 + 56);
    do
    {
      v53 = *v52 & 0x7F;
      if (v53 >= 0x40)
        goto LABEL_147;
      v54 = 1 << v53;
      v50 &= ~v54;
      v48 &= ~v54;
      ++v52;
    }
    while (--v51);
  }
  v55 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v55)
  {
    v92 = *(_BYTE **)(a1 + 72);
    do
    {
      v93 = (*v92 + 32) & 0x7F;
      if (v93 >= 0x40)
        goto LABEL_147;
      v94 = 1 << v93;
      v50 &= ~v94;
      v48 &= ~v94;
      ++v92;
    }
    while (--v55);
  }
  v127 = v50;
  v128 = v48;
  v28 = *(_QWORD *)(a1 + 96);
  if ((v28 & 1) != 0)
  {
    v105 = *(_QWORD *)(v28 & 0xFFFFFFFF8);
    if ((v28 & 2) != 0
      || ((v106 = *(unsigned int *)((v28 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else
    {
      v113 = v46;
      if (v106 >> 28)
      {
        v117 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v117 = v105;
        *(_DWORD *)(v117 + 8) = v106;
        v108 = 1;
        v105 = v117;
      }
      else
      {
        v108 = v105;
        v105 = v106 << 36;
      }
      v46 = v113;
    }
    v28 = v105 | v108;
  }
  v56 = *(_DWORD *)(a1 + 52);
  if (!v56)
  {
    __break(0xC471u);
    JUMPOUT(0x197D70B84);
  }
  v57 = *(_QWORD *)(a1 + 128);
  v58 = **(_BYTE **)(a1 + 40);
  v59 = *(_QWORD *)(a2 + 336);
  v61 = *(_QWORD *)(a1 + 96);
  v60 = *(_QWORD *)(a1 + 104);
  if ((v61 & 1) != 0)
  {
    v109 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
    if ((v61 & 2) != 0
      || ((v110 = *(_DWORD *)((v61 & 0xFFFFFFFF8) + 8), v110 != 0x3FFFFFFF) ? (v111 = v110 == -1) : (v111 = 1), v111))
    {
      v112 = 2;
    }
    else
    {
      v112 = *(_QWORD *)(v61 & 0xFFFFFFFF8);
      v123 = *(_QWORD *)(a2 + 336);
      v125 = *(_QWORD *)(a1 + 104);
      v119 = v46;
      v121 = *(_QWORD *)(a1 + 128);
      v118 = v110;
      if (v110 >> 28)
      {
        v109 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v109 = v112;
        *(_DWORD *)(v109 + 8) = v118;
        v56 = *(_DWORD *)(a1 + 52);
        v112 = 1;
      }
      else
      {
        v109 = 0;
      }
      v46 = v119;
      v57 = v121;
      v59 = v123;
      v60 = v125;
    }
    v61 = v109 | v112;
  }
  if (v56 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D70B8CLL);
  }
  v62 = v58 & 0x7F;
  v37 = (uint64_t *)(v61 & 0xFFFFFFFF8);
  v63 = v61 & 0xFFFFFFFF8;
  if ((v61 & 1) == 0)
  {
    if (!v63)
      goto LABEL_35;
    goto LABEL_34;
  }
  v63 = *v37;
  if (*v37)
LABEL_34:
    v59 = *(_QWORD *)(v63 + 8);
LABEL_35:
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID>((uint64_t)&v129, v46, &v127, a2, v28, v60 + 8, v57, v62, *(_QWORD *)(v59 + 8), *(_BYTE *)(*(_QWORD *)(a1 + 40) + 16) & 0x7F);
  if ((v61 & 1) == 0)
    goto LABEL_36;
LABEL_77:
  if (v37)
    WTF::fastFree((unint64_t)v37, v39, v40, v41, v42, v43, v44, v45);
LABEL_36:
  if ((v28 & 1) != 0 && (v28 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v28 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 20) = v129;
  for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v39, v40, v41, v42, v43, v44, v45);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v65 = j;
  if (j + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v39, v40, v41, v42, v43, v44, v45);
    v65 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v65) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v66 = 69;
  else
    v66 = 65;
  v129 = j;
  v130 = v66;
  v131 = 15;
  v132 = -1;
  LODWORD(v127) = *(_DWORD *)(a1 + 136);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v129, (unsigned int *)&v127, a2, v41, v42, v43, v44, v45);
  v67 = *(_QWORD *)(a1 + 120);
  v68 = *(_QWORD *)(a1 + 16);
  if (v68)
  {
    do
      v69 = __ldaxr((unsigned int *)v68);
    while (__stlxr(v69 + 1, (unsigned int *)v68));
  }
  v70 = WTF::fastMalloc((WTF *)0x20);
  v78 = v70;
  *(_DWORD *)(v70 + 8) = 1;
  *(_QWORD *)v70 = &off_1E35757E0;
  *(_QWORD *)(v70 + 16) = v67;
  if (v68)
  {
    do
      v79 = __ldaxr((unsigned int *)v68);
    while (__stlxr(v79 + 1, (unsigned int *)v68));
  }
  *(_QWORD *)(v70 + 24) = v68;
  v80 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v80 != *(_DWORD *)(a2 + 240))
  {
    v81 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v80);
    goto LABEL_58;
  }
  v82 = v80 + (v80 >> 2);
  if (v82 >= 0x10)
    v83 = v82 + 1;
  else
    v83 = 16;
  if (v83 <= v80 + 1)
    v84 = v80 + 1;
  else
    v84 = v83;
  if (v84 >> 29)
  {
    __break(0xC471u);
LABEL_147:
    __break(1u);
    goto LABEL_148;
  }
  v85 = *(const void **)(a2 + 232);
  v86 = (void *)WTF::fastMalloc((WTF *)(8 * v84));
  *(_DWORD *)(a2 + 240) = v84;
  *(_QWORD *)(a2 + 232) = v86;
  memcpy(v86, v85, 8 * v80);
  if (v85)
  {
    if (*(const void **)(a2 + 232) == v85)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v85, v71, v72, v73, v74, v75, v76, v77);
  }
  v80 = *(unsigned int *)(a2 + 244);
  v81 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v80);
LABEL_58:
  *v81 = v78;
  *(_DWORD *)(a2 + 244) = v80 + 1;
  if (v68)
  {
    do
    {
      v87 = __ldaxr((unsigned int *)v68);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, (unsigned int *)v68));
    if (!v88)
    {
      atomic_store(1u, (unsigned int *)v68);
      v95 = *(_QWORD *)(v68 + 32);
      if (v68 + 48 != v95 && v95 != 0)
      {
        *(_QWORD *)(v68 + 32) = 0;
        *(_DWORD *)(v68 + 40) = 0;
        WTF::fastFree(v95, v71, v72, v73, v74, v75, v76, v77);
      }
      WTF::fastFree(v68, v71, v72, v73, v74, v75, v76, v77);
    }
  }
  *(_BYTE *)(a2 + 212) = v10;
}

void JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, JSC::ARM64LogicalImmediate *a11)
{
  unint64_t v11;
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint8x8_t v36;
  __int32 v37;
  uint8x8_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int8x8_t v81;
  int v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char v101;
  int v102;
  char *__src;
  JSC::AssemblerBuffer *v104;
  int v105;
  uint64_t v106;
  void *__dst;
  __int128 v108;
  uint64_t v109;
  uint64_t v110[9];

  v11 = a8;
  v14 = a5;
  v18 = *(_QWORD *)(*a2 + 16);
  if ((a5 & 1) != 0)
  {
    v88 = *(_QWORD *)(a5 & 0xFFFFFFFF8);
    if ((a5 & 2) != 0
      || ((v89 = *(unsigned int *)((a5 & 0xFFFFFFFF8) + 8), (_DWORD)v89 != 0x3FFFFFFF)
        ? (v90 = (_DWORD)v89 == -1)
        : (v90 = 1),
          v90))
    {
      v91 = 2;
    }
    else if (v89 >> 28)
    {
      v97 = a2;
      v98 = WTF::fastMalloc((WTF *)0x10);
      a2 = v97;
      *(_QWORD *)v98 = v88;
      *(_DWORD *)(v98 + 8) = v89;
      v91 = 1;
      v88 = v98;
    }
    else
    {
      v91 = *(_QWORD *)(a5 & 0xFFFFFFFF8);
      v88 = v89 << 36;
    }
    v14 = v88 | v91;
    if (((v88 | v91) & 2) == 0)
      goto LABEL_3;
LABEL_97:
    v24 = 0xFFFFFFFFLL;
    goto LABEL_7;
  }
  if ((a5 & 2) != 0)
    goto LABEL_97;
LABEL_3:
  v19 = *(_QWORD *)(a2[3] + 64);
  v20 = v14;
  if ((v14 & 1) != 0)
  {
    v92 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    v93 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v93 == 0x3FFFFFFF || (_DWORD)v93 == -1)
    {
      v95 = 2;
    }
    else if (v93 >> 28)
    {
      v104 = *(JSC::AssemblerBuffer **)(v14 & 0xFFFFFFFF8);
      v96 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v96 = v104;
      *(_DWORD *)(v96 + 8) = v93;
      v95 = 1;
      v92 = v96;
    }
    else
    {
      v95 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v92 = v93 << 36;
    }
    v20 = v92 | v95;
  }
  v110[0] = v20;
  v23 = JSC::DFG::CodeOriginPool::addCodeOrigin(v19, v110);
  if ((v110[0] & 1) != 0 && (v110[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v110[0] & 0xFFFFFFFF8, v21, v22, a4, a5, a6, a7, a8);
  if (!v23)
    goto LABEL_10;
  v24 = v23;
LABEL_7:
  if (!*(_BYTE *)(a4 + 212))
  {
    v25 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h";
    v26 = "CachedTempRegister &JSC::MacroAssemblerARM64::dataMemoryTempRegister()";
    v27 = 165;
    __break(0xC471u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a4, (JSC::ARM64LogicalImmediate *)v24, a4 + 264, a4, a5, a6, a7, a8);
  v28 = *(_DWORD *)(a4 + 200);
  if (v28 + 4 > *(_DWORD *)(a4 + 192))
  {
LABEL_90:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), (uint64_t)v25, (uint64_t)v26, v27, a5, a6, a7, a8);
    v28 = *(_DWORD *)(a4 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a4 + 56) + v28) = -1207811152;
  *(_DWORD *)(a4 + 200) += 4;
LABEL_10:
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v110, a3[1] | *a3, a4, 4u, v11, 0xFFFFFFFFLL, a7, a8);
  a3 = (_QWORD *)&v108 + 1;
  __dst = (char *)&v108 + 8;
  LODWORD(v108) = 1;
  if (a10 == 1)
    goto LABEL_63;
  WORD4(v108) = a10 | 0x100;
  DWORD1(v108) = 1;
  v29 = 1;
  do
  {
    v30 = 0;
    v31 = 0;
    v32 = (char *)__dst;
    v33 = v29;
    do
    {
      if ((*((_BYTE *)__dst + v30 + 1) & 0x40) != 0)
        goto LABEL_89;
      v31 |= 1 << *((_BYTE *)__dst + v30 + 1);
      v30 += 2;
    }
    while (2 * v29 != v30);
    v34 = 0;
    do
    {
      v35 = *((_BYTE *)__dst + v34) & 0x7F;
      if (v35 >= 0x40)
        goto LABEL_89;
      v31 &= ~(1 << v35);
      v34 += 2;
    }
    while (2 * v29 != v34);
    v36 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
    v36.i16[0] = vaddlv_u8(v36);
    v37 = v36.i32[0];
    v38 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v31));
    v38.i16[0] = vaddlv_u8(v38);
    if (v38.i32[0] + v37)
    {
      v39 = 0;
      if (v29 <= 1)
        v40 = 1;
      else
        v40 = v29;
      v41 = 2 * v40;
      while (1)
      {
        v42 = *((unsigned __int8 *)__dst + v39 + 1);
        if ((v42 & 0x7Fu) >= 0x40)
          goto LABEL_89;
        if (((v31 >> (v42 & 0x7F)) & 1) != 0)
          break;
        v39 += 2;
        if (v41 == v39)
          goto LABEL_42;
      }
      v43 = *((unsigned __int8 *)__dst + v39);
      if (v43 == v42)
      {
LABEL_40:
        memmove(&v32[v39], &v32[v39 + 2], 2 * v33 - v39 - 2);
        v29 = DWORD1(v108) - 1;
        goto LABEL_41;
      }
      if ((char)v43 == 63)
      {
        if ((char)v42 != 31)
        {
          v11 = v42 & 0x1F | 0xD2800000;
          goto LABEL_37;
        }
      }
      else
      {
        v44 = v42 == 31 || (char)v43 == 31;
        if (!v44)
        {
          v11 = v42 & 0xFFE0FFFF | ((v43 & 0x1F) << 16) | 0xAA0003E0;
LABEL_37:
          v45 = *(_DWORD *)(a4 + 200);
          if (v45 + 4 > *(_DWORD *)(a4 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), (uint64_t)v25, (uint64_t)v26, v27, a5, a6, a7, a8);
            v45 = *(_DWORD *)(a4 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a4 + 56) + v45) = v11;
          *(_DWORD *)(a4 + 200) += 4;
          v32 = (char *)__dst;
          v33 = DWORD1(v108);
          goto LABEL_40;
        }
      }
      v11 = (char)v42 | (32 * (char)v43) | 0x91000000;
      goto LABEL_37;
    }
    v46 = *((_BYTE *)__dst + 1);
    v101 = *(_BYTE *)__dst;
    JSC::MacroAssemblerARM64::swap(a4, *(char *)__dst, v46, v27, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v108) - 2);
    v47 = (DWORD1(v108) - 1);
    v44 = DWORD1(v108) == 1;
    DWORD1(v108) = v47;
    v11 = (unint64_t)__dst;
    __src = (char *)__dst + 2 * v47;
    if (v44)
    {
      v48 = 0;
      v49 = 0;
      v102 = 0;
      v25 = (char *)__dst + 2 * v47;
    }
    else
    {
      v51 = 2 * v47;
      v52 = __dst;
      while (*v52 != v46)
      {
        v52 += 2;
        v51 -= 2;
        if (!v51)
          goto LABEL_52;
      }
      *v52 = v101;
LABEL_52:
      v102 = 0;
      v53 = v11;
      v25 = __src;
      v54 = __src;
      do
      {
        if (*(unsigned __int8 *)v11 == *(unsigned __int8 *)(v11 + 1))
        {
          v55 = (char *)v11;
          if (v54 != (char *)__dst + 2 * DWORD1(v108))
          {
            if ((char *)v11 == v25)
            {
              v55 = v54;
            }
            else
            {
              v99 = v53 - (_QWORD)v25;
              v100 = v54;
              memmove(v54, v25, v53 - (_QWORD)v25);
              v55 = &v100[v99];
            }
          }
          v25 = (char *)(v11 + 2);
          ++v102;
          v54 = v55;
        }
        v11 += 2;
        v53 += 2;
      }
      while (v11 < (unint64_t)__src);
      v11 = (unint64_t)__dst;
      v48 = DWORD1(v108);
      v49 = DWORD1(v108);
      __src = v54;
    }
    v50 = (char *)(v11 + 2 * v48);
    if (v25 != v50)
    {
      memmove(__src, v25, v50 - v25);
      v49 = DWORD1(v108);
    }
    v29 = v49 - v102;
LABEL_41:
    DWORD1(v108) = v29;
LABEL_42:
    ;
  }
  while (v29);
  v56 = __dst;
  if ((char *)&v108 + 8 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v108) = 0;
    WTF::fastFree((unint64_t)v56, v25, (uint64_t)v26, v27, a5, a6, a7, a8);
  }
LABEL_63:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a4, (uint64_t)a11, 2, v27, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a4, a9, 0, v57, v58, v59, v60, v61);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v110, v18, a7, v62, v63, v64, v65, v66, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v108;
  *(_QWORD *)(a1 + 24) = v109;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v110, v67, v68, v69, v70, v71, v72, v73);
  if (a6)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a4, v18, 0, 0, 0xFFFFFFFFLL, v78, v79, v80, (uint64_t)&v105, v81);
    v82 = v105;
    if (v105 != -1)
    {
      v83 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v83 == *(_DWORD *)(a6 + 8))
      {
        v84 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (void *)(v83 + 1), (unint64_t)&v105, v76, v77, v78, v79, v80);
        v86 = *v84;
        v85 = (uint64_t *)(v84 + 1);
        v82 = v86;
        LODWORD(v83) = *(_DWORD *)(a6 + 12);
      }
      else
      {
        v85 = &v106;
      }
      v87 = *(_QWORD *)a6 + 12 * v83;
      *(_DWORD *)v87 = v82;
      *(_QWORD *)(v87 + 4) = *v85;
      ++*(_DWORD *)(a6 + 12);
    }
  }
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, v74, v75, v76, v77, v78, v79, v80);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileUnaryMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),void>(JSC::UnaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v13 && v13 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileUnaryMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),void>(JSC::UnaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;

  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v12 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v12 && v12 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileUnaryMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),void>(JSC::UnaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  return JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::finalizeInlineCode(*(_QWORD **)(a1 + 16), (int *)(*(_QWORD *)(a1 + 24) + 8), a2);
}

uint64_t JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(_QWORD *a1, int *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v2 = *a2;
  if (*a2 < 4)
    v3 = 0;
  else
    v3 = *(_DWORD *)((v2 & 0xFFFFFFFC) + a1[3] - 4);
  v4 = (v2 - v3);
  v5 = a1[23];
  v6 = v4 + v5;
  if (v5 <= v6 && v5 + a1[1] >= v6)
    return v6;
  result = 366;
  __break(0xC471u);
  return result;
}

void JSC::FTL::callOperation<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  __int32 v31;
  uint8x8_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int8x8_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t *v76;
  int v77;
  uint64_t v78;
  int64_t v79;
  char *v80;
  char v81;
  int v82;
  char *__src;
  int v84;
  uint64_t v85;
  void *__dst;
  __int128 v87;
  uint64_t v88;
  _QWORD v89[9];

  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  v15 = JSC::FTL::SlowPathCallContext::SlowPathCallContext(v89, a3, (uint64_t)a4, 3u, a7, 0xFFFFFFFFLL, a7, a8);
  __dst = (char *)&v87 + 8;
  LODWORD(v87) = 1;
  if (a9 != 1)
  {
    WORD4(v87) = a9 | 0x100;
    DWORD1(v87) = 1;
    v23 = 1;
    do
    {
      v24 = 0;
      v25 = 0;
      v26 = (char *)__dst;
      v27 = v23;
      do
      {
        if ((*((_BYTE *)__dst + v24 + 1) & 0x40) != 0)
        {
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
        v25 |= 1 << *((_BYTE *)__dst + v24 + 1);
        v24 += 2;
      }
      while (2 * v23 != v24);
      v28 = 0;
      do
      {
        v29 = *((_BYTE *)__dst + v28) & 0x7F;
        if (v29 >= 0x40)
          goto LABEL_61;
        v25 &= ~(1 << v29);
        v28 += 2;
      }
      while (2 * v23 != v28);
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
      v30.i16[0] = vaddlv_u8(v30);
      v31 = v30.i32[0];
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v25));
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.i32[0] + v31)
      {
        v33 = 0;
        if (v23 <= 1)
          v34 = 1;
        else
          v34 = v23;
        v35 = 2 * v34;
        while (1)
        {
          v36 = *((unsigned __int8 *)__dst + v33 + 1);
          if ((v36 & 0x7Fu) >= 0x40)
            goto LABEL_61;
          if (((v25 >> (v36 & 0x7F)) & 1) != 0)
            break;
          v33 += 2;
          if (v35 == v33)
            goto LABEL_33;
        }
        v37 = *((unsigned __int8 *)__dst + v33);
        if (v37 != v36)
        {
          if ((char)v37 == 63)
          {
            if (v36 == 31)
              goto LABEL_27;
            v39 = v36 & 0x1F | 0xD2800000;
          }
          else
          {
            v38 = (char)v36 == 31 || (char)v37 == 31;
            if (!v38)
            {
              v39 = v36 & 0xFFE0FFFF | ((v37 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v39 = (char)v36 | (32 * (char)v37) | 0x91000000;
          }
LABEL_28:
          v40 = a4[50];
          if (v40 + 4 > a4[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 14), (uint64_t)v16, v17, v18, v19, v20, v21, v22);
            v40 = a4[50];
          }
          *(_DWORD *)(*((_QWORD *)a4 + 7) + v40) = v39;
          a4[50] += 4;
          v26 = (char *)__dst;
          v27 = DWORD1(v87);
        }
        v15 = memmove(&v26[v33], &v26[v33 + 2], 2 * v27 - v33 - 2);
        v23 = DWORD1(v87) - 1;
        goto LABEL_32;
      }
      v41 = *((_BYTE *)__dst + 1);
      v81 = *(_BYTE *)__dst;
      JSC::MacroAssemblerARM64::swap((uint64_t)a4, *(char *)__dst, v41, v18, v19, v20, v21, v22);
      v15 = memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v87) - 2);
      v42 = (DWORD1(v87) - 1);
      v38 = DWORD1(v87) == 1;
      DWORD1(v87) = v42;
      v43 = (unsigned __int8 *)__dst;
      __src = (char *)__dst + 2 * v42;
      if (v38)
      {
        v44 = 0;
        v45 = 0;
        v82 = 0;
        v16 = (char *)__dst + 2 * v42;
      }
      else
      {
        v47 = 2 * v42;
        v48 = __dst;
        while (*v48 != v41)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_43;
        }
        *v48 = v81;
LABEL_43:
        v82 = 0;
        v49 = v43;
        v16 = __src;
        v50 = __src;
        do
        {
          if (*v43 == v43[1])
          {
            v51 = v43;
            if (v50 != (char *)__dst + 2 * DWORD1(v87))
            {
              if (v43 == (unsigned __int8 *)v16)
              {
                v51 = (unsigned __int8 *)v50;
              }
              else
              {
                v79 = v49 - (unsigned __int8 *)v16;
                v80 = v50;
                v15 = memmove(v50, v16, v49 - (unsigned __int8 *)v16);
                v51 = (unsigned __int8 *)&v80[v79];
              }
            }
            v16 = (char *)(v43 + 2);
            ++v82;
            v50 = (char *)v51;
          }
          v43 += 2;
          v49 += 2;
        }
        while (v43 < (unsigned __int8 *)__src);
        v43 = (unsigned __int8 *)__dst;
        v44 = DWORD1(v87);
        v45 = DWORD1(v87);
        __src = v50;
      }
      v46 = (char *)&v43[2 * v44];
      if (v16 != v46)
      {
        v15 = memmove(__src, v16, v46 - v16);
        v45 = DWORD1(v87);
      }
      v23 = v45 - v82;
LABEL_32:
      DWORD1(v87) = v23;
LABEL_33:
      ;
    }
    while (v23);
    v15 = __dst;
    if ((char *)&v87 + 8 == __dst)
      goto LABEL_54;
LABEL_62:
    if (v15)
    {
      __dst = 0;
      LODWORD(v87) = 0;
      WTF::fastFree((unint64_t)v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
LABEL_54:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a4, a8, 0, v18, v19, v20, v21, v22);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v89, a2, a6, v52, v53, v54, v55, v56, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v87;
  *(_QWORD *)(a1 + 24) = v88;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v89, v57, v58, v59, v60, v61, v62, v63);
  if (a5)
  {
    JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)a4, a2, 0, 0, 0xFFFFFFFFLL, v64, v65, v66, (uint64_t)&v84, v67);
    v73 = v84;
    if (v84 != -1)
    {
      v74 = *(unsigned int *)(a5 + 12);
      if ((_DWORD)v74 == *(_DWORD *)(a5 + 8))
      {
        v75 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, (void *)(v74 + 1), (unint64_t)&v84, v68, v69, v70, v71, v72);
        v77 = *v75;
        v76 = (uint64_t *)(v75 + 1);
        v73 = v77;
        LODWORD(v74) = *(_DWORD *)(a5 + 12);
      }
      else
      {
        v76 = &v85;
      }
      v78 = *(_QWORD *)a5 + 12 * v74;
      *(_DWORD *)v78 = v73;
      *(_QWORD *)(v78 + 4) = *v76;
      ++*(_DWORD *)(a5 + 12);
    }
  }
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowHeapBigInt(_QWORD *a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return v11;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::DFG::Node *v18;
  WTF *v19;
  char **v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  char *v38;
  WTF *v39;
  uint64_t v40;

  v13 = (int *)(a1 + 28264);
  v14 = *(_DWORD *)(a1 + 28264);
  if ((v14 & 0x80000000) == 0)
  {
    v24 = *(_QWORD *)(a1 + 27848);
    v39 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v39 = 0x200000002;
    v40 = 0x200000002;
    v32 = (_QWORD *)(v24 + 32);
    v33 = *(unsigned int *)(v24 + 44);
    if ((_DWORD)v33 == *(_DWORD *)(v24 + 40))
    {
      v34 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v32, v33 + 1, (unint64_t)&v39);
      v35 = *(_QWORD *)(v24 + 32) + 16 * *(unsigned int *)(v24 + 44);
    }
    else
    {
      v35 = *v32 + 16 * v33;
      v34 = (unint64_t)&v39;
    }
    *(_QWORD *)v35 = 0;
    *(_QWORD *)(v35 + 8) = 0;
    v36 = *(_QWORD *)v34;
    *(_QWORD *)v34 = 0;
    *(_QWORD *)v35 = v36;
    LODWORD(v36) = *(_DWORD *)(v34 + 8);
    *(_DWORD *)(v34 + 8) = 0;
    *(_DWORD *)(v35 + 8) = v36;
    LODWORD(v36) = *(_DWORD *)(v34 + 12);
    *(_DWORD *)(v34 + 12) = 0;
    *(_DWORD *)(v35 + 12) = v36;
    ++*(_DWORD *)(v24 + 44);
    v14 = v33 | 0x80000000;
    *v13 = v33 | 0x80000000;
    v37 = v39;
    if (v39)
    {
      v39 = 0;
      LODWORD(v40) = 0;
      WTF::fastFree((unint64_t)v37, v25, v26, v27, v28, v29, v30, v31);
      v14 = *v13;
    }
  }
  v15 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v16 = *a4;
  v17 = *(_QWORD *)(a1 + 27776);
  v19 = (WTF *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::Value **)(a1 + 27760), v14, *(_QWORD *)(a1 + 27768), v15, *a3, v16, *a5);
  v39 = v19;
  v20 = (char **)(v17 + 8);
  v21 = *(unsigned int *)(v17 + 20);
  if ((_DWORD)v21 == *(_DWORD *)(v17 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v20, v21 + 1, (unint64_t)&v39);
    v21 = *(unsigned int *)(v17 + 20);
    *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v21) = *(_QWORD *)v38;
    v22 = v39;
  }
  else
  {
    *(_QWORD *)&(*v20)[8 * v21] = v19;
    v22 = v19;
  }
  *(_DWORD *)(v17 + 20) = v21 + 1;
  *((_QWORD *)v22 + 4) = v17;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  char v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67[4];

  v67[3] = *MEMORY[0x1E0C80C00];
  v4 = *(unint64_t **)(a1 + 28224);
  v13 = v4[3];
  v14 = *(_QWORD *)(a1 + 28040);
  v15 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  if ((v13 & 1) != 0)
    v16 = (_QWORD *)(v14 + 24);
  else
    v16 = (_QWORD *)(v14 + 8);
  v17 = *v16 + 32 * v15;
  v18 = (void *)*(unsigned int *)(a1 + 28120);
  if ((_DWORD)v18 != *(_DWORD *)(v17 + 20))
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v17, v18, v6, v7, v8, v9, v10, v11);
      v14 = *(_QWORD *)(a1 + 28040);
    }
    else
    {
      *(_DWORD *)(v17 + 20) = (_DWORD)v18;
    }
  }
  v25 = JSC::DFG::AbstractValue::resultType((JSC::DFG::AbstractValue *)v17);
  v26 = v4[4];
  v27 = *(unsigned int *)((v26 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  if ((v26 & 1) != 0)
    v28 = (_QWORD *)(v14 + 24);
  else
    v28 = (_QWORD *)(v14 + 8);
  v29 = *v28 + 32 * v27;
  v30 = (void *)*(unsigned int *)(a1 + 28120);
  if ((_DWORD)v30 != *(_DWORD *)(v29 + 20))
  {
    if ((*(_QWORD *)(v29 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v29, v30, v19, v20, v21, v22, v23, v24);
    else
      *(_DWORD *)(v29 + 20) = (_DWORD)v30;
  }
  v31 = JSC::DFG::AbstractValue::resultType((JSC::DFG::AbstractValue *)v29);
  v32 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)(a1 + 27640), 2);
  v59 = (unint64_t)v5;
  LOBYTE(v60) = 3;
  JSC::B3::StackmapValue::append(v32, v5, (unint64_t)&v59 + 8);
  v59 = (unint64_t)v12;
  LOBYTE(v60) = 3;
  JSC::B3::StackmapValue::append(v32, v12, (unint64_t)&v59 + 8);
  v33 = *(_QWORD *)(a1 + 27904);
  v59 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v32, v33, (unint64_t)&v59);
  v34 = *(_QWORD *)(a1 + 27896);
  v59 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v32, v34, (unint64_t)&v59);
  *((_WORD *)v32 + 84) = 513;
  *((_QWORD *)v32 + 8) |= 0x30000uLL;
  *((_QWORD *)v32 + 10) |= 0x30000uLL;
  v40 = *(_QWORD *)(a1 + 8);
  JSC::CodeOrigin::CodeOrigin(&v57, (const JSC::CodeOrigin *)v4);
  v41 = v58;
  if (v58)
  {
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 + 1, v41));
  }
  *(_QWORD *)&v59 = v41;
  *((_QWORD *)&v59 + 1) = v40;
  v60 = a2;
  v61 = v25;
  v62 = 0;
  v63 = 0;
  v64 = v31;
  v65 = 0;
  v66 = 0;
  JSC::CodeOrigin::CodeOrigin(v67, (const JSC::CodeOrigin *)&v57);
  v67[1] = (uint64_t)operationValueAddOptimize;
  v67[2] = (uint64_t)operationValueAdd;
  if ((v57 & 1) != 0 && (v57 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v57 & 0xFFFFFFFF8, v50, v51, v52, v53, v54, v55, v56);
  if (v58)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v58, v50, v51, v52, v53, v54, v55, v56);
}

unsigned int *JSC::B3::StackmapValue::setGenerator<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x58);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *, __n128))(*(_QWORD *)result + 8))(result, v5);
    }
  }
  return result;
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::~StackmapGenerationParams(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = a1[6];
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *a1;
  *a1 = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

__n128 WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __n128 result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1E3575808;
  v2 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(a1 + 16) = v2;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 48);
  if ((v6 & 1) != 0)
  {
    v8 = *(_QWORD *)(v6 & 0xFFFFFFFF8);
    if ((v6 & 2) != 0
      || ((v9 = *(unsigned int *)((v6 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v14 = a2;
      v15 = a1;
      v12 = v8;
      v13 = v9;
      v8 = WTF::fastMalloc((WTF *)0x10);
      a2 = v14;
      a1 = v15;
      *(_QWORD *)v8 = v12;
      *(_DWORD *)(v8 + 8) = v13;
      v11 = 1;
    }
    else
    {
      v11 = v8;
      v8 = v9 << 36;
    }
    v6 = v8 | v11;
  }
  *(_QWORD *)(a1 + 64) = v6;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(a1 + 72) = result;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 64);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 8);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  unsigned int *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  _BYTE *v27;
  char v28;
  char v29;
  char *v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  JSC::FTL::ExceptionTarget *v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *result;
  _QWORD *v69;
  uint64_t v70;
  const JSC::CodeOrigin *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  _QWORD *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[2];
  JSC::FTL::ExceptionTarget *v81[2];
  uint64_t v82;
  uint64_t v83[5];
  int v84;
  uint64_t v85;
  unsigned int *v86;

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)a1, (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v81);
  v7 = (unsigned int *)v81[0];
  JSC::FTL::ExceptionTarget::jumps(v81[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v86);
  if (v7)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v7, v8, v9, v10, v11, v12, v13, v14);
  v15 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = -1;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_QWORD *)(v15 + 72) = 0;
  *(_QWORD *)(v15 + 16) = -1;
  *(_QWORD *)(v15 + 32) = v15 + 48;
  *(_DWORD *)(v15 + 40) = 2;
  v85 = v15;
  JSC::MathICHolder::addJITAddIC((uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 24), *(_QWORD *)(a1 + 16));
  v21 = *(_DWORD *)(a3 + 20);
  if (!v21)
  {
    __break(0xC471u);
    goto LABEL_40;
  }
  if (v21 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7238CLL);
  }
  if (v21 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D72394);
  }
  v22 = *(_DWORD *)(a3 + 52);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7239CLL);
  }
  if (v22 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D723A4);
  }
  if (!*(_DWORD *)(a3 + 36))
  {
    __break(0xC471u);
    JUMPOUT(0x197D723ACLL);
  }
  v23 = v16;
  v24 = *(_WORD *)(a1 + 32);
  v25 = *(_QWORD *)(a1 + 34);
  v26 = *(_WORD *)(a1 + 42);
  v27 = *(_BYTE **)(a3 + 8);
  v28 = *v27 & 0x7F;
  v29 = v27[16] & 0x7F;
  LOBYTE(v27) = v27[32] & 0x7F;
  v30 = *(char **)(a3 + 40);
  v31 = *v30;
  LOBYTE(v30) = v30[1];
  v32 = **(_BYTE **)(a3 + 24);
  *(_QWORD *)(v16 + 57) = *(_QWORD *)(a1 + 24);
  *(_WORD *)(v16 + 65) = v24;
  *(_QWORD *)(v16 + 67) = v25;
  *(_WORD *)(v16 + 75) = v26;
  *(_BYTE *)(v16 + 77) = v28;
  *(_BYTE *)(v16 + 78) = v29;
  *(_BYTE *)(v16 + 79) = (_BYTE)v27;
  *(_BYTE *)(v16 + 80) = v31;
  *(_BYTE *)(v16 + 81) = (_BYTE)v30;
  *(_BYTE *)(v16 + 82) = v32;
  JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::generateInline(v16, a2, v15 + 8, 0, v17, v18, v19, v20);
  if (v40)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v33, v34, v35, v36, v37, v38, v39, (int *)v80);
    do
      v41 = __ldaxr((unsigned int *)v15);
    while (__stlxr(v41 + 1, (unsigned int *)v15));
    v42 = *(JSC::FTL::ExceptionTarget **)(a1 + 8);
    v81[0] = (JSC::FTL::ExceptionTarget *)v15;
    v81[1] = v42;
    JSC::B3::StackmapGenerationParams::StackmapGenerationParams((uint64_t)&v82, (const JSC::B3::StackmapGenerationParams *)a3);
    JSC::CodeOrigin::CodeOrigin(v83, (const JSC::CodeOrigin *)(a1 + 48));
    v43 = v86;
    if (v86)
    {
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 + 1, v43));
    }
    v45 = *(_QWORD *)(a1 + 56);
    v46 = *(_QWORD *)(a1 + 64);
    v83[1] = (uint64_t)v43;
    v83[2] = v45;
    v83[3] = v23;
    v83[4] = v46;
    v84 = v80[0];
    goto LABEL_17;
  }
  v69 = *(_QWORD **)(a1 + 8);
  v80[0] = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)a3);
  v80[1] = v70;
  v71 = (const JSC::CodeOrigin *)(a1 + 48);
  JSC::CodeOrigin::CodeOrigin(&v79, (const JSC::CodeOrigin *)(a1 + 48));
  if (!*(_DWORD *)(a3 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x197D723B4);
  }
  v72 = (uint64_t)v86;
  v73 = *(_QWORD *)(a1 + 64);
  v74 = **(_BYTE **)(a3 + 8);
  v75 = *(_QWORD *)(a2 + 336);
  JSC::CodeOrigin::CodeOrigin(&v78, v71);
  v76 = (_QWORD *)(v78 & 0xFFFFFFFF8);
  if ((v78 & 1) != 0)
    v76 = (_QWORD *)*v76;
  if (v76)
    v75 = v76[1];
  v77 = *(_DWORD *)(a3 + 20);
  if (v77 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D723BCLL);
  }
  if (v77 == 2)
  {
    __break(0xC471u);
LABEL_40:
    JUMPOUT(0x197D72384);
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v81, v69, v80, a2, v79, v72 + 8, v73, v74 & 0x7F, *(_QWORD *)(v75 + 8), *(_BYTE *)(*(_QWORD *)(a3 + 8) + 16) & 0x7F, *(_BYTE *)(*(_QWORD *)(a3 + 8) + 32) & 0x7F);
  if ((v78 & 1) != 0 && (v78 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v78 & 0xFFFFFFFF8, v54, v55, v56, v57, v58, v59, v60);
  if ((v79 & 1) != 0 && (v79 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v79 & 0xFFFFFFFF8, v54, v55, v56, v57, v58, v59, v60);
LABEL_17:
  WTF::Box<JSC::MathICGenerationState>::~Box((unint64_t *)&v85, v54, v55, v56, v57, v58, v59, v60);
  result = WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::~Box((unint64_t *)&v86, v61, v62, v63, v64, v65, v66, v67);
  *(_BYTE *)(a2 + 212) = v6;
  return result;
}

uint64_t JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE v16[128];
  unsigned int *v17;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v17;
    *(_DWORD *)(a1 + 12) = v10 + 1;
  }
}

void JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, unsigned __int8 a11)
{
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;

  v14 = a5;
  v18 = *(_QWORD *)(*a2 + 16);
  if ((a5 & 1) == 0)
  {
    if ((a5 & 2) == 0)
      goto LABEL_3;
LABEL_37:
    v24 = 0xFFFFFFFFLL;
    goto LABEL_7;
  }
  v40 = *(_QWORD *)(a5 & 0xFFFFFFFF8);
  if ((a5 & 2) != 0
    || ((v41 = *(unsigned int *)((a5 & 0xFFFFFFFF8) + 8), (_DWORD)v41 != 0x3FFFFFFF)
      ? (v42 = (_DWORD)v41 == -1)
      : (v42 = 1),
        v42))
  {
    v43 = 2;
  }
  else if (v41 >> 28)
  {
    v52 = a2;
    v50 = WTF::fastMalloc((WTF *)0x10);
    a2 = v52;
    *(_QWORD *)v50 = v40;
    *(_DWORD *)(v50 + 8) = v41;
    v43 = 1;
    v40 = v50;
  }
  else
  {
    v43 = *(_QWORD *)(a5 & 0xFFFFFFFF8);
    v40 = v41 << 36;
  }
  v14 = v40 | v43;
  if (((v40 | v43) & 2) != 0)
    goto LABEL_37;
LABEL_3:
  v19 = *(_QWORD *)(a2[3] + 64);
  v20 = v14;
  if ((v14 & 1) != 0)
  {
    v44 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    v45 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v45 == 0x3FFFFFFF || (_DWORD)v45 == -1)
    {
      v47 = 2;
    }
    else if (v45 >> 28)
    {
      v51 = *(_QWORD *)(a2[3] + 64);
      v48 = *(_DWORD *)((v14 & 0xFFFFFFFF8) + 8);
      v49 = WTF::fastMalloc((WTF *)0x10);
      v19 = v51;
      *(_QWORD *)v49 = v44;
      *(_DWORD *)(v49 + 8) = v48;
      v47 = 1;
      v44 = v49;
    }
    else
    {
      v47 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v44 = v45 << 36;
    }
    v20 = v44 | v47;
  }
  v53 = v20;
  v23 = JSC::DFG::CodeOriginPool::addCodeOrigin(v19, &v53);
  if ((v53 & 1) != 0 && (v53 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v53 & 0xFFFFFFFF8, v21, v22, a4, a5, a6, a7, a8);
  if (v23)
  {
    v24 = v23;
LABEL_7:
    if (!*(_BYTE *)(a4 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197D7261CLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a4, (JSC::ARM64LogicalImmediate *)v24, a4 + 264, a4, a5, a6, a7, a8);
    v32 = *(_DWORD *)(a4 + 200);
    if (v32 + 4 > *(_DWORD *)(a4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), v25, v26, v27, v28, v29, v30, v31);
      v32 = *(_DWORD *)(a4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + v32) = -1207811152;
    *(_DWORD *)(a4 + 200) += 4;
  }
  JSC::FTL::callOperation<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(a1, v18, a3[1] | *a3, (_DWORD *)a4, a6, a7, a8, a9, a10, a11);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, v33, v34, v35, v36, v37, v38, v39);
}

uint64_t WTF::createSharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3575830;
  *a1 = v4;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int *v47;
  unsigned int v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  char v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69[2];
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int *v73;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link(*a1 + 8, a2, a3, a4, a5, a6, a7, a8);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v11, v12, v13, v14, v15, v16, v17, (int *)&v72);
  v18 = *a1;
  v18[4] = v72;
  if (!*((_BYTE *)v18 + 72))
  {
    v19 = a1[1];
    v70 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 2));
    v71 = v20;
    JSC::CodeOrigin::CodeOrigin(&v67, (const JSC::CodeOrigin *)(a1 + 10));
    if (*((_DWORD *)a1 + 9))
    {
      v21 = a1[11];
      v22 = (uint64_t)a1[14];
      v23 = *(_BYTE *)a1[3];
      v24 = *(_QWORD *)(a2 + 336);
      JSC::CodeOrigin::CodeOrigin(&v66, (const JSC::CodeOrigin *)(a1 + 10));
      v25 = (_QWORD *)(v66 & 0xFFFFFFFF8);
      if ((v66 & 1) != 0)
        v25 = (_QWORD *)*v25;
      if (v25)
        v24 = v25[1];
      v26 = *((_DWORD *)a1 + 9);
      if (v26 <= 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197D72A7CLL);
      }
      if (v26 == 2)
      {
        __break(0xC471u);
        JUMPOUT(0x197D72A84);
      }
      JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)&v72, v19, &v70, a2, v67, (uint64_t)(v21 + 2), v22, v23 & 0x7F, *(_QWORD *)(v24 + 8), a1[3][4] & 0x7F, a1[3][8] & 0x7F);
      if ((v66 & 1) != 0 && (v66 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v66 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
      v34 = v67;
      if ((v67 & 1) == 0)
        goto LABEL_13;
LABEL_28:
      if ((v34 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v34 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
      goto LABEL_13;
    }
    __break(0xC471u);
LABEL_40:
    JUMPOUT(0x197D72A74);
  }
  v57 = (unsigned __int8 *)a1[1];
  v70 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 2));
  v71 = v58;
  JSC::CodeOrigin::CodeOrigin((uint64_t *)v69, (const JSC::CodeOrigin *)(a1 + 10));
  if (!*((_DWORD *)a1 + 9))
  {
    __break(0xC471u);
    JUMPOUT(0x197D72A8CLL);
  }
  v60 = a1[11];
  v59 = (uint64_t)a1[12];
  v61 = *(_BYTE *)a1[3];
  v62 = *(_QWORD *)(a2 + 336);
  JSC::CodeOrigin::CodeOrigin(&v68, (const JSC::CodeOrigin *)(a1 + 10));
  v63 = (_QWORD *)(v68 & 0xFFFFFFFF8);
  if ((v68 & 1) != 0)
    v63 = (_QWORD *)*v63;
  if (v63)
    v62 = v63[1];
  v64 = *((_DWORD *)a1 + 9);
  if (v64 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D72A94);
  }
  if (v64 == 2)
  {
    __break(0xC471u);
    goto LABEL_40;
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)&v72, v57, &v70, a2, *(uint64_t *)v69, (uint64_t)(v60 + 2), v59, v61 & 0x7F, *(_QWORD *)(v62 + 8), a1[3][4] & 0x7F, a1[3][8] & 0x7F, (JSC::ARM64LogicalImmediate *)a1[13]);
  if ((v68 & 1) != 0 && (v68 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v68 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  v34 = *(_QWORD *)v69;
  if ((v69[0] & 1) != 0)
    goto LABEL_28;
LABEL_13:
  *(_QWORD *)(*a1 + 5) = v72;
  JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), (uint64_t)v27, v28, v29, v30, v31, v32, v33, (int *)&v70);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v35, v36, v37, v38, v39, v40);
  if (*(_BYTE *)(a2 + 328))
    v46 = 69;
  else
    v46 = 65;
  v72 = (unsigned int *)v70;
  LOBYTE(v73) = v46;
  *(_WORD *)((char *)&v73 + 1) = 15;
  BYTE3(v73) = -1;
  v65 = *((_DWORD *)a1 + 30);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v72, &v65, a2, v41, v42, v43, v44, v45);
  v72 = a1[13];
  v47 = *a1;
  if (*a1)
  {
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 + 1, v47));
  }
  v73 = v47;
  result = void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}::~LinkBuffer((uint64_t)&v72, v49, v50, v51, v52, v53, v54, v55);
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

void JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, unsigned __int8 a11, JSC::ARM64LogicalImmediate *a12)
{
  uint64_t *v12;
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint8x8_t v39;
  __int32 v40;
  uint8x8_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  char v52;
  char v53;
  uint64_t v54;
  unsigned __int8 *v55;
  char *v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  unsigned __int8 *v60;
  char *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  int v64;
  unsigned __int8 *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int8x8_t v91;
  int v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 *v106;
  uint64_t v107;
  int64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  int v113;
  uint64_t v114;
  void *__dst;
  __int128 v116;
  uint64_t v117;
  uint64_t v118[9];

  v12 = (uint64_t *)a8;
  v14 = a5;
  v18 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if ((a5 & 1) == 0)
  {
    if ((a5 & 2) == 0)
      goto LABEL_3;
LABEL_105:
    v24 = 0xFFFFFFFFLL;
    goto LABEL_7;
  }
LABEL_81:
  v96 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
  if ((v14 & 2) != 0
    || ((v97 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v97 != 0x3FFFFFFF)
      ? (v98 = (_DWORD)v97 == -1)
      : (v98 = 1),
        v98))
  {
    v99 = 2;
  }
  else if (v97 >> 28)
  {
    v106 = a2;
    v107 = WTF::fastMalloc((WTF *)0x10);
    a2 = v106;
    *(_QWORD *)v107 = v96;
    *(_DWORD *)(v107 + 8) = v97;
    v99 = 1;
    v96 = v107;
  }
  else
  {
    v99 = v96;
    v96 = v97 << 36;
  }
  v14 = v96 | v99;
  if (((v96 | v99) & 2) != 0)
    goto LABEL_105;
LABEL_3:
  v19 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
  v20 = v14;
  if ((v14 & 1) != 0)
  {
    v100 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    v101 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v101 == 0x3FFFFFFF || (_DWORD)v101 == -1)
    {
      v103 = 2;
    }
    else if (v101 >> 28)
    {
      v104 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
      v105 = WTF::fastMalloc((WTF *)0x10);
      v19 = v104;
      *(_QWORD *)v105 = v100;
      *(_DWORD *)(v105 + 8) = v101;
      v103 = 1;
      v100 = v105;
    }
    else
    {
      v103 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v100 = v101 << 36;
    }
    v20 = v100 | v103;
  }
  v118[0] = v20;
  v23 = JSC::DFG::CodeOriginPool::addCodeOrigin(v19, v118);
  if ((v118[0] & 1) != 0 && (v118[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v118[0] & 0xFFFFFFFF8, v21, v22, a4, a5, a6, a7, a8);
  if (v23)
  {
    v24 = v23;
LABEL_7:
    if (!*(_BYTE *)(a4 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197D73080);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a4, (JSC::ARM64LogicalImmediate *)v24, a4 + 264, a4, a5, a6, a7, a8);
    v30 = *(_DWORD *)(a4 + 200);
    if (v30 + 4 > *(_DWORD *)(a4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), v25, v26, v27, v28, v29, a7, a8);
      v30 = *(_DWORD *)(a4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + v30) = -1207811152;
    *(_DWORD *)(a4 + 200) += 4;
  }
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v118, a3[1] | *a3, a4, 5u, (uint64_t)v12, 0xFFFFFFFFLL, a7, a8);
  a3 = (_QWORD *)&v116 + 1;
  __dst = (char *)&v116 + 8;
  LODWORD(v116) = 2;
  if (a10 == 1)
  {
    if (a11 == 2)
    {
      v12 = &v114;
      goto LABEL_72;
    }
    v32 = 0;
    goto LABEL_16;
  }
  WORD4(v116) = a10 | 0x100;
  v32 = 1;
  DWORD1(v116) = 1;
  if (a11 != 2)
  {
LABEL_16:
    *((_WORD *)&v116 + v32++ + 4) = a11 | 0x200;
    DWORD1(v116) = v32;
  }
  v12 = &v114;
  do
  {
    v33 = 0;
    v34 = 0;
    v35 = (char *)__dst;
    v36 = v32;
    do
    {
      if ((*((_BYTE *)__dst + v33 + 1) & 0x40) != 0)
      {
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
      v34 |= 1 << *((_BYTE *)__dst + v33 + 1);
      v33 += 2;
    }
    while (2 * v32 != v33);
    v37 = 0;
    do
    {
      v38 = *((_BYTE *)__dst + v37) & 0x7F;
      if (v38 >= 0x40)
        goto LABEL_80;
      v34 &= ~(1 << v38);
      v37 += 2;
    }
    while (2 * v32 != v37);
    v39 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
    v39.i16[0] = vaddlv_u8(v39);
    v40 = v39.i32[0];
    v41 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v34));
    v41.i16[0] = vaddlv_u8(v41);
    if (v41.i32[0] + v40)
    {
      v42 = 0;
      if (v32 <= 1)
        v43 = 1;
      else
        v43 = v32;
      v44 = 2 * v43;
      while (1)
      {
        v45 = *((unsigned __int8 *)__dst + v42 + 1);
        if ((v45 & 0x7Fu) >= 0x40)
          goto LABEL_80;
        if (((v34 >> (v45 & 0x7F)) & 1) != 0)
          break;
        v42 += 2;
        if (v44 == v42)
          goto LABEL_68;
      }
      v46 = *((unsigned __int8 *)__dst + v42);
      if (v46 != v45)
      {
        v47 = (char)v46;
        if ((char)v46 == 63)
        {
          v48 = *(_DWORD *)(a4 + 200);
          v49 = *(_DWORD *)(a4 + 192);
          if ((char)v45 == 31)
            goto LABEL_62;
          v51 = v45 & 0x1F | 0xD2800000;
        }
        else
        {
          v48 = *(_DWORD *)(a4 + 200);
          v49 = *(_DWORD *)(a4 + 192);
          v50 = v45 == 31 || v47 == 31;
          if (!v50)
          {
            v51 = v45 & 0xFFE0FFFF | ((v47 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_63;
          }
LABEL_62:
          v51 = (char)v45 | (32 * v47) | 0x91000000;
        }
LABEL_63:
        if (v48 + 4 > v49)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), (uint64_t)a2, v31, a4, a5, a6, a7, a8);
          v48 = *(_DWORD *)(a4 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a4 + 56) + v48) = v51;
        *(_DWORD *)(a4 + 200) += 4;
        v35 = (char *)__dst;
        v36 = DWORD1(v116);
      }
      memmove(&v35[v42], &v35[v42 + 2], 2 * v36 - v42 - 2);
      v32 = DWORD1(v116) - 1;
      goto LABEL_67;
    }
    v111 = v18;
    v52 = *(_BYTE *)__dst;
    v53 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a4, *(char *)__dst, v53, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v116) - 2);
    v54 = (DWORD1(v116) - 1);
    v50 = DWORD1(v116) == 1;
    DWORD1(v116) = v54;
    v55 = (unsigned __int8 *)__dst;
    v56 = (char *)__dst + 2 * v54;
    if (v50)
    {
      v63 = 0;
      v64 = 0;
      v59 = 0;
      a2 = (unsigned __int8 *)v56;
    }
    else
    {
      v57 = 2 * v54;
      v58 = __dst;
      while (*v58 != v53)
      {
        v58 += 2;
        v57 -= 2;
        if (!v57)
          goto LABEL_46;
      }
      *v58 = v52;
LABEL_46:
      v59 = 0;
      v60 = v55;
      a2 = (unsigned __int8 *)v56;
      v61 = v56;
      do
      {
        if (*v55 == v55[1])
        {
          v62 = v55;
          if (v61 != (char *)__dst + 2 * DWORD1(v116))
          {
            v110 = v56;
            if (v55 == a2)
            {
              v62 = (unsigned __int8 *)v61;
            }
            else
            {
              v108 = v60 - a2;
              v109 = v61;
              memmove(v61, a2, v60 - a2);
              v62 = (unsigned __int8 *)&v109[v108];
            }
            v56 = v110;
          }
          a2 = v55 + 2;
          ++v59;
          v61 = (char *)v62;
        }
        v55 += 2;
        v60 += 2;
      }
      while (v55 < (unsigned __int8 *)v56);
      v55 = (unsigned __int8 *)__dst;
      v63 = DWORD1(v116);
      v64 = DWORD1(v116);
      v56 = v61;
    }
    v65 = &v55[2 * v63];
    v18 = v111;
    if (a2 != v65)
    {
      memmove(v56, a2, v65 - a2);
      v64 = DWORD1(v116);
    }
    v32 = v64 - v59;
LABEL_67:
    DWORD1(v116) = v32;
LABEL_68:
    ;
  }
  while (v32);
  v66 = __dst;
  if ((char *)&v116 + 8 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v116) = 0;
    WTF::fastFree((unint64_t)v66, a2, v31, a4, a5, a6, a7, a8);
  }
LABEL_72:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a4, (uint64_t)a12, 3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a4, a9, 0, v67, v68, v69, v70, v71);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v118, v18, a7, v72, v73, v74, v75, v76, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v116;
  *(_QWORD *)(a1 + 24) = v117;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v118, v77, v78, v79, v80, v81, v82, v83);
  if (a6)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a4, v18, 0, 0, 0xFFFFFFFFLL, v88, v89, v90, (uint64_t)&v113, v91);
    v92 = v113;
    if (v113 != -1)
    {
      v93 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v93 == *(_DWORD *)(a6 + 8))
      {
        v94 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (void *)(v93 + 1), (unint64_t)&v113, v86, v87, v88, v89, v90);
        v12 = (uint64_t *)(v94 + 1);
        v92 = *v94;
        LODWORD(v93) = *(_DWORD *)(a6 + 12);
      }
      v95 = *(_QWORD *)a6 + 12 * v93;
      *(_DWORD *)v95 = v92;
      *(_QWORD *)(v95 + 4) = *v12;
      ++*(_DWORD *)(a6 + 12);
    }
  }
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, v84, v85, v86, v87, v88, v89, v90);
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = WTF::fastMalloc((WTF *)0x20);
  v5 = v4;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3575858;
  *(_QWORD *)(v4 + 16) = *a2;
  v6 = (unsigned int *)a2[1];
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(v4 + 24) = v6;
  v8 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v8 != *(_DWORD *)(a1 + 240))
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
LABEL_14:
    *v9 = v5;
    *(_DWORD *)(a1 + 244) = v8 + 1;
    return;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = *(const void **)(a1 + 232);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a1 + 240) = v12;
    *(_QWORD *)(a1 + 232) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*(const void **)(a1 + 232) == v13)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v8 = *(unsigned int *)(a1 + 244);
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
    goto LABEL_14;
  }
  __break(0xC471u);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v13 && v13 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;

  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v12 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v12 && v12 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  return JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::finalizeInlineCode(*(_QWORD **)(a1 + 16), (int *)(*(_QWORD *)(a1 + 24) + 8), a2);
}

void JSC::FTL::callOperation<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint8x8_t v31;
  __int32 v32;
  uint8x8_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  _BYTE *v48;
  int v49;
  unsigned __int8 *v50;
  char *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  int v54;
  unsigned __int8 *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int8x8_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  uint64_t *v80;
  int v81;
  _DWORD *v82;
  uint64_t *v83;
  _DWORD *v84;
  int64_t v85;
  char *v86;
  int v87;
  char v88;
  char *v89;
  int v90;
  uint64_t v91;
  void *__dst;
  __int128 v93;
  uint64_t v94;
  _QWORD v95[9];

  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  v16 = (unsigned __int8 *)JSC::FTL::SlowPathCallContext::SlowPathCallContext(v95, a3, (uint64_t)a4, 4u, a7, 0xFFFFFFFFLL, a7, a8);
  __dst = (char *)&v93 + 8;
  LODWORD(v93) = 2;
  if (a9 == 1)
  {
    if (a10 == 2)
      goto LABEL_61;
    v24 = 0;
    goto LABEL_6;
  }
  WORD4(v93) = a9 | 0x100;
  v24 = 1;
  DWORD1(v93) = 1;
  if (a10 != 2)
  {
LABEL_6:
    *((_WORD *)&v93 + v24++ + 4) = a10 | 0x200;
    DWORD1(v93) = v24;
    goto LABEL_7;
  }
  do
  {
LABEL_7:
    v25 = 0;
    v26 = 0;
    v27 = (char *)__dst;
    v28 = v24;
    do
    {
      if ((*((_BYTE *)__dst + v25 + 1) & 0x40) != 0)
      {
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      v26 |= 1 << *((_BYTE *)__dst + v25 + 1);
      v25 += 2;
    }
    while (2 * v24 != v25);
    v29 = 0;
    do
    {
      v30 = *((_BYTE *)__dst + v29) & 0x7F;
      if (v30 >= 0x40)
        goto LABEL_69;
      v26 &= ~(1 << v30);
      v29 += 2;
    }
    while (2 * v24 != v29);
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
    v31.i16[0] = vaddlv_u8(v31);
    v32 = v31.i32[0];
    v33 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
    v33.i16[0] = vaddlv_u8(v33);
    if (v33.i32[0] + v32)
    {
      v34 = 0;
      if (v24 <= 1)
        v35 = 1;
      else
        v35 = v24;
      v36 = 2 * v35;
      while (1)
      {
        v37 = *((unsigned __int8 *)__dst + v34 + 1);
        if ((v37 & 0x7Fu) >= 0x40)
          goto LABEL_69;
        if (((v26 >> (v37 & 0x7F)) & 1) != 0)
          break;
        v34 += 2;
        if (v36 == v34)
          goto LABEL_57;
      }
      v38 = *((unsigned __int8 *)__dst + v34);
      if (v38 != v37)
      {
        v39 = (char)v38;
        if ((char)v38 == 63)
        {
          v40 = a4[50];
          v41 = a4[48];
          if (v37 == 31)
            goto LABEL_51;
          v43 = v37 & 0x1F | 0xD2800000;
        }
        else
        {
          v40 = a4[50];
          v41 = a4[48];
          v42 = (char)v37 == 31 || v39 == 31;
          if (!v42)
          {
            v43 = v37 & 0xFFE0FFFF | ((v39 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_52;
          }
LABEL_51:
          v43 = (char)v37 | (32 * v39) | 0x91000000;
        }
LABEL_52:
        if (v40 + 4 > v41)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 14), (uint64_t)v17, v18, v19, v20, v21, v22, v23);
          v40 = a4[50];
        }
        *(_DWORD *)(*((_QWORD *)a4 + 7) + v40) = v43;
        a4[50] += 4;
        v27 = (char *)__dst;
        v28 = DWORD1(v93);
      }
      v16 = (unsigned __int8 *)memmove(&v27[v34], &v27[v34 + 2], 2 * v28 - v34 - 2);
      v24 = DWORD1(v93) - 1;
      goto LABEL_56;
    }
    v44 = *(_BYTE *)__dst;
    v88 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)a4, *(char *)__dst, v88, v19, v20, v21, v22, v23);
    memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v93) - 2);
    v45 = (DWORD1(v93) - 1);
    v42 = DWORD1(v93) == 1;
    DWORD1(v93) = v45;
    v46 = (unsigned __int8 *)__dst;
    v16 = (unsigned __int8 *)__dst + 2 * v45;
    if (v42)
    {
      v53 = 0;
      v54 = 0;
      v49 = 0;
      v17 = v16;
    }
    else
    {
      v47 = 2 * v45;
      v48 = __dst;
      while (*v48 != v88)
      {
        v48 += 2;
        v47 -= 2;
        if (!v47)
          goto LABEL_35;
      }
      *v48 = v44;
LABEL_35:
      v49 = 0;
      v50 = v46;
      v17 = v16;
      v51 = (char *)v16;
      do
      {
        if (*v46 == v46[1])
        {
          v52 = v46;
          if (v51 != (char *)__dst + 2 * DWORD1(v93))
          {
            v87 = v49;
            v89 = (char *)v16;
            if (v46 == v17)
            {
              v52 = (unsigned __int8 *)v51;
            }
            else
            {
              v85 = v50 - v17;
              v86 = v51;
              memmove(v51, v17, v50 - v17);
              v52 = (unsigned __int8 *)&v86[v85];
            }
            v16 = (unsigned __int8 *)v89;
            v49 = v87;
          }
          v17 = v46 + 2;
          ++v49;
          v51 = (char *)v52;
        }
        v46 += 2;
        v50 += 2;
      }
      while (v46 < v16);
      v46 = (unsigned __int8 *)__dst;
      v53 = DWORD1(v93);
      v54 = DWORD1(v93);
      v16 = (unsigned __int8 *)v51;
    }
    v55 = &v46[2 * v53];
    if (v17 != v55)
    {
      v56 = v49;
      v16 = (unsigned __int8 *)memmove(v16, v17, v55 - v17);
      v49 = v56;
      v54 = DWORD1(v93);
    }
    v24 = v54 - v49;
LABEL_56:
    DWORD1(v93) = v24;
LABEL_57:
    ;
  }
  while (v24);
  v16 = (unsigned __int8 *)__dst;
  if ((char *)&v93 + 8 == __dst)
    goto LABEL_61;
LABEL_70:
  if (v16)
  {
    __dst = 0;
    LODWORD(v93) = 0;
    WTF::fastFree((unint64_t)v16, v17, v18, v19, v20, v21, v22, v23);
  }
LABEL_61:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a4, a8, 0, v19, v20, v21, v22, v23);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v95, a2, a6, v57, v58, v59, v60, v61, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v93;
  *(_QWORD *)(a1 + 24) = v94;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v95, v62, v63, v64, v65, v66, v67, v68);
  if (a5)
  {
    JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)a4, a2, 0, 0, 0xFFFFFFFFLL, v69, v70, v71, (uint64_t)&v90, v72);
    if (v90 != -1)
    {
      v78 = *(unsigned int *)(a5 + 12);
      if ((_DWORD)v78 == *(_DWORD *)(a5 + 8))
      {
        v79 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, (void *)(v78 + 1), (unint64_t)&v90, v73, v74, v75, v76, v77);
        v81 = *v79;
        v80 = (uint64_t *)(v79 + 1);
        v82 = (_DWORD *)(*(_QWORD *)a5 + 12 * *(unsigned int *)(a5 + 12));
        *v82 = v81;
        v83 = (uint64_t *)(v82 + 1);
      }
      else
      {
        v84 = (_DWORD *)(*(_QWORD *)a5 + 12 * v78);
        *v84 = v90;
        v83 = (uint64_t *)(v84 + 1);
        v80 = &v91;
      }
      *v83 = *v80;
      ++*(_DWORD *)(a5 + 12);
    }
  }
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char v33;
  char v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  JSC::FTL::PatchpointExceptionHandle *v109;
  __n128 v110;
  uint64_t v111;
  __int128 v112;
  char v113;

  v4 = *(uint64_t **)(a1 + 28224);
  v13 = v4[3];
  v14 = *(_QWORD *)(a1 + 28040);
  v15 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (_QWORD *)(v14 + 24);
  v17 = (_QWORD *)(v14 + 8);
  if ((v13 & 1) != 0)
    v18 = v16;
  else
    v18 = v17;
  v19 = *v18 + 32 * v15;
  v20 = (void *)*(unsigned int *)(a1 + 28120);
  if ((_DWORD)v20 != *(_DWORD *)(v19 + 20))
  {
    if ((*(_QWORD *)(v19 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v19, v20, v6, v7, v8, v9, v10, v11);
    else
      *(_DWORD *)(v19 + 20) = (_DWORD)v20;
  }
  v108 = a2;
  v21 = *(_QWORD *)(v19 + 8);
  if ((v21 & 0xFFFFFF8CCFFFFFFFLL) != 0)
    v22 = 126;
  else
    v22 = 6;
  if ((v21 & 0xFFFFFFFFCFFFFFFFLL) == 0)
    v22 = 4;
  if ((v21 & 0xFFFFFF8CFFFFFFFFLL) == 0)
    v22 = 2;
  if ((v21 & 0xFFFFFFFCFFFFFFFFLL) == 0)
    v22 = 3;
  if ((v21 & 0xFFFFFEFFFFFFFFFFLL) != 0)
    v23 = v22;
  else
    v23 = 32;
  v107 = v23;
  v24 = v4[4];
  v25 = *(_QWORD *)(a1 + 28040);
  v26 = *(unsigned int *)((v24 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v27 = (_QWORD *)(v25 + 24);
  v28 = (_QWORD *)(v25 + 8);
  if ((v24 & 1) != 0)
    v29 = v27;
  else
    v29 = v28;
  v30 = *v29 + 32 * v26;
  v31 = (void *)*(unsigned int *)(a1 + 28120);
  if ((_DWORD)v31 != *(_DWORD *)(v30 + 20))
  {
    if ((*(_QWORD *)(v30 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v30, v31, v6, v7, v8, v9, v10, v11);
    else
      *(_DWORD *)(v30 + 20) = (_DWORD)v31;
  }
  v32 = *(_QWORD *)(v30 + 8);
  if ((v32 & 0xFFFFFF8CCFFFFFFFLL) != 0)
    v33 = 126;
  else
    v33 = 6;
  if ((v32 & 0xFFFFFFFFCFFFFFFFLL) == 0)
    v33 = 4;
  if ((v32 & 0xFFFFFF8CFFFFFFFFLL) == 0)
    v33 = 2;
  if ((v32 & 0xFFFFFFFCFFFFFFFFLL) == 0)
    v33 = 3;
  if ((v32 & 0xFFFFFEFFFFFFFFFFLL) != 0)
    v34 = v33;
  else
    v34 = 32;
  v35 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)(a1 + 27640), 2);
  v112 = (unint64_t)v5;
  v113 = 3;
  JSC::B3::StackmapValue::append(v35, v5, (unint64_t)&v112 + 8);
  v112 = (unint64_t)v12;
  v113 = 3;
  JSC::B3::StackmapValue::append(v35, v12, (unint64_t)&v112 + 8);
  v36 = *(_QWORD *)(a1 + 27904);
  v112 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v35, v36, (unint64_t)&v112);
  v37 = *(_QWORD *)(a1 + 27896);
  v112 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v35, v37, (unint64_t)&v112);
  *((_WORD *)v35 + 84) = 513;
  *((_QWORD *)v35 + 8) |= 0x30000uLL;
  *((_QWORD *)v35 + 10) |= 0x30000uLL;
  v43 = *(_QWORD *)(a1 + 8);
  v44 = *v4;
  if ((*v4 & 1) != 0)
  {
    v78 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
    v45 = v108;
    if ((v44 & 2) != 0
      || (v79 = *(unsigned int *)((v44 & 0xFFFFFFFF8) + 8), (_DWORD)v79 == 0x3FFFFFFF)
      || (_DWORD)v79 == -1)
    {
      v80 = 2;
    }
    else if (v79 >> 28)
    {
      v104 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v104 = v78;
      *(_DWORD *)(v104 + 8) = v79;
      v80 = 1;
      v78 = v104;
    }
    else
    {
      v80 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
      v78 = v79 << 36;
    }
    v44 = v78 | v80;
  }
  else
  {
    v45 = a2;
  }
  v46 = (unsigned int *)v109;
  if (v109)
  {
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 + 1, v46));
  }
  v48 = v44;
  if ((v44 & 1) != 0)
  {
    v81 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
    if ((v44 & 2) != 0
      || ((v82 = *(unsigned int *)((v44 & 0xFFFFFFFF8) + 8), (_DWORD)v82 != 0x3FFFFFFF)
        ? (v83 = (_DWORD)v82 == -1)
        : (v83 = 1),
          v83))
    {
      v84 = 2;
    }
    else if (v82 >> 28)
    {
      v105 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v105 = v81;
      *(_DWORD *)(v105 + 8) = v82;
      v84 = 1;
      v81 = v105;
    }
    else
    {
      v84 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
      v81 = v82 << 36;
    }
    v48 = v81 | v84;
  }
  v49 = WTF::fastMalloc((WTF *)0x58);
  v57 = (_QWORD *)v49;
  *(_DWORD *)(v49 + 8) = 1;
  *(_QWORD *)v49 = &off_1E3575880;
  if (v46)
  {
    do
      v58 = __ldaxr(v46);
    while (__stlxr(v58 + 1, v46));
  }
  *(_QWORD *)(v49 + 16) = v46;
  *(_QWORD *)(v49 + 24) = v43;
  *(_QWORD *)(v49 + 32) = v45;
  *(_BYTE *)(v49 + 40) = v107;
  *(_BYTE *)(v49 + 41) = 0;
  *(_QWORD *)(v49 + 42) = 0;
  *(_BYTE *)(v49 + 50) = v34;
  *(_BYTE *)(v49 + 51) = 0;
  v59 = v48;
  *(_QWORD *)(v49 + 52) = 0;
  if ((v48 & 1) != 0)
  {
    v85 = *(_QWORD *)(v48 & 0xFFFFFFFF8);
    if ((v48 & 2) != 0
      || (v86 = *(unsigned int *)((v48 & 0xFFFFFFFF8) + 8), (_DWORD)v86 == 0x3FFFFFFF)
      || (_DWORD)v86 == -1)
    {
      v87 = 2;
    }
    else if (v86 >> 28)
    {
      v106 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v106 = v85;
      *(_DWORD *)(v106 + 8) = v86;
      v87 = 1;
      v85 = v106;
    }
    else
    {
      v87 = *(_QWORD *)(v48 & 0xFFFFFFFF8);
      v85 = v86 << 36;
    }
    v59 = v85 | v87;
  }
  v57[8] = v59;
  v57[9] = operationValueSubOptimize;
  v57[10] = operationValueSub;
  v60 = (unsigned int *)*((_QWORD *)v35 + 7);
  *((_QWORD *)v35 + 7) = v57;
  if (v60)
  {
    v61 = v60 + 2;
    do
    {
      v62 = __ldaxr(v61);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v61));
    if (!v63)
    {
      atomic_store(1u, v60 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 8))(v60);
    }
  }
  if ((v48 & 1) != 0 && (v48 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v48 & 0xFFFFFFFF8, v50, v51, v52, v53, v54, v55, v56);
  if (v46)
  {
    do
    {
      v64 = __ldaxr(v46);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v46));
    if (!v65)
    {
      atomic_store(1u, v46);
      JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v46, v50, v51, v52, v53, v54, v55, v56);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
  }
  v66 = *(_QWORD *)(a1 + 28224);
  v67 = *(_QWORD *)(a1 + 28168);
  v110.n128_u64[0] = (unint64_t)v35;
  v110.n128_u64[1] = v67;
  v111 = v66;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v112, (uint64_t *)(a1 + 27936), &v111, &v110);
  if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v44 & 0xFFFFFFFF8, v68, v69, v70, v71, v72, v73, v74);
  v75 = (unsigned int *)v109;
  v109 = 0;
  if (v75)
  {
    do
    {
      v76 = __ldaxr(v75);
      v77 = v76 - 1;
    }
    while (__stlxr(v77, v75));
    if (!v77)
    {
      atomic_store(1u, v75);
      JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v75, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 64);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 8);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  char v6;
  unsigned int *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  _BYTE *v31;
  char v32;
  char v33;
  char *v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int i;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  WTF *v55;
  WTF *v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  WTF *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  const JSC::CodeOrigin *v96;
  WTF *v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  _QWORD *v101;
  unsigned int v102;
  unint64_t v103;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  int v126;
  int v127;
  void *v128;
  int v129;
  int v130;
  void *v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  WTF *v141;
  JSC::FTL::ExceptionTarget *v142[16];
  uint64_t v143[2];

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 16), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v142);
  v7 = (unsigned int *)v142[0];
  JSC::FTL::ExceptionTarget::jumps(v142[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v141);
  v142[0] = 0;
  if (v7)
  {
    do
    {
      v15 = __ldaxr(v7);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v7));
    if (!v16)
    {
      atomic_store(1u, v7);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v7, v8, v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
    }
  }
  v17 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = -1;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_QWORD *)(v17 + 72) = 0;
  *(_QWORD *)(v17 + 16) = -1;
  *(_QWORD *)(v17 + 32) = v17 + 48;
  *(_DWORD *)(v17 + 40) = 2;
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  v20 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v20 = v18;
  *(_BYTE *)(v20 + 56) = 0;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 8) = 0u;
  *(_WORD *)(v20 + 57) = 126;
  *(_QWORD *)(v20 + 59) = 0;
  *(_WORD *)(v20 + 67) = 126;
  *(_QWORD *)(v20 + 69) = 0;
  *(_WORD *)(v20 + 77) = -1;
  *(_BYTE *)(v20 + 79) = -1;
  *(_QWORD *)(v20 + 88) = 0;
  *(_QWORD *)(v20 + 88) = *(_QWORD *)(v19 + 48);
  *(_QWORD *)(v19 + 48) = v20;
  v25 = a3[5];
  if (!v25)
  {
    __break(0xC471u);
    goto LABEL_93;
  }
  if (v25 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D74524);
  }
  if (v25 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7452CLL);
  }
  v26 = a3[13];
  if (!v26)
  {
    __break(0xC471u);
    JUMPOUT(0x197D74534);
  }
  if (v26 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7453CLL);
  }
  if (!a3[9])
  {
    __break(0xC471u);
    JUMPOUT(0x197D74544);
  }
  v27 = v20;
  v28 = *(_WORD *)(a1 + 48);
  v29 = *(_QWORD *)(a1 + 50);
  v30 = *(_WORD *)(a1 + 58);
  v31 = (_BYTE *)*((_QWORD *)a3 + 1);
  v32 = *v31 & 0x7F;
  v33 = v31[16] & 0x7F;
  LOBYTE(v31) = v31[32] & 0x7F;
  v34 = (char *)*((_QWORD *)a3 + 5);
  v35 = *v34;
  LOBYTE(v34) = v34[1];
  v36 = **((_BYTE **)a3 + 3);
  *(_QWORD *)(v20 + 57) = *(_QWORD *)(a1 + 40);
  *(_WORD *)(v20 + 65) = v28;
  *(_QWORD *)(v20 + 67) = v29;
  *(_WORD *)(v20 + 75) = v30;
  *(_BYTE *)(v20 + 77) = v32;
  *(_BYTE *)(v20 + 78) = v33;
  *(_BYTE *)(v20 + 79) = (_BYTE)v31;
  *(_BYTE *)(v20 + 80) = v35;
  *(_BYTE *)(v20 + 81) = (_BYTE)v34;
  *(_BYTE *)(v20 + 82) = v36;
  JSC::JITMathIC<JSC::JITSubGenerator,JSC::BinaryArithProfile>::generateInline(v20, a2, v17 + 8, 0, v21, v22, v23, v24);
  if (v44)
  {
    for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v37, v38, v39, v40, v41, v42, v43);
        i = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
      i = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
    do
      v46 = __ldaxr((unsigned int *)v17);
    while (__stlxr(v46 + 1, (unsigned int *)v17));
    v47 = *(_QWORD *)(a1 + 24);
    v122 = v17;
    v123 = v47;
    v48 = *(_QWORD *)a3;
    v49 = a3[5];
    v125 = 0;
    v126 = 0;
    v124 = v48;
    v127 = v49;
    if ((_DWORD)v49)
    {
      if (v49 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x197D7454CLL);
      }
      v50 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v49));
      v126 = v49;
      v125 = v50;
      v51 = a3[5];
      if ((_DWORD)v51)
      {
        v52 = (__int128 *)*((_QWORD *)a3 + 1);
        v53 = 16 * v51;
        do
        {
          v54 = *v52++;
          *v50++ = v54;
          v53 -= 16;
        }
        while (v53);
      }
    }
    v55 = (WTF *)a3[9];
    v128 = 0;
    v129 = 0;
    v130 = (int)v55;
    if ((_DWORD)v55)
    {
      v129 = (int)v55;
      v128 = (void *)WTF::fastMalloc(v55);
      memcpy(v128, *((const void **)a3 + 3), a3[9]);
    }
    v56 = (WTF *)a3[13];
    v131 = 0;
    v132 = 0;
    v133 = (int)v56;
    if ((_DWORD)v56)
    {
      v132 = (int)v56;
      v131 = (void *)WTF::fastMalloc(v56);
      memcpy(v131, *((const void **)a3 + 5), a3[13]);
    }
    v134 = *((_QWORD *)a3 + 7);
    v57 = *(_QWORD *)(a1 + 64);
    if ((v57 & 1) != 0)
    {
      v115 = *(_QWORD *)(v57 & 0xFFFFFFFF8);
      if ((v57 & 2) != 0
        || ((v116 = *(unsigned int *)((v57 & 0xFFFFFFFF8) + 8), (_DWORD)v116 != 0x3FFFFFFF)
          ? (v117 = (_DWORD)v116 == -1)
          : (v117 = 1),
            v117))
      {
        v118 = 2;
      }
      else if (v116 >> 28)
      {
        v119 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v119 = v115;
        *(_DWORD *)(v119 + 8) = v116;
        v118 = 1;
        v115 = v119;
      }
      else
      {
        v118 = *(_QWORD *)(v57 & 0xFFFFFFFF8);
        v115 = v116 << 36;
      }
      v57 = v115 | v118;
    }
    v135 = v57;
    v58 = (unsigned int *)v141;
    if (v141)
    {
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 + 1, v58));
    }
    v60 = *(_QWORD *)(a1 + 72);
    v61 = *(_QWORD *)(a1 + 80);
    v136 = v58;
    v137 = v60;
    v138 = v27;
    v139 = v61;
    v140 = i;
    v62 = *((_QWORD *)a3 + 7);
    v63 = WTF::fastMalloc((WTF *)0x90);
    *(_DWORD *)(v63 + 8) = 1;
    *(_QWORD *)v63 = off_1E35758A8;
    v143[0] = v63;
    v71 = *(unsigned int *)(v62 + 12);
    if ((_DWORD)v71 == *(_DWORD *)(v62 + 8))
    {
      WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v62, v143);
      v91 = (unsigned int *)v143[0];
      v143[0] = 0;
      if (v91)
      {
        v92 = v91 + 2;
        do
        {
          v93 = __ldaxr(v92);
          v94 = v93 - 1;
        }
        while (__stlxr(v94, v92));
        if (!v94)
        {
          atomic_store(1u, v91 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v91 + 8))(v91);
        }
      }
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)v62 + 8 * v71) = v63;
      *(_DWORD *)(v62 + 12) = v71 + 1;
    }
    goto LABEL_32;
  }
  v120 = *(_QWORD **)(a1 + 24);
  v122 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)a3);
  v123 = v95;
  v96 = (const JSC::CodeOrigin *)(a1 + 64);
  JSC::CodeOrigin::CodeOrigin(v143, (const JSC::CodeOrigin *)(a1 + 64));
  if (!a3[5])
  {
    __break(0xC471u);
    JUMPOUT(0x197D74554);
  }
  v97 = v141;
  v98 = *(_QWORD *)(a1 + 80);
  v99 = **((_BYTE **)a3 + 1);
  v100 = *(_QWORD *)(a2 + 336);
  JSC::CodeOrigin::CodeOrigin(&v121, v96);
  v101 = (_QWORD *)(v121 & 0xFFFFFFFF8);
  if ((v121 & 1) != 0)
    v101 = (_QWORD *)*v101;
  if (v101)
    v100 = v101[1];
  v102 = a3[5];
  if (v102 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7455CLL);
  }
  if (v102 == 2)
  {
    __break(0xC471u);
LABEL_93:
    JUMPOUT(0x197D7451CLL);
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v142, v120, &v122, a2, v143[0], (uint64_t)v97 + 8, v98, v99 & 0x7F, *(_QWORD *)(v100 + 8), *(_BYTE *)(*((_QWORD *)a3 + 1) + 16) & 0x7F, *(_BYTE *)(*((_QWORD *)a3 + 1) + 32) & 0x7F);
  if ((v121 & 1) != 0 && (v121 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v121 & 0xFFFFFFFF8, v79, v80, v81, v82, v83, v84, v85);
  if ((v143[0] & 1) != 0 && (v143[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v143[0] & 0xFFFFFFFF8, v79, v80, v81, v82, v83, v84, v85);
  do
  {
LABEL_32:
    v86 = __ldaxr((unsigned int *)v17);
    v87 = v86 - 1;
  }
  while (__stlxr(v87, (unsigned int *)v17));
  if (!v87)
  {
    atomic_store(1u, (unsigned int *)v17);
    v103 = *(_QWORD *)(v17 + 32);
    if (v17 + 48 != v103 && v103 != 0)
    {
      *(_QWORD *)(v17 + 32) = 0;
      *(_DWORD *)(v17 + 40) = 0;
      WTF::fastFree(v103, v79, v80, v81, v82, v83, v84, v85);
    }
    WTF::fastFree(v17, v79, v80, v81, v82, v83, v84, v85);
  }
  v88 = v141;
  v141 = 0;
  if (v88)
  {
    do
    {
      v89 = __ldaxr((unsigned int *)v88);
      v90 = v89 - 1;
    }
    while (__stlxr(v90, (unsigned int *)v88));
    if (!v90)
    {
      atomic_store(1u, (unsigned int *)v88);
      v113 = *((_QWORD *)v88 + 1);
      if ((WTF *)((char *)v88 + 24) != (WTF *)v113 && v113 != 0)
      {
        *((_QWORD *)v88 + 1) = 0;
        *((_DWORD *)v88 + 4) = 0;
        WTF::fastFree(v113, v79, v80, v81, v82, v83, v84, v85);
      }
      WTF::fastFree((unint64_t)v88, v79, v80, v81, v82, v83, v84, v85);
    }
  }
  *(_BYTE *)(a2 + 212) = v6;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int i;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  uint64_t *v33;
  unsigned int v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int j;
  unsigned int v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t *v59;
  unsigned int v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t *v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  const void *v80;
  void *v81;
  _BYTE *v82;
  unsigned int v83;
  uint64_t v84;
  _BYTE *v85;
  unsigned int v86;
  uint64_t v87;
  _BYTE *v88;
  unsigned int v89;
  uint64_t v90;
  _BYTE *v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  unsigned __int8 *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  __int16 v135;
  char v136;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(unsigned int *)(v11 + 44);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = 12 * v12;
    while (v14 < *(unsigned int *)(v11 + 44))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(v11 + 32) + v13), a2, a3, a4, a5, a6, a7, a8);
      ++v14;
      v13 += 12;
      if (v15 == v13)
        goto LABEL_7;
    }
    __break(0xC471u);
LABEL_151:
    JUMPOUT(0x197D74D68);
  }
LABEL_7:
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v17 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v17 + 16) = i;
  if (!*(_BYTE *)(v17 + 72))
  {
    v62 = *(_QWORD **)(a1 + 24);
    v63 = *(_QWORD *)(a1 + 32);
    v65 = *(_QWORD *)(v63 + 96);
    v64 = *(_QWORD *)(v63 + 104);
    v66 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 48) + 216) & 0xFF003FF80000 | v65;
    v67 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v67)
    {
      v85 = *(_BYTE **)(a1 + 56);
      do
      {
        v86 = *v85 & 0x7F;
        if (v86 >= 0x40)
          goto LABEL_150;
        v87 = 1 << v86;
        v66 &= ~v87;
        v64 &= ~v87;
        ++v85;
      }
      while (--v67);
    }
    v68 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v68)
    {
      v91 = *(_BYTE **)(a1 + 72);
      do
      {
        v92 = (*v91 + 32) & 0x7F;
        if (v92 >= 0x40)
          goto LABEL_150;
        v93 = 1 << v92;
        v66 &= ~v93;
        v64 &= ~v93;
        ++v91;
      }
      while (--v68);
    }
    v131 = v66;
    v132 = v64;
    v25 = *(_QWORD *)(a1 + 96);
    if ((v25 & 1) != 0)
    {
      v105 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
      if ((v25 & 2) != 0
        || ((v106 = *(unsigned int *)((v25 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
          ? (v107 = (_DWORD)v106 == -1)
          : (v107 = 1),
            v107))
      {
        v108 = 2;
      }
      else
      {
        v114 = v62;
        if (v106 >> 28)
        {
          v119 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v119 = v105;
          *(_DWORD *)(v119 + 8) = v106;
          v108 = 1;
          v105 = v119;
        }
        else
        {
          v108 = v105;
          v105 = v106 << 36;
        }
        v62 = v114;
      }
      v25 = v105 | v108;
    }
    if (!*(_DWORD *)(a1 + 52))
    {
      __break(0xC471u);
      JUMPOUT(0x197D74D90);
    }
    v69 = *(_QWORD *)(a1 + 128);
    v70 = **(_BYTE **)(a1 + 40);
    v71 = *(_QWORD *)(a2 + 336);
    v73 = *(_QWORD *)(a1 + 96);
    v72 = *(_QWORD *)(a1 + 104);
    v31 = (uint64_t *)(v73 & 0xFFFFFFFF8);
    if ((v73 & 1) == 0)
      goto LABEL_42;
    v109 = *v31;
    if ((v73 & 2) != 0
      || ((v110 = *(_DWORD *)((v73 & 0xFFFFFFFF8) + 8), v110 != 0x3FFFFFFF) ? (v111 = v110 == -1) : (v111 = 1), v111))
    {
      v112 = 2;
    }
    else
    {
      v125 = *(_QWORD *)(a2 + 336);
      v127 = *(_QWORD *)(a1 + 104);
      v129 = **(_BYTE **)(a1 + 40);
      v123 = *(_QWORD *)(a1 + 128);
      v115 = v62;
      v121 = v110;
      if (v110 >> 28)
      {
        v120 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v120 = v109;
        *(_DWORD *)(v120 + 8) = v121;
        v112 = 1;
        v109 = v120;
      }
      else
      {
        v112 = v109;
        v109 = 0;
      }
      v62 = v115;
      v69 = v123;
      v71 = v125;
      v70 = v129;
      v72 = v127;
    }
    v113 = v109 | v112;
    v31 = (uint64_t *)(v113 & 0xFFFFFFFF8);
    if ((v113 & 1) != 0)
    {
      v74 = 0;
      v75 = (uint64_t *)*v31;
    }
    else
    {
LABEL_42:
      v74 = 1;
      v75 = v31;
    }
    if (v75)
      v71 = v75[1];
    v76 = *(_DWORD *)(a1 + 52);
    if (v76 <= 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197D74D98);
    }
    if (v76 == 2)
    {
      __break(0xC471u);
      JUMPOUT(0x197D74DA0);
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)&v133, v62, &v131, a2, v25, v72 + 8, v69, v70 & 0x7F, *(_QWORD *)(v71 + 8), *(_BYTE *)(*(_QWORD *)(a1 + 40) + 16) & 0x7F, *(_BYTE *)(*(_QWORD *)(a1 + 40) + 32) & 0x7F);
    if ((v74 & 1) != 0)
      goto LABEL_20;
LABEL_48:
    if (v31)
      WTF::fastFree((unint64_t)v31, v35, v36, v37, v38, v39, v40, v41);
    goto LABEL_20;
  }
  v18 = *(unsigned __int8 **)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 32);
  v21 = *(_QWORD *)(v19 + 96);
  v20 = *(_QWORD *)(v19 + 104);
  v22 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 48) + 216) & 0xFF003FF80000 | v21;
  v23 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v23)
  {
    v82 = *(_BYTE **)(a1 + 56);
    do
    {
      v83 = *v82 & 0x7F;
      if (v83 >= 0x40)
        goto LABEL_150;
      v84 = 1 << v83;
      v22 &= ~v84;
      v20 &= ~v84;
      ++v82;
    }
    while (--v23);
  }
  v24 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v24)
  {
    v88 = *(_BYTE **)(a1 + 72);
    do
    {
      v89 = (*v88 + 32) & 0x7F;
      if (v89 >= 0x40)
        goto LABEL_150;
      v90 = 1 << v89;
      v22 &= ~v90;
      v20 &= ~v90;
      ++v88;
    }
    while (--v24);
  }
  v131 = v22;
  v132 = v20;
  v25 = *(_QWORD *)(a1 + 96);
  if ((v25 & 1) != 0)
  {
    v96 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
    if ((v25 & 2) != 0
      || ((v97 = *(unsigned int *)((v25 & 0xFFFFFFFF8) + 8), (_DWORD)v97 != 0x3FFFFFFF)
        ? (v98 = (_DWORD)v97 == -1)
        : (v98 = 1),
          v98))
    {
      v99 = 2;
    }
    else if (v97 >> 28)
    {
      v116 = v18;
      v117 = WTF::fastMalloc((WTF *)0x10);
      v18 = v116;
      *(_QWORD *)v117 = v96;
      *(_DWORD *)(v117 + 8) = v97;
      v99 = 1;
      v96 = v117;
    }
    else
    {
      v99 = v96;
      v96 = v97 << 36;
    }
    v25 = v96 | v99;
  }
  if (!*(_DWORD *)(a1 + 52))
  {
    __break(0xC471u);
    JUMPOUT(0x197D74D78);
  }
  v27 = *(_QWORD *)(a1 + 104);
  v26 = *(_QWORD *)(a1 + 112);
  v28 = **(_BYTE **)(a1 + 40);
  v29 = *(_QWORD *)(a2 + 336);
  v30 = *(_QWORD *)(a1 + 96);
  v31 = (uint64_t *)(v30 & 0xFFFFFFFF8);
  if ((v30 & 1) == 0)
    goto LABEL_14;
  v100 = *v31;
  if ((v30 & 2) != 0
    || ((v101 = *(_DWORD *)((v30 & 0xFFFFFFFF8) + 8), v101 != 0x3FFFFFFF) ? (v102 = v101 == -1) : (v102 = 1), v102))
  {
    v103 = 2;
  }
  else if (v101 >> 28)
  {
    v128 = *(_QWORD *)(a2 + 336);
    v130 = v18;
    v124 = *(_QWORD *)(a1 + 112);
    v126 = *(_QWORD *)(a1 + 104);
    v122 = **(_BYTE **)(a1 + 40);
    v118 = WTF::fastMalloc((WTF *)0x10);
    v27 = v126;
    v29 = v128;
    v28 = v122;
    v26 = v124;
    v18 = v130;
    *(_QWORD *)v118 = v100;
    *(_DWORD *)(v118 + 8) = v101;
    v103 = 1;
    v100 = v118;
  }
  else
  {
    v103 = v100;
    v100 = 0;
  }
  v104 = v100 | v103;
  v31 = (uint64_t *)(v104 & 0xFFFFFFFF8);
  if ((v104 & 1) != 0)
  {
    v32 = 0;
    v33 = (uint64_t *)*v31;
  }
  else
  {
LABEL_14:
    v32 = 1;
    v33 = v31;
  }
  if (v33)
    v29 = v33[1];
  v34 = *(_DWORD *)(a1 + 52);
  if (v34 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D74D80);
  }
  if (v34 == 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D74D88);
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)&v133, v18, &v131, a2, v25, v27 + 8, v26, v28 & 0x7F, *(_QWORD *)(v29 + 8), *(_BYTE *)(*(_QWORD *)(a1 + 40) + 16) & 0x7F, *(_BYTE *)(*(_QWORD *)(a1 + 40) + 32) & 0x7F, *(JSC::ARM64LogicalImmediate **)(a1 + 120));
  if ((v32 & 1) == 0)
    goto LABEL_48;
LABEL_20:
  if ((v25 & 1) != 0 && (v25 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v25 & 0xFFFFFFFF8, v35, v36, v37, v38, v39, v40, v41);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 20) = v133;
  for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v35, v36, v37, v38, v39, v40, v41);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v43 = j;
  if (j + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v35, v36, v37, v38, v39, v40, v41);
    v43 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v43) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v44 = 69;
  else
    v44 = 65;
  v133 = j;
  v134 = v44;
  v135 = 15;
  v136 = -1;
  LODWORD(v131) = *(_DWORD *)(a1 + 136);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v133, (unsigned int *)&v131, a2, v37, v38, v39, v40, v41);
  v45 = *(_QWORD *)(a1 + 120);
  v46 = *(_QWORD *)(a1 + 16);
  if (v46)
  {
    do
      v47 = __ldaxr((unsigned int *)v46);
    while (__stlxr(v47 + 1, (unsigned int *)v46));
  }
  v48 = WTF::fastMalloc((WTF *)0x20);
  v56 = v48;
  *(_DWORD *)(v48 + 8) = 1;
  *(_QWORD *)v48 = &off_1E35758D0;
  *(_QWORD *)(v48 + 16) = v45;
  if (v46)
  {
    do
      v57 = __ldaxr((unsigned int *)v46);
    while (__stlxr(v57 + 1, (unsigned int *)v46));
  }
  *(_QWORD *)(v48 + 24) = v46;
  v58 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v58 != *(_DWORD *)(a2 + 240))
  {
    v59 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v58);
    goto LABEL_33;
  }
  v77 = v58 + (v58 >> 2);
  if (v77 >= 0x10)
    v78 = v77 + 1;
  else
    v78 = 16;
  if (v78 <= v58 + 1)
    v79 = v58 + 1;
  else
    v79 = v78;
  if (v79 >> 29)
  {
    __break(0xC471u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  v80 = *(const void **)(a2 + 232);
  v81 = (void *)WTF::fastMalloc((WTF *)(8 * v79));
  *(_DWORD *)(a2 + 240) = v79;
  *(_QWORD *)(a2 + 232) = v81;
  memcpy(v81, v80, 8 * v58);
  if (v80)
  {
    if (*(const void **)(a2 + 232) == v80)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v80, v49, v50, v51, v52, v53, v54, v55);
  }
  v58 = *(unsigned int *)(a2 + 244);
  v59 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v58);
LABEL_33:
  *v59 = v56;
  *(_DWORD *)(a2 + 244) = v58 + 1;
  if (v46)
  {
    do
    {
      v60 = __ldaxr((unsigned int *)v46);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, (unsigned int *)v46));
    if (!v61)
    {
      atomic_store(1u, (unsigned int *)v46);
      v94 = *(_QWORD *)(v46 + 32);
      if (v46 + 48 != v94 && v94 != 0)
      {
        *(_QWORD *)(v46 + 32) = 0;
        *(_DWORD *)(v46 + 40) = 0;
        WTF::fastFree(v94, v49, v50, v51, v52, v53, v54, v55);
      }
      WTF::fastFree(v46, v49, v50, v51, v52, v53, v54, v55);
    }
  }
  *(_BYTE *)(a2 + 212) = v10;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v13 && v13 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;

  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v12 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v12 && v12 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  return JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::finalizeInlineCode(*(_QWORD **)(a1 + 16), (int *)(*(_QWORD *)(a1 + 24) + 8), a2);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  char v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67[4];

  v67[3] = *MEMORY[0x1E0C80C00];
  v4 = *(unint64_t **)(a1 + 28224);
  v13 = v4[3];
  v14 = *(_QWORD *)(a1 + 28040);
  v15 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  if ((v13 & 1) != 0)
    v16 = (_QWORD *)(v14 + 24);
  else
    v16 = (_QWORD *)(v14 + 8);
  v17 = *v16 + 32 * v15;
  v18 = (void *)*(unsigned int *)(a1 + 28120);
  if ((_DWORD)v18 != *(_DWORD *)(v17 + 20))
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v17, v18, v6, v7, v8, v9, v10, v11);
      v14 = *(_QWORD *)(a1 + 28040);
    }
    else
    {
      *(_DWORD *)(v17 + 20) = (_DWORD)v18;
    }
  }
  v25 = JSC::DFG::AbstractValue::resultType((JSC::DFG::AbstractValue *)v17);
  v26 = v4[4];
  v27 = *(unsigned int *)((v26 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  if ((v26 & 1) != 0)
    v28 = (_QWORD *)(v14 + 24);
  else
    v28 = (_QWORD *)(v14 + 8);
  v29 = *v28 + 32 * v27;
  v30 = (void *)*(unsigned int *)(a1 + 28120);
  if ((_DWORD)v30 != *(_DWORD *)(v29 + 20))
  {
    if ((*(_QWORD *)(v29 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v29, v30, v19, v20, v21, v22, v23, v24);
    else
      *(_DWORD *)(v29 + 20) = (_DWORD)v30;
  }
  v31 = JSC::DFG::AbstractValue::resultType((JSC::DFG::AbstractValue *)v29);
  v32 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)(a1 + 27640), 2);
  v59 = (unint64_t)v5;
  LOBYTE(v60) = 3;
  JSC::B3::StackmapValue::append(v32, v5, (unint64_t)&v59 + 8);
  v59 = (unint64_t)v12;
  LOBYTE(v60) = 3;
  JSC::B3::StackmapValue::append(v32, v12, (unint64_t)&v59 + 8);
  v33 = *(_QWORD *)(a1 + 27904);
  v59 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v32, v33, (unint64_t)&v59);
  v34 = *(_QWORD *)(a1 + 27896);
  v59 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v32, v34, (unint64_t)&v59);
  *((_WORD *)v32 + 84) = 513;
  *((_QWORD *)v32 + 8) |= 0x30000uLL;
  *((_QWORD *)v32 + 10) |= 0x30000uLL;
  v40 = *(_QWORD *)(a1 + 8);
  JSC::CodeOrigin::CodeOrigin(&v57, (const JSC::CodeOrigin *)v4);
  v41 = v58;
  if (v58)
  {
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 + 1, v41));
  }
  *(_QWORD *)&v59 = v41;
  *((_QWORD *)&v59 + 1) = v40;
  v60 = a2;
  v61 = v25;
  v62 = 0;
  v63 = 0;
  v64 = v31;
  v65 = 0;
  v66 = 0;
  JSC::CodeOrigin::CodeOrigin(v67, (const JSC::CodeOrigin *)&v57);
  v67[1] = (uint64_t)operationValueMulOptimize;
  v67[2] = (uint64_t)operationValueMul;
  if ((v57 & 1) != 0 && (v57 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v57 & 0xFFFFFFFF8, v50, v51, v52, v53, v54, v55, v56);
  if (v58)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v58, v50, v51, v52, v53, v54, v55, v56);
}

unsigned int *JSC::B3::StackmapValue::setGenerator<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x58);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *, __n128))(*(_QWORD *)result + 8))(result, v5);
    }
  }
  return result;
}

__n128 WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __n128 result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1E35758F8;
  v2 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(a1 + 16) = v2;
  v4 = *(_OWORD *)(a2 + 8);
  v5 = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 48);
  if ((v6 & 1) != 0)
  {
    v8 = *(_QWORD *)(v6 & 0xFFFFFFFF8);
    if ((v6 & 2) != 0
      || ((v9 = *(unsigned int *)((v6 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v14 = a2;
      v15 = a1;
      v12 = v8;
      v13 = v9;
      v8 = WTF::fastMalloc((WTF *)0x10);
      a2 = v14;
      a1 = v15;
      *(_QWORD *)v8 = v12;
      *(_DWORD *)(v8 + 8) = v13;
      v11 = 1;
    }
    else
    {
      v11 = v8;
      v8 = v9 << 36;
    }
    v6 = v8 | v11;
  }
  *(_QWORD *)(a1 + 64) = v6;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(a1 + 72) = result;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 64);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 8);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  unsigned int *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  _BYTE *v27;
  char v28;
  char v29;
  char *v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  JSC::FTL::ExceptionTarget *v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *result;
  _QWORD *v69;
  uint64_t v70;
  const JSC::CodeOrigin *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  _QWORD *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[2];
  JSC::FTL::ExceptionTarget *v81[2];
  uint64_t v82;
  uint64_t v83[5];
  int v84;
  uint64_t v85;
  unsigned int *v86;

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)a1, (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v81);
  v7 = (unsigned int *)v81[0];
  JSC::FTL::ExceptionTarget::jumps(v81[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v86);
  if (v7)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v7, v8, v9, v10, v11, v12, v13, v14);
  v15 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = -1;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_QWORD *)(v15 + 72) = 0;
  *(_QWORD *)(v15 + 16) = -1;
  *(_QWORD *)(v15 + 32) = v15 + 48;
  *(_DWORD *)(v15 + 40) = 2;
  v85 = v15;
  JSC::MathICHolder::addJITMulIC(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 24, *(_QWORD *)(a1 + 16));
  v21 = *(_DWORD *)(a3 + 20);
  if (!v21)
  {
    __break(0xC471u);
    goto LABEL_40;
  }
  if (v21 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D757B0);
  }
  if (v21 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D757B8);
  }
  v22 = *(_DWORD *)(a3 + 52);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x197D757C0);
  }
  if (v22 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D757C8);
  }
  if (!*(_DWORD *)(a3 + 36))
  {
    __break(0xC471u);
    JUMPOUT(0x197D757D0);
  }
  v23 = v16;
  v24 = *(_WORD *)(a1 + 32);
  v25 = *(_QWORD *)(a1 + 34);
  v26 = *(_WORD *)(a1 + 42);
  v27 = *(_BYTE **)(a3 + 8);
  v28 = *v27 & 0x7F;
  v29 = v27[16] & 0x7F;
  LOBYTE(v27) = v27[32] & 0x7F;
  v30 = *(char **)(a3 + 40);
  v31 = *v30;
  LOBYTE(v30) = v30[1];
  v32 = **(_BYTE **)(a3 + 24);
  *(_QWORD *)(v16 + 57) = *(_QWORD *)(a1 + 24);
  *(_WORD *)(v16 + 65) = v24;
  *(_QWORD *)(v16 + 67) = v25;
  *(_WORD *)(v16 + 75) = v26;
  *(_BYTE *)(v16 + 77) = v28;
  *(_BYTE *)(v16 + 78) = v29;
  *(_BYTE *)(v16 + 79) = (_BYTE)v27;
  *(_BYTE *)(v16 + 80) = v31;
  *(_BYTE *)(v16 + 81) = (_BYTE)v30;
  *(_BYTE *)(v16 + 82) = v32;
  JSC::JITMathIC<JSC::JITMulGenerator,JSC::BinaryArithProfile>::generateInline(v16, a2, v15 + 8, 0, v17, v18, v19, v20);
  if (v40)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v33, v34, v35, v36, v37, v38, v39, (int *)v80);
    do
      v41 = __ldaxr((unsigned int *)v15);
    while (__stlxr(v41 + 1, (unsigned int *)v15));
    v42 = *(JSC::FTL::ExceptionTarget **)(a1 + 8);
    v81[0] = (JSC::FTL::ExceptionTarget *)v15;
    v81[1] = v42;
    JSC::B3::StackmapGenerationParams::StackmapGenerationParams((uint64_t)&v82, (const JSC::B3::StackmapGenerationParams *)a3);
    JSC::CodeOrigin::CodeOrigin(v83, (const JSC::CodeOrigin *)(a1 + 48));
    v43 = v86;
    if (v86)
    {
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 + 1, v43));
    }
    v45 = *(_QWORD *)(a1 + 56);
    v46 = *(_QWORD *)(a1 + 64);
    v83[1] = (uint64_t)v43;
    v83[2] = v45;
    v83[3] = v23;
    v83[4] = v46;
    v84 = v80[0];
    goto LABEL_17;
  }
  v69 = *(_QWORD **)(a1 + 8);
  v80[0] = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)a3);
  v80[1] = v70;
  v71 = (const JSC::CodeOrigin *)(a1 + 48);
  JSC::CodeOrigin::CodeOrigin(&v79, (const JSC::CodeOrigin *)(a1 + 48));
  if (!*(_DWORD *)(a3 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x197D757D8);
  }
  v72 = (uint64_t)v86;
  v73 = *(_QWORD *)(a1 + 64);
  v74 = **(_BYTE **)(a3 + 8);
  v75 = *(_QWORD *)(a2 + 336);
  JSC::CodeOrigin::CodeOrigin(&v78, v71);
  v76 = (_QWORD *)(v78 & 0xFFFFFFFF8);
  if ((v78 & 1) != 0)
    v76 = (_QWORD *)*v76;
  if (v76)
    v75 = v76[1];
  v77 = *(_DWORD *)(a3 + 20);
  if (v77 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D757E0);
  }
  if (v77 == 2)
  {
    __break(0xC471u);
LABEL_40:
    JUMPOUT(0x197D757A8);
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v81, v69, v80, a2, v79, v72 + 8, v73, v74 & 0x7F, *(_QWORD *)(v75 + 8), *(_BYTE *)(*(_QWORD *)(a3 + 8) + 16) & 0x7F, *(_BYTE *)(*(_QWORD *)(a3 + 8) + 32) & 0x7F);
  if ((v78 & 1) != 0 && (v78 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v78 & 0xFFFFFFFF8, v54, v55, v56, v57, v58, v59, v60);
  if ((v79 & 1) != 0 && (v79 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v79 & 0xFFFFFFFF8, v54, v55, v56, v57, v58, v59, v60);
LABEL_17:
  WTF::Box<JSC::MathICGenerationState>::~Box((unint64_t *)&v85, v54, v55, v56, v57, v58, v59, v60);
  result = WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::~Box((unint64_t *)&v86, v61, v62, v63, v64, v65, v66, v67);
  *(_BYTE *)(a2 + 212) = v6;
  return result;
}

uint64_t JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE v16[128];
  unsigned int *v17;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v17;
    *(_DWORD *)(a1 + 12) = v10 + 1;
  }
}

uint64_t WTF::createSharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3575920;
  *a1 = v4;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(unsigned int **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  char v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int *v55;
  unsigned int v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69[2];
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int *v73;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link(*a1 + 8, a2, a3, a4, a5, a6, a7, a8);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v11, v12, v13, v14, v15, v16, v17, (int *)&v72);
  v18 = *a1;
  v18[4] = v72;
  if (*((_BYTE *)v18 + 72))
  {
    v35 = (unsigned __int8 *)a1[1];
    v70 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 2));
    v71 = v36;
    JSC::CodeOrigin::CodeOrigin((uint64_t *)v69, (const JSC::CodeOrigin *)(a1 + 10));
    if (!*((_DWORD *)a1 + 9))
    {
      __break(0xC471u);
      JUMPOUT(0x197D75C70);
    }
    v38 = a1[11];
    v37 = (uint64_t)a1[12];
    v39 = *(_BYTE *)a1[3];
    v40 = *(_QWORD *)(a2 + 336);
    JSC::CodeOrigin::CodeOrigin(&v68, (const JSC::CodeOrigin *)(a1 + 10));
    v41 = (_QWORD *)(v68 & 0xFFFFFFFF8);
    if ((v68 & 1) != 0)
      v41 = (_QWORD *)*v41;
    if (v41)
      v40 = v41[1];
    v42 = *((_DWORD *)a1 + 9);
    if (v42 <= 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197D75C78);
    }
    if (v42 != 2)
    {
      JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)&v72, v35, &v70, a2, *(uint64_t *)v69, (uint64_t)(v38 + 2), v37, v39 & 0x7F, *(_QWORD *)(v40 + 8), a1[3][4] & 0x7F, a1[3][8] & 0x7F, (JSC::ARM64LogicalImmediate *)a1[13]);
      if ((v68 & 1) != 0 && (v68 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v68 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
      v34 = *(_QWORD *)v69;
      if ((v69[0] & 1) != 0)
        goto LABEL_29;
      goto LABEL_23;
    }
    __break(0xC471u);
LABEL_41:
    JUMPOUT(0x197D75C58);
  }
  v19 = a1[1];
  v70 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 2));
  v71 = v20;
  JSC::CodeOrigin::CodeOrigin(&v67, (const JSC::CodeOrigin *)(a1 + 10));
  if (!*((_DWORD *)a1 + 9))
  {
    __break(0xC471u);
    goto LABEL_41;
  }
  v21 = a1[11];
  v22 = (uint64_t)a1[14];
  v23 = *(_BYTE *)a1[3];
  v24 = *(_QWORD *)(a2 + 336);
  JSC::CodeOrigin::CodeOrigin(&v66, (const JSC::CodeOrigin *)(a1 + 10));
  v25 = (_QWORD *)(v66 & 0xFFFFFFFF8);
  if ((v66 & 1) != 0)
    v25 = (_QWORD *)*v25;
  if (v25)
    v24 = v25[1];
  v26 = *((_DWORD *)a1 + 9);
  if (v26 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D75C60);
  }
  if (v26 == 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D75C68);
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)&v72, v19, &v70, a2, v67, (uint64_t)(v21 + 2), v22, v23 & 0x7F, *(_QWORD *)(v24 + 8), a1[3][4] & 0x7F, a1[3][8] & 0x7F);
  if ((v66 & 1) != 0 && (v66 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v66 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  v34 = v67;
  if ((v67 & 1) != 0)
  {
LABEL_29:
    if ((v34 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v34 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  }
LABEL_23:
  *(_QWORD *)(*a1 + 5) = v72;
  JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), (uint64_t)v27, v28, v29, v30, v31, v32, v33, (int *)&v70);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v43, v44, v45, v46, v47, v48);
  if (*(_BYTE *)(a2 + 328))
    v54 = 69;
  else
    v54 = 65;
  v72 = (unsigned int *)v70;
  LOBYTE(v73) = v54;
  *(_WORD *)((char *)&v73 + 1) = 15;
  BYTE3(v73) = -1;
  v65 = *((_DWORD *)a1 + 30);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v72, &v65, a2, v49, v50, v51, v52, v53);
  v72 = a1[13];
  v55 = *a1;
  if (*a1)
  {
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 + 1, v55));
  }
  v73 = v55;
  result = void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}::~LinkBuffer((uint64_t)&v72, v57, v58, v59, v60, v61, v62, v63);
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = WTF::fastMalloc((WTF *)0x20);
  v5 = v4;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3575948;
  *(_QWORD *)(v4 + 16) = *a2;
  v6 = (unsigned int *)a2[1];
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(v4 + 24) = v6;
  v8 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v8 != *(_DWORD *)(a1 + 240))
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
LABEL_14:
    *v9 = v5;
    *(_DWORD *)(a1 + 244) = v8 + 1;
    return;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = *(const void **)(a1 + 232);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a1 + 240) = v12;
    *(_QWORD *)(a1 + 232) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*(const void **)(a1 + 232) == v13)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v8 = *(unsigned int *)(a1 + 244);
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
    goto LABEL_14;
  }
  __break(0xC471u);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v13 && v13 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;

  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v12 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v12 && v12 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileBinaryMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),void>(JSC::BinaryArithProfile *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  return JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::finalizeInlineCode(*(_QWORD **)(a1 + 16), (int *)(*(_QWORD *)(a1 + 24) + 8), a2);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::DFG::Node *v16;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationStrCat3);
  v15 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), v13, v14, *a2, *a3, *a4, *a5);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,long long,long long),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::DFG::Node *v31;
  WTF *v32;
  char **v33;
  uint64_t v34;
  WTF *v35;
  char *v37;
  WTF *v38;
  uint64_t v39;

  v12 = (int *)(a1 + 28264);
  v13 = *(_DWORD *)(a1 + 28264);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = *(_QWORD *)(a1 + 27848);
    v38 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v38 = 0x200000002;
    v39 = 0x200000002;
    v22 = (_QWORD *)(v14 + 32);
    v23 = *(unsigned int *)(v14 + 44);
    if ((_DWORD)v23 == *(_DWORD *)(v14 + 40))
    {
      v24 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v38);
      v25 = *(_QWORD *)(v14 + 32) + 16 * *(unsigned int *)(v14 + 44);
    }
    else
    {
      v25 = *v22 + 16 * v23;
      v24 = (unint64_t)&v38;
    }
    *(_QWORD *)v25 = 0;
    *(_QWORD *)(v25 + 8) = 0;
    v26 = *(_QWORD *)v24;
    *(_QWORD *)v24 = 0;
    *(_QWORD *)v25 = v26;
    LODWORD(v26) = *(_DWORD *)(v24 + 8);
    *(_DWORD *)(v24 + 8) = 0;
    *(_DWORD *)(v25 + 8) = v26;
    LODWORD(v26) = *(_DWORD *)(v24 + 12);
    *(_DWORD *)(v24 + 12) = 0;
    *(_DWORD *)(v25 + 12) = v26;
    ++*(_DWORD *)(v14 + 44);
    v13 = v23 | 0x80000000;
    *v12 = v23 | 0x80000000;
    v27 = v38;
    if (v38)
    {
      v38 = 0;
      LODWORD(v39) = 0;
      WTF::fastFree((unint64_t)v27, v15, v16, v17, v18, v19, v20, v21);
      v13 = *v12;
    }
  }
  v28 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationStrCat2);
  v29 = *a3;
  v30 = *(_QWORD *)(a1 + 27776);
  v32 = (WTF *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::Value **)(a1 + 27760), v13, *(_QWORD *)(a1 + 27768), v28, *a2, v29, *a4);
  v38 = v32;
  v33 = (char **)(v30 + 8);
  v34 = *(unsigned int *)(v30 + 20);
  if ((_DWORD)v34 == *(_DWORD *)(v30 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v33, v34 + 1, (unint64_t)&v38);
    v34 = *(unsigned int *)(v30 + 20);
    *(_QWORD *)(*(_QWORD *)(v30 + 8) + 8 * v34) = *(_QWORD *)v37;
    v35 = v38;
  }
  else
  {
    *(_QWORD *)&(*v33)[8 * v34] = v32;
    v35 = v32;
  }
  *(_DWORD *)(v30 + 20) = v34 + 1;
  *((_QWORD *)v35 + 4) = v30;
}

JSC::B3::Value *JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  char **v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  char *v14;
  JSC::B3::Value *v15;

  v7 = a1[17];
  v8 = (JSC::B3::Value *)a1[15];
  v9 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(a2, a1[16], a3, a4, a5, a6, a7);
  JSC::B3::Procedure::addValueImpl(v8, v9);
  v15 = v9;
  v10 = (char **)(v7 + 8);
  v11 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v11 == *(_DWORD *)(v7 + 16))
  {
    v14 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v15);
    v11 = *(unsigned int *)(v7 + 20);
    *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8 * v11) = *(_QWORD *)v14;
    v12 = v15;
  }
  else
  {
    *(_QWORD *)&(*v10)[8 * v11] = v9;
    v12 = v9;
  }
  *(_DWORD *)(v7 + 20) = v11 + 1;
  *((_QWORD *)v12 + 4) = v7;
  return v9;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v14 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v14 = off_1E357F5F0;
  *(_DWORD *)(v14 + 8) = -1;
  *(_WORD *)(v14 + 12) = 82;
  *(_DWORD *)(v14 + 16) = a1;
  *(_BYTE *)(v14 + 20) = 4;
  *(_QWORD *)(v14 + 24) = a2;
  *(_QWORD *)(v14 + 32) = 0;
  v15 = JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v14);
  *(_QWORD *)v15 = v15 + 16;
  *(_QWORD *)(v15 + 8) = 3;
  v16 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v15 = v16;
  v17 = *(unsigned int *)(v15 + 12);
  *(_QWORD *)(v16 + 8 * v17) = a3;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 1)) = a4;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 2)) = a5;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 3)) = a6;
  *(_QWORD *)(*(_QWORD *)v15 + 8 * (v17 + 4)) = a7;
  *(_DWORD *)(v15 + 8) = 5;
  *(_DWORD *)(v15 + 12) = v17 + 5;
  *(_QWORD *)v14 = &unk_1E357CF78;
  *(_OWORD *)(v14 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v14 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v14 + 76))
    return v14;
  result = 60;
  __break(0xC471u);
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::blessSpeculation(JSC::DFG::Graph **a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  __int16 v35;
  _QWORD v36[2];

  JSC::DFG::Graph::methodOfGettingAValueProfileFor(*a1, a1[3528], 0, a4, a5, a6, a7, a8, (uint64_t)v36, a9);
  v14 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 1) != 0)
  {
    v24 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v25 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
        ? (v26 = (_DWORD)v25 == -1)
        : (v26 = 1),
          v26))
    {
      v27 = 2;
    }
    else if (v25 >> 28)
    {
      v32 = v24;
      v24 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v24 = v32;
      *(_DWORD *)(v24 + 8) = v25;
      v27 = 1;
    }
    else
    {
      v27 = v24;
      v24 = v25 << 36;
    }
    v14 = v24 | v27;
  }
  v34[0] = v14;
  v15 = *(_QWORD *)(a4 + 8);
  if ((v15 & 1) != 0)
  {
    v28 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v29 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v29 != 0x3FFFFFFF)
        ? (v30 = (_DWORD)v29 == -1)
        : (v30 = 1),
          v30))
    {
      v31 = 2;
    }
    else if (v29 >> 28)
    {
      v33 = v28;
      v28 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v28 = v33;
      *(_DWORD *)(v28 + 8) = v29;
      v31 = 1;
    }
    else
    {
      v31 = v28;
      v28 = v29 << 36;
    }
    v15 = v28 | v31;
    v16 = ((v28 | v31) & 1) == 0;
  }
  else
  {
    v16 = 1;
  }
  v34[1] = v15;
  v35 = *(_WORD *)(a4 + 16);
  if (!v16 && (v15 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v15 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
  if ((v36[0] & 1) != 0 && (v36[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v36[0] & 0xFFFFFFFF8, v17, v18, v19, v20, v21, v22, v23);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowWhicheverInt52(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *a1, uint64_t a2, _BOOL4 *a3)
{
  _BOOL4 v6;

  *a3 = v6;
}

BOOL JSC::FTL::`anonymous namespace'::LowerDFGToB3::betterUseStrictInt52(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::DFG::Node *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::get(*((_QWORD *)this + 3491), (uint64_t)a2);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::setInt52(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;

  if (!a4)
  {
    v9 = a2;
    v4 = 27920;
LABEL_3:
    v5 = (uint64_t *)(a1 + v4);
    v6 = *(_QWORD *)(a1 + 28168);
    v8.n128_u64[0] = a3;
    v8.n128_u64[1] = v6;
    WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v7, v5, &v9, &v8);
    return;
  }
  if (a4 == 1)
  {
    v9 = a2;
    v4 = 27928;
    goto LABEL_3;
  }
  JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x5A4F, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::setInt52(Node *, LValue, Int52Kind)", "Corrupt int52 kind");
  __break(0xC471u);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,long long),JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  JSC::DFG::Node *v22;
  char **v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  char *v41;
  WTF *v42;
  uint64_t v43;

  v12 = (int *)(a1 + 28264);
  v13 = *(_DWORD *)(a1 + 28264);
  if ((v13 & 0x80000000) == 0)
  {
    v27 = *(_QWORD *)(a1 + 27848);
    v42 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v42 = 0x200000002;
    v43 = 0x200000002;
    v35 = (_QWORD *)(v27 + 32);
    v36 = *(unsigned int *)(v27 + 44);
    if ((_DWORD)v36 == *(_DWORD *)(v27 + 40))
    {
      v37 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)&v42);
      v38 = *(_QWORD *)(v27 + 32) + 16 * *(unsigned int *)(v27 + 44);
    }
    else
    {
      v38 = *v35 + 16 * v36;
      v37 = (unint64_t)&v42;
    }
    *(_QWORD *)v38 = 0;
    *(_QWORD *)(v38 + 8) = 0;
    v39 = *(_QWORD *)v37;
    *(_QWORD *)v37 = 0;
    *(_QWORD *)v38 = v39;
    LODWORD(v39) = *(_DWORD *)(v37 + 8);
    *(_DWORD *)(v37 + 8) = 0;
    *(_DWORD *)(v38 + 8) = v39;
    LODWORD(v39) = *(_DWORD *)(v37 + 12);
    *(_DWORD *)(v37 + 12) = 0;
    *(_DWORD *)(v38 + 12) = v39;
    ++*(_DWORD *)(v27 + 44);
    v13 = v36 | 0x80000000;
    *v12 = v36 | 0x80000000;
    v40 = v42;
    if (v42)
    {
      v42 = 0;
      LODWORD(v43) = 0;
      WTF::fastFree((unint64_t)v40, v28, v29, v30, v31, v32, v33, v34);
      v13 = *v12;
    }
  }
  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v15 = *a3;
  v16 = *a4;
  v17 = *(_QWORD *)(a1 + 27776);
  v18 = *(JSC::B3::Value **)(a1 + 27760);
  v19 = *(_QWORD *)(a1 + 27768);
  v20 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v20 = off_1E357F5F0;
  *(_DWORD *)(v20 + 8) = -1;
  *(_WORD *)(v20 + 12) = 82;
  *(_DWORD *)(v20 + 16) = v13;
  *(_BYTE *)(v20 + 20) = 4;
  *(_QWORD *)(v20 + 24) = v19;
  *(_QWORD *)(v20 + 32) = 0;
  v21 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v20);
  v21[2] = v14;
  *v21 = v21 + 2;
  v21[3] = v15;
  v21[4] = v16;
  v21[1] = 0x300000003;
  *(_QWORD *)v20 = &unk_1E357CF78;
  *(_OWORD *)(v20 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v20 + 56) = 0xFFFFFFFF00000000;
  if (!*(_DWORD *)(v20 + 76))
  {
    __break(0xC471u);
    JUMPOUT(0x197D767B8);
  }
  JSC::B3::Procedure::addValueImpl(v18, (JSC::B3::Value *)v20);
  v42 = (WTF *)v20;
  v23 = (char **)(v17 + 8);
  v24 = *(unsigned int *)(v17 + 20);
  if ((_DWORD)v24 == *(_DWORD *)(v17 + 16))
  {
    v41 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v42);
    v24 = *(unsigned int *)(v17 + 20);
    *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v24) = *(_QWORD *)v41;
    v25 = v42;
  }
  else
  {
    *(_QWORD *)&(*v23)[8 * v24] = v20;
    v25 = (WTF *)v20;
  }
  *(_DWORD *)(v17 + 20) = v24 + 1;
  *((_QWORD *)v25 + 4) = v17;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::opposite(JSC::DFG::Graph **a1, int a2)
{
  uint64_t result;

  if (a2 == 1)
    return 0;
  if (!a2)
    return 1;
  JSC::DFG::Graph::logAssertionFailure(*a1, a1[3528], (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x5146, "Int52Kind JSC::FTL::(anonymous namespace)::LowerDFGToB3::opposite(Int52Kind)", "Bad use kind");
  result = 20806;
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, __int128 *a2, unint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 *v9;

  *(_QWORD *)result = result + 16;
  *(_QWORD *)(result + 8) = 1;
  if (a3 >= 2)
  {
    v9 = a2;
    v8 = result;
    if (a3 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v7 = a3;
    v6 = WTF::fastMalloc((WTF *)(16 * a3));
    a3 = v7;
    result = v8;
    *(_DWORD *)(v8 + 8) = v7;
    *(_QWORD *)v8 = v6;
    v3 = *(_DWORD *)(v8 + 12);
    a2 = v9;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  v4 = 16 * a3;
  do
  {
    v5 = *a2++;
    *(_OWORD *)(*(_QWORD *)result + 16 * v3) = v5;
    v3 = *(_DWORD *)(result + 12) + 1;
    *(_DWORD *)(result + 12) = v3;
    v4 -= 16;
  }
  while (v4);
  return result;
}

uint64_t WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t result, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  _OWORD *v9;
  __int128 *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _OWORD *v17;
  _DWORD *v18;

  v9 = (_OWORD *)(result + 16);
  v8 = *(_QWORD *)result;
  if (*(_QWORD *)result != result + 16)
  {
    v17 = (_OWORD *)(result + 16);
    v18 = a2;
    if (v8)
    {
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 0;
      v16 = result;
      WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
      result = v16;
    }
    v9 = v17;
    *(_QWORD *)result = v17;
    a2 = v18;
  }
  v10 = *(__int128 **)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    v11 = a2[3];
    if ((_DWORD)v11)
    {
      v14 = 16 * v11;
      do
      {
        v15 = *v10++;
        *v9++ = v15;
        v14 -= 16;
      }
      while (v14);
    }
    v12 = a2[2];
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)result = v10;
    v12 = a2[2];
    a2[2] = 1;
  }
  *(_DWORD *)(result + 8) = v12;
  v13 = a2[3];
  a2[3] = 0;
  *(_DWORD *)(result + 12) = v13;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinarySnippet<JSC::JITDivGenerator,(JSC::FTL::`anonymous namespace'::LowerDFGToB3::ScratchFPRUsage)1>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinarySnippet<JSC::JITDivGenerator,(JSC::FTL::`anonymous namespace'::LowerDFGToB3::ScratchFPRUsage)1>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinarySnippet<JSC::JITDivGenerator,(JSC::FTL::`anonymous namespace'::LowerDFGToB3::ScratchFPRUsage)1>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  char v6;
  JSC::FTL::ExceptionTarget *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _BYTE *v19;
  char v20;
  char v21;
  char v22;
  char *v23;
  char v24;
  char v25;
  char v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int i;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  WTF *v61;
  WTF *v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  char v107;
  uint64_t *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  WTF *v112;
  unsigned int v113;
  unsigned int v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  const void *v118;
  void *v119;
  _BYTE *v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v125;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unint64_t v133;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  BOOL v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  BOOL v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  WTF *v154;
  char v155;
  uint64_t v156;
  char v157;
  JSC::CCallHelpers *v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _OWORD *v162;
  int v163;
  int v164;
  void *v165;
  int v166;
  int v167;
  void *v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int *v173;
  uint64_t v174;
  int v175;
  WTF *v176;
  JSC::FTL::ExceptionTarget *v177[15];

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 16), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v177);
  v7 = v177[0];
  JSC::FTL::ExceptionTarget::jumps(v177[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v176);
  v177[0] = 0;
  if (v7)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v7);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v7));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v7);
      v127 = (unsigned int *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      if (v127)
      {
        do
        {
          v128 = __ldaxr(v127);
          v129 = v128 - 1;
        }
        while (__stlxr(v129, v127));
        if (!v129)
        {
          atomic_store(1u, v127);
          WTF::fastFree((unint64_t)v127, v8, v9, v10, v11, v12, v13, v14);
        }
      }
      v130 = (unsigned int *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (v130)
      {
        do
        {
          v131 = __ldaxr(v130);
          v132 = v131 - 1;
        }
        while (__stlxr(v132, v130));
        if (!v132)
        {
          atomic_store(1u, v130);
          WTF::fastFree((unint64_t)v130, v8, v9, v10, v11, v12, v13, v14);
        }
      }
      WTF::fastFree((unint64_t)v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  v17 = a3[5];
  if (!v17)
  {
    __break(0xC471u);
    JUMPOUT(0x197D77304);
  }
  if (v17 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7730CLL);
  }
  if (v17 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D77314);
  }
  v18 = a3[13];
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7731CLL);
  }
  if (v18 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D77324);
  }
  if (!a3[9])
  {
    __break(0xC471u);
    JUMPOUT(0x197D7732CLL);
  }
  v156 = a1;
  v158 = (JSC::CCallHelpers *)a2;
  v155 = v6;
  if (v18 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D77334);
  }
  v19 = (_BYTE *)*((_QWORD *)a3 + 1);
  v20 = *v19 & 0x7F;
  v21 = v19[16] & 0x7F;
  v22 = v19[32] & 0x7F;
  v23 = (char *)*((_QWORD *)a3 + 5);
  v24 = *v23;
  v25 = v23[1];
  v26 = **((_BYTE **)a3 + 3);
  v27 = v23[2];
  v28 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)v28 = 1;
  v29 = v156;
  v30 = *(_WORD *)(v156 + 32);
  v31 = *(_QWORD *)(v156 + 34);
  v32 = *(_WORD *)(v156 + 42);
  *(_QWORD *)(v28 + 8) = *(_QWORD *)(v156 + 24);
  *(_WORD *)(v28 + 16) = v30;
  *(_QWORD *)(v28 + 18) = v31;
  *(_WORD *)(v28 + 26) = v32;
  *(_BYTE *)(v28 + 28) = v20;
  *(_BYTE *)(v28 + 29) = v21;
  *(_BYTE *)(v28 + 30) = v22;
  *(_BYTE *)(v28 + 31) = v24;
  *(_BYTE *)(v28 + 32) = v25;
  *(_BYTE *)(v28 + 33) = v26;
  *(_BYTE *)(v28 + 34) = v27;
  *(_BYTE *)(v28 + 35) = 0;
  *(_QWORD *)(v28 + 40) = 0;
  *(_QWORD *)(v28 + 48) = v28 + 64;
  *(_QWORD *)(v28 + 56) = 2;
  *(_QWORD *)(v28 + 88) = v28 + 104;
  *(_QWORD *)(v28 + 96) = 2;
  v33 = (uint64_t)v158;
  JSC::JITDivGenerator::generateFastPath((JSC::JITDivGenerator *)(v28 + 8), v158, v34, v35, v36, v37, v38, v39);
  if (*(_BYTE *)(v28 + 35))
  {
    v47 = *(unsigned int *)(v28 + 60);
    if ((_DWORD)v47)
    {
      v48 = 0;
      v49 = 0;
      v50 = 12 * v47;
      while (v49 < *(unsigned int *)(v28 + 60))
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(v28 + 48) + v48), (uint64_t)v158, v41, v42, v43, v44, v45, v46);
        ++v49;
        v48 += 12;
        if (v50 == v48)
          goto LABEL_18;
      }
      __break(0xC471u);
LABEL_157:
      JUMPOUT(0x197D772F4);
    }
LABEL_18:
    for (i = *((_DWORD *)v158 + 50); i < *((_DWORD *)v158 + 13); *((_DWORD *)v158 + 50) = i)
    {
      if ((i + 4) > *((_DWORD *)v158 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::CCallHelpers *)((char *)v158 + 56), v40, v41, v42, v43, v44, v45, v46);
        i = *((_DWORD *)v158 + 50);
      }
      *(_DWORD *)(*((_QWORD *)v158 + 7) + i) = -721215457;
      i = *((_DWORD *)v158 + 50) + 4;
    }
    *((_DWORD *)v158 + 52) = 0;
    do
      v52 = __ldaxr((unsigned int *)v28);
    while (__stlxr(v52 + 1, (unsigned int *)v28));
    v53 = *(_QWORD *)(v156 + 48);
    v159 = v28;
    v160 = v53;
    v54 = *(_QWORD *)a3;
    v55 = a3[5];
    v162 = 0;
    v163 = 0;
    v161 = v54;
    v164 = v55;
    if ((_DWORD)v55)
    {
      if (v55 >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x197D7733CLL);
      }
      v56 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v55));
      v163 = v55;
      v162 = v56;
      v57 = a3[5];
      if ((_DWORD)v57)
      {
        v58 = (__int128 *)*((_QWORD *)a3 + 1);
        v59 = 16 * v57;
        do
        {
          v60 = *v58++;
          *v56++ = v60;
          v59 -= 16;
        }
        while (v59);
      }
    }
    v61 = (WTF *)a3[9];
    v165 = 0;
    v166 = 0;
    v167 = (int)v61;
    if ((_DWORD)v61)
    {
      v166 = (int)v61;
      v165 = (void *)WTF::fastMalloc(v61);
      memcpy(v165, *((const void **)a3 + 3), a3[9]);
    }
    v62 = (WTF *)a3[13];
    v168 = 0;
    v169 = 0;
    v170 = (int)v62;
    if ((_DWORD)v62)
    {
      v169 = (int)v62;
      v168 = (void *)WTF::fastMalloc(v62);
      memcpy(v168, *((const void **)a3 + 5), a3[13]);
    }
    v171 = *((_QWORD *)a3 + 7);
    v63 = *(_QWORD *)(v156 + 56);
    if ((v63 & 1) != 0)
    {
      v135 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
      if ((v63 & 2) != 0
        || ((v136 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v136 != 0x3FFFFFFF)
          ? (v137 = (_DWORD)v136 == -1)
          : (v137 = 1),
            v137))
      {
        v138 = 2;
      }
      else if (v136 >> 28)
      {
        v149 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v149 = v135;
        *(_DWORD *)(v149 + 8) = v136;
        v138 = 1;
        v135 = v149;
      }
      else
      {
        v138 = *(_QWORD *)(v63 & 0xFFFFFFFF8);
        v135 = v136 << 36;
      }
      v63 = v135 | v138;
    }
    v172 = v63;
    v64 = (unsigned int *)v176;
    if (v176)
    {
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 + 1, v64));
    }
    v66 = *(_QWORD *)(v156 + 64);
    v173 = v64;
    v174 = v66;
    v175 = i;
    v67 = *((_QWORD *)a3 + 7);
    v68 = WTF::fastMalloc((WTF *)0x80);
    *(_DWORD *)(v68 + 8) = 1;
    *(_QWORD *)v68 = off_1E3575998;
    v76 = *(unsigned int *)(v67 + 12);
    if ((_DWORD)v76 != *(_DWORD *)(v67 + 8))
    {
      v77 = (uint64_t *)(*(_QWORD *)v67 + 8 * v76);
LABEL_35:
      *v77 = v68;
      *(_DWORD *)(v67 + 12) = v76 + 1;
      goto LABEL_50;
    }
    v115 = v76 + (v76 >> 2);
    if (v115 >= 0x10)
      v116 = v115 + 1;
    else
      v116 = 16;
    if (v116 <= v76 + 1)
      v117 = v76 + 1;
    else
      v117 = v116;
    if (!(v117 >> 29))
    {
      v118 = *(const void **)v67;
      v119 = (void *)WTF::fastMalloc((WTF *)(8 * v117));
      *(_DWORD *)(v67 + 8) = v117;
      *(_QWORD *)v67 = v119;
      memcpy(v119, v118, 8 * v76);
      if (v118)
      {
        if (*(const void **)v67 == v118)
        {
          *(_QWORD *)v67 = 0;
          *(_DWORD *)(v67 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v118, v69, v70, v71, v72, v73, v74, v75);
      }
      v76 = *(unsigned int *)(v67 + 12);
      v77 = (uint64_t *)(*(_QWORD *)v67 + 8 * v76);
      goto LABEL_35;
    }
LABEL_156:
    __break(0xC471u);
    goto LABEL_157;
  }
  v92 = *(_QWORD **)(v156 + 48);
  v93 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v94 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v95 = a3[9];
  if ((_DWORD)v95)
  {
    v96 = (_BYTE *)*((_QWORD *)a3 + 3);
    do
    {
      v97 = *v96 & 0x7F;
      if (v97 >= 0x40)
        goto LABEL_155;
      v98 = 1 << v97;
      v94 &= ~v98;
      v93 &= ~v98;
      ++v96;
    }
    while (--v95);
  }
  v99 = a3[13];
  if ((_DWORD)v99)
  {
    v120 = (_BYTE *)*((_QWORD *)a3 + 5);
    do
    {
      v121 = (*v120 + 32) & 0x7F;
      if (v121 >= 0x40)
        goto LABEL_155;
      v122 = 1 << v121;
      v94 &= ~v122;
      v93 &= ~v122;
      ++v120;
    }
    while (--v99);
  }
  v159 = v94;
  v160 = v93;
  v100 = *(_QWORD *)(v156 + 56);
  if ((v100 & 1) != 0)
  {
    v139 = *(_QWORD *)(v100 & 0xFFFFFFFF8);
    if ((v100 & 2) != 0
      || ((v140 = *(unsigned int *)((v100 & 0xFFFFFFFF8) + 8), (_DWORD)v140 != 0x3FFFFFFF)
        ? (v141 = (_DWORD)v140 == -1)
        : (v141 = 1),
          v141))
    {
      v142 = 2;
    }
    else
    {
      v147 = v92;
      if (v140 >> 28)
      {
        v150 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v150 = v139;
        *(_DWORD *)(v150 + 8) = v140;
        v142 = 1;
        v139 = v150;
      }
      else
      {
        v142 = v139;
        v139 = v140 << 36;
      }
      v92 = v147;
      v29 = v156;
      v33 = (uint64_t)v158;
    }
    v100 = v139 | v142;
  }
  if (!a3[5])
  {
    __break(0xC471u);
    JUMPOUT(0x197D77344);
  }
  v101 = v176;
  v102 = **((_BYTE **)a3 + 1);
  v103 = *(_QWORD *)(v33 + 336);
  v105 = *(_QWORD *)(v29 + 56);
  v104 = *(_QWORD *)(v29 + 64);
  v106 = (uint64_t *)(v105 & 0xFFFFFFFF8);
  if ((v105 & 1) == 0)
    goto LABEL_44;
  v143 = *v106;
  if ((v105 & 2) != 0
    || ((v144 = *(_DWORD *)((v105 & 0xFFFFFFFF8) + 8), v144 != 0x3FFFFFFF) ? (v145 = v144 == -1) : (v145 = 1), v145))
  {
    v146 = 2;
  }
  else
  {
    v157 = **((_BYTE **)a3 + 1);
    v153 = v104;
    v154 = v176;
    v152 = v92;
    if (v144 >> 28)
    {
      v151 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v151 = v143;
      *(_DWORD *)(v151 + 8) = v144;
      v146 = 1;
      v143 = v151;
    }
    else
    {
      v146 = v143;
      v143 = 0;
    }
    v92 = v152;
    v104 = v153;
    v101 = v154;
    v102 = v157;
    v33 = (uint64_t)v158;
  }
  v148 = v143 | v146;
  v106 = (uint64_t *)(v148 & 0xFFFFFFFF8);
  if ((v148 & 1) == 0)
  {
LABEL_44:
    v107 = 1;
    v108 = v106;
    if (!v106)
      goto LABEL_46;
    goto LABEL_45;
  }
  v107 = 0;
  v108 = (uint64_t *)*v106;
  if (*v106)
LABEL_45:
    v103 = v108[1];
LABEL_46:
  v109 = a3[5];
  if (v109 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7734CLL);
  }
  if (v109 == 2)
  {
    __break(0xC471u);
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v177, v92, &v159, v33, v100, (uint64_t)v101 + 8, v104, v102 & 0x7F, *(_QWORD *)(v103 + 8), *(_BYTE *)(*((_QWORD *)a3 + 1) + 16) & 0x7F, *(_BYTE *)(*((_QWORD *)a3 + 1) + 32) & 0x7F);
  if ((v107 & 1) == 0 && v106)
    WTF::fastFree((unint64_t)v106, v85, v86, v87, v88, v89, v90, v91);
  if ((v100 & 1) != 0 && (v100 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v100 & 0xFFFFFFFF8, v85, v86, v87, v88, v89, v90, v91);
  do
  {
LABEL_50:
    v110 = __ldaxr((unsigned int *)v28);
    v111 = v110 - 1;
  }
  while (__stlxr(v111, (unsigned int *)v28));
  if (!v111)
  {
    atomic_store(1u, (unsigned int *)v28);
    v123 = *(_QWORD *)(v28 + 88);
    if (v28 + 104 != v123 && v123 != 0)
    {
      *(_QWORD *)(v28 + 88) = 0;
      *(_DWORD *)(v28 + 96) = 0;
      WTF::fastFree(v123, v85, v86, v87, v88, v89, v90, v91);
    }
    v125 = *(_QWORD *)(v28 + 48);
    if (v28 + 64 != v125 && v125 != 0)
    {
      *(_QWORD *)(v28 + 48) = 0;
      *(_DWORD *)(v28 + 56) = 0;
      WTF::fastFree(v125, v85, v86, v87, v88, v89, v90, v91);
    }
    WTF::fastFree(v28, v85, v86, v87, v88, v89, v90, v91);
  }
  v112 = v176;
  v176 = 0;
  if (v112)
  {
    do
    {
      v113 = __ldaxr((unsigned int *)v112);
      v114 = v113 - 1;
    }
    while (__stlxr(v114, (unsigned int *)v112));
    if (!v114)
    {
      atomic_store(1u, (unsigned int *)v112);
      v133 = *((_QWORD *)v112 + 1);
      if ((WTF *)((char *)v112 + 24) != (WTF *)v133 && v133 != 0)
      {
        *((_QWORD *)v112 + 1) = 0;
        *((_DWORD *)v112 + 4) = 0;
        WTF::fastFree(v133, v85, v86, v87, v88, v89, v90, v91);
      }
      WTF::fastFree((unint64_t)v112, v85, v86, v87, v88, v89, v90, v91);
    }
  }
  *(_BYTE *)(v33 + 212) = v155;
}

uint64_t void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinarySnippet<JSC::JITDivGenerator,(JSC::FTL::`anonymous namespace'::LowerDFGToB3::ScratchFPRUsage)1>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::~(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v20;
  unint64_t v22;
  unint64_t v24;

  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v20 = *(_QWORD *)(v9 + 8);
      if (v9 + 24 != v20 && v20 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 80);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 56);
  if (v13)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 40);
  if (v14)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 24);
  if (v15)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v16));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v16);
      v22 = *(_QWORD *)(v16 + 88);
      if (v16 + 104 != v22 && v22 != 0)
      {
        *(_QWORD *)(v16 + 88) = 0;
        *(_DWORD *)(v16 + 96) = 0;
        WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
      }
      v24 = *(_QWORD *)(v16 + 48);
      if (v16 + 64 != v24 && v24 != 0)
      {
        *(_QWORD *)(v16 + 48) = 0;
        *(_DWORD *)(v16 + 56) = 0;
        WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinarySnippet<JSC::JITDivGenerator,(JSC::FTL::`anonymous namespace'::LowerDFGToB3::ScratchFPRUsage)1>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  WTF *v12;
  void *v13;
  WTF *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v3 = result;
  v4 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)result = v4;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(unsigned int *)(a2 + 36);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 36) = v6;
  if ((_DWORD)v6)
  {
    if (v6 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v7 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v6));
    *(_DWORD *)(v3 + 32) = v6;
    *(_QWORD *)(v3 + 24) = v7;
    v8 = *(unsigned int *)(a2 + 36);
    if ((_DWORD)v8)
    {
      v9 = *(__int128 **)(a2 + 24);
      v10 = 16 * v8;
      do
      {
        v11 = *v9++;
        *v7++ = v11;
        v10 -= 16;
      }
      while (v10);
    }
  }
  v12 = (WTF *)*(unsigned int *)(a2 + 52);
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_DWORD *)(v3 + 52) = (_DWORD)v12;
  if ((_DWORD)v12)
  {
    v13 = (void *)WTF::fastMalloc(v12);
    *(_DWORD *)(v3 + 48) = (_DWORD)v12;
    *(_QWORD *)(v3 + 40) = v13;
    memcpy(v13, *(const void **)(a2 + 40), *(unsigned int *)(a2 + 52));
  }
  v14 = (WTF *)*(unsigned int *)(a2 + 68);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 68) = (_DWORD)v14;
  if ((_DWORD)v14)
  {
    v19 = (void *)WTF::fastMalloc(v14);
    *(_DWORD *)(v3 + 64) = (_DWORD)v14;
    *(_QWORD *)(v3 + 56) = v19;
    memcpy(v19, *(const void **)(a2 + 56), *(unsigned int *)(a2 + 68));
  }
  v15 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v3 + 72) = *(_QWORD *)(a2 + 72);
  if ((v15 & 1) != 0)
  {
    v20 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v21 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v21 != 0x3FFFFFFF)
        ? (v22 = (_DWORD)v21 == -1)
        : (v22 = 1),
          v22))
    {
      v23 = 2;
    }
    else if (v21 >> 28)
    {
      v24 = v21;
      v25 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v25 = v20;
      *(_DWORD *)(v25 + 8) = v24;
      v23 = 1;
      v20 = v25;
    }
    else
    {
      v23 = v20;
      v20 = v21 << 36;
    }
    v15 = v20 | v23;
  }
  *(_QWORD *)(v3 + 80) = v15;
  v16 = *(unsigned int **)(a2 + 88);
  if (v16)
  {
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
  }
  v18 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(v3 + 88) = v16;
  *(_QWORD *)(v3 + 96) = v18;
  *(_DWORD *)(v3 + 104) = *(_DWORD *)(a2 + 104);
  return v3;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinarySnippet<JSC::JITDivGenerator,(JSC::FTL::`anonymous namespace'::LowerDFGToB3::ScratchFPRUsage)1>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinarySnippet<JSC::JITDivGenerator,(JSC::FTL::`anonymous namespace'::LowerDFGToB3::ScratchFPRUsage)1>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinarySnippet<JSC::JITDivGenerator,(JSC::FTL::`anonymous namespace'::LowerDFGToB3::ScratchFPRUsage)1>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinarySnippet<JSC::JITDivGenerator,(JSC::FTL::`anonymous namespace'::LowerDFGToB3::ScratchFPRUsage)1>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinarySnippet<JSC::JITDivGenerator,(JSC::FTL::`anonymous namespace'::LowerDFGToB3::ScratchFPRUsage)1>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinarySnippet<JSC::JITDivGenerator,(JSC::FTL::`anonymous namespace'::LowerDFGToB3::ScratchFPRUsage)1>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;
  uint64_t *v34;
  unsigned int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int i;
  unsigned int v44;
  char v45;
  unsigned int *result;
  _BYTE *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67[2];
  char v68;
  __int16 v69;
  char v70;
  _QWORD v71[2];

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(unsigned int *)(v11 + 100);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = 12 * v12;
    while (v14 < *(unsigned int *)(v11 + 100))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(v11 + 88) + v13), a2, a3, a4, a5, a6, a7, a8);
      ++v14;
      v13 += 12;
      if (v15 == v13)
        goto LABEL_7;
    }
    __break(0xC471u);
LABEL_69:
    JUMPOUT(0x197D77A50);
  }
LABEL_7:
  v16 = *(_QWORD **)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(v17 + 96);
  v18 = *(_QWORD *)(v17 + 104);
  v20 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 48) + 216) & 0xFF003FF80000 | v19;
  v21 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v21)
  {
    v22 = *(_BYTE **)(a1 + 56);
    do
    {
      v23 = *v22 & 0x7F;
      if (v23 >= 0x40)
        goto LABEL_68;
      v24 = 1 << v23;
      v20 &= ~v24;
      v18 &= ~v24;
      ++v22;
    }
    while (--v21);
  }
  v25 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v25)
  {
    v47 = *(_BYTE **)(a1 + 72);
    do
    {
      v48 = (*v47 + 32) & 0x7F;
      if (v48 >= 0x40)
        goto LABEL_68;
      v49 = 1 << v48;
      v20 &= ~v49;
      v18 &= ~v49;
      ++v47;
    }
    while (--v25);
  }
  v71[0] = v20;
  v71[1] = v18;
  v26 = *(_QWORD *)(a1 + 96);
  if ((v26 & 1) != 0)
  {
    v50 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
    if ((v26 & 2) != 0
      || ((v51 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v51 != 0x3FFFFFFF)
        ? (v52 = (_DWORD)v51 == -1)
        : (v52 = 1),
          v52))
    {
      v53 = 2;
    }
    else if (v51 >> 28)
    {
      v59 = v16;
      v60 = WTF::fastMalloc((WTF *)0x10);
      v16 = v59;
      *(_QWORD *)v60 = v50;
      *(_DWORD *)(v60 + 8) = v51;
      v53 = 1;
      v50 = v60;
    }
    else
    {
      v53 = v50;
      v50 = v51 << 36;
    }
    v26 = v50 | v53;
  }
  if (!*(_DWORD *)(a1 + 52))
  {
    __break(0xC471u);
    JUMPOUT(0x197D77A60);
  }
  v28 = *(_QWORD *)(a1 + 104);
  v27 = *(_QWORD *)(a1 + 112);
  v29 = **(_BYTE **)(a1 + 40);
  v30 = *(_QWORD *)(a2 + 336);
  v31 = *(_QWORD *)(a1 + 96);
  v32 = (uint64_t *)(v31 & 0xFFFFFFFF8);
  if ((v31 & 1) == 0)
    goto LABEL_15;
  v54 = *v32;
  if ((v31 & 2) != 0
    || ((v55 = *(_DWORD *)((v31 & 0xFFFFFFFF8) + 8), v55 != 0x3FFFFFFF) ? (v56 = v55 == -1) : (v56 = 1), v56))
  {
    v57 = 2;
  }
  else if (v55 >> 28)
  {
    v64 = v16;
    v65 = *(_QWORD *)(a1 + 104);
    v61 = *(_QWORD *)(a1 + 112);
    v66 = *(_QWORD *)(a2 + 336);
    v63 = **(_BYTE **)(a1 + 40);
    v62 = WTF::fastMalloc((WTF *)0x10);
    v28 = v65;
    v30 = v66;
    v29 = v63;
    v27 = v61;
    v16 = v64;
    *(_QWORD *)v62 = v54;
    *(_DWORD *)(v62 + 8) = v55;
    v57 = 1;
    v54 = v62;
  }
  else
  {
    v57 = v54;
    v54 = 0;
  }
  v58 = v54 | v57;
  v32 = (uint64_t *)(v58 & 0xFFFFFFFF8);
  if ((v58 & 1) == 0)
  {
LABEL_15:
    v33 = 1;
    v34 = v32;
    if (!v32)
      goto LABEL_17;
    goto LABEL_16;
  }
  v33 = 0;
  v34 = (uint64_t *)*v32;
  if (*v32)
LABEL_16:
    v30 = v34[1];
LABEL_17:
  v35 = *(_DWORD *)(a1 + 52);
  if (v35 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D77A68);
  }
  if (v35 == 2)
  {
    __break(0xC471u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v67, v16, v71, a2, v26, v28 + 8, v27, v29 & 0x7F, *(_QWORD *)(v30 + 8), *(_BYTE *)(*(_QWORD *)(a1 + 40) + 16) & 0x7F, *(_BYTE *)(*(_QWORD *)(a1 + 40) + 32) & 0x7F);
  if ((v33 & 1) == 0 && v32)
    WTF::fastFree((unint64_t)v32, v36, v37, v38, v39, v40, v41, v42);
  if ((v26 & 1) != 0 && (v26 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v26 & 0xFFFFFFFF8, v36, v37, v38, v39, v40, v41, v42);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v36, v37, v38, v39, v40, v41, v42);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v44 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v36, v37, v38, v39, v40, v41, v42);
    v44 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v44) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v45 = 69;
  else
    v45 = 65;
  v67[0] = i;
  v67[1] = 0;
  v68 = v45;
  v69 = 15;
  v70 = -1;
  LODWORD(v71[0]) = *(_DWORD *)(a1 + 120);
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v67, (unsigned int *)v71, a2, v38, v39, v40, v41, v42);
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::DFG::Node *v16;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v15 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v13, v14, *a3, *a4, *a5);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<double (*)(double const*,unsigned int),JSC::B3::Value *&,JSC::B3::Value *>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  JSC::DFG::Node *v21;
  char **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  char *v26;
  uint64_t v27;

  v12 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), a2);
  v13 = *a3;
  v14 = *a4;
  v15 = a1[3472];
  v16 = (JSC::B3::Value *)a1[3470];
  v17 = a1[3471];
  v18 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v18 = off_1E357F5F0;
  *(_DWORD *)(v18 + 8) = -1;
  *(_WORD *)(v18 + 12) = 82;
  *(_DWORD *)(v18 + 16) = 4;
  *(_BYTE *)(v18 + 20) = 4;
  *(_QWORD *)(v18 + 24) = v17;
  *(_QWORD *)(v18 + 32) = 0;
  v19 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v18);
  v19[2] = v12;
  *v19 = v19 + 2;
  v19[3] = v13;
  v19[4] = v14;
  v19[1] = 0x300000003;
  *(_QWORD *)v18 = &unk_1E357CF78;
  *(_OWORD *)(v18 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v18 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v18 + 76))
  {
    JSC::B3::Procedure::addValueImpl(v16, (JSC::B3::Value *)v18);
    v27 = v18;
    v22 = (char **)(v15 + 8);
    v23 = *(unsigned int *)(v15 + 20);
    if ((_DWORD)v23 == *(_DWORD *)(v15 + 16))
    {
      v26 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22, v23 + 1, (unint64_t)&v27);
      v23 = *(unsigned int *)(v15 + 20);
      *(_QWORD *)(*(_QWORD *)(v15 + 8) + 8 * v23) = *(_QWORD *)v26;
      v24 = v27;
    }
    else
    {
      *(_QWORD *)&(*v22)[8 * v23] = v18;
      v24 = v18;
    }
    *(_DWORD *)(v15 + 20) = v23 + 1;
    *(_QWORD *)(v24 + 32) = v15;
    return v18;
  }
  else
  {
    result = 60;
    __break(0xC471u);
  }
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::operationExceptionCheckAndExtractResultIfNeeded<double>(JSC::DFG **a1, uint64_t a2, JSC::DFG::Node *a3)
{
  if (JSC::DFG::mayExit(*a1, a1[3528], a3))
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::operationExceptionCheck<double>(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::JSCell *v17;
  JSC::B3::Value *Ptr;
  JSC::B3::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int8x8_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64x2_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;

  v2 = *(_QWORD *)a1;
  v3 = (uint64_t *)(a1 + 28192);
  JSC::CodeOrigin::CodeOrigin(&v71, (const JSC::CodeOrigin *)(a1 + 28192));
  v17 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v2, &v71, v4, v5, v6, v7, v8, v9);
  if ((v71 & 1) != 0 && (v71 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v71 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
  Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::Output *)(a1 + 27640), *(JSC::B3::Value **)(a1 + 27880), (const JSC::FTL::AbstractHeap *)(a1 + 6304));
  if (HIBYTE(word_1ECF4C620))
  {
    v45 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationExceptionFuzz);
    JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::BasicBlock **)(a1 + 27776), *(JSC::B3::Value **)(a1 + 27760), 0, *(_QWORD *)(a1 + 27768), v45, v52);
    Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::Output *)(a1 + 27640), *(JSC::B3::Value **)(a1 + 27880), (const JSC::FTL::AbstractHeap *)(a1 + 6304));
  }
  v19 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), Ptr);
  v69 = 0;
  v70 = 2;
  v20 = *(_QWORD *)a1;
  JSC::CodeOrigin::CodeOrigin(&v68, (const JSC::CodeOrigin *)(a1 + 28200));
  v32 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v20, (unint64_t *)&v68, &v70, &v69, v21, v22, v23, v24);
  if ((v68 & 1) != 0 && (v68 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v68 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
  if (v32)
  {
    JSC::CodeOrigin::CodeOrigin(&v66, (const JSC::CodeOrigin *)&v70);
    v58 = (int8x8_t)JSC::DFG::NodeOrigin::withForExitAndExitOK(&v67, v3, (unint64_t *)&v66, v53, v54, v55, v56, v57).u64[0];
    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v67, v59, v60, v61, v62, v63, v64, v65);
    if ((v66 & 1) != 0 && (v66 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v66 & 0xFFFFFFFF8, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    v33 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v19, *(_QWORD *)(a1 + 27856), v33, 0.0, 1.0, v34, v35, v36, v37);
    *(_QWORD *)(a1 + 27776) = v33;
  }
  if ((v70 & 1) != 0 && (v70 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v70 & 0xFFFFFFFF8, v38, v39, v40, v41, v42, v43, v44);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<double (*)(JSC::JSGlobalObject *,long long),JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::DFG::Node *v15;

  v12 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v13 = JSC::FTL::Output::call<JSC::B3::Value *>((_QWORD *)(a1 + 27640), 4, v12, *a3, *a4);
  return v13;
}

uint64_t JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v21 = JSC::FTL::Output::phi(a1, 4);
  v23 = v21;
  if (a2 || a3)
  {
    if ((*(_WORD *)(a2 + 12) & 0xFFF) == 0x98)
      v24 = a2;
    else
      v24 = 0;
    *(_QWORD *)(v24 + 40) = v21;
  }
  JSC::FTL::Output::addIncomingToPhi<JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock>(v21, a4, a5, a6, a7, a9, a10, v22, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
  return v23;
}

uint64_t JSC::FTL::Output::addIncomingToPhi<JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;

  if (a2 || a3)
  {
    if ((*(_WORD *)(a2 + 12) & 0xFFF) != 0x98)
      a2 = 0;
    *(_QWORD *)(a2 + 40) = a1;
  }
  if (a4 || a5)
  {
    if ((*(_WORD *)(a4 + 12) & 0xFFF) == 0x98)
      v18 = a4;
    else
      v18 = 0;
    *(_QWORD *)(v18 + 40) = a1;
  }
  return JSC::FTL::Output::addIncomingToPhi<JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock,JSC::FTL::ValueFromBlock>(a1, a6, a7, a9, a10, a11, a12, a8, a13, a14, a15, a16, a17, a18);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *>((_QWORD *)(a1 + 27640), v12, v13, *a3, *a4);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  char v47;
  __int128 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  _BYTE v88[18];
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[2];
  __int128 v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 28224);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = (v3 >> 50) & 0x3F;
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 == 26)
    {
      v5 = *(_QWORD *)(v2 + 32) & 0xFC000000000000;
      v6 = 0x68000000000000;
    }
    else
    {
      if ((_DWORD)v4 != 28)
      {
LABEL_4:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, (JSC::DFG::Node *)v2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x495C, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitBinaryBitOpSnippet(J_JITOperation_GJJ) [BinaryBitOpGenerator = JSC::JITBitAndGenerator]", "node->isBinaryUseKind(UntypedUse) || node->isBinaryUseKind(AnyBigIntUse) || node->isBinaryUseKind(BigInt32Use)");
        __break(0xC471u);
        JUMPOUT(0x197D781A4);
      }
      v5 = *(_QWORD *)(v2 + 32) & 0xFC000000000000;
      v6 = 0x70000000000000;
    }
    if (v5 != v6)
      goto LABEL_4;
  }
  else if ((*(_BYTE *)(v2 + 38) & 0xFC) != 0)
  {
    goto LABEL_4;
  }
  v29 = *(_QWORD *)(v2 + 24);
  v30 = *(_QWORD *)(a1 + 28040);
  v31 = *(unsigned int *)((v29 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  if ((v29 & 1) != 0)
    v32 = (_QWORD *)(v30 + 24);
  else
    v32 = (_QWORD *)(v30 + 8);
  v33 = *v32 + 32 * v31;
  v34 = (void *)*(unsigned int *)(a1 + 28120);
  if ((_DWORD)v34 != *(_DWORD *)(v33 + 20))
  {
    if ((*(_QWORD *)(v33 + 8) & 0x2800FFFFFFF7) != 0)
    {
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v33, v34, v23, v24, v25, v26, v27, v28);
      v30 = *(_QWORD *)(a1 + 28040);
    }
    else
    {
      *(_DWORD *)(v33 + 20) = (_DWORD)v34;
    }
  }
  v41 = JSC::DFG::AbstractValue::resultType((JSC::DFG::AbstractValue *)v33);
  v42 = *(_QWORD *)(v2 + 32);
  v43 = *(unsigned int *)((v42 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  if ((v42 & 1) != 0)
    v44 = (_QWORD *)(v30 + 24);
  else
    v44 = (_QWORD *)(v30 + 8);
  v45 = *v44 + 32 * v43;
  v46 = (void *)*(unsigned int *)(a1 + 28120);
  if ((_DWORD)v46 != *(_DWORD *)(v45 + 20))
  {
    if ((*(_QWORD *)(v45 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v45, v46, v35, v36, v37, v38, v39, v40);
    else
      *(_DWORD *)(v45 + 20) = (_DWORD)v46;
  }
  v47 = JSC::DFG::AbstractValue::resultType((JSC::DFG::AbstractValue *)v45);
  v48 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)(a1 + 27640), 2);
  *(_QWORD *)&v88[8] = 0;
  v88[16] = 3;
  JSC::B3::StackmapValue::append(v48, v7, (unint64_t)&v88[8]);
  *(_QWORD *)v88 = v8;
  *(_QWORD *)&v88[8] = 0;
  v88[16] = 3;
  JSC::B3::StackmapValue::append(v48, v8, (unint64_t)&v88[8]);
  v49 = *(_QWORD *)(a1 + 27904);
  *(_OWORD *)v88 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v48, v49, (unint64_t)v88);
  v50 = *(_QWORD *)(a1 + 27896);
  *(_OWORD *)v88 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v48, v50, (unint64_t)v88);
  *((_BYTE *)v48 + 168) = 1;
  *((_QWORD *)v48 + 8) |= 0x30000uLL;
  *((_QWORD *)v48 + 10) |= 0x30000uLL;
  *(_QWORD *)&v94 = 0;
  BYTE8(v94) = 5;
  WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v88, &v94, 1uLL);
  WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v48 + 136, v88, v56, v57, v58, v59, v60, v61);
  v69 = *(_QWORD *)v88;
  if (&v88[16] != *(_BYTE **)v88 && *(_QWORD *)v88)
  {
    *(_QWORD *)v88 = 0;
    *(_DWORD *)&v88[8] = 0;
    WTF::fastFree(v69, v62, v63, v64, v65, v66, v67, v68);
  }
  v70 = *(_QWORD *)(a1 + 8);
  JSC::CodeOrigin::CodeOrigin((uint64_t *)&v94, (const JSC::CodeOrigin *)v2);
  v71 = v87;
  if (v87)
  {
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 + 1, v71));
  }
  *(_QWORD *)v88 = v71;
  *(_WORD *)&v88[8] = v41;
  *(_QWORD *)&v88[10] = 0;
  v89 = v47;
  v90 = 0;
  v91 = 0;
  v92 = v70;
  JSC::CodeOrigin::CodeOrigin(v93, (const JSC::CodeOrigin *)&v94);
  v93[1] = (uint64_t)operationValueBitAnd;
  if ((v94 & 1) != 0 && (v94 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v94 & 0xFFFFFFFF8, v80, v81, v82, v83, v84, v85, v86);
  if (v87)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v87, v80, v81, v82, v83, v84, v85, v86);
}

unsigned int *JSC::B3::StackmapValue::setGenerator<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x48);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::~StackmapGenerationParams(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = a1[5];
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *a1;
  *a1 = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E35759C0;
  v2 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 16) = v2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(result + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
    if ((v5 & 2) != 0
      || ((v8 = *(unsigned int *)((v5 & 0xFFFFFFFF8) + 8), (_DWORD)v8 != 0x3FFFFFFF)
        ? (v9 = (_DWORD)v8 == -1)
        : (v9 = 1),
          v9))
    {
      v10 = 2;
    }
    else if (v8 >> 28)
    {
      v13 = a2;
      v14 = result;
      v11 = v7;
      v12 = v8;
      v7 = WTF::fastMalloc((WTF *)0x10);
      a2 = v13;
      result = v14;
      *(_QWORD *)v7 = v11;
      *(_DWORD *)(v7 + 8) = v12;
      v10 = 1;
    }
    else
    {
      v10 = v7;
      v7 = v8 << 36;
    }
    v5 = v7 | v10;
  }
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v5;
  *(_QWORD *)(result + 64) = v6;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  unsigned int *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  JSC::FTL::ExceptionTarget *v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t *result;
  JSC::FTL::ExceptionTarget *v65[2];
  uint64_t v66;
  uint64_t v67[3];
  int v68;
  int v69;
  unsigned int *v70;

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)a1, (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v65);
  v7 = (unsigned int *)v65[0];
  JSC::FTL::ExceptionTarget::jumps(v65[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v70);
  if (v7)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v7, v8, v9, v10, v11, v12, v13, v14);
  v15 = *(_DWORD *)(a3 + 20);
  if (!v15)
    goto LABEL_21;
  if (v15 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D78AACLL);
  }
  if (v15 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D78AB4);
  }
  if (!*(_DWORD *)(a3 + 36))
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x197D78AA4);
  }
  v16 = *(_BYTE **)(a3 + 8);
  v17 = *v16 & 0x7F;
  v18 = v16[16] & 0x7F;
  v19 = v16[32] & 0x7F;
  v20 = **(_BYTE **)(a3 + 24);
  v21 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)v21 = 1;
  v22 = *(_QWORD *)(a1 + 8);
  *(_WORD *)(v21 + 16) = *(_WORD *)(a1 + 16);
  *(_QWORD *)(v21 + 8) = v22;
  v23 = *(_QWORD *)(a1 + 18);
  *(_WORD *)(v21 + 26) = *(_WORD *)(a1 + 26);
  *(_QWORD *)(v21 + 18) = v23;
  *(_BYTE *)(v21 + 28) = v17;
  *(_BYTE *)(v21 + 29) = v18;
  *(_BYTE *)(v21 + 30) = v19;
  *(_BYTE *)(v21 + 31) = v20;
  *(_BYTE *)(v21 + 32) = 0;
  *(_QWORD *)(v21 + 40) = v21 + 56;
  *(_QWORD *)(v21 + 48) = 2;
  *(_QWORD *)(v21 + 80) = v21 + 96;
  *(_QWORD *)(v21 + 88) = 2;
  JSC::JITBitAndGenerator::generateFastPath((JSC::JITBitAndGenerator *)(v21 + 8), (JSC::CCallHelpers *)a2, v24, v25, v26, v27, v28, v29);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(v21 + 40), a2, v30, v31, v32, v33, v34, v35);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v36, v37, v38, v39, v40, v41, v42, &v69);
  do
    v43 = __ldaxr((unsigned int *)v21);
  while (__stlxr(v43 + 1, (unsigned int *)v21));
  v44 = *(JSC::FTL::ExceptionTarget **)(a1 + 32);
  v65[0] = (JSC::FTL::ExceptionTarget *)v21;
  v65[1] = v44;
  JSC::B3::StackmapGenerationParams::StackmapGenerationParams((uint64_t)&v66, (const JSC::B3::StackmapGenerationParams *)a3);
  JSC::CodeOrigin::CodeOrigin(v67, (const JSC::CodeOrigin *)(a1 + 40));
  v45 = v70;
  if (v70)
  {
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
  }
  v47 = *(_QWORD *)(a1 + 48);
  v67[1] = (uint64_t)v45;
  v67[2] = v47;
  v68 = v69;
  do
  {
    v62 = __ldaxr((unsigned int *)v21);
    v63 = v62 - 1;
  }
  while (__stlxr(v63, (unsigned int *)v21));
  if (!v63)
  {
    atomic_store(1u, (unsigned int *)v21);
    WTF::ThreadSafeRefCounted<WTF::Box<JSC::JITBitAndGenerator>::Data,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::JITDivGenerator *)v21, v55, v56, v57, v58, v59, v60, v61);
  }
  result = WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::~Box((unint64_t *)&v70, v55, v56, v57, v58, v59, v60, v61);
  *(_BYTE *)(a2 + 212) = v6;
  return result;
}

uint64_t JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE v16[112];
  unsigned int *v17;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v17;
    *(_DWORD *)(a1 + 12) = v10 + 1;
  }
}

uint64_t void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::~(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v20;

  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v20 = *(_QWORD *)(v9 + 8);
      if (v9 + 24 != v20 && v20 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 80);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 56);
  if (v13)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 40);
  if (v14)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 24);
  if (v15)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::ThreadSafeRefCounted<WTF::Box<JSC::JITBitAndGenerator>::Data,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::JITDivGenerator *)v16, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::ThreadSafeRefCounted<WTF::Box<JSC::JITBitAndGenerator>::Data,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(JSC::JITDivGenerator *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    JSC::JITDivGenerator::~JITDivGenerator(a1, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
  }
}

uint64_t WTF::createSharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E35759E8;
  *a1 = v4;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

unsigned int *void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitAndGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int *result;
  unsigned int v39;
  unsigned int v40[2];
  char v41;
  __int16 v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(*(_QWORD *)a1 + 80), a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD **)(a1 + 8);
  v46[0] = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 16));
  v46[1] = v12;
  JSC::CodeOrigin::CodeOrigin(&v45, (const JSC::CodeOrigin *)(a1 + 80));
  if (!*(_DWORD *)(a1 + 36))
  {
    __break(0xC471u);
    goto LABEL_23;
  }
  v14 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 96);
  v15 = **(_BYTE **)(a1 + 24);
  v16 = *(_QWORD *)(a2 + 336);
  JSC::CodeOrigin::CodeOrigin(&v44, (const JSC::CodeOrigin *)(a1 + 80));
  v17 = (_QWORD *)(v44 & 0xFFFFFFFF8);
  if ((v44 & 1) != 0)
    v17 = (_QWORD *)*v17;
  if (v17)
    v16 = v17[1];
  v18 = *(_DWORD *)(a1 + 36);
  if (v18 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D78F00);
  }
  if (v18 == 2)
  {
    __break(0xC471u);
LABEL_23:
    JUMPOUT(0x197D78EF8);
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v40, v11, v46, a2, v45, v14 + 8, v13, v15 & 0x7F, *(_QWORD *)(v16 + 8), *(_BYTE *)(*(_QWORD *)(a1 + 24) + 16) & 0x7F, *(_BYTE *)(*(_QWORD *)(a1 + 24) + 32) & 0x7F);
  if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v44 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
  JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), (uint64_t)v19, v20, v21, v22, v23, v24, v25, (int *)v46);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v26, v27, v28, v29, v30, v31);
  if (*(_BYTE *)(a2 + 328))
    v37 = 69;
  else
    v37 = 65;
  v40[0] = v46[0];
  v40[1] = 0;
  v41 = v37;
  v42 = 15;
  v43 = -1;
  v39 = *(_DWORD *)(a1 + 104);
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v40, &v39, a2, v32, v33, v34, v35, v36);
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitOrGenerator>(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  char v47;
  __int128 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  _BYTE v88[18];
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[2];
  __int128 v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 28224);
  v3 = *(_QWORD *)(v2 + 24);
  v4 = (v3 >> 50) & 0x3F;
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 == 26)
    {
      v5 = *(_QWORD *)(v2 + 32) & 0xFC000000000000;
      v6 = 0x68000000000000;
    }
    else
    {
      if ((_DWORD)v4 != 28)
      {
LABEL_4:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, (JSC::DFG::Node *)v2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x495C, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitBinaryBitOpSnippet(J_JITOperation_GJJ) [BinaryBitOpGenerator = JSC::JITBitOrGenerator]", "node->isBinaryUseKind(UntypedUse) || node->isBinaryUseKind(AnyBigIntUse) || node->isBinaryUseKind(BigInt32Use)");
        __break(0xC471u);
        JUMPOUT(0x197D78FA4);
      }
      v5 = *(_QWORD *)(v2 + 32) & 0xFC000000000000;
      v6 = 0x70000000000000;
    }
    if (v5 != v6)
      goto LABEL_4;
  }
  else if ((*(_BYTE *)(v2 + 38) & 0xFC) != 0)
  {
    goto LABEL_4;
  }
  v29 = *(_QWORD *)(v2 + 24);
  v30 = *(_QWORD *)(a1 + 28040);
  v31 = *(unsigned int *)((v29 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  if ((v29 & 1) != 0)
    v32 = (_QWORD *)(v30 + 24);
  else
    v32 = (_QWORD *)(v30 + 8);
  v33 = *v32 + 32 * v31;
  v34 = (void *)*(unsigned int *)(a1 + 28120);
  if ((_DWORD)v34 != *(_DWORD *)(v33 + 20))
  {
    if ((*(_QWORD *)(v33 + 8) & 0x2800FFFFFFF7) != 0)
    {
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v33, v34, v23, v24, v25, v26, v27, v28);
      v30 = *(_QWORD *)(a1 + 28040);
    }
    else
    {
      *(_DWORD *)(v33 + 20) = (_DWORD)v34;
    }
  }
  v41 = JSC::DFG::AbstractValue::resultType((JSC::DFG::AbstractValue *)v33);
  v42 = *(_QWORD *)(v2 + 32);
  v43 = *(unsigned int *)((v42 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  if ((v42 & 1) != 0)
    v44 = (_QWORD *)(v30 + 24);
  else
    v44 = (_QWORD *)(v30 + 8);
  v45 = *v44 + 32 * v43;
  v46 = (void *)*(unsigned int *)(a1 + 28120);
  if ((_DWORD)v46 != *(_DWORD *)(v45 + 20))
  {
    if ((*(_QWORD *)(v45 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v45, v46, v35, v36, v37, v38, v39, v40);
    else
      *(_DWORD *)(v45 + 20) = (_DWORD)v46;
  }
  v47 = JSC::DFG::AbstractValue::resultType((JSC::DFG::AbstractValue *)v45);
  v48 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)(a1 + 27640), 2);
  *(_QWORD *)&v88[8] = 0;
  v88[16] = 3;
  JSC::B3::StackmapValue::append(v48, v7, (unint64_t)&v88[8]);
  *(_QWORD *)v88 = v8;
  *(_QWORD *)&v88[8] = 0;
  v88[16] = 3;
  JSC::B3::StackmapValue::append(v48, v8, (unint64_t)&v88[8]);
  v49 = *(_QWORD *)(a1 + 27904);
  *(_OWORD *)v88 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v48, v49, (unint64_t)v88);
  v50 = *(_QWORD *)(a1 + 27896);
  *(_OWORD *)v88 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v48, v50, (unint64_t)v88);
  *((_BYTE *)v48 + 168) = 1;
  *((_QWORD *)v48 + 8) |= 0x30000uLL;
  *((_QWORD *)v48 + 10) |= 0x30000uLL;
  *(_QWORD *)&v94 = 0;
  BYTE8(v94) = 5;
  WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v88, &v94, 1uLL);
  WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v48 + 136, v88, v56, v57, v58, v59, v60, v61);
  v69 = *(_QWORD *)v88;
  if (&v88[16] != *(_BYTE **)v88 && *(_QWORD *)v88)
  {
    *(_QWORD *)v88 = 0;
    *(_DWORD *)&v88[8] = 0;
    WTF::fastFree(v69, v62, v63, v64, v65, v66, v67, v68);
  }
  v70 = *(_QWORD *)(a1 + 8);
  JSC::CodeOrigin::CodeOrigin((uint64_t *)&v94, (const JSC::CodeOrigin *)v2);
  v71 = v87;
  if (v87)
  {
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 + 1, v71));
  }
  *(_QWORD *)v88 = v71;
  *(_WORD *)&v88[8] = v41;
  *(_QWORD *)&v88[10] = 0;
  v89 = v47;
  v90 = 0;
  v91 = 0;
  v92 = v70;
  JSC::CodeOrigin::CodeOrigin(v93, (const JSC::CodeOrigin *)&v94);
  v93[1] = (uint64_t)operationValueBitOr;
  if ((v94 & 1) != 0 && (v94 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v94 & 0xFFFFFFFF8, v80, v81, v82, v83, v84, v85, v86);
  if (v87)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v87, v80, v81, v82, v83, v84, v85, v86);
}

unsigned int *JSC::B3::StackmapValue::setGenerator<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitOrGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x48);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitOrGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3575A10;
  v2 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 16) = v2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(result + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
    if ((v5 & 2) != 0
      || ((v8 = *(unsigned int *)((v5 & 0xFFFFFFFF8) + 8), (_DWORD)v8 != 0x3FFFFFFF)
        ? (v9 = (_DWORD)v8 == -1)
        : (v9 = 1),
          v9))
    {
      v10 = 2;
    }
    else if (v8 >> 28)
    {
      v13 = a2;
      v14 = result;
      v11 = v7;
      v12 = v8;
      v7 = WTF::fastMalloc((WTF *)0x10);
      a2 = v13;
      result = v14;
      *(_QWORD *)v7 = v11;
      *(_DWORD *)(v7 + 8) = v12;
      v10 = 1;
    }
    else
    {
      v10 = v7;
      v7 = v8 << 36;
    }
    v5 = v7 | v10;
  }
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v5;
  *(_QWORD *)(result + 64) = v6;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitOrGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitOrGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitOrGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitOrGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  unsigned int *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  JSC::FTL::ExceptionTarget *v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t *result;
  JSC::FTL::ExceptionTarget *v65[2];
  uint64_t v66;
  uint64_t v67[3];
  int v68;
  int v69;
  unsigned int *v70;

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)a1, (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v65);
  v7 = (unsigned int *)v65[0];
  JSC::FTL::ExceptionTarget::jumps(v65[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v70);
  if (v7)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v7, v8, v9, v10, v11, v12, v13, v14);
  v15 = *(_DWORD *)(a3 + 20);
  if (!v15)
    goto LABEL_21;
  if (v15 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D797F4);
  }
  if (v15 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D797FCLL);
  }
  if (!*(_DWORD *)(a3 + 36))
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x197D797ECLL);
  }
  v16 = *(_BYTE **)(a3 + 8);
  v17 = *v16 & 0x7F;
  v18 = v16[16] & 0x7F;
  v19 = v16[32] & 0x7F;
  v20 = **(_BYTE **)(a3 + 24);
  v21 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)v21 = 1;
  v22 = *(_QWORD *)(a1 + 8);
  *(_WORD *)(v21 + 16) = *(_WORD *)(a1 + 16);
  *(_QWORD *)(v21 + 8) = v22;
  v23 = *(_QWORD *)(a1 + 18);
  *(_WORD *)(v21 + 26) = *(_WORD *)(a1 + 26);
  *(_QWORD *)(v21 + 18) = v23;
  *(_BYTE *)(v21 + 28) = v17;
  *(_BYTE *)(v21 + 29) = v18;
  *(_BYTE *)(v21 + 30) = v19;
  *(_BYTE *)(v21 + 31) = v20;
  *(_BYTE *)(v21 + 32) = 0;
  *(_QWORD *)(v21 + 40) = v21 + 56;
  *(_QWORD *)(v21 + 48) = 2;
  *(_QWORD *)(v21 + 80) = v21 + 96;
  *(_QWORD *)(v21 + 88) = 2;
  JSC::JITBitOrGenerator::generateFastPath((JSC::JITBitOrGenerator *)(v21 + 8), (JSC::CCallHelpers *)a2, v24, v25, v26, v27, v28, v29);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(v21 + 40), a2, v30, v31, v32, v33, v34, v35);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v36, v37, v38, v39, v40, v41, v42, &v69);
  do
    v43 = __ldaxr((unsigned int *)v21);
  while (__stlxr(v43 + 1, (unsigned int *)v21));
  v44 = *(JSC::FTL::ExceptionTarget **)(a1 + 32);
  v65[0] = (JSC::FTL::ExceptionTarget *)v21;
  v65[1] = v44;
  JSC::B3::StackmapGenerationParams::StackmapGenerationParams((uint64_t)&v66, (const JSC::B3::StackmapGenerationParams *)a3);
  JSC::CodeOrigin::CodeOrigin(v67, (const JSC::CodeOrigin *)(a1 + 40));
  v45 = v70;
  if (v70)
  {
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
  }
  v47 = *(_QWORD *)(a1 + 48);
  v67[1] = (uint64_t)v45;
  v67[2] = v47;
  v68 = v69;
  do
  {
    v62 = __ldaxr((unsigned int *)v21);
    v63 = v62 - 1;
  }
  while (__stlxr(v63, (unsigned int *)v21));
  if (!v63)
  {
    atomic_store(1u, (unsigned int *)v21);
    WTF::ThreadSafeRefCounted<WTF::Box<JSC::JITBitAndGenerator>::Data,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::JITDivGenerator *)v21, v55, v56, v57, v58, v59, v60, v61);
  }
  result = WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::~Box((unint64_t *)&v70, v55, v56, v57, v58, v59, v60, v61);
  *(_BYTE *)(a2 + 212) = v6;
  return result;
}

uint64_t JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitOrGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE v16[112];
  unsigned int *v17;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v17;
    *(_DWORD *)(a1 + 12) = v10 + 1;
  }
}

uint64_t WTF::createSharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitOrGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitOrGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3575A38;
  *a1 = v4;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitOrGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitOrGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitOrGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitOrGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitOrGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitOrGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitXorGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitXorGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitXorGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  char v6;
  JSC::FTL::ExceptionTarget *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _BYTE *v18;
  char v19;
  char v20;
  char v21;
  char v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int i;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  WTF *v53;
  WTF *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  WTF *v86;
  unsigned int v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  const void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v100;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  unint64_t v108;
  uint64_t v110;
  char v111;
  _QWORD v112[3];
  _OWORD *v113;
  int v114;
  int v115;
  void *v116;
  int v117;
  int v118;
  void *v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int *v124;
  uint64_t v125;
  int v126;
  WTF *v127;
  JSC::FTL::ExceptionTarget *v128[15];

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 16), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v128);
  v7 = v128[0];
  JSC::FTL::ExceptionTarget::jumps(v128[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v127);
  v128[0] = 0;
  if (v7)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v7);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v7));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v7);
      v102 = (unsigned int *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      if (v102)
      {
        do
        {
          v103 = __ldaxr(v102);
          v104 = v103 - 1;
        }
        while (__stlxr(v104, v102));
        if (!v104)
        {
          atomic_store(1u, v102);
          WTF::fastFree((unint64_t)v102, v8, v9, v10, v11, v12, v13, v14);
        }
      }
      v105 = (unsigned int *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (v105)
      {
        do
        {
          v106 = __ldaxr(v105);
          v107 = v106 - 1;
        }
        while (__stlxr(v107, v105));
        if (!v107)
        {
          atomic_store(1u, v105);
          WTF::fastFree((unint64_t)v105, v8, v9, v10, v11, v12, v13, v14);
        }
      }
      WTF::fastFree((unint64_t)v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  v17 = a3[5];
  if (!v17)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7A054);
  }
  if (v17 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7A05CLL);
  }
  if (v17 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7A064);
  }
  v111 = v6;
  if (!a3[9])
  {
    __break(0xC471u);
    JUMPOUT(0x197D7A06CLL);
  }
  v18 = (_BYTE *)*((_QWORD *)a3 + 1);
  v19 = *v18 & 0x7F;
  v20 = v18[16] & 0x7F;
  v21 = v18[32] & 0x7F;
  v22 = **((_BYTE **)a3 + 3);
  v23 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)v23 = 1;
  v24 = *(_WORD *)(a1 + 32);
  *(_QWORD *)(v23 + 8) = *(_QWORD *)(a1 + 24);
  *(_WORD *)(v23 + 16) = v24;
  v25 = *(_QWORD *)(a1 + 34);
  *(_WORD *)(v23 + 26) = *(_WORD *)(a1 + 42);
  *(_QWORD *)(v23 + 18) = v25;
  *(_BYTE *)(v23 + 28) = v19;
  *(_BYTE *)(v23 + 29) = v20;
  *(_BYTE *)(v23 + 30) = v21;
  *(_BYTE *)(v23 + 31) = v22;
  *(_BYTE *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 40) = v23 + 56;
  *(_QWORD *)(v23 + 48) = 2;
  *(_QWORD *)(v23 + 80) = v23 + 96;
  *(_QWORD *)(v23 + 88) = 2;
  JSC::JITBitXorGenerator::generateFastPath((JSC::JITBitXorGenerator *)(v23 + 8), (JSC::CCallHelpers *)a2, v26, v27, v28, v29, v30, v31);
  v39 = *(unsigned int *)(v23 + 52);
  if ((_DWORD)v39)
  {
    v40 = 0;
    v41 = 0;
    v42 = 12 * v39;
    while (v41 < *(unsigned int *)(v23 + 52))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(v23 + 40) + v40), a2, v33, v34, v35, v36, v37, v38);
      ++v41;
      v40 += 12;
      if (v42 == v40)
        goto LABEL_14;
    }
    __break(0xC471u);
LABEL_98:
    JUMPOUT(0x197D7A044);
  }
LABEL_14:
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v32, v33, v34, v35, v36, v37, v38);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  do
    v44 = __ldaxr((unsigned int *)v23);
  while (__stlxr(v44 + 1, (unsigned int *)v23));
  v45 = *(_QWORD *)(a1 + 48);
  v112[0] = v23;
  v112[1] = v45;
  v46 = *(_QWORD *)a3;
  v47 = a3[5];
  v113 = 0;
  v114 = 0;
  v112[2] = v46;
  v115 = v47;
  if ((_DWORD)v47)
  {
    if (v47 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197D7A074);
    }
    v48 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v47));
    v114 = v47;
    v113 = v48;
    v49 = a3[5];
    if ((_DWORD)v49)
    {
      v50 = (__int128 *)*((_QWORD *)a3 + 1);
      v51 = 16 * v49;
      do
      {
        v52 = *v50++;
        *v48++ = v52;
        v51 -= 16;
      }
      while (v51);
    }
  }
  v53 = (WTF *)a3[9];
  v116 = 0;
  v117 = 0;
  v118 = (int)v53;
  if ((_DWORD)v53)
  {
    v117 = (int)v53;
    v116 = (void *)WTF::fastMalloc(v53);
    memcpy(v116, *((const void **)a3 + 3), a3[9]);
  }
  v54 = (WTF *)a3[13];
  v119 = 0;
  v120 = 0;
  v121 = (int)v54;
  if ((_DWORD)v54)
  {
    v120 = (int)v54;
    v119 = (void *)WTF::fastMalloc(v54);
    memcpy(v119, *((const void **)a3 + 5), a3[13]);
  }
  v122 = *((_QWORD *)a3 + 7);
  v55 = *(_QWORD *)(a1 + 56);
  if ((v55 & 1) != 0)
  {
    v94 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
    if ((v55 & 2) != 0
      || ((v95 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v95 != 0x3FFFFFFF)
        ? (v96 = (_DWORD)v95 == -1)
        : (v96 = 1),
          v96))
    {
      v97 = 2;
    }
    else if (v95 >> 28)
    {
      v110 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v110 = v94;
      *(_DWORD *)(v110 + 8) = v95;
      v97 = 1;
      v94 = v110;
    }
    else
    {
      v97 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
      v94 = v95 << 36;
    }
    v55 = v94 | v97;
  }
  v123 = v55;
  v56 = (unsigned int *)v127;
  if (v127)
  {
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 + 1, v56));
  }
  v58 = *(_QWORD *)(a1 + 64);
  v124 = v56;
  v125 = v58;
  v126 = i;
  v59 = *((_QWORD *)a3 + 7);
  v60 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v60 + 8) = 1;
  *(_QWORD *)v60 = off_1E3575A88;
  v68 = *(unsigned int *)(v59 + 12);
  if ((_DWORD)v68 == *(_DWORD *)(v59 + 8))
  {
    v89 = v68 + (v68 >> 2);
    if (v89 >= 0x10)
      v90 = v89 + 1;
    else
      v90 = 16;
    if (v90 <= v68 + 1)
      v91 = v68 + 1;
    else
      v91 = v90;
    if (v91 >> 29)
    {
      __break(0xC471u);
      goto LABEL_98;
    }
    v92 = *(const void **)v59;
    v93 = (void *)WTF::fastMalloc((WTF *)(8 * v91));
    *(_DWORD *)(v59 + 8) = v91;
    *(_QWORD *)v59 = v93;
    memcpy(v93, v92, 8 * v68);
    if (v92)
    {
      if (*(const void **)v59 == v92)
      {
        *(_QWORD *)v59 = 0;
        *(_DWORD *)(v59 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v92, v61, v62, v63, v64, v65, v66, v67);
    }
    v68 = *(unsigned int *)(v59 + 12);
    v69 = (uint64_t *)(*(_QWORD *)v59 + 8 * v68);
  }
  else
  {
    v69 = (uint64_t *)(*(_QWORD *)v59 + 8 * v68);
  }
  *v69 = v60;
  *(_DWORD *)(v59 + 12) = v68 + 1;
  do
  {
    v84 = __ldaxr((unsigned int *)v23);
    v85 = v84 - 1;
  }
  while (__stlxr(v85, (unsigned int *)v23));
  if (!v85)
  {
    atomic_store(1u, (unsigned int *)v23);
    v98 = *(_QWORD *)(v23 + 80);
    if (v23 + 96 != v98 && v98 != 0)
    {
      *(_QWORD *)(v23 + 80) = 0;
      *(_DWORD *)(v23 + 88) = 0;
      WTF::fastFree(v98, v77, v78, v79, v80, v81, v82, v83);
    }
    v100 = *(_QWORD *)(v23 + 40);
    if (v23 + 56 != v100 && v100 != 0)
    {
      *(_QWORD *)(v23 + 40) = 0;
      *(_DWORD *)(v23 + 48) = 0;
      WTF::fastFree(v100, v77, v78, v79, v80, v81, v82, v83);
    }
    WTF::fastFree(v23, v77, v78, v79, v80, v81, v82, v83);
  }
  v86 = v127;
  v127 = 0;
  if (v86)
  {
    do
    {
      v87 = __ldaxr((unsigned int *)v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, (unsigned int *)v86));
    if (!v88)
    {
      atomic_store(1u, (unsigned int *)v86);
      v108 = *((_QWORD *)v86 + 1);
      if ((WTF *)((char *)v86 + 24) != (WTF *)v108 && v108 != 0)
      {
        *((_QWORD *)v86 + 1) = 0;
        *((_DWORD *)v86 + 4) = 0;
        WTF::fastFree(v108, v77, v78, v79, v80, v81, v82, v83);
      }
      WTF::fastFree((unint64_t)v86, v77, v78, v79, v80, v81, v82, v83);
    }
  }
  *(_BYTE *)(a2 + 212) = v111;
}

uint64_t void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitXorGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::~(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v20;
  unint64_t v22;
  unint64_t v24;

  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v20 = *(_QWORD *)(v9 + 8);
      if (v9 + 24 != v20 && v20 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 80);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 56);
  if (v13)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 40);
  if (v14)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 24);
  if (v15)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr((unsigned int *)v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v16));
    if (!v18)
    {
      atomic_store(1u, (unsigned int *)v16);
      v22 = *(_QWORD *)(v16 + 80);
      if (v16 + 96 != v22 && v22 != 0)
      {
        *(_QWORD *)(v16 + 80) = 0;
        *(_DWORD *)(v16 + 88) = 0;
        WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
      }
      v24 = *(_QWORD *)(v16 + 40);
      if (v16 + 56 != v24 && v24 != 0)
      {
        *(_QWORD *)(v16 + 40) = 0;
        *(_DWORD *)(v16 + 48) = 0;
        WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitXorGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitXorGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitXorGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitXorGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitXorGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITBitXorGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;
  uint64_t *v34;
  unsigned int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int i;
  unsigned int v44;
  char v45;
  unsigned int *result;
  _BYTE *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67[2];
  char v68;
  __int16 v69;
  char v70;
  _QWORD v71[2];

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(unsigned int *)(v11 + 92);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = 12 * v12;
    while (v14 < *(unsigned int *)(v11 + 92))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(v11 + 80) + v13), a2, a3, a4, a5, a6, a7, a8);
      ++v14;
      v13 += 12;
      if (v15 == v13)
        goto LABEL_7;
    }
    __break(0xC471u);
LABEL_69:
    JUMPOUT(0x197D7A5DCLL);
  }
LABEL_7:
  v16 = *(_QWORD **)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(v17 + 96);
  v18 = *(_QWORD *)(v17 + 104);
  v20 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 48) + 216) & 0xFF003FF80000 | v19;
  v21 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v21)
  {
    v22 = *(_BYTE **)(a1 + 56);
    do
    {
      v23 = *v22 & 0x7F;
      if (v23 >= 0x40)
        goto LABEL_68;
      v24 = 1 << v23;
      v20 &= ~v24;
      v18 &= ~v24;
      ++v22;
    }
    while (--v21);
  }
  v25 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v25)
  {
    v47 = *(_BYTE **)(a1 + 72);
    do
    {
      v48 = (*v47 + 32) & 0x7F;
      if (v48 >= 0x40)
        goto LABEL_68;
      v49 = 1 << v48;
      v20 &= ~v49;
      v18 &= ~v49;
      ++v47;
    }
    while (--v25);
  }
  v71[0] = v20;
  v71[1] = v18;
  v26 = *(_QWORD *)(a1 + 96);
  if ((v26 & 1) != 0)
  {
    v50 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
    if ((v26 & 2) != 0
      || ((v51 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v51 != 0x3FFFFFFF)
        ? (v52 = (_DWORD)v51 == -1)
        : (v52 = 1),
          v52))
    {
      v53 = 2;
    }
    else if (v51 >> 28)
    {
      v59 = v16;
      v60 = WTF::fastMalloc((WTF *)0x10);
      v16 = v59;
      *(_QWORD *)v60 = v50;
      *(_DWORD *)(v60 + 8) = v51;
      v53 = 1;
      v50 = v60;
    }
    else
    {
      v53 = v50;
      v50 = v51 << 36;
    }
    v26 = v50 | v53;
  }
  if (!*(_DWORD *)(a1 + 52))
  {
    __break(0xC471u);
    JUMPOUT(0x197D7A5ECLL);
  }
  v28 = *(_QWORD *)(a1 + 104);
  v27 = *(_QWORD *)(a1 + 112);
  v29 = **(_BYTE **)(a1 + 40);
  v30 = *(_QWORD *)(a2 + 336);
  v31 = *(_QWORD *)(a1 + 96);
  v32 = (uint64_t *)(v31 & 0xFFFFFFFF8);
  if ((v31 & 1) == 0)
    goto LABEL_15;
  v54 = *v32;
  if ((v31 & 2) != 0
    || ((v55 = *(_DWORD *)((v31 & 0xFFFFFFFF8) + 8), v55 != 0x3FFFFFFF) ? (v56 = v55 == -1) : (v56 = 1), v56))
  {
    v57 = 2;
  }
  else if (v55 >> 28)
  {
    v64 = v16;
    v65 = *(_QWORD *)(a1 + 104);
    v61 = *(_QWORD *)(a1 + 112);
    v66 = *(_QWORD *)(a2 + 336);
    v63 = **(_BYTE **)(a1 + 40);
    v62 = WTF::fastMalloc((WTF *)0x10);
    v28 = v65;
    v30 = v66;
    v29 = v63;
    v27 = v61;
    v16 = v64;
    *(_QWORD *)v62 = v54;
    *(_DWORD *)(v62 + 8) = v55;
    v57 = 1;
    v54 = v62;
  }
  else
  {
    v57 = v54;
    v54 = 0;
  }
  v58 = v54 | v57;
  v32 = (uint64_t *)(v58 & 0xFFFFFFFF8);
  if ((v58 & 1) == 0)
  {
LABEL_15:
    v33 = 1;
    v34 = v32;
    if (!v32)
      goto LABEL_17;
    goto LABEL_16;
  }
  v33 = 0;
  v34 = (uint64_t *)*v32;
  if (*v32)
LABEL_16:
    v30 = v34[1];
LABEL_17:
  v35 = *(_DWORD *)(a1 + 52);
  if (v35 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7A5F4);
  }
  if (v35 == 2)
  {
    __break(0xC471u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v67, v16, v71, a2, v26, v28 + 8, v27, v29 & 0x7F, *(_QWORD *)(v30 + 8), *(_BYTE *)(*(_QWORD *)(a1 + 40) + 16) & 0x7F, *(_BYTE *)(*(_QWORD *)(a1 + 40) + 32) & 0x7F);
  if ((v33 & 1) == 0 && v32)
    WTF::fastFree((unint64_t)v32, v36, v37, v38, v39, v40, v41, v42);
  if ((v26 & 1) != 0 && (v26 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v26 & 0xFFFFFFFF8, v36, v37, v38, v39, v40, v41, v42);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v36, v37, v38, v39, v40, v41, v42);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v44 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v36, v37, v38, v39, v40, v41, v42);
    v44 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v44) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v45 = 69;
  else
    v45 = 65;
  v67[0] = i;
  v67[1] = 0;
  v68 = v45;
  v69 = 15;
  v70 = -1;
  LODWORD(v71[0]) = *(_DWORD *)(a1 + 120);
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v67, (unsigned int *)v71, a2, v38, v39, v40, v41, v42);
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(uint64_t a1, int a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  char v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  _BYTE v72[18];
  char v73;
  char v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v4 = *(unint64_t **)(a1 + 28224);
  v13 = v4[3];
  v14 = *(_QWORD *)(a1 + 28040);
  v15 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  if ((v13 & 1) != 0)
    v16 = (_QWORD *)(v14 + 24);
  else
    v16 = (_QWORD *)(v14 + 8);
  v17 = *v16 + 32 * v15;
  v18 = (void *)*(unsigned int *)(a1 + 28120);
  if ((_DWORD)v18 != *(_DWORD *)(v17 + 20))
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v17, v18, v6, v7, v8, v9, v10, v11);
      v14 = *(_QWORD *)(a1 + 28040);
    }
    else
    {
      *(_DWORD *)(v17 + 20) = (_DWORD)v18;
    }
  }
  v25 = JSC::DFG::AbstractValue::resultType((JSC::DFG::AbstractValue *)v17);
  v26 = v4[4];
  v27 = *(unsigned int *)((v26 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  if ((v26 & 1) != 0)
    v28 = (_QWORD *)(v14 + 24);
  else
    v28 = (_QWORD *)(v14 + 8);
  v29 = *v28 + 32 * v27;
  v30 = (void *)*(unsigned int *)(a1 + 28120);
  if ((_DWORD)v30 != *(_DWORD *)(v29 + 20))
  {
    if ((*(_QWORD *)(v29 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v29, v30, v19, v20, v21, v22, v23, v24);
    else
      *(_DWORD *)(v29 + 20) = (_DWORD)v30;
  }
  v31 = JSC::DFG::AbstractValue::resultType((JSC::DFG::AbstractValue *)v29);
  v32 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)(a1 + 27640), 2);
  *(_QWORD *)&v72[8] = 0;
  v72[16] = 3;
  JSC::B3::StackmapValue::append(v32, v5, (unint64_t)&v72[8]);
  *(_QWORD *)v72 = v12;
  *(_QWORD *)&v72[8] = 0;
  v72[16] = 3;
  JSC::B3::StackmapValue::append(v32, v12, (unint64_t)&v72[8]);
  v33 = *(_QWORD *)(a1 + 27904);
  *(_OWORD *)v72 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v32, v33, (unint64_t)v72);
  v34 = *(_QWORD *)(a1 + 27896);
  *(_OWORD *)v72 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v32, v34, (unint64_t)v72);
  *((_WORD *)v32 + 84) = 257;
  *((_QWORD *)v32 + 8) |= 0x30000uLL;
  *((_QWORD *)v32 + 10) |= 0x30000uLL;
  *(_QWORD *)&v79 = 0;
  BYTE8(v79) = 5;
  WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v72, &v79, 1uLL);
  WTF::Vector<JSC::B3::ValueRep,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v32 + 136, v72, v40, v41, v42, v43, v44, v45);
  v53 = *(_QWORD *)v72;
  if (&v72[16] != *(_BYTE **)v72 && *(_QWORD *)v72)
  {
    *(_QWORD *)v72 = 0;
    *(_DWORD *)&v72[8] = 0;
    WTF::fastFree(v53, v46, v47, v48, v49, v50, v51, v52);
  }
  v54 = *(_QWORD *)(a1 + 8);
  JSC::CodeOrigin::CodeOrigin((uint64_t *)&v79, (const JSC::CodeOrigin *)v4);
  v55 = v71;
  if (v71)
  {
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 + 1, v55));
  }
  *(_QWORD *)v72 = v55;
  *(_WORD *)&v72[8] = v25;
  *(_QWORD *)&v72[10] = 0;
  v73 = v31;
  v74 = 0;
  v75 = 0;
  v76 = a2;
  v77 = v54;
  JSC::CodeOrigin::CodeOrigin(&v78, (const JSC::CodeOrigin *)&v79);
  if ((v79 & 1) != 0 && (v79 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v79 & 0xFFFFFFFF8, v64, v65, v66, v67, v68, v69, v70);
  if (v71)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v71, v64, v65, v66, v67, v68, v69, v70);
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x40);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3575AB0;
  v2 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 16) = v2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(result + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  if ((v5 & 1) != 0)
  {
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
    if ((v5 & 2) != 0
      || ((v7 = *(unsigned int *)((v5 & 0xFFFFFFFF8) + 8), (_DWORD)v7 != 0x3FFFFFFF)
        ? (v8 = (_DWORD)v7 == -1)
        : (v8 = 1),
          v8))
    {
      v9 = 2;
    }
    else if (v7 >> 28)
    {
      v12 = result;
      v10 = v6;
      v11 = v7;
      v6 = WTF::fastMalloc((WTF *)0x10);
      result = v12;
      *(_QWORD *)v6 = v10;
      *(_DWORD *)(v6 + 8) = v11;
      v9 = 1;
    }
    else
    {
      v9 = v6;
      v6 = v7 << 36;
    }
    v5 = v6 | v9;
  }
  *(_QWORD *)(result + 56) = v5;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  unsigned int *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t *result;
  JSC::FTL::ExceptionTarget *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[2];
  int v63;
  int v64;
  unsigned __int8 v65;
  char v66;
  char v67;
  unsigned int *v68;
  unsigned int *v69;

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)a1, (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v58);
  v7 = (unsigned int *)v58;
  JSC::FTL::ExceptionTarget::jumps(v58, (JSC::CCallHelpers *)a2, (uint64_t *)&v69);
  if (v7)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v7, v8, v9, v10, v11, v12, v13, v14);
  v15 = *(_DWORD *)(a3 + 20);
  if (!v15)
    goto LABEL_23;
  v16 = *(_BYTE **)(a3 + 8);
  LOBYTE(v58) = *v16 & 0x7F;
  if (v15 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7AE10);
  }
  LOBYTE(v64) = v16[16] & 0x7F;
  if (v15 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7AE18);
  }
  v67 = v16[32] & 0x7F;
  if (!*(_DWORD *)(a3 + 52))
  {
    __break(0xC471u);
    JUMPOUT(0x197D7AE20);
  }
  v66 = **(_BYTE **)(a3 + 40);
  if (!*(_DWORD *)(a3 + 36))
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x197D7AE08);
  }
  v65 = **(_BYTE **)(a3 + 24);
  WTF::Box<JSC::JITRightShiftGenerator>::create<JSC::SnippetOperand const&,JSC::SnippetOperand const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID,JSC::JITRightShiftGenerator::ShiftType const&>((uint64_t *)&v68, (uint64_t *)(a1 + 8), a1 + 18, (char *)&v58, (char *)&v64, &v67, &v66, &v65, (int *)(a1 + 28));
  v17 = v68;
  JSC::JITRightShiftGenerator::generateFastPath((JSC::JITRightShiftGenerator *)(v68 + 2), (JSC::CCallHelpers *)a2, v18, v19, v20, v21, v22, v23);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link(v17 + 10, a2, v24, v25, v26, v27, v28, v29);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v30, v31, v32, v33, v34, v35, v36, &v64);
  if (v17)
  {
    do
      v37 = __ldaxr(v17);
    while (__stlxr(v37 + 1, v17));
  }
  v58 = (JSC::FTL::ExceptionTarget *)v17;
  v59 = *(_DWORD *)(a1 + 28);
  v60 = *(_QWORD *)(a1 + 32);
  JSC::B3::StackmapGenerationParams::StackmapGenerationParams((uint64_t)&v61, (const JSC::B3::StackmapGenerationParams *)a3);
  JSC::CodeOrigin::CodeOrigin(v62, (const JSC::CodeOrigin *)(a1 + 40));
  v38 = v69;
  if (v69)
  {
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
  }
  v62[1] = (uint64_t)v38;
  v63 = v64;
  v54 = v68;
  v68 = 0;
  if (v54)
  {
    do
    {
      v55 = __ldaxr(v54);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v54));
    if (!v56)
    {
      atomic_store(1u, v54);
      WTF::ThreadSafeRefCounted<WTF::Box<JSC::JITBitAndGenerator>::Data,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::JITDivGenerator *)v54, v47, v48, v49, v50, v51, v52, v53);
    }
  }
  result = WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::~Box((unint64_t *)&v69, v47, v48, v49, v50, v51, v52, v53);
  *(_BYTE *)(a2 + 212) = v6;
  return result;
}

double WTF::Box<JSC::JITRightShiftGenerator>::create<JSC::SnippetOperand const&,JSC::SnippetOperand const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID,JSC::JITRightShiftGenerator::ShiftType const&>(uint64_t *a1, uint64_t *a2, uint64_t a3, char *a4, char *a5, char *a6, char *a7, unsigned __int8 *a8, int *a9)
{
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  unsigned __int8 v22;
  int v23;
  uint64_t v24;
  double result;

  v17 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)v17 = 1;
  v18 = *a4;
  v19 = *a5;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  v23 = *a9;
  v24 = *a2;
  *(_WORD *)(v17 + 16) = *((_WORD *)a2 + 4);
  *(_QWORD *)(v17 + 8) = v24;
  LOWORD(v24) = *(_WORD *)(a3 + 8);
  *(_QWORD *)(v17 + 18) = *(_QWORD *)a3;
  *(_WORD *)(v17 + 26) = v24;
  *(_BYTE *)(v17 + 28) = v18;
  *(_BYTE *)(v17 + 29) = v19;
  *(_BYTE *)(v17 + 30) = v20;
  *(_WORD *)(v17 + 31) = v22;
  *(_QWORD *)(v17 + 40) = v17 + 56;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(v17 + 48) = 2;
  *(_QWORD *)(v17 + 80) = v17 + 96;
  *(_QWORD *)(v17 + 88) = 2;
  *(_DWORD *)(v17 + 120) = v23;
  *(_BYTE *)(v17 + 124) = v21;
  *a1 = v17;
  return result;
}

uint64_t JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE v16[112];
  unsigned int *v17;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v17;
    *(_DWORD *)(a1 + 12) = v10 + 1;
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::~(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v20;

  v9 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v20 = *(_QWORD *)(v9 + 8);
      if (v9 + 24 != v20 && v20 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 88);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 64);
  if (v13)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 32);
  if (v15)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::ThreadSafeRefCounted<WTF::Box<JSC::JITBitAndGenerator>::Data,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::JITDivGenerator *)v16, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t WTF::createSharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3575AD8;
  *a1 = v4;
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v3 = result;
  v4 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)result = v4;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(unsigned int *)(a2 + 44);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 44) = v7;
  if ((_DWORD)v7)
  {
    if (v7 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v8 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v7));
    *(_DWORD *)(v3 + 40) = v7;
    *(_QWORD *)(v3 + 32) = v8;
    v9 = *(unsigned int *)(a2 + 44);
    if ((_DWORD)v9)
    {
      v10 = *(__int128 **)(a2 + 32);
      v11 = 16 * v9;
      do
      {
        v12 = *v10++;
        *v8++ = v12;
        v11 -= 16;
      }
      while (v11);
    }
  }
  v13 = (WTF *)*(unsigned int *)(a2 + 60);
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 60) = (_DWORD)v13;
  if ((_DWORD)v13)
  {
    v14 = (void *)WTF::fastMalloc(v13);
    *(_DWORD *)(v3 + 56) = (_DWORD)v13;
    *(_QWORD *)(v3 + 48) = v14;
    memcpy(v14, *(const void **)(a2 + 48), *(unsigned int *)(a2 + 60));
  }
  v15 = (WTF *)*(unsigned int *)(a2 + 76);
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_DWORD *)(v3 + 76) = (_DWORD)v15;
  if ((_DWORD)v15)
  {
    v19 = (void *)WTF::fastMalloc(v15);
    *(_DWORD *)(v3 + 72) = (_DWORD)v15;
    *(_QWORD *)(v3 + 64) = v19;
    memcpy(v19, *(const void **)(a2 + 64), *(unsigned int *)(a2 + 76));
  }
  v16 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(v3 + 80) = *(_QWORD *)(a2 + 80);
  if ((v16 & 1) != 0)
  {
    v20 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v21 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v21 != 0x3FFFFFFF)
        ? (v22 = (_DWORD)v21 == -1)
        : (v22 = 1),
          v22))
    {
      v23 = 2;
    }
    else if (v21 >> 28)
    {
      v24 = v21;
      v25 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v25 = v20;
      *(_DWORD *)(v25 + 8) = v24;
      v23 = 1;
      v20 = v25;
    }
    else
    {
      v23 = v20;
      v20 = v21 << 36;
    }
    v16 = v20 | v23;
  }
  *(_QWORD *)(v3 + 88) = v16;
  v17 = *(unsigned int **)(a2 + 96);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *(_QWORD *)(v3 + 96) = v17;
  *(_DWORD *)(v3 + 104) = *(_DWORD *)(a2 + 104);
  return v3;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

unsigned int *JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitRightShiftSnippet(JSC::JITRightShiftGenerator::ShiftType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int *result;
  unsigned int v43;
  unsigned int v44[2];
  char v45;
  __int16 v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(*(_QWORD *)a1 + 80), a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_DWORD *)(a1 + 8);
  v12 = *(_QWORD **)(a1 + 16);
  v50[0] = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 24));
  v50[1] = v13;
  JSC::CodeOrigin::CodeOrigin(&v49, (const JSC::CodeOrigin *)(a1 + 88));
  if (!*(_DWORD *)(a1 + 44))
  {
    __break(0xC471u);
    goto LABEL_26;
  }
  v14 = *(_QWORD *)(a1 + 96);
  v15 = **(_BYTE **)(a1 + 32);
  v16 = *(_QWORD *)(a2 + 336);
  JSC::CodeOrigin::CodeOrigin(&v48, (const JSC::CodeOrigin *)(a1 + 88));
  v17 = (_QWORD *)(v48 & 0xFFFFFFFF8);
  if ((v48 & 1) != 0)
    v17 = (_QWORD *)*v17;
  if (v17)
    v16 = v17[1];
  v18 = *(_DWORD *)(a1 + 44);
  if (v18 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7B4E4);
  }
  if (v18 == 2)
  {
    __break(0xC471u);
LABEL_26:
    JUMPOUT(0x197D7B4DCLL);
  }
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_BYTE *)(v19 + 16) & 0x7F;
  v21 = *(_BYTE *)(v19 + 32) & 0x7F;
  if (v11)
    v22 = operationValueBitURShift;
  else
    v22 = operationValueBitRShift;
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v44, v12, v50, a2, v49, v14 + 8, (uint64_t)v22, v15 & 0x7F, *(_QWORD *)(v16 + 8), v20, v21);
  if ((v48 & 1) != 0 && (v48 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v48 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
  if ((v49 & 1) != 0 && (v49 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v49 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
  JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), (uint64_t)v23, v24, v25, v26, v27, v28, v29, (int *)v50);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v30, v31, v32, v33, v34, v35);
  if (*(_BYTE *)(a2 + 328))
    v41 = 69;
  else
    v41 = 65;
  v44[0] = v50[0];
  v44[1] = 0;
  v45 = v41;
  v46 = 15;
  v47 = -1;
  v43 = *(_DWORD *)(a1 + 104);
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v44, &v43, a2, v36, v37, v38, v39, v40);
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITLeftShiftGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITLeftShiftGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITLeftShiftGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  char v6;
  JSC::FTL::ExceptionTarget *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  _BYTE *v18;
  char v19;
  char v20;
  char v21;
  char v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int i;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  WTF *v53;
  WTF *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  WTF *v86;
  unsigned int v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  const void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v100;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  unint64_t v108;
  uint64_t v110;
  char v111;
  _QWORD v112[3];
  _OWORD *v113;
  int v114;
  int v115;
  void *v116;
  int v117;
  int v118;
  void *v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int *v124;
  uint64_t v125;
  int v126;
  WTF *v127;
  JSC::FTL::ExceptionTarget *v128[15];

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 16), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v128);
  v7 = v128[0];
  JSC::FTL::ExceptionTarget::jumps(v128[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v127);
  v128[0] = 0;
  if (v7)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v7);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v7));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v7);
      v102 = (unsigned int *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = 0;
      if (v102)
      {
        do
        {
          v103 = __ldaxr(v102);
          v104 = v103 - 1;
        }
        while (__stlxr(v104, v102));
        if (!v104)
        {
          atomic_store(1u, v102);
          WTF::fastFree((unint64_t)v102, v8, v9, v10, v11, v12, v13, v14);
        }
      }
      v105 = (unsigned int *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (v105)
      {
        do
        {
          v106 = __ldaxr(v105);
          v107 = v106 - 1;
        }
        while (__stlxr(v107, v105));
        if (!v107)
        {
          atomic_store(1u, v105);
          WTF::fastFree((unint64_t)v105, v8, v9, v10, v11, v12, v13, v14);
        }
      }
      WTF::fastFree((unint64_t)v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  v17 = a3[5];
  if (!v17)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7BBE4);
  }
  if (v17 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7BBECLL);
  }
  if (v17 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7BBF4);
  }
  v111 = v6;
  if (!a3[9])
  {
    __break(0xC471u);
    JUMPOUT(0x197D7BBFCLL);
  }
  v18 = (_BYTE *)*((_QWORD *)a3 + 1);
  v19 = *v18 & 0x7F;
  v20 = v18[16] & 0x7F;
  v21 = v18[32] & 0x7F;
  v22 = **((_BYTE **)a3 + 3);
  v23 = WTF::fastMalloc((WTF *)0x78);
  *(_DWORD *)v23 = 1;
  v24 = *(_WORD *)(a1 + 32);
  *(_QWORD *)(v23 + 8) = *(_QWORD *)(a1 + 24);
  *(_WORD *)(v23 + 16) = v24;
  v25 = *(_QWORD *)(a1 + 34);
  *(_WORD *)(v23 + 26) = *(_WORD *)(a1 + 42);
  *(_QWORD *)(v23 + 18) = v25;
  *(_BYTE *)(v23 + 28) = v19;
  *(_BYTE *)(v23 + 29) = v20;
  *(_BYTE *)(v23 + 30) = v21;
  *(_BYTE *)(v23 + 31) = v22;
  *(_BYTE *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 40) = v23 + 56;
  *(_QWORD *)(v23 + 48) = 2;
  *(_QWORD *)(v23 + 80) = v23 + 96;
  *(_QWORD *)(v23 + 88) = 2;
  JSC::JITLeftShiftGenerator::generateFastPath((JSC::JITLeftShiftGenerator *)(v23 + 8), (JSC::CCallHelpers *)a2, v26, v27, v28, v29, v30, v31);
  v39 = *(unsigned int *)(v23 + 52);
  if ((_DWORD)v39)
  {
    v40 = 0;
    v41 = 0;
    v42 = 12 * v39;
    while (v41 < *(unsigned int *)(v23 + 52))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(v23 + 40) + v40), a2, v33, v34, v35, v36, v37, v38);
      ++v41;
      v40 += 12;
      if (v42 == v40)
        goto LABEL_14;
    }
    __break(0xC471u);
LABEL_98:
    JUMPOUT(0x197D7BBD4);
  }
LABEL_14:
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v32, v33, v34, v35, v36, v37, v38);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  do
    v44 = __ldaxr((unsigned int *)v23);
  while (__stlxr(v44 + 1, (unsigned int *)v23));
  v45 = *(_QWORD *)(a1 + 48);
  v112[0] = v23;
  v112[1] = v45;
  v46 = *(_QWORD *)a3;
  v47 = a3[5];
  v113 = 0;
  v114 = 0;
  v112[2] = v46;
  v115 = v47;
  if ((_DWORD)v47)
  {
    if (v47 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197D7BC04);
    }
    v48 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v47));
    v114 = v47;
    v113 = v48;
    v49 = a3[5];
    if ((_DWORD)v49)
    {
      v50 = (__int128 *)*((_QWORD *)a3 + 1);
      v51 = 16 * v49;
      do
      {
        v52 = *v50++;
        *v48++ = v52;
        v51 -= 16;
      }
      while (v51);
    }
  }
  v53 = (WTF *)a3[9];
  v116 = 0;
  v117 = 0;
  v118 = (int)v53;
  if ((_DWORD)v53)
  {
    v117 = (int)v53;
    v116 = (void *)WTF::fastMalloc(v53);
    memcpy(v116, *((const void **)a3 + 3), a3[9]);
  }
  v54 = (WTF *)a3[13];
  v119 = 0;
  v120 = 0;
  v121 = (int)v54;
  if ((_DWORD)v54)
  {
    v120 = (int)v54;
    v119 = (void *)WTF::fastMalloc(v54);
    memcpy(v119, *((const void **)a3 + 5), a3[13]);
  }
  v122 = *((_QWORD *)a3 + 7);
  v55 = *(_QWORD *)(a1 + 56);
  if ((v55 & 1) != 0)
  {
    v94 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
    if ((v55 & 2) != 0
      || ((v95 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v95 != 0x3FFFFFFF)
        ? (v96 = (_DWORD)v95 == -1)
        : (v96 = 1),
          v96))
    {
      v97 = 2;
    }
    else if (v95 >> 28)
    {
      v110 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v110 = v94;
      *(_DWORD *)(v110 + 8) = v95;
      v97 = 1;
      v94 = v110;
    }
    else
    {
      v97 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
      v94 = v95 << 36;
    }
    v55 = v94 | v97;
  }
  v123 = v55;
  v56 = (unsigned int *)v127;
  if (v127)
  {
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 + 1, v56));
  }
  v58 = *(_QWORD *)(a1 + 64);
  v124 = v56;
  v125 = v58;
  v126 = i;
  v59 = *((_QWORD *)a3 + 7);
  v60 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v60 + 8) = 1;
  *(_QWORD *)v60 = off_1E3575B28;
  v68 = *(unsigned int *)(v59 + 12);
  if ((_DWORD)v68 == *(_DWORD *)(v59 + 8))
  {
    v89 = v68 + (v68 >> 2);
    if (v89 >= 0x10)
      v90 = v89 + 1;
    else
      v90 = 16;
    if (v90 <= v68 + 1)
      v91 = v68 + 1;
    else
      v91 = v90;
    if (v91 >> 29)
    {
      __break(0xC471u);
      goto LABEL_98;
    }
    v92 = *(const void **)v59;
    v93 = (void *)WTF::fastMalloc((WTF *)(8 * v91));
    *(_DWORD *)(v59 + 8) = v91;
    *(_QWORD *)v59 = v93;
    memcpy(v93, v92, 8 * v68);
    if (v92)
    {
      if (*(const void **)v59 == v92)
      {
        *(_QWORD *)v59 = 0;
        *(_DWORD *)(v59 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v92, v61, v62, v63, v64, v65, v66, v67);
    }
    v68 = *(unsigned int *)(v59 + 12);
    v69 = (uint64_t *)(*(_QWORD *)v59 + 8 * v68);
  }
  else
  {
    v69 = (uint64_t *)(*(_QWORD *)v59 + 8 * v68);
  }
  *v69 = v60;
  *(_DWORD *)(v59 + 12) = v68 + 1;
  do
  {
    v84 = __ldaxr((unsigned int *)v23);
    v85 = v84 - 1;
  }
  while (__stlxr(v85, (unsigned int *)v23));
  if (!v85)
  {
    atomic_store(1u, (unsigned int *)v23);
    v98 = *(_QWORD *)(v23 + 80);
    if (v23 + 96 != v98 && v98 != 0)
    {
      *(_QWORD *)(v23 + 80) = 0;
      *(_DWORD *)(v23 + 88) = 0;
      WTF::fastFree(v98, v77, v78, v79, v80, v81, v82, v83);
    }
    v100 = *(_QWORD *)(v23 + 40);
    if (v23 + 56 != v100 && v100 != 0)
    {
      *(_QWORD *)(v23 + 40) = 0;
      *(_DWORD *)(v23 + 48) = 0;
      WTF::fastFree(v100, v77, v78, v79, v80, v81, v82, v83);
    }
    WTF::fastFree(v23, v77, v78, v79, v80, v81, v82, v83);
  }
  v86 = v127;
  v127 = 0;
  if (v86)
  {
    do
    {
      v87 = __ldaxr((unsigned int *)v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, (unsigned int *)v86));
    if (!v88)
    {
      atomic_store(1u, (unsigned int *)v86);
      v108 = *((_QWORD *)v86 + 1);
      if ((WTF *)((char *)v86 + 24) != (WTF *)v108 && v108 != 0)
      {
        *((_QWORD *)v86 + 1) = 0;
        *((_DWORD *)v86 + 4) = 0;
        WTF::fastFree(v108, v77, v78, v79, v80, v81, v82, v83);
      }
      WTF::fastFree((unint64_t)v86, v77, v78, v79, v80, v81, v82, v83);
    }
  }
  *(_BYTE *)(a2 + 212) = v111;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITLeftShiftGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITLeftShiftGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITLeftShiftGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITLeftShiftGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITLeftShiftGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::emitBinaryBitOpSnippet<JSC::JITLeftShiftGenerator>(JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;
  uint64_t *v34;
  unsigned int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int i;
  unsigned int v44;
  char v45;
  unsigned int *result;
  _BYTE *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67[2];
  char v68;
  __int16 v69;
  char v70;
  _QWORD v71[2];

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(unsigned int *)(v11 + 92);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = 12 * v12;
    while (v14 < *(unsigned int *)(v11 + 92))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(v11 + 80) + v13), a2, a3, a4, a5, a6, a7, a8);
      ++v14;
      v13 += 12;
      if (v15 == v13)
        goto LABEL_7;
    }
    __break(0xC471u);
LABEL_69:
    JUMPOUT(0x197D7C028);
  }
LABEL_7:
  v16 = *(_QWORD **)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(v17 + 96);
  v18 = *(_QWORD *)(v17 + 104);
  v20 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 48) + 216) & 0xFF003FF80000 | v19;
  v21 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v21)
  {
    v22 = *(_BYTE **)(a1 + 56);
    do
    {
      v23 = *v22 & 0x7F;
      if (v23 >= 0x40)
        goto LABEL_68;
      v24 = 1 << v23;
      v20 &= ~v24;
      v18 &= ~v24;
      ++v22;
    }
    while (--v21);
  }
  v25 = *(unsigned int *)(a1 + 84);
  if ((_DWORD)v25)
  {
    v47 = *(_BYTE **)(a1 + 72);
    do
    {
      v48 = (*v47 + 32) & 0x7F;
      if (v48 >= 0x40)
        goto LABEL_68;
      v49 = 1 << v48;
      v20 &= ~v49;
      v18 &= ~v49;
      ++v47;
    }
    while (--v25);
  }
  v71[0] = v20;
  v71[1] = v18;
  v26 = *(_QWORD *)(a1 + 96);
  if ((v26 & 1) != 0)
  {
    v50 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
    if ((v26 & 2) != 0
      || ((v51 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v51 != 0x3FFFFFFF)
        ? (v52 = (_DWORD)v51 == -1)
        : (v52 = 1),
          v52))
    {
      v53 = 2;
    }
    else if (v51 >> 28)
    {
      v59 = v16;
      v60 = WTF::fastMalloc((WTF *)0x10);
      v16 = v59;
      *(_QWORD *)v60 = v50;
      *(_DWORD *)(v60 + 8) = v51;
      v53 = 1;
      v50 = v60;
    }
    else
    {
      v53 = v50;
      v50 = v51 << 36;
    }
    v26 = v50 | v53;
  }
  if (!*(_DWORD *)(a1 + 52))
  {
    __break(0xC471u);
    JUMPOUT(0x197D7C038);
  }
  v28 = *(_QWORD *)(a1 + 104);
  v27 = *(_QWORD *)(a1 + 112);
  v29 = **(_BYTE **)(a1 + 40);
  v30 = *(_QWORD *)(a2 + 336);
  v31 = *(_QWORD *)(a1 + 96);
  v32 = (uint64_t *)(v31 & 0xFFFFFFFF8);
  if ((v31 & 1) == 0)
    goto LABEL_15;
  v54 = *v32;
  if ((v31 & 2) != 0
    || ((v55 = *(_DWORD *)((v31 & 0xFFFFFFFF8) + 8), v55 != 0x3FFFFFFF) ? (v56 = v55 == -1) : (v56 = 1), v56))
  {
    v57 = 2;
  }
  else if (v55 >> 28)
  {
    v64 = v16;
    v65 = *(_QWORD *)(a1 + 104);
    v61 = *(_QWORD *)(a1 + 112);
    v66 = *(_QWORD *)(a2 + 336);
    v63 = **(_BYTE **)(a1 + 40);
    v62 = WTF::fastMalloc((WTF *)0x10);
    v28 = v65;
    v30 = v66;
    v29 = v63;
    v27 = v61;
    v16 = v64;
    *(_QWORD *)v62 = v54;
    *(_DWORD *)(v62 + 8) = v55;
    v57 = 1;
    v54 = v62;
  }
  else
  {
    v57 = v54;
    v54 = 0;
  }
  v58 = v54 | v57;
  v32 = (uint64_t *)(v58 & 0xFFFFFFFF8);
  if ((v58 & 1) == 0)
  {
LABEL_15:
    v33 = 1;
    v34 = v32;
    if (!v32)
      goto LABEL_17;
    goto LABEL_16;
  }
  v33 = 0;
  v34 = (uint64_t *)*v32;
  if (*v32)
LABEL_16:
    v30 = v34[1];
LABEL_17:
  v35 = *(_DWORD *)(a1 + 52);
  if (v35 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7C040);
  }
  if (v35 == 2)
  {
    __break(0xC471u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v67, v16, v71, a2, v26, v28 + 8, v27, v29 & 0x7F, *(_QWORD *)(v30 + 8), *(_BYTE *)(*(_QWORD *)(a1 + 40) + 16) & 0x7F, *(_BYTE *)(*(_QWORD *)(a1 + 40) + 32) & 0x7F);
  if ((v33 & 1) == 0 && v32)
    WTF::fastFree((unint64_t)v32, v36, v37, v38, v39, v40, v41, v42);
  if ((v26 & 1) != 0 && (v26 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v26 & 0xFFFFFFFF8, v36, v37, v38, v39, v40, v41, v42);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v36, v37, v38, v39, v40, v41, v42);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v44 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v36, v37, v38, v39, v40, v41, v42);
    v44 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v44) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v45 = 69;
  else
    v45 = 65;
  v67[0] = i;
  v67[1] = 0;
  v68 = v45;
  v69 = 15;
  v70 = -1;
  LODWORD(v71[0]) = *(_DWORD *)(a1 + 120);
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v67, (unsigned int *)v71, a2, v38, v39, v40, v41, v42);
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::checkStructure<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCheckStructure(void)::{lambda(JSC::DFG::RegisteredStructure)#2}>(uint64_t a1, JSC::B3::Value *a2, uint64_t *a3, unint64_t a4, unint64_t *a5, uint64_t a6, int8x8_t a7)
{
  unint64_t v9;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  int v18;
  int8x8_t v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  JSC::B3::Value *v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  JSC::B3::Value *v55;
  JSC::B3::Value *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int8x8_t v66;
  uint64_t v67;
  JSC::B3::Value *v68;
  JSC::B3::Value *v69;
  char **v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  char v88;
  _QWORD *v89;
  uint64_t *v90;

  v9 = *a5;
  if ((*a5 & 0xFFFFFFFFFFFFFFFDLL) == 0)
  {
    *(_BYTE *)(a1 + 28112) = 0;
    return;
  }
  if ((v9 & 1) != 0)
  {
    v14 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(_DWORD *)v14 == 1)
    {
      v13 = *(_QWORD *)(v14 + 8);
      goto LABEL_8;
    }
  }
  else if (v9 > 3)
  {
    v13 = v9 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_8:
    v15 = *a3;
    v16 = (WTF *)a3[1];
    v17 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(*(_QWORD *)a6 + 27640), v13 >> 4);
    v18 = (*(uint64_t (**)(JSC::B3::Value *, uint64_t))(*(_QWORD *)a2 + 312))(a2, v17);
    if (v18 == 2)
    {
      v20 = *(_QWORD *)(a1 + 27776);
      v21 = *(JSC::B3::Value **)(a1 + 27760);
      v22 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(a1 + 27768), (uint64_t)a2, v17);
      JSC::B3::Procedure::addValueImpl(v21, v22);
      v87 = (uint64_t)v22;
      v23 = (char **)(v20 + 8);
      v24 = *(unsigned int *)(v20 + 20);
      if ((_DWORD)v24 == *(_DWORD *)(v20 + 16))
      {
        v80 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, v24 + 1, (unint64_t)&v87);
        v24 = *(unsigned int *)(v20 + 20);
        *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v24) = *(_QWORD *)v80;
        v25 = v87;
      }
      else
      {
        *(_QWORD *)&(*v23)[8 * v24] = v22;
        v25 = (uint64_t)v22;
      }
      *(_DWORD *)(v20 + 20) = v24 + 1;
      *(_QWORD *)(v25 + 32) = v20;
    }
    else
    {
      v82 = 27648;
      if (v18 == 1)
        v82 = 27640;
      v22 = *(JSC::B3::Value **)(a1 + v82);
    }
    return;
  }
  v86 = a4;
  v26 = JSC::B3::Procedure::addBlock((uint64_t *)0x6BF8, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v27 = v26;
  v28 = *(_QWORD *)(a1 + 27784);
  if (v28)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v28, (uint64_t)v26);
  }
  else
  {
    v90 = v26;
    v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v29 = 0u;
    *((_OWORD *)v29 + 1) = 0u;
    v29[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v29;
    v89 = v29;
    v29[2] = v27;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v90, (uint64_t *)&v89, v30, v31, v32, v33, v34, (uint64_t)&v87);
    v35 = v89;
    v36 = *(_QWORD **)(a1 + 27832);
    *v89 = a1 + 27824;
    v35[1] = v36;
    *v36 = v35;
    *(_QWORD *)(a1 + 27832) = v35;
  }
  v37 = 0;
  v85 = *(_QWORD *)(a1 + 27784);
  v38 = (uint64_t)v27;
  *(_QWORD *)(a1 + 27784) = v27;
  while (1)
  {
    v39 = v37;
    v40 = *a5;
    if ((*a5 & 1) != 0)
      break;
    if (v40 >= 4)
      v41 = 0;
    else
      v41 = -1;
    if (v41 <= v39)
    {
      v61 = v40 & 0xFFFFFFFFFFFFFFFCLL;
      goto LABEL_31;
    }
LABEL_24:
    v43 = JSC::B3::Procedure::addBlock((uint64_t *)v40, *(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v44 = (uint64_t)v43;
    v45 = *(_QWORD *)(a1 + 27784);
    if (v45)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v45, (uint64_t)v43);
    }
    else
    {
      v90 = v43;
      v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v46 = 0u;
      *((_OWORD *)v46 + 1) = 0u;
      v46[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v46;
      v89 = v46;
      v46[2] = v44;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), (uint64_t *)&v90, (uint64_t *)&v89, v47, v48, v49, v50, v51, (uint64_t)&v87);
      v52 = v89;
      v53 = *(_QWORD **)(a1 + 27832);
      *v89 = a1 + 27824;
      v52[1] = v53;
      *v53 = v52;
      *(_QWORD *)(a1 + 27832) = v52;
    }
    v54 = *a5 & 0xFFFFFFFFFFFFFFFCLL;
    if ((*a5 & 1) != 0)
      v54 = *(_QWORD *)(v54 + 8 * v39 + 8);
    v55 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(*(_QWORD *)a6 + 27640), v54 >> 4);
    v56 = JSC::FTL::Output::equal((JSC::FTL::Output *)(a1 + 27640), a2, v55);
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v56, v38, v44, NAN, NAN, v57, v58, v59, v60);
    *(_QWORD *)(a1 + 27776) = v44;
    v37 = v39 + 1;
  }
  v40 &= 0xFFFFFFFFFFFFFFFCLL;
  v42 = *(unsigned int *)v40;
  if (v42 - 1 > v39)
    goto LABEL_24;
  v61 = *(_QWORD *)(v40 + 8 * (v42 - 1) + 8);
LABEL_31:
  v63 = *a3;
  v62 = (WTF *)a3[1];
  v64 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(*(_QWORD *)a6 + 27640), v61 >> 4);
  v65 = (*(uint64_t (**)(JSC::B3::Value *, uint64_t))(*(_QWORD *)a2 + 312))(a2, v64);
  if (v65 == 2)
  {
    v67 = *(_QWORD *)(a1 + 27776);
    v68 = *(JSC::B3::Value **)(a1 + 27760);
    v69 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(a1 + 27768), (uint64_t)a2, v64);
    JSC::B3::Procedure::addValueImpl(v68, v69);
    v87 = (uint64_t)v69;
    v70 = (char **)(v67 + 8);
    v71 = *(unsigned int *)(v67 + 20);
    if ((_DWORD)v71 == *(_DWORD *)(v67 + 16))
    {
      v81 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v70, v71 + 1, (unint64_t)&v87);
      v71 = *(unsigned int *)(v67 + 20);
      *(_QWORD *)(*(_QWORD *)(v67 + 8) + 8 * v71) = *(_QWORD *)v81;
      v72 = v87;
    }
    else
    {
      *(_QWORD *)&(*v70)[8 * v71] = v69;
      v72 = (uint64_t)v69;
    }
    v73 = v86;
    *(_DWORD *)(v67 + 20) = v71 + 1;
    *(_QWORD *)(v72 + 32) = v67;
  }
  else
  {
    v83 = 27648;
    if (v65 == 1)
      v83 = 27640;
    v69 = *(JSC::B3::Value **)(a1 + v83);
    v73 = v86;
  }
  v74 = *(_QWORD *)(a1 + 27776);
  v75 = *(_QWORD *)(a1 + 27760);
  v76 = *(_QWORD *)(a1 + 27768);
  v87 = v38;
  v88 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v74, v75, 154, v76, &v87, v77, v78, v79);
  *(_QWORD *)(a1 + 27776) = v38;
  *(_QWORD *)(a1 + 27784) = v85;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileAssertNotEmpty(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E3575B50;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileAssertNotEmpty(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(int8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20[3];

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a3, "AssertNotEmpty");
  v11 = *(_BYTE *)(a3 + 212);
  if (!v11)
    *(_DWORD *)(a3 + 208) = 0;
  *(_BYTE *)(a3 + 212) = 1;
  if (*(_DWORD *)(a4 + 20))
  {
    JSC::MacroAssemblerARM64::branchTest64(a3, 1, **(_BYTE **)(a4 + 8) & 0x7F, 0xFFFFFFFFLL, a6, a7, a8, a9, (uint64_t)v20, a1);
    v19 = *(_DWORD *)(a3 + 200);
    if (v19 + 4 > *(_DWORD *)(a3 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a3 + 56), v12, v13, v14, v15, v16, v17, v18);
      v19 = *(_DWORD *)(a3 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a3 + 56) + v19) = -734491104;
    *(_DWORD *)(a3 + 200) += 4;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v20, a3, v13, v14, v15, v16, v17, v18);
    *(_BYTE *)(a3 + 212) = v11;
  }
  else
  {
    __break(0xC471u);
  }
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowSymbol(_QWORD *a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return v11;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::getExecutable(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  uint64_t v15;
  uint64_t v16;
  char **v17;
  uint64_t v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  JSC::B3::Value *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::B3::Value *v35;
  JSC::B3::Value *v36;
  char **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::B3::Value *v41;
  uint64_t v42;
  uint64_t v43;
  JSC::B3::Value *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::B3::Value *v56;
  uint64_t v57;
  uint64_t v58;
  char **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char v87;
  _QWORD *v88;
  uint64_t v89;

  v4 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v5 = v4;
  v6 = *((_QWORD *)this + 3473);
  if (v6)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v6, v4);
  }
  else
  {
    v89 = v4;
    v65 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v65 = 0u;
    *((_OWORD *)v65 + 1) = 0u;
    v65[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v65;
    v88 = v65;
    v65[2] = v5;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, &v89, (uint64_t *)&v88, v66, v67, v68, v69, v70, (uint64_t)&v86);
    v71 = v88;
    v72 = (_QWORD *)*((_QWORD *)this + 3479);
    *v88 = (char *)this + 27824;
    v71[1] = v72;
    *v72 = v71;
    *((_QWORD *)this + 3479) = v71;
  }
  v7 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v8 = v7;
  v9 = *((_QWORD *)this + 3473);
  if (v9)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v9, v7);
  }
  else
  {
    v89 = v7;
    v73 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v73 = 0u;
    *((_OWORD *)v73 + 1) = 0u;
    v73[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v73;
    v88 = v73;
    v73[2] = v8;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, &v89, (uint64_t *)&v88, v74, v75, v76, v77, v78, (uint64_t)&v86);
    v79 = v88;
    v80 = (_QWORD *)*((_QWORD *)this + 3479);
    *v88 = (char *)this + 27824;
    v79[1] = v80;
    *v80 = v79;
    *((_QWORD *)this + 3479) = v79;
  }
  v10 = *((_QWORD *)this + 407);
  if (v10)
  {
    v11 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v10);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), a2, v11);
  }
  v12 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3232), (uint64_t)a2, 2);
  v13 = *((_QWORD *)this + 3472);
  v14 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v15 = *((_QWORD *)this + 3471);
  v16 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 152;
  *(_BYTE *)(v16 + 20) = 1;
  *(_QWORD *)v16 = &unk_1E357EDA0;
  *(_DWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_QWORD *)(v16 + 48) = v12;
  *(_QWORD *)(v16 + 24) = v15;
  *(_QWORD *)(v16 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v14, (JSC::B3::Value *)v16);
  v86 = v16;
  v17 = (char **)(v13 + 8);
  v18 = *(unsigned int *)(v13 + 20);
  if ((_DWORD)v18 == *(_DWORD *)(v13 + 16))
  {
    v81 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, v18 + 1, (unint64_t)&v86);
    v18 = *(unsigned int *)(v13 + 20);
    *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v18) = *(_QWORD *)v81;
    v19 = v86;
  }
  else
  {
    *(_QWORD *)&(*v17)[8 * v18] = v16;
    v19 = v16;
  }
  *(_DWORD *)(v13 + 20) = v18 + 1;
  *(_QWORD *)(v19 + 32) = v13;
  v20 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
  v21 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v12, v20);
  v22 = *((_QWORD *)this + 3472);
  v23 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v24 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), (uint64_t)v21, *((_QWORD *)this + 3459));
  JSC::B3::Procedure::addValueImpl(v23, v24);
  v86 = (uint64_t)v24;
  v29 = (char **)(v22 + 8);
  v30 = *(unsigned int *)(v22 + 20);
  if ((_DWORD)v30 == *(_DWORD *)(v22 + 16))
  {
    v82 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)&v86);
    v30 = *(unsigned int *)(v22 + 20);
    *(_QWORD *)(*(_QWORD *)(v22 + 8) + 8 * v30) = *(_QWORD *)v82;
    v31 = v86;
  }
  else
  {
    *(_QWORD *)&(*v29)[8 * v30] = v24;
    v31 = (uint64_t)v24;
  }
  *(_DWORD *)(v22 + 20) = v30 + 1;
  *(_QWORD *)(v31 + 32) = v22;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v24, v5, v8, NAN, NAN, v25, v26, v27, v28);
  *((_QWORD *)this + 3472) = v8;
  v32 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v5;
  v33 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 1);
  v34 = *((_QWORD *)this + 3472);
  v35 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v36 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(15, *((_QWORD *)this + 3471), (uint64_t)v12, v33);
  JSC::B3::Procedure::addValueImpl(v35, v36);
  v86 = (uint64_t)v36;
  v37 = (char **)(v34 + 8);
  v38 = *(unsigned int *)(v34 + 20);
  if ((_DWORD)v38 == *(_DWORD *)(v34 + 16))
  {
    v83 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37, v38 + 1, (unint64_t)&v86);
    v38 = *(unsigned int *)(v34 + 20);
    *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v38) = *(_QWORD *)v83;
    v39 = v86;
  }
  else
  {
    *(_QWORD *)&(*v37)[8 * v38] = v36;
    v39 = (uint64_t)v36;
  }
  *(_DWORD *)(v34 + 20) = v38 + 1;
  *(_QWORD *)(v39 + 32) = v34;
  v40 = *((_QWORD *)this + 257);
  if (v40)
  {
    v41 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v40);
    v36 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v36, v41);
  }
  v42 = JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2032), (uint64_t)v36, 2);
  v43 = *((_QWORD *)this + 3472);
  v44 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v45 = *((_QWORD *)this + 3471);
  v46 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v46 + 8) = -1;
  *(_WORD *)(v46 + 12) = 152;
  *(_DWORD *)(v46 + 16) = 0;
  *(_BYTE *)(v46 + 20) = 1;
  *(_QWORD *)v46 = &unk_1E357EDA0;
  *(_QWORD *)(v46 + 40) = 0;
  *(_QWORD *)(v46 + 48) = v42;
  *(_QWORD *)(v46 + 24) = v45;
  *(_QWORD *)(v46 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v44, (JSC::B3::Value *)v46);
  v86 = v46;
  v50 = (char **)(v43 + 8);
  v51 = *(unsigned int *)(v43 + 20);
  if ((_DWORD)v51 == *(_DWORD *)(v43 + 16))
  {
    v84 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v50, v51 + 1, (unint64_t)&v86);
    v51 = *(unsigned int *)(v43 + 20);
    *(_QWORD *)(*(_QWORD *)(v43 + 8) + 8 * v51) = *(_QWORD *)v84;
    v52 = v86;
  }
  else
  {
    *(_QWORD *)&(*v50)[8 * v51] = v46;
    v52 = v46;
  }
  *(_DWORD *)(v43 + 20) = v51 + 1;
  *(_QWORD *)(v52 + 32) = v43;
  v53 = *((_QWORD *)this + 3472);
  v54 = *((_QWORD *)this + 3470);
  v55 = *((_QWORD *)this + 3471);
  v86 = v5;
  v87 = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v53, v54, 154, v55, &v86, v47, v48, v49);
  *((_QWORD *)this + 3472) = v5;
  *((_QWORD *)this + 3473) = v32;
  v56 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v57 = *((_QWORD *)this + 3471);
  v58 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v58 = off_1E357F5F0;
  *(_DWORD *)(v58 + 8) = -1;
  *(_WORD *)(v58 + 12) = 153;
  *(_DWORD *)(v58 + 16) = 2;
  *(_BYTE *)(v58 + 20) = 0;
  *(_QWORD *)(v58 + 24) = v57;
  *(_QWORD *)(v58 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v56, (JSC::B3::Value *)v58);
  v86 = v58;
  v59 = (char **)(v5 + 8);
  v60 = *(unsigned int *)(v5 + 20);
  if ((_DWORD)v60 == *(_DWORD *)(v5 + 16))
  {
    v85 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v59, v60 + 1, (unint64_t)&v86);
    v60 = *(unsigned int *)(v5 + 20);
    *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8 * v60) = *(_QWORD *)v85;
    v61 = v86;
  }
  else
  {
    *(_QWORD *)&(*v59)[8 * v60] = v58;
    v61 = v58;
  }
  *(_DWORD *)(v5 + 20) = v60 + 1;
  *(_QWORD *)(v61 + 32) = v5;
  if ((*(_WORD *)(v16 + 12) & 0xFFF) == 0x98)
    v62 = v16;
  else
    v62 = 0;
  *(_QWORD *)(v62 + 40) = v58;
  if ((*(_WORD *)(v46 + 12) & 0xFFF) == 0x98)
    v63 = v46;
  else
    v63 = 0;
  *(_QWORD *)(v63 + 40) = v58;
  return v58;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileArrayify(void)::{lambda(JSC::B3::Value *)#1}::operator()(_QWORD *a1, JSC::B3::Value *a2)
{
  JSC::B3::Value *v2;
  uint64_t v4;
  JSC::FTL::Output *v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  char **v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  char *v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  JSC::B3::Value *v21;

  v2 = a2;
  v4 = a1[3528];
  v5 = (JSC::FTL::Output *)(a1 + 3455);
  if (*(_WORD *)(v4 + 18) == 145)
  {
    return JSC::FTL::Output::logicalNot(v5, v19);
  }
  else
  {
    v6 = a1[383];
    if (v6)
    {
      v7 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v6);
      v2 = (JSC::B3::Value *)JSC::FTL::Output::add(v5, v2, v7);
    }
    v8 = JSC::FTL::Output::load((uint64_t)v5, (const JSC::FTL::AbstractHeap *)(a1 + 380), (uint64_t)v2, 1);
    v9 = JSC::FTL::Output::constInt32(v5, *(_QWORD *)(a1[3528] + 72) >> 4);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 312))(v8, v9);
    if (v10 == 2)
    {
      v11 = a1[3472];
      v12 = (JSC::B3::Value *)a1[3470];
      v13 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, a1[3471], v8, v9);
      JSC::B3::Procedure::addValueImpl(v12, v13);
      v21 = v13;
      v14 = (char **)(v11 + 8);
      v15 = *(unsigned int *)(v11 + 20);
      if ((_DWORD)v15 == *(_DWORD *)(v11 + 16))
      {
        v18 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v15 + 1, (unint64_t)&v21);
        v15 = *(unsigned int *)(v11 + 20);
        *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8 * v15) = *(_QWORD *)v18;
        v16 = v21;
      }
      else
      {
        *(_QWORD *)&(*v14)[8 * v15] = v13;
        v16 = v13;
      }
      *(_DWORD *)(v11 + 20) = v15 + 1;
      *((_QWORD *)v16 + 4) = v11;
    }
    else
    {
      v20 = 3456;
      if (v10 == 1)
        v20 = 3455;
      return (JSC::B3::Value *)a1[v20];
    }
    return v13;
  }
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isArrayTypeForArrayify(uint64_t a1, JSC::B3::Value *a2, unint64_t a3)
{
  JSC::B3::Value *v3;
  unint64_t v5;
  int v6;
  unsigned __int8 v7;
  JSC::FTL::Output *v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  int v14;
  JSC::B3::Value *v15;
  JSC::FTL::Output *v17;
  int v18;
  JSC::B3::Value *v19;
  JSC::B3::Value *v20;
  JSC::B3::BasicBlock *v21;
  uint64_t v22;
  JSC::B3::BasicBlock *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  JSC::B3::Value *v28;
  JSC::B3::Value *v29;
  JSC::B3::Value *v30;
  JSC::B3::Value *v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::B3::Value *v44;
  JSC::B3::Value *v45;
  JSC::B3::Value *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  JSC::B3::Value *v60;
  JSC::B3::Value *v61;

  v3 = a2;
  v5 = a3 >> 8;
  if (a3 - 6 < 5)
  {
    if ((a3 & 0x10000000) != 0)
      v6 = 31;
    else
      v6 = 15;
    if ((a3 - 6) >= 5u)
      v7 = 0;
    else
      v7 = 2 * (a3 - 6) + 2;
    v8 = (JSC::FTL::Output *)(a1 + 27640);
    v9 = *(_QWORD *)(a1 + 3016);
    if (v9)
    {
      v10 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v9);
      v3 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v3, v10);
    }
    v11 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)(a1 + 27640), a1 + 2992, (uint64_t)v3);
    if (v5 == 2)
    {
      v12 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), v6);
      v13 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v11, v12);
      v14 = v7 | 1;
LABEL_12:
      v15 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v8, v14);
      return JSC::FTL::Output::equal(v8, v13, v15);
    }
    if (v5 < 2u)
    {
      v17 = (JSC::FTL::Output *)(a1 + 27640);
      v18 = v6;
LABEL_15:
      v19 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v17, v18);
      v13 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v11, v19);
      v14 = v7;
      goto LABEL_12;
    }
    if (v5 == 6)
    {
      v18 = v6 & 0x1E;
      v17 = (JSC::FTL::Output *)(a1 + 27640);
      goto LABEL_15;
    }
    if (v5 - 3 <= 2)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x557A, "LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::isArrayTypeForArrayify(LValue, ArrayMode)", "Unexpected original array");
      __break(0xC471u);
      JUMPOUT(0x197D7CF30);
    }
LABEL_25:
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x55C5, "LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::isArrayTypeForArrayify(LValue, ArrayMode)", "Corrupt array class");
    __break(0xC471u);
    JUMPOUT(0x197D7D13CLL);
  }
  if (a3 != 11)
    goto LABEL_25;
  v20 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((JSC::FTL::Output *)(a1 + 27640), a2, (const JSC::FTL::AbstractHeap *)(a1 + 2992));
  v21 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v22 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v23 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
  v24 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), *(JSC::B3::Value **)(a1 + 27648));
  v26 = v25;
  v27 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 14);
  v28 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v20, v27);
  v29 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 10);
  v30 = JSC::FTL::Output::sub((JSC::FTL::Output *)(a1 + 27640), v28, v29);
  v31 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 2);
  v32 = JSC::FTL::Output::belowOrEqual((JSC::FTL::Output *)(a1 + 27640), v30, v31);
  JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v32, v22, (uint64_t)v23, NAN, NAN, v33, v34, v35, v36);
  *(_QWORD *)(a1 + 27776) = v22;
  v43 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v21;
  switch((char)v5)
  {
    case 0:
    case 1:
      v44 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 1);
      v45 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v20, v44);
      v46 = JSC::FTL::Output::logicalNot((JSC::FTL::Output *)(a1 + 27640), v45);
      goto LABEL_23;
    case 2:
      v60 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 1);
      v61 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v20, v60);
      v46 = JSC::FTL::Output::notZero32((JSC::FTL::Output *)(a1 + 27640), v61);
LABEL_23:
      JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v46, (uint64_t)v21, (uint64_t)v23, NAN, NAN, v47, v48, v49, v50);
      break;
    case 3:
    case 4:
    case 5:
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x55A5, "LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::isArrayTypeForArrayify(LValue, ArrayMode)", "Unexpected original array");
      __break(0xC471u);
      JUMPOUT(0x197D7D1C0);
    case 6:
      JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v21, v37, v38, v39, v40, v41, v42);
      break;
    default:
      break;
  }
  *(_QWORD *)(a1 + 27776) = v21;
  *(_QWORD *)(a1 + 27784) = v23;
  v51 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), *(JSC::B3::Value **)(a1 + 27640));
  v53 = v52;
  JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v23, v54, v55, v56, v57, v58, v59);
  *(_QWORD *)(a1 + 27776) = v23;
  *(_QWORD *)(a1 + 27784) = v43;
  return (JSC::B3::Value *)JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)(a1 + 27640), 1, v24, v26, v51, v53);
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::getById(_QWORD *a1, JSC::FTL::PatchpointExceptionHandle *a2, char a3)
{
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  JSC::FTL::PatchpointExceptionHandle *v81[2];
  char v82;

  v6 = a1[3528];
  v7 = *(unsigned __int16 *)(v6 + 18);
  if ((v7 - 109) >= 0xD)
  {
    if ((v7 - 255) < 2)
    {
      v8 = (uint64_t *)(*(_QWORD *)(v6 + 72) + 8);
      goto LABEL_3;
    }
    if ((v7 - 335) >= 2)
    {
      v44 = v7 - 106;
      v45 = v44 > 0x25;
      v46 = (1 << v44) & 0x2001000001;
      if (v45 || v46 == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197D7D430);
      }
    }
  }
  v8 = (uint64_t *)(v6 + 72);
LABEL_3:
  v9 = *v8;
  v10 = (__int128 *)JSC::FTL::Output::patchpoint(a1 + 3455, 2);
  v81[0] = a2;
  v81[1] = 0;
  v82 = 3;
  JSC::B3::StackmapValue::append(v10, (uint64_t)a2, (unint64_t)&v81[1]);
  v11 = a1[3488];
  *(_OWORD *)v81 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v10, v11, (unint64_t)v81);
  v12 = a1[3487];
  *(_OWORD *)v81 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v10, v12, (unint64_t)v81);
  *((_BYTE *)v10 + 168) = 2 * HIBYTE(qword_1ECF4C780);
  *((_QWORD *)v10 + 8) |= 0x30000uLL;
  *((_QWORD *)v10 + 10) |= 0x30000uLL;
  v18 = a1[1];
  v19 = *(_QWORD *)v6;
  if ((*(_QWORD *)v6 & 1) == 0)
    goto LABEL_4;
  v48 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
  if ((v19 & 2) != 0
    || ((v49 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v49 != 0x3FFFFFFF)
      ? (v50 = (_DWORD)v49 == -1)
      : (v50 = 1),
        v50))
  {
    v51 = 2;
  }
  else if (v49 >> 28)
  {
    v76 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v76 = v48;
    *(_DWORD *)(v76 + 8) = v49;
    v51 = 1;
    v48 = v76;
  }
  else
  {
    v51 = v48;
    v48 = v49 << 36;
  }
  v19 = v48 | v51;
  if (((v48 | v51) & 1) != 0)
  {
    v52 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v53 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v53 != 0x3FFFFFFF)
        ? (v54 = (_DWORD)v53 == -1)
        : (v54 = 1),
          v54))
    {
      v55 = 2;
    }
    else if (v53 >> 28)
    {
      v77 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v77 = v52;
      *(_DWORD *)(v77 + 8) = v53;
      v55 = 1;
      v52 = v77;
    }
    else
    {
      v55 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      v52 = v53 << 36;
    }
    v20 = 0;
    v21 = v52 | v55;
  }
  else
  {
LABEL_4:
    v20 = 1;
    v21 = v19;
  }
  v22 = (unsigned int *)v81[0];
  if (v81[0])
  {
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  v24 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v24 + 8) = 1;
  *(_QWORD *)v24 = &off_1E3575B78;
  *(_QWORD *)(v24 + 16) = v18;
  v32 = v21;
  if ((v21 & 1) != 0)
  {
    v56 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
    if ((v21 & 2) != 0
      || ((v57 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v57 != 0x3FFFFFFF)
        ? (v58 = (_DWORD)v57 == -1)
        : (v58 = 1),
          v58))
    {
      v59 = 2;
    }
    else if (v57 >> 28)
    {
      v80 = v24;
      v78 = *(_DWORD *)((v21 & 0xFFFFFFFF8) + 8);
      v79 = WTF::fastMalloc((WTF *)0x10);
      v24 = v80;
      *(_QWORD *)v79 = v56;
      *(_DWORD *)(v79 + 8) = v78;
      v59 = 1;
      v56 = v79;
    }
    else
    {
      v59 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
      v56 = v57 << 36;
    }
    v32 = v56 | v59;
  }
  *(_QWORD *)(v24 + 24) = v32;
  if (v22)
  {
    do
      v33 = __ldaxr(v22);
    while (__stlxr(v33 + 1, v22));
  }
  *(_QWORD *)(v24 + 32) = v22;
  *(_QWORD *)(v24 + 40) = v9;
  *(_BYTE *)(v24 + 48) = a3;
  v34 = (unsigned int *)*((_QWORD *)v10 + 7);
  *((_QWORD *)v10 + 7) = v24;
  if (v34)
  {
    v35 = v34 + 2;
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v34 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
    }
  }
  if (v22)
  {
    do
    {
      v38 = __ldaxr(v22);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v22));
    if (!v39)
    {
      atomic_store(1u, v22);
      JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v22, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
  }
  if ((v21 & 1) != 0 && (v21 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v21 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
  if ((v20 & 1) == 0 && (v19 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v19 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
  v40 = (unsigned int *)v81[0];
  v81[0] = 0;
  if (v40)
  {
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      atomic_store(1u, v40);
      JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v40, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
  }
  return v10;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getById(JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getById(JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getById(JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  JSC::JITByIdGenerator *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  uint64_t v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  WTF *v70;
  void *v71;
  WTF *v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  WTF *v103;
  unsigned int v104;
  unsigned int v105;
  _BYTE *v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  const void *v112;
  void *v113;
  _BYTE *v114;
  unsigned int v115;
  uint64_t v116;
  void *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  char v146;
  char v147;
  uint64_t v148[2];
  char v149;
  uint64_t v150;
  uint64_t v151;
  _OWORD *v152;
  int v153;
  int v154;
  void *v155;
  int v156;
  int v157;
  void *v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int *v163;
  int v164;
  WTF *v165;
  uint64_t v166;
  JSC::FTL::ExceptionTarget *v167[16];

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [8]>(a2);
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v7 & 1) != 0)
  {
    v119 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v120 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v120 != 0x3FFFFFFF)
        ? (v121 = (_DWORD)v120 == -1)
        : (v121 = 1),
          v121))
    {
      v122 = 2;
    }
    else if (v120 >> 28)
    {
      v141 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v141 = v119;
      *(_DWORD *)(v141 + 8) = v120;
      v122 = 1;
      v119 = v141;
    }
    else
    {
      v122 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v119 = v120 << 36;
    }
    v7 = v119 | v122;
  }
  v166 = v7;
  v16 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v8, &v166);
  if ((v166 & 1) != 0 && (v166 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v166 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v167);
  v17 = (unsigned int *)v167[0];
  JSC::FTL::ExceptionTarget::jumps(v167[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v165);
  v167[0] = 0;
  if (v17)
  {
    do
    {
      v25 = __ldaxr(v17);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v17));
    if (!v26)
    {
      atomic_store(1u, v17);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v17, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
    }
  }
  v27 = v16;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 32), a3, v16, v20, v21, v22, v23, v24);
  if (HIBYTE(qword_1ECF4C780))
  {
    v118 = *(_DWORD *)(a3 + 36);
    if (v118 == 1)
    {
LABEL_122:
      __break(0xC471u);
      JUMPOUT(0x197D7DE94);
    }
    if (!v118)
      goto LABEL_123;
    v28 = **(_BYTE **)(a3 + 24);
  }
  else
  {
    v28 = -1;
  }
  v147 = v28;
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v30 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v30 = 2;
  *(_DWORD *)(v30 + 96) = 0;
  *(_OWORD *)(v30 + 12) = 0u;
  *(_OWORD *)(v30 + 28) = 0u;
  *(_DWORD *)(v30 + 44) = 0;
  *(_QWORD *)(v30 + 64) = 0;
  *(_QWORD *)(v30 + 72) = 0;
  *(_QWORD *)(v30 + 56) = 0;
  *(_QWORD *)(v30 + 104) = 0;
  *(_QWORD *)(v30 + 112) = -1;
  *(_WORD *)(v30 + 120) = -1;
  *(_DWORD *)(v30 + 122) = 0x10000;
  *(_BYTE *)(v30 + 126) = 0;
  *(_BYTE *)(v30 + 127) = BYTE12(xmmword_1ECF4C260);
  *(_BYTE *)(v30 + 128) = 0;
  *(_WORD *)(v30 + 129) &= 0xFC00u;
  *(_QWORD *)(v30 + 136) = 0;
  *(_QWORD *)(v30 + 136) = *(_QWORD *)(v29 + 168);
  *(_QWORD *)(v29 + 168) = v30;
  *(_WORD *)(v30 + 129) = *(_WORD *)(v30 + 129) & 0xFDFF | (HIBYTE(qword_1ECF4C780) << 9);
  v31 = *(_QWORD *)(a2 + 336);
  v32 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v33 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v34 = *(unsigned int *)(a3 + 36);
  if ((_DWORD)v34)
  {
    v106 = *(_BYTE **)(a3 + 24);
    do
    {
      v107 = *v106 & 0x7F;
      if (v107 >= 0x40)
        goto LABEL_121;
      v108 = 1 << v107;
      v33 &= ~v108;
      v32 &= ~v108;
      ++v106;
    }
    while (--v34);
  }
  v35 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v35)
  {
    v114 = *(_BYTE **)(a3 + 40);
    do
    {
      v115 = (*v114 + 32) & 0x7F;
      if (v115 >= 0x40)
        goto LABEL_121;
      v116 = 1 << v115;
      v33 &= ~v116;
      v32 &= ~v116;
      ++v114;
    }
    while (--v35);
  }
  v146 = v6;
  v167[0] = (JSC::FTL::ExceptionTarget *)v33;
  v167[1] = (JSC::FTL::ExceptionTarget *)v32;
  if (*(_DWORD *)(a3 + 20) <= 1u)
  {
LABEL_123:
    __break(0xC471u);
    JUMPOUT(0x197D7DE7CLL);
  }
  v36 = (_DWORD *)a2;
  v37 = v27;
  v38 = *(_BYTE **)(a3 + 8);
  v39 = v38[16] & 0x7F;
  v40 = *v38 & 0x7F;
  v41 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)v41 = 1;
  v42 = (JSC::JITByIdGenerator *)(v41 + 8);
  v43 = *(_QWORD *)(a1 + 24);
  if ((v43 & 1) != 0)
  {
    v123 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
    if ((v43 & 2) != 0
      || ((v124 = *(unsigned int *)((v43 & 0xFFFFFFFF8) + 8), (_DWORD)v124 != 0x3FFFFFFF)
        ? (v125 = (_DWORD)v124 == -1)
        : (v125 = 1),
          v125))
    {
      v126 = 2;
    }
    else if (v124 >> 28)
    {
      v144 = *(_DWORD *)((v43 & 0xFFFFFFFF8) + 8);
      v145 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
      v123 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v123 = v145;
      *(_DWORD *)(v123 + 8) = v144;
      v126 = 1;
    }
    else
    {
      v126 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
      v123 = v124 << 36;
    }
    v43 = v123 | v126;
  }
  v148[0] = v43;
  BYTE1(v143) = *(_BYTE *)(a1 + 48);
  LOBYTE(v143) = v147;
  JSC::JITGetByIdGenerator::JITGetByIdGenerator((uint64_t)v42, v31, v30, 0, 0, v148, v37, (uint64_t)v167, *(_QWORD *)(a1 + 40), v39, v40, v143);
  if ((v148[0] & 1) != 0 && (v148[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v148[0] & 0xFFFFFFFF8, v44, v45, v46, v47, v48, v49, v50);
  if (*(_BYTE *)(v41 + 64))
    v51 = 44;
  else
    v51 = 40;
  v52 = v36;
  JSC::JITByIdGenerator::generateFastCommon(v42, (JSC::CCallHelpers *)v36, v51, v46, v47, v48, v49, v50);
  v60 = v36[50];
  if (v60 < v36[13])
  {
    v61 = v146;
    do
    {
      if ((v60 + 4) > v36[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v36 + 14), v53, v54, v55, v56, v57, v58, v59);
        v60 = v36[50];
      }
      *(_DWORD *)(*((_QWORD *)v36 + 7) + v60) = -721215457;
      v60 = v36[50] + 4;
      v36[50] = v60;
    }
    while (v60 < v36[13]);
  }
  else
  {
    v61 = v146;
  }
  v36[52] = 0;
  LOBYTE(v148[0]) = *(_BYTE *)(a1 + 48);
  do
    v62 = __ldaxr((unsigned int *)v41);
  while (__stlxr(v62 + 1, (unsigned int *)v41));
  v148[1] = v41;
  v149 = v147;
  v63 = *(_QWORD *)a3;
  v150 = *(_QWORD *)(a1 + 16);
  v151 = v63;
  v64 = *(unsigned int *)(a3 + 20);
  v152 = 0;
  v153 = 0;
  v154 = v64;
  if ((_DWORD)v64)
  {
    if (v64 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197D7DE84);
    }
    v65 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v64));
    v153 = v64;
    v152 = v65;
    v66 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v66)
    {
      v67 = *(__int128 **)(a3 + 8);
      v68 = 16 * v66;
      do
      {
        v69 = *v67++;
        *v65++ = v69;
        v68 -= 16;
      }
      while (v68);
    }
  }
  v70 = (WTF *)*(unsigned int *)(a3 + 36);
  v155 = 0;
  v156 = 0;
  v157 = (int)v70;
  if ((_DWORD)v70)
  {
    v71 = (void *)WTF::fastMalloc(v70);
    v156 = (int)v70;
    v155 = v71;
    memcpy(v71, *(const void **)(a3 + 24), *(unsigned int *)(a3 + 36));
  }
  v72 = (WTF *)*(unsigned int *)(a3 + 52);
  v158 = 0;
  v159 = 0;
  v160 = (int)v72;
  if ((_DWORD)v72)
  {
    v117 = (void *)WTF::fastMalloc(v72);
    v159 = (int)v72;
    v158 = v117;
    memcpy(v117, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 52));
  }
  v161 = *(_QWORD *)(a3 + 56);
  v73 = *(_QWORD *)(a1 + 24);
  if ((v73 & 1) != 0)
  {
    v127 = *(_QWORD *)(v73 & 0xFFFFFFFF8);
    if ((v73 & 2) != 0
      || ((v128 = *(unsigned int *)((v73 & 0xFFFFFFFF8) + 8), (_DWORD)v128 != 0x3FFFFFFF)
        ? (v129 = (_DWORD)v128 == -1)
        : (v129 = 1),
          v129))
    {
      v130 = 2;
    }
    else if (v128 >> 28)
    {
      v142 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v142 = v127;
      *(_DWORD *)(v142 + 8) = v128;
      v130 = 1;
      v127 = v142;
    }
    else
    {
      v130 = *(_QWORD *)(v73 & 0xFFFFFFFF8);
      v127 = v128 << 36;
    }
    v73 = v127 | v130;
  }
  v162 = v73;
  v74 = (unsigned int *)v165;
  if (v165)
  {
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 + 1, v74));
  }
  v163 = v74;
  v164 = v60;
  v76 = *(_QWORD *)(a3 + 56);
  v77 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v77 + 8) = 1;
  *(_QWORD *)v77 = off_1E3575BA0;
  v85 = *(unsigned int *)(v76 + 12);
  if ((_DWORD)v85 != *(_DWORD *)(v76 + 8))
  {
    v86 = (uint64_t *)(*(_QWORD *)v76 + 8 * v85);
    goto LABEL_39;
  }
  v109 = v85 + (v85 >> 2);
  if (v109 >= 0x10)
    v110 = v109 + 1;
  else
    v110 = 16;
  if (v110 <= v85 + 1)
    v111 = v85 + 1;
  else
    v111 = v110;
  if (v111 >> 29)
  {
    __break(0xC471u);
LABEL_121:
    __break(1u);
    goto LABEL_122;
  }
  v112 = *(const void **)v76;
  v113 = (void *)WTF::fastMalloc((WTF *)(8 * v111));
  *(_DWORD *)(v76 + 8) = v111;
  *(_QWORD *)v76 = v113;
  memcpy(v113, v112, 8 * v85);
  if (v112)
  {
    if (*(const void **)v76 == v112)
    {
      *(_QWORD *)v76 = 0;
      *(_DWORD *)(v76 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v112, v78, v79, v80, v81, v82, v83, v84);
  }
  v85 = *(unsigned int *)(v76 + 12);
  v86 = (uint64_t *)(*(_QWORD *)v76 + 8 * v85);
LABEL_39:
  *v86 = v77;
  *(_DWORD *)(v76 + 12) = v85 + 1;
  do
  {
    v101 = __ldaxr((unsigned int *)v41);
    v102 = v101 - 1;
  }
  while (__stlxr(v102, (unsigned int *)v41));
  if (!v102)
  {
    atomic_store(1u, (unsigned int *)v41);
    WTF::fastFree(v41, v94, v95, v96, v97, v98, v99, v100);
  }
  v103 = v165;
  v165 = 0;
  if (v103)
  {
    do
    {
      v104 = __ldaxr((unsigned int *)v103);
      v105 = v104 - 1;
    }
    while (__stlxr(v105, (unsigned int *)v103));
    if (!v105)
    {
      atomic_store(1u, (unsigned int *)v103);
      v139 = *((_QWORD *)v103 + 1);
      if ((WTF *)((char *)v103 + 24) != (WTF *)v139 && v139 != 0)
      {
        *((_QWORD *)v103 + 1) = 0;
        *((_DWORD *)v103 + 4) = 0;
        WTF::fastFree(v139, v94, v95, v96, v97, v98, v99, v100);
      }
      WTF::fastFree((unint64_t)v103, v94, v95, v96, v97, v98, v99, v100);
    }
  }
  *((_BYTE *)v52 + 212) = v61;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [8]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "GetById");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::getById(JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::~(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v20;

  v9 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v20 = *(_QWORD *)(v9 + 8);
      if (v9 + 24 != v20 && v20 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 96);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 56);
  if (v14)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 40);
  if (v15)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::getById(JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v3 = result;
  *(_BYTE *)result = *(_BYTE *)a2;
  v4 = *(unsigned int **)(a2 + 8);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 8) = v4;
  *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(unsigned int *)(a2 + 52);
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = v6;
  *(_DWORD *)(result + 52) = v7;
  if ((_DWORD)v7)
  {
    if (v7 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v8 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v7));
    *(_DWORD *)(v3 + 48) = v7;
    *(_QWORD *)(v3 + 40) = v8;
    v9 = *(unsigned int *)(a2 + 52);
    if ((_DWORD)v9)
    {
      v10 = *(__int128 **)(a2 + 40);
      v11 = 16 * v9;
      do
      {
        v12 = *v10++;
        *v8++ = v12;
        v11 -= 16;
      }
      while (v11);
    }
  }
  v13 = (WTF *)*(unsigned int *)(a2 + 68);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 68) = (_DWORD)v13;
  if ((_DWORD)v13)
  {
    v14 = (void *)WTF::fastMalloc(v13);
    *(_DWORD *)(v3 + 64) = (_DWORD)v13;
    *(_QWORD *)(v3 + 56) = v14;
    memcpy(v14, *(const void **)(a2 + 56), *(unsigned int *)(a2 + 68));
  }
  v15 = (WTF *)*(unsigned int *)(a2 + 84);
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 84) = (_DWORD)v15;
  if ((_DWORD)v15)
  {
    v19 = (void *)WTF::fastMalloc(v15);
    *(_DWORD *)(v3 + 80) = (_DWORD)v15;
    *(_QWORD *)(v3 + 72) = v19;
    memcpy(v19, *(const void **)(a2 + 72), *(unsigned int *)(a2 + 84));
  }
  v16 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(v3 + 88) = *(_QWORD *)(a2 + 88);
  if ((v16 & 1) != 0)
  {
    v20 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v21 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v21 != 0x3FFFFFFF)
        ? (v22 = (_DWORD)v21 == -1)
        : (v22 = 1),
          v22))
    {
      v23 = 2;
    }
    else if (v21 >> 28)
    {
      v24 = v21;
      v25 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v25 = v20;
      *(_DWORD *)(v25 + 8) = v24;
      v23 = 1;
      v20 = v25;
    }
    else
    {
      v23 = v20;
      v20 = v21 << 36;
    }
    v16 = v20 | v23;
  }
  *(_QWORD *)(v3 + 96) = v16;
  v17 = *(unsigned int **)(a2 + 104);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *(_QWORD *)(v3 + 104) = v17;
  *(_DWORD *)(v3 + 112) = *(_DWORD *)(a2 + 112);
  return v3;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::getById(JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::getById(JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::getById(JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::getById(JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::getById(JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::getById(JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  int v11;
  void *v12;
  uint64_t v13;
  int i;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  char v25;
  JSC::ARM64LogicalImmediate *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int j;
  unsigned int v51;
  char v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t *v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  const void *v72;
  void *v73;
  _BYTE *v74;
  unsigned int v75;
  uint64_t v76;
  _BYTE *v77;
  unsigned int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  JSC::AssemblerBuffer *v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  char v107;
  uint64_t v108;
  _QWORD v109[2];
  _BYTE v110[24];

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v11 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    switch(v11)
    {
      case 3:
        v12 = operationTryGetByIdOptimize;
        break;
      case 2:
        v12 = operationGetByIdDirectOptimize;
        break;
      case 28:
        v12 = operationGetPrivateNameByIdOptimize;
        break;
      default:
        v12 = 0;
        break;
    }
  }
  else
  {
    v12 = operationGetByIdOptimize;
  }
  if (!HIBYTE(qword_1ECF4C780))
  {
    v13 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)v110 = *(_DWORD *)(v13 + 52);
    *(_QWORD *)&v110[4] = *(_QWORD *)(v13 + 56);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v110, a2, a3, a4, a5, a6, a7, a8);
  }
  v102 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v102, a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  if (!HIBYTE(qword_1ECF4C780))
  {
    v16 = *(_QWORD **)(a1 + 40);
    v15 = *(_QWORD *)(a1 + 48);
    v17 = *(_QWORD *)(v15 + 104);
    v18 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(v15 + 96);
    v19 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v19)
    {
      v74 = *(_BYTE **)(a1 + 72);
      do
      {
        v75 = *v74 & 0x7F;
        if (v75 >= 0x40)
          goto LABEL_126;
        v76 = 1 << v75;
        v18 &= ~v76;
        v17 &= ~v76;
        ++v74;
      }
      while (--v19);
    }
    v20 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v20)
    {
      v77 = *(_BYTE **)(a1 + 88);
      do
      {
        v78 = (*v77 + 32) & 0x7F;
        if (v78 >= 0x40)
          goto LABEL_126;
        v79 = 1 << v78;
        v18 &= ~v79;
        v17 &= ~v79;
        ++v77;
      }
      while (--v20);
    }
    v105 = (uint64_t)v12;
    v21 = *(_QWORD *)(a1 + 112);
    if ((v21 & 1) != 0)
    {
      v84 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
      if ((v21 & 2) != 0
        || ((v85 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v85 != 0x3FFFFFFF)
          ? (v86 = (_DWORD)v85 == -1)
          : (v86 = 1),
            v86))
      {
        v87 = 2;
      }
      else if (v85 >> 28)
      {
        v97 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v97 = v84;
        *(_DWORD *)(v97 + 8) = v85;
        v87 = 1;
        v84 = v97;
      }
      else
      {
        v87 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
        v84 = v85 << 36;
      }
      v21 = v84 | v87;
    }
    v22 = *(_DWORD *)(a1 + 68);
    if (v22 == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197D7EA5CLL);
    }
    v106 = i;
    v107 = v10;
    if (!v22)
    {
      __break(0xC471u);
      JUMPOUT(0x197D7EA64);
    }
    v23 = *(_QWORD *)(a1 + 120);
    v24 = *(char **)(a1 + 56);
    v103 = *v24;
    v25 = v24[16];
    v26 = *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)(a1 + 24) + 16);
    v104 = *(_QWORD *)(*v16 + 16);
    v27 = v21;
    if ((v21 & 1) != 0)
    {
      v88 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
      if ((v21 & 2) != 0
        || ((v89 = *(unsigned int *)((v21 & 0xFFFFFFFF8) + 8), (_DWORD)v89 != 0x3FFFFFFF)
          ? (v90 = (_DWORD)v89 == -1)
          : (v90 = 1),
            v90))
      {
        v91 = 2;
      }
      else if (v89 >> 28)
      {
        v101 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
        v98 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v98 = v101;
        *(_DWORD *)(v98 + 8) = v89;
        v91 = 1;
        v88 = v98;
      }
      else
      {
        v91 = *(_QWORD *)(v21 & 0xFFFFFFFF8);
        v88 = v89 << 36;
      }
      v27 = v88 | v91;
    }
    if ((v27 & 2) != 0)
    {
      v33 = 0xFFFFFFFFLL;
    }
    else
    {
      v28 = *(_QWORD *)(v16[3] + 64);
      v29 = v27;
      if ((v27 & 1) != 0)
      {
        v92 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
        v93 = *(unsigned int *)((v27 & 0xFFFFFFFF8) + 8);
        if ((_DWORD)v93 == 0x3FFFFFFF || (_DWORD)v93 == -1)
        {
          v95 = 2;
        }
        else if (v93 >> 28)
        {
          v99 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
          v100 = v28;
          v96 = WTF::fastMalloc((WTF *)0x10);
          v28 = v100;
          *(_QWORD *)v96 = v99;
          *(_DWORD *)(v96 + 8) = v93;
          v95 = 1;
          v92 = v96;
        }
        else
        {
          v95 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
          v92 = v93 << 36;
        }
        v29 = v92 | v95;
      }
      *(_QWORD *)v110 = v29;
      v32 = JSC::DFG::CodeOriginPool::addCodeOrigin(v28, (uint64_t *)v110);
      if ((v110[0] & 1) != 0 && (*(_QWORD *)v110 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(*(_QWORD *)v110 & 0xFFFFFFFF8, v30, v31, a4, a5, a6, a7, a8);
      if (!v32)
      {
LABEL_24:
        JSC::FTL::callOperation<JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v110, v104, v17 | v18, (_DWORD *)a2, v23 + 8, v105, v103 & 0x7F, v25 & 0x7F, v26);
        if ((v27 & 1) != 0 && (v27 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v27 & 0xFFFFFFFF8, v42, v43, v44, v45, v46, v47, v48);
        v49 = *(_QWORD *)v110;
        i = v106;
        v10 = v107;
        if ((v21 & 1) != 0)
        {
          v83 = v21 & 0xFFFFFFFF8;
          if ((v21 & 0xFFFFFFFF8) != 0)
            goto LABEL_106;
        }
        goto LABEL_26;
      }
      v33 = v32;
    }
    if (*(_BYTE *)(a2 + 212))
    {
      JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v33, a2 + 264, a4, a5, a6, a7, a8);
      v41 = *(_DWORD *)(a2 + 200);
      if (v41 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v102, v34, v35, v36, v37, v38, v39, v40);
        v41 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v41) = -1207811152;
      *(_DWORD *)(a2 + 200) += 4;
      goto LABEL_24;
    }
    __break(0xC471u);
LABEL_129:
    JUMPOUT(0x197D7E940);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), *(char *)(a1 + 32), a4, a5, a6, a7, a8);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 48) = v12;
  v80 = *(unsigned __int8 **)(a1 + 40);
  v109[0] = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 48));
  v109[1] = v81;
  JSC::CodeOrigin::CodeOrigin(&v108, (const JSC::CodeOrigin *)(a1 + 112));
  v82 = *(_DWORD *)(a1 + 68);
  if (v82 == 1)
  {
LABEL_127:
    __break(0xC471u);
    JUMPOUT(0x197D7EA74);
  }
  if (!v82)
  {
    __break(0xC471u);
    goto LABEL_129;
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v110, v80, (uint64_t)v109, a2, v108, *(_QWORD *)(a1 + 120) + 8, *(unsigned __int8 *)(a1 + 32) | 0x3000000000, **(_BYTE **)(a1 + 56) & 0x7F, *(_BYTE *)(*(_QWORD *)(a1 + 56) + 16) & 0x7F, *(_BYTE *)(a1 + 32));
  v49 = *(_QWORD *)v110;
  if ((v108 & 1) != 0)
  {
    v83 = v108 & 0xFFFFFFFF8;
    if ((v108 & 0xFFFFFFFF8) != 0)
LABEL_106:
      WTF::fastFree(v83, v42, v43, v44, v45, v46, v47, v48);
  }
LABEL_26:
  for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v102, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v51 = j;
  if (j + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v102, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
    v51 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v51) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v52 = 69;
  else
    v52 = 65;
  *(_QWORD *)v110 = j;
  v110[8] = v52;
  *(_WORD *)&v110[9] = 15;
  v110[11] = -1;
  LODWORD(v109[0]) = *(_DWORD *)(a1 + 128);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v110, (unsigned int *)v109, a2, v44, v45, v46, v47, v48);
  v53 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v53 + 36) = i;
  *(_QWORD *)(v53 + 40) = v49;
  do
    v54 = __ldaxr((unsigned int *)v53);
  while (__stlxr(v54 + 1, (unsigned int *)v53));
  v55 = WTF::fastMalloc((WTF *)0x18);
  v63 = v55;
  *(_DWORD *)(v55 + 8) = 1;
  *(_QWORD *)v55 = &off_1E3575BC8;
  do
    v64 = __ldaxr((unsigned int *)v53);
  while (__stlxr(v64 + 1, (unsigned int *)v53));
  *(_QWORD *)(v55 + 16) = v53;
  v65 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v65 != *(_DWORD *)(a2 + 240))
  {
    v66 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v65);
    goto LABEL_38;
  }
  v69 = v65 + (v65 >> 2);
  if (v69 >= 0x10)
    v70 = v69 + 1;
  else
    v70 = 16;
  if (v70 <= v65 + 1)
    v71 = v65 + 1;
  else
    v71 = v70;
  if (v71 >> 29)
  {
    __break(0xC471u);
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
  v72 = *(const void **)(a2 + 232);
  v73 = (void *)WTF::fastMalloc((WTF *)(8 * v71));
  *(_DWORD *)(a2 + 240) = v71;
  *(_QWORD *)(a2 + 232) = v73;
  memcpy(v73, v72, 8 * v65);
  if (v72)
  {
    if (*(const void **)(a2 + 232) == v72)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v72, v56, v57, v58, v59, v60, v61, v62);
  }
  v65 = *(unsigned int *)(a2 + 244);
  v66 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v65);
LABEL_38:
  *v66 = v63;
  *(_DWORD *)(a2 + 244) = v65 + 1;
  do
  {
    v67 = __ldaxr((unsigned int *)v53);
    v68 = v67 - 1;
  }
  while (__stlxr(v68, (unsigned int *)v53));
  if (!v68)
  {
    atomic_store(1u, (unsigned int *)v53);
    WTF::fastFree(v53, v56, v57, v58, v59, v60, v61, v62);
  }
  *(_BYTE *)(a2 + 212) = v10;
}

void JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  JSC::AssemblerBuffer *v10;
  unsigned __int8 v11;
  char *v12;
  uint64_t v13;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint8x8_t v38;
  __int32 v39;
  uint8x8_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  char v51;
  char v52;
  uint64_t v53;
  unsigned __int8 *v54;
  char *v55;
  uint64_t v56;
  _BYTE *v57;
  int v58;
  unsigned __int8 *v59;
  char *v60;
  unsigned __int8 *v61;
  uint64_t v62;
  int v63;
  unsigned __int8 *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int8x8_t v80;
  int v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  int64_t v99;
  JSC::AssemblerBuffer *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  void *__dst;
  __int128 v106;
  uint64_t v107;
  uint64_t v108[8];

  v10 = (JSC::AssemblerBuffer *)a8;
  v11 = a7;
  v12 = (char *)a6;
  v13 = a5;
  v102 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if ((a5 & 1) == 0)
  {
    if ((a5 & 2) == 0)
      goto LABEL_3;
LABEL_106:
    v22 = 0xFFFFFFFFLL;
    goto LABEL_7;
  }
LABEL_82:
  v87 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v88 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v88 != 0x3FFFFFFF)
      ? (v89 = (_DWORD)v88 == -1)
      : (v89 = 1),
        v89))
  {
    v90 = 2;
  }
  else if (v88 >> 28)
  {
    v97 = a2;
    v98 = WTF::fastMalloc((WTF *)0x10);
    a2 = v97;
    *(_QWORD *)v98 = v87;
    *(_DWORD *)(v98 + 8) = v88;
    v90 = 1;
    v87 = v98;
  }
  else
  {
    v90 = v87;
    v87 = v88 << 36;
  }
  v13 = v87 | v90;
  if (((v87 | v90) & 2) != 0)
    goto LABEL_106;
LABEL_3:
  v17 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
  v18 = v13;
  if ((v13 & 1) != 0)
  {
    v91 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    v92 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v92 == 0x3FFFFFFF || (_DWORD)v92 == -1)
    {
      v94 = 2;
    }
    else if (v92 >> 28)
    {
      v95 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
      v96 = WTF::fastMalloc((WTF *)0x10);
      v17 = v95;
      *(_QWORD *)v96 = v91;
      *(_DWORD *)(v96 + 8) = v92;
      v94 = 1;
      v91 = v96;
    }
    else
    {
      v94 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      v91 = v92 << 36;
    }
    v18 = v91 | v94;
  }
  v108[0] = v18;
  v21 = JSC::DFG::CodeOriginPool::addCodeOrigin(v17, v108);
  if ((v108[0] & 1) != 0 && (v108[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v108[0] & 0xFFFFFFFF8, v19, v20, a4, a5, a6, a7, a8);
  if (v21)
  {
    v22 = v21;
LABEL_7:
    if (!*(_BYTE *)(a4 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197D7F088);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a4, (JSC::ARM64LogicalImmediate *)v22, a4 + 264, a4, a5, a6, a7, a8);
    v28 = *(_DWORD *)(a4 + 200);
    if (v28 + 4 > *(_DWORD *)(a4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), v23, v24, v25, v26, v27, a7, a8);
      v28 = *(_DWORD *)(a4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + v28) = -1207811152;
    *(_DWORD *)(a4 + 200) += 4;
  }
  v101 = (uint64_t)v12;
  v29 = *(_QWORD *)(a3 + 8) | *(_QWORD *)a3;
  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v108, v29, a4, 3u, (uint64_t)v10, 8, a7, a8);
  v31 = 0;
  v12 = (char *)&v106 + 8;
  __dst = (char *)&v106 + 8;
  *(_QWORD *)&v106 = 3;
  if (v11 != 8)
  {
    WORD4(v106) = v11 | 0x800;
    v31 = 1;
    DWORD1(v106) = 1;
  }
  if (a9)
  {
    *((_WORD *)&v106 + v31++ + 4) = a9;
    DWORD1(v106) = v31;
  }
  if (a10 == 1)
  {
    if (!v31)
      goto LABEL_73;
  }
  else
  {
    *((_WORD *)&v106 + v31++ + 4) = a10 | 0x100;
    DWORD1(v106) = v31;
  }
  v10 = (JSC::AssemblerBuffer *)(a4 + 56);
  v11 = 1;
  a3 = 2432696320;
  do
  {
    v32 = 0;
    v33 = 0;
    v34 = (char *)__dst;
    v35 = v31;
    do
    {
      if ((*((_BYTE *)__dst + v32 + 1) & 0x40) != 0)
      {
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      v33 |= 1 << *((_BYTE *)__dst + v32 + 1);
      v32 += 2;
    }
    while (2 * v31 != v32);
    v36 = 0;
    do
    {
      v37 = *((_BYTE *)__dst + v36) & 0x7F;
      if (v37 >= 0x40)
        goto LABEL_81;
      v33 &= ~(1 << v37);
      v36 += 2;
    }
    while (2 * v31 != v36);
    v38 = (uint8x8_t)vcnt_s8((int8x8_t)v33);
    v38.i16[0] = vaddlv_u8(v38);
    v39 = v38.i32[0];
    v40 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v33));
    v40.i16[0] = vaddlv_u8(v40);
    if (v40.i32[0] + v39)
    {
      v41 = 0;
      if (v31 <= 1)
        v42 = 1;
      else
        v42 = v31;
      v43 = 2 * v42;
      while (1)
      {
        v44 = *((unsigned __int8 *)__dst + v41 + 1);
        if ((v44 & 0x7Fu) >= 0x40)
          goto LABEL_81;
        if (((v33 >> (v44 & 0x7F)) & 1) != 0)
          break;
        v41 += 2;
        if (v43 == v41)
          goto LABEL_66;
      }
      v45 = *((unsigned __int8 *)__dst + v41);
      if (v45 != v44)
      {
        v46 = (char)v45;
        if ((char)v45 == 63)
        {
          v47 = *(_DWORD *)(a4 + 200);
          v48 = *(_DWORD *)(a4 + 192);
          if ((char)v44 == 31)
            goto LABEL_60;
          v50 = v44 & 0x1F | 0xD2800000;
        }
        else
        {
          v47 = *(_DWORD *)(a4 + 200);
          v48 = *(_DWORD *)(a4 + 192);
          v49 = v44 == 31 || v46 == 31;
          if (!v49)
          {
            v50 = v44 & 0xFFE0FFFF | ((v46 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_61;
          }
LABEL_60:
          v50 = (char)v44 | (32 * v46) | 0x91000000;
        }
LABEL_61:
        if (v47 + 4 > v48)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)a2, v30, a4, a5, a6, a7, a8);
          v47 = *(_DWORD *)(a4 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a4 + 56) + v47) = v50;
        *(_DWORD *)(a4 + 200) += 4;
        v34 = (char *)__dst;
        v35 = DWORD1(v106);
      }
      memmove(&v34[v41], &v34[v41 + 2], 2 * v35 - v41 - 2);
      v31 = DWORD1(v106) - 1;
      goto LABEL_65;
    }
    v100 = v10;
    v51 = *(_BYTE *)__dst;
    v52 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a4, *(char *)__dst, v52, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v106) - 2);
    v53 = (DWORD1(v106) - 1);
    v49 = DWORD1(v106) == 1;
    DWORD1(v106) = v53;
    v54 = (unsigned __int8 *)__dst;
    v55 = (char *)__dst + 2 * v53;
    if (v49)
    {
      v62 = 0;
      v63 = 0;
      v58 = 0;
      a2 = (unsigned __int8 *)__dst + 2 * v53;
    }
    else
    {
      v56 = 2 * v53;
      v57 = __dst;
      while (*v57 != v52)
      {
        v57 += 2;
        v56 -= 2;
        if (!v56)
          goto LABEL_46;
      }
      *v57 = v51;
LABEL_46:
      v58 = 0;
      v59 = v54;
      a2 = (unsigned __int8 *)v55;
      v60 = v55;
      do
      {
        if (*v54 == v54[1])
        {
          v61 = v54;
          if (v60 != (char *)__dst + 2 * DWORD1(v106))
          {
            if (v54 == a2)
            {
              v61 = (unsigned __int8 *)v60;
            }
            else
            {
              v99 = v59 - a2;
              memmove(v60, a2, v59 - a2);
              v61 = (unsigned __int8 *)&v60[v99];
            }
          }
          a2 = v54 + 2;
          ++v58;
          v60 = (char *)v61;
        }
        v54 += 2;
        v59 += 2;
      }
      while (v54 < (unsigned __int8 *)v55);
      v54 = (unsigned __int8 *)__dst;
      v62 = DWORD1(v106);
      v63 = DWORD1(v106);
      v55 = v60;
    }
    v64 = &v54[2 * v62];
    a3 = 2432696320;
    if (a2 != v64)
    {
      memmove(v55, a2, v64 - a2);
      v63 = DWORD1(v106);
    }
    v31 = v63 - v58;
    v10 = v100;
LABEL_65:
    DWORD1(v106) = v31;
LABEL_66:
    ;
  }
  while (v31);
  v65 = __dst;
  if ((char *)&v106 + 8 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v106) = 0;
    WTF::fastFree((unint64_t)v65, a2, v30, a4, a5, a6, a7, a8);
  }
LABEL_73:
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v108, v102, 0x3000000008uLL, a4, a5, a6, a7, a8, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v106;
  *(_QWORD *)(a1 + 24) = v107;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v108, v66, v67, v68, v69, v70, v71, v72);
  if (v101)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a4, v102, 0, 0, 0xFFFFFFFFLL, v77, v78, v79, (uint64_t)&v103, v80);
    v81 = v103;
    if (v103 != -1)
    {
      v82 = *(unsigned int *)(v101 + 12);
      if ((_DWORD)v82 == *(_DWORD *)(v101 + 8))
      {
        v83 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v101, (void *)(v82 + 1), (unint64_t)&v103, v75, v76, v77, v78, v79);
        v85 = *v83;
        v84 = (uint64_t *)(v83 + 1);
        v81 = v85;
        LODWORD(v82) = *(_DWORD *)(v101 + 12);
      }
      else
      {
        v84 = &v104;
      }
      v86 = *(_QWORD *)v101 + 12 * v82;
      *(_DWORD *)v86 = v81;
      *(_QWORD *)(v86 + 4) = *v84;
      ++*(_DWORD *)(v101 + 12);
    }
  }
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v73, v74, v75, v76, v77, v78, v79);
}

void JSC::FTL::callOperation<JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, JSC::ARM64LogicalImmediate *a9)
{
  int v9;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint8x8_t v31;
  __int32 v32;
  uint8x8_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  char v43;
  uint64_t v44;
  unsigned __int8 *v45;
  char *v46;
  uint64_t v47;
  int v48;
  char *v49;
  uint64_t v50;
  _BYTE *v51;
  unsigned __int8 *v52;
  char *v53;
  unsigned __int8 *v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int8x8_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  _DWORD *v79;
  uint64_t *v80;
  int v81;
  uint64_t v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  void *__dst;
  __int128 v88;
  uint64_t v89;
  _QWORD v90[8];

  v9 = a8;
  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  v15 = JSC::FTL::SlowPathCallContext::SlowPathCallContext(v90, a3, (uint64_t)a4, 3u, a7, 0xFFFFFFFFLL, a7, a8);
  v23 = (char *)&v88 + 8;
  __dst = (char *)&v88 + 8;
  LODWORD(v88) = 1;
  if (v9)
  {
    WORD4(v88) = v9;
    DWORD1(v88) = 1;
    v24 = 1;
    do
    {
      v25 = 0;
      v26 = 0;
      v27 = (char *)__dst;
      v28 = v24;
      do
      {
        if ((*((_BYTE *)__dst + v25 + 1) & 0x40) != 0)
        {
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
        v26 |= 1 << *((_BYTE *)__dst + v25 + 1);
        v25 += 2;
      }
      while (2 * v24 != v25);
      v29 = 0;
      do
      {
        v30 = *((_BYTE *)__dst + v29) & 0x7F;
        if (v30 >= 0x40)
          goto LABEL_61;
        v26 &= ~(1 << v30);
        v29 += 2;
      }
      while (2 * v24 != v29);
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v31.i16[0] = vaddlv_u8(v31);
      v32 = v31.i32[0];
      v33 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
      v33.i16[0] = vaddlv_u8(v33);
      if (v33.i32[0] + v32)
      {
        v34 = 0;
        if (v24 <= 1)
          v35 = 1;
        else
          v35 = v24;
        v36 = 2 * v35;
        while (1)
        {
          v37 = *((unsigned __int8 *)__dst + v34 + 1);
          if ((v37 & 0x7Fu) >= 0x40)
            goto LABEL_61;
          if (((v26 >> (v37 & 0x7F)) & 1) != 0)
            break;
          v34 += 2;
          if (v36 == v34)
            goto LABEL_33;
        }
        v38 = *((unsigned __int8 *)__dst + v34);
        if (v38 != v37)
        {
          if ((char)v38 == 63)
          {
            if (v37 == 31)
              goto LABEL_27;
            v40 = v37 & 0x1F | 0xD2800000;
          }
          else
          {
            v39 = (char)v37 == 31 || (char)v38 == 31;
            if (!v39)
            {
              v40 = v37 & 0xFFE0FFFF | ((v38 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v40 = (char)v37 | (32 * (char)v38) | 0x91000000;
          }
LABEL_28:
          v41 = a4[50];
          if (v41 + 4 > a4[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 14), (uint64_t)v16, v17, v18, v19, v20, v21, v22);
            v41 = a4[50];
          }
          *(_DWORD *)(*((_QWORD *)a4 + 7) + v41) = v40;
          a4[50] += 4;
          v27 = (char *)__dst;
          v28 = DWORD1(v88);
        }
        v15 = memmove(&v27[v34], &v27[v34 + 2], 2 * v28 - v34 - 2);
        v24 = DWORD1(v88) - 1;
        goto LABEL_32;
      }
      v83 = v23;
      v42 = *(_BYTE *)__dst;
      v43 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap((uint64_t)a4, *(char *)__dst, v43, v18, v19, v20, v21, v22);
      v15 = memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v88) - 2);
      v44 = (DWORD1(v88) - 1);
      v39 = DWORD1(v88) == 1;
      DWORD1(v88) = v44;
      v45 = (unsigned __int8 *)__dst;
      v46 = (char *)__dst + 2 * v44;
      if (v39)
      {
        v47 = 0;
        v48 = 0;
        v84 = 0;
        v16 = (char *)__dst + 2 * v44;
      }
      else
      {
        v50 = 2 * v44;
        v51 = __dst;
        while (*v51 != v43)
        {
          v51 += 2;
          v50 -= 2;
          if (!v50)
            goto LABEL_43;
        }
        *v51 = v42;
LABEL_43:
        v84 = 0;
        v52 = v45;
        v16 = v46;
        v53 = v46;
        do
        {
          if (*v45 == v45[1])
          {
            v54 = v45;
            if (v53 != (char *)__dst + 2 * DWORD1(v88))
            {
              if (v45 == (unsigned __int8 *)v16)
              {
                v54 = (unsigned __int8 *)v53;
              }
              else
              {
                v55 = v52 - (unsigned __int8 *)v16;
                v15 = memmove(v53, v16, v52 - (unsigned __int8 *)v16);
                v54 = (unsigned __int8 *)&v53[v55];
              }
            }
            v16 = (char *)(v45 + 2);
            ++v84;
            v53 = (char *)v54;
          }
          v45 += 2;
          v52 += 2;
        }
        while (v45 < (unsigned __int8 *)v46);
        v45 = (unsigned __int8 *)__dst;
        v47 = DWORD1(v88);
        v48 = DWORD1(v88);
        v46 = v53;
      }
      v49 = (char *)&v45[2 * v47];
      if (v16 != v49)
      {
        v15 = memmove(v46, v16, v49 - v16);
        v48 = DWORD1(v88);
      }
      v24 = v48 - v84;
      v23 = v83;
LABEL_32:
      DWORD1(v88) = v24;
LABEL_33:
      ;
    }
    while (v24);
    v15 = __dst;
    if (v23 == __dst)
      goto LABEL_54;
LABEL_62:
    if (v15)
    {
      __dst = 0;
      LODWORD(v88) = 0;
      WTF::fastFree((unint64_t)v15, v16, v17, v18, v19, v20, v21, v22);
    }
  }
LABEL_54:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a4, (uint64_t)a9, 1, v18, v19, v20, v21, v22);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v90, a2, a6, v56, v57, v58, v59, v60, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v88;
  *(_QWORD *)(a1 + 24) = v89;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v90, v61, v62, v63, v64, v65, v66, v67);
  if (a5)
  {
    JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)a4, a2, 0, 0, 0xFFFFFFFFLL, v68, v69, v70, (uint64_t)&v85, v71);
    v77 = v85;
    if (v85 != -1)
    {
      v78 = *(unsigned int *)(a5 + 12);
      if ((_DWORD)v78 == *(_DWORD *)(a5 + 8))
      {
        v79 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, (void *)(v78 + 1), (unint64_t)&v85, v72, v73, v74, v75, v76);
        v81 = *v79;
        v80 = (uint64_t *)(v79 + 1);
        v77 = v81;
        LODWORD(v78) = *(_DWORD *)(a5 + 12);
      }
      else
      {
        v80 = &v86;
      }
      v82 = *(_QWORD *)a5 + 12 * v78;
      *(_DWORD *)v82 = v77;
      *(_QWORD *)(v82 + 4) = *v80;
      ++*(_DWORD *)(a5 + 12);
    }
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getById(JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getById(JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getById(JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(v2 + 28);
  if (v3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
  v5 = (v3 - v4);
  v6 = a2[23];
  v7 = v5 + v6;
  if (v6 <= v5 + v6 && v6 + a2[1] >= v7)
    return JSC::JITInlineCacheGenerator::finalize(v2 + 8, a2, a2, v7);
  result = 366;
  __break(0xC471u);
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  _BYTE *v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int i;
  unsigned int v40;
  _QWORD *v41;
  int v42;
  WTF *v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  WTF *v52;
  void *v53;
  WTF *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  WTF *v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  const void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v112;
  int v113;
  uint64_t v114;
  _QWORD *v115;
  unsigned int v116;
  unsigned int v117;
  _QWORD v118[5];
  _OWORD *v119;
  int v120;
  int v121;
  void *v122;
  int v123;
  int v124;
  void *v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int *v130;
  char v131;
  uint64_t v132;
  unsigned __int8 v133;
  uint64_t v134;
  int v135;
  WTF *v136;
  int v137;
  unsigned int v138;
  uint64_t v139;
  WTF *v140;
  uint64_t v141;
  JSC::FTL::ExceptionTarget *v142[21];

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "GetByIdMegamorphic");
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v7 & 1) != 0)
  {
    v94 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v95 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v95 != 0x3FFFFFFF)
        ? (v96 = (_DWORD)v95 == -1)
        : (v96 = 1),
          v96))
    {
      v97 = 2;
    }
    else if (v95 >> 28)
    {
      v112 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v112 = v94;
      *(_DWORD *)(v112 + 8) = v95;
      v97 = 1;
      v94 = v112;
    }
    else
    {
      v97 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v94 = v95 << 36;
    }
    v7 = v94 | v97;
  }
  v141 = v7;
  v16 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v8, &v141);
  if ((v141 & 1) != 0 && (v141 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v141 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v142);
  v17 = (unsigned int *)v142[0];
  JSC::FTL::ExceptionTarget::jumps(v142[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v140);
  v142[0] = 0;
  if (v17)
  {
    do
    {
      v25 = __ldaxr(v17);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v17));
    if (!v26)
    {
      atomic_store(1u, v17);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v17, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
  }
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 32), a3, v16, v20, v21, v22, v23, v24);
  v27 = *(_DWORD *)(a3 + 20);
  if (!v27)
  {
    __break(0xC471u);
    goto LABEL_98;
  }
  if (v27 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7FDF0);
  }
  v28 = *(_DWORD *)(a3 + 36);
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7FDF8);
  }
  if (v28 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7FE00);
  }
  if (v28 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D7FE08);
  }
  v29 = *(_BYTE **)(a3 + 8);
  v30 = *v29 & 0x7F;
  v31 = v29[16] & 0x7F;
  JSC::AssemblyHelpers::loadMegamorphicProperty(a2, *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16), v31, 0xFFFFFFFFLL, *(WTF::StringImpl **)(a1 + 40), v30, **(char **)(a3 + 24), *(char *)(*(_QWORD *)(a3 + 24) + 1), (uint64_t)&v136, *(_BYTE *)(*(_QWORD *)(a3 + 24) + 2));
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v32, v33, v34, v35, v36, v37, v38);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v40 = v138;
  v41 = v118;
  v115 = v118;
  v116 = 2;
  v117 = v138;
  if (v138 >= 3)
  {
    if (v138 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197D7FE18);
    }
    v42 = 12 * v138;
    v41 = (_QWORD *)WTF::fastMalloc((WTF *)(12 * v138));
    v116 = (v42 & 0xFFFFFFFC) / 0xC;
    v115 = v41;
    v40 = v138;
  }
  if (v40)
  {
    v43 = v136;
    v44 = (WTF *)((char *)v136 + 12 * v40);
    do
    {
      *(_DWORD *)v41 = *(_DWORD *)v43;
      *(_QWORD *)((char *)v41 + 4) = *(_QWORD *)((char *)v43 + 4);
      v43 = (WTF *)((char *)v43 + 12);
      v41 = (_QWORD *)((char *)v41 + 12);
    }
    while (v43 != v44);
  }
  v45 = *(_QWORD *)a3;
  v118[3] = *(_QWORD *)(a1 + 16);
  v118[4] = v45;
  v46 = *(unsigned int *)(a3 + 20);
  v119 = 0;
  v120 = 0;
  v121 = v46;
  if ((_DWORD)v46)
  {
    if (v46 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197D7FE10);
    }
    v47 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v46));
    v120 = v46;
    v119 = v47;
    v48 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v48)
    {
      v49 = *(__int128 **)(a3 + 8);
      v50 = 16 * v48;
      do
      {
        v51 = *v49++;
        *v47++ = v51;
        v50 -= 16;
      }
      while (v50);
    }
  }
  v52 = (WTF *)*(unsigned int *)(a3 + 36);
  v122 = 0;
  v123 = 0;
  v124 = (int)v52;
  if ((_DWORD)v52)
  {
    v53 = (void *)WTF::fastMalloc(v52);
    v123 = (int)v52;
    v122 = v53;
    memcpy(v53, *(const void **)(a3 + 24), *(unsigned int *)(a3 + 36));
  }
  v54 = (WTF *)*(unsigned int *)(a3 + 52);
  v125 = 0;
  v126 = 0;
  v127 = (int)v54;
  if ((_DWORD)v54)
  {
    v93 = (void *)WTF::fastMalloc(v54);
    v126 = (int)v54;
    v125 = v93;
    memcpy(v93, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 52));
  }
  v128 = *(_QWORD *)(a3 + 56);
  v55 = *(_QWORD *)(a1 + 24);
  if ((v55 & 1) != 0)
  {
    v98 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
    if ((v55 & 2) != 0
      || ((v99 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v99 != 0x3FFFFFFF)
        ? (v100 = (_DWORD)v99 == -1)
        : (v100 = 1),
          v100))
    {
      v101 = 2;
    }
    else if (v99 >> 28)
    {
      v113 = v99;
      v114 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v114 = v98;
      *(_DWORD *)(v114 + 8) = v113;
      v101 = 1;
      v98 = v114;
    }
    else
    {
      v101 = v98;
      v98 = v99 << 36;
    }
    v55 = v98 | v101;
  }
  v129 = v55;
  v56 = (unsigned int *)v140;
  if (v140)
  {
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 + 1, v56));
  }
  v130 = v56;
  v131 = v30;
  v58 = *(_QWORD *)(a1 + 56);
  v132 = *(_QWORD *)(a1 + 48);
  v133 = v31;
  v134 = v58;
  v135 = i;
  v59 = *(_QWORD *)(a3 + 56);
  v60 = WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)(v60 + 8) = 1;
  *(_QWORD *)v60 = off_1E3575C18;
  v68 = *(unsigned int *)(v59 + 12);
  if ((_DWORD)v68 != *(_DWORD *)(v59 + 8))
  {
    v69 = (uint64_t *)(*(_QWORD *)v59 + 8 * v68);
    goto LABEL_37;
  }
  v88 = v68 + (v68 >> 2);
  if (v88 >= 0x10)
    v89 = v88 + 1;
  else
    v89 = 16;
  if (v89 <= v68 + 1)
    v90 = v68 + 1;
  else
    v90 = v89;
  if (v90 >> 29)
  {
    __break(0xC471u);
LABEL_98:
    JUMPOUT(0x197D7FDE8);
  }
  v91 = *(const void **)v59;
  v92 = (void *)WTF::fastMalloc((WTF *)(8 * v90));
  *(_DWORD *)(v59 + 8) = v90;
  *(_QWORD *)v59 = v92;
  memcpy(v92, v91, 8 * v68);
  if (v91)
  {
    if (*(const void **)v59 == v91)
    {
      *(_QWORD *)v59 = 0;
      *(_DWORD *)(v59 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v91, v61, v62, v63, v64, v65, v66, v67);
  }
  v68 = *(unsigned int *)(v59 + 12);
  v69 = (uint64_t *)(*(_QWORD *)v59 + 8 * v68);
LABEL_37:
  *v69 = v60;
  *(_DWORD *)(v59 + 12) = v68 + 1;
  v84 = v136;
  if (&v139 != (uint64_t *)v136 && v136)
  {
    v136 = 0;
    v137 = 0;
    WTF::fastFree((unint64_t)v84, v77, v78, v79, v80, v81, v82, v83);
  }
  v85 = v140;
  v140 = 0;
  if (v85)
  {
    do
    {
      v86 = __ldaxr((unsigned int *)v85);
      v87 = v86 - 1;
    }
    while (__stlxr(v87, (unsigned int *)v85));
    if (!v87)
    {
      atomic_store(1u, (unsigned int *)v85);
      v110 = *((_QWORD *)v85 + 1);
      if ((WTF *)((char *)v85 + 24) != (WTF *)v110 && v110 != 0)
      {
        *((_QWORD *)v85 + 1) = 0;
        *((_DWORD *)v85 + 4) = 0;
        WTF::fastFree(v110, v77, v78, v79, v80, v81, v82, v83);
      }
      WTF::fastFree((unint64_t)v85, v77, v78, v79, v80, v81, v82, v83);
    }
  }
  *(_BYTE *)(a2 + 212) = v6;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::~(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;

  v9 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v18 = *(_QWORD *)(v9 + 8);
      if (v9 + 24 != v18 && v18 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 112);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 88);
  if (v13)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 72);
  if (v14)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 56);
  if (v15)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(_QWORD *)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v16)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  __int128 v22;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v4 = *((unsigned int *)a2 + 3);
  v5 = a1 + 16;
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = v4;
  if (v4 >= 3)
  {
    if (v4 >= 0x15555556)
      goto LABEL_31;
    v6 = 12 * v4;
    v5 = WTF::fastMalloc((WTF *)(12 * v4));
    *(_DWORD *)(a1 + 8) = (v6 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)a1 = v5;
  }
  v7 = *((_DWORD *)a2 + 3);
  if (v7)
  {
    v8 = *a2;
    v9 = *a2 + 12 * v7;
    do
    {
      *(_DWORD *)v5 = *(_DWORD *)v8;
      *(_QWORD *)(v5 + 4) = *(_QWORD *)(v8 + 4);
      v8 += 12;
      v5 += 12;
    }
    while (v8 != v9);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  v10 = *((unsigned int *)a2 + 17);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = v10;
  if ((_DWORD)v10)
  {
    if (!(v10 >> 28))
    {
      v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v10));
      *(_DWORD *)(a1 + 64) = v10;
      *(_QWORD *)(a1 + 56) = v11;
      v12 = *((unsigned int *)a2 + 17);
      if ((_DWORD)v12)
      {
        v13 = (__int128 *)a2[7];
        v14 = 16 * v12;
        do
        {
          v15 = *v13++;
          *v11++ = v15;
          v14 -= 16;
        }
        while (v14);
      }
      goto LABEL_12;
    }
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x197D80118);
  }
LABEL_12:
  v16 = (WTF *)*((unsigned int *)a2 + 21);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = (_DWORD)v16;
  if ((_DWORD)v16)
  {
    v17 = (void *)WTF::fastMalloc(v16);
    *(_DWORD *)(a1 + 80) = (_DWORD)v16;
    *(_QWORD *)(a1 + 72) = v17;
    memcpy(v17, (const void *)a2[9], *((unsigned int *)a2 + 21));
  }
  v18 = (WTF *)*((unsigned int *)a2 + 25);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = (_DWORD)v18;
  if ((_DWORD)v18)
  {
    v24 = (void *)WTF::fastMalloc(v18);
    *(_DWORD *)(a1 + 96) = (_DWORD)v18;
    *(_QWORD *)(a1 + 88) = v24;
    memcpy(v24, (const void *)a2[11], *((unsigned int *)a2 + 25));
  }
  v19 = a2[14];
  *(_QWORD *)(a1 + 104) = a2[13];
  if ((v19 & 1) != 0)
  {
    v25 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v26 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v29 = v26;
      v30 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v30 = v25;
      *(_DWORD *)(v30 + 8) = v29;
      v28 = 1;
      v25 = v30;
    }
    else
    {
      v28 = v25;
      v25 = v26 << 36;
    }
    v19 = v25 | v28;
  }
  *(_QWORD *)(a1 + 112) = v19;
  v20 = (unsigned int *)a2[15];
  if (v20)
  {
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  *(_QWORD *)(a1 + 120) = v20;
  v22 = *((_OWORD *)a2 + 9);
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  *(_OWORD *)(a1 + 144) = v22;
  *(_DWORD *)(a1 + 160) = *((_DWORD *)a2 + 40);
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::AssemblerBuffer *v31;
  int i;
  unsigned int v33;
  char v34;
  unsigned int *result;
  _BYTE *v36;
  unsigned int v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  JSC::AssemblerBuffer *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD v49[2];
  unsigned int v50[2];
  char v51;
  __int16 v52;
  char v53;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    goto LABEL_45;
  while (1)
  {
    *(_BYTE *)(a2 + 212) = 1;
    v11 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = 12 * v11;
      while (v13 < *(unsigned int *)(a1 + 28))
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 16) + v12), a2, a3, a4, a5, a6, a7, a8);
        ++v13;
        v12 += 12;
        if (v14 == v12)
          goto LABEL_6;
      }
      __break(0xC471u);
      goto LABEL_44;
    }
LABEL_6:
    v15 = *(_QWORD **)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 64);
    v18 = *(_QWORD *)(v16 + 96);
    v17 = *(_QWORD *)(v16 + 104);
    v19 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 48) + 216) & 0xFF003FF80000 | v18;
    v20 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v20)
    {
      v36 = *(_BYTE **)(a1 + 88);
      do
      {
        v37 = *v36 & 0x7F;
        if (v37 >= 0x40)
          goto LABEL_44;
        v38 = 1 << v37;
        v19 &= ~v38;
        v17 &= ~v38;
        ++v36;
      }
      while (--v20);
    }
    v21 = *(unsigned int *)(a1 + 116);
    if (!(_DWORD)v21)
      break;
    v39 = *(_BYTE **)(a1 + 104);
    while (1)
    {
      v40 = (*v39 + 32) & 0x7F;
      if (v40 >= 0x40)
        break;
      v41 = 1 << v40;
      v19 &= ~v41;
      v17 &= ~v41;
      ++v39;
      if (!--v21)
        goto LABEL_8;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    *(_DWORD *)(a2 + 208) = 0;
  }
LABEL_8:
  v49[0] = v19;
  v49[1] = v17;
  v22 = *(_QWORD *)(a1 + 128);
  if ((v22 & 1) != 0)
  {
    v42 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || ((v43 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v43 != 0x3FFFFFFF)
        ? (v44 = (_DWORD)v43 == -1)
        : (v44 = 1),
          v44))
    {
      v45 = 2;
    }
    else if (v43 >> 28)
    {
      v47 = v42;
      v48 = v15;
      v42 = WTF::fastMalloc((WTF *)0x10);
      v15 = v48;
      *(_QWORD *)v42 = v47;
      *(_DWORD *)(v42 + 8) = v43;
      v45 = 1;
    }
    else
    {
      v45 = v42;
      v42 = v43 << 36;
    }
    v22 = v42 | v45;
    v23 = ((v42 | v45) & 1) == 0;
  }
  else
  {
    v23 = 1;
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v50, v15, v49, a2, v22, *(_QWORD *)(a1 + 136) + 8, (uint64_t)operationGetByIdMegamorphicGeneric, *(char *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_BYTE *)(a1 + 160), *(JSC::ARM64LogicalImmediate **)(a1 + 168));
  if (!v23 && (v22 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v22 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
  v31 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      v46 = v31;
      JSC::AssemblerBuffer::outOfLineGrow(v31, (uint64_t)v24, v25, v26, v27, v28, v29, v30);
      v31 = v46;
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v33 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v31, (uint64_t)v24, v25, v26, v27, v28, v29, v30);
    v33 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v34 = 69;
  else
    v34 = 65;
  v50[0] = i;
  v50[1] = 0;
  v51 = v34;
  v52 = 15;
  v53 = -1;
  LODWORD(v49[0]) = *(_DWORD *)(a1 + 176);
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v50, (unsigned int *)v49, a2, v26, v27, v28, v29, v30);
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  JSC::DFG::Node *v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;

  v6 = (JSC::DFG::Node *)*((_QWORD *)this + 3528);
  v7 = JSC::DFG::Node::cacheableIdentifier(v6);
  v8 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  v34 = (unint64_t)a2;
  LOBYTE(v35) = 3;
  JSC::B3::StackmapValue::append(v8, (uint64_t)a2, (unint64_t)&v34 + 8);
  v34 = (unint64_t)a3;
  LOBYTE(v35) = 3;
  JSC::B3::StackmapValue::append(v8, (uint64_t)a3, (unint64_t)&v34 + 8);
  v9 = *((_QWORD *)this + 3488);
  v34 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v8, v9, (unint64_t)&v34);
  v10 = *((_QWORD *)this + 3487);
  v34 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v8, v10, (unint64_t)&v34);
  *((_QWORD *)v8 + 8) |= 0x30000uLL;
  *((_QWORD *)v8 + 10) |= 0x30000uLL;
  *((_BYTE *)v8 + 168) = 2 * HIBYTE(qword_1ECF4C780);
  v16 = *((_QWORD *)this + 1);
  JSC::CodeOrigin::CodeOrigin(&v37, v6);
  *(_QWORD *)&v34 = v16;
  JSC::CodeOrigin::CodeOrigin((uint64_t *)&v34 + 1, (const JSC::CodeOrigin *)&v37);
  v17 = v38;
  if (v38)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v35 = v17;
  v36 = v7;
  if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
  if (v38)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v38, v26, v27, v28, v29, v30, v31, v32);
  return v8;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,unsigned long),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::B3::Value *v33;
  JSC::B3::Value *v34;
  JSC::DFG::Node *v35;
  char **v36;
  uint64_t v37;
  WTF *v38;
  char *v40;
  WTF *v41;
  uint64_t v42;

  v13 = (int *)(a1 + 28264);
  v14 = *(_DWORD *)(a1 + 28264);
  if ((v14 & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 27848);
    v41 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v41 = 0x200000002;
    v42 = 0x200000002;
    v23 = (_QWORD *)(v15 + 32);
    v24 = *(unsigned int *)(v15 + 44);
    if ((_DWORD)v24 == *(_DWORD *)(v15 + 40))
    {
      v25 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)&v41);
      v26 = *(_QWORD *)(v15 + 32) + 16 * *(unsigned int *)(v15 + 44);
    }
    else
    {
      v26 = *v23 + 16 * v24;
      v25 = (unint64_t)&v41;
    }
    *(_QWORD *)v26 = 0;
    *(_QWORD *)(v26 + 8) = 0;
    v27 = *(_QWORD *)v25;
    *(_QWORD *)v25 = 0;
    *(_QWORD *)v26 = v27;
    LODWORD(v27) = *(_DWORD *)(v25 + 8);
    *(_DWORD *)(v25 + 8) = 0;
    *(_DWORD *)(v26 + 8) = v27;
    LODWORD(v27) = *(_DWORD *)(v25 + 12);
    *(_DWORD *)(v25 + 12) = 0;
    *(_DWORD *)(v26 + 12) = v27;
    ++*(_DWORD *)(v15 + 44);
    v14 = v24 | 0x80000000;
    *v13 = v24 | 0x80000000;
    v28 = v41;
    if (v41)
    {
      v41 = 0;
      LODWORD(v42) = 0;
      WTF::fastFree((unint64_t)v28, v16, v17, v18, v19, v20, v21, v22);
      v14 = *v13;
    }
  }
  v29 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationGetByIdWithThisGeneric);
  v30 = *a3;
  v31 = *a4;
  v32 = *(_QWORD *)(a1 + 27776);
  v33 = *(JSC::B3::Value **)(a1 + 27760);
  v34 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(v14, *(_QWORD *)(a1 + 27768), v29, *a2, v30, v31, *a5);
  JSC::B3::Procedure::addValueImpl(v33, v34);
  v41 = v34;
  v36 = (char **)(v32 + 8);
  v37 = *(unsigned int *)(v32 + 20);
  if ((_DWORD)v37 == *(_DWORD *)(v32 + 16))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v37 + 1, (unint64_t)&v41);
    v37 = *(unsigned int *)(v32 + 20);
    *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v37) = *(_QWORD *)v40;
    v38 = v41;
  }
  else
  {
    *(_QWORD *)&(*v36)[8 * v37] = v34;
    v38 = v34;
  }
  *(_DWORD *)(v32 + 20) = v37 + 1;
  *((_QWORD *)v38 + 4) = v32;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x30);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::~StackmapGenerationParams(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 8);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3575C40;
  v2 = a2[1];
  *(_QWORD *)(result + 16) = *a2;
  if ((v2 & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v7 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v7 != 0x3FFFFFFF)
        ? (v8 = (_DWORD)v7 == -1)
        : (v8 = 1),
          v8))
    {
      v9 = 2;
    }
    else if (v7 >> 28)
    {
      v12 = a2;
      v13 = result;
      v10 = v6;
      v11 = v7;
      v6 = WTF::fastMalloc((WTF *)0x10);
      a2 = v12;
      result = v13;
      *(_QWORD *)v6 = v10;
      *(_DWORD *)(v6 + 8) = v11;
      v9 = 1;
    }
    else
    {
      v9 = v6;
      v6 = v7 << 36;
    }
    v2 = v6 | v9;
  }
  *(_QWORD *)(result + 24) = v2;
  v3 = (unsigned int *)a2[2];
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = a2[3];
  *(_QWORD *)(result + 32) = v3;
  *(_QWORD *)(result + 40) = v5;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(JSC::FTL::PatchpointExceptionHandle **a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _BYTE *v29;
  unsigned int *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t *result;
  int v65;
  JSC::FTL::ExceptionTarget *v66;
  uint64_t v67;
  JSC::FTL::PatchpointExceptionHandle *v68;
  uint64_t v69;
  uint64_t v70[2];
  int v71;
  int v72;
  char v73;
  unsigned __int8 v74;
  char v75;
  unsigned int *v76;
  uint64_t v77;
  int v78;

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "GetByIdWithThis");
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(*((_QWORD *)*a1 + 3) + 64);
  JSC::CodeOrigin::CodeOrigin(&v77, (const JSC::CodeOrigin *)(a1 + 1));
  v15 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v7, &v77);
  v78 = v15;
  if ((v77 & 1) != 0 && (v77 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v77 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(a1[2], (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v66);
  v16 = (unsigned int *)v66;
  JSC::FTL::ExceptionTarget::jumps(v66, (JSC::CCallHelpers *)a2, (uint64_t *)&v76);
  if (v16)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v16, v17, v18, v19, v20, v21, v22, v23);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind((uint64_t)a1[2], a3, v15, v19, v20, v21, v22, v23);
  v75 = -1;
  if (HIBYTE(qword_1ECF4C780))
  {
    v65 = *(_DWORD *)(a3 + 36);
    if (!v65 || (v75 = **(_BYTE **)(a3 + 24), v65 == 1))
    {
      __break(0xC471u);
      JUMPOUT(0x197D80D90);
    }
  }
  JSC::FTL::State::addStructureStubInfo(*a1);
  v25 = v24;
  v26 = *(_QWORD *)(a2 + 336);
  v66 = (JSC::FTL::ExceptionTarget *)JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)a3);
  v67 = v27;
  v28 = *(_DWORD *)(a3 + 20);
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x197D80DD8);
  }
  v29 = *(_BYTE **)(a3 + 8);
  LOBYTE(v72) = *v29 & 0x7F;
  if (v28 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D80DE0);
  }
  v74 = v29[16] & 0x7F;
  if (v28 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D80DE8);
  }
  v73 = v29[32] & 0x7F;
  v30 = (unsigned int *)WTF::fastMalloc((WTF *)0x40);
  v31 = WTF::Box<JSC::JITGetByIdWithThisGenerator>::Data::Data<JSC::CodeBlock *,JSC::StructureStubInfo *&,JSC::JITType,JSC::CodeOrigin const&,JSC::CallSiteIndex &,JSC::RegisterSetBuilder,JSC::CacheableIdentifier const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID &>(v30, v26, v25, 5u, (JSC::CodeOrigin *)(a1 + 1), &v78, (uint64_t)&v66, (uint64_t *)a1 + 3, (unsigned __int8 *)&v72, &v74, &v73, &v75);
  JSC::JITGetByIdWithThisGenerator::generateFastPath((JSC::JITGetByIdWithThisGenerator *)(v31 + 2), (JSC::CCallHelpers *)a2, v32, v33, v34, v35, v36, v37);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v38, v39, v40, v41, v42, v43, v44, &v72);
  do
    v45 = __ldaxr(v30);
  while (__stlxr(v45 + 1, v30));
  v66 = (JSC::FTL::ExceptionTarget *)v30;
  LOBYTE(v67) = v75;
  v68 = *a1;
  JSC::B3::StackmapGenerationParams::StackmapGenerationParams((uint64_t)&v69, (const JSC::B3::StackmapGenerationParams *)a3);
  JSC::CodeOrigin::CodeOrigin(v70, (const JSC::CodeOrigin *)(a1 + 1));
  v46 = v76;
  if (v76)
  {
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 + 1, v46));
  }
  v70[1] = (uint64_t)v46;
  v71 = v72;
  do
  {
    v62 = __ldaxr(v30);
    v63 = v62 - 1;
  }
  while (__stlxr(v63, v30));
  if (!v63)
  {
    atomic_store(1u, v30);
    WTF::fastFree((unint64_t)v30, v55, v56, v57, v58, v59, v60, v61);
  }
  result = WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::~Box((unint64_t *)&v76, v55, v56, v57, v58, v59, v60, v61);
  *(_BYTE *)(a2 + 212) = v6;
  return result;
}

uint64_t JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE v16[112];
  unsigned int *v17;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v17;
    *(_DWORD *)(a1 + 12) = v10 + 1;
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::~(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v20;

  v9 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v20 = *(_QWORD *)(v9 + 8);
      if (v9 + 24 != v20 && v20 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 88);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 64);
  if (v13)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 48);
  if (v14)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 32);
  if (v15)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

_DWORD *WTF::Box<JSC::JITGetByIdWithThisGenerator>::Data::Data<JSC::CodeBlock *,JSC::StructureStubInfo *&,JSC::JITType,JSC::CodeOrigin const&,JSC::CallSiteIndex &,JSC::RegisterSetBuilder,JSC::CacheableIdentifier const&,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID &>(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, JSC::CodeOrigin *a5, int *a6, uint64_t a7, uint64_t *a8, unsigned __int8 *a9, unsigned __int8 *a10, char *a11, _BYTE *a12)
{
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v29;

  *a1 = 1;
  v17 = (uint64_t)(a1 + 2);
  JSC::CodeOrigin::CodeOrigin(&v29, a5);
  LOBYTE(v26) = *a12;
  JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator(v17, a2, a3, 0, a4, &v29, *a6, a7, *a8, *a9, 0, *a10, 0, *a11, v26);
  if ((v29 & 1) != 0 && (v29 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v29 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  return a1;
}

uint64_t WTF::createSharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3575C68;
  *a1 = v4;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[36];
  int v61;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (!HIBYTE(qword_1ECF4C780))
  {
    v11 = *a1;
    *(_DWORD *)v60 = *(_DWORD *)(*a1 + 52);
    *(_QWORD *)&v60[4] = *(_QWORD *)(v11 + 56);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v60, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, a2, a3, a4, a5, a6, a7, a8, &v61);
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*a1 + 16), *((char *)a1 + 8), v12, v13, v14, v15, v16);
    *(_QWORD *)(*(_QWORD *)(*a1 + 16) + 48) = operationGetByIdWithThisOptimize;
    v52 = (unsigned __int8 *)a1[2];
    v58 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 3));
    v59 = v53;
    JSC::CodeOrigin::CodeOrigin(&v57, (const JSC::CodeOrigin *)(a1 + 11));
    v54 = *((_DWORD *)a1 + 11);
    if (!v54)
    {
      __break(0xC471u);
      JUMPOUT(0x197D813F0);
    }
    if (v54 == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197D813F8);
    }
    if (v54 > 2)
    {
      JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v60, v52, (uint64_t)&v58, a2, v57, a1[12] + 8, *((unsigned __int8 *)a1 + 8) | 0x3000000000, *(_BYTE *)a1[4] & 0x7F, *(_BYTE *)(a1[4] + 16) & 0x7F, *(_BYTE *)(a1[4] + 32) & 0x7F, *((_BYTE *)a1 + 8));
      v27 = *(_QWORD *)v60;
      v28 = v57;
      if ((v57 & 1) == 0)
        goto LABEL_10;
      goto LABEL_24;
    }
    __break(0xC471u);
LABEL_32:
    JUMPOUT(0x197D813D8);
  }
  v17 = (_QWORD *)a1[2];
  v58 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 3));
  v59 = v18;
  JSC::CodeOrigin::CodeOrigin(&v56, (const JSC::CodeOrigin *)(a1 + 11));
  v19 = *((_DWORD *)a1 + 11);
  if (!v19)
  {
    __break(0xC471u);
    goto LABEL_32;
  }
  if (v19 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D813E0);
  }
  if (v19 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D813E8);
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v60, v17, &v58, a2, v56, a1[12] + 8, (uint64_t)operationGetByIdWithThisOptimize, *(_BYTE *)a1[4] & 0x7F, *(_BYTE *)(a1[4] + 16) & 0x7F, *(_BYTE *)(a1[4] + 32) & 0x7F, *(JSC::ARM64LogicalImmediate **)(*a1 + 16));
  v27 = *(_QWORD *)v60;
  v28 = v56;
  if ((v56 & 1) != 0)
  {
LABEL_24:
    if ((v28 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v28 & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
  }
LABEL_10:
  JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), (uint64_t)v20, v21, v22, v23, v24, v25, v26, (int *)&v58);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v29, v30, v31, v32, v33, v34);
  if (*(_BYTE *)(a2 + 328))
    v40 = 69;
  else
    v40 = 65;
  *(_QWORD *)v60 = v58;
  v60[8] = v40;
  *(_WORD *)&v60[9] = 15;
  v60[11] = -1;
  v55 = *((_DWORD *)a1 + 26);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v60, &v55, a2, v35, v36, v37, v38, v39);
  v41 = *a1;
  *(_DWORD *)(v41 + 36) = v61;
  *(_QWORD *)(v41 + 40) = v27;
  do
    v42 = __ldaxr((unsigned int *)v41);
  while (__stlxr(v42 + 1, (unsigned int *)v41));
  *(_QWORD *)v60 = v41;
  *(_QWORD *)v60 = 0;
  do
  {
    v50 = __ldaxr((unsigned int *)v41);
    v51 = v50 - 1;
  }
  while (__stlxr(v51, (unsigned int *)v41));
  if (!v51)
  {
    atomic_store(1u, (unsigned int *)v41);
    WTF::fastFree(v41, v43, v44, v45, v46, v47, v48, v49);
  }
  *(_BYTE *)(a2 + 212) = v10;
}

void JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11)
{
  unsigned __int8 *v11;
  unsigned __int8 v12;
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  JSC::AssemblerBuffer *v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint8x8_t v41;
  __int32 v42;
  uint8x8_t v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  char v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  _BYTE *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  int v60;
  unsigned __int8 *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int8x8_t v77;
  int v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  int64_t v95;
  int v96;
  char *v97;
  JSC::AssemblerBuffer *v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  void *__dst;
  __int128 v103;
  uint64_t v104;
  uint64_t v105[8];

  v11 = (unsigned __int8 *)a8;
  v12 = a7;
  v14 = a5;
  v18 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if ((a5 & 1) == 0)
  {
    if ((a5 & 2) == 0)
      goto LABEL_3;
LABEL_110:
    v24 = 0xFFFFFFFFLL;
    goto LABEL_7;
  }
LABEL_86:
  v84 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
  if ((v14 & 2) != 0
    || ((v85 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v85 != 0x3FFFFFFF)
      ? (v86 = (_DWORD)v85 == -1)
      : (v86 = 1),
        v86))
  {
    v87 = 2;
  }
  else if (v85 >> 28)
  {
    v93 = a2;
    v94 = WTF::fastMalloc((WTF *)0x10);
    a2 = v93;
    *(_QWORD *)v94 = v84;
    *(_DWORD *)(v94 + 8) = v85;
    v87 = 1;
    v84 = v94;
  }
  else
  {
    v87 = v84;
    v84 = v85 << 36;
  }
  v14 = v84 | v87;
  if (((v84 | v87) & 2) != 0)
    goto LABEL_110;
LABEL_3:
  v19 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
  v20 = v14;
  if ((v14 & 1) != 0)
  {
    v88 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    v89 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v89 == 0x3FFFFFFF || (_DWORD)v89 == -1)
    {
      v91 = 2;
    }
    else if (v89 >> 28)
    {
      v99 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
      v92 = WTF::fastMalloc((WTF *)0x10);
      v19 = v99;
      *(_QWORD *)v92 = v88;
      *(_DWORD *)(v92 + 8) = v89;
      v91 = 1;
      v88 = v92;
    }
    else
    {
      v91 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v88 = v89 << 36;
    }
    v20 = v88 | v91;
  }
  v105[0] = v20;
  v23 = JSC::DFG::CodeOriginPool::addCodeOrigin(v19, v105);
  if ((v105[0] & 1) != 0 && (v105[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v105[0] & 0xFFFFFFFF8, v21, v22, a4, a5, a6, a7, a8);
  if (v23)
  {
    v24 = v23;
LABEL_7:
    if (!*(_BYTE *)(a4 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197D81A24);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a4, (JSC::ARM64LogicalImmediate *)v24, a4 + 264, a4, a5, a6, a7, a8);
    v30 = *(_DWORD *)(a4 + 200);
    if (v30 + 4 > *(_DWORD *)(a4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), v25, v26, v27, v28, v29, a7, a8);
      v30 = *(_DWORD *)(a4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + v30) = -1207811152;
    *(_DWORD *)(a4 + 200) += 4;
  }
  v31 = *(_QWORD *)(a3 + 8) | *(_QWORD *)a3;
  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v105, v31, a4, 4u, (uint64_t)v11, 8, a7, a8);
  __dst = (char *)&v103 + 8;
  *(_QWORD *)&v103 = 4;
  if (v12 == 8)
  {
    v33 = 0;
  }
  else
  {
    WORD4(v103) = v12 | 0x800;
    v33 = 1;
    DWORD1(v103) = 1;
  }
  if (a9)
  {
    *((_WORD *)&v103 + v33++ + 4) = a9;
    DWORD1(v103) = v33;
  }
  if (a10 != 1)
  {
    *((_WORD *)&v103 + v33++ + 4) = a10 | 0x100;
    DWORD1(v103) = v33;
  }
  if (a11 == 2)
  {
    if (!v33)
      goto LABEL_77;
  }
  else
  {
    *((_WORD *)&v103 + v33++ + 4) = a11 | 0x200;
    DWORD1(v103) = v33;
  }
  v34 = (JSC::AssemblerBuffer *)(a4 + 56);
  v12 = 1;
  do
  {
    v35 = 0;
    v36 = 0;
    v37 = __dst;
    v38 = v33;
    do
    {
      if ((*((_BYTE *)__dst + v35 + 1) & 0x40) != 0)
      {
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
      v36 |= 1 << *((_BYTE *)__dst + v35 + 1);
      v35 += 2;
    }
    while (2 * v33 != v35);
    v39 = 0;
    do
    {
      v40 = *((_BYTE *)__dst + v39) & 0x7F;
      if (v40 >= 0x40)
        goto LABEL_85;
      v36 &= ~(1 << v40);
      v39 += 2;
    }
    while (2 * v33 != v39);
    v41 = (uint8x8_t)vcnt_s8((int8x8_t)v36);
    v41.i16[0] = vaddlv_u8(v41);
    v42 = v41.i32[0];
    v43 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v36));
    v43.i16[0] = vaddlv_u8(v43);
    if (v43.i32[0] + v42)
    {
      v11 = 0;
      if (v33 <= 1)
        v44 = 1;
      else
        v44 = v33;
      v45 = 2 * v44;
      while (1)
      {
        v46 = v11[(_QWORD)__dst + 1];
        if ((v46 & 0x7Fu) >= 0x40)
          goto LABEL_85;
        if (((v36 >> (v46 & 0x7F)) & 1) != 0)
          break;
        v11 += 2;
        if ((unsigned __int8 *)v45 == v11)
          goto LABEL_70;
      }
      v47 = v11[(_QWORD)__dst];
      if (v47 != v46)
      {
        v48 = (char)v47;
        if ((char)v47 == 63)
        {
          v49 = *(_DWORD *)(a4 + 200);
          v50 = *(_DWORD *)(a4 + 192);
          if ((char)v46 == 31)
            goto LABEL_64;
          a3 = v46 & 0x1F | 0xD2800000;
        }
        else
        {
          v49 = *(_DWORD *)(a4 + 200);
          v50 = *(_DWORD *)(a4 + 192);
          v51 = v46 == 31 || v48 == 31;
          if (!v51)
          {
            a3 = v46 & 0xFFE0FFFF | ((v48 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_65;
          }
LABEL_64:
          a3 = (char)v46 | (32 * v48) | 0x91000000;
        }
LABEL_65:
        if (v49 + 4 > v50)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v34, (uint64_t)a2, v32, a4, a5, a6, a7, a8);
          v49 = *(_DWORD *)(a4 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a4 + 56) + v49) = a3;
        *(_DWORD *)(a4 + 200) += 4;
        v37 = __dst;
        v38 = DWORD1(v103);
      }
      memmove(&v11[(_QWORD)v37], &v11[(_QWORD)v37 + 2], 2 * v38 - (_QWORD)v11 - 2);
      v33 = DWORD1(v103) - 1;
      goto LABEL_69;
    }
    v98 = v34;
    v52 = *(_BYTE *)__dst;
    a3 = *((char *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a4, *(char *)__dst, a3, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v103) - 2);
    v53 = (DWORD1(v103) - 1);
    v51 = DWORD1(v103) == 1;
    DWORD1(v103) = v53;
    v11 = (unsigned __int8 *)__dst;
    v54 = (char *)__dst + 2 * v53;
    if (v51)
    {
      v59 = 0;
      v60 = 0;
      a2 = (unsigned __int8 *)__dst + 2 * v53;
    }
    else
    {
      v55 = 2 * v53;
      v56 = __dst;
      while (*v56 != a3)
      {
        v56 += 2;
        v55 -= 2;
        if (!v55)
          goto LABEL_49;
      }
      *v56 = v52;
LABEL_49:
      v53 = 0;
      v57 = v11;
      a2 = (unsigned __int8 *)v54;
      a3 = (uint64_t)v54;
      do
      {
        if (*v11 == v11[1])
        {
          v58 = v11;
          if ((void *)a3 != (char *)__dst + 2 * DWORD1(v103))
          {
            v96 = v53;
            v97 = v54;
            if (v11 == a2)
            {
              v58 = (unsigned __int8 *)a3;
            }
            else
            {
              v95 = v57 - a2;
              memmove((void *)a3, a2, v57 - a2);
              v58 = (unsigned __int8 *)(a3 + v95);
            }
            v54 = v97;
            LODWORD(v53) = v96;
          }
          a2 = v11 + 2;
          v53 = (v53 + 1);
          a3 = (uint64_t)v58;
        }
        v11 += 2;
        v57 += 2;
      }
      while (v11 < (unsigned __int8 *)v54);
      v11 = (unsigned __int8 *)__dst;
      v59 = DWORD1(v103);
      v60 = DWORD1(v103);
      v54 = (char *)a3;
    }
    v61 = &v11[2 * v59];
    v34 = v98;
    if (a2 != v61)
    {
      v11 = (unsigned __int8 *)v53;
      memmove(v54, a2, v61 - a2);
      LODWORD(v53) = (_DWORD)v11;
      v60 = DWORD1(v103);
    }
    v33 = v60 - v53;
LABEL_69:
    DWORD1(v103) = v33;
LABEL_70:
    ;
  }
  while (v33);
  v62 = __dst;
  if ((char *)&v103 + 8 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v103) = 0;
    WTF::fastFree((unint64_t)v62, a2, v32, a4, a5, a6, a7, a8);
  }
LABEL_77:
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v105, v18, 0x3000000008uLL, a4, a5, a6, a7, a8, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v103;
  *(_QWORD *)(a1 + 24) = v104;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v105, v63, v64, v65, v66, v67, v68, v69);
  if (a6)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a4, v18, 0, 0, 0xFFFFFFFFLL, v74, v75, v76, (uint64_t)&v100, v77);
    v78 = v100;
    if (v100 != -1)
    {
      v79 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v79 == *(_DWORD *)(a6 + 8))
      {
        v80 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (void *)(v79 + 1), (unint64_t)&v100, v72, v73, v74, v75, v76);
        v82 = *v80;
        v81 = (uint64_t *)(v80 + 1);
        v78 = v82;
        LODWORD(v79) = *(_DWORD *)(a6 + 12);
      }
      else
      {
        v81 = &v101;
      }
      v83 = *(_QWORD *)a6 + 12 * v79;
      *(_DWORD *)v83 = v78;
      *(_QWORD *)(v83 + 4) = *v81;
      ++*(_DWORD *)(a6 + 12);
    }
  }
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, v70, v71, v72, v73, v74, v75, v76);
}

void JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, unsigned __int8 a10, JSC::ARM64LogicalImmediate *a11)
{
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;

  v14 = a5;
  v18 = *(_QWORD *)(*a2 + 16);
  if ((a5 & 1) == 0)
  {
    if ((a5 & 2) == 0)
      goto LABEL_3;
LABEL_37:
    v24 = 0xFFFFFFFFLL;
    goto LABEL_7;
  }
  v40 = *(_QWORD *)(a5 & 0xFFFFFFFF8);
  if ((a5 & 2) != 0
    || ((v41 = *(unsigned int *)((a5 & 0xFFFFFFFF8) + 8), (_DWORD)v41 != 0x3FFFFFFF)
      ? (v42 = (_DWORD)v41 == -1)
      : (v42 = 1),
        v42))
  {
    v43 = 2;
  }
  else if (v41 >> 28)
  {
    v52 = a2;
    v50 = WTF::fastMalloc((WTF *)0x10);
    a2 = v52;
    *(_QWORD *)v50 = v40;
    *(_DWORD *)(v50 + 8) = v41;
    v43 = 1;
    v40 = v50;
  }
  else
  {
    v43 = *(_QWORD *)(a5 & 0xFFFFFFFF8);
    v40 = v41 << 36;
  }
  v14 = v40 | v43;
  if (((v40 | v43) & 2) != 0)
    goto LABEL_37;
LABEL_3:
  v19 = *(_QWORD *)(a2[3] + 64);
  v20 = v14;
  if ((v14 & 1) != 0)
  {
    v44 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    v45 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v45 == 0x3FFFFFFF || (_DWORD)v45 == -1)
    {
      v47 = 2;
    }
    else if (v45 >> 28)
    {
      v51 = *(_QWORD *)(a2[3] + 64);
      v48 = *(_DWORD *)((v14 & 0xFFFFFFFF8) + 8);
      v49 = WTF::fastMalloc((WTF *)0x10);
      v19 = v51;
      *(_QWORD *)v49 = v44;
      *(_DWORD *)(v49 + 8) = v48;
      v47 = 1;
      v44 = v49;
    }
    else
    {
      v47 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v44 = v45 << 36;
    }
    v20 = v44 | v47;
  }
  v53 = v20;
  v23 = JSC::DFG::CodeOriginPool::addCodeOrigin(v19, &v53);
  if ((v53 & 1) != 0 && (v53 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v53 & 0xFFFFFFFF8, v21, v22, a4, a5, a6, a7, a8);
  if (v23)
  {
    v24 = v23;
LABEL_7:
    if (!*(_BYTE *)(a4 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197D81C64);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a4, (JSC::ARM64LogicalImmediate *)v24, a4 + 264, a4, a5, a6, a7, a8);
    v32 = *(_DWORD *)(a4 + 200);
    if (v32 + 4 > *(_DWORD *)(a4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), v25, v26, v27, v28, v29, v30, v31);
      v32 = *(_DWORD *)(a4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + v32) = -1207811152;
    *(_DWORD *)(a4 + 200) += 4;
  }
  JSC::FTL::callOperation<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(a1, v18, a3[1] | *a3, (_DWORD *)a4, a6, a7, a8, a9, a10, a11);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, v33, v34, v35, v36, v37, v38, v39);
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>(uint64_t a1, unsigned int **a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = v4;
  v6 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3575C90;
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(v4 + 16) = v6;
  v8 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v8 != *(_DWORD *)(a1 + 240))
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
LABEL_14:
    *v9 = v5;
    *(_DWORD *)(a1 + 244) = v8 + 1;
    return;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = *(const void **)(a1 + 232);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a1 + 240) = v12;
    *(_QWORD *)(a1 + 232) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*(const void **)(a1 + 232) == v13)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v8 = *(unsigned int *)(a1 + 244);
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
    goto LABEL_14;
  }
  __break(0xC471u);
}

void JSC::FTL::callOperation<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, JSC::ARM64LogicalImmediate *a10)
{
  int v10;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint8x8_t v32;
  __int32 v33;
  uint8x8_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  unsigned int v44;
  char v45;
  char v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  _BYTE *v50;
  int v51;
  unsigned __int8 *v52;
  char *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int8x8_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  int64_t v83;
  char *v84;
  char *v85;
  uint64_t *v86;
  int v87;
  uint64_t v88;
  void *__dst;
  __int128 v90;
  uint64_t v91;
  _QWORD v92[9];

  v10 = a8;
  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  v16 = (unsigned __int8 *)JSC::FTL::SlowPathCallContext::SlowPathCallContext(v92, a3, (uint64_t)a4, 4u, a7, 0xFFFFFFFFLL, a7, a8);
  __dst = (char *)&v90 + 8;
  LODWORD(v90) = 2;
  if (!v10)
  {
    if (a9 == 1)
    {
      v25 = &v88;
      goto LABEL_62;
    }
    v24 = 0;
    goto LABEL_6;
  }
  WORD4(v90) = v10;
  v24 = 1;
  DWORD1(v90) = 1;
  if (a9 != 1)
  {
LABEL_6:
    *((_WORD *)&v90 + v24++ + 4) = a9 | 0x100;
    DWORD1(v90) = v24;
  }
  v25 = &v88;
  do
  {
    v26 = 0;
    v27 = 0;
    v28 = (char *)__dst;
    v29 = v24;
    do
    {
      if ((*((_BYTE *)__dst + v26 + 1) & 0x40) != 0)
      {
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      v27 |= 1 << *((_BYTE *)__dst + v26 + 1);
      v26 += 2;
    }
    while (2 * v24 != v26);
    v30 = 0;
    do
    {
      v31 = *((_BYTE *)__dst + v30) & 0x7F;
      if (v31 >= 0x40)
        goto LABEL_69;
      v27 &= ~(1 << v31);
      v30 += 2;
    }
    while (2 * v24 != v30);
    v32 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
    v32.i16[0] = vaddlv_u8(v32);
    v33 = v32.i32[0];
    v34 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v27));
    v34.i16[0] = vaddlv_u8(v34);
    if (v34.i32[0] + v33)
    {
      v35 = 0;
      if (v24 <= 1)
        v36 = 1;
      else
        v36 = v24;
      v37 = 2 * v36;
      while (1)
      {
        v38 = *((unsigned __int8 *)__dst + v35 + 1);
        if ((v38 & 0x7Fu) >= 0x40)
          goto LABEL_69;
        if (((v27 >> (v38 & 0x7F)) & 1) != 0)
          break;
        v35 += 2;
        if (v37 == v35)
          goto LABEL_58;
      }
      v39 = *((unsigned __int8 *)__dst + v35);
      if (v39 != v38)
      {
        v40 = (char)v39;
        if ((char)v39 == 63)
        {
          v41 = a4[50];
          v42 = a4[48];
          if (v38 == 31)
            goto LABEL_52;
          v44 = v38 & 0x1F | 0xD2800000;
        }
        else
        {
          v41 = a4[50];
          v42 = a4[48];
          v43 = (char)v38 == 31 || v40 == 31;
          if (!v43)
          {
            v44 = v38 & 0xFFE0FFFF | ((v40 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_53;
          }
LABEL_52:
          v44 = (char)v38 | (32 * v40) | 0x91000000;
        }
LABEL_53:
        if (v41 + 4 > v42)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 14), (uint64_t)v17, v18, v19, v20, v21, v22, v23);
          v41 = a4[50];
        }
        *(_DWORD *)(*((_QWORD *)a4 + 7) + v41) = v44;
        a4[50] += 4;
        v28 = (char *)__dst;
        v29 = DWORD1(v90);
      }
      v16 = (unsigned __int8 *)memmove(&v28[v35], &v28[v35 + 2], 2 * v29 - v35 - 2);
      v24 = DWORD1(v90) - 1;
      goto LABEL_57;
    }
    v86 = v25;
    v45 = *(_BYTE *)__dst;
    v46 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)a4, *(char *)__dst, v46, v19, v20, v21, v22, v23);
    memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v90) - 2);
    v47 = (DWORD1(v90) - 1);
    v43 = DWORD1(v90) == 1;
    DWORD1(v90) = v47;
    v48 = (unsigned __int8 *)__dst;
    v16 = (unsigned __int8 *)__dst + 2 * v47;
    if (v43)
    {
      v55 = 0;
      v56 = 0;
      v51 = 0;
      v17 = v16;
    }
    else
    {
      v49 = 2 * v47;
      v50 = __dst;
      while (*v50 != v46)
      {
        v50 += 2;
        v49 -= 2;
        if (!v49)
          goto LABEL_36;
      }
      *v50 = v45;
LABEL_36:
      v51 = 0;
      v52 = v48;
      v17 = v16;
      v53 = (char *)v16;
      do
      {
        if (*v48 == v48[1])
        {
          v54 = v48;
          if (v53 != (char *)__dst + 2 * DWORD1(v90))
          {
            v85 = (char *)v16;
            if (v48 == v17)
            {
              v54 = (unsigned __int8 *)v53;
            }
            else
            {
              v83 = v52 - v17;
              v84 = v53;
              memmove(v53, v17, v52 - v17);
              v54 = (unsigned __int8 *)&v84[v83];
            }
            v16 = (unsigned __int8 *)v85;
          }
          v17 = v48 + 2;
          ++v51;
          v53 = (char *)v54;
        }
        v48 += 2;
        v52 += 2;
      }
      while (v48 < v16);
      v48 = (unsigned __int8 *)__dst;
      v55 = DWORD1(v90);
      v56 = DWORD1(v90);
      v16 = (unsigned __int8 *)v53;
    }
    v57 = &v48[2 * v55];
    v25 = v86;
    if (v17 != v57)
    {
      v16 = (unsigned __int8 *)memmove(v16, v17, v57 - v17);
      v56 = DWORD1(v90);
    }
    v24 = v56 - v51;
LABEL_57:
    DWORD1(v90) = v24;
LABEL_58:
    ;
  }
  while (v24);
  v16 = (unsigned __int8 *)__dst;
  if ((char *)&v90 + 8 == __dst)
    goto LABEL_62;
LABEL_70:
  if (v16)
  {
    __dst = 0;
    LODWORD(v90) = 0;
    WTF::fastFree((unint64_t)v16, v17, v18, v19, v20, v21, v22, v23);
  }
LABEL_62:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a4, (uint64_t)a10, 2, v19, v20, v21, v22, v23);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v92, a2, a6, v58, v59, v60, v61, v62, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v90;
  *(_QWORD *)(a1 + 24) = v91;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v92, v63, v64, v65, v66, v67, v68, v69);
  if (a5)
  {
    JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)a4, a2, 0, 0, 0xFFFFFFFFLL, v70, v71, v72, (uint64_t)&v87, v73);
    v79 = v87;
    if (v87 != -1)
    {
      v80 = *(unsigned int *)(a5 + 12);
      if ((_DWORD)v80 == *(_DWORD *)(a5 + 8))
      {
        v81 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, (void *)(v80 + 1), (unint64_t)&v87, v74, v75, v76, v77, v78);
        v25 = (uint64_t *)(v81 + 1);
        v79 = *v81;
        LODWORD(v80) = *(_DWORD *)(a5 + 12);
      }
      v82 = *(_QWORD *)a5 + 12 * v80;
      *(_DWORD *)v82 = v79;
      *(_QWORD *)(v82 + 4) = *v25;
      ++*(_DWORD *)(a5 + 12);
    }
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getByIdWithThis(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, JSC::LinkBuffer *a2)
{
  return JSC::JITByIdGenerator::finalize((JSC::JITByIdGenerator *)(*(_QWORD *)(a1 + 16) + 8), a2, a2);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  JSC::FTL::ExceptionTarget *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _BYTE *v29;
  uint64_t v30;
  unsigned __int8 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int i;
  unsigned int v41;
  _QWORD *v42;
  int v43;
  WTF *v44;
  WTF *v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  WTF *v53;
  void *v54;
  WTF *v55;
  char v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  WTF *v87;
  unsigned int v88;
  unsigned int v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  const void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  unint64_t v110;
  uint64_t v112;
  int v113;
  uint64_t v114;
  _QWORD *v115;
  unsigned int v116;
  unsigned int v117;
  _QWORD v118[5];
  _OWORD *v119;
  int v120;
  int v121;
  void *v122;
  int v123;
  int v124;
  void *v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int *v130;
  char v131;
  uint64_t v132;
  unsigned __int8 v133;
  char v134;
  uint64_t v135;
  int v136;
  WTF *v137;
  int v138;
  unsigned int v139;
  uint64_t v140;
  WTF *v141;
  uint64_t v142;
  JSC::FTL::ExceptionTarget *v143[22];

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v7 & 1) != 0)
  {
    v96 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v97 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v97 != 0x3FFFFFFF)
        ? (v98 = (_DWORD)v97 == -1)
        : (v98 = 1),
          v98))
    {
      v99 = 2;
    }
    else if (v97 >> 28)
    {
      v112 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v112 = v96;
      *(_DWORD *)(v112 + 8) = v97;
      v99 = 1;
      v96 = v112;
    }
    else
    {
      v99 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v96 = v97 << 36;
    }
    v7 = v96 | v99;
  }
  v142 = v7;
  v16 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v8, &v142);
  if ((v142 & 1) != 0 && (v142 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v142 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v143);
  v17 = v143[0];
  JSC::FTL::ExceptionTarget::jumps(v143[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v141);
  v143[0] = 0;
  if (v17)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v17);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v17));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v17);
      v104 = (unsigned int *)*((_QWORD *)v17 + 2);
      *((_QWORD *)v17 + 2) = 0;
      if (v104)
      {
        do
        {
          v105 = __ldaxr(v104);
          v106 = v105 - 1;
        }
        while (__stlxr(v106, v104));
        if (!v106)
        {
          atomic_store(1u, v104);
          WTF::fastFree((unint64_t)v104, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      v107 = (unsigned int *)*((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = 0;
      if (v107)
      {
        do
        {
          v108 = __ldaxr(v107);
          v109 = v108 - 1;
        }
        while (__stlxr(v109, v107));
        if (!v109)
        {
          atomic_store(1u, v107);
          WTF::fastFree((unint64_t)v107, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      WTF::fastFree((unint64_t)v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 32), a3, v16, v20, v21, v22, v23, v24);
  v27 = *(_DWORD *)(a3 + 20);
  if (!v27)
  {
    __break(0xC471u);
    goto LABEL_106;
  }
  if (v27 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D82B08);
  }
  if (v27 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D82B10);
  }
  v28 = *(_DWORD *)(a3 + 36);
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x197D82B18);
  }
  if (v28 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D82B20);
  }
  if (v28 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D82B28);
  }
  v29 = *(_BYTE **)(a3 + 8);
  v30 = *v29 & 0x7F;
  v31 = v29[16] & 0x7F;
  v32 = v29[32];
  JSC::AssemblyHelpers::loadMegamorphicProperty(a2, *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16), v31, 0xFFFFFFFFLL, *(WTF::StringImpl **)(a1 + 40), v30, **(char **)(a3 + 24), *(char *)(*(_QWORD *)(a3 + 24) + 1), (uint64_t)&v137, *(_BYTE *)(*(_QWORD *)(a3 + 24) + 2));
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v33, v34, v35, v36, v37, v38, v39);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v41 = v139;
  v42 = v118;
  v115 = v118;
  v116 = 2;
  v117 = v139;
  if (v139 >= 3)
  {
    if (v139 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197D82B38);
    }
    v43 = 12 * v139;
    v42 = (_QWORD *)WTF::fastMalloc((WTF *)(12 * v139));
    v116 = (v43 & 0xFFFFFFFC) / 0xC;
    v115 = v42;
    v41 = v139;
  }
  if (v41)
  {
    v44 = v137;
    v45 = (WTF *)((char *)v137 + 12 * v41);
    do
    {
      *(_DWORD *)v42 = *(_DWORD *)v44;
      *(_QWORD *)((char *)v42 + 4) = *(_QWORD *)((char *)v44 + 4);
      v44 = (WTF *)((char *)v44 + 12);
      v42 = (_QWORD *)((char *)v42 + 12);
    }
    while (v44 != v45);
  }
  v46 = *(_QWORD *)a3;
  v118[3] = *(_QWORD *)(a1 + 16);
  v118[4] = v46;
  v47 = *(unsigned int *)(a3 + 20);
  v119 = 0;
  v120 = 0;
  v121 = v47;
  if ((_DWORD)v47)
  {
    if (v47 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197D82B30);
    }
    v48 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v47));
    v120 = v47;
    v119 = v48;
    v49 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v49)
    {
      v50 = *(__int128 **)(a3 + 8);
      v51 = 16 * v49;
      do
      {
        v52 = *v50++;
        *v48++ = v52;
        v51 -= 16;
      }
      while (v51);
    }
  }
  v53 = (WTF *)*(unsigned int *)(a3 + 36);
  v122 = 0;
  v123 = 0;
  v124 = (int)v53;
  if ((_DWORD)v53)
  {
    v54 = (void *)WTF::fastMalloc(v53);
    v123 = (int)v53;
    v122 = v54;
    memcpy(v54, *(const void **)(a3 + 24), *(unsigned int *)(a3 + 36));
  }
  v55 = (WTF *)*(unsigned int *)(a3 + 52);
  v125 = 0;
  v126 = 0;
  v127 = (int)v55;
  if ((_DWORD)v55)
  {
    v95 = (void *)WTF::fastMalloc(v55);
    v126 = (int)v55;
    v125 = v95;
    memcpy(v95, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 52));
  }
  v56 = v32 & 0x7F;
  v128 = *(_QWORD *)(a3 + 56);
  v57 = *(_QWORD *)(a1 + 24);
  if ((v57 & 1) != 0)
  {
    v100 = *(_QWORD *)(v57 & 0xFFFFFFFF8);
    if ((v57 & 2) != 0
      || ((v101 = *(unsigned int *)((v57 & 0xFFFFFFFF8) + 8), (_DWORD)v101 != 0x3FFFFFFF)
        ? (v102 = (_DWORD)v101 == -1)
        : (v102 = 1),
          v102))
    {
      v103 = 2;
    }
    else if (v101 >> 28)
    {
      v113 = v101;
      v114 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v114 = v100;
      *(_DWORD *)(v114 + 8) = v113;
      v103 = 1;
      v100 = v114;
    }
    else
    {
      v103 = v100;
      v100 = v101 << 36;
    }
    v57 = v100 | v103;
  }
  v129 = v57;
  v58 = (unsigned int *)v141;
  if (v141)
  {
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 + 1, v58));
  }
  v130 = v58;
  v131 = v30;
  v60 = *(_QWORD *)(a1 + 56);
  v132 = *(_QWORD *)(a1 + 48);
  v133 = v31;
  v134 = v56;
  v135 = v60;
  v136 = i;
  v61 = *(_QWORD *)(a3 + 56);
  v62 = WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)(v62 + 8) = 1;
  *(_QWORD *)v62 = off_1E3575CE0;
  v70 = *(unsigned int *)(v61 + 12);
  if ((_DWORD)v70 != *(_DWORD *)(v61 + 8))
  {
    v71 = (uint64_t *)(*(_QWORD *)v61 + 8 * v70);
    goto LABEL_35;
  }
  v90 = v70 + (v70 >> 2);
  if (v90 >= 0x10)
    v91 = v90 + 1;
  else
    v91 = 16;
  if (v91 <= v70 + 1)
    v92 = v70 + 1;
  else
    v92 = v91;
  if (v92 >> 29)
  {
    __break(0xC471u);
LABEL_106:
    JUMPOUT(0x197D82B00);
  }
  v93 = *(const void **)v61;
  v94 = (void *)WTF::fastMalloc((WTF *)(8 * v92));
  *(_DWORD *)(v61 + 8) = v92;
  *(_QWORD *)v61 = v94;
  memcpy(v94, v93, 8 * v70);
  if (v93)
  {
    if (*(const void **)v61 == v93)
    {
      *(_QWORD *)v61 = 0;
      *(_DWORD *)(v61 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v93, v63, v64, v65, v66, v67, v68, v69);
  }
  v70 = *(unsigned int *)(v61 + 12);
  v71 = (uint64_t *)(*(_QWORD *)v61 + 8 * v70);
LABEL_35:
  *v71 = v62;
  *(_DWORD *)(v61 + 12) = v70 + 1;
  v86 = v137;
  if (&v140 != (uint64_t *)v137 && v137)
  {
    v137 = 0;
    v138 = 0;
    WTF::fastFree((unint64_t)v86, v79, v80, v81, v82, v83, v84, v85);
  }
  v87 = v141;
  v141 = 0;
  if (v87)
  {
    do
    {
      v88 = __ldaxr((unsigned int *)v87);
      v89 = v88 - 1;
    }
    while (__stlxr(v89, (unsigned int *)v87));
    if (!v89)
    {
      atomic_store(1u, (unsigned int *)v87);
      v110 = *((_QWORD *)v87 + 1);
      if ((WTF *)((char *)v87 + 24) != (WTF *)v110 && v110 != 0)
      {
        *((_QWORD *)v87 + 1) = 0;
        *((_DWORD *)v87 + 4) = 0;
        WTF::fastFree(v110, v79, v80, v81, v82, v83, v84, v85);
      }
      WTF::fastFree((unint64_t)v87, v79, v80, v81, v82, v83, v84, v85);
    }
  }
  *(_BYTE *)(a2 + 212) = v6;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByIdWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::AssemblerBuffer *v34;
  int i;
  unsigned int v36;
  char v37;
  unsigned int *result;
  _BYTE *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  JSC::AssemblerBuffer *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  _QWORD v49[2];
  unsigned int v50[2];
  char v51;
  __int16 v52;
  char v53;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    goto LABEL_44;
  while (1)
  {
    *(_BYTE *)(a2 + 212) = 1;
    v11 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = 12 * v11;
      while (v13 < *(unsigned int *)(a1 + 28))
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 16) + v12), a2, a3, a4, a5, a6, a7, a8);
        ++v13;
        v12 += 12;
        if (v14 == v12)
          goto LABEL_6;
      }
      __break(0xC471u);
      goto LABEL_43;
    }
LABEL_6:
    v15 = *(unsigned __int8 **)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 64);
    v18 = *(_QWORD *)(v16 + 96);
    v17 = *(_QWORD *)(v16 + 104);
    v19 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 48) + 216) & 0xFF003FF80000 | v18;
    v20 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v20)
    {
      v21 = *(_BYTE **)(a1 + 88);
      do
      {
        v22 = *v21 & 0x7F;
        if (v22 >= 0x40)
          goto LABEL_43;
        v23 = 1 << v22;
        v19 &= ~v23;
        v17 &= ~v23;
        ++v21;
      }
      while (--v20);
    }
    v24 = *(unsigned int *)(a1 + 116);
    if (!(_DWORD)v24)
      break;
    v39 = *(_BYTE **)(a1 + 104);
    while (1)
    {
      v40 = (*v39 + 32) & 0x7F;
      if (v40 >= 0x40)
        break;
      v41 = 1 << v40;
      v19 &= ~v41;
      v17 &= ~v41;
      ++v39;
      if (!--v24)
        goto LABEL_11;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    *(_DWORD *)(a2 + 208) = 0;
  }
LABEL_11:
  v49[0] = v19;
  v49[1] = v17;
  v25 = *(_QWORD *)(a1 + 128);
  if ((v25 & 1) != 0)
  {
    v42 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
    if ((v25 & 2) != 0
      || ((v43 = *(unsigned int *)((v25 & 0xFFFFFFFF8) + 8), (_DWORD)v43 != 0x3FFFFFFF)
        ? (v44 = (_DWORD)v43 == -1)
        : (v44 = 1),
          v44))
    {
      v45 = 2;
    }
    else if (v43 >> 28)
    {
      v47 = v42;
      v48 = v15;
      v42 = WTF::fastMalloc((WTF *)0x10);
      v15 = v48;
      *(_QWORD *)v42 = v47;
      *(_DWORD *)(v42 + 8) = v43;
      v45 = 1;
    }
    else
    {
      v45 = v42;
      v42 = v43 << 36;
    }
    v25 = v42 | v45;
    v26 = ((v42 | v45) & 1) == 0;
  }
  else
  {
    v26 = 1;
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v50, v15, v49, a2, v25, *(_QWORD *)(a1 + 136) + 8, (uint64_t)operationGetByIdWithThisMegamorphicGeneric, *(char *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_WORD *)(a1 + 160), HIBYTE(*(_WORD *)(a1 + 160)), *(JSC::ARM64LogicalImmediate **)(a1 + 168));
  if (!v26 && (v25 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v25 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  v34 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      v46 = v34;
      JSC::AssemblerBuffer::outOfLineGrow(v34, (uint64_t)v27, v28, v29, v30, v31, v32, v33);
      v34 = v46;
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v36 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v34, (uint64_t)v27, v28, v29, v30, v31, v32, v33);
    v36 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v37 = 69;
  else
    v37 = 65;
  v50[0] = i;
  v50[1] = 0;
  v51 = v37;
  v52 = 15;
  v53 = -1;
  LODWORD(v49[0]) = *(_DWORD *)(a1 + 176);
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v50, (unsigned int *)v49, a2, v29, v30, v31, v32, v33);
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::getPrivateName(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  WTF *v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  WTF *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE v95[24];
  uint64_t v96;
  WTF *v97;

  v6 = (uint64_t *)*((_QWORD *)this + 3528);
  v7 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
  *(_OWORD *)v95 = (unint64_t)a2;
  v95[16] = 3;
  JSC::B3::StackmapValue::append(v7, (uint64_t)a2, (unint64_t)&v95[8]);
  *(_OWORD *)v95 = (unint64_t)a3;
  v95[16] = 3;
  JSC::B3::StackmapValue::append(v7, (uint64_t)a3, (unint64_t)&v95[8]);
  v8 = *((_QWORD *)this + 3488);
  *(_OWORD *)v95 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v7, v8, (unint64_t)v95);
  v9 = *((_QWORD *)this + 3487);
  *(_OWORD *)v95 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v7, v9, (unint64_t)v95);
  *((_QWORD *)v7 + 8) |= 0x30000uLL;
  *((_QWORD *)v7 + 10) |= 0x30000uLL;
  *((_BYTE *)v7 + 168) = HIBYTE(qword_1ECF4C780);
  v22 = *((_QWORD *)this + 1);
  v23 = v6[3];
  v24 = *((_QWORD *)this + 3505);
  v25 = *(unsigned int *)((v23 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v26 = (uint64_t *)(v24 + 24);
  v27 = (uint64_t *)(v24 + 8);
  if ((v23 & 1) != 0)
    v28 = v26;
  else
    v28 = v27;
  v29 = *v28;
  v30 = *v28 + 32 * v25;
  v31 = *((_DWORD *)this + 7030);
  v32 = *(_DWORD *)(v30 + 20);
  if (v31 != v32)
  {
    if ((*(_QWORD *)(v30 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v32 ^ v31) >= 2)
      {
        v67 = *(_QWORD *)v30;
        if (*(_QWORD *)v30 != 4)
        {
          *(_QWORD *)v30 = v67 | 2;
          v68 = (unsigned int *)(v67 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v67 & 1) != 0)
          {
            v83 = 2 * *v68;
            while (v83 * 4)
            {
              v84 = *(_QWORD *)&v68[v83];
              if ((*(_BYTE *)(v84 + 19) & 0xC) == 0)
              {
                v85 = *(_QWORD *)(v84 + 96);
                v86 = (v85 & 1) != 0 ? (v85 >> 1) & 3 : *(unsigned __int8 *)(v85 + 4);
                v83 -= 2;
                if (v86 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v68, v15, v16, v17, v18, v19, v20, v21);
              goto LABEL_83;
            }
          }
          else if (v68)
          {
            if ((*((_BYTE *)v68 + 19) & 0xC) != 0
              || ((v69 = *((_QWORD *)v68 + 12), (v69 & 1) != 0)
                ? (v70 = (v69 >> 1) & 3)
                : (v70 = *(unsigned __int8 *)(v69 + 4)),
                  v70 == 2))
            {
LABEL_83:
              *(_QWORD *)v30 = 4;
            }
          }
        }
        *(_DWORD *)(v29 + 32 * v25 + 16) = -21020677;
      }
      if ((v31 & 1) != 0)
        *(_QWORD *)v30 &= ~2uLL;
    }
    *(_DWORD *)(v30 + 20) = v31;
  }
  *(_QWORD *)v95 = 0;
  v33 = *(_QWORD *)v30;
  if ((*(_QWORD *)v30 & 1) == 0 || v33 == 4)
  {
    v34 = v33 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else
  {
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v95, (_QWORD *)v30);
    v34 = *(_QWORD *)v95;
    v33 = *(_QWORD *)v30;
  }
  v35 = v34 & 0xFFFFFFFFFFFFFFFDLL;
  v36 = v34 | 2;
  if ((v33 & 2) != 0)
    v37 = v36;
  else
    v37 = v35;
  *(_QWORD *)v95 = v37;
  v38 = v29 + 32 * v25;
  v39 = *(_QWORD *)(v38 + 24);
  *(_OWORD *)&v95[8] = *(_OWORD *)(v38 + 8);
  v96 = v39;
  v40 = *(_QWORD *)&v95[8] & 0xFFFFD7FF00000008;
  if ((v37 & 1) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFFFFFFFFFCLL, v15, v16, v17, v18, v19, v20, v21);
  v41 = v40 == 0;
  v42 = *v6;
  if ((*v6 & 1) == 0)
    goto LABEL_13;
  v71 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
  if ((v42 & 2) != 0
    || ((v72 = *(unsigned int *)((v42 & 0xFFFFFFFF8) + 8), (_DWORD)v72 != 0x3FFFFFFF)
      ? (v73 = (_DWORD)v72 == -1)
      : (v73 = 1),
        v73))
  {
    v74 = 2;
  }
  else if (v72 >> 28)
  {
    v91 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v91 = v71;
    *(_DWORD *)(v91 + 8) = v72;
    v74 = 1;
    v71 = v91;
  }
  else
  {
    v74 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
    v71 = v72 << 36;
  }
  v42 = v71 | v74;
  if (((v71 | v74) & 1) != 0)
  {
    v87 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
    if ((v42 & 2) != 0
      || ((v88 = *(unsigned int *)((v42 & 0xFFFFFFFF8) + 8), (_DWORD)v88 != 0x3FFFFFFF)
        ? (v89 = (_DWORD)v88 == -1)
        : (v89 = 1),
          v89))
    {
      v90 = 2;
    }
    else if (v88 >> 28)
    {
      v94 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v94 = v87;
      *(_DWORD *)(v94 + 8) = v88;
      v90 = 1;
      v87 = v94;
    }
    else
    {
      v90 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
      v87 = v88 << 36;
    }
    v43 = 0;
    v44 = v87 | v90;
  }
  else
  {
LABEL_13:
    v43 = 1;
    v44 = v42;
  }
  v45 = v97;
  if (v97)
  {
    do
      v46 = __ldaxr((unsigned int *)v45);
    while (__stlxr(v46 + 1, (unsigned int *)v45));
  }
  v54 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v54 + 8) = 1;
  *(_QWORD *)v54 = &off_1E3575D08;
  *(_QWORD *)(v54 + 16) = v22;
  v55 = v44;
  if ((v44 & 1) != 0)
  {
    v75 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
    if ((v44 & 2) != 0
      || ((v76 = *(unsigned int *)((v44 & 0xFFFFFFFF8) + 8), (_DWORD)v76 != 0x3FFFFFFF)
        ? (v77 = (_DWORD)v76 == -1)
        : (v77 = 1),
          v77))
    {
      v78 = 2;
    }
    else if (v76 >> 28)
    {
      v92 = *(_DWORD *)((v44 & 0xFFFFFFFF8) + 8);
      v93 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v93 = v75;
      *(_DWORD *)(v93 + 8) = v92;
      v78 = 1;
      v75 = v93;
    }
    else
    {
      v78 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
      v75 = v76 << 36;
    }
    v55 = v75 | v78;
  }
  *(_QWORD *)(v54 + 24) = v55;
  if (v45)
  {
    do
      v56 = __ldaxr((unsigned int *)v45);
    while (__stlxr(v56 + 1, (unsigned int *)v45));
  }
  *(_QWORD *)(v54 + 32) = v45;
  *(_BYTE *)(v54 + 40) = v41;
  v57 = (unsigned int *)*((_QWORD *)v7 + 7);
  *((_QWORD *)v7 + 7) = v54;
  if (!v57)
    goto LABEL_23;
  v58 = v57 + 2;
  do
  {
    v59 = __ldaxr(v58);
    v60 = v59 - 1;
  }
  while (__stlxr(v60, v58));
  if (!v60)
  {
    atomic_store(1u, v57 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v57 + 8))(v57);
    if (!v45)
      goto LABEL_26;
  }
  else
  {
LABEL_23:
    if (!v45)
      goto LABEL_26;
  }
  do
  {
    v61 = __ldaxr((unsigned int *)v45);
    v62 = v61 - 1;
  }
  while (__stlxr(v62, (unsigned int *)v45));
  if (!v62)
  {
    atomic_store(1u, (unsigned int *)v45);
    v79 = *((_QWORD *)v45 + 4);
    if ((v79 & 1) != 0 && (v79 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v79 & 0xFFFFFFFF8, v47, v48, v49, v50, v51, v52, v53);
    v80 = *((_QWORD *)v45 + 3);
    if ((v80 & 1) != 0 && (v80 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v80 & 0xFFFFFFFF8, v47, v48, v49, v50, v51, v52, v53);
    WTF::fastFree((unint64_t)v45, v47, v48, v49, v50, v51, v52, v53);
  }
LABEL_26:
  if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v44 & 0xFFFFFFFF8, v47, v48, v49, v50, v51, v52, v53);
  if ((v43 & 1) == 0 && (v42 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v42 & 0xFFFFFFFF8, v47, v48, v49, v50, v51, v52, v53);
  v63 = v97;
  v97 = 0;
  if (v63)
  {
    do
    {
      v64 = __ldaxr((unsigned int *)v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, (unsigned int *)v63));
    if (!v65)
    {
      atomic_store(1u, (unsigned int *)v63);
      v81 = *((_QWORD *)v63 + 4);
      if ((v81 & 1) != 0 && (v81 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v81 & 0xFFFFFFFF8, v47, v48, v49, v50, v51, v52, v53);
      v82 = *((_QWORD *)v63 + 3);
      if ((v82 & 1) != 0 && (v82 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v82 & 0xFFFFFFFF8, v47, v48, v49, v50, v51, v52, v53);
      WTF::fastFree((unint64_t)v63, v47, v48, v49, v50, v51, v52, v53);
    }
  }
  return v7;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getPrivateName(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getPrivateName(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getPrivateName(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  char *v29;
  char v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  unsigned int *v46;
  JSC::JITGetByValGenerator *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  uint64_t v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  WTF *v74;
  void *v75;
  WTF *v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  char v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  WTF *v108;
  unsigned int v109;
  unsigned int v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  const void *v114;
  void *v115;
  _BYTE *v116;
  unsigned int v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  JSC::AssemblerBuffer *v128;
  JSC::AssemblerBuffer *v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  unint64_t v140;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  char v149;
  _BYTE v150[12];
  unsigned int *v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD *v155;
  int v156;
  int v157;
  void *v158;
  int v159;
  int v160;
  void *v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int *v166;
  char v167;
  char v168;
  char v169;
  int v170;
  WTF *v171;
  uint64_t v172;
  _OWORD v173[8];

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "GetPrivateName");
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v7 & 1) != 0)
  {
    v120 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v121 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v121 != 0x3FFFFFFF)
        ? (v122 = (_DWORD)v121 == -1)
        : (v122 = 1),
          v122))
    {
      v123 = 2;
    }
    else if (v121 >> 28)
    {
      v142 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v142 = v120;
      *(_DWORD *)(v142 + 8) = v121;
      v123 = 1;
      v120 = v142;
    }
    else
    {
      v123 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v120 = v121 << 36;
    }
    v7 = v120 | v123;
  }
  v172 = v7;
  v16 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v8, &v172);
  if ((v172 & 1) != 0 && (v172 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v172 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v173);
  v17 = *(_QWORD *)&v173[0];
  JSC::FTL::ExceptionTarget::jumps(*(JSC::FTL::ExceptionTarget **)&v173[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v171);
  *(_QWORD *)&v173[0] = 0;
  if (v17)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v17);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v17));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v17);
      v134 = *(unsigned int **)(v17 + 16);
      *(_QWORD *)(v17 + 16) = 0;
      if (v134)
      {
        do
        {
          v135 = __ldaxr(v134);
          v136 = v135 - 1;
        }
        while (__stlxr(v136, v134));
        if (!v136)
        {
          atomic_store(1u, v134);
          WTF::fastFree((unint64_t)v134, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      v137 = *(unsigned int **)(v17 + 8);
      *(_QWORD *)(v17 + 8) = 0;
      if (v137)
      {
        do
        {
          v138 = __ldaxr(v137);
          v139 = v138 - 1;
        }
        while (__stlxr(v139, v137));
        if (!v139)
        {
          atomic_store(1u, v137);
          WTF::fastFree((unint64_t)v137, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  v27 = v16;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 32), a3, v16, v20, v21, v22, v23, v24);
  v28 = *(_DWORD *)(a3 + 20);
  if (!v28)
  {
    __break(0xC471u);
    goto LABEL_132;
  }
  if (v28 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D83D5CLL);
  }
  if (v28 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D83D64);
  }
  v29 = *(char **)(a3 + 8);
  v30 = *v29;
  v31 = v29[16];
  v32 = v29[32];
  v147 = v6;
  if (HIBYTE(qword_1ECF4C780))
  {
    if (!*(_DWORD *)(a3 + 36))
    {
      __break(0xC471u);
      JUMPOUT(0x197D83D74);
    }
    v33 = **(_BYTE **)(a3 + 24);
  }
  else
  {
    v33 = -1;
  }
  v149 = v33;
  v34 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v35 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v35 = 2;
  *(_DWORD *)(v35 + 96) = 0;
  *(_OWORD *)(v35 + 12) = 0u;
  *(_OWORD *)(v35 + 28) = 0u;
  *(_DWORD *)(v35 + 44) = 0;
  *(_QWORD *)(v35 + 64) = 0;
  *(_QWORD *)(v35 + 72) = 0;
  *(_QWORD *)(v35 + 56) = 0;
  *(_QWORD *)(v35 + 104) = 0;
  *(_QWORD *)(v35 + 112) = -1;
  *(_WORD *)(v35 + 120) = -1;
  *(_DWORD *)(v35 + 122) = 0x10000;
  *(_BYTE *)(v35 + 126) = 0;
  *(_BYTE *)(v35 + 127) = BYTE12(xmmword_1ECF4C260);
  *(_BYTE *)(v35 + 128) = 0;
  *(_WORD *)(v35 + 129) &= 0xFC00u;
  *(_QWORD *)(v35 + 136) = 0;
  *(_QWORD *)(v35 + 136) = *(_QWORD *)(v34 + 168);
  *(_QWORD *)(v34 + 168) = v35;
  *(_WORD *)(v35 + 129) = *(_WORD *)(v35 + 129) & 0xFDFF | (HIBYTE(qword_1ECF4C780) << 9);
  v36 = *(_QWORD *)(a2 + 336);
  v37 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v38 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v39 = *(unsigned int *)(a3 + 36);
  if ((_DWORD)v39)
  {
    v40 = *(_BYTE **)(a3 + 24);
    do
    {
      v41 = *v40 & 0x7F;
      if (v41 >= 0x40)
        goto LABEL_131;
      v42 = 1 << v41;
      v38 &= ~v42;
      v37 &= ~v42;
      ++v40;
    }
    while (--v39);
  }
  v43 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v43)
  {
    v116 = *(_BYTE **)(a3 + 40);
    do
    {
      v117 = (*v116 + 32) & 0x7F;
      if (v117 >= 0x40)
        goto LABEL_131;
      v118 = 1 << v117;
      v38 &= ~v118;
      v37 &= ~v118;
      ++v116;
    }
    while (--v43);
  }
  v44 = v30 & 0x7F;
  v45 = v31 & 0x7F;
  v148 = v32 & 0x7F;
  *(_QWORD *)&v173[0] = v38;
  *((_QWORD *)&v173[0] + 1) = v37;
  v46 = (unsigned int *)WTF::fastMalloc((WTF *)0x40);
  *v46 = 1;
  v47 = (JSC::JITGetByValGenerator *)(v46 + 2);
  v48 = *(_QWORD *)(a1 + 24);
  if ((v48 & 1) != 0)
  {
    v124 = *(_QWORD *)(v48 & 0xFFFFFFFF8);
    if ((v48 & 2) != 0
      || ((v125 = *(unsigned int *)((v48 & 0xFFFFFFFF8) + 8), (_DWORD)v125 != 0x3FFFFFFF)
        ? (v126 = (_DWORD)v125 == -1)
        : (v126 = 1),
          v126))
    {
      v127 = 2;
    }
    else if (v125 >> 28)
    {
      v145 = *(_DWORD *)((v48 & 0xFFFFFFFF8) + 8);
      v146 = *(_QWORD *)(v48 & 0xFFFFFFFF8);
      v124 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v124 = v146;
      *(_DWORD *)(v124 + 8) = v145;
      v127 = 1;
    }
    else
    {
      v127 = *(_QWORD *)(v48 & 0xFFFFFFFF8);
      v124 = v125 << 36;
    }
    v48 = v124 | v127;
  }
  *(_QWORD *)v150 = v48;
  BYTE1(v144) = v149;
  LOBYTE(v144) = -1;
  JSC::JITGetByValGenerator::JITGetByValGenerator((uint64_t)v47, v36, v35, 0, 0, (uint64_t *)v150, v27, 27, (uint64_t)v173, v45, SHIDWORD(v45), v148, SHIDWORD(v148), v44, v144);
  if ((v150[0] & 1) != 0 && (*(_QWORD *)v150 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(*(_QWORD *)v150 & 0xFFFFFFFF8, v49, v50, v51, v52, v53, v54, v55);
  if (*(_BYTE *)(a1 + 40))
  {
    v56 = -1;
    v57 = 0xFF000F4100000000;
  }
  else
  {
    JSC::MacroAssemblerARM64::branchTest64(a2, 1, v45, 28, v52, v53, v54, v55, (uint64_t)v173);
    v56 = v173[0];
    v57 = *(_QWORD *)((char *)v173 + 4);
  }
  JSC::JITGetByValGenerator::generateFastPath(v47, (JSC::CCallHelpers *)a2, v50, v51, v52, v53, v54, v55);
  v65 = *(_DWORD *)(a2 + 200);
  if (v65 < *(_DWORD *)(a2 + 52))
  {
    v128 = (JSC::AssemblerBuffer *)(a2 + 56);
    do
    {
      if ((v65 + 4) > *(_DWORD *)(a2 + 192))
      {
        v129 = v128;
        JSC::AssemblerBuffer::outOfLineGrow(v128, v58, v59, v60, v61, v62, v63, v64);
        v128 = v129;
        v65 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v65) = -721215457;
      v65 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v65;
    }
    while (v65 < *(_DWORD *)(a2 + 52));
  }
  *(_DWORD *)(a2 + 208) = 0;
  *(_DWORD *)v150 = v56;
  *(_QWORD *)&v150[4] = v57;
  do
    v66 = __ldaxr(v46);
  while (__stlxr(v66 + 1, v46));
  v151 = v46;
  v152 = v149;
  v67 = *(_QWORD *)a3;
  v153 = *(_QWORD *)(a1 + 16);
  v154 = v67;
  v68 = *(unsigned int *)(a3 + 20);
  v155 = 0;
  v156 = 0;
  v157 = v68;
  if ((_DWORD)v68)
  {
    if (v68 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197D83D6CLL);
    }
    v69 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v68));
    v156 = v68;
    v155 = v69;
    v70 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v70)
    {
      v71 = *(__int128 **)(a3 + 8);
      v72 = 16 * v70;
      do
      {
        v73 = *v71++;
        *v69++ = v73;
        v72 -= 16;
      }
      while (v72);
    }
  }
  v74 = (WTF *)*(unsigned int *)(a3 + 36);
  v158 = 0;
  v159 = 0;
  v160 = (int)v74;
  if ((_DWORD)v74)
  {
    v75 = (void *)WTF::fastMalloc(v74);
    v159 = (int)v74;
    v158 = v75;
    memcpy(v75, *(const void **)(a3 + 24), *(unsigned int *)(a3 + 36));
  }
  v76 = (WTF *)*(unsigned int *)(a3 + 52);
  v161 = 0;
  v162 = 0;
  v163 = (int)v76;
  if ((_DWORD)v76)
  {
    v119 = (void *)WTF::fastMalloc(v76);
    v162 = (int)v76;
    v161 = v119;
    memcpy(v119, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 52));
  }
  v164 = *(_QWORD *)(a3 + 56);
  v77 = *(_QWORD *)(a1 + 24);
  if ((v77 & 1) != 0)
  {
    v130 = *(_QWORD *)(v77 & 0xFFFFFFFF8);
    if ((v77 & 2) != 0
      || ((v131 = *(unsigned int *)((v77 & 0xFFFFFFFF8) + 8), (_DWORD)v131 != 0x3FFFFFFF)
        ? (v132 = (_DWORD)v131 == -1)
        : (v132 = 1),
          v132))
    {
      v133 = 2;
    }
    else if (v131 >> 28)
    {
      v143 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v143 = v130;
      *(_DWORD *)(v143 + 8) = v131;
      v133 = 1;
      v130 = v143;
    }
    else
    {
      v133 = *(_QWORD *)(v77 & 0xFFFFFFFF8);
      v130 = v131 << 36;
    }
    v77 = v130 | v133;
  }
  v165 = v77;
  v78 = (unsigned int *)v171;
  if (v171)
  {
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 + 1, v78));
  }
  v166 = v78;
  v167 = v44;
  v168 = v45;
  v169 = v148;
  v170 = v65;
  v80 = *(_QWORD *)(a3 + 56);
  v81 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v81 + 8) = 1;
  *(_QWORD *)v81 = off_1E3575D30;
  v89 = *(unsigned int *)(v80 + 12);
  if ((_DWORD)v89 != *(_DWORD *)(v80 + 8))
  {
    v90 = (uint64_t *)(*(_QWORD *)v80 + 8 * v89);
    v91 = v147;
    goto LABEL_44;
  }
  v111 = v89 + (v89 >> 2);
  if (v111 >= 0x10)
    v112 = v111 + 1;
  else
    v112 = 16;
  if (v112 <= v89 + 1)
    v113 = v89 + 1;
  else
    v113 = v112;
  if (v113 >> 29)
  {
    __break(0xC471u);
LABEL_131:
    __break(1u);
LABEL_132:
    JUMPOUT(0x197D83D54);
  }
  v114 = *(const void **)v80;
  v115 = (void *)WTF::fastMalloc((WTF *)(8 * v113));
  *(_DWORD *)(v80 + 8) = v113;
  *(_QWORD *)v80 = v115;
  memcpy(v115, v114, 8 * v89);
  v91 = v147;
  if (v114)
  {
    if (*(const void **)v80 == v114)
    {
      *(_QWORD *)v80 = 0;
      *(_DWORD *)(v80 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v114, v82, v83, v84, v85, v86, v87, v88);
  }
  v89 = *(unsigned int *)(v80 + 12);
  v90 = (uint64_t *)(*(_QWORD *)v80 + 8 * v89);
LABEL_44:
  *v90 = v81;
  *(_DWORD *)(v80 + 12) = v89 + 1;
  do
  {
    v106 = __ldaxr(v46);
    v107 = v106 - 1;
  }
  while (__stlxr(v107, v46));
  if (!v107)
  {
    atomic_store(1u, v46);
    WTF::fastFree((unint64_t)v46, v99, v100, v101, v102, v103, v104, v105);
  }
  v108 = v171;
  v171 = 0;
  if (v108)
  {
    do
    {
      v109 = __ldaxr((unsigned int *)v108);
      v110 = v109 - 1;
    }
    while (__stlxr(v110, (unsigned int *)v108));
    if (!v110)
    {
      atomic_store(1u, (unsigned int *)v108);
      v140 = *((_QWORD *)v108 + 1);
      if ((WTF *)((char *)v108 + 24) != (WTF *)v140 && v140 != 0)
      {
        *((_QWORD *)v108 + 1) = 0;
        *((_DWORD *)v108 + 4) = 0;
        WTF::fastFree(v140, v99, v100, v101, v102, v103, v104, v105);
      }
      WTF::fastFree((unint64_t)v108, v99, v100, v101, v102, v103, v104, v105);
    }
  }
  *(_BYTE *)(a2 + 212) = v91;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::getPrivateName(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::~(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v20;

  v9 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v20 = *(_QWORD *)(v9 + 8);
      if (v9 + 24 != v20 && v20 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 104);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 80);
  if (v13)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 64);
  if (v14)
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 48);
  if (v15)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::getPrivateName(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  __int16 v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v3 = result;
  *(_DWORD *)result = *(_DWORD *)a2;
  *(_QWORD *)(result + 4) = *(_QWORD *)(a2 + 4);
  v4 = *(unsigned int **)(a2 + 16);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 16) = v4;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(unsigned int *)(a2 + 60);
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = v6;
  *(_DWORD *)(result + 60) = v7;
  if ((_DWORD)v7)
  {
    if (v7 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v8 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v7));
    *(_DWORD *)(v3 + 56) = v7;
    *(_QWORD *)(v3 + 48) = v8;
    v9 = *(unsigned int *)(a2 + 60);
    if ((_DWORD)v9)
    {
      v10 = *(__int128 **)(a2 + 48);
      v11 = 16 * v9;
      do
      {
        v12 = *v10++;
        *v8++ = v12;
        v11 -= 16;
      }
      while (v11);
    }
  }
  v13 = (WTF *)*(unsigned int *)(a2 + 76);
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_DWORD *)(v3 + 76) = (_DWORD)v13;
  if ((_DWORD)v13)
  {
    v14 = (void *)WTF::fastMalloc(v13);
    *(_DWORD *)(v3 + 72) = (_DWORD)v13;
    *(_QWORD *)(v3 + 64) = v14;
    memcpy(v14, *(const void **)(a2 + 64), *(unsigned int *)(a2 + 76));
  }
  v15 = (WTF *)*(unsigned int *)(a2 + 92);
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_DWORD *)(v3 + 92) = (_DWORD)v15;
  if ((_DWORD)v15)
  {
    v20 = (void *)WTF::fastMalloc(v15);
    *(_DWORD *)(v3 + 88) = (_DWORD)v15;
    *(_QWORD *)(v3 + 80) = v20;
    memcpy(v20, *(const void **)(a2 + 80), *(unsigned int *)(a2 + 92));
  }
  v16 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(v3 + 96) = *(_QWORD *)(a2 + 96);
  if ((v16 & 1) != 0)
  {
    v21 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v22 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v22 != 0x3FFFFFFF)
        ? (v23 = (_DWORD)v22 == -1)
        : (v23 = 1),
          v23))
    {
      v24 = 2;
    }
    else if (v22 >> 28)
    {
      v25 = v22;
      v26 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v26 = v21;
      *(_DWORD *)(v26 + 8) = v25;
      v24 = 1;
      v21 = v26;
    }
    else
    {
      v24 = v21;
      v21 = v22 << 36;
    }
    v16 = v21 | v24;
  }
  *(_QWORD *)(v3 + 104) = v16;
  v17 = *(unsigned int **)(a2 + 112);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *(_QWORD *)(v3 + 112) = v17;
  v19 = *(_WORD *)(a2 + 120);
  *(_BYTE *)(v3 + 122) = *(_BYTE *)(a2 + 122);
  *(_WORD *)(v3 + 120) = v19;
  *(_DWORD *)(v3 + 124) = *(_DWORD *)(a2 + 124);
  return v3;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::getPrivateName(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::getPrivateName(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::getPrivateName(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::getPrivateName(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::getPrivateName(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::getPrivateName(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  uint64_t v12;
  int i;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int j;
  unsigned int v45;
  char v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  const void *v64;
  void *v65;
  unsigned int v66;
  unsigned int v67;
  _BYTE *v68;
  unsigned int v69;
  uint64_t v70;
  _BYTE *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE v87[24];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (*v10 != -1)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  if (!HIBYTE(qword_1ECF4C780))
  {
    v12 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)v87 = *(_DWORD *)(v12 + 52);
    *(_QWORD *)&v87[4] = *(_QWORD *)(v12 + 56);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v87, a2, a3, a4, a5, a6, a7, a8);
  }
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), *(char *)(a1 + 40), a4, a5, a6, a7, a8);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 48) = operationGetPrivateNameOptimize;
    v14 = *(unsigned __int8 **)(a1 + 48);
    v15 = *(_QWORD *)(a1 + 56);
    v17 = *(_QWORD *)(v15 + 96);
    v16 = *(_QWORD *)(v15 + 104);
    v18 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 48) + 216) & 0xFF003FF80000 | v17;
    v19 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v19)
    {
      v20 = *(_BYTE **)(a1 + 80);
      do
      {
        v21 = *v20 & 0x7F;
        if (v21 >= 0x40)
          goto LABEL_97;
        v22 = 1 << v21;
        v18 &= ~v22;
        v16 &= ~v22;
        ++v20;
      }
      while (--v19);
    }
    v23 = *(unsigned int *)(a1 + 108);
    if ((_DWORD)v23)
    {
      v68 = *(_BYTE **)(a1 + 96);
      do
      {
        v69 = (*v68 + 32) & 0x7F;
        if (v69 >= 0x40)
          goto LABEL_97;
        v70 = 1 << v69;
        v18 &= ~v70;
        v16 &= ~v70;
        ++v68;
      }
      while (--v23);
    }
    v85 = v18;
    v86 = v16;
    v24 = *(_QWORD *)(a1 + 120);
    if ((v24 & 1) != 0)
    {
      v74 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
      if ((v24 & 2) != 0
        || ((v75 = *(unsigned int *)((v24 & 0xFFFFFFFF8) + 8), (_DWORD)v75 != 0x3FFFFFFF)
          ? (v76 = (_DWORD)v75 == -1)
          : (v76 = 1),
            v76))
      {
        v77 = 2;
      }
      else if (v75 >> 28)
      {
        v82 = v74;
        v83 = v14;
        v74 = WTF::fastMalloc((WTF *)0x10);
        v14 = v83;
        *(_QWORD *)v74 = v82;
        *(_DWORD *)(v74 + 8) = v75;
        v77 = 1;
      }
      else
      {
        v77 = v74;
        v74 = v75 << 36;
      }
      v24 = v74 | v77;
      v25 = ((v74 | v77) & 1) == 0;
    }
    else
    {
      v25 = 1;
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v87, v14, (uint64_t)&v85, a2, v24, *(_QWORD *)(a1 + 128) + 8, *(unsigned __int8 *)(a1 + 40) | 0x3000000000, *(char *)(a1 + 136), *(_WORD *)(a1 + 137), HIBYTE(*(_WORD *)(a1 + 137)), *(_BYTE *)(a1 + 40));
  }
  else
  {
    v33 = *(_QWORD **)(a1 + 48);
    v34 = *(_QWORD *)(a1 + 56);
    v36 = *(_QWORD *)(v34 + 96);
    v35 = *(_QWORD *)(v34 + 104);
    v37 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 48) + 216) & 0xFF003FF80000 | v36;
    v38 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v38)
    {
      v39 = *(_BYTE **)(a1 + 80);
      do
      {
        v40 = *v39 & 0x7F;
        if (v40 >= 0x40)
          goto LABEL_97;
        v41 = 1 << v40;
        v37 &= ~v41;
        v35 &= ~v41;
        ++v39;
      }
      while (--v38);
    }
    v42 = *(unsigned int *)(a1 + 108);
    if ((_DWORD)v42)
    {
      v71 = *(_BYTE **)(a1 + 96);
      do
      {
        v72 = (*v71 + 32) & 0x7F;
        if (v72 >= 0x40)
          goto LABEL_97;
        v73 = 1 << v72;
        v37 &= ~v73;
        v35 &= ~v73;
        ++v71;
      }
      while (--v42);
    }
    v85 = v37;
    v86 = v35;
    v24 = *(_QWORD *)(a1 + 120);
    if ((v24 & 1) != 0)
    {
      v78 = *(_QWORD *)(v24 & 0xFFFFFFFF8);
      if ((v24 & 2) != 0
        || ((v79 = *(unsigned int *)((v24 & 0xFFFFFFFF8) + 8), (_DWORD)v79 != 0x3FFFFFFF)
          ? (v80 = (_DWORD)v79 == -1)
          : (v80 = 1),
            v80))
      {
        v81 = 2;
      }
      else
      {
        v81 = v78;
        v84 = v33;
        if (v79 >> 28)
        {
          v78 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v78 = v81;
          *(_DWORD *)(v78 + 8) = v79;
          v81 = 1;
        }
        else
        {
          v78 = v79 << 36;
        }
        v33 = v84;
      }
      v24 = v78 | v81;
      v25 = ((v78 | v81) & 1) == 0;
    }
    else
    {
      v25 = 1;
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v87, v33, &v85, a2, v24, *(_QWORD *)(a1 + 128) + 8, (uint64_t)operationGetPrivateNameOptimize, *(char *)(a1 + 136), *(_WORD *)(a1 + 137), HIBYTE(*(_WORD *)(a1 + 137)), *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)(a1 + 32) + 16));
  }
  v43 = *(_QWORD *)v87;
  if (!v25 && (v24 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v24 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
  for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v26, v27, v28, v29, v30, v31, v32);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v45 = j;
  if (j + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v26, v27, v28, v29, v30, v31, v32);
    v45 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v45) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v46 = 69;
  else
    v46 = 65;
  *(_QWORD *)v87 = j;
  v87[8] = v46;
  *(_WORD *)&v87[9] = 15;
  v87[11] = -1;
  LODWORD(v85) = *(_DWORD *)(a1 + 140);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v87, (unsigned int *)&v85, a2, v28, v29, v30, v31, v32);
  v47 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v47 + 36) = i;
  *(_QWORD *)(v47 + 40) = v43;
  do
    v48 = __ldaxr((unsigned int *)v47);
  while (__stlxr(v48 + 1, (unsigned int *)v47));
  v49 = WTF::fastMalloc((WTF *)0x18);
  v57 = v49;
  *(_DWORD *)(v49 + 8) = 1;
  *(_QWORD *)v49 = &off_1E3575D58;
  do
    v58 = __ldaxr((unsigned int *)v47);
  while (__stlxr(v58 + 1, (unsigned int *)v47));
  *(_QWORD *)(v49 + 16) = v47;
  v59 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v59 == *(_DWORD *)(a2 + 240))
  {
    v61 = v59 + (v59 >> 2);
    if (v61 >= 0x10)
      v62 = v61 + 1;
    else
      v62 = 16;
    if (v62 <= v59 + 1)
      v63 = v59 + 1;
    else
      v63 = v62;
    if (!(v63 >> 29))
    {
      v64 = *(const void **)(a2 + 232);
      v65 = (void *)WTF::fastMalloc((WTF *)(8 * v63));
      *(_DWORD *)(a2 + 240) = v63;
      *(_QWORD *)(a2 + 232) = v65;
      memcpy(v65, v64, 8 * v59);
      if (v64)
      {
        if (*(const void **)(a2 + 232) == v64)
        {
          *(_QWORD *)(a2 + 232) = 0;
          *(_DWORD *)(a2 + 240) = 0;
        }
        WTF::fastFree((unint64_t)v64, v50, v51, v52, v53, v54, v55, v56);
      }
      v59 = *(unsigned int *)(a2 + 244);
      v60 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v59);
      goto LABEL_47;
    }
    __break(0xC471u);
LABEL_97:
    __break(1u);
    return;
  }
  v60 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v59);
LABEL_47:
  *v60 = v57;
  *(_DWORD *)(a2 + 244) = v59 + 1;
  do
  {
    v66 = __ldaxr((unsigned int *)v47);
    v67 = v66 - 1;
  }
  while (__stlxr(v67, (unsigned int *)v47));
  if (!v67)
  {
    atomic_store(1u, (unsigned int *)v47);
    WTF::fastFree(v47, v50, v51, v52, v53, v54, v55, v56);
  }
  *(_BYTE *)(a2 + 212) = v11;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getPrivateName(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getPrivateName(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getPrivateName(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(v2 + 28);
  if (v3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
  v5 = (v3 - v4);
  v6 = a2[23];
  v7 = v5 + v6;
  if (v6 <= v5 + v6 && v6 + a2[1] >= v7)
    return JSC::JITInlineCacheGenerator::finalize(v2 + 8, a2, a2, v7);
  result = 366;
  __break(0xC471u);
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;

  v6 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)(a1 + 27640), 2);
  v31 = (unint64_t)a2;
  LOBYTE(v32) = 3;
  JSC::B3::StackmapValue::append(v6, a2, (unint64_t)&v31 + 8);
  v7 = *(_QWORD *)(a1 + 27904);
  v31 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v6, v7, (unint64_t)&v31);
  v8 = *(_QWORD *)(a1 + 27896);
  v31 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v6, v8, (unint64_t)&v31);
  *((_QWORD *)v6 + 8) |= 0x30000uLL;
  *((_QWORD *)v6 + 10) |= 0x30000uLL;
  *((_BYTE *)v6 + 168) = 2 * HIBYTE(qword_1ECF4C780);
  v14 = *(_QWORD *)(a1 + 8);
  JSC::CodeOrigin::CodeOrigin(&v34, *(const JSC::CodeOrigin **)(a1 + 28224));
  *(_QWORD *)&v31 = v14;
  JSC::CodeOrigin::CodeOrigin((uint64_t *)&v31 + 1, (const JSC::CodeOrigin *)&v34);
  v15 = v35;
  if (v35)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v32 = v15;
  v33 = a3;
  if ((v34 & 1) != 0 && (v34 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v34 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
  if (v35)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v35, v24, v25, v26, v27, v28, v29, v30);
}

unsigned int *JSC::B3::StackmapValue::setGenerator<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x30);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3575D80;
  v2 = a2[1];
  *(_QWORD *)(result + 16) = *a2;
  if ((v2 & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v7 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v7 != 0x3FFFFFFF)
        ? (v8 = (_DWORD)v7 == -1)
        : (v8 = 1),
          v8))
    {
      v9 = 2;
    }
    else if (v7 >> 28)
    {
      v12 = a2;
      v13 = result;
      v10 = v6;
      v11 = v7;
      v6 = WTF::fastMalloc((WTF *)0x10);
      a2 = v12;
      result = v13;
      *(_QWORD *)v6 = v10;
      *(_DWORD *)(v6 + 8) = v11;
      v9 = 1;
    }
    else
    {
      v9 = v6;
      v6 = v7 << 36;
    }
    v2 = v6 | v9;
  }
  *(_QWORD *)(result + 24) = v2;
  v3 = (unsigned int *)a2[2];
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = a2[3];
  *(_QWORD *)(result + 32) = v3;
  *(_QWORD *)(result + 40) = v5;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(JSC::FTL::PatchpointExceptionHandle **a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t *result;
  int v62;
  JSC::FTL::ExceptionTarget *v63[5];
  char *v64;
  char *v65;
  JSC::FTL::PatchpointExceptionHandle *v66;
  char *v67;
  uint64_t v68[2];
  char v69;
  char v70;
  int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  _BYTE v77[24];
  unsigned int *v78;
  char v79;
  char v80;
  char v81;
  unsigned int *v82;
  uint64_t v83;
  int v84;

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [5]>(a2);
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(*((_QWORD *)*a1 + 3) + 64);
  JSC::CodeOrigin::CodeOrigin(&v83, (const JSC::CodeOrigin *)(a1 + 1));
  v15 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v7, &v83);
  v84 = v15;
  if ((v83 & 1) != 0 && (v83 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v83 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(a1[2], (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v63);
  v16 = (unsigned int *)v63[0];
  JSC::FTL::ExceptionTarget::jumps(v63[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v82);
  if (v16)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v16, v17, v18, v19, v20, v21, v22, v23);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind((uint64_t)a1[2], a3, v15, v19, v20, v21, v22, v23);
  v81 = -1;
  if (HIBYTE(qword_1ECF4C780))
  {
    v62 = *(_DWORD *)(a3 + 36);
    if (!v62 || (v81 = **(_BYTE **)(a3 + 24), v62 == 1))
    {
      __break(0xC471u);
      JUMPOUT(0x197D84E5CLL);
    }
  }
  v24 = *(_DWORD *)(a3 + 20);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x197D84E98);
  }
  v25 = *(_BYTE **)(a3 + 8);
  v80 = *v25 & 0x7F;
  if (v24 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D84EA0);
  }
  v79 = v25[16] & 0x7F;
  v63[0] = (JSC::FTL::ExceptionTarget *)a1;
  v63[1] = (JSC::FTL::ExceptionTarget *)a2;
  v63[2] = (JSC::FTL::ExceptionTarget *)(a1 + 1);
  v63[3] = (JSC::FTL::ExceptionTarget *)&v84;
  v63[4] = (JSC::FTL::ExceptionTarget *)a3;
  v64 = (char *)(a1 + 3);
  v65 = &v79;
  v66 = (JSC::FTL::PatchpointExceptionHandle *)&v80;
  v67 = &v81;
  v75 = v77;
  v76 = 2;
  v26 = v78;
  JSC::JITGetByIdWithThisGenerator::generateFastPath((JSC::JITGetByIdWithThisGenerator *)(v78 + 2), (JSC::CCallHelpers *)a2, v27, v28, v29, v30, v31, v32);
  if (!HIBYTE(qword_1ECF4C780))
  {
    v73 = v26[13];
    v74 = *((_QWORD *)v26 + 7);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v75, &v73, v34, v35, v36, v37, v38, v39);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v33, v34, v35, v36, v37, v38, v39, &v72);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)v63, (uint64_t *)&v75);
  if (v26)
  {
    do
      v40 = __ldaxr(v26);
    while (__stlxr(v40 + 1, v26));
  }
  v64 = (char *)v26;
  LOBYTE(v65) = v81;
  v66 = *a1;
  JSC::B3::StackmapGenerationParams::StackmapGenerationParams((uint64_t)&v67, (const JSC::B3::StackmapGenerationParams *)a3);
  JSC::CodeOrigin::CodeOrigin(v68, (const JSC::CodeOrigin *)(a1 + 1));
  v41 = v82;
  if (v82)
  {
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 + 1, v41));
  }
  v68[1] = (uint64_t)v41;
  v69 = v80;
  v70 = v79;
  v71 = v72;
  v57 = (unint64_t)v75;
  if (v77 != v75 && v75)
  {
    v75 = 0;
    LODWORD(v76) = 0;
    WTF::fastFree(v57, v50, v51, v52, v53, v54, v55, v56);
  }
  v58 = v78;
  v78 = 0;
  if (v58)
  {
    do
    {
      v59 = __ldaxr(v58);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v58));
    if (!v60)
    {
      atomic_store(1u, v58);
      WTF::fastFree((unint64_t)v58, v50, v51, v52, v53, v54, v55, v56);
    }
  }
  result = WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::~Box((unint64_t *)&v82, v50, v51, v52, v53, v54, v55, v56);
  *(_BYTE *)(a2 + 212) = v6;
  return result;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [5]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "InBy");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

_DWORD *void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(void)#3}::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  JSC::CodeOrigin *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  _BYTE *v13;
  _DWORD *v14;
  _DWORD *result;
  unsigned __int8 v16;
  _QWORD v17[2];

  JSC::FTL::State::addStructureStubInfo(**(JSC::FTL::State ***)a2);
  v5 = v4;
  v6 = *(JSC::CodeOrigin **)(a2 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 336);
  v8 = *(int **)(a2 + 24);
  v17[0] = JSC::B3::StackmapGenerationParams::unavailableRegisters(*(JSC::B3::StackmapGenerationParams **)(a2 + 32));
  v17[1] = v9;
  v10 = *(uint64_t **)(a2 + 40);
  v11 = *(unsigned __int8 **)(a2 + 48);
  v12 = *(unsigned __int8 **)(a2 + 56);
  v13 = *(_BYTE **)(a2 + 64);
  v16 = *v12;
  v14 = (_DWORD *)WTF::fastMalloc((WTF *)0x40);
  result = WTF::Box<JSC::JITInByIdGenerator>::Data::Data<JSC::CodeBlock *,JSC::StructureStubInfo *&,JSC::JITType,JSC::CodeOrigin const&,JSC::CallSiteIndex &,JSC::RegisterSetBuilder,JSC::CacheableIdentifier const&,JSC::JSValueRegs &,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID &>(v14, v7, v5, 5u, v6, v8, (uint64_t)v17, v10, v11, &v16, v13);
  *a1 = result;
  return result;
}

uint64_t JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16[19];
  unsigned int *v17;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v17;
    *(_DWORD *)(a1 + 12) = v10 + 1;
  }
}

uint64_t void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::~(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v22;

  v9 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v22 = *(_QWORD *)(v9 + 8);
      if (v9 + 24 != v22 && v22 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 128);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 104);
  if (v13)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 88);
  if (v14)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 72);
  if (v15)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v19 = *(_QWORD *)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v19 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

_DWORD *WTF::Box<JSC::JITInByIdGenerator>::Data::Data<JSC::CodeBlock *,JSC::StructureStubInfo *&,JSC::JITType,JSC::CodeOrigin const&,JSC::CallSiteIndex &,JSC::RegisterSetBuilder,JSC::CacheableIdentifier const&,JSC::JSValueRegs &,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID &>(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, JSC::CodeOrigin *a5, int *a6, uint64_t a7, uint64_t *a8, unsigned __int8 *a9, unsigned __int8 *a10, _BYTE *a11)
{
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v28;

  *a1 = 1;
  v17 = (uint64_t)(a1 + 2);
  JSC::CodeOrigin::CodeOrigin(&v28, a5);
  LOBYTE(v26) = *a11;
  JSC::JITInByIdGenerator::JITInByIdGenerator(v17, a2, a3, 0, a4, &v28, *a6, a7, *a8, *a9, 0, *a10, v26);
  if ((v28 & 1) != 0 && (v28 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v28 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  return a1;
}

uint64_t WTF::createSharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3575DA8;
  *a1 = v4;
  return result;
}

uint64_t void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  WTF *v19;
  void *v20;
  WTF *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v4 = *((unsigned int *)a2 + 3);
  v5 = a1 + 16;
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = v4;
  if (v4 >= 3)
  {
    if (v4 >= 0x15555556)
      goto LABEL_33;
    v6 = 12 * v4;
    v5 = WTF::fastMalloc((WTF *)(12 * v4));
    *(_DWORD *)(a1 + 8) = (v6 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)a1 = v5;
  }
  v7 = *((_DWORD *)a2 + 3);
  if (v7)
  {
    v8 = *a2;
    v9 = *a2 + 12 * v7;
    do
    {
      *(_DWORD *)v5 = *(_DWORD *)v8;
      *(_QWORD *)(v5 + 4) = *(_QWORD *)(v8 + 4);
      v8 += 12;
      v5 += 12;
    }
    while (v8 != v9);
  }
  v10 = (unsigned int *)a2[5];
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  v12 = a2[8];
  v13 = *((unsigned int *)a2 + 21);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = v12;
  *(_DWORD *)(a1 + 84) = v13;
  if ((_DWORD)v13)
  {
    if (!(v13 >> 28))
    {
      v14 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v13));
      *(_DWORD *)(a1 + 80) = v13;
      *(_QWORD *)(a1 + 72) = v14;
      v15 = *((unsigned int *)a2 + 21);
      if ((_DWORD)v15)
      {
        v16 = (__int128 *)a2[9];
        v17 = 16 * v15;
        do
        {
          v18 = *v16++;
          *v14++ = v18;
          v17 -= 16;
        }
        while (v17);
      }
      goto LABEL_14;
    }
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x197D8561CLL);
  }
LABEL_14:
  v19 = (WTF *)*((unsigned int *)a2 + 25);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = (_DWORD)v19;
  if ((_DWORD)v19)
  {
    v20 = (void *)WTF::fastMalloc(v19);
    *(_DWORD *)(a1 + 96) = (_DWORD)v19;
    *(_QWORD *)(a1 + 88) = v20;
    memcpy(v20, (const void *)a2[11], *((unsigned int *)a2 + 25));
  }
  v21 = (WTF *)*((unsigned int *)a2 + 29);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 116) = (_DWORD)v21;
  if ((_DWORD)v21)
  {
    v26 = (void *)WTF::fastMalloc(v21);
    *(_DWORD *)(a1 + 112) = (_DWORD)v21;
    *(_QWORD *)(a1 + 104) = v26;
    memcpy(v26, (const void *)a2[13], *((unsigned int *)a2 + 29));
  }
  v22 = a2[16];
  *(_QWORD *)(a1 + 120) = a2[15];
  if ((v22 & 1) != 0)
  {
    v27 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || ((v28 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v28 != 0x3FFFFFFF)
        ? (v29 = (_DWORD)v28 == -1)
        : (v29 = 1),
          v29))
    {
      v30 = 2;
    }
    else if (v28 >> 28)
    {
      v31 = v28;
      v32 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v32 = v27;
      *(_DWORD *)(v32 + 8) = v31;
      v30 = 1;
      v27 = v32;
    }
    else
    {
      v30 = v27;
      v27 = v28 << 36;
    }
    v22 = v27 | v30;
  }
  *(_QWORD *)(a1 + 128) = v22;
  v23 = (unsigned int *)a2[17];
  if (v23)
  {
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
  }
  *(_QWORD *)(a1 + 136) = v23;
  *(_WORD *)(a1 + 144) = *((_WORD *)a2 + 72);
  *(_DWORD *)(a1 + 148) = *((_DWORD *)a2 + 37);
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unsigned int v59;
  int v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  __int16 v66;
  char v67;
  int v68;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v11, v12, v13, v14, v15, v16, v17, &v68);
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), *(char *)(a1 + 48), v18, v19, v20, v21, v22);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) + 48) = operationInByIdOptimize;
    v57 = *(unsigned __int8 **)(a1 + 56);
    v62 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 64));
    v63 = v58;
    JSC::CodeOrigin::CodeOrigin(&v61, (const JSC::CodeOrigin *)(a1 + 128));
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>((uint64_t)&v64, v57, (uint64_t)&v62, a2, v61, *(_QWORD *)(a1 + 136) + 8, *(unsigned __int8 *)(a1 + 48) | 0x3000000000, *(char *)(a1 + 144), *(_BYTE *)(a1 + 145), 0, *(_BYTE *)(a1 + 48));
    v32 = (unsigned int *)v64;
    v33 = v61;
    if ((v61 & 1) == 0)
      goto LABEL_5;
  }
  else
  {
    v23 = *(_QWORD **)(a1 + 56);
    v62 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 64));
    v63 = v24;
    JSC::CodeOrigin::CodeOrigin((uint64_t *)v60, (const JSC::CodeOrigin *)(a1 + 128));
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)&v64, v23, &v62, a2, *(uint64_t *)v60, *(_QWORD *)(a1 + 136) + 8, (uint64_t)operationInByIdOptimize, *(char *)(a1 + 144), *(unsigned __int8 *)(a1 + 145), *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)(a1 + 40) + 16));
    v32 = (unsigned int *)v64;
    v33 = *(_QWORD *)v60;
    if ((v60[0] & 1) == 0)
      goto LABEL_5;
  }
  if ((v33 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v33 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
LABEL_5:
  JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), (uint64_t)v25, v26, v27, v28, v29, v30, v31, (int *)&v62);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v34, v35, v36, v37, v38, v39);
  if (*(_BYTE *)(a2 + 328))
    v45 = 69;
  else
    v45 = 65;
  v64 = v62;
  v65 = v45;
  v66 = 15;
  v67 = -1;
  v59 = *(_DWORD *)(a1 + 148);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v64, &v59, a2, v40, v41, v42, v43, v44);
  v46 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(v46 + 36) = v68;
  *(_QWORD *)(v46 + 40) = v32;
  do
    v47 = __ldaxr((unsigned int *)v46);
  while (__stlxr(v47 + 1, (unsigned int *)v46));
  v64 = v46;
  v64 = 0;
  do
  {
    v55 = __ldaxr((unsigned int *)v46);
    v56 = v55 - 1;
  }
  while (__stlxr(v56, (unsigned int *)v46));
  if (!v56)
  {
    atomic_store(1u, (unsigned int *)v46);
    WTF::fastFree(v46, v48, v49, v50, v51, v52, v53, v54);
  }
  *(_BYTE *)(a2 + 212) = v10;
}

void JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, int a10, unsigned __int8 a11)
{
  JSC::AssemblerBuffer *v11;
  unsigned __int8 v12;
  char *v13;
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint8x8_t v40;
  __int32 v41;
  uint8x8_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  unsigned int v52;
  char v53;
  char v54;
  uint64_t v55;
  unsigned __int8 *v56;
  char *v57;
  uint64_t v58;
  _BYTE *v59;
  int v60;
  unsigned __int8 *v61;
  char *v62;
  unsigned __int8 *v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int8x8_t v82;
  int v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;
  int64_t v101;
  JSC::AssemblerBuffer *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  void *__dst;
  __int128 v108;
  uint64_t v109;
  uint64_t v110[8];

  v11 = (JSC::AssemblerBuffer *)a8;
  v12 = a7;
  v13 = (char *)a6;
  v14 = a5;
  v103 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if ((a5 & 1) != 0)
  {
LABEL_82:
    v89 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 2) != 0
      || ((v90 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v90 != 0x3FFFFFFF)
        ? (v91 = (_DWORD)v90 == -1)
        : (v91 = 1),
          v91))
    {
      v92 = 2;
    }
    else if (v90 >> 28)
    {
      v99 = a2;
      v100 = WTF::fastMalloc((WTF *)0x10);
      a2 = v99;
      *(_QWORD *)v100 = v89;
      *(_DWORD *)(v100 + 8) = v90;
      v92 = 1;
      v89 = v100;
    }
    else
    {
      v92 = v89;
      v89 = v90 << 36;
    }
    v14 = v89 | v92;
  }
  v104 = (uint64_t)v13;
  if ((v14 & 2) != 0)
  {
    v23 = a9;
    v24 = 0xFFFFFFFFLL;
    goto LABEL_7;
  }
  v18 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
  v19 = v14;
  if ((v14 & 1) != 0)
  {
    v93 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    v94 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v94 == 0x3FFFFFFF || (_DWORD)v94 == -1)
    {
      v96 = 2;
    }
    else if (v94 >> 28)
    {
      v97 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
      v98 = WTF::fastMalloc((WTF *)0x10);
      v18 = v97;
      *(_QWORD *)v98 = v93;
      *(_DWORD *)(v98 + 8) = v94;
      v96 = 1;
      v93 = v98;
    }
    else
    {
      v96 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v93 = v94 << 36;
    }
    v19 = v93 | v96;
  }
  v110[0] = v19;
  v22 = JSC::DFG::CodeOriginPool::addCodeOrigin(v18, v110);
  if ((v110[0] & 1) != 0 && (v110[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v110[0] & 0xFFFFFFFF8, v20, v21, a4, a5, a6, a7, a8);
  v23 = a9;
  if (v22)
  {
    v24 = v22;
LABEL_7:
    if (!*(_BYTE *)(a4 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197D85EBCLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a4, (JSC::ARM64LogicalImmediate *)v24, a4 + 264, a4, a5, a6, a7, a8);
    v30 = *(_DWORD *)(a4 + 200);
    if (v30 + 4 > *(_DWORD *)(a4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), v25, v26, v27, v28, v29, a7, a8);
      v30 = *(_DWORD *)(a4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + v30) = -1207811152;
    *(_DWORD *)(a4 + 200) += 4;
  }
  v31 = *(_QWORD *)(a3 + 8) | *(_QWORD *)a3;
  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v110, v31, a4, 3u, (uint64_t)v11, 8, a7, a8);
  v33 = 0;
  v13 = (char *)&v108 + 8;
  __dst = (char *)&v108 + 8;
  *(_QWORD *)&v108 = 3;
  if (v12 != 8)
  {
    WORD4(v108) = v12 | 0x800;
    v33 = 1;
    DWORD1(v108) = 1;
  }
  if (v23)
  {
    *((_WORD *)&v108 + v33++ + 4) = v23;
    DWORD1(v108) = v33;
  }
  if (a11 == 1)
  {
    if (!v33)
      goto LABEL_73;
  }
  else
  {
    *((_WORD *)&v108 + v33++ + 4) = a11 | 0x100;
    DWORD1(v108) = v33;
  }
  v11 = (JSC::AssemblerBuffer *)(a4 + 56);
  v12 = 1;
  a3 = 2432696320;
  do
  {
    v34 = 0;
    v35 = 0;
    v36 = (char *)__dst;
    v37 = v33;
    do
    {
      if ((*((_BYTE *)__dst + v34 + 1) & 0x40) != 0)
      {
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      v35 |= 1 << *((_BYTE *)__dst + v34 + 1);
      v34 += 2;
    }
    while (2 * v33 != v34);
    v38 = 0;
    do
    {
      v39 = *((_BYTE *)__dst + v38) & 0x7F;
      if (v39 >= 0x40)
        goto LABEL_81;
      v35 &= ~(1 << v39);
      v38 += 2;
    }
    while (2 * v33 != v38);
    v40 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
    v40.i16[0] = vaddlv_u8(v40);
    v41 = v40.i32[0];
    v42 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v35));
    v42.i16[0] = vaddlv_u8(v42);
    if (v42.i32[0] + v41)
    {
      v43 = 0;
      if (v33 <= 1)
        v44 = 1;
      else
        v44 = v33;
      v45 = 2 * v44;
      while (1)
      {
        v46 = *((unsigned __int8 *)__dst + v43 + 1);
        if ((v46 & 0x7Fu) >= 0x40)
          goto LABEL_81;
        if (((v35 >> (v46 & 0x7F)) & 1) != 0)
          break;
        v43 += 2;
        if (v45 == v43)
          goto LABEL_66;
      }
      v47 = *((unsigned __int8 *)__dst + v43);
      if (v47 != v46)
      {
        v48 = (char)v47;
        if ((char)v47 == 63)
        {
          v49 = *(_DWORD *)(a4 + 200);
          v50 = *(_DWORD *)(a4 + 192);
          if ((char)v46 == 31)
            goto LABEL_60;
          v52 = v46 & 0x1F | 0xD2800000;
        }
        else
        {
          v49 = *(_DWORD *)(a4 + 200);
          v50 = *(_DWORD *)(a4 + 192);
          v51 = v46 == 31 || v48 == 31;
          if (!v51)
          {
            v52 = v46 & 0xFFE0FFFF | ((v48 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_61;
          }
LABEL_60:
          v52 = (char)v46 | (32 * v48) | 0x91000000;
        }
LABEL_61:
        if (v49 + 4 > v50)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v11, (uint64_t)a2, v32, a4, a5, a6, a7, a8);
          v49 = *(_DWORD *)(a4 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a4 + 56) + v49) = v52;
        *(_DWORD *)(a4 + 200) += 4;
        v36 = (char *)__dst;
        v37 = DWORD1(v108);
      }
      memmove(&v36[v43], &v36[v43 + 2], 2 * v37 - v43 - 2);
      v33 = DWORD1(v108) - 1;
      goto LABEL_65;
    }
    v102 = v11;
    v53 = *(_BYTE *)__dst;
    v54 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a4, *(char *)__dst, v54, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v108) - 2);
    v55 = (DWORD1(v108) - 1);
    v51 = DWORD1(v108) == 1;
    DWORD1(v108) = v55;
    v56 = (unsigned __int8 *)__dst;
    v57 = (char *)__dst + 2 * v55;
    if (v51)
    {
      v64 = 0;
      v65 = 0;
      v60 = 0;
      a2 = (unsigned __int8 *)__dst + 2 * v55;
    }
    else
    {
      v58 = 2 * v55;
      v59 = __dst;
      while (*v59 != v54)
      {
        v59 += 2;
        v58 -= 2;
        if (!v58)
          goto LABEL_46;
      }
      *v59 = v53;
LABEL_46:
      v60 = 0;
      v61 = v56;
      a2 = (unsigned __int8 *)v57;
      v62 = v57;
      do
      {
        if (*v56 == v56[1])
        {
          v63 = v56;
          if (v62 != (char *)__dst + 2 * DWORD1(v108))
          {
            if (v56 == a2)
            {
              v63 = (unsigned __int8 *)v62;
            }
            else
            {
              v101 = v61 - a2;
              memmove(v62, a2, v61 - a2);
              v63 = (unsigned __int8 *)&v62[v101];
            }
          }
          a2 = v56 + 2;
          ++v60;
          v62 = (char *)v63;
        }
        v56 += 2;
        v61 += 2;
      }
      while (v56 < (unsigned __int8 *)v57);
      v56 = (unsigned __int8 *)__dst;
      v64 = DWORD1(v108);
      v65 = DWORD1(v108);
      v57 = v62;
    }
    v66 = &v56[2 * v64];
    a3 = 2432696320;
    if (a2 != v66)
    {
      memmove(v57, a2, v66 - a2);
      v65 = DWORD1(v108);
    }
    v33 = v65 - v60;
    v11 = v102;
LABEL_65:
    DWORD1(v108) = v33;
LABEL_66:
    ;
  }
  while (v33);
  v67 = __dst;
  if ((char *)&v108 + 8 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v108) = 0;
    WTF::fastFree((unint64_t)v67, a2, v32, a4, a5, a6, a7, a8);
  }
LABEL_73:
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v110, v103, 0x3000000008uLL, a4, a5, a6, a7, a8, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v108;
  *(_QWORD *)(a1 + 24) = v109;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v110, v68, v69, v70, v71, v72, v73, v74);
  if (v104)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a4, v103, 0, 0, 0xFFFFFFFFLL, v79, v80, v81, (uint64_t)&v105, v82);
    v83 = v105;
    if (v105 != -1)
    {
      v84 = *(unsigned int *)(v104 + 12);
      if ((_DWORD)v84 == *(_DWORD *)(v104 + 8))
      {
        v85 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v104, (void *)(v84 + 1), (unint64_t)&v105, v77, v78, v79, v80, v81);
        v87 = *v85;
        v86 = (uint64_t *)(v85 + 1);
        v83 = v87;
        LODWORD(v84) = *(_DWORD *)(v104 + 12);
      }
      else
      {
        v86 = &v106;
      }
      v88 = *(_QWORD *)v104 + 12 * v84;
      *(_DWORD *)v88 = v83;
      *(_QWORD *)(v88 + 4) = *v86;
      ++*(_DWORD *)(v104 + 12);
    }
  }
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, v75, v76, v77, v78, v79, v80, v81);
}

void JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, JSC::ARM64LogicalImmediate *a10)
{
  unint64_t v10;
  uint64_t v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint8x8_t v36;
  __int32 v37;
  uint8x8_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  BOOL v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;
  _BYTE *v50;
  char *v51;
  char *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int8x8_t v73;
  int v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char v93;
  int v94;
  char *__src;
  void *__srca;
  int v97;
  int v98;
  uint64_t v99;
  void *__dst;
  __int128 v101;
  uint64_t v102;
  uint64_t v103[9];

  v10 = a8;
  v13 = a5;
  v17 = *(_QWORD *)(*a2 + 16);
  if ((a5 & 1) != 0)
  {
    v80 = *(_QWORD *)(a5 & 0xFFFFFFFF8);
    if ((a5 & 2) != 0
      || ((v81 = *(unsigned int *)((a5 & 0xFFFFFFFF8) + 8), (_DWORD)v81 != 0x3FFFFFFF)
        ? (v82 = (_DWORD)v81 == -1)
        : (v82 = 1),
          v82))
    {
      v83 = 2;
    }
    else if (v81 >> 28)
    {
      v89 = a2;
      v90 = WTF::fastMalloc((WTF *)0x10);
      a2 = v89;
      *(_QWORD *)v90 = v80;
      *(_DWORD *)(v90 + 8) = v81;
      v83 = 1;
      v80 = v90;
    }
    else
    {
      v83 = *(_QWORD *)(a5 & 0xFFFFFFFF8);
      v80 = v81 << 36;
    }
    v13 = v80 | v83;
  }
  if ((v13 & 2) != 0)
  {
    v23 = a9;
    v24 = 0xFFFFFFFFLL;
  }
  else
  {
    v18 = *(_QWORD *)(a2[3] + 64);
    v19 = v13;
    if ((v13 & 1) != 0)
    {
      v84 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      v85 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8);
      if ((_DWORD)v85 == 0x3FFFFFFF || (_DWORD)v85 == -1)
      {
        v87 = 2;
      }
      else if (v85 >> 28)
      {
        __srca = *(void **)(v13 & 0xFFFFFFFF8);
        v97 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8);
        v88 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v88 = __srca;
        *(_DWORD *)(v88 + 8) = v97;
        v87 = 1;
        v84 = v88;
      }
      else
      {
        v87 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
        v84 = v85 << 36;
      }
      v19 = v84 | v87;
    }
    v103[0] = v19;
    v22 = JSC::DFG::CodeOriginPool::addCodeOrigin(v18, v103);
    if ((v103[0] & 1) != 0 && (v103[0] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v103[0] & 0xFFFFFFFF8, v20, v21, a4, a5, a6, a7, a8);
    v23 = a9;
    if (!v22)
      goto LABEL_10;
    v24 = v22;
  }
  if (!*(_BYTE *)(a4 + 212))
  {
    v25 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h";
    v26 = "CachedTempRegister &JSC::MacroAssemblerARM64::dataMemoryTempRegister()";
    v27 = 165;
    __break(0xC471u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a4, (JSC::ARM64LogicalImmediate *)v24, a4 + 264, a4, a5, a6, a7, a8);
  v28 = *(_DWORD *)(a4 + 200);
  if (v28 + 4 > *(_DWORD *)(a4 + 192))
  {
LABEL_90:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), (uint64_t)v25, (uint64_t)v26, v27, a5, a6, a7, a8);
    v28 = *(_DWORD *)(a4 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a4 + 56) + v28) = -1207811152;
  *(_DWORD *)(a4 + 200) += 4;
LABEL_10:
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v103, a3[1] | *a3, a4, 3u, v10, 0xFFFFFFFFLL, a7, a8);
  a3 = (_QWORD *)&v101 + 1;
  __dst = (char *)&v101 + 8;
  LODWORD(v101) = 1;
  if (!v23)
    goto LABEL_63;
  WORD4(v101) = v23;
  DWORD1(v101) = 1;
  v29 = 1;
  do
  {
    v30 = 0;
    v31 = 0;
    v32 = (char *)__dst;
    v33 = v29;
    do
    {
      if ((*((_BYTE *)__dst + v30 + 1) & 0x40) != 0)
        goto LABEL_89;
      v31 |= 1 << *((_BYTE *)__dst + v30 + 1);
      v30 += 2;
    }
    while (2 * v29 != v30);
    v34 = 0;
    do
    {
      v35 = *((_BYTE *)__dst + v34) & 0x7F;
      if (v35 >= 0x40)
        goto LABEL_89;
      v31 &= ~(1 << v35);
      v34 += 2;
    }
    while (2 * v29 != v34);
    v36 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
    v36.i16[0] = vaddlv_u8(v36);
    v37 = v36.i32[0];
    v38 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v31));
    v38.i16[0] = vaddlv_u8(v38);
    if (v38.i32[0] + v37)
    {
      v23 = 0;
      if (v29 <= 1)
        v39 = 1;
      else
        v39 = v29;
      v40 = 2 * v39;
      while (1)
      {
        v41 = *((unsigned __int8 *)__dst + v23 + 1);
        if ((v41 & 0x7Fu) >= 0x40)
          goto LABEL_89;
        if (((v31 >> (v41 & 0x7F)) & 1) != 0)
          break;
        v23 += 2;
        if (v40 == v23)
          goto LABEL_42;
      }
      v42 = *((unsigned __int8 *)__dst + v23);
      if (v42 == v41)
      {
LABEL_40:
        memmove(&v32[v23], &v32[v23 + 2], 2 * v33 - v23 - 2);
        v29 = DWORD1(v101) - 1;
        goto LABEL_41;
      }
      if ((char)v42 == 63)
      {
        if ((char)v41 != 31)
        {
          v10 = v41 & 0x1F | 0xD2800000;
          goto LABEL_37;
        }
      }
      else
      {
        v43 = v41 == 31 || (char)v42 == 31;
        if (!v43)
        {
          v10 = v41 & 0xFFE0FFFF | ((v42 & 0x1F) << 16) | 0xAA0003E0;
LABEL_37:
          v44 = *(_DWORD *)(a4 + 200);
          if (v44 + 4 > *(_DWORD *)(a4 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), (uint64_t)v25, (uint64_t)v26, v27, a5, a6, a7, a8);
            v44 = *(_DWORD *)(a4 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a4 + 56) + v44) = v10;
          *(_DWORD *)(a4 + 200) += 4;
          v32 = (char *)__dst;
          v33 = DWORD1(v101);
          goto LABEL_40;
        }
      }
      v10 = (char)v41 | (32 * (char)v42) | 0x91000000;
      goto LABEL_37;
    }
    v23 = *((char *)__dst + 1);
    v93 = *(_BYTE *)__dst;
    JSC::MacroAssemblerARM64::swap(a4, *(char *)__dst, v23, v27, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v101) - 2);
    v45 = (DWORD1(v101) - 1);
    v43 = DWORD1(v101) == 1;
    DWORD1(v101) = v45;
    v10 = (unint64_t)__dst;
    __src = (char *)__dst + 2 * v45;
    if (v43)
    {
      v46 = 0;
      v47 = 0;
      v94 = 0;
      v25 = (char *)__dst + 2 * v45;
    }
    else
    {
      v49 = 2 * v45;
      v50 = __dst;
      while (*v50 != v23)
      {
        v50 += 2;
        v49 -= 2;
        if (!v49)
          goto LABEL_52;
      }
      *v50 = v93;
LABEL_52:
      v94 = 0;
      v23 = v10;
      v25 = __src;
      v51 = __src;
      do
      {
        if (*(unsigned __int8 *)v10 == *(unsigned __int8 *)(v10 + 1))
        {
          v52 = (char *)v10;
          if (v51 != (char *)__dst + 2 * DWORD1(v101))
          {
            if ((char *)v10 == v25)
            {
              v52 = v51;
            }
            else
            {
              v91 = v23 - (_QWORD)v25;
              v92 = v51;
              memmove(v51, v25, v23 - (_QWORD)v25);
              v52 = &v92[v91];
            }
          }
          v25 = (char *)(v10 + 2);
          ++v94;
          v51 = v52;
        }
        v10 += 2;
        v23 += 2;
      }
      while (v10 < (unint64_t)__src);
      v10 = (unint64_t)__dst;
      v46 = DWORD1(v101);
      v47 = DWORD1(v101);
      __src = v51;
    }
    v48 = (char *)(v10 + 2 * v46);
    if (v25 != v48)
    {
      memmove(__src, v25, v48 - v25);
      v47 = DWORD1(v101);
    }
    v29 = v47 - v94;
LABEL_41:
    DWORD1(v101) = v29;
LABEL_42:
    ;
  }
  while (v29);
  v53 = __dst;
  if ((char *)&v101 + 8 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v101) = 0;
    WTF::fastFree((unint64_t)v53, v25, (uint64_t)v26, v27, a5, a6, a7, a8);
  }
LABEL_63:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a4, (uint64_t)a10, 1, v27, a5, a6, a7, a8);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v103, v17, a7, v54, v55, v56, v57, v58, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v101;
  *(_QWORD *)(a1 + 24) = v102;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v103, v59, v60, v61, v62, v63, v64, v65);
  if (a6)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a4, v17, 0, 0, 0xFFFFFFFFLL, v70, v71, v72, (uint64_t)&v98, v73);
    v74 = v98;
    if (v98 != -1)
    {
      v75 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v75 == *(_DWORD *)(a6 + 8))
      {
        v76 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (void *)(v75 + 1), (unint64_t)&v98, v68, v69, v70, v71, v72);
        v78 = *v76;
        v77 = (uint64_t *)(v76 + 1);
        v74 = v78;
        LODWORD(v75) = *(_DWORD *)(a6 + 12);
      }
      else
      {
        v77 = &v99;
      }
      v79 = *(_QWORD *)a6 + 12 * v75;
      *(_DWORD *)v79 = v74;
      *(_QWORD *)(v79 + 4) = *v77;
      ++*(_DWORD *)(a6 + 12);
    }
  }
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v66, v67, v68, v69, v70, v71, v72);
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>(uint64_t a1, unsigned int **a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = v4;
  v6 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3575DD0;
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(v4 + 16) = v6;
  v8 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v8 != *(_DWORD *)(a1 + 240))
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
LABEL_14:
    *v9 = v5;
    *(_DWORD *)(a1 + 244) = v8 + 1;
    return;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = *(const void **)(a1 + 232);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a1 + 240) = v12;
    *(_QWORD *)(a1 + 232) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*(const void **)(a1 + 232) == v13)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v8 = *(unsigned int *)(a1 + 244);
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
    goto LABEL_14;
  }
  __break(0xC471u);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)18,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, JSC::LinkBuffer *a2)
{
  return JSC::JITByIdGenerator::finalize((JSC::JITByIdGenerator *)(*(_QWORD *)(a1 + 16) + 8), a2, a2);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  __int128 v33;
  unsigned int *v34;

  v6 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)(a1 + 27640), 2);
  v33 = (unint64_t)a2;
  LOBYTE(v34) = 3;
  JSC::B3::StackmapValue::append(v6, a2, (unint64_t)&v33 + 8);
  v33 = (unint64_t)a3;
  LOBYTE(v34) = 3;
  JSC::B3::StackmapValue::append(v6, a3, (unint64_t)&v33 + 8);
  v7 = *(_QWORD *)(a1 + 27904);
  v33 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v6, v7, (unint64_t)&v33);
  v8 = *(_QWORD *)(a1 + 27896);
  v33 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v6, v8, (unint64_t)&v33);
  *((_QWORD *)v6 + 8) |= 0x30000uLL;
  *((_QWORD *)v6 + 10) |= 0x30000uLL;
  *((_BYTE *)v6 + 168) = HIBYTE(qword_1ECF4C780);
  v14 = *(_QWORD *)(a1 + 8);
  JSC::CodeOrigin::CodeOrigin(&v31, *(const JSC::CodeOrigin **)(a1 + 28224));
  *(_QWORD *)&v33 = v14;
  JSC::CodeOrigin::CodeOrigin((uint64_t *)&v33 + 1, (const JSC::CodeOrigin *)&v31);
  v15 = v32;
  if (v32)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v34 = v15;
  if ((v31 & 1) != 0 && (v31 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v31 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
  if (v32)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v32, v24, v25, v26, v27, v28, v29, v30);
}

unsigned int *JSC::B3::StackmapValue::setGenerator<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x28);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3575DF8;
  v2 = a2[1];
  *(_QWORD *)(result + 16) = *a2;
  if ((v2 & 1) != 0)
  {
    v5 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v6 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v6 != 0x3FFFFFFF)
        ? (v7 = (_DWORD)v6 == -1)
        : (v7 = 1),
          v7))
    {
      v8 = 2;
    }
    else if (v6 >> 28)
    {
      v11 = a2;
      v12 = result;
      v9 = v5;
      v10 = v6;
      v5 = WTF::fastMalloc((WTF *)0x10);
      a2 = v11;
      result = v12;
      *(_QWORD *)v5 = v9;
      *(_DWORD *)(v5 + 8) = v10;
      v8 = 1;
    }
    else
    {
      v8 = v5;
      v5 = v6 << 36;
    }
    v2 = v5 | v8;
  }
  *(_QWORD *)(result + 24) = v2;
  v3 = (unsigned int *)a2[2];
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 32) = v3;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(JSC::FTL::PatchpointExceptionHandle **a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _BYTE *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t *result;
  JSC::FTL::ExceptionTarget *v62[5];
  unsigned int *v63;
  char *v64;
  JSC::FTL::PatchpointExceptionHandle *v65;
  char *v66;
  uint64_t v67[2];
  char v68;
  char v69;
  char v70;
  int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  _BYTE v77[24];
  unsigned int *v78;
  char v79;
  char v80;
  char v81;
  char v82;
  unsigned int *v83;
  uint64_t v84;
  int v85;

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [5]>(a2);
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(*((_QWORD *)*a1 + 3) + 64);
  JSC::CodeOrigin::CodeOrigin(&v84, (const JSC::CodeOrigin *)(a1 + 1));
  v15 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v7, &v84);
  v85 = v15;
  if ((v84 & 1) != 0 && (v84 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v84 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(a1[2], (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v62);
  v16 = (unsigned int *)v62[0];
  JSC::FTL::ExceptionTarget::jumps(v62[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v83);
  if (v16)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v16, v17, v18, v19, v20, v21, v22, v23);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind((uint64_t)a1[2], a3, v15, v19, v20, v21, v22, v23);
  v82 = -1;
  if (HIBYTE(qword_1ECF4C780))
  {
    if (!*(_DWORD *)(a3 + 36))
    {
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x197D86E80);
    }
    v82 = **(_BYTE **)(a3 + 24);
  }
  v24 = *(_DWORD *)(a3 + 20);
  if (!v24)
    goto LABEL_33;
  v25 = *(_BYTE **)(a3 + 8);
  v81 = *v25 & 0x7F;
  if (v24 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D86E88);
  }
  v80 = v25[16] & 0x7F;
  if (v24 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D86E90);
  }
  v79 = v25[32] & 0x7F;
  v62[0] = (JSC::FTL::ExceptionTarget *)a1;
  v62[1] = (JSC::FTL::ExceptionTarget *)a2;
  v62[2] = (JSC::FTL::ExceptionTarget *)(a1 + 1);
  v62[3] = (JSC::FTL::ExceptionTarget *)&v85;
  v62[4] = (JSC::FTL::ExceptionTarget *)a3;
  v63 = (unsigned int *)&v80;
  v64 = &v79;
  v65 = (JSC::FTL::PatchpointExceptionHandle *)&v81;
  v66 = &v82;
  v75 = v77;
  v76 = 2;
  v26 = v78;
  JSC::JITDelByValGenerator::generateFastPath((JSC::JITDelByValGenerator *)(v78 + 2), (JSC::CCallHelpers *)a2, v27, v28, v29, v30, v31, v32);
  if (!HIBYTE(qword_1ECF4C780))
  {
    v73 = v26[12];
    v74 = *(_QWORD *)(v26 + 13);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v75, &v73, v34, v35, v36, v37, v38, v39);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v33, v34, v35, v36, v37, v38, v39, &v72);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)v62, (uint64_t *)&v75);
  if (v26)
  {
    do
      v40 = __ldaxr(v26);
    while (__stlxr(v40 + 1, v26));
  }
  v63 = v26;
  LOBYTE(v64) = v82;
  v65 = *a1;
  JSC::B3::StackmapGenerationParams::StackmapGenerationParams((uint64_t)&v66, (const JSC::B3::StackmapGenerationParams *)a3);
  JSC::CodeOrigin::CodeOrigin(v67, (const JSC::CodeOrigin *)(a1 + 1));
  v41 = v83;
  if (v83)
  {
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 + 1, v41));
  }
  v67[1] = (uint64_t)v41;
  v68 = v81;
  v69 = v80;
  v70 = v79;
  v71 = v72;
  v57 = (unint64_t)v75;
  if (v77 != v75 && v75)
  {
    v75 = 0;
    LODWORD(v76) = 0;
    WTF::fastFree(v57, v50, v51, v52, v53, v54, v55, v56);
  }
  v58 = v78;
  v78 = 0;
  if (v58)
  {
    do
    {
      v59 = __ldaxr(v58);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v58));
    if (!v60)
    {
      atomic_store(1u, v58);
      WTF::fastFree((unint64_t)v58, v50, v51, v52, v53, v54, v55, v56);
    }
  }
  result = WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::~Box((unint64_t *)&v83, v50, v51, v52, v53, v54, v55, v56);
  *(_BYTE *)(a2 + 212) = v6;
  return result;
}

_DWORD *void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(void)#3}::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  JSC::CodeOrigin *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  _DWORD *v14;
  _DWORD *result;
  char v16;
  _QWORD v17[2];
  char v18;

  JSC::FTL::State::addStructureStubInfo(**(JSC::FTL::State ***)a2);
  v5 = v4;
  v6 = *(JSC::CodeOrigin **)(a2 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 336);
  v18 = 19;
  v8 = *(int **)(a2 + 24);
  v17[0] = JSC::B3::StackmapGenerationParams::unavailableRegisters(*(JSC::B3::StackmapGenerationParams **)(a2 + 32));
  v17[1] = v9;
  v10 = *(char **)(a2 + 40);
  v11 = *(char **)(a2 + 48);
  v12 = *(char **)(a2 + 56);
  v13 = *(_BYTE **)(a2 + 64);
  v16 = *v12;
  v14 = (_DWORD *)WTF::fastMalloc((WTF *)0x40);
  result = WTF::Box<JSC::JITInByValGenerator>::Data::Data<JSC::CodeBlock *,JSC::StructureStubInfo *&,JSC::JITType,JSC::CodeOrigin const&,JSC::CallSiteIndex &,JSC::AccessType,JSC::RegisterSetBuilder,JSC::JSValueRegs &,JSC::JSValueRegs const&,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID const&,JSC::ARM64Registers::RegisterID&>(v14, v7, v5, 5u, v6, v8, &v18, (uint64_t)v17, v10, v11, &v16, v13);
  *a1 = result;
  return result;
}

uint64_t JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16[19];
  unsigned int *v17;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v17;
    *(_DWORD *)(a1 + 12) = v10 + 1;
  }
}

_DWORD *WTF::Box<JSC::JITInByValGenerator>::Data::Data<JSC::CodeBlock *,JSC::StructureStubInfo *&,JSC::JITType,JSC::CodeOrigin const&,JSC::CallSiteIndex &,JSC::AccessType,JSC::RegisterSetBuilder,JSC::JSValueRegs &,JSC::JSValueRegs const&,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID const&,JSC::ARM64Registers::RegisterID&>(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, JSC::CodeOrigin *a5, int *a6, char *a7, uint64_t a8, char *a9, char *a10, char *a11, _BYTE *a12)
{
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v29;

  *a1 = 1;
  v17 = (uint64_t)(a1 + 2);
  JSC::CodeOrigin::CodeOrigin(&v29, a5);
  BYTE1(v26) = *a12;
  LOBYTE(v26) = -1;
  JSC::JITInByValGenerator::JITInByValGenerator(v17, a2, a3, 0, a4, &v29, *a6, *a7, a8, *a9, 0, *a10, 0, *a11, v26);
  if ((v29 & 1) != 0 && (v29 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v29 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  return a1;
}

uint64_t WTF::createSharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3575E20;
  *a1 = v4;
  return result;
}

uint64_t void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  WTF *v19;
  void *v20;
  WTF *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  __int16 v25;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  uint64_t v33;

  v4 = *((unsigned int *)a2 + 3);
  v5 = a1 + 16;
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = v4;
  if (v4 >= 3)
  {
    if (v4 >= 0x15555556)
      goto LABEL_33;
    v6 = 12 * v4;
    v5 = WTF::fastMalloc((WTF *)(12 * v4));
    *(_DWORD *)(a1 + 8) = (v6 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)a1 = v5;
  }
  v7 = *((_DWORD *)a2 + 3);
  if (v7)
  {
    v8 = *a2;
    v9 = *a2 + 12 * v7;
    do
    {
      *(_DWORD *)v5 = *(_DWORD *)v8;
      *(_QWORD *)(v5 + 4) = *(_QWORD *)(v8 + 4);
      v8 += 12;
      v5 += 12;
    }
    while (v8 != v9);
  }
  v10 = (unsigned int *)a2[5];
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  v12 = a2[8];
  v13 = *((unsigned int *)a2 + 21);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = v12;
  *(_DWORD *)(a1 + 84) = v13;
  if ((_DWORD)v13)
  {
    if (!(v13 >> 28))
    {
      v14 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v13));
      *(_DWORD *)(a1 + 80) = v13;
      *(_QWORD *)(a1 + 72) = v14;
      v15 = *((unsigned int *)a2 + 21);
      if ((_DWORD)v15)
      {
        v16 = (__int128 *)a2[9];
        v17 = 16 * v15;
        do
        {
          v18 = *v16++;
          *v14++ = v18;
          v17 -= 16;
        }
        while (v17);
      }
      goto LABEL_14;
    }
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x197D87360);
  }
LABEL_14:
  v19 = (WTF *)*((unsigned int *)a2 + 25);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = (_DWORD)v19;
  if ((_DWORD)v19)
  {
    v20 = (void *)WTF::fastMalloc(v19);
    *(_DWORD *)(a1 + 96) = (_DWORD)v19;
    *(_QWORD *)(a1 + 88) = v20;
    memcpy(v20, (const void *)a2[11], *((unsigned int *)a2 + 25));
  }
  v21 = (WTF *)*((unsigned int *)a2 + 29);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 116) = (_DWORD)v21;
  if ((_DWORD)v21)
  {
    v27 = (void *)WTF::fastMalloc(v21);
    *(_DWORD *)(a1 + 112) = (_DWORD)v21;
    *(_QWORD *)(a1 + 104) = v27;
    memcpy(v27, (const void *)a2[13], *((unsigned int *)a2 + 29));
  }
  v22 = a2[16];
  *(_QWORD *)(a1 + 120) = a2[15];
  if ((v22 & 1) != 0)
  {
    v28 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || ((v29 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v29 != 0x3FFFFFFF)
        ? (v30 = (_DWORD)v29 == -1)
        : (v30 = 1),
          v30))
    {
      v31 = 2;
    }
    else if (v29 >> 28)
    {
      v32 = v29;
      v33 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v33 = v28;
      *(_DWORD *)(v33 + 8) = v32;
      v31 = 1;
      v28 = v33;
    }
    else
    {
      v31 = v28;
      v28 = v29 << 36;
    }
    v22 = v28 | v31;
  }
  *(_QWORD *)(a1 + 128) = v22;
  v23 = (unsigned int *)a2[17];
  if (v23)
  {
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
  }
  *(_QWORD *)(a1 + 136) = v23;
  v25 = *((_WORD *)a2 + 72);
  *(_BYTE *)(a1 + 146) = *((_BYTE *)a2 + 146);
  *(_WORD *)(a1 + 144) = v25;
  *(_DWORD *)(a1 + 148) = *((_DWORD *)a2 + 37);
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unsigned int v59;
  int v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  __int16 v66;
  char v67;
  int v68;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v11, v12, v13, v14, v15, v16, v17, &v68);
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), *(char *)(a1 + 48), v18, v19, v20, v21, v22);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) + 48) = operationInByValOptimize;
    v57 = *(unsigned __int8 **)(a1 + 56);
    v62 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 64));
    v63 = v58;
    JSC::CodeOrigin::CodeOrigin(&v61, (const JSC::CodeOrigin *)(a1 + 128));
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)&v64, v57, (uint64_t)&v62, a2, v61, *(_QWORD *)(a1 + 136) + 8, *(unsigned __int8 *)(a1 + 48) | 0x3000000000, *(char *)(a1 + 144), *(_BYTE *)(a1 + 145), 0, *(_BYTE *)(a1 + 146), 0, *(_BYTE *)(a1 + 48));
    v32 = (unsigned int *)v64;
    v33 = v61;
    if ((v61 & 1) == 0)
      goto LABEL_5;
  }
  else
  {
    v23 = *(unsigned __int8 **)(a1 + 56);
    v62 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 64));
    v63 = v24;
    JSC::CodeOrigin::CodeOrigin((uint64_t *)v60, (const JSC::CodeOrigin *)(a1 + 128));
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)&v64, v23, &v62, a2, *(uint64_t *)v60, *(_QWORD *)(a1 + 136) + 8, *(char *)(a1 + 144), *(unsigned __int8 *)(a1 + 145), *(unsigned __int8 *)(a1 + 146), *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)(a1 + 40) + 16));
    v32 = (unsigned int *)v64;
    v33 = *(_QWORD *)v60;
    if ((v60[0] & 1) == 0)
      goto LABEL_5;
  }
  if ((v33 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v33 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
LABEL_5:
  JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), (uint64_t)v25, v26, v27, v28, v29, v30, v31, (int *)&v62);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v34, v35, v36, v37, v38, v39);
  if (*(_BYTE *)(a2 + 328))
    v45 = 69;
  else
    v45 = 65;
  v64 = v62;
  v65 = v45;
  v66 = 15;
  v67 = -1;
  v59 = *(_DWORD *)(a1 + 148);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v64, &v59, a2, v40, v41, v42, v43, v44);
  v46 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(v46 + 36) = v68;
  *(_QWORD *)(v46 + 40) = v32;
  do
    v47 = __ldaxr((unsigned int *)v46);
  while (__stlxr(v47 + 1, (unsigned int *)v46));
  v64 = v46;
  v64 = 0;
  do
  {
    v55 = __ldaxr((unsigned int *)v46);
    v56 = v55 - 1;
  }
  while (__stlxr(v56, (unsigned int *)v46));
  if (!v56)
  {
    atomic_store(1u, (unsigned int *)v46);
    WTF::fastFree(v46, v48, v49, v50, v51, v52, v53, v54);
  }
  *(_BYTE *)(a2 + 212) = v10;
}

void JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, int a10, unsigned __int8 a11, int a12, unsigned __int8 a13)
{
  JSC::AssemblerBuffer *v13;
  unsigned __int8 v14;
  uint64_t v15;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint8x8_t v43;
  __int32 v44;
  uint8x8_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  unsigned int v55;
  char v56;
  char v57;
  uint64_t v58;
  unsigned __int8 *v59;
  char *v60;
  uint64_t v61;
  _BYTE *v62;
  int v63;
  unsigned __int8 *v64;
  char *v65;
  unsigned __int8 *v66;
  int64_t v67;
  uint64_t v68;
  int v69;
  unsigned __int8 *v70;
  void *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int8x8_t v87;
  int v88;
  uint64_t v89;
  _DWORD *v90;
  uint64_t *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  char *v105;
  JSC::AssemblerBuffer *v106;
  uint64_t v107;
  uint64_t v108;
  int v110;
  uint64_t v111;
  void *__dst;
  __int128 v113;
  uint64_t v114;
  uint64_t v115[9];

  v13 = (JSC::AssemblerBuffer *)a8;
  v14 = a7;
  v15 = a5;
  v19 = *(char **)(*(_QWORD *)a2 + 16);
  if ((a5 & 1) != 0)
  {
LABEL_88:
    v94 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v95 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v95 != 0x3FFFFFFF)
        ? (v96 = (_DWORD)v95 == -1)
        : (v96 = 1),
          v96))
    {
      v97 = 2;
    }
    else if (v95 >> 28)
    {
      v103 = a2;
      v104 = WTF::fastMalloc((WTF *)0x10);
      a2 = v103;
      *(_QWORD *)v104 = v94;
      *(_DWORD *)(v104 + 8) = v95;
      v97 = 1;
      v94 = v104;
    }
    else
    {
      v97 = v94;
      v94 = v95 << 36;
    }
    v15 = v94 | v97;
  }
  v108 = (uint64_t)v19;
  if ((v15 & 2) != 0)
  {
    v25 = a9;
    v26 = a11;
    v27 = 0xFFFFFFFFLL;
    goto LABEL_7;
  }
  v20 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
  v21 = v15;
  if ((v15 & 1) != 0)
  {
    v98 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    v99 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v99 == 0x3FFFFFFF || (_DWORD)v99 == -1)
    {
      v101 = 2;
    }
    else if (v99 >> 28)
    {
      v107 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
      v102 = WTF::fastMalloc((WTF *)0x10);
      v20 = v107;
      *(_QWORD *)v102 = v98;
      *(_DWORD *)(v102 + 8) = v99;
      v101 = 1;
      v98 = v102;
    }
    else
    {
      v101 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v98 = v99 << 36;
    }
    v21 = v98 | v101;
  }
  v115[0] = v21;
  v24 = JSC::DFG::CodeOriginPool::addCodeOrigin(v20, v115);
  if ((v115[0] & 1) != 0 && (v115[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v115[0] & 0xFFFFFFFF8, v22, v23, a4, a5, a6, a7, a8);
  v25 = a9;
  v26 = a11;
  if (v24)
  {
    v27 = v24;
LABEL_7:
    if (!*(_BYTE *)(a4 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197D87C70);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a4, (JSC::ARM64LogicalImmediate *)v27, a4 + 264, a4, a5, a6, a7, a8);
    v33 = *(_DWORD *)(a4 + 200);
    if (v33 + 4 > *(_DWORD *)(a4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), v28, v29, v30, v31, v32, a7, a8);
      v33 = *(_DWORD *)(a4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + v33) = -1207811152;
    *(_DWORD *)(a4 + 200) += 4;
  }
  v34 = *(_QWORD *)(a3 + 8) | *(_QWORD *)a3;
  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v115, v34, a4, 5u, (uint64_t)v13, 8, a7, a8);
  v19 = (char *)&v113 + 8;
  __dst = (char *)&v113 + 8;
  *(_QWORD *)&v113 = 4;
  if (v14 != 8)
  {
    WORD4(v113) = v14 | 0x800;
    v36 = 1;
    DWORD1(v113) = 1;
    if (!v25)
      goto LABEL_14;
    goto LABEL_13;
  }
  v36 = 0;
  if (v25)
  {
LABEL_13:
    *((_WORD *)&v113 + v36++ + 4) = v25;
    DWORD1(v113) = v36;
  }
LABEL_14:
  if (v26 != 1)
  {
    *((_WORD *)&v113 + v36++ + 4) = v26 | 0x100;
    DWORD1(v113) = v36;
  }
  if (a13 == 2)
  {
    if (!v36)
      goto LABEL_77;
  }
  else
  {
    *((_WORD *)&v113 + v36++ + 4) = a13 | 0x200;
    DWORD1(v113) = v36;
  }
  v13 = (JSC::AssemblerBuffer *)(a4 + 56);
  v14 = 1;
  a3 = 2432696320;
  do
  {
    v37 = 0;
    v38 = 0;
    v39 = (char *)__dst;
    v40 = v36;
    do
    {
      if ((*((_BYTE *)__dst + v37 + 1) & 0x40) != 0)
      {
LABEL_87:
        __break(1u);
        goto LABEL_88;
      }
      v38 |= 1 << *((_BYTE *)__dst + v37 + 1);
      v37 += 2;
    }
    while (2 * v36 != v37);
    v41 = 0;
    do
    {
      v42 = *((_BYTE *)__dst + v41) & 0x7F;
      if (v42 >= 0x40)
        goto LABEL_87;
      v38 &= ~(1 << v42);
      v41 += 2;
    }
    while (2 * v36 != v41);
    v43 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
    v43.i16[0] = vaddlv_u8(v43);
    v44 = v43.i32[0];
    v45 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v38));
    v45.i16[0] = vaddlv_u8(v45);
    if (v45.i32[0] + v44)
    {
      v46 = 0;
      if (v36 <= 1)
        v47 = 1;
      else
        v47 = v36;
      v48 = 2 * v47;
      while (1)
      {
        v49 = *((unsigned __int8 *)__dst + v46 + 1);
        if ((v49 & 0x7Fu) >= 0x40)
          goto LABEL_87;
        if (((v38 >> (v49 & 0x7F)) & 1) != 0)
          break;
        v46 += 2;
        if (v48 == v46)
          goto LABEL_68;
      }
      v50 = *((unsigned __int8 *)__dst + v46);
      if (v50 != v49)
      {
        v51 = (char)v50;
        if ((char)v50 == 63)
        {
          v52 = *(_DWORD *)(a4 + 200);
          v53 = *(_DWORD *)(a4 + 192);
          if ((char)v49 == 31)
            goto LABEL_62;
          v55 = v49 & 0x1F | 0xD2800000;
        }
        else
        {
          v52 = *(_DWORD *)(a4 + 200);
          v53 = *(_DWORD *)(a4 + 192);
          v54 = v49 == 31 || v51 == 31;
          if (!v54)
          {
            v55 = v49 & 0xFFE0FFFF | ((v51 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_63;
          }
LABEL_62:
          v55 = (char)v49 | (32 * v51) | 0x91000000;
        }
LABEL_63:
        if (v52 + 4 > v53)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v13, (uint64_t)a2, v35, a4, a5, a6, a7, a8);
          v52 = *(_DWORD *)(a4 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a4 + 56) + v52) = v55;
        *(_DWORD *)(a4 + 200) += 4;
        v39 = (char *)__dst;
        v40 = DWORD1(v113);
      }
      memmove(&v39[v46], &v39[v46 + 2], 2 * v40 - v46 - 2);
      v36 = DWORD1(v113) - 1;
      goto LABEL_67;
    }
    v106 = v13;
    v56 = *(_BYTE *)__dst;
    v57 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a4, *(char *)__dst, v57, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v113) - 2);
    v58 = (DWORD1(v113) - 1);
    v54 = DWORD1(v113) == 1;
    DWORD1(v113) = v58;
    v59 = (unsigned __int8 *)__dst;
    v60 = (char *)__dst + 2 * v58;
    if (v54)
    {
      v68 = 0;
      v69 = 0;
      v63 = 0;
      a2 = (unsigned __int8 *)__dst + 2 * v58;
    }
    else
    {
      v61 = 2 * v58;
      v62 = __dst;
      while (*v62 != v57)
      {
        v62 += 2;
        v61 -= 2;
        if (!v61)
          goto LABEL_47;
      }
      *v62 = v56;
LABEL_47:
      v63 = 0;
      v64 = v59;
      a2 = (unsigned __int8 *)v60;
      v65 = v60;
      do
      {
        if (*v59 == v59[1])
        {
          v66 = v59;
          if (v65 != (char *)__dst + 2 * DWORD1(v113))
          {
            v105 = v60;
            if (v59 == a2)
            {
              v66 = (unsigned __int8 *)v65;
            }
            else
            {
              v67 = v64 - a2;
              memmove(v65, a2, v64 - a2);
              v66 = (unsigned __int8 *)&v65[v67];
            }
            v60 = v105;
          }
          a2 = v59 + 2;
          ++v63;
          v65 = (char *)v66;
        }
        v59 += 2;
        v64 += 2;
      }
      while (v59 < (unsigned __int8 *)v60);
      v59 = (unsigned __int8 *)__dst;
      v68 = DWORD1(v113);
      v69 = DWORD1(v113);
      v60 = v65;
    }
    v70 = &v59[2 * v68];
    a3 = 2432696320;
    if (a2 != v70)
    {
      memmove(v60, a2, v70 - a2);
      v69 = DWORD1(v113);
    }
    v36 = v69 - v63;
    v13 = v106;
LABEL_67:
    DWORD1(v113) = v36;
LABEL_68:
    ;
  }
  while (v36);
  v71 = __dst;
  if ((char *)&v113 + 8 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v113) = 0;
    WTF::fastFree((unint64_t)v71, a2, v35, a4, a5, a6, a7, a8);
  }
LABEL_77:
  v72 = *(_DWORD *)(a4 + 200);
  if (v72 + 4 > *(_DWORD *)(a4 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), (uint64_t)a2, v35, a4, a5, a6, a7, a8);
    v72 = *(_DWORD *)(a4 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a4 + 56) + v72) = -763363325;
  *(_DWORD *)(a4 + 200) += 4;
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v115, v108, 0x3000000008uLL, a4, a5, a6, a7, a8, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v113;
  *(_QWORD *)(a1 + 24) = v114;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v115, v73, v74, v75, v76, v77, v78, v79);
  if (a6)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a4, v108, 0, 0, 0xFFFFFFFFLL, v84, v85, v86, (uint64_t)&v110, v87);
    v88 = v110;
    if (v110 != -1)
    {
      v89 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v89 == *(_DWORD *)(a6 + 8))
      {
        v90 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (void *)(v89 + 1), (unint64_t)&v110, v82, v83, v84, v85, v86);
        v92 = *v90;
        v91 = (uint64_t *)(v90 + 1);
        v88 = v92;
        LODWORD(v89) = *(_DWORD *)(a6 + 12);
      }
      else
      {
        v91 = &v111;
      }
      v93 = *(_QWORD *)a6 + 12 * v89;
      *(_DWORD *)v93 = v88;
      *(_QWORD *)(v93 + 4) = *v91;
      ++*(_DWORD *)(a6 + 12);
    }
  }
  if ((v15 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v15 & 0xFFFFFFFF8, v80, v81, v82, v83, v84, v85, v86);
}

void JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, JSC::ARM64LogicalImmediate *a10)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint8x8_t v39;
  __int32 v40;
  uint8x8_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  char v52;
  char v53;
  uint64_t v54;
  unsigned __int8 *v55;
  char *v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  unsigned __int8 *v60;
  char *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  int v64;
  unsigned __int8 *v65;
  void *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int8x8_t v87;
  int v88;
  uint64_t v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 *v101;
  uint64_t v102;
  int64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  JSC::AssemblerBuffer *v108;
  int v109;
  uint64_t v110;
  void *__dst;
  __int128 v112;
  uint64_t v113;
  uint64_t v114[9];

  LOBYTE(v10) = a8;
  v11 = (uint64_t *)a7;
  v13 = a5;
  v17 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if ((a5 & 1) != 0)
  {
LABEL_83:
    v92 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v93 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v93 != 0x3FFFFFFF)
        ? (v94 = (_DWORD)v93 == -1)
        : (v94 = 1),
          v94))
    {
      v95 = 2;
    }
    else if (v93 >> 28)
    {
      v101 = a2;
      v102 = WTF::fastMalloc((WTF *)0x10);
      a2 = v101;
      *(_QWORD *)v102 = v92;
      *(_DWORD *)(v102 + 8) = v93;
      v95 = 1;
      v92 = v102;
    }
    else
    {
      v95 = v92;
      v92 = v93 << 36;
    }
    v13 = v92 | v95;
  }
  if ((v13 & 2) != 0)
  {
    v10 = v10;
    v23 = a9;
    v24 = 0xFFFFFFFFLL;
    goto LABEL_7;
  }
  v18 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
  v19 = v13;
  if ((v13 & 1) != 0)
  {
    v107 = v17;
    v96 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    v97 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v97 == 0x3FFFFFFF || (_DWORD)v97 == -1)
    {
      v99 = 2;
    }
    else if (v97 >> 28)
    {
      v108 = *(JSC::AssemblerBuffer **)(*((_QWORD *)a2 + 3) + 64);
      v100 = WTF::fastMalloc((WTF *)0x10);
      v18 = (uint64_t)v108;
      *(_QWORD *)v100 = v96;
      *(_DWORD *)(v100 + 8) = v97;
      v99 = 1;
      v96 = v100;
    }
    else
    {
      v99 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      v96 = v97 << 36;
    }
    v19 = v96 | v99;
    v17 = v107;
  }
  v114[0] = v19;
  v22 = JSC::DFG::CodeOriginPool::addCodeOrigin(v18, v114);
  if ((v114[0] & 1) != 0 && (v114[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v114[0] & 0xFFFFFFFF8, v20, v21, a4, a5, a6, a7, a8);
  v10 = v10;
  v23 = a9;
  if (v22)
  {
    v24 = v22;
LABEL_7:
    if (!*(_BYTE *)(a4 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197D8831CLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a4, (JSC::ARM64LogicalImmediate *)v24, a4 + 264, a4, a5, a6, a7, a8);
    v30 = *(_DWORD *)(a4 + 200);
    if (v30 + 4 > *(_DWORD *)(a4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), v25, v26, v27, v28, v29, a7, a8);
      v30 = *(_DWORD *)(a4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + v30) = -1207811152;
    *(_DWORD *)(a4 + 200) += 4;
  }
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v114, a3[1] | *a3, a4, 5u, (uint64_t)v11, 0xFFFFFFFFLL, a7, a8);
  a3 = (_QWORD *)&v112 + 1;
  __dst = (char *)&v112 + 8;
  LODWORD(v112) = 2;
  if (!v10)
  {
    if (v23 == 1)
    {
      v11 = &v110;
      goto LABEL_72;
    }
    v32 = 0;
    goto LABEL_16;
  }
  WORD4(v112) = v10;
  v32 = 1;
  DWORD1(v112) = 1;
  if (v23 != 1)
  {
LABEL_16:
    *((_WORD *)&v112 + v32++ + 4) = v23 | 0x100;
    DWORD1(v112) = v32;
  }
  v11 = &v110;
  LOBYTE(v10) = 1;
  do
  {
    v33 = 0;
    v34 = 0;
    v35 = (char *)__dst;
    v36 = v32;
    do
    {
      if ((*((_BYTE *)__dst + v33 + 1) & 0x40) != 0)
      {
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      v34 |= 1 << *((_BYTE *)__dst + v33 + 1);
      v33 += 2;
    }
    while (2 * v32 != v33);
    v37 = 0;
    do
    {
      v38 = *((_BYTE *)__dst + v37) & 0x7F;
      if (v38 >= 0x40)
        goto LABEL_82;
      v34 &= ~(1 << v38);
      v37 += 2;
    }
    while (2 * v32 != v37);
    v39 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
    v39.i16[0] = vaddlv_u8(v39);
    v40 = v39.i32[0];
    v41 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v34));
    v41.i16[0] = vaddlv_u8(v41);
    if (v41.i32[0] + v40)
    {
      v42 = 0;
      if (v32 <= 1)
        v43 = 1;
      else
        v43 = v32;
      v44 = 2 * v43;
      while (1)
      {
        v45 = *((unsigned __int8 *)__dst + v42 + 1);
        if ((v45 & 0x7Fu) >= 0x40)
          goto LABEL_82;
        if (((v34 >> (v45 & 0x7F)) & 1) != 0)
          break;
        v42 += 2;
        if (v44 == v42)
          goto LABEL_68;
      }
      v46 = *((unsigned __int8 *)__dst + v42);
      if (v46 != v45)
      {
        v47 = (char)v46;
        if ((char)v46 == 63)
        {
          v48 = *(_DWORD *)(a4 + 200);
          v49 = *(_DWORD *)(a4 + 192);
          if ((char)v45 == 31)
            goto LABEL_62;
          v51 = v45 & 0x1F | 0xD2800000;
        }
        else
        {
          v48 = *(_DWORD *)(a4 + 200);
          v49 = *(_DWORD *)(a4 + 192);
          v50 = v45 == 31 || v47 == 31;
          if (!v50)
          {
            v51 = v45 & 0xFFE0FFFF | ((v47 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_63;
          }
LABEL_62:
          v51 = (char)v45 | (32 * v47) | 0x91000000;
        }
LABEL_63:
        if (v48 + 4 > v49)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), (uint64_t)a2, v31, a4, a5, a6, a7, a8);
          v48 = *(_DWORD *)(a4 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a4 + 56) + v48) = v51;
        *(_DWORD *)(a4 + 200) += 4;
        v35 = (char *)__dst;
        v36 = DWORD1(v112);
      }
      memmove(&v35[v42], &v35[v42 + 2], 2 * v36 - v42 - 2);
      v32 = DWORD1(v112) - 1;
      goto LABEL_67;
    }
    v106 = v17;
    v52 = *(_BYTE *)__dst;
    v53 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a4, *(char *)__dst, v53, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v112) - 2);
    v54 = (DWORD1(v112) - 1);
    v50 = DWORD1(v112) == 1;
    DWORD1(v112) = v54;
    v55 = (unsigned __int8 *)__dst;
    v56 = (char *)__dst + 2 * v54;
    if (v50)
    {
      v63 = 0;
      v64 = 0;
      v59 = 0;
      a2 = (unsigned __int8 *)v56;
    }
    else
    {
      v57 = 2 * v54;
      v58 = __dst;
      while (*v58 != v53)
      {
        v58 += 2;
        v57 -= 2;
        if (!v57)
          goto LABEL_46;
      }
      *v58 = v52;
LABEL_46:
      v59 = 0;
      v60 = v55;
      a2 = (unsigned __int8 *)v56;
      v61 = v56;
      do
      {
        if (*v55 == v55[1])
        {
          v62 = v55;
          if (v61 != (char *)__dst + 2 * DWORD1(v112))
          {
            v105 = v56;
            if (v55 == a2)
            {
              v62 = (unsigned __int8 *)v61;
            }
            else
            {
              v103 = v60 - a2;
              v104 = v61;
              memmove(v61, a2, v60 - a2);
              v62 = (unsigned __int8 *)&v104[v103];
            }
            v56 = v105;
          }
          a2 = v55 + 2;
          ++v59;
          v61 = (char *)v62;
        }
        v55 += 2;
        v60 += 2;
      }
      while (v55 < (unsigned __int8 *)v56);
      v55 = (unsigned __int8 *)__dst;
      v63 = DWORD1(v112);
      v64 = DWORD1(v112);
      v56 = v61;
    }
    v65 = &v55[2 * v63];
    v17 = v106;
    if (a2 != v65)
    {
      memmove(v56, a2, v65 - a2);
      v64 = DWORD1(v112);
    }
    v32 = v64 - v59;
LABEL_67:
    DWORD1(v112) = v32;
LABEL_68:
    ;
  }
  while (v32);
  v66 = __dst;
  if ((char *)&v112 + 8 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v112) = 0;
    WTF::fastFree((unint64_t)v66, a2, v31, a4, a5, a6, a7, a8);
  }
LABEL_72:
  v67 = *(_DWORD *)(a4 + 200);
  if (v67 + 4 > *(_DWORD *)(a4 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), (uint64_t)a2, v31, a4, a5, a6, a7, a8);
    v67 = *(_DWORD *)(a4 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a4 + 56) + v67) = -763363325;
  *(_DWORD *)(a4 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a4, (uint64_t)a10, 2, a4, a5, a6, a7, a8);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v114, v17, (uint64_t)operationInByValOptimize, v68, v69, v70, v71, v72, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v112;
  *(_QWORD *)(a1 + 24) = v113;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v114, v73, v74, v75, v76, v77, v78, v79);
  if (a6)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a4, v17, 0, 0, 0xFFFFFFFFLL, v84, v85, v86, (uint64_t)&v109, v87);
    v88 = v109;
    if (v109 != -1)
    {
      v89 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v89 == *(_DWORD *)(a6 + 8))
      {
        v90 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (void *)(v89 + 1), (unint64_t)&v109, v82, v83, v84, v85, v86);
        v11 = (uint64_t *)(v90 + 1);
        v88 = *v90;
        LODWORD(v89) = *(_DWORD *)(a6 + 12);
      }
      v91 = *(_QWORD *)a6 + 12 * v89;
      *(_DWORD *)v91 = v88;
      *(_QWORD *)(v91 + 4) = *v11;
      ++*(_DWORD *)(a6 + 12);
    }
  }
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v80, v81, v82, v83, v84, v85, v86);
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>(uint64_t a1, unsigned int **a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = v4;
  v6 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3575E48;
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(v4 + 16) = v6;
  v8 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v8 != *(_DWORD *)(a1 + 240))
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
LABEL_14:
    *v9 = v5;
    *(_DWORD *)(a1 + 244) = v8 + 1;
    return;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = *(const void **)(a1 + 232);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a1 + 240) = v12;
    *(_QWORD *)(a1 + 232) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*(const void **)(a1 + 232) == v13)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v8 = *(unsigned int *)(a1 + 244);
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
    goto LABEL_14;
  }
  __break(0xC471u);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)19,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, JSC::LinkBuffer *a2)
{
  return JSC::JITByIdGenerator::finalize((JSC::JITByIdGenerator *)(*(_QWORD *)(a1 + 16) + 8), a2, a2);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  JSC::FTL::ExceptionTarget *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  _BYTE *v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int i;
  unsigned int v40;
  _QWORD *v41;
  int v42;
  WTF *v43;
  WTF *v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  WTF *v52;
  void *v53;
  WTF *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF *v84;
  WTF *v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  const void *v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  unint64_t v108;
  uint64_t v110;
  int v111;
  uint64_t v112;
  _QWORD *v113;
  unsigned int v114;
  unsigned int v115;
  _QWORD v116[5];
  _OWORD *v117;
  int v118;
  int v119;
  void *v120;
  int v121;
  int v122;
  void *v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  char v129;
  uint64_t v130;
  unsigned __int8 v131;
  uint64_t v132;
  int v133;
  WTF *v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  WTF *v138;
  uint64_t v139;
  JSC::FTL::ExceptionTarget *v140[21];

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "InByIdMegamorphic");
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v7 & 1) != 0)
  {
    v94 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v95 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v95 != 0x3FFFFFFF)
        ? (v96 = (_DWORD)v95 == -1)
        : (v96 = 1),
          v96))
    {
      v97 = 2;
    }
    else if (v95 >> 28)
    {
      v110 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v110 = v94;
      *(_DWORD *)(v110 + 8) = v95;
      v97 = 1;
      v94 = v110;
    }
    else
    {
      v97 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v94 = v95 << 36;
    }
    v7 = v94 | v97;
  }
  v139 = v7;
  v16 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v8, &v139);
  if ((v139 & 1) != 0 && (v139 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v139 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v140);
  v17 = v140[0];
  JSC::FTL::ExceptionTarget::jumps(v140[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v138);
  v140[0] = 0;
  if (v17)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v17);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v17));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v17);
      v102 = (unsigned int *)*((_QWORD *)v17 + 2);
      *((_QWORD *)v17 + 2) = 0;
      if (v102)
      {
        do
        {
          v103 = __ldaxr(v102);
          v104 = v103 - 1;
        }
        while (__stlxr(v104, v102));
        if (!v104)
        {
          atomic_store(1u, v102);
          WTF::fastFree((unint64_t)v102, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      v105 = (unsigned int *)*((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = 0;
      if (v105)
      {
        do
        {
          v106 = __ldaxr(v105);
          v107 = v106 - 1;
        }
        while (__stlxr(v107, v105));
        if (!v107)
        {
          atomic_store(1u, v105);
          WTF::fastFree((unint64_t)v105, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      WTF::fastFree((unint64_t)v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 32), a3, v16, v20, v21, v22, v23, v24);
  v27 = *(_DWORD *)(a3 + 20);
  if (!v27)
  {
    __break(0xC471u);
    goto LABEL_106;
  }
  if (v27 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D88D18);
  }
  v28 = *(_DWORD *)(a3 + 36);
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x197D88D20);
  }
  if (v28 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D88D28);
  }
  if (v28 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D88D30);
  }
  v29 = *(_BYTE **)(a3 + 8);
  v30 = *v29 & 0x7F;
  v31 = v29[16] & 0x7F;
  JSC::AssemblyHelpers::hasMegamorphicProperty(a2, *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16), v31, 0xFFFFFFFFLL, *(_QWORD *)(a1 + 40), v30, **(char **)(a3 + 24), *(char *)(*(_QWORD *)(a3 + 24) + 1), (uint64_t)&v134, *(_BYTE *)(*(_QWORD *)(a3 + 24) + 2));
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v32, v33, v34, v35, v36, v37, v38);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v40 = v136;
  v41 = v116;
  v113 = v116;
  v114 = 2;
  v115 = v136;
  if (v136 >= 3)
  {
    if (v136 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197D88D40);
    }
    v42 = 12 * v136;
    v41 = (_QWORD *)WTF::fastMalloc((WTF *)(12 * v136));
    v114 = (v42 & 0xFFFFFFFC) / 0xC;
    v113 = v41;
    v40 = v136;
  }
  if (v40)
  {
    v43 = v134;
    v44 = (WTF *)((char *)v134 + 12 * v40);
    do
    {
      *(_DWORD *)v41 = *(_DWORD *)v43;
      *(_QWORD *)((char *)v41 + 4) = *(_QWORD *)((char *)v43 + 4);
      v43 = (WTF *)((char *)v43 + 12);
      v41 = (_QWORD *)((char *)v41 + 12);
    }
    while (v43 != v44);
  }
  v45 = *(_QWORD *)a3;
  v116[3] = *(_QWORD *)(a1 + 16);
  v116[4] = v45;
  v46 = *(unsigned int *)(a3 + 20);
  v117 = 0;
  v118 = 0;
  v119 = v46;
  if ((_DWORD)v46)
  {
    if (v46 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197D88D38);
    }
    v47 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v46));
    v118 = v46;
    v117 = v47;
    v48 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v48)
    {
      v49 = *(__int128 **)(a3 + 8);
      v50 = 16 * v48;
      do
      {
        v51 = *v49++;
        *v47++ = v51;
        v50 -= 16;
      }
      while (v50);
    }
  }
  v52 = (WTF *)*(unsigned int *)(a3 + 36);
  v120 = 0;
  v121 = 0;
  v122 = (int)v52;
  if ((_DWORD)v52)
  {
    v53 = (void *)WTF::fastMalloc(v52);
    v121 = (int)v52;
    v120 = v53;
    memcpy(v53, *(const void **)(a3 + 24), *(unsigned int *)(a3 + 36));
  }
  v54 = (WTF *)*(unsigned int *)(a3 + 52);
  v123 = 0;
  v124 = 0;
  v125 = (int)v54;
  if ((_DWORD)v54)
  {
    v93 = (void *)WTF::fastMalloc(v54);
    v124 = (int)v54;
    v123 = v93;
    memcpy(v93, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 52));
  }
  v126 = *(_QWORD *)(a3 + 56);
  v55 = *(_QWORD *)(a1 + 24);
  if ((v55 & 1) != 0)
  {
    v98 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
    if ((v55 & 2) != 0
      || ((v99 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v99 != 0x3FFFFFFF)
        ? (v100 = (_DWORD)v99 == -1)
        : (v100 = 1),
          v100))
    {
      v101 = 2;
    }
    else if (v99 >> 28)
    {
      v111 = v99;
      v112 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v112 = v98;
      *(_DWORD *)(v112 + 8) = v111;
      v101 = 1;
      v98 = v112;
    }
    else
    {
      v101 = v98;
      v98 = v99 << 36;
    }
    v55 = v98 | v101;
  }
  v127 = v55;
  v56 = (unsigned int *)v138;
  if (v138)
  {
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 + 1, v56));
  }
  v128 = v56;
  v129 = v30;
  v58 = *(_QWORD *)(a1 + 56);
  v130 = *(_QWORD *)(a1 + 48);
  v131 = v31;
  v132 = v58;
  v133 = i;
  v59 = *(_QWORD *)(a3 + 56);
  v60 = WTF::fastMalloc((WTF *)0xB8);
  *(_DWORD *)(v60 + 8) = 1;
  *(_QWORD *)v60 = off_1E3575E98;
  v68 = *(unsigned int *)(v59 + 12);
  if ((_DWORD)v68 != *(_DWORD *)(v59 + 8))
  {
    v69 = (uint64_t *)(*(_QWORD *)v59 + 8 * v68);
    goto LABEL_36;
  }
  v88 = v68 + (v68 >> 2);
  if (v88 >= 0x10)
    v89 = v88 + 1;
  else
    v89 = 16;
  if (v89 <= v68 + 1)
    v90 = v68 + 1;
  else
    v90 = v89;
  if (v90 >> 29)
  {
    __break(0xC471u);
LABEL_106:
    JUMPOUT(0x197D88D10);
  }
  v91 = *(const void **)v59;
  v92 = (void *)WTF::fastMalloc((WTF *)(8 * v90));
  *(_DWORD *)(v59 + 8) = v90;
  *(_QWORD *)v59 = v92;
  memcpy(v92, v91, 8 * v68);
  if (v91)
  {
    if (*(const void **)v59 == v91)
    {
      *(_QWORD *)v59 = 0;
      *(_DWORD *)(v59 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v91, v61, v62, v63, v64, v65, v66, v67);
  }
  v68 = *(unsigned int *)(v59 + 12);
  v69 = (uint64_t *)(*(_QWORD *)v59 + 8 * v68);
LABEL_36:
  *v69 = v60;
  *(_DWORD *)(v59 + 12) = v68 + 1;
  v84 = v134;
  if (&v137 != (uint64_t *)v134 && v134)
  {
    v134 = 0;
    v135 = 0;
    WTF::fastFree((unint64_t)v84, v77, v78, v79, v80, v81, v82, v83);
  }
  v85 = v138;
  v138 = 0;
  if (v85)
  {
    do
    {
      v86 = __ldaxr((unsigned int *)v85);
      v87 = v86 - 1;
    }
    while (__stlxr(v87, (unsigned int *)v85));
    if (!v87)
    {
      atomic_store(1u, (unsigned int *)v85);
      v108 = *((_QWORD *)v85 + 1);
      if ((WTF *)((char *)v85 + 24) != (WTF *)v108 && v108 != 0)
      {
        *((_QWORD *)v85 + 1) = 0;
        *((_DWORD *)v85 + 4) = 0;
        WTF::fastFree(v108, v77, v78, v79, v80, v81, v82, v83);
      }
      WTF::fastFree((unint64_t)v85, v77, v78, v79, v80, v81, v82, v83);
    }
  }
  *(_BYTE *)(a2 + 212) = v6;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::AssemblerBuffer *v34;
  int i;
  unsigned int v36;
  char v37;
  unsigned int *result;
  _BYTE *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  JSC::AssemblerBuffer *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD v49[2];
  unsigned int v50[2];
  char v51;
  __int16 v52;
  char v53;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    goto LABEL_44;
  while (1)
  {
    *(_BYTE *)(a2 + 212) = 1;
    v11 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = 12 * v11;
      while (v13 < *(unsigned int *)(a1 + 28))
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 16) + v12), a2, a3, a4, a5, a6, a7, a8);
        ++v13;
        v12 += 12;
        if (v14 == v12)
          goto LABEL_6;
      }
      __break(0xC471u);
      goto LABEL_43;
    }
LABEL_6:
    v15 = *(_QWORD **)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 64);
    v18 = *(_QWORD *)(v16 + 96);
    v17 = *(_QWORD *)(v16 + 104);
    v19 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 48) + 216) & 0xFF003FF80000 | v18;
    v20 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v20)
    {
      v21 = *(_BYTE **)(a1 + 88);
      do
      {
        v22 = *v21 & 0x7F;
        if (v22 >= 0x40)
          goto LABEL_43;
        v23 = 1 << v22;
        v19 &= ~v23;
        v17 &= ~v23;
        ++v21;
      }
      while (--v20);
    }
    v24 = *(unsigned int *)(a1 + 116);
    if (!(_DWORD)v24)
      break;
    v39 = *(_BYTE **)(a1 + 104);
    while (1)
    {
      v40 = (*v39 + 32) & 0x7F;
      if (v40 >= 0x40)
        break;
      v41 = 1 << v40;
      v19 &= ~v41;
      v17 &= ~v41;
      ++v39;
      if (!--v24)
        goto LABEL_11;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    *(_DWORD *)(a2 + 208) = 0;
  }
LABEL_11:
  v49[0] = v19;
  v49[1] = v17;
  v25 = *(_QWORD *)(a1 + 128);
  if ((v25 & 1) != 0)
  {
    v42 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
    if ((v25 & 2) != 0
      || ((v43 = *(unsigned int *)((v25 & 0xFFFFFFFF8) + 8), (_DWORD)v43 != 0x3FFFFFFF)
        ? (v44 = (_DWORD)v43 == -1)
        : (v44 = 1),
          v44))
    {
      v45 = 2;
    }
    else if (v43 >> 28)
    {
      v47 = v42;
      v48 = v15;
      v42 = WTF::fastMalloc((WTF *)0x10);
      v15 = v48;
      *(_QWORD *)v42 = v47;
      *(_DWORD *)(v42 + 8) = v43;
      v45 = 1;
    }
    else
    {
      v45 = v42;
      v42 = v43 << 36;
    }
    v25 = v42 | v45;
    v26 = ((v42 | v45) & 1) == 0;
  }
  else
  {
    v26 = 1;
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v50, v15, v49, a2, v25, *(_QWORD *)(a1 + 136) + 8, (uint64_t)operationInByIdMegamorphicGeneric, *(char *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_BYTE *)(a1 + 160), *(JSC::ARM64LogicalImmediate **)(a1 + 168));
  if (!v26 && (v25 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v25 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  v34 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      v46 = v34;
      JSC::AssemblerBuffer::outOfLineGrow(v34, (uint64_t)v27, v28, v29, v30, v31, v32, v33);
      v34 = v46;
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v36 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v34, (uint64_t)v27, v28, v29, v30, v31, v32, v33);
    v36 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v37 = 69;
  else
    v37 = 65;
  v50[0] = i;
  v50[1] = 0;
  v51 = v37;
  v52 = 15;
  v53 = -1;
  LODWORD(v49[0]) = *(_DWORD *)(a1 + 176);
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v50, (unsigned int *)v49, a2, v29, v30, v31, v32, v33);
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x30);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3575EC0;
  v2 = a2[1];
  *(_QWORD *)(result + 16) = *a2;
  if ((v2 & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v7 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v7 != 0x3FFFFFFF)
        ? (v8 = (_DWORD)v7 == -1)
        : (v8 = 1),
          v8))
    {
      v9 = 2;
    }
    else if (v7 >> 28)
    {
      v12 = a2;
      v13 = result;
      v10 = v6;
      v11 = v7;
      v6 = WTF::fastMalloc((WTF *)0x10);
      a2 = v12;
      result = v13;
      *(_QWORD *)v6 = v10;
      *(_DWORD *)(v6 + 8) = v11;
      v9 = 1;
    }
    else
    {
      v9 = v6;
      v6 = v7 << 36;
    }
    v2 = v6 | v9;
  }
  *(_QWORD *)(result + 24) = v2;
  v3 = (unsigned int *)a2[2];
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = a2[3];
  *(_QWORD *)(result + 32) = v3;
  *(_QWORD *)(result + 40) = v5;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(JSC::FTL::PatchpointExceptionHandle **a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _BYTE *v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  char *v35;
  char v36;
  char v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int8x8_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF *v74;
  unsigned int *v75;
  unsigned int v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t *result;
  char v93;
  WTF *v94;
  int v95;
  _QWORD v96[4];
  uint64_t v97;
  uint64_t v98[2];
  char v99;
  JSC::FTL::PatchpointExceptionHandle *v100;
  unsigned __int8 v101;
  char v102;
  int v103;
  int v104;
  _DWORD v105[3];
  _DWORD v106[3];
  _BYTE *v107;
  uint64_t v108;
  _BYTE v109[24];
  unsigned int *v110;
  uint64_t v111[2];

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "InByValMegamorphic");
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(*((_QWORD *)*a1 + 3) + 64);
  JSC::CodeOrigin::CodeOrigin(v111, (const JSC::CodeOrigin *)(a1 + 1));
  v15 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v7, v111);
  if ((v111[0] & 1) != 0 && (v111[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v111[0] & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(a1[2], (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v94);
  v16 = (unsigned int *)v94;
  JSC::FTL::ExceptionTarget::jumps(v94, (JSC::CCallHelpers *)a2, (uint64_t *)&v110);
  if (v16)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v16, v17, v18, v19, v20, v21, v22, v23);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind((uint64_t)a1[2], a3, v15, v19, v20, v21, v22, v23);
  v29 = *(_DWORD *)(a3 + 20);
  if (!v29)
    goto LABEL_32;
  if (v29 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D89678);
  }
  if (v29 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D89680);
  }
  v30 = *(_DWORD *)(a3 + 36);
  if (!v30)
  {
    __break(0xC471u);
    JUMPOUT(0x197D89688);
  }
  if (v30 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D89690);
  }
  if (v30 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D89698);
  }
  if (v30 == 3)
  {
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x197D89670);
  }
  v31 = *(_BYTE **)(a3 + 8);
  v32 = *v31 & 0x7F;
  v33 = v31[16] & 0x7F;
  v34 = v31[32] & 0x7F;
  v35 = *(char **)(a3 + 24);
  v36 = *v35;
  v37 = v35[1];
  v38 = v35[2];
  v39 = v35[3];
  v107 = v109;
  v108 = 2;
  v93 = v34;
  JSC::MacroAssemblerARM64::load64(a2, v34 | 0x800000000, (char)v39, v24, v25, v26, v27, v28);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, (char)v39, 1, v40, v41, v42, v43, (uint64_t)v106, v44);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v107, v106, v45, v46, v47, v48, v49, v50);
  JSC::MacroAssemblerARM64::branchTest32(a2, 0, v39 | 0x1000000000, 16, v51, v52, v53, v54, (uint64_t)v105);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v107, v105, v55, v56, v57, v58, v59, v60);
  JSC::AssemblyHelpers::hasMegamorphicProperty(a2, *(_QWORD *)(*(_QWORD *)*a1 + 16), v33, (char)v39, 0, v32, v36, v37, (uint64_t)&v94, v38);
  WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)&v107, (unsigned int *)&v94, v61, v62, v63, v64, v65, v66);
  v74 = v94;
  if (v96 != (_QWORD *)v94 && v94)
  {
    v94 = 0;
    v95 = 0;
    WTF::fastFree((unint64_t)v74, v67, v68, v69, v70, v71, v72, v73);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, (uint64_t)v67, v68, v69, v70, v71, v72, v73, &v104);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v94, (uint64_t *)&v107);
  v96[3] = *a1;
  JSC::B3::StackmapGenerationParams::StackmapGenerationParams((uint64_t)&v97, (const JSC::B3::StackmapGenerationParams *)a3);
  JSC::CodeOrigin::CodeOrigin(v98, (const JSC::CodeOrigin *)(a1 + 1));
  v75 = v110;
  if (v110)
  {
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 + 1, v75));
  }
  v98[1] = (uint64_t)v75;
  v99 = v32;
  v100 = a1[3];
  v101 = v33;
  v102 = v93;
  v103 = v104;
  v91 = (unint64_t)v107;
  if (v109 != v107 && v107)
  {
    v107 = 0;
    LODWORD(v108) = 0;
    WTF::fastFree(v91, v84, v85, v86, v87, v88, v89, v90);
  }
  result = WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::~Box((unint64_t *)&v110, v84, v85, v86, v87, v88, v89, v90);
  *(_BYTE *)(a2 + 212) = v6;
  return result;
}

uint64_t JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16[19];
  unsigned int *v17;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v17;
    *(_DWORD *)(a1 + 12) = v10 + 1;
  }
}

uint64_t WTF::createSharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3575EE8;
  *a1 = v4;
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  __int128 v22;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v4 = *((unsigned int *)a2 + 3);
  v5 = a1 + 16;
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = v4;
  if (v4 >= 3)
  {
    if (v4 >= 0x15555556)
      goto LABEL_31;
    v6 = 12 * v4;
    v5 = WTF::fastMalloc((WTF *)(12 * v4));
    *(_DWORD *)(a1 + 8) = (v6 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)a1 = v5;
  }
  v7 = *((_DWORD *)a2 + 3);
  if (v7)
  {
    v8 = *a2;
    v9 = *a2 + 12 * v7;
    do
    {
      *(_DWORD *)v5 = *(_DWORD *)v8;
      *(_QWORD *)(v5 + 4) = *(_QWORD *)(v8 + 4);
      v8 += 12;
      v5 += 12;
    }
    while (v8 != v9);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  v10 = *((unsigned int *)a2 + 17);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = v10;
  if ((_DWORD)v10)
  {
    if (!(v10 >> 28))
    {
      v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v10));
      *(_DWORD *)(a1 + 64) = v10;
      *(_QWORD *)(a1 + 56) = v11;
      v12 = *((unsigned int *)a2 + 17);
      if ((_DWORD)v12)
      {
        v13 = (__int128 *)a2[7];
        v14 = 16 * v12;
        do
        {
          v15 = *v13++;
          *v11++ = v15;
          v14 -= 16;
        }
        while (v14);
      }
      goto LABEL_12;
    }
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x197D899B0);
  }
LABEL_12:
  v16 = (WTF *)*((unsigned int *)a2 + 21);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = (_DWORD)v16;
  if ((_DWORD)v16)
  {
    v17 = (void *)WTF::fastMalloc(v16);
    *(_DWORD *)(a1 + 80) = (_DWORD)v16;
    *(_QWORD *)(a1 + 72) = v17;
    memcpy(v17, (const void *)a2[9], *((unsigned int *)a2 + 21));
  }
  v18 = (WTF *)*((unsigned int *)a2 + 25);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = (_DWORD)v18;
  if ((_DWORD)v18)
  {
    v24 = (void *)WTF::fastMalloc(v18);
    *(_DWORD *)(a1 + 96) = (_DWORD)v18;
    *(_QWORD *)(a1 + 88) = v24;
    memcpy(v24, (const void *)a2[11], *((unsigned int *)a2 + 25));
  }
  v19 = a2[14];
  *(_QWORD *)(a1 + 104) = a2[13];
  if ((v19 & 1) != 0)
  {
    v25 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v26 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v29 = v26;
      v30 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v30 = v25;
      *(_DWORD *)(v30 + 8) = v29;
      v28 = 1;
      v25 = v30;
    }
    else
    {
      v28 = v25;
      v25 = v26 << 36;
    }
    v19 = v25 | v28;
  }
  *(_QWORD *)(a1 + 112) = v19;
  v20 = (unsigned int *)a2[15];
  if (v20)
  {
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  *(_QWORD *)(a1 + 120) = v20;
  v22 = *((_OWORD *)a2 + 8);
  *(_WORD *)(a1 + 144) = *((_WORD *)a2 + 72);
  *(_OWORD *)(a1 + 128) = v22;
  *(_DWORD *)(a1 + 148) = *((_DWORD *)a2 + 37);
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

unsigned int *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int *result;
  unsigned int v33;
  uint64_t v34;
  _QWORD v35[2];
  unsigned int v36[2];
  char v37;
  __int16 v38;
  char v39;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD **)(a1 + 40);
  v35[0] = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 48));
  v35[1] = v12;
  JSC::CodeOrigin::CodeOrigin(&v34, (const JSC::CodeOrigin *)(a1 + 112));
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v36, v11, v35, a2, v34, *(_QWORD *)(a1 + 120) + 8, (uint64_t)operationInByValMegamorphicGeneric, *(char *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_WORD *)(a1 + 144), HIBYTE(*(_WORD *)(a1 + 144)));
  if ((v34 & 1) != 0 && (v34 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v34 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), (uint64_t)v13, v14, v15, v16, v17, v18, v19, (int *)v35);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v20, v21, v22, v23, v24, v25);
  if (*(_BYTE *)(a2 + 328))
    v31 = 69;
  else
    v31 = 65;
  v36[0] = v35[0];
  v36[1] = 0;
  v37 = v31;
  v38 = 15;
  v39 = -1;
  v33 = *(_DWORD *)(a1 + 148);
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v36, &v33, a2, v26, v27, v28, v29, v30);
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)20,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)20,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)20,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::FTL::ExceptionTarget *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  _DWORD *v58;
  uint64_t *v59;
  int v60;
  char *v61;
  int i;
  unsigned int v63;
  _QWORD *v64;
  int v65;
  WTF *v66;
  WTF *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  uint64_t v72;
  __int128 *v73;
  uint64_t v74;
  __int128 v75;
  WTF *v76;
  void *v77;
  WTF *v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF *v107;
  unsigned int v108;
  unsigned int v109;
  WTF *v110;
  unsigned int v111;
  unsigned int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  const void *v116;
  void *v117;
  _BYTE *v118;
  unsigned int v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  unint64_t v136;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  unsigned int v141;
  int v142;
  _QWORD v143[4];
  char v144;
  uint64_t v145;
  uint64_t v146;
  _OWORD *v147;
  int v148;
  int v149;
  void *v150;
  int v151;
  int v152;
  void *v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int *v158;
  char v159;
  char v160;
  char v161;
  int v162;
  int v163;
  uint64_t v164;
  WTF *v165;
  uint64_t v166;
  _BYTE v167[29];
  char v168;
  char v169;
  char v170;
  WTF *v171;
  uint64_t v172;
  int v173;
  JSC::FTL::ExceptionTarget *v174[20];

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [5]>(a2);
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v8 = (uint64_t *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v7 & 1) != 0)
  {
    v122 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v123 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v123 != 0x3FFFFFFF)
        ? (v124 = (_DWORD)v123 == -1)
        : (v124 = 1),
          v124))
    {
      v125 = 2;
    }
    else if (v123 >> 28)
    {
      v138 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v138 = v122;
      *(_DWORD *)(v138 + 8) = v123;
      v125 = 1;
      v122 = v138;
    }
    else
    {
      v125 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v122 = v123 << 36;
    }
    v7 = v122 | v125;
  }
  v172 = v7;
  v173 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v9, &v172);
  if ((v172 & 1) != 0 && (v172 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v172 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v174);
  v17 = v174[0];
  JSC::FTL::ExceptionTarget::jumps(v174[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v171);
  v174[0] = 0;
  if (v17)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v17);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v17));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v17);
      v130 = (unsigned int *)*((_QWORD *)v17 + 2);
      *((_QWORD *)v17 + 2) = 0;
      if (v130)
      {
        do
        {
          v131 = __ldaxr(v130);
          v132 = v131 - 1;
        }
        while (__stlxr(v132, v130));
        if (!v132)
        {
          atomic_store(1u, v130);
          WTF::fastFree((unint64_t)v130, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      v133 = (unsigned int *)*((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = 0;
      if (v133)
      {
        do
        {
          v134 = __ldaxr(v133);
          v135 = v134 - 1;
        }
        while (__stlxr(v135, v133));
        if (!v135)
        {
          atomic_store(1u, v133);
          WTF::fastFree((unint64_t)v133, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      WTF::fastFree((unint64_t)v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 32), a3, v173, v20, v21, v22, v23, v24);
  v170 = -1;
  if (HIBYTE(qword_1ECF4C780))
  {
    if (!*(_DWORD *)(a3 + 36))
    {
      __break(0xC471u);
      JUMPOUT(0x197D8A510);
    }
    v170 = **(_BYTE **)(a3 + 24);
  }
  v27 = *(_DWORD *)(a3 + 20);
  if (!v27)
  {
    __break(0xC471u);
    goto LABEL_126;
  }
  if (v27 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D8A4F8);
  }
  v28 = *(char **)(a3 + 8);
  v29 = *v28;
  v169 = v28[16] & 0x7F;
  if (v27 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D8A500);
  }
  v168 = v28[32] & 0x7F;
  v30 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v31 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v31 = 2;
  *(_DWORD *)(v31 + 96) = 0;
  *(_OWORD *)(v31 + 12) = 0u;
  *(_OWORD *)(v31 + 28) = 0u;
  *(_DWORD *)(v31 + 44) = 0;
  *(_QWORD *)(v31 + 64) = 0;
  *(_QWORD *)(v31 + 72) = 0;
  *(_QWORD *)(v31 + 56) = 0;
  *(_QWORD *)(v31 + 104) = 0;
  *(_QWORD *)(v31 + 112) = -1;
  *(_WORD *)(v31 + 120) = -1;
  *(_DWORD *)(v31 + 122) = 0x10000;
  *(_BYTE *)(v31 + 126) = 0;
  *(_BYTE *)(v31 + 127) = BYTE12(xmmword_1ECF4C260);
  *(_BYTE *)(v31 + 128) = 0;
  *(_WORD *)(v31 + 129) &= 0xFC00u;
  *(_QWORD *)(v31 + 136) = 0;
  *(_QWORD *)(v31 + 136) = *(_QWORD *)(v30 + 168);
  *(_QWORD *)(v30 + 168) = v31;
  *(_WORD *)(v31 + 129) = *(_WORD *)(v31 + 129) & 0xFDFF | (HIBYTE(qword_1ECF4C780) << 9);
  v32 = *(_QWORD *)(a2 + 336);
  LOBYTE(v140) = 20;
  v33 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v34 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v35 = *(unsigned int *)(a3 + 36);
  if ((_DWORD)v35)
  {
    v36 = *(_BYTE **)(a3 + 24);
    do
    {
      v37 = *v36 & 0x7F;
      if (v37 >= 0x40)
        goto LABEL_125;
      v38 = 1 << v37;
      v34 &= ~v38;
      v33 &= ~v38;
      ++v36;
    }
    while (--v35);
  }
  v39 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v39)
  {
    v118 = *(_BYTE **)(a3 + 40);
    do
    {
      v119 = (*v118 + 32) & 0x7F;
      if (v119 >= 0x40)
        goto LABEL_125;
      v120 = 1 << v119;
      v34 &= ~v120;
      v33 &= ~v120;
      ++v118;
    }
    while (--v39);
  }
  v40 = v29 & 0x7F;
  v174[0] = (JSC::FTL::ExceptionTarget *)v34;
  v174[1] = (JSC::FTL::ExceptionTarget *)v33;
  LOBYTE(v165) = v29 & 0x7F;
  v41 = WTF::fastMalloc((WTF *)0x40);
  v42 = WTF::Box<JSC::JITInByValGenerator>::Data::Data<JSC::CodeBlock *,JSC::StructureStubInfo *&,JSC::JITType,JSC::CodeOrigin const&,JSC::CallSiteIndex &,JSC::AccessType,JSC::RegisterSetBuilder,JSC::JSValueRegs &,JSC::JSValueRegs const&,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID const&,JSC::ARM64Registers::RegisterID&>((_DWORD *)v41, v32, v31, 5u, (JSC::CodeOrigin *)(a1 + 24), &v173, (char *)&v140, (uint64_t)v174, &v169, &v168, (char *)&v165, &v170);
  v165 = (WTF *)v167;
  v166 = 2;
  JSC::JITDelByValGenerator::generateFastPath((JSC::JITDelByValGenerator *)(v42 + 2), (JSC::CCallHelpers *)a2, v43, v44, v45, v46, v47, v48);
  if (!HIBYTE(qword_1ECF4C780))
  {
    v56 = *(_DWORD *)(v41 + 48);
    v163 = v56;
    v164 = *(_QWORD *)(v41 + 52);
    if (v56 != -1)
    {
      v57 = HIDWORD(v166);
      if (HIDWORD(v166) == (_DWORD)v166)
      {
        v58 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v165, (void *)(HIDWORD(v166) + 1), (unint64_t)&v163, v51, v52, v53, v54, v55);
        v60 = *v58;
        v59 = (uint64_t *)(v58 + 1);
        v56 = v60;
        v57 = HIDWORD(v166);
      }
      else
      {
        v59 = &v164;
      }
      v61 = (char *)v165 + 12 * v57;
      *(_DWORD *)v61 = v56;
      *(_QWORD *)(v61 + 4) = *v59;
      ++HIDWORD(v166);
    }
  }
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v49, v50, v51, v52, v53, v54, v55);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v63 = HIDWORD(v166);
  v64 = v143;
  v140 = v143;
  v141 = 2;
  v142 = HIDWORD(v166);
  if (HIDWORD(v166) >= 3)
  {
    if (HIDWORD(v166) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197D8A518);
    }
    v65 = 12 * HIDWORD(v166);
    v64 = (_QWORD *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v166)));
    v141 = (v65 & 0xFFFFFFFC) / 0xC;
    v140 = v64;
    v63 = HIDWORD(v166);
  }
  if (v63)
  {
    v66 = v165;
    v67 = (WTF *)((char *)v165 + 12 * v63);
    do
    {
      *(_DWORD *)v64 = *(_DWORD *)v66;
      *(_QWORD *)((char *)v64 + 4) = *(_QWORD *)((char *)v66 + 4);
      v66 = (WTF *)((char *)v66 + 12);
      v64 = (_QWORD *)((char *)v64 + 12);
    }
    while (v66 != v67);
  }
  do
    v68 = __ldaxr((unsigned int *)v41);
  while (__stlxr(v68 + 1, (unsigned int *)v41));
  v143[3] = v41;
  v144 = v170;
  v69 = *(_QWORD *)a3;
  v145 = *(_QWORD *)(a1 + 16);
  v146 = v69;
  v70 = *(unsigned int *)(a3 + 20);
  v147 = 0;
  v148 = 0;
  v149 = v70;
  if ((_DWORD)v70)
  {
    if (v70 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197D8A508);
    }
    v71 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v70));
    v148 = v70;
    v147 = v71;
    v72 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v72)
    {
      v73 = *(__int128 **)(a3 + 8);
      v74 = 16 * v72;
      do
      {
        v75 = *v73++;
        *v71++ = v75;
        v74 -= 16;
      }
      while (v74);
    }
  }
  v76 = (WTF *)*(unsigned int *)(a3 + 36);
  v150 = 0;
  v151 = 0;
  v152 = (int)v76;
  if ((_DWORD)v76)
  {
    v77 = (void *)WTF::fastMalloc(v76);
    v151 = (int)v76;
    v150 = v77;
    memcpy(v77, *(const void **)(a3 + 24), *(unsigned int *)(a3 + 36));
  }
  v78 = (WTF *)*(unsigned int *)(a3 + 52);
  v153 = 0;
  v154 = 0;
  v155 = (int)v78;
  if ((_DWORD)v78)
  {
    v121 = (void *)WTF::fastMalloc(v78);
    v154 = (int)v78;
    v153 = v121;
    memcpy(v121, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 52));
  }
  v156 = *(_QWORD *)(a3 + 56);
  v79 = *v8;
  if ((*v8 & 1) != 0)
  {
    v126 = *(_QWORD *)(v79 & 0xFFFFFFFF8);
    if ((v79 & 2) != 0
      || ((v127 = *(unsigned int *)((v79 & 0xFFFFFFFF8) + 8), (_DWORD)v127 != 0x3FFFFFFF)
        ? (v128 = (_DWORD)v127 == -1)
        : (v128 = 1),
          v128))
    {
      v129 = 2;
    }
    else if (v127 >> 28)
    {
      v139 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v139 = v126;
      *(_DWORD *)(v139 + 8) = v127;
      v129 = 1;
      v126 = v139;
    }
    else
    {
      v129 = *(_QWORD *)(v79 & 0xFFFFFFFF8);
      v126 = v127 << 36;
    }
    v79 = v126 | v129;
  }
  v157 = v79;
  v80 = (unsigned int *)v171;
  if (v171)
  {
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 + 1, v80));
  }
  v158 = v80;
  v159 = v40;
  v160 = v169;
  v161 = v168;
  v162 = i;
  v82 = *(_QWORD *)(a3 + 56);
  v83 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)(v83 + 8) = 1;
  *(_QWORD *)v83 = off_1E3575F38;
  v91 = *(unsigned int *)(v82 + 12);
  if ((_DWORD)v91 != *(_DWORD *)(v82 + 8))
  {
    v92 = (uint64_t *)(*(_QWORD *)v82 + 8 * v91);
    goto LABEL_49;
  }
  v113 = v91 + (v91 >> 2);
  if (v113 >= 0x10)
    v114 = v113 + 1;
  else
    v114 = 16;
  if (v114 <= v91 + 1)
    v115 = v91 + 1;
  else
    v115 = v114;
  if (v115 >> 29)
  {
    __break(0xC471u);
LABEL_125:
    __break(1u);
LABEL_126:
    JUMPOUT(0x197D8A4F0);
  }
  v116 = *(const void **)v82;
  v117 = (void *)WTF::fastMalloc((WTF *)(8 * v115));
  *(_DWORD *)(v82 + 8) = v115;
  *(_QWORD *)v82 = v117;
  memcpy(v117, v116, 8 * v91);
  if (v116)
  {
    if (*(const void **)v82 == v116)
    {
      *(_QWORD *)v82 = 0;
      *(_DWORD *)(v82 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v116, v84, v85, v86, v87, v88, v89, v90);
  }
  v91 = *(unsigned int *)(v82 + 12);
  v92 = (uint64_t *)(*(_QWORD *)v82 + 8 * v91);
LABEL_49:
  *v92 = v83;
  *(_DWORD *)(v82 + 12) = v91 + 1;
  v107 = v165;
  if (v167 != (_BYTE *)v165 && v165)
  {
    v165 = 0;
    LODWORD(v166) = 0;
    WTF::fastFree((unint64_t)v107, v100, v101, v102, v103, v104, v105, v106);
  }
  do
  {
    v108 = __ldaxr((unsigned int *)v41);
    v109 = v108 - 1;
  }
  while (__stlxr(v109, (unsigned int *)v41));
  if (!v109)
  {
    atomic_store(1u, (unsigned int *)v41);
    WTF::fastFree(v41, v100, v101, v102, v103, v104, v105, v106);
  }
  v110 = v171;
  v171 = 0;
  if (v110)
  {
    do
    {
      v111 = __ldaxr((unsigned int *)v110);
      v112 = v111 - 1;
    }
    while (__stlxr(v112, (unsigned int *)v110));
    if (!v112)
    {
      atomic_store(1u, (unsigned int *)v110);
      v136 = *((_QWORD *)v110 + 1);
      if ((WTF *)((char *)v110 + 24) != (WTF *)v136 && v136 != 0)
      {
        *((_QWORD *)v110 + 1) = 0;
        *((_DWORD *)v110 + 4) = 0;
        WTF::fastFree(v136, v100, v101, v102, v103, v104, v105, v106);
      }
      WTF::fastFree((unint64_t)v110, v100, v101, v102, v103, v104, v105, v106);
    }
  }
  *(_BYTE *)(a2 + 212) = v6;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)20,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)20,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)20,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)20,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)20,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)20,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int i;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int j;
  unsigned int v47;
  char v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  const void *v66;
  void *v67;
  unsigned int v68;
  unsigned int v69;
  _BYTE *v70;
  unsigned int v71;
  uint64_t v72;
  _BYTE *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  __int16 v91;
  char v92;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v11 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = 12 * v11;
    while (v13 < *(unsigned int *)(a1 + 28))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 16) + v12), a2, a3, a4, a5, a6, a7, a8);
      ++v13;
      v12 += 12;
      if (v14 == v12)
        goto LABEL_7;
    }
    __break(0xC471u);
LABEL_99:
    JUMPOUT(0x197D8AB60);
  }
LABEL_7:
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16), *(char *)(a1 + 64), a4, a5, a6, a7, a8);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 48) = operationHasPrivateNameOptimize;
    v16 = *(unsigned __int8 **)(a1 + 72);
    v17 = *(_QWORD *)(a1 + 80);
    v19 = *(_QWORD *)(v17 + 96);
    v18 = *(_QWORD *)(v17 + 104);
    v20 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 48) + 216) & 0xFF003FF80000 | v19;
    v21 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v21)
    {
      v22 = *(_BYTE **)(a1 + 104);
      do
      {
        v23 = *v22 & 0x7F;
        if (v23 >= 0x40)
          goto LABEL_98;
        v24 = 1 << v23;
        v20 &= ~v24;
        v18 &= ~v24;
        ++v22;
      }
      while (--v21);
    }
    v25 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v25)
    {
      v70 = *(_BYTE **)(a1 + 120);
      do
      {
        v71 = (*v70 + 32) & 0x7F;
        if (v71 >= 0x40)
          goto LABEL_98;
        v72 = 1 << v71;
        v20 &= ~v72;
        v18 &= ~v72;
        ++v70;
      }
      while (--v25);
    }
    v87 = v20;
    v88 = v18;
    v26 = *(_QWORD *)(a1 + 144);
    if ((v26 & 1) != 0)
    {
      v76 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      if ((v26 & 2) != 0
        || ((v77 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v77 != 0x3FFFFFFF)
          ? (v78 = (_DWORD)v77 == -1)
          : (v78 = 1),
            v78))
      {
        v79 = 2;
      }
      else if (v77 >> 28)
      {
        v84 = v76;
        v85 = v16;
        v76 = WTF::fastMalloc((WTF *)0x10);
        v16 = v85;
        *(_QWORD *)v76 = v84;
        *(_DWORD *)(v76 + 8) = v77;
        v79 = 1;
      }
      else
      {
        v79 = v76;
        v76 = v77 << 36;
      }
      v26 = v76 | v79;
      v27 = ((v76 | v79) & 1) == 0;
    }
    else
    {
      v27 = 1;
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>((uint64_t)&v89, v16, (uint64_t)&v87, a2, v26, *(_QWORD *)(a1 + 152) + 8, *(unsigned __int8 *)(a1 + 64) | 0x3000000000, *(char *)(a1 + 160), *(_BYTE *)(a1 + 161), 0, *(_BYTE *)(a1 + 162), 0, *(_BYTE *)(a1 + 64));
  }
  else
  {
    v35 = *(unsigned __int8 **)(a1 + 72);
    v36 = *(_QWORD *)(a1 + 80);
    v38 = *(_QWORD *)(v36 + 96);
    v37 = *(_QWORD *)(v36 + 104);
    v39 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 48) + 216) & 0xFF003FF80000 | v38;
    v40 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v40)
    {
      v41 = *(_BYTE **)(a1 + 104);
      do
      {
        v42 = *v41 & 0x7F;
        if (v42 >= 0x40)
          goto LABEL_98;
        v43 = 1 << v42;
        v39 &= ~v43;
        v37 &= ~v43;
        ++v41;
      }
      while (--v40);
    }
    v44 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v44)
    {
      v73 = *(_BYTE **)(a1 + 120);
      do
      {
        v74 = (*v73 + 32) & 0x7F;
        if (v74 >= 0x40)
          goto LABEL_98;
        v75 = 1 << v74;
        v39 &= ~v75;
        v37 &= ~v75;
        ++v73;
      }
      while (--v44);
    }
    v87 = v39;
    v88 = v37;
    v26 = *(_QWORD *)(a1 + 144);
    if ((v26 & 1) != 0)
    {
      v80 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      if ((v26 & 2) != 0
        || ((v81 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v81 != 0x3FFFFFFF)
          ? (v82 = (_DWORD)v81 == -1)
          : (v82 = 1),
            v82))
      {
        v83 = 2;
      }
      else
      {
        v83 = v80;
        v86 = v35;
        if (v81 >> 28)
        {
          v80 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v80 = v83;
          *(_DWORD *)(v80 + 8) = v81;
          v83 = 1;
        }
        else
        {
          v80 = v81 << 36;
        }
        v35 = v86;
      }
      v26 = v80 | v83;
      v27 = ((v80 | v83) & 1) == 0;
    }
    else
    {
      v27 = 1;
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)&v89, v35, &v87, a2, v26, *(_QWORD *)(a1 + 152) + 8, (uint64_t)operationHasPrivateNameOptimize, *(char *)(a1 + 160), *(unsigned __int8 *)(a1 + 161), *(unsigned __int8 *)(a1 + 162), *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)(a1 + 56) + 16));
  }
  v45 = v89;
  if (!v27 && (v26 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v26 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
  for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v28, v29, v30, v31, v32, v33, v34);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v47 = j;
  if (j + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v28, v29, v30, v31, v32, v33, v34);
    v47 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v47) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v48 = 69;
  else
    v48 = 65;
  v89 = j;
  v90 = v48;
  v91 = 15;
  v92 = -1;
  LODWORD(v87) = *(_DWORD *)(a1 + 164);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v89, (unsigned int *)&v87, a2, v30, v31, v32, v33, v34);
  v49 = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v49 + 36) = i;
  *(_QWORD *)(v49 + 40) = v45;
  do
    v50 = __ldaxr((unsigned int *)v49);
  while (__stlxr(v50 + 1, (unsigned int *)v49));
  v51 = WTF::fastMalloc((WTF *)0x18);
  v59 = v51;
  *(_DWORD *)(v51 + 8) = 1;
  *(_QWORD *)v51 = &off_1E3575F60;
  do
    v60 = __ldaxr((unsigned int *)v49);
  while (__stlxr(v60 + 1, (unsigned int *)v49));
  *(_QWORD *)(v51 + 16) = v49;
  v61 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v61 != *(_DWORD *)(a2 + 240))
  {
    v62 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v61);
    goto LABEL_47;
  }
  v63 = v61 + (v61 >> 2);
  if (v63 >= 0x10)
    v64 = v63 + 1;
  else
    v64 = 16;
  if (v64 <= v61 + 1)
    v65 = v61 + 1;
  else
    v65 = v64;
  if (v65 >> 29)
  {
    __break(0xC471u);
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  v66 = *(const void **)(a2 + 232);
  v67 = (void *)WTF::fastMalloc((WTF *)(8 * v65));
  *(_DWORD *)(a2 + 240) = v65;
  *(_QWORD *)(a2 + 232) = v67;
  memcpy(v67, v66, 8 * v61);
  if (v66)
  {
    if (*(const void **)(a2 + 232) == v66)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v66, v52, v53, v54, v55, v56, v57, v58);
  }
  v61 = *(unsigned int *)(a2 + 244);
  v62 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v61);
LABEL_47:
  *v62 = v59;
  *(_DWORD *)(a2 + 244) = v61 + 1;
  do
  {
    v68 = __ldaxr((unsigned int *)v49);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, (unsigned int *)v49));
  if (!v69)
  {
    atomic_store(1u, (unsigned int *)v49);
    WTF::fastFree(v49, v52, v53, v54, v55, v56, v57, v58);
  }
  *(_BYTE *)(a2 + 212) = v10;
}

void JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, int a10, unsigned __int8 a11, int a12, unsigned __int8 a13)
{
  JSC::AssemblerBuffer *v13;
  unsigned __int8 v14;
  uint64_t v15;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint8x8_t v43;
  __int32 v44;
  uint8x8_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  unsigned int v55;
  char v56;
  char v57;
  uint64_t v58;
  unsigned __int8 *v59;
  char *v60;
  uint64_t v61;
  _BYTE *v62;
  int v63;
  unsigned __int8 *v64;
  char *v65;
  unsigned __int8 *v66;
  int64_t v67;
  uint64_t v68;
  int v69;
  unsigned __int8 *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int8x8_t v86;
  int v87;
  uint64_t v88;
  _DWORD *v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 *v102;
  uint64_t v103;
  char *v104;
  JSC::AssemblerBuffer *v105;
  uint64_t v106;
  uint64_t v107;
  int v109;
  uint64_t v110;
  void *__dst;
  __int128 v112;
  uint64_t v113;
  uint64_t v114[9];

  v13 = (JSC::AssemblerBuffer *)a8;
  v14 = a7;
  v15 = a5;
  v19 = *(char **)(*(_QWORD *)a2 + 16);
  if ((a5 & 1) != 0)
  {
LABEL_86:
    v93 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    if ((v15 & 2) != 0
      || ((v94 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8), (_DWORD)v94 != 0x3FFFFFFF)
        ? (v95 = (_DWORD)v94 == -1)
        : (v95 = 1),
          v95))
    {
      v96 = 2;
    }
    else if (v94 >> 28)
    {
      v102 = a2;
      v103 = WTF::fastMalloc((WTF *)0x10);
      a2 = v102;
      *(_QWORD *)v103 = v93;
      *(_DWORD *)(v103 + 8) = v94;
      v96 = 1;
      v93 = v103;
    }
    else
    {
      v96 = v93;
      v93 = v94 << 36;
    }
    v15 = v93 | v96;
  }
  v107 = (uint64_t)v19;
  if ((v15 & 2) != 0)
  {
    v25 = a9;
    v26 = a11;
    v27 = 0xFFFFFFFFLL;
    goto LABEL_7;
  }
  v20 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
  v21 = v15;
  if ((v15 & 1) != 0)
  {
    v97 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    v98 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v98 == 0x3FFFFFFF || (_DWORD)v98 == -1)
    {
      v100 = 2;
    }
    else if (v98 >> 28)
    {
      v106 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
      v101 = WTF::fastMalloc((WTF *)0x10);
      v20 = v106;
      *(_QWORD *)v101 = v97;
      *(_DWORD *)(v101 + 8) = v98;
      v100 = 1;
      v97 = v101;
    }
    else
    {
      v100 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v97 = v98 << 36;
    }
    v21 = v97 | v100;
  }
  v114[0] = v21;
  v24 = JSC::DFG::CodeOriginPool::addCodeOrigin(v20, v114);
  if ((v114[0] & 1) != 0 && (v114[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v114[0] & 0xFFFFFFFF8, v22, v23, a4, a5, a6, a7, a8);
  v25 = a9;
  v26 = a11;
  if (v24)
  {
    v27 = v24;
LABEL_7:
    if (!*(_BYTE *)(a4 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197D8B1ACLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a4, (JSC::ARM64LogicalImmediate *)v27, a4 + 264, a4, a5, a6, a7, a8);
    v33 = *(_DWORD *)(a4 + 200);
    if (v33 + 4 > *(_DWORD *)(a4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), v28, v29, v30, v31, v32, a7, a8);
      v33 = *(_DWORD *)(a4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + v33) = -1207811152;
    *(_DWORD *)(a4 + 200) += 4;
  }
  v34 = *(_QWORD *)(a3 + 8) | *(_QWORD *)a3;
  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v114, v34, a4, 4u, (uint64_t)v13, 8, a7, a8);
  v19 = (char *)&v112 + 8;
  __dst = (char *)&v112 + 8;
  *(_QWORD *)&v112 = 4;
  if (v14 != 8)
  {
    WORD4(v112) = v14 | 0x800;
    v36 = 1;
    DWORD1(v112) = 1;
    if (!v25)
      goto LABEL_14;
    goto LABEL_13;
  }
  v36 = 0;
  if (v25)
  {
LABEL_13:
    *((_WORD *)&v112 + v36++ + 4) = v25;
    DWORD1(v112) = v36;
  }
LABEL_14:
  if (v26 != 1)
  {
    *((_WORD *)&v112 + v36++ + 4) = v26 | 0x100;
    DWORD1(v112) = v36;
  }
  if (a13 == 2)
  {
    if (!v36)
      goto LABEL_77;
  }
  else
  {
    *((_WORD *)&v112 + v36++ + 4) = a13 | 0x200;
    DWORD1(v112) = v36;
  }
  v13 = (JSC::AssemblerBuffer *)(a4 + 56);
  v14 = 1;
  a3 = 2432696320;
  do
  {
    v37 = 0;
    v38 = 0;
    v39 = (char *)__dst;
    v40 = v36;
    do
    {
      if ((*((_BYTE *)__dst + v37 + 1) & 0x40) != 0)
      {
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
      v38 |= 1 << *((_BYTE *)__dst + v37 + 1);
      v37 += 2;
    }
    while (2 * v36 != v37);
    v41 = 0;
    do
    {
      v42 = *((_BYTE *)__dst + v41) & 0x7F;
      if (v42 >= 0x40)
        goto LABEL_85;
      v38 &= ~(1 << v42);
      v41 += 2;
    }
    while (2 * v36 != v41);
    v43 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
    v43.i16[0] = vaddlv_u8(v43);
    v44 = v43.i32[0];
    v45 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v38));
    v45.i16[0] = vaddlv_u8(v45);
    if (v45.i32[0] + v44)
    {
      v46 = 0;
      if (v36 <= 1)
        v47 = 1;
      else
        v47 = v36;
      v48 = 2 * v47;
      while (1)
      {
        v49 = *((unsigned __int8 *)__dst + v46 + 1);
        if ((v49 & 0x7Fu) >= 0x40)
          goto LABEL_85;
        if (((v38 >> (v49 & 0x7F)) & 1) != 0)
          break;
        v46 += 2;
        if (v48 == v46)
          goto LABEL_68;
      }
      v50 = *((unsigned __int8 *)__dst + v46);
      if (v50 != v49)
      {
        v51 = (char)v50;
        if ((char)v50 == 63)
        {
          v52 = *(_DWORD *)(a4 + 200);
          v53 = *(_DWORD *)(a4 + 192);
          if ((char)v49 == 31)
            goto LABEL_62;
          v55 = v49 & 0x1F | 0xD2800000;
        }
        else
        {
          v52 = *(_DWORD *)(a4 + 200);
          v53 = *(_DWORD *)(a4 + 192);
          v54 = v49 == 31 || v51 == 31;
          if (!v54)
          {
            v55 = v49 & 0xFFE0FFFF | ((v51 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_63;
          }
LABEL_62:
          v55 = (char)v49 | (32 * v51) | 0x91000000;
        }
LABEL_63:
        if (v52 + 4 > v53)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v13, (uint64_t)a2, v35, a4, a5, a6, a7, a8);
          v52 = *(_DWORD *)(a4 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a4 + 56) + v52) = v55;
        *(_DWORD *)(a4 + 200) += 4;
        v39 = (char *)__dst;
        v40 = DWORD1(v112);
      }
      memmove(&v39[v46], &v39[v46 + 2], 2 * v40 - v46 - 2);
      v36 = DWORD1(v112) - 1;
      goto LABEL_67;
    }
    v105 = v13;
    v56 = *(_BYTE *)__dst;
    v57 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a4, *(char *)__dst, v57, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v112) - 2);
    v58 = (DWORD1(v112) - 1);
    v54 = DWORD1(v112) == 1;
    DWORD1(v112) = v58;
    v59 = (unsigned __int8 *)__dst;
    v60 = (char *)__dst + 2 * v58;
    if (v54)
    {
      v68 = 0;
      v69 = 0;
      v63 = 0;
      a2 = (unsigned __int8 *)__dst + 2 * v58;
    }
    else
    {
      v61 = 2 * v58;
      v62 = __dst;
      while (*v62 != v57)
      {
        v62 += 2;
        v61 -= 2;
        if (!v61)
          goto LABEL_47;
      }
      *v62 = v56;
LABEL_47:
      v63 = 0;
      v64 = v59;
      a2 = (unsigned __int8 *)v60;
      v65 = v60;
      do
      {
        if (*v59 == v59[1])
        {
          v66 = v59;
          if (v65 != (char *)__dst + 2 * DWORD1(v112))
          {
            v104 = v60;
            if (v59 == a2)
            {
              v66 = (unsigned __int8 *)v65;
            }
            else
            {
              v67 = v64 - a2;
              memmove(v65, a2, v64 - a2);
              v66 = (unsigned __int8 *)&v65[v67];
            }
            v60 = v104;
          }
          a2 = v59 + 2;
          ++v63;
          v65 = (char *)v66;
        }
        v59 += 2;
        v64 += 2;
      }
      while (v59 < (unsigned __int8 *)v60);
      v59 = (unsigned __int8 *)__dst;
      v68 = DWORD1(v112);
      v69 = DWORD1(v112);
      v60 = v65;
    }
    v70 = &v59[2 * v68];
    a3 = 2432696320;
    if (a2 != v70)
    {
      memmove(v60, a2, v70 - a2);
      v69 = DWORD1(v112);
    }
    v36 = v69 - v63;
    v13 = v105;
LABEL_67:
    DWORD1(v112) = v36;
LABEL_68:
    ;
  }
  while (v36);
  v71 = __dst;
  if ((char *)&v112 + 8 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v112) = 0;
    WTF::fastFree((unint64_t)v71, a2, v35, a4, a5, a6, a7, a8);
  }
LABEL_77:
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v114, v107, 0x3000000008uLL, a4, a5, a6, a7, a8, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v112;
  *(_QWORD *)(a1 + 24) = v113;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v114, v72, v73, v74, v75, v76, v77, v78);
  if (a6)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a4, v107, 0, 0, 0xFFFFFFFFLL, v83, v84, v85, (uint64_t)&v109, v86);
    v87 = v109;
    if (v109 != -1)
    {
      v88 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v88 == *(_DWORD *)(a6 + 8))
      {
        v89 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (void *)(v88 + 1), (unint64_t)&v109, v81, v82, v83, v84, v85);
        v91 = *v89;
        v90 = (uint64_t *)(v89 + 1);
        v87 = v91;
        LODWORD(v88) = *(_DWORD *)(a6 + 12);
      }
      else
      {
        v90 = &v110;
      }
      v92 = *(_QWORD *)a6 + 12 * v88;
      *(_DWORD *)v92 = v87;
      *(_QWORD *)(v92 + 4) = *v90;
      ++*(_DWORD *)(a6 + 12);
    }
  }
  if ((v15 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v15 & 0xFFFFFFFF8, v79, v80, v81, v82, v83, v84, v85);
}

void JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, JSC::ARM64LogicalImmediate *a11)
{
  uint64_t *v11;
  uint64_t v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint8x8_t v40;
  __int32 v41;
  uint8x8_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  unsigned int v52;
  char v53;
  char v54;
  uint64_t v55;
  unsigned __int8 *v56;
  char *v57;
  uint64_t v58;
  _BYTE *v59;
  int v60;
  unsigned __int8 *v61;
  char *v62;
  unsigned __int8 *v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int8x8_t v87;
  int v88;
  uint64_t v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  unsigned __int8 *v101;
  uint64_t v102;
  int64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  JSC::AssemblerBuffer *v108;
  int v110;
  uint64_t v111;
  void *__dst;
  __int128 v113;
  uint64_t v114;
  uint64_t v115[9];

  v11 = (uint64_t *)a8;
  v13 = a5;
  v17 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if ((a5 & 1) != 0)
  {
LABEL_81:
    v92 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v93 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v93 != 0x3FFFFFFF)
        ? (v94 = (_DWORD)v93 == -1)
        : (v94 = 1),
          v94))
    {
      v95 = 2;
    }
    else if (v93 >> 28)
    {
      v101 = a2;
      v102 = WTF::fastMalloc((WTF *)0x10);
      a2 = v101;
      *(_QWORD *)v102 = v92;
      *(_DWORD *)(v102 + 8) = v93;
      v95 = 1;
      v92 = v102;
    }
    else
    {
      v95 = v92;
      v92 = v93 << 36;
    }
    v13 = v92 | v95;
  }
  if ((v13 & 2) != 0)
  {
    v23 = a9;
    v24 = a10;
    v25 = 0xFFFFFFFFLL;
    goto LABEL_7;
  }
  v18 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
  v19 = v13;
  if ((v13 & 1) != 0)
  {
    v107 = v17;
    v96 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    v97 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v97 == 0x3FFFFFFF || (_DWORD)v97 == -1)
    {
      v99 = 2;
    }
    else if (v97 >> 28)
    {
      v108 = *(JSC::AssemblerBuffer **)(*((_QWORD *)a2 + 3) + 64);
      v100 = WTF::fastMalloc((WTF *)0x10);
      v18 = (uint64_t)v108;
      *(_QWORD *)v100 = v96;
      *(_DWORD *)(v100 + 8) = v97;
      v99 = 1;
      v96 = v100;
    }
    else
    {
      v99 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      v96 = v97 << 36;
    }
    v19 = v96 | v99;
    v17 = v107;
  }
  v115[0] = v19;
  v22 = JSC::DFG::CodeOriginPool::addCodeOrigin(v18, v115);
  if ((v115[0] & 1) != 0 && (v115[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v115[0] & 0xFFFFFFFF8, v20, v21, a4, a5, a6, a7, a8);
  v23 = a9;
  v24 = a10;
  if (v22)
  {
    v25 = v22;
LABEL_7:
    if (!*(_BYTE *)(a4 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197D8B814);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a4, (JSC::ARM64LogicalImmediate *)v25, a4 + 264, a4, a5, a6, a7, a8);
    v31 = *(_DWORD *)(a4 + 200);
    if (v31 + 4 > *(_DWORD *)(a4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), v26, v27, v28, v29, v30, a7, a8);
      v31 = *(_DWORD *)(a4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + v31) = -1207811152;
    *(_DWORD *)(a4 + 200) += 4;
  }
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v115, a3[1] | *a3, a4, 4u, (uint64_t)v11, 0xFFFFFFFFLL, a7, a8);
  a3 = (_QWORD *)&v113 + 1;
  __dst = (char *)&v113 + 8;
  LODWORD(v113) = 2;
  if (!v23)
  {
    if (v24 == 1)
    {
      v11 = &v111;
      goto LABEL_72;
    }
    v33 = 0;
    goto LABEL_16;
  }
  WORD4(v113) = v23;
  v33 = 1;
  DWORD1(v113) = 1;
  if (v24 != 1)
  {
LABEL_16:
    *((_WORD *)&v113 + v33++ + 4) = v24 | 0x100;
    DWORD1(v113) = v33;
  }
  v11 = &v111;
  do
  {
    v34 = 0;
    v35 = 0;
    v36 = (char *)__dst;
    v37 = v33;
    do
    {
      if ((*((_BYTE *)__dst + v34 + 1) & 0x40) != 0)
      {
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
      v35 |= 1 << *((_BYTE *)__dst + v34 + 1);
      v34 += 2;
    }
    while (2 * v33 != v34);
    v38 = 0;
    do
    {
      v39 = *((_BYTE *)__dst + v38) & 0x7F;
      if (v39 >= 0x40)
        goto LABEL_80;
      v35 &= ~(1 << v39);
      v38 += 2;
    }
    while (2 * v33 != v38);
    v40 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
    v40.i16[0] = vaddlv_u8(v40);
    v41 = v40.i32[0];
    v42 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v35));
    v42.i16[0] = vaddlv_u8(v42);
    if (v42.i32[0] + v41)
    {
      v43 = 0;
      if (v33 <= 1)
        v44 = 1;
      else
        v44 = v33;
      v45 = 2 * v44;
      while (1)
      {
        v46 = *((unsigned __int8 *)__dst + v43 + 1);
        if ((v46 & 0x7Fu) >= 0x40)
          goto LABEL_80;
        if (((v35 >> (v46 & 0x7F)) & 1) != 0)
          break;
        v43 += 2;
        if (v45 == v43)
          goto LABEL_68;
      }
      v47 = *((unsigned __int8 *)__dst + v43);
      if (v47 != v46)
      {
        v48 = (char)v47;
        if ((char)v47 == 63)
        {
          v49 = *(_DWORD *)(a4 + 200);
          v50 = *(_DWORD *)(a4 + 192);
          if ((char)v46 == 31)
            goto LABEL_62;
          v52 = v46 & 0x1F | 0xD2800000;
        }
        else
        {
          v49 = *(_DWORD *)(a4 + 200);
          v50 = *(_DWORD *)(a4 + 192);
          v51 = v46 == 31 || v48 == 31;
          if (!v51)
          {
            v52 = v46 & 0xFFE0FFFF | ((v48 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_63;
          }
LABEL_62:
          v52 = (char)v46 | (32 * v48) | 0x91000000;
        }
LABEL_63:
        if (v49 + 4 > v50)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), (uint64_t)a2, v32, a4, a5, a6, a7, a8);
          v49 = *(_DWORD *)(a4 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a4 + 56) + v49) = v52;
        *(_DWORD *)(a4 + 200) += 4;
        v36 = (char *)__dst;
        v37 = DWORD1(v113);
      }
      memmove(&v36[v43], &v36[v43 + 2], 2 * v37 - v43 - 2);
      v33 = DWORD1(v113) - 1;
      goto LABEL_67;
    }
    v106 = v17;
    v53 = *(_BYTE *)__dst;
    v54 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a4, *(char *)__dst, v54, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v113) - 2);
    v55 = (DWORD1(v113) - 1);
    v51 = DWORD1(v113) == 1;
    DWORD1(v113) = v55;
    v56 = (unsigned __int8 *)__dst;
    v57 = (char *)__dst + 2 * v55;
    if (v51)
    {
      v64 = 0;
      v65 = 0;
      v60 = 0;
      a2 = (unsigned __int8 *)v57;
    }
    else
    {
      v58 = 2 * v55;
      v59 = __dst;
      while (*v59 != v54)
      {
        v59 += 2;
        v58 -= 2;
        if (!v58)
          goto LABEL_46;
      }
      *v59 = v53;
LABEL_46:
      v60 = 0;
      v61 = v56;
      a2 = (unsigned __int8 *)v57;
      v62 = v57;
      do
      {
        if (*v56 == v56[1])
        {
          v63 = v56;
          if (v62 != (char *)__dst + 2 * DWORD1(v113))
          {
            v105 = v57;
            if (v56 == a2)
            {
              v63 = (unsigned __int8 *)v62;
            }
            else
            {
              v103 = v61 - a2;
              v104 = v62;
              memmove(v62, a2, v61 - a2);
              v63 = (unsigned __int8 *)&v104[v103];
            }
            v57 = v105;
          }
          a2 = v56 + 2;
          ++v60;
          v62 = (char *)v63;
        }
        v56 += 2;
        v61 += 2;
      }
      while (v56 < (unsigned __int8 *)v57);
      v56 = (unsigned __int8 *)__dst;
      v64 = DWORD1(v113);
      v65 = DWORD1(v113);
      v57 = v62;
    }
    v66 = &v56[2 * v64];
    v17 = v106;
    if (a2 != v66)
    {
      memmove(v57, a2, v66 - a2);
      v65 = DWORD1(v113);
    }
    v33 = v65 - v60;
LABEL_67:
    DWORD1(v113) = v33;
LABEL_68:
    ;
  }
  while (v33);
  v67 = __dst;
  if ((char *)&v113 + 8 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v113) = 0;
    WTF::fastFree((unint64_t)v67, a2, v32, a4, a5, a6, a7, a8);
  }
LABEL_72:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a4, (uint64_t)a11, 2, a4, a5, a6, a7, a8);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v115, v17, a7, v68, v69, v70, v71, v72, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v113;
  *(_QWORD *)(a1 + 24) = v114;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v115, v73, v74, v75, v76, v77, v78, v79);
  if (a6)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a4, v17, 0, 0, 0xFFFFFFFFLL, v84, v85, v86, (uint64_t)&v110, v87);
    v88 = v110;
    if (v110 != -1)
    {
      v89 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v89 == *(_DWORD *)(a6 + 8))
      {
        v90 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (void *)(v89 + 1), (unint64_t)&v110, v82, v83, v84, v85, v86);
        v11 = (uint64_t *)(v90 + 1);
        v88 = *v90;
        LODWORD(v89) = *(_DWORD *)(a6 + 12);
      }
      v91 = *(_QWORD *)a6 + 12 * v89;
      *(_DWORD *)v91 = v88;
      *(_QWORD *)(v91 + 4) = *v11;
      ++*(_DWORD *)(a6 + 12);
    }
  }
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v80, v81, v82, v83, v84, v85, v86);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)20,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)20,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)20,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(v2 + 28);
  if (v3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
  v5 = (v3 - v4);
  v6 = a2[23];
  v7 = v5 + v6;
  if (v6 <= v5 + v6 && v6 + a2[1] >= v7)
    return JSC::JITInlineCacheGenerator::finalize(v2 + 8, a2, a2, v7);
  result = 366;
  __break(0xC471u);
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)21,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)21,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)21,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::FTL::ExceptionTarget *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  _DWORD *v58;
  uint64_t *v59;
  int v60;
  char *v61;
  int i;
  unsigned int v63;
  _QWORD *v64;
  int v65;
  WTF *v66;
  WTF *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  uint64_t v72;
  __int128 *v73;
  uint64_t v74;
  __int128 v75;
  WTF *v76;
  void *v77;
  WTF *v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF *v107;
  unsigned int v108;
  unsigned int v109;
  WTF *v110;
  unsigned int v111;
  unsigned int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  const void *v116;
  void *v117;
  _BYTE *v118;
  unsigned int v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  unint64_t v136;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  unsigned int v141;
  int v142;
  _QWORD v143[4];
  char v144;
  uint64_t v145;
  uint64_t v146;
  _OWORD *v147;
  int v148;
  int v149;
  void *v150;
  int v151;
  int v152;
  void *v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int *v158;
  char v159;
  char v160;
  char v161;
  int v162;
  int v163;
  uint64_t v164;
  WTF *v165;
  uint64_t v166;
  _BYTE v167[29];
  char v168;
  char v169;
  char v170;
  WTF *v171;
  uint64_t v172;
  int v173;
  JSC::FTL::ExceptionTarget *v174[20];

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [5]>(a2);
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v8 = (uint64_t *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v7 & 1) != 0)
  {
    v122 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v123 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v123 != 0x3FFFFFFF)
        ? (v124 = (_DWORD)v123 == -1)
        : (v124 = 1),
          v124))
    {
      v125 = 2;
    }
    else if (v123 >> 28)
    {
      v138 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v138 = v122;
      *(_DWORD *)(v138 + 8) = v123;
      v125 = 1;
      v122 = v138;
    }
    else
    {
      v125 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v122 = v123 << 36;
    }
    v7 = v122 | v125;
  }
  v172 = v7;
  v173 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v9, &v172);
  if ((v172 & 1) != 0 && (v172 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v172 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v174);
  v17 = v174[0];
  JSC::FTL::ExceptionTarget::jumps(v174[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v171);
  v174[0] = 0;
  if (v17)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v17);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v17));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v17);
      v130 = (unsigned int *)*((_QWORD *)v17 + 2);
      *((_QWORD *)v17 + 2) = 0;
      if (v130)
      {
        do
        {
          v131 = __ldaxr(v130);
          v132 = v131 - 1;
        }
        while (__stlxr(v132, v130));
        if (!v132)
        {
          atomic_store(1u, v130);
          WTF::fastFree((unint64_t)v130, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      v133 = (unsigned int *)*((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = 0;
      if (v133)
      {
        do
        {
          v134 = __ldaxr(v133);
          v135 = v134 - 1;
        }
        while (__stlxr(v135, v133));
        if (!v135)
        {
          atomic_store(1u, v133);
          WTF::fastFree((unint64_t)v133, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      WTF::fastFree((unint64_t)v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 32), a3, v173, v20, v21, v22, v23, v24);
  v170 = -1;
  if (HIBYTE(qword_1ECF4C780))
  {
    if (!*(_DWORD *)(a3 + 36))
    {
      __break(0xC471u);
      JUMPOUT(0x197D8C3B4);
    }
    v170 = **(_BYTE **)(a3 + 24);
  }
  v27 = *(_DWORD *)(a3 + 20);
  if (!v27)
  {
    __break(0xC471u);
    goto LABEL_126;
  }
  if (v27 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D8C39CLL);
  }
  v28 = *(char **)(a3 + 8);
  v29 = *v28;
  v169 = v28[16] & 0x7F;
  if (v27 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D8C3A4);
  }
  v168 = v28[32] & 0x7F;
  v30 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v31 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v31 = 2;
  *(_DWORD *)(v31 + 96) = 0;
  *(_OWORD *)(v31 + 12) = 0u;
  *(_OWORD *)(v31 + 28) = 0u;
  *(_DWORD *)(v31 + 44) = 0;
  *(_QWORD *)(v31 + 64) = 0;
  *(_QWORD *)(v31 + 72) = 0;
  *(_QWORD *)(v31 + 56) = 0;
  *(_QWORD *)(v31 + 104) = 0;
  *(_QWORD *)(v31 + 112) = -1;
  *(_WORD *)(v31 + 120) = -1;
  *(_DWORD *)(v31 + 122) = 0x10000;
  *(_BYTE *)(v31 + 126) = 0;
  *(_BYTE *)(v31 + 127) = BYTE12(xmmword_1ECF4C260);
  *(_BYTE *)(v31 + 128) = 0;
  *(_WORD *)(v31 + 129) &= 0xFC00u;
  *(_QWORD *)(v31 + 136) = 0;
  *(_QWORD *)(v31 + 136) = *(_QWORD *)(v30 + 168);
  *(_QWORD *)(v30 + 168) = v31;
  *(_WORD *)(v31 + 129) = *(_WORD *)(v31 + 129) & 0xFDFF | (HIBYTE(qword_1ECF4C780) << 9);
  v32 = *(_QWORD *)(a2 + 336);
  LOBYTE(v140) = 21;
  v33 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v34 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v35 = *(unsigned int *)(a3 + 36);
  if ((_DWORD)v35)
  {
    v36 = *(_BYTE **)(a3 + 24);
    do
    {
      v37 = *v36 & 0x7F;
      if (v37 >= 0x40)
        goto LABEL_125;
      v38 = 1 << v37;
      v34 &= ~v38;
      v33 &= ~v38;
      ++v36;
    }
    while (--v35);
  }
  v39 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v39)
  {
    v118 = *(_BYTE **)(a3 + 40);
    do
    {
      v119 = (*v118 + 32) & 0x7F;
      if (v119 >= 0x40)
        goto LABEL_125;
      v120 = 1 << v119;
      v34 &= ~v120;
      v33 &= ~v120;
      ++v118;
    }
    while (--v39);
  }
  v40 = v29 & 0x7F;
  v174[0] = (JSC::FTL::ExceptionTarget *)v34;
  v174[1] = (JSC::FTL::ExceptionTarget *)v33;
  LOBYTE(v165) = v29 & 0x7F;
  v41 = WTF::fastMalloc((WTF *)0x40);
  v42 = WTF::Box<JSC::JITInByValGenerator>::Data::Data<JSC::CodeBlock *,JSC::StructureStubInfo *&,JSC::JITType,JSC::CodeOrigin const&,JSC::CallSiteIndex &,JSC::AccessType,JSC::RegisterSetBuilder,JSC::JSValueRegs &,JSC::JSValueRegs const&,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID const&,JSC::ARM64Registers::RegisterID&>((_DWORD *)v41, v32, v31, 5u, (JSC::CodeOrigin *)(a1 + 24), &v173, (char *)&v140, (uint64_t)v174, &v169, &v168, (char *)&v165, &v170);
  v165 = (WTF *)v167;
  v166 = 2;
  JSC::JITDelByValGenerator::generateFastPath((JSC::JITDelByValGenerator *)(v42 + 2), (JSC::CCallHelpers *)a2, v43, v44, v45, v46, v47, v48);
  if (!HIBYTE(qword_1ECF4C780))
  {
    v56 = *(_DWORD *)(v41 + 48);
    v163 = v56;
    v164 = *(_QWORD *)(v41 + 52);
    if (v56 != -1)
    {
      v57 = HIDWORD(v166);
      if (HIDWORD(v166) == (_DWORD)v166)
      {
        v58 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v165, (void *)(HIDWORD(v166) + 1), (unint64_t)&v163, v51, v52, v53, v54, v55);
        v60 = *v58;
        v59 = (uint64_t *)(v58 + 1);
        v56 = v60;
        v57 = HIDWORD(v166);
      }
      else
      {
        v59 = &v164;
      }
      v61 = (char *)v165 + 12 * v57;
      *(_DWORD *)v61 = v56;
      *(_QWORD *)(v61 + 4) = *v59;
      ++HIDWORD(v166);
    }
  }
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v49, v50, v51, v52, v53, v54, v55);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v63 = HIDWORD(v166);
  v64 = v143;
  v140 = v143;
  v141 = 2;
  v142 = HIDWORD(v166);
  if (HIDWORD(v166) >= 3)
  {
    if (HIDWORD(v166) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197D8C3BCLL);
    }
    v65 = 12 * HIDWORD(v166);
    v64 = (_QWORD *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v166)));
    v141 = (v65 & 0xFFFFFFFC) / 0xC;
    v140 = v64;
    v63 = HIDWORD(v166);
  }
  if (v63)
  {
    v66 = v165;
    v67 = (WTF *)((char *)v165 + 12 * v63);
    do
    {
      *(_DWORD *)v64 = *(_DWORD *)v66;
      *(_QWORD *)((char *)v64 + 4) = *(_QWORD *)((char *)v66 + 4);
      v66 = (WTF *)((char *)v66 + 12);
      v64 = (_QWORD *)((char *)v64 + 12);
    }
    while (v66 != v67);
  }
  do
    v68 = __ldaxr((unsigned int *)v41);
  while (__stlxr(v68 + 1, (unsigned int *)v41));
  v143[3] = v41;
  v144 = v170;
  v69 = *(_QWORD *)a3;
  v145 = *(_QWORD *)(a1 + 16);
  v146 = v69;
  v70 = *(unsigned int *)(a3 + 20);
  v147 = 0;
  v148 = 0;
  v149 = v70;
  if ((_DWORD)v70)
  {
    if (v70 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197D8C3ACLL);
    }
    v71 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v70));
    v148 = v70;
    v147 = v71;
    v72 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v72)
    {
      v73 = *(__int128 **)(a3 + 8);
      v74 = 16 * v72;
      do
      {
        v75 = *v73++;
        *v71++ = v75;
        v74 -= 16;
      }
      while (v74);
    }
  }
  v76 = (WTF *)*(unsigned int *)(a3 + 36);
  v150 = 0;
  v151 = 0;
  v152 = (int)v76;
  if ((_DWORD)v76)
  {
    v77 = (void *)WTF::fastMalloc(v76);
    v151 = (int)v76;
    v150 = v77;
    memcpy(v77, *(const void **)(a3 + 24), *(unsigned int *)(a3 + 36));
  }
  v78 = (WTF *)*(unsigned int *)(a3 + 52);
  v153 = 0;
  v154 = 0;
  v155 = (int)v78;
  if ((_DWORD)v78)
  {
    v121 = (void *)WTF::fastMalloc(v78);
    v154 = (int)v78;
    v153 = v121;
    memcpy(v121, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 52));
  }
  v156 = *(_QWORD *)(a3 + 56);
  v79 = *v8;
  if ((*v8 & 1) != 0)
  {
    v126 = *(_QWORD *)(v79 & 0xFFFFFFFF8);
    if ((v79 & 2) != 0
      || ((v127 = *(unsigned int *)((v79 & 0xFFFFFFFF8) + 8), (_DWORD)v127 != 0x3FFFFFFF)
        ? (v128 = (_DWORD)v127 == -1)
        : (v128 = 1),
          v128))
    {
      v129 = 2;
    }
    else if (v127 >> 28)
    {
      v139 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v139 = v126;
      *(_DWORD *)(v139 + 8) = v127;
      v129 = 1;
      v126 = v139;
    }
    else
    {
      v129 = *(_QWORD *)(v79 & 0xFFFFFFFF8);
      v126 = v127 << 36;
    }
    v79 = v126 | v129;
  }
  v157 = v79;
  v80 = (unsigned int *)v171;
  if (v171)
  {
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 + 1, v80));
  }
  v158 = v80;
  v159 = v40;
  v160 = v169;
  v161 = v168;
  v162 = i;
  v82 = *(_QWORD *)(a3 + 56);
  v83 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)(v83 + 8) = 1;
  *(_QWORD *)v83 = off_1E3575FB0;
  v91 = *(unsigned int *)(v82 + 12);
  if ((_DWORD)v91 != *(_DWORD *)(v82 + 8))
  {
    v92 = (uint64_t *)(*(_QWORD *)v82 + 8 * v91);
    goto LABEL_49;
  }
  v113 = v91 + (v91 >> 2);
  if (v113 >= 0x10)
    v114 = v113 + 1;
  else
    v114 = 16;
  if (v114 <= v91 + 1)
    v115 = v91 + 1;
  else
    v115 = v114;
  if (v115 >> 29)
  {
    __break(0xC471u);
LABEL_125:
    __break(1u);
LABEL_126:
    JUMPOUT(0x197D8C394);
  }
  v116 = *(const void **)v82;
  v117 = (void *)WTF::fastMalloc((WTF *)(8 * v115));
  *(_DWORD *)(v82 + 8) = v115;
  *(_QWORD *)v82 = v117;
  memcpy(v117, v116, 8 * v91);
  if (v116)
  {
    if (*(const void **)v82 == v116)
    {
      *(_QWORD *)v82 = 0;
      *(_DWORD *)(v82 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v116, v84, v85, v86, v87, v88, v89, v90);
  }
  v91 = *(unsigned int *)(v82 + 12);
  v92 = (uint64_t *)(*(_QWORD *)v82 + 8 * v91);
LABEL_49:
  *v92 = v83;
  *(_DWORD *)(v82 + 12) = v91 + 1;
  v107 = v165;
  if (v167 != (_BYTE *)v165 && v165)
  {
    v165 = 0;
    LODWORD(v166) = 0;
    WTF::fastFree((unint64_t)v107, v100, v101, v102, v103, v104, v105, v106);
  }
  do
  {
    v108 = __ldaxr((unsigned int *)v41);
    v109 = v108 - 1;
  }
  while (__stlxr(v109, (unsigned int *)v41));
  if (!v109)
  {
    atomic_store(1u, (unsigned int *)v41);
    WTF::fastFree(v41, v100, v101, v102, v103, v104, v105, v106);
  }
  v110 = v171;
  v171 = 0;
  if (v110)
  {
    do
    {
      v111 = __ldaxr((unsigned int *)v110);
      v112 = v111 - 1;
    }
    while (__stlxr(v112, (unsigned int *)v110));
    if (!v112)
    {
      atomic_store(1u, (unsigned int *)v110);
      v136 = *((_QWORD *)v110 + 1);
      if ((WTF *)((char *)v110 + 24) != (WTF *)v136 && v136 != 0)
      {
        *((_QWORD *)v110 + 1) = 0;
        *((_DWORD *)v110 + 4) = 0;
        WTF::fastFree(v136, v100, v101, v102, v103, v104, v105, v106);
      }
      WTF::fastFree((unint64_t)v110, v100, v101, v102, v103, v104, v105, v106);
    }
  }
  *(_BYTE *)(a2 + 212) = v6;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)21,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)21,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)21,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)21,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)21,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)21,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int i;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int j;
  unsigned int v47;
  char v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  const void *v66;
  void *v67;
  unsigned int v68;
  unsigned int v69;
  _BYTE *v70;
  unsigned int v71;
  uint64_t v72;
  _BYTE *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  __int16 v91;
  char v92;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v11 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = 12 * v11;
    while (v13 < *(unsigned int *)(a1 + 28))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 16) + v12), a2, a3, a4, a5, a6, a7, a8);
      ++v13;
      v12 += 12;
      if (v14 == v12)
        goto LABEL_7;
    }
    __break(0xC471u);
LABEL_99:
    JUMPOUT(0x197D8CA04);
  }
LABEL_7:
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16), *(char *)(a1 + 64), a4, a5, a6, a7, a8);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 48) = operationHasPrivateBrandOptimize;
    v16 = *(unsigned __int8 **)(a1 + 72);
    v17 = *(_QWORD *)(a1 + 80);
    v19 = *(_QWORD *)(v17 + 96);
    v18 = *(_QWORD *)(v17 + 104);
    v20 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 48) + 216) & 0xFF003FF80000 | v19;
    v21 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v21)
    {
      v22 = *(_BYTE **)(a1 + 104);
      do
      {
        v23 = *v22 & 0x7F;
        if (v23 >= 0x40)
          goto LABEL_98;
        v24 = 1 << v23;
        v20 &= ~v24;
        v18 &= ~v24;
        ++v22;
      }
      while (--v21);
    }
    v25 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v25)
    {
      v70 = *(_BYTE **)(a1 + 120);
      do
      {
        v71 = (*v70 + 32) & 0x7F;
        if (v71 >= 0x40)
          goto LABEL_98;
        v72 = 1 << v71;
        v20 &= ~v72;
        v18 &= ~v72;
        ++v70;
      }
      while (--v25);
    }
    v87 = v20;
    v88 = v18;
    v26 = *(_QWORD *)(a1 + 144);
    if ((v26 & 1) != 0)
    {
      v76 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      if ((v26 & 2) != 0
        || ((v77 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v77 != 0x3FFFFFFF)
          ? (v78 = (_DWORD)v77 == -1)
          : (v78 = 1),
            v78))
      {
        v79 = 2;
      }
      else if (v77 >> 28)
      {
        v84 = v76;
        v85 = v16;
        v76 = WTF::fastMalloc((WTF *)0x10);
        v16 = v85;
        *(_QWORD *)v76 = v84;
        *(_DWORD *)(v76 + 8) = v77;
        v79 = 1;
      }
      else
      {
        v79 = v76;
        v76 = v77 << 36;
      }
      v26 = v76 | v79;
      v27 = ((v76 | v79) & 1) == 0;
    }
    else
    {
      v27 = 1;
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>((uint64_t)&v89, v16, (uint64_t)&v87, a2, v26, *(_QWORD *)(a1 + 152) + 8, *(unsigned __int8 *)(a1 + 64) | 0x3000000000, *(char *)(a1 + 160), *(_BYTE *)(a1 + 161), 0, *(_BYTE *)(a1 + 162), 0, *(_BYTE *)(a1 + 64));
  }
  else
  {
    v35 = *(unsigned __int8 **)(a1 + 72);
    v36 = *(_QWORD *)(a1 + 80);
    v38 = *(_QWORD *)(v36 + 96);
    v37 = *(_QWORD *)(v36 + 104);
    v39 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 48) + 216) & 0xFF003FF80000 | v38;
    v40 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v40)
    {
      v41 = *(_BYTE **)(a1 + 104);
      do
      {
        v42 = *v41 & 0x7F;
        if (v42 >= 0x40)
          goto LABEL_98;
        v43 = 1 << v42;
        v39 &= ~v43;
        v37 &= ~v43;
        ++v41;
      }
      while (--v40);
    }
    v44 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v44)
    {
      v73 = *(_BYTE **)(a1 + 120);
      do
      {
        v74 = (*v73 + 32) & 0x7F;
        if (v74 >= 0x40)
          goto LABEL_98;
        v75 = 1 << v74;
        v39 &= ~v75;
        v37 &= ~v75;
        ++v73;
      }
      while (--v44);
    }
    v87 = v39;
    v88 = v37;
    v26 = *(_QWORD *)(a1 + 144);
    if ((v26 & 1) != 0)
    {
      v80 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      if ((v26 & 2) != 0
        || ((v81 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v81 != 0x3FFFFFFF)
          ? (v82 = (_DWORD)v81 == -1)
          : (v82 = 1),
            v82))
      {
        v83 = 2;
      }
      else
      {
        v83 = v80;
        v86 = v35;
        if (v81 >> 28)
        {
          v80 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v80 = v83;
          *(_DWORD *)(v80 + 8) = v81;
          v83 = 1;
        }
        else
        {
          v80 = v81 << 36;
        }
        v35 = v86;
      }
      v26 = v80 | v83;
      v27 = ((v80 | v83) & 1) == 0;
    }
    else
    {
      v27 = 1;
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)&v89, v35, &v87, a2, v26, *(_QWORD *)(a1 + 152) + 8, (uint64_t)operationHasPrivateBrandOptimize, *(char *)(a1 + 160), *(unsigned __int8 *)(a1 + 161), *(unsigned __int8 *)(a1 + 162), *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)(a1 + 56) + 16));
  }
  v45 = v89;
  if (!v27 && (v26 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v26 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
  for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v28, v29, v30, v31, v32, v33, v34);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v47 = j;
  if (j + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v28, v29, v30, v31, v32, v33, v34);
    v47 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v47) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v48 = 69;
  else
    v48 = 65;
  v89 = j;
  v90 = v48;
  v91 = 15;
  v92 = -1;
  LODWORD(v87) = *(_DWORD *)(a1 + 164);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v89, (unsigned int *)&v87, a2, v30, v31, v32, v33, v34);
  v49 = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v49 + 36) = i;
  *(_QWORD *)(v49 + 40) = v45;
  do
    v50 = __ldaxr((unsigned int *)v49);
  while (__stlxr(v50 + 1, (unsigned int *)v49));
  v51 = WTF::fastMalloc((WTF *)0x18);
  v59 = v51;
  *(_DWORD *)(v51 + 8) = 1;
  *(_QWORD *)v51 = &off_1E3575FD8;
  do
    v60 = __ldaxr((unsigned int *)v49);
  while (__stlxr(v60 + 1, (unsigned int *)v49));
  *(_QWORD *)(v51 + 16) = v49;
  v61 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v61 != *(_DWORD *)(a2 + 240))
  {
    v62 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v61);
    goto LABEL_47;
  }
  v63 = v61 + (v61 >> 2);
  if (v63 >= 0x10)
    v64 = v63 + 1;
  else
    v64 = 16;
  if (v64 <= v61 + 1)
    v65 = v61 + 1;
  else
    v65 = v64;
  if (v65 >> 29)
  {
    __break(0xC471u);
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  v66 = *(const void **)(a2 + 232);
  v67 = (void *)WTF::fastMalloc((WTF *)(8 * v65));
  *(_DWORD *)(a2 + 240) = v65;
  *(_QWORD *)(a2 + 232) = v67;
  memcpy(v67, v66, 8 * v61);
  if (v66)
  {
    if (*(const void **)(a2 + 232) == v66)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v66, v52, v53, v54, v55, v56, v57, v58);
  }
  v61 = *(unsigned int *)(a2 + 244);
  v62 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v61);
LABEL_47:
  *v62 = v59;
  *(_DWORD *)(a2 + 244) = v61 + 1;
  do
  {
    v68 = __ldaxr((unsigned int *)v49);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, (unsigned int *)v49));
  if (!v69)
  {
    atomic_store(1u, (unsigned int *)v49);
    WTF::fastFree(v49, v52, v53, v54, v55, v56, v57, v58);
  }
  *(_BYTE *)(a2 + 212) = v10;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)21,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)21,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileInBy<(JSC::AccessType)21,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(v2 + 28);
  if (v3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
  v5 = (v3 - v4);
  v6 = a2[23];
  v7 = v5 + v6;
  if (v6 <= v5 + v6 && v6 + a2[1] >= v7)
    return JSC::JITInlineCacheGenerator::finalize(v2 + 8, a2, a2, v7);
  result = 366;
  __break(0xC471u);
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePrivateBrandAccess(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  WTF *v47;
  unsigned int v48;
  __int16 v49;
  __int16 v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  WTF *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE v97[24];
  uint64_t v98;
  WTF *v99;

  v8 = *(uint64_t **)(a1 + 28224);
  v9 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)(a1 + 27640), 0);
  *(_OWORD *)v97 = (unint64_t)a2;
  v97[16] = 3;
  JSC::B3::StackmapValue::append(v9, a2, (unint64_t)&v97[8]);
  *(_OWORD *)v97 = (unint64_t)a3;
  v97[16] = 3;
  JSC::B3::StackmapValue::append(v9, a3, (unint64_t)&v97[8]);
  v10 = *(_QWORD *)(a1 + 27904);
  *(_OWORD *)v97 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v9, v10, (unint64_t)v97);
  v11 = *(_QWORD *)(a1 + 27896);
  *(_OWORD *)v97 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v9, v11, (unint64_t)v97);
  *((_QWORD *)v9 + 8) |= 0x30000uLL;
  *((_QWORD *)v9 + 10) |= 0x30000uLL;
  *((_BYTE *)v9 + 168) = HIBYTE(qword_1ECF4C780);
  v24 = *(_QWORD *)(a1 + 8);
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 28224) + 24);
  v26 = *(_QWORD *)(a1 + 28040);
  v27 = *(unsigned int *)((v25 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v28 = (uint64_t *)(v26 + 24);
  v29 = (uint64_t *)(v26 + 8);
  if ((v25 & 1) != 0)
    v30 = v28;
  else
    v30 = v29;
  v31 = *v30;
  v32 = *v30 + 32 * v27;
  v33 = *(_DWORD *)(a1 + 28120);
  v34 = *(_DWORD *)(v32 + 20);
  if (v33 != v34)
  {
    if ((*(_QWORD *)(v32 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v34 ^ v33) >= 2)
      {
        v70 = *(_QWORD *)v32;
        if (*(_QWORD *)v32 != 4)
        {
          *(_QWORD *)v32 = v70 | 2;
          v71 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v70 & 1) != 0)
          {
            v85 = 2 * *v71;
            while (v85 * 4)
            {
              v86 = *(_QWORD *)&v71[v85];
              if ((*(_BYTE *)(v86 + 19) & 0xC) == 0)
              {
                v87 = *(_QWORD *)(v86 + 96);
                v88 = (v87 & 1) != 0 ? (v87 >> 1) & 3 : *(unsigned __int8 *)(v87 + 4);
                v85 -= 2;
                if (v88 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v71, v17, v18, v19, v20, v21, v22, v23);
              goto LABEL_80;
            }
          }
          else if (v71)
          {
            if ((*((_BYTE *)v71 + 19) & 0xC) != 0
              || ((v72 = *((_QWORD *)v71 + 12), (v72 & 1) != 0)
                ? (v73 = (v72 >> 1) & 3)
                : (v73 = *(unsigned __int8 *)(v72 + 4)),
                  v73 == 2))
            {
LABEL_80:
              *(_QWORD *)v32 = 4;
            }
          }
        }
        *(_DWORD *)(v31 + 32 * v27 + 16) = -21020677;
      }
      if ((v33 & 1) != 0)
        *(_QWORD *)v32 &= ~2uLL;
    }
    *(_DWORD *)(v32 + 20) = v33;
  }
  *(_QWORD *)v97 = 0;
  v35 = *(_QWORD *)v32;
  if ((*(_QWORD *)v32 & 1) == 0 || v35 == 4)
  {
    v36 = v35 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else
  {
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v97, (_QWORD *)v32);
    v36 = *(_QWORD *)v97;
    v35 = *(_QWORD *)v32;
  }
  v37 = v36 & 0xFFFFFFFFFFFFFFFDLL;
  v38 = v36 | 2;
  if ((v35 & 2) != 0)
    v39 = v38;
  else
    v39 = v37;
  *(_QWORD *)v97 = v39;
  v40 = v31 + 32 * v27;
  v41 = *(_QWORD *)(v40 + 24);
  *(_OWORD *)&v97[8] = *(_OWORD *)(v40 + 8);
  v98 = v41;
  v42 = *(_QWORD *)&v97[8];
  if ((v39 & 1) != 0)
    WTF::fastFree(v39 & 0xFFFFFFFFFFFFFFFCLL, v17, v18, v19, v20, v21, v22, v23);
  v43 = *v8;
  if ((*v8 & 1) == 0)
    goto LABEL_13;
  v74 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
  if ((v43 & 2) != 0
    || ((v75 = *(unsigned int *)((v43 & 0xFFFFFFFF8) + 8), (_DWORD)v75 != 0x3FFFFFFF)
      ? (v76 = (_DWORD)v75 == -1)
      : (v76 = 1),
        v76))
  {
    v77 = 2;
  }
  else if (v75 >> 28)
  {
    v93 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v93 = v74;
    *(_DWORD *)(v93 + 8) = v75;
    v77 = 1;
    v74 = v93;
  }
  else
  {
    v77 = v74;
    v74 = v75 << 36;
  }
  v43 = v74 | v77;
  if (((v74 | v77) & 1) != 0)
  {
    v89 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
    if ((v43 & 2) != 0
      || ((v90 = *(unsigned int *)((v43 & 0xFFFFFFFF8) + 8), (_DWORD)v90 != 0x3FFFFFFF)
        ? (v91 = (_DWORD)v90 == -1)
        : (v91 = 1),
          v91))
    {
      v92 = 2;
    }
    else if (v90 >> 28)
    {
      v96 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v96 = v89;
      *(_DWORD *)(v96 + 8) = v90;
      v92 = 1;
      v89 = v96;
    }
    else
    {
      v92 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
      v89 = v90 << 36;
    }
    v44 = 0;
    v45 = v89 | v92;
  }
  else
  {
LABEL_13:
    v44 = 1;
    v45 = v43;
  }
  v46 = v42 & 0xFFFFD7FF00000008;
  v47 = v99;
  if (v99)
  {
    do
      v48 = __ldaxr((unsigned int *)v47);
    while (__stlxr(v48 + 1, (unsigned int *)v47));
  }
  v49 = v46 == 0;
  v50 = a4;
  v58 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v58 + 8) = 1;
  *(_QWORD *)v58 = &off_1E3576000;
  *(_QWORD *)(v58 + 16) = v24;
  v59 = v45;
  if ((v45 & 1) != 0)
  {
    v78 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
    if ((v45 & 2) != 0
      || (v79 = *(unsigned int *)((v45 & 0xFFFFFFFF8) + 8), (_DWORD)v79 == 0x3FFFFFFF)
      || (_DWORD)v79 == -1)
    {
      v80 = 2;
    }
    else if (v79 >> 28)
    {
      v94 = *(_DWORD *)((v45 & 0xFFFFFFFF8) + 8);
      v95 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v95 = v78;
      *(_DWORD *)(v95 + 8) = v94;
      v80 = 1;
      v78 = v95;
    }
    else
    {
      v80 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
      v78 = v79 << 36;
    }
    v59 = v78 | v80;
  }
  *(_QWORD *)(v58 + 24) = v59;
  if (v47)
  {
    do
      v60 = __ldaxr((unsigned int *)v47);
    while (__stlxr(v60 + 1, (unsigned int *)v47));
  }
  *(_QWORD *)(v58 + 32) = v47;
  *(_WORD *)(v58 + 40) = v50 | (v49 << 8);
  v61 = (unsigned int *)*((_QWORD *)v9 + 7);
  *((_QWORD *)v9 + 7) = v58;
  if (!v61)
    goto LABEL_23;
  v62 = v61 + 2;
  do
  {
    v63 = __ldaxr(v62);
    v64 = v63 - 1;
  }
  while (__stlxr(v64, v62));
  if (!v64)
  {
    atomic_store(1u, v61 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 8))(v61);
    if (!v47)
      goto LABEL_26;
  }
  else
  {
LABEL_23:
    if (!v47)
      goto LABEL_26;
  }
  do
  {
    v65 = __ldaxr((unsigned int *)v47);
    v66 = v65 - 1;
  }
  while (__stlxr(v66, (unsigned int *)v47));
  if (!v66)
  {
    atomic_store(1u, (unsigned int *)v47);
    v81 = *((_QWORD *)v47 + 4);
    if ((v81 & 1) != 0 && (v81 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v81 & 0xFFFFFFFF8, v51, v52, v53, v54, v55, v56, v57);
    v82 = *((_QWORD *)v47 + 3);
    if ((v82 & 1) != 0 && (v82 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v82 & 0xFFFFFFFF8, v51, v52, v53, v54, v55, v56, v57);
    WTF::fastFree((unint64_t)v47, v51, v52, v53, v54, v55, v56, v57);
  }
LABEL_26:
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v51, v52, v53, v54, v55, v56, v57);
  if ((v44 & 1) == 0 && (v43 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v43 & 0xFFFFFFFF8, v51, v52, v53, v54, v55, v56, v57);
  v67 = v99;
  v99 = 0;
  if (v67)
  {
    do
    {
      v68 = __ldaxr((unsigned int *)v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, (unsigned int *)v67));
    if (!v69)
    {
      atomic_store(1u, (unsigned int *)v67);
      v83 = *((_QWORD *)v67 + 4);
      if ((v83 & 1) != 0 && (v83 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v83 & 0xFFFFFFFF8, v51, v52, v53, v54, v55, v56, v57);
      v84 = *((_QWORD *)v67 + 3);
      if ((v84 & 1) != 0 && (v84 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v84 & 0xFFFFFFFF8, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree((unint64_t)v67, v51, v52, v53, v54, v55, v56, v57);
    }
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePrivateBrandAccess(JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePrivateBrandAccess(JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePrivateBrandAccess(JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  char *v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  JSC::JITDelByValGenerator *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  uint64_t v68;
  __int128 *v69;
  uint64_t v70;
  __int128 v71;
  WTF *v72;
  void *v73;
  WTF *v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  char v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  WTF *v106;
  unsigned int v107;
  unsigned int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  const void *v112;
  void *v113;
  _BYTE *v114;
  unsigned int v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  JSC::AssemblerBuffer *v126;
  JSC::AssemblerBuffer *v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  unint64_t v138;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  char v145;
  char v146;
  _BYTE v147[12];
  unsigned int *v148;
  char v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  _OWORD *v153;
  int v154;
  int v155;
  void *v156;
  int v157;
  int v158;
  void *v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int *v164;
  char v165;
  char v166;
  int v167;
  WTF *v168;
  uint64_t v169;
  _OWORD v170[8];

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "PrivateBrandAccess");
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v7 & 1) != 0)
  {
    v118 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v119 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v119 != 0x3FFFFFFF)
        ? (v120 = (_DWORD)v119 == -1)
        : (v120 = 1),
          v120))
    {
      v121 = 2;
    }
    else if (v119 >> 28)
    {
      v140 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v140 = v118;
      *(_DWORD *)(v140 + 8) = v119;
      v121 = 1;
      v118 = v140;
    }
    else
    {
      v121 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v118 = v119 << 36;
    }
    v7 = v118 | v121;
  }
  v169 = v7;
  v16 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v8, &v169);
  if ((v169 & 1) != 0 && (v169 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v169 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v170);
  v17 = *(_QWORD *)&v170[0];
  JSC::FTL::ExceptionTarget::jumps(*(JSC::FTL::ExceptionTarget **)&v170[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v168);
  *(_QWORD *)&v170[0] = 0;
  if (v17)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v17);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v17));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v17);
      v132 = *(unsigned int **)(v17 + 16);
      *(_QWORD *)(v17 + 16) = 0;
      if (v132)
      {
        do
        {
          v133 = __ldaxr(v132);
          v134 = v133 - 1;
        }
        while (__stlxr(v134, v132));
        if (!v134)
        {
          atomic_store(1u, v132);
          WTF::fastFree((unint64_t)v132, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      v135 = *(unsigned int **)(v17 + 8);
      *(_QWORD *)(v17 + 8) = 0;
      if (v135)
      {
        do
        {
          v136 = __ldaxr(v135);
          v137 = v136 - 1;
        }
        while (__stlxr(v137, v135));
        if (!v137)
        {
          atomic_store(1u, v135);
          WTF::fastFree((unint64_t)v135, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  v27 = v16;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 32), a3, v16, v20, v21, v22, v23, v24);
  v28 = *(_DWORD *)(a3 + 20);
  if (!v28)
  {
    __break(0xC471u);
    goto LABEL_130;
  }
  if (v28 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D8D9F8);
  }
  v29 = *(char **)(a3 + 8);
  v30 = *v29;
  v31 = v29[16];
  v145 = v6;
  if (HIBYTE(qword_1ECF4C780))
  {
    if (!*(_DWORD *)(a3 + 36))
    {
      __break(0xC471u);
      JUMPOUT(0x197D8DA08);
    }
    v32 = **(_BYTE **)(a3 + 24);
  }
  else
  {
    v32 = -1;
  }
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v34 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v34 = 2;
  *(_DWORD *)(v34 + 96) = 0;
  *(_OWORD *)(v34 + 12) = 0u;
  *(_OWORD *)(v34 + 28) = 0u;
  *(_DWORD *)(v34 + 44) = 0;
  *(_QWORD *)(v34 + 64) = 0;
  *(_QWORD *)(v34 + 72) = 0;
  *(_QWORD *)(v34 + 56) = 0;
  *(_QWORD *)(v34 + 104) = 0;
  *(_QWORD *)(v34 + 112) = -1;
  *(_WORD *)(v34 + 120) = -1;
  *(_DWORD *)(v34 + 122) = 0x10000;
  *(_BYTE *)(v34 + 126) = 0;
  *(_BYTE *)(v34 + 127) = BYTE12(xmmword_1ECF4C260);
  *(_BYTE *)(v34 + 128) = 0;
  *(_WORD *)(v34 + 129) &= 0xFC00u;
  *(_QWORD *)(v34 + 136) = 0;
  *(_QWORD *)(v34 + 136) = *(_QWORD *)(v33 + 168);
  *(_QWORD *)(v33 + 168) = v34;
  *(_WORD *)(v34 + 129) = *(_WORD *)(v34 + 129) & 0xFDFF | (HIBYTE(qword_1ECF4C780) << 9);
  v35 = *(_QWORD *)(a2 + 336);
  v36 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v37 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v38 = *(unsigned int *)(a3 + 36);
  if ((_DWORD)v38)
  {
    v39 = *(_BYTE **)(a3 + 24);
    do
    {
      v40 = *v39 & 0x7F;
      if (v40 >= 0x40)
        goto LABEL_129;
      v41 = 1 << v40;
      v37 &= ~v41;
      v36 &= ~v41;
      ++v39;
    }
    while (--v38);
  }
  v42 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v42)
  {
    v114 = *(_BYTE **)(a3 + 40);
    do
    {
      v115 = (*v114 + 32) & 0x7F;
      if (v115 >= 0x40)
        goto LABEL_129;
      v116 = 1 << v115;
      v37 &= ~v116;
      v36 &= ~v116;
      ++v114;
    }
    while (--v42);
  }
  v43 = v30 & 0x7F;
  v146 = v31 & 0x7F;
  *(_QWORD *)&v170[0] = v37;
  *((_QWORD *)&v170[0] + 1) = v36;
  v44 = (unsigned int *)WTF::fastMalloc((WTF *)0x40);
  *v44 = 1;
  v45 = (JSC::JITDelByValGenerator *)(v44 + 2);
  v46 = *(_QWORD *)(a1 + 24);
  if ((v46 & 1) != 0)
  {
    v122 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
    if ((v46 & 2) != 0
      || ((v123 = *(unsigned int *)((v46 & 0xFFFFFFFF8) + 8), (_DWORD)v123 != 0x3FFFFFFF)
        ? (v124 = (_DWORD)v123 == -1)
        : (v124 = 1),
          v124))
    {
      v125 = 2;
    }
    else if (v123 >> 28)
    {
      v143 = *(_DWORD *)((v46 & 0xFFFFFFFF8) + 8);
      v144 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
      v122 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v122 = v144;
      *(_DWORD *)(v122 + 8) = v143;
      v125 = 1;
    }
    else
    {
      v125 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
      v122 = v123 << 36;
    }
    v46 = v122 | v125;
  }
  *(_QWORD *)v147 = v46;
  LOBYTE(v142) = v32;
  JSC::JITPrivateBrandAccessGenerator::JITPrivateBrandAccessGenerator((uint64_t)v45, v35, v34, 0, 0, (uint64_t *)v147, v27, *(_BYTE *)(a1 + 40), (uint64_t)v170, v43, SHIDWORD(v43), v146, v142);
  if ((v147[0] & 1) != 0 && (*(_QWORD *)v147 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(*(_QWORD *)v147 & 0xFFFFFFFF8, v47, v48, v49, v50, v51, v52, v53);
  if (*(_BYTE *)(a1 + 41))
  {
    v54 = -1;
    v55 = 0xFF000F4100000000;
  }
  else
  {
    JSC::MacroAssemblerARM64::branchTest64(a2, 1, v43, 28, v50, v51, v52, v53, (uint64_t)v170);
    v54 = v170[0];
    v55 = *(_QWORD *)((char *)v170 + 4);
  }
  JSC::JITDelByValGenerator::generateFastPath(v45, (JSC::CCallHelpers *)a2, v48, v49, v50, v51, v52, v53);
  v63 = *(_DWORD *)(a2 + 200);
  if (v63 < *(_DWORD *)(a2 + 52))
  {
    v126 = (JSC::AssemblerBuffer *)(a2 + 56);
    do
    {
      if ((v63 + 4) > *(_DWORD *)(a2 + 192))
      {
        v127 = v126;
        JSC::AssemblerBuffer::outOfLineGrow(v126, v56, v57, v58, v59, v60, v61, v62);
        v126 = v127;
        v63 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v63) = -721215457;
      v63 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v63;
    }
    while (v63 < *(_DWORD *)(a2 + 52));
  }
  *(_DWORD *)(a2 + 208) = 0;
  *(_DWORD *)v147 = v54;
  *(_QWORD *)&v147[4] = v55;
  do
    v64 = __ldaxr(v44);
  while (__stlxr(v64 + 1, v44));
  v148 = v44;
  v149 = v32;
  v150 = *(_BYTE *)(a1 + 40);
  v65 = *(_QWORD *)a3;
  v151 = *(_QWORD *)(a1 + 16);
  v152 = v65;
  v66 = *(unsigned int *)(a3 + 20);
  v153 = 0;
  v154 = 0;
  v155 = v66;
  if ((_DWORD)v66)
  {
    if (v66 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197D8DA00);
    }
    v67 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v66));
    v154 = v66;
    v153 = v67;
    v68 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v68)
    {
      v69 = *(__int128 **)(a3 + 8);
      v70 = 16 * v68;
      do
      {
        v71 = *v69++;
        *v67++ = v71;
        v70 -= 16;
      }
      while (v70);
    }
  }
  v72 = (WTF *)*(unsigned int *)(a3 + 36);
  v156 = 0;
  v157 = 0;
  v158 = (int)v72;
  if ((_DWORD)v72)
  {
    v73 = (void *)WTF::fastMalloc(v72);
    v157 = (int)v72;
    v156 = v73;
    memcpy(v73, *(const void **)(a3 + 24), *(unsigned int *)(a3 + 36));
  }
  v74 = (WTF *)*(unsigned int *)(a3 + 52);
  v159 = 0;
  v160 = 0;
  v161 = (int)v74;
  if ((_DWORD)v74)
  {
    v117 = (void *)WTF::fastMalloc(v74);
    v160 = (int)v74;
    v159 = v117;
    memcpy(v117, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 52));
  }
  v162 = *(_QWORD *)(a3 + 56);
  v75 = *(_QWORD *)(a1 + 24);
  if ((v75 & 1) != 0)
  {
    v128 = *(_QWORD *)(v75 & 0xFFFFFFFF8);
    if ((v75 & 2) != 0
      || ((v129 = *(unsigned int *)((v75 & 0xFFFFFFFF8) + 8), (_DWORD)v129 != 0x3FFFFFFF)
        ? (v130 = (_DWORD)v129 == -1)
        : (v130 = 1),
          v130))
    {
      v131 = 2;
    }
    else if (v129 >> 28)
    {
      v141 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v141 = v128;
      *(_DWORD *)(v141 + 8) = v129;
      v131 = 1;
      v128 = v141;
    }
    else
    {
      v131 = *(_QWORD *)(v75 & 0xFFFFFFFF8);
      v128 = v129 << 36;
    }
    v75 = v128 | v131;
  }
  v163 = v75;
  v76 = (unsigned int *)v168;
  if (v168)
  {
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 + 1, v76));
  }
  v164 = v76;
  v165 = v43;
  v166 = v146;
  v167 = v63;
  v78 = *(_QWORD *)(a3 + 56);
  v79 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v79 + 8) = 1;
  *(_QWORD *)v79 = off_1E3576028;
  v87 = *(unsigned int *)(v78 + 12);
  if ((_DWORD)v87 != *(_DWORD *)(v78 + 8))
  {
    v88 = (uint64_t *)(*(_QWORD *)v78 + 8 * v87);
    v89 = v145;
    goto LABEL_43;
  }
  v109 = v87 + (v87 >> 2);
  if (v109 >= 0x10)
    v110 = v109 + 1;
  else
    v110 = 16;
  if (v110 <= v87 + 1)
    v111 = v87 + 1;
  else
    v111 = v110;
  if (v111 >> 29)
  {
    __break(0xC471u);
LABEL_129:
    __break(1u);
LABEL_130:
    JUMPOUT(0x197D8D9F0);
  }
  v112 = *(const void **)v78;
  v113 = (void *)WTF::fastMalloc((WTF *)(8 * v111));
  *(_DWORD *)(v78 + 8) = v111;
  *(_QWORD *)v78 = v113;
  memcpy(v113, v112, 8 * v87);
  v89 = v145;
  if (v112)
  {
    if (*(const void **)v78 == v112)
    {
      *(_QWORD *)v78 = 0;
      *(_DWORD *)(v78 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v112, v80, v81, v82, v83, v84, v85, v86);
  }
  v87 = *(unsigned int *)(v78 + 12);
  v88 = (uint64_t *)(*(_QWORD *)v78 + 8 * v87);
LABEL_43:
  *v88 = v79;
  *(_DWORD *)(v78 + 12) = v87 + 1;
  do
  {
    v104 = __ldaxr(v44);
    v105 = v104 - 1;
  }
  while (__stlxr(v105, v44));
  if (!v105)
  {
    atomic_store(1u, v44);
    WTF::fastFree((unint64_t)v44, v97, v98, v99, v100, v101, v102, v103);
  }
  v106 = v168;
  v168 = 0;
  if (v106)
  {
    do
    {
      v107 = __ldaxr((unsigned int *)v106);
      v108 = v107 - 1;
    }
    while (__stlxr(v108, (unsigned int *)v106));
    if (!v108)
    {
      atomic_store(1u, (unsigned int *)v106);
      v138 = *((_QWORD *)v106 + 1);
      if ((WTF *)((char *)v106 + 24) != (WTF *)v138 && v138 != 0)
      {
        *((_QWORD *)v106 + 1) = 0;
        *((_DWORD *)v106 + 4) = 0;
        WTF::fastFree(v138, v97, v98, v99, v100, v101, v102, v103);
      }
      WTF::fastFree((unint64_t)v106, v97, v98, v99, v100, v101, v102, v103);
    }
  }
  *(_BYTE *)(a2 + 212) = v89;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePrivateBrandAccess(JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v3 = result;
  *(_DWORD *)result = *(_DWORD *)a2;
  *(_QWORD *)(result + 4) = *(_QWORD *)(a2 + 4);
  v4 = *(unsigned int **)(a2 + 16);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 16) = v4;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(unsigned int *)(a2 + 60);
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = v6;
  *(_DWORD *)(result + 60) = v7;
  if ((_DWORD)v7)
  {
    if (v7 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v8 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v7));
    *(_DWORD *)(v3 + 56) = v7;
    *(_QWORD *)(v3 + 48) = v8;
    v9 = *(unsigned int *)(a2 + 60);
    if ((_DWORD)v9)
    {
      v10 = *(__int128 **)(a2 + 48);
      v11 = 16 * v9;
      do
      {
        v12 = *v10++;
        *v8++ = v12;
        v11 -= 16;
      }
      while (v11);
    }
  }
  v13 = (WTF *)*(unsigned int *)(a2 + 76);
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_DWORD *)(v3 + 76) = (_DWORD)v13;
  if ((_DWORD)v13)
  {
    v14 = (void *)WTF::fastMalloc(v13);
    *(_DWORD *)(v3 + 72) = (_DWORD)v13;
    *(_QWORD *)(v3 + 64) = v14;
    memcpy(v14, *(const void **)(a2 + 64), *(unsigned int *)(a2 + 76));
  }
  v15 = (WTF *)*(unsigned int *)(a2 + 92);
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_DWORD *)(v3 + 92) = (_DWORD)v15;
  if ((_DWORD)v15)
  {
    v19 = (void *)WTF::fastMalloc(v15);
    *(_DWORD *)(v3 + 88) = (_DWORD)v15;
    *(_QWORD *)(v3 + 80) = v19;
    memcpy(v19, *(const void **)(a2 + 80), *(unsigned int *)(a2 + 92));
  }
  v16 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(v3 + 96) = *(_QWORD *)(a2 + 96);
  if ((v16 & 1) != 0)
  {
    v20 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v21 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v21 != 0x3FFFFFFF)
        ? (v22 = (_DWORD)v21 == -1)
        : (v22 = 1),
          v22))
    {
      v23 = 2;
    }
    else if (v21 >> 28)
    {
      v24 = v21;
      v25 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v25 = v20;
      *(_DWORD *)(v25 + 8) = v24;
      v23 = 1;
      v20 = v25;
    }
    else
    {
      v23 = v20;
      v20 = v21 << 36;
    }
    v16 = v20 | v23;
  }
  *(_QWORD *)(v3 + 104) = v16;
  v17 = *(unsigned int **)(a2 + 112);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *(_QWORD *)(v3 + 112) = v17;
  *(_WORD *)(v3 + 120) = *(_WORD *)(a2 + 120);
  *(_DWORD *)(v3 + 124) = *(_DWORD *)(a2 + 124);
  return v3;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePrivateBrandAccess(JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePrivateBrandAccess(JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePrivateBrandAccess(JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePrivateBrandAccess(JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePrivateBrandAccess(JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePrivateBrandAccess(JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  uint64_t v12;
  int i;
  int v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int j;
  unsigned int v49;
  char v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  const void *v68;
  void *v69;
  unsigned int v70;
  unsigned int v71;
  _BYTE *v72;
  unsigned int v73;
  uint64_t v74;
  _BYTE *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE v91[24];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (*v10 != -1)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  if (!HIBYTE(qword_1ECF4C780))
  {
    v12 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)v91 = *(_DWORD *)(v12 + 48);
    *(_QWORD *)&v91[4] = *(_QWORD *)(v12 + 52);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v91, a2, a3, a4, a5, a6, a7, a8);
  }
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), *(char *)(a1 + 40), a4, a5, a6, a7, a8);
    v14 = *(unsigned __int8 *)(a1 + 41);
    if (v14 == 29)
    {
      v15 = operationCheckPrivateBrandOptimize;
    }
    else
    {
      if (v14 != 30)
      {
        __break(0xC471u);
        goto LABEL_107;
      }
      v15 = operationSetPrivateBrandOptimize;
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 48) = v15;
    v29 = *(unsigned __int8 **)(a1 + 48);
    v30 = *(_QWORD *)(a1 + 56);
    v32 = *(_QWORD *)(v30 + 96);
    v31 = *(_QWORD *)(v30 + 104);
    v33 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 48) + 216) & 0xFF003FF80000 | v32;
    v34 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v34)
    {
      v35 = *(_BYTE **)(a1 + 80);
      do
      {
        v36 = *v35 & 0x7F;
        if (v36 >= 0x40)
          goto LABEL_106;
        v37 = 1 << v36;
        v33 &= ~v37;
        v31 &= ~v37;
        ++v35;
      }
      while (--v34);
    }
    v38 = *(unsigned int *)(a1 + 108);
    if ((_DWORD)v38)
    {
      v72 = *(_BYTE **)(a1 + 96);
      do
      {
        v73 = (*v72 + 32) & 0x7F;
        if (v73 >= 0x40)
          goto LABEL_106;
        v74 = 1 << v73;
        v33 &= ~v74;
        v31 &= ~v74;
        ++v72;
      }
      while (--v38);
    }
    v89 = v33;
    v90 = v31;
    v26 = *(_QWORD *)(a1 + 120);
    if ((v26 & 1) != 0)
    {
      v78 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      if ((v26 & 2) != 0
        || ((v79 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v79 != 0x3FFFFFFF)
          ? (v80 = (_DWORD)v79 == -1)
          : (v80 = 1),
            v80))
      {
        v81 = 2;
      }
      else if (v79 >> 28)
      {
        v86 = v78;
        v87 = v29;
        v78 = WTF::fastMalloc((WTF *)0x10);
        v29 = v87;
        *(_QWORD *)v78 = v86;
        *(_DWORD *)(v78 + 8) = v79;
        v81 = 1;
      }
      else
      {
        v81 = v78;
        v78 = v79 << 36;
      }
      v26 = v78 | v81;
      v39 = ((v78 | v81) & 1) == 0;
    }
    else
    {
      v39 = 1;
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v91, v29, (uint64_t)&v89, a2, v26, *(_QWORD *)(a1 + 128) + 8, *(unsigned __int8 *)(a1 + 40) | 0x3000000000, 0xFFFFFFFFLL, *(_WORD *)(a1 + 136), HIBYTE(*(_WORD *)(a1 + 136)), *(_BYTE *)(a1 + 40));
    v47 = *(_QWORD *)v91;
    if (!v39)
      goto LABEL_74;
  }
  else
  {
    v16 = *(_QWORD **)(a1 + 48);
    v17 = *(_QWORD *)(a1 + 56);
    v19 = *(_QWORD *)(v17 + 96);
    v18 = *(_QWORD *)(v17 + 104);
    v20 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 48) + 216) & 0xFF003FF80000 | v19;
    v21 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v21)
    {
      v22 = *(_BYTE **)(a1 + 80);
      do
      {
        v23 = *v22 & 0x7F;
        if (v23 >= 0x40)
          goto LABEL_106;
        v24 = 1 << v23;
        v20 &= ~v24;
        v18 &= ~v24;
        ++v22;
      }
      while (--v21);
    }
    v25 = *(unsigned int *)(a1 + 108);
    if ((_DWORD)v25)
    {
      v75 = *(_BYTE **)(a1 + 96);
      do
      {
        v76 = (*v75 + 32) & 0x7F;
        if (v76 >= 0x40)
          goto LABEL_106;
        v77 = 1 << v76;
        v20 &= ~v77;
        v18 &= ~v77;
        ++v75;
      }
      while (--v25);
    }
    v89 = v20;
    v90 = v18;
    v26 = *(_QWORD *)(a1 + 120);
    if ((v26 & 1) != 0)
    {
      v82 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      if ((v26 & 2) != 0
        || ((v83 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v83 != 0x3FFFFFFF)
          ? (v84 = (_DWORD)v83 == -1)
          : (v84 = 1),
            v84))
      {
        v85 = 2;
      }
      else
      {
        v85 = v82;
        v88 = v16;
        if (v83 >> 28)
        {
          v82 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v82 = v85;
          *(_DWORD *)(v82 + 8) = v83;
          v85 = 1;
        }
        else
        {
          v82 = v83 << 36;
        }
        v16 = v88;
      }
      v26 = v82 | v85;
    }
    v27 = *(unsigned __int8 *)(a1 + 41);
    if (v27 == 29)
    {
      v28 = operationCheckPrivateBrandOptimize;
    }
    else
    {
      if (v27 != 30)
      {
        __break(0xC471u);
        JUMPOUT(0x197D8E22CLL);
      }
      v28 = operationSetPrivateBrandOptimize;
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v91, v16, &v89, a2, v26, *(_QWORD *)(a1 + 128) + 8, (uint64_t)v28, 0xFFFFFFFFLL, *(_WORD *)(a1 + 136), HIBYTE(*(_WORD *)(a1 + 136)), *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)(a1 + 32) + 16));
    v47 = *(_QWORD *)v91;
    if ((v26 & 1) != 0)
    {
LABEL_74:
      if ((v26 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v26 & 0xFFFFFFFF8, v40, v41, v42, v43, v44, v45, v46);
    }
  }
  for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v40, v41, v42, v43, v44, v45, v46);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v49 = j;
  if (j + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v40, v41, v42, v43, v44, v45, v46);
    v49 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v49) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v50 = 69;
  else
    v50 = 65;
  *(_QWORD *)v91 = j;
  v91[8] = v50;
  *(_WORD *)&v91[9] = 15;
  v91[11] = -1;
  LODWORD(v89) = *(_DWORD *)(a1 + 140);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v91, (unsigned int *)&v89, a2, v42, v43, v44, v45, v46);
  v51 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v51 + 36) = i;
  *(_QWORD *)(v51 + 40) = v47;
  do
    v52 = __ldaxr((unsigned int *)v51);
  while (__stlxr(v52 + 1, (unsigned int *)v51));
  v53 = WTF::fastMalloc((WTF *)0x18);
  v61 = v53;
  *(_DWORD *)(v53 + 8) = 1;
  *(_QWORD *)v53 = &off_1E3576050;
  do
    v62 = __ldaxr((unsigned int *)v51);
  while (__stlxr(v62 + 1, (unsigned int *)v51));
  *(_QWORD *)(v53 + 16) = v51;
  v63 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v63 != *(_DWORD *)(a2 + 240))
  {
    v64 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v63);
    goto LABEL_54;
  }
  v65 = v63 + (v63 >> 2);
  if (v65 >= 0x10)
    v66 = v65 + 1;
  else
    v66 = 16;
  if (v66 <= v63 + 1)
    v67 = v63 + 1;
  else
    v67 = v66;
  if (v67 >> 29)
  {
    __break(0xC471u);
LABEL_106:
    __break(1u);
LABEL_107:
    JUMPOUT(0x197D8E20CLL);
  }
  v68 = *(const void **)(a2 + 232);
  v69 = (void *)WTF::fastMalloc((WTF *)(8 * v67));
  *(_DWORD *)(a2 + 240) = v67;
  *(_QWORD *)(a2 + 232) = v69;
  memcpy(v69, v68, 8 * v63);
  if (v68)
  {
    if (*(const void **)(a2 + 232) == v68)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v68, v54, v55, v56, v57, v58, v59, v60);
  }
  v63 = *(unsigned int *)(a2 + 244);
  v64 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v63);
LABEL_54:
  *v64 = v61;
  *(_DWORD *)(a2 + 244) = v63 + 1;
  do
  {
    v70 = __ldaxr((unsigned int *)v51);
    v71 = v70 - 1;
  }
  while (__stlxr(v71, (unsigned int *)v51));
  if (!v71)
  {
    atomic_store(1u, (unsigned int *)v51);
    WTF::fastFree(v51, v54, v55, v56, v57, v58, v59, v60);
  }
  *(_BYTE *)(a2 + 212) = v11;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePrivateBrandAccess(JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePrivateBrandAccess(JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePrivateBrandAccess(JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(v2 + 28);
  if (v3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
  v5 = (v3 - v4);
  v6 = a2[23];
  v7 = v5 + v6;
  if (v6 <= v5 + v6 && v6 + a2[1] >= v7)
    return JSC::JITInlineCacheGenerator::finalize(v2 + 8, a2, a2, v7);
  result = 366;
  __break(0xC471u);
  return result;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowObject(_QWORD *a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::B3::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  return v11;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isNotRopeString(JSC::DFG::Graph **a1, JSC::B3::Value *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::DFG::Graph *v26;
  unsigned int v27;
  const JSC::FTL::AbstractHeap *v28;
  uint64_t v29;
  JSC::B3::Value *v30;
  JSC::B3::Value *v31;
  JSC::B3::Value *v32;
  JSC::B3::Value *v33;
  JSC::DFG::Graph *v34;
  JSC::B3::Value *v35;
  char **v36;
  uint64_t v37;
  JSC::B3::Value *v38;
  __int128 *v39;
  char *v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  __int128 v58;

  v10 = a3 & 0xFF00FFFFFFFFFFFFLL;
  if ((a3 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_8;
    return a1[3455];
  if (v20)
  {
    if ((v20 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v20 + 5) == 2 && (*(_BYTE *)(v20 + 8) & 1) == 0)
      return a1[3455];
  }
  v26 = *a1;
  v27 = *(unsigned __int16 *)(v10 + 18);
  if (v27 <= 2)
    goto LABEL_22;
  if (*(unsigned __int16 *)(v10 + 18) > 0xB5u)
  {
    if (v27 != 182)
    {
      if (v27 != 355 && v27 != 348)
        goto LABEL_8;
      v39 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
      goto LABEL_23;
    }
LABEL_22:
    v39 = *(__int128 **)(v10 + 72);
LABEL_23:
    DWORD2(v58) = 0;
    *(_QWORD *)&v58 = v39;
    goto LABEL_24;
  }
  if (v27 != 3)
    goto LABEL_8;
  v58 = *(_OWORD *)*(_QWORD *)(v10 + 72);
LABEL_24:
  JSC::DFG::LazyJSValue::tryGetString((uint64_t **)&v58, v26, v21, v22, v23, v24, v25, (int **)&v57);
  v48 = v57;
  if (v57)
  {
    v18 = a1[3455];
    v57 = 0;
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
    return v18;
  }
LABEL_8:
  v28 = a1[3313];
  v29 = *((_QWORD *)v28 + 3);
  if (v29)
  {
    v30 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v29);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), a2, v30);
  }
  v31 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)(a1 + 3455), v28, (uint64_t)a2, 2);
  v32 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), 1);
  v33 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 3455), v31, v32);
  v34 = a1[3472];
  v35 = a1[3470];
  v18 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, (uint64_t)a1[3471], (uint64_t)v33, (uint64_t)a1[3459]);
  JSC::B3::Procedure::addValueImpl(v35, v18);
  *(_QWORD *)&v58 = v18;
  v36 = (char **)((char *)v34 + 8);
  v37 = *((unsigned int *)v34 + 5);
  if ((_DWORD)v37 == *((_DWORD *)v34 + 4))
  {
    v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v37 + 1, (unint64_t)&v58);
    v37 = *((unsigned int *)v34 + 5);
    *(_QWORD *)(*((_QWORD *)v34 + 1) + 8 * v37) = *(_QWORD *)v40;
    v38 = (JSC::B3::Value *)v58;
  }
  else
  {
    *(_QWORD *)&(*v36)[8 * v37] = v18;
    v38 = v18;
  }
  *((_DWORD *)v34 + 5) = v37 + 1;
  *((_QWORD *)v38 + 4) = v34;
  return v18;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::resultTypeForOperation<JSC::ExceptionOperationResult<unsigned long>>(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  unsigned int *v5;
  uint64_t result;
  uint64_t v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;

  if (a2 >= 0x80000000)
    v4 = 0x80000000;
  else
    v4 = a2;
  v5 = (unsigned int *)(a1 + 4 * v4 + 28256);
  result = *v5;
  if ((result & 0x80000000) == 0)
  {
    v7 = *(_QWORD *)(a1 + 27848);
    v8 = (WTF *)WTF::fastMalloc((WTF *)8);
    v17 = v8;
    *(_DWORD *)v8 = a2;
    *((_DWORD *)v8 + 1) = 2;
    v18 = 0x200000002;
    result = JSC::B3::Procedure::addTuple(v7, (unint64_t)&v17);
    *v5 = result;
    v16 = v17;
    if (v17)
    {
      v17 = 0;
      LODWORD(v18) = 0;
      WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
      return *v5;
    }
  }
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::cachedPutById(_QWORD *a1, uint64_t a2, uint64_t a3, JSC::FTL::PatchpointExceptionHandle *a4, char a5)
{
  int v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  JSC::FTL::PatchpointExceptionHandle *v82[2];
  char v83;

  v10 = *(unsigned __int16 *)(a2 + 18);
  if ((v10 - 109) >= 0xD)
  {
    if ((v10 - 255) < 2)
    {
      v11 = (uint64_t *)(*(_QWORD *)(a2 + 72) + 8);
      goto LABEL_3;
    }
    if ((v10 - 335) >= 2)
    {
      v47 = v10 - 106;
      v48 = v47 > 0x25;
      v49 = (1 << v47) & 0x2001000001;
      if (v48 || v49 == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197D8E918);
      }
    }
  }
  v11 = (uint64_t *)(a2 + 72);
LABEL_3:
  v12 = *v11;
  v13 = (__int128 *)JSC::FTL::Output::patchpoint(a1 + 3455, 0);
  v82[1] = 0;
  v83 = 3;
  JSC::B3::StackmapValue::append(v13, a3, (unint64_t)&v82[1]);
  v82[0] = a4;
  v82[1] = 0;
  v83 = 3;
  JSC::B3::StackmapValue::append(v13, (uint64_t)a4, (unint64_t)&v82[1]);
  v14 = a1[3488];
  *(_OWORD *)v82 = xmmword_199124420;
  JSC::B3::StackmapValue::append(v13, v14, (unint64_t)v82);
  v15 = a1[3487];
  *(_OWORD *)v82 = xmmword_199124430;
  JSC::B3::StackmapValue::append(v13, v15, (unint64_t)v82);
  *((_QWORD *)v13 + 8) |= 0x30000uLL;
  *((_QWORD *)v13 + 10) |= 0x30000uLL;
  if (HIBYTE(qword_1ECF4C780))
    v21 = 3;
  else
    v21 = 0;
  *((_BYTE *)v13 + 168) = v21;
  v22 = a1[1];
  v23 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
    goto LABEL_7;
  v51 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
  if ((v23 & 2) != 0
    || (v52 = *(unsigned int *)((v23 & 0xFFFFFFFF8) + 8), (_DWORD)v52 == 0x3FFFFFFF)
    || (_DWORD)v52 == -1)
  {
    v53 = 2;
  }
  else if (v52 >> 28)
  {
    v78 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v78 = v51;
    *(_DWORD *)(v78 + 8) = v52;
    v53 = 1;
    v51 = v78;
  }
  else
  {
    v53 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
    v51 = v52 << 36;
  }
  v23 = v51 | v53;
  if (((v51 | v53) & 1) != 0)
  {
    v54 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
    if ((v23 & 2) != 0
      || ((v55 = *(unsigned int *)((v23 & 0xFFFFFFFF8) + 8), (_DWORD)v55 != 0x3FFFFFFF)
        ? (v56 = (_DWORD)v55 == -1)
        : (v56 = 1),
          v56))
    {
      v57 = 2;
    }
    else if (v55 >> 28)
    {
      v79 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v79 = v54;
      *(_DWORD *)(v79 + 8) = v55;
      v57 = 1;
      v54 = v79;
    }
    else
    {
      v57 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
      v54 = v55 << 36;
    }
    v24 = 0;
    v25 = v54 | v57;
  }
  else
  {
LABEL_7:
    v24 = 1;
    v25 = v23;
  }
  v26 = (unsigned int *)v82[0];
  if (v82[0])
  {
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 + 1, v26));
  }
  v35 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v35 + 8) = 1;
  *(_QWORD *)v35 = &off_1E3576078;
  *(_QWORD *)(v35 + 16) = v22;
  v36 = v25;
  if ((v25 & 1) != 0)
  {
    v58 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
    if ((v25 & 2) != 0
      || ((v59 = *(unsigned int *)((v25 & 0xFFFFFFFF8) + 8), (_DWORD)v59 != 0x3FFFFFFF)
        ? (v60 = (_DWORD)v59 == -1)
        : (v60 = 1),
          v60))
    {
      v61 = 2;
    }
    else if (v59 >> 28)
    {
      v80 = *(_DWORD *)((v25 & 0xFFFFFFFF8) + 8);
      v81 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v81 = v58;
      *(_DWORD *)(v81 + 8) = v80;
      v61 = 1;
      v58 = v81;
    }
    else
    {
      v61 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
      v58 = v59 << 36;
    }
    v36 = v58 | v61;
  }
  *(_QWORD *)(v35 + 24) = v36;
  if (v26)
  {
    do
      v37 = __ldaxr(v26);
    while (__stlxr(v37 + 1, v26));
  }
  *(_QWORD *)(v35 + 32) = v26;
  *(_QWORD *)(v35 + 40) = v12;
  *(_BYTE *)(v35 + 48) = a5;
  v38 = (unsigned int *)*((_QWORD *)v13 + 7);
  *((_QWORD *)v13 + 7) = v35;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  if (v26)
  {
    do
    {
      v42 = __ldaxr(v26);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v26));
    if (!v43)
    {
      atomic_store(1u, v26);
      JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v26, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
  }
  if ((v25 & 1) != 0 && (v25 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v25 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
  if ((v24 & 1) == 0 && (v23 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v23 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
  v44 = (unsigned int *)v82[0];
  v82[0] = 0;
  if (v44)
  {
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
    {
      atomic_store(1u, v44);
      JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v44, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::cachedPutById(JSC::DFG::Node *,JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::cachedPutById(JSC::DFG::Node *,JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::cachedPutById(JSC::DFG::Node *,JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  JSC::JITByIdGenerator *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  uint64_t v63;
  __int128 *v64;
  uint64_t v65;
  __int128 v66;
  WTF *v67;
  void *v68;
  WTF *v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  WTF *v99;
  unsigned int v100;
  unsigned int v101;
  _BYTE *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  _BYTE *v109;
  unsigned int v110;
  uint64_t v111;
  void *v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  char v141;
  char v142;
  uint64_t v143;
  char v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  _OWORD *v148;
  int v149;
  int v150;
  void *v151;
  int v152;
  int v153;
  void *v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int *v159;
  int v160;
  WTF *v161;
  uint64_t v162;
  JSC::FTL::ExceptionTarget *v163[14];
  unsigned int *v164;

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "cachedPutById");
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v7 & 1) != 0)
  {
    v114 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v115 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v115 != 0x3FFFFFFF)
        ? (v116 = (_DWORD)v115 == -1)
        : (v116 = 1),
          v116))
    {
      v117 = 2;
    }
    else if (v115 >> 28)
    {
      v136 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v136 = v114;
      *(_DWORD *)(v136 + 8) = v115;
      v117 = 1;
      v114 = v136;
    }
    else
    {
      v117 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v114 = v115 << 36;
    }
    v7 = v114 | v117;
  }
  v162 = v7;
  v16 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v8, &v162);
  if ((v162 & 1) != 0 && (v162 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v162 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v163);
  v17 = (unsigned int *)v163[0];
  JSC::FTL::ExceptionTarget::jumps(v163[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v161);
  v163[0] = 0;
  if (v17)
  {
    do
    {
      v25 = __ldaxr(v17);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v17));
    if (!v26)
    {
      atomic_store(1u, v17);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v17, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
  }
  v27 = v16;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 32), a3, v16, v20, v21, v22, v23, v24);
  if (HIBYTE(qword_1ECF4C780))
  {
    v113 = *(_DWORD *)(a3 + 36);
    if (v113 == 1)
    {
LABEL_114:
      __break(0xC471u);
      JUMPOUT(0x197D8F34CLL);
    }
    if (!v113)
    {
      __break(0xC471u);
      JUMPOUT(0x197D8F354);
    }
    if (v113 <= 2)
    {
LABEL_116:
      __break(0xC471u);
      JUMPOUT(0x197D8F334);
    }
    v28 = **(_BYTE **)(a3 + 24);
  }
  else
  {
    v28 = -1;
  }
  v142 = v28;
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v30 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v30 = 2;
  *(_DWORD *)(v30 + 96) = 0;
  *(_OWORD *)(v30 + 12) = 0u;
  *(_OWORD *)(v30 + 28) = 0u;
  *(_DWORD *)(v30 + 44) = 0;
  *(_QWORD *)(v30 + 64) = 0;
  *(_QWORD *)(v30 + 72) = 0;
  *(_QWORD *)(v30 + 56) = 0;
  *(_QWORD *)(v30 + 104) = 0;
  *(_QWORD *)(v30 + 112) = -1;
  *(_WORD *)(v30 + 120) = -1;
  *(_DWORD *)(v30 + 122) = 0x10000;
  *(_BYTE *)(v30 + 126) = 0;
  *(_BYTE *)(v30 + 127) = BYTE12(xmmword_1ECF4C260);
  *(_BYTE *)(v30 + 128) = 0;
  *(_WORD *)(v30 + 129) &= 0xFC00u;
  *(_QWORD *)(v30 + 136) = 0;
  *(_QWORD *)(v30 + 136) = *(_QWORD *)(v29 + 168);
  *(_QWORD *)(v29 + 168) = v30;
  *(_WORD *)(v30 + 129) = *(_WORD *)(v30 + 129) & 0xFDFF | (HIBYTE(qword_1ECF4C780) << 9);
  v31 = *(_QWORD *)(a2 + 336);
  v32 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v33 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v34 = *(unsigned int *)(a3 + 36);
  if ((_DWORD)v34)
  {
    v102 = *(_BYTE **)(a3 + 24);
    do
    {
      v103 = *v102 & 0x7F;
      if (v103 >= 0x40)
        goto LABEL_113;
      v104 = 1 << v103;
      v33 &= ~v104;
      v32 &= ~v104;
      ++v102;
    }
    while (--v34);
  }
  v35 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v35)
  {
    v109 = *(_BYTE **)(a3 + 40);
    while (1)
    {
      v110 = (*v109 + 32) & 0x7F;
      if (v110 >= 0x40)
        break;
      v111 = 1 << v110;
      v33 &= ~v111;
      v32 &= ~v111;
      ++v109;
      if (!--v35)
        goto LABEL_15;
    }
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
LABEL_15:
  v163[0] = (JSC::FTL::ExceptionTarget *)v33;
  v163[1] = (JSC::FTL::ExceptionTarget *)v32;
  v36 = *(_DWORD *)(a3 + 20);
  if (!v36)
    goto LABEL_116;
  v141 = v6;
  if (v36 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D8F33CLL);
  }
  v37 = *(_BYTE **)(a3 + 8);
  v38 = *v37 & 0x7F;
  v39 = v37[16] & 0x7F;
  v40 = (unsigned int *)WTF::fastMalloc((WTF *)0x40);
  v41 = *(_QWORD *)(a1 + 24);
  *v40 = 1;
  v42 = (JSC::JITByIdGenerator *)(v40 + 2);
  if ((v41 & 1) != 0)
  {
    v118 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
    if ((v41 & 2) != 0
      || ((v119 = *(unsigned int *)((v41 & 0xFFFFFFFF8) + 8), (_DWORD)v119 != 0x3FFFFFFF)
        ? (v120 = (_DWORD)v119 == -1)
        : (v120 = 1),
          v120))
    {
      v121 = 2;
    }
    else if (v119 >> 28)
    {
      v139 = *(_DWORD *)((v41 & 0xFFFFFFFF8) + 8);
      v140 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
      v118 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = v140;
      *(_DWORD *)(v118 + 8) = v139;
      v121 = 1;
    }
    else
    {
      v121 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
      v118 = v119 << 36;
    }
    v41 = v118 | v121;
  }
  v143 = v41;
  BYTE2(v138) = *(_BYTE *)(a1 + 48);
  BYTE1(v138) = 16;
  LOBYTE(v138) = v142;
  JSC::JITPutByIdGenerator::JITPutByIdGenerator((uint64_t)v42, v31, v30, 0, 0, &v143, v27, (uint64_t)v163, *(_QWORD *)(a1 + 40), v38, v39, v138);
  if ((v143 & 1) != 0 && (v143 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v143 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  JSC::JITByIdGenerator::generateFastCommon(v42, (JSC::CCallHelpers *)a2, 40, v45, v46, v47, v48, v49);
  v57 = *(_DWORD *)(a2 + 200);
  if (v57 < *(_DWORD *)(a2 + 52))
  {
    v58 = v141;
    do
    {
      if ((v57 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v50, v51, v52, v53, v54, v55, v56);
        v57 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v57) = -721215457;
      v57 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v57;
    }
    while (v57 < *(_DWORD *)(a2 + 52));
  }
  else
  {
    v58 = v141;
  }
  *(_DWORD *)(a2 + 208) = 0;
  do
    v59 = __ldaxr(v40);
  while (__stlxr(v59 + 1, v40));
  v143 = (uint64_t)v40;
  v144 = *(_BYTE *)(a1 + 48);
  v145 = v142;
  v60 = *(_QWORD *)a3;
  v146 = *(_QWORD *)(a1 + 16);
  v147 = v60;
  v61 = *(unsigned int *)(a3 + 20);
  v148 = 0;
  v149 = 0;
  v150 = v61;
  if ((_DWORD)v61)
  {
    if (!(v61 >> 28))
    {
      v62 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v61));
      v149 = v61;
      v148 = v62;
      v63 = *(unsigned int *)(a3 + 20);
      if ((_DWORD)v63)
      {
        v64 = *(__int128 **)(a3 + 8);
        v65 = 16 * v63;
        do
        {
          v66 = *v64++;
          *v62++ = v66;
          v65 -= 16;
        }
        while (v65);
      }
      goto LABEL_28;
    }
    __break(0xC471u);
    goto LABEL_113;
  }
LABEL_28:
  v67 = (WTF *)*(unsigned int *)(a3 + 36);
  v151 = 0;
  v152 = 0;
  v153 = (int)v67;
  if ((_DWORD)v67)
  {
    v68 = (void *)WTF::fastMalloc(v67);
    v152 = (int)v67;
    v151 = v68;
    memcpy(v68, *(const void **)(a3 + 24), *(unsigned int *)(a3 + 36));
  }
  v69 = (WTF *)*(unsigned int *)(a3 + 52);
  v154 = 0;
  v155 = 0;
  v156 = (int)v69;
  if ((_DWORD)v69)
  {
    v112 = (void *)WTF::fastMalloc(v69);
    v155 = (int)v69;
    v154 = v112;
    memcpy(v112, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 52));
  }
  v157 = *(_QWORD *)(a3 + 56);
  v70 = *(_QWORD *)(a1 + 24);
  if ((v70 & 1) != 0)
  {
    v122 = *(_QWORD *)(v70 & 0xFFFFFFFF8);
    if ((v70 & 2) != 0
      || ((v123 = *(unsigned int *)((v70 & 0xFFFFFFFF8) + 8), (_DWORD)v123 != 0x3FFFFFFF)
        ? (v124 = (_DWORD)v123 == -1)
        : (v124 = 1),
          v124))
    {
      v125 = 2;
    }
    else if (v123 >> 28)
    {
      v137 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v137 = v122;
      *(_DWORD *)(v137 + 8) = v123;
      v125 = 1;
      v122 = v137;
    }
    else
    {
      v125 = *(_QWORD *)(v70 & 0xFFFFFFFF8);
      v122 = v123 << 36;
    }
    v70 = v122 | v125;
  }
  v158 = v70;
  v71 = (unsigned int *)v161;
  if (v161)
  {
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 + 1, v71));
  }
  v159 = v71;
  v160 = v57;
  v73 = *(_QWORD *)(a3 + 56);
  v74 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v74 + 8) = 1;
  *(_QWORD *)v74 = off_1E35760A0;
  v164 = (unsigned int *)v74;
  v82 = *(unsigned int *)(v73 + 12);
  if ((_DWORD)v82 == *(_DWORD *)(v73 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v73, (uint64_t *)&v164);
    v105 = v164;
    v164 = 0;
    if (v105)
    {
      v106 = v105 + 2;
      do
      {
        v107 = __ldaxr(v106);
        v108 = v107 - 1;
      }
      while (__stlxr(v108, v106));
      v58 = v141;
      if (!v108)
      {
        atomic_store(1u, v105 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v105 + 8))(v105);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v73 + 8 * v82) = v74;
    *(_DWORD *)(v73 + 12) = v82 + 1;
  }
  do
  {
    v97 = __ldaxr(v40);
    v98 = v97 - 1;
  }
  while (__stlxr(v98, v40));
  if (!v98)
  {
    atomic_store(1u, v40);
    WTF::fastFree((unint64_t)v40, v90, v91, v92, v93, v94, v95, v96);
  }
  v99 = v161;
  v161 = 0;
  if (v99)
  {
    do
    {
      v100 = __ldaxr((unsigned int *)v99);
      v101 = v100 - 1;
    }
    while (__stlxr(v101, (unsigned int *)v99));
    if (!v101)
    {
      atomic_store(1u, (unsigned int *)v99);
      v134 = *((_QWORD *)v99 + 1);
      if ((WTF *)((char *)v99 + 24) != (WTF *)v134 && v134 != 0)
      {
        *((_QWORD *)v99 + 1) = 0;
        *((_DWORD *)v99 + 4) = 0;
        WTF::fastFree(v134, v90, v91, v92, v93, v94, v95, v96);
      }
      WTF::fastFree((unint64_t)v99, v90, v91, v92, v93, v94, v95, v96);
    }
  }
  *(_BYTE *)(a2 + 212) = v58;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::cachedPutById(JSC::DFG::Node *,JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::cachedPutById(JSC::DFG::Node *,JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::cachedPutById(JSC::DFG::Node *,JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::cachedPutById(JSC::DFG::Node *,JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::cachedPutById(JSC::DFG::Node *,JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::cachedPutById(JSC::DFG::Node *,JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  int i;
  unsigned int v13;
  uint64_t (*v14)();
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int j;
  unsigned int v32;
  char v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t *v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  const void *v53;
  void *v54;
  _BYTE *v55;
  unsigned int v56;
  uint64_t v57;
  _BYTE *v58;
  unsigned int v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[24];

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (!HIBYTE(qword_1ECF4C780))
  {
    v11 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)v73 = *(_DWORD *)(v11 + 52);
    *(_QWORD *)&v73[4] = *(_QWORD *)(v11 + 56);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v73, a2, a3, a4, a5, a6, a7, a8);
  }
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v13 = *(unsigned __int8 *)(a1 + 24) - 6;
  if (v13 >= 0xC || ((0xA0Fu >> v13) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_81;
  }
  v14 = off_1E3577D98[(char)v13];
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16), *(char *)(a1 + 25), a4, a5, a6, a7, a8);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + 48) = v14;
    v61 = *(unsigned __int8 **)(a1 + 32);
    v71 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 40));
    v72 = v62;
    JSC::CodeOrigin::CodeOrigin(&v70, (const JSC::CodeOrigin *)(a1 + 104));
    if (*(_DWORD *)(a1 + 60) <= 1u)
    {
LABEL_80:
      __break(0xC471u);
LABEL_81:
      JUMPOUT(0x197D8F8C4);
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v73, v61, (uint64_t)&v71, a2, v70, *(_QWORD *)(a1 + 112) + 8, *(unsigned __int8 *)(a1 + 25) | 0x3000000000, 0xFFFFFFFFLL, *(_BYTE *)(*(_QWORD *)(a1 + 48) + 16) & 0x7F, **(_BYTE **)(a1 + 48) & 0x7F, *(_BYTE *)(a1 + 25));
    v30 = *(_QWORD *)v73;
    if ((v70 & 1) != 0)
    {
      v63 = v70 & 0xFFFFFFFF8;
      if ((v70 & 0xFFFFFFFF8) != 0)
LABEL_72:
        WTF::fastFree(v63, v23, v24, v25, v26, v27, v28, v29);
    }
  }
  else
  {
    v15 = *(_QWORD **)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 40);
    v18 = *(_QWORD *)(v16 + 96);
    v17 = *(_QWORD *)(v16 + 104);
    v19 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 48) + 216) & 0xFF003FF80000 | v18;
    v20 = *(unsigned int *)(a1 + 76);
    if ((_DWORD)v20)
    {
      v55 = *(_BYTE **)(a1 + 64);
      do
      {
        v56 = *v55 & 0x7F;
        if (v56 >= 0x40)
          goto LABEL_79;
        v57 = 1 << v56;
        v19 &= ~v57;
        v17 &= ~v57;
        ++v55;
      }
      while (--v20);
    }
    v21 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v21)
    {
      v58 = *(_BYTE **)(a1 + 80);
      do
      {
        v59 = (*v58 + 32) & 0x7F;
        if (v59 >= 0x40)
          goto LABEL_79;
        v60 = 1 << v59;
        v19 &= ~v60;
        v17 &= ~v60;
        ++v58;
      }
      while (--v21);
    }
    v71 = v19;
    v72 = v17;
    v22 = *(_QWORD *)(a1 + 104);
    if ((v22 & 1) != 0)
    {
      v64 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
      if ((v22 & 2) != 0
        || ((v65 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v65 != 0x3FFFFFFF)
          ? (v66 = (_DWORD)v65 == -1)
          : (v66 = 1),
            v66))
      {
        v67 = 2;
      }
      else if (v65 >> 28)
      {
        v68 = v64;
        v69 = v15;
        v64 = WTF::fastMalloc((WTF *)0x10);
        v15 = v69;
        *(_QWORD *)v64 = v68;
        *(_DWORD *)(v64 + 8) = v65;
        v67 = 1;
      }
      else
      {
        v67 = v64;
        v64 = v65 << 36;
      }
      v22 = v64 | v67;
    }
    if (*(_DWORD *)(a1 + 60) <= 1u)
    {
      __break(0xC471u);
      JUMPOUT(0x197D8F918);
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v73, v15, &v71, a2, v22, *(_QWORD *)(a1 + 112) + 8, (uint64_t)v14, 0xFFFFFFFFLL, *(_BYTE *)(*(_QWORD *)(a1 + 48) + 16) & 0x7F, **(_BYTE **)(a1 + 48) & 0x7F, *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)(a1 + 16) + 16));
    v30 = *(_QWORD *)v73;
    if ((v22 & 1) != 0)
    {
      v63 = v22 & 0xFFFFFFFF8;
      if ((v22 & 0xFFFFFFFF8) != 0)
        goto LABEL_72;
    }
  }
  for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v23, v24, v25, v26, v27, v28, v29);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v32 = j;
  if (j + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v23, v24, v25, v26, v27, v28, v29);
    v32 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v32) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v33 = 69;
  else
    v33 = 65;
  *(_QWORD *)v73 = j;
  v73[8] = v33;
  *(_WORD *)&v73[9] = 15;
  v73[11] = -1;
  LODWORD(v71) = *(_DWORD *)(a1 + 120);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v73, (unsigned int *)&v71, a2, v25, v26, v27, v28, v29);
  v34 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v34 + 36) = i;
  *(_QWORD *)(v34 + 40) = v30;
  do
    v35 = __ldaxr((unsigned int *)v34);
  while (__stlxr(v35 + 1, (unsigned int *)v34));
  v36 = WTF::fastMalloc((WTF *)0x18);
  v44 = v36;
  *(_DWORD *)(v36 + 8) = 1;
  *(_QWORD *)v36 = &off_1E35760C8;
  do
    v45 = __ldaxr((unsigned int *)v34);
  while (__stlxr(v45 + 1, (unsigned int *)v34));
  *(_QWORD *)(v36 + 16) = v34;
  v46 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v46 != *(_DWORD *)(a2 + 240))
  {
    v47 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v46);
    goto LABEL_26;
  }
  v50 = v46 + (v46 >> 2);
  if (v50 >= 0x10)
    v51 = v50 + 1;
  else
    v51 = 16;
  if (v51 <= v46 + 1)
    v52 = v46 + 1;
  else
    v52 = v51;
  if (v52 >> 29)
  {
    __break(0xC471u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  v53 = *(const void **)(a2 + 232);
  v54 = (void *)WTF::fastMalloc((WTF *)(8 * v52));
  *(_DWORD *)(a2 + 240) = v52;
  *(_QWORD *)(a2 + 232) = v54;
  memcpy(v54, v53, 8 * v46);
  if (v53)
  {
    if (*(const void **)(a2 + 232) == v53)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v53, v37, v38, v39, v40, v41, v42, v43);
  }
  v46 = *(unsigned int *)(a2 + 244);
  v47 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v46);
LABEL_26:
  *v47 = v44;
  *(_DWORD *)(a2 + 244) = v46 + 1;
  do
  {
    v48 = __ldaxr((unsigned int *)v34);
    v49 = v48 - 1;
  }
  while (__stlxr(v49, (unsigned int *)v34));
  if (!v49)
  {
    atomic_store(1u, (unsigned int *)v34);
    WTF::fastFree(v34, v37, v38, v39, v40, v41, v42, v43);
  }
  *(_BYTE *)(a2 + 212) = v10;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::cachedPutById(JSC::DFG::Node *,JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::cachedPutById(JSC::DFG::Node *,JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::cachedPutById(JSC::DFG::Node *,JSC::B3::Value *,JSC::B3::Value *,JSC::AccessType)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(v2 + 28);
  if (v3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
  v5 = (v3 - v4);
  v6 = a2[23];
  v7 = v5 + v6;
  if (v6 <= v5 + v6 && v6 + a2[1] >= v7)
    return JSC::JITInlineCacheGenerator::finalize(v2 + 8, a2, a2, v7);
  result = 366;
  __break(0xC471u);
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  char *v32;
  char v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  WTF *v50;
  int v51;
  unsigned int v52;
  WTF **v53;
  int v54;
  WTF *v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  WTF *v64;
  void *v65;
  WTF *v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  _BYTE *v72;
  int v73;
  WTF *v74;
  WTF *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF *v100;
  WTF *v102;
  WTF *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  JSC::AssemblerBuffer *v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  JSC::AssemblerBuffer *v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  WTF **v134;
  WTF **v135;
  _QWORD v136[5];
  _OWORD *v137;
  int v138;
  int v139;
  void *v140;
  int v141;
  int v142;
  void *v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int *v148;
  char v149;
  uint64_t v150;
  char v151;
  char v152;
  uint64_t v153;
  int v154;
  _BYTE *v155;
  unsigned int v156;
  int v157;
  _BYTE v158[32];
  WTF *v159;
  uint64_t v160;
  _BYTE v161[24];
  WTF *v162;
  uint64_t v163;
  _BYTE v164[24];
  WTF *v165;
  uint64_t v166;
  WTF *v167;
  int v168;
  uint64_t v169;
  WTF *v170;
  int v171;
  uint64_t v172;
  unsigned int *v173;

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v7 & 1) != 0)
  {
    v111 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v112 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v112 != 0x3FFFFFFF)
        ? (v113 = (_DWORD)v112 == -1)
        : (v113 = 1),
          v113))
    {
      v114 = 2;
    }
    else if (v112 >> 28)
    {
      v131 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v131 = v111;
      *(_DWORD *)(v131 + 8) = v112;
      v114 = 1;
      v111 = v131;
    }
    else
    {
      v114 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v111 = v112 << 36;
    }
    v7 = v111 | v114;
  }
  v166 = v7;
  v16 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v8, &v166);
  if ((v166 & 1) != 0 && (v166 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v166 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v167);
  v17 = (unsigned int *)v167;
  JSC::FTL::ExceptionTarget::jumps(v167, (JSC::CCallHelpers *)a2, (uint64_t *)&v165);
  v167 = 0;
  if (v17)
  {
    do
    {
      v25 = __ldaxr(v17);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v17));
    if (!v26)
    {
      atomic_store(1u, v17);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v17, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
    }
  }
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 32), a3, v16, v20, v21, v22, v23, v24);
  v27 = *(_DWORD *)(a3 + 20);
  if (!v27)
  {
    __break(0xC471u);
    goto LABEL_107;
  }
  if (v27 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D90258);
  }
  v28 = *(_DWORD *)(a3 + 36);
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x197D90260);
  }
  if (v28 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D90268);
  }
  v133 = v6;
  if (v28 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D90270);
  }
  v29 = *(_BYTE **)(a3 + 8);
  v30 = *v29 & 0x7F;
  v31 = v29[16] & 0x7F;
  v32 = *(char **)(a3 + 24);
  v33 = *v32;
  v34 = v32[1];
  v35 = v32[2];
  v162 = (WTF *)v164;
  v163 = 2;
  v159 = (WTF *)v161;
  v160 = 2;
  JSC::AssemblyHelpers::storeMegamorphicProperty(a2, *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16), v30, 0xFFFFFFFFLL, *(WTF::StringImpl **)(a1 + 40), v31, v33, v34, (uint64_t)&v167, v35);
  v134 = &v162;
  v135 = &v159;
  std::__memberwise_forward_assign[abi:sn180100]<std::tuple<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &>,std::tuple<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,0ul,1ul>((uint64_t)&v134, (unsigned int *)&v167, v36, v37, v38, v39, v40, v41);
  v49 = v170;
  if (&v172 != (uint64_t *)v170 && v170)
  {
    v170 = 0;
    v171 = 0;
    WTF::fastFree((unint64_t)v49, v42, v43, v44, v45, v46, v47, v48);
  }
  v50 = v167;
  if (&v169 != (uint64_t *)v167 && v167)
  {
    v167 = 0;
    v168 = 0;
    WTF::fastFree((unint64_t)v50, v42, v43, v44, v45, v46, v47, v48);
  }
  v51 = *(_DWORD *)(a2 + 200);
  if (v51 < *(_DWORD *)(a2 + 52))
  {
    v115 = (JSC::AssemblerBuffer *)(a2 + 56);
    do
    {
      if ((v51 + 4) > *(_DWORD *)(a2 + 192))
      {
        v130 = v115;
        JSC::AssemblerBuffer::outOfLineGrow(v115, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
        v115 = v130;
        v51 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v51) = -721215457;
      v51 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v51;
    }
    while (v51 < *(_DWORD *)(a2 + 52));
  }
  *(_DWORD *)(a2 + 208) = 0;
  v52 = HIDWORD(v163);
  v53 = (WTF **)v136;
  v134 = (WTF **)v136;
  LODWORD(v135) = 2;
  HIDWORD(v135) = HIDWORD(v163);
  if (HIDWORD(v163) >= 3)
  {
    if (HIDWORD(v163) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197D90280);
    }
    v54 = 12 * HIDWORD(v163);
    v53 = (WTF **)WTF::fastMalloc((WTF *)(12 * HIDWORD(v163)));
    LODWORD(v135) = (v54 & 0xFFFFFFFC) / 0xC;
    v134 = v53;
    v52 = HIDWORD(v163);
  }
  if (v52)
  {
    v55 = v162;
    v56 = (WTF *)((char *)v162 + 12 * v52);
    do
    {
      *(_DWORD *)v53 = *(_DWORD *)v55;
      *(WTF **)((char *)v53 + 4) = *(WTF **)((char *)v55 + 4);
      v55 = (WTF *)((char *)v55 + 12);
      v53 = (WTF **)((char *)v53 + 12);
    }
    while (v55 != v56);
  }
  v57 = *(_QWORD *)a3;
  v136[3] = *(_QWORD *)(a1 + 16);
  v136[4] = v57;
  v58 = *(unsigned int *)(a3 + 20);
  v137 = 0;
  v138 = 0;
  v139 = v58;
  if ((_DWORD)v58)
  {
    if (v58 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197D90278);
    }
    v59 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v58));
    v138 = v58;
    v137 = v59;
    v60 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v60)
    {
      v61 = *(__int128 **)(a3 + 8);
      v62 = 16 * v60;
      do
      {
        v63 = *v61++;
        *v59++ = v63;
        v62 -= 16;
      }
      while (v62);
    }
  }
  v64 = (WTF *)*(unsigned int *)(a3 + 36);
  v140 = 0;
  v141 = 0;
  v142 = (int)v64;
  if ((_DWORD)v64)
  {
    v65 = (void *)WTF::fastMalloc(v64);
    v141 = (int)v64;
    v140 = v65;
    memcpy(v65, *(const void **)(a3 + 24), *(unsigned int *)(a3 + 36));
  }
  v66 = (WTF *)*(unsigned int *)(a3 + 52);
  v143 = 0;
  v144 = 0;
  v145 = (int)v66;
  if ((_DWORD)v66)
  {
    v110 = (void *)WTF::fastMalloc(v66);
    v144 = (int)v66;
    v143 = v110;
    memcpy(v110, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 52));
  }
  v146 = *(_QWORD *)(a3 + 56);
  v67 = *(_QWORD *)(a1 + 24);
  if ((v67 & 1) != 0)
  {
    v116 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
    if ((v67 & 2) != 0
      || ((v117 = *(unsigned int *)((v67 & 0xFFFFFFFF8) + 8), (_DWORD)v117 != 0x3FFFFFFF)
        ? (v118 = (_DWORD)v117 == -1)
        : (v118 = 1),
          v118))
    {
      v119 = 2;
    }
    else if (v117 >> 28)
    {
      v132 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v132 = v116;
      *(_DWORD *)(v132 + 8) = v117;
      v119 = 1;
      v116 = v132;
    }
    else
    {
      v119 = *(_QWORD *)(v67 & 0xFFFFFFFF8);
      v116 = v117 << 36;
    }
    v67 = v116 | v119;
  }
  v147 = v67;
  v68 = (unsigned int *)v165;
  if (v165)
  {
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 + 1, v68));
  }
  v148 = v68;
  v149 = *(_BYTE *)(a1 + 48);
  v70 = *(_QWORD *)(a1 + 64);
  v150 = *(_QWORD *)(a1 + 56);
  v151 = v31;
  v152 = v30;
  v153 = v70;
  v154 = v51;
  v71 = HIDWORD(v160);
  v72 = v158;
  v155 = v158;
  v156 = 2;
  v157 = HIDWORD(v160);
  if (HIDWORD(v160) >= 3)
  {
    if (HIDWORD(v160) < 0x15555556)
    {
      v73 = 12 * HIDWORD(v160);
      v72 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v160)));
      v156 = (v73 & 0xFFFFFFFC) / 0xC;
      v155 = v72;
      v71 = HIDWORD(v160);
      goto LABEL_42;
    }
    __break(0xC471u);
LABEL_107:
    JUMPOUT(0x197D90250);
  }
LABEL_42:
  if (v71)
  {
    v74 = v159;
    v75 = (WTF *)((char *)v159 + 12 * v71);
    do
    {
      *(_DWORD *)v72 = *(_DWORD *)v74;
      *(_QWORD *)(v72 + 4) = *(_QWORD *)((char *)v74 + 4);
      v74 = (WTF *)((char *)v74 + 12);
      v72 += 12;
    }
    while (v74 != v75);
  }
  v158[24] = v35;
  v76 = *(_QWORD *)(a3 + 56);
  v77 = WTF::fastMalloc((WTF *)0xE8);
  *(_DWORD *)(v77 + 8) = 1;
  *(_QWORD *)v77 = off_1E3576118;
  v173 = (unsigned int *)v77;
  v85 = *(unsigned int *)(v76 + 12);
  if ((_DWORD)v85 == *(_DWORD *)(v76 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v76, (uint64_t *)&v173);
    v106 = v173;
    v173 = 0;
    if (v106)
    {
      v107 = v106 + 2;
      do
      {
        v108 = __ldaxr(v107);
        v109 = v108 - 1;
      }
      while (__stlxr(v109, v107));
      if (!v109)
      {
        atomic_store(1u, v106 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v106 + 8))(v106);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v76 + 8 * v85) = v77;
    *(_DWORD *)(v76 + 12) = v85 + 1;
  }
  v100 = v159;
  if (v161 != (_BYTE *)v159 && v159 != 0)
  {
    v159 = 0;
    LODWORD(v160) = 0;
    WTF::fastFree((unint64_t)v100, v93, v94, v95, v96, v97, v98, v99);
  }
  v102 = v162;
  if (v164 != (_BYTE *)v162 && v162)
  {
    v162 = 0;
    LODWORD(v163) = 0;
    WTF::fastFree((unint64_t)v102, v93, v94, v95, v96, v97, v98, v99);
  }
  v103 = v165;
  v165 = 0;
  if (v103)
  {
    do
    {
      v104 = __ldaxr((unsigned int *)v103);
      v105 = v104 - 1;
    }
    while (__stlxr(v105, (unsigned int *)v103));
    if (!v105)
    {
      atomic_store(1u, (unsigned int *)v103);
      v128 = *((_QWORD *)v103 + 1);
      if ((WTF *)((char *)v103 + 24) != (WTF *)v128 && v128 != 0)
      {
        *((_QWORD *)v103 + 1) = 0;
        *((_DWORD *)v103 + 4) = 0;
        WTF::fastFree(v128, v93, v94, v95, v96, v97, v98, v99);
      }
      WTF::fastFree((unint64_t)v103, v93, v94, v95, v96, v97, v98, v99);
    }
  }
  *(_BYTE *)(a2 + 212) = v133;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::~(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;

  v9 = *(_QWORD *)(a1 + 168);
  if (a1 + 184 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 168) = 0;
    *(_DWORD *)(a1 + 176) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v20 = *(_QWORD *)(v11 + 8);
      if (v11 + 24 != v20 && v20 != 0)
      {
        *(_QWORD *)(v11 + 8) = 0;
        *(_DWORD *)(v11 + 16) = 0;
        WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v14 = *(_QWORD *)(a1 + 112);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v15 = *(_QWORD *)(a1 + 88);
  if (v15)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(_QWORD *)(a1 + 72);
  if (v16)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = *(_QWORD *)(a1 + 56);
  if (v17)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
  }
  v18 = *(_QWORD *)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v18)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void std::__memberwise_forward_assign[abi:sn180100]<std::tuple<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &>,std::tuple<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,0ul,1ul>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  v10 = *(unint64_t **)a1;
  v12 = *(_QWORD *)a1 + 16;
  v11 = **(_QWORD **)a1;
  if (v11 != v12)
  {
    if (v11)
    {
      *v10 = 0;
      *((_DWORD *)v10 + 2) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    *v10 = v12;
  }
  v13 = *(_QWORD **)a2;
  if (*(unsigned int **)a2 == a2 + 4)
  {
    v15 = a2[3];
    if (v15)
    {
      v16 = (_QWORD *)((char *)v13 + 12 * v15);
      do
      {
        *(_DWORD *)v12 = *(_DWORD *)v13;
        *(_QWORD *)(v12 + 4) = *(_QWORD *)((char *)v13 + 4);
        v13 = (_QWORD *)((char *)v13 + 12);
        v12 += 12;
      }
      while (v13 != v16);
    }
    v14 = a2[2];
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *v10 = (unint64_t)v13;
    v14 = a2[2];
    a2[2] = 2;
  }
  *((_DWORD *)v10 + 2) = v14;
  v17 = a2[3];
  a2[3] = 0;
  *((_DWORD *)v10 + 3) = v17;
  v18 = *(_QWORD *)(a1 + 8);
  v20 = v18 + 16;
  v19 = *(_QWORD *)v18;
  if (*(_QWORD *)v18 != v18 + 16)
  {
    if (v19)
    {
      *(_QWORD *)v18 = 0;
      *(_DWORD *)(v18 + 8) = 0;
      WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)v18 = v20;
  }
  v21 = (unsigned int *)*((_QWORD *)a2 + 5);
  if (v21 == a2 + 14)
  {
    v23 = a2[13];
    if (v23)
    {
      v24 = &v21[3 * v23];
      do
      {
        *(_DWORD *)v20 = *v21;
        *(_QWORD *)(v20 + 4) = *(_QWORD *)(v21 + 1);
        v21 += 3;
        v20 += 12;
      }
      while (v21 != v24);
    }
    v22 = a2[12];
  }
  else
  {
    *((_QWORD *)a2 + 5) = a2 + 14;
    *(_QWORD *)v18 = v21;
    v22 = a2[12];
    a2[12] = 2;
  }
  *(_DWORD *)(v18 + 8) = v22;
  v25 = a2[13];
  a2[13] = 0;
  *(_DWORD *)(v18 + 12) = v25;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  uint64_t v36;

  v4 = *((unsigned int *)a2 + 3);
  v5 = a1 + 16;
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = v4;
  if (v4 >= 3)
  {
    if (v4 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197D9078CLL);
    }
    v6 = 12 * v4;
    v5 = WTF::fastMalloc((WTF *)(12 * v4));
    *(_DWORD *)(a1 + 8) = (v6 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)a1 = v5;
  }
  v7 = *((_DWORD *)a2 + 3);
  if (v7)
  {
    v8 = *a2;
    v9 = *a2 + 12 * v7;
    do
    {
      *(_DWORD *)v5 = *(_DWORD *)v8;
      *(_QWORD *)(v5 + 4) = *(_QWORD *)(v8 + 4);
      v8 += 12;
      v5 += 12;
    }
    while (v8 != v9);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  v10 = *((unsigned int *)a2 + 17);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = v10;
  if ((_DWORD)v10)
  {
    if (v10 >> 28)
      goto LABEL_39;
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v10));
    *(_DWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 56) = v11;
    v12 = *((unsigned int *)a2 + 17);
    if ((_DWORD)v12)
    {
      v13 = (__int128 *)a2[7];
      v14 = 16 * v12;
      do
      {
        v15 = *v13++;
        *v11++ = v15;
        v14 -= 16;
      }
      while (v14);
    }
  }
  v16 = (WTF *)*((unsigned int *)a2 + 21);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = (_DWORD)v16;
  if ((_DWORD)v16)
  {
    v17 = (void *)WTF::fastMalloc(v16);
    *(_DWORD *)(a1 + 80) = (_DWORD)v16;
    *(_QWORD *)(a1 + 72) = v17;
    memcpy(v17, (const void *)a2[9], *((unsigned int *)a2 + 21));
  }
  v18 = (WTF *)*((unsigned int *)a2 + 25);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = (_DWORD)v18;
  if ((_DWORD)v18)
  {
    v30 = (void *)WTF::fastMalloc(v18);
    *(_DWORD *)(a1 + 96) = (_DWORD)v18;
    *(_QWORD *)(a1 + 88) = v30;
    memcpy(v30, (const void *)a2[11], *((unsigned int *)a2 + 25));
  }
  v19 = a2[14];
  *(_QWORD *)(a1 + 104) = a2[13];
  if ((v19 & 1) != 0)
  {
    v31 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v32 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v32 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else if (v32 >> 28)
    {
      v35 = v32;
      v36 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v36 = v31;
      *(_DWORD *)(v36 + 8) = v35;
      v34 = 1;
      v31 = v36;
    }
    else
    {
      v34 = v31;
      v31 = v32 << 36;
    }
    v19 = v31 | v34;
  }
  *(_QWORD *)(a1 + 112) = v19;
  v20 = (unsigned int *)a2[15];
  if (v20)
  {
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  *(_QWORD *)(a1 + 120) = v20;
  v22 = *((_OWORD *)a2 + 9);
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  *(_OWORD *)(a1 + 144) = v22;
  *(_DWORD *)(a1 + 160) = *((_DWORD *)a2 + 40);
  v23 = *((unsigned int *)a2 + 45);
  v24 = a1 + 184;
  *(_QWORD *)(a1 + 168) = a1 + 184;
  *(_DWORD *)(a1 + 176) = 2;
  *(_DWORD *)(a1 + 180) = v23;
  if (v23 >= 3)
  {
    if (v23 < 0x15555556)
    {
      v25 = 12 * v23;
      v24 = WTF::fastMalloc((WTF *)(12 * v23));
      *(_DWORD *)(a1 + 176) = (v25 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)(a1 + 168) = v24;
      goto LABEL_22;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x197D90784);
  }
LABEL_22:
  v26 = *((_DWORD *)a2 + 45);
  if (v26)
  {
    v27 = a2[21];
    v28 = v27 + 12 * v26;
    do
    {
      *(_DWORD *)v24 = *(_DWORD *)v27;
      *(_QWORD *)(v24 + 4) = *(_QWORD *)(v27 + 4);
      v27 += 12;
      v24 += 12;
    }
    while (v27 != v28);
  }
  *(_BYTE *)(a1 + 208) = *((_BYTE *)a2 + 208);
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByIdMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(JSC::JSGlobalObject *, const JSC::PropertyTable *, unsigned __int8 *, uint64_t, __n128, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int i;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int j;
  unsigned int v57;
  char v58;
  unsigned int *result;
  _BYTE *v60;
  unsigned int v61;
  uint64_t v62;
  _BYTE *v63;
  unsigned int v64;
  uint64_t v65;
  _BYTE *v66;
  unsigned int v67;
  uint64_t v68;
  _BYTE *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  char v88;
  __int16 v89;
  char v90;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    goto LABEL_90;
  while (1)
  {
    *(_BYTE *)(a2 + 212) = 1;
    v11 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = 12 * v11;
      do
      {
        if (v13 >= *(unsigned int *)(a1 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x197D90D80);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 16) + v12), a2, a3, a4, a5, a6, a7, a8);
        ++v13;
        v12 += 12;
      }
      while (v14 != v12);
    }
    v16 = *(unsigned __int8 **)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 64);
    v18 = *(_QWORD *)(v15 + 96);
    v17 = *(_QWORD *)(v15 + 104);
    v19 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 48) + 216) & 0xFF003FF80000 | v18;
    v20 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v20)
    {
      v60 = *(_BYTE **)(a1 + 88);
      do
      {
        v61 = *v60 & 0x7F;
        if (v61 >= 0x40)
          goto LABEL_89;
        v62 = 1 << v61;
        v19 &= ~v62;
        v17 &= ~v62;
        ++v60;
      }
      while (--v20);
    }
    v21 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v21)
    {
      v66 = *(_BYTE **)(a1 + 104);
      do
      {
        v67 = (*v66 + 32) & 0x7F;
        if (v67 >= 0x40)
          goto LABEL_89;
        v68 = 1 << v67;
        v19 &= ~v68;
        v17 &= ~v68;
        ++v66;
      }
      while (--v21);
    }
    v84 = v19;
    v85 = v17;
    v22 = *(_QWORD *)(a1 + 128);
    if ((v22 & 1) != 0)
    {
      v72 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
      if ((v22 & 2) != 0
        || ((v73 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v73 != 0x3FFFFFFF)
          ? (v74 = (_DWORD)v73 == -1)
          : (v74 = 1),
            v74))
      {
        v75 = 2;
      }
      else if (v73 >> 28)
      {
        v80 = v72;
        v72 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v72 = v80;
        *(_DWORD *)(v72 + 8) = v73;
        v75 = 1;
      }
      else
      {
        v75 = v72;
        v72 = v73 << 36;
      }
      v22 = v72 | v75;
      v23 = (v72 | v75) & 1;
    }
    else
    {
      v23 = 0;
    }
    if (*(_BYTE *)(a1 + 144))
      v24 = operationPutByIdSloppyMegamorphicGeneric;
    else
      v24 = operationPutByIdStrictMegamorphicGeneric;
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)&v86, v16, &v84, a2, v22, *(_QWORD *)(a1 + 136) + 8, (uint64_t)v24, 0xFFFFFFFFLL, *(_QWORD *)(a1 + 152), *(_WORD *)(a1 + 160), HIBYTE(*(_WORD *)(a1 + 160)), *(JSC::ARM64LogicalImmediate **)(a1 + 168));
    if (v23 && (v22 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v22 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
    for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v25, v26, v27, v28, v29, v30, v31);
        i = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
      i = *(_DWORD *)(a2 + 200) + 4;
    }
    v33 = i;
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v25, v26, v27, v28, v29, v30, v31);
      v33 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = 335544320;
    *(_DWORD *)(a2 + 200) += 4;
    if (*(_BYTE *)(a2 + 328))
      v34 = 69;
    else
      v34 = 65;
    v86 = i;
    v87 = 0;
    v88 = v34;
    v89 = 15;
    v90 = -1;
    v83 = *(_DWORD *)(a1 + 176);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v86, &v83, a2, v27, v28, v29, v30, v31);
    v35 = *(unsigned int *)(a1 + 196);
    if ((_DWORD)v35)
    {
      v36 = 0;
      v37 = 0;
      v38 = 12 * v35;
      while (v37 < *(unsigned int *)(a1 + 196))
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 184) + v36), a2, a3, a4, a5, a6, a7, a8);
        ++v37;
        v36 += 12;
        if (v38 == v36)
          goto LABEL_24;
      }
      __break(0xC471u);
      goto LABEL_89;
    }
LABEL_24:
    v39 = *(_QWORD **)(a1 + 56);
    v40 = *(_QWORD *)(a1 + 64);
    v42 = *(_QWORD *)(v40 + 96);
    v41 = *(_QWORD *)(v40 + 104);
    v43 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 48) + 216) & 0xFF003FF80000 | v42;
    v44 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v44)
    {
      v63 = *(_BYTE **)(a1 + 88);
      do
      {
        v64 = *v63 & 0x7F;
        if (v64 >= 0x40)
          goto LABEL_89;
        v65 = 1 << v64;
        v43 &= ~v65;
        v41 &= ~v65;
        ++v63;
      }
      while (--v44);
    }
    v45 = *(unsigned int *)(a1 + 116);
    if (!(_DWORD)v45)
      break;
    v69 = *(_BYTE **)(a1 + 104);
    while (1)
    {
      v70 = (*v69 + 32) & 0x7F;
      if (v70 >= 0x40)
        break;
      v71 = 1 << v70;
      v43 &= ~v71;
      v41 &= ~v71;
      ++v69;
      if (!--v45)
        goto LABEL_26;
    }
LABEL_89:
    __break(1u);
LABEL_90:
    *(_DWORD *)(a2 + 208) = 0;
  }
LABEL_26:
  v84 = v43;
  v85 = v41;
  v46 = *(_QWORD *)(a1 + 128);
  if ((v46 & 1) != 0)
  {
    v76 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
    if ((v46 & 2) != 0
      || ((v77 = *(unsigned int *)((v46 & 0xFFFFFFFF8) + 8), (_DWORD)v77 != 0x3FFFFFFF)
        ? (v78 = (_DWORD)v77 == -1)
        : (v78 = 1),
          v78))
    {
      v79 = 2;
    }
    else
    {
      if (v77 >> 28)
      {
        v81 = v39;
        v82 = WTF::fastMalloc((WTF *)0x10);
        v39 = v81;
        *(_QWORD *)v82 = v76;
        *(_DWORD *)(v82 + 8) = v77;
        v48 = *(_QWORD **)(a1 + 56);
        v79 = 1;
        v76 = v82;
        goto LABEL_74;
      }
      v79 = v76;
      v76 = v77 << 36;
    }
    v48 = v39;
LABEL_74:
    v46 = v76 | v79;
    v47 = ((v76 | v79) & 1) == 0;
    goto LABEL_28;
  }
  v47 = 1;
  v48 = v39;
LABEL_28:
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)&v86, v39, &v84, a2, v46, *(_QWORD *)(a1 + 136) + 8, (uint64_t)operationPutByMegamorphicReallocating, 0xFFFFFFFFLL, *(_QWORD *)(*v48 + 16), *(_BYTE *)(a1 + 161), *(_BYTE *)(a1 + 160), *(_BYTE *)(a1 + 224));
  if (!v47 && (v46 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v46 & 0xFFFFFFFF8, v49, v50, v51, v52, v53, v54, v55);
  for (j = *(_DWORD *)(a2 + 200); j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v49, v50, v51, v52, v53, v54, v55);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v57 = j;
  if ((j + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v49, v50, v51, v52, v53, v54, v55);
    v57 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v57) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v58 = 69;
  else
    v58 = 65;
  v86 = j;
  v87 = 0;
  v88 = v58;
  v89 = 15;
  v90 = -1;
  LODWORD(v84) = *(_DWORD *)(a1 + 176);
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v86, (unsigned int *)&v84, a2, v51, v52, v53, v54, v55);
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

void JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12)
{
  uint64_t v15;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;

  v15 = a5;
  v19 = *(_QWORD *)(*a2 + 16);
  if ((a5 & 1) == 0)
  {
    if ((a5 & 2) == 0)
      goto LABEL_3;
LABEL_37:
    v25 = 0xFFFFFFFFLL;
    goto LABEL_7;
  }
  v41 = *(_QWORD *)(a5 & 0xFFFFFFFF8);
  if ((a5 & 2) != 0
    || ((v42 = *(unsigned int *)((a5 & 0xFFFFFFFF8) + 8), (_DWORD)v42 != 0x3FFFFFFF)
      ? (v43 = (_DWORD)v42 == -1)
      : (v43 = 1),
        v43))
  {
    v44 = 2;
  }
  else if (v42 >> 28)
  {
    v53 = a2;
    v51 = WTF::fastMalloc((WTF *)0x10);
    a2 = v53;
    *(_QWORD *)v51 = v41;
    *(_DWORD *)(v51 + 8) = v42;
    v44 = 1;
    v41 = v51;
  }
  else
  {
    v44 = *(_QWORD *)(a5 & 0xFFFFFFFF8);
    v41 = v42 << 36;
  }
  v15 = v41 | v44;
  if (((v41 | v44) & 2) != 0)
    goto LABEL_37;
LABEL_3:
  v20 = *(_QWORD *)(a2[3] + 64);
  v21 = v15;
  if ((v15 & 1) != 0)
  {
    v45 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    v46 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v46 == 0x3FFFFFFF || (_DWORD)v46 == -1)
    {
      v48 = 2;
    }
    else if (v46 >> 28)
    {
      v52 = *(_QWORD *)(a2[3] + 64);
      v49 = *(_DWORD *)((v15 & 0xFFFFFFFF8) + 8);
      v50 = WTF::fastMalloc((WTF *)0x10);
      v20 = v52;
      *(_QWORD *)v50 = v45;
      *(_DWORD *)(v50 + 8) = v49;
      v48 = 1;
      v45 = v50;
    }
    else
    {
      v48 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v45 = v46 << 36;
    }
    v21 = v45 | v48;
  }
  v54 = v21;
  v24 = JSC::DFG::CodeOriginPool::addCodeOrigin(v20, &v54);
  if ((v54 & 1) != 0 && (v54 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v54 & 0xFFFFFFFF8, v22, v23, a4, a5, a6, a7, a8);
  if (v24)
  {
    v25 = v24;
LABEL_7:
    if (!*(_BYTE *)(a4 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197D90F44);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a4, (JSC::ARM64LogicalImmediate *)v25, a4 + 264, a4, a5, a6, a7, a8);
    v33 = *(_DWORD *)(a4 + 200);
    if (v33 + 4 > *(_DWORD *)(a4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), v26, v27, v28, v29, v30, v31, v32);
      v33 = *(_DWORD *)(a4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + v33) = -1207811152;
    *(_DWORD *)(a4 + 200) += 4;
  }
  JSC::FTL::callOperation<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(a1, v19, a3[1] | *a3, (_DWORD *)a4, a6, a7, a8, a9, a10, a11, a12);
  if ((v15 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v15 & 0xFFFFFFFF8, v34, v35, v36, v37, v38, v39, v40);
}

void JSC::FTL::callOperation<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11)
{
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint8x8_t v32;
  __int32 v33;
  uint8x8_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  unsigned int v44;
  char v45;
  char v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  _BYTE *v50;
  int v51;
  unsigned __int8 *v52;
  char *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  unsigned __int8 *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int8x8_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  _DWORD *v82;
  uint64_t v83;
  int64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  void *__dst;
  __int128 v91;
  uint64_t v92;
  _QWORD v93[9];

  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  v17 = (unsigned __int8 *)JSC::FTL::SlowPathCallContext::SlowPathCallContext(v93, a3, (uint64_t)a4, 5u, a7, 0xFFFFFFFFLL, a7, a8);
  v25 = 0;
  __dst = (char *)&v91 + 8;
  *(_QWORD *)&v91 = 3;
  if (a9 != 1)
  {
    WORD4(v91) = a9 | 0x100;
    v25 = 1;
    DWORD1(v91) = 1;
  }
  if (a10 != 2)
  {
    *((_WORD *)&v91 + v25++ + 4) = a10 | 0x200;
    DWORD1(v91) = v25;
  }
  if (a11 == 3)
  {
    v58 = &v89;
    if (!v25)
      goto LABEL_62;
  }
  else
  {
    *((_WORD *)&v91 + v25++ + 4) = a11 | 0x300;
    DWORD1(v91) = v25;
  }
  do
  {
    v26 = 0;
    v27 = 0;
    v28 = (char *)__dst;
    v29 = v25;
    do
    {
      if ((*((_BYTE *)__dst + v26 + 1) & 0x40) != 0)
      {
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      v27 |= 1 << *((_BYTE *)__dst + v26 + 1);
      v26 += 2;
    }
    while (2 * v25 != v26);
    v30 = 0;
    do
    {
      v31 = *((_BYTE *)__dst + v30) & 0x7F;
      if (v31 >= 0x40)
        goto LABEL_68;
      v27 &= ~(1 << v31);
      v30 += 2;
    }
    while (2 * v25 != v30);
    v32 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
    v32.i16[0] = vaddlv_u8(v32);
    v33 = v32.i32[0];
    v34 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v27));
    v34.i16[0] = vaddlv_u8(v34);
    if (v34.i32[0] + v33)
    {
      v35 = 0;
      if (v25 <= 1)
        v36 = 1;
      else
        v36 = v25;
      v37 = 2 * v36;
      while (1)
      {
        v38 = *((unsigned __int8 *)__dst + v35 + 1);
        if ((v38 & 0x7Fu) >= 0x40)
          goto LABEL_68;
        if (((v27 >> (v38 & 0x7F)) & 1) != 0)
          break;
        v35 += 2;
        if (v37 == v35)
          goto LABEL_56;
      }
      v39 = *((unsigned __int8 *)__dst + v35);
      if (v39 != v38)
      {
        v40 = (char)v39;
        if ((char)v39 == 63)
        {
          v41 = a4[50];
          v42 = a4[48];
          if (v38 == 31)
            goto LABEL_50;
          v44 = v38 & 0x1F | 0xD2800000;
        }
        else
        {
          v41 = a4[50];
          v42 = a4[48];
          v43 = (char)v38 == 31 || v40 == 31;
          if (!v43)
          {
            v44 = v38 & 0xFFE0FFFF | ((v40 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_51;
          }
LABEL_50:
          v44 = (char)v38 | (32 * v40) | 0x91000000;
        }
LABEL_51:
        if (v41 + 4 > v42)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 14), (uint64_t)v18, v19, v20, v21, v22, v23, v24);
          v41 = a4[50];
        }
        *(_DWORD *)(*((_QWORD *)a4 + 7) + v41) = v44;
        a4[50] += 4;
        v28 = (char *)__dst;
        v29 = DWORD1(v91);
      }
      v17 = (unsigned __int8 *)memmove(&v28[v35], &v28[v35 + 2], 2 * v29 - v35 - 2);
      v25 = DWORD1(v91) - 1;
      goto LABEL_55;
    }
    v87 = a6;
    v45 = *(_BYTE *)__dst;
    v46 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)a4, *(char *)__dst, v46, v20, v21, v22, v23, v24);
    memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v91) - 2);
    v47 = (DWORD1(v91) - 1);
    v43 = DWORD1(v91) == 1;
    DWORD1(v91) = v47;
    v48 = (unsigned __int8 *)__dst;
    v17 = (unsigned __int8 *)__dst + 2 * v47;
    if (v43)
    {
      v55 = 0;
      v56 = 0;
      v51 = 0;
      v18 = v17;
    }
    else
    {
      v49 = 2 * v47;
      v50 = __dst;
      while (*v50 != v46)
      {
        v50 += 2;
        v49 -= 2;
        if (!v49)
          goto LABEL_35;
      }
      *v50 = v45;
LABEL_35:
      v51 = 0;
      v52 = v48;
      v18 = v17;
      v53 = (char *)v17;
      do
      {
        if (*v48 == v48[1])
        {
          v54 = v48;
          if (v53 != (char *)__dst + 2 * DWORD1(v91))
          {
            v86 = (char *)v17;
            if (v48 == v18)
            {
              v54 = (unsigned __int8 *)v53;
            }
            else
            {
              v84 = v52 - v18;
              v85 = v53;
              memmove(v53, v18, v52 - v18);
              v54 = (unsigned __int8 *)&v85[v84];
            }
            v17 = (unsigned __int8 *)v86;
          }
          v18 = v48 + 2;
          ++v51;
          v53 = (char *)v54;
        }
        v48 += 2;
        v52 += 2;
      }
      while (v48 < v17);
      v48 = (unsigned __int8 *)__dst;
      v55 = DWORD1(v91);
      v56 = DWORD1(v91);
      v17 = (unsigned __int8 *)v53;
    }
    v57 = &v48[2 * v55];
    a6 = v87;
    if (v18 != v57)
    {
      v17 = (unsigned __int8 *)memmove(v17, v18, v57 - v18);
      v56 = DWORD1(v91);
    }
    v25 = v56 - v51;
LABEL_55:
    DWORD1(v91) = v25;
LABEL_56:
    ;
  }
  while (v25);
  v17 = (unsigned __int8 *)__dst;
  if ((char *)&v91 + 8 == __dst)
    goto LABEL_60;
LABEL_69:
  if (v17)
  {
    __dst = 0;
    LODWORD(v91) = 0;
    WTF::fastFree((unint64_t)v17, v18, v19, v20, v21, v22, v23, v24);
  }
LABEL_60:
  v58 = &v89;
LABEL_62:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a4, a8, 0, v20, v21, v22, v23, v24);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v93, a2, a6, v59, v60, v61, v62, v63, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v91;
  *(_QWORD *)(a1 + 24) = v92;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v93, v64, v65, v66, v67, v68, v69, v70);
  if (a5)
  {
    JSC::AssemblyHelpers::emitExceptionCheck((uint64_t)a4, a2, 0, 0, 0xFFFFFFFFLL, v71, v72, v73, (uint64_t)&v88, v74);
    v80 = v88;
    if (v88 != -1)
    {
      v81 = *(unsigned int *)(a5 + 12);
      if ((_DWORD)v81 == *(_DWORD *)(a5 + 8))
      {
        v82 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, (void *)(v81 + 1), (unint64_t)&v88, v75, v76, v77, v78, v79);
        v58 = (uint64_t *)(v82 + 1);
        v80 = *v82;
        LODWORD(v81) = *(_DWORD *)(a5 + 12);
      }
      v83 = *(_QWORD *)a5 + 12 * v81;
      *(_DWORD *)v83 = v80;
      *(_QWORD *)(v83 + 4) = *v58;
      ++*(_DWORD *)(a5 + 12);
    }
  }
}

JSC::B3::Value *JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::BasicBlock *v8;
  JSC::B3::Value *v9;
  JSC::B3::Value *v10;

  v8 = (JSC::B3::BasicBlock *)a1[17];
  v9 = (JSC::B3::Value *)a1[15];
  v10 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(a2, a1[16], a3, a4, a5, a6, a7, a8);
  JSC::B3::Procedure::addValueImpl(v9, v10);
  JSC::B3::BasicBlock::append(v8, v10);
  return v10;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::operationExceptionCheckAndExtractResultIfNeeded<JSC::ExceptionOperationResult<void>>(uint64_t a1, JSC::B3::Value *a2, JSC::DFG::Node *a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::DFG *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  char v17;
  _QWORD *v18;
  JSC::JSCell *v19;
  JSC::B3::Value *Ptr;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::B3::Value *v25;
  JSC::DFG *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x8_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  JSC::DFG *v95;
  unint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  int64x2_t v99;
  _QWORD *v100;
  uint64_t v101;

  if (!JSC::DFG::mayExit(*(JSC::DFG **)a1, *(JSC::DFG::Graph **)(a1 + 28224), a3))
    goto LABEL_21;
  v12 = *(JSC::DFG **)a1;
  v13 = *(_QWORD *)(a1 + 28192);
  if ((v13 & 1) == 0)
  {
    v14 = *((_QWORD *)v12 + 4);
LABEL_4:
    v15 = (_QWORD *)(v13 & 0xFFFFFFFF8);
    v16 = 1;
    v17 = 1;
    goto LABEL_5;
  }
  v80 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v81 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v81 != 0x3FFFFFFF) ? (v82 = v81 == -1) : (v82 = 1), v82))
  {
    v83 = 2;
  }
  else if (v81 >> 28)
  {
    v92 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v92 = v80;
    *(_DWORD *)(v92 + 8) = v81;
    v83 = 1;
    v80 = v92;
  }
  else
  {
    v83 = v80;
    v80 = 0;
  }
  v13 = v80 | v83;
  v14 = *((_QWORD *)v12 + 4);
  if (((v80 | v83) & 1) == 0)
    goto LABEL_4;
  v84 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
  if ((v13 & 2) != 0
    || ((v85 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8), v85 != 0x3FFFFFFF) ? (v86 = v85 == -1) : (v86 = 1), v86))
  {
    v87 = 2;
  }
  else if (v85 >> 28)
  {
    v94 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v94 = v84;
    *(_DWORD *)(v94 + 8) = v85;
    v87 = 1;
    v84 = v94;
  }
  else
  {
    v87 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    v84 = 0;
  }
  v88 = v84 | v87;
  v15 = (_QWORD *)(v88 & 0xFFFFFFFF8);
  if ((v88 & 1) != 0)
  {
    v16 = 0;
    v17 = 0;
    v18 = (_QWORD *)*v15;
    goto LABEL_6;
  }
  v17 = 0;
  v16 = 1;
LABEL_5:
  v18 = v15;
LABEL_6:
  if (v18)
    v14 = v18[1];
  v19 = *(JSC::JSCell **)(v14 + 8);
  if ((v16 & 1) == 0 && v15)
    WTF::fastFree((unint64_t)v15, v5, v6, v7, v8, v9, v10, v11);
  if ((v17 & 1) == 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v5, v6, v7, v8, v9, v10, v11);
  Ptr = a2;
  if ((*((_DWORD *)a2 + 4) & 0x80000000) != 0)
    Ptr = (JSC::B3::Value *)JSC::FTL::Output::extract((JSC::FTL::Output *)(a1 + 27640), a2, 1u);
  if (HIBYTE(word_1ECF4C620))
  {
    v72 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationExceptionFuzz);
    JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::BasicBlock **)(a1 + 27776), *(JSC::B3::Value **)(a1 + 27760), 0, *(_QWORD *)(a1 + 27768), v72, v79);
    Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::Output *)(a1 + 27640), *(JSC::B3::Value **)(a1 + 27880), (const JSC::FTL::AbstractHeap *)(a1 + 6304));
  }
  v25 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 27640), Ptr);
  v97 = 0;
  v98 = 2;
  v26 = *(JSC::DFG **)a1;
  v27 = *(_QWORD *)(a1 + 28200);
  if ((v27 & 1) != 0)
  {
    v89 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
    if ((v27 & 2) != 0
      || (v90 = *(unsigned int *)((v27 & 0xFFFFFFFF8) + 8), (_DWORD)v90 == 0x3FFFFFFF)
      || (_DWORD)v90 == -1)
    {
      v91 = 2;
    }
    else if (v90 >> 28)
    {
      v95 = *(JSC::DFG **)a1;
      v93 = WTF::fastMalloc((WTF *)0x10);
      v26 = v95;
      *(_QWORD *)v93 = v89;
      *(_DWORD *)(v93 + 8) = v90;
      v91 = 1;
      v89 = v93;
    }
    else
    {
      v91 = *(_QWORD *)(v27 & 0xFFFFFFFF8);
      v89 = v90 << 36;
    }
    v27 = v89 | v91;
  }
  v96 = v27;
  v35 = JSC::DFG::Graph::willCatchExceptionInMachineFrame((uint64_t)v26, &v96, &v98, &v97, v21, v22, v23, v24);
  if ((v96 & 1) != 0 && (v96 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v96 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
  if (v35)
  {
    JSC::CodeOrigin::CodeOrigin(&v101, (const JSC::CodeOrigin *)&v98);
    v64 = (int8x8_t)JSC::DFG::NodeOrigin::withForExitAndExitOK(&v99, (uint64_t *)(a1 + 28192), (unint64_t *)&v101, v59, v60, v61, v62, v63).u64[0];
    JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v99, v65, v66, v67, v68, v69, v70, v71);
    if ((v101 & 1) != 0 && (v101 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v101 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  }
  else
  {
    v36 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v37 = v36;
    v38 = *(_QWORD *)(a1 + 27784);
    if (v38)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v38, v36);
    }
    else
    {
      v101 = v36;
      v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v51 = 0u;
      *((_OWORD *)v51 + 1) = 0u;
      v51[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v51;
      v100 = v51;
      v51[2] = v37;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), &v101, (uint64_t *)&v100, v52, v53, v54, v55, v56, (uint64_t)&v99);
      v57 = v100;
      v58 = *(_QWORD **)(a1 + 27832);
      *v100 = a1 + 27824;
      v57[1] = v58;
      *v58 = v57;
      *(_QWORD *)(a1 + 27832) = v57;
    }
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v25, *(_QWORD *)(a1 + 27856), v37, 0.0, 1.0, v39, v40, v41, v42);
    *(_QWORD *)(a1 + 27776) = v37;
  }
  if ((v98 & 1) != 0 && (v98 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v98 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
LABEL_21:
  if ((*((_DWORD *)a2 + 4) & 0x80000000) != 0)
    return JSC::FTL::Output::extract((JSC::FTL::Output *)(a1 + 27640), a2, 0);
  return (uint64_t)a2;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v16 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v16 = off_1E357F5F0;
  *(_DWORD *)(v16 + 8) = -1;
  *(_WORD *)(v16 + 12) = 82;
  *(_DWORD *)(v16 + 16) = a1;
  *(_BYTE *)(v16 + 20) = 4;
  *(_QWORD *)(v16 + 24) = a2;
  *(_QWORD *)(v16 + 32) = 0;
  v17 = JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v16);
  *(_QWORD *)v17 = v17 + 16;
  *(_QWORD *)(v17 + 8) = 3;
  v18 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v17 = v18;
  v19 = *(unsigned int *)(v17 + 12);
  *(_QWORD *)(v18 + 8 * v19) = a3;
  *(_QWORD *)(*(_QWORD *)v17 + 8 * (v19 + 1)) = a4;
  *(_QWORD *)(*(_QWORD *)v17 + 8 * (v19 + 2)) = a5;
  *(_QWORD *)(*(_QWORD *)v17 + 8 * (v19 + 3)) = a6;
  *(_QWORD *)(*(_QWORD *)v17 + 8 * (v19 + 4)) = a7;
  *(_QWORD *)(*(_QWORD *)v17 + 8 * (v19 + 5)) = a8;
  *(_DWORD *)(v17 + 8) = 6;
  *(_DWORD *)(v17 + 12) = v19 + 6;
  *(_QWORD *)v16 = &unk_1E357CF78;
  *(_OWORD *)(v16 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v16 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v16 + 76))
    return v16;
  result = 60;
  __break(0xC471u);
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,WTF::UniquedStringImpl *,int,long long,long long),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v15;
  JSC::B3::Value *v16;
  JSC::DFG::Node *v17;

  v15 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationPutGetterSetter);
  v16 = JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::BasicBlock **)(a1 + 27776), *(JSC::B3::Value **)(a1 + 27760), 2, *(_QWORD *)(a1 + 27768), v15, *a2, *a3, *a4, *a5, *a6, *a7);
}

JSC::B3::Value *JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(JSC::B3::BasicBlock *a1, JSC::B3::Value *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  JSC::B3::Value *v13;

  v13 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(a3, a4, a5, a6, a7, a8, a9, a10, a11);
  JSC::B3::Procedure::addValueImpl(a2, v13);
  JSC::B3::BasicBlock::append(a1, v13);
  return v13;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;

  v17 = WTF::fastMalloc((WTF *)0x68);
  return JSC::B3::CCallValue::CCallValue<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(v17, a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::B3::CCallValue::CCallValue<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = 82;
  *(_DWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 20) = 4;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>((JSC::B3::Value *)a1, 4, a4, a5, a6, a7, a8, a9, a10);
  *(_QWORD *)a1 = &unk_1E357CF78;
  *(_OWORD *)(a1 + 40) = xmmword_1991243D0;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(a1 + 76))
    return a1;
  result = 60;
  __break(0xC471u);
  return result;
}

uint64_t *JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(JSC::B3::Value *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *result;
  uint64_t v17[8];

  v17[7] = *MEMORY[0x1E0C80C00];
  result = (uint64_t *)JSC::B3::Value::childrenAlloc(a1);
  if (a2 == 4)
  {
    v17[0] = a3;
    v17[1] = a4;
    v17[2] = a5;
    v17[3] = a6;
    v17[4] = a7;
    v17[5] = a8;
    v17[6] = a9;
    return WTF::Vector<JSC::B3::Value *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(result, v17, 7uLL);
  }
  else
  {
    *result = a3;
    result[1] = a4;
    result[2] = a5;
    result[3] = a6;
    result[4] = a7;
    result[5] = a8;
    result[6] = a9;
  }
  return result;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  JSC::FTL::Output *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const JSC::CodeOrigin *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unsigned int *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;

  v6 = (JSC::FTL::Output *)(a1 + 3455);
  v7 = (__int128 *)JSC::FTL::Output::patchpoint(a1 + 3455, 2);
  v35 = (unint64_t)a2;
  LOBYTE(v36) = 6;
  JSC::B3::StackmapValue::append(v7, a2, (unint64_t)&v35 + 8);
  v8 = a1[3488];
  v35 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v7, v8, (unint64_t)&v35);
  v9 = a1[3487];
  v35 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v7, v9, (unint64_t)&v35);
  *((_QWORD *)v7 + 8) |= 0x30000uLL;
  *((_QWORD *)v7 + 10) |= 0x30000uLL;
  *((_BYTE *)v7 + 168) = HIBYTE(qword_1ECF4C780);
  v15 = a1[1];
  v16 = (const JSC::CodeOrigin *)a1[3528];
  JSC::CodeOrigin::CodeOrigin(&v39, v16);
  v17 = (*((_QWORD *)v16 + 3) >> 50) & 0x3FLL;
  *(_QWORD *)&v35 = v15;
  JSC::CodeOrigin::CodeOrigin((uint64_t *)&v35 + 1, (const JSC::CodeOrigin *)&v39);
  v18 = v40;
  if (v40)
  {
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
  }
  v36 = v18;
  v37 = v17;
  v38 = a3;
  v27 = JSC::FTL::Output::notZero64(v6, (JSC::B3::Value *)v7);
  if ((v39 & 1) != 0 && (v39 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v39 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
  if (v40)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v40, v28, v29, v30, v31, v32, v33, v34);
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)1,JSC::CacheableIdentifier>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  JSC::FTL::Output *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  WTF *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  JSC::B3::Value *v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  __int128 v76;
  char v77;
  __n128 v78;
  uint64_t v79;

  v6 = (JSC::FTL::Output *)(a1 + 3455);
  v7 = (__int128 *)JSC::FTL::Output::patchpoint(a1 + 3455, 2);
  v76 = (unint64_t)a2;
  v77 = 6;
  JSC::B3::StackmapValue::append(v7, a2, (unint64_t)&v76 + 8);
  v8 = a1[3488];
  v76 = xmmword_1991243E0;
  JSC::B3::StackmapValue::append(v7, v8, (unint64_t)&v76);
  v9 = a1[3487];
  v76 = xmmword_1991243F0;
  JSC::B3::StackmapValue::append(v7, v9, (unint64_t)&v76);
  *((_QWORD *)v7 + 8) |= 0x30000uLL;
  *((_QWORD *)v7 + 10) |= 0x30000uLL;
  *((_BYTE *)v7 + 168) = HIBYTE(qword_1ECF4C780);
  v15 = a1[1];
  v16 = (uint64_t *)a1[3528];
  v17 = *v16;
  if ((*v16 & 1) == 0)
  {
    v18 = v16[3];
LABEL_3:
    v19 = 1;
    v20 = v17;
    goto LABEL_4;
  }
  v53 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
  if ((v17 & 2) != 0
    || ((v54 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v54 != 0x3FFFFFFF)
      ? (v55 = (_DWORD)v54 == -1)
      : (v55 = 1),
        v55))
  {
    v56 = 2;
  }
  else if (v54 >> 28)
  {
    v69 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v69 = v53;
    *(_DWORD *)(v69 + 8) = v54;
    v56 = 1;
    v53 = v69;
  }
  else
  {
    v56 = v53;
    v53 = v54 << 36;
  }
  v17 = v53 | v56;
  v18 = v16[3];
  if ((v17 & 1) == 0)
    goto LABEL_3;
  v65 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
  if ((v17 & 2) != 0
    || ((v66 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v66 != 0x3FFFFFFF)
      ? (v67 = (_DWORD)v66 == -1)
      : (v67 = 1),
        v67))
  {
    v68 = 2;
  }
  else if (v66 >> 28)
  {
    v71 = v18;
    v72 = WTF::fastMalloc((WTF *)0x10);
    v18 = v71;
    *(_QWORD *)v72 = v65;
    *(_DWORD *)(v72 + 8) = v66;
    v68 = 1;
    v65 = v72;
  }
  else
  {
    v68 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    v65 = v66 << 36;
  }
  v19 = 0;
  v20 = v65 | v68;
LABEL_4:
  v21 = v75;
  if (v75)
  {
    do
      v22 = __ldaxr((unsigned int *)v21);
    while (__stlxr(v22 + 1, (unsigned int *)v21));
  }
  v23 = (v18 >> 50) & 0x3F;
  v24 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v24 + 8) = 1;
  *(_QWORD *)v24 = &off_1E35761B8;
  *(_QWORD *)(v24 + 16) = v15;
  v32 = v20;
  if ((v20 & 1) != 0)
  {
    v57 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || ((v58 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v58 != 0x3FFFFFFF)
        ? (v59 = (_DWORD)v58 == -1)
        : (v59 = 1),
          v59))
    {
      v60 = 2;
    }
    else if (v58 >> 28)
    {
      v73 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v74 = v24;
      v70 = WTF::fastMalloc((WTF *)0x10);
      v24 = v74;
      *(_QWORD *)v70 = v73;
      *(_DWORD *)(v70 + 8) = v58;
      v60 = 1;
      v57 = v70;
    }
    else
    {
      v60 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v57 = v58 << 36;
    }
    v32 = v57 | v60;
  }
  *(_QWORD *)(v24 + 24) = v32;
  if (v21)
  {
    do
      v33 = __ldaxr((unsigned int *)v21);
    while (__stlxr(v33 + 1, (unsigned int *)v21));
  }
  *(_QWORD *)(v24 + 32) = v21;
  *(_BYTE *)(v24 + 40) = v23;
  *(_DWORD *)(v24 + 41) = v76;
  *(_DWORD *)(v24 + 44) = *(_DWORD *)((char *)&v76 + 3);
  *(_QWORD *)(v24 + 48) = a3;
  v34 = (unsigned int *)*((_QWORD *)v7 + 7);
  *((_QWORD *)v7 + 7) = v24;
  if (!v34)
    goto LABEL_13;
  v35 = v34 + 2;
  do
  {
    v36 = __ldaxr(v35);
    v37 = v36 - 1;
  }
  while (__stlxr(v37, v35));
  if (!v37)
  {
    atomic_store(1u, v34 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 8))(v34);
    if (!v21)
      goto LABEL_16;
  }
  else
  {
LABEL_13:
    if (!v21)
      goto LABEL_16;
  }
  do
  {
    v38 = __ldaxr((unsigned int *)v21);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, (unsigned int *)v21));
  if (!v39)
  {
    atomic_store(1u, (unsigned int *)v21);
    v61 = *((_QWORD *)v21 + 4);
    if ((v61 & 1) != 0 && (v61 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v61 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
    v62 = *((_QWORD *)v21 + 3);
    if ((v62 & 1) != 0 && (v62 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v62 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
    WTF::fastFree((unint64_t)v21, v25, v26, v27, v28, v29, v30, v31);
  }
LABEL_16:
  if ((v20 & 1) != 0 && (v20 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v20 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
  v40 = JSC::FTL::Output::notZero64(v6, (JSC::B3::Value *)v7);
  v41 = a1[3528];
  v42 = a1[3521];
  v78.n128_u64[0] = (unint64_t)v40;
  v78.n128_u64[1] = v42;
  v79 = v41;
  WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v76, a1 + 3493, &v79, &v78);
  if ((v19 & 1) == 0 && (v17 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v17 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  v50 = v75;
  v75 = 0;
  if (v50)
  {
    do
    {
      v51 = __ldaxr((unsigned int *)v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, (unsigned int *)v50));
    if (!v52)
    {
      atomic_store(1u, (unsigned int *)v50);
      v63 = *((_QWORD *)v50 + 4);
      if ((v63 & 1) != 0 && (v63 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v63 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
      v64 = *((_QWORD *)v50 + 3);
      if ((v64 & 1) != 0 && (v64 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v64 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
      WTF::fastFree((unint64_t)v50, v43, v44, v45, v46, v47, v48, v49);
    }
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,unsigned long),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::DFG::Node *v32;
  WTF *v33;
  char **v34;
  uint64_t v35;
  WTF *v36;
  char *v38;
  WTF *v39;
  uint64_t v40;

  v13 = (int *)(a1 + 28264);
  v14 = *(_DWORD *)(a1 + 28264);
  if ((v14 & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a1 + 27848);
    v39 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v39 = 0x200000002;
    v40 = 0x200000002;
    v23 = (_QWORD *)(v15 + 32);
    v24 = *(unsigned int *)(v15 + 44);
    if ((_DWORD)v24 == *(_DWORD *)(v15 + 40))
    {
      v25 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, v24 + 1, (unint64_t)&v39);
      v26 = *(_QWORD *)(v15 + 32) + 16 * *(unsigned int *)(v15 + 44);
    }
    else
    {
      v26 = *v23 + 16 * v24;
      v25 = (unint64_t)&v39;
    }
    *(_QWORD *)v26 = 0;
    *(_QWORD *)(v26 + 8) = 0;
    v27 = *(_QWORD *)v25;
    *(_QWORD *)v25 = 0;
    *(_QWORD *)v26 = v27;
    LODWORD(v27) = *(_DWORD *)(v25 + 8);
    *(_DWORD *)(v25 + 8) = 0;
    *(_DWORD *)(v26 + 8) = v27;
    LODWORD(v27) = *(_DWORD *)(v25 + 12);
    *(_DWORD *)(v25 + 12) = 0;
    *(_DWORD *)(v26 + 12) = v27;
    ++*(_DWORD *)(v15 + 44);
    v14 = v24 | 0x80000000;
    *v13 = v24 | 0x80000000;
    v28 = v39;
    if (v39)
    {
      v39 = 0;
      LODWORD(v40) = 0;
      WTF::fastFree((unint64_t)v28, v16, v17, v18, v19, v20, v21, v22);
      v14 = *v13;
    }
  }
  v29 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v30 = *a4;
  v31 = *(_QWORD *)(a1 + 27776);
  v33 = (WTF *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::Value **)(a1 + 27760), v14, *(_QWORD *)(a1 + 27768), v29, *a3, v30, *a5);
  v39 = v33;
  v34 = (char **)(v31 + 8);
  v35 = *(unsigned int *)(v31 + 20);
  if ((_DWORD)v35 == *(_DWORD *)(v31 + 16))
  {
    v38 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34, v35 + 1, (unint64_t)&v39);
    v35 = *(unsigned int *)(v31 + 20);
    *(_QWORD *)(*(_QWORD *)(v31 + 8) + 8 * v35) = *(_QWORD *)v38;
    v36 = v39;
  }
  else
  {
    *(_QWORD *)&(*v34)[8 * v35] = v33;
    v36 = v33;
  }
  *(_DWORD *)(v31 + 20) = v35 + 1;
  *((_QWORD *)v36 + 4) = v31;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  unsigned int *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v4 = WTF::fastMalloc((WTF *)0x38);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v7 = result + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *, __n128))(*(_QWORD *)result + 8))(result, v5);
    }
  }
  return result;
}

__n128 WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_1E3576140;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)a2;
  if ((v2 & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v7 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v7 != 0x3FFFFFFF)
        ? (v8 = (_DWORD)v7 == -1)
        : (v8 = 1),
          v8))
    {
      v9 = 2;
    }
    else if (v7 >> 28)
    {
      v12 = a2;
      v13 = a1;
      v10 = v6;
      v11 = v7;
      v6 = WTF::fastMalloc((WTF *)0x10);
      a2 = v12;
      a1 = v13;
      *(_QWORD *)v6 = v10;
      *(_DWORD *)(v6 + 8) = v11;
      v9 = 1;
    }
    else
    {
      v9 = v6;
      v6 = v7 << 36;
    }
    v2 = v6 | v9;
  }
  *(_QWORD *)(a1 + 24) = v2;
  v3 = *(unsigned int **)(a2 + 16);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(JSC::FTL::PatchpointExceptionHandle **a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  unint64_t *result;
  JSC::FTL::ExceptionTarget *v68[5];
  WTF *v69;
  char *v70;
  JSC::FTL::PatchpointExceptionHandle *v71;
  char *v72;
  uint64_t v73[2];
  char v74;
  char v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  WTF *v80;
  _DWORD v81[3];
  char v82;
  char v83;
  char v84;
  _BYTE *v85;
  uint64_t v86;
  _BYTE v87[24];
  unsigned int *v88;
  uint64_t v89;
  int v90;

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [6]>(a2);
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(*((_QWORD *)*a1 + 3) + 64);
  JSC::CodeOrigin::CodeOrigin(&v89, (const JSC::CodeOrigin *)(a1 + 1));
  v90 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v7, &v89);
  if ((v89 & 1) != 0 && (v89 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v89 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(a1[2], (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v68);
  v15 = (unsigned int *)v68[0];
  JSC::FTL::ExceptionTarget::jumps(v68[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v88);
  if (v15)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v15, v16, v17, v18, v19, v20, v21, v22);
  v85 = v87;
  v86 = 2;
  if (*(_DWORD *)(a3 + 20) <= 1u)
    goto LABEL_31;
  v23 = *(_BYTE **)(a3 + 8);
  v24 = v23[16];
  v84 = v24 & 0x7F;
  v83 = *v23 & 0x7F;
  if (!HIBYTE(qword_1ECF4C780))
  {
    v25 = -1;
    goto LABEL_11;
  }
  if (!*(_DWORD *)(a3 + 36))
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x197D92AF8);
  }
  v25 = **(_BYTE **)(a3 + 24);
LABEL_11:
  v82 = v25;
  if (*((_BYTE *)a1 + 24))
  {
    JSC::AssemblyHelpers::branchIfNotCell(a2, v24 & 0x7F, 1, v18, v19, v20, v21, v22, (uint64_t)v81);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v85, v81, v26, v27, v28, v29, v30, v31);
  }
  v68[0] = (JSC::FTL::ExceptionTarget *)a1;
  v68[1] = (JSC::FTL::ExceptionTarget *)a2;
  v68[2] = (JSC::FTL::ExceptionTarget *)(a1 + 1);
  v68[3] = (JSC::FTL::ExceptionTarget *)&v90;
  v68[4] = (JSC::FTL::ExceptionTarget *)a3;
  v69 = (WTF *)(a1 + 4);
  v70 = &v84;
  v71 = (JSC::FTL::PatchpointExceptionHandle *)&v83;
  v72 = &v82;
  v32 = v80;
  JSC::JITDelByIdGenerator::generateFastPath((WTF *)((char *)v80 + 8), (JSC::CCallHelpers *)a2, v33, v34, v35, v36, v37, v38);
  if (!HIBYTE(qword_1ECF4C780))
  {
    v78 = *((_DWORD *)v32 + 12);
    v79 = *(_QWORD *)((char *)v32 + 52);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v85, &v78, v40, v41, v42, v43, v44, v45);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v39, v40, v41, v42, v43, v44, v45, &v77);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)v68, (uint64_t *)&v85);
  if (v32)
  {
    do
      v46 = __ldaxr((unsigned int *)v32);
    while (__stlxr(v46 + 1, (unsigned int *)v32));
  }
  v69 = v32;
  LOBYTE(v70) = v82;
  v71 = *a1;
  JSC::B3::StackmapGenerationParams::StackmapGenerationParams((uint64_t)&v72, (const JSC::B3::StackmapGenerationParams *)a3);
  JSC::CodeOrigin::CodeOrigin(v73, (const JSC::CodeOrigin *)(a1 + 1));
  v47 = v88;
  if (v88)
  {
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 + 1, v47));
  }
  v73[1] = (uint64_t)v47;
  v74 = v83;
  v75 = v84;
  v76 = v77;
  v63 = (unsigned int *)v80;
  v80 = 0;
  if (v63)
  {
    do
    {
      v64 = __ldaxr(v63);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, v63));
    if (!v65)
    {
      atomic_store(1u, v63);
      WTF::fastFree((unint64_t)v63, v56, v57, v58, v59, v60, v61, v62);
    }
  }
  v66 = (unint64_t)v85;
  if (v87 != v85 && v85)
  {
    v85 = 0;
    LODWORD(v86) = 0;
    WTF::fastFree(v66, v56, v57, v58, v59, v60, v61, v62);
  }
  result = WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::~Box((unint64_t *)&v88, v56, v57, v58, v59, v60, v61, v62);
  *(_BYTE *)(a2 + 212) = v6;
  return result;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [6]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "DelBy");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

_DWORD *void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(void)#3}::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  JSC::CodeOrigin *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  _BYTE *v13;
  _DWORD *v14;
  _DWORD *result;
  unsigned __int8 v16;
  _QWORD v17[2];
  char v18;

  JSC::FTL::State::addStructureStubInfo(**(JSC::FTL::State ***)a2);
  v5 = v4;
  v6 = *(JSC::CodeOrigin **)(a2 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 336);
  v18 = 23;
  v8 = *(int **)(a2 + 24);
  v17[0] = JSC::B3::StackmapGenerationParams::unavailableRegisters(*(JSC::B3::StackmapGenerationParams **)(a2 + 32));
  v17[1] = v9;
  v10 = *(uint64_t **)(a2 + 40);
  v11 = *(unsigned __int8 **)(a2 + 48);
  v12 = *(unsigned __int8 **)(a2 + 56);
  v13 = *(_BYTE **)(a2 + 64);
  v16 = *v12;
  v14 = (_DWORD *)WTF::fastMalloc((WTF *)0x40);
  result = WTF::Box<JSC::JITDelByIdGenerator>::Data::Data<JSC::CodeBlock *,JSC::StructureStubInfo *&,JSC::JITType,JSC::CodeOrigin const&,JSC::CallSiteIndex &,JSC::AccessType,JSC::RegisterSetBuilder,JSC::CacheableIdentifier const&,JSC::JSValueRegs &,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID &>(v14, v7, v5, 5u, v6, v8, &v18, (uint64_t)v17, v10, v11, &v16, v13);
  *a1 = result;
  return result;
}

uint64_t JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16[19];
  unsigned int *v17;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v17;
    *(_DWORD *)(a1 + 12) = v10 + 1;
  }
}

_DWORD *WTF::Box<JSC::JITDelByIdGenerator>::Data::Data<JSC::CodeBlock *,JSC::StructureStubInfo *&,JSC::JITType,JSC::CodeOrigin const&,JSC::CallSiteIndex &,JSC::AccessType,JSC::RegisterSetBuilder,JSC::CacheableIdentifier const&,JSC::JSValueRegs &,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID &>(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, JSC::CodeOrigin *a5, int *a6, char *a7, uint64_t a8, uint64_t *a9, unsigned __int8 *a10, unsigned __int8 *a11, _BYTE *a12)
{
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v29;

  *a1 = 1;
  v17 = (uint64_t)(a1 + 2);
  JSC::CodeOrigin::CodeOrigin(&v29, a5);
  LOBYTE(v26) = *a12;
  JSC::JITDelByIdGenerator::JITDelByIdGenerator(v17, a2, a3, 0, a4, &v29, *a6, *a7, a8, *a9, *a10, 0, *a11, v26);
  if ((v29 & 1) != 0 && (v29 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v29 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  return a1;
}

uint64_t WTF::createSharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3576168;
  *a1 = v4;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unsigned int v59;
  int v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  __int16 v66;
  char v67;
  int v68;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v11, v12, v13, v14, v15, v16, v17, &v68);
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), *(char *)(a1 + 48), v18, v19, v20, v21, v22);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) + 48) = operationDeleteByIdStrictOptimize;
    v57 = *(unsigned __int8 **)(a1 + 56);
    v62 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 64));
    v63 = v58;
    JSC::CodeOrigin::CodeOrigin(&v61, (const JSC::CodeOrigin *)(a1 + 128));
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>((uint64_t)&v64, v57, (uint64_t)&v62, a2, v61, *(_QWORD *)(a1 + 136) + 8, *(unsigned __int8 *)(a1 + 48) | 0x3000000000, *(char *)(a1 + 144), *(_BYTE *)(a1 + 145), 0, *(_BYTE *)(a1 + 48));
    v32 = (unsigned int *)v64;
    v33 = v61;
    if ((v61 & 1) == 0)
      goto LABEL_5;
  }
  else
  {
    v23 = *(_QWORD **)(a1 + 56);
    v62 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 64));
    v63 = v24;
    JSC::CodeOrigin::CodeOrigin((uint64_t *)v60, (const JSC::CodeOrigin *)(a1 + 128));
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)&v64, v23, &v62, a2, *(uint64_t *)v60, *(_QWORD *)(a1 + 136) + 8, (uint64_t)operationDeleteByIdStrictOptimize, *(char *)(a1 + 144), *(unsigned __int8 *)(a1 + 145), *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)(a1 + 40) + 16));
    v32 = (unsigned int *)v64;
    v33 = *(_QWORD *)v60;
    if ((v60[0] & 1) == 0)
      goto LABEL_5;
  }
  if ((v33 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v33 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
LABEL_5:
  JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), (uint64_t)v25, v26, v27, v28, v29, v30, v31, (int *)&v62);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v34, v35, v36, v37, v38, v39);
  if (*(_BYTE *)(a2 + 328))
    v45 = 69;
  else
    v45 = 65;
  v64 = v62;
  v65 = v45;
  v66 = 15;
  v67 = -1;
  v59 = *(_DWORD *)(a1 + 148);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v64, &v59, a2, v40, v41, v42, v43, v44);
  v46 = *(_QWORD *)(a1 + 40);
  *(_DWORD *)(v46 + 36) = v68;
  *(_QWORD *)(v46 + 40) = v32;
  do
    v47 = __ldaxr((unsigned int *)v46);
  while (__stlxr(v47 + 1, (unsigned int *)v46));
  v64 = v46;
  v64 = 0;
  do
  {
    v55 = __ldaxr((unsigned int *)v46);
    v56 = v55 - 1;
  }
  while (__stlxr(v56, (unsigned int *)v46));
  if (!v56)
  {
    atomic_store(1u, (unsigned int *)v46);
    WTF::fastFree(v46, v48, v49, v50, v51, v52, v53, v54);
  }
  *(_BYTE *)(a2 + 212) = v10;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>(uint64_t a1, unsigned int **a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = v4;
  v6 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3576190;
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(v4 + 16) = v6;
  v8 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v8 != *(_DWORD *)(a1 + 240))
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
LABEL_14:
    *v9 = v5;
    *(_DWORD *)(a1 + 244) = v8 + 1;
    return;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = *(const void **)(a1 + 232);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a1 + 240) = v12;
    *(_QWORD *)(a1 + 232) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*(const void **)(a1 + 232) == v13)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v8 = *(unsigned int *)(a1 + 244);
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
    goto LABEL_14;
  }
  __break(0xC471u);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)0,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, JSC::LinkBuffer *a2)
{
  return JSC::JITDelByIdGenerator::finalize((JSC::JITDelByIdGenerator *)(*(_QWORD *)(a1 + 16) + 8), a2, a2);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)1,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)1,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)1,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3)
{
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::FTL::ExceptionTarget *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  int *v38;
  int *v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  _DWORD *v70;
  uint64_t *v71;
  int v72;
  char *v73;
  int i;
  unsigned int v75;
  _QWORD *v76;
  int v77;
  WTF *v78;
  WTF *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  uint64_t v84;
  __int128 *v85;
  uint64_t v86;
  __int128 v87;
  WTF *v88;
  void *v89;
  WTF *v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  char v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  WTF *v122;
  WTF *v124;
  unsigned int v125;
  unsigned int v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  const void *v130;
  void *v131;
  _BYTE *v132;
  unsigned int v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  BOOL v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  unint64_t v150;
  uint64_t v152;
  uint64_t v153;
  char v154;
  char v155;
  _QWORD *v156;
  unsigned int v157;
  int v158;
  _QWORD v159[4];
  char v160;
  uint64_t v161;
  uint64_t v162;
  _OWORD *v163;
  int v164;
  int v165;
  void *v166;
  int v167;
  int v168;
  void *v169;
  int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int *v174;
  char v175;
  unsigned __int8 v176;
  int v177;
  int v178;
  uint64_t v179;
  int v180;
  int v181;
  char v182;
  unsigned __int8 v183;
  WTF *v184;
  uint64_t v185;
  _BYTE v186[24];
  WTF *v187;
  uint64_t v188;
  int v189;
  unsigned __int8 v190;
  JSC::FTL::ExceptionTarget *v191[20];

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [6]>(a2);
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v8 = (uint64_t *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v7 & 1) != 0)
  {
    v136 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v137 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v137 != 0x3FFFFFFF)
        ? (v138 = (_DWORD)v137 == -1)
        : (v138 = 1),
          v138))
    {
      v139 = 2;
    }
    else if (v137 >> 28)
    {
      v152 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v152 = v136;
      *(_DWORD *)(v152 + 8) = v137;
      v139 = 1;
      v136 = v152;
    }
    else
    {
      v139 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v136 = v137 << 36;
    }
    v7 = v136 | v139;
  }
  v188 = v7;
  v189 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v9, &v188);
  if ((v188 & 1) != 0 && (v188 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v188 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), a3, (uint64_t *)v191);
  v17 = v191[0];
  JSC::FTL::ExceptionTarget::jumps(v191[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v187);
  v191[0] = 0;
  if (v17)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v17);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v17));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v17);
      v144 = (unsigned int *)*((_QWORD *)v17 + 2);
      *((_QWORD *)v17 + 2) = 0;
      if (v144)
      {
        do
        {
          v145 = __ldaxr(v144);
          v146 = v145 - 1;
        }
        while (__stlxr(v146, v144));
        if (!v146)
        {
          atomic_store(1u, v144);
          WTF::fastFree((unint64_t)v144, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      v147 = (unsigned int *)*((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = 0;
      if (v147)
      {
        do
        {
          v148 = __ldaxr(v147);
          v149 = v148 - 1;
        }
        while (__stlxr(v149, v147));
        if (!v149)
        {
          atomic_store(1u, v147);
          WTF::fastFree((unint64_t)v147, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      WTF::fastFree((unint64_t)v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  v184 = (WTF *)v186;
  v185 = 2;
  if (*((_DWORD *)a3 + 5) <= 1u)
  {
    __break(0xC471u);
    goto LABEL_133;
  }
  v27 = (char *)*((_QWORD *)a3 + 1);
  v28 = v27[16];
  v183 = v28 & 0x7F;
  v29 = *v27;
  if (HIBYTE(qword_1ECF4C780))
  {
    if (!*((_DWORD *)a3 + 9))
    {
      __break(0xC471u);
      JUMPOUT(0x197D93D9CLL);
    }
    v30 = **((_BYTE **)a3 + 3);
  }
  else
  {
    v30 = -1;
  }
  v182 = v30;
  if (*(_BYTE *)(a1 + 40))
  {
    JSC::AssemblyHelpers::branchIfNotCell(a2, v28 & 0x7F, 1, v20, v21, v22, v23, v24, (uint64_t)&v180);
    v36 = v180;
    if (v180 != -1)
    {
      v37 = HIDWORD(v185);
      if (HIDWORD(v185) == (_DWORD)v185)
      {
        v38 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v184, (void *)(HIDWORD(v185) + 1), (unint64_t)&v180, v31, v32, v33, v34, v35);
        v40 = *v38;
        v39 = v38 + 1;
        v36 = v40;
        v37 = HIDWORD(v185);
      }
      else
      {
        v39 = &v181;
      }
      v41 = (char *)v184 + 12 * v37;
      *(_DWORD *)v41 = v36;
      *(_QWORD *)(v41 + 4) = *(_QWORD *)v39;
      ++HIDWORD(v185);
    }
  }
  v42 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v43 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v43 = 2;
  *(_DWORD *)(v43 + 96) = 0;
  *(_OWORD *)(v43 + 12) = 0u;
  *(_OWORD *)(v43 + 28) = 0u;
  *(_DWORD *)(v43 + 44) = 0;
  *(_QWORD *)(v43 + 64) = 0;
  *(_QWORD *)(v43 + 72) = 0;
  *(_QWORD *)(v43 + 56) = 0;
  *(_QWORD *)(v43 + 104) = 0;
  *(_QWORD *)(v43 + 112) = -1;
  *(_WORD *)(v43 + 120) = -1;
  *(_DWORD *)(v43 + 122) = 0x10000;
  *(_BYTE *)(v43 + 126) = 0;
  *(_BYTE *)(v43 + 127) = BYTE12(xmmword_1ECF4C260);
  *(_BYTE *)(v43 + 128) = 0;
  *(_WORD *)(v43 + 129) &= 0xFC00u;
  *(_QWORD *)(v43 + 136) = 0;
  *(_QWORD *)(v43 + 136) = *(_QWORD *)(v42 + 168);
  *(_QWORD *)(v42 + 168) = v43;
  *(_WORD *)(v43 + 129) = *(_WORD *)(v43 + 129) & 0xFDFF | (HIBYTE(qword_1ECF4C780) << 9);
  v44 = *(_QWORD *)(a2 + 336);
  LOBYTE(v156) = 24;
  v45 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v46 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v47 = *((unsigned int *)a3 + 9);
  if ((_DWORD)v47)
  {
    v48 = (_BYTE *)*((_QWORD *)a3 + 3);
    do
    {
      v49 = *v48 & 0x7F;
      if (v49 >= 0x40)
        goto LABEL_132;
      v50 = 1 << v49;
      v46 &= ~v50;
      v45 &= ~v50;
      ++v48;
    }
    while (--v47);
  }
  v51 = *((unsigned int *)a3 + 13);
  if ((_DWORD)v51)
  {
    v52 = v6;
    v132 = (_BYTE *)*((_QWORD *)a3 + 5);
    while (1)
    {
      v133 = (*v132 + 32) & 0x7F;
      if (v133 >= 0x40)
        goto LABEL_132;
      v134 = 1 << v133;
      v46 &= ~v134;
      v45 &= ~v134;
      ++v132;
      if (!--v51)
        goto LABEL_27;
    }
  }
  v52 = v6;
LABEL_27:
  v191[0] = (JSC::FTL::ExceptionTarget *)v46;
  v191[1] = (JSC::FTL::ExceptionTarget *)v45;
  v154 = v29 & 0x7F;
  v155 = v52;
  v190 = v29 & 0x7F;
  v53 = WTF::fastMalloc((WTF *)0x40);
  v54 = WTF::Box<JSC::JITDelByIdGenerator>::Data::Data<JSC::CodeBlock *,JSC::StructureStubInfo *&,JSC::JITType,JSC::CodeOrigin const&,JSC::CallSiteIndex &,JSC::AccessType,JSC::RegisterSetBuilder,JSC::CacheableIdentifier const&,JSC::JSValueRegs &,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID &>((_DWORD *)v53, v44, v43, 5u, (JSC::CodeOrigin *)(a1 + 24), &v189, (char *)&v156, (uint64_t)v191, (uint64_t *)(a1 + 48), &v183, &v190, &v182);
  JSC::JITDelByIdGenerator::generateFastPath((JSC::JITDelByIdGenerator *)(v54 + 2), (JSC::CCallHelpers *)a2, v55, v56, v57, v58, v59, v60);
  if (!HIBYTE(qword_1ECF4C780))
  {
    v68 = *(_DWORD *)(v53 + 48);
    v178 = v68;
    v179 = *(_QWORD *)(v53 + 52);
    if (v68 != -1)
    {
      v69 = HIDWORD(v185);
      if (HIDWORD(v185) == (_DWORD)v185)
      {
        v70 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v184, (void *)(HIDWORD(v185) + 1), (unint64_t)&v178, v63, v64, v65, v66, v67);
        v72 = *v70;
        v71 = (uint64_t *)(v70 + 1);
        v68 = v72;
        v69 = HIDWORD(v185);
      }
      else
      {
        v71 = &v179;
      }
      v73 = (char *)v184 + 12 * v69;
      *(_DWORD *)v73 = v68;
      *(_QWORD *)(v73 + 4) = *v71;
      ++HIDWORD(v185);
    }
  }
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v61, v62, v63, v64, v65, v66, v67);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v75 = HIDWORD(v185);
  v76 = v159;
  v156 = v159;
  v157 = 2;
  v158 = HIDWORD(v185);
  if (HIDWORD(v185) >= 3)
  {
    if (HIDWORD(v185) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197D93DA4);
    }
    v77 = 12 * HIDWORD(v185);
    v76 = (_QWORD *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v185)));
    v157 = (v77 & 0xFFFFFFFC) / 0xC;
    v156 = v76;
    v75 = HIDWORD(v185);
  }
  if (v75)
  {
    v78 = v184;
    v79 = (WTF *)((char *)v184 + 12 * v75);
    do
    {
      *(_DWORD *)v76 = *(_DWORD *)v78;
      *(_QWORD *)((char *)v76 + 4) = *(_QWORD *)((char *)v78 + 4);
      v78 = (WTF *)((char *)v78 + 12);
      v76 = (_QWORD *)((char *)v76 + 12);
    }
    while (v78 != v79);
  }
  do
    v80 = __ldaxr((unsigned int *)v53);
  while (__stlxr(v80 + 1, (unsigned int *)v53));
  v159[3] = v53;
  v160 = v182;
  v81 = *(_QWORD *)a3;
  v161 = *(_QWORD *)(a1 + 16);
  v162 = v81;
  v82 = *((unsigned int *)a3 + 5);
  v163 = 0;
  v164 = 0;
  v165 = v82;
  if ((_DWORD)v82)
  {
    if (v82 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197D93D94);
    }
    v83 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v82));
    v164 = v82;
    v163 = v83;
    v84 = *((unsigned int *)a3 + 5);
    if ((_DWORD)v84)
    {
      v85 = (__int128 *)*((_QWORD *)a3 + 1);
      v86 = 16 * v84;
      do
      {
        v87 = *v85++;
        *v83++ = v87;
        v86 -= 16;
      }
      while (v86);
    }
  }
  v88 = (WTF *)*((unsigned int *)a3 + 9);
  v166 = 0;
  v167 = 0;
  v168 = (int)v88;
  if ((_DWORD)v88)
  {
    v89 = (void *)WTF::fastMalloc(v88);
    v167 = (int)v88;
    v166 = v89;
    memcpy(v89, *((const void **)a3 + 3), *((unsigned int *)a3 + 9));
  }
  v90 = (WTF *)*((unsigned int *)a3 + 13);
  v169 = 0;
  v170 = 0;
  v171 = (int)v90;
  if ((_DWORD)v90)
  {
    v135 = (void *)WTF::fastMalloc(v90);
    v170 = (int)v90;
    v169 = v135;
    memcpy(v135, *((const void **)a3 + 5), *((unsigned int *)a3 + 13));
  }
  v172 = *((_QWORD *)a3 + 7);
  v91 = *v8;
  if ((*v8 & 1) != 0)
  {
    v140 = *(_QWORD *)(v91 & 0xFFFFFFFF8);
    if ((v91 & 2) != 0
      || ((v141 = *(unsigned int *)((v91 & 0xFFFFFFFF8) + 8), (_DWORD)v141 != 0x3FFFFFFF)
        ? (v142 = (_DWORD)v141 == -1)
        : (v142 = 1),
          v142))
    {
      v143 = 2;
    }
    else if (v141 >> 28)
    {
      v153 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v153 = v140;
      *(_DWORD *)(v153 + 8) = v141;
      v143 = 1;
      v140 = v153;
    }
    else
    {
      v143 = *(_QWORD *)(v91 & 0xFFFFFFFF8);
      v140 = v141 << 36;
    }
    v91 = v140 | v143;
  }
  v173 = v91;
  v92 = (unsigned int *)v187;
  if (v187)
  {
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 + 1, v92));
  }
  v174 = v92;
  v175 = v154;
  v176 = v183;
  v177 = i;
  v94 = *((_QWORD *)a3 + 7);
  v95 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)(v95 + 8) = 1;
  *(_QWORD *)v95 = off_1E35761E0;
  v103 = *(unsigned int *)(v94 + 12);
  if ((_DWORD)v103 != *(_DWORD *)(v94 + 8))
  {
    v104 = (uint64_t *)(*(_QWORD *)v94 + 8 * v103);
    v105 = v155;
    goto LABEL_55;
  }
  v127 = v103 + (v103 >> 2);
  if (v127 >= 0x10)
    v128 = v127 + 1;
  else
    v128 = 16;
  if (v128 <= v103 + 1)
    v129 = v103 + 1;
  else
    v129 = v128;
  if (v129 >> 29)
  {
    __break(0xC471u);
LABEL_132:
    __break(1u);
LABEL_133:
    JUMPOUT(0x197D93D8CLL);
  }
  v130 = *(const void **)v94;
  v131 = (void *)WTF::fastMalloc((WTF *)(8 * v129));
  *(_DWORD *)(v94 + 8) = v129;
  *(_QWORD *)v94 = v131;
  memcpy(v131, v130, 8 * v103);
  v105 = v155;
  if (v130)
  {
    if (*(const void **)v94 == v130)
    {
      *(_QWORD *)v94 = 0;
      *(_DWORD *)(v94 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v130, v96, v97, v98, v99, v100, v101, v102);
  }
  v103 = *(unsigned int *)(v94 + 12);
  v104 = (uint64_t *)(*(_QWORD *)v94 + 8 * v103);
LABEL_55:
  *v104 = v95;
  *(_DWORD *)(v94 + 12) = v103 + 1;
  do
  {
    v120 = __ldaxr((unsigned int *)v53);
    v121 = v120 - 1;
  }
  while (__stlxr(v121, (unsigned int *)v53));
  if (!v121)
  {
    atomic_store(1u, (unsigned int *)v53);
    WTF::fastFree(v53, v113, v114, v115, v116, v117, v118, v119);
  }
  v122 = v184;
  if (v186 != (_BYTE *)v184 && v184 != 0)
  {
    v184 = 0;
    LODWORD(v185) = 0;
    WTF::fastFree((unint64_t)v122, v113, v114, v115, v116, v117, v118, v119);
  }
  v124 = v187;
  v187 = 0;
  if (v124)
  {
    do
    {
      v125 = __ldaxr((unsigned int *)v124);
      v126 = v125 - 1;
    }
    while (__stlxr(v126, (unsigned int *)v124));
    if (!v126)
    {
      atomic_store(1u, (unsigned int *)v124);
      v150 = *((_QWORD *)v124 + 1);
      if ((WTF *)((char *)v124 + 24) != (WTF *)v150 && v150 != 0)
      {
        *((_QWORD *)v124 + 1) = 0;
        *((_DWORD *)v124 + 4) = 0;
        WTF::fastFree(v150, v113, v114, v115, v116, v117, v118, v119);
      }
      WTF::fastFree((unint64_t)v124, v113, v114, v115, v116, v117, v118, v119);
    }
  }
  *(_BYTE *)(a2 + 212) = v105;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)1,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)1,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)1,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)1,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)1,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)1,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int i;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int j;
  unsigned int v47;
  char v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  const void *v66;
  void *v67;
  unsigned int v68;
  unsigned int v69;
  _BYTE *v70;
  unsigned int v71;
  uint64_t v72;
  _BYTE *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  __int16 v91;
  char v92;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v11 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = 12 * v11;
    while (v13 < *(unsigned int *)(a1 + 28))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 16) + v12), a2, a3, a4, a5, a6, a7, a8);
      ++v13;
      v12 += 12;
      if (v14 == v12)
        goto LABEL_7;
    }
    __break(0xC471u);
LABEL_99:
    JUMPOUT(0x197D943E0);
  }
LABEL_7:
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16), *(char *)(a1 + 64), a4, a5, a6, a7, a8);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 48) = operationDeleteByIdSloppyOptimize;
    v16 = *(unsigned __int8 **)(a1 + 72);
    v17 = *(_QWORD *)(a1 + 80);
    v19 = *(_QWORD *)(v17 + 96);
    v18 = *(_QWORD *)(v17 + 104);
    v20 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 48) + 216) & 0xFF003FF80000 | v19;
    v21 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v21)
    {
      v22 = *(_BYTE **)(a1 + 104);
      do
      {
        v23 = *v22 & 0x7F;
        if (v23 >= 0x40)
          goto LABEL_98;
        v24 = 1 << v23;
        v20 &= ~v24;
        v18 &= ~v24;
        ++v22;
      }
      while (--v21);
    }
    v25 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v25)
    {
      v70 = *(_BYTE **)(a1 + 120);
      do
      {
        v71 = (*v70 + 32) & 0x7F;
        if (v71 >= 0x40)
          goto LABEL_98;
        v72 = 1 << v71;
        v20 &= ~v72;
        v18 &= ~v72;
        ++v70;
      }
      while (--v25);
    }
    v87 = v20;
    v88 = v18;
    v26 = *(_QWORD *)(a1 + 144);
    if ((v26 & 1) != 0)
    {
      v76 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      if ((v26 & 2) != 0
        || ((v77 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v77 != 0x3FFFFFFF)
          ? (v78 = (_DWORD)v77 == -1)
          : (v78 = 1),
            v78))
      {
        v79 = 2;
      }
      else if (v77 >> 28)
      {
        v84 = v76;
        v85 = v16;
        v76 = WTF::fastMalloc((WTF *)0x10);
        v16 = v85;
        *(_QWORD *)v76 = v84;
        *(_DWORD *)(v76 + 8) = v77;
        v79 = 1;
      }
      else
      {
        v79 = v76;
        v76 = v77 << 36;
      }
      v26 = v76 | v79;
      v27 = ((v76 | v79) & 1) == 0;
    }
    else
    {
      v27 = 1;
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>((uint64_t)&v89, v16, (uint64_t)&v87, a2, v26, *(_QWORD *)(a1 + 152) + 8, *(unsigned __int8 *)(a1 + 64) | 0x3000000000, *(char *)(a1 + 160), *(_BYTE *)(a1 + 161), 0, *(_BYTE *)(a1 + 64));
  }
  else
  {
    v35 = *(_QWORD **)(a1 + 72);
    v36 = *(_QWORD *)(a1 + 80);
    v38 = *(_QWORD *)(v36 + 96);
    v37 = *(_QWORD *)(v36 + 104);
    v39 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 48) + 216) & 0xFF003FF80000 | v38;
    v40 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v40)
    {
      v41 = *(_BYTE **)(a1 + 104);
      do
      {
        v42 = *v41 & 0x7F;
        if (v42 >= 0x40)
          goto LABEL_98;
        v43 = 1 << v42;
        v39 &= ~v43;
        v37 &= ~v43;
        ++v41;
      }
      while (--v40);
    }
    v44 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v44)
    {
      v73 = *(_BYTE **)(a1 + 120);
      do
      {
        v74 = (*v73 + 32) & 0x7F;
        if (v74 >= 0x40)
          goto LABEL_98;
        v75 = 1 << v74;
        v39 &= ~v75;
        v37 &= ~v75;
        ++v73;
      }
      while (--v44);
    }
    v87 = v39;
    v88 = v37;
    v26 = *(_QWORD *)(a1 + 144);
    if ((v26 & 1) != 0)
    {
      v80 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      if ((v26 & 2) != 0
        || ((v81 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v81 != 0x3FFFFFFF)
          ? (v82 = (_DWORD)v81 == -1)
          : (v82 = 1),
            v82))
      {
        v83 = 2;
      }
      else
      {
        v83 = v80;
        v86 = v35;
        if (v81 >> 28)
        {
          v80 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v80 = v83;
          *(_DWORD *)(v80 + 8) = v81;
          v83 = 1;
        }
        else
        {
          v80 = v81 << 36;
        }
        v35 = v86;
      }
      v26 = v80 | v83;
      v27 = ((v80 | v83) & 1) == 0;
    }
    else
    {
      v27 = 1;
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)&v89, v35, &v87, a2, v26, *(_QWORD *)(a1 + 152) + 8, (uint64_t)operationDeleteByIdSloppyOptimize, *(char *)(a1 + 160), *(unsigned __int8 *)(a1 + 161), *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)(a1 + 56) + 16));
  }
  v45 = v89;
  if (!v27 && (v26 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v26 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
  for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v28, v29, v30, v31, v32, v33, v34);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v47 = j;
  if (j + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v28, v29, v30, v31, v32, v33, v34);
    v47 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v47) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v48 = 69;
  else
    v48 = 65;
  v89 = j;
  v90 = v48;
  v91 = 15;
  v92 = -1;
  LODWORD(v87) = *(_DWORD *)(a1 + 164);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v89, (unsigned int *)&v87, a2, v30, v31, v32, v33, v34);
  v49 = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v49 + 36) = i;
  *(_QWORD *)(v49 + 40) = v45;
  do
    v50 = __ldaxr((unsigned int *)v49);
  while (__stlxr(v50 + 1, (unsigned int *)v49));
  v51 = WTF::fastMalloc((WTF *)0x18);
  v59 = v51;
  *(_DWORD *)(v51 + 8) = 1;
  *(_QWORD *)v51 = &off_1E3576208;
  do
    v60 = __ldaxr((unsigned int *)v49);
  while (__stlxr(v60 + 1, (unsigned int *)v49));
  *(_QWORD *)(v51 + 16) = v49;
  v61 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v61 != *(_DWORD *)(a2 + 240))
  {
    v62 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v61);
    goto LABEL_47;
  }
  v63 = v61 + (v61 >> 2);
  if (v63 >= 0x10)
    v64 = v63 + 1;
  else
    v64 = 16;
  if (v64 <= v61 + 1)
    v65 = v61 + 1;
  else
    v65 = v64;
  if (v65 >> 29)
  {
    __break(0xC471u);
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  v66 = *(const void **)(a2 + 232);
  v67 = (void *)WTF::fastMalloc((WTF *)(8 * v65));
  *(_DWORD *)(a2 + 240) = v65;
  *(_QWORD *)(a2 + 232) = v67;
  memcpy(v67, v66, 8 * v61);
  if (v66)
  {
    if (*(const void **)(a2 + 232) == v66)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v66, v52, v53, v54, v55, v56, v57, v58);
  }
  v61 = *(unsigned int *)(a2 + 244);
  v62 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v61);
LABEL_47:
  *v62 = v59;
  *(_DWORD *)(a2 + 244) = v61 + 1;
  do
  {
    v68 = __ldaxr((unsigned int *)v49);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, (unsigned int *)v49));
  if (!v69)
  {
    atomic_store(1u, (unsigned int *)v49);
    WTF::fastFree(v49, v52, v53, v54, v55, v56, v57, v58);
  }
  *(_BYTE *)(a2 + 212) = v10;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)1,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)1,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)1,JSC::CacheableIdentifier>(JSC::B3::Value *,JSC::CacheableIdentifier)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, JSC::LinkBuffer *a2)
{
  return JSC::JITDelByIdGenerator::finalize((JSC::JITDelByIdGenerator *)(*(_QWORD *)(a1 + 16) + 8), a2, a2);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::DFG::Node *v18;
  WTF *v19;
  char **v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  char *v33;
  WTF *v34;
  uint64_t v35;

  v13 = (int *)(a1 + 28264);
  v14 = *(_DWORD *)(a1 + 28264);
  if ((v14 & 0x80000000) == 0)
  {
    v24 = *(_QWORD *)(a1 + 27848);
    v34 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v34 = 0x200000002;
    v35 = 0x200000002;
    v14 = JSC::B3::Procedure::addTuple(v24, (unint64_t)&v34);
    *v13 = v14;
    v32 = v34;
    if (v34)
    {
      v34 = 0;
      LODWORD(v35) = 0;
      WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
      v14 = *v13;
    }
  }
  v15 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v16 = *a4;
  v17 = *(_QWORD *)(a1 + 27776);
  v19 = (WTF *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::Value **)(a1 + 27760), v14, *(_QWORD *)(a1 + 27768), v15, *a3, v16, *a5);
  v34 = v19;
  v20 = (char **)(v17 + 8);
  v21 = *(unsigned int *)(v17 + 20);
  if ((_DWORD)v21 == *(_DWORD *)(v17 + 16))
  {
    v33 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v20, v21 + 1, (unint64_t)&v34);
    v21 = *(unsigned int *)(v17 + 20);
    *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v21) = *(_QWORD *)v33;
    v22 = v34;
  }
  else
  {
    *(_QWORD *)&(*v20)[8 * v21] = v19;
    v22 = v19;
  }
  *(_DWORD *)(v17 + 20) = v21 + 1;
  *((_QWORD *)v22 + 4) = v17;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)2,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)2,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)2,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  JSC::FTL::ExceptionTarget *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  char v28;
  char v29;
  char v30;
  int v31;
  unsigned int v32;
  _DWORD *v33;
  uint64_t *v34;
  int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  _DWORD *v44;
  _QWORD *v45;
  int v46;
  char *v47;
  int v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  JSC::JITDelByValGenerator *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  _DWORD *v81;
  uint64_t *v82;
  int v83;
  char *v84;
  int i;
  unsigned int v86;
  _QWORD *v87;
  int v88;
  WTF *v89;
  WTF *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  uint64_t v95;
  __int128 *v96;
  uint64_t v97;
  __int128 v98;
  WTF *v99;
  void *v100;
  WTF *v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  char v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  WTF *v133;
  unint64_t v135;
  unsigned int v136;
  unsigned int v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  const void *v141;
  void *v142;
  _BYTE *v143;
  unsigned int v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  BOOL v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int v164;
  unint64_t v165;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  char v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  int v177;
  _QWORD v178[4];
  char v179;
  uint64_t v180;
  uint64_t v181;
  _OWORD *v182;
  int v183;
  int v184;
  void *v185;
  int v186;
  int v187;
  void *v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int *v193;
  char v194;
  char v195;
  char v196;
  int v197;
  int v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  WTF *v202;
  uint64_t v203;
  _BYTE v204[24];
  unsigned int *v205;
  uint64_t v206;
  JSC::FTL::ExceptionTarget *v207[20];

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [6]>(a2);
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v7 & 1) != 0)
  {
    v147 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v148 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v148 != 0x3FFFFFFF)
        ? (v149 = (_DWORD)v148 == -1)
        : (v149 = 1),
          v149))
    {
      v150 = 2;
    }
    else if (v148 >> 28)
    {
      v167 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v167 = v147;
      *(_DWORD *)(v167 + 8) = v148;
      v150 = 1;
      v147 = v167;
    }
    else
    {
      v150 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v147 = v148 << 36;
    }
    v7 = v147 | v150;
  }
  v206 = v7;
  v16 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v8, &v206);
  if ((v206 & 1) != 0 && (v206 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v206 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), a3, (uint64_t *)v207);
  v17 = v207[0];
  JSC::FTL::ExceptionTarget::jumps(v207[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v205);
  v207[0] = 0;
  if (v17)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v17);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v17));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v17);
      v159 = (unsigned int *)*((_QWORD *)v17 + 2);
      *((_QWORD *)v17 + 2) = 0;
      if (v159)
      {
        do
        {
          v160 = __ldaxr(v159);
          v161 = v160 - 1;
        }
        while (__stlxr(v161, v159));
        if (!v161)
        {
          atomic_store(1u, v159);
          WTF::fastFree((unint64_t)v159, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      v162 = (unsigned int *)*((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = 0;
      if (v162)
      {
        do
        {
          v163 = __ldaxr(v162);
          v164 = v163 - 1;
        }
        while (__stlxr(v164, v162));
        if (!v164)
        {
          atomic_store(1u, v162);
          WTF::fastFree((unint64_t)v162, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      WTF::fastFree((unint64_t)v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  v202 = (WTF *)v204;
  v203 = 2;
  if (*((_DWORD *)a3 + 5) <= 1u)
  {
    __break(0xC471u);
    goto LABEL_157;
  }
  v27 = (char *)*((_QWORD *)a3 + 1);
  v28 = v27[16];
  v29 = *v27;
  if (HIBYTE(qword_1ECF4C780))
  {
    if (!*((_DWORD *)a3 + 9))
    {
      __break(0xC471u);
      JUMPOUT(0x197D95160);
    }
    v30 = **((_BYTE **)a3 + 3);
  }
  else
  {
    v30 = -1;
  }
  v173 = v30;
  v174 = v28 & 0x7F;
  if (*(_BYTE *)(a1 + 40))
  {
    JSC::AssemblyHelpers::branchIfNotCell(a2, v174, 1, v20, v21, v22, v23, v24, (uint64_t)&v200);
    v31 = v200;
    if (v200 != -1)
    {
      v32 = HIDWORD(v203);
      if (HIDWORD(v203) == (_DWORD)v203)
      {
        v33 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v202, (void *)(HIDWORD(v203) + 1), (unint64_t)&v200, v20, v21, v22, v23, v24);
        v35 = *v33;
        v34 = (uint64_t *)(v33 + 1);
        v31 = v35;
        v32 = HIDWORD(v203);
      }
      else
      {
        v34 = &v201;
      }
      v36 = (char *)v202 + 12 * v32;
      *(_DWORD *)v36 = v31;
      *(_QWORD *)(v36 + 4) = *v34;
      ++HIDWORD(v203);
    }
  }
  if (!*(_BYTE *)(a1 + 41))
  {
    if (*((_DWORD *)a3 + 5) <= 2u)
    {
      __break(0xC471u);
      JUMPOUT(0x197D95170);
    }
    JSC::AssemblyHelpers::branchIfNotCell(a2, *(_BYTE *)(*((_QWORD *)a3 + 1) + 32) & 0x7F, 1, v20, v21, v22, v23, v24, (uint64_t)v207);
    v42 = (int)v207[0];
    if (LODWORD(v207[0]) != -1)
    {
      v43 = HIDWORD(v203);
      if (HIDWORD(v203) == (_DWORD)v203)
      {
        v44 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v202, (void *)(HIDWORD(v203) + 1), (unint64_t)v207, v37, v38, v39, v40, v41);
        v46 = *v44;
        v45 = v44 + 1;
        v42 = v46;
        v43 = HIDWORD(v203);
      }
      else
      {
        v45 = (JSC::FTL::ExceptionTarget **)((char *)v207 + 4);
      }
      v47 = (char *)v202 + 12 * v43;
      *(_DWORD *)v47 = v42;
      *(_QWORD *)(v47 + 4) = *v45;
      ++HIDWORD(v203);
    }
  }
  if (*((_DWORD *)a3 + 5) <= 2u)
  {
    __break(0xC471u);
    JUMPOUT(0x197D95150);
  }
  v48 = v16;
  v49 = *(_BYTE *)(*((_QWORD *)a3 + 1) + 32);
  v50 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v51 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v51 = 2;
  *(_DWORD *)(v51 + 96) = 0;
  *(_OWORD *)(v51 + 12) = 0u;
  *(_OWORD *)(v51 + 28) = 0u;
  *(_DWORD *)(v51 + 44) = 0;
  *(_QWORD *)(v51 + 64) = 0;
  *(_QWORD *)(v51 + 72) = 0;
  *(_QWORD *)(v51 + 56) = 0;
  *(_QWORD *)(v51 + 104) = 0;
  *(_QWORD *)(v51 + 112) = -1;
  *(_WORD *)(v51 + 120) = -1;
  *(_DWORD *)(v51 + 122) = 0x10000;
  *(_BYTE *)(v51 + 126) = 0;
  *(_BYTE *)(v51 + 127) = BYTE12(xmmword_1ECF4C260);
  *(_BYTE *)(v51 + 128) = 0;
  *(_WORD *)(v51 + 129) &= 0xFC00u;
  *(_QWORD *)(v51 + 136) = 0;
  *(_QWORD *)(v51 + 136) = *(_QWORD *)(v50 + 168);
  *(_QWORD *)(v50 + 168) = v51;
  *(_WORD *)(v51 + 129) = *(_WORD *)(v51 + 129) & 0xFDFF | (HIBYTE(qword_1ECF4C780) << 9);
  v52 = *(_QWORD *)(a2 + 336);
  v53 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v54 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v55 = *((unsigned int *)a3 + 9);
  if ((_DWORD)v55)
  {
    v56 = (_BYTE *)*((_QWORD *)a3 + 3);
    do
    {
      v57 = *v56 & 0x7F;
      if (v57 >= 0x40)
        goto LABEL_156;
      v58 = 1 << v57;
      v54 &= ~v58;
      v53 &= ~v58;
      ++v56;
    }
    while (--v55);
  }
  v59 = *((unsigned int *)a3 + 13);
  if ((_DWORD)v59)
  {
    v143 = (_BYTE *)*((_QWORD *)a3 + 5);
    do
    {
      v144 = (*v143 + 32) & 0x7F;
      if (v144 >= 0x40)
        goto LABEL_156;
      v145 = 1 << v144;
      v54 &= ~v145;
      v53 &= ~v145;
      ++v143;
    }
    while (--v59);
  }
  v172 = v6;
  v60 = v29 & 0x7F;
  v61 = v49 & 0x7F;
  v207[0] = (JSC::FTL::ExceptionTarget *)v54;
  v207[1] = (JSC::FTL::ExceptionTarget *)v53;
  v62 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v62 = 1;
  v63 = (JSC::JITDelByValGenerator *)(v62 + 8);
  v64 = *(_QWORD *)(a1 + 24);
  if ((v64 & 1) != 0)
  {
    v151 = *(_QWORD *)(v64 & 0xFFFFFFFF8);
    if ((v64 & 2) != 0
      || ((v152 = *(unsigned int *)((v64 & 0xFFFFFFFF8) + 8), (_DWORD)v152 != 0x3FFFFFFF)
        ? (v153 = (_DWORD)v152 == -1)
        : (v153 = 1),
          v153))
    {
      v154 = 2;
    }
    else if (v152 >> 28)
    {
      v170 = *(_DWORD *)((v64 & 0xFFFFFFFF8) + 8);
      v171 = *(_QWORD *)(v64 & 0xFFFFFFFF8);
      v151 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v151 = v171;
      *(_DWORD *)(v151 + 8) = v170;
      v154 = 1;
    }
    else
    {
      v154 = *(_QWORD *)(v64 & 0xFFFFFFFF8);
      v151 = v152 << 36;
    }
    v64 = v151 | v154;
  }
  v175 = v64;
  LOBYTE(v169) = v173;
  JSC::JITDelByValGenerator::JITDelByValGenerator((uint64_t)v63, v52, v51, 0, 0, &v175, v48, 25, (uint64_t)v207, v174, 0, v61, SHIDWORD(v61), v60, v169);
  if ((v175 & 1) != 0 && (v175 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v175 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
  JSC::JITDelByValGenerator::generateFastPath(v63, (JSC::CCallHelpers *)a2, v66, v67, v68, v69, v70, v71);
  if (!HIBYTE(qword_1ECF4C780))
  {
    v79 = *(_DWORD *)(v62 + 48);
    v198 = v79;
    v199 = *(_QWORD *)(v62 + 52);
    if (v79 != -1)
    {
      v80 = HIDWORD(v203);
      if (HIDWORD(v203) == (_DWORD)v203)
      {
        v81 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v202, (void *)(HIDWORD(v203) + 1), (unint64_t)&v198, v74, v75, v76, v77, v78);
        v83 = *v81;
        v82 = (uint64_t *)(v81 + 1);
        v79 = v83;
        v80 = HIDWORD(v203);
      }
      else
      {
        v82 = &v199;
      }
      v84 = (char *)v202 + 12 * v80;
      *(_DWORD *)v84 = v79;
      *(_QWORD *)(v84 + 4) = *v82;
      ++HIDWORD(v203);
    }
  }
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v72, v73, v74, v75, v76, v77, v78);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v86 = HIDWORD(v203);
  v87 = v178;
  v175 = (uint64_t)v178;
  v176 = 2;
  v177 = HIDWORD(v203);
  if (HIDWORD(v203) >= 3)
  {
    if (HIDWORD(v203) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197D95168);
    }
    v88 = 12 * HIDWORD(v203);
    v87 = (_QWORD *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v203)));
    v176 = (v88 & 0xFFFFFFFC) / 0xC;
    v175 = (uint64_t)v87;
    v86 = HIDWORD(v203);
  }
  if (v86)
  {
    v89 = v202;
    v90 = (WTF *)((char *)v202 + 12 * v86);
    do
    {
      *(_DWORD *)v87 = *(_DWORD *)v89;
      *(_QWORD *)((char *)v87 + 4) = *(_QWORD *)((char *)v89 + 4);
      v89 = (WTF *)((char *)v89 + 12);
      v87 = (_QWORD *)((char *)v87 + 12);
    }
    while (v89 != v90);
  }
  do
    v91 = __ldaxr((unsigned int *)v62);
  while (__stlxr(v91 + 1, (unsigned int *)v62));
  v178[3] = v62;
  v179 = v173;
  v92 = *(_QWORD *)a3;
  v180 = *(_QWORD *)(a1 + 16);
  v181 = v92;
  v93 = *((unsigned int *)a3 + 5);
  v182 = 0;
  v183 = 0;
  v184 = v93;
  if ((_DWORD)v93)
  {
    if (v93 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197D95158);
    }
    v94 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v93));
    v183 = v93;
    v182 = v94;
    v95 = *((unsigned int *)a3 + 5);
    if ((_DWORD)v95)
    {
      v96 = (__int128 *)*((_QWORD *)a3 + 1);
      v97 = 16 * v95;
      do
      {
        v98 = *v96++;
        *v94++ = v98;
        v97 -= 16;
      }
      while (v97);
    }
  }
  v99 = (WTF *)*((unsigned int *)a3 + 9);
  v185 = 0;
  v186 = 0;
  v187 = (int)v99;
  if ((_DWORD)v99)
  {
    v100 = (void *)WTF::fastMalloc(v99);
    v186 = (int)v99;
    v185 = v100;
    memcpy(v100, *((const void **)a3 + 3), *((unsigned int *)a3 + 9));
  }
  v101 = (WTF *)*((unsigned int *)a3 + 13);
  v188 = 0;
  v189 = 0;
  v190 = (int)v101;
  if ((_DWORD)v101)
  {
    v146 = (void *)WTF::fastMalloc(v101);
    v189 = (int)v101;
    v188 = v146;
    memcpy(v146, *((const void **)a3 + 5), *((unsigned int *)a3 + 13));
  }
  v191 = *((_QWORD *)a3 + 7);
  v102 = *(_QWORD *)(a1 + 24);
  if ((v102 & 1) != 0)
  {
    v155 = *(_QWORD *)(v102 & 0xFFFFFFFF8);
    if ((v102 & 2) != 0
      || ((v156 = *(unsigned int *)((v102 & 0xFFFFFFFF8) + 8), (_DWORD)v156 != 0x3FFFFFFF)
        ? (v157 = (_DWORD)v156 == -1)
        : (v157 = 1),
          v157))
    {
      v158 = 2;
    }
    else if (v156 >> 28)
    {
      v168 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v168 = v155;
      *(_DWORD *)(v168 + 8) = v156;
      v158 = 1;
      v155 = v168;
    }
    else
    {
      v158 = *(_QWORD *)(v102 & 0xFFFFFFFF8);
      v155 = v156 << 36;
    }
    v102 = v155 | v158;
  }
  v192 = v102;
  v103 = v205;
  if (v205)
  {
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 + 1, v103));
  }
  v193 = v103;
  v194 = v60;
  v195 = v174;
  v196 = v61;
  v197 = i;
  v105 = *((_QWORD *)a3 + 7);
  v106 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)(v106 + 8) = 1;
  *(_QWORD *)v106 = off_1E3576258;
  v114 = *(unsigned int *)(v105 + 12);
  if ((_DWORD)v114 != *(_DWORD *)(v105 + 8))
  {
    v115 = (uint64_t *)(*(_QWORD *)v105 + 8 * v114);
    v116 = v172;
    goto LABEL_64;
  }
  v138 = v114 + (v114 >> 2);
  if (v138 >= 0x10)
    v139 = v138 + 1;
  else
    v139 = 16;
  if (v139 <= v114 + 1)
    v140 = v114 + 1;
  else
    v140 = v139;
  if (v140 >> 29)
  {
    __break(0xC471u);
LABEL_156:
    __break(1u);
LABEL_157:
    JUMPOUT(0x197D95148);
  }
  v141 = *(const void **)v105;
  v142 = (void *)WTF::fastMalloc((WTF *)(8 * v140));
  *(_DWORD *)(v105 + 8) = v140;
  *(_QWORD *)v105 = v142;
  memcpy(v142, v141, 8 * v114);
  v116 = v172;
  if (v141)
  {
    if (*(const void **)v105 == v141)
    {
      *(_QWORD *)v105 = 0;
      *(_DWORD *)(v105 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v141, v107, v108, v109, v110, v111, v112, v113);
  }
  v114 = *(unsigned int *)(v105 + 12);
  v115 = (uint64_t *)(*(_QWORD *)v105 + 8 * v114);
LABEL_64:
  *v115 = v106;
  *(_DWORD *)(v105 + 12) = v114 + 1;
  do
  {
    v131 = __ldaxr((unsigned int *)v62);
    v132 = v131 - 1;
  }
  while (__stlxr(v132, (unsigned int *)v62));
  if (!v132)
  {
    atomic_store(1u, (unsigned int *)v62);
    WTF::fastFree(v62, v124, v125, v126, v127, v128, v129, v130);
  }
  v133 = v202;
  if (v204 != (_BYTE *)v202 && v202 != 0)
  {
    v202 = 0;
    LODWORD(v203) = 0;
    WTF::fastFree((unint64_t)v133, v124, v125, v126, v127, v128, v129, v130);
  }
  v135 = (unint64_t)v205;
  v205 = 0;
  if (v135)
  {
    do
    {
      v136 = __ldaxr((unsigned int *)v135);
      v137 = v136 - 1;
    }
    while (__stlxr(v137, (unsigned int *)v135));
    if (!v137)
    {
      atomic_store(1u, (unsigned int *)v135);
      v165 = *(_QWORD *)(v135 + 8);
      if (v135 + 24 != v165 && v165 != 0)
      {
        *(_QWORD *)(v135 + 8) = 0;
        *(_DWORD *)(v135 + 16) = 0;
        WTF::fastFree(v165, v124, v125, v126, v127, v128, v129, v130);
      }
      WTF::fastFree(v135, v124, v125, v126, v127, v128, v129, v130);
    }
  }
  *(_BYTE *)(a2 + 212) = v116;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)2,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)2,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)2,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)2,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)2,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)2,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int i;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int j;
  unsigned int v47;
  char v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  const void *v66;
  void *v67;
  unsigned int v68;
  unsigned int v69;
  _BYTE *v70;
  unsigned int v71;
  uint64_t v72;
  _BYTE *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  __int16 v91;
  char v92;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v11 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = 12 * v11;
    while (v13 < *(unsigned int *)(a1 + 28))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 16) + v12), a2, a3, a4, a5, a6, a7, a8);
      ++v13;
      v12 += 12;
      if (v14 == v12)
        goto LABEL_7;
    }
    __break(0xC471u);
LABEL_99:
    JUMPOUT(0x197D957B8);
  }
LABEL_7:
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16), *(char *)(a1 + 64), a4, a5, a6, a7, a8);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 48) = operationDeleteByValStrictOptimize;
    v16 = *(unsigned __int8 **)(a1 + 72);
    v17 = *(_QWORD *)(a1 + 80);
    v19 = *(_QWORD *)(v17 + 96);
    v18 = *(_QWORD *)(v17 + 104);
    v20 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 48) + 216) & 0xFF003FF80000 | v19;
    v21 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v21)
    {
      v22 = *(_BYTE **)(a1 + 104);
      do
      {
        v23 = *v22 & 0x7F;
        if (v23 >= 0x40)
          goto LABEL_98;
        v24 = 1 << v23;
        v20 &= ~v24;
        v18 &= ~v24;
        ++v22;
      }
      while (--v21);
    }
    v25 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v25)
    {
      v70 = *(_BYTE **)(a1 + 120);
      do
      {
        v71 = (*v70 + 32) & 0x7F;
        if (v71 >= 0x40)
          goto LABEL_98;
        v72 = 1 << v71;
        v20 &= ~v72;
        v18 &= ~v72;
        ++v70;
      }
      while (--v25);
    }
    v87 = v20;
    v88 = v18;
    v26 = *(_QWORD *)(a1 + 144);
    if ((v26 & 1) != 0)
    {
      v76 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      if ((v26 & 2) != 0
        || ((v77 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v77 != 0x3FFFFFFF)
          ? (v78 = (_DWORD)v77 == -1)
          : (v78 = 1),
            v78))
      {
        v79 = 2;
      }
      else if (v77 >> 28)
      {
        v84 = v76;
        v85 = v16;
        v76 = WTF::fastMalloc((WTF *)0x10);
        v16 = v85;
        *(_QWORD *)v76 = v84;
        *(_DWORD *)(v76 + 8) = v77;
        v79 = 1;
      }
      else
      {
        v79 = v76;
        v76 = v77 << 36;
      }
      v26 = v76 | v79;
      v27 = ((v76 | v79) & 1) == 0;
    }
    else
    {
      v27 = 1;
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>((uint64_t)&v89, v16, (uint64_t)&v87, a2, v26, *(_QWORD *)(a1 + 152) + 8, *(unsigned __int8 *)(a1 + 64) | 0x3000000000, *(char *)(a1 + 160), *(_BYTE *)(a1 + 161), 0, *(_BYTE *)(a1 + 162), 0, *(_BYTE *)(a1 + 64));
  }
  else
  {
    v35 = *(unsigned __int8 **)(a1 + 72);
    v36 = *(_QWORD *)(a1 + 80);
    v38 = *(_QWORD *)(v36 + 96);
    v37 = *(_QWORD *)(v36 + 104);
    v39 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 48) + 216) & 0xFF003FF80000 | v38;
    v40 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v40)
    {
      v41 = *(_BYTE **)(a1 + 104);
      do
      {
        v42 = *v41 & 0x7F;
        if (v42 >= 0x40)
          goto LABEL_98;
        v43 = 1 << v42;
        v39 &= ~v43;
        v37 &= ~v43;
        ++v41;
      }
      while (--v40);
    }
    v44 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v44)
    {
      v73 = *(_BYTE **)(a1 + 120);
      do
      {
        v74 = (*v73 + 32) & 0x7F;
        if (v74 >= 0x40)
          goto LABEL_98;
        v75 = 1 << v74;
        v39 &= ~v75;
        v37 &= ~v75;
        ++v73;
      }
      while (--v44);
    }
    v87 = v39;
    v88 = v37;
    v26 = *(_QWORD *)(a1 + 144);
    if ((v26 & 1) != 0)
    {
      v80 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      if ((v26 & 2) != 0
        || ((v81 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v81 != 0x3FFFFFFF)
          ? (v82 = (_DWORD)v81 == -1)
          : (v82 = 1),
            v82))
      {
        v83 = 2;
      }
      else
      {
        v83 = v80;
        v86 = v35;
        if (v81 >> 28)
        {
          v80 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v80 = v83;
          *(_DWORD *)(v80 + 8) = v81;
          v83 = 1;
        }
        else
        {
          v80 = v81 << 36;
        }
        v35 = v86;
      }
      v26 = v80 | v83;
      v27 = ((v80 | v83) & 1) == 0;
    }
    else
    {
      v27 = 1;
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)&v89, v35, &v87, a2, v26, *(_QWORD *)(a1 + 152) + 8, (uint64_t)operationDeleteByValStrictOptimize, *(char *)(a1 + 160), *(unsigned __int8 *)(a1 + 161), *(unsigned __int8 *)(a1 + 162), *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)(a1 + 56) + 16));
  }
  v45 = v89;
  if (!v27 && (v26 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v26 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
  for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v28, v29, v30, v31, v32, v33, v34);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v47 = j;
  if (j + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v28, v29, v30, v31, v32, v33, v34);
    v47 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v47) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v48 = 69;
  else
    v48 = 65;
  v89 = j;
  v90 = v48;
  v91 = 15;
  v92 = -1;
  LODWORD(v87) = *(_DWORD *)(a1 + 164);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v89, (unsigned int *)&v87, a2, v30, v31, v32, v33, v34);
  v49 = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v49 + 36) = i;
  *(_QWORD *)(v49 + 40) = v45;
  do
    v50 = __ldaxr((unsigned int *)v49);
  while (__stlxr(v50 + 1, (unsigned int *)v49));
  v51 = WTF::fastMalloc((WTF *)0x18);
  v59 = v51;
  *(_DWORD *)(v51 + 8) = 1;
  *(_QWORD *)v51 = &off_1E3576280;
  do
    v60 = __ldaxr((unsigned int *)v49);
  while (__stlxr(v60 + 1, (unsigned int *)v49));
  *(_QWORD *)(v51 + 16) = v49;
  v61 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v61 != *(_DWORD *)(a2 + 240))
  {
    v62 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v61);
    goto LABEL_47;
  }
  v63 = v61 + (v61 >> 2);
  if (v63 >= 0x10)
    v64 = v63 + 1;
  else
    v64 = 16;
  if (v64 <= v61 + 1)
    v65 = v61 + 1;
  else
    v65 = v64;
  if (v65 >> 29)
  {
    __break(0xC471u);
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  v66 = *(const void **)(a2 + 232);
  v67 = (void *)WTF::fastMalloc((WTF *)(8 * v65));
  *(_DWORD *)(a2 + 240) = v65;
  *(_QWORD *)(a2 + 232) = v67;
  memcpy(v67, v66, 8 * v61);
  if (v66)
  {
    if (*(const void **)(a2 + 232) == v66)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v66, v52, v53, v54, v55, v56, v57, v58);
  }
  v61 = *(unsigned int *)(a2 + 244);
  v62 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v61);
LABEL_47:
  *v62 = v59;
  *(_DWORD *)(a2 + 244) = v61 + 1;
  do
  {
    v68 = __ldaxr((unsigned int *)v49);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, (unsigned int *)v49));
  if (!v69)
  {
    atomic_store(1u, (unsigned int *)v49);
    WTF::fastFree(v49, v52, v53, v54, v55, v56, v57, v58);
  }
  *(_BYTE *)(a2 + 212) = v10;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)2,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)2,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)2,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(v2 + 28);
  if (v3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
  v5 = (v3 - v4);
  v6 = a2[23];
  v7 = v5 + v6;
  if (v6 <= v5 + v6 && v6 + a2[1] >= v7)
    return JSC::JITInlineCacheGenerator::finalize(v2 + 8, a2, a2, v7);
  result = 366;
  __break(0xC471u);
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)3,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)3,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)3,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  JSC::FTL::ExceptionTarget *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  char v28;
  char v29;
  char v30;
  int v31;
  unsigned int v32;
  _DWORD *v33;
  uint64_t *v34;
  int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  _DWORD *v44;
  _QWORD *v45;
  int v46;
  char *v47;
  int v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  JSC::JITDelByValGenerator *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  _DWORD *v81;
  uint64_t *v82;
  int v83;
  char *v84;
  int i;
  unsigned int v86;
  _QWORD *v87;
  int v88;
  WTF *v89;
  WTF *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  uint64_t v95;
  __int128 *v96;
  uint64_t v97;
  __int128 v98;
  WTF *v99;
  void *v100;
  WTF *v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  char v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  WTF *v133;
  unint64_t v135;
  unsigned int v136;
  unsigned int v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  const void *v141;
  void *v142;
  _BYTE *v143;
  unsigned int v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  BOOL v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int v164;
  unint64_t v165;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  char v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  int v177;
  _QWORD v178[4];
  char v179;
  uint64_t v180;
  uint64_t v181;
  _OWORD *v182;
  int v183;
  int v184;
  void *v185;
  int v186;
  int v187;
  void *v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int *v193;
  char v194;
  char v195;
  char v196;
  int v197;
  int v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  WTF *v202;
  uint64_t v203;
  _BYTE v204[24];
  unsigned int *v205;
  uint64_t v206;
  JSC::FTL::ExceptionTarget *v207[20];

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [6]>(a2);
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v7 & 1) != 0)
  {
    v147 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v148 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v148 != 0x3FFFFFFF)
        ? (v149 = (_DWORD)v148 == -1)
        : (v149 = 1),
          v149))
    {
      v150 = 2;
    }
    else if (v148 >> 28)
    {
      v167 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v167 = v147;
      *(_DWORD *)(v167 + 8) = v148;
      v150 = 1;
      v147 = v167;
    }
    else
    {
      v150 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v147 = v148 << 36;
    }
    v7 = v147 | v150;
  }
  v206 = v7;
  v16 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v8, &v206);
  if ((v206 & 1) != 0 && (v206 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v206 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), a3, (uint64_t *)v207);
  v17 = v207[0];
  JSC::FTL::ExceptionTarget::jumps(v207[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v205);
  v207[0] = 0;
  if (v17)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v17);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v17));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v17);
      v159 = (unsigned int *)*((_QWORD *)v17 + 2);
      *((_QWORD *)v17 + 2) = 0;
      if (v159)
      {
        do
        {
          v160 = __ldaxr(v159);
          v161 = v160 - 1;
        }
        while (__stlxr(v161, v159));
        if (!v161)
        {
          atomic_store(1u, v159);
          WTF::fastFree((unint64_t)v159, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      v162 = (unsigned int *)*((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = 0;
      if (v162)
      {
        do
        {
          v163 = __ldaxr(v162);
          v164 = v163 - 1;
        }
        while (__stlxr(v164, v162));
        if (!v164)
        {
          atomic_store(1u, v162);
          WTF::fastFree((unint64_t)v162, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      WTF::fastFree((unint64_t)v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  v202 = (WTF *)v204;
  v203 = 2;
  if (*((_DWORD *)a3 + 5) <= 1u)
  {
    __break(0xC471u);
    goto LABEL_157;
  }
  v27 = (char *)*((_QWORD *)a3 + 1);
  v28 = v27[16];
  v29 = *v27;
  if (HIBYTE(qword_1ECF4C780))
  {
    if (!*((_DWORD *)a3 + 9))
    {
      __break(0xC471u);
      JUMPOUT(0x197D9645CLL);
    }
    v30 = **((_BYTE **)a3 + 3);
  }
  else
  {
    v30 = -1;
  }
  v173 = v30;
  v174 = v28 & 0x7F;
  if (*(_BYTE *)(a1 + 40))
  {
    JSC::AssemblyHelpers::branchIfNotCell(a2, v174, 1, v20, v21, v22, v23, v24, (uint64_t)&v200);
    v31 = v200;
    if (v200 != -1)
    {
      v32 = HIDWORD(v203);
      if (HIDWORD(v203) == (_DWORD)v203)
      {
        v33 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v202, (void *)(HIDWORD(v203) + 1), (unint64_t)&v200, v20, v21, v22, v23, v24);
        v35 = *v33;
        v34 = (uint64_t *)(v33 + 1);
        v31 = v35;
        v32 = HIDWORD(v203);
      }
      else
      {
        v34 = &v201;
      }
      v36 = (char *)v202 + 12 * v32;
      *(_DWORD *)v36 = v31;
      *(_QWORD *)(v36 + 4) = *v34;
      ++HIDWORD(v203);
    }
  }
  if (!*(_BYTE *)(a1 + 41))
  {
    if (*((_DWORD *)a3 + 5) <= 2u)
    {
      __break(0xC471u);
      JUMPOUT(0x197D9646CLL);
    }
    JSC::AssemblyHelpers::branchIfNotCell(a2, *(_BYTE *)(*((_QWORD *)a3 + 1) + 32) & 0x7F, 1, v20, v21, v22, v23, v24, (uint64_t)v207);
    v42 = (int)v207[0];
    if (LODWORD(v207[0]) != -1)
    {
      v43 = HIDWORD(v203);
      if (HIDWORD(v203) == (_DWORD)v203)
      {
        v44 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v202, (void *)(HIDWORD(v203) + 1), (unint64_t)v207, v37, v38, v39, v40, v41);
        v46 = *v44;
        v45 = v44 + 1;
        v42 = v46;
        v43 = HIDWORD(v203);
      }
      else
      {
        v45 = (JSC::FTL::ExceptionTarget **)((char *)v207 + 4);
      }
      v47 = (char *)v202 + 12 * v43;
      *(_DWORD *)v47 = v42;
      *(_QWORD *)(v47 + 4) = *v45;
      ++HIDWORD(v203);
    }
  }
  if (*((_DWORD *)a3 + 5) <= 2u)
  {
    __break(0xC471u);
    JUMPOUT(0x197D9644CLL);
  }
  v48 = v16;
  v49 = *(_BYTE *)(*((_QWORD *)a3 + 1) + 32);
  v50 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v51 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v51 = 2;
  *(_DWORD *)(v51 + 96) = 0;
  *(_OWORD *)(v51 + 12) = 0u;
  *(_OWORD *)(v51 + 28) = 0u;
  *(_DWORD *)(v51 + 44) = 0;
  *(_QWORD *)(v51 + 64) = 0;
  *(_QWORD *)(v51 + 72) = 0;
  *(_QWORD *)(v51 + 56) = 0;
  *(_QWORD *)(v51 + 104) = 0;
  *(_QWORD *)(v51 + 112) = -1;
  *(_WORD *)(v51 + 120) = -1;
  *(_DWORD *)(v51 + 122) = 0x10000;
  *(_BYTE *)(v51 + 126) = 0;
  *(_BYTE *)(v51 + 127) = BYTE12(xmmword_1ECF4C260);
  *(_BYTE *)(v51 + 128) = 0;
  *(_WORD *)(v51 + 129) &= 0xFC00u;
  *(_QWORD *)(v51 + 136) = 0;
  *(_QWORD *)(v51 + 136) = *(_QWORD *)(v50 + 168);
  *(_QWORD *)(v50 + 168) = v51;
  *(_WORD *)(v51 + 129) = *(_WORD *)(v51 + 129) & 0xFDFF | (HIBYTE(qword_1ECF4C780) << 9);
  v52 = *(_QWORD *)(a2 + 336);
  v53 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v54 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v55 = *((unsigned int *)a3 + 9);
  if ((_DWORD)v55)
  {
    v56 = (_BYTE *)*((_QWORD *)a3 + 3);
    do
    {
      v57 = *v56 & 0x7F;
      if (v57 >= 0x40)
        goto LABEL_156;
      v58 = 1 << v57;
      v54 &= ~v58;
      v53 &= ~v58;
      ++v56;
    }
    while (--v55);
  }
  v59 = *((unsigned int *)a3 + 13);
  if ((_DWORD)v59)
  {
    v143 = (_BYTE *)*((_QWORD *)a3 + 5);
    do
    {
      v144 = (*v143 + 32) & 0x7F;
      if (v144 >= 0x40)
        goto LABEL_156;
      v145 = 1 << v144;
      v54 &= ~v145;
      v53 &= ~v145;
      ++v143;
    }
    while (--v59);
  }
  v172 = v6;
  v60 = v29 & 0x7F;
  v61 = v49 & 0x7F;
  v207[0] = (JSC::FTL::ExceptionTarget *)v54;
  v207[1] = (JSC::FTL::ExceptionTarget *)v53;
  v62 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v62 = 1;
  v63 = (JSC::JITDelByValGenerator *)(v62 + 8);
  v64 = *(_QWORD *)(a1 + 24);
  if ((v64 & 1) != 0)
  {
    v151 = *(_QWORD *)(v64 & 0xFFFFFFFF8);
    if ((v64 & 2) != 0
      || ((v152 = *(unsigned int *)((v64 & 0xFFFFFFFF8) + 8), (_DWORD)v152 != 0x3FFFFFFF)
        ? (v153 = (_DWORD)v152 == -1)
        : (v153 = 1),
          v153))
    {
      v154 = 2;
    }
    else if (v152 >> 28)
    {
      v170 = *(_DWORD *)((v64 & 0xFFFFFFFF8) + 8);
      v171 = *(_QWORD *)(v64 & 0xFFFFFFFF8);
      v151 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v151 = v171;
      *(_DWORD *)(v151 + 8) = v170;
      v154 = 1;
    }
    else
    {
      v154 = *(_QWORD *)(v64 & 0xFFFFFFFF8);
      v151 = v152 << 36;
    }
    v64 = v151 | v154;
  }
  v175 = v64;
  LOBYTE(v169) = v173;
  JSC::JITDelByValGenerator::JITDelByValGenerator((uint64_t)v63, v52, v51, 0, 0, &v175, v48, 26, (uint64_t)v207, v174, 0, v61, SHIDWORD(v61), v60, v169);
  if ((v175 & 1) != 0 && (v175 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v175 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
  JSC::JITDelByValGenerator::generateFastPath(v63, (JSC::CCallHelpers *)a2, v66, v67, v68, v69, v70, v71);
  if (!HIBYTE(qword_1ECF4C780))
  {
    v79 = *(_DWORD *)(v62 + 48);
    v198 = v79;
    v199 = *(_QWORD *)(v62 + 52);
    if (v79 != -1)
    {
      v80 = HIDWORD(v203);
      if (HIDWORD(v203) == (_DWORD)v203)
      {
        v81 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v202, (void *)(HIDWORD(v203) + 1), (unint64_t)&v198, v74, v75, v76, v77, v78);
        v83 = *v81;
        v82 = (uint64_t *)(v81 + 1);
        v79 = v83;
        v80 = HIDWORD(v203);
      }
      else
      {
        v82 = &v199;
      }
      v84 = (char *)v202 + 12 * v80;
      *(_DWORD *)v84 = v79;
      *(_QWORD *)(v84 + 4) = *v82;
      ++HIDWORD(v203);
    }
  }
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v72, v73, v74, v75, v76, v77, v78);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v86 = HIDWORD(v203);
  v87 = v178;
  v175 = (uint64_t)v178;
  v176 = 2;
  v177 = HIDWORD(v203);
  if (HIDWORD(v203) >= 3)
  {
    if (HIDWORD(v203) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197D96464);
    }
    v88 = 12 * HIDWORD(v203);
    v87 = (_QWORD *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v203)));
    v176 = (v88 & 0xFFFFFFFC) / 0xC;
    v175 = (uint64_t)v87;
    v86 = HIDWORD(v203);
  }
  if (v86)
  {
    v89 = v202;
    v90 = (WTF *)((char *)v202 + 12 * v86);
    do
    {
      *(_DWORD *)v87 = *(_DWORD *)v89;
      *(_QWORD *)((char *)v87 + 4) = *(_QWORD *)((char *)v89 + 4);
      v89 = (WTF *)((char *)v89 + 12);
      v87 = (_QWORD *)((char *)v87 + 12);
    }
    while (v89 != v90);
  }
  do
    v91 = __ldaxr((unsigned int *)v62);
  while (__stlxr(v91 + 1, (unsigned int *)v62));
  v178[3] = v62;
  v179 = v173;
  v92 = *(_QWORD *)a3;
  v180 = *(_QWORD *)(a1 + 16);
  v181 = v92;
  v93 = *((unsigned int *)a3 + 5);
  v182 = 0;
  v183 = 0;
  v184 = v93;
  if ((_DWORD)v93)
  {
    if (v93 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197D96454);
    }
    v94 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v93));
    v183 = v93;
    v182 = v94;
    v95 = *((unsigned int *)a3 + 5);
    if ((_DWORD)v95)
    {
      v96 = (__int128 *)*((_QWORD *)a3 + 1);
      v97 = 16 * v95;
      do
      {
        v98 = *v96++;
        *v94++ = v98;
        v97 -= 16;
      }
      while (v97);
    }
  }
  v99 = (WTF *)*((unsigned int *)a3 + 9);
  v185 = 0;
  v186 = 0;
  v187 = (int)v99;
  if ((_DWORD)v99)
  {
    v100 = (void *)WTF::fastMalloc(v99);
    v186 = (int)v99;
    v185 = v100;
    memcpy(v100, *((const void **)a3 + 3), *((unsigned int *)a3 + 9));
  }
  v101 = (WTF *)*((unsigned int *)a3 + 13);
  v188 = 0;
  v189 = 0;
  v190 = (int)v101;
  if ((_DWORD)v101)
  {
    v146 = (void *)WTF::fastMalloc(v101);
    v189 = (int)v101;
    v188 = v146;
    memcpy(v146, *((const void **)a3 + 5), *((unsigned int *)a3 + 13));
  }
  v191 = *((_QWORD *)a3 + 7);
  v102 = *(_QWORD *)(a1 + 24);
  if ((v102 & 1) != 0)
  {
    v155 = *(_QWORD *)(v102 & 0xFFFFFFFF8);
    if ((v102 & 2) != 0
      || ((v156 = *(unsigned int *)((v102 & 0xFFFFFFFF8) + 8), (_DWORD)v156 != 0x3FFFFFFF)
        ? (v157 = (_DWORD)v156 == -1)
        : (v157 = 1),
          v157))
    {
      v158 = 2;
    }
    else if (v156 >> 28)
    {
      v168 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v168 = v155;
      *(_DWORD *)(v168 + 8) = v156;
      v158 = 1;
      v155 = v168;
    }
    else
    {
      v158 = *(_QWORD *)(v102 & 0xFFFFFFFF8);
      v155 = v156 << 36;
    }
    v102 = v155 | v158;
  }
  v192 = v102;
  v103 = v205;
  if (v205)
  {
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 + 1, v103));
  }
  v193 = v103;
  v194 = v60;
  v195 = v174;
  v196 = v61;
  v197 = i;
  v105 = *((_QWORD *)a3 + 7);
  v106 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)(v106 + 8) = 1;
  *(_QWORD *)v106 = off_1E35762D0;
  v114 = *(unsigned int *)(v105 + 12);
  if ((_DWORD)v114 != *(_DWORD *)(v105 + 8))
  {
    v115 = (uint64_t *)(*(_QWORD *)v105 + 8 * v114);
    v116 = v172;
    goto LABEL_64;
  }
  v138 = v114 + (v114 >> 2);
  if (v138 >= 0x10)
    v139 = v138 + 1;
  else
    v139 = 16;
  if (v139 <= v114 + 1)
    v140 = v114 + 1;
  else
    v140 = v139;
  if (v140 >> 29)
  {
    __break(0xC471u);
LABEL_156:
    __break(1u);
LABEL_157:
    JUMPOUT(0x197D96444);
  }
  v141 = *(const void **)v105;
  v142 = (void *)WTF::fastMalloc((WTF *)(8 * v140));
  *(_DWORD *)(v105 + 8) = v140;
  *(_QWORD *)v105 = v142;
  memcpy(v142, v141, 8 * v114);
  v116 = v172;
  if (v141)
  {
    if (*(const void **)v105 == v141)
    {
      *(_QWORD *)v105 = 0;
      *(_DWORD *)(v105 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v141, v107, v108, v109, v110, v111, v112, v113);
  }
  v114 = *(unsigned int *)(v105 + 12);
  v115 = (uint64_t *)(*(_QWORD *)v105 + 8 * v114);
LABEL_64:
  *v115 = v106;
  *(_DWORD *)(v105 + 12) = v114 + 1;
  do
  {
    v131 = __ldaxr((unsigned int *)v62);
    v132 = v131 - 1;
  }
  while (__stlxr(v132, (unsigned int *)v62));
  if (!v132)
  {
    atomic_store(1u, (unsigned int *)v62);
    WTF::fastFree(v62, v124, v125, v126, v127, v128, v129, v130);
  }
  v133 = v202;
  if (v204 != (_BYTE *)v202 && v202 != 0)
  {
    v202 = 0;
    LODWORD(v203) = 0;
    WTF::fastFree((unint64_t)v133, v124, v125, v126, v127, v128, v129, v130);
  }
  v135 = (unint64_t)v205;
  v205 = 0;
  if (v135)
  {
    do
    {
      v136 = __ldaxr((unsigned int *)v135);
      v137 = v136 - 1;
    }
    while (__stlxr(v137, (unsigned int *)v135));
    if (!v137)
    {
      atomic_store(1u, (unsigned int *)v135);
      v165 = *(_QWORD *)(v135 + 8);
      if (v135 + 24 != v165 && v165 != 0)
      {
        *(_QWORD *)(v135 + 8) = 0;
        *(_DWORD *)(v135 + 16) = 0;
        WTF::fastFree(v165, v124, v125, v126, v127, v128, v129, v130);
      }
      WTF::fastFree(v135, v124, v125, v126, v127, v128, v129, v130);
    }
  }
  *(_BYTE *)(a2 + 212) = v116;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)3,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)3,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)3,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)3,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)3,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)3,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int i;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int j;
  unsigned int v47;
  char v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  const void *v66;
  void *v67;
  unsigned int v68;
  unsigned int v69;
  _BYTE *v70;
  unsigned int v71;
  uint64_t v72;
  _BYTE *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  __int16 v91;
  char v92;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v11 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = 12 * v11;
    while (v13 < *(unsigned int *)(a1 + 28))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 16) + v12), a2, a3, a4, a5, a6, a7, a8);
      ++v13;
      v12 += 12;
      if (v14 == v12)
        goto LABEL_7;
    }
    __break(0xC471u);
LABEL_99:
    JUMPOUT(0x197D96AB4);
  }
LABEL_7:
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16), *(char *)(a1 + 64), a4, a5, a6, a7, a8);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) + 48) = operationDeleteByValSloppyOptimize;
    v16 = *(unsigned __int8 **)(a1 + 72);
    v17 = *(_QWORD *)(a1 + 80);
    v19 = *(_QWORD *)(v17 + 96);
    v18 = *(_QWORD *)(v17 + 104);
    v20 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 48) + 216) & 0xFF003FF80000 | v19;
    v21 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v21)
    {
      v22 = *(_BYTE **)(a1 + 104);
      do
      {
        v23 = *v22 & 0x7F;
        if (v23 >= 0x40)
          goto LABEL_98;
        v24 = 1 << v23;
        v20 &= ~v24;
        v18 &= ~v24;
        ++v22;
      }
      while (--v21);
    }
    v25 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v25)
    {
      v70 = *(_BYTE **)(a1 + 120);
      do
      {
        v71 = (*v70 + 32) & 0x7F;
        if (v71 >= 0x40)
          goto LABEL_98;
        v72 = 1 << v71;
        v20 &= ~v72;
        v18 &= ~v72;
        ++v70;
      }
      while (--v25);
    }
    v87 = v20;
    v88 = v18;
    v26 = *(_QWORD *)(a1 + 144);
    if ((v26 & 1) != 0)
    {
      v76 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      if ((v26 & 2) != 0
        || ((v77 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v77 != 0x3FFFFFFF)
          ? (v78 = (_DWORD)v77 == -1)
          : (v78 = 1),
            v78))
      {
        v79 = 2;
      }
      else if (v77 >> 28)
      {
        v84 = v76;
        v85 = v16;
        v76 = WTF::fastMalloc((WTF *)0x10);
        v16 = v85;
        *(_QWORD *)v76 = v84;
        *(_DWORD *)(v76 + 8) = v77;
        v79 = 1;
      }
      else
      {
        v79 = v76;
        v76 = v77 << 36;
      }
      v26 = v76 | v79;
      v27 = ((v76 | v79) & 1) == 0;
    }
    else
    {
      v27 = 1;
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>((uint64_t)&v89, v16, (uint64_t)&v87, a2, v26, *(_QWORD *)(a1 + 152) + 8, *(unsigned __int8 *)(a1 + 64) | 0x3000000000, *(char *)(a1 + 160), *(_BYTE *)(a1 + 161), 0, *(_BYTE *)(a1 + 162), 0, *(_BYTE *)(a1 + 64));
  }
  else
  {
    v35 = *(unsigned __int8 **)(a1 + 72);
    v36 = *(_QWORD *)(a1 + 80);
    v38 = *(_QWORD *)(v36 + 96);
    v37 = *(_QWORD *)(v36 + 104);
    v39 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 48) + 216) & 0xFF003FF80000 | v38;
    v40 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v40)
    {
      v41 = *(_BYTE **)(a1 + 104);
      do
      {
        v42 = *v41 & 0x7F;
        if (v42 >= 0x40)
          goto LABEL_98;
        v43 = 1 << v42;
        v39 &= ~v43;
        v37 &= ~v43;
        ++v41;
      }
      while (--v40);
    }
    v44 = *(unsigned int *)(a1 + 132);
    if ((_DWORD)v44)
    {
      v73 = *(_BYTE **)(a1 + 120);
      do
      {
        v74 = (*v73 + 32) & 0x7F;
        if (v74 >= 0x40)
          goto LABEL_98;
        v75 = 1 << v74;
        v39 &= ~v75;
        v37 &= ~v75;
        ++v73;
      }
      while (--v44);
    }
    v87 = v39;
    v88 = v37;
    v26 = *(_QWORD *)(a1 + 144);
    if ((v26 & 1) != 0)
    {
      v80 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      if ((v26 & 2) != 0
        || ((v81 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8), (_DWORD)v81 != 0x3FFFFFFF)
          ? (v82 = (_DWORD)v81 == -1)
          : (v82 = 1),
            v82))
      {
        v83 = 2;
      }
      else
      {
        v83 = v80;
        v86 = v35;
        if (v81 >> 28)
        {
          v80 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v80 = v83;
          *(_DWORD *)(v80 + 8) = v81;
          v83 = 1;
        }
        else
        {
          v80 = v81 << 36;
        }
        v35 = v86;
      }
      v26 = v80 | v83;
      v27 = ((v80 | v83) & 1) == 0;
    }
    else
    {
      v27 = 1;
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)&v89, v35, &v87, a2, v26, *(_QWORD *)(a1 + 152) + 8, (uint64_t)operationDeleteByValSloppyOptimize, *(char *)(a1 + 160), *(unsigned __int8 *)(a1 + 161), *(unsigned __int8 *)(a1 + 162), *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)(a1 + 56) + 16));
  }
  v45 = v89;
  if (!v27 && (v26 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v26 & 0xFFFFFFFF8, v28, v29, v30, v31, v32, v33, v34);
  for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v28, v29, v30, v31, v32, v33, v34);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v47 = j;
  if (j + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v28, v29, v30, v31, v32, v33, v34);
    v47 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v47) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v48 = 69;
  else
    v48 = 65;
  v89 = j;
  v90 = v48;
  v91 = 15;
  v92 = -1;
  LODWORD(v87) = *(_DWORD *)(a1 + 164);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v89, (unsigned int *)&v87, a2, v30, v31, v32, v33, v34);
  v49 = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v49 + 36) = i;
  *(_QWORD *)(v49 + 40) = v45;
  do
    v50 = __ldaxr((unsigned int *)v49);
  while (__stlxr(v50 + 1, (unsigned int *)v49));
  v51 = WTF::fastMalloc((WTF *)0x18);
  v59 = v51;
  *(_DWORD *)(v51 + 8) = 1;
  *(_QWORD *)v51 = &off_1E35762F8;
  do
    v60 = __ldaxr((unsigned int *)v49);
  while (__stlxr(v60 + 1, (unsigned int *)v49));
  *(_QWORD *)(v51 + 16) = v49;
  v61 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v61 != *(_DWORD *)(a2 + 240))
  {
    v62 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v61);
    goto LABEL_47;
  }
  v63 = v61 + (v61 >> 2);
  if (v63 >= 0x10)
    v64 = v63 + 1;
  else
    v64 = 16;
  if (v64 <= v61 + 1)
    v65 = v61 + 1;
  else
    v65 = v64;
  if (v65 >> 29)
  {
    __break(0xC471u);
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  v66 = *(const void **)(a2 + 232);
  v67 = (void *)WTF::fastMalloc((WTF *)(8 * v65));
  *(_DWORD *)(a2 + 240) = v65;
  *(_QWORD *)(a2 + 232) = v67;
  memcpy(v67, v66, 8 * v61);
  if (v66)
  {
    if (*(const void **)(a2 + 232) == v66)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v66, v52, v53, v54, v55, v56, v57, v58);
  }
  v61 = *(unsigned int *)(a2 + 244);
  v62 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v61);
LABEL_47:
  *v62 = v59;
  *(_DWORD *)(a2 + 244) = v61 + 1;
  do
  {
    v68 = __ldaxr((unsigned int *)v49);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, (unsigned int *)v49));
  if (!v69)
  {
    atomic_store(1u, (unsigned int *)v49);
    WTF::fastFree(v49, v52, v53, v54, v55, v56, v57, v58);
  }
  *(_BYTE *)(a2 + 212) = v10;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)3,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)3,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileDelBy<(JSC::DelByKind)3,JSC::B3::Value *>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(v2 + 28);
  if (v3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
  v5 = (v3 - v4);
  v6 = a2[23];
  v7 = v5 + v6;
  if (v6 <= v5 + v6 && v6 + a2[1] >= v7)
    return JSC::JITInlineCacheGenerator::finalize(v2 + 8, a2, a2, v7);
  result = 366;
  __break(0xC471u);
  return result;
}

uint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::caged(uint64_t a1, JSC::B3::Value *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::FTL::Output *v10;
  JSC::B3::Value *v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  JSC::B3::Value *v14;
  uint64_t v16;
  JSC::InlineWatchpointSet *v17;
  uint64_t v18;
  unsigned int v19;

  v9 = qword_1ECF4C038;
  if (qword_1ECF4C038)
  {
    if (byte_1ECF4C022)
    {
LABEL_3:
      v10 = (JSC::FTL::Output *)(a1 + 27640);
      v11 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v9);
      v12 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v10, 0x3FFFFFFFFLL);
      v13 = JSC::FTL::Output::bitAnd(v10, a2, v12);
      v14 = (JSC::B3::Value *)JSC::FTL::Output::add(v10, v13, v11);
      return JSC::FTL::Output::opaque(v10, v14);
    }
    if (!disablePrimitiveGigacageRequested)
    {
      v16 = a1;
      v17 = (JSC::InlineWatchpointSet *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 93264);
      v18 = *(_QWORD *)v17;
      v19 = (*(_QWORD *)v17 & 1) != 0 ? (v18 >> 1) & 3 : *(unsigned __int8 *)(v18 + 4);
      if (v19 != 2)
      {
        JSC::DFG::DesiredWatchpoints::addLazily((_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 136), v17, a3, a4, a5, a6, a7, a8);
        a1 = v16;
        v9 = qword_1ECF4C038;
        goto LABEL_3;
      }
    }
  }
  return (uint64_t *)a2;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isArrayTypeForCheckArray(uint64_t a1, JSC::B3::Value *a2, unsigned int a3)
{
  JSC::FTL::Output *v4;
  JSC::B3::Value *v5;
  JSC::FTL::Output *v6;
  int v7;
  JSC::B3::Value *v8;
  int v11;
  uint64_t v12;
  int v13;
  unsigned __int8 v14;

  if (a3 - 6 < 6)
  switch(a3)
  {
    case 0x19u:
    case 0xCu:
      v4 = (JSC::FTL::Output *)(a1 + 27640);
      v5 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((JSC::FTL::Output *)(a1 + 27640), a2, (const JSC::FTL::AbstractHeap *)(a1 + 3136));
      v6 = v4;
      v7 = 33;
      break;
    case 0xDu:
      v4 = (JSC::FTL::Output *)(a1 + 27640);
      v5 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((JSC::FTL::Output *)(a1 + 27640), a2, (const JSC::FTL::AbstractHeap *)(a1 + 3136));
      v6 = v4;
      v7 = 34;
      break;
    default:
      v14 = a3;
      v11 = JSC::DFG::toTypedArrayType(a3);
      if (v11 == 12 || !v11)
      {
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x55DE, "LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::isArrayTypeForCheckArray(LValue, ArrayMode)", "arrayMode.isSomeTypedArrayView()");
        __break(0xC471u);
      }
      else
      {
        v12 = a1;
        v4 = (JSC::FTL::Output *)(a1 + 27640);
        v5 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(v4, a2, (const JSC::FTL::AbstractHeap *)(v12 + 3136));
        v13 = JSC::DFG::toTypedArrayType(v14);
        if ((v13 - 1) < 0xC)
        {
          v7 = v13 + 38;
          v6 = v4;
          break;
        }
        __break(0xC471u);
      }
      JUMPOUT(0x197D96E20);
  }
  v8 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v6, v7);
  return JSC::FTL::Output::equal(v4, v5, v8);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::isCellWithType(uint64_t *a1, JSC::B3::Value *a2, __int16 a3, uint64_t a4, char a5, uint64_t a6)
{
  JSC::B3::Value *v6;
  int v7;
  int v8;
  JSC::FTL::Output *v9;
  const JSC::FTL::AbstractHeap *v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  JSC::B3::Value *v14;
  JSC::B3::Value *v16;
  JSC::B3::Value *v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2;
  if (a5)
  {
    if ((a6 & 0x2800FFFFFFF7 & ~a4) != 0)
    {
      if ((a6 & 0x2800FFFFFFF7 & a4) != 0)
        goto LABEL_4;
      v20 = 3456;
    }
    else
    {
      v20 = 3455;
    }
    v21 = a1[v20];
    if (v21)
      return (JSC::B3::Value *)v21;
  }
LABEL_4:
  v7 = a3;
  v8 = HIBYTE(a3);
  v9 = (JSC::FTL::Output *)(a1 + 3455);
  v10 = (const JSC::FTL::AbstractHeap *)(a1 + 392);
  if (HIBYTE(a3) == a3)
  {
    v11 = a1[395];
    if (v11)
    {
      v12 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v11);
      v6 = (JSC::B3::Value *)JSC::FTL::Output::add(v9, v6, v12);
    }
    v13 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(v9, (uint64_t)v10, (uint64_t)v6);
    v14 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v9, v7);
    return JSC::FTL::Output::equal(v9, v13, v14);
  }
  else
  {
    v16 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((JSC::FTL::Output *)(a1 + 3455), a2, v10);
    v17 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v9, v7);
    v18 = JSC::FTL::Output::sub(v9, v16, v17);
    v19 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v9, v8 - v7);
    return JSC::FTL::Output::belowOrEqual(v9, v18, v19);
  }
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowStorage(uint64_t *a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  __n128 v33;
  unint64_t v34;

  v10 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v11 = a1[3494];
  if (!v11)
    goto LABEL_12;
  v12 = *(_DWORD *)(v11 - 8);
  v13 = (v10 + ~(a2 << 32)) ^ ((v10 + ~(a2 << 32)) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = *(_QWORD *)(v11 + 24 * v16);
  if (v17 != v10)
  {
    v18 = 1;
    while (v17)
    {
      v16 = (v16 + v18) & v12;
      v17 = *(_QWORD *)(v11 + 24 * v16);
      ++v18;
      if (v17 == v10)
        goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_6:
  v19 = v11 + 24 * v16;
  v20 = *(JSC::B3::Value **)(v19 + 8);
  if (!v20)
    goto LABEL_12;
  v21 = *(_QWORD *)(v19 + 16);
  v22 = a1[3521];
  if (v22 != v21)
  {
    v23 = *(_QWORD *)(*a1 + 784);
    v24 = *(unsigned int *)(v22 + 8);
    v25 = *(_DWORD *)(v23 + 20);
    if (v25 <= v24 || (v26 = *(unsigned int *)(v21 + 8), v25 <= v26))
    {
      __break(0xC471u);
      JUMPOUT(0x197D97118);
    }
    v27 = *(_QWORD *)(v23 + 8);
    v28 = v27 + 32 * v24;
    v29 = v27 + 32 * v26;
    if (*(_DWORD *)(v28 + 24) <= *(_DWORD *)(v29 + 24) || *(_DWORD *)(v28 + 28) >= *(_DWORD *)(v29 + 28))
    {
LABEL_12:
      v30 = a1[3521];
      v33.n128_u64[0] = (unint64_t)v20;
      v33.n128_u64[1] = v30;
      v34 = v10;
      WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v32, a1 + 3494, (uint64_t *)&v34, &v33);
    }
  }
  return v20;
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::typedArrayLength(uint64_t a1, JSC::B3::Value *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  JSC::DFG::Node *v16;
  JSC::B3::Value *v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  JSC::B3::Value *v20;
  int8x8_t v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  unsigned int *v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  __int16 v31;
  __int128 *v32;
  JSC::B3::Value *v33;
  uint64_t v34;
  char v35;

  if ((_DWORD)a3)
  {
    v31 = a4;
    v32 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)(a1 + 27640), 2);
    v33 = a2;
    v34 = 0;
    v35 = 3;
    JSC::B3::StackmapValue::append(v32, (uint64_t)a2, (unint64_t)&v34);
    *((_QWORD *)v32 + 8) |= 0x30000uLL;
    *((_QWORD *)v32 + 10) |= 0x30000uLL;
    *((_BYTE *)v32 + 168) = 2;
    LOWORD(v33) = v31;
    return v32;
  }
  if ((a5 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v10 = *(_QWORD *)(a1 + 28040);
    v11 = (_QWORD *)(v10 + 24);
    v12 = (_QWORD *)(v10 + 8);
    if ((a5 & 1) != 0)
      v12 = v11;
    v13 = *v12 + 32 * *(unsigned int *)((a5 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v14 = (void *)*(unsigned int *)(a1 + 28120);
    if ((_DWORD)v14 != *(_DWORD *)(v13 + 20))
    {
      if ((*(_QWORD *)(v13 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v13, v14, a3, a4, a5, a6, a7, a8);
      else
        *(_DWORD *)(v13 + 20) = (_DWORD)v14;
    }
    v15 = *(_QWORD *)v13;
    if ((*(_QWORD *)v13 & 2) == 0 && (v15 > 4 || ((1 << v15) & 0x15) == 0))
    {
      v26 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v15 & 1) != 0)
      {
        v28 = *v26;
        if (!(_DWORD)v28)
          goto LABEL_8;
        v29 = (uint64_t *)(v26 + 2);
        v27 = 1;
        do
        {
          v30 = *v29++;
          if (*(_BYTE *)(16 * *(unsigned int *)(v30 + 76) + 0xF4))
            v27 = 0;
          --v28;
        }
        while (v28);
      }
      else
      {
        if (!v26)
          goto LABEL_8;
        v27 = *(_BYTE *)(16 * v26[19] + 0xF4) ^ 1;
      }
      if (v27)
        goto LABEL_8;
    }
  }
  v16 = *(JSC::DFG::Node **)(a1 + 28224);
  v17 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((JSC::FTL::Output *)(a1 + 27640), a2, (const JSC::FTL::AbstractHeap *)(a1 + 2320));
  v18 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 6);
  v19 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v17, v18);
  v20 = JSC::FTL::Output::notZero32((JSC::FTL::Output *)(a1 + 27640), v19);
LABEL_8:
  v22 = *(_QWORD *)(a1 + 2296);
  if (v22)
  {
    v23 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v22);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), a2, v23);
  }
  return (__int128 *)JSC::FTL::Output::load(a1 + 27640, (const JSC::FTL::AbstractHeap *)(a1 + 2272), (uint64_t)a2, 2);
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::typedArrayLength(JSC::B3::Value *,BOOL,std::optional<JSC::TypedArrayType>,JSC::DFG::Edge)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, _WORD *a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3576320;
  *(_WORD *)(v4 + 12) = *a2;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::typedArrayLength(JSC::B3::Value *,BOOL,std::optional<JSC::TypedArrayType>,JSC::DFG::Edge)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v11;
  int v12;
  int v13;

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "typedArrayLength");
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v12 = *(_DWORD *)(a3 + 20);
  if (!v12)
    goto LABEL_13;
  if (v12 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D974D4);
  }
  v13 = *(_DWORD *)(a3 + 36);
  if (v13 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D974DCLL);
  }
  if (!v13)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x197D974CCLL);
  }
  JSC::AssemblyHelpers::loadTypedArrayByteLengthImpl(a2, *(_BYTE *)(*(_QWORD *)(a3 + 8) + 16) & 0x7F, **(_BYTE **)(a3 + 8) & 0x7F, **(char **)(a3 + 24), *(char *)(*(_QWORD *)(a3 + 24) + 1), *(unsigned __int16 *)(a1 + 12), 0, a8);
  *(_BYTE *)(a2 + 212) = v11;
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::operationExceptionCheckAndExtractResultIfNeeded<void>(uint64_t a1, uint64_t a2, JSC::DFG::Node *a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (JSC::DFG::mayExit(*(JSC::DFG **)a1, *(JSC::DFG::Graph **)(a1 + 28224), a3))
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::operationExceptionCheck<void>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD *v15;
  unint64_t v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  JSC::B3::Value *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::B3::Value *v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::B3::Value *v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int8x8_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  unsigned int v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int64x2_t v92;
  unint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  _BYTE v96[24];
  _QWORD *v97;
  uint64_t v98;

  v9 = *a1;
  v10 = a1[3524];
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(v9 + 32);
LABEL_3:
    v12 = (_QWORD *)(v10 & 0xFFFFFFFF8);
    v13 = 1;
    v14 = 1;
    goto LABEL_4;
  }
  v71 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v72 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v72 != 0x3FFFFFFF) ? (v73 = v72 == -1) : (v73 = 1), v73))
  {
    v74 = 2;
  }
  else if (v72 >> 28)
  {
    v86 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v86 = v71;
    *(_DWORD *)(v86 + 8) = v72;
    v74 = 1;
    v71 = v86;
  }
  else
  {
    v74 = v71;
    v71 = 0;
  }
  v10 = v71 | v74;
  v11 = *(_QWORD *)(v9 + 32);
  if (((v71 | v74) & 1) == 0)
    goto LABEL_3;
  v81 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
  if ((v10 & 2) != 0
    || ((v82 = *(_DWORD *)((v10 & 0xFFFFFFFF8) + 8), v82 != 0x3FFFFFFF) ? (v83 = v82 == -1) : (v83 = 1), v83))
  {
    v84 = 2;
  }
  else if (v82 >> 28)
  {
    v89 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v89 = v81;
    *(_DWORD *)(v89 + 8) = v82;
    v84 = 1;
    v81 = v89;
  }
  else
  {
    v84 = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    v81 = 0;
  }
  v85 = v81 | v84;
  v12 = (_QWORD *)(v85 & 0xFFFFFFFF8);
  if ((v85 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_QWORD *)*v12;
    if (!*v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v14 = 0;
  v13 = 1;
LABEL_4:
  v15 = v12;
  if (v12)
LABEL_5:
    v11 = v15[1];
LABEL_6:
  v16 = *(_QWORD *)(v11 + 8);
  if ((v13 & 1) == 0 && v12)
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 1) == 0 && (v10 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v10 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (JSC::B3::Value *)a1[3485];
  v18 = a1[791];
  if (v18)
  {
    v19 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v18);
    v17 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), v17, v19);
  }
  v20 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)(a1 + 3455), (const JSC::FTL::AbstractHeap *)(a1 + 788), (uint64_t)v17, 2);
  if (HIBYTE(word_1ECF4C620))
  {
    v21 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), (uint64_t)operationExceptionFuzz);
    JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*a1 + 24) + 280), v16, v22, v23, v24, v25, v26, v27);
    v28 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v16);
    JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *>((JSC::B3::BasicBlock *)a1[3472], (JSC::B3::Value *)a1[3470], 0, a1[3471], v21, v28);
    v29 = (JSC::B3::Value *)a1[3485];
    v30 = a1[791];
    if (v30)
    {
      v31 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), v30);
      v29 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 3455), v29, v31);
    }
    v20 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)(a1 + 3455), (const JSC::FTL::AbstractHeap *)(a1 + 788), (uint64_t)v29, 2);
  }
  v36 = JSC::FTL::Output::notZero64((JSC::FTL::Output *)(a1 + 3455), v20);
  v94 = 0;
  v95 = 2;
  v37 = *a1;
  v38 = a1[3525];
  if ((v38 & 1) != 0)
  {
    v75 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
    if ((v38 & 2) != 0
      || (v76 = *(unsigned int *)((v38 & 0xFFFFFFFF8) + 8), (_DWORD)v76 == 0x3FFFFFFF)
      || (_DWORD)v76 == -1)
    {
      v77 = 2;
    }
    else if (v76 >> 28)
    {
      v87 = v76;
      v88 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v88 = v75;
      *(_DWORD *)(v88 + 8) = v87;
      v77 = 1;
      v75 = v88;
    }
    else
    {
      v77 = v75;
      v75 = v76 << 36;
    }
    v38 = v75 | v77;
  }
  v93 = v38;
  v46 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v37, &v93, &v95, &v94, v32, v33, v34, v35);
  if ((v93 & 1) != 0 && (v93 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v93 & 0xFFFFFFFF8, v39, v40, v41, v42, v43, v44, v45);
  if (v46)
  {
    v47 = v95;
    if ((v95 & 1) != 0)
    {
      v78 = *(_QWORD *)(v95 & 0xFFFFFFFF8);
      if ((v95 & 2) != 0
        || (v79 = *(unsigned int *)((v95 & 0xFFFFFFFF8) + 8), (_DWORD)v79 == 0x3FFFFFFF)
        || (_DWORD)v79 == -1)
      {
        v80 = 2;
      }
      else if (v79 >> 28)
      {
        v90 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v90 = v78;
        *(_DWORD *)(v90 + 8) = v79;
        v80 = 1;
        v78 = v90;
      }
      else
      {
        v80 = *(_QWORD *)(v95 & 0xFFFFFFFF8);
        v78 = v79 << 36;
      }
      v47 = v78 | v80;
    }
    v91 = v47;
    v48 = (int8x8_t)JSC::DFG::NodeOrigin::withForExitAndExitOK(&v92, a1 + 3524, (unint64_t *)&v91, v41, v42, v43, v44, v45).u64[0];
    if ((v92.i8[8] & 1) != 0 && (v92.i64[1] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v92.i64[1] & 0xFFFFFFFF8, v49, v50, v51, v52, v53, v54, v55);
    if ((v92.i8[0] & 1) != 0 && (v92.i64[0] & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v92.i64[0] & 0xFFFFFFFF8, v49, v50, v51, v52, v53, v54, v55);
    if ((v91 & 1) != 0 && (v91 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v91 & 0xFFFFFFFF8, v49, v50, v51, v52, v53, v54, v55);
  }
  else
  {
    v56 = JSC::B3::Procedure::addBlock((JSC::B3::Procedure *)a1[3470], *((double *)a1 + 3475));
    v57 = v56;
    v58 = a1[3473];
    if (v58)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore(a1 + 3476, v58, v56);
    }
    else
    {
      v98 = v56;
      v63 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v63 = 0u;
      *((_OWORD *)v63 + 1) = 0u;
      v63[3] = a1[3477];
      a1[3477] = (uint64_t)v63;
      v97 = v63;
      v63[2] = v57;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>(a1 + 3476, &v98, (uint64_t *)&v97, v64, v65, v66, v67, v68, (uint64_t)v96);
      v69 = v97;
      v70 = (_QWORD *)a1[3479];
      *v97 = a1 + 3478;
      v69[1] = v70;
      *v70 = v69;
      a1[3479] = (uint64_t)v69;
    }
    JSC::FTL::Output::branch(a1 + 3455, (uint64_t)v36, a1[3482], v57, 0.0, 1.0, v59, v60, v61, v62);
    a1[3472] = v57;
  }
  if ((v95 & 1) != 0 && (v95 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v95 & 0xFFFFFFFF8, v49, v50, v51, v52, v53, v54, v55);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValImpl(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  JSC::JSCell *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  JSC::B3::Value *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x8_t v29;
  unsigned int v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  int8x8_t v38;
  uint64_t v39;
  JSC::FTL::IndexedAbstractHeap *v40;
  JSC::B3::Value *v41;
  unsigned int v42;
  unint64_t v43;
  JSC::B3::Value *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  JSC::FTL::IndexedAbstractHeap *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  JSC::B3::Value *v57;
  JSC::B3::Value *v58;
  int8x8_t v59;
  char **v60;
  uint64_t v61;
  JSC::B3::Value *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  BOOL v69;
  JSC::B3::Value *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int8x8_t v77;
  unsigned int v78;
  JSC::B3::Value *v79;
  JSC::B3::Value *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int8x8_t v87;
  unsigned int v88;
  JSC::B3::Value *v89;
  JSC::B3::Value *v90;
  JSC::B3::Value *v91;
  uint64_t v92;
  JSC::B3::Value *v93;
  JSC::B3::Value *v94;
  _QWORD *v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int8x8_t v119;
  unint64_t v120;
  JSC::B3::Value *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int8x8_t v132;
  unsigned int v133;
  unint64_t v134;
  JSC::B3::Value *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  char *v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int8x8_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int8x8_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int *v181;
  void *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _BOOL4 v222;
  int v223;
  JSC::JSCell *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int8x8_t v231;
  unsigned int v232;
  JSC::B3::Value *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int8x8_t v240;
  unsigned int v241;
  JSC::B3::Value *v242;
  JSC::B3::Value *v243;
  unsigned int v244;
  unint64_t v245;
  JSC::B3::Value *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  JSC::FTL::IndexedAbstractHeap *v255;
  uint64_t v256;
  uint64_t v257;
  JSC::B3::Value *v258;
  JSC::B3::Value *v259;
  int8x8_t v260;
  char **v261;
  uint64_t v262;
  JSC::B3::Value *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char v273;
  uint64_t v274;
  unsigned int *v275;
  unsigned int v276;
  int v277;
  int v278;
  int v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  unsigned int *v290;
  unsigned int *v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int *v296;
  unsigned int v297;
  unsigned int v298;
  unint64_t v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t *v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  JSC::B3::Value *v318;
  JSC::B3::Value *v319;
  JSC::B3::Value *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unsigned int v325;
  unint64_t v326;
  JSC::B3::Value *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  JSC::FTL::IndexedAbstractHeap *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  JSC::B3::Value *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  char **v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  JSC::B3::Value *v348;
  JSC::B3::Value *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  char **v354;
  uint64_t v355;
  JSC::B3::Value *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  int v365;
  int8x8_t v366;
  uint64_t v367;
  JSC::B3::Value *v368;
  JSC::B3::Value *v369;
  char **v370;
  uint64_t v371;
  JSC::B3::Value *v372;
  uint64_t v373;
  uint64_t v374;
  JSC::B3::Value *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  char **v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  JSC::B3::Value *v388;
  uint64_t v389;
  char **v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unsigned int v395;
  void *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t **v410;
  uint64_t *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t **v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t *v426;
  char *v427;
  char *v428;
  char *v429;
  char *v430;
  char *v431;
  char *v432;
  unsigned int v433;
  JSC::B3::Value *v434;
  JSC::DFG::Node *v435;
  JSC::B3::Value *v436;
  int8x8_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  JSC::B3::Value *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  JSC::B3::BasicBlock *v446;
  JSC::B3::Value *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  __int128 *v455;
  JSC::B3::Value *v456;
  JSC::B3::Value *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  JSC::B3::Value *v463;
  JSC::B3::Value *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  _QWORD *v474;
  int v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unsigned int v481;
  BOOL v482;
  uint64_t v483;
  uint64_t v484;
  unsigned int v485;
  BOOL v486;
  uint64_t v487;
  uint64_t v488;
  JSC::B3::Value *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  int8x8_t v496;
  unsigned int v497;
  JSC::B3::Value *v498;
  JSC::B3::Value *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  int8x8_t v506;
  unsigned int v507;
  JSC::B3::Value *v508;
  JSC::B3::Value *v509;
  JSC::JSCell *v510;
  uint64_t v511;
  uint64_t v512;
  JSC::B3::BasicBlock *v513;
  JSC::B3::Value *v514;
  JSC::B3::Value *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unsigned int v521;
  JSC::FTL::IndexedAbstractHeap *v522;
  uint64_t v523;
  JSC::B3::Value *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  JSC::B3::Value *v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  JSC::B3::Value *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  JSC::JSCell *v553;
  JSC::B3::Value *v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  int8x8_t v561;
  unsigned int v562;
  JSC::B3::Value *v563;
  JSC::B3::Value *v564;
  JSC::B3::Value *Ptr;
  JSC::B3::Value *v566;
  int8x8_t v567;
  JSC::B3::Value *v568;
  JSC::B3::Value *v569;
  int8x8_t v570;
  JSC::B3::Value *v571;
  uint64_t v572;
  JSC::FTL::IndexedAbstractHeap *v573;
  uint64_t v574;
  unsigned int v575;
  JSC::FTL::IndexedAbstractHeap *v576;
  uint64_t v577;
  JSC::B3::Value *v578;
  int8x8_t v579;
  JSC::B3::Value *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  int8x8_t v587;
  unsigned int v588;
  JSC::B3::Value *v589;
  JSC::B3::Value *v590;
  JSC::B3::Value *v591;
  JSC::B3::Value *v592;
  int8x8_t v593;
  JSC::B3::Value *v594;
  JSC::B3::Value *v595;
  uint64_t v596;
  uint64_t v597;
  JSC::B3::BasicBlock *v598;
  JSC::B3::Value *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  JSC::B3::Value *v604;
  JSC::B3::Value *v605;
  JSC::B3::Value *v606;
  uint64_t v607;
  JSC::FTL::IndexedAbstractHeap *v608;
  uint64_t v609;
  JSC::B3::Value *v610;
  JSC::B3::Value *v611;
  JSC::B3::Value *v612;
  int8x8_t v613;
  JSC::B3::Value *v614;
  uint64_t v615;
  JSC::FTL::IndexedAbstractHeap *v616;
  uint64_t v617;
  JSC::B3::Value *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  JSC::B3::Value *v628;
  JSC::B3::Value *v629;
  JSC::B3::Value *v630;
  uint64_t v631;
  JSC::FTL::IndexedAbstractHeap *v632;
  uint64_t v633;
  JSC::B3::Value *v634;
  JSC::B3::Value *v635;
  int8x8_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  JSC::B3::Value *v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  int8x8_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  int8x8_t v660;
  unsigned int v661;
  unsigned int v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  JSC::B3::BasicBlock *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  JSC::B3::Value *v674;
  uint64_t v675;
  JSC::FTL::IndexedAbstractHeap *v676;
  uint64_t v677;
  JSC::B3::Value *v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  JSC::B3::Value *v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  JSC::B3::Value *v710;
  JSC::B3::Value *v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  unsigned int v717;
  JSC::FTL::IndexedAbstractHeap *v718;
  uint64_t v719;
  JSC::B3::Value *v720;
  JSC::B3::Value *v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  JSC::B3::Value *v741;
  int8x8_t v742;
  JSC::B3::Value *v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  JSC::B3::Value *v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  unint64_t v774;
  void *v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  JSC::B3::Value *v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  JSC::JSCell *v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  _BOOL4 v800;
  JSC::B3::BasicBlock *v801;
  JSC::B3::BasicBlock *v802;
  JSC::B3::BasicBlock *v803;
  JSC::B3::BasicBlock *v804;
  uint64_t v805[2];
  _BYTE v806[24];
  uint64_t v807;
  JSC::B3::Value *v808;
  int v809[2];
  uint64_t v810;
  char v811;

  v10 = *(_QWORD *)this;
  v11 = *((_QWORD *)this + 3524);
  if ((v11 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v480 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v481 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v481 != 0x3FFFFFFF) ? (v482 = v481 == -1) : (v482 = 1), v482))
  {
    v483 = 2;
  }
  else if (v481 >> 28)
  {
    v790 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v790 = v480;
    *(_DWORD *)(v790 + 8) = v481;
    v483 = 1;
    v480 = v790;
  }
  else
  {
    v483 = v480;
    v480 = 0;
  }
  v11 = v480 | v483;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v480 | v483) & 1) == 0)
    goto LABEL_3;
  v484 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v485 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v485 != 0x3FFFFFFF) ? (v486 = v485 == -1) : (v486 = 1), v486))
  {
    v487 = 2;
  }
  else if (v485 >> 28)
  {
    v791 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v791 = v484;
    *(_DWORD *)(v791 + 8) = v485;
    v487 = 1;
    v484 = v791;
  }
  else
  {
    v487 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v484 = 0;
  }
  v488 = v484 | v487;
  v13 = (_QWORD *)(v488 & 0xFFFFFFFF8);
  if ((v488 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
LABEL_5:
  if (v16)
    v12 = v16[1];
  v17 = *(JSC::JSCell **)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = *((_QWORD *)this + 3528);
  if (*(_WORD *)(v18 + 18) == 146)
    v19 = *(_DWORD *)(v18 + 80);
  else
    v19 = *(_DWORD *)(v18 + 72);
  v20 = BYTE2(v19);
  switch((char)v19)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 25:
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, (JSC::DFG::Node *)v18, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x18CF, "LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetByValImpl()", "Bad array type");
      __break(0xC471u);
      JUMPOUT(0x197D990DCLL);
    case 4:
    case 23:
    case 24:
      v100 = *(_QWORD *)this;
      v101 = *(_QWORD *)(*(_QWORD *)this + 1016);
      if (!v101)
        goto LABEL_58;
      v102 = *(_DWORD *)(v101 - 8);
      v103 = (~(v18 << 32) + v18) ^ ((unint64_t)(~(v18 << 32) + v18) >> 22);
      v104 = 9 * ((v103 + ~(v103 << 13)) ^ ((v103 + ~(v103 << 13)) >> 8));
      v105 = (v104 ^ (v104 >> 15)) + ~((v104 ^ (v104 >> 15)) << 27);
      v106 = v102 & ((v105 >> 31) ^ v105);
      v107 = *(_QWORD *)(v101 + 8 * v106);
      if (v107 == v18)
        goto LABEL_46;
      v108 = 1;
      while (v107)
      {
        v106 = (v106 + v108) & v102;
        v107 = *(_QWORD *)(v101 + 8 * v106);
        ++v108;
        if (v107 == v18)
        {
LABEL_46:
          v109 = *(_QWORD *)(v18 + 24);
          v110 = *(_DWORD *)(v100 + 164);
          if (v110 <= v109)
          {
            __break(0xC471u);
            JUMPOUT(0x197D9A19CLL);
          }
          v111 = *(_QWORD *)(v100 + 152);
          if ((*(_QWORD *)(v111 + 8 * *(_QWORD *)(v18 + 24)) & 0xFC000000000000) != 0x2C000000000000)
            goto LABEL_261;
          v112 = v109 + 1;
          if (v110 <= v112)
          {
            __break(0xC471u);
            JUMPOUT(0x197D9A1A4);
          }
          v113 = (*(_QWORD *)(v111 + 8 * v112) >> 50) & 0x3FLL;
          if ((_DWORD)v113 == 21)
          {
            JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(v100 + 24) + 280), (unint64_t)v17, a3, a4, a5, a6, a7, a8);
            *(_QWORD *)v806 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v17);
            if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(*((_QWORD *)this + 3528) + 24))
            {
              __break(0xC471u);
              JUMPOUT(0x197D9A1ACLL);
            }
            v120 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152)
                             + 8 * *(_QWORD *)(*((_QWORD *)this + 3528) + 24));
            v810 = (uint64_t)v121;
            v133 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
            if (*(_DWORD *)(*(_QWORD *)this + 164) <= v133)
            {
              __break(0xC471u);
              JUMPOUT(0x197D9A1B4);
            }
            v134 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v133);
            v805[0] = (uint64_t)v135;
            v144 = operationGetByValObjectString;
          }
          if ((_DWORD)v113 == 25)
          {
            if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(*((_QWORD *)this + 3528) + 24))
            {
              __break(0xC471u);
              JUMPOUT(0x197D9A250);
            }
            v661 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
            if (*(_DWORD *)(*(_QWORD *)this + 164) <= v661)
            {
              __break(0xC471u);
              JUMPOUT(0x197D9A258);
            }
            v144 = operationGetByValObjectSymbol;
          }
          else
          {
LABEL_261:
            if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(*((_QWORD *)this + 3528) + 24))
            {
              __break(0xC471u);
              JUMPOUT(0x197D9A1D4);
            }
            v662 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
            if (*(_DWORD *)(*(_QWORD *)this + 164) <= v662)
            {
              __break(0xC471u);
              JUMPOUT(0x197D9A1DCLL);
            }
          }
        }
      }
LABEL_58:
      if (*(_DWORD *)(v100 + 164) <= *(_QWORD *)(v18 + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A14CLL);
      }
      v148 = *(_DWORD *)(v18 + 24) + 1;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v148)
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A154);
      }
      v149 = v147;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(v18 + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A15CLL);
      }
      v158 = v150;
      v166 = *(_DWORD *)(v18 + 24) + 1;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v166)
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A164);
      }
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(v18 + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A16CLL);
      }
      v173 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * *(_QWORD *)(v18 + 24));
      v174 = *((_QWORD *)this + 3505);
      v175 = *(unsigned int *)((v173 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v176 = (uint64_t *)(v174 + 24);
      v177 = (uint64_t *)(v174 + 8);
      if ((v173 & 1) != 0)
        v178 = v176;
      else
        v178 = v177;
      v179 = *v178;
      v180 = *v178 + 32 * v175;
      v181 = (unsigned int *)((char *)this + 28120);
      v182 = (void *)*((unsigned int *)this + 7030);
      if ((_DWORD)v182 != *(_DWORD *)(v180 + 20))
      {
        if ((*(_QWORD *)(v180 + 8) & 0x2800FFFFFFF7) != 0)
          JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v180, v182, v167, v168, v169, v170, v171, v172);
        else
          *(_DWORD *)(v180 + 20) = (_DWORD)v182;
      }
      *(_QWORD *)v806 = 0;
      v183 = *(_QWORD *)v180;
      if ((*(_QWORD *)v180 & 1) == 0 || v183 == 4)
      {
        v184 = v183 & 0xFFFFFFFFFFFFFFFDLL;
      }
      else
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v806, (_QWORD *)v180);
        v184 = *(_QWORD *)v806;
        v183 = *(_QWORD *)v180;
      }
      v185 = v184 & 0xFFFFFFFFFFFFFFFDLL;
      v186 = v184 | 2;
      if ((v183 & 2) != 0)
        v187 = v186;
      else
        v187 = v185;
      *(_QWORD *)v806 = v187;
      v188 = v179 + 32 * v175;
      v189 = *(_QWORD *)(v188 + 24);
      *(_OWORD *)&v806[8] = *(_OWORD *)(v188 + 8);
      v807 = v189;
      v190 = *(_QWORD *)&v806[8];
      if ((v187 & 1) != 0)
        WTF::fastFree(v187 & 0xFFFFFFFFFFFFFFFCLL, v182, v167, v168, v169, v170, v171, v172);
      v191 = *(_DWORD *)(v18 + 24) + 1;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v191)
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A174);
      }
      v192 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v191);
      v193 = *((_QWORD *)this + 3505);
      v194 = *(unsigned int *)((v192 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      if ((v192 & 1) != 0)
        v195 = (uint64_t *)(v193 + 24);
      else
        v195 = (uint64_t *)(v193 + 8);
      v196 = *v195;
      v197 = *v195 + 32 * v194;
      v198 = (void *)*v181;
      if ((_DWORD)v198 != *(_DWORD *)(v197 + 20))
      {
        if ((*(_QWORD *)(v197 + 8) & 0x2800FFFFFFF7) != 0)
          JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v197, v198, v167, v168, v169, v170, v171, v172);
        else
          *(_DWORD *)(v197 + 20) = (_DWORD)v198;
      }
      *(_QWORD *)v806 = 0;
      v199 = *(_QWORD *)v197;
      if ((*(_QWORD *)v197 & 1) == 0 || v199 == 4)
      {
        v200 = v199 & 0xFFFFFFFFFFFFFFFDLL;
      }
      else
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v806, (_QWORD *)v197);
        v200 = *(_QWORD *)v806;
        v199 = *(_QWORD *)v197;
      }
      v201 = v200 & 0xFFFFFFFFFFFFFFFDLL;
      v202 = v200 | 2;
      if ((v199 & 2) != 0)
        v203 = v202;
      else
        v203 = v201;
      *(_QWORD *)v806 = v203;
      v204 = v196 + 32 * v194;
      v205 = *(_QWORD *)(v204 + 24);
      *(_OWORD *)&v806[8] = *(_OWORD *)(v204 + 8);
      v807 = v205;
      v206 = *(_QWORD *)&v806[8] & 0xFFFFFFFFCFFFFFFFLL;
      if ((v203 & 1) != 0)
        WTF::fastFree(v203 & 0xFFFFFFFFFFFFFFFCLL, v198, v167, v168, v169, v170, v171, v172);
      v801 = (JSC::B3::BasicBlock *)v206;
      if (v206)
      {
        v207 = *(_DWORD *)(v18 + 24) + 1;
        if (*(_DWORD *)(*(_QWORD *)this + 164) <= v207)
        {
          __break(0xC471u);
          JUMPOUT(0x197D9A1BCLL);
        }
        v208 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v207);
        v209 = *((_QWORD *)this + 3505);
        v210 = *(unsigned int *)((v208 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        if ((v208 & 1) != 0)
          v211 = (uint64_t *)(v209 + 24);
        else
          v211 = (uint64_t *)(v209 + 8);
        v212 = *v211;
        v213 = *v211 + 32 * v210;
        v214 = (void *)*v181;
        if ((_DWORD)v214 != *(_DWORD *)(v213 + 20))
        {
          if ((*(_QWORD *)(v213 + 8) & 0x2800FFFFFFF7) != 0)
            JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v213, v214, v167, v168, v169, v170, v171, v172);
          else
            *(_DWORD *)(v213 + 20) = (_DWORD)v214;
        }
        *(_QWORD *)v806 = 0;
        v215 = *(_QWORD *)v213;
        if ((*(_QWORD *)v213 & 1) == 0 || v215 == 4)
        {
          v216 = v215 & 0xFFFFFFFFFFFFFFFDLL;
        }
        else
        {
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v806, (_QWORD *)v213);
          v216 = *(_QWORD *)v806;
          v215 = *(_QWORD *)v213;
        }
        if ((v215 & 2) != 0)
          v217 = v216 | 2;
        else
          v217 = v216 & 0xFFFFFFFFFFFFFFFDLL;
        *(_QWORD *)v806 = v217;
        v218 = v212 + 32 * v210;
        v219 = *(_QWORD *)(v218 + 24);
        *(_OWORD *)&v806[8] = *(_OWORD *)(v218 + 8);
        v807 = v219;
        v220 = *(_QWORD *)&v806[8] & 0xFFFFFFFCFFFFFFFFLL;
        if ((v217 & 1) != 0)
          WTF::fastFree(v217 & 0xFFFFFFFFFFFFFFFCLL, v214, v167, v168, v169, v170, v171, v172);
        if (!v220)
        {
          v221 = v190;
          v222 = 0;
          v223 = 256;
          goto LABEL_109;
        }
        v395 = *(_DWORD *)(v18 + 24) + 1;
        if (*(_DWORD *)(*(_QWORD *)this + 164) <= v395)
        {
          __break(0xC471u);
          JUMPOUT(0x197D9A1CCLL);
        }
        v221 = v190;
        v222 = (*(_QWORD *)&v806[8] & 0xFFFFFFFFBFFFFFFFLL) == 0;
        if ((v806[0] & 1) != 0)
          WTF::fastFree(*(_QWORD *)v806 & 0xFFFFFFFFFFFFFFFCLL, v396, v397, v398, v399, v400, v401, v402);
      }
      else
      {
        v221 = v190;
        v222 = 0;
      }
      v223 = 0;
LABEL_109:
      v55 = (uint64_t)JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 2);
      *(_QWORD *)v806 = v149;
      *(_QWORD *)&v806[8] = 0;
      v806[16] = 3;
      JSC::B3::StackmapValue::append((__int128 *)v55, v149, (unint64_t)&v806[8]);
      *(_QWORD *)v806 = v158;
      *(_QWORD *)&v806[8] = 0;
      v806[16] = 3;
      JSC::B3::StackmapValue::append((__int128 *)v55, v158, (unint64_t)&v806[8]);
      v264 = *((_QWORD *)this + 3488);
      *(_OWORD *)v806 = xmmword_1991243E0;
      JSC::B3::StackmapValue::append((__int128 *)v55, v264, (unint64_t)v806);
      v265 = *((_QWORD *)this + 3487);
      *(_OWORD *)v806 = xmmword_1991243F0;
      JSC::B3::StackmapValue::append((__int128 *)v55, v265, (unint64_t)v806);
      *(_QWORD *)(v55 + 64) |= 0x30000uLL;
      *(_QWORD *)(v55 + 80) |= 0x30000uLL;
      *(_BYTE *)(v55 + 168) = HIBYTE(qword_1ECF4C780);
      v271 = *((_QWORD *)this + 1);
      v272 = *(_QWORD *)v18;
      if ((*(_QWORD *)v18 & 1) == 0)
        goto LABEL_110;
      v765 = *(_QWORD *)(v272 & 0xFFFFFFFF8);
      if ((v272 & 2) != 0
        || (v766 = *(unsigned int *)((v272 & 0xFFFFFFFF8) + 8), (_DWORD)v766 == 0x3FFFFFFF)
        || (_DWORD)v766 == -1)
      {
        v767 = 2;
      }
      else if (v766 >> 28)
      {
        v792 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v792 = v765;
        *(_DWORD *)(v792 + 8) = v766;
        v767 = 1;
        v765 = v792;
      }
      else
      {
        v767 = *(_QWORD *)(v272 & 0xFFFFFFFF8);
        v765 = v766 << 36;
      }
      v272 = v765 | v767;
      if (((v765 | v767) & 1) != 0)
      {
        v768 = *(_QWORD *)(v272 & 0xFFFFFFFF8);
        if ((v272 & 2) != 0
          || (v769 = *(unsigned int *)((v272 & 0xFFFFFFFF8) + 8), (_DWORD)v769 == 0x3FFFFFFF)
          || (_DWORD)v769 == -1)
        {
          v770 = 2;
        }
        else if (v769 >> 28)
        {
          v794 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v794 = v768;
          *(_DWORD *)(v794 + 8) = v769;
          v770 = 1;
          v768 = v794;
        }
        else
        {
          v770 = *(_QWORD *)(v272 & 0xFFFFFFFF8);
          v768 = v769 << 36;
        }
        v273 = 0;
        v274 = v768 | v770;
      }
      else
      {
LABEL_110:
        v273 = 1;
        v274 = v272;
      }
      v275 = *(unsigned int **)v806;
      if (*(_QWORD *)v806)
      {
        do
          v276 = __ldaxr(v275);
        while (__stlxr(v276 + 1, v275));
      }
      if (v222)
        v277 = 0x10000;
      else
        v277 = 0;
      v278 = (v801 == 0) | (((v221 & 0xFFFFD7FF00000008) == 0) << 24);
      v279 = v223 | v277;
      v287 = WTF::fastMalloc((WTF *)0x30);
      *(_DWORD *)(v287 + 8) = 1;
      *(_QWORD *)v287 = &off_1E3576370;
      *(_QWORD *)(v287 + 16) = v271;
      v288 = v274;
      if ((v274 & 1) != 0)
      {
        v771 = *(_QWORD *)(v274 & 0xFFFFFFFF8);
        if ((v274 & 2) != 0
          || (v772 = *(unsigned int *)((v274 & 0xFFFFFFFF8) + 8), (_DWORD)v772 == 0x3FFFFFFF)
          || (_DWORD)v772 == -1)
        {
          v773 = 2;
        }
        else if (v772 >> 28)
        {
          v793 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v793 = v771;
          *(_DWORD *)(v793 + 8) = v772;
          v773 = 1;
          v771 = v793;
        }
        else
        {
          v773 = *(_QWORD *)(v274 & 0xFFFFFFFF8);
          v771 = v772 << 36;
        }
        v288 = v771 | v773;
      }
      *(_QWORD *)(v287 + 24) = v288;
      if (v275)
      {
        do
          v289 = __ldaxr(v275);
        while (__stlxr(v289 + 1, v275));
      }
      *(_QWORD *)(v287 + 32) = v275;
      *(_DWORD *)(v287 + 40) = v278 | v279;
      v290 = *(unsigned int **)(v55 + 56);
      *(_QWORD *)(v55 + 56) = v287;
      if (v290)
      {
        v291 = v290 + 2;
        do
        {
          v292 = __ldaxr(v291);
          v293 = v292 - 1;
        }
        while (__stlxr(v293, v291));
        if (!v293)
        {
          atomic_store(1u, v290 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v290 + 8))(v290);
        }
      }
      if (v275)
      {
        do
        {
          v294 = __ldaxr(v275);
          v295 = v294 - 1;
        }
        while (__stlxr(v295, v275));
        if (!v295)
        {
          atomic_store(1u, v275);
          JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v275, v280, v281, v282, v283, v284, v285, v286);
          WTF::fastFree(v774, v775, v776, v777, v778, v779, v780, v781);
        }
      }
      if ((v274 & 1) != 0 && (v274 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v274 & 0xFFFFFFFF8, v280, v281, v282, v283, v284, v285, v286);
      if ((v273 & 1) == 0 && (v272 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v272 & 0xFFFFFFFF8, v280, v281, v282, v283, v284, v285, v286);
      v296 = *(unsigned int **)v806;
      *(_QWORD *)v806 = 0;
      if (v296)
      {
        do
        {
          v297 = __ldaxr(v296);
          v298 = v297 - 1;
        }
        while (__stlxr(v298, v296));
        if (!v298)
        {
          atomic_store(1u, v296);
          JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v296, v280, v281, v282, v283, v284, v285, v286);
          WTF::fastFree(v299, v300, v301, v302, v303, v304, v305, v306);
        }
      }
      return v55;
    case 5:
    case 6:
      v433 = *(_DWORD *)(v18 + 24) + 1;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v433)
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A1E4);
      }
      v435 = (JSC::DFG::Node *)*((_QWORD *)this + 3528);
      v436 = JSC::FTL::Output::lessThan((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v434, *((JSC::B3::Value **)this + 3457));
      return JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
    case 7:
    case 9:
      v21 = *(_DWORD *)(v18 + 24) + 1;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v21)
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A0E0);
      }
      *(_QWORD *)v809 = v22;
      v30 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 2;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v30)
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A0E8);
      }
      v31 = v22;
      if (v19 == 7)
        v39 = 16584;
      else
        v39 = 18568;
      v40 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + v39);
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(*((_QWORD *)this + 3528) + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A0F0);
      }
      v808 = v41;
      if (BYTE2(v19) > 1u)
      {
        v795 = v17;
        v307 = JSC::B3::Procedure::addBlock((uint64_t *)0x6BF8, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
        v308 = *((_QWORD *)this + 3473);
        v797 = (uint64_t)v307;
        if (v308)
        {
          WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v308, (uint64_t)v307);
        }
        else
        {
          v810 = (uint64_t)v307;
          v403 = v307;
          v404 = WTF::fastMalloc((WTF *)0x20);
          *(_OWORD *)v404 = 0u;
          *(_OWORD *)(v404 + 16) = 0u;
          *(_QWORD *)(v404 + 24) = *((_QWORD *)this + 3477);
          *((_QWORD *)this + 3477) = v404;
          v805[0] = v404;
          *(_QWORD *)(v404 + 16) = v403;
          WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, &v810, v805, v405, v406, v407, v408, v409, (uint64_t)v806);
          v309 = (uint64_t *)v805[0];
          v410 = (uint64_t **)*((_QWORD *)this + 3479);
          *(_QWORD *)v805[0] = (char *)this + 27824;
          v309[1] = (uint64_t)v410;
          *v410 = v309;
          *((_QWORD *)this + 3479) = v309;
        }
        v310 = JSC::B3::Procedure::addBlock(v309, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
        v311 = *((_QWORD *)this + 3473);
        v802 = (JSC::B3::BasicBlock *)v310;
        if (v311)
        {
          WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v311, (uint64_t)v310);
        }
        else
        {
          v810 = (uint64_t)v310;
          v411 = v310;
          v412 = WTF::fastMalloc((WTF *)0x20);
          *(_OWORD *)v412 = 0u;
          *(_OWORD *)(v412 + 16) = 0u;
          *(_QWORD *)(v412 + 24) = *((_QWORD *)this + 3477);
          *((_QWORD *)this + 3477) = v412;
          v805[0] = v412;
          *(_QWORD *)(v412 + 16) = v411;
          WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, &v810, v805, v413, v414, v415, v416, v417, (uint64_t)v806);
          v312 = (uint64_t *)v805[0];
          v418 = (uint64_t **)*((_QWORD *)this + 3479);
          *(_QWORD *)v805[0] = (char *)this + 27824;
          v312[1] = (uint64_t)v418;
          *v418 = v312;
          *((_QWORD *)this + 3479) = v312;
        }
        v313 = JSC::B3::Procedure::addBlock(v312, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
        v314 = v313;
        v315 = *((_QWORD *)this + 3473);
        v799 = (uint64_t)v313;
        if (v315)
        {
          WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v315, (uint64_t)v313);
        }
        else
        {
          v810 = (uint64_t)v313;
          v419 = WTF::fastMalloc((WTF *)0x20);
          *(_OWORD *)v419 = 0u;
          *(_OWORD *)(v419 + 16) = 0u;
          *(_QWORD *)(v419 + 24) = *((_QWORD *)this + 3477);
          *((_QWORD *)this + 3477) = v419;
          v805[0] = v419;
          *(_QWORD *)(v419 + 16) = v314;
          WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, &v810, v805, v420, v421, v422, v423, v424, (uint64_t)v806);
          v425 = v805[0];
          v426 = (uint64_t *)*((_QWORD *)this + 3479);
          *(_QWORD *)v805[0] = (char *)this + 27824;
          *(_QWORD *)(v425 + 8) = v426;
          *v426 = v425;
          *((_QWORD *)this + 3479) = v425;
        }
        v316 = *((_QWORD *)this + 41);
        v317 = (uint64_t)v37;
        if (v316)
        {
          v318 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v316);
          v317 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v37, v318);
        }
        v319 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 304), v317, 1);
        v320 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v31, v319);
        JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v320, (uint64_t)v802, v797, 0.0, 1.0, v321, v322, v323, v324);
        *((_QWORD *)this + 3472) = v797;
        v798 = *((_QWORD *)this + 3473);
        *((_QWORD *)this + 3473) = v802;
        v325 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
        if (*(_DWORD *)(*(_QWORD *)this + 164) <= v325)
        {
          __break(0xC471u);
          JUMPOUT(0x197D9A1C4);
        }
        v326 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v325);
        v327 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v31, 2);
        v336 = JSC::FTL::IndexedAbstractHeap::baseIndex(v40, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v37, v327, v334, 0, 0, v335);
        v338 = JSC::FTL::Output::load((uint64_t)this + 27640, v336, v337, 2);
        v339 = *((_QWORD *)this + 3472);
        v340 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
        v341 = *((_QWORD *)this + 3471);
        v342 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v342 + 8) = -1;
        *(_WORD *)(v342 + 12) = 152;
        *(_DWORD *)(v342 + 16) = 0;
        *(_BYTE *)(v342 + 20) = 1;
        *(_QWORD *)v342 = &unk_1E357EDA0;
        v796 = v338;
        *(_QWORD *)(v342 + 40) = 0;
        *(_QWORD *)(v342 + 48) = v338;
        v343 = v342;
        *(_QWORD *)(v342 + 24) = v341;
        *(_QWORD *)(v342 + 32) = 0;
        JSC::B3::Procedure::addValueImpl(v340, (JSC::B3::Value *)v342);
        *(_QWORD *)v806 = v343;
        v344 = (char **)(v339 + 8);
        v345 = *(unsigned int *)(v339 + 20);
        if ((_DWORD)v345 == *(_DWORD *)(v339 + 16))
        {
          v428 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v344, v345 + 1, (unint64_t)v806);
          v345 = *(unsigned int *)(v339 + 20);
          *(_QWORD *)(*(_QWORD *)(v339 + 8) + 8 * v345) = *(_QWORD *)v428;
          v346 = *(_QWORD *)v806;
        }
        else
        {
          *(_QWORD *)&(*v344)[8 * v345] = v343;
          v346 = v343;
        }
        *(_DWORD *)(v339 + 20) = v345 + 1;
        *(_QWORD *)(v346 + 32) = v339;
        v347 = *((_QWORD *)this + 3472);
        v348 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
        v349 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), v796, *((_QWORD *)this + 3459));
        JSC::B3::Procedure::addValueImpl(v348, v349);
        *(_QWORD *)v806 = v349;
        v354 = (char **)(v347 + 8);
        v355 = *(unsigned int *)(v347 + 20);
        if ((_DWORD)v355 == *(_DWORD *)(v347 + 16))
        {
          v429 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v354, v355 + 1, (unint64_t)v806);
          v355 = *(unsigned int *)(v347 + 20);
          *(_QWORD *)(*(_QWORD *)(v347 + 8) + 8 * v355) = *(_QWORD *)v429;
          v356 = *(JSC::B3::Value **)v806;
        }
        else
        {
          *(_QWORD *)&(*v354)[8 * v355] = v349;
          v356 = v349;
        }
        *(_DWORD *)(v347 + 20) = v355 + 1;
        *((_QWORD *)v356 + 4) = v347;
        v357 = v799;
        JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v349, (uint64_t)v802, v799, 0.0, 1.0, v350, v351, v352, v353);
        *((_QWORD *)this + 3472) = v802;
        *((_QWORD *)this + 3473) = v799;
        if (BYTE2(v19) == 3)
        {
          v364 = *((_QWORD *)this + 3457);
          v365 = (*(uint64_t (**)(JSC::B3::Value *, uint64_t))(*(_QWORD *)v31 + 320))(v31, v364);
          if (v365 == 2)
          {
            v367 = *((_QWORD *)this + 3472);
            v368 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
            v369 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(53, *((_QWORD *)this + 3471), (uint64_t)v31, v364);
            JSC::B3::Procedure::addValueImpl(v368, v369);
            *(_QWORD *)v806 = v369;
            v370 = (char **)(v367 + 8);
            v371 = *(unsigned int *)(v367 + 20);
            if ((_DWORD)v371 == *(_DWORD *)(v367 + 16))
            {
              v432 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v370, v371 + 1, (unint64_t)v806);
              v371 = *(unsigned int *)(v367 + 20);
              *(_QWORD *)(*(_QWORD *)(v367 + 8) + 8 * v371) = *(_QWORD *)v432;
              v372 = *(JSC::B3::Value **)v806;
            }
            else
            {
              *(_QWORD *)&(*v370)[8 * v371] = v369;
              v372 = v369;
            }
            *(_DWORD *)(v367 + 20) = v371 + 1;
            *((_QWORD *)v372 + 4) = v367;
          }
          else
          {
            v444 = 27648;
            if (v365 == 1)
              v444 = 27640;
            v369 = *(JSC::B3::Value **)((char *)this + v444);
          }
          v373 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
          v374 = *((_QWORD *)this + 3472);
          v375 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
          v376 = *((_QWORD *)this + 3471);
          v377 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v377 + 8) = -1;
          *(_WORD *)(v377 + 12) = 152;
          *(_DWORD *)(v377 + 16) = 0;
          *(_BYTE *)(v377 + 20) = 1;
          *(_QWORD *)v377 = &unk_1E357EDA0;
          *(_QWORD *)(v377 + 40) = 0;
          *(_QWORD *)(v377 + 48) = v373;
          *(_QWORD *)(v377 + 24) = v376;
          *(_QWORD *)(v377 + 32) = 0;
          JSC::B3::Procedure::addValueImpl(v375, (JSC::B3::Value *)v377);
          *(_QWORD *)v806 = v377;
          v381 = (char **)(v374 + 8);
          v382 = *(unsigned int *)(v374 + 20);
          if ((_DWORD)v382 == *(_DWORD *)(v374 + 16))
          {
            v431 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v381, v382 + 1, (unint64_t)v806);
            v382 = *(unsigned int *)(v374 + 20);
            *(_QWORD *)(*(_QWORD *)(v374 + 8) + 8 * v382) = *(_QWORD *)v431;
            v383 = *(_QWORD *)v806;
          }
          else
          {
            *(_QWORD *)&(*v381)[8 * v382] = v377;
            v383 = v377;
          }
          v357 = v799;
          *(_DWORD *)(v374 + 20) = v382 + 1;
          *(_QWORD *)(v383 + 32) = v374;
          v384 = *((_QWORD *)this + 3472);
          v385 = v384;
        }
        else
        {
          v377 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v442);
          v385 = v443;
          v384 = *((_QWORD *)this + 3472);
        }
        v386 = *((_QWORD *)this + 3470);
        v387 = *((_QWORD *)this + 3471);
        *(_QWORD *)v806 = v357;
        v806[8] = 0;
        JSC::B3::BasicBlock::appendNewControlValue(v384, v386, 154, v387, (uint64_t *)v806, v378, v379, v380);
        *((_QWORD *)this + 3472) = v357;
        *((_QWORD *)this + 3473) = v798;
        if (v19 == 9)
        {
          v357 = *((_QWORD *)this + 3472);
        }
        v388 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
        v389 = *((_QWORD *)this + 3471);
        v55 = WTF::fastMalloc((WTF *)0x30);
        *(_QWORD *)v55 = off_1E357F5F0;
        *(_DWORD *)(v55 + 8) = -1;
        *(_WORD *)(v55 + 12) = 153;
        *(_DWORD *)(v55 + 16) = 2;
        *(_BYTE *)(v55 + 20) = 0;
        *(_QWORD *)(v55 + 24) = v389;
        *(_QWORD *)(v55 + 32) = 0;
        JSC::B3::Procedure::addValueImpl(v388, (JSC::B3::Value *)v55);
        *(_QWORD *)v806 = v55;
        v390 = (char **)(v357 + 8);
        v391 = *(unsigned int *)(v357 + 20);
        if ((_DWORD)v391 == *(_DWORD *)(v357 + 16))
        {
          v430 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v390, v391 + 1, (unint64_t)v806);
          v391 = *(unsigned int *)(v357 + 20);
          *(_QWORD *)(*(_QWORD *)(v357 + 8) + 8 * v391) = *(_QWORD *)v430;
          v392 = *(_QWORD *)v806;
        }
        else
        {
          *(_QWORD *)&(*v390)[8 * v391] = v55;
          v392 = v55;
        }
        *(_DWORD *)(v357 + 20) = v391 + 1;
        *(_QWORD *)(v392 + 32) = v357;
        if ((*(_WORD *)(v343 + 12) & 0xFFF) == 0x98)
          v393 = v343;
        else
          v393 = 0;
        *(_QWORD *)(v393 + 40) = v55;
        if (v377 || v385)
        {
          if ((*(_WORD *)(v377 + 12) & 0xFFF) == 0x98)
            v394 = v377;
          else
            v394 = 0;
          *(_QWORD *)(v394 + 40) = v55;
        }
        return v55;
      }
      v42 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v42)
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A0F8);
      }
      v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v42);
      v44 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v31, 2);
      v53 = JSC::FTL::IndexedAbstractHeap::baseIndex(v40, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v37, v44, v51, 0, 0, v52);
      v55 = JSC::FTL::Output::load((uint64_t)this + 27640, v53, v54, 2);
      v56 = *((_QWORD *)this + 3472);
      v57 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v58 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), v55, *((_QWORD *)this + 3459));
      JSC::B3::Procedure::addValueImpl(v57, v58);
      *(_QWORD *)v806 = v58;
      v60 = (char **)(v56 + 8);
      v61 = *(unsigned int *)(v56 + 20);
      if ((_DWORD)v61 == *(_DWORD *)(v56 + 16))
      {
        v146 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v60, v61 + 1, (unint64_t)v806);
        v61 = *(unsigned int *)(v56 + 20);
        *(_QWORD *)(*(_QWORD *)(v56 + 8) + 8 * v61) = *(_QWORD *)v146;
        v62 = *(JSC::B3::Value **)v806;
      }
      else
      {
        *(_QWORD *)&(*v60)[8 * v61] = v58;
        v62 = v58;
      }
      *(_DWORD *)(v56 + 20) = v61 + 1;
      *((_QWORD *)v62 + 4) = v56;
      if (BYTE2(v19))
      {
        if (v19 != 9)
          return v55;
      }
      else
      {
        if (v19 != 9)
        {
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)this, *((JSC::DFG::Node **)this + 3528), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x1704, "LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetByValImpl()", "arrayMode.type() == Array::Contiguous");
          __break(0xC471u);
          JUMPOUT(0x197D9A12CLL);
        }
        v63 = JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
        v55 = JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v58, v63, v55, 0);
      }
      v64 = JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 0);
      v64[14] = 0;
      v64[15] = 0;
      *((_BYTE *)v64 + 115) = 1;
      v64[16] = 0xFFFFFFFF00000000;
      *(_QWORD *)v806 = 0;
      v806[8] = 1;
      JSC::B3::StackmapValue::append((__int128 *)v64, (uint64_t)v41, (unint64_t)v806);
      v65 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)(v65 + 8) = 1;
      *(_QWORD *)v65 = off_1E3576348;
      v66 = (unsigned int *)v64[7];
      v64[7] = v65;
      if (!v66)
        return v55;
      v67 = v66 + 2;
      do
      {
        v68 = __ldaxr(v67);
        v69 = --v68 == 0;
      }
      while (__stlxr(v68, v67));
      goto LABEL_38;
    case 8:
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(v18 + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A17CLL);
      }
      v224 = v17;
      v232 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v232)
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A184);
      }
      v805[0] = (uint64_t)v233;
      v241 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 2;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v241)
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A18CLL);
      }
      v242 = v233;
      if (BYTE2(v19) > 1u)
      {
        v800 = BYTE2(v19) == 3 && (*(_BYTE *)(*((_QWORD *)this + 3528) + 58) & 2) == 0;
        v707 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
        v708 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
        v709 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
        v804 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
        v710 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v243, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 304));
        v711 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v242, v710);
        JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v711, v709, v707, 0.0, 1.0, v712, v713, v714, v715);
        *((_QWORD *)this + 3472) = v707;
        v716 = *((_QWORD *)this + 3473);
        *((_QWORD *)this + 3473) = v708;
        v717 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
        if (*(_DWORD *)(*(_QWORD *)this + 164) <= v717)
        {
          __break(0xC471u);
          JUMPOUT(0x197D9A248);
        }
        v720 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, v718, v719, 4);
        v721 = JSC::FTL::Output::doubleNotEqualOrUnordered((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v720, v720);
        JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v721, v709, v708, 0.0, 1.0, v722, v723, v724, v725);
        *((_QWORD *)this + 3472) = v708;
        *((_QWORD *)this + 3473) = v709;
        if (!v800)
        v726 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v720);
        v728 = v727;
        JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v804, v729, v730, v731, v732, v733, v734);
        *((_QWORD *)this + 3472) = v709;
        *((_QWORD *)this + 3473) = v804;
        if (v20 == 3)
        {
          v741 = JSC::FTL::Output::lessThan((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v242, *((JSC::B3::Value **)this + 3457));
          if (v800)
          {
            v743 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), NAN);
            v744 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v743);
            v746 = v745;
            JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v804, v747, v748, v749, v750, v751, v752);
            *((_QWORD *)this + 3472) = v804;
            *((_QWORD *)this + 3473) = v716;
LABEL_273:
            v474 = (_QWORD *)((char *)this + 27640);
            v475 = 4;
LABEL_295:
            v476 = v726;
            v477 = v728;
            v478 = v744;
            v479 = v746;
            return JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v474, v475, v476, v477, v478, v479);
          }
          v782 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
          v744 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v782);
          v746 = v783;
          JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v804, v784, v785, v786, v787, v788, v789);
          *((_QWORD *)this + 3472) = v804;
          *((_QWORD *)this + 3473) = v716;
        }
        else
        {
          v744 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v757);
          v746 = v758;
          JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v804, v759, v760, v761, v762, v763, v764);
          *((_QWORD *)this + 3472) = v804;
          *((_QWORD *)this + 3473) = v716;
          if (v800)
            goto LABEL_273;
        }
        v474 = (_QWORD *)((char *)this + 27640);
        v475 = 2;
        goto LABEL_295;
      }
      v244 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v244)
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A194);
      }
      v245 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v244);
      v246 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v242, 2);
      v255 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 17576), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v243, v246, v253, 0, 0, v254);
      v55 = JSC::FTL::Output::load((uint64_t)this + 27640, v255, v256, 4);
      if (BYTE2(v19))
      {
        v257 = *((_QWORD *)this + 3472);
        v258 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
        v259 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *((_QWORD *)this + 3471), v55, v55);
        JSC::B3::Procedure::addValueImpl(v258, v259);
        *(_QWORD *)v806 = v259;
        v261 = (char **)(v257 + 8);
        v262 = *(unsigned int *)(v257 + 20);
        if ((_DWORD)v262 == *(_DWORD *)(v257 + 16))
        {
          v427 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v261, v262 + 1, (unint64_t)v806);
          v262 = *(unsigned int *)(v257 + 20);
          *(_QWORD *)(*(_QWORD *)(v257 + 8) + 8 * v262) = *(_QWORD *)v427;
          v263 = *(JSC::B3::Value **)v806;
        }
        else
        {
          *(_QWORD *)&(*v261)[8 * v262] = v259;
          v263 = v259;
        }
        *(_DWORD *)(v257 + 20) = v262 + 1;
        *((_QWORD *)v263 + 4) = v257;
      }
      return v55;
    case 10:
    case 11:
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(v18 + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A200);
      }
      *(_QWORD *)v806 = v489;
      v497 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v497)
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A208);
      }
      v498 = v489;
      v810 = (uint64_t)v499;
      v507 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 2;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v507)
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A210);
      }
      v508 = v499;
      if (BYTE2(v19) > 1u)
      {
        v510 = v17;
        v511 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
        v512 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
        v513 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
        v514 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v509, *((const JSC::FTL::AbstractHeap **)this + 832));
        v515 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v508, v514);
        JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v515, v512, v511, 0.0, 1.0, v516, v517, v518, v519);
        *((_QWORD *)this + 3472) = v511;
        v520 = *((_QWORD *)this + 3473);
        *((_QWORD *)this + 3473) = v512;
        v521 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
        if (*(_DWORD *)(*(_QWORD *)this + 164) <= v521)
        {
          __break(0xC471u);
          JUMPOUT(0x197D9A218);
        }
        v524 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, v522, v523, 2);
        v525 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v524);
        v527 = v526;
        v528 = JSC::FTL::Output::isZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v524);
        JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v528, v512, (uint64_t)v513, 0.0, 1.0, v529, v530, v531, v532);
        *((_QWORD *)this + 3472) = v512;
        *((_QWORD *)this + 3473) = v513;
        v544 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v543);
        v546 = v545;
        JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v513, v547, v548, v549, v550, v551, v552);
        *((_QWORD *)this + 3472) = v513;
        *((_QWORD *)this + 3473) = v520;
        v474 = (_QWORD *)((char *)this + 27640);
        v475 = 2;
        v476 = v525;
        v477 = v527;
        v478 = v544;
        v479 = v546;
        return JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v474, v475, v476, v477, v478, v479);
      }
      v575 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v575)
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A230);
      }
      v55 = JSC::FTL::Output::load((uint64_t)this + 27640, v576, v577, 2);
      v578 = JSC::FTL::Output::isZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::B3::Value *)v55);
      return v55;
    case 12:
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(v18 + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A220);
      }
      v553 = v17;
      *(_QWORD *)v806 = v554;
      v562 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v562)
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A228);
      }
      v563 = v554;
      v810 = (uint64_t)v564;
      Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v563, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1648));
      v566 = JSC::FTL::Output::notZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), Ptr);
      v568 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v563, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 1552));
      v569 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v564, v568);
      if (v20 <= 1)
      {
        v571 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v564, 2);
        v573 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 8648), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v563, v571, 0, 0, 0, v572);
        return JSC::FTL::Output::load((uint64_t)this + 27640, v573, v574, 2);
      }
      v666 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v667 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v668 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v569, v667, v666, 0.0, 1.0, v669, v670, v671, v672);
      *((_QWORD *)this + 3472) = v666;
      v673 = *((_QWORD *)this + 3473);
      *((_QWORD *)this + 3473) = v667;
      v674 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v564, 2);
      v676 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 8648), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v563, v674, 0, 0, 0, v675);
      v678 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, v676, v677, 2);
      v679 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v678);
      v681 = v680;
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v668, v682, v683, v684, v685, v686, v687);
      *((_QWORD *)this + 3472) = v667;
      *((_QWORD *)this + 3473) = v668;
      v699 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v698);
      v450 = v700;
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v668, v701, v702, v703, v704, v705, v706);
      *((_QWORD *)this + 3472) = v668;
      *((_QWORD *)this + 3473) = v673;
      v474 = (_QWORD *)((char *)this + 27640);
      v475 = 2;
      v476 = v679;
      v477 = v681;
      v478 = v699;
      goto LABEL_200;
    case 13:
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(v18 + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A238);
      }
      v588 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v588)
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A240);
      }
      v589 = v580;
      v591 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v589, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5008));
      v592 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v590, v591);
      v594 = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v589, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 4960));
      v595 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v594, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5104));
      v596 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v597 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v598 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v599 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v590, v595);
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v599, v597, v596, NAN, NAN, v600, v601, v602, v603);
      *((_QWORD *)this + 3472) = v596;
      v803 = (JSC::B3::BasicBlock *)*((_QWORD *)this + 3473);
      *((_QWORD *)this + 3473) = v597;
      v604 = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v589, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 4864));
      v605 = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v594, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5056));
      v606 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v590, 2);
      v608 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 19560), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v605, v606, 0, 0, 0, v607);
      v610 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, v608, v609, 1);
      v611 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), -1);
      v612 = JSC::FTL::Output::equal((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v610, v611);
      v614 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v610, 2);
      v616 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 9640), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v604, v614, 0, 0, 0, v615);
      v618 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, v616, v617, 2);
      v619 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v618);
      v621 = v620;
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v598, v622, v623, v624, v625, v626, v627);
      *((_QWORD *)this + 3472) = v597;
      *((_QWORD *)this + 3473) = v598;
      v628 = (JSC::B3::Value *)JSC::FTL::Output::loadPtr((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v589, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 4912));
      v629 = JSC::FTL::Output::sub((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v590, v595);
      v630 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v629, 2);
      v632 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 12616), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v628, v630, 0, 0, 0, v631);
      v634 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, v632, v633, 2);
      v635 = JSC::FTL::Output::isZero64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v634);
      v637 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v634);
      v639 = v638;
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v598, v640, v641, v642, v643, v644, v645);
      *((_QWORD *)this + 3472) = v598;
      *((_QWORD *)this + 3473) = v803;
      return JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>((_QWORD *)this + 3455, 2, v619, v621, v637, v639);
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(v18 + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A134);
      }
      v78 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 1;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v78)
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A13CLL);
      }
      v79 = v70;
      v88 = *(_DWORD *)(*((_QWORD *)this + 3528) + 24) + 2;
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= v88)
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A144);
      }
      v89 = v80;
      LOBYTE(v809[0]) = JSC::DFG::toTypedArrayType(v19);
      v91 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v89, 2);
      if ((LOBYTE(v809[0]) - 4) > 7u)
        v92 = 0;
      else
        v92 = qword_1991248F8[(char)(LOBYTE(v809[0]) - 4)];
      v93 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v92);
      v94 = JSC::FTL::Output::shl((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v91, v93);
      v805[0] = (uint64_t)this + 64;
      v805[1] = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v90, v94);
      *(_QWORD *)v806 = v809;
      *(_QWORD *)&v806[8] = this;
      *(_QWORD *)&v806[16] = v805;
      if (BYTE2(v19) - 3 > 1)
      {
        v95 = JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 0);
        v95[14] = 0;
        v95[15] = 0;
        *((_BYTE *)v95 + 115) = 1;
        v95[16] = 0xFFFFFFFF00000000;
        v810 = 0;
        v811 = 1;
        JSC::B3::StackmapValue::append((__int128 *)v95, (uint64_t)v79, (unint64_t)&v810);
        v96 = WTF::fastMalloc((WTF *)0x10);
        *(_DWORD *)(v96 + 8) = 1;
        *(_QWORD *)v96 = off_1E3576348;
        v66 = (unsigned int *)v95[7];
        v95[7] = v96;
        if (v66)
        {
          v97 = v66 + 2;
          do
          {
            v98 = __ldaxr(v97);
            v69 = --v98 == 0;
          }
          while (__stlxr(v98, v97));
LABEL_38:
          if (v69)
          {
            atomic_store(1u, v66 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 8))(v66);
          }
        }
        return v55;
      }
      v445 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v446 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v447 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
      v448 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v447);
      v450 = v449;
      v451 = JSC::DFG::toTypedArrayType(v19);
      if (*(_DWORD *)(*(_QWORD *)this + 164) <= *(_QWORD *)(*((_QWORD *)this + 3528) + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x197D9A1ECLL);
      }
      v456 = (JSC::B3::Value *)JSC::FTL::Output::signExt32To64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v89);
      v457 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v456, (JSC::B3::Value *)v455);
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v457, (uint64_t)v446, v445, 0.0, 1.0, v458, v459, v460, v461);
      *((_QWORD *)this + 3472) = v445;
      v462 = *((_QWORD *)this + 3473);
      *((_QWORD *)this + 3473) = v446;
      if (LOBYTE(v809[0]) - 1 > 6)
      {
      }
      else
      {
      }
      v465 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v464);
      v467 = v466;
      JSC::FTL::Output::jump((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v446, v468, v469, v470, v471, v472, v473);
      *((_QWORD *)this + 3472) = v446;
      *((_QWORD *)this + 3473) = v462;
      v474 = (_QWORD *)((char *)this + 27640);
      v475 = 2;
      v476 = v465;
      v477 = v467;
      v478 = v448;
LABEL_200:
      v479 = v450;
      return JSC::FTL::Output::phi<JSC::FTL::ValueFromBlock>(v474, v475, v476, v477, v478, v479);
    default:
      __break(0xC471u);
      JUMPOUT(0x197D99680);
  }
}

double JSC::FTL::`anonymous namespace'::LowerDFGToB3::setIntTypedArrayLoadResult(uint64_t a1, JSC::B3::Value *a2, int a3, int a4)
{
  unint64_t v6;
  double result;
  uint64_t v8;
  BOOL v9;
  JSC::B3::Value *v11;
  int8x8_t v12;
  JSC::FTL::Output *v13;
  BOOL v14;
  JSC::B3::Value *v15;
  JSC::B3::Value *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;

  if (a3 == 7 || a3 == 11)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 28224) + 64);
    if (v8)
      v9 = (v8 & 0xFFFFFFFCFFFFFFFFLL) == 0;
    else
      v9 = 0;
    if (!v9 || a4 == 0)
    {
      v13 = (JSC::FTL::Output *)(a1 + 27640);
      if (v8)
        v14 = (v8 & 0xFFFFFFF0FFFFFFFFLL) == 0;
      else
        v14 = 0;
      if (v14)
      {
        v16 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt(v13, (uint64_t)a2, 2);
      }
      else
      {
        v15 = (JSC::B3::Value *)JSC::FTL::Output::unsignedToDouble(v13, a2);
      }
    }
    else
    {
      v11 = JSC::FTL::Output::lessThan((JSC::FTL::Output *)(a1 + 27640), a2, *(JSC::B3::Value **)(a1 + 27656));
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 28224);
    v6 = *(_QWORD *)(a1 + 28168);
    v18.n128_u64[0] = (unint64_t)a2;
    v18.n128_u64[1] = v6;
    *(_QWORD *)&result = WTF::HashMap<JSC::DFG::Node *,JSC::FTL::LoweredNodeValue,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::FTL::LoweredNodeValue>,WTF::HashTableTraits>::inlineSet<JSC::DFG::Node * const&,JSC::FTL::LoweredNodeValue>((uint64_t)&v17, (uint64_t *)(a1 + 27912), &v19, &v18).n128_u64[0];
  }
  return result;
}

JSC::FTL::IndexedAbstractHeap *JSC::FTL::`anonymous namespace'::LowerDFGToB3::baseIndexWithProvenValue(uint64_t a1, JSC::FTL::IndexedAbstractHeap *a2, JSC::B3::Value *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  JSC::FTL::Output *v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v11 = (JSC::FTL::Output *)(a1 + 27640);
  v12 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)(a1 + 27640), a4, 2);
  return JSC::FTL::IndexedAbstractHeap::baseIndex(a2, v11, a3, v12, v19, a6, 0, v20);
}

unsigned int *JSC::FTL::`anonymous namespace'::LowerDFGToB3::ensureStillAliveHere(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  char v10;

  v3 = JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 0);
  v3[14] = 0;
  v3[15] = 0;
  *((_BYTE *)v3 + 115) = 1;
  v3[16] = 0xFFFFFFFF00000000;
  v9 = 0;
  v10 = 1;
  JSC::B3::StackmapValue::append((__int128 *)v3, (uint64_t)a2, (unint64_t)&v9);
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3576348;
  result = (unsigned int *)v3[7];
  v3[7] = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationGetByValObjectInt);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileStringCharAtImpl(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, int8x8_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  const JSC::FTL::AbstractHeap *v40;
  uint64_t v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  JSC::B3::Value *v44;
  uint64_t v45;
  uint64_t v46;
  JSC::B3::Value *v47;
  JSC::B3::Value *v48;
  JSC::B3::Value *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  JSC::B3::Value *v73;
  JSC::B3::Value *v74;
  JSC::B3::Value *v75;
  JSC::B3::Value *v76;
  uint64_t v77;
  JSC::B3::Value *v78;
  JSC::B3::Value *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char **v84;
  uint64_t v85;
  WTF *v86;
  uint64_t v87;
  uint64_t v88;
  JSC::B3::Value *v89;
  JSC::B3::Value *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  JSC::B3::Value *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  JSC::FTL::IndexedAbstractHeap *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  JSC::B3::Value *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char **v113;
  uint64_t v114;
  WTF *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  JSC::B3::Value *v120;
  JSC::B3::Value *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  JSC::B3::Value *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  JSC::FTL::IndexedAbstractHeap *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  JSC::B3::Value *v138;
  uint64_t v139;
  uint64_t v140;
  char **v141;
  uint64_t v142;
  WTF *v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  JSC::B3::Value *v151;
  JSC::B3::Value *v152;
  char **v153;
  uint64_t v154;
  WTF *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  JSC::B3::Value *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char **v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  JSC::B3::Value *v179;
  uint64_t v180;
  uint64_t v181;
  char **v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  JSC::B3::Value *v187;
  JSC::B3::Value *v188;
  uint64_t v189;
  JSC::FTL::IndexedAbstractHeap *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  JSC::B3::Value *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char **v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int8x8_t v216;
  uint64_t v217;
  int v218;
  int v219;
  JSC::B3::Value *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  unsigned int *v233;
  unsigned int *v234;
  unsigned int v235;
  unsigned int v236;
  uint64_t v237;
  JSC::B3::Value *v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char **v248;
  uint64_t v249;
  uint64_t v250;
  WTF *v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  _QWORD *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t **v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t **v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t **v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t **v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t **v291;
  _QWORD *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t **v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t **v306;
  uint64_t v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  char *v312;
  char *v313;
  char *v314;
  char *v315;
  unint64_t v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  void *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  JSC::JSCell *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  JSC::B3::Value *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  JSC::B3::Value *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  JSC::B3::Value *v366;
  uint64_t v367;
  uint64_t v368;
  WTF *v369;
  uint64_t v370;
  _BYTE v371[64];
  JSC::B3::Value *v372;
  JSC::B3::Value *v373;
  uint64_t *v374;
  __int128 v375;

  v10 = *((_QWORD *)this + 3528);
  v11 = (unint64_t *)(v10 + 24);
  if ((*(_BYTE *)(v10 + 56) & 0x10) != 0)
  {
    v316 = *v11;
    if (*(_DWORD *)(*(_QWORD *)this + 164) <= v316)
    {
      __break(0xC471u);
      goto LABEL_130;
    }
    v11 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v316);
  }
  v12 = *v11;
  v373 = v13;
  v26 = *((_QWORD *)this + 3528);
  if ((*(_BYTE *)(v26 + 56) & 0x10) != 0)
  {
    v317 = *(_DWORD *)(v26 + 24) + 1;
    if (*(_DWORD *)(*(_QWORD *)this + 164) <= v317)
    {
      __break(0xC471u);
      JUMPOUT(0x197D9B74CLL);
    }
    v27 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v317);
  }
  else
  {
    v27 = (unint64_t *)(v26 + 32);
  }
  v372 = v366;
  v29 = JSC::B3::Procedure::addBlock(v28, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v30 = (uint64_t)v29;
  v31 = *((_QWORD *)this + 3473);
  if (v31)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v31, (uint64_t)v29);
  }
  else
  {
    *(_QWORD *)&v375 = v29;
    v256 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v256 = 0u;
    *((_OWORD *)v256 + 1) = 0u;
    v256[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v256;
    v374 = v256;
    v256[2] = v30;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v375, (uint64_t *)&v374, v257, v258, v259, v260, v261, (uint64_t)&v369);
    v32 = v374;
    v262 = (uint64_t **)*((_QWORD *)this + 3479);
    *v374 = (uint64_t)this + 27824;
    v32[1] = (uint64_t)v262;
    *v262 = v32;
    *((_QWORD *)this + 3479) = v32;
  }
  v33 = JSC::B3::Procedure::addBlock(v32, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v34 = (uint64_t)v33;
  v35 = *((_QWORD *)this + 3473);
  if (v35)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v35, (uint64_t)v33);
  }
  else
  {
    *(_QWORD *)&v375 = v33;
    v263 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v263 = 0u;
    *((_OWORD *)v263 + 1) = 0u;
    v263[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v263;
    v374 = v263;
    v263[2] = v34;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v375, (uint64_t *)&v374, v264, v265, v266, v267, v268, (uint64_t)&v369);
    v36 = v374;
    v269 = (uint64_t **)*((_QWORD *)this + 3479);
    *v374 = (uint64_t)this + 27824;
    v36[1] = (uint64_t)v269;
    *v269 = v36;
    *((_QWORD *)this + 3479) = v36;
  }
  v37 = JSC::B3::Procedure::addBlock(v36, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v38 = v37;
  v39 = *((_QWORD *)this + 3473);
  if (v39)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v39, (uint64_t)v37);
  }
  else
  {
    *(_QWORD *)&v375 = v37;
    v270 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v270 = 0u;
    *((_OWORD *)v270 + 1) = 0u;
    v270[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v270;
    v374 = v270;
    v270[2] = v38;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v375, (uint64_t *)&v374, v271, v272, v273, v274, v275, (uint64_t)&v369);
    v276 = v374;
    v277 = (uint64_t **)*((_QWORD *)this + 3479);
    *v374 = (uint64_t)this + 27824;
    v276[1] = (uint64_t)v277;
    *v277 = v276;
    *((_QWORD *)this + 3479) = v276;
  }
  v361 = (uint64_t)v38;
  v40 = (const JSC::FTL::AbstractHeap *)*((_QWORD *)this + 3313);
  v41 = *((_QWORD *)v40 + 3);
  v42 = (uint64_t)v13;
  if (v41)
  {
    v43 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v41);
    v42 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v13, v43);
  }
  v44 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, v40, v42, 2);
  v45 = *((_QWORD *)this + 659);
  v46 = (uint64_t)v44;
  if (v45)
  {
    v47 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v45);
    v46 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v44, v47);
  }
  v48 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5248), v46, 1);
  v49 = JSC::FTL::Output::aboveOrEqual((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v366, v48);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v49, v34, v30, 0.0, 1.0, v50, v51, v52, v53);
  *((_QWORD *)this + 3472) = v30;
  v54 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v34;
  v56 = JSC::B3::Procedure::addBlock(v55, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v57 = (uint64_t)v56;
  v58 = *((_QWORD *)this + 3473);
  if (v58)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v58, (uint64_t)v56);
  }
  else
  {
    *(_QWORD *)&v375 = v56;
    v278 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v278 = 0u;
    *((_OWORD *)v278 + 1) = 0u;
    v278[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v278;
    v374 = v278;
    v278[2] = v57;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v375, (uint64_t *)&v374, v279, v280, v281, v282, v283, (uint64_t)&v369);
    v59 = v374;
    v284 = (uint64_t **)*((_QWORD *)this + 3479);
    *v374 = (uint64_t)this + 27824;
    v59[1] = (uint64_t)v284;
    *v284 = v59;
    *((_QWORD *)this + 3479) = v59;
  }
  v60 = JSC::B3::Procedure::addBlock(v59, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v61 = v60;
  v62 = *((_QWORD *)this + 3473);
  v363 = (uint64_t)v60;
  v360 = v54;
  v365 = v34;
  if (v62)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v62, (uint64_t)v60);
  }
  else
  {
    *(_QWORD *)&v375 = v60;
    v285 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v285 = 0u;
    *((_OWORD *)v285 + 1) = 0u;
    v285[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v285;
    v374 = v285;
    v285[2] = v61;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v375, (uint64_t *)&v374, v286, v287, v288, v289, v290, (uint64_t)&v369);
    v63 = v374;
    v291 = (uint64_t **)*((_QWORD *)this + 3479);
    *v374 = (uint64_t)this + 27824;
    v63[1] = (uint64_t)v291;
    *v291 = v63;
    *((_QWORD *)this + 3479) = v63;
  }
  v64 = JSC::B3::Procedure::addBlock(v63, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v65 = (uint64_t)v64;
  v66 = *((_QWORD *)this + 3473);
  if (v66)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v66, (uint64_t)v64);
  }
  else
  {
    *(_QWORD *)&v375 = v64;
    v292 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v292 = 0u;
    *((_OWORD *)v292 + 1) = 0u;
    v292[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v292;
    v374 = v292;
    v292[2] = v65;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v375, (uint64_t *)&v374, v293, v294, v295, v296, v297, (uint64_t)&v369);
    v67 = v374;
    v298 = (uint64_t **)*((_QWORD *)this + 3479);
    *v374 = (uint64_t)this + 27824;
    v67[1] = (uint64_t)v298;
    *v298 = v67;
    *((_QWORD *)this + 3479) = v67;
  }
  v68 = JSC::B3::Procedure::addBlock(v67, *((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v69 = v68;
  v70 = *((_QWORD *)this + 3473);
  if (v70)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v70, (uint64_t)v68);
  }
  else
  {
    *(_QWORD *)&v375 = v68;
    v299 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v299 = 0u;
    *((_OWORD *)v299 + 1) = 0u;
    v299[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v299;
    v374 = v299;
    v299[2] = v69;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, (uint64_t *)&v375, (uint64_t *)&v374, v300, v301, v302, v303, v304, (uint64_t)&v369);
    v305 = v374;
    v306 = (uint64_t **)*((_QWORD *)this + 3479);
    *v374 = (uint64_t)this + 27824;
    v305[1] = (uint64_t)v306;
    *v306 = v305;
    *((_QWORD *)this + 3479) = v305;
  }
  v71 = *((_QWORD *)this + 653);
  v72 = (uint64_t)v44;
  if (v71)
  {
    v73 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v71);
    v72 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v44, v73);
  }
  v74 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5200), v72, 1);
  v75 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 4);
  v76 = JSC::FTL::Output::bitAnd((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v74, v75);
  v77 = *((_QWORD *)this + 3472);
  v78 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v79 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, *((_QWORD *)this + 3471), (uint64_t)v76, *((_QWORD *)this + 3457));
  JSC::B3::Procedure::addValueImpl(v78, v79);
  v369 = v79;
  v84 = (char **)(v77 + 8);
  v85 = *(unsigned int *)(v77 + 20);
  if ((_DWORD)v85 == *(_DWORD *)(v77 + 16))
  {
    v308 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v84, v85 + 1, (unint64_t)&v369);
    v85 = *(unsigned int *)(v77 + 20);
    *(_QWORD *)(*(_QWORD *)(v77 + 8) + 8 * v85) = *(_QWORD *)v308;
    v86 = v369;
  }
  else
  {
    *(_QWORD *)&(*v84)[8 * v85] = v79;
    v86 = v79;
  }
  *(_DWORD *)(v77 + 20) = v85 + 1;
  *((_QWORD *)v86 + 4) = v77;
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v79, v363, v57, NAN, NAN, v80, v81, v82, v83);
  *((_QWORD *)this + 3472) = v57;
  *((_QWORD *)this + 3473) = v363;
  v87 = *((_QWORD *)this + 647);
  v88 = (uint64_t)v44;
  if (v87)
  {
    v89 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v87);
    v88 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v44, v89);
  }
  v90 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5152), v88, 2);
  v91 = *((_QWORD *)this + 3528);
  v364 = (uint64_t)v69;
  v362 = (uint64_t)v13;
  if ((*(_BYTE *)(v91 + 56) & 0x10) != 0)
  {
    v318 = *(_DWORD *)(v91 + 24) + 1;
    if (*(_DWORD *)(*(_QWORD *)this + 164) <= v318)
    {
      __break(0xC471u);
      JUMPOUT(0x197D9B754);
    }
    v92 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v318);
  }
  else
  {
    v92 = (unint64_t *)(v91 + 32);
  }
  v93 = *v92;
  v94 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v366, 2);
  v103 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 14600), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v90, v94, v101, 0, 0, v102);
  v105 = JSC::FTL::Output::load8ZeroExt32((_QWORD *)this + 3455, (uint64_t)v103, v104);
  v106 = *((_QWORD *)this + 3472);
  v107 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v108 = *((_QWORD *)this + 3471);
  v109 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v109 + 8) = -1;
  *(_WORD *)(v109 + 12) = 152;
  *(_BYTE *)(v109 + 20) = 1;
  *(_QWORD *)v109 = &unk_1E357EDA0;
  *(_DWORD *)(v109 + 16) = 0;
  *(_QWORD *)(v109 + 40) = 0;
  *(_QWORD *)(v109 + 48) = v105;
  *(_QWORD *)(v109 + 24) = v108;
  *(_QWORD *)(v109 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v107, (JSC::B3::Value *)v109);
  v369 = (WTF *)v109;
  v113 = (char **)(v106 + 8);
  v114 = *(unsigned int *)(v106 + 20);
  if ((_DWORD)v114 == *(_DWORD *)(v106 + 16))
  {
    v309 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v113, v114 + 1, (unint64_t)&v369);
    v114 = *(unsigned int *)(v106 + 20);
    *(_QWORD *)(*(_QWORD *)(v106 + 8) + 8 * v114) = *(_QWORD *)v309;
    v115 = v369;
  }
  else
  {
    *(_QWORD *)&(*v113)[8 * v114] = v109;
    v115 = (WTF *)v109;
  }
  *(_DWORD *)(v106 + 20) = v114 + 1;
  *((_QWORD *)v115 + 4) = v106;
  v116 = *((_QWORD *)this + 3472);
  v117 = *((_QWORD *)this + 3470);
  v118 = *((_QWORD *)this + 3471);
  v369 = (WTF *)v65;
  LOBYTE(v370) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v116, v117, 154, v118, (uint64_t *)&v369, v110, v111, v112);
  *((_QWORD *)this + 3472) = v363;
  *((_QWORD *)this + 3473) = v364;
  v119 = *((_QWORD *)this + 647);
  if (v119)
  {
    v120 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v119);
    v44 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v44, v120);
  }
  v121 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)this + 27640, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 5152), (uint64_t)v44, 2);
  v122 = *((_QWORD *)this + 3528);
  if ((*(_BYTE *)(v122 + 56) & 0x10) == 0)
  {
    v123 = (unint64_t *)(v122 + 32);
    goto LABEL_36;
  }
  v319 = *(_DWORD *)(v122 + 24) + 1;
  if (*(_DWORD *)(*(_QWORD *)this + 164) <= v319)
  {
    __break(0xC471u);
LABEL_130:
    JUMPOUT(0x197D9B744);
  }
  v123 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)this + 152) + 8 * v319);
LABEL_36:
  v124 = *v123;
  v125 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)v366, 2);
  v134 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 15592), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v121, v125, v132, 0, 0, v133);
  v136 = JSC::FTL::Output::load16ZeroExt32((_QWORD *)this + 3455, (uint64_t)v134, v135);
  v374 = (uint64_t *)v136;
  v137 = *((_QWORD *)this + 3472);
  v138 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v139 = *((_QWORD *)this + 3471);
  v140 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v140 + 8) = -1;
  *(_WORD *)(v140 + 12) = 152;
  *(_DWORD *)(v140 + 16) = 0;
  *(_BYTE *)(v140 + 20) = 1;
  *(_QWORD *)v140 = &unk_1E357EDA0;
  *(_QWORD *)(v140 + 40) = 0;
  *(_QWORD *)(v140 + 48) = v136;
  *(_QWORD *)(v140 + 24) = v139;
  *(_QWORD *)(v140 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v138, (JSC::B3::Value *)v140);
  v369 = (WTF *)v140;
  v141 = (char **)(v137 + 8);
  v142 = *(unsigned int *)(v137 + 20);
  if ((_DWORD)v142 == *(_DWORD *)(v137 + 16))
  {
    v310 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v141, v142 + 1, (unint64_t)&v369);
    v142 = *(unsigned int *)(v137 + 20);
    *(_QWORD *)(*(_QWORD *)(v137 + 8) + 8 * v142) = *(_QWORD *)v310;
    v143 = v369;
  }
  else
  {
    *(_QWORD *)&(*v141)[8 * v142] = v140;
    v143 = (WTF *)v140;
  }
  *(_DWORD *)(v137 + 20) = v142 + 1;
  *((_QWORD *)v143 + 4) = v137;
  v144 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 255);
  v145 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v136 + 352))(v136, v144);
  if (v145 == 2)
  {
    v150 = *((_QWORD *)this + 3472);
    v151 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
    v152 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(57, *((_QWORD *)this + 3471), v136, v144);
    JSC::B3::Procedure::addValueImpl(v151, v152);
    v369 = v152;
    v153 = (char **)(v150 + 8);
    v154 = *(unsigned int *)(v150 + 20);
    if ((_DWORD)v154 == *(_DWORD *)(v150 + 16))
    {
      v315 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v153, v154 + 1, (unint64_t)&v369);
      v154 = *(unsigned int *)(v150 + 20);
      *(_QWORD *)(*(_QWORD *)(v150 + 8) + 8 * v154) = *(_QWORD *)v315;
      v155 = v369;
    }
    else
    {
      *(_QWORD *)&(*v153)[8 * v154] = v152;
      v155 = v152;
    }
    *(_DWORD *)(v150 + 20) = v154 + 1;
    *((_QWORD *)v155 + 4) = v150;
  }
  else
  {
    v359 = 27648;
    if (v145 == 1)
      v359 = 27640;
    v152 = *(JSC::B3::Value **)((char *)this + v359);
  }
  JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v152, v364, v65, 0.0, 1.0, v146, v147, v148, v149);
  *((_QWORD *)this + 3472) = v364;
  *((_QWORD *)this + 3473) = v65;
  v369 = (WTF *)v371;
  v370 = 4;
  v162 = *((_QWORD *)this + 3472);
  v163 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v164 = *((_QWORD *)this + 3471);
  v165 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v165 + 8) = -1;
  *(_WORD *)(v165 + 12) = 152;
  *(_DWORD *)(v165 + 16) = 0;
  *(_BYTE *)(v165 + 20) = 1;
  *(_QWORD *)v165 = &unk_1E357EDA0;
  *(_QWORD *)(v165 + 40) = 0;
  *(_QWORD *)(v165 + 48) = v161;
  *(_QWORD *)(v165 + 24) = v164;
  *(_QWORD *)(v165 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v163, (JSC::B3::Value *)v165);
  *(_QWORD *)&v375 = v165;
  v172 = (char **)(v162 + 8);
  v173 = *(unsigned int *)(v162 + 20);
  if ((_DWORD)v173 == *(_DWORD *)(v162 + 16))
  {
    v311 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v172, v173 + 1, (unint64_t)&v375);
    v173 = *(unsigned int *)(v162 + 20);
    *(_QWORD *)(*(_QWORD *)(v162 + 8) + 8 * v173) = *(_QWORD *)v311;
    v174 = v375;
  }
  else
  {
    *(_QWORD *)&(*v172)[8 * v173] = v165;
    v174 = v165;
  }
  *(_DWORD *)(v162 + 20) = v173 + 1;
  *(_QWORD *)(v174 + 32) = v162;
  v175 = *((_QWORD *)this + 3472);
  *(_QWORD *)&v375 = v165;
  *((_QWORD *)&v375 + 1) = v175;
  if (HIDWORD(v370) == (_DWORD)v370)
  {
    WTF::Vector<JSC::FTL::ValueFromBlock,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v369, (unint64_t)&v375, v166, v167, v168, v169, v170, v171);
  }
  else
  {
    *((_OWORD *)v369 + HIDWORD(v370)) = v375;
    ++HIDWORD(v370);
  }
  v176 = *((_QWORD *)this + 3472);
  v177 = *((_QWORD *)this + 3470);
  v178 = *((_QWORD *)this + 3471);
  *(_QWORD *)&v375 = v361;
  BYTE8(v375) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v176, v177, 154, v178, (uint64_t *)&v375, v169, v170, v171);
  *((_QWORD *)this + 3472) = v65;
  *((_QWORD *)this + 3473) = v365;
  v179 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v180 = *((_QWORD *)this + 3471);
  v181 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v181 = off_1E357F5F0;
  *(_DWORD *)(v181 + 8) = -1;
  *(_WORD *)(v181 + 12) = 153;
  *(_DWORD *)(v181 + 16) = 1;
  *(_BYTE *)(v181 + 20) = 0;
  *(_QWORD *)(v181 + 24) = v180;
  *(_QWORD *)(v181 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v179, (JSC::B3::Value *)v181);
  *(_QWORD *)&v375 = v181;
  v182 = (char **)(v65 + 8);
  v183 = *(unsigned int *)(v65 + 20);
  if ((_DWORD)v183 == *(_DWORD *)(v65 + 16))
  {
    v312 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v182, v183 + 1, (unint64_t)&v375);
    v183 = *(unsigned int *)(v65 + 20);
    *(_QWORD *)(*(_QWORD *)(v65 + 8) + 8 * v183) = *(_QWORD *)v312;
    v184 = v375;
  }
  else
  {
    *(_QWORD *)&(*v182)[8 * v183] = v181;
    v184 = v181;
  }
  *(_DWORD *)(v65 + 20) = v183 + 1;
  *(_QWORD *)(v184 + 32) = v65;
  if ((*(_WORD *)(v109 + 12) & 0xFFF) == 0x98)
    v185 = v109;
  else
    v185 = 0;
  *(_QWORD *)(v185 + 40) = v181;
  if ((*(_WORD *)(v140 + 12) & 0xFFF) == 0x98)
    v186 = v140;
  else
    v186 = 0;
  *(_QWORD *)(v186 + 40) = v181;
  v187 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), *(_QWORD *)(*(_QWORD *)this + 16) + 42216);
  v188 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, v181, 2);
  v190 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 20552), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v187, v188, 0, 0, 0, v189);
  v192 = JSC::FTL::Output::load((uint64_t)this + 27640, v190, v191, 2);
  v193 = *((_QWORD *)this + 3472);
  v194 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v195 = *((_QWORD *)this + 3471);
  v196 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v196 + 8) = -1;
  *(_WORD *)(v196 + 12) = 152;
  *(_DWORD *)(v196 + 16) = 0;
  *(_BYTE *)(v196 + 20) = 1;
  *(_QWORD *)v196 = &unk_1E357EDA0;
  *(_QWORD *)(v196 + 40) = 0;
  *(_QWORD *)(v196 + 48) = v192;
  *(_QWORD *)(v196 + 24) = v195;
  *(_QWORD *)(v196 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v194, (JSC::B3::Value *)v196);
  *(_QWORD *)&v375 = v196;
  v203 = (char **)(v193 + 8);
  v204 = *(unsigned int *)(v193 + 20);
  if ((_DWORD)v204 == *(_DWORD *)(v193 + 16))
  {
    v313 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v203, v204 + 1, (unint64_t)&v375);
    v204 = *(unsigned int *)(v193 + 20);
    *(_QWORD *)(*(_QWORD *)(v193 + 8) + 8 * v204) = *(_QWORD *)v313;
    v205 = v375;
  }
  else
  {
    *(_QWORD *)&(*v203)[8 * v204] = v196;
    v205 = v196;
  }
  *(_DWORD *)(v193 + 20) = v204 + 1;
  *(_QWORD *)(v205 + 32) = v193;
  v206 = *((_QWORD *)this + 3472);
  *(_QWORD *)&v375 = v196;
  *((_QWORD *)&v375 + 1) = v206;
  if (HIDWORD(v370) == (_DWORD)v370)
  {
    WTF::Vector<JSC::FTL::ValueFromBlock,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v369, (unint64_t)&v375, v197, v198, v199, v200, v201, v202);
  }
  else
  {
    *((_OWORD *)v369 + HIDWORD(v370)) = v375;
    ++HIDWORD(v370);
  }
  v207 = *((_QWORD *)this + 3472);
  v208 = *((_QWORD *)this + 3470);
  v209 = *((_QWORD *)this + 3471);
  *(_QWORD *)&v375 = v361;
  BYTE8(v375) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v207, v208, 154, v209, (uint64_t *)&v375, v200, v201, v202);
  *((_QWORD *)this + 3472) = v365;
  *((_QWORD *)this + 3473) = v361;
  v217 = *((_QWORD *)this + 3528);
  v218 = *(unsigned __int16 *)(v217 + 18);
  if (v218 == 229)
  {
  }
  else
  {
    if (v218 == 146)
      v219 = *(_DWORD *)(v217 + 80);
    else
      v219 = *(_DWORD *)(v217 + 72);
    if ((v219 & 0xFE0000) == 0)
    {
      v220 = (JSC::B3::Value *)*((_QWORD *)this + 3460);
      goto LABEL_63;
    }
    v320 = *(_QWORD *)this;
    JSC::CodeOrigin::CodeOrigin(&v368, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 28192));
    v334 = (JSC::JSCell *)JSC::DFG::Graph::globalObjectFor(v320, &v368, v321, v322, v323, v324, v325, v326);
    if ((v368 & 1) != 0 && (v368 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v368 & 0xFFFFFFFF8, v327, v328, v329, v330, v331, v332, v333);
    if (JSC::DFG::Graph::isWatchingStringPrototypeChainIsSaneWatchpoint(*(JSC::DFG::Graph **)this, *((JSC::DFG::Node **)this + 3528)))
    {
      v341 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
      v342 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 10);
      *(_QWORD *)&v375 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v342);
      *((_QWORD *)&v375 + 1) = v343;
      if (HIDWORD(v370) == (_DWORD)v370)
      {
        WTF::Vector<JSC::FTL::ValueFromBlock,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v369, (unint64_t)&v375, v344, v345, v346, v347, v348, v349);
      }
      else
      {
        *((_OWORD *)v369 + HIDWORD(v370)) = v375;
        ++HIDWORD(v370);
      }
      v350 = JSC::FTL::Output::lessThan((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v366, *((JSC::B3::Value **)this + 3457));
      JSC::FTL::Output::branch((_QWORD *)this + 3455, (uint64_t)v350, v341, v361, 0.0, 1.0, v351, v352, v353, v354);
      *((_QWORD *)this + 3472) = v341;
      *((_QWORD *)this + 3473) = v361;
    }
  }
  v220 = (JSC::B3::Value *)v307;
LABEL_63:
  *(_QWORD *)&v375 = JSC::FTL::Output::anchor((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v220);
  *((_QWORD *)&v375 + 1) = v221;
  if (HIDWORD(v370) == (_DWORD)v370)
  {
    WTF::Vector<JSC::FTL::ValueFromBlock,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v369, (unint64_t)&v375, v222, v223, v224, v225, v226, v227);
  }
  else
  {
    *((_OWORD *)v369 + HIDWORD(v370)) = v375;
    ++HIDWORD(v370);
  }
  v228 = *((_QWORD *)this + 3472);
  v229 = *((_QWORD *)this + 3470);
  v230 = *((_QWORD *)this + 3471);
  *(_QWORD *)&v375 = v361;
  BYTE8(v375) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v228, v229, 154, v230, (uint64_t *)&v375, v225, v226, v227);
  *((_QWORD *)this + 3472) = v361;
  *((_QWORD *)this + 3473) = v360;
  v231 = JSC::FTL::Output::patchpoint((_QWORD *)this + 3455, 0);
  v231[14] = 0;
  v231[15] = 0;
  *((_BYTE *)v231 + 115) = 1;
  v231[16] = 0xFFFFFFFF00000000;
  *(_QWORD *)&v375 = 0;
  BYTE8(v375) = 1;
  JSC::B3::StackmapValue::append((__int128 *)v231, v362, (unint64_t)&v375);
  v232 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v232 + 8) = 1;
  *(_QWORD *)v232 = off_1E3576348;
  v233 = (unsigned int *)v231[7];
  v231[7] = v232;
  if (v233)
  {
    v234 = v233 + 2;
    do
    {
      v235 = __ldaxr(v234);
      v236 = v235 - 1;
    }
    while (__stlxr(v236, v234));
    if (!v236)
    {
      atomic_store(1u, v233 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v233 + 8))(v233);
    }
  }
  v237 = *((_QWORD *)this + 3472);
  v238 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v239 = *((_QWORD *)this + 3471);
  v240 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v240 = off_1E357F5F0;
  *(_DWORD *)(v240 + 8) = -1;
  *(_WORD *)(v240 + 12) = 153;
  *(_DWORD *)(v240 + 16) = 2;
  *(_BYTE *)(v240 + 20) = 0;
  *(_QWORD *)(v240 + 24) = v239;
  *(_QWORD *)(v240 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v238, (JSC::B3::Value *)v240);
  *(_QWORD *)&v375 = v240;
  v248 = (char **)(v237 + 8);
  v249 = *(unsigned int *)(v237 + 20);
  if ((_DWORD)v249 == *(_DWORD *)(v237 + 16))
  {
    v314 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v248, v249 + 1, (unint64_t)&v375);
    v249 = *(unsigned int *)(v237 + 20);
    *(_QWORD *)(*(_QWORD *)(v237 + 8) + 8 * v249) = *(_QWORD *)v314;
    v250 = v375;
  }
  else
  {
    *(_QWORD *)&(*v248)[8 * v249] = v240;
    v250 = v240;
  }
  *(_DWORD *)(v237 + 20) = v249 + 1;
  *(_QWORD *)(v250 + 32) = v237;
  v251 = v369;
  if (HIDWORD(v370))
  {
    v252 = 16 * HIDWORD(v370);
    v253 = (_QWORD *)((char *)v369 + 8);
    do
    {
      v254 = *(v253 - 1);
      if (v254 || *v253)
      {
        if ((*(_WORD *)(v254 + 12) & 0xFFF) != 0x98)
          v254 = 0;
        *(_QWORD *)(v254 + 40) = v240;
      }
      v253 += 2;
      v252 -= 16;
    }
    while (v252);
  }
  if (v371 != (_BYTE *)v251 && v251)
  {
    v369 = 0;
    LODWORD(v370) = 0;
    WTF::fastFree((unint64_t)v251, v241, v242, v243, v244, v245, v246, v247);
  }
  return v240;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::pointerIntoTypedArray(uint64_t a1, JSC::B3::Value *a2, uint64_t a3, char a4)
{
  JSC::FTL::Output *v7;
  JSC::B3::Value *v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  JSC::B3::Value *v11;

  v7 = (JSC::FTL::Output *)(a1 + 27640);
  v8 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)(a1 + 27640), a3, 2);
  if ((a4 - 4) > 7u)
    v9 = 0;
  else
    v9 = qword_1991248F8[(char)(a4 - 4)];
  v10 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v7, v9);
  v11 = JSC::FTL::Output::shl(v7, v8, v10);
  JSC::FTL::Output::add(v7, a2, v11);
  return a1 + 64;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValImpl(void)::{lambda(void)#1}::operator()(unsigned __int8 **a1)
{
  JSC::DFG::Graph **v1;
  unsigned int v2;
  unsigned __int8 *v3;
  const JSC::FTL::AbstractHeap *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v11;
  int v12;
  JSC::FTL::Output *v14;
  JSC::B3::Value *v15;
  int v16;
  unsigned __int8 *v18;

  v1 = (JSC::DFG::Graph **)a1[1];
  v2 = **a1;
  if (v2 - 1 > 6)
  {
    if (v2 == 8)
    {
      v14 = (JSC::FTL::Output *)(v1 + 3455);
      v15 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)(v1 + 3455), *(const JSC::FTL::AbstractHeap **)a1[2], *((_QWORD *)a1[2] + 1), 3);
      return (JSC::B3::Value *)JSC::FTL::Output::floatToDouble(v14, v15);
    }
    if (v2 == 9)
    {
      v18 = a1[2];
      v4 = *(const JSC::FTL::AbstractHeap **)v18;
      v5 = *((_QWORD *)v18 + 1);
      v8 = (uint64_t)(v1 + 3455);
      v9 = 4;
      return (JSC::B3::Value *)JSC::FTL::Output::load(v8, v4, v5, v9);
    }
    JSC::DFG::Graph::logAssertionFailure(*v1, v1[3528], (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x1897, "auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetByValImpl()::(anonymous class)::operator()() const", "Bad typed array type");
    __break(0xC471u);
LABEL_28:
    JUMPOUT(0x197D9B9B8);
  }
  v3 = a1[2];
  v4 = *(const JSC::FTL::AbstractHeap **)v3;
  v5 = *((_QWORD *)v3 + 1);
  if ((v2 - 4) > 3u)
    LOBYTE(v6) = 0;
  else
    v6 = qword_199124938[(char)(v2 - 4)];
  v7 = 1 << v6;
  if (v7 == 4)
  {
    v8 = (uint64_t)(v1 + 3455);
    v9 = 1;
    return (JSC::B3::Value *)JSC::FTL::Output::load(v8, v4, v5, v9);
  }
  if (v7 == 1)
  {
    v11 = v2 > 6;
    v12 = (1 << v2) & 0x52;
    if (v11 || v12 == 0)
      return (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(v1 + 3455, (uint64_t)v4, v5);
    else
      return JSC::FTL::Output::load8SignExt32((uint64_t)(v1 + 3455), v4, v5);
  }
  if (v7 != 2)
  {
    JSC::DFG::Graph::logAssertionFailure(*v1, v1[3528], (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x4F0E, "LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::loadFromIntTypedArray(TypedPointer, TypedArrayType)", "Bad element size");
    __break(0xC471u);
    goto LABEL_28;
  }
  v11 = v2 > 6;
  v16 = (1 << v2) & 0x52;
  if (v11 || v16 == 0)
    return (JSC::B3::Value *)JSC::FTL::Output::load16ZeroExt32(v1 + 3455, (uint64_t)v4, v5);
  else
    return JSC::FTL::Output::load16SignExt32((uint64_t)(v1 + 3455), v4, v5);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValImpl(void)::{lambda(JSC::B3::Value *)#1}::operator()(char a1, JSC::B3::Value **this, JSC::B3::Value *a3)
{
  uint64_t v7;
  JSC::FTL::Output *v8;
  BOOL v9;
  JSC::B3::Value *v10;
  JSC::B3::Value *v11;
  int8x8_t v12;

  if (a1 != 7 && a1 != 11)
  v7 = *((_QWORD *)this[3528] + 8);
  v8 = (JSC::FTL::Output *)(this + 3455);
  if (v7)
    v9 = (v7 & 0xFFFFFFFCFFFFFFFFLL) == 0;
  else
    v9 = 0;
  if (v9)
  {
    v11 = JSC::FTL::Output::lessThan(v8, a3, this[3457]);
  }
  v10 = (JSC::B3::Value *)JSC::FTL::Output::unsignedToDouble(v8, a3);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValImpl(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValImpl(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValImpl(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const void **this)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  char *v28;
  char v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  JSC::JITGetByValGenerator *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  const void *v63;
  uint64_t v64;
  _OWORD *v65;
  uint64_t v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  WTF *v70;
  void *v71;
  WTF *v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  WTF *v102;
  unsigned int v103;
  unsigned int v104;
  _BYTE *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  _BYTE *v112;
  unsigned int v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  JSC::RegisterSetBuilder *v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  JSC::AssemblerBuffer *v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  JSC::AssemblerBuffer *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  char v149;
  _BYTE v150[12];
  unint64_t v151;
  char v152;
  uint64_t v153;
  const void *v154;
  _OWORD *v155;
  int v156;
  int v157;
  void *v158;
  int v159;
  int v160;
  void *v161;
  int v162;
  int v163;
  const void *v164;
  uint64_t v165;
  unsigned int *v166;
  char v167;
  char v168;
  char v169;
  int v170;
  WTF *v171;
  uint64_t v172;
  _OWORD v173[8];
  unsigned int *v174;

  if ((_BYTE)word_1ECF4C286)
  {
    *(_QWORD *)&v173[0] = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)this);
    *((_QWORD *)&v173[0] + 1) = v116;
    v117 = (JSC::RegisterSetBuilder *)JSC::B3::StackmapGenerationParams::usedRegisters((JSC::B3::StackmapGenerationParams *)this);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [38],JSC::RegisterSetBuilder,char [8],JSC::RegisterSetBuilder>(a2, (JSC::RegisterSetBuilder *)v173, v117);
  }
  v147 = *(_BYTE *)(a2 + 212);
  if (!v147)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v6 & 1) != 0)
  {
    v118 = *(_QWORD *)(v6 & 0xFFFFFFFF8);
    if ((v6 & 2) != 0
      || ((v119 = *(unsigned int *)((v6 & 0xFFFFFFFF8) + 8), (_DWORD)v119 != 0x3FFFFFFF)
        ? (v120 = (_DWORD)v119 == -1)
        : (v120 = 1),
          v120))
    {
      v121 = 2;
    }
    else if (v119 >> 28)
    {
      v142 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v142 = v118;
      *(_DWORD *)(v142 + 8) = v119;
      v121 = 1;
      v118 = v142;
    }
    else
    {
      v121 = *(_QWORD *)(v6 & 0xFFFFFFFF8);
      v118 = v119 << 36;
    }
    v6 = v118 | v121;
  }
  v172 = v6;
  v15 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v7, &v172);
  if ((v172 & 1) != 0 && (v172 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v172 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), (const JSC::B3::StackmapGenerationParams *)this, (uint64_t *)v173);
  v16 = *(unsigned int **)&v173[0];
  JSC::FTL::ExceptionTarget::jumps(*(JSC::FTL::ExceptionTarget **)&v173[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v171);
  *(_QWORD *)&v173[0] = 0;
  if (v16)
  {
    do
    {
      v24 = __ldaxr(v16);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v16));
    if (!v25)
    {
      atomic_store(1u, v16);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v16, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
    }
  }
  v26 = v15;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 32), (uint64_t)this, v15, v19, v20, v21, v22, v23);
  v27 = *((_DWORD *)this + 5);
  if (!v27)
  {
    __break(0xC471u);
    goto LABEL_117;
  }
  if (v27 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D9C3F4);
  }
  if (v27 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D9C3FCLL);
  }
  v28 = (char *)this[1];
  v29 = *v28;
  v30 = v28[16];
  v31 = v28[32];
  if (HIBYTE(qword_1ECF4C780))
  {
    if (!*((_DWORD *)this + 9))
    {
LABEL_116:
      __break(0xC471u);
LABEL_117:
      JUMPOUT(0x197D9C3ECLL);
    }
    v32 = *(_BYTE *)this[3];
  }
  else
  {
    v32 = -1;
  }
  v149 = v32;
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v34 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v34 = 2;
  *(_DWORD *)(v34 + 96) = 0;
  *(_OWORD *)(v34 + 12) = 0u;
  *(_OWORD *)(v34 + 28) = 0u;
  *(_DWORD *)(v34 + 44) = 0;
  *(_QWORD *)(v34 + 64) = 0;
  *(_QWORD *)(v34 + 72) = 0;
  *(_QWORD *)(v34 + 56) = 0;
  *(_QWORD *)(v34 + 104) = 0;
  *(_QWORD *)(v34 + 112) = -1;
  *(_WORD *)(v34 + 120) = -1;
  *(_DWORD *)(v34 + 122) = 0x10000;
  *(_BYTE *)(v34 + 126) = 0;
  *(_BYTE *)(v34 + 127) = BYTE12(xmmword_1ECF4C260);
  *(_BYTE *)(v34 + 128) = 0;
  *(_WORD *)(v34 + 129) &= 0xFC00u;
  *(_QWORD *)(v34 + 136) = 0;
  *(_QWORD *)(v34 + 136) = *(_QWORD *)(v33 + 168);
  *(_QWORD *)(v33 + 168) = v34;
  *(_WORD *)(v34 + 129) = *(_WORD *)(v34 + 129) & 0xFDFF | (HIBYTE(qword_1ECF4C780) << 9);
  v35 = *(_QWORD *)(a2 + 336);
  v36 = *((_QWORD *)*this + 13);
  v37 = ~*(_QWORD *)(*((_QWORD *)this[7] + 6) + 216) & 0xFF003FF80000 | *((_QWORD *)*this + 12);
  v38 = *((unsigned int *)this + 9);
  if ((_DWORD)v38)
  {
    v105 = this[3];
    do
    {
      v106 = *v105 & 0x7F;
      if (v106 >= 0x40)
        goto LABEL_115;
      v107 = 1 << v106;
      v37 &= ~v107;
      v36 &= ~v107;
      ++v105;
    }
    while (--v38);
  }
  v39 = *((unsigned int *)this + 13);
  if ((_DWORD)v39)
  {
    v112 = this[5];
    while (1)
    {
      v113 = (*v112 + 32) & 0x7F;
      if (v113 >= 0x40)
        break;
      v114 = 1 << v113;
      v37 &= ~v114;
      v36 &= ~v114;
      ++v112;
      if (!--v39)
        goto LABEL_18;
    }
LABEL_115:
    __break(1u);
    goto LABEL_116;
  }
LABEL_18:
  v40 = v29 & 0x7F;
  v41 = v30 & 0x7F;
  v148 = v31 & 0x7F;
  *(_QWORD *)&v173[0] = v37;
  *((_QWORD *)&v173[0] + 1) = v36;
  v42 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v42 = 1;
  v43 = (JSC::JITGetByValGenerator *)(v42 + 8);
  v44 = *(_QWORD *)(a1 + 24);
  if ((v44 & 1) != 0)
  {
    v122 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
    if ((v44 & 2) != 0
      || ((v123 = *(unsigned int *)((v44 & 0xFFFFFFFF8) + 8), (_DWORD)v123 != 0x3FFFFFFF)
        ? (v124 = (_DWORD)v123 == -1)
        : (v124 = 1),
          v124))
    {
      v125 = 2;
    }
    else if (v123 >> 28)
    {
      v145 = *(_DWORD *)((v44 & 0xFFFFFFFF8) + 8);
      v146 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
      v122 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v122 = v146;
      *(_DWORD *)(v122 + 8) = v145;
      v125 = 1;
    }
    else
    {
      v125 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
      v122 = v123 << 36;
    }
    v44 = v122 | v125;
  }
  *(_QWORD *)v150 = v44;
  BYTE1(v144) = v149;
  LOBYTE(v144) = -1;
  JSC::JITGetByValGenerator::JITGetByValGenerator((uint64_t)v43, v35, v34, 0, 0, (uint64_t *)v150, v26, 4, (uint64_t)v173, v41, SHIDWORD(v41), v148, SHIDWORD(v148), v40, v144);
  if ((v150[0] & 1) != 0 && (*(_QWORD *)v150 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(*(_QWORD *)v150 & 0xFFFFFFFF8, v45, v46, v47, v48, v49, v50, v51);
  *(_WORD *)(*(_QWORD *)(v42 + 16) + 129) = *(_WORD *)(*(_QWORD *)(v42 + 16) + 129) & 0xFFDF | (32
                                                                                                  * (*(_BYTE *)(a1 + 40) & 7));
  *(_WORD *)(*(_QWORD *)(v42 + 16) + 129) = *(_WORD *)(*(_QWORD *)(v42 + 16) + 129) & 0xFFBF | ((*(_BYTE *)(a1 + 41) & 3) << 6);
  *(_WORD *)(*(_QWORD *)(v42 + 16) + 129) = *(_WORD *)(*(_QWORD *)(v42 + 16) + 129) & 0xFF7F | ((*(_BYTE *)(a1 + 42) & 1) << 7);
  if (*(_BYTE *)(a1 + 43))
  {
    v52 = -1;
    v53 = 0xFF000F4100000000;
  }
  else
  {
    JSC::MacroAssemblerARM64::branchTest64(a2, 1, v41, 28, v48, v49, v50, v51, (uint64_t)v173);
    v52 = v173[0];
    v53 = *(_QWORD *)((char *)v173 + 4);
  }
  JSC::JITGetByValGenerator::generateFastPath(v43, (JSC::CCallHelpers *)a2, v46, v47, v48, v49, v50, v51);
  v61 = *(_DWORD *)(a2 + 200);
  if (v61 < *(_DWORD *)(a2 + 52))
  {
    v126 = (JSC::AssemblerBuffer *)(a2 + 56);
    do
    {
      if ((v61 + 4) > *(_DWORD *)(a2 + 192))
      {
        v141 = v126;
        JSC::AssemblerBuffer::outOfLineGrow(v126, v54, v55, v56, v57, v58, v59, v60);
        v126 = v141;
        v61 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v61) = -721215457;
      v61 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v61;
    }
    while (v61 < *(_DWORD *)(a2 + 52));
  }
  *(_DWORD *)(a2 + 208) = 0;
  *(_DWORD *)v150 = v52;
  *(_QWORD *)&v150[4] = v53;
  do
    v62 = __ldaxr((unsigned int *)v42);
  while (__stlxr(v62 + 1, (unsigned int *)v42));
  v151 = v42;
  v152 = v149;
  v63 = *this;
  v153 = *(_QWORD *)(a1 + 16);
  v154 = v63;
  v64 = *((unsigned int *)this + 5);
  v155 = 0;
  v156 = 0;
  v157 = v64;
  if ((_DWORD)v64)
  {
    if (!(v64 >> 28))
    {
      v65 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v64));
      v156 = v64;
      v155 = v65;
      v66 = *((unsigned int *)this + 5);
      if ((_DWORD)v66)
      {
        v67 = (__int128 *)this[1];
        v68 = 16 * v66;
        do
        {
          v69 = *v67++;
          *v65++ = v69;
          v68 -= 16;
        }
        while (v68);
      }
      goto LABEL_30;
    }
    __break(0xC471u);
    goto LABEL_115;
  }
LABEL_30:
  v70 = (WTF *)*((unsigned int *)this + 9);
  v158 = 0;
  v159 = 0;
  v160 = (int)v70;
  if ((_DWORD)v70)
  {
    v71 = (void *)WTF::fastMalloc(v70);
    v159 = (int)v70;
    v158 = v71;
    memcpy(v71, this[3], *((unsigned int *)this + 9));
  }
  v72 = (WTF *)*((unsigned int *)this + 13);
  v161 = 0;
  v162 = 0;
  v163 = (int)v72;
  if ((_DWORD)v72)
  {
    v115 = (void *)WTF::fastMalloc(v72);
    v162 = (int)v72;
    v161 = v115;
    memcpy(v115, this[5], *((unsigned int *)this + 13));
  }
  v164 = this[7];
  v73 = *(_QWORD *)(a1 + 24);
  if ((v73 & 1) != 0)
  {
    v127 = *(_QWORD *)(v73 & 0xFFFFFFFF8);
    if ((v73 & 2) != 0
      || ((v128 = *(unsigned int *)((v73 & 0xFFFFFFFF8) + 8), (_DWORD)v128 != 0x3FFFFFFF)
        ? (v129 = (_DWORD)v128 == -1)
        : (v129 = 1),
          v129))
    {
      v130 = 2;
    }
    else if (v128 >> 28)
    {
      v143 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v143 = v127;
      *(_DWORD *)(v143 + 8) = v128;
      v130 = 1;
      v127 = v143;
    }
    else
    {
      v130 = *(_QWORD *)(v73 & 0xFFFFFFFF8);
      v127 = v128 << 36;
    }
    v73 = v127 | v130;
  }
  v165 = v73;
  v74 = (unsigned int *)v171;
  if (v171)
  {
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 + 1, v74));
  }
  v166 = v74;
  v167 = v40;
  v168 = v41;
  v169 = v148;
  v170 = v61;
  v76 = (uint64_t)this[7];
  v77 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v77 + 8) = 1;
  *(_QWORD *)v77 = off_1E3576398;
  v174 = (unsigned int *)v77;
  v85 = *(unsigned int *)(v76 + 12);
  if ((_DWORD)v85 == *(_DWORD *)(v76 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v76, (uint64_t *)&v174);
    v108 = v174;
    v174 = 0;
    if (v108)
    {
      v109 = v108 + 2;
      do
      {
        v110 = __ldaxr(v109);
        v111 = v110 - 1;
      }
      while (__stlxr(v111, v109));
      if (!v111)
      {
        atomic_store(1u, v108 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v108 + 8))(v108);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v76 + 8 * v85) = v77;
    *(_DWORD *)(v76 + 12) = v85 + 1;
  }
  do
  {
    v100 = __ldaxr((unsigned int *)v42);
    v101 = v100 - 1;
  }
  while (__stlxr(v101, (unsigned int *)v42));
  if (!v101)
  {
    atomic_store(1u, (unsigned int *)v42);
    WTF::fastFree(v42, v93, v94, v95, v96, v97, v98, v99);
  }
  v102 = v171;
  v171 = 0;
  if (v102)
  {
    do
    {
      v103 = __ldaxr((unsigned int *)v102);
      v104 = v103 - 1;
    }
    while (__stlxr(v104, (unsigned int *)v102));
    if (!v104)
    {
      atomic_store(1u, (unsigned int *)v102);
      v139 = *((_QWORD *)v102 + 1);
      if ((WTF *)((char *)v102 + 24) != (WTF *)v139 && v139 != 0)
      {
        *((_QWORD *)v102 + 1) = 0;
        *((_DWORD *)v102 + 4) = 0;
        WTF::fastFree(v139, v93, v94, v95, v96, v97, v98, v99);
      }
      WTF::fastFree((unint64_t)v102, v93, v94, v95, v96, v97, v98, v99);
    }
  }
  *(_BYTE *)(a2 + 212) = v147;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [38],JSC::RegisterSetBuilder,char [8],JSC::RegisterSetBuilder>(uint64_t a1, JSC::RegisterSetBuilder *a2, JSC::RegisterSetBuilder *a3)
{
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  void (**v42)(WTF::StringPrintStream *__hidden);
  WTF *v43;
  __int128 v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v42 = off_1E3572250;
    v43 = (WTF *)v45;
    v44 = xmmword_199122F80;
    v45[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%s", "GetByValImpl: unavailable registers: ");
    JSC::RegisterSetBuilder::dump(a2, (WTF::PrintStream *)&v42);
    WTF::PrintStream::printf((WTF::PrintStream *)&v42, "%s", " used: ");
    JSC::RegisterSetBuilder::dump(a3, (WTF::PrintStream *)&v42);
    v42[5]((WTF::StringPrintStream *)&v42);
    if (v43)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v43, v44, (uint64_t *)&v39);
      v13 = v39;
    }
    else
    {
      v13 = 0;
    }
    v14 = *(_DWORD *)(a1 + 200);
    v40 = v14;
    v39 = 0;
    v41 = v13;
    v15 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v15 == *(_DWORD *)(a1 + 224))
    {
      v16 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v15 + 1, (unint64_t)&v40);
      v17 = *(unsigned int *)(a1 + 228);
      v18 = *(_QWORD *)(a1 + 216) + 16 * v17;
      *(_DWORD *)v18 = *(_DWORD *)v16;
      v19 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v18 + 8) = v19;
      v20 = v41;
      *(_DWORD *)(a1 + 228) = v17 + 1;
      v41 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::~StringImpl(v20, v6, v7, v8, v9, v10, v11, v12);
          WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 216) + 16 * v15;
      *(_DWORD *)v21 = v14;
      *(_QWORD *)(v21 + 8) = v13;
      *(_DWORD *)(a1 + 228) = v15 + 1;
    }
    v22 = v39;
    v39 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, v6, v7, v8, v9, v10, v11, v12);
        WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
    if (v43 != (WTF *)v45)
      WTF::fastFree((unint64_t)v43, v6, v7, v8, v9, v10, v11, v12);
  }
}

uint64_t JSC::RegisterSetBuilder::dump(JSC::RegisterSetBuilder *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  WTF::PrintStream *v5;
  float v6;
  int v7;
  char v8;
  char v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  uint64_t v12;
  WTF::PrintStream *v13;
  float v14;
  uint64_t result;
  unsigned int v16;
  const char *v17;
  WTF::PrintStream *v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  float v21;
  char v22;
  int v23;
  int v24;
  char v25;

  v4 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::StringImpl::utf8ForCharacters("[", 1uLL, (uint64_t)&v23, v6);
  WTF::printExpectedCStringHelper(v5, "StringView", &v23);
  if (v24 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v24])(&v25, &v23);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v7 = 0;
  v8 = 0;
  v9 = 0x80;
  v22 = 0x80;
  do
  {
    v10 = 1 << v8;
    if ((v10 & *(_QWORD *)this) != 0 || (*((_QWORD *)this + 1) & v10) != 0)
    {
      v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v11 + 32))(v11);
      v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
      if (v7)
      {
        WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v23, v14);
        WTF::printExpectedCStringHelper(v13, "StringView", &v23);
        if (v24 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v24])(&v25, &v23);
      }
      else
      {
        WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v23, v14);
        WTF::printExpectedCStringHelper(v13, "StringView", &v23);
        if (v24 != -1)
          ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v24])(&v25, &v23);
        v7 = 1;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v11 + 40))(v11);
      JSC::Reg::dump((JSC::Reg *)&v22, v11);
      result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v16 = v9 & 0x7F;
      if (v16 >= 0x40)
      {
        __break(1u);
        return result;
      }
      if ((*(_QWORD *)this & (1 << v16)) != 0)
      {
        if ((v9 & 0x60) != 0x20)
          goto LABEL_19;
        v17 = "↓";
        if ((*((_QWORD *)this + 1) & (1 << v16)) != 0)
          goto LABEL_19;
      }
      else
      {
        v17 = "↑";
      }
      v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v18, "%s", v17);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    }
    else
    {
      v16 = v9 & 0x7F;
    }
LABEL_19:
    if (v16 == 63)
      v9 = -1;
    else
      v9 = (v9 + 1) | 0x80;
    v22 = v9;
    v8 = v9 & 0x7F;
  }
  while ((v9 & 0x7Fu) < 0x40);
  v19 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
  WTF::StringImpl::utf8ForCharacters("]", 1uLL, (uint64_t)&v23, v21);
  WTF::printExpectedCStringHelper(v20, "StringView", &v23);
  if (v24 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v24])(&v25, &v23);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValImpl(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValImpl(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValImpl(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValImpl(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValImpl(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValImpl(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  uint64_t v12;
  int i;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint8x8_t v54;
  __int32 v55;
  uint8x8_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  BOOL v65;
  unsigned int v66;
  void *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int8x8_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t *v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int j;
  unsigned int v100;
  char v101;
  unint64_t v102;
  unsigned int v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unint64_t v114;
  uint64_t *v115;
  unsigned int v116;
  unsigned int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  const void *v121;
  void *v122;
  _BYTE *v123;
  unsigned int v124;
  uint64_t v125;
  char v126;
  char v127;
  uint64_t v128;
  unsigned __int8 *v129;
  unsigned __int8 *v130;
  uint64_t v131;
  _BYTE *v132;
  int v133;
  unsigned __int8 *v134;
  char *v135;
  unsigned __int8 *v136;
  uint64_t v137;
  int v138;
  unsigned __int8 *v139;
  _BYTE *v140;
  unsigned int v141;
  uint64_t v142;
  unsigned __int8 *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  BOOL v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  BOOL v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  JSC::AssemblerBuffer *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  char v172;
  uint64_t v173[2];
  void *__dst;
  uint64_t v175;
  _WORD v176[8];
  _BYTE v177[72];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (*v10 != -1)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  if (!HIBYTE(qword_1ECF4C780))
  {
    v12 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)v177 = *(_DWORD *)(v12 + 52);
    *(_QWORD *)&v177[4] = *(_QWORD *)(v12 + 56);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v177, a2, a3, a4, a5, a6, a7, a8);
  }
  v167 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v167, a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), *(char *)(a1 + 40), a4, a5, a6, a7, a8);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 48) = operationGetByValOptimize;
    v143 = *(unsigned __int8 **)(a1 + 48);
    __dst = (void *)JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 56));
    v175 = v144;
    JSC::CodeOrigin::CodeOrigin(v173, (const JSC::CodeOrigin *)(a1 + 120));
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v177, v143, (uint64_t)&__dst, a2, v173[0], *(_QWORD *)(a1 + 128) + 8, *(unsigned __int8 *)(a1 + 40) | 0x3000000000, *(char *)(a1 + 136), *(_WORD *)(a1 + 137), HIBYTE(*(_WORD *)(a1 + 137)), *(_BYTE *)(a1 + 40));
    v74 = *(void **)v177;
    v145 = v173[0];
    if ((v173[0] & 1) == 0)
      goto LABEL_70;
    goto LABEL_161;
  }
  v15 = *(_QWORD **)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(v14 + 104);
  v17 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(v14 + 96);
  v18 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v18)
  {
    v123 = *(_BYTE **)(a1 + 80);
    do
    {
      v124 = *v123 & 0x7F;
      if (v124 >= 0x40)
        goto LABEL_184;
      v125 = 1 << v124;
      v17 &= ~v125;
      v16 &= ~v125;
      ++v123;
    }
    while (--v18);
  }
  v19 = *(unsigned int *)(a1 + 108);
  if ((_DWORD)v19)
  {
    v140 = *(_BYTE **)(a1 + 96);
    do
    {
      v141 = (*v140 + 32) & 0x7F;
      if (v141 >= 0x40)
        goto LABEL_184;
      v142 = 1 << v141;
      v17 &= ~v142;
      v16 &= ~v142;
      ++v140;
    }
    while (--v19);
  }
  v20 = *(_QWORD *)(a1 + 120);
  v171 = i;
  v172 = v11;
  if ((v20 & 1) != 0)
  {
    v146 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || ((v147 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v147 != 0x3FFFFFFF)
        ? (v148 = (_DWORD)v147 == -1)
        : (v148 = 1),
          v148))
    {
      v149 = 2;
    }
    else if (v147 >> 28)
    {
      v159 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v159 = v146;
      *(_DWORD *)(v159 + 8) = v147;
      v149 = 1;
      v146 = v159;
    }
    else
    {
      v149 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v146 = v147 << 36;
    }
    v20 = v146 | v149;
    v21 = (v146 | v149) & 1;
  }
  else
  {
    v21 = 0;
  }
  v22 = *(_QWORD *)(a1 + 128);
  v23 = *(_BYTE *)(a1 + 136);
  v24 = *(unsigned __int8 *)(a1 + 137);
  v25 = *(unsigned __int8 *)(a1 + 138);
  v169 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  v170 = *(_QWORD *)(*v15 + 16);
  v26 = v20;
  v166 = v20;
  v168 = v21;
  if (v21)
  {
    v150 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || ((v151 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v151 != 0x3FFFFFFF)
        ? (v152 = (_DWORD)v151 == -1)
        : (v152 = 1),
          v152))
    {
      v153 = 2;
    }
    else if (v151 >> 28)
    {
      v165 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v150 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v150 = v165;
      *(_DWORD *)(v150 + 8) = v151;
      v153 = 1;
    }
    else
    {
      v153 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v150 = v151 << 36;
    }
    v26 = v150 | v153;
  }
  if ((v26 & 2) != 0)
  {
    v32 = 0xFFFFFFFFLL;
  }
  else
  {
    v27 = *(_QWORD *)(v15[3] + 64);
    v28 = v26;
    if ((v26 & 1) != 0)
    {
      v154 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
      v155 = *(unsigned int *)((v26 & 0xFFFFFFFF8) + 8);
      if ((_DWORD)v155 == 0x3FFFFFFF || (_DWORD)v155 == -1)
      {
        v157 = 2;
      }
      else if (v155 >> 28)
      {
        v162 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
        v164 = *(_DWORD *)((v26 & 0xFFFFFFFF8) + 8);
        v158 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v158 = v162;
        *(_DWORD *)(v158 + 8) = v164;
        v157 = 1;
        v154 = v158;
      }
      else
      {
        v157 = *(_QWORD *)(v26 & 0xFFFFFFFF8);
        v154 = v155 << 36;
      }
      v28 = v154 | v157;
    }
    *(_QWORD *)v177 = v28;
    v31 = JSC::DFG::CodeOriginPool::addCodeOrigin(v27, (uint64_t *)v177);
    if ((v177[0] & 1) != 0 && (*(_QWORD *)v177 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(*(_QWORD *)v177 & 0xFFFFFFFF8, v29, v30, a4, a5, a6, a7, a8);
    if (!v31)
      goto LABEL_23;
    v32 = v31;
  }
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    goto LABEL_185;
  }
  JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v32, a2 + 264, a4, a5, a6, a7, a8);
  v38 = *(_DWORD *)(a2 + 200);
  if (v38 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v167, v33, v34, v35, v36, v37, a7, a8);
    v38 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = -1207811152;
  *(_DWORD *)(a2 + 200) += 4;
LABEL_23:
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v177, v16 | v17, a2, 5u, v23, 0xFFFFFFFFLL, a7, a8);
  __dst = v176;
  LODWORD(v175) = 2;
  if (v24)
  {
    v176[0] = v24;
    v46 = 1;
    HIDWORD(v175) = 1;
    if (v25 == 1)
      goto LABEL_29;
  }
  else
  {
    if (v25 == 1)
    {
      v47 = (uint64_t *)((char *)v173 + 4);
      goto LABEL_61;
    }
    v46 = 0;
  }
  v176[v46++] = v25 | 0x100;
  HIDWORD(v175) = v46;
LABEL_29:
  v47 = (uint64_t *)((char *)v173 + 4);
  do
  {
    v48 = 0;
    v49 = 0;
    v50 = (char *)__dst;
    v51 = v46;
    do
    {
      if ((*((_BYTE *)__dst + v48 + 1) & 0x40) != 0)
        goto LABEL_184;
      v49 |= 1 << *((_BYTE *)__dst + v48 + 1);
      v48 += 2;
    }
    while (2 * v46 != v48);
    v52 = 0;
    do
    {
      v53 = *((_BYTE *)__dst + v52) & 0x7F;
      if (v53 >= 0x40)
        goto LABEL_184;
      v49 &= ~(1 << v53);
      v52 += 2;
    }
    while (2 * v46 != v52);
    v54 = (uint8x8_t)vcnt_s8((int8x8_t)v49);
    v54.i16[0] = vaddlv_u8(v54);
    v55 = v54.i32[0];
    v56 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v49));
    v56.i16[0] = vaddlv_u8(v56);
    if (v56.i32[0] + v55)
    {
      v57 = 0;
      if (v46 <= 1uLL)
        v58 = 1;
      else
        v58 = v46;
      v59 = 2 * v58;
      while (1)
      {
        v60 = *((unsigned __int8 *)__dst + v57 + 1);
        if ((v60 & 0x7Fu) >= 0x40)
          goto LABEL_184;
        if (((v49 >> (v60 & 0x7F)) & 1) != 0)
          break;
        v57 += 2;
        if (v59 == v57)
          goto LABEL_55;
      }
      v61 = *((unsigned __int8 *)__dst + v57);
      if (v61 == v60)
        goto LABEL_53;
      v62 = (char)v61;
      if ((char)v61 == 63)
      {
        v63 = *(_DWORD *)(a2 + 200);
        v64 = *(_DWORD *)(a2 + 192);
        if ((char)v60 != 31)
        {
          v66 = v60 & 0x1F | 0xD2800000;
          goto LABEL_50;
        }
      }
      else
      {
        v63 = *(_DWORD *)(a2 + 200);
        v64 = *(_DWORD *)(a2 + 192);
        v65 = v60 == 31 || v62 == 31;
        if (!v65)
        {
          v66 = v60 & 0xFFE0FFFF | ((v62 & 0x1F) << 16) | 0xAA0003E0;
LABEL_50:
          if (v63 + 4 > v64)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v167, (uint64_t)v39, v40, v41, v42, v43, v44, v45);
            v63 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v63) = v66;
          *(_DWORD *)(a2 + 200) += 4;
          v50 = (char *)__dst;
          v51 = HIDWORD(v175);
LABEL_53:
          memmove(&v50[v57], &v50[v57 + 2], 2 * v51 - v57 - 2);
          v46 = HIDWORD(v175) - 1;
          goto LABEL_54;
        }
      }
      v66 = (char)v60 | (32 * v62) | 0x91000000;
      goto LABEL_50;
    }
    v126 = *(_BYTE *)__dst;
    v127 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v127, v41, v42, v43, v44, v45);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v175) - 2);
    v128 = (HIDWORD(v175) - 1);
    v65 = HIDWORD(v175) == 1;
    HIDWORD(v175) = v128;
    v129 = (unsigned __int8 *)__dst;
    v130 = (unsigned __int8 *)__dst + 2 * v128;
    if (v65)
    {
      v137 = 0;
      v138 = 0;
      v133 = 0;
      v39 = v130;
    }
    else
    {
      v131 = 2 * v128;
      v132 = __dst;
      while (*v132 != v127)
      {
        v132 += 2;
        v131 -= 2;
        if (!v131)
          goto LABEL_105;
      }
      *v132 = v126;
LABEL_105:
      v133 = 0;
      v134 = v129;
      v39 = v130;
      v135 = (char *)v130;
      do
      {
        if (*v129 == v129[1])
        {
          v136 = v129;
          if (v135 != (char *)__dst + 2 * HIDWORD(v175))
          {
            v163 = (char *)v130;
            if (v129 == v39)
            {
              v136 = (unsigned __int8 *)v135;
            }
            else
            {
              v160 = v134 - v39;
              v161 = v135;
              memmove(v135, v39, v134 - v39);
              v136 = (unsigned __int8 *)&v161[v160];
            }
            v130 = (unsigned __int8 *)v163;
          }
          v39 = v129 + 2;
          ++v133;
          v135 = (char *)v136;
        }
        v129 += 2;
        v134 += 2;
      }
      while (v129 < v130);
      v129 = (unsigned __int8 *)__dst;
      v137 = HIDWORD(v175);
      v138 = HIDWORD(v175);
      v130 = (unsigned __int8 *)v135;
    }
    v139 = &v129[2 * v137];
    if (v39 != v139)
    {
      memmove(v130, v39, v139 - v39);
      v138 = HIDWORD(v175);
    }
    v46 = v138 - v133;
LABEL_54:
    HIDWORD(v175) = v46;
LABEL_55:
    ;
  }
  while (v46);
  v67 = __dst;
  if (v176 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v175) = 0;
    WTF::fastFree((unint64_t)v67, v39, v40, v41, v42, v43, v44, v45);
  }
LABEL_61:
  i = v171;
  v11 = v172;
  v68 = *(_DWORD *)(a2 + 200);
  if (v68 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v167, (uint64_t)v39, v40, v41, v42, v43, v44, v45);
    v68 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v68) = -763363325;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v169, 2, v41, v42, v43, v44, v45);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v177, v170, (uint64_t)operationGetByValOptimize, v69, v70, v71, v72, v73, (uint64_t)&__dst);
  v74 = __dst;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v177, v75, v76, v77, v78, v79, v80, v81);
  JSC::AssemblyHelpers::emitExceptionCheck(a2, v170, 0, 0, 0xFFFFFFFFLL, v82, v83, v84, (uint64_t)v173, v85);
  v93 = v173[0];
  if (LODWORD(v173[0]) != -1)
  {
    v94 = (uint64_t *)(v22 + 8);
    v95 = *(unsigned int *)(v22 + 20);
    if ((_DWORD)v95 == *(_DWORD *)(v22 + 16))
    {
      v96 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v94, (void *)(v95 + 1), (unint64_t)v173, v88, v89, v90, v91, v92);
      v47 = v96 + 1;
      v93 = *v96;
      LODWORD(v95) = *(_DWORD *)(v22 + 20);
      v97 = *(_QWORD *)(v22 + 8);
    }
    else
    {
      v97 = *v94;
    }
    v98 = v97 + 12 * v95;
    *(_DWORD *)v98 = v93;
    *(_QWORD *)(v98 + 4) = *v47;
    ++*(_DWORD *)(v22 + 20);
  }
  if ((v26 & 1) != 0 && (v26 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v26 & 0xFFFFFFFF8, v86, v87, v88, v89, v90, v91, v92);
  if (v168)
  {
    v145 = v166;
LABEL_161:
    if ((v145 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v145 & 0xFFFFFFFF8, v86, v87, v88, v89, v90, v91, v92);
  }
LABEL_70:
  for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v167, (uint64_t)v86, v87, v88, v89, v90, v91, v92);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v100 = j;
  if (j + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v167, (uint64_t)v86, v87, v88, v89, v90, v91, v92);
    v100 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v100) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v101 = 69;
  else
    v101 = 65;
  *(_QWORD *)v177 = j;
  v177[8] = v101;
  *(_WORD *)&v177[9] = 15;
  v177[11] = -1;
  LODWORD(__dst) = *(_DWORD *)(a1 + 140);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v177, (unsigned int *)&__dst, a2, v88, v89, v90, v91, v92);
  v102 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v102 + 36) = i;
  *(_QWORD *)(v102 + 40) = v74;
  do
    v103 = __ldaxr((unsigned int *)v102);
  while (__stlxr(v103 + 1, (unsigned int *)v102));
  v104 = WTF::fastMalloc((WTF *)0x18);
  v112 = v104;
  *(_DWORD *)(v104 + 8) = 1;
  *(_QWORD *)v104 = &off_1E35763C0;
  do
    v113 = __ldaxr((unsigned int *)v102);
  while (__stlxr(v113 + 1, (unsigned int *)v102));
  *(_QWORD *)(v104 + 16) = v102;
  v114 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v114 != *(_DWORD *)(a2 + 240))
  {
    v115 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v114);
    goto LABEL_82;
  }
  v118 = v114 + (v114 >> 2);
  if (v118 >= 0x10)
    v119 = v118 + 1;
  else
    v119 = 16;
  if (v119 <= v114 + 1)
    v120 = v114 + 1;
  else
    v120 = v119;
  if (v120 >> 29)
  {
    __break(0xC471u);
LABEL_184:
    __break(1u);
LABEL_185:
    JUMPOUT(0x197D9D35CLL);
  }
  v121 = *(const void **)(a2 + 232);
  v122 = (void *)WTF::fastMalloc((WTF *)(8 * v120));
  *(_DWORD *)(a2 + 240) = v120;
  *(_QWORD *)(a2 + 232) = v122;
  memcpy(v122, v121, 8 * v114);
  if (v121)
  {
    if (*(const void **)(a2 + 232) == v121)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v121, v105, v106, v107, v108, v109, v110, v111);
  }
  v114 = *(unsigned int *)(a2 + 244);
  v115 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v114);
LABEL_82:
  *v115 = v112;
  *(_DWORD *)(a2 + 244) = v114 + 1;
  do
  {
    v116 = __ldaxr((unsigned int *)v102);
    v117 = v116 - 1;
  }
  while (__stlxr(v117, (unsigned int *)v102));
  if (!v117)
  {
    atomic_store(1u, (unsigned int *)v102);
    WTF::fastFree(v102, v105, v106, v107, v108, v109, v110, v111);
  }
  *(_BYTE *)(a2 + 212) = v11;
}

void JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11)
{
  unsigned __int8 *v11;
  unsigned __int8 v12;
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  JSC::AssemblerBuffer *v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint8x8_t v41;
  __int32 v42;
  uint8x8_t v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  char v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  _BYTE *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  int v60;
  unsigned __int8 *v61;
  void *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int8x8_t v78;
  int v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;
  int64_t v96;
  int v97;
  char *v98;
  JSC::AssemblerBuffer *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  void *__dst;
  __int128 v104;
  uint64_t v105;
  uint64_t v106[8];

  v11 = (unsigned __int8 *)a8;
  v12 = a7;
  v14 = a5;
  v18 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if ((a5 & 1) == 0)
  {
    if ((a5 & 2) == 0)
      goto LABEL_3;
LABEL_112:
    v24 = 0xFFFFFFFFLL;
    goto LABEL_7;
  }
LABEL_88:
  v85 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
  if ((v14 & 2) != 0
    || ((v86 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v86 != 0x3FFFFFFF)
      ? (v87 = (_DWORD)v86 == -1)
      : (v87 = 1),
        v87))
  {
    v88 = 2;
  }
  else if (v86 >> 28)
  {
    v94 = a2;
    v95 = WTF::fastMalloc((WTF *)0x10);
    a2 = v94;
    *(_QWORD *)v95 = v85;
    *(_DWORD *)(v95 + 8) = v86;
    v88 = 1;
    v85 = v95;
  }
  else
  {
    v88 = v85;
    v85 = v86 << 36;
  }
  v14 = v85 | v88;
  if (((v85 | v88) & 2) != 0)
    goto LABEL_112;
LABEL_3:
  v19 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
  v20 = v14;
  if ((v14 & 1) != 0)
  {
    v89 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    v90 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v90 == 0x3FFFFFFF || (_DWORD)v90 == -1)
    {
      v92 = 2;
    }
    else if (v90 >> 28)
    {
      v100 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
      v93 = WTF::fastMalloc((WTF *)0x10);
      v19 = v100;
      *(_QWORD *)v93 = v89;
      *(_DWORD *)(v93 + 8) = v90;
      v92 = 1;
      v89 = v93;
    }
    else
    {
      v92 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v89 = v90 << 36;
    }
    v20 = v89 | v92;
  }
  v106[0] = v20;
  v23 = JSC::DFG::CodeOriginPool::addCodeOrigin(v19, v106);
  if ((v106[0] & 1) != 0 && (v106[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v106[0] & 0xFFFFFFFF8, v21, v22, a4, a5, a6, a7, a8);
  if (v23)
  {
    v24 = v23;
LABEL_7:
    if (!*(_BYTE *)(a4 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197D9DB24);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a4, (JSC::ARM64LogicalImmediate *)v24, a4 + 264, a4, a5, a6, a7, a8);
    v30 = *(_DWORD *)(a4 + 200);
    if (v30 + 4 > *(_DWORD *)(a4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), v25, v26, v27, v28, v29, a7, a8);
      v30 = *(_DWORD *)(a4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + v30) = -1207811152;
    *(_DWORD *)(a4 + 200) += 4;
  }
  v31 = *(_QWORD *)(a3 + 8) | *(_QWORD *)a3;
  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v106, v31, a4, 5u, (uint64_t)v11, 8, a7, a8);
  __dst = (char *)&v104 + 8;
  *(_QWORD *)&v104 = 4;
  if (v12 == 8)
  {
    v33 = 0;
  }
  else
  {
    WORD4(v104) = v12 | 0x800;
    v33 = 1;
    DWORD1(v104) = 1;
  }
  if (a9)
  {
    *((_WORD *)&v104 + v33++ + 4) = a9;
    DWORD1(v104) = v33;
  }
  if (a10 != 1)
  {
    *((_WORD *)&v104 + v33++ + 4) = a10 | 0x100;
    DWORD1(v104) = v33;
  }
  if (a11 == 2)
  {
    if (!v33)
      goto LABEL_77;
  }
  else
  {
    *((_WORD *)&v104 + v33++ + 4) = a11 | 0x200;
    DWORD1(v104) = v33;
  }
  v34 = (JSC::AssemblerBuffer *)(a4 + 56);
  v12 = 1;
  do
  {
    v35 = 0;
    v36 = 0;
    v37 = __dst;
    v38 = v33;
    do
    {
      if ((*((_BYTE *)__dst + v35 + 1) & 0x40) != 0)
      {
LABEL_87:
        __break(1u);
        goto LABEL_88;
      }
      v36 |= 1 << *((_BYTE *)__dst + v35 + 1);
      v35 += 2;
    }
    while (2 * v33 != v35);
    v39 = 0;
    do
    {
      v40 = *((_BYTE *)__dst + v39) & 0x7F;
      if (v40 >= 0x40)
        goto LABEL_87;
      v36 &= ~(1 << v40);
      v39 += 2;
    }
    while (2 * v33 != v39);
    v41 = (uint8x8_t)vcnt_s8((int8x8_t)v36);
    v41.i16[0] = vaddlv_u8(v41);
    v42 = v41.i32[0];
    v43 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v36));
    v43.i16[0] = vaddlv_u8(v43);
    if (v43.i32[0] + v42)
    {
      v11 = 0;
      if (v33 <= 1)
        v44 = 1;
      else
        v44 = v33;
      v45 = 2 * v44;
      while (1)
      {
        v46 = v11[(_QWORD)__dst + 1];
        if ((v46 & 0x7Fu) >= 0x40)
          goto LABEL_87;
        if (((v36 >> (v46 & 0x7F)) & 1) != 0)
          break;
        v11 += 2;
        if ((unsigned __int8 *)v45 == v11)
          goto LABEL_70;
      }
      v47 = v11[(_QWORD)__dst];
      if (v47 != v46)
      {
        v48 = (char)v47;
        if ((char)v47 == 63)
        {
          v49 = *(_DWORD *)(a4 + 200);
          v50 = *(_DWORD *)(a4 + 192);
          if ((char)v46 == 31)
            goto LABEL_64;
          a3 = v46 & 0x1F | 0xD2800000;
        }
        else
        {
          v49 = *(_DWORD *)(a4 + 200);
          v50 = *(_DWORD *)(a4 + 192);
          v51 = v46 == 31 || v48 == 31;
          if (!v51)
          {
            a3 = v46 & 0xFFE0FFFF | ((v48 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_65;
          }
LABEL_64:
          a3 = (char)v46 | (32 * v48) | 0x91000000;
        }
LABEL_65:
        if (v49 + 4 > v50)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v34, (uint64_t)a2, v32, a4, a5, a6, a7, a8);
          v49 = *(_DWORD *)(a4 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a4 + 56) + v49) = a3;
        *(_DWORD *)(a4 + 200) += 4;
        v37 = __dst;
        v38 = DWORD1(v104);
      }
      memmove(&v11[(_QWORD)v37], &v11[(_QWORD)v37 + 2], 2 * v38 - (_QWORD)v11 - 2);
      v33 = DWORD1(v104) - 1;
      goto LABEL_69;
    }
    v99 = v34;
    v52 = *(_BYTE *)__dst;
    a3 = *((char *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a4, *(char *)__dst, a3, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v104) - 2);
    v53 = (DWORD1(v104) - 1);
    v51 = DWORD1(v104) == 1;
    DWORD1(v104) = v53;
    v11 = (unsigned __int8 *)__dst;
    v54 = (char *)__dst + 2 * v53;
    if (v51)
    {
      v59 = 0;
      v60 = 0;
      a2 = (unsigned __int8 *)__dst + 2 * v53;
    }
    else
    {
      v55 = 2 * v53;
      v56 = __dst;
      while (*v56 != a3)
      {
        v56 += 2;
        v55 -= 2;
        if (!v55)
          goto LABEL_49;
      }
      *v56 = v52;
LABEL_49:
      v53 = 0;
      v57 = v11;
      a2 = (unsigned __int8 *)v54;
      a3 = (uint64_t)v54;
      do
      {
        if (*v11 == v11[1])
        {
          v58 = v11;
          if ((void *)a3 != (char *)__dst + 2 * DWORD1(v104))
          {
            v97 = v53;
            v98 = v54;
            if (v11 == a2)
            {
              v58 = (unsigned __int8 *)a3;
            }
            else
            {
              v96 = v57 - a2;
              memmove((void *)a3, a2, v57 - a2);
              v58 = (unsigned __int8 *)(a3 + v96);
            }
            v54 = v98;
            LODWORD(v53) = v97;
          }
          a2 = v11 + 2;
          v53 = (v53 + 1);
          a3 = (uint64_t)v58;
        }
        v11 += 2;
        v57 += 2;
      }
      while (v11 < (unsigned __int8 *)v54);
      v11 = (unsigned __int8 *)__dst;
      v59 = DWORD1(v104);
      v60 = DWORD1(v104);
      v54 = (char *)a3;
    }
    v61 = &v11[2 * v59];
    v34 = v99;
    if (a2 != v61)
    {
      v11 = (unsigned __int8 *)v53;
      memmove(v54, a2, v61 - a2);
      LODWORD(v53) = (_DWORD)v11;
      v60 = DWORD1(v104);
    }
    v33 = v60 - v53;
LABEL_69:
    DWORD1(v104) = v33;
LABEL_70:
    ;
  }
  while (v33);
  v62 = __dst;
  if ((char *)&v104 + 8 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v104) = 0;
    WTF::fastFree((unint64_t)v62, a2, v32, a4, a5, a6, a7, a8);
  }
LABEL_77:
  v63 = *(_DWORD *)(a4 + 200);
  if (v63 + 4 > *(_DWORD *)(a4 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), (uint64_t)a2, v32, a4, a5, a6, a7, a8);
    v63 = *(_DWORD *)(a4 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a4 + 56) + v63) = -763363325;
  *(_DWORD *)(a4 + 200) += 4;
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v106, v18, 0x3000000008uLL, a4, a5, a6, a7, a8, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v104;
  *(_QWORD *)(a1 + 24) = v105;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v106, v64, v65, v66, v67, v68, v69, v70);
  if (a6)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a4, v18, 0, 0, 0xFFFFFFFFLL, v75, v76, v77, (uint64_t)&v101, v78);
    v79 = v101;
    if (v101 != -1)
    {
      v80 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v80 == *(_DWORD *)(a6 + 8))
      {
        v81 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (void *)(v80 + 1), (unint64_t)&v101, v73, v74, v75, v76, v77);
        v83 = *v81;
        v82 = (uint64_t *)(v81 + 1);
        v79 = v83;
        LODWORD(v80) = *(_DWORD *)(a6 + 12);
      }
      else
      {
        v82 = &v102;
      }
      v84 = *(_QWORD *)a6 + 12 * v80;
      *(_DWORD *)v84 = v79;
      *(_QWORD *)(v84 + 4) = *v82;
      ++*(_DWORD *)(a6 + 12);
    }
  }
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, v71, v72, v73, v74, v75, v76, v77);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValImpl(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValImpl(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValImpl(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(v2 + 28);
  if (v3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
  v5 = (v3 - v4);
  v6 = a2[23];
  v7 = v5 + v6;
  if (v6 <= v5 + v6 && v6 + a2[1] >= v7)
    return JSC::JITInlineCacheGenerator::finalize(v2 + 8, a2, a2, v7);
  result = 366;
  __break(0xC471u);
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::VM *,int),JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  JSC::DFG::Node *v21;
  char **v22;
  uint64_t v23;
  WTF *v24;
  uint64_t result;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  char *v40;
  WTF *v41;
  uint64_t v42;

  v11 = (int *)(a1 + 28264);
  v12 = *(_DWORD *)(a1 + 28264);
  if ((v12 & 0x80000000) == 0)
  {
    v26 = *(_QWORD *)(a1 + 27848);
    v41 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v41 = 0x200000002;
    v42 = 0x200000002;
    v34 = (_QWORD *)(v26 + 32);
    v35 = *(unsigned int *)(v26 + 44);
    if ((_DWORD)v35 == *(_DWORD *)(v26 + 40))
    {
      v36 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v35 + 1, (unint64_t)&v41);
      v37 = *(_QWORD *)(v26 + 32) + 16 * *(unsigned int *)(v26 + 44);
    }
    else
    {
      v37 = *v34 + 16 * v35;
      v36 = (unint64_t)&v41;
    }
    *(_QWORD *)v37 = 0;
    *(_QWORD *)(v37 + 8) = 0;
    v38 = *(_QWORD *)v36;
    *(_QWORD *)v36 = 0;
    *(_QWORD *)v37 = v38;
    LODWORD(v38) = *(_DWORD *)(v36 + 8);
    *(_DWORD *)(v36 + 8) = 0;
    *(_DWORD *)(v37 + 8) = v38;
    LODWORD(v38) = *(_DWORD *)(v36 + 12);
    *(_DWORD *)(v36 + 12) = 0;
    *(_DWORD *)(v37 + 12) = v38;
    ++*(_DWORD *)(v26 + 44);
    v12 = v35 | 0x80000000;
    *v11 = v35 | 0x80000000;
    v39 = v41;
    if (v41)
    {
      v41 = 0;
      LODWORD(v42) = 0;
      WTF::fastFree((unint64_t)v39, v27, v28, v29, v30, v31, v32, v33);
      v12 = *v11;
    }
  }
  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationSingleCharacterString);
  v14 = *a2;
  v15 = *a3;
  v16 = *(_QWORD *)(a1 + 27776);
  v17 = *(JSC::B3::Value **)(a1 + 27760);
  v18 = *(_QWORD *)(a1 + 27768);
  v19 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v19 = off_1E357F5F0;
  *(_DWORD *)(v19 + 8) = -1;
  *(_WORD *)(v19 + 12) = 82;
  *(_DWORD *)(v19 + 16) = v12;
  *(_BYTE *)(v19 + 20) = 4;
  *(_QWORD *)(v19 + 24) = v18;
  *(_QWORD *)(v19 + 32) = 0;
  v20 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v19);
  v20[2] = v13;
  *v20 = v20 + 2;
  v20[3] = v14;
  v20[4] = v15;
  v20[1] = 0x300000003;
  *(_QWORD *)v19 = &unk_1E357CF78;
  *(_OWORD *)(v19 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v19 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v19 + 76))
  {
    JSC::B3::Procedure::addValueImpl(v17, (JSC::B3::Value *)v19);
    v41 = (WTF *)v19;
    v22 = (char **)(v16 + 8);
    v23 = *(unsigned int *)(v16 + 20);
    if ((_DWORD)v23 == *(_DWORD *)(v16 + 16))
    {
      v40 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22, v23 + 1, (unint64_t)&v41);
      v23 = *(unsigned int *)(v16 + 20);
      *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v23) = *(_QWORD *)v40;
      v24 = v41;
    }
    else
    {
      *(_QWORD *)&(*v22)[8 * v23] = v19;
      v24 = (WTF *)v19;
    }
    *(_DWORD *)(v16 + 20) = v23 + 1;
    *((_QWORD *)v24 + 4) = v16;
  }
  else
  {
    result = 60;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationGetByValStringInt);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

__n128 WTF::Vector<JSC::FTL::ValueFromBlock,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 result;

  v9 = (__n128 *)WTF::Vector<JSC::FTL::ValueFromBlock,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  result = *v9;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v9;
  return result;
}

uint64_t WTF::Vector<JSC::FTL::ValueFromBlock,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 16 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v8 - v10) >> 4);
      if (v15 < 5)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 4;
        goto LABEL_33;
      }
      if (!(v15 >> 28))
      {
        v16 = WTF::fastMalloc((WTF *)(16 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_33:
        v26 = 0;
        do
        {
          *(_OWORD *)(v16 + v26) = *(_OWORD *)(v10 + v26);
          v26 += 16;
        }
        while (16 * v11 != v26);
        if (a1 + 16 != v10 && v10)
        {
          if (*(_QWORD *)a1 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        }
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v8 - v10) >> 4);
      }
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x197D9E198);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 5)
    {
      v22 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    else
    {
      if (v20 >> 28)
        goto LABEL_42;
      v22 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    v23 = 16 * v21;
    v24 = (__int128 *)v10;
    do
    {
      v25 = *v24++;
      *v22++ = v25;
      v23 -= 16;
    }
    while (v23);
LABEL_27:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  char v34;
  char v35;
  uint64_t v36;
  char *v37;
  char v38;
  char v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x8_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  _DWORD *v54;
  uint64_t *v55;
  int v56;
  char *v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int8x8_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  int *v72;
  int *v73;
  int v74;
  char *v75;
  uint64_t v76;
  char v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  JSC::FTL::ExceptionTarget *v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  WTF *v91;
  int v92;
  _BYTE *v93;
  WTF *v94;
  char *v95;
  JSC::FTL::ExceptionTarget *v96;
  _QWORD *v97;
  int i;
  unsigned int v100;
  _QWORD *v101;
  int v102;
  WTF *v103;
  WTF *v104;
  uint64_t v105;
  uint64_t v106;
  _OWORD *v107;
  uint64_t v108;
  __int128 *v109;
  uint64_t v110;
  __int128 v111;
  WTF *v112;
  void *v113;
  WTF *v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF *v142;
  WTF *v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int *v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  BOOL v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  BOOL v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 v172;
  char v173;
  char v174;
  uint64_t v175;
  _QWORD *v176;
  unsigned int v177;
  int v178;
  _QWORD v179[5];
  _OWORD *v180;
  int v181;
  int v182;
  void *v183;
  int v184;
  int v185;
  void *v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int *v191;
  char v192;
  uint64_t v193;
  unsigned __int8 v194;
  char v195;
  int v196;
  int v197;
  int v198;
  int v199;
  uint64_t v200;
  WTF *v201;
  uint64_t v202;
  _BYTE v203[24];
  WTF *v204;
  uint64_t v205;
  JSC::FTL::ExceptionTarget *v206;
  int v207;
  unsigned int v208;
  uint64_t v209;
  unsigned int *v210;

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [20]>(a2);
  v174 = *(_BYTE *)(a2 + 212);
  if (!v174)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v6 & 1) != 0)
  {
    v152 = *(_QWORD *)(v6 & 0xFFFFFFFF8);
    if ((v6 & 2) != 0
      || ((v153 = *(unsigned int *)((v6 & 0xFFFFFFFF8) + 8), (_DWORD)v153 != 0x3FFFFFFF)
        ? (v154 = (_DWORD)v153 == -1)
        : (v154 = 1),
          v154))
    {
      v155 = 2;
    }
    else if (v153 >> 28)
    {
      v170 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v170 = v152;
      *(_DWORD *)(v170 + 8) = v153;
      v155 = 1;
      v152 = v170;
    }
    else
    {
      v155 = *(_QWORD *)(v6 & 0xFFFFFFFF8);
      v152 = v153 << 36;
    }
    v6 = v152 | v155;
  }
  v205 = v6;
  v15 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v7, &v205);
  if ((v205 & 1) != 0 && (v205 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v205 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v206);
  v16 = (unsigned int *)v206;
  JSC::FTL::ExceptionTarget::jumps(v206, (JSC::CCallHelpers *)a2, (uint64_t *)&v204);
  v206 = 0;
  if (v16)
  {
    do
    {
      v24 = __ldaxr(v16);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v16));
    if (!v25)
    {
      atomic_store(1u, v16);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v16, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
    }
  }
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 32), a3, v15, v19, v20, v21, v22, v23);
  v31 = *(_DWORD *)(a3 + 20);
  if (!v31)
  {
    __break(0xC471u);
    JUMPOUT(0x197D9EBA4);
  }
  if (v31 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D9EBACLL);
  }
  if (v31 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D9EBB4);
  }
  v32 = *(_DWORD *)(a3 + 36);
  if (!v32)
  {
    __break(0xC471u);
    JUMPOUT(0x197D9EBBCLL);
  }
  if (v32 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D9EBC4);
  }
  if (v32 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D9EBCCLL);
  }
  if (v32 == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197D9EBD4);
  }
  v33 = *(char **)(a3 + 8);
  v34 = *v33;
  v35 = v33[16];
  v36 = v33[32] & 0x7F;
  v37 = *(char **)(a3 + 24);
  v38 = *v37;
  v39 = v37[1];
  v40 = v37[2];
  v41 = v37[3];
  v201 = (WTF *)v203;
  v202 = 2;
  v173 = v36;
  JSC::MacroAssemblerARM64::load64(a2, v36 | 0x800000000, v41, v26, v27, v28, v29, v30);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, v41, 1, v42, v43, v44, v45, (uint64_t)&v199, v46);
  v52 = v199;
  if (v199 != -1)
  {
    v53 = HIDWORD(v202);
    if (HIDWORD(v202) == (_DWORD)v202)
    {
      v54 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v201, (void *)(HIDWORD(v202) + 1), (unint64_t)&v199, v47, v48, v49, v50, v51);
      v56 = *v54;
      v55 = (uint64_t *)(v54 + 1);
      v52 = v56;
      v53 = HIDWORD(v202);
    }
    else
    {
      v55 = &v200;
    }
    v57 = (char *)v201 + 12 * v53;
    *(_DWORD *)v57 = v52;
    *(_QWORD *)(v57 + 4) = *v55;
    ++HIDWORD(v202);
  }
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    goto LABEL_139;
  }
  v175 = a1;
  v58 = v34 & 0x7F;
  v59 = v35 & 0x7F;
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  JSC::MacroAssemblerARM64::load32(a2, v41 | 0x1000000000, *(char *)(a2 + 304), v47, v48, v49, v50, v51);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, a2, 0, 17, v60, v61, v62, v63, (uint64_t)&v197, v64);
  v70 = v197;
  if (v197 != -1)
  {
    v71 = HIDWORD(v202);
    if (HIDWORD(v202) == (_DWORD)v202)
    {
      v72 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v201, (void *)(HIDWORD(v202) + 1), (unint64_t)&v197, v65, v66, v67, v68, v69);
      v74 = *v72;
      v73 = v72 + 1;
      v70 = v74;
      v71 = HIDWORD(v202);
    }
    else
    {
      v73 = &v198;
    }
    v75 = (char *)v201 + 12 * v71;
    *(_DWORD *)v75 = v70;
    *(_QWORD *)(v75 + 4) = *(_QWORD *)v73;
    ++HIDWORD(v202);
  }
  v76 = v38;
  v77 = v34 & 0x7F;
  JSC::AssemblyHelpers::loadMegamorphicProperty(a2, *(_QWORD *)(**(_QWORD **)(v175 + 16) + 16), v59, (char)v41, 0, v58, v76, v39, (uint64_t)&v206, v40);
  v85 = v206;
  v86 = v208;
  if (!v208)
  {
    v97 = (_QWORD *)v175;
    goto LABEL_51;
  }
  v172 = v59;
  v87 = HIDWORD(v202);
  v88 = HIDWORD(v202) + (unint64_t)v208;
  if (v88 > v202)
  {
    v89 = v202 + ((unint64_t)v202 >> 2);
    if (v89 >= 0x10)
      v90 = v89 + 1;
    else
      v90 = 16;
    if (v90 <= v88)
      v90 = HIDWORD(v202) + (unint64_t)v208;
    v91 = v201;
    if (v90 < 3)
    {
      v93 = v203;
      v201 = (WTF *)v203;
      LODWORD(v202) = 2;
      goto LABEL_39;
    }
    if (v90 < 0x15555556)
    {
      v92 = 12 * v90;
      v93 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v90));
      LODWORD(v202) = (v92 & 0xFFFFFFFC) / 0xC;
      v201 = (WTF *)v93;
      v77 = v58;
LABEL_39:
      if (v87)
      {
        v94 = v91;
        do
        {
          *(_DWORD *)v93 = *(_DWORD *)v94;
          *(_QWORD *)(v93 + 4) = *(_QWORD *)((char *)v94 + 4);
          v94 = (WTF *)((char *)v94 + 12);
          v93 += 12;
        }
        while (v94 != (WTF *)((char *)v91 + 12 * v87));
      }
      if (v203 != (_BYTE *)v91 && v91)
      {
        if (v201 == v91)
        {
          v201 = 0;
          LODWORD(v202) = 0;
        }
        WTF::fastFree((unint64_t)v91, v78, v79, v80, v81, v82, v83, v84);
      }
      goto LABEL_47;
    }
    __break(0xC471u);
LABEL_139:
    JUMPOUT(0x197D9EA64);
  }
LABEL_47:
  if (v88 < HIDWORD(v202))
  {
    __break(0xC471u);
    JUMPOUT(0x197D9EBE4);
  }
  v95 = (char *)v201 + 12 * HIDWORD(v202);
  v96 = (JSC::FTL::ExceptionTarget *)((char *)v85 + 12 * v86);
  v97 = (_QWORD *)v175;
  do
  {
    *(_DWORD *)v95 = *(_DWORD *)v85;
    *(_QWORD *)(v95 + 4) = *(_QWORD *)((char *)v85 + 4);
    v85 = (JSC::FTL::ExceptionTarget *)((char *)v85 + 12);
    v95 += 12;
  }
  while (v85 != v96);
  HIDWORD(v202) = v88;
  v85 = v206;
  v59 = v172;
LABEL_51:
  if (&v209 != (uint64_t *)v85 && v85 != 0)
  {
    v206 = 0;
    v207 = 0;
    WTF::fastFree((unint64_t)v85, v78, v79, v80, v81, v82, v83, v84);
  }
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v78, v79, v80, v81, v82, v83, v84);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v100 = HIDWORD(v202);
  v101 = v179;
  v176 = v179;
  v177 = 2;
  v178 = HIDWORD(v202);
  if (HIDWORD(v202) >= 3)
  {
    if (HIDWORD(v202) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197D9EBECLL);
    }
    v102 = 12 * HIDWORD(v202);
    v101 = (_QWORD *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v202)));
    v177 = (v102 & 0xFFFFFFFC) / 0xC;
    v176 = v101;
    v100 = HIDWORD(v202);
  }
  if (v100)
  {
    v103 = v201;
    v104 = (WTF *)((char *)v201 + 12 * v100);
    do
    {
      *(_DWORD *)v101 = *(_DWORD *)v103;
      *(_QWORD *)((char *)v101 + 4) = *(_QWORD *)((char *)v103 + 4);
      v103 = (WTF *)((char *)v103 + 12);
      v101 = (_QWORD *)((char *)v101 + 12);
    }
    while (v103 != v104);
  }
  v105 = *(_QWORD *)a3;
  v179[3] = v97[2];
  v179[4] = v105;
  v106 = *(unsigned int *)(a3 + 20);
  v180 = 0;
  v181 = 0;
  v182 = v106;
  if ((_DWORD)v106)
  {
    if (v106 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197D9EBDCLL);
    }
    v107 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v106));
    v181 = v106;
    v180 = v107;
    v108 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v108)
    {
      v109 = *(__int128 **)(a3 + 8);
      v110 = 16 * v108;
      do
      {
        v111 = *v109++;
        *v107++ = v111;
        v110 -= 16;
      }
      while (v110);
    }
  }
  v112 = (WTF *)*(unsigned int *)(a3 + 36);
  v183 = 0;
  v184 = 0;
  v185 = (int)v112;
  if ((_DWORD)v112)
  {
    v113 = (void *)WTF::fastMalloc(v112);
    v184 = (int)v112;
    v183 = v113;
    memcpy(v113, *(const void **)(a3 + 24), *(unsigned int *)(a3 + 36));
  }
  v114 = (WTF *)*(unsigned int *)(a3 + 52);
  v186 = 0;
  v187 = 0;
  v188 = (int)v114;
  if ((_DWORD)v114)
  {
    v151 = (void *)WTF::fastMalloc(v114);
    v187 = (int)v114;
    v186 = v151;
    memcpy(v151, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 52));
  }
  v189 = *(_QWORD *)(a3 + 56);
  v115 = v97[3];
  if ((v115 & 1) != 0)
  {
    v164 = *(_QWORD *)(v115 & 0xFFFFFFFF8);
    if ((v115 & 2) != 0
      || ((v165 = *(unsigned int *)((v115 & 0xFFFFFFFF8) + 8), (_DWORD)v165 != 0x3FFFFFFF)
        ? (v166 = (_DWORD)v165 == -1)
        : (v166 = 1),
          v166))
    {
      v167 = 2;
    }
    else if (v165 >> 28)
    {
      v171 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v171 = v164;
      *(_DWORD *)(v171 + 8) = v165;
      v167 = 1;
      v164 = v171;
    }
    else
    {
      v167 = *(_QWORD *)(v115 & 0xFFFFFFFF8);
      v164 = v165 << 36;
    }
    v115 = v164 | v167;
  }
  v190 = v115;
  v116 = (unsigned int *)v204;
  if (v204)
  {
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 + 1, v116));
  }
  v191 = v116;
  v192 = v77;
  v193 = v97[5];
  v194 = v59;
  v195 = v173;
  v196 = i;
  v118 = *(_QWORD *)(a3 + 56);
  v119 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)(v119 + 8) = 1;
  *(_QWORD *)v119 = off_1E3576410;
  v210 = (unsigned int *)v119;
  v127 = *(unsigned int *)(v118 + 12);
  if ((_DWORD)v127 == *(_DWORD *)(v118 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v118, (uint64_t *)&v210);
    v147 = v210;
    v210 = 0;
    if (v147)
    {
      v148 = v147 + 2;
      do
      {
        v149 = __ldaxr(v148);
        v150 = v149 - 1;
      }
      while (__stlxr(v150, v148));
      if (!v150)
      {
        atomic_store(1u, v147 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v147 + 8))(v147);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v118 + 8 * v127) = v119;
    *(_DWORD *)(v118 + 12) = v127 + 1;
  }
  v142 = v201;
  if (v203 != (_BYTE *)v201 && v201 != 0)
  {
    v201 = 0;
    LODWORD(v202) = 0;
    WTF::fastFree((unint64_t)v142, v135, v136, v137, v138, v139, v140, v141);
  }
  v144 = v204;
  v204 = 0;
  if (v144)
  {
    do
    {
      v145 = __ldaxr((unsigned int *)v144);
      v146 = v145 - 1;
    }
    while (__stlxr(v146, (unsigned int *)v144));
    if (!v146)
    {
      atomic_store(1u, (unsigned int *)v144);
      v168 = *((_QWORD *)v144 + 1);
      if ((WTF *)((char *)v144 + 24) != (WTF *)v168 && v168 != 0)
      {
        *((_QWORD *)v144 + 1) = 0;
        *((_DWORD *)v144 + 4) = 0;
        WTF::fastFree(v168, v135, v136, v137, v138, v139, v140, v141);
      }
      WTF::fastFree((unint64_t)v144, v135, v136, v137, v138, v139, v140, v141);
    }
  }
  *(_BYTE *)(a2 + 212) = v174;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [20]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "GetByValMegamorphic");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::AssemblerBuffer *v31;
  int i;
  unsigned int v33;
  char v34;
  unsigned int *result;
  _BYTE *v36;
  unsigned int v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  JSC::AssemblerBuffer *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD v49[2];
  unsigned int v50[2];
  char v51;
  __int16 v52;
  char v53;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    goto LABEL_45;
  while (1)
  {
    *(_BYTE *)(a2 + 212) = 1;
    v11 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = 12 * v11;
      while (v13 < *(unsigned int *)(a1 + 28))
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 16) + v12), a2, a3, a4, a5, a6, a7, a8);
        ++v13;
        v12 += 12;
        if (v14 == v12)
          goto LABEL_6;
      }
      __break(0xC471u);
      goto LABEL_44;
    }
LABEL_6:
    v15 = *(_QWORD **)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 64);
    v18 = *(_QWORD *)(v16 + 96);
    v17 = *(_QWORD *)(v16 + 104);
    v19 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 48) + 216) & 0xFF003FF80000 | v18;
    v20 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v20)
    {
      v36 = *(_BYTE **)(a1 + 88);
      do
      {
        v37 = *v36 & 0x7F;
        if (v37 >= 0x40)
          goto LABEL_44;
        v38 = 1 << v37;
        v19 &= ~v38;
        v17 &= ~v38;
        ++v36;
      }
      while (--v20);
    }
    v21 = *(unsigned int *)(a1 + 116);
    if (!(_DWORD)v21)
      break;
    v39 = *(_BYTE **)(a1 + 104);
    while (1)
    {
      v40 = (*v39 + 32) & 0x7F;
      if (v40 >= 0x40)
        break;
      v41 = 1 << v40;
      v19 &= ~v41;
      v17 &= ~v41;
      ++v39;
      if (!--v21)
        goto LABEL_8;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    *(_DWORD *)(a2 + 208) = 0;
  }
LABEL_8:
  v49[0] = v19;
  v49[1] = v17;
  v22 = *(_QWORD *)(a1 + 128);
  if ((v22 & 1) != 0)
  {
    v42 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
    if ((v22 & 2) != 0
      || ((v43 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v43 != 0x3FFFFFFF)
        ? (v44 = (_DWORD)v43 == -1)
        : (v44 = 1),
          v44))
    {
      v45 = 2;
    }
    else if (v43 >> 28)
    {
      v47 = v42;
      v48 = v15;
      v42 = WTF::fastMalloc((WTF *)0x10);
      v15 = v48;
      *(_QWORD *)v42 = v47;
      *(_DWORD *)(v42 + 8) = v43;
      v45 = 1;
    }
    else
    {
      v45 = v42;
      v42 = v43 << 36;
    }
    v22 = v42 | v45;
    v23 = ((v42 | v45) & 1) == 0;
  }
  else
  {
    v23 = 1;
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v50, v15, v49, a2, v22, *(_QWORD *)(a1 + 136) + 8, (uint64_t)operationGetByValMegamorphicGeneric, *(char *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_WORD *)(a1 + 160), HIBYTE(*(_WORD *)(a1 + 160)));
  if (!v23 && (v22 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v22 & 0xFFFFFFFF8, v24, v25, v26, v27, v28, v29, v30);
  v31 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      v46 = v31;
      JSC::AssemblerBuffer::outOfLineGrow(v31, (uint64_t)v24, v25, v26, v27, v28, v29, v30);
      v31 = v46;
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v33 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v31, (uint64_t)v24, v25, v26, v27, v28, v29, v30);
    v33 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v34 = 69;
  else
    v34 = 65;
  v50[0] = i;
  v50[1] = 0;
  v51 = v34;
  v52 = 15;
  v53 = -1;
  LODWORD(v49[0]) = *(_DWORD *)(a1 + 164);
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v50, (unsigned int *)v49, a2, v26, v27, v28, v29, v30);
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x30);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3576438;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)a2;
  if ((v2 & 1) != 0)
  {
    v5 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v6 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v6 != 0x3FFFFFFF)
        ? (v7 = (_DWORD)v6 == -1)
        : (v7 = 1),
          v7))
    {
      v8 = 2;
    }
    else if (v6 >> 28)
    {
      v11 = a2;
      v12 = result;
      v9 = v5;
      v10 = v6;
      v5 = WTF::fastMalloc((WTF *)0x10);
      a2 = v11;
      result = v12;
      *(_QWORD *)v5 = v9;
      *(_DWORD *)(v5 + 8) = v10;
      v8 = 1;
    }
    else
    {
      v8 = v5;
      v5 = v6 << 36;
    }
    v2 = v5 | v8;
  }
  *(_QWORD *)(result + 24) = v2;
  v3 = *(unsigned int **)(a2 + 16);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 32) = v3;
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(JSC::FTL::PatchpointExceptionHandle **a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC::JITGetByValGenerator *v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t *result;
  char v77;
  char v78;
  char v79;
  __int128 v80;
  unsigned int *v81;
  char v82;
  JSC::FTL::PatchpointExceptionHandle *v83;
  uint64_t v84;
  uint64_t v85[2];
  char v86;
  char v87;
  char v88;
  char v89;
  int v90;
  int v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  unsigned int *v97;
  uint64_t v98;
  int v99[3];

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "GetByValWithThis");
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(*((_QWORD *)*a1 + 3) + 64);
  JSC::CodeOrigin::CodeOrigin(&v98, (const JSC::CodeOrigin *)(a1 + 1));
  v15 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v7, &v98);
  v99[0] = v15;
  if ((v98 & 1) != 0 && (v98 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v98 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(a1[2], (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v80);
  v16 = (unsigned int *)v80;
  JSC::FTL::ExceptionTarget::jumps((JSC::FTL::ExceptionTarget *)v80, (JSC::CCallHelpers *)a2, (uint64_t *)&v97);
  if (v16)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v16, v17, v18, v19, v20, v21, v22, v23);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind((uint64_t)a1[2], a3, v15, v19, v20, v21, v22, v23);
  v24 = *(_DWORD *)(a3 + 20);
  if (!v24)
    goto LABEL_34;
  if (v24 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197D9F728);
  }
  if (v24 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197D9F730);
  }
  if (v24 == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197D9F738);
  }
  v25 = *(char **)(a3 + 8);
  v26 = *v25;
  v27 = v25[16];
  v28 = v25[32];
  v29 = v25[48];
  v79 = v6;
  if (!HIBYTE(qword_1ECF4C780))
  {
    v30 = -1;
    goto LABEL_14;
  }
  if (!*(_DWORD *)(a3 + 36))
  {
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x197D9F720);
  }
  v30 = **(_BYTE **)(a3 + 24);
LABEL_14:
  v31 = v26 & 0x7F;
  v32 = v27 & 0x7F;
  v33 = v28 & 0x7F;
  v34 = v29 & 0x7F;
  v96 = v30;
  JSC::FTL::State::addStructureStubInfo(*a1);
  v36 = v35;
  v37 = *(_QWORD *)(a2 + 336);
  LOBYTE(v91) = 5;
  *(_QWORD *)&v80 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)a3);
  *((_QWORD *)&v80 + 1) = v38;
  v95 = v32;
  v94 = v34;
  v77 = v33;
  v78 = v31;
  v93 = v33;
  v92 = v31;
  v39 = (unsigned int *)WTF::fastMalloc((WTF *)0x40);
  v40 = WTF::Box<JSC::JITGetByValWithThisGenerator>::Data::Data<JSC::CodeBlock *,JSC::StructureStubInfo *&,JSC::JITType,JSC::CodeOrigin const&,JSC::CallSiteIndex &,JSC::AccessType,JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID const&,JSC::ARM64Registers::RegisterID&>(v39, v37, v36, 5u, (JSC::CodeOrigin *)(a1 + 1), v99, (char *)&v91, (uint64_t)&v80, &v95, &v94, &v93, &v92, &v96);
  v47 = (JSC::JITGetByValGenerator *)(v40 + 2);
  *(_WORD *)(*((_QWORD *)v40 + 2) + 129) = *(_WORD *)(*((_QWORD *)v40 + 2) + 129) & 0xFFDF | (32 * ((_BYTE)a1[3] & 7));
  *(_WORD *)(*((_QWORD *)v40 + 2) + 129) = *(_WORD *)(*((_QWORD *)v40 + 2) + 129) & 0xFFBF | ((*((_BYTE *)a1 + 25) & 3) << 6);
  *(_WORD *)(*((_QWORD *)v40 + 2) + 129) = *(_WORD *)(*((_QWORD *)v40 + 2) + 129) & 0xFF7F | ((*((_BYTE *)a1 + 26) & 1) << 7);
  if (*((_BYTE *)a1 + 27))
  {
    v48 = -1;
    v49 = 0xFF000F4100000000;
  }
  else
  {
    JSC::MacroAssemblerARM64::branchTest64(a2, 1, v32, 28, v43, v44, v45, v46, (uint64_t)&v80);
    v48 = v80;
    v49 = *(_QWORD *)((char *)&v80 + 4);
  }
  JSC::JITGetByValGenerator::generateFastPath(v47, (JSC::CCallHelpers *)a2, v41, v42, v43, v44, v45, v46);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v50, v51, v52, v53, v54, v55, v56, &v91);
  LODWORD(v80) = v48;
  *(_QWORD *)((char *)&v80 + 4) = v49;
  do
    v57 = __ldaxr(v39);
  while (__stlxr(v57 + 1, v39));
  v81 = v39;
  v82 = v96;
  v83 = *a1;
  JSC::B3::StackmapGenerationParams::StackmapGenerationParams((uint64_t)&v84, (const JSC::B3::StackmapGenerationParams *)a3);
  JSC::CodeOrigin::CodeOrigin(v85, (const JSC::CodeOrigin *)(a1 + 1));
  v58 = v97;
  if (v97)
  {
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 + 1, v58));
  }
  v85[1] = (uint64_t)v58;
  v86 = v78;
  v87 = v32;
  v88 = v34;
  v89 = v77;
  v90 = v91;
  do
  {
    v74 = __ldaxr(v39);
    v75 = v74 - 1;
  }
  while (__stlxr(v75, v39));
  if (!v75)
  {
    atomic_store(1u, v39);
    WTF::fastFree((unint64_t)v39, v67, v68, v69, v70, v71, v72, v73);
  }
  result = WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::~Box((unint64_t *)&v97, v67, v68, v69, v70, v71, v72, v73);
  *(_BYTE *)(a2 + 212) = v79;
  return result;
}

uint64_t JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE v16[128];
  unsigned int *v17;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v17;
    *(_DWORD *)(a1 + 12) = v10 + 1;
  }
}

_DWORD *WTF::Box<JSC::JITGetByValWithThisGenerator>::Data::Data<JSC::CodeBlock *,JSC::StructureStubInfo *&,JSC::JITType,JSC::CodeOrigin const&,JSC::CallSiteIndex &,JSC::AccessType,JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID const&,JSC::ARM64Registers::RegisterID&>(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, JSC::CodeOrigin *a5, int *a6, char *a7, uint64_t a8, char *a9, char *a10, char *a11, char *a12, _BYTE *a13)
{
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v30;

  *a1 = 1;
  v17 = (uint64_t)(a1 + 2);
  JSC::CodeOrigin::CodeOrigin(&v30, a5);
  BYTE1(v26) = *a13;
  LOBYTE(v26) = -1;
  JSC::JITGetByValWithThisGenerator::JITGetByValWithThisGenerator(v17, a2, a3, 0, a4, &v30, *a6, *a7, a8, *a9, 0, *a10, 0, *a11, 0, *a12, v26);
  if ((v30 & 1) != 0 && (v30 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v30 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  return a1;
}

uint64_t WTF::createSharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x90);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3576460;
  *a1 = v4;
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v3 = result;
  *(_DWORD *)result = *(_DWORD *)a2;
  *(_QWORD *)(result + 4) = *(_QWORD *)(a2 + 4);
  v4 = *(unsigned int **)(a2 + 16);
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 16) = v4;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(unsigned int *)(a2 + 60);
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = v6;
  *(_DWORD *)(result + 60) = v7;
  if ((_DWORD)v7)
  {
    if (v7 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v8 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v7));
    *(_DWORD *)(v3 + 56) = v7;
    *(_QWORD *)(v3 + 48) = v8;
    v9 = *(unsigned int *)(a2 + 60);
    if ((_DWORD)v9)
    {
      v10 = *(__int128 **)(a2 + 48);
      v11 = 16 * v9;
      do
      {
        v12 = *v10++;
        *v8++ = v12;
        v11 -= 16;
      }
      while (v11);
    }
  }
  v13 = (WTF *)*(unsigned int *)(a2 + 76);
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_DWORD *)(v3 + 76) = (_DWORD)v13;
  if ((_DWORD)v13)
  {
    v14 = (void *)WTF::fastMalloc(v13);
    *(_DWORD *)(v3 + 72) = (_DWORD)v13;
    *(_QWORD *)(v3 + 64) = v14;
    memcpy(v14, *(const void **)(a2 + 64), *(unsigned int *)(a2 + 76));
  }
  v15 = (WTF *)*(unsigned int *)(a2 + 92);
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_DWORD *)(v3 + 92) = (_DWORD)v15;
  if ((_DWORD)v15)
  {
    v19 = (void *)WTF::fastMalloc(v15);
    *(_DWORD *)(v3 + 88) = (_DWORD)v15;
    *(_QWORD *)(v3 + 80) = v19;
    memcpy(v19, *(const void **)(a2 + 80), *(unsigned int *)(a2 + 92));
  }
  v16 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(v3 + 96) = *(_QWORD *)(a2 + 96);
  if ((v16 & 1) != 0)
  {
    v20 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v21 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v21 != 0x3FFFFFFF)
        ? (v22 = (_DWORD)v21 == -1)
        : (v22 = 1),
          v22))
    {
      v23 = 2;
    }
    else if (v21 >> 28)
    {
      v24 = v21;
      v25 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v25 = v20;
      *(_DWORD *)(v25 + 8) = v24;
      v23 = 1;
      v20 = v25;
    }
    else
    {
      v23 = v20;
      v20 = v21 << 36;
    }
    v16 = v20 | v23;
  }
  *(_QWORD *)(v3 + 104) = v16;
  v17 = *(unsigned int **)(a2 + 112);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *(_QWORD *)(v3 + 112) = v17;
  *(_DWORD *)(v3 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(v3 + 124) = *(_DWORD *)(a2 + 124);
  return v3;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  unsigned int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  _QWORD *v51;
  uint64_t v52;
  unsigned int v53;
  int v54[2];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[36];
  int v59;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (*(_DWORD *)a1 != -1)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (!HIBYTE(qword_1ECF4C780))
  {
    v11 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)v58 = *(_DWORD *)(v11 + 52);
    *(_QWORD *)&v58[4] = *(_QWORD *)(v11 + 56);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v58, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, a2, a3, a4, a5, a6, a7, a8, &v59);
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16), *(char *)(a1 + 24), v12, v13, v14, v15, v16);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + 48) = operationGetByValWithThisOptimize;
    v51 = *(_QWORD **)(a1 + 32);
    v56 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 40));
    v57 = v52;
    JSC::CodeOrigin::CodeOrigin(&v55, (const JSC::CodeOrigin *)(a1 + 104));
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v58, v51, &v56, a2, v55, *(_QWORD *)(a1 + 112) + 8, *(unsigned __int8 *)(a1 + 24) | 0x3000000000, *(char *)(a1 + 120), *(_WORD *)(a1 + 121), HIBYTE(*(_WORD *)(a1 + 121)), *(_BYTE *)(a1 + 123), *(_BYTE *)(a1 + 24));
    v26 = *(_QWORD *)v58;
    v27 = v55;
    if ((v55 & 1) == 0)
      goto LABEL_9;
  }
  else
  {
    v17 = *(unsigned __int8 **)(a1 + 32);
    v56 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 40));
    v57 = v18;
    JSC::CodeOrigin::CodeOrigin((uint64_t *)v54, (const JSC::CodeOrigin *)(a1 + 104));
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v58, v17, &v56, a2, *(uint64_t *)v54, *(_QWORD *)(a1 + 112) + 8, (uint64_t)operationGetByValWithThisOptimize, *(char *)(a1 + 120), *(_WORD *)(a1 + 121), HIBYTE(*(_WORD *)(a1 + 121)), *(_BYTE *)(a1 + 123), *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)(a1 + 16) + 16));
    v26 = *(_QWORD *)v58;
    v27 = *(_QWORD *)v54;
    if ((v54[0] & 1) == 0)
      goto LABEL_9;
  }
  if ((v27 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v27 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
LABEL_9:
  JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), (uint64_t)v19, v20, v21, v22, v23, v24, v25, (int *)&v56);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v28, v29, v30, v31, v32, v33);
  if (*(_BYTE *)(a2 + 328))
    v39 = 69;
  else
    v39 = 65;
  *(_QWORD *)v58 = v56;
  v58[8] = v39;
  *(_WORD *)&v58[9] = 15;
  v58[11] = -1;
  v53 = *(_DWORD *)(a1 + 124);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v58, &v53, a2, v34, v35, v36, v37, v38);
  v40 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v40 + 36) = v59;
  *(_QWORD *)(v40 + 40) = v26;
  do
    v41 = __ldaxr((unsigned int *)v40);
  while (__stlxr(v41 + 1, (unsigned int *)v40));
  *(_QWORD *)v58 = v40;
  *(_QWORD *)v58 = 0;
  do
  {
    v49 = __ldaxr((unsigned int *)v40);
    v50 = v49 - 1;
  }
  while (__stlxr(v50, (unsigned int *)v40));
  if (!v50)
  {
    atomic_store(1u, (unsigned int *)v40);
    WTF::fastFree(v40, v42, v43, v44, v45, v46, v47, v48);
  }
  *(_BYTE *)(a2 + 212) = v10;
}

void JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12)
{
  unsigned __int8 v13;
  uint64_t v15;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint8x8_t v48;
  __int32 v49;
  uint8x8_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v60;
  char v61;
  char v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int8x8_t v81;
  int v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  JSC::AssemblerBuffer *v99;
  int v100;
  uint64_t v101;
  uint64_t v102[8];
  char v103;
  void *__dst;
  __int128 v105;
  uint64_t v106;

  v13 = a7;
  v15 = a5;
  v19 = *(_QWORD *)(*a2 + 16);
  if ((a5 & 1) == 0)
  {
    if ((a5 & 2) == 0)
      goto LABEL_3;
LABEL_99:
    v25 = 0xFFFFFFFFLL;
    goto LABEL_7;
  }
  v88 = *(_QWORD *)(a5 & 0xFFFFFFFF8);
  if ((a5 & 2) != 0
    || ((v89 = *(unsigned int *)((a5 & 0xFFFFFFFF8) + 8), (_DWORD)v89 != 0x3FFFFFFF)
      ? (v90 = (_DWORD)v89 == -1)
      : (v90 = 1),
        v90))
  {
    v91 = 2;
  }
  else if (v89 >> 28)
  {
    v97 = a2;
    v98 = WTF::fastMalloc((WTF *)0x10);
    a2 = v97;
    *(_QWORD *)v98 = v88;
    *(_DWORD *)(v98 + 8) = v89;
    v91 = 1;
    v88 = v98;
  }
  else
  {
    v91 = *(_QWORD *)(a5 & 0xFFFFFFFF8);
    v88 = v89 << 36;
  }
  v15 = v88 | v91;
  if (((v88 | v91) & 2) != 0)
    goto LABEL_99;
LABEL_3:
  v20 = *(_QWORD *)(a2[3] + 64);
  v21 = v15;
  if ((v15 & 1) != 0)
  {
    v92 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
    v93 = *(unsigned int *)((v15 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v93 == 0x3FFFFFFF || (_DWORD)v93 == -1)
    {
      v95 = 2;
    }
    else if (v93 >> 28)
    {
      v99 = *(JSC::AssemblerBuffer **)(a2[3] + 64);
      v96 = WTF::fastMalloc((WTF *)0x10);
      v20 = (uint64_t)v99;
      *(_QWORD *)v96 = v92;
      *(_DWORD *)(v96 + 8) = v93;
      v95 = 1;
      v92 = v96;
    }
    else
    {
      v95 = *(_QWORD *)(v15 & 0xFFFFFFFF8);
      v92 = v93 << 36;
    }
    v21 = v92 | v95;
  }
  v102[0] = v21;
  v24 = JSC::DFG::CodeOriginPool::addCodeOrigin(v20, v102);
  if ((v102[0] & 1) != 0 && (v102[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v102[0] & 0xFFFFFFFF8, v22, v23, a4, a5, a6, a7, a8);
  if (v24)
  {
    v25 = v24;
LABEL_7:
    if (!*(_BYTE *)(a4 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197DA0364);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a4, (JSC::ARM64LogicalImmediate *)v25, a4 + 264, a4, a5, a6, a7, a8);
    v31 = *(_DWORD *)(a4 + 200);
    if (v31 + 4 > *(_DWORD *)(a4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), v26, v27, v28, v29, v30, a7, a8);
      v31 = *(_DWORD *)(a4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + v31) = -1207811152;
    *(_DWORD *)(a4 + 200) += 4;
  }
  v32 = a3[1] | *a3;
  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  v33 = (unint64_t)JSC::FTL::SlowPathCallContext::SlowPathCallContext(v102, v32, a4, 6u, a8, 8, a7, a8);
  v41 = 0;
  __dst = (char *)&v105 + 8;
  *(_QWORD *)&v105 = 5;
  if (v13 != 8)
  {
    WORD4(v105) = v13 | 0x800;
    v41 = 1;
    DWORD1(v105) = 1;
  }
  if (a9)
  {
    *((_WORD *)&v105 + v41++ + 4) = a9;
    DWORD1(v105) = v41;
  }
  if (a10 != 1)
  {
    *((_WORD *)&v105 + v41++ + 4) = a10 | 0x100;
    DWORD1(v105) = v41;
  }
  if (a11 != 2)
  {
    *((_WORD *)&v105 + v41++ + 4) = a11 | 0x200;
    DWORD1(v105) = v41;
  }
  if (a12 == 3)
  {
    if (!v41)
      goto LABEL_62;
  }
  else
  {
    *((_WORD *)&v105 + v41++ + 4) = a12 | 0x300;
    DWORD1(v105) = v41;
  }
  do
  {
    while (2)
    {
      v42 = 0;
      v43 = 0;
      v44 = (char *)__dst;
      v45 = v41;
      do
      {
        if ((*((_BYTE *)__dst + v42 + 1) & 0x40) != 0)
        {
LABEL_72:
          __break(1u);
          goto LABEL_73;
        }
        v43 |= 1 << *((_BYTE *)__dst + v42 + 1);
        v42 += 2;
      }
      while (2 * v41 != v42);
      v46 = 0;
      do
      {
        v47 = *((_BYTE *)__dst + v46) & 0x7F;
        if (v47 >= 0x40)
          goto LABEL_72;
        v43 &= ~(1 << v47);
        v46 += 2;
      }
      while (2 * v41 != v46);
      v48 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
      v48.i16[0] = vaddlv_u8(v48);
      v49 = v48.i32[0];
      v50 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v43));
      v50.i16[0] = vaddlv_u8(v50);
      if (v50.i32[0] + v49)
      {
        v51 = 0;
        if (v41 <= 1)
          v52 = 1;
        else
          v52 = v41;
        v53 = 2 * v52;
        while (1)
        {
          v54 = *((unsigned __int8 *)__dst + v51 + 1);
          if ((v54 & 0x7Fu) >= 0x40)
            goto LABEL_72;
          if (((v43 >> (v54 & 0x7F)) & 1) != 0)
            break;
          v51 += 2;
          if (v53 == v51)
            goto LABEL_52;
        }
        v55 = *((unsigned __int8 *)__dst + v51);
        if (v55 != v54)
        {
          v56 = (char)v55;
          if ((char)v55 == 63)
          {
            v57 = *(_DWORD *)(a4 + 200);
            v58 = *(_DWORD *)(a4 + 192);
            if ((char)v54 == 31)
              goto LABEL_56;
            v60 = v54 & 0x1F | 0xD2800000;
          }
          else
          {
            v57 = *(_DWORD *)(a4 + 200);
            v58 = *(_DWORD *)(a4 + 192);
            if (v54 != 31 && v56 != 31)
            {
              v60 = v54 & 0xFFE0FFFF | ((v56 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_57;
            }
LABEL_56:
            v60 = (char)v54 | (32 * v56) | 0x91000000;
          }
LABEL_57:
          if (v57 + 4 > v58)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), (uint64_t)v34, v35, v36, v37, v38, v39, v40);
            v57 = *(_DWORD *)(a4 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a4 + 56) + v57) = v60;
          *(_DWORD *)(a4 + 200) += 4;
          v44 = (char *)__dst;
          v45 = DWORD1(v105);
        }
        v33 = (unint64_t)memmove(&v44[v51], &v44[v51 + 2], 2 * v45 - v51 - 2);
        v41 = DWORD1(v105) - 1;
        DWORD1(v105) = v41;
        if (v41)
          continue;
        goto LABEL_61;
      }
      break;
    }
    v61 = *(_BYTE *)__dst;
    v62 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a4, *(char *)__dst, v62, v36, v37, v38, v39, v40);
    memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v105) - 2);
    v63 = --DWORD1(v105);
    if (DWORD1(v105))
    {
      v64 = __dst;
      v65 = 2 * v63;
      while (*v64 != v62)
      {
        v64 += 2;
        v65 -= 2;
        if (!v65)
          goto LABEL_51;
      }
      *v64 = v61;
    }
LABEL_51:
    v33 = WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,5u>(std::array<JSC::ARM64Registers::RegisterID,5u>,std::array<JSC::ARM64Registers::RegisterID,5u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v103, 0);
    v41 = DWORD1(v105);
LABEL_52:
    ;
  }
  while (v41);
LABEL_61:
  v33 = (unint64_t)__dst;
  if ((char *)&v105 + 8 == __dst)
    goto LABEL_62;
LABEL_73:
  if (v33)
  {
    __dst = 0;
    LODWORD(v105) = 0;
    WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
  }
LABEL_62:
  v66 = *(_DWORD *)(a4 + 200);
  if (v66 + 4 > *(_DWORD *)(a4 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), (uint64_t)v34, v35, v36, v37, v38, v39, v40);
    v66 = *(_DWORD *)(a4 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a4 + 56) + v66) = -763363324;
  *(_DWORD *)(a4 + 200) += 4;
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v102, v19, 0x3000000008uLL, v36, v37, v38, v39, v40, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v105;
  *(_QWORD *)(a1 + 24) = v106;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v102, v67, v68, v69, v70, v71, v72, v73);
  if (a6)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a4, v19, 0, 0, 0xFFFFFFFFLL, v78, v79, v80, (uint64_t)&v100, v81);
    v82 = v100;
    if (v100 != -1)
    {
      v83 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v83 == *(_DWORD *)(a6 + 8))
      {
        v84 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (void *)(v83 + 1), (unint64_t)&v100, v76, v77, v78, v79, v80);
        v86 = *v84;
        v85 = (uint64_t *)(v84 + 1);
        v82 = v86;
        LODWORD(v83) = *(_DWORD *)(a6 + 12);
      }
      else
      {
        v85 = &v101;
      }
      v87 = *(_QWORD *)a6 + 12 * v83;
      *(_DWORD *)v87 = v82;
      *(_QWORD *)(v87 + 4) = *v85;
      ++*(_DWORD *)(a6 + 12);
    }
  }
  if ((v15 & 1) != 0 && (v15 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v15 & 0xFFFFFFFF8, v74, v75, v76, v77, v78, v79, v80);
}

void JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11, JSC::ARM64LogicalImmediate *a12)
{
  uint64_t *v12;
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint8x8_t v40;
  __int32 v41;
  uint8x8_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  unsigned int v52;
  char v53;
  char v54;
  uint64_t v55;
  unsigned __int8 *v56;
  char *v57;
  uint64_t v58;
  _BYTE *v59;
  int v60;
  unsigned __int8 *v61;
  char *v62;
  unsigned __int8 *v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  void *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int8x8_t v88;
  int v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 *v103;
  uint64_t v104;
  int64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  int v110;
  uint64_t v111;
  void *__dst;
  __int128 v113;
  uint64_t v114;
  uint64_t v115[9];

  v12 = (uint64_t *)a8;
  v14 = a5;
  v18 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  if ((a5 & 1) == 0)
  {
    if ((a5 & 2) == 0)
      goto LABEL_3;
LABEL_107:
    v24 = 0xFFFFFFFFLL;
    goto LABEL_7;
  }
LABEL_83:
  v93 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
  if ((v14 & 2) != 0
    || ((v94 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v94 != 0x3FFFFFFF)
      ? (v95 = (_DWORD)v94 == -1)
      : (v95 = 1),
        v95))
  {
    v96 = 2;
  }
  else if (v94 >> 28)
  {
    v103 = a2;
    v104 = WTF::fastMalloc((WTF *)0x10);
    a2 = v103;
    *(_QWORD *)v104 = v93;
    *(_DWORD *)(v104 + 8) = v94;
    v96 = 1;
    v93 = v104;
  }
  else
  {
    v96 = v93;
    v93 = v94 << 36;
  }
  v14 = v93 | v96;
  if (((v93 | v96) & 2) != 0)
    goto LABEL_107;
LABEL_3:
  v19 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
  v20 = v14;
  if ((v14 & 1) != 0)
  {
    v97 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    v98 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8);
    if ((_DWORD)v98 == 0x3FFFFFFF || (_DWORD)v98 == -1)
    {
      v100 = 2;
    }
    else if (v98 >> 28)
    {
      v101 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 64);
      v102 = WTF::fastMalloc((WTF *)0x10);
      v19 = v101;
      *(_QWORD *)v102 = v97;
      *(_DWORD *)(v102 + 8) = v98;
      v100 = 1;
      v97 = v102;
    }
    else
    {
      v100 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      v97 = v98 << 36;
    }
    v20 = v97 | v100;
  }
  v115[0] = v20;
  v23 = JSC::DFG::CodeOriginPool::addCodeOrigin(v19, v115);
  if ((v115[0] & 1) != 0 && (v115[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v115[0] & 0xFFFFFFFF8, v21, v22, a4, a5, a6, a7, a8);
  if (v23)
  {
    v24 = v23;
LABEL_7:
    if (!*(_BYTE *)(a4 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197DA0A48);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a4, (JSC::ARM64LogicalImmediate *)v24, a4 + 264, a4, a5, a6, a7, a8);
    v30 = *(_DWORD *)(a4 + 200);
    if (v30 + 4 > *(_DWORD *)(a4 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), v25, v26, v27, v28, v29, a7, a8);
      v30 = *(_DWORD *)(a4 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a4 + 56) + v30) = -1207811152;
    *(_DWORD *)(a4 + 200) += 4;
  }
  v31 = a3[1] | *a3;
  *(_DWORD *)a1 = -1;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v115, v31, a4, 6u, (uint64_t)v12, 0xFFFFFFFFLL, a7, a8);
  v33 = 0;
  a3 = (_QWORD *)&v113 + 1;
  __dst = (char *)&v113 + 8;
  *(_QWORD *)&v113 = 3;
  if (a9)
  {
    WORD4(v113) = a9;
    v33 = 1;
    DWORD1(v113) = 1;
  }
  if (a10 != 1)
  {
    *((_WORD *)&v113 + v33++ + 4) = a10 | 0x100;
    DWORD1(v113) = v33;
  }
  if (a11 == 2)
  {
    v12 = &v111;
    if (!v33)
      goto LABEL_73;
  }
  else
  {
    *((_WORD *)&v113 + v33++ + 4) = a11 | 0x200;
    DWORD1(v113) = v33;
    v12 = &v111;
  }
  do
  {
    v34 = 0;
    v35 = 0;
    v36 = (char *)__dst;
    v37 = v33;
    do
    {
      if ((*((_BYTE *)__dst + v34 + 1) & 0x40) != 0)
      {
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      v35 |= 1 << *((_BYTE *)__dst + v34 + 1);
      v34 += 2;
    }
    while (2 * v33 != v34);
    v38 = 0;
    do
    {
      v39 = *((_BYTE *)__dst + v38) & 0x7F;
      if (v39 >= 0x40)
        goto LABEL_82;
      v35 &= ~(1 << v39);
      v38 += 2;
    }
    while (2 * v33 != v38);
    v40 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
    v40.i16[0] = vaddlv_u8(v40);
    v41 = v40.i32[0];
    v42 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v35));
    v42.i16[0] = vaddlv_u8(v42);
    if (v42.i32[0] + v41)
    {
      v43 = 0;
      if (v33 <= 1)
        v44 = 1;
      else
        v44 = v33;
      v45 = 2 * v44;
      while (1)
      {
        v46 = *((unsigned __int8 *)__dst + v43 + 1);
        if ((v46 & 0x7Fu) >= 0x40)
          goto LABEL_82;
        if (((v35 >> (v46 & 0x7F)) & 1) != 0)
          break;
        v43 += 2;
        if (v45 == v43)
          goto LABEL_66;
      }
      v47 = *((unsigned __int8 *)__dst + v43);
      if (v47 != v46)
      {
        v48 = (char)v47;
        if ((char)v47 == 63)
        {
          v49 = *(_DWORD *)(a4 + 200);
          v50 = *(_DWORD *)(a4 + 192);
          if ((char)v46 == 31)
            goto LABEL_60;
          v52 = v46 & 0x1F | 0xD2800000;
        }
        else
        {
          v49 = *(_DWORD *)(a4 + 200);
          v50 = *(_DWORD *)(a4 + 192);
          v51 = v46 == 31 || v48 == 31;
          if (!v51)
          {
            v52 = v46 & 0xFFE0FFFF | ((v48 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_61;
          }
LABEL_60:
          v52 = (char)v46 | (32 * v48) | 0x91000000;
        }
LABEL_61:
        if (v49 + 4 > v50)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), (uint64_t)a2, v32, a4, a5, a6, a7, a8);
          v49 = *(_DWORD *)(a4 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a4 + 56) + v49) = v52;
        *(_DWORD *)(a4 + 200) += 4;
        v36 = (char *)__dst;
        v37 = DWORD1(v113);
      }
      memmove(&v36[v43], &v36[v43 + 2], 2 * v37 - v43 - 2);
      v33 = DWORD1(v113) - 1;
      goto LABEL_65;
    }
    v108 = v18;
    v53 = *(_BYTE *)__dst;
    v54 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a4, *(char *)__dst, v54, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * DWORD1(v113) - 2);
    v55 = (DWORD1(v113) - 1);
    v51 = DWORD1(v113) == 1;
    DWORD1(v113) = v55;
    v56 = (unsigned __int8 *)__dst;
    v57 = (char *)__dst + 2 * v55;
    if (v51)
    {
      v64 = 0;
      v65 = 0;
      v60 = 0;
      a2 = (unsigned __int8 *)v57;
    }
    else
    {
      v58 = 2 * v55;
      v59 = __dst;
      while (*v59 != v54)
      {
        v59 += 2;
        v58 -= 2;
        if (!v58)
          goto LABEL_45;
      }
      *v59 = v53;
LABEL_45:
      v60 = 0;
      v61 = v56;
      a2 = (unsigned __int8 *)v57;
      v62 = v57;
      do
      {
        if (*v56 == v56[1])
        {
          v63 = v56;
          if (v62 != (char *)__dst + 2 * DWORD1(v113))
          {
            v107 = v57;
            if (v56 == a2)
            {
              v63 = (unsigned __int8 *)v62;
            }
            else
            {
              v105 = v61 - a2;
              v106 = v62;
              memmove(v62, a2, v61 - a2);
              v63 = (unsigned __int8 *)&v106[v105];
            }
            v57 = v107;
          }
          a2 = v56 + 2;
          ++v60;
          v62 = (char *)v63;
        }
        v56 += 2;
        v61 += 2;
      }
      while (v56 < (unsigned __int8 *)v57);
      v56 = (unsigned __int8 *)__dst;
      v64 = DWORD1(v113);
      v65 = DWORD1(v113);
      v57 = v62;
    }
    v66 = &v56[2 * v64];
    v18 = v108;
    if (a2 != v66)
    {
      memmove(v57, a2, v66 - a2);
      v65 = DWORD1(v113);
    }
    v33 = v65 - v60;
LABEL_65:
    DWORD1(v113) = v33;
LABEL_66:
    ;
  }
  while (v33);
  v67 = __dst;
  if ((char *)&v113 + 8 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v113) = 0;
    WTF::fastFree((unint64_t)v67, a2, v32, a4, a5, a6, a7, a8);
  }
LABEL_73:
  v68 = *(_DWORD *)(a4 + 200);
  if (v68 + 4 > *(_DWORD *)(a4 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a4 + 56), (uint64_t)a2, v32, a4, a5, a6, a7, a8);
    v68 = *(_DWORD *)(a4 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a4 + 56) + v68) = -763363324;
  *(_DWORD *)(a4 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a4, (uint64_t)a12, 3, a4, a5, a6, a7, a8);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v115, v18, a7, v69, v70, v71, v72, v73, (uint64_t)&__dst);
  *(_QWORD *)a1 = __dst;
  *(_OWORD *)(a1 + 8) = v113;
  *(_QWORD *)(a1 + 24) = v114;
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v115, v74, v75, v76, v77, v78, v79, v80);
  if (a6)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a4, v18, 0, 0, 0xFFFFFFFFLL, v85, v86, v87, (uint64_t)&v110, v88);
    v89 = v110;
    if (v110 != -1)
    {
      v90 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v90 == *(_DWORD *)(a6 + 8))
      {
        v91 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (void *)(v90 + 1), (unint64_t)&v110, v83, v84, v85, v86, v87);
        v12 = (uint64_t *)(v91 + 1);
        v89 = *v91;
        LODWORD(v90) = *(_DWORD *)(a6 + 12);
      }
      v92 = *(_QWORD *)a6 + 12 * v90;
      *(_DWORD *)v92 = v89;
      *(_QWORD *)(v92 + 4) = *v12;
      ++*(_DWORD *)(a6 + 12);
    }
  }
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, v81, v82, v83, v84, v85, v86, v87);
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>(uint64_t a1, unsigned int **a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = v4;
  v6 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3576488;
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(v4 + 16) = v6;
  v8 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v8 != *(_DWORD *)(a1 + 240))
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
LABEL_14:
    *v9 = v5;
    *(_DWORD *)(a1 + 244) = v8 + 1;
    return;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = *(const void **)(a1 + 232);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a1 + 240) = v12;
    *(_QWORD *)(a1 + 232) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*(const void **)(a1 + 232) == v13)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v8 = *(unsigned int *)(a1 + 244);
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
    goto LABEL_14;
  }
  __break(0xC471u);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThis(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, JSC::LinkBuffer *a2)
{
  return JSC::JITByIdGenerator::finalize((JSC::JITByIdGenerator *)(*(_QWORD *)(a1 + 16) + 8), a2, a2);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  JSC::FTL::ExceptionTarget *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  char *v38;
  char v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  _DWORD *v49;
  uint64_t *v50;
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  int *v64;
  int *v65;
  int v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int8x8_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  _DWORD *v80;
  uint64_t *v81;
  int v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int8x8_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  int *v97;
  int *v98;
  int v99;
  char *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  JSC::FTL::ExceptionTarget *v109;
  unsigned int v110;
  unsigned int v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  WTF *v115;
  int v116;
  _BYTE *v117;
  WTF *v118;
  char *v119;
  JSC::FTL::ExceptionTarget *v120;
  char v121;
  int i;
  unsigned int v124;
  _QWORD *v125;
  int v126;
  WTF *v127;
  WTF *v128;
  uint64_t v129;
  uint64_t v130;
  _OWORD *v131;
  uint64_t v132;
  __int128 *v133;
  uint64_t v134;
  __int128 v135;
  WTF *v136;
  void *v137;
  WTF *v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t *v152;
  char v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  WTF *v168;
  unint64_t v169;
  unsigned int v170;
  unsigned int v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  const void *v175;
  void *v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  BOOL v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int *v185;
  unsigned int v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  BOOL v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v194;
  uint64_t v195;
  char v196;
  char v197;
  char v198;
  char v199;
  char v200;
  _QWORD *v201;
  unsigned int v202;
  int v203;
  _QWORD v204[5];
  _OWORD *v205;
  int v206;
  int v207;
  void *v208;
  int v209;
  int v210;
  void *v211;
  int v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int *v216;
  char v217;
  uint64_t v218;
  char v219;
  char v220;
  char v221;
  int v222;
  int v223;
  int v224;
  int v225;
  uint64_t v226;
  int v227;
  int v228;
  int v229;
  uint64_t v230;
  WTF *v231;
  uint64_t v232;
  _BYTE v233[24];
  unsigned int *v234;
  uint64_t v235;
  JSC::FTL::ExceptionTarget *v236;
  int v237;
  unsigned int v238;
  uint64_t v239;

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v7 & 1) != 0)
  {
    v178 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v179 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v179 != 0x3FFFFFFF)
        ? (v180 = (_DWORD)v179 == -1)
        : (v180 = 1),
          v180))
    {
      v181 = 2;
    }
    else if (v179 >> 28)
    {
      v194 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v194 = v178;
      *(_DWORD *)(v194 + 8) = v179;
      v181 = 1;
      v178 = v194;
    }
    else
    {
      v181 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v178 = v179 << 36;
    }
    v7 = v178 | v181;
  }
  v235 = v7;
  v16 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v8, &v235);
  if ((v235 & 1) != 0 && (v235 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v235 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v236);
  v17 = v236;
  JSC::FTL::ExceptionTarget::jumps(v236, (JSC::CCallHelpers *)a2, (uint64_t *)&v234);
  v236 = 0;
  if (v17)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v17);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v17));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v17);
      v182 = (unsigned int *)*((_QWORD *)v17 + 2);
      *((_QWORD *)v17 + 2) = 0;
      if (v182)
      {
        do
        {
          v183 = __ldaxr(v182);
          v184 = v183 - 1;
        }
        while (__stlxr(v184, v182));
        if (!v184)
        {
          atomic_store(1u, v182);
          WTF::fastFree((unint64_t)v182, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      v185 = (unsigned int *)*((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = 0;
      if (v185)
      {
        do
        {
          v186 = __ldaxr(v185);
          v187 = v186 - 1;
        }
        while (__stlxr(v187, v185));
        if (!v187)
        {
          atomic_store(1u, v185);
          WTF::fastFree((unint64_t)v185, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      WTF::fastFree((unint64_t)v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 32), a3, v16, v20, v21, v22, v23, v24);
  v31 = *(_DWORD *)(a3 + 20);
  if (!v31)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA185CLL);
  }
  if (v31 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA1864);
  }
  if (v31 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA186CLL);
  }
  if (v31 == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA1874);
  }
  v32 = *(_DWORD *)(a3 + 36);
  if (!v32)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA187CLL);
  }
  if (v32 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA1884);
  }
  if (v32 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA188CLL);
  }
  v198 = v6;
  if (v32 == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA1894);
  }
  v33 = *(char **)(a3 + 8);
  v34 = *v33;
  v35 = v33[16];
  v36 = v33[32] & 0x7F;
  v37 = v33[48];
  v38 = *(char **)(a3 + 24);
  v199 = *v38;
  v39 = v38[1];
  v40 = v38[2];
  v41 = v38[3];
  v231 = (WTF *)v233;
  v232 = 2;
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, v36, 28, v27, v28, v29, v30, (uint64_t)&v229);
  v47 = v229;
  if (v229 != -1)
  {
    v48 = HIDWORD(v232);
    if (HIDWORD(v232) == (_DWORD)v232)
    {
      v49 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v231, (void *)(HIDWORD(v232) + 1), (unint64_t)&v229, v42, v43, v44, v45, v46);
      v51 = *v49;
      v50 = (uint64_t *)(v49 + 1);
      v47 = v51;
      v48 = HIDWORD(v232);
    }
    else
    {
      v50 = &v230;
    }
    v52 = (char *)v231 + 12 * v48;
    *(_DWORD *)v52 = v47;
    *(_QWORD *)(v52 + 4) = *v50;
    ++HIDWORD(v232);
  }
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    goto LABEL_165;
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  JSC::MacroAssemblerARM64::load8(a2, v36 | 0x500000000, *(char *)(a2 + 304), v42, v43, v44, v45, v46);
  JSC::MacroAssemblerARM64::branch32(a2, 1, 17, 2, v53, v54, v55, v56, (uint64_t)&v227);
  v62 = v227;
  if (v227 != -1)
  {
    v63 = HIDWORD(v232);
    if (HIDWORD(v232) == (_DWORD)v232)
    {
      v64 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v231, (void *)(HIDWORD(v232) + 1), (unint64_t)&v227, v57, v58, v59, v60, v61);
      v66 = *v64;
      v65 = v64 + 1;
      v62 = v66;
      v63 = HIDWORD(v232);
    }
    else
    {
      v65 = &v228;
    }
    v67 = (char *)v231 + 12 * v63;
    *(_DWORD *)v67 = v62;
    *(_QWORD *)(v67 + 4) = *(_QWORD *)v65;
    ++HIDWORD(v232);
  }
  v197 = v37;
  JSC::MacroAssemblerARM64::load64(a2, v36 | 0x800000000, (char)v41, v57, v58, v59, v60, v61);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, (char)v41, 1, v68, v69, v70, v71, (uint64_t)&v225, v72);
  v78 = v225;
  if (v225 != -1)
  {
    v79 = HIDWORD(v232);
    if (HIDWORD(v232) == (_DWORD)v232)
    {
      v80 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v231, (void *)(HIDWORD(v232) + 1), (unint64_t)&v225, v73, v74, v75, v76, v77);
      v82 = *v80;
      v81 = (uint64_t *)(v80 + 1);
      v78 = v82;
      v79 = HIDWORD(v232);
    }
    else
    {
      v81 = &v226;
    }
    v83 = (char *)v231 + 12 * v79;
    *(_DWORD *)v83 = v78;
    *(_QWORD *)(v83 + 4) = *v81;
    ++HIDWORD(v232);
  }
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197DA1714);
  }
  v84 = v34 & 0x7F;
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  JSC::MacroAssemblerARM64::load32(a2, v41 | 0x1000000000, *(char *)(a2 + 304), v73, v74, v75, v76, v77);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, a2, 0, 17, v85, v86, v87, v88, (uint64_t)&v223, v89);
  v95 = v223;
  if (v223 != -1)
  {
    v96 = HIDWORD(v232);
    if (HIDWORD(v232) == (_DWORD)v232)
    {
      v97 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v231, (void *)(HIDWORD(v232) + 1), (unint64_t)&v223, v90, v91, v92, v93, v94);
      v99 = *v97;
      v98 = v97 + 1;
      v95 = v99;
      v96 = HIDWORD(v232);
    }
    else
    {
      v98 = &v224;
    }
    v100 = (char *)v231 + 12 * v96;
    *(_DWORD *)v100 = v95;
    *(_QWORD *)(v100 + 4) = *(_QWORD *)v98;
    ++HIDWORD(v232);
  }
  v101 = v199;
  v200 = v35 & 0x7F;
  v196 = v84;
  JSC::AssemblyHelpers::loadMegamorphicProperty(a2, *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16), v35 & 0x7F, (char)v41, 0, v84, v101, v39, (uint64_t)&v236, v40);
  v109 = v236;
  v110 = v238;
  if (v238)
  {
    v111 = HIDWORD(v232);
    v112 = HIDWORD(v232) + (unint64_t)v238;
    if (v112 <= v232)
    {
LABEL_58:
      if (v112 < HIDWORD(v232))
      {
        __break(0xC471u);
        JUMPOUT(0x197DA18A4);
      }
      v119 = (char *)v231 + 12 * HIDWORD(v232);
      v120 = (JSC::FTL::ExceptionTarget *)((char *)v109 + 12 * v110);
      do
      {
        *(_DWORD *)v119 = *(_DWORD *)v109;
        *(_QWORD *)(v119 + 4) = *(_QWORD *)((char *)v109 + 4);
        v109 = (JSC::FTL::ExceptionTarget *)((char *)v109 + 12);
        v119 += 12;
      }
      while (v109 != v120);
      HIDWORD(v232) = v112;
      v109 = v236;
      goto LABEL_62;
    }
    v113 = v232 + ((unint64_t)v232 >> 2);
    if (v113 >= 0x10)
      v114 = v113 + 1;
    else
      v114 = 16;
    if (v114 <= v112)
      v114 = HIDWORD(v232) + (unint64_t)v238;
    v115 = v231;
    if (v114 < 3)
    {
      v231 = (WTF *)v233;
      LODWORD(v232) = 2;
      v117 = v233;
      if (!HIDWORD(v232))
        goto LABEL_53;
    }
    else
    {
      if (v114 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197DA18B4);
      }
      v116 = 12 * v114;
      v117 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v114));
      LODWORD(v232) = (v116 & 0xFFFFFFFC) / 0xC;
      v231 = (WTF *)v117;
      if (!v111)
        goto LABEL_53;
    }
    v118 = v115;
    do
    {
      *(_DWORD *)v117 = *(_DWORD *)v118;
      *(_QWORD *)(v117 + 4) = *(_QWORD *)((char *)v118 + 4);
      v118 = (WTF *)((char *)v118 + 12);
      v117 += 12;
    }
    while (v118 != (WTF *)((char *)v115 + 12 * v111));
LABEL_53:
    if (v233 != (_BYTE *)v115 && v115)
    {
      if (v231 == v115)
      {
        v231 = 0;
        LODWORD(v232) = 0;
      }
      WTF::fastFree((unint64_t)v115, v102, v103, v104, v105, v106, v107, v108);
    }
    goto LABEL_58;
  }
LABEL_62:
  v121 = v200;
  if (&v239 != (uint64_t *)v109 && v109 != 0)
  {
    v236 = 0;
    v237 = 0;
    WTF::fastFree((unint64_t)v109, v102, v103, v104, v105, v106, v107, v108);
  }
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v102, v103, v104, v105, v106, v107, v108);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v124 = HIDWORD(v232);
  v125 = v204;
  v201 = v204;
  v202 = 2;
  v203 = HIDWORD(v232);
  if (HIDWORD(v232) >= 3)
  {
    if (HIDWORD(v232) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197DA18ACLL);
    }
    v126 = 12 * HIDWORD(v232);
    v125 = (_QWORD *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v232)));
    v202 = (v126 & 0xFFFFFFFC) / 0xC;
    v201 = v125;
    v124 = HIDWORD(v232);
  }
  if (v124)
  {
    v127 = v231;
    v128 = (WTF *)((char *)v231 + 12 * v124);
    do
    {
      *(_DWORD *)v125 = *(_DWORD *)v127;
      *(_QWORD *)((char *)v125 + 4) = *(_QWORD *)((char *)v127 + 4);
      v127 = (WTF *)((char *)v127 + 12);
      v125 = (_QWORD *)((char *)v125 + 12);
    }
    while (v127 != v128);
  }
  v129 = *(_QWORD *)a3;
  v204[3] = *(_QWORD *)(a1 + 16);
  v204[4] = v129;
  v130 = *(unsigned int *)(a3 + 20);
  v205 = 0;
  v206 = 0;
  v207 = v130;
  if ((_DWORD)v130)
  {
    if (v130 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197DA189CLL);
    }
    v131 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v130));
    v206 = v130;
    v205 = v131;
    v132 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v132)
    {
      v133 = *(__int128 **)(a3 + 8);
      v134 = 16 * v132;
      do
      {
        v135 = *v133++;
        *v131++ = v135;
        v134 -= 16;
      }
      while (v134);
    }
  }
  v136 = (WTF *)*(unsigned int *)(a3 + 36);
  v208 = 0;
  v209 = 0;
  v210 = (int)v136;
  if ((_DWORD)v136)
  {
    v137 = (void *)WTF::fastMalloc(v136);
    v209 = (int)v136;
    v208 = v137;
    memcpy(v137, *(const void **)(a3 + 24), *(unsigned int *)(a3 + 36));
  }
  v138 = (WTF *)*(unsigned int *)(a3 + 52);
  v211 = 0;
  v212 = 0;
  v213 = (int)v138;
  if ((_DWORD)v138)
  {
    v177 = (void *)WTF::fastMalloc(v138);
    v212 = (int)v138;
    v211 = v177;
    memcpy(v177, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 52));
  }
  v214 = *(_QWORD *)(a3 + 56);
  v139 = *(_QWORD *)(a1 + 24);
  if ((v139 & 1) != 0)
  {
    v188 = *(_QWORD *)(v139 & 0xFFFFFFFF8);
    if ((v139 & 2) != 0
      || ((v189 = *(unsigned int *)((v139 & 0xFFFFFFFF8) + 8), (_DWORD)v189 != 0x3FFFFFFF)
        ? (v190 = (_DWORD)v189 == -1)
        : (v190 = 1),
          v190))
    {
      v191 = 2;
    }
    else if (v189 >> 28)
    {
      v195 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v195 = v188;
      *(_DWORD *)(v195 + 8) = v189;
      v191 = 1;
      v188 = v195;
    }
    else
    {
      v191 = *(_QWORD *)(v139 & 0xFFFFFFFF8);
      v188 = v189 << 36;
    }
    v139 = v188 | v191;
    v121 = v200;
  }
  v215 = v139;
  v140 = v234;
  if (v234)
  {
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 + 1, v140));
  }
  v216 = v140;
  v217 = v196;
  v218 = *(_QWORD *)(a1 + 40);
  v219 = v121;
  v220 = v36;
  v221 = v197 & 0x7F;
  v222 = i;
  v142 = *(_QWORD *)(a3 + 56);
  v143 = WTF::fastMalloc((WTF *)0xA8);
  *(_DWORD *)(v143 + 8) = 1;
  *(_QWORD *)v143 = off_1E35764D8;
  v151 = *(unsigned int *)(v142 + 12);
  if ((_DWORD)v151 != *(_DWORD *)(v142 + 8))
  {
    v152 = (uint64_t *)(*(_QWORD *)v142 + 8 * v151);
    v153 = v198;
    goto LABEL_88;
  }
  v172 = v151 + (v151 >> 2);
  if (v172 >= 0x10)
    v173 = v172 + 1;
  else
    v173 = 16;
  if (v173 <= v151 + 1)
    v174 = v151 + 1;
  else
    v174 = v173;
  if (v174 >> 29)
  {
    __break(0xC471u);
LABEL_165:
    JUMPOUT(0x197DA16A0);
  }
  v175 = *(const void **)v142;
  v176 = (void *)WTF::fastMalloc((WTF *)(8 * v174));
  *(_DWORD *)(v142 + 8) = v174;
  *(_QWORD *)v142 = v176;
  memcpy(v176, v175, 8 * v151);
  v153 = v198;
  if (v175)
  {
    if (*(const void **)v142 == v175)
    {
      *(_QWORD *)v142 = 0;
      *(_DWORD *)(v142 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v175, v144, v145, v146, v147, v148, v149, v150);
  }
  v151 = *(unsigned int *)(v142 + 12);
  v152 = (uint64_t *)(*(_QWORD *)v142 + 8 * v151);
LABEL_88:
  *v152 = v143;
  *(_DWORD *)(v142 + 12) = v151 + 1;
  v168 = v231;
  if (v233 != (_BYTE *)v231 && v231)
  {
    v231 = 0;
    LODWORD(v232) = 0;
    WTF::fastFree((unint64_t)v168, v161, v162, v163, v164, v165, v166, v167);
  }
  v169 = (unint64_t)v234;
  v234 = 0;
  if (v169)
  {
    do
    {
      v170 = __ldaxr((unsigned int *)v169);
      v171 = v170 - 1;
    }
    while (__stlxr(v171, (unsigned int *)v169));
    if (!v171)
    {
      atomic_store(1u, (unsigned int *)v169);
      v192 = *(_QWORD *)(v169 + 8);
      if (v169 + 24 != v192 && v192 != 0)
      {
        *(_QWORD *)(v169 + 8) = 0;
        *(_DWORD *)(v169 + 16) = 0;
        WTF::fastFree(v192, v161, v162, v163, v164, v165, v166, v167);
      }
      WTF::fastFree(v169, v161, v162, v163, v164, v165, v166, v167);
    }
  }
  *(_BYTE *)(a2 + 212) = v153;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  __int128 v22;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v4 = *((unsigned int *)a2 + 3);
  v5 = a1 + 16;
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = v4;
  if (v4 >= 3)
  {
    if (v4 >= 0x15555556)
      goto LABEL_31;
    v6 = 12 * v4;
    v5 = WTF::fastMalloc((WTF *)(12 * v4));
    *(_DWORD *)(a1 + 8) = (v6 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)a1 = v5;
  }
  v7 = *((_DWORD *)a2 + 3);
  if (v7)
  {
    v8 = *a2;
    v9 = *a2 + 12 * v7;
    do
    {
      *(_DWORD *)v5 = *(_DWORD *)v8;
      *(_QWORD *)(v5 + 4) = *(_QWORD *)(v8 + 4);
      v8 += 12;
      v5 += 12;
    }
    while (v8 != v9);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  v10 = *((unsigned int *)a2 + 17);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = v10;
  if ((_DWORD)v10)
  {
    if (!(v10 >> 28))
    {
      v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v10));
      *(_DWORD *)(a1 + 64) = v10;
      *(_QWORD *)(a1 + 56) = v11;
      v12 = *((unsigned int *)a2 + 17);
      if ((_DWORD)v12)
      {
        v13 = (__int128 *)a2[7];
        v14 = 16 * v12;
        do
        {
          v15 = *v13++;
          *v11++ = v15;
          v14 -= 16;
        }
        while (v14);
      }
      goto LABEL_12;
    }
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x197DA1ACCLL);
  }
LABEL_12:
  v16 = (WTF *)*((unsigned int *)a2 + 21);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = (_DWORD)v16;
  if ((_DWORD)v16)
  {
    v17 = (void *)WTF::fastMalloc(v16);
    *(_DWORD *)(a1 + 80) = (_DWORD)v16;
    *(_QWORD *)(a1 + 72) = v17;
    memcpy(v17, (const void *)a2[9], *((unsigned int *)a2 + 21));
  }
  v18 = (WTF *)*((unsigned int *)a2 + 25);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = (_DWORD)v18;
  if ((_DWORD)v18)
  {
    v24 = (void *)WTF::fastMalloc(v18);
    *(_DWORD *)(a1 + 96) = (_DWORD)v18;
    *(_QWORD *)(a1 + 88) = v24;
    memcpy(v24, (const void *)a2[11], *((unsigned int *)a2 + 25));
  }
  v19 = a2[14];
  *(_QWORD *)(a1 + 104) = a2[13];
  if ((v19 & 1) != 0)
  {
    v25 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v26 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v26 != 0x3FFFFFFF)
        ? (v27 = (_DWORD)v26 == -1)
        : (v27 = 1),
          v27))
    {
      v28 = 2;
    }
    else if (v26 >> 28)
    {
      v29 = v26;
      v30 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v30 = v25;
      *(_DWORD *)(v30 + 8) = v29;
      v28 = 1;
      v25 = v30;
    }
    else
    {
      v28 = v25;
      v25 = v26 << 36;
    }
    v19 = v25 | v28;
  }
  *(_QWORD *)(a1 + 112) = v19;
  v20 = (unsigned int *)a2[15];
  if (v20)
  {
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  *(_QWORD *)(a1 + 120) = v20;
  v22 = *((_OWORD *)a2 + 8);
  *(_DWORD *)(a1 + 143) = *(_DWORD *)((char *)a2 + 143);
  *(_OWORD *)(a1 + 128) = v22;
  *(_DWORD *)(a1 + 148) = *((_DWORD *)a2 + 37);
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileGetByValWithThisMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::AssemblerBuffer *v34;
  int i;
  unsigned int v36;
  char v37;
  unsigned int *result;
  _BYTE *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  JSC::AssemblerBuffer *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD v49[2];
  unsigned int v50[2];
  char v51;
  __int16 v52;
  char v53;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    goto LABEL_44;
  while (1)
  {
    *(_BYTE *)(a2 + 212) = 1;
    v11 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = 12 * v11;
      while (v13 < *(unsigned int *)(a1 + 28))
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 16) + v12), a2, a3, a4, a5, a6, a7, a8);
        ++v13;
        v12 += 12;
        if (v14 == v12)
          goto LABEL_6;
      }
      __break(0xC471u);
      goto LABEL_43;
    }
LABEL_6:
    v15 = *(_QWORD **)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 64);
    v18 = *(_QWORD *)(v16 + 96);
    v17 = *(_QWORD *)(v16 + 104);
    v19 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 48) + 216) & 0xFF003FF80000 | v18;
    v20 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v20)
    {
      v21 = *(_BYTE **)(a1 + 88);
      do
      {
        v22 = *v21 & 0x7F;
        if (v22 >= 0x40)
          goto LABEL_43;
        v23 = 1 << v22;
        v19 &= ~v23;
        v17 &= ~v23;
        ++v21;
      }
      while (--v20);
    }
    v24 = *(unsigned int *)(a1 + 116);
    if (!(_DWORD)v24)
      break;
    v39 = *(_BYTE **)(a1 + 104);
    while (1)
    {
      v40 = (*v39 + 32) & 0x7F;
      if (v40 >= 0x40)
        break;
      v41 = 1 << v40;
      v19 &= ~v41;
      v17 &= ~v41;
      ++v39;
      if (!--v24)
        goto LABEL_11;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    *(_DWORD *)(a2 + 208) = 0;
  }
LABEL_11:
  v49[0] = v19;
  v49[1] = v17;
  v25 = *(_QWORD *)(a1 + 128);
  if ((v25 & 1) != 0)
  {
    v42 = *(_QWORD *)(v25 & 0xFFFFFFFF8);
    if ((v25 & 2) != 0
      || ((v43 = *(unsigned int *)((v25 & 0xFFFFFFFF8) + 8), (_DWORD)v43 != 0x3FFFFFFF)
        ? (v44 = (_DWORD)v43 == -1)
        : (v44 = 1),
          v44))
    {
      v45 = 2;
    }
    else if (v43 >> 28)
    {
      v47 = v42;
      v48 = v15;
      v42 = WTF::fastMalloc((WTF *)0x10);
      v15 = v48;
      *(_QWORD *)v42 = v47;
      *(_DWORD *)(v42 + 8) = v43;
      v45 = 1;
    }
    else
    {
      v45 = v42;
      v42 = v43 << 36;
    }
    v25 = v42 | v45;
    v26 = ((v42 | v45) & 1) == 0;
  }
  else
  {
    v26 = 1;
  }
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v50, v15, v49, a2, v25, *(_QWORD *)(a1 + 136) + 8, (uint64_t)operationGetByValWithThisMegamorphicGeneric, *(char *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_WORD *)(a1 + 160), HIBYTE(*(_WORD *)(a1 + 160)), *(_BYTE *)(a1 + 162));
  if (!v26 && (v25 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v25 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  v34 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      v46 = v34;
      JSC::AssemblerBuffer::outOfLineGrow(v34, (uint64_t)v27, v28, v29, v30, v31, v32, v33);
      v34 = v46;
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v36 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v34, (uint64_t)v27, v28, v29, v30, v31, v32, v33);
    v36 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v37 = 69;
  else
    v37 = 65;
  v50[0] = i;
  v50[1] = 0;
  v51 = v37;
  v52 = 15;
  v53 = -1;
  LODWORD(v49[0]) = *(_DWORD *)(a1 + 164);
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v50, (unsigned int *)v49, a2, v29, v30, v31, v32, v33);
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *,long long),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::DFG::Node *v16;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v15 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), 2, v14, *a3, *a4, *a5, *a6);
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x30);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,long long),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::BasicBlock *v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  JSC::DFG::Node *v20;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), a2);
  v15 = *a5;
  v16 = *a6;
  v17 = (JSC::B3::BasicBlock *)a1[3472];
  v18 = (JSC::B3::Value *)a1[3470];
  v19 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(2, a1[3471], v14, *a3, *a4, v15, v16);
  JSC::B3::Procedure::addValueImpl(v18, v19);
  JSC::B3::BasicBlock::append(v17, v19);
}

uint64_t JSC::FTL::Output::store32(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3, const JSC::FTL::AbstractHeap *a4)
{
  uint64_t v8;
  JSC::B3::Value *v9;

  v8 = *((_QWORD *)a4 + 3);
  if (v8)
  {
    v9 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(this, v8);
    a3 = (JSC::B3::Value *)JSC::FTL::Output::add(this, a3, v9);
  }
  return JSC::FTL::Output::store((uint64_t)this, (uint64_t)a2, a4, (uint64_t)a3);
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::getIntTypedArrayStoreOperand(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  int v9;
  uint64_t v11;
  WTF *v12;
  JSC::FTL::Output *v13;
  JSC::B3::Value *v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  JSC::B3::BasicBlock *v20;
  uint64_t v21;
  JSC::B3::Value *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::B3::Value *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::B3::Value *v36;
  JSC::B3::Value *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  JSC::B3::Value *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF *v59;
  JSC::B3::Value *v60;
  JSC::B3::Value *v61;
  uint64_t v62;
  uint64_t v63;
  JSC::B3::BasicBlock *v64;
  uint64_t v65;
  JSC::B3::Value *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  JSC::B3::Value *v72;
  uint64_t v73;
  JSC::B3::Value *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 *v82;
  JSC::B3::Value *v83;
  JSC::B3::Value *v84;
  __int128 v85;
  char v86;
  WTF *v87;
  uint64_t v88;
  _OWORD v89[3];

  v9 = a3;
  v11 = (a2 >> 50) & 0x3F;
  if ((_DWORD)v11 == 1)
  {
    v13 = (JSC::FTL::Output *)(a1 + 27640);
    JSC::FTL::Output::constInt32(v13, 255);
    if ((v9 & 1) != 0)
    {
      v82 = (__int128 *)JSC::FTL::Output::patchpoint(v13, 1);
      v87 = v12;
      v88 = 0;
      LOBYTE(v89[0]) = 3;
      JSC::B3::StackmapValue::append(v82, (uint64_t)v12, (unint64_t)&v88);
      *((_BYTE *)v82 + 168) = 1;
      *((_QWORD *)v82 + 14) = 0;
      *((_QWORD *)v82 + 15) = 0;
      v12 = (WTF *)v82;
      *((_QWORD *)v82 + 16) = 0;
    }
    return (__int128 *)v12;
  }
  if ((_DWORD)v11 != 49)
  {
    if ((_DWORD)v11 != 52)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x4FAB, "LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::getIntTypedArrayStoreOperand(Edge, BOOL)", "Bad use kind");
      __break(0xC471u);
      JUMPOUT(0x197DA2494);
    }
    v12 = JSC::FTL::Output::castToInt32((JSC::FTL::Output *)(a1 + 27640), v60);
    v61 = *(JSC::B3::Value **)(a1 + 27672);
    v62 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), 255);
    if ((v9 & 1) == 0)
      return (__int128 *)v12;
    v83 = v61;
    v84 = (JSC::B3::Value *)v62;
    v63 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    v64 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    v87 = (WTF *)v89;
    v88 = 2;
    *(_QWORD *)&v85 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), *(JSC::B3::Value **)(a1 + 27656));
    *((_QWORD *)&v85 + 1) = v65;
    v89[0] = v85;
    HIDWORD(v88) = 1;
    v66 = JSC::FTL::Output::lessThan((JSC::FTL::Output *)(a1 + 27640), v60, v83);
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v66, (uint64_t)v64, v63, NAN, NAN, v67, v68, v69, v70);
    *(_QWORD *)(a1 + 27776) = v63;
    v71 = *(_QWORD *)(a1 + 27784);
    *(_QWORD *)(a1 + 27784) = v64;
    v72 = JSC::FTL::Output::greaterThan((JSC::FTL::Output *)(a1 + 27640), v60, v84);
    v73 = JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 255);
    v74 = (JSC::B3::Value *)JSC::FTL::Output::select((JSC::FTL::Output *)(a1 + 27640), (uint64_t)v72, v73, (uint64_t)v12, 0);
    *(_QWORD *)&v85 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), v74);
    *((_QWORD *)&v85 + 1) = v75;
    if (HIDWORD(v88) == (_DWORD)v88)
    {
      WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v87, (unint64_t)&v85, v76, v77, v78, v79, v80, v81);
    }
    else
    {
      *((_OWORD *)v87 + HIDWORD(v88)) = v85;
      ++HIDWORD(v88);
    }
    JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v64, v76, v77, v78, v79, v80, v81);
    *(_QWORD *)(a1 + 27776) = v64;
    *(_QWORD *)(a1 + 27784) = v71;
    v51 = JSC::FTL::Output::phi<WTF::Vector<JSC::FTL::ValueFromBlock,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((_QWORD *)(a1 + 27640), 1, (unsigned int *)&v87);
    goto LABEL_13;
  }
  if (v9)
  {
    v18 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    v19 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    v20 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
    v87 = (WTF *)v89;
    v88 = 3;
    *(_QWORD *)&v85 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), *(JSC::B3::Value **)(a1 + 27656));
    *((_QWORD *)&v85 + 1) = v21;
    v89[0] = v85;
    HIDWORD(v88) = 1;
    v22 = JSC::FTL::Output::doubleLessThanOrUnordered((JSC::FTL::Output *)(a1 + 27640), v15, *(JSC::B3::Value **)(a1 + 27720));
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v22, (uint64_t)v20, v18, NAN, NAN, v23, v24, v25, v26);
    *(_QWORD *)(a1 + 27776) = v18;
    v27 = *(_QWORD *)(a1 + 27784);
    *(_QWORD *)(a1 + 27784) = v19;
    v28 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 255);
    *(_QWORD *)&v85 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), v28);
    *((_QWORD *)&v85 + 1) = v29;
    if (HIDWORD(v88) == (_DWORD)v88)
    {
      WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v87, (unint64_t)&v85, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *((_OWORD *)v87 + HIDWORD(v88)) = v85;
      ++HIDWORD(v88);
    }
    v36 = (JSC::B3::Value *)JSC::FTL::Output::constDouble((JSC::FTL::Output *)(a1 + 27640), 255.0);
    v37 = JSC::FTL::Output::doubleGreaterThan((JSC::FTL::Output *)(a1 + 27640), v15, v36);
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v37, (uint64_t)v20, v19, NAN, NAN, v38, v39, v40, v41);
    *(_QWORD *)(a1 + 27776) = v19;
    *(_QWORD *)(a1 + 27784) = v20;
    v42 = (__int128 *)JSC::FTL::Output::patchpoint((_QWORD *)(a1 + 27640), 4);
    v85 = (unint64_t)v15;
    v86 = 3;
    JSC::B3::StackmapValue::append(v42, (uint64_t)v15, (unint64_t)&v85 + 8);
    *((_QWORD *)v42 + 14) = 0;
    *((_QWORD *)v42 + 15) = 0;
    *((_QWORD *)v42 + 16) = 0;
    v43 = (JSC::B3::Value *)JSC::FTL::Output::doubleToInt((JSC::FTL::Output *)(a1 + 27640), (JSC::B3::Value *)v42);
    *(_QWORD *)&v85 = JSC::FTL::Output::anchor((JSC::FTL::Output *)(a1 + 27640), v43);
    *((_QWORD *)&v85 + 1) = v44;
    if (HIDWORD(v88) == (_DWORD)v88)
    {
      WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>((uint64_t)&v87, (unint64_t)&v85, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      *((_OWORD *)v87 + HIDWORD(v88)) = v85;
      ++HIDWORD(v88);
    }
    JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), v20, v45, v46, v47, v48, v49, v50);
    *(_QWORD *)(a1 + 27776) = v20;
    *(_QWORD *)(a1 + 27784) = v27;
    v51 = JSC::FTL::Output::phi<WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((_QWORD *)(a1 + 27640), 1, (unsigned int *)&v87);
LABEL_13:
    v12 = (WTF *)v51;
    v59 = v87;
    if (v89 != (_OWORD *)v87 && v87)
    {
      v87 = 0;
      LODWORD(v88) = 0;
      WTF::fastFree((unint64_t)v59, v52, v53, v54, v55, v56, v57, v58);
    }
    return (__int128 *)v12;
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::storeType(JSC::DFG::Graph **a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 - 1) <= 6)
  {
    if ((a2 - 4) > 3u)
      LOBYTE(v2) = 0;
    else
      v2 = qword_199124938[(char)(a2 - 4)];
    v3 = 1 << v2;
    switch(v3)
    {
      case 4:
        return 2;
      case 1:
        return 0;
      case 2:
        return 1;
    }
    JSC::DFG::Graph::logAssertionFailure(*a1, a1[3528], (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x4F1D, "Output::StoreType JSC::FTL::(anonymous namespace)::LowerDFGToB3::storeType(TypedArrayType)", "Bad element size");
    __break(0xC471u);
LABEL_17:
    JUMPOUT(0x197DA261CLL);
  }
  if (a2 == 8)
    return 5;
  if (a2 != 9)
  {
    JSC::DFG::Graph::logAssertionFailure(*a1, a1[3528], (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x4F27, "Output::StoreType JSC::FTL::(anonymous namespace)::LowerDFGToB3::storeType(TypedArrayType)", "Bad typed array type");
    __break(0xC471u);
    goto LABEL_17;
  }
  return 6;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::speculateTypedArrayIsNotDetached(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  JSC::FTL::Output *v4;
  uint64_t v5;
  JSC::B3::BasicBlock *v6;
  JSC::B3::Value *v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  JSC::B3::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value *Ptr;
  JSC::DFG::Node *v17;
  JSC::B3::Value *v18;
  int8x8_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;

  v4 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v5 = JSC::FTL::Output::newBlock((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640));
  v6 = (JSC::B3::BasicBlock *)JSC::FTL::Output::newBlock(v4);
  v7 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32(v4, a2, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2320));
  v8 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v4, 64);
  v9 = JSC::FTL::Output::bitAnd(v4, v7, v8);
  v10 = JSC::FTL::Output::logicalNot(v4, v9);
  JSC::FTL::Output::branch(v4, (uint64_t)v10, v5, (uint64_t)v6, NAN, NAN, v11, v12, v13, v14);
  *((_QWORD *)this + 3472) = v5;
  v15 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v6;
  Ptr = (JSC::B3::Value *)JSC::FTL::Output::loadPtr(v4, a2, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 2368));
  v17 = (JSC::DFG::Node *)*((_QWORD *)this + 3528);
  v18 = JSC::FTL::Output::isZero64(v4, Ptr);
  result = JSC::FTL::Output::jump(v4, v6, v20, v21, v22, v23, v24, v25);
  *((_QWORD *)this + 3472) = v6;
  *((_QWORD *)this + 3473) = v15;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3576500;
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)a2;
  if ((v2 & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v7 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v7 != 0x3FFFFFFF)
        ? (v8 = (_DWORD)v7 == -1)
        : (v8 = 1),
          v8))
    {
      v9 = 2;
    }
    else if (v7 >> 28)
    {
      v12 = a2;
      v13 = result;
      v10 = v6;
      v11 = v7;
      v6 = WTF::fastMalloc((WTF *)0x10);
      a2 = v12;
      result = v13;
      *(_QWORD *)v6 = v10;
      *(_DWORD *)(v6 + 8) = v11;
      v9 = 1;
    }
    else
    {
      v9 = v6;
      v6 = v7 << 36;
    }
    v2 = v6 | v9;
  }
  *(_QWORD *)(result + 24) = v2;
  v3 = *(unsigned int **)(a2 + 16);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 32) = v3;
  v5 = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(result + 44) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(result + 40) = v5;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t *JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(JSC::FTL::PatchpointExceptionHandle **a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t *result;
  char v75;
  JSC::FTL::ExceptionTarget *v76;
  uint64_t v77;
  JSC::FTL::PatchpointExceptionHandle *v78;
  uint64_t v79;
  uint64_t v80[2];
  char v81;
  char v82;
  char v83;
  int v84;
  int v85;
  char v86;
  char v87;
  char v88;
  char v89;
  unsigned int *v90;
  uint64_t v91;
  int v92[3];

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "PutByVal");
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(*((_QWORD *)*a1 + 3) + 64);
  JSC::CodeOrigin::CodeOrigin(&v91, (const JSC::CodeOrigin *)(a1 + 1));
  v15 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v7, &v91);
  v92[0] = v15;
  if ((v91 & 1) != 0 && (v91 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v91 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(a1[2], (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v76);
  v16 = (unsigned int *)v76;
  JSC::FTL::ExceptionTarget::jumps(v76, (JSC::CCallHelpers *)a2, (uint64_t *)&v90);
  if (v16)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v16, v17, v18, v19, v20, v21, v22, v23);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind((uint64_t)a1[2], a3, v15, v19, v20, v21, v22, v23);
  v24 = *(_DWORD *)(a3 + 20);
  if (!v24)
    goto LABEL_38;
  if (v24 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA2D08);
  }
  if (v24 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA2D10);
  }
  v25 = *(char **)(a3 + 8);
  v26 = *v25;
  v27 = v25[16];
  v28 = v25[32];
  v75 = v6;
  if (!HIBYTE(qword_1ECF4C780))
  {
    v29 = -1;
    goto LABEL_13;
  }
  if (!*(_DWORD *)(a3 + 36))
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x197DA2D00);
  }
  v29 = **(_BYTE **)(a3 + 24);
LABEL_13:
  v30 = v26 & 0x7F;
  v31 = v27 & 0x7F;
  v32 = v28 & 0x7F;
  v89 = v29;
  JSC::FTL::State::addStructureStubInfo(*a1);
  v34 = v33;
  v35 = *(_QWORD *)(a2 + 336);
  if (*((_BYTE *)a1 + 25))
    v36 = 13;
  else
    v36 = 12;
  if (*((_BYTE *)a1 + 25))
    v37 = 11;
  else
    v37 = 10;
  if (*((_BYTE *)a1 + 24))
    v38 = v36;
  else
    v38 = v37;
  LOBYTE(v85) = v38;
  v76 = (JSC::FTL::ExceptionTarget *)JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)a3);
  v77 = v39;
  v88 = v30;
  v87 = v31;
  v86 = v32;
  v40 = WTF::fastMalloc((WTF *)0x40);
  v41 = WTF::Box<JSC::JITPutByValGenerator>::Data::Data<JSC::CodeBlock *,JSC::StructureStubInfo *&,JSC::JITType,JSC::CodeOrigin const&,JSC::CallSiteIndex &,JSC::AccessType,JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID const&,JSC::ARM64Registers::RegisterID&>((_DWORD *)v40, v35, v34, 5u, (JSC::CodeOrigin *)(a1 + 1), v92, (char *)&v85, (uint64_t)&v76, &v88, &v87, &v86, &v89);
  *(_WORD *)(*(_QWORD *)(v40 + 16) + 129) = *(_WORD *)(*(_QWORD *)(v40 + 16) + 129) & 0xFFDF | (32
                                                                                                  * (*((_BYTE *)a1 + 26) & 7));
  *(_WORD *)(*(_QWORD *)(v40 + 16) + 129) = *(_WORD *)(*(_QWORD *)(v40 + 16) + 129) & 0xFFBF | ((*((_BYTE *)a1 + 27) & 3) << 6);
  *(_WORD *)(*(_QWORD *)(v40 + 16) + 129) = *(_WORD *)(*(_QWORD *)(v40 + 16) + 129) & 0xFF7F | ((*((_BYTE *)a1 + 28) & 1) << 7);
  JSC::JITGetByValGenerator::generateFastPath((JSC::JITGetByValGenerator *)(v41 + 2), (JSC::CCallHelpers *)a2, v42, v43, v44, v45, v46, v47);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, v48, v49, v50, v51, v52, v53, v54, &v85);
  do
    v55 = __ldaxr((unsigned int *)v40);
  while (__stlxr(v55 + 1, (unsigned int *)v40));
  v76 = (JSC::FTL::ExceptionTarget *)v40;
  LOWORD(v77) = *((_WORD *)a1 + 12);
  BYTE2(v77) = v89;
  v78 = *a1;
  JSC::B3::StackmapGenerationParams::StackmapGenerationParams((uint64_t)&v79, (const JSC::B3::StackmapGenerationParams *)a3);
  JSC::CodeOrigin::CodeOrigin(v80, (const JSC::CodeOrigin *)(a1 + 1));
  v56 = v90;
  if (v90)
  {
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 + 1, v56));
  }
  v80[1] = (uint64_t)v56;
  v81 = v30;
  v82 = v31;
  v83 = v32;
  v84 = v85;
  do
  {
    v72 = __ldaxr((unsigned int *)v40);
    v73 = v72 - 1;
  }
  while (__stlxr(v73, (unsigned int *)v40));
  if (!v73)
  {
    atomic_store(1u, (unsigned int *)v40);
    WTF::fastFree(v40, v65, v66, v67, v68, v69, v70, v71);
  }
  result = WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::~Box((unint64_t *)&v90, v65, v66, v67, v68, v69, v70, v71);
  *(_BYTE *)(a2 + 212) = v75;
  return result;
}

uint64_t JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE v16[112];
  unsigned int *v17;

  v10 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v17);
    v12 = v17;
    v17 = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v12 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = v17;
    *(_DWORD *)(a1 + 12) = v10 + 1;
  }
}

_DWORD *WTF::Box<JSC::JITPutByValGenerator>::Data::Data<JSC::CodeBlock *,JSC::StructureStubInfo *&,JSC::JITType,JSC::CodeOrigin const&,JSC::CallSiteIndex &,JSC::AccessType,JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID const&,JSC::ARM64Registers::RegisterID&>(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, JSC::CodeOrigin *a5, int *a6, char *a7, uint64_t a8, char *a9, char *a10, char *a11, _BYTE *a12)
{
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v29;

  *a1 = 1;
  v17 = (uint64_t)(a1 + 2);
  JSC::CodeOrigin::CodeOrigin(&v29, a5);
  BYTE1(v26) = *a12;
  LOBYTE(v26) = -1;
  JSC::JITPutByValGenerator::JITPutByValGenerator(v17, a2, a3, 0, a4, &v29, *a6, *a7, a8, *a9, 0, *a10, 0, *a11, v26);
  if ((v29 & 1) != 0 && (v29 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v29 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  return a1;
}

uint64_t WTF::createSharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E3576528;
  *a1 = v4;
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  __int16 v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v3 = result;
  v4 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)result = v4;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(unsigned int *)(a2 + 44);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 44) = v7;
  if ((_DWORD)v7)
  {
    if (v7 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v8 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v7));
    *(_DWORD *)(v3 + 40) = v7;
    *(_QWORD *)(v3 + 32) = v8;
    v9 = *(unsigned int *)(a2 + 44);
    if ((_DWORD)v9)
    {
      v10 = *(__int128 **)(a2 + 32);
      v11 = 16 * v9;
      do
      {
        v12 = *v10++;
        *v8++ = v12;
        v11 -= 16;
      }
      while (v11);
    }
  }
  v13 = (WTF *)*(unsigned int *)(a2 + 60);
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_DWORD *)(v3 + 60) = (_DWORD)v13;
  if ((_DWORD)v13)
  {
    v14 = (void *)WTF::fastMalloc(v13);
    *(_DWORD *)(v3 + 56) = (_DWORD)v13;
    *(_QWORD *)(v3 + 48) = v14;
    memcpy(v14, *(const void **)(a2 + 48), *(unsigned int *)(a2 + 60));
  }
  v15 = (WTF *)*(unsigned int *)(a2 + 76);
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_DWORD *)(v3 + 76) = (_DWORD)v15;
  if ((_DWORD)v15)
  {
    v20 = (void *)WTF::fastMalloc(v15);
    *(_DWORD *)(v3 + 72) = (_DWORD)v15;
    *(_QWORD *)(v3 + 64) = v20;
    memcpy(v20, *(const void **)(a2 + 64), *(unsigned int *)(a2 + 76));
  }
  v16 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(v3 + 80) = *(_QWORD *)(a2 + 80);
  if ((v16 & 1) != 0)
  {
    v21 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || ((v22 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v22 != 0x3FFFFFFF)
        ? (v23 = (_DWORD)v22 == -1)
        : (v23 = 1),
          v23))
    {
      v24 = 2;
    }
    else if (v22 >> 28)
    {
      v25 = v22;
      v26 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v26 = v21;
      *(_DWORD *)(v26 + 8) = v25;
      v24 = 1;
      v21 = v26;
    }
    else
    {
      v24 = v21;
      v21 = v22 << 36;
    }
    v16 = v21 | v24;
  }
  *(_QWORD *)(v3 + 88) = v16;
  v17 = *(unsigned int **)(a2 + 96);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *(_QWORD *)(v3 + 96) = v17;
  v19 = *(_WORD *)(a2 + 104);
  *(_BYTE *)(v3 + 106) = *(_BYTE *)(a2 + 106);
  *(_WORD *)(v3 + 104) = v19;
  *(_DWORD *)(v3 + 108) = *(_DWORD *)(a2 + 108);
  return v3;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(unint64_t, unint64_t, const WTF::StringImpl *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, __n128);
  uint64_t (*v18)(uint64_t, unint64_t, const WTF::StringImpl *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, __n128);
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unsigned int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v56;
  int v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[36];
  int v62;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (!HIBYTE(qword_1ECF4C780))
  {
    v11 = *(_QWORD *)a1;
    *(_DWORD *)v61 = *(_DWORD *)(*(_QWORD *)a1 + 52);
    *(_QWORD *)&v61[4] = *(_QWORD *)(v11 + 56);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v61, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, a2, a3, a4, a5, a6, a7, a8, &v62);
  if (a1[9])
    v17 = operationDirectPutByValSloppyOptimize;
  else
    v17 = operationDirectPutByValStrictOptimize;
  v18 = operationPutByValSloppyOptimize;
  if (!a1[9])
    v18 = operationPutByValStrictOptimize;
  if (a1[8])
    v19 = (uint64_t)v17;
  else
    v19 = (uint64_t)v18;
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)a1 + 16), (char)a1[10], v12, v13, v14, v15, v16);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 48) = v19;
    v54 = (_QWORD *)*((_QWORD *)a1 + 2);
    v59 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 24));
    v60 = v55;
    JSC::CodeOrigin::CodeOrigin(&v58, (const JSC::CodeOrigin *)(a1 + 88));
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v61, v54, &v59, a2, v58, *((_QWORD *)a1 + 12) + 8, a1[10] | 0x3000000000, 0xFFFFFFFFLL, *((_WORD *)a1 + 52), HIBYTE(*((_WORD *)a1 + 52)), a1[106], a1[10]);
    v29 = *(_QWORD *)v61;
    v30 = v58;
    if ((v58 & 1) == 0)
      goto LABEL_15;
  }
  else
  {
    v20 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
    v59 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)(a1 + 24));
    v60 = v21;
    JSC::CodeOrigin::CodeOrigin((uint64_t *)v57, (const JSC::CodeOrigin *)(a1 + 88));
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v61, v20, &v59, a2, *(uint64_t *)v57, *((_QWORD *)a1 + 12) + 8, v19, 0xFFFFFFFFLL, *((_WORD *)a1 + 52), HIBYTE(*((_WORD *)a1 + 52)), a1[106], *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)a1 + 16));
    v29 = *(_QWORD *)v61;
    v30 = *(_QWORD *)v57;
    if ((v57[0] & 1) == 0)
      goto LABEL_15;
  }
  if ((v30 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v30 & 0xFFFFFFFF8, v22, v23, v24, v25, v26, v27, v28);
LABEL_15:
  JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), (uint64_t)v22, v23, v24, v25, v26, v27, v28, (int *)&v59);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v31, v32, v33, v34, v35, v36);
  if (*(_BYTE *)(a2 + 328))
    v42 = 69;
  else
    v42 = 65;
  *(_QWORD *)v61 = v59;
  v61[8] = v42;
  *(_WORD *)&v61[9] = 15;
  v61[11] = -1;
  v56 = *((_DWORD *)a1 + 27);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v61, &v56, a2, v37, v38, v39, v40, v41);
  v43 = *(_QWORD *)a1;
  *(_DWORD *)(v43 + 36) = v62;
  *(_QWORD *)(v43 + 40) = v29;
  do
    v44 = __ldaxr((unsigned int *)v43);
  while (__stlxr(v44 + 1, (unsigned int *)v43));
  *(_QWORD *)v61 = v43;
  *(_QWORD *)v61 = 0;
  do
  {
    v52 = __ldaxr((unsigned int *)v43);
    v53 = v52 - 1;
  }
  while (__stlxr(v53, (unsigned int *)v43));
  if (!v53)
  {
    atomic_store(1u, (unsigned int *)v43);
    WTF::fastFree(v43, v45, v46, v47, v48, v49, v50, v51);
  }
  *(_BYTE *)(a2 + 212) = v10;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>(uint64_t a1, unsigned int **a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = WTF::fastMalloc((WTF *)0x18);
  v5 = v4;
  v6 = *a2;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3576550;
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(v4 + 16) = v6;
  v8 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v8 != *(_DWORD *)(a1 + 240))
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
LABEL_14:
    *v9 = v5;
    *(_DWORD *)(a1 + 244) = v8 + 1;
    return;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = *(const void **)(a1 + 232);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a1 + 240) = v12;
    *(_QWORD *)(a1 + 232) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*(const void **)(a1 + 232) == v13)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v8 = *(unsigned int *)(a1 + 244);
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
    goto LABEL_14;
  }
  __break(0xC471u);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByVal(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, JSC::LinkBuffer *a2)
{
  return JSC::JITByIdGenerator::finalize((JSC::JITByIdGenerator *)(*(_QWORD *)(a1 + 16) + 8), a2, a2);
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::getIntTypedArrayStoreOperand(JSC::DFG::Edge,BOOL)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E3576578;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::FTL::`anonymous namespace'::LowerDFGToB3::getIntTypedArrayStoreOperand(JSC::DFG::Edge,BOOL)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#2}>(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v2 + 8) = 1;
  *(_QWORD *)v2 = off_1E35765A0;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v2;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::FTL::Output::phi<WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(_QWORD *a1, int a2, unsigned int *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  result = JSC::FTL::Output::phi(a1, a2);
  v5 = a3[3];
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v7 = (_QWORD *)(*(_QWORD *)a3 + 8);
    do
    {
      v8 = *(v7 - 1);
      if (v8 || *v7)
      {
        if ((*(_WORD *)(v8 + 12) & 0xFFF) != 0x98)
          v8 = 0;
        *(_QWORD *)(v8 + 40) = result;
      }
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return result;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getIntTypedArrayStoreOperand(JSC::DFG::Edge,BOOL)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char *v10;
  char v11;
  char v12;
  uint64_t v13;
  JSC::AssemblerBuffer *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v8 = *(_DWORD *)(a3 + 20);
  if (!v8)
    goto LABEL_11;
  if (v8 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA37E0);
  }
  if (!*(_DWORD *)(a3 + 36))
  {
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x197DA37D8);
  }
  v10 = *(char **)(a3 + 8);
  v11 = *v10;
  v12 = v10[16];
  v13 = **(char **)(a3 + 24);
  v14 = (JSC::AssemblerBuffer *)(a2 + 14);
  v15 = a2[50];
  if (v15 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v15 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v15) = ((unsigned __int16)(32 * (v12 & 0x1F)) | ((v12 & 0x1F) << 16) | v11 & 0x1F)
                                         + 178289664;
  v16 = a2[50];
  v17 = v16 + 4;
  a2[50] = v16 + 4;
  if ((v16 + 8) > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v17 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v17) = v13 | 0x32001FE0;
  a2[50] += 4;
  JSC::MacroAssemblerARM64::moveConditionally32(a2, 3, v11 & 0x7F, v13, v11 & 0x7F, v13, v11 & 0x7F, a8);
}

__n128 WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::ValueFromBlock>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 result;

  v9 = (__n128 *)WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  result = *v9;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v9;
  return result;
}

uint64_t WTF::Vector<JSC::FTL::ValueFromBlock,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 16 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v8 - v10) >> 4);
      if (v15 < 4)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 3;
        goto LABEL_33;
      }
      if (!(v15 >> 28))
      {
        v16 = WTF::fastMalloc((WTF *)(16 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_33:
        v26 = 0;
        do
        {
          *(_OWORD *)(v16 + v26) = *(_OWORD *)(v10 + v26);
          v26 += 16;
        }
        while (16 * v11 != v26);
        if (a1 + 16 != v10 && v10)
        {
          if (*(_QWORD *)a1 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        }
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v8 - v10) >> 4);
      }
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x197DA39E8);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 4)
    {
      v22 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 3;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    else
    {
      if (v20 >> 28)
        goto LABEL_42;
      v22 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    v23 = 16 * v21;
    v24 = (__int128 *)v10;
    do
    {
      v25 = *v24++;
      *v22++ = v25;
      v23 -= 16;
    }
    while (v23);
LABEL_27:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::getIntTypedArrayStoreOperand(JSC::DFG::Edge,BOOL)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#2}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::getIntTypedArrayStoreOperand(JSC::DFG::Edge,BOOL)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#2}::operator()(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 <= 1)
    __break(0xC471u);
  else
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), (32 * (a2[16] & 0x7F) - 1024) | ((*a2 & 0x7F) - 32) | 0x1E644000u, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  char v35;
  uint64_t v36;
  char v37;
  char *v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x8_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  _DWORD *v54;
  uint64_t *v55;
  int v56;
  char *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int8x8_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  int *v71;
  int *v72;
  int v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  WTF *v89;
  unsigned int v90;
  WTF *v91;
  unsigned int v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  WTF *v96;
  int v97;
  _BYTE *v98;
  WTF *v99;
  char *v100;
  WTF *v101;
  int v102;
  char v103;
  unsigned int v104;
  WTF **v105;
  int v106;
  WTF *v107;
  WTF *v108;
  uint64_t v109;
  uint64_t v110;
  _OWORD *v111;
  uint64_t v112;
  __int128 *v113;
  uint64_t v114;
  __int128 v115;
  WTF *v116;
  void *v117;
  WTF *v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  _BYTE *v123;
  int v124;
  WTF *v125;
  WTF *v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  WTF *v151;
  WTF *v153;
  WTF *v154;
  WTF *v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int *v159;
  unsigned int v160;
  unsigned int v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  BOOL v165;
  uint64_t v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  BOOL v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v181;
  uint64_t v182;
  char v183;
  char v184;
  char v185;
  unsigned __int8 v186;
  WTF **v187;
  WTF **v188;
  _QWORD v189[5];
  _OWORD *v190;
  int v191;
  int v192;
  void *v193;
  int v194;
  int v195;
  void *v196;
  int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int *v201;
  char v202;
  uint64_t v203;
  char v204;
  char v205;
  char v206;
  int v207;
  _BYTE *v208;
  unsigned int v209;
  int v210;
  _BYTE v211[32];
  WTF *v212;
  uint64_t v213;
  _BYTE v214[24];
  WTF *v215;
  uint64_t v216;
  _BYTE v217[24];
  int v218;
  int v219;
  int v220;
  uint64_t v221;
  WTF *v222;
  uint64_t v223;
  _BYTE v224[24];
  WTF *v225;
  uint64_t v226;
  WTF *v227;
  int v228;
  uint64_t v229;
  WTF *v230;
  int v231;
  uint64_t v232;
  unsigned int *v233;

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v7 & 1) != 0)
  {
    v163 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v164 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v164 != 0x3FFFFFFF)
        ? (v165 = (_DWORD)v164 == -1)
        : (v165 = 1),
          v165))
    {
      v166 = 2;
    }
    else if (v164 >> 28)
    {
      v181 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v181 = v163;
      *(_DWORD *)(v181 + 8) = v164;
      v166 = 1;
      v163 = v181;
    }
    else
    {
      v166 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v163 = v164 << 36;
    }
    v7 = v163 | v166;
  }
  v226 = v7;
  v16 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v8, &v226);
  if ((v226 & 1) != 0 && (v226 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v226 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v227);
  v17 = (unsigned int *)v227;
  JSC::FTL::ExceptionTarget::jumps(v227, (JSC::CCallHelpers *)a2, (uint64_t *)&v225);
  v227 = 0;
  if (v17)
  {
    do
    {
      v25 = __ldaxr(v17);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v17));
    if (!v26)
    {
      atomic_store(1u, v17);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v17, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
    }
  }
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 32), a3, v16, v20, v21, v22, v23, v24);
  v32 = *(_DWORD *)(a3 + 20);
  if (!v32)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA4564);
  }
  if (v32 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA456CLL);
  }
  if (v32 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA4574);
  }
  v33 = *(_DWORD *)(a3 + 36);
  if (!v33)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA457CLL);
  }
  if (v33 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA4584);
  }
  if (v33 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA458CLL);
  }
  if (v33 == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA4594);
  }
  v34 = *(char **)(a3 + 8);
  v35 = *v34;
  v36 = v34[16] & 0x7F;
  v37 = v34[32];
  v38 = *(char **)(a3 + 24);
  v39 = *v38;
  v40 = v38[1];
  v186 = v38[2];
  v41 = v38[3];
  v222 = (WTF *)v224;
  v223 = 2;
  JSC::MacroAssemblerARM64::load64(a2, v36 | 0x800000000, v41, v27, v28, v29, v30, v31);
  JSC::MacroAssemblerARM64::branchTest64(a2, 1, v41, 1, v42, v43, v44, v45, (uint64_t)&v220, v46);
  v52 = v220;
  if (v220 != -1)
  {
    v53 = HIDWORD(v223);
    if (HIDWORD(v223) == (_DWORD)v223)
    {
      v54 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v222, (void *)(HIDWORD(v223) + 1), (unint64_t)&v220, v47, v48, v49, v50, v51);
      v56 = *v54;
      v55 = (uint64_t *)(v54 + 1);
      v52 = v56;
      v53 = HIDWORD(v223);
    }
    else
    {
      v55 = &v221;
    }
    v57 = (char *)v222 + 12 * v53;
    *(_DWORD *)v57 = v52;
    *(_QWORD *)(v57 + 4) = *v55;
    ++HIDWORD(v223);
  }
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    goto LABEL_152;
  }
  v183 = v36;
  v58 = v35 & 0x7F;
  v185 = v37 & 0x7F;
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  JSC::MacroAssemblerARM64::load32(a2, v41 | 0x1000000000, *(char *)(a2 + 304), v47, v48, v49, v50, v51);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, a2, 0, 17, v59, v60, v61, v62, (uint64_t)&v218, v63);
  v69 = v218;
  if (v218 != -1)
  {
    v70 = HIDWORD(v223);
    if (HIDWORD(v223) == (_DWORD)v223)
    {
      v71 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v222, (void *)(HIDWORD(v223) + 1), (unint64_t)&v218, v64, v65, v66, v67, v68);
      v73 = *v71;
      v72 = v71 + 1;
      v69 = v73;
      v70 = HIDWORD(v223);
    }
    else
    {
      v72 = &v219;
    }
    v74 = (char *)v222 + 12 * v70;
    *(_DWORD *)v74 = v69;
    *(_QWORD *)(v74 + 4) = *(_QWORD *)v72;
    ++HIDWORD(v223);
  }
  v184 = v6;
  v215 = (WTF *)v217;
  v216 = 2;
  v212 = (WTF *)v214;
  v213 = 2;
  JSC::AssemblyHelpers::storeMegamorphicProperty(a2, *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16), v58, (char)v41, 0, v37 & 0x7F, v39, v40, (uint64_t)&v227, v186);
  v187 = &v215;
  v188 = &v212;
  std::__memberwise_forward_assign[abi:sn180100]<std::tuple<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList &>,std::tuple<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,0ul,1ul>((uint64_t)&v187, (unsigned int *)&v227, v75, v76, v77, v78, v79, v80);
  v88 = v230;
  if (&v232 != (uint64_t *)v230 && v230)
  {
    v230 = 0;
    v231 = 0;
    WTF::fastFree((unint64_t)v88, v81, v82, v83, v84, v85, v86, v87);
  }
  v89 = v227;
  if (&v229 != (uint64_t *)v227 && v227)
  {
    v227 = 0;
    v228 = 0;
    WTF::fastFree((unint64_t)v89, v81, v82, v83, v84, v85, v86, v87);
  }
  v90 = HIDWORD(v216);
  if (HIDWORD(v216))
  {
    v91 = v215;
    v92 = HIDWORD(v223);
    v93 = HIDWORD(v223) + (unint64_t)HIDWORD(v216);
    if (v93 <= v223)
    {
LABEL_51:
      if (v93 < HIDWORD(v223))
      {
        __break(0xC471u);
        JUMPOUT(0x197DA45A4);
      }
      v100 = (char *)v222 + 12 * HIDWORD(v223);
      v101 = (WTF *)((char *)v91 + 12 * v90);
      do
      {
        *(_DWORD *)v100 = *(_DWORD *)v91;
        *(_QWORD *)(v100 + 4) = *(_QWORD *)((char *)v91 + 4);
        v91 = (WTF *)((char *)v91 + 12);
        v100 += 12;
      }
      while (v91 != v101);
      HIDWORD(v223) = v93;
      goto LABEL_55;
    }
    v94 = v223 + ((unint64_t)v223 >> 2);
    if (v94 >= 0x10)
      v95 = v94 + 1;
    else
      v95 = 16;
    if (v95 <= v93)
      v95 = HIDWORD(v223) + (unint64_t)HIDWORD(v216);
    v96 = v222;
    if (v95 < 3)
    {
      v98 = v224;
      v222 = (WTF *)v224;
      LODWORD(v223) = 2;
      goto LABEL_43;
    }
    if (v95 < 0x15555556)
    {
      v97 = 12 * v95;
      v98 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v95));
      LODWORD(v223) = (v97 & 0xFFFFFFFC) / 0xC;
      v222 = (WTF *)v98;
LABEL_43:
      if (v92)
      {
        v99 = v96;
        do
        {
          *(_DWORD *)v98 = *(_DWORD *)v99;
          *(_QWORD *)(v98 + 4) = *(_QWORD *)((char *)v99 + 4);
          v99 = (WTF *)((char *)v99 + 12);
          v98 += 12;
        }
        while (v99 != (WTF *)((char *)v96 + 12 * v92));
      }
      if (v224 != (_BYTE *)v96 && v96)
      {
        if (v222 == v96)
        {
          v222 = 0;
          LODWORD(v223) = 0;
        }
        WTF::fastFree((unint64_t)v96, v81, v82, v83, v84, v85, v86, v87);
      }
      goto LABEL_51;
    }
    __break(0xC471u);
LABEL_152:
    JUMPOUT(0x197DA4428);
  }
LABEL_55:
  v102 = *(_DWORD *)(a2 + 200);
  if (v102 < *(_DWORD *)(a2 + 52))
  {
    v103 = v184;
    do
    {
      if ((v102 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v81, v82, v83, v84, v85, v86, v87);
        v102 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v102) = -721215457;
      v102 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v102;
    }
    while (v102 < *(_DWORD *)(a2 + 52));
  }
  else
  {
    v103 = v184;
  }
  *(_DWORD *)(a2 + 208) = 0;
  v104 = HIDWORD(v223);
  v105 = (WTF **)v189;
  v187 = (WTF **)v189;
  LODWORD(v188) = 2;
  HIDWORD(v188) = HIDWORD(v223);
  if (HIDWORD(v223) >= 3)
  {
    if (HIDWORD(v223) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197DA45ACLL);
    }
    v106 = 12 * HIDWORD(v223);
    v105 = (WTF **)WTF::fastMalloc((WTF *)(12 * HIDWORD(v223)));
    LODWORD(v188) = (v106 & 0xFFFFFFFC) / 0xC;
    v187 = v105;
    v104 = HIDWORD(v223);
  }
  if (v104)
  {
    v107 = v222;
    v108 = (WTF *)((char *)v222 + 12 * v104);
    do
    {
      *(_DWORD *)v105 = *(_DWORD *)v107;
      *(WTF **)((char *)v105 + 4) = *(WTF **)((char *)v107 + 4);
      v107 = (WTF *)((char *)v107 + 12);
      v105 = (WTF **)((char *)v105 + 12);
    }
    while (v107 != v108);
  }
  v109 = *(_QWORD *)a3;
  v189[3] = *(_QWORD *)(a1 + 16);
  v189[4] = v109;
  v110 = *(unsigned int *)(a3 + 20);
  v190 = 0;
  v191 = 0;
  v192 = v110;
  if ((_DWORD)v110)
  {
    if (v110 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197DA459CLL);
    }
    v111 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v110));
    v191 = v110;
    v190 = v111;
    v112 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v112)
    {
      v113 = *(__int128 **)(a3 + 8);
      v114 = 16 * v112;
      do
      {
        v115 = *v113++;
        *v111++ = v115;
        v114 -= 16;
      }
      while (v114);
    }
  }
  v116 = (WTF *)*(unsigned int *)(a3 + 36);
  v193 = 0;
  v194 = 0;
  v195 = (int)v116;
  if ((_DWORD)v116)
  {
    v117 = (void *)WTF::fastMalloc(v116);
    v194 = (int)v116;
    v193 = v117;
    memcpy(v117, *(const void **)(a3 + 24), *(unsigned int *)(a3 + 36));
  }
  v118 = (WTF *)*(unsigned int *)(a3 + 52);
  v196 = 0;
  v197 = 0;
  v198 = (int)v118;
  if ((_DWORD)v118)
  {
    v162 = (void *)WTF::fastMalloc(v118);
    v197 = (int)v118;
    v196 = v162;
    memcpy(v162, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 52));
  }
  v199 = *(_QWORD *)(a3 + 56);
  v119 = *(_QWORD *)(a1 + 24);
  if ((v119 & 1) != 0)
  {
    v175 = *(_QWORD *)(v119 & 0xFFFFFFFF8);
    if ((v119 & 2) != 0
      || ((v176 = *(unsigned int *)((v119 & 0xFFFFFFFF8) + 8), (_DWORD)v176 != 0x3FFFFFFF)
        ? (v177 = (_DWORD)v176 == -1)
        : (v177 = 1),
          v177))
    {
      v178 = 2;
    }
    else if (v176 >> 28)
    {
      v182 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v182 = v175;
      *(_DWORD *)(v182 + 8) = v176;
      v178 = 1;
      v175 = v182;
    }
    else
    {
      v178 = *(_QWORD *)(v119 & 0xFFFFFFFF8);
      v175 = v176 << 36;
    }
    v119 = v175 | v178;
  }
  v200 = v119;
  v120 = (unsigned int *)v225;
  if (v225)
  {
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 + 1, v120));
  }
  v201 = v120;
  v202 = *(_BYTE *)(a1 + 40);
  v203 = *(_QWORD *)(a1 + 48);
  v204 = v58;
  v205 = v183;
  v206 = v185;
  v207 = v102;
  v122 = HIDWORD(v213);
  v123 = v211;
  v208 = v211;
  v209 = 2;
  v210 = HIDWORD(v213);
  if (HIDWORD(v213) >= 3)
  {
    if (HIDWORD(v213) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197DA45B4);
    }
    v124 = 12 * HIDWORD(v213);
    v123 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v213)));
    v209 = (v124 & 0xFFFFFFFC) / 0xC;
    v208 = v123;
    v122 = HIDWORD(v213);
  }
  if (v122)
  {
    v125 = v212;
    v126 = (WTF *)((char *)v212 + 12 * v122);
    do
    {
      *(_DWORD *)v123 = *(_DWORD *)v125;
      *(_QWORD *)(v123 + 4) = *(_QWORD *)((char *)v125 + 4);
      v125 = (WTF *)((char *)v125 + 12);
      v123 += 12;
    }
    while (v125 != v126);
  }
  v211[24] = v186;
  v127 = *(_QWORD *)(a3 + 56);
  v128 = WTF::fastMalloc((WTF *)0xD8);
  *(_DWORD *)(v128 + 8) = 1;
  *(_QWORD *)v128 = off_1E35765F0;
  v233 = (unsigned int *)v128;
  v136 = *(unsigned int *)(v127 + 12);
  if ((_DWORD)v136 == *(_DWORD *)(v127 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v127, (uint64_t *)&v233);
    v158 = v233;
    v233 = 0;
    if (v158)
    {
      v159 = v158 + 2;
      do
      {
        v160 = __ldaxr(v159);
        v161 = v160 - 1;
      }
      while (__stlxr(v161, v159));
      v103 = v184;
      if (!v161)
      {
        atomic_store(1u, v158 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v158 + 8))(v158);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v127 + 8 * v136) = v128;
    *(_DWORD *)(v127 + 12) = v136 + 1;
  }
  v151 = v212;
  if (v214 != (_BYTE *)v212 && v212 != 0)
  {
    v212 = 0;
    LODWORD(v213) = 0;
    WTF::fastFree((unint64_t)v151, v144, v145, v146, v147, v148, v149, v150);
  }
  v153 = v215;
  if (v217 != (_BYTE *)v215 && v215)
  {
    v215 = 0;
    LODWORD(v216) = 0;
    WTF::fastFree((unint64_t)v153, v144, v145, v146, v147, v148, v149, v150);
  }
  v154 = v222;
  if (v224 != (_BYTE *)v222 && v222)
  {
    v222 = 0;
    LODWORD(v223) = 0;
    WTF::fastFree((unint64_t)v154, v144, v145, v146, v147, v148, v149, v150);
  }
  v155 = v225;
  v225 = 0;
  if (v155)
  {
    do
    {
      v156 = __ldaxr((unsigned int *)v155);
      v157 = v156 - 1;
    }
    while (__stlxr(v157, (unsigned int *)v155));
    if (!v157)
    {
      atomic_store(1u, (unsigned int *)v155);
      v179 = *((_QWORD *)v155 + 1);
      if ((WTF *)((char *)v155 + 24) != (WTF *)v179 && v179 != 0)
      {
        *((_QWORD *)v155 + 1) = 0;
        *((_DWORD *)v155 + 4) = 0;
        WTF::fastFree(v179, v144, v145, v146, v147, v148, v149, v150);
      }
      WTF::fastFree((unint64_t)v155, v144, v145, v146, v147, v148, v149, v150);
    }
  }
  *(_BYTE *)(a2 + 212) = v103;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::~(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;

  v9 = *(_QWORD *)(a1 + 152);
  if (a1 + 168 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 152) = 0;
    *(_DWORD *)(a1 + 160) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v20 = *(_QWORD *)(v11 + 8);
      if (v11 + 24 != v20 && v20 != 0)
      {
        *(_QWORD *)(v11 + 8) = 0;
        *(_DWORD *)(v11 + 16) = 0;
        WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v14 = *(_QWORD *)(a1 + 112);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v15 = *(_QWORD *)(a1 + 88);
  if (v15)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(_QWORD *)(a1 + 72);
  if (v16)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = *(_QWORD *)(a1 + 56);
  if (v17)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
  }
  v18 = *(_QWORD *)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v18)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  uint64_t v36;

  v4 = *((unsigned int *)a2 + 3);
  v5 = a1 + 16;
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = v4;
  if (v4 >= 3)
  {
    if (v4 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197DA4978);
    }
    v6 = 12 * v4;
    v5 = WTF::fastMalloc((WTF *)(12 * v4));
    *(_DWORD *)(a1 + 8) = (v6 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)a1 = v5;
  }
  v7 = *((_DWORD *)a2 + 3);
  if (v7)
  {
    v8 = *a2;
    v9 = *a2 + 12 * v7;
    do
    {
      *(_DWORD *)v5 = *(_DWORD *)v8;
      *(_QWORD *)(v5 + 4) = *(_QWORD *)(v8 + 4);
      v8 += 12;
      v5 += 12;
    }
    while (v8 != v9);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  v10 = *((unsigned int *)a2 + 17);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = v10;
  if ((_DWORD)v10)
  {
    if (v10 >> 28)
      goto LABEL_39;
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v10));
    *(_DWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 56) = v11;
    v12 = *((unsigned int *)a2 + 17);
    if ((_DWORD)v12)
    {
      v13 = (__int128 *)a2[7];
      v14 = 16 * v12;
      do
      {
        v15 = *v13++;
        *v11++ = v15;
        v14 -= 16;
      }
      while (v14);
    }
  }
  v16 = (WTF *)*((unsigned int *)a2 + 21);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 84) = (_DWORD)v16;
  if ((_DWORD)v16)
  {
    v17 = (void *)WTF::fastMalloc(v16);
    *(_DWORD *)(a1 + 80) = (_DWORD)v16;
    *(_QWORD *)(a1 + 72) = v17;
    memcpy(v17, (const void *)a2[9], *((unsigned int *)a2 + 21));
  }
  v18 = (WTF *)*((unsigned int *)a2 + 25);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = (_DWORD)v18;
  if ((_DWORD)v18)
  {
    v30 = (void *)WTF::fastMalloc(v18);
    *(_DWORD *)(a1 + 96) = (_DWORD)v18;
    *(_QWORD *)(a1 + 88) = v30;
    memcpy(v30, (const void *)a2[11], *((unsigned int *)a2 + 25));
  }
  v19 = a2[14];
  *(_QWORD *)(a1 + 104) = a2[13];
  if ((v19 & 1) != 0)
  {
    v31 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v32 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v32 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else if (v32 >> 28)
    {
      v35 = v32;
      v36 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v36 = v31;
      *(_DWORD *)(v36 + 8) = v35;
      v34 = 1;
      v31 = v36;
    }
    else
    {
      v34 = v31;
      v31 = v32 << 36;
    }
    v19 = v31 | v34;
  }
  *(_QWORD *)(a1 + 112) = v19;
  v20 = (unsigned int *)a2[15];
  if (v20)
  {
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  *(_QWORD *)(a1 + 120) = v20;
  v22 = *((_OWORD *)a2 + 8);
  *(_DWORD *)(a1 + 143) = *(_DWORD *)((char *)a2 + 143);
  *(_OWORD *)(a1 + 128) = v22;
  *(_DWORD *)(a1 + 148) = *((_DWORD *)a2 + 37);
  v23 = *((unsigned int *)a2 + 41);
  v24 = a1 + 168;
  *(_QWORD *)(a1 + 152) = a1 + 168;
  *(_DWORD *)(a1 + 160) = 2;
  *(_DWORD *)(a1 + 164) = v23;
  if (v23 >= 3)
  {
    if (v23 < 0x15555556)
    {
      v25 = 12 * v23;
      v24 = WTF::fastMalloc((WTF *)(12 * v23));
      *(_DWORD *)(a1 + 160) = (v25 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)(a1 + 152) = v24;
      goto LABEL_22;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x197DA4970);
  }
LABEL_22:
  v26 = *((_DWORD *)a2 + 41);
  if (v26)
  {
    v27 = a2[19];
    v28 = v27 + 12 * v26;
    do
    {
      *(_DWORD *)v24 = *(_DWORD *)v27;
      *(_QWORD *)(v24 + 4) = *(_QWORD *)(v27 + 4);
      v27 += 12;
      v24 += 12;
    }
    while (v27 != v28);
  }
  *(_BYTE *)(a1 + 192) = *((_BYTE *)a2 + 192);
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutByValMegamorphic(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(JSC::JSGlobalObject *, JSC::JSCell *, unint64_t, const JSC::PropertyTable *, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int i;
  unsigned int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int j;
  unsigned int v57;
  char v58;
  unsigned int *result;
  _BYTE *v60;
  unsigned int v61;
  uint64_t v62;
  _BYTE *v63;
  unsigned int v64;
  uint64_t v65;
  _BYTE *v66;
  unsigned int v67;
  uint64_t v68;
  _BYTE *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  char v88;
  __int16 v89;
  char v90;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    goto LABEL_90;
  while (1)
  {
    *(_BYTE *)(a2 + 212) = 1;
    v11 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = 12 * v11;
      do
      {
        if (v13 >= *(unsigned int *)(a1 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x197DA4F6CLL);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 16) + v12), a2, a3, a4, a5, a6, a7, a8);
        ++v13;
        v12 += 12;
      }
      while (v14 != v12);
    }
    v16 = *(_QWORD **)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 64);
    v18 = *(_QWORD *)(v15 + 96);
    v17 = *(_QWORD *)(v15 + 104);
    v19 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 48) + 216) & 0xFF003FF80000 | v18;
    v20 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v20)
    {
      v60 = *(_BYTE **)(a1 + 88);
      do
      {
        v61 = *v60 & 0x7F;
        if (v61 >= 0x40)
          goto LABEL_89;
        v62 = 1 << v61;
        v19 &= ~v62;
        v17 &= ~v62;
        ++v60;
      }
      while (--v20);
    }
    v21 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v21)
    {
      v66 = *(_BYTE **)(a1 + 104);
      do
      {
        v67 = (*v66 + 32) & 0x7F;
        if (v67 >= 0x40)
          goto LABEL_89;
        v68 = 1 << v67;
        v19 &= ~v68;
        v17 &= ~v68;
        ++v66;
      }
      while (--v21);
    }
    v84 = v19;
    v85 = v17;
    v22 = *(_QWORD *)(a1 + 128);
    if ((v22 & 1) != 0)
    {
      v72 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
      if ((v22 & 2) != 0
        || ((v73 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v73 != 0x3FFFFFFF)
          ? (v74 = (_DWORD)v73 == -1)
          : (v74 = 1),
            v74))
      {
        v75 = 2;
      }
      else if (v73 >> 28)
      {
        v80 = v72;
        v72 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v72 = v80;
        *(_DWORD *)(v72 + 8) = v73;
        v75 = 1;
      }
      else
      {
        v75 = v72;
        v72 = v73 << 36;
      }
      v22 = v72 | v75;
      v23 = (v72 | v75) & 1;
    }
    else
    {
      v23 = 0;
    }
    if (*(_BYTE *)(a1 + 144))
      v24 = operationPutByValSloppyMegamorphicGeneric;
    else
      v24 = operationPutByValStrictMegamorphicGeneric;
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)&v86, v16, &v84, a2, v22, *(_QWORD *)(a1 + 136) + 8, (uint64_t)v24, 0xFFFFFFFFLL, *(_QWORD *)(a1 + 152), *(_WORD *)(a1 + 160), HIBYTE(*(_WORD *)(a1 + 160)), *(_BYTE *)(a1 + 162));
    if (v23 && (v22 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v22 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
    for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v25, v26, v27, v28, v29, v30, v31);
        i = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
      i = *(_DWORD *)(a2 + 200) + 4;
    }
    v33 = i;
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v25, v26, v27, v28, v29, v30, v31);
      v33 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = 335544320;
    *(_DWORD *)(a2 + 200) += 4;
    if (*(_BYTE *)(a2 + 328))
      v34 = 69;
    else
      v34 = 65;
    v86 = i;
    v87 = 0;
    v88 = v34;
    v89 = 15;
    v90 = -1;
    v83 = *(_DWORD *)(a1 + 164);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v86, &v83, a2, v27, v28, v29, v30, v31);
    v35 = *(unsigned int *)(a1 + 180);
    if ((_DWORD)v35)
    {
      v36 = 0;
      v37 = 0;
      v38 = 12 * v35;
      while (v37 < *(unsigned int *)(a1 + 180))
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 168) + v36), a2, a3, a4, a5, a6, a7, a8);
        ++v37;
        v36 += 12;
        if (v38 == v36)
          goto LABEL_24;
      }
      __break(0xC471u);
      goto LABEL_89;
    }
LABEL_24:
    v39 = *(_QWORD **)(a1 + 56);
    v40 = *(_QWORD *)(a1 + 64);
    v42 = *(_QWORD *)(v40 + 96);
    v41 = *(_QWORD *)(v40 + 104);
    v43 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 48) + 216) & 0xFF003FF80000 | v42;
    v44 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v44)
    {
      v63 = *(_BYTE **)(a1 + 88);
      do
      {
        v64 = *v63 & 0x7F;
        if (v64 >= 0x40)
          goto LABEL_89;
        v65 = 1 << v64;
        v43 &= ~v65;
        v41 &= ~v65;
        ++v63;
      }
      while (--v44);
    }
    v45 = *(unsigned int *)(a1 + 116);
    if (!(_DWORD)v45)
      break;
    v69 = *(_BYTE **)(a1 + 104);
    while (1)
    {
      v70 = (*v69 + 32) & 0x7F;
      if (v70 >= 0x40)
        break;
      v71 = 1 << v70;
      v43 &= ~v71;
      v41 &= ~v71;
      ++v69;
      if (!--v45)
        goto LABEL_26;
    }
LABEL_89:
    __break(1u);
LABEL_90:
    *(_DWORD *)(a2 + 208) = 0;
  }
LABEL_26:
  v84 = v43;
  v85 = v41;
  v46 = *(_QWORD *)(a1 + 128);
  if ((v46 & 1) != 0)
  {
    v76 = *(_QWORD *)(v46 & 0xFFFFFFFF8);
    if ((v46 & 2) != 0
      || ((v77 = *(unsigned int *)((v46 & 0xFFFFFFFF8) + 8), (_DWORD)v77 != 0x3FFFFFFF)
        ? (v78 = (_DWORD)v77 == -1)
        : (v78 = 1),
          v78))
    {
      v79 = 2;
    }
    else
    {
      if (v77 >> 28)
      {
        v81 = v39;
        v82 = WTF::fastMalloc((WTF *)0x10);
        v39 = v81;
        *(_QWORD *)v82 = v76;
        *(_DWORD *)(v82 + 8) = v77;
        v48 = *(_QWORD **)(a1 + 56);
        v79 = 1;
        v76 = v82;
        goto LABEL_74;
      }
      v79 = v76;
      v76 = v77 << 36;
    }
    v48 = v39;
LABEL_74:
    v46 = v76 | v79;
    v47 = ((v76 | v79) & 1) == 0;
    goto LABEL_28;
  }
  v47 = 1;
  v48 = v39;
LABEL_28:
  JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)&v86, v39, &v84, a2, v46, *(_QWORD *)(a1 + 136) + 8, (uint64_t)operationPutByMegamorphicReallocating, 0xFFFFFFFFLL, *(_QWORD *)(*v48 + 16), *(_BYTE *)(a1 + 160), *(_BYTE *)(a1 + 162), *(_BYTE *)(a1 + 208));
  if (!v47 && (v46 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v46 & 0xFFFFFFFF8, v49, v50, v51, v52, v53, v54, v55);
  for (j = *(_DWORD *)(a2 + 200); j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v49, v50, v51, v52, v53, v54, v55);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v57 = j;
  if ((j + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v49, v50, v51, v52, v53, v54, v55);
    v57 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v57) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v58 = 69;
  else
    v58 = 65;
  v86 = j;
  v87 = 0;
  v88 = v58;
  v89 = 15;
  v90 = -1;
  LODWORD(v84) = *(_DWORD *)(a1 + 164);
  result = JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v86, (unsigned int *)&v84, a2, v51, v52, v53, v54, v55);
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutPrivateName(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      v15 = *(_QWORD *)(v9 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v9;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v9 = v19;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutPrivateName(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v9;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v9 = v17;
        }
      }
      v14 = *(_QWORD *)(v9 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v9;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v9 = v18;
        }
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutPrivateName(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::FTL::ExceptionTarget *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char *v28;
  char v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  unint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  uint64_t v68;
  __int128 *v69;
  uint64_t v70;
  __int128 v71;
  WTF *v72;
  void *v73;
  WTF *v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  char v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  WTF *v106;
  unsigned int v107;
  unsigned int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  const void *v112;
  void *v113;
  _BYTE *v114;
  unsigned int v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  JSC::AssemblerBuffer *v122;
  JSC::AssemblerBuffer *v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int v133;
  unint64_t v134;
  uint64_t v136;
  uint64_t v137;
  char v138;
  unint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _OWORD *v144;
  int v145;
  int v146;
  void *v147;
  int v148;
  int v149;
  void *v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int *v155;
  char v156;
  char v157;
  char v158;
  int v159;
  char v160;
  char v161;
  char v162;
  char v163;
  WTF *v164;
  uint64_t v165;
  int v166;
  JSC::FTL::ExceptionTarget *v167[16];

  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a2, "PutPrivateName");
  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v8 = (uint64_t *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 64);
  if ((v7 & 1) != 0)
  {
    v118 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
    if ((v7 & 2) != 0
      || ((v119 = *(unsigned int *)((v7 & 0xFFFFFFFF8) + 8), (_DWORD)v119 != 0x3FFFFFFF)
        ? (v120 = (_DWORD)v119 == -1)
        : (v120 = 1),
          v120))
    {
      v121 = 2;
    }
    else if (v119 >> 28)
    {
      v136 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v136 = v118;
      *(_DWORD *)(v136 + 8) = v119;
      v121 = 1;
      v118 = v136;
    }
    else
    {
      v121 = *(_QWORD *)(v7 & 0xFFFFFFFF8);
      v118 = v119 << 36;
    }
    v7 = v118 | v121;
  }
  v165 = v7;
  v166 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v9, &v165);
  if ((v165 & 1) != 0 && (v165 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v165 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 32), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)v167);
  v17 = v167[0];
  JSC::FTL::ExceptionTarget::jumps(v167[0], (JSC::CCallHelpers *)a2, (uint64_t *)&v164);
  v167[0] = 0;
  if (v17)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v17);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v17));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v17);
      v128 = (unsigned int *)*((_QWORD *)v17 + 2);
      *((_QWORD *)v17 + 2) = 0;
      if (v128)
      {
        do
        {
          v129 = __ldaxr(v128);
          v130 = v129 - 1;
        }
        while (__stlxr(v130, v128));
        if (!v130)
        {
          atomic_store(1u, v128);
          WTF::fastFree((unint64_t)v128, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      v131 = (unsigned int *)*((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = 0;
      if (v131)
      {
        do
        {
          v132 = __ldaxr(v131);
          v133 = v132 - 1;
        }
        while (__stlxr(v133, v131));
        if (!v133)
        {
          atomic_store(1u, v131);
          WTF::fastFree((unint64_t)v131, v18, v19, v20, v21, v22, v23, v24);
        }
      }
      WTF::fastFree((unint64_t)v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreationForUnwind(*(_QWORD *)(a1 + 32), a3, v166, v20, v21, v22, v23, v24);
  v27 = *(_DWORD *)(a3 + 20);
  if (!v27)
  {
    __break(0xC471u);
    goto LABEL_117;
  }
  if (v27 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA5838);
  }
  if (v27 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA5840);
  }
  v28 = *(char **)(a3 + 8);
  v29 = *v28;
  v30 = v28[16];
  v31 = v28[32];
  v138 = v6;
  if (HIBYTE(qword_1ECF4C780))
  {
    if (!*(_DWORD *)(a3 + 36))
    {
      __break(0xC471u);
      JUMPOUT(0x197DA5850);
    }
    v32 = **(_BYTE **)(a3 + 24);
  }
  else
  {
    v32 = -1;
  }
  v163 = v32;
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v34 = WTF::fastMalloc((WTF *)0x90);
  *(_QWORD *)v34 = 2;
  *(_DWORD *)(v34 + 96) = 0;
  *(_OWORD *)(v34 + 12) = 0u;
  *(_OWORD *)(v34 + 28) = 0u;
  *(_DWORD *)(v34 + 44) = 0;
  *(_QWORD *)(v34 + 64) = 0;
  *(_QWORD *)(v34 + 72) = 0;
  *(_QWORD *)(v34 + 56) = 0;
  *(_QWORD *)(v34 + 104) = 0;
  *(_QWORD *)(v34 + 112) = -1;
  *(_WORD *)(v34 + 120) = -1;
  *(_DWORD *)(v34 + 122) = 0x10000;
  *(_BYTE *)(v34 + 126) = 0;
  *(_BYTE *)(v34 + 127) = BYTE12(xmmword_1ECF4C260);
  *(_BYTE *)(v34 + 128) = 0;
  *(_WORD *)(v34 + 129) &= 0xFC00u;
  *(_QWORD *)(v34 + 136) = 0;
  *(_QWORD *)(v34 + 136) = *(_QWORD *)(v33 + 168);
  *(_QWORD *)(v33 + 168) = v34;
  *(_WORD *)(v34 + 129) = *(_WORD *)(v34 + 129) & 0xFDFF | (HIBYTE(qword_1ECF4C780) << 9);
  v35 = *(_QWORD *)(a2 + 336);
  if (*(_BYTE *)(a1 + 40) == 2)
    v36 = 14;
  else
    v36 = 16;
  LOBYTE(v139) = v36;
  v37 = *(_QWORD *)(*(_QWORD *)a3 + 104);
  v38 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
  v39 = *(unsigned int *)(a3 + 36);
  if ((_DWORD)v39)
  {
    v40 = *(_BYTE **)(a3 + 24);
    do
    {
      v41 = *v40 & 0x7F;
      if (v41 >= 0x40)
        goto LABEL_116;
      v42 = 1 << v41;
      v38 &= ~v42;
      v37 &= ~v42;
      ++v40;
    }
    while (--v39);
  }
  v43 = *(unsigned int *)(a3 + 52);
  if ((_DWORD)v43)
  {
    v114 = *(_BYTE **)(a3 + 40);
    do
    {
      v115 = (*v114 + 32) & 0x7F;
      if (v115 >= 0x40)
        goto LABEL_116;
      v116 = 1 << v115;
      v38 &= ~v116;
      v37 &= ~v116;
      ++v114;
    }
    while (--v43);
  }
  v44 = v29 & 0x7F;
  v45 = v30 & 0x7F;
  v46 = v31 & 0x7F;
  v167[0] = (JSC::FTL::ExceptionTarget *)v38;
  v167[1] = (JSC::FTL::ExceptionTarget *)v37;
  v162 = v44;
  v161 = v45;
  v160 = v31 & 0x7F;
  v47 = WTF::fastMalloc((WTF *)0x40);
  v48 = WTF::Box<JSC::JITPutByValGenerator>::Data::Data<JSC::CodeBlock *,JSC::StructureStubInfo *&,JSC::JITType,JSC::CodeOrigin const&,JSC::CallSiteIndex &,JSC::AccessType,JSC::RegisterSetBuilder,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID const&,JSC::ARM64Registers::RegisterID&>((_DWORD *)v47, v35, v34, 5u, (JSC::CodeOrigin *)(a1 + 24), &v166, (char *)&v139, (uint64_t)v167, &v162, &v161, &v160, &v163);
  *(_WORD *)(*(_QWORD *)(v47 + 16) + 129) |= 0x80u;
  JSC::JITGetByValGenerator::generateFastPath((JSC::JITGetByValGenerator *)(v48 + 2), (JSC::CCallHelpers *)a2, v49, v50, v51, v52, v53, v54);
  v62 = *(_DWORD *)(a2 + 200);
  if (v62 < *(_DWORD *)(a2 + 52))
  {
    v122 = (JSC::AssemblerBuffer *)(a2 + 56);
    do
    {
      if ((v62 + 4) > *(_DWORD *)(a2 + 192))
      {
        v123 = v122;
        JSC::AssemblerBuffer::outOfLineGrow(v122, v55, v56, v57, v58, v59, v60, v61);
        v122 = v123;
        v62 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v62) = -721215457;
      v62 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v62;
    }
    while (v62 < *(_DWORD *)(a2 + 52));
  }
  *(_DWORD *)(a2 + 208) = 0;
  do
    v63 = __ldaxr((unsigned int *)v47);
  while (__stlxr(v63 + 1, (unsigned int *)v47));
  v139 = v47;
  v140 = v163;
  v64 = *(_QWORD *)(a1 + 16);
  v141 = *(_QWORD *)(a1 + 48);
  v142 = v64;
  v65 = *(_QWORD *)a3;
  v66 = *(unsigned int *)(a3 + 20);
  v144 = 0;
  v145 = 0;
  v143 = v65;
  v146 = v66;
  if ((_DWORD)v66)
  {
    if (v66 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197DA5848);
    }
    v67 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v66));
    v145 = v66;
    v144 = v67;
    v68 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v68)
    {
      v69 = *(__int128 **)(a3 + 8);
      v70 = 16 * v68;
      do
      {
        v71 = *v69++;
        *v67++ = v71;
        v70 -= 16;
      }
      while (v70);
    }
  }
  v72 = (WTF *)*(unsigned int *)(a3 + 36);
  v147 = 0;
  v148 = 0;
  v149 = (int)v72;
  if ((_DWORD)v72)
  {
    v73 = (void *)WTF::fastMalloc(v72);
    v148 = (int)v72;
    v147 = v73;
    memcpy(v73, *(const void **)(a3 + 24), *(unsigned int *)(a3 + 36));
  }
  v74 = (WTF *)*(unsigned int *)(a3 + 52);
  v150 = 0;
  v151 = 0;
  v152 = (int)v74;
  if ((_DWORD)v74)
  {
    v117 = (void *)WTF::fastMalloc(v74);
    v151 = (int)v74;
    v150 = v117;
    memcpy(v117, *(const void **)(a3 + 40), *(unsigned int *)(a3 + 52));
  }
  v153 = *(_QWORD *)(a3 + 56);
  v75 = *v8;
  if ((*v8 & 1) != 0)
  {
    v124 = *(_QWORD *)(v75 & 0xFFFFFFFF8);
    if ((v75 & 2) != 0
      || ((v125 = *(unsigned int *)((v75 & 0xFFFFFFFF8) + 8), (_DWORD)v125 != 0x3FFFFFFF)
        ? (v126 = (_DWORD)v125 == -1)
        : (v126 = 1),
          v126))
    {
      v127 = 2;
    }
    else if (v125 >> 28)
    {
      v137 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v137 = v124;
      *(_DWORD *)(v137 + 8) = v125;
      v127 = 1;
      v124 = v137;
    }
    else
    {
      v127 = *(_QWORD *)(v75 & 0xFFFFFFFF8);
      v124 = v125 << 36;
    }
    v75 = v124 | v127;
  }
  v154 = v75;
  v76 = (unsigned int *)v164;
  if (v164)
  {
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 + 1, v76));
  }
  v155 = v76;
  v156 = v44;
  v157 = v45;
  v158 = v46;
  v159 = v62;
  v78 = *(_QWORD *)(a3 + 56);
  v79 = WTF::fastMalloc((WTF *)0x88);
  *(_DWORD *)(v79 + 8) = 1;
  *(_QWORD *)v79 = off_1E3576640;
  v87 = *(unsigned int *)(v78 + 12);
  if ((_DWORD)v87 != *(_DWORD *)(v78 + 8))
  {
    v88 = (uint64_t *)(*(_QWORD *)v78 + 8 * v87);
    v89 = v138;
    goto LABEL_42;
  }
  v109 = v87 + (v87 >> 2);
  if (v109 >= 0x10)
    v110 = v109 + 1;
  else
    v110 = 16;
  if (v110 <= v87 + 1)
    v111 = v87 + 1;
  else
    v111 = v110;
  if (v111 >> 29)
  {
    __break(0xC471u);
LABEL_116:
    __break(1u);
LABEL_117:
    JUMPOUT(0x197DA5830);
  }
  v112 = *(const void **)v78;
  v113 = (void *)WTF::fastMalloc((WTF *)(8 * v111));
  *(_DWORD *)(v78 + 8) = v111;
  *(_QWORD *)v78 = v113;
  memcpy(v113, v112, 8 * v87);
  v89 = v138;
  if (v112)
  {
    if (*(const void **)v78 == v112)
    {
      *(_QWORD *)v78 = 0;
      *(_DWORD *)(v78 + 8) = 0;
    }
    WTF::fastFree((unint64_t)v112, v80, v81, v82, v83, v84, v85, v86);
  }
  v87 = *(unsigned int *)(v78 + 12);
  v88 = (uint64_t *)(*(_QWORD *)v78 + 8 * v87);
LABEL_42:
  *v88 = v79;
  *(_DWORD *)(v78 + 12) = v87 + 1;
  do
  {
    v104 = __ldaxr((unsigned int *)v47);
    v105 = v104 - 1;
  }
  while (__stlxr(v105, (unsigned int *)v47));
  if (!v105)
  {
    atomic_store(1u, (unsigned int *)v47);
    WTF::fastFree(v47, v97, v98, v99, v100, v101, v102, v103);
  }
  v106 = v164;
  v164 = 0;
  if (v106)
  {
    do
    {
      v107 = __ldaxr((unsigned int *)v106);
      v108 = v107 - 1;
    }
    while (__stlxr(v108, (unsigned int *)v106));
    if (!v108)
    {
      atomic_store(1u, (unsigned int *)v106);
      v134 = *((_QWORD *)v106 + 1);
      if ((WTF *)((char *)v106 + 24) != (WTF *)v134 && v134 != 0)
      {
        *((_QWORD *)v106 + 1) = 0;
        *((_DWORD *)v106 + 4) = 0;
        WTF::fastFree(v134, v97, v98, v99, v100, v101, v102, v103);
      }
      WTF::fastFree((unint64_t)v106, v97, v98, v99, v100, v101, v102, v103);
    }
  }
  *(_BYTE *)(a2 + 212) = v89;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutPrivateName(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::~(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v20;

  v9 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v20 = *(_QWORD *)(v9 + 8);
      if (v9 + 24 != v20 && v20 != 0)
      {
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(v9 + 16) = 0;
        WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 96);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)(a1 + 56);
  if (v14)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 40);
  if (v15)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutPrivateName(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  __int16 v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v3 = result;
  v4 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  *(_QWORD *)result = v4;
  v6 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(result + 8) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(unsigned int *)(a2 + 52);
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = v7;
  *(_DWORD *)(result + 52) = v8;
  if ((_DWORD)v8)
  {
    if (v8 >> 28)
    {
      __break(0xC471u);
      return result;
    }
    v9 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v8));
    *(_DWORD *)(v3 + 48) = v8;
    *(_QWORD *)(v3 + 40) = v9;
    v10 = *(unsigned int *)(a2 + 52);
    if ((_DWORD)v10)
    {
      v11 = *(__int128 **)(a2 + 40);
      v12 = 16 * v10;
      do
      {
        v13 = *v11++;
        *v9++ = v13;
        v12 -= 16;
      }
      while (v12);
    }
  }
  v14 = (WTF *)*(unsigned int *)(a2 + 68);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_DWORD *)(v3 + 68) = (_DWORD)v14;
  if ((_DWORD)v14)
  {
    v15 = (void *)WTF::fastMalloc(v14);
    *(_DWORD *)(v3 + 64) = (_DWORD)v14;
    *(_QWORD *)(v3 + 56) = v15;
    memcpy(v15, *(const void **)(a2 + 56), *(unsigned int *)(a2 + 68));
  }
  v16 = (WTF *)*(unsigned int *)(a2 + 84);
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_DWORD *)(v3 + 84) = (_DWORD)v16;
  if ((_DWORD)v16)
  {
    v21 = (void *)WTF::fastMalloc(v16);
    *(_DWORD *)(v3 + 80) = (_DWORD)v16;
    *(_QWORD *)(v3 + 72) = v21;
    memcpy(v21, *(const void **)(a2 + 72), *(unsigned int *)(a2 + 84));
  }
  v17 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(v3 + 88) = *(_QWORD *)(a2 + 88);
  if ((v17 & 1) != 0)
  {
    v22 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((v23 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
        ? (v24 = (_DWORD)v23 == -1)
        : (v24 = 1),
          v24))
    {
      v25 = 2;
    }
    else if (v23 >> 28)
    {
      v26 = v23;
      v27 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v27 = v22;
      *(_DWORD *)(v27 + 8) = v26;
      v25 = 1;
      v22 = v27;
    }
    else
    {
      v25 = v22;
      v22 = v23 << 36;
    }
    v17 = v22 | v25;
  }
  *(_QWORD *)(v3 + 96) = v17;
  v18 = *(unsigned int **)(a2 + 104);
  if (v18)
  {
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
  }
  *(_QWORD *)(v3 + 104) = v18;
  v20 = *(_WORD *)(a2 + 112);
  *(_BYTE *)(v3 + 114) = *(_BYTE *)(a2 + 114);
  *(_WORD *)(v3 + 112) = v20;
  *(_DWORD *)(v3 + 116) = *(_DWORD *)(a2 + 116);
  return v3;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutPrivateName(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutPrivateName(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutPrivateName(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutPrivateName(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutPrivateName(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutPrivateName(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  int i;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int j;
  unsigned int v44;
  char v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  const void *v63;
  void *v64;
  unsigned int v65;
  unsigned int v66;
  _BYTE *v67;
  unsigned int v68;
  uint64_t v69;
  _BYTE *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[24];

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  if (!HIBYTE(qword_1ECF4C780))
  {
    v11 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)v86 = *(_DWORD *)(v11 + 52);
    *(_QWORD *)&v86[4] = *(_QWORD *)(v11 + 56);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v86, a2, a3, a4, a5, a6, a7, a8);
  }
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  *(_DWORD *)(a2 + 208) = 0;
  if (HIBYTE(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16), *(char *)(a1 + 24), a4, a5, a6, a7, a8);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + 48) = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD **)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 48);
    v16 = *(_QWORD *)(v14 + 96);
    v15 = *(_QWORD *)(v14 + 104);
    v17 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 48) + 216) & 0xFF003FF80000 | v16;
    v18 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v18)
    {
      v19 = *(_BYTE **)(a1 + 72);
      do
      {
        v20 = *v19 & 0x7F;
        if (v20 >= 0x40)
          goto LABEL_95;
        v21 = 1 << v20;
        v17 &= ~v21;
        v15 &= ~v21;
        ++v19;
      }
      while (--v18);
    }
    v22 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v22)
    {
      v67 = *(_BYTE **)(a1 + 88);
      do
      {
        v68 = (*v67 + 32) & 0x7F;
        if (v68 >= 0x40)
          goto LABEL_95;
        v69 = 1 << v68;
        v17 &= ~v69;
        v15 &= ~v69;
        ++v67;
      }
      while (--v22);
    }
    v84 = v17;
    v85 = v15;
    v23 = *(_QWORD *)(a1 + 112);
    if ((v23 & 1) != 0)
    {
      v73 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
      if ((v23 & 2) != 0
        || ((v74 = *(unsigned int *)((v23 & 0xFFFFFFFF8) + 8), (_DWORD)v74 != 0x3FFFFFFF)
          ? (v75 = (_DWORD)v74 == -1)
          : (v75 = 1),
            v75))
      {
        v76 = 2;
      }
      else if (v74 >> 28)
      {
        v81 = v73;
        v82 = v13;
        v73 = WTF::fastMalloc((WTF *)0x10);
        v13 = v82;
        *(_QWORD *)v73 = v81;
        *(_DWORD *)(v73 + 8) = v74;
        v76 = 1;
      }
      else
      {
        v76 = v73;
        v73 = v74 << 36;
      }
      v23 = v73 | v76;
      v24 = ((v73 | v76) & 1) == 0;
    }
    else
    {
      v24 = 1;
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v86, v13, &v84, a2, v23, *(_QWORD *)(a1 + 120) + 8, *(unsigned __int8 *)(a1 + 24) | 0x3000000000, 0xFFFFFFFFLL, *(_WORD *)(a1 + 128), HIBYTE(*(_WORD *)(a1 + 128)), *(_BYTE *)(a1 + 130), *(_BYTE *)(a1 + 24));
  }
  else
  {
    v32 = *(unsigned __int8 **)(a1 + 40);
    v33 = *(_QWORD *)(a1 + 48);
    v35 = *(_QWORD *)(v33 + 96);
    v34 = *(_QWORD *)(v33 + 104);
    v36 = ~*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 48) + 216) & 0xFF003FF80000 | v35;
    v37 = *(unsigned int *)(a1 + 84);
    if ((_DWORD)v37)
    {
      v38 = *(_BYTE **)(a1 + 72);
      do
      {
        v39 = *v38 & 0x7F;
        if (v39 >= 0x40)
          goto LABEL_95;
        v40 = 1 << v39;
        v36 &= ~v40;
        v34 &= ~v40;
        ++v38;
      }
      while (--v37);
    }
    v41 = *(unsigned int *)(a1 + 100);
    if ((_DWORD)v41)
    {
      v70 = *(_BYTE **)(a1 + 88);
      do
      {
        v71 = (*v70 + 32) & 0x7F;
        if (v71 >= 0x40)
          goto LABEL_95;
        v72 = 1 << v71;
        v36 &= ~v72;
        v34 &= ~v72;
        ++v70;
      }
      while (--v41);
    }
    v84 = v36;
    v85 = v34;
    v23 = *(_QWORD *)(a1 + 112);
    if ((v23 & 1) != 0)
    {
      v77 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
      if ((v23 & 2) != 0
        || ((v78 = *(unsigned int *)((v23 & 0xFFFFFFFF8) + 8), (_DWORD)v78 != 0x3FFFFFFF)
          ? (v79 = (_DWORD)v78 == -1)
          : (v79 = 1),
            v79))
      {
        v80 = 2;
      }
      else
      {
        v80 = v77;
        v83 = v32;
        if (v78 >> 28)
        {
          v77 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v77 = v80;
          *(_DWORD *)(v77 + 8) = v78;
          v80 = 1;
        }
        else
        {
          v77 = v78 << 36;
        }
        v32 = v83;
      }
      v23 = v77 | v80;
      v24 = ((v77 | v80) & 1) == 0;
    }
    else
    {
      v24 = 1;
    }
    JSC::FTL::callOperation<JSC::RegisterSetBuilder,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v86, v32, &v84, a2, v23, *(_QWORD *)(a1 + 120) + 8, *(_QWORD *)(a1 + 32), 0xFFFFFFFFLL, *(_WORD *)(a1 + 128), HIBYTE(*(_WORD *)(a1 + 128)), *(_BYTE *)(a1 + 130), *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)(a1 + 16) + 16));
  }
  v42 = *(_QWORD *)v86;
  if (!v24 && (v23 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v23 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
  for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v25, v26, v27, v28, v29, v30, v31);
      j = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
    j = *(_DWORD *)(a2 + 200) + 4;
  }
  v44 = j;
  if (j + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v25, v26, v27, v28, v29, v30, v31);
    v44 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v44) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v45 = 69;
  else
    v45 = 65;
  *(_QWORD *)v86 = j;
  v86[8] = v45;
  *(_WORD *)&v86[9] = 15;
  v86[11] = -1;
  LODWORD(v84) = *(_DWORD *)(a1 + 132);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v86, (unsigned int *)&v84, a2, v27, v28, v29, v30, v31);
  v46 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v46 + 36) = i;
  *(_QWORD *)(v46 + 40) = v42;
  do
    v47 = __ldaxr((unsigned int *)v46);
  while (__stlxr(v47 + 1, (unsigned int *)v46));
  v48 = WTF::fastMalloc((WTF *)0x18);
  v56 = v48;
  *(_DWORD *)(v48 + 8) = 1;
  *(_QWORD *)v48 = &off_1E3576668;
  do
    v57 = __ldaxr((unsigned int *)v46);
  while (__stlxr(v57 + 1, (unsigned int *)v46));
  *(_QWORD *)(v48 + 16) = v46;
  v58 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v58 == *(_DWORD *)(a2 + 240))
  {
    v60 = v58 + (v58 >> 2);
    if (v60 >= 0x10)
      v61 = v60 + 1;
    else
      v61 = 16;
    if (v61 <= v58 + 1)
      v62 = v58 + 1;
    else
      v62 = v61;
    if (!(v62 >> 29))
    {
      v63 = *(const void **)(a2 + 232);
      v64 = (void *)WTF::fastMalloc((WTF *)(8 * v62));
      *(_DWORD *)(a2 + 240) = v62;
      *(_QWORD *)(a2 + 232) = v64;
      memcpy(v64, v63, 8 * v58);
      if (v63)
      {
        if (*(const void **)(a2 + 232) == v63)
        {
          *(_QWORD *)(a2 + 232) = 0;
          *(_DWORD *)(a2 + 240) = 0;
        }
        WTF::fastFree((unint64_t)v63, v49, v50, v51, v52, v53, v54, v55);
      }
      v58 = *(unsigned int *)(a2 + 244);
      v59 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v58);
      goto LABEL_45;
    }
    __break(0xC471u);
LABEL_95:
    __break(1u);
    return;
  }
  v59 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v58);
LABEL_45:
  *v59 = v56;
  *(_DWORD *)(a2 + 244) = v58 + 1;
  do
  {
    v65 = __ldaxr((unsigned int *)v46);
    v66 = v65 - 1;
  }
  while (__stlxr(v66, (unsigned int *)v46));
  if (!v66)
  {
    atomic_store(1u, (unsigned int *)v46);
    WTF::fastFree(v46, v49, v50, v51, v52, v53, v54, v55);
  }
  *(_BYTE *)(a2 + 212) = v10;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutPrivateName(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutPrivateName(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::FTL::`anonymous namespace'::LowerDFGToB3::compilePutPrivateName(void)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_DWORD *)(v2 + 28);
  if (v3 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a2[3] - 4);
  v5 = (v3 - v4);
  v6 = a2[23];
  v7 = v5 + v6;
  if (v6 <= v5 + v6 && v6 + a2[1] >= v7)
    return JSC::JITInlineCacheGenerator::finalize(v2 + 8, a2, a2, v7);
  result = 366;
  __break(0xC471u);
  return result;
}

uint64_t _ZZN3JSC3FTL12_GLOBAL__N_112LowerDFGToB329compileAtomicsReadModifyWriteEvENKUlPT_E0_clIFNS_24ExceptionOperationResultIxEEPNS_14JSGlobalObjectExxxEEEDaS4_(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  JSC::B3::Value *v41;
  JSC::B3::Value *v42;
  JSC::DFG::Node *v43;
  char **v44;
  uint64_t v45;
  WTF *v46;
  char *v48;
  WTF *v49;
  uint64_t v50;

  v10 = *a1;
  v11 = *(_QWORD *)a1[1];
  JSC::DFG::DesiredWeakReferences::addLazily((int *)(*(_QWORD *)(*(_QWORD *)*a1 + 24) + 280), v11, a3, a4, a5, a6, a7, a8);
  v12 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(v10 + 27640), v11);
  v23 = (int *)(v10 + 28264);
  v24 = *(_DWORD *)(v10 + 28264);
  if ((v24 & 0x80000000) == 0)
  {
    v25 = *(_QWORD *)(v10 + 27848);
    v49 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v49 = 0x200000002;
    v50 = 0x200000002;
    v33 = (_QWORD *)(v25 + 32);
    v34 = *(unsigned int *)(v25 + 44);
    if ((_DWORD)v34 == *(_DWORD *)(v25 + 40))
    {
      v35 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v34 + 1, (unint64_t)&v49);
      v36 = *(_QWORD *)(v25 + 32) + 16 * *(unsigned int *)(v25 + 44);
    }
    else
    {
      v36 = *v33 + 16 * v34;
      v35 = (unint64_t)&v49;
    }
    *(_QWORD *)v36 = 0;
    *(_QWORD *)(v36 + 8) = 0;
    v37 = *(_QWORD *)v35;
    *(_QWORD *)v35 = 0;
    *(_QWORD *)v36 = v37;
    LODWORD(v37) = *(_DWORD *)(v35 + 8);
    *(_DWORD *)(v35 + 8) = 0;
    *(_DWORD *)(v36 + 8) = v37;
    LODWORD(v37) = *(_DWORD *)(v35 + 12);
    *(_DWORD *)(v35 + 12) = 0;
    *(_DWORD *)(v36 + 12) = v37;
    ++*(_DWORD *)(v25 + 44);
    v24 = v34 | 0x80000000;
    *v23 = v34 | 0x80000000;
    v38 = v49;
    if (v49)
    {
      v49 = 0;
      LODWORD(v50) = 0;
      WTF::fastFree((unint64_t)v38, v26, v27, v28, v29, v30, v31, v32);
      v24 = *v23;
    }
  }
  v39 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(v10 + 27640), a2);
  v40 = *(_QWORD *)(v10 + 27776);
  v41 = *(JSC::B3::Value **)(v10 + 27760);
  v42 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(v24, *(_QWORD *)(v10 + 27768), v39, v12, v13, v14, v15);
  JSC::B3::Procedure::addValueImpl(v41, v42);
  v49 = v42;
  v44 = (char **)(v40 + 8);
  v45 = *(unsigned int *)(v40 + 20);
  if ((_DWORD)v45 == *(_DWORD *)(v40 + 16))
  {
    v48 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v44, v45 + 1, (unint64_t)&v49);
    v45 = *(unsigned int *)(v40 + 20);
    *(_QWORD *)(*(_QWORD *)(v40 + 8) + 8 * v45) = *(_QWORD *)v48;
    v46 = v49;
  }
  else
  {
    *(_QWORD *)&(*v44)[8 * v45] = v42;
    v46 = v42;
  }
  *(_DWORD *)(v40 + 20) = v45 + 1;
  *((_QWORD *)v46 + 4) = v40;
}

unint64_t WTF::Vector<JSC::FTL::SwitchCase,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 24 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v14 = (unint64_t)a2;
      if (v14 <= v12)
      {
        v26 = *(_QWORD *)a1;
        return v26 + 8 * ((uint64_t)(v8 - v10) >> 3);
      }
      if (v14 < 5)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 4;
        goto LABEL_32;
      }
      if (v14 < 0xAAAAAAB)
      {
        v15 = 24 * v14;
        v16 = WTF::fastMalloc((WTF *)(24 * v14));
        *(_DWORD *)(a1 + 8) = (v15 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a1 = v16;
LABEL_32:
        v27 = 0;
        do
        {
          v28 = v16 + v27;
          v29 = *(_OWORD *)(v10 + v27);
          *(_QWORD *)(v28 + 16) = *(_QWORD *)(v10 + v27 + 16);
          *(_OWORD *)v28 = v29;
          v27 += 24;
        }
        while (24 * v11 != v27);
        v26 = *(_QWORD *)a1;
        if (a1 + 16 != v10 && v10)
        {
          if (v26 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          v26 = *(_QWORD *)a1;
        }
        return v26 + 8 * ((uint64_t)(v8 - v10) >> 3);
      }
LABEL_41:
      __break(0xC471u);
      JUMPOUT(0x197DA66A0);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v19 = (unint64_t)a2;
  if (v19 > v17)
  {
    v20 = *(unsigned int *)(a1 + 12);
    if (v19 < 5)
    {
      v22 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
      if (!(_DWORD)v20)
        goto LABEL_25;
    }
    else
    {
      if (v19 >= 0xAAAAAAB)
        goto LABEL_41;
      v21 = 24 * v19;
      v22 = WTF::fastMalloc((WTF *)(24 * v19));
      *(_DWORD *)(a1 + 8) = (v21 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v20)
        goto LABEL_25;
    }
    v23 = 24 * v20;
    v24 = v10;
    do
    {
      v25 = *(_OWORD *)v24;
      *(_QWORD *)(v22 + 16) = *(_QWORD *)(v24 + 16);
      *(_OWORD *)v22 = v25;
      v22 += 24;
      v24 += 24;
      v23 -= 24;
    }
    while (v23);
LABEL_25:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::SwitchValue,JSC::B3::Origin,JSC::B3::Value *>(uint64_t a1, JSC::B3::Value *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  uint64_t v14;

  v8 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v8 + 8) = -1;
  *(_WORD *)(v8 + 12) = 156;
  *(_DWORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 20) = 1;
  *(_QWORD *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = a4;
  *(_QWORD *)v8 = off_1E357EBF8;
  *(_QWORD *)(v8 + 40) = 0;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)v8);
  v14 = v8;
  v9 = (char **)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 16))
  {
    v13 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v10 + 1, (unint64_t)&v14);
    v10 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) = *(_QWORD *)v13;
    v11 = v14;
  }
  else
  {
    *(_QWORD *)&(*v9)[8 * v10] = v8;
    v11 = v8;
  }
  *(_DWORD *)(a1 + 20) = v10 + 1;
  *(_QWORD *)(v11 + 32) = a1;
  return v8;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,JSC::JSString *,long long,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  JSC::DFG::Node *v20;
  char **v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  char *v25;
  JSC::B3::Value *v26;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), (uint64_t)operationDefineDataPropertyString);
  v15 = *a4;
  v16 = *a5;
  v17 = a1[3472];
  v18 = (JSC::B3::Value *)a1[3470];
  v19 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(2, a1[3471], v14, *a2, *a3, v15, v16, *a6);
  JSC::B3::Procedure::addValueImpl(v18, v19);
  v26 = v19;
  v21 = (char **)(v17 + 8);
  v22 = *(unsigned int *)(v17 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(v17 + 16))
  {
    v25 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v26);
    v22 = *(unsigned int *)(v17 + 20);
    *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v22) = *(_QWORD *)v25;
    v23 = v26;
  }
  else
  {
    *(_QWORD *)&(*v21)[8 * v22] = v19;
    v23 = v19;
  }
  *(_DWORD *)(v17 + 20) = v22 + 1;
  *((_QWORD *)v23 + 4) = v17;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,WTF::UniquedStringImpl *,long long,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::DFG::Node *v16;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationDefineDataPropertyStringIdent);
  v15 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), 2, v14, *a2, *a3, *a4, *a5, *a6);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,JSC::Symbol *,long long,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  JSC::DFG::Node *v20;
  char **v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  char *v25;
  JSC::B3::Value *v26;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), (uint64_t)operationDefineDataPropertySymbol);
  v15 = *a4;
  v16 = *a5;
  v17 = a1[3472];
  v18 = (JSC::B3::Value *)a1[3470];
  v19 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(2, a1[3471], v14, *a2, *a3, v15, v16, *a6);
  JSC::B3::Procedure::addValueImpl(v18, v19);
  v26 = v19;
  v21 = (char **)(v17 + 8);
  v22 = *(unsigned int *)(v17 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(v17 + 16))
  {
    v25 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v26);
    v22 = *(unsigned int *)(v17 + 20);
    *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v22) = *(_QWORD *)v25;
    v23 = v26;
  }
  else
  {
    *(_QWORD *)&(*v21)[8 * v22] = v19;
    v23 = v19;
  }
  *(_DWORD *)(v17 + 20) = v22 + 1;
  *((_QWORD *)v23 + 4) = v17;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,long long,long long,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  JSC::DFG::Node *v20;
  char **v21;
  uint64_t v22;
  JSC::B3::Value *v23;
  char *v25;
  JSC::B3::Value *v26;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 3455), (uint64_t)operationDefineDataProperty);
  v15 = *a4;
  v16 = *a5;
  v17 = a1[3472];
  v18 = (JSC::B3::Value *)a1[3470];
  v19 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*,JSC::B3::Value*>(2, a1[3471], v14, *a2, *a3, v15, v16, *a6);
  JSC::B3::Procedure::addValueImpl(v18, v19);
  v26 = v19;
  v21 = (char **)(v17 + 8);
  v22 = *(unsigned int *)(v17 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(v17 + 16))
  {
    v25 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, v22 + 1, (unint64_t)&v26);
    v22 = *(unsigned int *)(v17 + 20);
    *(_QWORD *)(*(_QWORD *)(v17 + 8) + 8 * v22) = *(_QWORD *)v25;
    v23 = v26;
  }
  else
  {
    *(_QWORD *)&(*v21)[8 * v22] = v19;
    v23 = v19;
  }
  *(_DWORD *)(v17 + 20) = v22 + 1;
  *((_QWORD *)v23 + 4) = v17;
}

uint64_t JSC::FTL::AbstractHeapRepository::forArrayType(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;

  switch(a2)
  {
    case 9:
      v2 = 18552;
      return a1 + v2;
    case 7:
      v2 = 16568;
      return a1 + v2;
    case 8:
      v2 = 17560;
      return a1 + v2;
  }
  if ((a2 - 10) < 2)
  {
    v2 = 6648;
    return a1 + v2;
  }
  result = 283;
  __break(0xC471u);
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JSArray *),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::DFG::Node *v17;
  WTF *v18;
  char **v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  char *v37;
  WTF *v38;
  uint64_t v39;

  v12 = (int *)(a1 + 28264);
  v13 = *(_DWORD *)(a1 + 28264);
  if ((v13 & 0x80000000) == 0)
  {
    v23 = *(_QWORD *)(a1 + 27848);
    v38 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v38 = 0x200000002;
    v39 = 0x200000002;
    v31 = (_QWORD *)(v23 + 32);
    v32 = *(unsigned int *)(v23 + 44);
    if ((_DWORD)v32 == *(_DWORD *)(v23 + 40))
    {
      v33 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v31, v32 + 1, (unint64_t)&v38);
      v34 = *(_QWORD *)(v23 + 32) + 16 * *(unsigned int *)(v23 + 44);
    }
    else
    {
      v34 = *v31 + 16 * v32;
      v33 = (unint64_t)&v38;
    }
    *(_QWORD *)v34 = 0;
    *(_QWORD *)(v34 + 8) = 0;
    v35 = *(_QWORD *)v33;
    *(_QWORD *)v33 = 0;
    *(_QWORD *)v34 = v35;
    LODWORD(v35) = *(_DWORD *)(v33 + 8);
    *(_DWORD *)(v33 + 8) = 0;
    *(_DWORD *)(v34 + 8) = v35;
    LODWORD(v35) = *(_DWORD *)(v33 + 12);
    *(_DWORD *)(v33 + 12) = 0;
    *(_DWORD *)(v34 + 12) = v35;
    ++*(_DWORD *)(v23 + 44);
    v13 = v32 | 0x80000000;
    *v12 = v32 | 0x80000000;
    v36 = v38;
    if (v38)
    {
      v38 = 0;
      LODWORD(v39) = 0;
      WTF::fastFree((unint64_t)v36, v24, v25, v26, v27, v28, v29, v30);
      v13 = *v12;
    }
  }
  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationArrayPush);
  v15 = *a3;
  v16 = *(_QWORD *)(a1 + 27776);
  v18 = (WTF *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::Value **)(a1 + 27760), v13, *(_QWORD *)(a1 + 27768), v14, *a2, v15, *a4);
  v38 = v18;
  v19 = (char **)(v16 + 8);
  v20 = *(unsigned int *)(v16 + 20);
  if ((_DWORD)v20 == *(_DWORD *)(v16 + 16))
  {
    v37 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19, v20 + 1, (unint64_t)&v38);
    v20 = *(unsigned int *)(v16 + 20);
    *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v20) = *(_QWORD *)v37;
    v21 = v38;
  }
  else
  {
    *(_QWORD *)&(*v19)[8 * v20] = v18;
    v21 = v18;
  }
  *(_DWORD *)(v16 + 20) = v20 + 1;
  *((_QWORD *)v21 + 4) = v16;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,double,JSC::JSArray *),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationArrayPushDouble);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, v12, v13, *a2, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *,void *,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  JSC::DFG::Node *v17;

  v15 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v16 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), v14, v15, *a3, *a4, *a5, *a6);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::populateSliceRange(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, JSC::B3::Value *a3, JSC::B3::Value *a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  JSC::B3::Value *v11;
  char **v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  int v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  JSC::B3::Value *v18;
  char **v19;
  uint64_t v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  JSC::B3::Value *v28;
  char **v29;
  uint64_t v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::FTL::Output *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  JSC::B3::Value *v40;
  char **v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  int v44;
  uint64_t v45;
  JSC::B3::Value *v46;
  JSC::B3::Value *v47;
  char **v48;
  uint64_t v49;
  JSC::B3::Value *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  JSC::B3::Value *v56;
  JSC::B3::Value *v57;
  char **v58;
  uint64_t v59;
  JSC::B3::Value *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  JSC::B3::Value *v78;

  if (a3)
  {
    v7 = *((_QWORD *)this + 3457);
    v8 = (*(uint64_t (**)(JSC::B3::Value *, uint64_t))(*(_QWORD *)a3 + 344))(a3, v7);
    if (v8 == 2)
    {
      v9 = *((_QWORD *)this + 3472);
      v10 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v11 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(56, *((_QWORD *)this + 3471), (uint64_t)a3, v7);
      JSC::B3::Procedure::addValueImpl(v10, v11);
      v78 = v11;
      v12 = (char **)(v9 + 8);
      v13 = *(unsigned int *)(v9 + 20);
      if ((_DWORD)v13 == *(_DWORD *)(v9 + 16))
      {
        v69 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v13 + 1, (unint64_t)&v78);
        v13 = *(unsigned int *)(v9 + 20);
        *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v13) = *(_QWORD *)v69;
        v14 = v78;
      }
      else
      {
        *(_QWORD *)&(*v12)[8 * v13] = v11;
        v14 = v11;
      }
      *(_DWORD *)(v9 + 20) = v13 + 1;
      *((_QWORD *)v14 + 4) = v9;
    }
    else
    {
      v73 = 27648;
      if (v8 == 1)
        v73 = 27640;
      v11 = *(JSC::B3::Value **)((char *)this + v73);
    }
    v15 = (*(uint64_t (**)(JSC::B3::Value *, JSC::B3::Value *))(*(_QWORD *)a3 + 352))(a3, a4);
    if (v15 == 2)
    {
      v16 = *((_QWORD *)this + 3472);
      v17 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v18 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(57, *((_QWORD *)this + 3471), (uint64_t)a3, (uint64_t)a4);
      JSC::B3::Procedure::addValueImpl(v17, v18);
      v78 = v18;
      v19 = (char **)(v16 + 8);
      v20 = *(unsigned int *)(v16 + 20);
      if ((_DWORD)v20 == *(_DWORD *)(v16 + 16))
      {
        v68 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19, v20 + 1, (unint64_t)&v78);
        v20 = *(unsigned int *)(v16 + 20);
        *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v20) = *(_QWORD *)v68;
        v21 = v78;
      }
      else
      {
        *(_QWORD *)&(*v19)[8 * v20] = v18;
        v21 = v18;
      }
      *(_DWORD *)(v16 + 20) = v20 + 1;
      *((_QWORD *)v21 + 4) = v16;
    }
    else
    {
      v76 = 27648;
      if (v15 == 1)
        v76 = 27640;
      v18 = *(JSC::B3::Value **)((char *)this + v76);
    }
    v22 = JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v18, (uint64_t)a4, (uint64_t)a3, 0);
    v23 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), a4, a3);
    v24 = *((_QWORD *)this + 3457);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 320))(v23, v24);
    if (v25 == 2)
    {
      v26 = *((_QWORD *)this + 3472);
      v27 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
      v28 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(53, *((_QWORD *)this + 3471), v23, v24);
      JSC::B3::Procedure::addValueImpl(v27, v28);
      v78 = v28;
      v29 = (char **)(v26 + 8);
      v30 = *(unsigned int *)(v26 + 20);
      if ((_DWORD)v30 == *(_DWORD *)(v26 + 16))
      {
        v70 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)&v78);
        v30 = *(unsigned int *)(v26 + 20);
        *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8 * v30) = *(_QWORD *)v70;
        v31 = v78;
      }
      else
      {
        *(_QWORD *)&(*v29)[8 * v30] = v28;
        v31 = v28;
      }
      *(_DWORD *)(v26 + 20) = v30 + 1;
      *((_QWORD *)v31 + 4) = v26;
    }
    else
    {
      v74 = 27648;
      if (v25 == 1)
        v74 = 27640;
      v28 = *(JSC::B3::Value **)((char *)this + v74);
    }
    v32 = *((_QWORD *)this + 3457);
    v33 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), a4, a3);
    v34 = JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v28, v32, v33, 0);
    JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v11, v22, v34, 0);
  }
  v35 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v36 = *((_QWORD *)this + 3457);
  v37 = (*(uint64_t (**)(JSC::B3::Value *, uint64_t))(*(_QWORD *)a2 + 344))(a2, v36);
  if (v37 == 2)
  {
    v38 = *((_QWORD *)this + 3472);
    v39 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
    v40 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(56, *((_QWORD *)this + 3471), (uint64_t)a2, v36);
    JSC::B3::Procedure::addValueImpl(v39, v40);
    v78 = v40;
    v41 = (char **)(v38 + 8);
    v42 = *(unsigned int *)(v38 + 20);
    if ((_DWORD)v42 == *(_DWORD *)(v38 + 16))
    {
      v66 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v41, v42 + 1, (unint64_t)&v78);
      v42 = *(unsigned int *)(v38 + 20);
      *(_QWORD *)(*(_QWORD *)(v38 + 8) + 8 * v42) = *(_QWORD *)v66;
      v43 = v78;
    }
    else
    {
      *(_QWORD *)&(*v41)[8 * v42] = v40;
      v43 = v40;
    }
    *(_DWORD *)(v38 + 20) = v42 + 1;
    *((_QWORD *)v43 + 4) = v38;
  }
  else
  {
    v71 = 27648;
    if (v37 == 1)
      v71 = 27640;
    v40 = *(JSC::B3::Value **)((char *)this + v71);
  }
  v44 = (*(uint64_t (**)(JSC::B3::Value *, JSC::B3::Value *))(*(_QWORD *)a2 + 352))(a2, a4);
  if (v44 == 2)
  {
    v45 = *((_QWORD *)this + 3472);
    v46 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
    v47 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(57, *((_QWORD *)this + 3471), (uint64_t)a2, (uint64_t)a4);
    JSC::B3::Procedure::addValueImpl(v46, v47);
    v78 = v47;
    v48 = (char **)(v45 + 8);
    v49 = *(unsigned int *)(v45 + 20);
    if ((_DWORD)v49 == *(_DWORD *)(v45 + 16))
    {
      v65 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v48, v49 + 1, (unint64_t)&v78);
      v49 = *(unsigned int *)(v45 + 20);
      *(_QWORD *)(*(_QWORD *)(v45 + 8) + 8 * v49) = *(_QWORD *)v65;
      v50 = v78;
    }
    else
    {
      *(_QWORD *)&(*v48)[8 * v49] = v47;
      v50 = v47;
    }
    *(_DWORD *)(v45 + 20) = v49 + 1;
    *((_QWORD *)v50 + 4) = v45;
  }
  else
  {
    v75 = 27648;
    if (v44 == 1)
      v75 = 27640;
    v47 = *(JSC::B3::Value **)((char *)this + v75);
  }
  v51 = JSC::FTL::Output::select((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (uint64_t)v47, (uint64_t)a4, (uint64_t)a2, 0);
  v52 = JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), a4, a2);
  v53 = *((_QWORD *)this + 3457);
  v54 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 320))(v52, v53);
  if (v54 == 2)
  {
    v55 = *((_QWORD *)this + 3472);
    v56 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
    v57 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(53, *((_QWORD *)this + 3471), v52, v53);
    JSC::B3::Procedure::addValueImpl(v56, v57);
    v78 = v57;
    v58 = (char **)(v55 + 8);
    v59 = *(unsigned int *)(v55 + 20);
    if ((_DWORD)v59 == *(_DWORD *)(v55 + 16))
    {
      v67 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v58, v59 + 1, (unint64_t)&v78);
      v59 = *(unsigned int *)(v55 + 20);
      *(_QWORD *)(*(_QWORD *)(v55 + 8) + 8 * v59) = *(_QWORD *)v67;
      v60 = v78;
    }
    else
    {
      *(_QWORD *)&(*v58)[8 * v59] = v57;
      v60 = v57;
    }
    v35 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
    *(_DWORD *)(v55 + 20) = v59 + 1;
    *((_QWORD *)v60 + 4) = v55;
  }
  else
  {
    v72 = 27648;
    if (v54 == 1)
      v72 = 27640;
    v57 = *(JSC::B3::Value **)((char *)this + v72);
  }
  v61 = *((_QWORD *)this + 3457);
  v62 = JSC::FTL::Output::add(v35, a4, a2);
  v63 = JSC::FTL::Output::select(v35, (uint64_t)v57, v61, v62, 0);
  return JSC::FTL::Output::select(v35, (uint64_t)v40, v51, v63, 0);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateJSArray(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, JSC::B3::Value *a3, JSC::B3::Value *a4, JSC::B3::Value *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  JSC::B3::Value *v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::B3::Value *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char **v68;
  uint64_t v69;
  JSC::FTL::PatchpointExceptionHandle *v70;
  JSC::B3::Value *v71;
  JSC::B3::Value *v72;
  JSC::B3::Value *v73;
  JSC::B3::Value *v74;
  JSC::B3::Value *v75;
  JSC::B3::Value *v76;
  uint64_t v77;
  uint64_t v78;
  JSC::B3::Value *HeapCell;
  JSC::B3::Value *v80;
  JSC::B3::Value *v81;
  uint64_t v82;
  uint64_t v83;
  JSC::B3::Value *v84;
  uint64_t v85;
  uint64_t v86;
  JSC::B3::Value *v87;
  uint64_t v88;
  JSC::B3::Value *v89;
  uint64_t v90;
  uint64_t v91;
  char **v92;
  uint64_t v93;
  JSC::FTL::PatchpointExceptionHandle *v94;
  uint64_t v95;
  uint64_t v96;
  JSC::B3::Value *Object;
  uint64_t v98;
  JSC::B3::Value *v99;
  uint64_t v100;
  uint64_t v101;
  JSC::FTL::PatchpointExceptionHandle *v102;
  char **v103;
  uint64_t v104;
  uint64_t v105;
  JSC::B3::Value *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char **v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  JSC::B3::Value *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char **v133;
  uint64_t v134;
  JSC::FTL::PatchpointExceptionHandle *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  JSC::B3::Value *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char **v145;
  uint64_t v146;
  JSC::FTL::PatchpointExceptionHandle *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  JSC::B3::Value *v151;
  uint64_t v152;
  uint64_t v153;
  char **v154;
  uint64_t v155;
  JSC::FTL::PatchpointExceptionHandle *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  JSC::B3::Value *v160;
  uint64_t v161;
  uint64_t v162;
  char **v163;
  uint64_t v164;
  JSC::FTL::PatchpointExceptionHandle *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  JSC::FTL::PatchpointExceptionHandle **v170;
  uint64_t v171;
  JSC::FTL::Output *v172;
  __int128 *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int *v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int *v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int *v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  JSC::B3::Value *v204;
  uint64_t v205;
  uint64_t v206;
  char **v207;
  uint64_t v208;
  JSC::FTL::PatchpointExceptionHandle *v209;
  uint64_t v210;
  JSC::B3::Value *v211;
  uint64_t v212;
  uint64_t v213;
  JSC::B3::Value *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char **v220;
  uint64_t v221;
  JSC::FTL::PatchpointExceptionHandle *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  JSC::B3::Value *v226;
  uint64_t v227;
  uint64_t v228;
  char **v229;
  uint64_t v230;
  JSC::FTL::PatchpointExceptionHandle *v231;
  JSC::FTL::PatchpointExceptionHandle *v232;
  uint64_t v233;
  uint64_t v234;
  JSC::B3::Value *v235;
  uint64_t v236;
  uint64_t v237;
  char **v238;
  uint64_t v239;
  JSC::FTL::PatchpointExceptionHandle *v240;
  JSC::B3::Value *v241;
  uint64_t v242;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  _QWORD *v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  _QWORD *v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  _QWORD *v283;
  char *v284;
  char *v285;
  char *v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  char *v291;
  char *v292;
  char *v293;
  char *v294;
  char *v295;
  JSC::B3::Value *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int *v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t v310;
  unsigned int *v311;
  unsigned int *v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int *v317;
  unsigned int v318;
  unsigned int v319;
  unint64_t v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  uint64_t v325;
  unsigned int v326;
  BOOL v327;
  uint64_t v328;
  uint64_t v329;
  unsigned int v330;
  BOOL v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  BOOL v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  BOOL v343;
  uint64_t v344;
  unint64_t v345;
  void *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  BOOL v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  BOOL v372;
  uint64_t v373;
  unint64_t v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  int v399;
  char v400;
  int v401;
  uint64_t v402;
  int v403;
  JSC::FTL::PatchpointExceptionHandle *v404;
  JSC::B3::Value *v405;
  JSC::B3::Value *v406;
  int v407;
  JSC::B3::Value *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  JSC::B3::Value *v413;
  uint64_t v414;
  uint64_t v415;
  JSC::FTL::Output *v416;
  JSC::FTL::PatchpointExceptionHandle *v417;
  uint64_t v418;
  char v419;
  _QWORD *v420;
  uint64_t v421;

  v407 = a7;
  v8 = a6;
  v13 = *(_QWORD *)this;
  v14 = *((_QWORD *)this + 3524);
  if ((v14 & 1) == 0)
  {
    v15 = *(_QWORD *)(v13 + 32);
LABEL_3:
    v16 = (_QWORD *)(v14 & 0xFFFFFFFF8);
    v17 = 1;
    v18 = 1;
LABEL_4:
    v19 = v16;
    goto LABEL_5;
  }
  v325 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
  if ((v14 & 2) != 0
    || ((v326 = *(_DWORD *)((v14 & 0xFFFFFFFF8) + 8), v326 != 0x3FFFFFFF) ? (v327 = v326 == -1) : (v327 = 1), v327))
  {
    v328 = 2;
  }
  else if (v326 >> 28)
  {
    v390 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v390 = v325;
    *(_DWORD *)(v390 + 8) = v326;
    v328 = 1;
    v325 = v390;
  }
  else
  {
    v328 = v325;
    v325 = 0;
  }
  v14 = v325 | v328;
  v15 = *(_QWORD *)(v13 + 32);
  if (((v325 | v328) & 1) == 0)
    goto LABEL_3;
  v329 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
  if ((v14 & 2) != 0
    || ((v330 = *(_DWORD *)((v14 & 0xFFFFFFFF8) + 8), v330 != 0x3FFFFFFF) ? (v331 = v330 == -1) : (v331 = 1), v331))
  {
    v332 = 2;
  }
  else if (v330 >> 28)
  {
    v391 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v391 = v329;
    *(_DWORD *)(v391 + 8) = v330;
    v332 = 1;
    v329 = v391;
  }
  else
  {
    v332 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
    v329 = 0;
  }
  v333 = v329 | v332;
  v16 = (_QWORD *)(v333 & 0xFFFFFFFF8);
  if ((v333 & 1) == 0)
  {
    v18 = 0;
    v17 = 1;
    goto LABEL_4;
  }
  v17 = 0;
  v18 = 0;
  v19 = (_QWORD *)*v16;
LABEL_5:
  if (v19)
    v15 = v19[1];
  v409 = *(_QWORD *)(v15 + 8);
  if ((v17 & 1) == 0 && v16)
    WTF::fastFree((unint64_t)v16, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  if ((v18 & 1) == 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  v20 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v21 = v20;
  v22 = *((_QWORD *)this + 3473);
  if (v22)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v22, v20);
  }
  else
  {
    v421 = v20;
    v244 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v244 = 0u;
    *((_OWORD *)v244 + 1) = 0u;
    v244[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v244;
    v420 = v244;
    v244[2] = v21;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, &v421, (uint64_t *)&v420, v245, v246, v247, v248, v249, (uint64_t)&v417);
    v250 = v420;
    v251 = (_QWORD *)*((_QWORD *)this + 3479);
    *v420 = (char *)this + 27824;
    v250[1] = v251;
    *v251 = v250;
    *((_QWORD *)this + 3479) = v250;
  }
  v23 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v24 = v23;
  v25 = *((_QWORD *)this + 3473);
  v403 = v8;
  if (v25)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v25, v23);
  }
  else
  {
    v421 = v23;
    v252 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v252 = 0u;
    *((_OWORD *)v252 + 1) = 0u;
    v252[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v252;
    v420 = v252;
    v252[2] = v24;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, &v421, (uint64_t *)&v420, v253, v254, v255, v256, v257, (uint64_t)&v417);
    v258 = v420;
    v259 = (_QWORD *)*((_QWORD *)this + 3479);
    *v420 = (char *)this + 27824;
    v258[1] = v259;
    *v259 = v258;
    *((_QWORD *)this + 3479) = v258;
  }
  v26 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v27 = v26;
  v28 = *((_QWORD *)this + 3473);
  v405 = a5;
  if (v28)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v28, v26);
  }
  else
  {
    v421 = v26;
    v260 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v260 = 0u;
    *((_OWORD *)v260 + 1) = 0u;
    v260[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v260;
    v420 = v260;
    v260[2] = v27;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, &v421, (uint64_t *)&v420, v261, v262, v263, v264, v265, (uint64_t)&v417);
    v266 = v420;
    v267 = (_QWORD *)*((_QWORD *)this + 3479);
    *v420 = (char *)this + 27824;
    v266[1] = v267;
    *v267 = v266;
    *((_QWORD *)this + 3479) = v266;
  }
  v29 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v30 = v29;
  v31 = *((_QWORD *)this + 3473);
  v410 = v24;
  if (v31)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v31, v29);
  }
  else
  {
    v421 = v29;
    v268 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v268 = 0u;
    *((_OWORD *)v268 + 1) = 0u;
    v268[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v268;
    v420 = v268;
    v268[2] = v30;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, &v421, (uint64_t *)&v420, v269, v270, v271, v272, v273, (uint64_t)&v417);
    v274 = v420;
    v275 = (_QWORD *)*((_QWORD *)this + 3479);
    *v420 = (char *)this + 27824;
    v274[1] = v275;
    *v275 = v274;
    *((_QWORD *)this + 3479) = v274;
  }
  v416 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v32 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v33 = v32;
  v34 = *((_QWORD *)this + 3473);
  if (v34)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v34, v32);
  }
  else
  {
    v421 = v32;
    v276 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v276 = 0u;
    *((_OWORD *)v276 + 1) = 0u;
    v276[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v276;
    v420 = v276;
    v276[2] = v33;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, &v421, (uint64_t *)&v420, v277, v278, v279, v280, v281, (uint64_t)&v417);
    v282 = v420;
    v283 = (_QWORD *)*((_QWORD *)this + 3479);
    *v420 = (char *)this + 27824;
    v282[1] = v283;
    *v283 = v282;
    *((_QWORD *)this + 3479) = v282;
  }
  v35 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v21;
  v411 = v30;
  v402 = v35;
  if (a4 && (*((_WORD *)a4 + 6) & 0xFFF) == 4)
  {
    LODWORD(v36) = 0;
    if (a2)
    {
      v37 = 0;
      if ((*((_WORD *)a2 + 6) & 0xFFF) == 3)
      {
        v38 = *((_DWORD *)a2 + 10);
        if (v38 >= 0x10000001)
        {
          LODWORD(v36) = 0;
          v37 = 0;
        }
        else
        {
          v39 = *((_QWORD *)a4 + 5);
          v40 = *(unsigned __int16 *)(v39 + 24);
          if (v40 == 65534)
            goto LABEL_28;
          if (v40 == 0xFFFF)
            v40 = *(_DWORD *)(*(_QWORD *)(v39 + 64) + 84);
          if (v40 < 64)
          {
LABEL_28:
            v41 = 0;
          }
          else if ((v40 - 63) >= 5)
          {
            v321 = (v40 - 64) | ((v40 - 64) >> 1) | (((v40 - 64) | ((v40 - 64) >> 1)) >> 2);
            v322 = v321 | (v321 >> 4) | ((v321 | (v321 >> 4)) >> 8);
            v41 = (v322 | HIWORD(v322)) + 1;
          }
          else
          {
            v41 = 4;
          }
          v42 = v41;
          if (v38 <= 3)
            v43 = 3;
          else
            v43 = *((_DWORD *)a2 + 10);
          if (v38)
            v44 = v43;
          else
            v44 = 5;
          v45 = v44 + v41;
          v46 = 8 * v45;
          if (v45 > 9)
          {
            if (v45 > 0x3EB)
              v47 = v46 + 8;
            else
              v47 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                                    + (((unint64_t)(v46 + 23) >> 2) & 0x7FFFFFFFCLL));
          }
          else
          {
            v47 = (v46 + 23) & 0x1FFFFFFFF0;
          }
          v36 = (unint64_t)(v47 - 8 * v42 + 0x7FFFFFFF8) >> 3;
          v37 = 1;
        }
      }
    }
    else
    {
      v37 = 0;
    }
    v399 = v36;
    v401 = v37;
    if (a3 && (*((_WORD *)a3 + 6) & 0xFFF) == 3)
    {
      v48 = a2;
      v49 = *((_DWORD *)a3 + 10);
      if (v49 >= 0x10000001)
      {
        v413 = a3;
        LODWORD(v398) = 0;
        v400 = 0;
      }
      else
      {
        v50 = *((_QWORD *)a4 + 5);
        v51 = *(unsigned __int16 *)(v50 + 24);
        if (v51 == 65534)
          goto LABEL_45;
        if (v51 == 0xFFFF)
          v51 = *(_DWORD *)(*(_QWORD *)(v50 + 64) + 84);
        if (v51 < 64)
        {
LABEL_45:
          v52 = 0;
        }
        else if ((v51 - 63) >= 5)
        {
          v323 = (v51 - 64) | ((v51 - 64) >> 1) | (((v51 - 64) | ((v51 - 64) >> 1)) >> 2);
          v324 = v323 | (v323 >> 4) | ((v323 | (v323 >> 4)) >> 8);
          v52 = (v324 | HIWORD(v324)) + 1;
        }
        else
        {
          v52 = 4;
        }
        v53 = v52;
        if (v49 <= 3)
          v54 = 3;
        else
          v54 = *((_DWORD *)a3 + 10);
        if (v49)
          v55 = v54;
        else
          v55 = 5;
        v56 = v55 + v52;
        v57 = 8 * v56;
        if (v56 > 9)
        {
          if (v56 > 0x3EB)
            v58 = v57 + 8;
          else
            v58 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                                  + (((unint64_t)(v57 + 23) >> 2) & 0x7FFFFFFFCLL));
        }
        else
        {
          v58 = (v57 + 23) & 0x1FFFFFFFF0;
        }
        v398 = (unint64_t)(v58 - 8 * v53 + 0x7FFFFFFF8) >> 3;
        v413 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v416, v398);
        v400 = 1;
      }
    }
    else
    {
      v413 = a3;
      v48 = a2;
      LODWORD(v398) = 0;
      v400 = 0;
    }
  }
  else
  {
    v413 = a3;
    v48 = a2;
    v400 = 0;
    v401 = 0;
    LODWORD(v398) = 0;
    v399 = 0;
  }
  v59 = *((_QWORD *)this + 3460);
  v60 = *((_QWORD *)this + 3472);
  v61 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v62 = *((_QWORD *)this + 3471);
  v63 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v63 + 8) = -1;
  *(_WORD *)(v63 + 12) = 152;
  *(_BYTE *)(v63 + 20) = 1;
  *(_QWORD *)v63 = &unk_1E357EDA0;
  *(_DWORD *)(v63 + 16) = 0;
  *(_QWORD *)(v63 + 40) = 0;
  *(_QWORD *)(v63 + 48) = v59;
  *(_QWORD *)(v63 + 24) = v62;
  *(_QWORD *)(v63 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v61, (JSC::B3::Value *)v63);
  v417 = (JSC::FTL::PatchpointExceptionHandle *)v63;
  v68 = (char **)(v60 + 8);
  v69 = *(unsigned int *)(v60 + 20);
  if ((_DWORD)v69 == *(_DWORD *)(v60 + 16))
  {
    v284 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v68, v69 + 1, (unint64_t)&v417);
    v69 = *(unsigned int *)(v60 + 20);
    *(_QWORD *)(*(_QWORD *)(v60 + 8) + 8 * v69) = *(_QWORD *)v284;
    v70 = v417;
  }
  else
  {
    *(_QWORD *)&(*v68)[8 * v69] = v63;
    v70 = (JSC::FTL::PatchpointExceptionHandle *)v63;
  }
  *(_DWORD *)(v60 + 20) = v69 + 1;
  *((_QWORD *)v70 + 4) = v60;
  if (v407)
  {
    v296 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v416, 0x8000000);
    v72 = v48;
    v71 = JSC::FTL::Output::aboveOrEqual(v416, v48, v296);
  }
  else
  {
    v71 = (JSC::B3::Value *)*((_QWORD *)this + 3456);
    v72 = v48;
  }
  JSC::FTL::Output::branch(v416, (uint64_t)v71, v410, v21, 0.0, 1.0, v64, v65, v66, v67);
  *((_QWORD *)this + 3472) = v21;
  *((_QWORD *)this + 3473) = v410;
  v73 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt(v416, (uint64_t)v413, 2);
  v74 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v416, 3);
  v75 = JSC::FTL::Output::shl(v416, v73, v74);
  v76 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v416, 8);
  v77 = JSC::FTL::Output::add(v416, v75, v76);
  v80 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v416, 8);
  v81 = (JSC::B3::Value *)JSC::FTL::Output::add(v416, HeapCell, v80);
  v82 = *((_QWORD *)this + 41);
  v83 = (uint64_t)v81;
  if (v82)
  {
    v84 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v416, v82);
    v83 = JSC::FTL::Output::add(v416, v81, v84);
  }
  JSC::FTL::Output::store((uint64_t)v416, (uint64_t)v72, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 304), v83);
  v85 = *((_QWORD *)this + 47);
  v86 = (uint64_t)v81;
  if (v85)
  {
    v87 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v416, v85);
    v86 = JSC::FTL::Output::add(v416, v81, v87);
  }
  JSC::FTL::Output::store((uint64_t)v416, (uint64_t)v413, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 352), v86);
  v408 = v72;
  if (v403)
    v72 = (JSC::B3::Value *)*((_QWORD *)this + 3457);
  v88 = *((_QWORD *)this + 3472);
  v89 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v90 = *((_QWORD *)this + 3471);
  v91 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v91 + 8) = -1;
  *(_WORD *)(v91 + 12) = 152;
  *(_DWORD *)(v91 + 16) = 0;
  *(_BYTE *)(v91 + 20) = 1;
  *(_QWORD *)v91 = &unk_1E357EDA0;
  *(_QWORD *)(v91 + 40) = 0;
  *(_QWORD *)(v91 + 48) = v81;
  *(_QWORD *)(v91 + 24) = v90;
  *(_QWORD *)(v91 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v89, (JSC::B3::Value *)v91);
  v417 = (JSC::FTL::PatchpointExceptionHandle *)v91;
  v92 = (char **)(v88 + 8);
  v93 = *(unsigned int *)(v88 + 20);
  if ((_DWORD)v93 == *(_DWORD *)(v88 + 16))
  {
    v285 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v92, v93 + 1, (unint64_t)&v417);
    v93 = *(unsigned int *)(v88 + 20);
    *(_QWORD *)(*(_QWORD *)(v88 + 8) + 8 * v93) = *(_QWORD *)v285;
    v94 = v417;
  }
  else
  {
    *(_QWORD *)&(*v92)[8 * v93] = v91;
    v94 = (JSC::FTL::PatchpointExceptionHandle *)v91;
  }
  *(_DWORD *)(v88 + 20) = v93 + 1;
  *((_QWORD *)v94 + 4) = v88;
  v95 = *(_QWORD *)(*(_QWORD *)this + 16);
  if (*(_DWORD *)(v95 + 37620) <= 0xFu)
  {
    __break(0xC471u);
    JUMPOUT(0x197DA8954);
  }
  v96 = JSC::FTL::Output::constInt64(v416, v95 + 37560);
  v98 = *((_QWORD *)this + 3472);
  v99 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v100 = *((_QWORD *)this + 3471);
  v101 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v101 + 8) = -1;
  *(_WORD *)(v101 + 12) = 152;
  *(_DWORD *)(v101 + 16) = 0;
  *(_BYTE *)(v101 + 20) = 1;
  *(_QWORD *)v101 = &unk_1E357EDA0;
  *(_QWORD *)(v101 + 40) = 0;
  *(_QWORD *)(v101 + 48) = Object;
  v102 = (JSC::FTL::PatchpointExceptionHandle *)v101;
  *(_QWORD *)(v101 + 24) = v100;
  *(_QWORD *)(v101 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v99, (JSC::B3::Value *)v101);
  v417 = v102;
  v103 = (char **)(v98 + 8);
  v104 = *(unsigned int *)(v98 + 20);
  v404 = v102;
  if ((_DWORD)v104 == *(_DWORD *)(v98 + 16))
  {
    v286 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v103, v104 + 1, (unint64_t)&v417);
    v104 = *(unsigned int *)(v98 + 20);
    *(_QWORD *)(*(_QWORD *)(v98 + 8) + 8 * v104) = *(_QWORD *)v286;
    v102 = v417;
  }
  else
  {
    *(_QWORD *)&(*v103)[8 * v104] = v102;
  }
  *(_DWORD *)(v98 + 20) = v104 + 1;
  *((_QWORD *)v102 + 4) = v98;
  v105 = *((_QWORD *)this + 3472);
  v106 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v107 = *((_QWORD *)this + 3471);
  v108 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v108 + 8) = -1;
  *(_WORD *)(v108 + 12) = 152;
  *(_DWORD *)(v108 + 16) = 0;
  *(_BYTE *)(v108 + 20) = 1;
  *(_QWORD *)v108 = &unk_1E357EDA0;
  *(_QWORD *)(v108 + 40) = 0;
  *(_QWORD *)(v108 + 48) = v81;
  *(_QWORD *)(v108 + 24) = v107;
  *(_QWORD *)(v108 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v106, (JSC::B3::Value *)v108);
  v417 = (JSC::FTL::PatchpointExceptionHandle *)v108;
  v112 = (char **)(v105 + 8);
  v113 = *(unsigned int *)(v105 + 20);
  v406 = (JSC::B3::Value *)v108;
  if ((_DWORD)v113 == *(_DWORD *)(v105 + 16))
  {
    v287 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v112, v113 + 1, (unint64_t)&v417);
    v113 = *(unsigned int *)(v105 + 20);
    *(_QWORD *)(*(_QWORD *)(v105 + 8) + 8 * v113) = *(_QWORD *)v287;
    v108 = (uint64_t)v417;
  }
  else
  {
    *(_QWORD *)&(*v112)[8 * v113] = v108;
  }
  *(_DWORD *)(v105 + 20) = v113 + 1;
  *(_QWORD *)(v108 + 32) = v105;
  v114 = *((_QWORD *)this + 3472);
  v115 = *((_QWORD *)this + 3470);
  v116 = *((_QWORD *)this + 3471);
  v417 = (JSC::FTL::PatchpointExceptionHandle *)v411;
  LOBYTE(v418) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v114, v115, 154, v116, (uint64_t *)&v417, v109, v110, v111);
  *((_QWORD *)this + 3472) = v410;
  *((_QWORD *)this + 3473) = v27;
  v122 = *(_DWORD *)(v409 + 912);
  if (v122)
    v123 = 16 * (v122 & 0xFFFFFFFE);
  else
    v123 = 0;
  v124 = JSC::DFG::Graph::registerStructure(*(_QWORD *)this, v123, (int *)&v417, v117, v118, v119, v120, v121);
  v125 = JSC::FTL::Output::constInt64(v416, v124);
  v126 = *((_QWORD *)this + 3472);
  v127 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v128 = *((_QWORD *)this + 3471);
  v129 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v129 + 8) = -1;
  *(_WORD *)(v129 + 12) = 152;
  *(_DWORD *)(v129 + 16) = 0;
  *(_BYTE *)(v129 + 20) = 1;
  *(_QWORD *)v129 = &unk_1E357EDA0;
  *(_QWORD *)(v129 + 40) = 0;
  *(_QWORD *)(v129 + 48) = v125;
  *(_QWORD *)(v129 + 24) = v128;
  *(_QWORD *)(v129 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v127, (JSC::B3::Value *)v129);
  v417 = (JSC::FTL::PatchpointExceptionHandle *)v129;
  v133 = (char **)(v126 + 8);
  v134 = *(unsigned int *)(v126 + 20);
  if ((_DWORD)v134 == *(_DWORD *)(v126 + 16))
  {
    v288 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v133, v134 + 1, (unint64_t)&v417);
    v134 = *(unsigned int *)(v126 + 20);
    *(_QWORD *)(*(_QWORD *)(v126 + 8) + 8 * v134) = *(_QWORD *)v288;
    v135 = v417;
  }
  else
  {
    *(_QWORD *)&(*v133)[8 * v134] = v129;
    v135 = (JSC::FTL::PatchpointExceptionHandle *)v129;
  }
  *(_DWORD *)(v126 + 20) = v134 + 1;
  *((_QWORD *)v135 + 4) = v126;
  v136 = *((_QWORD *)this + 3472);
  v137 = *((_QWORD *)this + 3470);
  v138 = *((_QWORD *)this + 3471);
  v417 = (JSC::FTL::PatchpointExceptionHandle *)v33;
  LOBYTE(v418) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v136, v137, 154, v138, (uint64_t *)&v417, v130, v131, v132);
  *((_QWORD *)this + 3472) = v27;
  *((_QWORD *)this + 3473) = v33;
  v139 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v140 = *((_QWORD *)this + 3471);
  v141 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v141 + 8) = -1;
  *(_WORD *)(v141 + 12) = 152;
  *(_DWORD *)(v141 + 16) = 0;
  *(_BYTE *)(v141 + 20) = 1;
  *(_QWORD *)v141 = &unk_1E357EDA0;
  *(_QWORD *)(v141 + 40) = 0;
  *(_QWORD *)(v141 + 48) = a4;
  *(_QWORD *)(v141 + 24) = v140;
  *(_QWORD *)(v141 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v139, (JSC::B3::Value *)v141);
  v417 = (JSC::FTL::PatchpointExceptionHandle *)v141;
  v145 = (char **)(v27 + 8);
  v146 = *(unsigned int *)(v27 + 20);
  if ((_DWORD)v146 == *(_DWORD *)(v27 + 16))
  {
    v289 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v145, v146 + 1, (unint64_t)&v417);
    v146 = *(unsigned int *)(v27 + 20);
    *(_QWORD *)(*(_QWORD *)(v27 + 8) + 8 * v146) = *(_QWORD *)v289;
    v147 = v417;
  }
  else
  {
    *(_QWORD *)&(*v145)[8 * v146] = v141;
    v147 = (JSC::FTL::PatchpointExceptionHandle *)v141;
  }
  *(_DWORD *)(v27 + 20) = v146 + 1;
  *((_QWORD *)v147 + 4) = v27;
  v148 = *((_QWORD *)this + 3472);
  v149 = *((_QWORD *)this + 3470);
  v150 = *((_QWORD *)this + 3471);
  v417 = (JSC::FTL::PatchpointExceptionHandle *)v33;
  LOBYTE(v418) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v148, v149, 154, v150, (uint64_t *)&v417, v142, v143, v144);
  *((_QWORD *)this + 3472) = v33;
  *((_QWORD *)this + 3473) = v411;
  v151 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v152 = *((_QWORD *)this + 3471);
  v153 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v153 = off_1E357F5F0;
  *(_DWORD *)(v153 + 8) = -1;
  *(_WORD *)(v153 + 12) = 153;
  *(_DWORD *)(v153 + 16) = 2;
  *(_BYTE *)(v153 + 20) = 0;
  *(_QWORD *)(v153 + 24) = v152;
  *(_QWORD *)(v153 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v151, (JSC::B3::Value *)v153);
  v417 = (JSC::FTL::PatchpointExceptionHandle *)v153;
  v154 = (char **)(v33 + 8);
  v155 = *(unsigned int *)(v33 + 20);
  if ((_DWORD)v155 == *(_DWORD *)(v33 + 16))
  {
    v290 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v154, v155 + 1, (unint64_t)&v417);
    v155 = *(unsigned int *)(v33 + 20);
    *(_QWORD *)(*(_QWORD *)(v33 + 8) + 8 * v155) = *(_QWORD *)v290;
    v156 = v417;
  }
  else
  {
    *(_QWORD *)&(*v154)[8 * v155] = v153;
    v156 = (JSC::FTL::PatchpointExceptionHandle *)v153;
  }
  *(_DWORD *)(v33 + 20) = v155 + 1;
  *((_QWORD *)v156 + 4) = v33;
  if ((*(_WORD *)(v129 + 12) & 0xFFF) == 0x98)
    v157 = v129;
  else
    v157 = 0;
  *(_QWORD *)(v157 + 40) = v153;
  if ((*(_WORD *)(v141 + 12) & 0xFFF) == 0x98)
    v158 = v141;
  else
    v158 = 0;
  *(_QWORD *)(v158 + 40) = v153;
  v159 = *((_QWORD *)this + 3472);
  v160 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v161 = *((_QWORD *)this + 3471);
  v162 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v162 = off_1E357F5F0;
  *(_DWORD *)(v162 + 8) = -1;
  *(_WORD *)(v162 + 12) = 153;
  *(_DWORD *)(v162 + 16) = 2;
  *(_BYTE *)(v162 + 20) = 0;
  *(_QWORD *)(v162 + 24) = v161;
  *(_QWORD *)(v162 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v160, (JSC::B3::Value *)v162);
  v417 = (JSC::FTL::PatchpointExceptionHandle *)v162;
  v163 = (char **)(v159 + 8);
  v164 = *(unsigned int *)(v159 + 20);
  if ((_DWORD)v164 == *(_DWORD *)(v159 + 16))
  {
    v291 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v163, v164 + 1, (unint64_t)&v417);
    v164 = *(unsigned int *)(v159 + 20);
    *(_QWORD *)(*(_QWORD *)(v159 + 8) + 8 * v164) = *(_QWORD *)v291;
    v165 = v417;
  }
  else
  {
    *(_QWORD *)&(*v163)[8 * v164] = v162;
    v165 = (JSC::FTL::PatchpointExceptionHandle *)v162;
  }
  *(_DWORD *)(v159 + 20) = v164 + 1;
  *((_QWORD *)v165 + 4) = v159;
  if ((*(_WORD *)(v63 + 12) & 0xFFF) == 0x98)
    v166 = v63;
  else
    v166 = 0;
  *(_QWORD *)(v166 + 40) = v162;
  if ((*(_WORD *)(v91 + 12) & 0xFFF) == 0x98)
    v167 = v91;
  else
    v167 = 0;
  *(_QWORD *)(v167 + 40) = v162;
  v168 = *(_QWORD *)(*(_QWORD *)this + 16);
  if (v413 == v408)
    goto LABEL_100;
  v169 = v400 ^ 1;
  if (!v401)
    v169 = 1;
  if ((v169 & 1) == 0 && (_DWORD)v398 == v399)
  {
LABEL_100:
    v414 = *(_QWORD *)(*(_QWORD *)this + 16);
    v170 = (JSC::FTL::PatchpointExceptionHandle **)WTF::fastMalloc((WTF *)0x18);
    *v170 = (JSC::FTL::PatchpointExceptionHandle *)v153;
    v170[1] = v408;
    v170[2] = (JSC::FTL::PatchpointExceptionHandle *)v162;
    v171 = *((_QWORD *)this + 3524);
    v172 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
    if ((v171 & 1) != 0)
    {
      v334 = *(_QWORD *)(v171 & 0xFFFFFFFF8);
      if ((v171 & 2) != 0
        || (v335 = *(unsigned int *)((v171 & 0xFFFFFFFF8) + 8), (_DWORD)v335 == 0x3FFFFFFF)
        || (_DWORD)v335 == -1)
      {
        v336 = 2;
      }
      else if (v335 >> 28)
      {
        v394 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v394 = v334;
        *(_DWORD *)(v394 + 8) = v335;
        v336 = 1;
        v334 = v394;
      }
      else
      {
        v336 = *(_QWORD *)(v171 & 0xFFFFFFFF8);
        v334 = v335 << 36;
      }
      v171 = v334 | v336;
    }
    v173 = (__int128 *)JSC::FTL::Output::patchpoint(v416, 2);
    v417 = *v170;
    v418 = 0;
    v419 = 3;
    JSC::B3::StackmapValue::append(v173, (uint64_t)v417, (unint64_t)&v418);
    v417 = v170[1];
    v418 = 0;
    v419 = 3;
    JSC::B3::StackmapValue::append(v173, (uint64_t)v417, (unint64_t)&v418);
    v417 = v170[2];
    v418 = 0;
    v419 = 3;
    JSC::B3::StackmapValue::append(v173, (uint64_t)v417, (unint64_t)&v418);
    *((_QWORD *)v173 + 8) |= 0x30000uLL;
    *((_QWORD *)v173 + 10) |= 0x30000uLL;
    v179 = *((_QWORD *)this + 1);
    v180 = (unsigned int *)v417;
    if (v417)
    {
      do
        v181 = __ldaxr(v180);
      while (__stlxr(v181 + 1, v180));
    }
    v182 = v171;
    if ((v171 & 1) != 0)
    {
      v337 = *(_QWORD *)(v171 & 0xFFFFFFFF8);
      if ((v171 & 2) != 0
        || ((v338 = *(unsigned int *)((v171 & 0xFFFFFFFF8) + 8), (_DWORD)v338 != 0x3FFFFFFF)
          ? (v339 = (_DWORD)v338 == -1)
          : (v339 = 1),
            v339))
      {
        v340 = 2;
      }
      else if (v338 >> 28)
      {
        v392 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v392 = v337;
        *(_DWORD *)(v392 + 8) = v338;
        v340 = 1;
        v337 = v392;
      }
      else
      {
        v340 = *(_QWORD *)(v171 & 0xFFFFFFFF8);
        v337 = v338 << 36;
      }
      v182 = v337 | v340;
      v172 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
    }
    v183 = WTF::fastMalloc((WTF *)0x38);
    v191 = v183;
    *(_DWORD *)(v183 + 8) = 1;
    *(_QWORD *)v183 = &off_1E35766E0;
    *(_QWORD *)(v183 + 16) = v414;
    *(_QWORD *)(v183 + 24) = v409;
    if (v180)
    {
      do
        v192 = __ldaxr(v180);
      while (__stlxr(v192 + 1, v180));
    }
    *(_QWORD *)(v183 + 32) = v180;
    *(_QWORD *)(v183 + 40) = v179;
    v193 = v182;
    if ((v182 & 1) != 0)
    {
      v341 = *(_QWORD *)(v182 & 0xFFFFFFFF8);
      if ((v182 & 2) != 0
        || ((v342 = *(unsigned int *)((v182 & 0xFFFFFFFF8) + 8), (_DWORD)v342 != 0x3FFFFFFF)
          ? (v343 = (_DWORD)v342 == -1)
          : (v343 = 1),
            v343))
      {
        v344 = 2;
      }
      else if (v342 >> 28)
      {
        v393 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v393 = v341;
        *(_DWORD *)(v393 + 8) = v342;
        v344 = 1;
        v341 = v393;
      }
      else
      {
        v344 = *(_QWORD *)(v182 & 0xFFFFFFFF8);
        v341 = v342 << 36;
      }
      v193 = v341 | v344;
      v172 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
    }
    *(_QWORD *)(v191 + 48) = v193;
    v194 = (unsigned int *)*((_QWORD *)v173 + 7);
    *((_QWORD *)v173 + 7) = v191;
    if (v194)
    {
      v195 = v194 + 2;
      do
      {
        v196 = __ldaxr(v195);
        v197 = v196 - 1;
      }
      while (__stlxr(v197, v195));
      if (!v197)
      {
        atomic_store(1u, v194 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v194 + 8))(v194);
      }
    }
    if ((v182 & 1) != 0 && (v182 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v182 & 0xFFFFFFFF8, v184, v185, v186, v187, v188, v189, v190);
    if (v180)
    {
      do
      {
        v198 = __ldaxr(v180);
        v199 = v198 - 1;
      }
      while (__stlxr(v199, v180));
      if (!v199)
      {
        atomic_store(1u, v180);
        JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v180, v184, v185, v186, v187, v188, v189, v190);
        WTF::fastFree(v345, v346, v347, v348, v349, v350, v351, v352);
      }
    }
    v200 = (unsigned int *)v417;
    v417 = 0;
    if (v200)
    {
      do
      {
        v201 = __ldaxr(v200);
        v202 = v201 - 1;
      }
      while (__stlxr(v202, v200));
      if (!v202)
      {
        atomic_store(1u, v200);
        JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v200, v184, v185, v186, v187, v188, v189, v190);
        WTF::fastFree(v353, v354, v355, v356, v357, v358, v359, v360);
      }
    }
    if ((v171 & 1) != 0)
    {
      v320 = v171 & 0xFFFFFFFF8;
      if ((v171 & 0xFFFFFFFF8) != 0)
LABEL_250:
        WTF::fastFree(v320, v184, v185, v186, v187, v188, v189, v190);
    }
  }
  else
  {
    v170 = (JSC::FTL::PatchpointExceptionHandle **)WTF::fastMalloc((WTF *)0x20);
    *v170 = (JSC::FTL::PatchpointExceptionHandle *)v153;
    v170[1] = v408;
    v170[2] = v413;
    v170[3] = (JSC::FTL::PatchpointExceptionHandle *)v162;
    v172 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
    v415 = *((_QWORD *)this + 3524);
    if ((v415 & 1) != 0)
    {
      v361 = v168;
      v362 = *(_QWORD *)(v415 & 0xFFFFFFFF8);
      if ((v415 & 2) != 0
        || (v363 = *(unsigned int *)((v415 & 0xFFFFFFFF8) + 8), (_DWORD)v363 == 0x3FFFFFFF)
        || (_DWORD)v363 == -1)
      {
        v364 = 2;
      }
      else if (v363 >> 28)
      {
        v397 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v397 = v362;
        *(_DWORD *)(v397 + 8) = v363;
        v364 = 1;
        v362 = v397;
      }
      else
      {
        v364 = *(_QWORD *)(v415 & 0xFFFFFFFF8);
        v362 = v363 << 36;
      }
      v415 = v362 | v364;
      v172 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
      v168 = v361;
    }
    v173 = (__int128 *)JSC::FTL::Output::patchpoint(v172, 2);
    v417 = *v170;
    v418 = 0;
    v419 = 3;
    JSC::B3::StackmapValue::append(v173, (uint64_t)v417, (unint64_t)&v418);
    v417 = v170[1];
    v418 = 0;
    v419 = 3;
    JSC::B3::StackmapValue::append(v173, (uint64_t)v417, (unint64_t)&v418);
    v417 = v170[2];
    v418 = 0;
    v419 = 3;
    JSC::B3::StackmapValue::append(v173, (uint64_t)v417, (unint64_t)&v418);
    v417 = v170[3];
    v418 = 0;
    v419 = 3;
    JSC::B3::StackmapValue::append(v173, (uint64_t)v417, (unint64_t)&v418);
    *((_QWORD *)v173 + 8) |= 0x30000uLL;
    *((_QWORD *)v173 + 10) |= 0x30000uLL;
    v302 = *((_QWORD *)this + 1);
    v303 = (unsigned int *)v417;
    if (v417)
    {
      do
        v304 = __ldaxr(v303);
      while (__stlxr(v304 + 1, v303));
    }
    v305 = v415;
    v306 = v415;
    if ((v415 & 1) != 0)
    {
      v365 = v168;
      v366 = *(_QWORD *)(v415 & 0xFFFFFFFF8);
      if ((v415 & 2) != 0
        || ((v367 = *(unsigned int *)((v415 & 0xFFFFFFFF8) + 8), (_DWORD)v367 != 0x3FFFFFFF)
          ? (v368 = (_DWORD)v367 == -1)
          : (v368 = 1),
            v368))
      {
        v369 = 2;
      }
      else if (v367 >> 28)
      {
        v395 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v395 = v366;
        *(_DWORD *)(v395 + 8) = v367;
        v369 = 1;
        v366 = v395;
      }
      else
      {
        v369 = *(_QWORD *)(v415 & 0xFFFFFFFF8);
        v366 = v367 << 36;
      }
      v306 = v366 | v369;
      v168 = v365;
      v305 = v415;
      v172 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
    }
    v307 = WTF::fastMalloc((WTF *)0x38);
    v308 = v307;
    *(_DWORD *)(v307 + 8) = 1;
    *(_QWORD *)v307 = &off_1E3576780;
    *(_QWORD *)(v307 + 16) = v168;
    *(_QWORD *)(v307 + 24) = v409;
    if (v303)
    {
      do
        v309 = __ldaxr(v303);
      while (__stlxr(v309 + 1, v303));
    }
    *(_QWORD *)(v307 + 32) = v303;
    *(_QWORD *)(v307 + 40) = v302;
    v310 = v306;
    if ((v306 & 1) != 0)
    {
      v370 = *(_QWORD *)(v306 & 0xFFFFFFFF8);
      if ((v306 & 2) != 0
        || ((v371 = *(unsigned int *)((v306 & 0xFFFFFFFF8) + 8), (_DWORD)v371 != 0x3FFFFFFF)
          ? (v372 = (_DWORD)v371 == -1)
          : (v372 = 1),
            v372))
      {
        v373 = 2;
      }
      else if (v371 >> 28)
      {
        v396 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v396 = v370;
        *(_DWORD *)(v396 + 8) = v371;
        v373 = 1;
        v370 = v396;
      }
      else
      {
        v373 = *(_QWORD *)(v306 & 0xFFFFFFFF8);
        v370 = v371 << 36;
      }
      v310 = v370 | v373;
      v305 = v415;
      v172 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
    }
    *(_QWORD *)(v308 + 48) = v310;
    v311 = (unsigned int *)*((_QWORD *)v173 + 7);
    *((_QWORD *)v173 + 7) = v308;
    if (v311)
    {
      v312 = v311 + 2;
      do
      {
        v313 = __ldaxr(v312);
        v314 = v313 - 1;
      }
      while (__stlxr(v314, v312));
      if (!v314)
      {
        atomic_store(1u, v311 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v311 + 8))(v311);
      }
    }
    if ((v306 & 1) != 0 && (v306 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v306 & 0xFFFFFFFF8, v184, v185, v186, v187, v188, v189, v190);
    if (v303)
    {
      do
      {
        v315 = __ldaxr(v303);
        v316 = v315 - 1;
      }
      while (__stlxr(v316, v303));
      if (!v316)
      {
        atomic_store(1u, v303);
        JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v303, v184, v185, v186, v187, v188, v189, v190);
        WTF::fastFree(v374, v375, v376, v377, v378, v379, v380, v381);
      }
    }
    v317 = (unsigned int *)v417;
    v417 = 0;
    if (v317)
    {
      do
      {
        v318 = __ldaxr(v317);
        v319 = v318 - 1;
      }
      while (__stlxr(v319, v317));
      if (!v319)
      {
        atomic_store(1u, v317);
        JSC::FTL::PatchpointExceptionHandle::~PatchpointExceptionHandle((JSC::FTL::PatchpointExceptionHandle *)v317, v184, v185, v186, v187, v188, v189, v190);
        WTF::fastFree(v382, v383, v384, v385, v386, v387, v388, v389);
      }
    }
    if ((v305 & 1) != 0)
    {
      v320 = v305 & 0xFFFFFFFF8;
      if ((v305 & 0xFFFFFFFF8) != 0)
        goto LABEL_250;
    }
  }
  WTF::fastFree((unint64_t)v170, v184, v185, v186, v187, v188, v189, v190);
  v203 = *((_QWORD *)this + 3472);
  v204 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v205 = *((_QWORD *)this + 3471);
  v206 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v206 + 8) = -1;
  *(_WORD *)(v206 + 12) = 152;
  *(_DWORD *)(v206 + 16) = 0;
  *(_BYTE *)(v206 + 20) = 1;
  *(_QWORD *)v206 = &unk_1E357EDA0;
  *(_QWORD *)(v206 + 40) = 0;
  *(_QWORD *)(v206 + 48) = v173;
  *(_QWORD *)(v206 + 24) = v205;
  *(_QWORD *)(v206 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v204, (JSC::B3::Value *)v206);
  v417 = (JSC::FTL::PatchpointExceptionHandle *)v206;
  v207 = (char **)(v203 + 8);
  v208 = *(unsigned int *)(v203 + 20);
  if ((_DWORD)v208 == *(_DWORD *)(v203 + 16))
  {
    v292 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v207, v208 + 1, (unint64_t)&v417);
    v208 = *(unsigned int *)(v203 + 20);
    *(_QWORD *)(*(_QWORD *)(v203 + 8) + 8 * v208) = *(_QWORD *)v292;
    v209 = v417;
  }
  else
  {
    *(_QWORD *)&(*v207)[8 * v208] = v206;
    v209 = (JSC::FTL::PatchpointExceptionHandle *)v206;
  }
  *(_DWORD *)(v203 + 20) = v208 + 1;
  *((_QWORD *)v209 + 4) = v203;
  v210 = *((_QWORD *)this + 449);
  if (v210)
  {
    v211 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v172, v210);
    v173 = (__int128 *)JSC::FTL::Output::add(v172, (JSC::B3::Value *)v173, v211);
  }
  v212 = JSC::FTL::Output::load((uint64_t)v172, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3568), (uint64_t)v173, 2);
  v213 = *((_QWORD *)this + 3472);
  v214 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v215 = *((_QWORD *)this + 3471);
  v216 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v216 + 8) = -1;
  *(_WORD *)(v216 + 12) = 152;
  *(_DWORD *)(v216 + 16) = 0;
  *(_BYTE *)(v216 + 20) = 1;
  *(_QWORD *)v216 = &unk_1E357EDA0;
  *(_QWORD *)(v216 + 40) = 0;
  *(_QWORD *)(v216 + 48) = v212;
  *(_QWORD *)(v216 + 24) = v215;
  *(_QWORD *)(v216 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v214, (JSC::B3::Value *)v216);
  v417 = (JSC::FTL::PatchpointExceptionHandle *)v216;
  v220 = (char **)(v213 + 8);
  v221 = *(unsigned int *)(v213 + 20);
  if ((_DWORD)v221 == *(_DWORD *)(v213 + 16))
  {
    v293 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v220, v221 + 1, (unint64_t)&v417);
    v221 = *(unsigned int *)(v213 + 20);
    *(_QWORD *)(*(_QWORD *)(v213 + 8) + 8 * v221) = *(_QWORD *)v293;
    v222 = v417;
  }
  else
  {
    *(_QWORD *)&(*v220)[8 * v221] = v216;
    v222 = (JSC::FTL::PatchpointExceptionHandle *)v216;
  }
  *(_DWORD *)(v213 + 20) = v221 + 1;
  *((_QWORD *)v222 + 4) = v213;
  v223 = *((_QWORD *)this + 3472);
  v224 = *((_QWORD *)this + 3470);
  v225 = *((_QWORD *)this + 3471);
  v417 = (JSC::FTL::PatchpointExceptionHandle *)v411;
  LOBYTE(v418) = 0;
  JSC::B3::BasicBlock::appendNewControlValue(v223, v224, 154, v225, (uint64_t *)&v417, v217, v218, v219);
  *((_QWORD *)this + 3472) = v411;
  *((_QWORD *)this + 3473) = v402;
  v226 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v227 = *((_QWORD *)this + 3471);
  v228 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v228 = off_1E357F5F0;
  *(_DWORD *)(v228 + 8) = -1;
  *(_WORD *)(v228 + 12) = 153;
  *(_DWORD *)(v228 + 16) = 2;
  *(_BYTE *)(v228 + 20) = 0;
  *(_QWORD *)(v228 + 24) = v227;
  *(_QWORD *)(v228 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v226, (JSC::B3::Value *)v228);
  v417 = (JSC::FTL::PatchpointExceptionHandle *)v228;
  v229 = (char **)(v411 + 8);
  v230 = *(unsigned int *)(v411 + 20);
  if ((_DWORD)v230 == *(_DWORD *)(v411 + 16))
  {
    v294 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v229, v230 + 1, (unint64_t)&v417);
    v230 = *(unsigned int *)(v411 + 20);
    *(_QWORD *)(*(_QWORD *)(v411 + 8) + 8 * v230) = *(_QWORD *)v294;
    v231 = v417;
  }
  else
  {
    *(_QWORD *)&(*v229)[8 * v230] = v228;
    v231 = (JSC::FTL::PatchpointExceptionHandle *)v228;
  }
  *(_DWORD *)(v411 + 20) = v230 + 1;
  *((_QWORD *)v231 + 4) = v411;
  if ((*((_WORD *)v404 + 6) & 0xFFF) == 0x98)
    v232 = v404;
  else
    v232 = 0;
  *((_QWORD *)v232 + 5) = v228;
  if ((*(_WORD *)(v206 + 12) & 0xFFF) == 0x98)
    v233 = v206;
  else
    v233 = 0;
  *(_QWORD *)(v233 + 40) = v228;
  v234 = *((_QWORD *)this + 3472);
  v235 = (JSC::B3::Value *)*((_QWORD *)this + 3470);
  v236 = *((_QWORD *)this + 3471);
  v237 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v237 = off_1E357F5F0;
  *(_DWORD *)(v237 + 8) = -1;
  *(_WORD *)(v237 + 12) = 153;
  *(_DWORD *)(v237 + 16) = 2;
  *(_BYTE *)(v237 + 20) = 0;
  *(_QWORD *)(v237 + 24) = v236;
  *(_QWORD *)(v237 + 32) = 0;
  JSC::B3::Procedure::addValueImpl(v235, (JSC::B3::Value *)v237);
  v417 = (JSC::FTL::PatchpointExceptionHandle *)v237;
  v238 = (char **)(v234 + 8);
  v239 = *(unsigned int *)(v234 + 20);
  if ((_DWORD)v239 == *(_DWORD *)(v234 + 16))
  {
    v295 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v238, v239 + 1, (unint64_t)&v417);
    v239 = *(unsigned int *)(v234 + 20);
    *(_QWORD *)(*(_QWORD *)(v234 + 8) + 8 * v239) = *(_QWORD *)v295;
    v240 = v417;
  }
  else
  {
    *(_QWORD *)&(*v238)[8 * v239] = v237;
    v240 = (JSC::FTL::PatchpointExceptionHandle *)v237;
  }
  *(_DWORD *)(v234 + 20) = v239 + 1;
  *((_QWORD *)v240 + 4) = v234;
  if ((*((_WORD *)v406 + 6) & 0xFFF) == 0x98)
    v241 = v406;
  else
    v241 = 0;
  *((_QWORD *)v241 + 5) = v237;
  if ((*(_WORD *)(v216 + 12) & 0xFFF) == 0x98)
    v242 = v216;
  else
    v242 = 0;
  *(_QWORD *)(v242 + 40) = v237;
  return v228;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::mutatorFence(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  JSC::B3::Value *v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;

  v2 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v3 = v2;
  v4 = *((_QWORD *)this + 3473);
  if (v4)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v4, v2);
  }
  else
  {
    v43 = v2;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    v5[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v5;
    v42 = v5;
    v5[2] = v3;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, &v43, (uint64_t *)&v42, v6, v7, v8, v9, v10, (uint64_t)&v40);
    v11 = v42;
    v12 = (_QWORD *)*((_QWORD *)this + 3479);
    *v42 = (char *)this + 27824;
    v11[1] = v12;
    *v12 = v11;
    *((_QWORD *)this + 3479) = v11;
  }
  v13 = JSC::B3::Procedure::addBlock(*((JSC::B3::Procedure **)this + 3470), *((double *)this + 3475));
  v14 = v13;
  v15 = *((_QWORD *)this + 3473);
  if (v15)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)this + 3476, v15, v13);
  }
  else
  {
    v43 = v13;
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v16 = 0u;
    *((_OWORD *)v16 + 1) = 0u;
    v16[3] = *((_QWORD *)this + 3477);
    *((_QWORD *)this + 3477) = v16;
    v42 = v16;
    v16[2] = v14;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)this + 3476, &v43, (uint64_t *)&v42, v17, v18, v19, v20, v21, (uint64_t)&v40);
    v22 = v42;
    v23 = (_QWORD *)*((_QWORD *)this + 3479);
    *v42 = (char *)this + 27824;
    v22[1] = v23;
    *v23 = v22;
    *((_QWORD *)this + 3479) = v22;
  }
  v24 = *((_QWORD *)this + 3473);
  *((_QWORD *)this + 3473) = v3;
  v25 = (JSC::B3::Value *)*((_QWORD *)this + 3485);
  v26 = *((_QWORD *)this + 785);
  if (v26)
  {
    v27 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v26);
    v25 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v25, v27);
  }
  v28 = JSC::FTL::Output::load8ZeroExt32((_QWORD *)this + 3455, (uint64_t)this + 6256, (uint64_t)v25);
  JSC::FTL::Output::branch((_QWORD *)this + 3455, v28, v3, v14, 0.0, 1.0, v29, v30, v31, v32);
  *((_QWORD *)this + 3472) = v3;
  *((_QWORD *)this + 3473) = v14;
  JSC::FTL::Output::fence((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 16), 0);
  v33 = *((_QWORD *)this + 3472);
  v34 = *((_QWORD *)this + 3470);
  v35 = *((_QWORD *)this + 3471);
  v40 = v14;
  v41 = 0;
  result = JSC::B3::BasicBlock::appendNewControlValue(v33, v34, 154, v35, &v40, v36, v37, v38);
  *((_QWORD *)this + 3472) = v14;
  *((_QWORD *)this + 3473) = v24;
  return result;
}

uint64_t JSC::Structure::outOfLineCapacity(JSC::Structure *this)
{
  int v1;
  unsigned int v3;
  unsigned int v4;

  v1 = *((unsigned __int16 *)this + 12);
  if (v1 == 65534)
    return 0;
  if (v1 == 0xFFFF)
    v1 = *(_DWORD *)(*((_QWORD *)this + 8) + 84);
  if (v1 < 64)
    return 0;
  if ((v1 - 63) < 5)
    return 4;
  v3 = (v1 - 64) | ((v1 - 64) >> 1) | (((v1 - 64) | ((v1 - 64) >> 1)) >> 2);
  v4 = v3 | (v3 >> 4) | ((v3 | (v3 >> 4)) >> 8);
  return (v4 | HIWORD(v4)) + 1;
}

{
  unsigned int v2;
  unsigned int v3;

  if ((int)this < 64)
    return 0;
  if (((_DWORD)this - 63) < 5)
    return 4;
  v2 = ((_DWORD)this - 64) | (((_DWORD)this - 64) >> 1) | ((((_DWORD)this - 64) | (((_DWORD)this - 64) >> 1)) >> 2);
  v3 = v2 | (v2 >> 4) | ((v2 | (v2 >> 4)) >> 8);
  return (v3 | HIWORD(v3)) + 1;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocatorForSize(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  JSC::FTL::Output *v7;
  uint64_t v8;
  JSC::B3::Value *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::B3::Value *v29;
  JSC::B3::Value *v30;
  char **v31;
  uint64_t v32;
  JSC::B3::Value *v33;
  uint64_t v34;
  JSC::FTL::IndexedAbstractHeap *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  _QWORD *v56;
  uint64_t v57;

  v7 = (JSC::FTL::Output *)(a1 + 27640);
  v8 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v9 = (JSC::B3::Value *)v8;
  if (v8)
    v10 = (*(_WORD *)(v8 + 12) & 0xFFF) == 4;
  else
    v10 = 0;
  if (v10 && a3 && (*(_WORD *)(a3 + 12) & 0xFFF) == 4)
  {
    v11 = *(_QWORD *)(a3 + 40);
    if (v11 <= 0x1F60 && (v12 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8 * ((v11 + 15) >> 4) + 88)) != 0)
    {
      return JSC::FTL::Output::constInt64(v7, v12);
    }
    else
    {
      v46 = JSC::FTL::Output::newBlock(v7);
      v47 = *(_QWORD *)(a1 + 27784);
      *(_QWORD *)(a1 + 27784) = v46;
      JSC::FTL::Output::jump(v7, a4, v48, v49, v50, v51, v52, v53);
      *(_QWORD *)(a1 + 27776) = v46;
      *(_QWORD *)(a1 + 27784) = v47;
      return *(_QWORD *)(a1 + 27680);
    }
  }
  else
  {
    v14 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v15 = v14;
    v16 = *(_QWORD *)(a1 + 27784);
    if (v16)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v16, v14);
    }
    else
    {
      v57 = v14;
      v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v37 = 0u;
      *((_OWORD *)v37 + 1) = 0u;
      v37[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v37;
      v56 = v37;
      v37[2] = v15;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), &v57, (uint64_t *)&v56, v38, v39, v40, v41, v42, (uint64_t)v55);
      v43 = v56;
      v44 = *(_QWORD **)(a1 + 27832);
      *v56 = a1 + 27824;
      v43[1] = v44;
      *v44 = v43;
      *(_QWORD *)(a1 + 27832) = v43;
    }
    v17 = *(_QWORD *)(a1 + 27784);
    *(_QWORD *)(a1 + 27784) = v15;
    v18 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v7, 15);
    v19 = (JSC::B3::Value *)JSC::FTL::Output::add(v7, (JSC::B3::Value *)a3, v18);
    v20 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v7, 4);
    v21 = JSC::FTL::Output::lShr(v7, v19, v20);
    v22 = JSC::FTL::Output::constInt64(v7, 502);
    v23 = (*(uint64_t (**)(JSC::B3::Value *, uint64_t))(*(_QWORD *)v21 + 352))(v21, v22);
    if (v23 == 2)
    {
      v28 = *(_QWORD *)(a1 + 27776);
      v29 = *(JSC::B3::Value **)(a1 + 27760);
      v30 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(57, *(_QWORD *)(a1 + 27768), (uint64_t)v21, v22);
      JSC::B3::Procedure::addValueImpl(v29, v30);
      v55[0] = v30;
      v31 = (char **)(v28 + 8);
      v32 = *(unsigned int *)(v28 + 20);
      if ((_DWORD)v32 == *(_DWORD *)(v28 + 16))
      {
        v45 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31, v32 + 1, (unint64_t)v55);
        v32 = *(unsigned int *)(v28 + 20);
        *(_QWORD *)(*(_QWORD *)(v28 + 8) + 8 * v32) = *(_QWORD *)v45;
        v33 = (JSC::B3::Value *)v55[0];
      }
      else
      {
        *(_QWORD *)&(*v31)[8 * v32] = v30;
        v33 = v30;
      }
      *(_DWORD *)(v28 + 20) = v32 + 1;
      *((_QWORD *)v33 + 4) = v28;
    }
    else
    {
      v54 = 27648;
      if (v23 == 1)
        v54 = 27640;
      v30 = *(JSC::B3::Value **)(a1 + v54);
    }
    JSC::FTL::Output::branch(v7, (uint64_t)v30, (uint64_t)a4, v15, 0.0, 1.0, v24, v25, v26, v27);
    *(_QWORD *)(a1 + 27776) = v15;
    *(_QWORD *)(a1 + 27784) = v17;
    v35 = JSC::FTL::IndexedAbstractHeap::baseIndex((JSC::FTL::IndexedAbstractHeap *)(a1 + 7656), v7, v9, v21, 0, 0, 0, v34);
    return JSC::FTL::Output::load((uint64_t)v7, v35, v36, 2);
  }
}

_QWORD *JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateHeapCell(uint64_t a1, uint64_t a2, JSC::B3::BasicBlock *a3)
{
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  uint64_t *v24;
  unint64_t v25;
  _OWORD *v26;
  uint64_t *v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  __int128 *v54;
  __int128 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  JSC::B3::Value *v67;
  JSC::B3::Value *v68;
  char **v69;
  uint64_t v70;
  JSC::B3::Value *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  __int128 v91;
  uint64_t v92;
  char v93;
  _QWORD *v94;
  uint64_t v95;

  if (a2)
    v6 = (*(_WORD *)(a2 + 12) & 0xFFF) == 4;
  else
    v6 = 0;
  v7 = v6;
  if (v6)
  {
    v8 = *(_QWORD *)(a2 + 40);
    if (!v8)
    {
      v82 = JSC::FTL::Output::newBlock((JSC::FTL::Output *)(a1 + 27640));
      v83 = *(_QWORD *)(a1 + 27784);
      *(_QWORD *)(a1 + 27784) = v82;
      JSC::FTL::Output::jump((JSC::FTL::Output *)(a1 + 27640), a3, v84, v85, v86, v87, v88, v89);
      *(_QWORD *)(a1 + 27776) = v82;
      *(_QWORD *)(a1 + 27784) = v83;
      return *(_QWORD **)(a1 + 27680);
    }
    v9 = 0;
  }
  else
  {
    v56 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
    v57 = v56;
    v58 = *(_QWORD *)(a1 + 27784);
    if (v58)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v58, v56);
    }
    else
    {
      v95 = v56;
      v72 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v72 = 0u;
      *((_OWORD *)v72 + 1) = 0u;
      v72[3] = *(_QWORD *)(a1 + 27816);
      *(_QWORD *)(a1 + 27816) = v72;
      v94 = v72;
      v72[2] = v57;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), &v95, (uint64_t *)&v94, v73, v74, v75, v76, v77, (uint64_t)&v91);
      v78 = v94;
      v79 = *(_QWORD **)(a1 + 27832);
      *v94 = a1 + 27824;
      v78[1] = v79;
      *v79 = v78;
      *(_QWORD *)(a1 + 27832) = v78;
    }
    v59 = *(_QWORD *)(a1 + 27784);
    *(_QWORD *)(a1 + 27784) = v57;
    v60 = *(_QWORD *)(a1 + 27680);
    v61 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 312))(a2, v60);
    if (v61 == 2)
    {
      v66 = *(_QWORD *)(a1 + 27776);
      v67 = *(JSC::B3::Value **)(a1 + 27760);
      v68 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(a1 + 27768), a2, v60);
      JSC::B3::Procedure::addValueImpl(v67, v68);
      *(_QWORD *)&v91 = v68;
      v69 = (char **)(v66 + 8);
      v70 = *(unsigned int *)(v66 + 20);
      if ((_DWORD)v70 == *(_DWORD *)(v66 + 16))
      {
        v80 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v69, v70 + 1, (unint64_t)&v91);
        v70 = *(unsigned int *)(v66 + 20);
        *(_QWORD *)(*(_QWORD *)(v66 + 8) + 8 * v70) = *(_QWORD *)v80;
        v71 = (JSC::B3::Value *)v91;
      }
      else
      {
        *(_QWORD *)&(*v69)[8 * v70] = v68;
        v71 = v68;
      }
      *(_DWORD *)(v66 + 20) = v70 + 1;
      *((_QWORD *)v71 + 4) = v66;
    }
    else
    {
      v81 = 27648;
      if (v61 == 1)
        v81 = 27640;
      v68 = *(JSC::B3::Value **)(a1 + v81);
    }
    JSC::FTL::Output::branch((_QWORD *)(a1 + 27640), (uint64_t)v68, v57, (uint64_t)a3, 1.0, 0.0, v62, v63, v64, v65);
    v8 = 0;
    *(_QWORD *)(a1 + 27776) = v57;
    *(_QWORD *)(a1 + 27784) = v59;
    v9 = 1;
  }
  v10 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(a1 + 27760), *(double *)(a1 + 27800));
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 27784);
  if (v12)
  {
    WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(a1 + 27808), v12, v10);
  }
  else
  {
    v95 = v10;
    v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v46 = 0u;
    *((_OWORD *)v46 + 1) = 0u;
    v46[3] = *(_QWORD *)(a1 + 27816);
    *(_QWORD *)(a1 + 27816) = v46;
    v94 = v46;
    v46[2] = v11;
    WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(a1 + 27808), &v95, (uint64_t *)&v94, v47, v48, v49, v50, v51, (uint64_t)&v91);
    v52 = v94;
    v53 = *(_QWORD **)(a1 + 27832);
    *v94 = a1 + 27824;
    v52[1] = v53;
    *v53 = v52;
    *(_QWORD *)(a1 + 27832) = v52;
  }
  v13 = *(_QWORD *)(a1 + 27784);
  *(_QWORD *)(a1 + 27784) = v11;
  v14 = JSC::FTL::Output::patchpoint((_QWORD *)(a1 + 27640), 2);
  v22 = v14;
  v14[8] |= 0x30000uLL;
  v14[10] |= 0x30000uLL;
  *((_BYTE *)v14 + 112) = 1;
  if (v7)
  {
    v23 = *((_BYTE *)v14 + 168) + 1;
  }
  else
  {
    v91 = (unint64_t)a2;
    LOBYTE(v92) = 4;
    JSC::B3::StackmapValue::append((__int128 *)v14, a2, (unint64_t)&v91 + 8);
    v23 = *((_BYTE *)v22 + 168);
  }
  *((_BYTE *)v22 + 168) = v23 + 1;
  v24 = &v92;
  *(_QWORD *)&v91 = &v92;
  v92 = 0;
  v93 = 5;
  *((_QWORD *)&v91 + 1) = 0x100000001;
  v25 = v22[17];
  v26 = v22 + 19;
  if ((_QWORD *)v25 == v22 + 19)
    goto LABEL_16;
  if (!v25)
  {
    v22[17] = v26;
LABEL_16:
    v27 = (uint64_t *)&v94;
    v28 = 1;
    goto LABEL_17;
  }
  v22[17] = 0;
  *((_DWORD *)v22 + 36) = 0;
  WTF::fastFree(v25, v15, v16, v17, v18, v19, v20, v21);
  v90 = (uint64_t *)v91;
  v22[17] = v26;
  v28 = HIDWORD(v91);
  if (v90 != &v92)
  {
    v22[17] = v90;
    goto LABEL_18;
  }
  if (!HIDWORD(v91))
    goto LABEL_18;
  v27 = &v92 + 2 * HIDWORD(v91);
  do
  {
LABEL_17:
    v29 = *(_OWORD *)v24;
    v24 += 2;
    *v26++ = v29;
  }
  while (v24 != v27);
LABEL_18:
  *((_DWORD *)v22 + 36) = DWORD2(v91);
  *((_DWORD *)v22 + 37) = v28;
  v30 = *(_QWORD *)(a1 + 27776);
  v91 = (unint64_t)v11;
  v31 = (uint64_t *)(v30 + 56);
  v32 = *(unsigned int *)(v30 + 68);
  if ((_DWORD)v32 == *(_DWORD *)(v30 + 64))
  {
    v54 = (__int128 *)WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v31, (void *)(v32 + 1), (unint64_t)&v91, v17, v18, v19, v20, v21);
    v32 = *(unsigned int *)(v30 + 68);
    v33 = *(_QWORD *)(v30 + 56);
    v34 = *v54;
  }
  else
  {
    v33 = *v31;
    v34 = v91;
  }
  *(_OWORD *)(v33 + 16 * v32) = v34;
  ++*(_DWORD *)(v30 + 68);
  v35 = *(_QWORD *)(a1 + 27776);
  *(_QWORD *)&v91 = a3;
  *((_QWORD *)&v91 + 1) = 1;
  v36 = (uint64_t *)(v35 + 56);
  v37 = *(unsigned int *)(v35 + 68);
  if ((_DWORD)v37 == *(_DWORD *)(v35 + 64))
  {
    v55 = (__int128 *)WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v36, (void *)(v37 + 1), (unint64_t)&v91, v17, v18, v19, v20, v21);
    v37 = *(unsigned int *)(v35 + 68);
    v38 = *(_QWORD *)(v35 + 56);
    v39 = *v55;
  }
  else
  {
    v38 = *v36;
    v39 = v91;
  }
  *(_OWORD *)(v38 + 16 * v37) = v39;
  ++*(_DWORD *)(v35 + 68);
  v40 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v40 + 8) = 1;
  *(_QWORD *)v40 = off_1E3576690;
  *(_QWORD *)(v40 + 16) = v9;
  *(_QWORD *)(v40 + 24) = v8;
  v41 = (unsigned int *)v22[7];
  v22[7] = v40;
  if (v41)
  {
    v42 = v41 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v41 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
    }
  }
  *(_QWORD *)(a1 + 27776) = v11;
  *(_QWORD *)(a1 + 27784) = v13;
  return v22;
}

JSC::DFG::Graph **JSC::FTL::`anonymous namespace'::LowerDFGToB3::initializeArrayElements(JSC::DFG::Graph **this, JSC::B3::Value *a2, JSC::B3::Value *a3, JSC::B3::Value *a4, JSC::B3::Value *a5)
{
  JSC::DFG::Graph **v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  JSC::DFG::Graph **v13;
  JSC::B3::Value *v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  JSC::B3::Value *v17;
  JSC::B3::Value *v18;
  const JSC::FTL::AbstractHeap *v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  JSC::B3::Value *v22;
  JSC::B3::Value *v23;
  uint64_t v24;
  uint64_t v25;

  if (a3 != a4)
  {
    v9 = this;
    if (!a2 || (*((_WORD *)a2 + 6) & 0xFFF) != 3)
    {
      v20 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(this + 3455), 14);
      v21 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(v9 + 3455), a2, v20);
      v22 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(v9 + 3455), 6);
      v23 = JSC::FTL::Output::equal((JSC::FTL::Output *)(v9 + 3455), v21, v22);
      v24 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(v9 + 3455), 0x7FF8000000000000);
      v25 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(v9 + 3455), 0);
      v14 = (JSC::B3::Value *)JSC::FTL::Output::select((JSC::FTL::Output *)(v9 + 3455), (uint64_t)v23, v24, v25, 0);
      v19 = (const JSC::FTL::AbstractHeap *)(v9 + 2);
      v15 = (uint64_t)v9;
      v16 = a5;
      v17 = a3;
      v18 = a4;
    }
    v10 = *((unsigned __int8 *)a2 + 40);
    if ((v10 & 0xE) != 2)
    {
      if ((v10 - 8) >= 2)
      {
        switch(*((_BYTE *)a2 + 40))
        {
          case 0:
          case 1:
          case 3:
            JSC::DFG::Graph::logAssertionFailure(*this, this[3528], (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp", (const char *)0x428D, "void JSC::FTL::(anonymous namespace)::LowerDFGToB3::initializeArrayElements(LValue, LValue, LValue, LValue)", "heap");
            __break(0xC471u);
            JUMPOUT(0x197DA9884);
          case 4:
          case 5:
          case 0x15:
            v11 = 0;
            v12 = 2073;
            goto LABEL_7;
          case 6:
          case 7:
          case 0x17:
            v13 = this + 2197;
            v11 = 0x7FF8000000000000;
            goto LABEL_8;
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
            v11 = 0;
            v12 = 833;
            goto LABEL_7;
          case 0x19:
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x197DA993CLL);
        }
      }
      v11 = 0;
      v12 = 2321;
LABEL_7:
      v13 = &this[v12];
LABEL_8:
      v14 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(this + 3455), v11);
      v15 = (uint64_t)v9;
      v16 = a5;
      v17 = a3;
      v18 = a4;
      v19 = (const JSC::FTL::AbstractHeap *)v13;
    }
  }
  return this;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateHeapCell(JSC::B3::Value *,JSC::B3::BasicBlock *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  char v11;
  char *v12;
  char v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  _BYTE *v25;
  WTF *v26;
  WTF *v27;
  unsigned int v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  _BYTE *v36;
  WTF *v37;
  WTF *v38;
  unsigned int v39;
  WTF *v40;
  WTF *v41;
  WTF *v42;
  unsigned int *v43;
  unsigned int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  WTF *v56;
  WTF *v57;
  uint64_t v58;
  unsigned int **v59;
  WTF *v60;
  WTF *v61;
  unsigned int *v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t *v65;
  WTF *v66;
  WTF *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  WTF *v71;
  WTF *v73;
  WTF *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  WTF *v78;
  WTF *v80;
  WTF *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  WTF *v85;
  WTF *v86;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  const void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF *v99;
  unsigned int v100;
  _BYTE v101[24];
  WTF *v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  unint64_t v106;
  WTF *v107;
  int v108;
  unsigned int v109;
  WTF *v110;
  uint64_t v111;
  _BYTE v112[24];
  WTF *v113;
  unsigned int v114;
  unsigned int v115;
  _BYTE v116[24];
  WTF *v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  unint64_t v121;

  v10 = (_DWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v110 = (WTF *)v112;
  v111 = 2;
  if (*v10)
  {
    if (*(_DWORD *)(a3 + 20) <= 1u)
    {
      __break(0xC471u);
      JUMPOUT(0x197DAA068);
    }
    if (*(_DWORD *)(a3 + 36))
    {
      v14 = *(_BYTE **)(a3 + 8);
      v13 = v14[16] & 0x7F;
      v12 = *(char **)(a3 + 24);
      goto LABEL_7;
    }
LABEL_124:
    __break(0xC471u);
    JUMPOUT(0x197DAA020);
  }
  if (*(_DWORD *)(a3 + 36) <= 1u)
    goto LABEL_124;
  if (!*(_DWORD *)(a3 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x197DAA028);
  }
  v12 = *(char **)(a3 + 24);
  v13 = v12[1];
  v14 = *(_BYTE **)(a3 + 8);
LABEL_7:
  v15 = 0xFF000F4100000000;
  JSC::AssemblyHelpers::emitAllocateWithNonNullAllocator(a2, *v14 & 0x7F, (uint64_t)v10, v13, *v12, (uint64_t)&v110, 1, a8);
  if (JSC::B3::StackmapGenerationParams::fallsThroughToSuccessor((JSC::B3::StackmapGenerationParams *)a3, 0))
  {
    v23 = -1;
  }
  else
  {
    JSC::ARM64Assembler::label((_DWORD *)(a2 + 32), v16, v17, v18, v19, v20, v21, v22, (int *)&v113);
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a2 + 56), 335544320, v93, v94, v95, v96, v97, v98);
    v23 = (int)v113;
    if (*(_BYTE *)(a2 + 328))
      v15 = 0xFF000F4500000000;
  }
  JSC::B3::StackmapGenerationParams::successorLabels((JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v107);
  v24 = HIDWORD(v111);
  v99 = (WTF *)v101;
  v100 = HIDWORD(v111);
  if (HIDWORD(v111) < 3)
  {
    v25 = v101;
  }
  else
  {
    if (HIDWORD(v111) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197DAA048);
    }
    v25 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v111)));
    v99 = (WTF *)v25;
    v24 = HIDWORD(v111);
  }
  if (v24)
  {
    v26 = v110;
    v27 = (WTF *)((char *)v110 + 12 * v24);
    do
    {
      *(_DWORD *)v25 = *(_DWORD *)v26;
      *(_QWORD *)(v25 + 4) = *(_QWORD *)((char *)v26 + 4);
      v26 = (WTF *)((char *)v26 + 12);
      v25 += 12;
    }
    while (v26 != v27);
  }
  v28 = v109;
  v102 = 0;
  v103 = 0;
  v104 = v109;
  if (v109)
  {
    if (v109 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x197DAA030);
    }
    v29 = (WTF *)WTF::fastMalloc((WTF *)(8 * v109));
    v103 = v28;
    v102 = v29;
    if (v109)
    {
      v30 = v107;
      v31 = (WTF *)((char *)v107 + 8 * v109);
      do
      {
        v32 = *(unsigned int **)v30;
        if (*(_QWORD *)v30)
        {
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 + 1, v32));
        }
        *(_QWORD *)v29 = v32;
        v29 = (WTF *)((char *)v29 + 8);
        v30 = (WTF *)((char *)v30 + 8);
      }
      while (v30 != v31);
    }
  }
  v105 = v23;
  v106 = v15;
  v34 = *(_QWORD *)(a3 + 56);
  v35 = v100;
  v113 = (WTF *)v116;
  v114 = 2;
  v115 = v100;
  if (v100 < 3)
  {
    v36 = v116;
  }
  else
  {
    if (v100 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197DAA050);
    }
    v36 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v100));
    v114 = 12 * v100 / 0xC;
    v113 = (WTF *)v36;
    v35 = v100;
  }
  if (v35)
  {
    v37 = v99;
    v38 = (WTF *)((char *)v99 + 12 * v35);
    do
    {
      *(_DWORD *)v36 = *(_DWORD *)v37;
      *(_QWORD *)(v36 + 4) = *(_QWORD *)((char *)v37 + 4);
      v37 = (WTF *)((char *)v37 + 12);
      v36 += 12;
    }
    while (v37 != v38);
  }
  v39 = v104;
  v117 = 0;
  v118 = 0;
  v119 = v104;
  if (v104)
  {
    if (v104 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x197DAA038);
    }
    v40 = (WTF *)WTF::fastMalloc((WTF *)(8 * v104));
    v118 = v39;
    v117 = v40;
    if (v104)
    {
      v41 = v102;
      v42 = (WTF *)((char *)v102 + 8 * v104);
      do
      {
        v43 = *(unsigned int **)v41;
        if (*(_QWORD *)v41)
        {
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 + 1, v43));
        }
        *(_QWORD *)v40 = v43;
        v40 = (WTF *)((char *)v40 + 8);
        v41 = (WTF *)((char *)v41 + 8);
      }
      while (v41 != v42);
    }
  }
  v120 = v105;
  v121 = v106;
  v52 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v52 + 8) = 1;
  *(_QWORD *)v52 = &off_1E35766B8;
  v53 = v52 + 32;
  v54 = v115;
  *(_QWORD *)(v52 + 16) = v52 + 32;
  *(_DWORD *)(v52 + 24) = 2;
  *(_DWORD *)(v52 + 28) = v54;
  if (v54 >= 3)
  {
    if (v54 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197DAA058);
    }
    v55 = 12 * v54;
    v53 = WTF::fastMalloc((WTF *)(12 * v54));
    *(_DWORD *)(v52 + 24) = (v55 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)(v52 + 16) = v53;
    LODWORD(v54) = v115;
  }
  if ((_DWORD)v54)
  {
    v56 = v113;
    v57 = (WTF *)((char *)v113 + 12 * v54);
    do
    {
      *(_DWORD *)v53 = *(_DWORD *)v56;
      *(_QWORD *)(v53 + 4) = *(_QWORD *)((char *)v56 + 4);
      v56 = (WTF *)((char *)v56 + 12);
      v53 += 12;
    }
    while (v56 != v57);
  }
  v58 = v119;
  *(_QWORD *)(v52 + 56) = 0;
  *(_QWORD *)(v52 + 64) = 0;
  *(_DWORD *)(v52 + 68) = v58;
  if ((_DWORD)v58)
  {
    if (v58 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x197DAA040);
    }
    v59 = (unsigned int **)WTF::fastMalloc((WTF *)(8 * v58));
    *(_DWORD *)(v52 + 64) = v58;
    *(_QWORD *)(v52 + 56) = v59;
    if (v119)
    {
      v60 = v117;
      v61 = (WTF *)((char *)v117 + 8 * v119);
      do
      {
        v62 = *(unsigned int **)v60;
        if (*(_QWORD *)v60)
        {
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 + 1, v62));
        }
        *v59++ = v62;
        v60 = (WTF *)((char *)v60 + 8);
      }
      while (v60 != v61);
    }
  }
  *(_DWORD *)(v52 + 72) = v120;
  *(_QWORD *)(v52 + 76) = v121;
  v64 = *(unsigned int *)(v34 + 12);
  if ((_DWORD)v64 == *(_DWORD *)(v34 + 8))
  {
    v88 = v64 + (v64 >> 2);
    if (v88 >= 0x10)
      v89 = v88 + 1;
    else
      v89 = 16;
    if (v89 <= v64 + 1)
      v90 = v64 + 1;
    else
      v90 = v89;
    if (v90 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x197DAA060);
    }
    v91 = *(const void **)v34;
    v92 = (void *)WTF::fastMalloc((WTF *)(8 * v90));
    *(_DWORD *)(v34 + 8) = v90;
    *(_QWORD *)v34 = v92;
    memcpy(v92, v91, 8 * v64);
    if (v91)
    {
      if (*(const void **)v34 == v91)
      {
        *(_QWORD *)v34 = 0;
        *(_DWORD *)(v34 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v91, v45, v46, v47, v48, v49, v50, v51);
    }
    v64 = *(unsigned int *)(v34 + 12);
    v65 = (uint64_t *)(*(_QWORD *)v34 + 8 * v64);
  }
  else
  {
    v65 = (uint64_t *)(*(_QWORD *)v34 + 8 * v64);
  }
  *v65 = v52;
  *(_DWORD *)(v34 + 12) = v64 + 1;
  v66 = v117;
  if (v119)
  {
    v67 = (WTF *)((char *)v117 + 8 * v119);
    do
    {
      v68 = *(unsigned int **)v66;
      *(_QWORD *)v66 = 0;
      if (v68)
      {
        do
        {
          v69 = __ldaxr(v68);
          v70 = v69 - 1;
        }
        while (__stlxr(v70, v68));
        if (!v70)
        {
          atomic_store(1u, v68);
          WTF::fastFree((unint64_t)v68, v45, v46, v47, v48, v49, v50, v51);
        }
      }
      v66 = (WTF *)((char *)v66 + 8);
    }
    while (v66 != v67);
    v66 = v117;
  }
  if (v66)
  {
    v117 = 0;
    v118 = 0;
    WTF::fastFree((unint64_t)v66, v45, v46, v47, v48, v49, v50, v51);
  }
  v71 = v113;
  if (v116 != (_BYTE *)v113 && v113 != 0)
  {
    v113 = 0;
    v114 = 0;
    WTF::fastFree((unint64_t)v71, v45, v46, v47, v48, v49, v50, v51);
  }
  if (v104)
  {
    v73 = v102;
    v74 = (WTF *)((char *)v102 + 8 * v104);
    do
    {
      v75 = *(unsigned int **)v73;
      *(_QWORD *)v73 = 0;
      if (v75)
      {
        do
        {
          v76 = __ldaxr(v75);
          v77 = v76 - 1;
        }
        while (__stlxr(v77, v75));
        if (!v77)
        {
          atomic_store(1u, v75);
          WTF::fastFree((unint64_t)v75, v45, v46, v47, v48, v49, v50, v51);
        }
      }
      v73 = (WTF *)((char *)v73 + 8);
    }
    while (v73 != v74);
  }
  v78 = v102;
  if (v102)
  {
    v102 = 0;
    v103 = 0;
    WTF::fastFree((unint64_t)v78, v45, v46, v47, v48, v49, v50, v51);
  }
  if (v101 != (_BYTE *)v99 && v99 != 0)
    WTF::fastFree((unint64_t)v99, v45, v46, v47, v48, v49, v50, v51);
  if (v109)
  {
    v80 = v107;
    v81 = (WTF *)((char *)v107 + 8 * v109);
    do
    {
      v82 = *(unsigned int **)v80;
      *(_QWORD *)v80 = 0;
      if (v82)
      {
        do
        {
          v83 = __ldaxr(v82);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, v82));
        if (!v84)
        {
          atomic_store(1u, v82);
          WTF::fastFree((unint64_t)v82, v45, v46, v47, v48, v49, v50, v51);
        }
      }
      v80 = (WTF *)((char *)v80 + 8);
    }
    while (v80 != v81);
  }
  v85 = v107;
  if (v107)
  {
    v107 = 0;
    v108 = 0;
    WTF::fastFree((unint64_t)v85, v45, v46, v47, v48, v49, v50, v51);
  }
  v86 = v110;
  if (v112 != (_BYTE *)v110 && v110 != 0)
  {
    v110 = 0;
    LODWORD(v111) = 0;
    WTF::fastFree((unint64_t)v86, v45, v46, v47, v48, v49, v50, v51);
  }
  *(_BYTE *)(a2 + 212) = v11;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateHeapCell(JSC::B3::Value *,JSC::B3::BasicBlock *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateHeapCell(JSC::B3::Value *,JSC::B3::BasicBlock *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int **v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;

  v9 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v9)
  {
    v10 = *(unsigned int ***)(a1 + 56);
    v11 = &v10[v9];
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  v15 = *(_QWORD *)(a1 + 56);
  if (v15)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(_QWORD *)(a1 + 16);
  if (a1 + 32 != v16 && v16 != 0)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateHeapCell(JSC::B3::Value *,JSC::B3::BasicBlock *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateHeapCell(JSC::B3::Value *,JSC::B3::BasicBlock *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int **v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  WTF *v16;

  v9 = *((unsigned int *)this + 17);
  if ((_DWORD)v9)
  {
    v10 = (unsigned int **)*((_QWORD *)this + 7);
    v11 = &v10[v9];
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  v15 = *((_QWORD *)this + 7);
  if (v15)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = (WTF *)*((_QWORD *)this + 2);
  if ((WTF *)((char *)this + 32) != v16 && v16 != 0)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unsigned int *WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &),void JSC::B3::StackmapGenerationParams::addLatePath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateHeapCell(JSC::B3::Value *,JSC::B3::BasicBlock *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateHeapCell(JSC::B3::Value *,JSC::B3::BasicBlock *)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1} const&)::{lambda(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *result;
  unsigned int v15;
  unsigned int v16;

  if (*(_DWORD *)(a1 + 68) <= 1u)
  {
    __break(0xC471u);
    goto LABEL_10;
  }
  v10 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v10)
  {
    v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 4);
    v12 = *(unsigned int **)(a1 + 16);
    v13 = 12 * v10;
    do
    {
      v16 = v11;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v12, &v16, a2, a4, a5, a6, a7, a8);
      v12 += 3;
      v13 -= 12;
    }
    while (v13);
  }
  result = (unsigned int *)(a1 + 72);
  if (*(_DWORD *)(a1 + 72) != -1)
  {
    if (*(_DWORD *)(a1 + 68))
    {
      v15 = *(_DWORD *)(**(_QWORD **)(a1 + 56) + 4);
      return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(result, &v15, a2, a4, a5, a6, a7, a8);
    }
    __break(0xC471u);
LABEL_10:
    JUMPOUT(0x197DAA28CLL);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::splatWords(uint64_t this, JSC::B3::Value *a2, JSC::B3::Value *a3, JSC::B3::Value *a4, JSC::B3::Value *a5, const JSC::FTL::AbstractHeap *a6)
{
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  BOOL v16;
  _BOOL4 v17;
  JSC::B3::Value *v18;
  unint64_t v19;
  JSC::B3::Value *v20;
  unint64_t v21;
  unint64_t v22;
  JSC::FTL::Output *v23;
  uint64_t v24;
  JSC::B3::Value *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::B3::Value *v33;
  uint64_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  uint64_t v38;
  JSC::B3::Value *v39;
  JSC::B3::Value *v40;
  JSC::B3::Value *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char **v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  JSC::B3::Value *v55;
  JSC::B3::Value *v56;
  char **v57;
  uint64_t v58;
  JSC::B3::Value *v59;
  JSC::B3::Value *v60;
  uint64_t v61;
  uint64_t v62;
  char **v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  JSC::B3::Value *v68;
  uint64_t v69;
  uint64_t v70;
  char **v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  JSC::B3::Value *v76;
  JSC::B3::Value *v77;
  char **v78;
  uint64_t v79;
  JSC::B3::Value *v80;
  uint64_t v81;
  JSC::B3::Value *v82;
  uint64_t v83;
  uint64_t v84;
  char **v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  JSC::B3::Value *v91;
  uint64_t v92;
  uint64_t v93;
  char **v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  JSC::B3::Value *v104;
  JSC::B3::Value *v105;
  char **v106;
  uint64_t v107;
  JSC::B3::Value *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  JSC::B3::Value *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  JSC::FTL::Output *v141;
  _QWORD v142[3];
  _QWORD *v143;
  uint64_t v144;

  v11 = this;
  v12 = *((_WORD *)a3 + 6) & 0xFFF;
  if (a3)
    v13 = v12 == 3;
  else
    v13 = 0;
  v14 = v13;
  if (!a3 || (v12 - 3) > 1)
    goto LABEL_34;
  v15 = *((_WORD *)a4 + 6) & 0xFFF;
  v16 = a4 && v15 == 3;
  v17 = v16;
  if (!a4 || (v15 - 3) > 1)
    goto LABEL_34;
  if (v14)
  {
    v19 = *((int *)a3 + 10);
  }
  else
  {
    v18 = v12 == 4 ? a3 : 0;
    v19 = *((_QWORD *)v18 + 5);
  }
  if (v17)
  {
    v21 = *((int *)a4 + 10);
  }
  else
  {
    v20 = v15 == 4 ? a4 : 0;
    v21 = *((_QWORD *)v20 + 5);
  }
  v22 = v21 - v19;
  if (v21 - v19 <= 0xA)
  {
    if (v21 > v19)
    {
      v23 = (JSC::FTL::Output *)(this + 27640);
      v24 = 8 * v19;
      do
      {
        v25 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v23, v24);
        v26 = JSC::FTL::Output::add(v23, a2, v25);
        this = JSC::FTL::Output::store((uint64_t)v23, (uint64_t)a5, a6, v26);
        v24 += 8;
        --v22;
      }
      while (v22);
    }
  }
  else
  {
LABEL_34:
    v27 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(this + 27760), *(double *)(this + 27800));
    v28 = v27;
    v29 = *(_QWORD *)(v11 + 27784);
    if (v29)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(v11 + 27808), v29, v27);
    }
    else
    {
      v144 = v27;
      v109 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v109 = 0u;
      *((_OWORD *)v109 + 1) = 0u;
      v109[3] = *(_QWORD *)(v11 + 27816);
      *(_QWORD *)(v11 + 27816) = v109;
      v143 = v109;
      v109[2] = v28;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(v11 + 27808), &v144, (uint64_t *)&v143, v110, v111, v112, v113, v114, (uint64_t)v142);
      v115 = v143;
      v116 = *(_QWORD **)(v11 + 27832);
      *v143 = v11 + 27824;
      v115[1] = v116;
      *v116 = v115;
      *(_QWORD *)(v11 + 27832) = v115;
    }
    v141 = (JSC::FTL::Output *)(v11 + 27640);
    v30 = JSC::B3::Procedure::addBlock(*(JSC::B3::Procedure **)(v11 + 27760), *(double *)(v11 + 27800));
    v31 = *(_QWORD *)(v11 + 27784);
    v139 = v30;
    if (v31)
    {
      WTF::OrderMaker<JSC::B3::BasicBlock *>::insertBefore((uint64_t *)(v11 + 27808), v31, v30);
    }
    else
    {
      v144 = v30;
      v117 = v30;
      v118 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v118 = 0u;
      *((_OWORD *)v118 + 1) = 0u;
      v118[3] = *(_QWORD *)(v11 + 27816);
      *(_QWORD *)(v11 + 27816) = v118;
      v143 = v118;
      v118[2] = v117;
      WTF::HashMap<JSC::B3::BasicBlock *,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *>,WTF::HashTableTraits>::inlineSet<JSC::B3::BasicBlock * const&,WTF::OrderMaker<JSC::B3::BasicBlock *>::Node *&>((uint64_t *)(v11 + 27808), &v144, (uint64_t *)&v143, v119, v120, v121, v122, v123, (uint64_t)v142);
      v124 = v143;
      v125 = *(_QWORD **)(v11 + 27832);
      *v143 = v11 + 27824;
      v124[1] = v125;
      *v125 = v124;
      *(_QWORD *)(v11 + 27832) = v124;
    }
    v138 = *(_QWORD *)(v11 + 27784);
    v140 = v28;
    *(_QWORD *)(v11 + 27784) = v28;
    v32 = *(_QWORD *)(v11 + 27776);
    v33 = *(JSC::B3::Value **)(v11 + 27760);
    v34 = *(_QWORD *)(v11 + 27768);
    v35 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v35 + 8) = -1;
    *(_WORD *)(v35 + 12) = 152;
    *(_BYTE *)(v35 + 20) = 1;
    *(_QWORD *)v35 = &unk_1E357EDA0;
    *(_DWORD *)(v35 + 16) = 0;
    *(_QWORD *)(v35 + 40) = 0;
    *(_QWORD *)(v35 + 48) = a4;
    *(_QWORD *)(v35 + 24) = v34;
    *(_QWORD *)(v35 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v33, (JSC::B3::Value *)v35);
    v142[0] = v35;
    v36 = (char **)(v32 + 8);
    v37 = *(unsigned int *)(v32 + 20);
    if ((_DWORD)v37 == *(_DWORD *)(v32 + 16))
    {
      v126 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v36, v37 + 1, (unint64_t)v142);
      v37 = *(unsigned int *)(v32 + 20);
      *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8 * v37) = *(_QWORD *)v126;
      v38 = v142[0];
    }
    else
    {
      *(_QWORD *)&(*v36)[8 * v37] = v35;
      v38 = v35;
    }
    *(_DWORD *)(v32 + 20) = v37 + 1;
    *(_QWORD *)(v38 + 32) = v32;
    v39 = (JSC::B3::Value *)JSC::FTL::Output::signExt32To64(v141, a3);
    v40 = (JSC::B3::Value *)JSC::FTL::Output::constInt32(v141, 3);
    v41 = JSC::FTL::Output::shl(v141, v39, v40);
    v42 = JSC::FTL::Output::add(v141, a2, v41);
    v43 = *(_QWORD *)(v11 + 27776);
    v137 = *(JSC::B3::Value **)(v11 + 27760);
    v44 = *(_QWORD *)(v11 + 27768);
    v45 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v45 + 8) = -1;
    *(_WORD *)(v45 + 12) = 152;
    *(_DWORD *)(v45 + 16) = 0;
    *(_BYTE *)(v45 + 20) = 1;
    *(_QWORD *)v45 = &unk_1E357EDA0;
    *(_QWORD *)(v45 + 40) = 0;
    *(_QWORD *)(v45 + 48) = v42;
    *(_QWORD *)(v45 + 24) = v44;
    *(_QWORD *)(v45 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v137, (JSC::B3::Value *)v45);
    v142[0] = v45;
    v46 = (char **)(v43 + 8);
    v47 = *(unsigned int *)(v43 + 20);
    if ((_DWORD)v47 == *(_DWORD *)(v43 + 16))
    {
      v127 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v46, v47 + 1, (unint64_t)v142);
      v47 = *(unsigned int *)(v43 + 20);
      *(_QWORD *)(*(_QWORD *)(v43 + 8) + 8 * v47) = *(_QWORD *)v127;
      v48 = v142[0];
    }
    else
    {
      *(_QWORD *)&(*v46)[8 * v47] = v45;
      v48 = v45;
    }
    *(_DWORD *)(v43 + 20) = v47 + 1;
    *(_QWORD *)(v48 + 32) = v43;
    v49 = (*(uint64_t (**)(JSC::B3::Value *, JSC::B3::Value *))(*(_QWORD *)a4 + 312))(a4, a3);
    if (v49 == 2)
    {
      v54 = *(_QWORD *)(v11 + 27776);
      v55 = *(JSC::B3::Value **)(v11 + 27760);
      v56 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(v11 + 27768), (uint64_t)a4, (uint64_t)a3);
      JSC::B3::Procedure::addValueImpl(v55, v56);
      v142[0] = v56;
      v57 = (char **)(v54 + 8);
      v58 = *(unsigned int *)(v54 + 20);
      if ((_DWORD)v58 == *(_DWORD *)(v54 + 16))
      {
        v133 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v57, v58 + 1, (unint64_t)v142);
        v58 = *(unsigned int *)(v54 + 20);
        *(_QWORD *)(*(_QWORD *)(v54 + 8) + 8 * v58) = *(_QWORD *)v133;
        v59 = (JSC::B3::Value *)v142[0];
      }
      else
      {
        *(_QWORD *)&(*v57)[8 * v58] = v56;
        v59 = v56;
      }
      *(_DWORD *)(v54 + 20) = v58 + 1;
      *((_QWORD *)v59 + 4) = v54;
    }
    else
    {
      v135 = 27648;
      if (v49 == 1)
        v135 = 27640;
      v56 = *(JSC::B3::Value **)(v11 + v135);
    }
    JSC::FTL::Output::branch(v141, (uint64_t)v56, v140, v139, NAN, NAN, v50, v51, v52, v53);
    *(_QWORD *)(v11 + 27776) = v140;
    *(_QWORD *)(v11 + 27784) = v139;
    v60 = *(JSC::B3::Value **)(v11 + 27760);
    v61 = *(_QWORD *)(v11 + 27768);
    v62 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v62 = off_1E357F5F0;
    *(_DWORD *)(v62 + 8) = -1;
    *(_WORD *)(v62 + 12) = 153;
    *(_DWORD *)(v62 + 16) = 1;
    *(_BYTE *)(v62 + 20) = 0;
    *(_QWORD *)(v62 + 24) = v61;
    *(_QWORD *)(v62 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v60, (JSC::B3::Value *)v62);
    v142[0] = v62;
    v63 = (char **)(v140 + 8);
    v64 = *(unsigned int *)(v140 + 20);
    if ((_DWORD)v64 == *(_DWORD *)(v140 + 16))
    {
      v128 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v63, v64 + 1, (unint64_t)v142);
      v64 = *(unsigned int *)(v140 + 20);
      *(_QWORD *)(*(_QWORD *)(v140 + 8) + 8 * v64) = *(_QWORD *)v128;
      v65 = v142[0];
    }
    else
    {
      *(_QWORD *)&(*v63)[8 * v64] = v62;
      v65 = v62;
    }
    *(_DWORD *)(v140 + 20) = v64 + 1;
    *(_QWORD *)(v65 + 32) = v140;
    if ((*(_WORD *)(v35 + 12) & 0xFFF) == 0x98)
      v66 = v35;
    else
      v66 = 0;
    *(_QWORD *)(v66 + 40) = v62;
    v67 = *(_QWORD *)(v11 + 27776);
    v68 = *(JSC::B3::Value **)(v11 + 27760);
    v69 = *(_QWORD *)(v11 + 27768);
    v70 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v70 = off_1E357F5F0;
    *(_DWORD *)(v70 + 8) = -1;
    *(_WORD *)(v70 + 12) = 153;
    *(_DWORD *)(v70 + 16) = 2;
    *(_BYTE *)(v70 + 20) = 0;
    *(_QWORD *)(v70 + 24) = v69;
    *(_QWORD *)(v70 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v68, (JSC::B3::Value *)v70);
    v142[0] = v70;
    v71 = (char **)(v67 + 8);
    v72 = *(unsigned int *)(v67 + 20);
    if ((_DWORD)v72 == *(_DWORD *)(v67 + 16))
    {
      v129 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v71, v72 + 1, (unint64_t)v142);
      v72 = *(unsigned int *)(v67 + 20);
      *(_QWORD *)(*(_QWORD *)(v67 + 8) + 8 * v72) = *(_QWORD *)v129;
      v73 = v142[0];
    }
    else
    {
      *(_QWORD *)&(*v71)[8 * v72] = v70;
      v73 = v70;
    }
    *(_DWORD *)(v67 + 20) = v72 + 1;
    *(_QWORD *)(v73 + 32) = v67;
    if ((*(_WORD *)(v45 + 12) & 0xFFF) == 0x98)
      v74 = v45;
    else
      v74 = 0;
    *(_QWORD *)(v74 + 40) = v70;
    JSC::FTL::Output::store((uint64_t)v141, (uint64_t)a5, a6, v70);
    v75 = *(_QWORD *)(v11 + 27776);
    v76 = *(JSC::B3::Value **)(v11 + 27760);
    v77 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(15, *(_QWORD *)(v11 + 27768), v62, *(_QWORD *)(v11 + 27664));
    JSC::B3::Procedure::addValueImpl(v76, v77);
    v142[0] = v77;
    v78 = (char **)(v75 + 8);
    v79 = *(unsigned int *)(v75 + 20);
    if ((_DWORD)v79 == *(_DWORD *)(v75 + 16))
    {
      v130 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v78, v79 + 1, (unint64_t)v142);
      v79 = *(unsigned int *)(v75 + 20);
      *(_QWORD *)(*(_QWORD *)(v75 + 8) + 8 * v79) = *(_QWORD *)v130;
      v80 = (JSC::B3::Value *)v142[0];
    }
    else
    {
      *(_QWORD *)&(*v78)[8 * v79] = v77;
      v80 = v77;
    }
    *(_DWORD *)(v75 + 20) = v79 + 1;
    *((_QWORD *)v80 + 4) = v75;
    v81 = *(_QWORD *)(v11 + 27776);
    v82 = *(JSC::B3::Value **)(v11 + 27760);
    v83 = *(_QWORD *)(v11 + 27768);
    v84 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v84 + 8) = -1;
    *(_WORD *)(v84 + 12) = 152;
    *(_DWORD *)(v84 + 16) = 0;
    *(_BYTE *)(v84 + 20) = 1;
    *(_QWORD *)v84 = &unk_1E357EDA0;
    *(_QWORD *)(v84 + 40) = 0;
    *(_QWORD *)(v84 + 48) = v77;
    *(_QWORD *)(v84 + 24) = v83;
    *(_QWORD *)(v84 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v82, (JSC::B3::Value *)v84);
    v142[0] = v84;
    v85 = (char **)(v81 + 8);
    v86 = *(unsigned int *)(v81 + 20);
    if ((_DWORD)v86 == *(_DWORD *)(v81 + 16))
    {
      v131 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v85, v86 + 1, (unint64_t)v142);
      v86 = *(unsigned int *)(v81 + 20);
      *(_QWORD *)(*(_QWORD *)(v81 + 8) + 8 * v86) = *(_QWORD *)v131;
      v87 = v142[0];
    }
    else
    {
      *(_QWORD *)&(*v85)[8 * v86] = v84;
      v87 = v84;
    }
    *(_DWORD *)(v81 + 20) = v86 + 1;
    *(_QWORD *)(v87 + 32) = v81;
    if ((*(_WORD *)(v84 + 12) & 0xFFF) == 0x98)
      v88 = v84;
    else
      v88 = 0;
    *(_QWORD *)(v88 + 40) = v62;
    v89 = JSC::FTL::Output::add(v141, (JSC::B3::Value *)v70, *(JSC::B3::Value **)(v11 + 27712));
    v90 = *(_QWORD *)(v11 + 27776);
    v91 = *(JSC::B3::Value **)(v11 + 27760);
    v92 = *(_QWORD *)(v11 + 27768);
    v93 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v93 + 8) = -1;
    *(_WORD *)(v93 + 12) = 152;
    *(_DWORD *)(v93 + 16) = 0;
    *(_BYTE *)(v93 + 20) = 1;
    *(_QWORD *)v93 = &unk_1E357EDA0;
    *(_QWORD *)(v93 + 40) = 0;
    *(_QWORD *)(v93 + 48) = v89;
    *(_QWORD *)(v93 + 24) = v92;
    *(_QWORD *)(v93 + 32) = 0;
    JSC::B3::Procedure::addValueImpl(v91, (JSC::B3::Value *)v93);
    v142[0] = v93;
    v94 = (char **)(v90 + 8);
    v95 = *(unsigned int *)(v90 + 20);
    if ((_DWORD)v95 == *(_DWORD *)(v90 + 16))
    {
      v132 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v94, v95 + 1, (unint64_t)v142);
      v95 = *(unsigned int *)(v90 + 20);
      *(_QWORD *)(*(_QWORD *)(v90 + 8) + 8 * v95) = *(_QWORD *)v132;
      v96 = v142[0];
    }
    else
    {
      *(_QWORD *)&(*v94)[8 * v95] = v93;
      v96 = v93;
    }
    *(_DWORD *)(v90 + 20) = v95 + 1;
    *(_QWORD *)(v96 + 32) = v90;
    if ((*(_WORD *)(v93 + 12) & 0xFFF) == 0x98)
      v97 = v93;
    else
      v97 = 0;
    *(_QWORD *)(v97 + 40) = v70;
    v98 = (*(uint64_t (**)(JSC::B3::Value *, JSC::B3::Value *))(*(_QWORD *)v77 + 312))(v77, a3);
    if (v98 == 2)
    {
      v103 = *(_QWORD *)(v11 + 27776);
      v104 = *(JSC::B3::Value **)(v11 + 27760);
      v105 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(52, *(_QWORD *)(v11 + 27768), (uint64_t)v77, (uint64_t)a3);
      JSC::B3::Procedure::addValueImpl(v104, v105);
      v142[0] = v105;
      v106 = (char **)(v103 + 8);
      v107 = *(unsigned int *)(v103 + 20);
      if ((_DWORD)v107 == *(_DWORD *)(v103 + 16))
      {
        v134 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v106, v107 + 1, (unint64_t)v142);
        v107 = *(unsigned int *)(v103 + 20);
        *(_QWORD *)(*(_QWORD *)(v103 + 8) + 8 * v107) = *(_QWORD *)v134;
        v108 = (JSC::B3::Value *)v142[0];
      }
      else
      {
        *(_QWORD *)&(*v106)[8 * v107] = v105;
        v108 = v105;
      }
      *(_DWORD *)(v103 + 20) = v107 + 1;
      *((_QWORD *)v108 + 4) = v103;
    }
    else
    {
      v136 = 27648;
      if (v98 == 1)
        v136 = 27640;
      v105 = *(JSC::B3::Value **)(v11 + v136);
    }
    this = JSC::FTL::Output::branch(v141, (uint64_t)v105, v140, v139, NAN, NAN, v99, v100, v101, v102);
    *(_QWORD *)(v11 + 27776) = v139;
    *(_QWORD *)(v11 + 27784) = v138;
  }
  return this;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::B3::BasicBlock *a5)
{
  JSC::B3::Value *HeapCell;
  __int16 v9;
  JSC::B3::Value *v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::B3::Value *v17;
  JSC::B3::Value *v18;
  JSC::B3::Value *v19;

  if (a3 && (*(_WORD *)(a3 + 12) & 0xFFF) == 4)
  {
  }
  else
  {
    JSC::FTL::Output::store32((JSC::FTL::Output *)(a1 + 27640), v17, HeapCell, (const JSC::FTL::AbstractHeap *)(a1 + 3040));
    v18 = (JSC::B3::Value *)JSC::FTL::Output::load32((JSC::FTL::Output *)(a1 + 27640), (JSC::B3::Value *)a3, (const JSC::FTL::AbstractHeap *)(a1 + 5440));
    JSC::FTL::Output::store32((JSC::FTL::Output *)(a1 + 27640), v18, HeapCell, (const JSC::FTL::AbstractHeap *)(a1 + 3184));
  }
  v9 = *(_WORD *)(a3 + 12);
  v10 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 2);
  if (a3 && (v9 & 0xFFF) == 4)
  {
    if ((*(_WORD *)(a3 + 12) & 0xFFF) == 4)
      v11 = a3;
    else
      v11 = 0;
    v12 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), *(unsigned __int8 *)(*(_QWORD *)(v11 + 40) + 14) + 2);
  }
  else
  {
    v19 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((JSC::FTL::Output *)(a1 + 27640), (JSC::B3::Value *)a3, (const JSC::FTL::AbstractHeap *)(a1 + 5488));
    v12 = (JSC::B3::Value *)JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v10, v19);
    v10 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 2);
  }
  v13 = *(_QWORD *)(a1 + 3592);
  v14 = (uint64_t)HeapCell;
  if (v13)
  {
    v15 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v13);
    v14 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), HeapCell, v15);
  }
  JSC::FTL::Output::store(a1 + 27640, a4, (const JSC::FTL::AbstractHeap *)(a1 + 3568), v14);
  return HeapCell;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::storeStructure(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2, unint64_t a3)
{
  JSC::FTL::Output *v6;
  uint64_t v7;
  uint64_t v8;
  JSC::B3::Value *v9;
  JSC::B3::Value *v10;
  uint64_t v11;
  uint64_t v12;
  JSC::B3::Value *v13;

  v6 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v7 = JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), a3 >> 4);
  v8 = *((_QWORD *)this + 383);
  v9 = a2;
  if (v8)
  {
    v10 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v6, v8);
    v9 = (JSC::B3::Value *)JSC::FTL::Output::add(v6, a2, v10);
  }
  JSC::FTL::Output::store((uint64_t)v6, v7, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3040), (uint64_t)v9);
  v11 = JSC::FTL::Output::constInt32(v6, *(_DWORD *)(a3 + 8));
  v12 = *((_QWORD *)this + 401);
  if (v12)
  {
    v13 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v6, v12);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add(v6, a2, v13);
  }
  return JSC::FTL::Output::store((uint64_t)v6, v11, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3184), (uint64_t)a2);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::encodeStructureID(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  JSC::FTL::Output *v3;
  JSC::B3::Value *v4;
  JSC::B3::Value *v5;

  v3 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v4 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), 4);
  v5 = JSC::FTL::Output::lShr(v3, a2, v4);
  return JSC::FTL::Output::castToInt32(v3, v5);
}

uint64_t *WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  v4 = a3;
  if (!(a3 >> 29))
  {
    v6 = 8 * a3;
    v7 = WTF::fastMalloc((WTF *)(8 * a3));
    *((_DWORD *)v3 + 2) = v4;
    *v3 = v7;
    v8 = *((_DWORD *)v3 + 3);
    do
    {
      v9 = *a2++;
      *(_QWORD *)(*v3 + 8 * v8++) = v9;
      v6 -= 8;
    }
    while (v6);
    *((_DWORD *)v3 + 3) = v8;
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateJSArray(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,BOOL,BOOL)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateJSArray(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,BOOL,BOOL)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateJSArray(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,BOOL,BOOL)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateJSArray(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,BOOL,BOOL)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateJSArray(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,BOOL,BOOL)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateJSArray(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,BOOL,BOOL)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  WTF *v13;
  unsigned int v14;
  uint64_t v15;
  JSC::AssemblerBuffer *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _OWORD *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BYTE *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  _BYTE *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  JSC::FTL::ExceptionTarget *v125;
  __int128 v126;
  WTF *v127;
  uint64_t v128;

  v127 = 0;
  v128 = 0;
  v9 = *((unsigned int *)a3 + 5);
  if (!(_DWORD)v9)
    goto LABEL_136;
  v13 = 0;
  v14 = 0;
  v15 = *((_QWORD *)a3 + 1);
  v16 = (JSC::AssemblerBuffer *)(16 * v9);
  v17 = 29;
  do
  {
    v18 = *(unsigned __int8 *)(v15 + 8);
    switch(v18)
    {
      case 7:
        v19 = *(_BYTE *)v15 & 0x7F;
        v20 = 1;
        break;
      case 9:
        v19 = (*(_QWORD *)v15 << 32) | 0x1DLL;
        v20 = 2;
        break;
      case 11:
        v19 = *(_QWORD *)v15;
        v20 = 3;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197DAB7C4);
    }
    *(_QWORD *)&v126 = v20;
    *((_QWORD *)&v126 + 1) = v19;
    if (v14 == (_DWORD)v128)
    {
      v22 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v127, v14 + 1, (unint64_t)&v126);
      v21 = HIDWORD(v128);
      v13 = v127;
      *((_OWORD *)v127 + HIDWORD(v128)) = *v22;
    }
    else
    {
      *((_OWORD *)v13 + v14) = v126;
      v21 = HIDWORD(v128);
    }
    v14 = v21 + 1;
    HIDWORD(v128) = v14;
    v15 += 16;
    v16 = (JSC::AssemblerBuffer *)((char *)v16 - 16);
  }
  while (v16);
  if (!v14)
  {
LABEL_136:
    __break(0xC471u);
    JUMPOUT(0x197DAB87CLL);
  }
  if (*((_DWORD *)v127 + 3))
    goto LABEL_139;
  if (v14 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DAB884);
  }
  if (*((_DWORD *)v127 + 7))
  {
    __break(0xC471u);
    JUMPOUT(0x197DAB594);
  }
  if (v14 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197DAB88CLL);
  }
  if (*((_DWORD *)v127 + 11))
  {
    __break(0xC471u);
    JUMPOUT(0x197DAB5B4);
  }
  if (v14 <= 3)
  {
LABEL_139:
    __break(0xC471u);
    JUMPOUT(0x197DAB574);
  }
  if (*((_DWORD *)v127 + 15))
  {
    v29 = "./ftl/FTLLocation.cpp";
    v30 = "GPRReg JSC::FTL::Location::directGPR() const";
    v31 = 399;
    __break(0xC471u);
    goto LABEL_89;
  }
  v23 = *((_BYTE *)v127 + 8) & 0x7F;
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(_QWORD *)(a1 + 24);
  v124 = a1;
  v26 = *((_BYTE *)v127 + 24) & 0x7F;
  v27 = *((_BYTE *)v127 + 40) & 0x7F;
  v28 = *((_BYTE *)v127 + 56) & 0x7F;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v15 + 8) = 1;
  v17 = v15 + 8;
  *(_QWORD *)v15 = off_1E3576708;
  *(_QWORD *)(v15 + 16) = v24;
  *(_QWORD *)(v15 + 24) = operationNewArrayWithSize;
  *(_BYTE *)(v15 + 32) = v23;
  *(_QWORD *)(v15 + 40) = v25;
  *(_BYTE *)(v15 + 48) = v26;
  *(_BYTE *)(v15 + 49) = v27;
  *(_BYTE *)(v15 + 50) = v28;
  *(_BYTE *)(a2 + 328) = 1;
  v16 = (JSC::AssemblerBuffer *)(a2 + 56);
  v8 = *(_DWORD *)(a2 + 200);
  if (v8 < *(_DWORD *)(a2 + 52))
    goto LABEL_90;
  while (1)
  {
    v32 = v8;
    if ((v8 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v16, (uint64_t)v29, (uint64_t)v30, v31, a5, a6, a7, a8);
      v32 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v32) = 335544320;
    v33 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v33;
    if (*(_BYTE *)(a2 + 328))
      v34 = 0xFF000F4500000000;
    else
      v34 = 0xFF000F4100000000;
    for (*(_BYTE *)(a2 + 328) = 0; v33 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v33)
    {
      if ((v33 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v16, (uint64_t)v29, (uint64_t)v30, v31, a5, a6, a7, a8);
        v33 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = -721215457;
      v33 = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
    v35 = *(_QWORD *)(*(_QWORD *)a3 + 104);
    v36 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
    v37 = *((unsigned int *)a3 + 9);
    if ((_DWORD)v37)
    {
      v72 = (_BYTE *)*((_QWORD *)a3 + 3);
      do
      {
        v73 = *v72 & 0x7F;
        if (v73 >= 0x40)
          goto LABEL_89;
        v74 = 1 << v73;
        v36 &= ~v74;
        v35 &= ~v74;
        ++v72;
      }
      while (--v37);
    }
    v38 = *((unsigned int *)a3 + 13);
    if (!(_DWORD)v38)
      break;
    v79 = (_BYTE *)*((_QWORD *)a3 + 5);
    while (1)
    {
      v80 = (*v79 + 32) & 0x7F;
      if (v80 >= 0x40)
        break;
      v81 = 1 << v80;
      v36 &= ~v81;
      v35 &= ~v81;
      ++v79;
      if (!--v38)
        goto LABEL_27;
    }
LABEL_89:
    __break(1u);
    do
    {
LABEL_90:
      if ((v8 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v16, (uint64_t)v29, (uint64_t)v30, v31, a5, a6, a7, a8);
        v8 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v8) = -721215457;
      v8 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v8;
    }
    while (v8 < *(_DWORD *)(a2 + 52));
  }
LABEL_27:
  v122 = v34;
  v123 = v35;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(v124 + 32), a3, (uint64_t *)&v125);
  v39 = *(_QWORD *)(v124 + 48);
  v121 = *(_QWORD *)(v124 + 40);
  if ((v39 & 1) != 0)
  {
    v82 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || ((v83 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v83 != 0x3FFFFFFF)
        ? (v84 = (_DWORD)v83 == -1)
        : (v84 = 1),
          v84))
    {
      v85 = 2;
    }
    else if (v83 >> 28)
    {
      v118 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = v82;
      *(_DWORD *)(v118 + 8) = v83;
      v85 = 1;
      v82 = v118;
    }
    else
    {
      v85 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v82 = v83 << 36;
    }
    v39 = v82 | v85;
  }
  v40 = (unsigned int *)v125;
  if (v125)
  {
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 + 1, v40));
  }
  do
    v42 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v42 + 1, (unsigned int *)v17));
  v43 = *((_QWORD *)a3 + 7);
  v44 = v39;
  if ((v39 & 1) != 0)
  {
    v86 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
    if ((v39 & 2) != 0
      || ((v87 = *(unsigned int *)((v39 & 0xFFFFFFFF8) + 8), (_DWORD)v87 != 0x3FFFFFFF)
        ? (v88 = (_DWORD)v87 == -1)
        : (v88 = 1),
          v88))
    {
      v89 = 2;
    }
    else if (v87 >> 28)
    {
      v119 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v119 = v86;
      *(_DWORD *)(v119 + 8) = v87;
      v89 = 1;
      v86 = v119;
    }
    else
    {
      v89 = *(_QWORD *)(v39 & 0xFFFFFFFF8);
      v86 = v87 << 36;
    }
    v44 = v86 | v89;
  }
  if (v40)
  {
    do
      v45 = __ldaxr(v40);
    while (__stlxr(v45 + 1, v40));
  }
  do
    v46 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v46 + 1, (unsigned int *)v17));
  v54 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v54 + 8) = 1;
  *(_QWORD *)v54 = &off_1E3576730;
  *(_DWORD *)(v54 + 16) = v8;
  *(_QWORD *)(v54 + 20) = v122;
  *(_QWORD *)(v54 + 32) = v121;
  *(_DWORD *)(v54 + 40) = v33;
  v55 = v44;
  if ((v44 & 1) != 0)
  {
    v90 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
    if ((v44 & 2) != 0
      || ((v91 = *(unsigned int *)((v44 & 0xFFFFFFFF8) + 8), (_DWORD)v91 != 0x3FFFFFFF)
        ? (v92 = (_DWORD)v91 == -1)
        : (v92 = 1),
          v92))
    {
      v93 = 2;
    }
    else if (v91 >> 28)
    {
      v120 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v120 = v90;
      *(_DWORD *)(v120 + 8) = v91;
      v93 = 1;
      v90 = v120;
    }
    else
    {
      v93 = *(_QWORD *)(v44 & 0xFFFFFFFF8);
      v90 = v91 << 36;
    }
    v55 = v90 | v93;
  }
  *(_QWORD *)(v54 + 48) = v55;
  if (v40)
  {
    do
      v56 = __ldaxr(v40);
    while (__stlxr(v56 + 1, v40));
  }
  *(_QWORD *)(v54 + 56) = v40;
  *(_QWORD *)(v54 + 64) = v36;
  *(_QWORD *)(v54 + 72) = v123;
  do
    v57 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v57 + 1, (unsigned int *)v17));
  *(_QWORD *)(v54 + 80) = v15;
  *(_QWORD *)&v126 = v54;
  v58 = *(unsigned int *)(v43 + 12);
  if ((_DWORD)v58 == *(_DWORD *)(v43 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v43, (uint64_t *)&v126);
    v75 = (unsigned int *)v126;
    *(_QWORD *)&v126 = 0;
    if (v75)
    {
      v76 = v75 + 2;
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
      {
        atomic_store(1u, v75 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v75 + 8))(v75);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v43 + 8 * v58) = v54;
    *(_DWORD *)(v43 + 12) = v58 + 1;
    *(_QWORD *)&v126 = 0;
  }
  do
  {
    v59 = __ldaxr((unsigned int *)v17);
    v60 = v59 - 1;
  }
  while (__stlxr(v60, (unsigned int *)v17));
  if (!v60)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v40)
  {
    do
    {
      v61 = __ldaxr(v40);
      v62 = v61 - 1;
    }
    while (__stlxr(v62, v40));
    if (!v62)
    {
      atomic_store(1u, v40);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v40, v47, v48, v49, v50, v51, v52, v53);
      WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
    }
  }
  if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v44 & 0xFFFFFFFF8, v47, v48, v49, v50, v51, v52, v53);
  do
  {
    v63 = __ldaxr((unsigned int *)v17);
    v64 = v63 - 1;
  }
  while (__stlxr(v64, (unsigned int *)v17));
  if (!v64)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v40)
  {
    do
    {
      v65 = __ldaxr(v40);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v40));
    if (!v66)
    {
      atomic_store(1u, v40);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v40, v47, v48, v49, v50, v51, v52, v53);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
  }
  if ((v39 & 1) != 0 && (v39 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v39 & 0xFFFFFFFF8, v47, v48, v49, v50, v51, v52, v53);
  v67 = (unsigned int *)v125;
  v125 = 0;
  if (v67)
  {
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v67));
    if (!v69)
    {
      atomic_store(1u, v67);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v67, v47, v48, v49, v50, v51, v52, v53);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
  }
  do
  {
    v70 = __ldaxr((unsigned int *)v17);
    v71 = v70 - 1;
  }
  while (__stlxr(v71, (unsigned int *)v17));
  if (!v71)
  {
    atomic_store(1u, (unsigned int *)(v15 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v127)
    WTF::fastFree((unint64_t)v127, v47, v48, v49, v50, v51, v52, v53);
}

__n128 WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::Location>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

uint64_t WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 16 * v10;
      v20 = (__int128 *)v5;
      do
      {
        v21 = *v20++;
        *v11++ = v21;
        v19 -= 16;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = 16 * v8;
        v18 = (__int128 *)v7;
        do
        {
          v19 = *v18++;
          *v9++ = v19;
          v17 -= 16;
        }
        while (v17);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &),WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>> JSC::FTL::createLazyCallGenerator<JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(JSC::VM &,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::{lambda(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  JSC::ARM64LogicalImmediate *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int i;
  unsigned int v36;
  char v37;
  uint64_t v38;
  int *v39;
  int *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  char v46;
  __int16 v47;
  char v48;
  _BYTE v49[32];

  v10 = *(_QWORD *)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 48);
  v12 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v11 + 32);
  v14 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_BYTE *)(a1 + 48);
  v18 = *(_BYTE *)(a1 + 49);
  v19 = *(_BYTE *)(a1 + 50);
  if ((_DWORD)v12)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197DABCC8);
    }
    v43 = *(_QWORD *)(a3 + 40);
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, v12, a2 + 264, a4, v10, a6, a7, a8);
    v27 = *(_DWORD *)(a2 + 200);
    if (v27 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v20, v21, v22, v23, v24, v25, v26);
      v27 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v27) = -1207811152;
    *(_DWORD *)(a2 + 200) += 4;
    v10 = v43;
  }
  JSC::FTL::callOperation<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)v49, v14, *(_QWORD *)(v11 + 24), (_DWORD *)a2, v10, v13, v15, v16, v17, v18, v19);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v28, v29, v30, v31, v32, v33, v34);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v36 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v28, v29, v30, v31, v32, v33, v34);
    v36 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v37 = 69;
  else
    v37 = 65;
  v44 = i;
  v45 = 0;
  v46 = v37;
  v47 = 15;
  v48 = -1;
  if (i != -1)
  {
    v38 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v38 == *(_DWORD *)(a3 + 8))
    {
      v39 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v38 + 1), (unint64_t)&v44, v30, v31, v32, v33, v34);
      v41 = *v39;
      v40 = v39 + 1;
      v42 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v42 = v41;
    }
    else
    {
      v40 = &v45;
      v42 = *(_QWORD *)a3 + 12 * v38;
      *(_DWORD *)v42 = i;
    }
    *(_QWORD *)(v42 + 4) = *(_QWORD *)v40;
    ++*(_DWORD *)(a3 + 12);
  }
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_15allocateJSArrayEPNS4_5ValueESG_SG_SG_bbEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSH_ISG_Lm0ESJ_Lm16ESK_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvST_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_15allocateJSArrayEPNS4_5ValueESG_SG_SG_bbEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSH_ISG_Lm0ESJ_Lm16ESK_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvST_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_15allocateJSArrayEPNS4_5ValueESG_SG_SG_bbEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSH_ISG_Lm0ESJ_Lm16ESK_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvST_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  const void *v94;
  void *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  const void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  JSC::ExecutableMemoryHandle *v128[2];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v20 = *(unsigned int *)(v19 + 308);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 304))
  {
    v91 = v20 + (v20 >> 2);
    if (v91 >= 0x10)
      v92 = v91 + 1;
    else
      v92 = 16;
    if (v92 <= v20 + 1)
      v93 = v20 + 1;
    else
      v93 = v92;
    if (v93 >> 29)
    {
      __break(0xC471u);
      goto LABEL_107;
    }
    v94 = *(const void **)(v19 + 296);
    v95 = (void *)WTF::fastMalloc((WTF *)(8 * v93));
    *(_DWORD *)(v19 + 304) = v93;
    *(_QWORD *)(v19 + 296) = v95;
    memcpy(v95, v94, 8 * v20);
    if (v94)
    {
      if (*(const void **)(v19 + 296) == v94)
      {
        *(_QWORD *)(v19 + 296) = 0;
        *(_DWORD *)(v19 + 304) = 0;
      }
      WTF::fastFree((unint64_t)v94, v12, v13, v14, v15, v16, v17, v18);
    }
    v22 = *(unsigned int *)(v19 + 308);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v22);
  }
  else
  {
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v20);
    LODWORD(v22) = *(_DWORD *)(v19 + 308);
  }
  *v21 = 0;
  *(_DWORD *)(v19 + 308) = v22 + 1;
  v23 = *(_DWORD *)(a2 + 200);
  if (v23 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v23 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v23) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v20, 16, v14, v15, v16, v17, v18);
  v31 = *(_DWORD *)(a2 + 200);
  if (v31 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v24, v25, v26, v27, v28, v29, v30);
    v31 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = -134216720;
  v32 = *(_DWORD *)(a2 + 200);
  v33 = v32 + 4;
  *(_DWORD *)(a2 + 200) = v32 + 4;
  if ((v32 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v24, v25, v26, v27, v28, v29, v30);
    v33 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v34 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v34 + 90440), v34, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v26, v27, v28, v29, v30, v128);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v128[0], v35, v36, v37, v38, v39, v40);
  v48 = (unsigned int *)v128[1];
  v128[1] = 0;
  if (v48)
  {
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      atomic_store(1u, v48);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v48, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  v51 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  v127 = v11;
  if (v51)
  {
    v52 = v51 + 2;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 + 1, v52));
    v54 = *(_DWORD *)(a1 + 16);
    v55 = *(_QWORD *)(a1 + 20);
    v56 = *(_DWORD *)(a1 + 40);
    do
      v57 = __ldaxr(v52);
    while (__stlxr(v57 + 1, v52));
  }
  else
  {
    v54 = *(_DWORD *)(a1 + 16);
    v55 = *(_QWORD *)(a1 + 20);
    v56 = *(_DWORD *)(a1 + 40);
  }
  v58 = *(_QWORD *)(a1 + 48);
  if ((v58 & 1) != 0)
  {
    v101 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
    if ((v58 & 2) != 0
      || ((v102 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
        ? (v103 = (_DWORD)v102 == -1)
        : (v103 = 1),
          v103))
    {
      v104 = 2;
    }
    else if (v102 >> 28)
    {
      v125 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v125 = v101;
      *(_DWORD *)(v125 + 8) = v102;
      v104 = 1;
      v101 = v125;
    }
    else
    {
      v104 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    v58 = v101 | v104;
  }
  v59 = *(unsigned int **)(a1 + 56);
  if (v59)
  {
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  *(_OWORD *)v128 = *(_OWORD *)(a1 + 64);
  v61 = *(unsigned int **)(a1 + 80);
  if (v61)
  {
    v62 = v61 + 2;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 + 1, v62));
  }
  v64 = WTF::fastMalloc((WTF *)0x58);
  v72 = v64;
  *(_DWORD *)(v64 + 8) = 1;
  *(_QWORD *)v64 = &off_1E3576758;
  *(_DWORD *)(v64 + 16) = v54;
  *(_QWORD *)(v64 + 20) = v55;
  *(_DWORD *)(v64 + 28) = v56;
  if (v51)
  {
    v73 = v51 + 2;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 + 1, v73));
  }
  *(_QWORD *)(v64 + 32) = v51;
  v75 = v58;
  if ((v58 & 1) != 0)
  {
    v105 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
    if ((v58 & 2) != 0
      || ((v106 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v126 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v126 = v105;
      *(_DWORD *)(v126 + 8) = v106;
      v108 = 1;
      v105 = v126;
    }
    else
    {
      v108 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v75 = v105 | v108;
  }
  *(_QWORD *)(v72 + 40) = v75;
  if (v59)
  {
    do
      v76 = __ldaxr(v59);
    while (__stlxr(v76 + 1, v59));
  }
  *(_QWORD *)(v72 + 48) = v59;
  *(_OWORD *)(v72 + 56) = *(_OWORD *)v128;
  if (v61)
  {
    v77 = v61 + 2;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 + 1, v77));
  }
  *(_QWORD *)(v72 + 72) = v61;
  *(_DWORD *)(v72 + 80) = v20;
  v79 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v79 != *(_DWORD *)(a2 + 240))
  {
    v80 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v79);
    goto LABEL_37;
  }
  v96 = v79 + (v79 >> 2);
  if (v96 >= 0x10)
    v97 = v96 + 1;
  else
    v97 = 16;
  if (v97 <= v79 + 1)
    v98 = v79 + 1;
  else
    v98 = v97;
  if (v98 >> 29)
  {
    __break(0xC471u);
LABEL_107:
    JUMPOUT(0x197DAC4E8);
  }
  v99 = *(const void **)(a2 + 232);
  v100 = (void *)WTF::fastMalloc((WTF *)(8 * v98));
  *(_DWORD *)(a2 + 240) = v98;
  *(_QWORD *)(a2 + 232) = v100;
  memcpy(v100, v99, 8 * v79);
  if (v99)
  {
    if (*(const void **)(a2 + 232) == v99)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v99, v65, v66, v67, v68, v69, v70, v71);
  }
  v79 = *(unsigned int *)(a2 + 244);
  v80 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v79);
LABEL_37:
  *v80 = v72;
  *(_DWORD *)(a2 + 244) = v79 + 1;
  if (v61)
  {
    v81 = v61 + 2;
    do
    {
      v82 = __ldaxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
    {
      atomic_store(1u, v61 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 8))(v61);
    }
  }
  if (v59)
  {
    do
    {
      v84 = __ldaxr(v59);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v59));
    if (!v85)
    {
      atomic_store(1u, v59);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v59, v65, v66, v67, v68, v69, v70, v71);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
  }
  if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v58 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
  if (v51)
  {
    v86 = v51 + 2;
    do
    {
      v87 = __ldaxr(v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, v86));
    if (!v88)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 32))(v51);
    }
    do
    {
      v89 = __ldaxr(v86);
      v90 = v89 - 1;
    }
    while (__stlxr(v90, v86));
    if (!v90)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 32))(v51);
    }
  }
  *(_BYTE *)(a2 + 212) = v127;
}

void JSC::MacroAssemblerARM64::pushToSaveImmediateWithoutTouchingRegisters(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  JSC::AssemblerBuffer *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  v8 = a2;
  v10 = (JSC::AssemblerBuffer *)(a1 + 14);
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = -1447083024;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(a1, (JSC::ARM64LogicalImmediate *)v8, 16, a4, a5, a6, a7, a8);
  v19 = a1[50];
  if (v19 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, v12, v13, v14, v15, v16, v17, v18);
    v19 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v19) = -134216720;
  v20 = a1[50];
  v21 = v20 + 4;
  a1[50] = v20 + 4;
  if (v20 + 8 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, v12, v13, v14, v15, v16, v17, v18);
    v21 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v21) = -129989648;
  a1[50] += 4;
}

uint64_t JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  int i;
  unsigned int v12;
  char v13;
  JSC::AssemblerBuffer *v15;
  unsigned int v16[2];
  char v17;
  __int16 v18;
  char v19;

  v10 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      v15 = v10;
      JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
      v10 = v15;
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v12 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v12) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v13 = 69;
  else
    v13 = 65;
  v16[0] = i;
  v16[1] = 0;
  v17 = v13;
  v18 = 15;
  v19 = -1;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26129>(v16, a2, a1, a4, a5, a6, a7, a8);
}

uint64_t JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  return a1;
}

void WTF::Vector<std::unique_ptr<JSC::FTL::LazySlowPath>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,decltype(nullptr)>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 12);
  v4 = v2 + (v2 >> 2);
  if (v4 >= 0x10)
    v5 = v4 + 1;
  else
    v5 = 16;
  if (v5 <= v3 + 1)
    v6 = v3 + 1;
  else
    v6 = v5;
  if (v6 <= v2)
  {
LABEL_10:
    v16 = *(unsigned int *)(a1 + 12);
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = 0;
    *(_DWORD *)(a1 + 12) = v16 + 1;
    return;
  }
  if (!(v6 >> 29))
  {
    v7 = *(const void **)a1;
    v8 = (void *)WTF::fastMalloc((WTF *)(8 * v6));
    *(_DWORD *)(a1 + 8) = v6;
    *(_QWORD *)a1 = v8;
    memcpy(v8, v7, 8 * v3);
    if (v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v9, v10, v11, v12, v13, v14, v15);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
}

uint64_t JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)26129>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  __int16 v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  __int128 v27;
  uint64_t v28;

  v10 = *((unsigned __int8 *)a1 + 8);
  switch(*((_BYTE *)a1 + 8))
  {
    case 0x83:
    case 0x87:
      result = a3 + 32;
      v12 = *a1;
      v13 = *((_BYTE *)a1 + 9);
      v14 = *((unsigned __int8 *)a1 + 10);
      v15 = *((_BYTE *)a1 + 11);
      *(_QWORD *)&v27 = v12;
      *((_QWORD *)&v27 + 1) = a2;
      BYTE3(v28) = v13 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v10;
      if (v14)
        v16 = 192;
      else
        v16 = 128;
      goto LABEL_6;
    case 0x84:
    case 0x88:
      result = a3 + 32;
      v17 = *a1;
      v18 = *((_BYTE *)a1 + 9);
      v19 = *((_WORD *)a1 + 2);
      v15 = *((_BYTE *)a1 + 11);
      *(_QWORD *)&v27 = v17;
      *((_QWORD *)&v27 + 1) = a2;
      BYTE3(v28) = v18 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v10;
      v16 = v19 & 0x3F | 0x80;
LABEL_6:
      WORD2(v28) = v16;
      LOBYTE(v28) = v15;
      v20 = *(unsigned int *)(a3 + 44);
      if ((_DWORD)v20 != *(_DWORD *)(a3 + 40))
        goto LABEL_7;
      goto LABEL_10;
    default:
      result = a3 + 32;
      v24 = *a1;
      v25 = *((_BYTE *)a1 + 9);
      LOBYTE(v28) = -1;
      *(_QWORD *)&v27 = v24;
      *((_QWORD *)&v27 + 1) = a2;
      BYTE3(v28) = v25 & 0xF;
      *(_WORD *)((char *)&v28 + 1) = v10;
      WORD2(v28) = 128;
      v20 = *(unsigned int *)(a3 + 44);
      if ((_DWORD)v20 == *(_DWORD *)(a3 + 40))
      {
LABEL_10:
        result = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v20 + 1, (unint64_t)&v27, a4, a5, a6, a7, a8);
        v21 = *(_QWORD *)(a3 + 32) + 24 * *(unsigned int *)(a3 + 44);
        *(_QWORD *)v21 = 0;
        *(_QWORD *)(v21 + 8) = 0;
        *(_BYTE *)(v21 + 16) = -1;
        v26 = (*(unsigned __int8 *)(v21 + 19) << 16) | 0xF0000;
        *(_WORD *)(v21 + 17) = 65;
        *(_BYTE *)(v21 + 19) = BYTE2(v26);
        *(_WORD *)(v21 + 20) &= 0xFC00u;
        v22 = *(_OWORD *)result;
        v23 = *(_QWORD *)(result + 16);
      }
      else
      {
LABEL_7:
        v21 = *(_QWORD *)result + 24 * v20;
        v22 = v27;
        v23 = v28;
      }
      *(_QWORD *)(v21 + 16) = v23;
      *(_OWORD *)v21 = v22;
      ++*(_DWORD *)(a3 + 44);
      return result;
  }
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_15allocateJSArrayEPNS1_2B35ValueESB_SB_SB_bbEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS9_15PatchpointValueERKT_RKNSC_ISB_Lm0ESE_Lm16ESF_EEENKUlRNS1_12CCallHelpersERKNS9_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_15allocateJSArrayEPNS1_2B35ValueESB_SB_SB_bbEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS9_15PatchpointValueERKT_RKNSC_ISB_Lm0ESE_Lm16ESF_EEENKUlRNS1_12CCallHelpersERKNS9_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_15allocateJSArrayEPNS1_2B35ValueESB_SB_SB_bbEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS9_15PatchpointValueERKT_RKNSC_ISB_Lm0ESE_Lm16ESF_EEENKUlRNS1_12CCallHelpersERKNS9_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DACF58);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DACF78);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DACF98);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DACF20);
    }
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  if (v33)
  {
    v42 = v33 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v33 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    }
  }
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
  {
    __break(0xC471u);
    JUMPOUT(0x197DAD088);
  }
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(_QWORD *a1, int a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (a2 < 4)
    v2 = 0;
  else
    v2 = *(_DWORD *)((a2 & 0xFFFFFFFC) + a1[3] - 4);
  v3 = a1[23];
  v4 = (a2 - v2) + v3;
  if (v3 <= v4 && v3 + a1[1] >= v4)
    return v4;
  result = 366;
  __break(0xC471u);
  return result;
}

unint64_t *std::unique_ptr<JSC::FTL::LazySlowPath>::operator=[abi:sn180100](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v11 = *(unsigned int **)(v10 + 56);
    *(_QWORD *)(v10 + 56) = 0;
    if (v11)
    {
      v12 = v11 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
      }
    }
    v15 = *(unsigned int **)(v10 + 48);
    *(_QWORD *)(v10 + 48) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v15, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
    }
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unint64_t *std::unique_ptr<JSC::FTL::LazySlowPath>::~unique_ptr[abi:sn180100](unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *(unsigned int **)(v9 + 56);
    *(_QWORD *)(v9 + 56) = 0;
    if (v10)
    {
      v11 = v10 + 2;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v10 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    v14 = *(unsigned int **)(v9 + 48);
    *(_QWORD *)(v9 + 48) = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateJSArray(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,BOOL,BOOL)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateJSArray(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,BOOL,BOOL)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateJSArray(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,BOOL,BOOL)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateJSArray(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,BOOL,BOOL)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateJSArray(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,BOOL,BOOL)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateJSArray(JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,BOOL,BOOL)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  WTF *v13;
  unsigned int v14;
  unint64_t v15;
  JSC::AssemblerBuffer *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _OWORD *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  _BYTE *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  _BYTE *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unsigned int *v124;
  uint64_t v125;
  JSC::FTL::ExceptionTarget *v126;
  __int128 v127;
  WTF *v128;
  uint64_t v129;

  v128 = 0;
  v129 = 0;
  v9 = *((unsigned int *)a3 + 5);
  if (!(_DWORD)v9)
    goto LABEL_139;
  v13 = 0;
  v14 = 0;
  v15 = *((_QWORD *)a3 + 1);
  v16 = (JSC::AssemblerBuffer *)(16 * v9);
  v17 = 29;
  do
  {
    v18 = *(unsigned __int8 *)(v15 + 8);
    switch(v18)
    {
      case 7:
        v19 = *(_BYTE *)v15 & 0x7F;
        v20 = 1;
        break;
      case 9:
        v19 = (*(_QWORD *)v15 << 32) | 0x1DLL;
        v20 = 2;
        break;
      case 11:
        v19 = *(_QWORD *)v15;
        v20 = 3;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197DADB3CLL);
    }
    *(_QWORD *)&v127 = v20;
    *((_QWORD *)&v127 + 1) = v19;
    if (v14 == (_DWORD)v129)
    {
      v22 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v128, v14 + 1, (unint64_t)&v127);
      v21 = HIDWORD(v129);
      v13 = v128;
      *((_OWORD *)v128 + HIDWORD(v129)) = *v22;
    }
    else
    {
      *((_OWORD *)v13 + v14) = v127;
      v21 = HIDWORD(v129);
    }
    v14 = v21 + 1;
    HIDWORD(v129) = v14;
    v15 += 16;
    v16 = (JSC::AssemblerBuffer *)((char *)v16 - 16);
  }
  while (v16);
  if (!v14)
  {
LABEL_139:
    __break(0xC471u);
    JUMPOUT(0x197DADBF4);
  }
  if (*((_DWORD *)v128 + 3))
    goto LABEL_143;
  if (v14 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DADBFCLL);
  }
  if (*((_DWORD *)v128 + 7))
  {
    __break(0xC471u);
    JUMPOUT(0x197DAD8ECLL);
  }
  if (v14 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197DADC04);
  }
  if (*((_DWORD *)v128 + 11))
  {
    __break(0xC471u);
    JUMPOUT(0x197DAD90CLL);
  }
  if (v14 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197DADC0CLL);
  }
  if (*((_DWORD *)v128 + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x197DAD92CLL);
  }
  if (v14 <= 4)
  {
LABEL_143:
    __break(0xC471u);
    JUMPOUT(0x197DAD8CCLL);
  }
  if (*((_DWORD *)v128 + 19))
  {
    v31 = "./ftl/FTLLocation.cpp";
    v32 = "GPRReg JSC::FTL::Location::directGPR() const";
    v33 = 399;
    __break(0xC471u);
    goto LABEL_92;
  }
  v23 = *((_BYTE *)v128 + 8) & 0x7F;
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(_QWORD *)(a1 + 24);
  v125 = a1;
  v26 = *((_BYTE *)v128 + 24) & 0x7F;
  v27 = *((_BYTE *)v128 + 40) & 0x7F;
  v28 = *((_BYTE *)v128 + 56) & 0x7F;
  v29 = *((_BYTE *)v128 + 72) & 0x7F;
  v30 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v30 + 8) = 1;
  v17 = v30 + 8;
  *(_QWORD *)v30 = off_1E35767A8;
  *(_QWORD *)(v30 + 16) = v24;
  *(_QWORD *)(v30 + 24) = operationNewArrayWithSizeAndHint;
  *(_BYTE *)(v30 + 32) = v23;
  *(_QWORD *)(v30 + 40) = v25;
  *(_BYTE *)(v30 + 48) = v26;
  *(_BYTE *)(v30 + 49) = v27;
  *(_BYTE *)(v30 + 50) = v28;
  *(_BYTE *)(v30 + 51) = v29;
  v15 = v30;
  *(_BYTE *)(a2 + 328) = 1;
  v16 = (JSC::AssemblerBuffer *)(a2 + 56);
  v8 = *(_DWORD *)(a2 + 200);
  if (v8 < *(_DWORD *)(a2 + 52))
    goto LABEL_93;
  while (1)
  {
    v34 = v8;
    if ((v8 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v16, (uint64_t)v31, (uint64_t)v32, v33, a5, a6, a7, a8);
      v34 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v34) = 335544320;
    v35 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v35;
    if (*(_BYTE *)(a2 + 328))
      v36 = 0xFF000F4500000000;
    else
      v36 = 0xFF000F4100000000;
    for (*(_BYTE *)(a2 + 328) = 0; v35 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v35)
    {
      if ((v35 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v16, (uint64_t)v31, (uint64_t)v32, v33, a5, a6, a7, a8);
        v35 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v35) = -721215457;
      v35 = *(_DWORD *)(a2 + 200) + 4;
    }
    v124 = (unsigned int *)v15;
    *(_DWORD *)(a2 + 208) = 0;
    v15 = *(_QWORD *)(*(_QWORD *)a3 + 104);
    v37 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
    v38 = *((unsigned int *)a3 + 9);
    if ((_DWORD)v38)
    {
      v73 = (_BYTE *)*((_QWORD *)a3 + 3);
      do
      {
        v74 = *v73 & 0x7F;
        if (v74 >= 0x40)
          goto LABEL_92;
        v75 = 1 << v74;
        v37 &= ~v75;
        v15 &= ~v75;
        ++v73;
      }
      while (--v38);
    }
    v39 = *((unsigned int *)a3 + 13);
    if (!(_DWORD)v39)
      break;
    v80 = (_BYTE *)*((_QWORD *)a3 + 5);
    while (1)
    {
      v81 = (*v80 + 32) & 0x7F;
      if (v81 >= 0x40)
        break;
      v82 = 1 << v81;
      v37 &= ~v82;
      v15 &= ~v82;
      ++v80;
      if (!--v39)
        goto LABEL_29;
    }
LABEL_92:
    __break(1u);
    do
    {
LABEL_93:
      if ((v8 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v16, (uint64_t)v31, (uint64_t)v32, v33, a5, a6, a7, a8);
        v8 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v8) = -721215457;
      v8 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v8;
    }
    while (v8 < *(_DWORD *)(a2 + 52));
  }
LABEL_29:
  v123 = v36;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(v125 + 32), a3, (uint64_t *)&v126);
  v40 = *(_QWORD *)(v125 + 48);
  v122 = *(_QWORD *)(v125 + 40);
  if ((v40 & 1) != 0)
  {
    v83 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
    if ((v40 & 2) != 0
      || ((v84 = *(unsigned int *)((v40 & 0xFFFFFFFF8) + 8), (_DWORD)v84 != 0x3FFFFFFF)
        ? (v85 = (_DWORD)v84 == -1)
        : (v85 = 1),
          v85))
    {
      v86 = 2;
    }
    else if (v84 >> 28)
    {
      v119 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v119 = v83;
      *(_DWORD *)(v119 + 8) = v84;
      v86 = 1;
      v83 = v119;
    }
    else
    {
      v86 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
      v83 = v84 << 36;
    }
    v40 = v83 | v86;
  }
  v41 = (unsigned int *)v126;
  if (v126)
  {
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 + 1, v41));
  }
  do
    v43 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v43 + 1, (unsigned int *)v17));
  v44 = *((_QWORD *)a3 + 7);
  v45 = v40;
  if ((v40 & 1) != 0)
  {
    v87 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
    if ((v40 & 2) != 0
      || ((v88 = *(unsigned int *)((v40 & 0xFFFFFFFF8) + 8), (_DWORD)v88 != 0x3FFFFFFF)
        ? (v89 = (_DWORD)v88 == -1)
        : (v89 = 1),
          v89))
    {
      v90 = 2;
    }
    else if (v88 >> 28)
    {
      v120 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v120 = v87;
      *(_DWORD *)(v120 + 8) = v88;
      v90 = 1;
      v87 = v120;
    }
    else
    {
      v90 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
      v87 = v88 << 36;
    }
    v45 = v87 | v90;
  }
  if (v41)
  {
    do
      v46 = __ldaxr(v41);
    while (__stlxr(v46 + 1, v41));
  }
  do
    v47 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v47 + 1, (unsigned int *)v17));
  v55 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v55 + 8) = 1;
  *(_QWORD *)v55 = &off_1E35767D0;
  *(_DWORD *)(v55 + 16) = v8;
  *(_QWORD *)(v55 + 20) = v123;
  *(_QWORD *)(v55 + 32) = v122;
  *(_DWORD *)(v55 + 40) = v35;
  v56 = v45;
  if ((v45 & 1) != 0)
  {
    v91 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
    if ((v45 & 2) != 0
      || ((v92 = *(unsigned int *)((v45 & 0xFFFFFFFF8) + 8), (_DWORD)v92 != 0x3FFFFFFF)
        ? (v93 = (_DWORD)v92 == -1)
        : (v93 = 1),
          v93))
    {
      v94 = 2;
    }
    else if (v92 >> 28)
    {
      v121 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v121 = v91;
      *(_DWORD *)(v121 + 8) = v92;
      v94 = 1;
      v91 = v121;
    }
    else
    {
      v94 = *(_QWORD *)(v45 & 0xFFFFFFFF8);
      v91 = v92 << 36;
    }
    v56 = v91 | v94;
  }
  *(_QWORD *)(v55 + 48) = v56;
  if (v41)
  {
    do
      v57 = __ldaxr(v41);
    while (__stlxr(v57 + 1, v41));
  }
  *(_QWORD *)(v55 + 56) = v41;
  *(_QWORD *)(v55 + 64) = v37;
  *(_QWORD *)(v55 + 72) = v15;
  do
    v58 = __ldaxr((unsigned int *)v17);
  while (__stlxr(v58 + 1, (unsigned int *)v17));
  *(_QWORD *)(v55 + 80) = v124;
  *(_QWORD *)&v127 = v55;
  v59 = *(unsigned int *)(v44 + 12);
  if ((_DWORD)v59 == *(_DWORD *)(v44 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v44, (uint64_t *)&v127);
    v76 = (unsigned int *)v127;
    *(_QWORD *)&v127 = 0;
    if (v76)
    {
      v77 = v76 + 2;
      do
      {
        v78 = __ldaxr(v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v77));
      if (!v79)
      {
        atomic_store(1u, v76 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v76 + 8))(v76);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v44 + 8 * v59) = v55;
    *(_DWORD *)(v44 + 12) = v59 + 1;
    *(_QWORD *)&v127 = 0;
  }
  do
  {
    v60 = __ldaxr((unsigned int *)v17);
    v61 = v60 - 1;
  }
  while (__stlxr(v61, (unsigned int *)v17));
  if (!v61)
  {
    atomic_store(1u, v124 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v124 + 8))(v124);
  }
  if (v41)
  {
    do
    {
      v62 = __ldaxr(v41);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v41));
    if (!v63)
    {
      atomic_store(1u, v41);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v41, v48, v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
    }
  }
  if ((v45 & 1) != 0 && (v45 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v45 & 0xFFFFFFFF8, v48, v49, v50, v51, v52, v53, v54);
  do
  {
    v64 = __ldaxr((unsigned int *)v17);
    v65 = v64 - 1;
  }
  while (__stlxr(v65, (unsigned int *)v17));
  if (!v65)
  {
    atomic_store(1u, v124 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v124 + 8))(v124);
  }
  if (v41)
  {
    do
    {
      v66 = __ldaxr(v41);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v41));
    if (!v67)
    {
      atomic_store(1u, v41);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v41, v48, v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
    }
  }
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v48, v49, v50, v51, v52, v53, v54);
  v68 = (unsigned int *)v126;
  v126 = 0;
  if (v68)
  {
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
    {
      atomic_store(1u, v68);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v68, v48, v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
  }
  do
  {
    v71 = __ldaxr((unsigned int *)v17);
    v72 = v71 - 1;
  }
  while (__stlxr(v72, (unsigned int *)v17));
  if (!v72)
  {
    atomic_store(1u, v124 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v124 + 8))(v124);
  }
  if (v128)
    WTF::fastFree((unint64_t)v128, v48, v49, v50, v51, v52, v53, v54);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &),WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>> JSC::FTL::createLazyCallGenerator<JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(JSC::VM &,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::{lambda(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  uint64_t v11;
  JSC::ARM64LogicalImmediate *v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  JSC::AssemblerBuffer *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint8x8_t v41;
  __int32 v42;
  uint8x8_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  unsigned int v53;
  char v54;
  char v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  _BYTE *v60;
  int v61;
  unsigned __int8 *v62;
  char *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  int v66;
  unsigned __int8 *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int8x8_t v81;
  int v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  unsigned int v86;
  char v87;
  uint64_t v88;
  int *v89;
  int *v90;
  int v91;
  uint64_t v92;
  char *v93;
  int64_t v94;
  char *v95;
  JSC::AssemblerBuffer *v96;
  JSC::ARM64LogicalImmediate *v97;
  uint64_t v98;
  int v99;
  int v100;
  char v101;
  __int16 v102;
  char v103;
  int v104;
  uint64_t v105;
  void *__dst;
  uint64_t v107;
  _WORD v108[8];
  _QWORD v109[9];

  v10 = *(JSC::AssemblerBuffer **)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 48);
  v12 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v11 + 32);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_BYTE *)(a1 + 32);
  v97 = *(JSC::ARM64LogicalImmediate **)(a1 + 40);
  v98 = *(_QWORD *)(a1 + 24);
  v15 = *(unsigned __int8 *)(a1 + 48);
  v16 = *(unsigned __int8 *)(a1 + 49);
  v17 = *(unsigned __int8 *)(a1 + 50);
  v18 = *(unsigned __int8 *)(a1 + 51);
  if ((_DWORD)v12)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197DAE298);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, v12, a2 + 264, a4, a5, a6, a7, a8);
    v24 = *(_DWORD *)(a2 + 200);
    if (v24 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, a7, a8);
      v24 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v24) = -1207811152;
    *(_DWORD *)(a2 + 200) += 4;
  }
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v109, *(_QWORD *)(v11 + 24), a2, 6u, v14, 0xFFFFFFFFLL, a7, a8);
  __dst = v108;
  v107 = 4;
  if (v15 == 1)
  {
    v32 = 0;
  }
  else
  {
    v108[0] = v15 | 0x100;
    v32 = 1;
    HIDWORD(v107) = 1;
  }
  if (v16 != 2)
  {
    v108[v32++] = v16 | 0x200;
    HIDWORD(v107) = v32;
  }
  if (v17 != 3)
  {
    v108[v32++] = v17 | 0x300;
    HIDWORD(v107) = v32;
  }
  if (v18 == 4)
  {
    v33 = &v105;
    if (!v32)
      goto LABEL_72;
  }
  else
  {
    v108[v32++] = v18 | 0x400;
    HIDWORD(v107) = v32;
    v33 = &v105;
  }
  v34 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v35 = 0;
    v36 = 0;
    v37 = (char *)__dst;
    v38 = v32;
    do
    {
      if ((*((_BYTE *)__dst + v35 + 1) & 0x40) != 0)
      {
LABEL_89:
        __break(1u);
        goto LABEL_90;
      }
      v36 |= 1 << *((_BYTE *)__dst + v35 + 1);
      v35 += 2;
    }
    while (2 * v32 != v35);
    v39 = 0;
    do
    {
      v40 = *((_BYTE *)__dst + v39) & 0x7F;
      if (v40 >= 0x40)
        goto LABEL_89;
      v36 &= ~(1 << v40);
      v39 += 2;
    }
    while (2 * v32 != v39);
    v41 = (uint8x8_t)vcnt_s8((int8x8_t)v36);
    v41.i16[0] = vaddlv_u8(v41);
    v42 = v41.i32[0];
    v43 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v36));
    v43.i16[0] = vaddlv_u8(v43);
    if (v43.i32[0] + v42)
    {
      v44 = 0;
      if (v32 <= 1)
        v45 = 1;
      else
        v45 = v32;
      v46 = 2 * v45;
      while (1)
      {
        v47 = *((unsigned __int8 *)__dst + v44 + 1);
        if ((v47 & 0x7Fu) >= 0x40)
          goto LABEL_89;
        if (((v36 >> (v47 & 0x7F)) & 1) != 0)
          break;
        v44 += 2;
        if (v46 == v44)
          goto LABEL_65;
      }
      v48 = *((unsigned __int8 *)__dst + v44);
      if (v48 != v47)
      {
        v49 = (char)v48;
        if ((char)v48 == 63)
        {
          v50 = *(_DWORD *)(a2 + 200);
          v51 = *(_DWORD *)(a2 + 192);
          if ((char)v47 == 31)
            goto LABEL_59;
          v53 = v47 & 0x1F | 0xD2800000;
        }
        else
        {
          v50 = *(_DWORD *)(a2 + 200);
          v51 = *(_DWORD *)(a2 + 192);
          v52 = v47 == 31 || v49 == 31;
          if (!v52)
          {
            v53 = v47 & 0xFFE0FFFF | ((v49 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_60;
          }
LABEL_59:
          v53 = (char)v47 | (32 * v49) | 0x91000000;
        }
LABEL_60:
        if (v50 + 4 > v51)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v34, (uint64_t)v25, v26, v27, v28, v29, v30, v31);
          v50 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v50) = v53;
        *(_DWORD *)(a2 + 200) += 4;
        v37 = (char *)__dst;
        v38 = HIDWORD(v107);
      }
      memmove(&v37[v44], &v37[v44 + 2], 2 * v38 - v44 - 2);
      v32 = HIDWORD(v107) - 1;
      goto LABEL_64;
    }
    v96 = v34;
    v54 = *(_BYTE *)__dst;
    v55 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v55, v27, v28, v29, v30, v31);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v107) - 2);
    v56 = (HIDWORD(v107) - 1);
    v52 = HIDWORD(v107) == 1;
    HIDWORD(v107) = v56;
    v57 = (unsigned __int8 *)__dst;
    v58 = (unsigned __int8 *)__dst + 2 * v56;
    if (v52)
    {
      v65 = 0;
      v66 = 0;
      v61 = 0;
      v25 = v58;
    }
    else
    {
      v59 = 2 * v56;
      v60 = __dst;
      while (*v60 != v55)
      {
        v60 += 2;
        v59 -= 2;
        if (!v59)
          goto LABEL_44;
      }
      *v60 = v54;
LABEL_44:
      v61 = 0;
      v62 = v57;
      v25 = v58;
      v63 = (char *)v58;
      do
      {
        if (*v57 == v57[1])
        {
          v64 = v57;
          if (v63 != (char *)__dst + 2 * HIDWORD(v107))
          {
            v95 = (char *)v58;
            if (v57 == v25)
            {
              v64 = (unsigned __int8 *)v63;
            }
            else
            {
              v93 = v63;
              v94 = v62 - v25;
              memmove(v63, v25, v62 - v25);
              v64 = (unsigned __int8 *)&v93[v94];
            }
            v58 = (unsigned __int8 *)v95;
          }
          v25 = v57 + 2;
          ++v61;
          v63 = (char *)v64;
        }
        v57 += 2;
        v62 += 2;
      }
      while (v57 < v58);
      v57 = (unsigned __int8 *)__dst;
      v65 = HIDWORD(v107);
      v66 = HIDWORD(v107);
      v58 = (unsigned __int8 *)v63;
    }
    v67 = &v57[2 * v65];
    if (v25 != v67)
    {
      memmove(v58, v25, v67 - v25);
      v66 = HIDWORD(v107);
    }
    v32 = v66 - v61;
    v34 = v96;
LABEL_64:
    HIDWORD(v107) = v32;
LABEL_65:
    ;
  }
  while (v32);
  v68 = __dst;
  if (v108 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v107) = 0;
    WTF::fastFree((unint64_t)v68, v25, v26, v27, v28, v29, v30, v31);
  }
LABEL_72:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)v97, 0, v27, v28, v29, v30, v31);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v109, v13, v98, v69, v70, v71, v72, v73, (uint64_t)&__dst);
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v109, v74, v75, v76, v77, v78, v79, v80);
  if (v10)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a2, v13, 0, 0, 0xFFFFFFFFLL, v29, v30, v31, (uint64_t)&v104, v81);
    v82 = v104;
    if (v104 != -1)
    {
      v83 = *((unsigned int *)v10 + 3);
      if ((_DWORD)v83 == *((_DWORD *)v10 + 2))
      {
        v84 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, (void *)(v83 + 1), (unint64_t)&v104, v27, v28, v29, v30, v31);
        v33 = (uint64_t *)(v84 + 1);
        v82 = *v84;
        LODWORD(v83) = *((_DWORD *)v10 + 3);
      }
      v85 = *(_QWORD *)v10 + 12 * v83;
      *(_DWORD *)v85 = v82;
      *(_QWORD *)(v85 + 4) = *v33;
      ++*((_DWORD *)v10 + 3);
    }
  }
  v10 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (LODWORD(v13) = *(_DWORD *)(a2 + 200); (int)v13 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v13)
  {
LABEL_90:
    if ((v13 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)v25, v26, v27, v28, v29, v30, v31);
      LODWORD(v13) = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = -721215457;
    LODWORD(v13) = *(_DWORD *)(a2 + 200) + 4;
  }
  v86 = v13;
  if ((v13 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)v25, v26, v27, v28, v29, v30, v31);
    v86 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v86) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v87 = 69;
  else
    v87 = 65;
  v99 = v13;
  v100 = 0;
  v101 = v87;
  v102 = 15;
  v103 = -1;
  if ((_DWORD)v13 != -1)
  {
    v88 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v88 == *(_DWORD *)(a3 + 8))
    {
      v89 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v88 + 1), (unint64_t)&v99, v27, v28, v29, v30, v31);
      v91 = *v89;
      v90 = v89 + 1;
      v92 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v92 = v91;
    }
    else
    {
      v90 = &v100;
      v92 = *(_QWORD *)a3 + 12 * v88;
      *(_DWORD *)v92 = v13;
    }
    *(_QWORD *)(v92 + 4) = *(_QWORD *)v90;
    ++*(_DWORD *)(a3 + 12);
  }
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_15allocateJSArrayEPNS4_5ValueESG_SG_SG_bbEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS4_15PatchpointValueERKT_RKNSH_ISG_Lm0ESJ_Lm16ESK_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvST_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_15allocateJSArrayEPNS4_5ValueESG_SG_SG_bbEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS4_15PatchpointValueERKT_RKNSH_ISG_Lm0ESJ_Lm16ESK_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvST_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_15allocateJSArrayEPNS4_5ValueESG_SG_SG_bbEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS4_15PatchpointValueERKT_RKNSH_ISG_Lm0ESJ_Lm16ESK_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvST_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::ARM64LogicalImmediate *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  const void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  JSC::ExecutableMemoryHandle *v120[2];

  v10 = (unsigned int *)(a1 + 16);
  v119 = *(_BYTE *)(a2 + 212);
  if (!v119)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v19 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v18 + 308);
  if ((_DWORD)v19 == *(_DWORD *)(v18 + 304))
  {
    WTF::Vector<std::unique_ptr<JSC::FTL::LazySlowPath>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,decltype(nullptr)>(v18 + 296);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v18 + 296) + 8 * (_QWORD)v19) = 0;
    *(_DWORD *)(v18 + 308) = (_DWORD)v19 + 1;
  }
  v20 = *(_DWORD *)(a2 + 200);
  if (v20 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v11, v12, v13, v14, v15, v16, v17);
    v20 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v20) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, v19, 16, v13, v14, v15, v16, v17);
  v28 = *(_DWORD *)(a2 + 200);
  if (v28 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v21, v22, v23, v24, v25, v26, v27);
    v28 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = -134216720;
  v29 = *(_DWORD *)(a2 + 200);
  v30 = v29 + 4;
  *(_DWORD *)(a2 + 200) = v29 + 4;
  if ((v29 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v21, v22, v23, v24, v25, v26, v27);
    v30 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v31 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v31 + 90440), v31, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v23, v24, v25, v26, v27, v120);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v120[0], v32, v33, v34, v35, v36, v37);
  v45 = (unsigned int *)v120[1];
  v120[1] = 0;
  if (v45)
  {
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      atomic_store(1u, v45);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v45, v38, v39, v40, v41, v42, v43, v44);
      WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
    }
  }
  v48 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  if (v48)
  {
    v49 = v48 + 2;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 + 1, v49));
    v51 = *(_DWORD *)(a1 + 16);
    v52 = *(_QWORD *)(a1 + 20);
    v53 = *(_DWORD *)(a1 + 40);
    do
      v54 = __ldaxr(v49);
    while (__stlxr(v54 + 1, v49));
  }
  else
  {
    v51 = *(_DWORD *)(a1 + 16);
    v52 = *(_QWORD *)(a1 + 20);
    v53 = *(_DWORD *)(a1 + 40);
  }
  v55 = *(_QWORD *)(a1 + 48);
  if ((v55 & 1) != 0)
  {
    v93 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
    if ((v55 & 2) != 0
      || ((v94 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v94 != 0x3FFFFFFF)
        ? (v95 = (_DWORD)v94 == -1)
        : (v95 = 1),
          v95))
    {
      v96 = 2;
    }
    else if (v94 >> 28)
    {
      v117 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v117 = v93;
      *(_DWORD *)(v117 + 8) = v94;
      v96 = 1;
      v93 = v117;
    }
    else
    {
      v96 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
      v93 = v94 << 36;
    }
    v55 = v93 | v96;
  }
  v56 = *(unsigned int **)(a1 + 56);
  if (v56)
  {
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 + 1, v56));
  }
  *(_OWORD *)v120 = *(_OWORD *)(a1 + 64);
  v58 = *(unsigned int **)(a1 + 80);
  if (v58)
  {
    v59 = v58 + 2;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  v61 = WTF::fastMalloc((WTF *)0x58);
  v69 = v61;
  *(_DWORD *)(v61 + 8) = 1;
  *(_QWORD *)v61 = &off_1E35767F8;
  *(_DWORD *)(v61 + 16) = v51;
  *(_QWORD *)(v61 + 20) = v52;
  *(_DWORD *)(v61 + 28) = v53;
  if (v48)
  {
    v70 = v48 + 2;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 + 1, v70));
  }
  *(_QWORD *)(v61 + 32) = v48;
  v72 = v55;
  if ((v55 & 1) != 0)
  {
    v97 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
    if ((v55 & 2) != 0
      || ((v98 = *(unsigned int *)((v55 & 0xFFFFFFFF8) + 8), (_DWORD)v98 != 0x3FFFFFFF)
        ? (v99 = (_DWORD)v98 == -1)
        : (v99 = 1),
          v99))
    {
      v100 = 2;
    }
    else if (v98 >> 28)
    {
      v118 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = v97;
      *(_DWORD *)(v118 + 8) = v98;
      v100 = 1;
      v97 = v118;
    }
    else
    {
      v100 = *(_QWORD *)(v55 & 0xFFFFFFFF8);
      v97 = v98 << 36;
    }
    v72 = v97 | v100;
  }
  *(_QWORD *)(v69 + 40) = v72;
  if (v56)
  {
    do
      v73 = __ldaxr(v56);
    while (__stlxr(v73 + 1, v56));
  }
  *(_QWORD *)(v69 + 48) = v56;
  *(_OWORD *)(v69 + 56) = *(_OWORD *)v120;
  if (v58)
  {
    v74 = v58 + 2;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 + 1, v74));
  }
  *(_QWORD *)(v69 + 72) = v58;
  *(_DWORD *)(v69 + 80) = (_DWORD)v19;
  v76 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v76 == *(_DWORD *)(a2 + 240))
  {
    v88 = v76 + (v76 >> 2);
    if (v88 >= 0x10)
      v89 = v88 + 1;
    else
      v89 = 16;
    if (v89 <= v76 + 1)
      v90 = v76 + 1;
    else
      v90 = v89;
    if (v90 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v91 = *(const void **)(a2 + 232);
    v92 = (void *)WTF::fastMalloc((WTF *)(8 * v90));
    *(_DWORD *)(a2 + 240) = v90;
    *(_QWORD *)(a2 + 232) = v92;
    memcpy(v92, v91, 8 * v76);
    if (v91)
    {
      if (*(const void **)(a2 + 232) == v91)
      {
        *(_QWORD *)(a2 + 232) = 0;
        *(_DWORD *)(a2 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v91, v62, v63, v64, v65, v66, v67, v68);
    }
    v76 = *(unsigned int *)(a2 + 244);
    v77 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v76);
  }
  else
  {
    v77 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v76);
  }
  *v77 = v69;
  *(_DWORD *)(a2 + 244) = v76 + 1;
  if (v58)
  {
    v78 = v58 + 2;
    do
    {
      v79 = __ldaxr(v78);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v78));
    if (!v80)
    {
      atomic_store(1u, v58 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
    }
  }
  if (v56)
  {
    do
    {
      v81 = __ldaxr(v56);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v56));
    if (!v82)
    {
      atomic_store(1u, v56);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v56, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  if ((v55 & 1) != 0 && (v55 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v55 & 0xFFFFFFFF8, v62, v63, v64, v65, v66, v67, v68);
  if (v48)
  {
    v83 = v48 + 2;
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    if (!v85)
    {
      atomic_store(1u, v48 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 32))(v48);
    }
    do
    {
      v86 = __ldaxr(v83);
      v87 = v86 - 1;
    }
    while (__stlxr(v87, v83));
    if (!v87)
    {
      atomic_store(1u, v48 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v48 + 32))(v48);
    }
  }
  *(_BYTE *)(a2 + 212) = v119;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_15allocateJSArrayEPNS1_2B35ValueESB_SB_SB_bbEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS9_15PatchpointValueERKT_RKNSC_ISB_Lm0ESE_Lm16ESF_EEENKUlRNS1_12CCallHelpersERKNS9_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_15allocateJSArrayEPNS1_2B35ValueESB_SB_SB_bbEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS9_15PatchpointValueERKT_RKNSC_ISB_Lm0ESE_Lm16ESF_EEENKUlRNS1_12CCallHelpersERKNS9_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_15allocateJSArrayEPNS1_2B35ValueESB_SB_SB_bbEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE0_EEPNS9_15PatchpointValueERKT_RKNSC_ISB_Lm0ESE_Lm16ESF_EEENKUlRNS1_12CCallHelpersERKNS9_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  JSC::FTL::LazySlowPath *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DAEFACLL);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DAEFCCLL);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v62 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v63 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v63 == 0x3FFFFFFF)
      || (_DWORD)v63 == -1)
    {
      v64 = 2;
    }
    else if (v63 >> 28)
    {
      v65 = v62;
      v66 = v63;
      v62 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v62 = v65;
      *(_DWORD *)(v62 + 8) = v66;
      v64 = 1;
    }
    else
    {
      v64 = v62;
      v62 = v63 << 36;
    }
    v16 = v62 | v64;
  }
  v67 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v67);
  if ((v67 & 1) != 0 && (v67 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v67 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DAEFECLL);
    }
  }
  else
  {
    v57 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v57 < 4)
      v58 = 0;
    else
      v58 = *(_DWORD *)((v57 & 0xFFFFFFFC) + a2[3] - 4);
    v59 = (v57 - v58);
    v60 = a2[23];
    v31 = v59 + v60;
    if (v60 > v31 || v60 + a2[1] < v31)
      goto LABEL_64;
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  if (v33)
  {
    v42 = v33 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v33 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    }
  }
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
  {
LABEL_64:
    __break(0xC471u);
    JUMPOUT(0x197DAEF74);
  }
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(JSC::FTL::LazySlowPath **)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    JSC::FTL::LazySlowPath::~LazySlowPath(v48, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
    WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
  }
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *,int,int,unsigned int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  JSC::DFG::Node *v17;

  v15 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationArraySpliceExtract);
  v16 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), v14, v15, *a2, *a3, *a4, *a5, *a6);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,JSC::Butterfly *,JSC::JSString *,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::DFG::Node *v16;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationArrayIndexOfString);
  v15 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), v13, v14, *a2, *a3, *a4, *a5);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<unsigned long long (*)(JSC::Butterfly *,long long,int),JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::DFG::Node *v15;

  v12 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationArrayIndexOfNonStringIdentityValueContiguous);
  v13 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, 2, v12, *a2, *a3, *a4);
  return v13;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<unsigned long long (*)(JSC::Butterfly *,long long,int),JSC::B3::Value *&,JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::DFG::Node *v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  uint64_t v23;

  v12 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationArrayIndexOfValueDouble);
  v13 = *a3;
  v14 = *(_QWORD *)(a1 + 27776);
  v17 = JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::Value **)(a1 + 27760), 2, *(_QWORD *)(a1 + 27768), v12, *a2, v13, *a4);
  v23 = v17;
  v18 = (char **)(v14 + 8);
  v19 = *(unsigned int *)(v14 + 20);
  if ((_DWORD)v19 == *(_DWORD *)(v14 + 16))
  {
    v22 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18, v19 + 1, (unint64_t)&v23);
    v19 = *(unsigned int *)(v14 + 20);
    *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8 * v19) = *(_QWORD *)v22;
    v20 = v23;
  }
  else
  {
    *(_QWORD *)&(*v18)[8 * v19] = v17;
    v20 = v17;
  }
  *(_DWORD *)(v14 + 20) = v19 + 1;
  *(_QWORD *)(v20 + 32) = v14;
  return v17;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,JSC::Butterfly *,long long,int),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  JSC::DFG::Node *v16;

  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationArrayIndexOfValueInt32OrContiguous);
  v15 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), v13, v14, *a2, *a3, *a4, *a5);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSScope *,JSC::SymbolTable *,long long),JSC::B3::Value *&,JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  int v14;
  uint64_t v15;
  JSC::B3::Value *v16;
  JSC::DFG::Node *v17;

  v15 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationCreateActivationDirect);
  v16 = JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((_QWORD *)(a1 + 27640), v14, v15, *a2, *a3, *a4, *a5, *a6);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateActivation(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateActivation(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 64);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateActivation(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateActivation(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 8);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateActivation(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateActivation(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  JSC::AssemblerBuffer *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _OWORD *v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  const JSC::B3::StackmapGenerationParams *v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  _BYTE *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  _BYTE *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned int *v120;
  uint64_t v121;
  JSC::FTL::ExceptionTarget *v122;
  __int128 v123;
  WTF *v124;
  uint64_t v125;

  v124 = 0;
  v125 = 0;
  v3 = *(unsigned int *)(a3 + 20);
  if (!(_DWORD)v3)
    goto LABEL_128;
  v4 = a3;
  v7 = 0;
  v8 = 0;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = (JSC::AssemblerBuffer *)(16 * v3);
  do
  {
    *(_QWORD *)&v123 = JSC::FTL::Location::forValueRep(v9);
    *((_QWORD *)&v123 + 1) = v11;
    if (v8 == (_DWORD)v125)
    {
      v17 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v124, v8 + 1, (unint64_t)&v123);
      v16 = HIDWORD(v125);
      v7 = (unsigned int *)v124;
      *((_OWORD *)v124 + HIDWORD(v125)) = *v17;
    }
    else
    {
      *(_OWORD *)&v7[4 * v8] = v123;
      v16 = HIDWORD(v125);
    }
    v8 = v16 + 1;
    HIDWORD(v125) = v16 + 1;
    v9 += 16;
    v10 = (JSC::AssemblerBuffer *)((char *)v10 - 16);
  }
  while (v10);
  if (v16 == -1)
  {
LABEL_128:
    __break(0xC471u);
    JUMPOUT(0x197DAFD44);
  }
  if (*((_DWORD *)v124 + 3))
    goto LABEL_130;
  if (v8 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DAFD4CLL);
  }
  if (*((_DWORD *)v124 + 7))
  {
    __break(0xC471u);
    JUMPOUT(0x197DAFA98);
  }
  if (v8 <= 2)
  {
LABEL_130:
    __break(0xC471u);
    JUMPOUT(0x197DAFA78);
  }
  if (*((_DWORD *)v124 + 11))
  {
    v27 = "./ftl/FTLLocation.cpp";
    v28 = "GPRReg JSC::FTL::Location::directGPR() const";
    v29 = 399;
    __break(0xC471u);
    goto LABEL_81;
  }
  v18 = *((_BYTE *)v124 + 8) & 0x7F;
  v19 = *((_BYTE *)v124 + 24) & 0x7F;
  v20 = a1;
  v21 = *(_QWORD *)(a1 + 16);
  v22 = *(_QWORD *)(a1 + 24);
  v23 = *((_BYTE *)v124 + 40) & 0x7F;
  v24 = *(_QWORD *)(v20 + 32);
  v25 = *(_QWORD *)(v20 + 40);
  v121 = v20;
  v26 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(v26 + 8) = 1;
  v7 = (unsigned int *)(v26 + 8);
  *(_QWORD *)v26 = off_1E3576848;
  *(_QWORD *)(v26 + 16) = v21;
  *(_QWORD *)(v26 + 24) = operationCreateActivationDirect;
  *(_BYTE *)(v26 + 32) = v18;
  *(_BYTE *)(v26 + 33) = v19;
  *(_QWORD *)(v26 + 40) = v22;
  *(_BYTE *)(v26 + 48) = v23;
  *(_QWORD *)(v26 + 56) = v24;
  *(_QWORD *)(v26 + 64) = v25;
  v9 = v26;
  *(_BYTE *)(a2 + 328) = 1;
  v10 = (JSC::AssemblerBuffer *)(a2 + 56);
  v8 = *(_DWORD *)(a2 + 200);
  if ((signed int)v8 < *(_DWORD *)(a2 + 52))
    goto LABEL_82;
  v30 = (const JSC::B3::StackmapGenerationParams *)v4;
  while (1)
  {
    v31 = v8;
    if (v8 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)v27, (uint64_t)v28, v29, v12, v13, v14, v15);
      v31 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = 335544320;
    v32 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v32;
    if (*(_BYTE *)(a2 + 328))
      v4 = 0xFF000F4500000000;
    else
      v4 = 0xFF000F4100000000;
    for (*(_BYTE *)(a2 + 328) = 0; v32 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v32)
    {
      if ((v32 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)v27, (uint64_t)v28, v29, v12, v13, v14, v15);
        v32 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v32) = -721215457;
      v32 = *(_DWORD *)(a2 + 200) + 4;
    }
    v120 = (unsigned int *)v9;
    *(_DWORD *)(a2 + 208) = 0;
    v9 = *(_QWORD *)(*(_QWORD *)v30 + 104);
    v33 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v30 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)v30 + 96);
    v34 = *((unsigned int *)v30 + 9);
    if ((_DWORD)v34)
    {
      v69 = (_BYTE *)*((_QWORD *)v30 + 3);
      do
      {
        v70 = *v69 & 0x7F;
        if (v70 >= 0x40)
          goto LABEL_81;
        v71 = 1 << v70;
        v33 &= ~v71;
        v9 &= ~v71;
        ++v69;
      }
      while (--v34);
    }
    v35 = *((unsigned int *)v30 + 13);
    if (!(_DWORD)v35)
      break;
    v76 = (_BYTE *)*((_QWORD *)v30 + 5);
    while (1)
    {
      v77 = (*v76 + 32) & 0x7F;
      if (v77 >= 0x40)
        break;
      v78 = 1 << v77;
      v33 &= ~v78;
      v9 &= ~v78;
      ++v76;
      if (!--v35)
        goto LABEL_24;
    }
LABEL_81:
    __break(1u);
LABEL_82:
    v30 = (const JSC::B3::StackmapGenerationParams *)v4;
    do
    {
      if (v8 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)v27, (uint64_t)v28, v29, v12, v13, v14, v15);
        v8 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v8) = -721215457;
      v8 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v8;
    }
    while ((signed int)v8 < *(_DWORD *)(a2 + 52));
  }
LABEL_24:
  v119 = v4;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(v121 + 48), v30, (uint64_t *)&v122);
  v36 = *(_QWORD *)(v121 + 64);
  v118 = *(_QWORD *)(v121 + 56);
  if ((v36 & 1) != 0)
  {
    v79 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
    if ((v36 & 2) != 0
      || ((v80 = *(unsigned int *)((v36 & 0xFFFFFFFF8) + 8), (_DWORD)v80 != 0x3FFFFFFF)
        ? (v81 = (_DWORD)v80 == -1)
        : (v81 = 1),
          v81))
    {
      v82 = 2;
    }
    else if (v80 >> 28)
    {
      v115 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v115 = v79;
      *(_DWORD *)(v115 + 8) = v80;
      v82 = 1;
      v79 = v115;
    }
    else
    {
      v82 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
      v79 = v80 << 36;
    }
    v36 = v79 | v82;
  }
  v37 = (unsigned int *)v122;
  if (v122)
  {
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 + 1, v37));
  }
  do
    v39 = __ldaxr(v7);
  while (__stlxr(v39 + 1, v7));
  v40 = *((_QWORD *)v30 + 7);
  v41 = v36;
  if ((v36 & 1) != 0)
  {
    v83 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
    if ((v36 & 2) != 0
      || ((v84 = *(unsigned int *)((v36 & 0xFFFFFFFF8) + 8), (_DWORD)v84 != 0x3FFFFFFF)
        ? (v85 = (_DWORD)v84 == -1)
        : (v85 = 1),
          v85))
    {
      v86 = 2;
    }
    else if (v84 >> 28)
    {
      v116 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v116 = v83;
      *(_DWORD *)(v116 + 8) = v84;
      v86 = 1;
      v83 = v116;
    }
    else
    {
      v86 = *(_QWORD *)(v36 & 0xFFFFFFFF8);
      v83 = v84 << 36;
    }
    v41 = v83 | v86;
  }
  if (v37)
  {
    do
      v42 = __ldaxr(v37);
    while (__stlxr(v42 + 1, v37));
  }
  do
    v43 = __ldaxr(v7);
  while (__stlxr(v43 + 1, v7));
  v51 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v51 + 8) = 1;
  *(_QWORD *)v51 = &off_1E3576870;
  *(_DWORD *)(v51 + 16) = v8;
  *(_QWORD *)(v51 + 20) = v119;
  *(_QWORD *)(v51 + 32) = v118;
  *(_DWORD *)(v51 + 40) = v32;
  v52 = v41;
  if ((v41 & 1) != 0)
  {
    v87 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
    if ((v41 & 2) != 0
      || ((v88 = *(unsigned int *)((v41 & 0xFFFFFFFF8) + 8), (_DWORD)v88 != 0x3FFFFFFF)
        ? (v89 = (_DWORD)v88 == -1)
        : (v89 = 1),
          v89))
    {
      v90 = 2;
    }
    else if (v88 >> 28)
    {
      v117 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v117 = v87;
      *(_DWORD *)(v117 + 8) = v88;
      v90 = 1;
      v87 = v117;
    }
    else
    {
      v90 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
      v87 = v88 << 36;
    }
    v52 = v87 | v90;
  }
  *(_QWORD *)(v51 + 48) = v52;
  if (v37)
  {
    do
      v53 = __ldaxr(v37);
    while (__stlxr(v53 + 1, v37));
  }
  *(_QWORD *)(v51 + 56) = v37;
  *(_QWORD *)(v51 + 64) = v33;
  *(_QWORD *)(v51 + 72) = v9;
  do
    v54 = __ldaxr(v7);
  while (__stlxr(v54 + 1, v7));
  *(_QWORD *)(v51 + 80) = v120;
  *(_QWORD *)&v123 = v51;
  v55 = *(unsigned int *)(v40 + 12);
  if ((_DWORD)v55 == *(_DWORD *)(v40 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v40, (uint64_t *)&v123);
    v72 = (unsigned int *)v123;
    *(_QWORD *)&v123 = 0;
    if (v72)
    {
      v73 = v72 + 2;
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (!v75)
      {
        atomic_store(1u, v72 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 8))(v72);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v40 + 8 * v55) = v51;
    *(_DWORD *)(v40 + 12) = v55 + 1;
    *(_QWORD *)&v123 = 0;
  }
  do
  {
    v56 = __ldaxr(v7);
    v57 = v56 - 1;
  }
  while (__stlxr(v57, v7));
  if (!v57)
  {
    atomic_store(1u, v120 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v120 + 8))(v120);
  }
  if (v37)
  {
    do
    {
      v58 = __ldaxr(v37);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v37));
    if (!v59)
    {
      atomic_store(1u, v37);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v37, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
  }
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, v44, v45, v46, v47, v48, v49, v50);
  do
  {
    v60 = __ldaxr(v7);
    v61 = v60 - 1;
  }
  while (__stlxr(v61, v7));
  if (!v61)
  {
    atomic_store(1u, v120 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v120 + 8))(v120);
  }
  if (v37)
  {
    do
    {
      v62 = __ldaxr(v37);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v37));
    if (!v63)
    {
      atomic_store(1u, v37);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v37, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
  }
  if ((v36 & 1) != 0 && (v36 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v36 & 0xFFFFFFFF8, v44, v45, v46, v47, v48, v49, v50);
  v64 = (unsigned int *)v122;
  v122 = 0;
  if (v64)
  {
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
    {
      atomic_store(1u, v64);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v64, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
    }
  }
  do
  {
    v67 = __ldaxr(v7);
    v68 = v67 - 1;
  }
  while (__stlxr(v68, v7));
  if (!v68)
  {
    atomic_store(1u, v120 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v120 + 8))(v120);
  }
  if (v124)
    WTF::fastFree((unint64_t)v124, v44, v45, v46, v47, v48, v49, v50);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &),WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>> JSC::FTL::createLazyCallGenerator<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64>(JSC::VM &,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64)::{lambda(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  uint64_t v11;
  JSC::ARM64LogicalImmediate *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint8x8_t v39;
  __int32 v40;
  uint8x8_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  char v52;
  char v53;
  uint64_t v54;
  unsigned __int8 *v55;
  char *v56;
  uint64_t v57;
  _BYTE *v58;
  unsigned __int8 *v59;
  char *v60;
  unsigned __int8 *v61;
  uint64_t v62;
  unsigned int v63;
  char *v64;
  int v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int8x8_t v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t *v92;
  int v93;
  _DWORD *v94;
  uint64_t *v95;
  _DWORD *v96;
  unsigned int v97;
  char v98;
  uint64_t v99;
  int *v100;
  int *v101;
  int v102;
  uint64_t v103;
  int64_t v104;
  int v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  char v112;
  __int16 v113;
  char v114;
  int v115;
  uint64_t v116;
  void *__dst;
  int v118;
  unsigned int v119;
  _WORD v120[8];
  _QWORD v121[9];

  v10 = *(JSC::AssemblerBuffer **)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 48);
  v12 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v11 + 32);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  v16 = *(unsigned __int8 *)(a1 + 33);
  v17 = *(unsigned __int8 *)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 56);
  v108 = *(_QWORD *)(a1 + 64);
  v109 = *(_QWORD *)(a1 + 40);
  if ((_DWORD)v12)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197DB03D4);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, v12, a2 + 264, a4, a5, a6, a7, a8);
    v24 = *(_DWORD *)(a2 + 200);
    if (v24 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, a7, a8);
      v24 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v24) = -1207811152;
    *(_DWORD *)(a2 + 200) += 4;
  }
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v121, *(_QWORD *)(v11 + 24), a2, 6u, v15, 0xFFFFFFFFLL, a7, a8);
  __dst = v120;
  v118 = 2;
  if (!v16)
  {
    if (v17 == 2)
      goto LABEL_66;
    v32 = 0;
    goto LABEL_11;
  }
  v120[0] = v16;
  v32 = 1;
  v119 = 1;
  if (v17 != 2)
  {
LABEL_11:
    v120[v32++] = v17 | 0x200;
    v119 = v32;
    goto LABEL_12;
  }
  do
  {
LABEL_12:
    v33 = 0;
    v34 = 0;
    v35 = (char *)__dst;
    v36 = v32;
    do
    {
      if ((*((_BYTE *)__dst + v33 + 1) & 0x40) != 0)
      {
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
      v34 |= 1 << *((_BYTE *)__dst + v33 + 1);
      v33 += 2;
    }
    while (2 * v32 != v33);
    v37 = 0;
    do
    {
      v38 = *((_BYTE *)__dst + v37) & 0x7F;
      if (v38 >= 0x40)
        goto LABEL_85;
      v34 &= ~(1 << v38);
      v37 += 2;
    }
    while (2 * v32 != v37);
    v39 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
    v39.i16[0] = vaddlv_u8(v39);
    v40 = v39.i32[0];
    v41 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v34));
    v41.i16[0] = vaddlv_u8(v41);
    if (v41.i32[0] + v40)
    {
      v42 = 0;
      if (v32 <= 1)
        v43 = 1;
      else
        v43 = v32;
      v44 = 2 * v43;
      while (1)
      {
        v45 = *((unsigned __int8 *)__dst + v42 + 1);
        if ((v45 & 0x7Fu) >= 0x40)
          goto LABEL_85;
        if (((v34 >> (v45 & 0x7F)) & 1) != 0)
          break;
        v42 += 2;
        if (v44 == v42)
          goto LABEL_62;
      }
      v46 = *((unsigned __int8 *)__dst + v42);
      if (v46 != v45)
      {
        v47 = (char)v46;
        if ((char)v46 == 63)
        {
          v48 = *(_DWORD *)(a2 + 200);
          v49 = *(_DWORD *)(a2 + 192);
          if ((char)v45 == 31)
            goto LABEL_56;
          v51 = v45 & 0x1F | 0xD2800000;
        }
        else
        {
          v48 = *(_DWORD *)(a2 + 200);
          v49 = *(_DWORD *)(a2 + 192);
          v50 = v45 == 31 || v47 == 31;
          if (!v50)
          {
            v51 = v45 & 0xFFE0FFFF | ((v47 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_57;
          }
LABEL_56:
          v51 = (char)v45 | (32 * v47) | 0x91000000;
        }
LABEL_57:
        if (v48 + 4 > v49)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v25, v26, v27, v28, v29, v30, v31);
          v48 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v48) = v51;
        *(_DWORD *)(a2 + 200) += 4;
        v35 = (char *)__dst;
        v36 = v119;
      }
      memmove(&v35[v42], &v35[v42 + 2], 2 * v36 - v42 - 2);
      v32 = v119 - 1;
      goto LABEL_61;
    }
    v107 = v14;
    v52 = *(_BYTE *)__dst;
    v53 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v53, v27, v28, v29, v30, v31);
    memmove(__dst, (char *)__dst + 2, 2 * v119 - 2);
    v54 = v119 - 1;
    v50 = v119 == 1;
    v119 = v54;
    v55 = (unsigned __int8 *)__dst;
    v56 = (char *)__dst + 2 * v54;
    if (v50)
    {
      v62 = 0;
      v63 = 0;
      v25 = (char *)__dst + 2 * v54;
    }
    else
    {
      v57 = 2 * v54;
      v58 = __dst;
      while (*v58 != v53)
      {
        v58 += 2;
        v57 -= 2;
        if (!v57)
          goto LABEL_40;
      }
      *v58 = v52;
LABEL_40:
      LODWORD(v54) = 0;
      v59 = v55;
      v25 = v56;
      v60 = v56;
      do
      {
        if (*v55 == v55[1])
        {
          v61 = v55;
          if (v60 != (char *)__dst + 2 * v119)
          {
            v105 = v54;
            v106 = v56;
            if (v55 == (unsigned __int8 *)v25)
            {
              v61 = (unsigned __int8 *)v60;
            }
            else
            {
              v104 = v59 - (unsigned __int8 *)v25;
              memmove(v60, v25, v59 - (unsigned __int8 *)v25);
              v61 = (unsigned __int8 *)&v60[v104];
            }
            v56 = v106;
            LODWORD(v54) = v105;
          }
          v25 = (char *)(v55 + 2);
          LODWORD(v54) = v54 + 1;
          v60 = (char *)v61;
        }
        v55 += 2;
        v59 += 2;
      }
      while (v55 < (unsigned __int8 *)v56);
      v55 = (unsigned __int8 *)__dst;
      v62 = v119;
      v63 = v119;
      v56 = v60;
    }
    v64 = (char *)&v55[2 * v62];
    v14 = v107;
    if (v25 != v64)
    {
      v65 = v54;
      memmove(v56, v25, v64 - v25);
      LODWORD(v54) = v65;
      v63 = v119;
    }
    v32 = v63 - v54;
LABEL_61:
    v119 = v32;
LABEL_62:
    ;
  }
  while (v32);
  v66 = __dst;
  if (v120 != __dst && __dst)
  {
    __dst = 0;
    v118 = 0;
    WTF::fastFree((unint64_t)v66, v25, v26, v27, v28, v29, v30, v31);
  }
LABEL_66:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v108, 4, v27, v28, v29, v30, v31);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v18, 3, v67, v68, v69, v70, v71);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v109, 1, v72, v73, v74, v75, v76);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v121, v13, v14, v77, v78, v79, v80, v81, (uint64_t)&__dst);
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v121, v82, v83, v84, v85, v86, v87, v88);
  if (v10)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a2, v13, 0, 0, 0xFFFFFFFFLL, v29, v30, v31, (uint64_t)&v115, v89);
    if (v115 != -1)
    {
      v90 = *((unsigned int *)v10 + 3);
      if ((_DWORD)v90 == *((_DWORD *)v10 + 2))
      {
        v91 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, (void *)(v90 + 1), (unint64_t)&v115, v27, v28, v29, v30, v31);
        v93 = *v91;
        v92 = (uint64_t *)(v91 + 1);
        v94 = (_DWORD *)(*(_QWORD *)v10 + 12 * *((unsigned int *)v10 + 3));
        *v94 = v93;
        v95 = (uint64_t *)(v94 + 1);
      }
      else
      {
        v96 = (_DWORD *)(*(_QWORD *)v10 + 12 * v90);
        *v96 = v115;
        v95 = (uint64_t *)(v96 + 1);
        v92 = &v116;
      }
      *v95 = *v92;
      ++*((_DWORD *)v10 + 3);
    }
  }
  v10 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (LODWORD(v13) = *(_DWORD *)(a2 + 200); (int)v13 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v13)
  {
LABEL_86:
    if ((v13 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)v25, v26, v27, v28, v29, v30, v31);
      LODWORD(v13) = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = -721215457;
    LODWORD(v13) = *(_DWORD *)(a2 + 200) + 4;
  }
  v97 = v13;
  if ((v13 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)v25, v26, v27, v28, v29, v30, v31);
    v97 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v97) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v98 = 69;
  else
    v98 = 65;
  v110 = v13;
  v111 = 0;
  v112 = v98;
  v113 = 15;
  v114 = -1;
  if ((_DWORD)v13 != -1)
  {
    v99 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v99 == *(_DWORD *)(a3 + 8))
    {
      v100 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v99 + 1), (unint64_t)&v110, v27, v28, v29, v30, v31);
      v102 = *v100;
      v101 = v100 + 1;
      v103 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v103 = v102;
    }
    else
    {
      v101 = &v111;
      v103 = *(_QWORD *)a3 + 12 * v99;
      *(_DWORD *)v103 = v13;
    }
    *(_QWORD *)(v103 + 4) = *(_QWORD *)v101;
    ++*(_DWORD *)(a3 + 12);
  }
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_23compileCreateActivationEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_23compileCreateActivationEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_23compileCreateActivationEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  const void *v94;
  void *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  const void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  JSC::ExecutableMemoryHandle *v128[2];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v20 = *(unsigned int *)(v19 + 308);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 304))
  {
    v91 = v20 + (v20 >> 2);
    if (v91 >= 0x10)
      v92 = v91 + 1;
    else
      v92 = 16;
    if (v92 <= v20 + 1)
      v93 = v20 + 1;
    else
      v93 = v92;
    if (v93 >> 29)
    {
      __break(0xC471u);
      goto LABEL_107;
    }
    v94 = *(const void **)(v19 + 296);
    v95 = (void *)WTF::fastMalloc((WTF *)(8 * v93));
    *(_DWORD *)(v19 + 304) = v93;
    *(_QWORD *)(v19 + 296) = v95;
    memcpy(v95, v94, 8 * v20);
    if (v94)
    {
      if (*(const void **)(v19 + 296) == v94)
      {
        *(_QWORD *)(v19 + 296) = 0;
        *(_DWORD *)(v19 + 304) = 0;
      }
      WTF::fastFree((unint64_t)v94, v12, v13, v14, v15, v16, v17, v18);
    }
    v22 = *(unsigned int *)(v19 + 308);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v22);
  }
  else
  {
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v20);
    LODWORD(v22) = *(_DWORD *)(v19 + 308);
  }
  *v21 = 0;
  *(_DWORD *)(v19 + 308) = v22 + 1;
  v23 = *(_DWORD *)(a2 + 200);
  if (v23 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v23 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v23) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v20, 16, v14, v15, v16, v17, v18);
  v31 = *(_DWORD *)(a2 + 200);
  if (v31 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v24, v25, v26, v27, v28, v29, v30);
    v31 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = -134216720;
  v32 = *(_DWORD *)(a2 + 200);
  v33 = v32 + 4;
  *(_DWORD *)(a2 + 200) = v32 + 4;
  if ((v32 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v24, v25, v26, v27, v28, v29, v30);
    v33 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v34 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v34 + 90440), v34, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v26, v27, v28, v29, v30, v128);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v128[0], v35, v36, v37, v38, v39, v40);
  v48 = (unsigned int *)v128[1];
  v128[1] = 0;
  if (v48)
  {
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      atomic_store(1u, v48);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v48, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  v51 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  v127 = v11;
  if (v51)
  {
    v52 = v51 + 2;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 + 1, v52));
    v54 = *(_DWORD *)(a1 + 16);
    v55 = *(_QWORD *)(a1 + 20);
    v56 = *(_DWORD *)(a1 + 40);
    do
      v57 = __ldaxr(v52);
    while (__stlxr(v57 + 1, v52));
  }
  else
  {
    v54 = *(_DWORD *)(a1 + 16);
    v55 = *(_QWORD *)(a1 + 20);
    v56 = *(_DWORD *)(a1 + 40);
  }
  v58 = *(_QWORD *)(a1 + 48);
  if ((v58 & 1) != 0)
  {
    v101 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
    if ((v58 & 2) != 0
      || ((v102 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
        ? (v103 = (_DWORD)v102 == -1)
        : (v103 = 1),
          v103))
    {
      v104 = 2;
    }
    else if (v102 >> 28)
    {
      v125 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v125 = v101;
      *(_DWORD *)(v125 + 8) = v102;
      v104 = 1;
      v101 = v125;
    }
    else
    {
      v104 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    v58 = v101 | v104;
  }
  v59 = *(unsigned int **)(a1 + 56);
  if (v59)
  {
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  *(_OWORD *)v128 = *(_OWORD *)(a1 + 64);
  v61 = *(unsigned int **)(a1 + 80);
  if (v61)
  {
    v62 = v61 + 2;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 + 1, v62));
  }
  v64 = WTF::fastMalloc((WTF *)0x58);
  v72 = v64;
  *(_DWORD *)(v64 + 8) = 1;
  *(_QWORD *)v64 = &off_1E3576898;
  *(_DWORD *)(v64 + 16) = v54;
  *(_QWORD *)(v64 + 20) = v55;
  *(_DWORD *)(v64 + 28) = v56;
  if (v51)
  {
    v73 = v51 + 2;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 + 1, v73));
  }
  *(_QWORD *)(v64 + 32) = v51;
  v75 = v58;
  if ((v58 & 1) != 0)
  {
    v105 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
    if ((v58 & 2) != 0
      || ((v106 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v126 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v126 = v105;
      *(_DWORD *)(v126 + 8) = v106;
      v108 = 1;
      v105 = v126;
    }
    else
    {
      v108 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v75 = v105 | v108;
  }
  *(_QWORD *)(v72 + 40) = v75;
  if (v59)
  {
    do
      v76 = __ldaxr(v59);
    while (__stlxr(v76 + 1, v59));
  }
  *(_QWORD *)(v72 + 48) = v59;
  *(_OWORD *)(v72 + 56) = *(_OWORD *)v128;
  if (v61)
  {
    v77 = v61 + 2;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 + 1, v77));
  }
  *(_QWORD *)(v72 + 72) = v61;
  *(_DWORD *)(v72 + 80) = v20;
  v79 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v79 != *(_DWORD *)(a2 + 240))
  {
    v80 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v79);
    goto LABEL_37;
  }
  v96 = v79 + (v79 >> 2);
  if (v96 >= 0x10)
    v97 = v96 + 1;
  else
    v97 = 16;
  if (v97 <= v79 + 1)
    v98 = v79 + 1;
  else
    v98 = v97;
  if (v98 >> 29)
  {
    __break(0xC471u);
LABEL_107:
    JUMPOUT(0x197DB0C08);
  }
  v99 = *(const void **)(a2 + 232);
  v100 = (void *)WTF::fastMalloc((WTF *)(8 * v98));
  *(_DWORD *)(a2 + 240) = v98;
  *(_QWORD *)(a2 + 232) = v100;
  memcpy(v100, v99, 8 * v79);
  if (v99)
  {
    if (*(const void **)(a2 + 232) == v99)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v99, v65, v66, v67, v68, v69, v70, v71);
  }
  v79 = *(unsigned int *)(a2 + 244);
  v80 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v79);
LABEL_37:
  *v80 = v72;
  *(_DWORD *)(a2 + 244) = v79 + 1;
  if (v61)
  {
    v81 = v61 + 2;
    do
    {
      v82 = __ldaxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
    {
      atomic_store(1u, v61 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 8))(v61);
    }
  }
  if (v59)
  {
    do
    {
      v84 = __ldaxr(v59);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v59));
    if (!v85)
    {
      atomic_store(1u, v59);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v59, v65, v66, v67, v68, v69, v70, v71);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
  }
  if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v58 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
  if (v51)
  {
    v86 = v51 + 2;
    do
    {
      v87 = __ldaxr(v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, v86));
    if (!v88)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 32))(v51);
    }
    do
    {
      v89 = __ldaxr(v86);
      v90 = v89 - 1;
    }
    while (__stlxr(v90, v86));
    if (!v90)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 32))(v51);
    }
  }
  *(_BYTE *)(a2 + 212) = v127;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_23compileCreateActivationEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_23compileCreateActivationEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_23compileCreateActivationEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DB11BCLL);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DB11DCLL);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DB11FCLL);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
      goto LABEL_73;
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  if (v33)
  {
    v42 = v33 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v33 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    }
  }
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
  {
LABEL_73:
    __break(0xC471u);
    JUMPOUT(0x197DB1184);
  }
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lowNonNullObject(uint64_t a1, unint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  JSC::B3::Value *v25;
  uint64_t v26;
  JSC::B3::Value *v27;
  JSC::B3::Value *v28;
  JSC::B3::Value *v29;
  uint64_t v30;
  uint64_t v31;
  int8x8_t v32;
  JSC::B3::Value *v34;
  JSC::B3::Value *v35;
  JSC::B3::Value *v36;
  JSC::B3::Value *v37;
  int8x8_t v38;

  v18 = *(_QWORD *)(a1 + 28152);
  v19 = *(_QWORD *)(v18 + 8);
  v20 = (_QWORD *)(v19 + 24);
  v21 = (_QWORD *)(v19 + 8);
  if ((a2 & 1) != 0)
    v21 = v20;
  v22 = *v21 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v23 = (void *)*(unsigned int *)(v18 + 88);
  if ((_DWORD)v23 != *(_DWORD *)(v22 + 20))
  {
    if ((*(_QWORD *)(v22 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v22, v23, v11, v12, v13, v14, v15, v16);
    else
      *(_DWORD *)(v22 + 20) = (_DWORD)v23;
  }
  if ((*(_QWORD *)(v22 + 8) & 0xFFFFDFFFF0000008) != 0)
  {
    v24 = *(_QWORD *)(a1 + 3160);
    if (v24)
    {
      v25 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v24);
      v26 = JSC::FTL::Output::add((JSC::FTL::Output *)(a1 + 27640), v17, v25);
    }
    else
    {
      v26 = (uint64_t)v17;
    }
    v27 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((_QWORD *)(a1 + 27640), a1 + 3136, v26);
    v28 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 23);
    v29 = JSC::FTL::Output::below((JSC::FTL::Output *)(a1 + 27640), v27, v28);
  }
  if ((JSC::DFG::Graph::isWatchingObjectPrototypeChainIsSaneWatchpoint(*(JSC::DFG::Graph **)a1, *(JSC::DFG::Node **)(a1 + 28224), v11, v12, v13, v14, v15, v16) & 1) == 0)
  {
    v34 = (JSC::B3::Value *)JSC::FTL::Output::load8ZeroExt32((JSC::FTL::Output *)(a1 + 27640), v17, (const JSC::FTL::AbstractHeap *)(a1 + 3088));
    v35 = (JSC::B3::Value *)JSC::FTL::Output::constInt32((JSC::FTL::Output *)(a1 + 27640), 1);
    v36 = JSC::FTL::Output::bitAnd((JSC::FTL::Output *)(a1 + 27640), v34, v35);
    v37 = JSC::FTL::Output::notZero32((JSC::FTL::Output *)(a1 + 27640), v36);
  }
  return v17;
}

uint64_t JSC::DFG::Graph::isWatchingObjectPrototypeChainIsSaneWatchpoint(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v9 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v10 = *((_QWORD *)this + 4);
LABEL_3:
    v11 = (_QWORD *)(v9 & 0xFFFFFFFF8);
    v12 = 1;
    v13 = 1;
LABEL_4:
    v14 = v11;
    goto LABEL_5;
  }
  v17 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
  if ((v9 & 2) != 0
    || ((v18 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v18 != 0x3FFFFFFF) ? (v19 = v18 == -1) : (v19 = 1), v19))
  {
    v20 = 2;
  }
  else if (v18 >> 28)
  {
    v26 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v26 = v17;
    *(_DWORD *)(v26 + 8) = v18;
    v20 = 1;
    v17 = v26;
  }
  else
  {
    v20 = v17;
    v17 = 0;
  }
  v9 = v17 | v20;
  v10 = *((_QWORD *)this + 4);
  if ((v9 & 1) == 0)
    goto LABEL_3;
  v21 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
  if ((v9 & 2) != 0
    || ((v22 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v22 != 0x3FFFFFFF) ? (v23 = v22 == -1) : (v23 = 1), v23))
  {
    v24 = 2;
  }
  else if (v22 >> 28)
  {
    v27 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8);
    v28 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v28 = v21;
    *(_DWORD *)(v28 + 8) = v27;
    v24 = 1;
    v21 = v28;
  }
  else
  {
    v24 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    v21 = 0;
  }
  v25 = v21 | v24;
  v11 = (_QWORD *)(v25 & 0xFFFFFFFF8);
  if ((v25 & 1) == 0)
  {
    v13 = 0;
    v12 = 1;
    goto LABEL_4;
  }
  v12 = 0;
  v13 = 0;
  v14 = (_QWORD *)*v11;
LABEL_5:
  if (v14)
    v10 = v14[1];
  v15 = *(_QWORD *)(v10 + 8);
  if ((v12 & 1) == 0 && v11)
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  if ((v13 & 1) == 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return JSC::DFG::Graph::isWatchingGlobalObjectWatchpoint<JSC::InlineWatchpointSet>((uint64_t)this, v15, (JSC::InlineWatchpointSet *)(v15 + 2312), 16, a5, a6, a7, a8);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSGeneratorFunction,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v4;
  JSC::FTL::Output *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (*(_DWORD *)(v4 + 38324) <= 0x1Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = (JSC::FTL::Output *)(a1 + 27640);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v4 + 38264);
    v11 = JSC::FTL::Output::constInt64(v9, a2);
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int *v9;
  uint64_t v13;
  WTF *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  _OWORD *v18;
  void *v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  _BYTE *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  _BYTE *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unsigned int *v121;
  JSC::FTL::ExceptionTarget *v122;
  __int128 v123;
  WTF *v124;
  uint64_t v125;

  v124 = 0;
  v125 = 0;
  v13 = *((unsigned int *)a3 + 5);
  if ((_DWORD)v13)
  {
    v14 = 0;
    LODWORD(v15) = 0;
    v8 = *((_QWORD *)a3 + 1);
    v9 = (unsigned int *)(16 * v13);
    do
    {
      *(_QWORD *)&v123 = JSC::FTL::Location::forValueRep(v8);
      *((_QWORD *)&v123 + 1) = v16;
      if ((_DWORD)v15 == (_DWORD)v125)
      {
        v18 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v124, v15 + 1, (unint64_t)&v123);
        v17 = HIDWORD(v125);
        v14 = v124;
        *((_OWORD *)v124 + HIDWORD(v125)) = *v18;
      }
      else
      {
        *((_OWORD *)v14 + v15) = v123;
        v17 = HIDWORD(v125);
      }
      v15 = (v17 + 1);
      HIDWORD(v125) = v17 + 1;
      v8 += 16;
      v9 -= 4;
    }
    while (v9);
  }
  else
  {
    v15 = 0;
  }
  if (*(_BYTE *)(a1 + 24))
  {
    v19 = operationNewGeneratorFunctionWithInvalidatedReallocationWatchpoint;
  }
  else if (*(_BYTE *)(a1 + 25))
  {
    v19 = operationNewAsyncFunctionWithInvalidatedReallocationWatchpoint;
  }
  else if (*(_BYTE *)(a1 + 26))
  {
    v19 = operationNewAsyncGeneratorFunctionWithInvalidatedReallocationWatchpoint;
  }
  else
  {
    v19 = operationNewFunctionWithInvalidatedReallocationWatchpoint;
  }
  if (!(_DWORD)v15)
  {
    __break(0xC471u);
    JUMPOUT(0x197DB1FD8);
  }
  if (*((_DWORD *)v124 + 3))
    goto LABEL_137;
  if (v15 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DB1FE0);
  }
  if (*((_DWORD *)v124 + 7))
  {
    __break(0xC471u);
    JUMPOUT(0x197DB1D28);
  }
  if (v15 <= 2)
  {
LABEL_137:
    __break(0xC471u);
    JUMPOUT(0x197DB1D08);
  }
  if (*((_DWORD *)v124 + 11))
  {
    v26 = "./ftl/FTLLocation.cpp";
    v27 = "GPRReg JSC::FTL::Location::directGPR() const";
    v28 = 399;
    __break(0xC471u);
    goto LABEL_89;
  }
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *((_BYTE *)v124 + 8) & 0x7F;
  v22 = *((_BYTE *)v124 + 24) & 0x7F;
  v23 = *((_BYTE *)v124 + 40) & 0x7F;
  v24 = *(_QWORD *)(a1 + 32);
  v25 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v25 + 8) = 1;
  v9 = (unsigned int *)(v25 + 8);
  *(_QWORD *)v25 = off_1E35768E8;
  *(_QWORD *)(v25 + 16) = v20;
  *(_QWORD *)(v25 + 24) = v19;
  *(_BYTE *)(v25 + 32) = v21;
  *(_BYTE *)(v25 + 33) = v22;
  *(_BYTE *)(v25 + 34) = v23;
  *(_QWORD *)(v25 + 40) = v24;
  v8 = v25;
  *(_BYTE *)(a2 + 328) = 1;
  v15 = a2 + 56;
  LODWORD(v19) = *(_DWORD *)(a2 + 200);
  if ((int)v19 < *(_DWORD *)(a2 + 52))
    goto LABEL_90;
  while (1)
  {
    v29 = v19;
    if (((_DWORD)v19 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v15, (uint64_t)v26, (uint64_t)v27, v28, a5, a6, a7, a8);
      v29 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v29) = 335544320;
    v30 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v30;
    if (*(_BYTE *)(a2 + 328))
      v31 = 0xFF000F4500000000;
    else
      v31 = 0xFF000F4100000000;
    for (*(_BYTE *)(a2 + 328) = 0; v30 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v30)
    {
      if ((v30 + 4) > *(_DWORD *)(a2 + 192))
      {
        v115 = v31;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v15, (uint64_t)v26, (uint64_t)v27, v28, a5, a6, a7, a8);
        v31 = v115;
        v30 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v30) = -721215457;
      v30 = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
    v15 = *(_QWORD *)(*(_QWORD *)a3 + 104);
    v32 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
    v33 = *((unsigned int *)a3 + 9);
    if ((_DWORD)v33)
    {
      v69 = (_BYTE *)*((_QWORD *)a3 + 3);
      do
      {
        v70 = *v69 & 0x7F;
        if (v70 >= 0x40)
          goto LABEL_89;
        v71 = 1 << v70;
        v32 &= ~v71;
        v15 &= ~v71;
        ++v69;
      }
      while (--v33);
    }
    v34 = *((unsigned int *)a3 + 13);
    if (!(_DWORD)v34)
      break;
    v76 = (_BYTE *)*((_QWORD *)a3 + 5);
    while (1)
    {
      v77 = (*v76 + 32) & 0x7F;
      if (v77 >= 0x40)
        break;
      v78 = 1 << v77;
      v32 &= ~v78;
      v15 &= ~v78;
      ++v76;
      if (!--v34)
        goto LABEL_29;
    }
LABEL_89:
    __break(1u);
    do
    {
LABEL_90:
      if (((_DWORD)v19 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v15, (uint64_t)v26, (uint64_t)v27, v28, a5, a6, a7, a8);
        LODWORD(v19) = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v19) = -721215457;
      LODWORD(v19) = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = (_DWORD)v19;
    }
    while ((int)v19 < *(_DWORD *)(a2 + 52));
  }
LABEL_29:
  v120 = v31;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 40), a3, (uint64_t *)&v122);
  v35 = *(_QWORD *)(a1 + 56);
  v119 = *(_QWORD *)(a1 + 48);
  if ((v35 & 1) != 0)
  {
    v79 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
    if ((v35 & 2) != 0
      || ((v80 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v80 != 0x3FFFFFFF)
        ? (v81 = (_DWORD)v80 == -1)
        : (v81 = 1),
          v81))
    {
      v82 = 2;
    }
    else if (v80 >> 28)
    {
      v116 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v116 = v79;
      *(_DWORD *)(v116 + 8) = v80;
      v82 = 1;
      v79 = v116;
    }
    else
    {
      v82 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
      v79 = v80 << 36;
    }
    v35 = v79 | v82;
  }
  v121 = (unsigned int *)v8;
  v36 = (unsigned int *)v122;
  if (v122)
  {
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = v15;
  do
    v39 = __ldaxr(v9);
  while (__stlxr(v39 + 1, v9));
  v40 = *((_QWORD *)a3 + 7);
  v41 = v35;
  if ((v35 & 1) != 0)
  {
    v83 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
    if ((v35 & 2) != 0
      || ((v84 = *(unsigned int *)((v35 & 0xFFFFFFFF8) + 8), (_DWORD)v84 != 0x3FFFFFFF)
        ? (v85 = (_DWORD)v84 == -1)
        : (v85 = 1),
          v85))
    {
      v86 = 2;
    }
    else if (v84 >> 28)
    {
      v117 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v117 = v83;
      *(_DWORD *)(v117 + 8) = v84;
      v86 = 1;
      v83 = v117;
    }
    else
    {
      v86 = *(_QWORD *)(v35 & 0xFFFFFFFF8);
      v83 = v84 << 36;
    }
    v41 = v83 | v86;
  }
  if (v36)
  {
    do
      v42 = __ldaxr(v36);
    while (__stlxr(v42 + 1, v36));
  }
  do
    v43 = __ldaxr(v9);
  while (__stlxr(v43 + 1, v9));
  v51 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v51 + 8) = 1;
  *(_QWORD *)v51 = &off_1E3576910;
  *(_DWORD *)(v51 + 16) = (_DWORD)v19;
  *(_QWORD *)(v51 + 20) = v120;
  *(_QWORD *)(v51 + 32) = v119;
  *(_DWORD *)(v51 + 40) = v30;
  v52 = v41;
  if ((v41 & 1) != 0)
  {
    v87 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
    if ((v41 & 2) != 0
      || ((v88 = *(unsigned int *)((v41 & 0xFFFFFFFF8) + 8), (_DWORD)v88 != 0x3FFFFFFF)
        ? (v89 = (_DWORD)v88 == -1)
        : (v89 = 1),
          v89))
    {
      v90 = 2;
    }
    else if (v88 >> 28)
    {
      v118 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v118 = v87;
      *(_DWORD *)(v118 + 8) = v88;
      v90 = 1;
      v87 = v118;
    }
    else
    {
      v90 = *(_QWORD *)(v41 & 0xFFFFFFFF8);
      v87 = v88 << 36;
    }
    v52 = v87 | v90;
  }
  *(_QWORD *)(v51 + 48) = v52;
  if (v36)
  {
    do
      v53 = __ldaxr(v36);
    while (__stlxr(v53 + 1, v36));
  }
  *(_QWORD *)(v51 + 56) = v36;
  *(_QWORD *)(v51 + 64) = v32;
  *(_QWORD *)(v51 + 72) = v38;
  do
    v54 = __ldaxr(v9);
  while (__stlxr(v54 + 1, v9));
  *(_QWORD *)(v51 + 80) = v121;
  *(_QWORD *)&v123 = v51;
  v55 = *(unsigned int *)(v40 + 12);
  if ((_DWORD)v55 == *(_DWORD *)(v40 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v40, (uint64_t *)&v123);
    v72 = (unsigned int *)v123;
    *(_QWORD *)&v123 = 0;
    if (v72)
    {
      v73 = v72 + 2;
      do
      {
        v74 = __ldaxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (!v75)
      {
        atomic_store(1u, v72 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 8))(v72);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v40 + 8 * v55) = v51;
    *(_DWORD *)(v40 + 12) = v55 + 1;
    *(_QWORD *)&v123 = 0;
  }
  do
  {
    v56 = __ldaxr(v9);
    v57 = v56 - 1;
  }
  while (__stlxr(v57, v9));
  if (!v57)
  {
    atomic_store(1u, v121 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v121 + 8))(v121);
  }
  if (v36)
  {
    do
    {
      v58 = __ldaxr(v36);
      v59 = v58 - 1;
    }
    while (__stlxr(v59, v36));
    if (!v59)
    {
      atomic_store(1u, v36);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v36, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
  }
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, v44, v45, v46, v47, v48, v49, v50);
  do
  {
    v60 = __ldaxr(v9);
    v61 = v60 - 1;
  }
  while (__stlxr(v61, v9));
  if (!v61)
  {
    atomic_store(1u, v121 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v121 + 8))(v121);
  }
  if (v36)
  {
    do
    {
      v62 = __ldaxr(v36);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v36));
    if (!v63)
    {
      atomic_store(1u, v36);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v36, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
  }
  if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v35 & 0xFFFFFFFF8, v44, v45, v46, v47, v48, v49, v50);
  v64 = (unsigned int *)v122;
  v122 = 0;
  if (v64)
  {
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
    {
      atomic_store(1u, v64);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v64, v44, v45, v46, v47, v48, v49, v50);
      WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
    }
  }
  do
  {
    v67 = __ldaxr(v9);
    v68 = v67 - 1;
  }
  while (__stlxr(v68, v9));
  if (!v68)
  {
    atomic_store(1u, v121 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v121 + 8))(v121);
  }
  if (v124)
    WTF::fastFree((unint64_t)v124, v44, v45, v46, v47, v48, v49, v50);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &),WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>> JSC::FTL::createLazyCallGenerator<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>(JSC::VM &,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr)::{lambda(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  JSC::ARM64LogicalImmediate *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  unsigned __int8 v17;
  JSC::ARM64LogicalImmediate *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int i;
  unsigned int v35;
  char v36;
  uint64_t v37;
  int *v38;
  int *v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  char v44;
  __int16 v45;
  char v46;
  _BYTE v47[32];

  v10 = *(_QWORD *)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 48);
  v12 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v11 + 32);
  v14 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  v16 = *(_BYTE *)(a1 + 33);
  v17 = *(_BYTE *)(a1 + 34);
  v18 = *(JSC::ARM64LogicalImmediate **)(a1 + 40);
  if ((_DWORD)v12)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197DB221CLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, v12, a2 + 264, a4, a5, a6, a7, a8);
    v26 = *(_DWORD *)(a2 + 200);
    if (v26 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, v24, v25);
      v26 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v26) = -1207811152;
    *(_DWORD *)(a2 + 200) += 4;
  }
  JSC::FTL::callOperation<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((uint64_t)v47, v14, *(_QWORD *)(v11 + 24), (_DWORD *)a2, v10, v13, v15, v16, v17, v18);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v27, v28, v29, v30, v31, v32, v33);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v35 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v27, v28, v29, v30, v31, v32, v33);
    v35 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v35) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v36 = 69;
  else
    v36 = 65;
  v42 = i;
  v43 = 0;
  v44 = v36;
  v45 = 15;
  v46 = -1;
  if (i != -1)
  {
    v37 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v37 == *(_DWORD *)(a3 + 8))
    {
      v38 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v37 + 1), (unint64_t)&v42, v29, v30, v31, v32, v33);
      v40 = *v38;
      v39 = v38 + 1;
      v41 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v41 = v40;
    }
    else
    {
      v39 = &v43;
      v41 = *(_QWORD *)a3 + 12 * v37;
      *(_DWORD *)v41 = i;
    }
    *(_QWORD *)(v41 + 4) = *(_QWORD *)v39;
    ++*(_DWORD *)(a3 + 12);
  }
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_18compileNewFunctionEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_18compileNewFunctionEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_18compileNewFunctionEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  const void *v94;
  void *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  const void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  JSC::ExecutableMemoryHandle *v128[2];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v20 = *(unsigned int *)(v19 + 308);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 304))
  {
    v91 = v20 + (v20 >> 2);
    if (v91 >= 0x10)
      v92 = v91 + 1;
    else
      v92 = 16;
    if (v92 <= v20 + 1)
      v93 = v20 + 1;
    else
      v93 = v92;
    if (v93 >> 29)
    {
      __break(0xC471u);
      goto LABEL_107;
    }
    v94 = *(const void **)(v19 + 296);
    v95 = (void *)WTF::fastMalloc((WTF *)(8 * v93));
    *(_DWORD *)(v19 + 304) = v93;
    *(_QWORD *)(v19 + 296) = v95;
    memcpy(v95, v94, 8 * v20);
    if (v94)
    {
      if (*(const void **)(v19 + 296) == v94)
      {
        *(_QWORD *)(v19 + 296) = 0;
        *(_DWORD *)(v19 + 304) = 0;
      }
      WTF::fastFree((unint64_t)v94, v12, v13, v14, v15, v16, v17, v18);
    }
    v22 = *(unsigned int *)(v19 + 308);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v22);
  }
  else
  {
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v20);
    LODWORD(v22) = *(_DWORD *)(v19 + 308);
  }
  *v21 = 0;
  *(_DWORD *)(v19 + 308) = v22 + 1;
  v23 = *(_DWORD *)(a2 + 200);
  if (v23 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v23 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v23) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v20, 16, v14, v15, v16, v17, v18);
  v31 = *(_DWORD *)(a2 + 200);
  if (v31 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v24, v25, v26, v27, v28, v29, v30);
    v31 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = -134216720;
  v32 = *(_DWORD *)(a2 + 200);
  v33 = v32 + 4;
  *(_DWORD *)(a2 + 200) = v32 + 4;
  if ((v32 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v24, v25, v26, v27, v28, v29, v30);
    v33 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v34 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v34 + 90440), v34, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v26, v27, v28, v29, v30, v128);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v128[0], v35, v36, v37, v38, v39, v40);
  v48 = (unsigned int *)v128[1];
  v128[1] = 0;
  if (v48)
  {
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      atomic_store(1u, v48);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v48, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  v51 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  v127 = v11;
  if (v51)
  {
    v52 = v51 + 2;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 + 1, v52));
    v54 = *(_DWORD *)(a1 + 16);
    v55 = *(_QWORD *)(a1 + 20);
    v56 = *(_DWORD *)(a1 + 40);
    do
      v57 = __ldaxr(v52);
    while (__stlxr(v57 + 1, v52));
  }
  else
  {
    v54 = *(_DWORD *)(a1 + 16);
    v55 = *(_QWORD *)(a1 + 20);
    v56 = *(_DWORD *)(a1 + 40);
  }
  v58 = *(_QWORD *)(a1 + 48);
  if ((v58 & 1) != 0)
  {
    v101 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
    if ((v58 & 2) != 0
      || ((v102 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
        ? (v103 = (_DWORD)v102 == -1)
        : (v103 = 1),
          v103))
    {
      v104 = 2;
    }
    else if (v102 >> 28)
    {
      v125 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v125 = v101;
      *(_DWORD *)(v125 + 8) = v102;
      v104 = 1;
      v101 = v125;
    }
    else
    {
      v104 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    v58 = v101 | v104;
  }
  v59 = *(unsigned int **)(a1 + 56);
  if (v59)
  {
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  *(_OWORD *)v128 = *(_OWORD *)(a1 + 64);
  v61 = *(unsigned int **)(a1 + 80);
  if (v61)
  {
    v62 = v61 + 2;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 + 1, v62));
  }
  v64 = WTF::fastMalloc((WTF *)0x58);
  v72 = v64;
  *(_DWORD *)(v64 + 8) = 1;
  *(_QWORD *)v64 = &off_1E3576938;
  *(_DWORD *)(v64 + 16) = v54;
  *(_QWORD *)(v64 + 20) = v55;
  *(_DWORD *)(v64 + 28) = v56;
  if (v51)
  {
    v73 = v51 + 2;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 + 1, v73));
  }
  *(_QWORD *)(v64 + 32) = v51;
  v75 = v58;
  if ((v58 & 1) != 0)
  {
    v105 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
    if ((v58 & 2) != 0
      || ((v106 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v126 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v126 = v105;
      *(_DWORD *)(v126 + 8) = v106;
      v108 = 1;
      v105 = v126;
    }
    else
    {
      v108 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v75 = v105 | v108;
  }
  *(_QWORD *)(v72 + 40) = v75;
  if (v59)
  {
    do
      v76 = __ldaxr(v59);
    while (__stlxr(v76 + 1, v59));
  }
  *(_QWORD *)(v72 + 48) = v59;
  *(_OWORD *)(v72 + 56) = *(_OWORD *)v128;
  if (v61)
  {
    v77 = v61 + 2;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 + 1, v77));
  }
  *(_QWORD *)(v72 + 72) = v61;
  *(_DWORD *)(v72 + 80) = v20;
  v79 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v79 != *(_DWORD *)(a2 + 240))
  {
    v80 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v79);
    goto LABEL_37;
  }
  v96 = v79 + (v79 >> 2);
  if (v96 >= 0x10)
    v97 = v96 + 1;
  else
    v97 = 16;
  if (v97 <= v79 + 1)
    v98 = v79 + 1;
  else
    v98 = v97;
  if (v98 >> 29)
  {
    __break(0xC471u);
LABEL_107:
    JUMPOUT(0x197DB2A3CLL);
  }
  v99 = *(const void **)(a2 + 232);
  v100 = (void *)WTF::fastMalloc((WTF *)(8 * v98));
  *(_DWORD *)(a2 + 240) = v98;
  *(_QWORD *)(a2 + 232) = v100;
  memcpy(v100, v99, 8 * v79);
  if (v99)
  {
    if (*(const void **)(a2 + 232) == v99)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v99, v65, v66, v67, v68, v69, v70, v71);
  }
  v79 = *(unsigned int *)(a2 + 244);
  v80 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v79);
LABEL_37:
  *v80 = v72;
  *(_DWORD *)(a2 + 244) = v79 + 1;
  if (v61)
  {
    v81 = v61 + 2;
    do
    {
      v82 = __ldaxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
    {
      atomic_store(1u, v61 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 8))(v61);
    }
  }
  if (v59)
  {
    do
    {
      v84 = __ldaxr(v59);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v59));
    if (!v85)
    {
      atomic_store(1u, v59);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v59, v65, v66, v67, v68, v69, v70, v71);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
  }
  if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v58 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
  if (v51)
  {
    v86 = v51 + 2;
    do
    {
      v87 = __ldaxr(v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, v86));
    if (!v88)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 32))(v51);
    }
    do
    {
      v89 = __ldaxr(v86);
      v90 = v89 - 1;
    }
    while (__stlxr(v90, v86));
    if (!v90)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 32))(v51);
    }
  }
  *(_BYTE *)(a2 + 212) = v127;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_18compileNewFunctionEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_18compileNewFunctionEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_18compileNewFunctionEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5 < 4)
    v6 = 0;
  else
    v6 = *(_DWORD *)((v5 & 0xFFFFFFFC) + a2[3] - 4);
  v7 = (v5 - v6);
  v8 = a2[23];
  v9 = v7 + v8;
  if (v8 > v7 + v8 || (v10 = v8 + a2[1], v10 < v9))
  {
    __break(0xC471u);
    JUMPOUT(0x197DB2FF0);
  }
  v11 = *(_DWORD *)(a1 + 28);
  if (v11 < 4)
    v12 = 0;
  else
    v12 = *(_DWORD *)((v11 & 0xFFFFFFFC) + a2[3] - 4);
  v13 = (v11 - v12);
  v14 = v13 + v8;
  if (v8 > v13 + v8 || v10 < v14)
  {
    __break(0xC471u);
    JUMPOUT(0x197DB3010);
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  if ((v16 & 1) != 0)
  {
    v61 = *(_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 2) != 0
      || (v62 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8), (_DWORD)v62 == 0x3FFFFFFF)
      || (_DWORD)v62 == -1)
    {
      v63 = 2;
    }
    else if (v62 >> 28)
    {
      v72 = v61;
      v73 = v62;
      v61 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v61 = v72;
      *(_DWORD *)(v61 + 8) = v73;
      v63 = 1;
    }
    else
    {
      v63 = v61;
      v61 = v62 << 36;
    }
    v16 = v61 | v63;
  }
  v74 = v16;
  v25 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v17, &v74);
  if ((v74 & 1) != 0 && (v74 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v74 & 0xFFFFFFFF8, v18, v19, v20, v21, v22, v23, v24);
  v26 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v26 + 4))
  {
    v27 = *(_DWORD *)(*(_QWORD *)(v26 + 8) + 4);
    if (v27 < 4)
      v28 = 0;
    else
      v28 = *(_DWORD *)((v27 & 0xFFFFFFFC) + a2[3] - 4);
    v29 = (v27 - v28);
    v30 = a2[23];
    v31 = v29 + v30;
    if (v30 > v31 || v30 + a2[1] < v31)
    {
      __break(0xC471u);
      JUMPOUT(0x197DB3030);
    }
  }
  else
  {
    v56 = *(_DWORD *)(*(_QWORD *)(v26 + 16) + 16);
    if (v56 < 4)
      v57 = 0;
    else
      v57 = *(_DWORD *)((v56 & 0xFFFFFFFC) + a2[3] - 4);
    v58 = (v56 - v57);
    v59 = a2[23];
    v31 = v58 + v59;
    if (v59 > v31 || v59 + a2[1] < v31)
      goto LABEL_73;
  }
  v33 = *(unsigned int **)(a1 + 72);
  if (v33)
  {
    v34 = v33 + 2;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  *(_QWORD *)v4 = v9;
  *(_QWORD *)(v4 + 8) = v14;
  *(_QWORD *)(v4 + 16) = v31;
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 64) | *(_QWORD *)(a1 + 56);
  *(_DWORD *)(v4 + 32) = v25;
  if (v33)
  {
    v36 = v33 + 2;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
  }
  v38 = *(unsigned int **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v33;
  if (v38)
  {
    v39 = v38 + 2;
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v38 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
    }
  }
  if (v33)
  {
    v42 = v33 + 2;
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, v42));
    if (!v44)
    {
      atomic_store(1u, v33 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
    }
  }
  v45 = *(_QWORD *)(a1 + 32);
  v46 = *(unsigned int *)(a1 + 80);
  if (*(_DWORD *)(v45 + 308) <= v46)
  {
LABEL_73:
    __break(0xC471u);
    JUMPOUT(0x197DB2FB8);
  }
  v47 = *(_QWORD *)(v45 + 296);
  v48 = *(_QWORD *)(v47 + 8 * v46);
  *(_QWORD *)(v47 + 8 * v46) = v4;
  if (v48)
  {
    v49 = *(unsigned int **)(v48 + 56);
    *(_QWORD *)(v48 + 56) = 0;
    if (v49)
    {
      v50 = v49 + 2;
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, v49 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
      }
    }
    v53 = *(unsigned int **)(v48 + 48);
    *(_QWORD *)(v48 + 48) = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v53, (uint64_t)v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
    }
    WTF::fastFree(v48, v18, v19, v20, v21, v22, v23, v24);
  }
}

uint64_t JSC::FTL::Output::store32As8(JSC::FTL::Output *this, JSC::B3::Value *a2, JSC::B3::Value *a3, const JSC::FTL::AbstractHeap *a4)
{
  const JSC::FTL::AbstractHeap *v6;
  uint64_t v7;

  v6 = JSC::FTL::Output::address(this, a3, a4);
  return JSC::FTL::Output::store32As8((uint64_t)this, (uint64_t)a2, v6, v7);
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(_QWORD *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  WTF *v17;
  WTF *v19;
  int v20;
  uint64_t v21[6];

  v21[5] = *MEMORY[0x1E0C80C00];
  v21[0] = a3;
  v21[1] = a4;
  v21[2] = a5;
  v21[3] = a6;
  v21[4] = a7;
  WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v19, v21, 5uLL);
  v17 = v19;
  if (v19)
  {
    v19 = 0;
    v20 = 0;
    WTF::fastFree((unint64_t)v17, v9, v10, v11, v12, v13, v14, v15);
  }
  return v16;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::JSBoundFunction,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 40376);
  if (v8 && *(_DWORD *)(v8 + 60) <= 0x1Fu)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v8);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  }
  return result;
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;

  JSC::CodeOrigin::CodeOrigin(&v40, (const JSC::CodeOrigin *)(a1 + 3524));
  v11 = (__int128 *)JSC::FTL::Output::patchpoint(a1 + 3455, 2);
  v12 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)a3;
    v14 = 8 * v12;
    do
    {
      v15 = *v13++;
      v35 = (unint64_t)v15;
      LOBYTE(v36) = 3;
      JSC::B3::StackmapValue::append(v11, v15, (unint64_t)&v35 + 8);
      v14 -= 8;
    }
    while (v14);
  }
  *((_QWORD *)v11 + 8) |= 0x30000uLL;
  *((_QWORD *)v11 + 10) |= 0x30000uLL;
  v16 = a1[1];
  v35 = *a2;
  v17 = v39;
  if (v39)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v19 = v39;
  }
  else
  {
    v19 = 0;
  }
  v36 = v17;
  v37 = v16;
  JSC::CodeOrigin::CodeOrigin(&v38, (const JSC::CodeOrigin *)&v40);
  if (v19)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v19, v27, v28, v29, v30, v31, v32, v33);
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  return v11;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x38);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::~StackmapGenerationParams(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 32);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3576960;
  *(_OWORD *)(result + 16) = *(_OWORD *)a2;
  v2 = *(unsigned int **)(a2 + 16);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  v5 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 40) = v5;
  if ((v4 & 1) != 0)
  {
    v6 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
    if ((v4 & 2) != 0
      || ((v7 = *(unsigned int *)((v4 & 0xFFFFFFFF8) + 8), (_DWORD)v7 != 0x3FFFFFFF)
        ? (v8 = (_DWORD)v7 == -1)
        : (v8 = 1),
          v8))
    {
      v9 = 2;
    }
    else if (v7 >> 28)
    {
      v12 = result;
      v10 = v6;
      v11 = v7;
      v6 = WTF::fastMalloc((WTF *)0x10);
      result = v12;
      *(_QWORD *)v6 = v10;
      *(_DWORD *)(v6 + 8) = v11;
      v9 = 1;
    }
    else
    {
      v9 = v6;
      v6 = v7 << 36;
    }
    v4 = v6 | v9;
  }
  *(_QWORD *)(result + 48) = v4;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 48);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 6);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  uint64_t v58[5];
  unsigned int *v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned int *v63;
  unint64_t v64;
  uint64_t v65;

  v64 = 0;
  v65 = 0;
  v6 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v6)
  {
    v7 = *(_BYTE **)(a3 + 8);
    v8 = 16 * v6;
    while (1)
    {
      v9 = v7[8];
      switch(v9)
      {
        case 7:
          v10 = *v7 & 0x7F;
          v11 = 1;
          break;
        case 9:
          v10 = (*(_QWORD *)v7 << 32) | 0x1DLL;
          v11 = 2;
          break;
        case 11:
          v10 = *(_QWORD *)v7;
          v11 = 3;
          break;
        default:
          __break(0xC471u);
          return;
      }
      *(_QWORD *)&v55 = v11;
      *((_QWORD *)&v55 + 1) = v10;
      v12 = HIDWORD(v65);
      if (HIDWORD(v65) == (_DWORD)v65)
      {
        WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::Location>((uint64_t)&v64, (unint64_t)&v55);
      }
      else
      {
        *(_OWORD *)(v64 + 16 * HIDWORD(v65)) = v55;
        HIDWORD(v65) = v12 + 1;
      }
      v7 += 16;
      v8 -= 16;
      if (!v8)
      {
        v13 = v64;
        v14 = HIDWORD(v65);
        goto LABEL_10;
      }
    }
  }
  v14 = 0;
  v13 = 0;
LABEL_10:
  JSC::MacroAssemblerARM64::patchableJump(a2, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v61);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(a2, v22, v23, v24, v25, v26, v27, v28, &v60);
  v29 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)a3);
  v31 = v30;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 16), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v59);
  LODWORD(v55) = v61;
  *(_QWORD *)((char *)&v55 + 4) = v62;
  v56 = *(_QWORD *)(a1 + 24);
  v57 = v60;
  JSC::CodeOrigin::CodeOrigin(v58, (const JSC::CodeOrigin *)(a1 + 32));
  v32 = v59;
  if (v59)
  {
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
  }
  v58[1] = (uint64_t)v32;
  v58[2] = v29;
  v58[3] = v31;
  v34 = (uint64_t)v63;
  if (v63)
  {
    v35 = v63 + 2;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 + 1, v35));
  }
  v58[4] = v34;
  if (v59)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v59, v44, v45, v46, v47, v48, v49, v50);
  v51 = v63;
  v63 = 0;
  if (v51)
  {
    v52 = v51 + 2;
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
    }
  }
  if (v64)
    WTF::fastFree(v64, v44, v45, v46, v47, v48, v49, v50);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}::operator()(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  char v11;
  char v12;
  uint64_t result;

  if (!a4)
  {
    __break(0xC471u);
    JUMPOUT(0x197DB3B80);
  }
  if (*(_DWORD *)(a3 + 12))
    goto LABEL_25;
  if (a4 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DB3B88);
  }
  if (*(_DWORD *)(a3 + 28))
  {
    __break(0xC471u);
    JUMPOUT(0x197DB3AF8);
  }
  if (a4 <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197DB3B90);
  }
  if (*(_DWORD *)(a3 + 44))
  {
    __break(0xC471u);
    JUMPOUT(0x197DB3B18);
  }
  if (a4 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197DB3B98);
  }
  if (*(_DWORD *)(a3 + 60))
  {
    __break(0xC471u);
    JUMPOUT(0x197DB3B38);
  }
  if (a4 <= 4)
  {
    __break(0xC471u);
    JUMPOUT(0x197DB3BA0);
  }
  if (*(_DWORD *)(a3 + 76))
  {
    __break(0xC471u);
    JUMPOUT(0x197DB3B58);
  }
  if (a4 <= 5)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x197DB3AD8);
  }
  if (*(_DWORD *)(a3 + 92))
  {
    __break(0xC471u);
    JUMPOUT(0x197DB3B78);
  }
  v5 = *a2;
  v6 = a2[1];
  v7 = *(_DWORD *)(a3 + 72) & 0x7F;
  v8 = *(_DWORD *)(a3 + 56) & 0x7F;
  v9 = *(_DWORD *)(a3 + 40) & 0x7F;
  v10 = *(_DWORD *)(a3 + 24) & 0x7F;
  v11 = *(_DWORD *)(a3 + 8) & 0x7F;
  v12 = *(_BYTE *)(a3 + 88) & 0x7F;
  result = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3576988;
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)(result + 24) = operationNewBoundFunction;
  *(_BYTE *)(result + 32) = v11;
  *(_QWORD *)(result + 40) = v6;
  *(_BYTE *)(result + 48) = v10;
  *(_BYTE *)(result + 49) = v9;
  *(_BYTE *)(result + 50) = v8;
  *(_BYTE *)(result + 51) = v7;
  *(_BYTE *)(result + 52) = v12;
  *a1 = result;
  return result;
}

_QWORD *JSC::B3::StackmapGenerationParams::addLatePath<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[9];
  unsigned int *v19;

  v3 = WTF::fastMalloc((WTF *)0x58);
  v4 = _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_23compileNewBoundFunctionEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11_(v3, (uint64_t)v18);
  v19 = (unsigned int *)v4;
  v12 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v19);
    v14 = v19;
    v19 = 0;
    if (v14)
    {
      v15 = v14 + 2;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v4;
    *(_DWORD *)(a1 + 12) = v12 + 1;
  }
}

_QWORD *JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::~(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[8];
  a1[8] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[5];
  a1[5] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[4];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &),WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>> JSC::FTL::createLazyCallGenerator<JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(JSC::VM &,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID)::{lambda(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  JSC::ARM64LogicalImmediate *v12;
  char v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint8x8_t v41;
  __int32 v42;
  uint8x8_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v53;
  char v54;
  char v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int8x8_t v78;
  int v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  int i;
  unsigned int v84;
  char v85;
  uint64_t v86;
  int *v87;
  int *v88;
  int v89;
  uint64_t v90;
  JSC::ARM64LogicalImmediate *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  char v96;
  __int16 v97;
  char v98;
  int v99;
  uint64_t v100;
  _QWORD v101[8];
  char v102;
  void *__dst;
  uint64_t v104;
  _WORD v105[12];

  v10 = *(_QWORD *)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 48);
  v12 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v11 + 32);
  v92 = *(_QWORD *)(a1 + 24);
  v93 = *(_QWORD *)(a1 + 16);
  v13 = *(_BYTE *)(a1 + 32);
  v91 = *(JSC::ARM64LogicalImmediate **)(a1 + 40);
  v14 = *(unsigned __int8 *)(a1 + 48);
  v15 = *(unsigned __int8 *)(a1 + 49);
  v16 = *(unsigned __int8 *)(a1 + 50);
  v17 = *(unsigned __int8 *)(a1 + 51);
  v18 = *(unsigned __int8 *)(a1 + 52);
  if ((_DWORD)v12)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197DB4364);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, v12, a2 + 264, a4, a5, a6, a7, a8);
    v24 = *(_DWORD *)(a2 + 200);
    if (v24 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v19, v20, v21, v22, v23, a7, a8);
      v24 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v24) = -1207811152;
    *(_DWORD *)(a2 + 200) += 4;
  }
  v25 = (unint64_t)JSC::FTL::SlowPathCallContext::SlowPathCallContext(v101, *(_QWORD *)(v11 + 24), a2, 7u, v13, 0xFFFFFFFFLL, a7, a8);
  __dst = v105;
  v104 = 5;
  if (v14 == 1)
  {
    v33 = 0;
  }
  else
  {
    v105[0] = v14 | 0x100;
    v33 = 1;
    HIDWORD(v104) = 1;
  }
  if (v15 != 2)
  {
    v105[v33++] = v15 | 0x200;
    HIDWORD(v104) = v33;
  }
  if (v16 != 3)
  {
    v105[v33++] = v16 | 0x300;
    HIDWORD(v104) = v33;
  }
  if (v17 != 4)
  {
    v105[v33++] = v17 | 0x400;
    HIDWORD(v104) = v33;
  }
  if (v18 == 5)
  {
    v34 = &v100;
    if (!v33)
      goto LABEL_58;
  }
  else
  {
    v105[v33++] = v18 | 0x500;
    HIDWORD(v104) = v33;
    v34 = &v100;
  }
  do
  {
    while (2)
    {
      v35 = 0;
      v36 = 0;
      v37 = (char *)__dst;
      v38 = v33;
      do
      {
        if ((*((_BYTE *)__dst + v35 + 1) & 0x40) != 0)
        {
LABEL_75:
          __break(1u);
          goto LABEL_76;
        }
        v36 |= 1 << *((_BYTE *)__dst + v35 + 1);
        v35 += 2;
      }
      while (2 * v33 != v35);
      v39 = 0;
      do
      {
        v40 = *((_BYTE *)__dst + v39) & 0x7F;
        if (v40 >= 0x40)
          goto LABEL_75;
        v36 &= ~(1 << v40);
        v39 += 2;
      }
      while (2 * v33 != v39);
      v41 = (uint8x8_t)vcnt_s8((int8x8_t)v36);
      v41.i16[0] = vaddlv_u8(v41);
      v42 = v41.i32[0];
      v43 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v36));
      v43.i16[0] = vaddlv_u8(v43);
      if (v43.i32[0] + v42)
      {
        v44 = 0;
        if (v33 <= 1)
          v45 = 1;
        else
          v45 = v33;
        v46 = 2 * v45;
        while (1)
        {
          v47 = *((unsigned __int8 *)__dst + v44 + 1);
          if ((v47 & 0x7Fu) >= 0x40)
            goto LABEL_75;
          if (((v36 >> (v47 & 0x7F)) & 1) != 0)
            break;
          v44 += 2;
          if (v46 == v44)
            goto LABEL_48;
        }
        v48 = *((unsigned __int8 *)__dst + v44);
        if (v48 != v47)
        {
          v49 = (char)v48;
          if ((char)v48 == 63)
          {
            v50 = *(_DWORD *)(a2 + 200);
            v51 = *(_DWORD *)(a2 + 192);
            if ((char)v47 == 31)
              goto LABEL_52;
            v53 = v47 & 0x1F | 0xD2800000;
          }
          else
          {
            v50 = *(_DWORD *)(a2 + 200);
            v51 = *(_DWORD *)(a2 + 192);
            if (v47 != 31 && v49 != 31)
            {
              v53 = v47 & 0xFFE0FFFF | ((v49 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_53;
            }
LABEL_52:
            v53 = (char)v47 | (32 * v49) | 0x91000000;
          }
LABEL_53:
          if (v50 + 4 > v51)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v26, v27, v28, v29, v30, v31, v32);
            v50 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v50) = v53;
          *(_DWORD *)(a2 + 200) += 4;
          v37 = (char *)__dst;
          v38 = HIDWORD(v104);
        }
        v25 = (unint64_t)memmove(&v37[v44], &v37[v44 + 2], 2 * v38 - v44 - 2);
        v33 = HIDWORD(v104) - 1;
        HIDWORD(v104) = v33;
        if (v33)
          continue;
        goto LABEL_57;
      }
      break;
    }
    v54 = *(_BYTE *)__dst;
    v55 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v55, v28, v29, v30, v31, v32);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v104) - 2);
    v56 = --HIDWORD(v104);
    if (HIDWORD(v104))
    {
      v57 = __dst;
      v58 = 2 * v56;
      while (*v57 != v55)
      {
        v57 += 2;
        v58 -= 2;
        if (!v58)
          goto LABEL_47;
      }
      *v57 = v54;
    }
LABEL_47:
    v25 = WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,5u>(std::array<JSC::ARM64Registers::RegisterID,5u>,std::array<JSC::ARM64Registers::RegisterID,5u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v102, 0);
    v33 = HIDWORD(v104);
LABEL_48:
    ;
  }
  while (v33);
LABEL_57:
  v25 = (unint64_t)__dst;
  if (v105 == __dst)
    goto LABEL_58;
LABEL_76:
  if (v25)
  {
    __dst = 0;
    LODWORD(v104) = 0;
    WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
  }
LABEL_58:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)v91, 0, v28, v29, v30, v31, v32);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v101, v93, v92, v59, v60, v61, v62, v63, (uint64_t)&__dst);
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v101, v64, v65, v66, v67, v68, v69, v70);
  if (v10)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a2, v93, 0, 0, 0xFFFFFFFFLL, v75, v76, v77, (uint64_t)&v99, v78);
    v79 = v99;
    if (v99 != -1)
    {
      v80 = *(unsigned int *)(v10 + 12);
      if ((_DWORD)v80 == *(_DWORD *)(v10 + 8))
      {
        v81 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, (void *)(v80 + 1), (unint64_t)&v99, v73, v74, v75, v76, v77);
        v34 = (uint64_t *)(v81 + 1);
        v79 = *v81;
        LODWORD(v80) = *(_DWORD *)(v10 + 12);
      }
      v82 = *(_QWORD *)v10 + 12 * v80;
      *(_DWORD *)v82 = v79;
      *(_QWORD *)(v82 + 4) = *v34;
      ++*(_DWORD *)(v10 + 12);
    }
  }
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v71, v72, v73, v74, v75, v76, v77);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v84 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v71, v72, v73, v74, v75, v76, v77);
    v84 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v84) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v85 = 69;
  else
    v85 = 65;
  v94 = i;
  v95 = 0;
  v96 = v85;
  v97 = 15;
  v98 = -1;
  if (i != -1)
  {
    v86 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v86 == *(_DWORD *)(a3 + 8))
    {
      v87 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v86 + 1), (unint64_t)&v94, v73, v74, v75, v76, v77);
      v89 = *v87;
      v88 = v87 + 1;
      v90 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v90 = v89;
    }
    else
    {
      v88 = &v95;
      v90 = *(_QWORD *)a3 + 12 * v86;
      *(_DWORD *)v90 = i;
    }
    *(_QWORD *)(v90 + 4) = *(_QWORD *)v88;
    ++*(_DWORD *)(a3 + 12);
  }
}

uint64_t JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)result = *(_DWORD *)a2;
  *(_QWORD *)(result + 4) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  v2 = *(_QWORD *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v8 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v9 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v14 = a2;
      v15 = result;
      v12 = v8;
      v13 = v9;
      v8 = WTF::fastMalloc((WTF *)0x10);
      a2 = v14;
      result = v15;
      *(_QWORD *)v8 = v12;
      *(_DWORD *)(v8 + 8) = v13;
      v11 = 1;
    }
    else
    {
      v11 = v8;
      v8 = v9 << 36;
    }
    v2 = v8 | v11;
  }
  *(_QWORD *)(result + 32) = v2;
  v3 = *(unsigned int **)(a2 + 40);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 40) = v3;
  *(_OWORD *)(result + 48) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 64) = v5;
  return result;
}

uint64_t _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_23compileNewBoundFunctionEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E35769B0;
  *(_DWORD *)(result + 16) = *(_DWORD *)a2;
  *(_QWORD *)(result + 20) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 24);
  v2 = *(_QWORD *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v8 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v9 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v14 = a2;
      v15 = result;
      v12 = v8;
      v13 = v9;
      v8 = WTF::fastMalloc((WTF *)0x10);
      a2 = v14;
      result = v15;
      *(_QWORD *)v8 = v12;
      *(_DWORD *)(v8 + 8) = v13;
      v11 = 1;
    }
    else
    {
      v11 = v8;
      v8 = v9 << 36;
    }
    v2 = v8 | v11;
  }
  *(_QWORD *)(result + 48) = v2;
  v3 = *(unsigned int **)(a2 + 40);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 56) = v3;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 80) = v5;
  return result;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_23compileNewBoundFunctionEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_23compileNewBoundFunctionEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_23compileNewBoundFunctionEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

_QWORD *JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *result;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _BYTE v58[12];
  int v59;
  unsigned int *v60;
  uint64_t v61[2];
  __int128 v62;
  uint64_t v63;
  int v64;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v18 = *(unsigned int *)(v17 + 308);
  if ((_DWORD)v18 == *(_DWORD *)(v17 + 304))
  {
    WTF::Vector<std::unique_ptr<JSC::FTL::LazySlowPath>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,decltype(nullptr)>(v17 + 296);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v17 + 296) + 8 * v18) = 0;
    *(_DWORD *)(v17 + 308) = v18 + 1;
  }
  JSC::MacroAssemblerARM64::pushToSaveImmediateWithoutTouchingRegisters((unsigned int *)a2, v18, v11, v12, v13, v14, v15, v16);
  v19 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v19 + 90440), v19, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v20, v21, v22, v23, v24, v58);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, *(uint64_t *)v58, v25, v26, v27, v28, v29, v30);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v58, v31, v32, v33, v34, v35, v36, v37);
  v38 = *(unsigned int **)(*(_QWORD *)(a1 + 16) + 24);
  if (v38)
  {
    v39 = v38 + 2;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 + 1, v39));
  }
  else
  {
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
  }
  v60 = v38;
  JSC::CodeOrigin::CodeOrigin(v61, (const JSC::CodeOrigin *)(a1 + 32));
  v42 = *(unsigned int **)(a1 + 40);
  if (v42)
  {
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  v61[1] = (uint64_t)v42;
  v62 = *(_OWORD *)(a1 + 48);
  v44 = *(_QWORD *)(a1 + 64);
  if (v44)
  {
    v45 = (unsigned int *)(v44 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
  }
  v63 = v44;
  v64 = v18;
  _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_23compileNewBoundFunctionEvEUlRKN3WTF6VectorINS4_8LocationELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEE_EEPNS_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlRNS_10LinkBufferEE_EEvSM_(a2, (uint64_t)v58);
  if (v38)
  {
    v55 = v38 + 2;
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v38 + 2);
      result = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v38 + 32))(v38);
    }
  }
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

void _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_23compileNewBoundFunctionEvEUlRKN3WTF6VectorINS4_8LocationELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEE_EEPNS_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlRNS_10LinkBufferEE_EEvSM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;

  v4 = WTF::fastMalloc((WTF *)0x58);
  v5 = v4;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E35769D8;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)a2;
  *(_QWORD *)(v4 + 20) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a2 + 12);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(v4 + 32) = v6;
  v9 = *(_QWORD *)(a2 + 24);
  if ((v9 & 1) != 0)
  {
    v29 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v30 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v33 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v29 = v33;
      *(_DWORD *)(v29 + 8) = v30;
      v32 = 1;
    }
    else
    {
      v32 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = v30 << 36;
    }
    v9 = v29 | v32;
  }
  *(_QWORD *)(v5 + 40) = v9;
  v10 = *(unsigned int **)(a2 + 32);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(v5 + 48) = v10;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 56);
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(v5 + 72) = v12;
  *(_DWORD *)(v5 + 80) = *(_DWORD *)(a2 + 64);
  v15 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v15 != *(_DWORD *)(a1 + 240))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
LABEL_21:
    *v16 = v5;
    *(_DWORD *)(a1 + 244) = v15 + 1;
    return;
  }
  v17 = v15 + (v15 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v15 + 1)
    v19 = v15 + 1;
  else
    v19 = v18;
  if (!(v19 >> 29))
  {
    v20 = *(const void **)(a1 + 232);
    v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    *(_DWORD *)(a1 + 240) = v19;
    *(_QWORD *)(a1 + 232) = v21;
    memcpy(v21, v20, 8 * v15);
    if (v20)
    {
      if (*(const void **)(a1 + 232) == v20)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v20, v22, v23, v24, v25, v26, v27, v28);
    }
    v15 = *(unsigned int *)(a1 + 244);
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
    goto LABEL_21;
  }
  __break(0xC471u);
}

_QWORD *JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}::~LinkBuffer(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[7];
  a1[7] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[4];
  a1[4] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[3];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_23compileNewBoundFunctionEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_23compileNewBoundFunctionEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_23compileNewBoundFunctionEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, JSC::LinkBuffer *a2)
{
}

unint64_t *JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileNewBoundFunction(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator() const(JSC::CCallHelpers &)::{lambda(JSC::LinkBuffer &)#1}::operator()(uint64_t a1, JSC::LinkBuffer *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t *result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t v40;
  int v41;
  unint64_t v42;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  v42 = v4;
  v5 = JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(a2, *(_DWORD *)a1);
  v41 = *(_DWORD *)(a1 + 12);
  v6 = JSC::LinkBuffer::locationOf<(WTF::PtrTag)26432>(a2, &v41);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 64);
  JSC::CodeOrigin::CodeOrigin(&v40, (const JSC::CodeOrigin *)(a1 + 24));
  v15 = JSC::DFG::CodeOriginPool::addUniqueCallSiteIndex(v7, &v40);
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v8, v9, v10, v11, v12, v13, v14);
  v16 = JSC::FTL::ExceptionTarget::label(*(JSC::FTL::ExceptionTarget **)(a1 + 32), a2);
  v17 = (_QWORD *)(a1 + 40);
  v18 = *(unsigned int **)(a1 + 56);
  if (v18)
  {
    v19 = v18 + 2;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    v39 = v18;
    result = (unint64_t *)JSC::FTL::LazySlowPath::initialize(v4, v5, v6, v16, v17, v15, (uint64_t *)&v39);
    v39 = 0;
    do
    {
      v28 = __ldaxr(v19);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v19));
    if (!v29)
    {
      atomic_store(1u, v18 + 2);
      result = (unint64_t *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
    }
  }
  else
  {
    v39 = 0;
    result = (unint64_t *)JSC::FTL::LazySlowPath::initialize(v4, v5, v6, v16, v17, v15, (uint64_t *)&v39);
  }
  v30 = *(_QWORD *)(a1 + 16);
  v31 = *(unsigned int *)(a1 + 64);
  if (*(_DWORD *)(v30 + 308) <= v31)
  {
    __break(0xC471u);
  }
  else
  {
    std::unique_ptr<JSC::FTL::LazySlowPath>::operator=[abi:sn180100]((unint64_t *)(*(_QWORD *)(v30 + 296) + 8 * v31), &v42, v22, v23, v24, v25, v26, v27);
    return std::unique_ptr<JSC::FTL::LazySlowPath>::~unique_ptr[abi:sn180100](&v42, v32, v33, v34, v35, v36, v37, v38);
  }
  return result;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::DirectArguments,JSC::DFG::RegisteredStructure>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, JSC::B3::BasicBlock *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 > 0x1F60)
    v9 = 0;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 8 * ((a2 + 15) >> 4) + 19168);
  v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v9);
  v11 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a3);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateVariableSizedObject<JSC::DirectArguments>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::B3::BasicBlock *a5)
{
  uint64_t v9;
  uint64_t v10;

  v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a3);
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1},JSC::B3::Value *,JSC::B3::Value *>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  WTF *v14;
  WTF *v16;
  int v17;
  uint64_t v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v18[0] = a3;
  v18[1] = a4;
  WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v16, v18, 2uLL);
  v14 = v16;
  if (v16)
  {
    v16 = 0;
    v17 = 0;
    WTF::fastFree((unint64_t)v14, v6, v7, v8, v9, v10, v11, v12);
  }
  return v13;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::getCurrentCallee(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  JSC::FTL::AbstractHeap *v12;
  uint64_t v13;

  v8 = *((_QWORD *)this + 3524);
  v9 = v8 & 0xFFFFFFFF8;
  if ((v8 & 1) != 0)
    v9 = *(_QWORD *)v9;
  if (!v9)
  {
    v10 = (char *)this + 27640;
    v11 = 3;
LABEL_5:
    return JSC::FTL::Output::load((uint64_t)v10, v12, v13, 2);
  }
  if ((*(_BYTE *)(v9 + 32) & 1) != 0)
  {
    v10 = (char *)this + 27640;
    v11 = *(unsigned int *)(v9 + 41);
    goto LABEL_5;
  }
}

uint64_t JSC::AssemblyHelpers::argumentsStart(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;
  _QWORD *v3;

  v1 = (_QWORD *)(a1 & 0xFFFFFFFF8);
  if ((a1 & 1) != 0)
    v1 = (_QWORD *)*v1;
  if (!v1)
    return 6;
  v3 = (_QWORD *)*v1;
  if (!v3 || *(_DWORD *)v3 < 2u)
    return 0xFFFFFFFFLL;
  if (*((_BYTE *)v3 + 13) == 8)
    return *(unsigned int *)((char *)v3 + 14);
  result = 1691;
  __break(0xC471u);
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::getArgumentsStart(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this)
{
  uint64_t v2;
  uint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 3524);
  v3 = (uint64_t *)(v2 & 0xFFFFFFFF8);
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)*v3;
  v4 = JSC::AssemblyHelpers::argumentsStart(v3);
  return v11;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::getArgumentsLength(JSC::B3::Value **this, JSC::InlineCallFrame *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  JSC::FTL::AbstractHeap *v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  uint64_t v15;

  if (!a2)
  {
    v10 = 4;
    goto LABEL_4;
  }
  v9 = *((_QWORD *)a2 + 3);
  if ((v9 >> 60) - 3 < 3)
  {
    v10 = *((unsigned int *)a2 + 9);
LABEL_4:
    v13 = (JSC::B3::Value *)JSC::FTL::Output::load((uint64_t)(this + 3455), v11, v12, 1);
    JSC::FTL::Output::sub((JSC::FTL::Output *)(this + 3455), v13, this[3458]);
    return 0xFFFFFFFF00000000;
  }
  v15 = (v9 & 0x3FFFFF) - 1;
  JSC::FTL::Output::constInt32((JSC::FTL::Output *)(this + 3455), (v9 & 0x3FFFFF) - 1);
  return (v15 << 32) | 1;
}

__int128 *JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v35;
  int v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;

  JSC::CodeOrigin::CodeOrigin(&v41, (const JSC::CodeOrigin *)(a1 + 3524));
  v11 = (__int128 *)JSC::FTL::Output::patchpoint(a1 + 3455, 2);
  v12 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)a3;
    v14 = 8 * v12;
    do
    {
      v15 = *v13++;
      v35 = (unint64_t)v15;
      LOBYTE(v36) = 3;
      JSC::B3::StackmapValue::append(v11, v15, (unint64_t)&v35 + 8);
      v14 -= 8;
    }
    while (v14);
  }
  *((_QWORD *)v11 + 8) |= 0x30000uLL;
  *((_QWORD *)v11 + 10) |= 0x30000uLL;
  v16 = a1[1];
  v35 = *(_OWORD *)a2;
  v36 = *(_DWORD *)(a2 + 16);
  v17 = v40;
  if (v40)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v19 = v40;
  }
  else
  {
    v19 = 0;
  }
  v37 = v17;
  v38 = v16;
  JSC::CodeOrigin::CodeOrigin(&v39, (const JSC::CodeOrigin *)&v41);
  if (v19)
    WTF::ThreadSafeRefCounted<JSC::FTL::PatchpointExceptionHandle,(WTF::DestructionThread)0>::deref(v19, v27, v28, v29, v30, v31, v32, v33);
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
  return v11;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unsigned int *result;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x40);
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  if (result)
  {
    v6 = result + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::~StackmapGenerationParams(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 40);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::SharedTaskFunctor(uint64_t result, __int128 *a2)
{
  __int128 v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3576A00;
  v2 = *a2;
  *(_QWORD *)(result + 32) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(result + 16) = v2;
  v3 = (unsigned int *)*((_QWORD *)a2 + 3);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v6 = *((_QWORD *)a2 + 4);
  v5 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(result + 40) = v3;
  *(_QWORD *)(result + 48) = v6;
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
    if ((v5 & 2) != 0
      || ((v8 = *(unsigned int *)((v5 & 0xFFFFFFFF8) + 8), (_DWORD)v8 != 0x3FFFFFFF)
        ? (v9 = (_DWORD)v8 == -1)
        : (v9 = 1),
          v9))
    {
      v10 = 2;
    }
    else if (v8 >> 28)
    {
      v13 = result;
      v11 = v7;
      v12 = v8;
      v7 = WTF::fastMalloc((WTF *)0x10);
      result = v13;
      *(_QWORD *)v7 = v11;
      *(_DWORD *)(v7 + 8) = v12;
      v10 = 1;
    }
    else
    {
      v10 = v7;
      v7 = v8 << 36;
    }
    v5 = v7 | v10;
  }
  *(_QWORD *)(result + 56) = v5;
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
}

void JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, JSC::MacroAssemblerARM64 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t v56[5];
  unsigned int *v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned int *v61;
  unint64_t v62;
  uint64_t v63;

  v62 = 0;
  v63 = 0;
  v6 = *(unsigned int *)(a3 + 20);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a3 + 8);
    v8 = 16 * v6;
    do
    {
      *(_QWORD *)&v53 = JSC::FTL::Location::forValueRep(v7);
      *((_QWORD *)&v53 + 1) = v9;
      v10 = HIDWORD(v63);
      if (HIDWORD(v63) == (_DWORD)v63)
      {
        WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::FTL::Location>((uint64_t)&v62, (unint64_t)&v53);
      }
      else
      {
        *(_OWORD *)(v62 + 16 * HIDWORD(v63)) = v53;
        HIDWORD(v63) = v10 + 1;
      }
      v7 += 16;
      v8 -= 16;
    }
    while (v8);
    v11 = v62;
    v12 = HIDWORD(v63);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  JSC::MacroAssemblerARM64::patchableJump(a2, v13, v14, v15, v16, v17, v18, v19, (uint64_t)&v59);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(a2, v20, v21, v22, v23, v24, v25, v26, &v58);
  v27 = JSC::B3::StackmapGenerationParams::unavailableRegisters((JSC::B3::StackmapGenerationParams *)a3);
  v29 = v28;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 24), (const JSC::B3::StackmapGenerationParams *)a3, (uint64_t *)&v57);
  LODWORD(v53) = v59;
  *(_QWORD *)((char *)&v53 + 4) = v60;
  v54 = *(_QWORD *)(a1 + 32);
  v55 = v58;
  JSC::CodeOrigin::CodeOrigin(v56, (const JSC::CodeOrigin *)(a1 + 40));
  v30 = v57;
  if (v57)
  {
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
  }
  v56[1] = (uint64_t)v30;
  v56[2] = v27;
  v56[3] = v29;
  v32 = (uint64_t)v61;
  if (v61)
  {
    v33 = v61 + 2;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 + 1, v33));
  }
  v56[4] = v32;
  if (v57)
    WTF::ThreadSafeRefCounted<JSC::FTL::ExceptionTarget,(WTF::DestructionThread)0>::deref(v57, v42, v43, v44, v45, v46, v47, v48);
  v49 = v61;
  v61 = 0;
  if (v49)
  {
    v50 = v49 + 2;
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v49 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 8))(v49);
    }
  }
  if (v62)
    WTF::fastFree(v62, v42, v43, v44, v45, v46, v47, v48);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}::operator()(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  char v9;
  int v10;
  uint64_t result;

  if (!a4)
  {
    __break(0xC471u);
    JUMPOUT(0x197DB5CE0);
  }
  if (*(_DWORD *)(a3 + 12))
    goto LABEL_13;
  if (a4 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DB5CE8);
  }
  if (*(_DWORD *)(a3 + 28))
  {
    __break(0xC471u);
    JUMPOUT(0x197DB5CB8);
  }
  if (a4 <= 2)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x197DB5C98);
  }
  if (*(_DWORD *)(a3 + 44))
  {
    __break(0xC471u);
    JUMPOUT(0x197DB5CD8);
  }
  v5 = *a2;
  v6 = a2[1];
  v7 = *(_DWORD *)(a3 + 24) & 0x7F;
  v8 = *(_DWORD *)(a3 + 8) & 0x7F;
  v9 = *(_BYTE *)(a3 + 40) & 0x7F;
  v10 = *((_DWORD *)a2 + 4);
  result = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3576A28;
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)(result + 24) = operationCreateDirectArguments;
  *(_BYTE *)(result + 32) = v8;
  *(_BYTE *)(result + 33) = v7;
  *(_QWORD *)(result + 40) = v6;
  *(_BYTE *)(result + 48) = v9;
  *(_DWORD *)(result + 52) = v10;
  *a1 = result;
  return result;
}

_QWORD *JSC::B3::StackmapGenerationParams::addLatePath<JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t DirectArgumentsEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[9];
  unsigned int *v19;

  v3 = WTF::fastMalloc((WTF *)0x58);
  DirectArgumentsEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11 = _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_28compileCreateDirectArgumentsEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11_(v3, (uint64_t)v18);
  v19 = (unsigned int *)DirectArgumentsEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11;
  v12 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(a1, (uint64_t *)&v19);
    v14 = v19;
    v19 = 0;
    if (v14)
    {
      v15 = v14 + 2;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v14 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = DirectArgumentsEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11;
    *(_DWORD *)(a1 + 12) = v12 + 1;
  }
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &),WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>> JSC::FTL::createLazyCallGenerator<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>(JSC::VM &,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32)::{lambda(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v10;
  uint64_t v11;
  JSC::ARM64LogicalImmediate *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint8x8_t v39;
  __int32 v40;
  uint8x8_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  char v52;
  char v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  unsigned __int8 *v60;
  char *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unsigned int v64;
  unsigned __int8 *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int8x8_t v84;
  int v85;
  uint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  unsigned int v89;
  char v90;
  uint64_t v91;
  int *v92;
  int *v93;
  int v94;
  uint64_t v95;
  int64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  JSC::ARM64LogicalImmediate *v100;
  uint64_t v101;
  int v102;
  int v103;
  char v104;
  __int16 v105;
  char v106;
  int v107;
  uint64_t v108;
  void *__dst;
  int v110;
  unsigned int v111;
  _WORD v112[8];
  _QWORD v113[9];

  v10 = *(JSC::AssemblerBuffer **)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 48);
  v12 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v11 + 32);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  v16 = *(unsigned __int8 *)(a1 + 33);
  v17 = *(unsigned __int8 *)(a1 + 48);
  v100 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(a1 + 52);
  v101 = *(_QWORD *)(a1 + 40);
  if ((_DWORD)v12)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197DB63ECLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, v12, a2 + 264, a4, a5, a6, a7, a8);
    v23 = *(_DWORD *)(a2 + 200);
    if (v23 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v18, v19, v20, v21, v22, a7, a8);
      v23 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v23) = -1207811152;
    *(_DWORD *)(a2 + 200) += 4;
  }
  JSC::FTL::SlowPathCallContext::SlowPathCallContext(v113, *(_QWORD *)(v11 + 24), a2, 5u, v15, 0xFFFFFFFFLL, a7, a8);
  __dst = v112;
  v110 = 2;
  if (!v16)
  {
    if (v17 == 2)
    {
      v32 = &v108;
      goto LABEL_67;
    }
    v31 = 0;
    goto LABEL_11;
  }
  v112[0] = v16;
  v31 = 1;
  v111 = 1;
  if (v17 != 2)
  {
LABEL_11:
    v112[v31++] = v17 | 0x200;
    v111 = v31;
  }
  v32 = &v108;
  do
  {
    v33 = 0;
    v34 = 0;
    v35 = (char *)__dst;
    v36 = v31;
    do
    {
      if ((*((_BYTE *)__dst + v33 + 1) & 0x40) != 0)
      {
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
      v34 |= 1 << *((_BYTE *)__dst + v33 + 1);
      v33 += 2;
    }
    while (2 * v31 != v33);
    v37 = 0;
    do
    {
      v38 = *((_BYTE *)__dst + v37) & 0x7F;
      if (v38 >= 0x40)
        goto LABEL_85;
      v34 &= ~(1 << v38);
      v37 += 2;
    }
    while (2 * v31 != v37);
    v39 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
    v39.i16[0] = vaddlv_u8(v39);
    v40 = v39.i32[0];
    v41 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v34));
    v41.i16[0] = vaddlv_u8(v41);
    if (v41.i32[0] + v40)
    {
      v42 = 0;
      if (v31 <= 1)
        v43 = 1;
      else
        v43 = v31;
      v44 = 2 * v43;
      while (1)
      {
        v45 = *((unsigned __int8 *)__dst + v42 + 1);
        if ((v45 & 0x7Fu) >= 0x40)
          goto LABEL_85;
        if (((v34 >> (v45 & 0x7F)) & 1) != 0)
          break;
        v42 += 2;
        if (v44 == v42)
          goto LABEL_63;
      }
      v46 = *((unsigned __int8 *)__dst + v42);
      if (v46 != v45)
      {
        v47 = (char)v46;
        if ((char)v46 == 63)
        {
          v48 = *(_DWORD *)(a2 + 200);
          v49 = *(_DWORD *)(a2 + 192);
          if ((char)v45 == 31)
            goto LABEL_57;
          v51 = v45 & 0x1F | 0xD2800000;
        }
        else
        {
          v48 = *(_DWORD *)(a2 + 200);
          v49 = *(_DWORD *)(a2 + 192);
          v50 = v45 == 31 || v47 == 31;
          if (!v50)
          {
            v51 = v45 & 0xFFE0FFFF | ((v47 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_58;
          }
LABEL_57:
          v51 = (char)v45 | (32 * v47) | 0x91000000;
        }
LABEL_58:
        if (v48 + 4 > v49)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v24, v25, v26, v27, v28, v29, v30);
          v48 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v48) = v51;
        *(_DWORD *)(a2 + 200) += 4;
        v35 = (char *)__dst;
        v36 = v111;
      }
      memmove(&v35[v42], &v35[v42 + 2], 2 * v36 - v42 - 2);
      v31 = v111 - 1;
      goto LABEL_62;
    }
    v99 = v14;
    v52 = *(_BYTE *)__dst;
    v53 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v53, v26, v27, v28, v29, v30);
    memmove(__dst, (char *)__dst + 2, 2 * v111 - 2);
    v54 = v111 - 1;
    v50 = v111 == 1;
    v111 = v54;
    v55 = (unsigned __int8 *)__dst;
    v56 = (unsigned __int8 *)__dst + 2 * v54;
    if (v50)
    {
      v63 = 0;
      v64 = 0;
      v59 = 0;
      v24 = v56;
    }
    else
    {
      v57 = 2 * v54;
      v58 = __dst;
      while (*v58 != v53)
      {
        v58 += 2;
        v57 -= 2;
        if (!v57)
          goto LABEL_41;
      }
      *v58 = v52;
LABEL_41:
      v59 = 0;
      v60 = v55;
      v24 = v56;
      v61 = (char *)v56;
      do
      {
        if (*v55 == v55[1])
        {
          v62 = v55;
          if (v61 != (char *)__dst + 2 * v111)
          {
            v98 = (char *)v56;
            if (v55 == v24)
            {
              v62 = (unsigned __int8 *)v61;
            }
            else
            {
              v96 = v60 - v24;
              v97 = v61;
              memmove(v61, v24, v60 - v24);
              v62 = (unsigned __int8 *)&v97[v96];
            }
            v56 = (unsigned __int8 *)v98;
          }
          v24 = v55 + 2;
          ++v59;
          v61 = (char *)v62;
        }
        v55 += 2;
        v60 += 2;
      }
      while (v55 < v56);
      v55 = (unsigned __int8 *)__dst;
      v63 = v111;
      v64 = v111;
      v56 = (unsigned __int8 *)v61;
    }
    v65 = &v55[2 * v63];
    v14 = v99;
    if (v24 != v65)
    {
      memmove(v56, v24, v65 - v24);
      v64 = v111;
    }
    v31 = v64 - v59;
LABEL_62:
    v111 = v31;
LABEL_63:
    ;
  }
  while (v31);
  v66 = __dst;
  if (v112 != __dst && __dst)
  {
    __dst = 0;
    v110 = 0;
    WTF::fastFree((unint64_t)v66, v24, v25, v26, v27, v28, v29, v30);
  }
LABEL_67:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, v100, 3, v26, v27, v28, v29, v30);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v101, 1, v67, v68, v69, v70, v71);
  JSC::FTL::SlowPathCallContext::makeCall((uint64_t)v113, v13, v14, v72, v73, v74, v75, v76, (uint64_t)&__dst);
  JSC::FTL::SlowPathCallContext::~SlowPathCallContext((JSC::FTL::SlowPathCallContext *)v113, v77, v78, v79, v80, v81, v82, v83);
  if (v10)
  {
    JSC::AssemblyHelpers::emitExceptionCheck(a2, v13, 0, 0, 0xFFFFFFFFLL, v28, v29, v30, (uint64_t)&v107, v84);
    v85 = v107;
    if (v107 != -1)
    {
      v86 = *((unsigned int *)v10 + 3);
      if ((_DWORD)v86 == *((_DWORD *)v10 + 2))
      {
        v87 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, (void *)(v86 + 1), (unint64_t)&v107, v26, v27, v28, v29, v30);
        v32 = (uint64_t *)(v87 + 1);
        v85 = *v87;
        LODWORD(v86) = *((_DWORD *)v10 + 3);
      }
      v88 = *(_QWORD *)v10 + 12 * v86;
      *(_DWORD *)v88 = v85;
      *(_QWORD *)(v88 + 4) = *v32;
      ++*((_DWORD *)v10 + 3);
    }
  }
  v10 = (JSC::AssemblerBuffer *)(a2 + 56);
  for (LODWORD(v13) = *(_DWORD *)(a2 + 200); (int)v13 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v13)
  {
LABEL_86:
    if ((v13 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)v24, v25, v26, v27, v28, v29, v30);
      LODWORD(v13) = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = -721215457;
    LODWORD(v13) = *(_DWORD *)(a2 + 200) + 4;
  }
  v89 = v13;
  if ((v13 + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, (uint64_t)v24, v25, v26, v27, v28, v29, v30);
    v89 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v89) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v90 = 69;
  else
    v90 = 65;
  v102 = v13;
  v103 = 0;
  v104 = v90;
  v105 = 15;
  v106 = -1;
  if ((_DWORD)v13 != -1)
  {
    v91 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v91 == *(_DWORD *)(a3 + 8))
    {
      v92 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v91 + 1), (unint64_t)&v102, v26, v27, v28, v29, v30);
      v94 = *v92;
      v93 = v92 + 1;
      v95 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v95 = v94;
    }
    else
    {
      v93 = &v103;
      v95 = *(_QWORD *)a3 + 12 * v91;
      *(_DWORD *)v95 = v13;
    }
    *(_QWORD *)(v95 + 4) = *(_QWORD *)v93;
    ++*(_DWORD *)(a3 + 12);
  }
}

uint64_t _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_28compileCreateDirectArgumentsEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_EC1EOS11_(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E3576A50;
  *(_DWORD *)(result + 16) = *(_DWORD *)a2;
  *(_QWORD *)(result + 20) = *(_QWORD *)(a2 + 4);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 24);
  v2 = *(_QWORD *)(a2 + 32);
  if ((v2 & 1) != 0)
  {
    v8 = *(_QWORD *)(v2 & 0xFFFFFFFF8);
    if ((v2 & 2) != 0
      || ((v9 = *(unsigned int *)((v2 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v14 = a2;
      v15 = result;
      v12 = v8;
      v13 = v9;
      v8 = WTF::fastMalloc((WTF *)0x10);
      a2 = v14;
      result = v15;
      *(_QWORD *)v8 = v12;
      *(_DWORD *)(v8 + 8) = v13;
      v11 = 1;
    }
    else
    {
      v11 = v8;
      v8 = v9 << 36;
    }
    v2 = v8 | v11;
  }
  *(_QWORD *)(result + 48) = v2;
  v3 = *(unsigned int **)(a2 + 40);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 56) = v3;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(result + 80) = v5;
  return result;
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_28compileCreateDirectArgumentsEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_28compileCreateDirectArgumentsEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_28compileCreateDirectArgumentsEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

_QWORD *JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileCreateDirectArguments(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::CCallHelpers &)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *result;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  _BYTE v58[12];
  int v59;
  unsigned int *v60;
  uint64_t v61[2];
  __int128 v62;
  uint64_t v63;
  int v64;

  v10 = *(_BYTE *)(a2 + 212);
  if (!v10)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v18 = *(unsigned int *)(v17 + 308);
  if ((_DWORD)v18 == *(_DWORD *)(v17 + 304))
  {
    WTF::Vector<std::unique_ptr<JSC::FTL::LazySlowPath>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,decltype(nullptr)>(v17 + 296);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v17 + 296) + 8 * v18) = 0;
    *(_DWORD *)(v17 + 308) = v18 + 1;
  }
  JSC::MacroAssemblerARM64::pushToSaveImmediateWithoutTouchingRegisters((unsigned int *)a2, v18, v11, v12, v13, v14, v15, v16);
  v19 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v19 + 90440), v19, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v20, v21, v22, v23, v24, v58);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, *(uint64_t *)v58, v25, v26, v27, v28, v29, v30);
  JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v58, v31, v32, v33, v34, v35, v36, v37);
  v38 = *(unsigned int **)(*(_QWORD *)(a1 + 16) + 24);
  if (v38)
  {
    v39 = v38 + 2;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
    do
      v41 = __ldaxr(v39);
    while (__stlxr(v41 + 1, v39));
  }
  else
  {
    *(_DWORD *)v58 = *(_DWORD *)a1;
    *(_QWORD *)&v58[4] = *(_QWORD *)(a1 + 4);
    v59 = *(_DWORD *)(a1 + 24);
  }
  v60 = v38;
  JSC::CodeOrigin::CodeOrigin(v61, (const JSC::CodeOrigin *)(a1 + 32));
  v42 = *(unsigned int **)(a1 + 40);
  if (v42)
  {
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 + 1, v42));
  }
  v61[1] = (uint64_t)v42;
  v62 = *(_OWORD *)(a1 + 48);
  v44 = *(_QWORD *)(a1 + 64);
  if (v44)
  {
    v45 = (unsigned int *)(v44 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
  }
  v63 = v44;
  v64 = v18;
  _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_28compileCreateDirectArgumentsEvEUlRKN3WTF6VectorINS4_8LocationELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEE_EEPNS_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlRNS_10LinkBufferEE_EEvSM_(a2, (uint64_t)v58);
  if (v38)
  {
    v55 = v38 + 2;
    do
    {
      v56 = __ldaxr(v55);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v55));
    if (!v57)
    {
      atomic_store(1u, v38 + 2);
      result = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v38 + 32))(v38);
    }
  }
  *(_BYTE *)(a2 + 212) = v10;
  return result;
}

void _ZN3JSC22AbstractMacroAssemblerINS_14ARM64AssemblerEE11addLinkTaskIZZZNS_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS6_28compileCreateDirectArgumentsEvEUlRKN3WTF6VectorINS4_8LocationELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEE_EEPNS_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlRNS_10LinkBufferEE_EEvSM_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;

  v4 = WTF::fastMalloc((WTF *)0x58);
  v5 = v4;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3576A78;
  *(_DWORD *)(v4 + 16) = *(_DWORD *)a2;
  *(_QWORD *)(v4 + 20) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(v4 + 28) = *(_DWORD *)(a2 + 12);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(v4 + 32) = v6;
  v9 = *(_QWORD *)(a2 + 24);
  if ((v9 & 1) != 0)
  {
    v29 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v30 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v30 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v30 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else if (v30 >> 28)
    {
      v33 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v29 = v33;
      *(_DWORD *)(v29 + 8) = v30;
      v32 = 1;
    }
    else
    {
      v32 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
      v29 = v30 << 36;
    }
    v9 = v29 | v32;
  }
  *(_QWORD *)(v5 + 40) = v9;
  v10 = *(unsigned int **)(a2 + 32);
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(v5 + 48) = v10;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 56);
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(v5 + 72) = v12;
  *(_DWORD *)(v5 + 80) = *(_DWORD *)(a2 + 64);
  v15 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v15 != *(_DWORD *)(a1 + 240))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
LABEL_21:
    *v16 = v5;
    *(_DWORD *)(a1 + 244) = v15 + 1;
    return;
  }
  v17 = v15 + (v15 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v15 + 1)
    v19 = v15 + 1;
  else
    v19 = v18;
  if (!(v19 >> 29))
  {
    v20 = *(const void **)(a1 + 232);
    v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
    *(_DWORD *)(a1 + 240) = v19;
    *(_QWORD *)(a1 + 232) = v21;
    memcpy(v21, v20, 8 * v15);
    if (v20)
    {
      if (*(const void **)(a1 + 232) == v20)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v20, v22, v23, v24, v25, v26, v27, v28);
    }
    v15 = *(unsigned int *)(a1 + 244);
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
    goto LABEL_21;
  }
  __break(0xC471u);
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_28compileCreateDirectArgumentsEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;

  v9 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[6];
  a1[6] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v22 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          v28 = v13;
          WTF::fastFree((unint64_t)v22, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      v25 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v13;
          WTF::fastFree((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8);
          v13 = v29;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[5];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_28compileCreateDirectArgumentsEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v21 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v27 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v27;
        }
      }
      v24 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v24)
      {
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          v28 = v13;
          WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
          v13 = v28;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v17 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t *_ZN3WTF17SharedTaskFunctorIFvRN3JSC10LinkBufferEEZZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNS7_28compileCreateDirectArgumentsEvEUlRKNS_6VectorINS5_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS1_2B315PatchpointValueERKT_RKNS9_IPNSH_5ValueELm0ESB_Lm16ESC_EEENKUlRNS1_12CCallHelpersERKNSH_24StackmapGenerationParamsEE_clEST_SW_ENKUlST_E_clEST_EUlS3_E_E3runES3_(uint64_t a1, JSC::LinkBuffer *a2)
{
}

uint64_t JSC::AssemblyHelpers::argumentsStart(uint64_t *a1)
{
  uint64_t result;
  uint64_t v2;

  if (!a1)
    return 6;
  v2 = *a1;
  if (!*a1 || *(_DWORD *)v2 < 2u)
    return 0xFFFFFFFFLL;
  if (*(_BYTE *)(v2 + 13) == 8)
    return *(unsigned int *)(v2 + 14);
  result = 1691;
  __break(0xC471u);
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::Structure *,JSC::Register *,unsigned int,JSC::JSFunction *,JSC::JSLexicalEnvironment *),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8)
{
  int v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  JSC::DFG::Node *v18;

  v16 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationCreateScopedArguments);
  v17 = JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::BasicBlock **)(a1 + 27776), *(JSC::B3::Value **)(a1 + 27760), v15, *(_QWORD *)(a1 + 27768), v16, *a2, *a3, *a4, *a5, *a6, *a7);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::Structure *,JSC::Register *,unsigned int,JSC::JSFunction *,JSC::Butterfly *),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *&,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8)
{
  int v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  JSC::DFG::Node *v18;

  v16 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationCreateClonedArguments);
  v17 = JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::BasicBlock **)(a1 + 27776), *(JSC::B3::Value **)(a1 + 27760), v15, *(_QWORD *)(a1 + 27768), v16, *a2, *a3, *a4, *a5, *a6, *a7);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::Structure *,JSC::Register *,unsigned int,JSC::JSFunction *,JSC::Butterfly *),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8)
{
  int *v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  JSC::DFG::Node *v33;
  WTF *v35;
  uint64_t v36;

  v15 = (int *)(a1 + 28264);
  v16 = *(_DWORD *)(a1 + 28264);
  if ((v16 & 0x80000000) == 0)
  {
    v17 = *(_QWORD *)(a1 + 27848);
    v35 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v35 = 0x200000002;
    v36 = 0x200000002;
    v25 = (_QWORD *)(v17 + 32);
    v26 = *(unsigned int *)(v17 + 44);
    if ((_DWORD)v26 == *(_DWORD *)(v17 + 40))
    {
      v27 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v26 + 1, (unint64_t)&v35);
      v28 = *(_QWORD *)(v17 + 32) + 16 * *(unsigned int *)(v17 + 44);
    }
    else
    {
      v28 = *v25 + 16 * v26;
      v27 = (unint64_t)&v35;
    }
    *(_QWORD *)v28 = 0;
    *(_QWORD *)(v28 + 8) = 0;
    v29 = *(_QWORD *)v27;
    *(_QWORD *)v27 = 0;
    *(_QWORD *)v28 = v29;
    LODWORD(v29) = *(_DWORD *)(v27 + 8);
    *(_DWORD *)(v27 + 8) = 0;
    *(_DWORD *)(v28 + 8) = v29;
    LODWORD(v29) = *(_DWORD *)(v27 + 12);
    *(_DWORD *)(v27 + 12) = 0;
    *(_DWORD *)(v28 + 12) = v29;
    ++*(_DWORD *)(v17 + 44);
    v16 = v26 | 0x80000000;
    *v15 = v26 | 0x80000000;
    v30 = v35;
    if (v35)
    {
      v35 = 0;
      LODWORD(v36) = 0;
      WTF::fastFree((unint64_t)v30, v18, v19, v20, v21, v22, v23, v24);
      v16 = *v15;
    }
  }
  v31 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationCreateClonedArguments);
  v32 = JSC::B3::BasicBlock::appendNew<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::BasicBlock **)(a1 + 27776), *(JSC::B3::Value **)(a1 + 27760), v16, *(_QWORD *)(a1 + 27768), v31, *a2, *a3, *a4, *a5, *a6, *a7);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::allocateObject<JSC::ClonedArguments,JSC::DFG::RegisteredStructure>(uint64_t a1, uint64_t a2, uint64_t a3, JSC::B3::BasicBlock *a4)
{
  uint64_t v4;
  JSC::FTL::Output *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (*(_DWORD *)(v4 + 37884) <= 0x17u)
  {
    result = 97;
    __break(0xC471u);
  }
  else
  {
    v9 = (JSC::FTL::Output *)(a1 + 27640);
    v10 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), v4 + 37824);
    v11 = JSC::FTL::Output::constInt64(v9, a2);
  }
  return result;
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::loadStructure(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  JSC::FTL::Output *v4;
  uint64_t v5;
  JSC::B3::Value *v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;

  v4 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v5 = *((_QWORD *)this + 383);
  if (v5)
  {
    v6 = (JSC::B3::Value *)JSC::FTL::Output::constInt64((JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640), v5);
    a2 = (JSC::B3::Value *)JSC::FTL::Output::add(v4, a2, v6);
  }
  v7 = JSC::FTL::Output::load((uint64_t)v4, (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 3040), (uint64_t)a2, 1);
  v8 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt(v4, v7, 2);
  v9 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v4, 4);
  return JSC::FTL::Output::shl(v4, v8, v9);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,JSC::JSObject *),JSC::B3::Value *,JSC::B3::Value *&,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  JSC::B3::Value *v13;
  JSC::DFG::Node *v14;

  v12 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationObjectAssignObject);
  v13 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, 2, v12, *a2, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,long long),JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  JSC::B3::Value *v13;
  JSC::DFG::Node *v14;

  v12 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationObjectAssignUntyped);
  v13 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *,JSC::B3::Value *>(a1 + 27640, 2, v12, *a2, *a3, *a4);
}

JSC::B3::Value *JSC::FTL::`anonymous namespace'::LowerDFGToB3::decodeNonNullStructure(JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *this, JSC::B3::Value *a2)
{
  JSC::FTL::Output *v2;
  JSC::B3::Value *v3;
  JSC::B3::Value *v4;

  v2 = (JSC::FTL::_anonymous_namespace_::LowerDFGToB3 *)((char *)this + 27640);
  v3 = (JSC::B3::Value *)JSC::FTL::Output::zeroExt((_QWORD *)this + 3455, (uint64_t)a2, 2);
  v4 = (JSC::B3::Value *)JSC::FTL::Output::constInt64(v2, 4);
  return JSC::FTL::Output::shl(v2, v3, v4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  JSC::DFG::Node *v14;

  v12 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationObjectCreateObject);
  v13 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *>((_QWORD *)(a1 + 27640), v11, v12, *a2, *a3);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,long long),JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *>((_QWORD *)(a1 + 27640), v12, v13, *a3, *a4);
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::B3::Value *&,JSC::B3::Value *,JSC::B3::Value *&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::DFG::Node *v17;
  WTF *v18;
  char **v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  char *v32;
  WTF *v33;
  uint64_t v34;

  v12 = (int *)(a1 + 28264);
  v13 = *(_DWORD *)(a1 + 28264);
  if ((v13 & 0x80000000) == 0)
  {
    v23 = *(_QWORD *)(a1 + 27848);
    v33 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v33 = 0x200000002;
    v34 = 0x200000002;
    v13 = JSC::B3::Procedure::addTuple(v23, (unint64_t)&v33);
    *v12 = v13;
    v31 = v33;
    if (v33)
    {
      v33 = 0;
      LODWORD(v34) = 0;
      WTF::fastFree((unint64_t)v31, v24, v25, v26, v27, v28, v29, v30);
      v13 = *v12;
    }
  }
  v14 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), (uint64_t)operationNewArrayBuffer);
  v15 = *a3;
  v16 = *(_QWORD *)(a1 + 27776);
  v18 = (WTF *)JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::Type,JSC::B3::Origin,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(*(JSC::B3::Value **)(a1 + 27760), v13, *(_QWORD *)(a1 + 27768), v14, *a2, v15, *a4);
  v33 = v18;
  v19 = (char **)(v16 + 8);
  v20 = *(unsigned int *)(v16 + 20);
  if ((_DWORD)v20 == *(_DWORD *)(v16 + 16))
  {
    v32 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v19, v20 + 1, (unint64_t)&v33);
    v20 = *(unsigned int *)(v16 + 20);
    *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v20) = *(_QWORD *)v32;
    v21 = v33;
  }
  else
  {
    *(_QWORD *)&(*v19)[8 * v20] = v18;
    v21 = v18;
  }
  *(_DWORD *)(v16 + 20) = v20 + 1;
  *((_QWORD *)v21 + 4) = v16;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSArray *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::B3::Value *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  JSC::DFG::Node *v36;
  char **v37;
  uint64_t v38;
  WTF *v39;
  uint64_t result;
  char *v41;
  WTF *v42;
  uint64_t v43;

  v12 = (int *)(a1 + 28264);
  v13 = *(_DWORD *)(a1 + 28264);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = *(_QWORD *)(a1 + 27848);
    v42 = (WTF *)WTF::fastMalloc((WTF *)8);
    *(_QWORD *)v42 = 0x200000002;
    v43 = 0x200000002;
    v22 = (_QWORD *)(v14 + 32);
    v23 = *(unsigned int *)(v14 + 44);
    if ((_DWORD)v23 == *(_DWORD *)(v14 + 40))
    {
      v24 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v42);
      v25 = *(_QWORD *)(v14 + 32) + 16 * *(unsigned int *)(v14 + 44);
    }
    else
    {
      v25 = *v22 + 16 * v23;
      v24 = (unint64_t)&v42;
    }
    *(_QWORD *)v25 = 0;
    *(_QWORD *)(v25 + 8) = 0;
    v26 = *(_QWORD *)v24;
    *(_QWORD *)v24 = 0;
    *(_QWORD *)v25 = v26;
    LODWORD(v26) = *(_DWORD *)(v24 + 8);
    *(_DWORD *)(v24 + 8) = 0;
    *(_DWORD *)(v25 + 8) = v26;
    LODWORD(v26) = *(_DWORD *)(v24 + 12);
    *(_DWORD *)(v24 + 12) = 0;
    *(_DWORD *)(v25 + 12) = v26;
    ++*(_DWORD *)(v14 + 44);
    v13 = v23 | 0x80000000;
    *v12 = v23 | 0x80000000;
    v27 = v42;
    if (v42)
    {
      v42 = 0;
      LODWORD(v43) = 0;
      WTF::fastFree((unint64_t)v27, v15, v16, v17, v18, v19, v20, v21);
      v13 = *v12;
    }
  }
  v28 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v29 = *a3;
  v30 = *a4;
  v31 = *(_QWORD *)(a1 + 27776);
  v32 = *(JSC::B3::Value **)(a1 + 27760);
  v33 = *(_QWORD *)(a1 + 27768);
  v34 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v34 = off_1E357F5F0;
  *(_DWORD *)(v34 + 8) = -1;
  *(_WORD *)(v34 + 12) = 82;
  *(_DWORD *)(v34 + 16) = v13;
  *(_BYTE *)(v34 + 20) = 4;
  *(_QWORD *)(v34 + 24) = v33;
  *(_QWORD *)(v34 + 32) = 0;
  v35 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v34);
  v35[2] = v28;
  *v35 = v35 + 2;
  v35[3] = v29;
  v35[4] = v30;
  v35[1] = 0x300000003;
  *(_QWORD *)v34 = &unk_1E357CF78;
  *(_OWORD *)(v34 + 40) = xmmword_1991243D0;
  *(_QWORD *)(v34 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(v34 + 76))
  {
    JSC::B3::Procedure::addValueImpl(v32, (JSC::B3::Value *)v34);
    v42 = (WTF *)v34;
    v37 = (char **)(v31 + 8);
    v38 = *(unsigned int *)(v31 + 20);
    if ((_DWORD)v38 == *(_DWORD *)(v31 + 16))
    {
      v41 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37, v38 + 1, (unint64_t)&v42);
      v38 = *(unsigned int *)(v31 + 20);
      *(_QWORD *)(*(_QWORD *)(v31 + 8) + 8 * v38) = *(_QWORD *)v41;
      v39 = v42;
    }
    else
    {
      *(_QWORD *)&(*v37)[8 * v38] = v34;
      v39 = (WTF *)v34;
    }
    *(_DWORD *)(v31 + 20) = v38 + 1;
    *((_QWORD *)v39 + 4) = v31;
  }
  else
  {
    result = 60;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::FTL::`anonymous namespace'::LowerDFGToB3::vmCall<JSC::ExceptionOperationResult<JSC::JSArray *> (*)(JSC::JSGlobalObject *,long long),JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  JSC::DFG::Node *v15;

  v13 = JSC::FTL::Output::constInt64((JSC::FTL::Output *)(a1 + 27640), a2);
  v14 = (JSC::B3::Value *)JSC::FTL::Output::call<JSC::B3::Value *>((_QWORD *)(a1 + 27640), v12, v13, *a3, *a4);
}

uint64_t JSC::DFG::operationOwnPropertyKeysVariant(int a1)
{
  uint64_t result;

  if ((a1 - 197) < 5 && ((0x17u >> (a1 + 59)) & 1) != 0)
    return (uint64_t)off_1E3577DF8[(__int16)(a1 - 197)];
  result = 507;
  __break(0xC471u);
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileOwnPropertyKeysVariant(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileOwnPropertyKeysVariant(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v14 = *(_QWORD *)(v10 + 32);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      v15 = *(_QWORD *)(v10 + 24);
      if ((v15 & 1) != 0)
      {
        v17 = v15 & 0xFFFFFFFF8;
        if (v17)
        {
          v19 = v10;
          WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          v10 = v19;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileOwnPropertyKeysVariant(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileOwnPropertyKeysVariant(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 1) != 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v13 = *(_QWORD *)(v10 + 32);
      if ((v13 & 1) != 0)
      {
        v15 = v13 & 0xFFFFFFFF8;
        if (v15)
        {
          v17 = v10;
          WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          v10 = v17;
        }
      }
      v14 = *(_QWORD *)(v10 + 24);
      if ((v14 & 1) != 0)
      {
        v16 = v14 & 0xFFFFFFFF8;
        if (v16)
        {
          v18 = v10;
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
          v10 = v18;
        }
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::PatchpointValue * JSC::FTL::`anonymous namespace'::LowerDFGToB3::lazySlowPath<JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileOwnPropertyKeysVariant(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>(JSC::FTL::`anonymous namespace'::LowerDFGToB3::compileOwnPropertyKeysVariant(void)::{lambda(WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} const&,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, const JSC::B3::StackmapGenerationParams *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  WTF *v10;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  int v17;
  _OWORD *v18;
  unsigned int v19;
  uint64_t (*v20)();
  char v21;
  uint64_t v22;
  char v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  _BYTE *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  _BYTE *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  JSC::FTL::ExceptionTarget *v119;
  __int128 v120;
  WTF *v121;
  uint64_t v122;

  v121 = 0;
  v122 = 0;
  v14 = *((unsigned int *)a3 + 5);
  if ((_DWORD)v14)
  {
    v10 = 0;
    LODWORD(v15) = 0;
    v8 = *((_QWORD *)a3 + 1);
    v9 = 16 * v14;
    do
    {
      *(_QWORD *)&v120 = JSC::FTL::Location::forValueRep(v8);
      *((_QWORD *)&v120 + 1) = v16;
      if ((_DWORD)v15 == (_DWORD)v122)
      {
        v18 = (_OWORD *)WTF::Vector<JSC::FTL::Location,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v121, v15 + 1, (unint64_t)&v120);
        v17 = HIDWORD(v122);
        v10 = v121;
        *((_OWORD *)v121 + HIDWORD(v122)) = *v18;
      }
      else
      {
        *((_OWORD *)v10 + v15) = v120;
        v17 = HIDWORD(v122);
      }
      v15 = (unsigned int *)(v17 + 1);
      HIDWORD(v122) = v17 + 1;
      v8 += 16;
      v9 -= 16;
    }
    while (v9);
  }
  else
  {
    v15 = 0;
  }
  v19 = *(unsigned __int16 *)(a1 + 24) - 197;
  if (v19 >= 5 || ((0x17u >> (*(_WORD *)(a1 + 24) + 59)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197DB817CLL);
  }
  if (!(_DWORD)v15)
  {
    __break(0xC471u);
    JUMPOUT(0x197DB8200);
  }
  if (*((_DWORD *)v121 + 3) || v15 <= 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197DB7F30);
  }
  if (*((_DWORD *)v121 + 7))
  {
    v24 = "./ftl/FTLLocation.cpp";
    v25 = "GPRReg JSC::FTL::Location::directGPR() const";
    v26 = 399;
    __break(0xC471u);
    goto LABEL_81;
  }
  v20 = off_1E3577E20[(__int16)v19];
  v10 = *(WTF **)(a1 + 16);
  v21 = *((_BYTE *)v121 + 8) & 0x7F;
  v22 = *(_QWORD *)(a1 + 32);
  v23 = *((_BYTE *)v121 + 24) & 0x7F;
  v8 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v8 + 8) = 1;
  v15 = (unsigned int *)(v8 + 8);
  *(_QWORD *)v8 = off_1E3576AC8;
  *(_QWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 24) = v20;
  *(_BYTE *)(v8 + 32) = v21;
  *(_QWORD *)(v8 + 40) = v22;
  *(_BYTE *)(v8 + 48) = v23;
  *(_BYTE *)(a2 + 328) = 1;
  v9 = a2 + 56;
  LODWORD(v10) = *(_DWORD *)(a2 + 200);
  if ((int)v10 < *(_DWORD *)(a2 + 52))
    goto LABEL_82;
  while (1)
  {
    v27 = v10;
    if (((_DWORD)v10 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v9, (uint64_t)v24, (uint64_t)v25, v26, a5, a6, a7, a8);
      v27 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v27) = 335544320;
    v28 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v28;
    if (*(_BYTE *)(a2 + 328))
      v29 = 0xFF000F4500000000;
    else
      v29 = 0xFF000F4100000000;
    for (*(_BYTE *)(a2 + 328) = 0; v28 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v28)
    {
      if ((v28 + 4) > *(_DWORD *)(a2 + 192))
      {
        v112 = v29;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v9, (uint64_t)v24, (uint64_t)v25, v26, a5, a6, a7, a8);
        v29 = v112;
        v28 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = -721215457;
      v28 = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
    v9 = *(_QWORD *)(*(_QWORD *)a3 + 104);
    v30 = ~*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 7) + 48) + 216) & 0xFF003FF80000 | *(_QWORD *)(*(_QWORD *)a3 + 96);
    v31 = *((unsigned int *)a3 + 9);
    if ((_DWORD)v31)
    {
      v66 = (_BYTE *)*((_QWORD *)a3 + 3);
      do
      {
        v67 = *v66 & 0x7F;
        if (v67 >= 0x40)
          goto LABEL_81;
        v68 = 1 << v67;
        v30 &= ~v68;
        v9 &= ~v68;
        ++v66;
      }
      while (--v31);
    }
    v32 = *((unsigned int *)a3 + 13);
    if (!(_DWORD)v32)
      break;
    v73 = (_BYTE *)*((_QWORD *)a3 + 5);
    while (1)
    {
      v74 = (*v73 + 32) & 0x7F;
      if (v74 >= 0x40)
        break;
      v75 = 1 << v74;
      v30 &= ~v75;
      v9 &= ~v75;
      ++v73;
      if (!--v32)
        goto LABEL_24;
    }
LABEL_81:
    __break(1u);
    do
    {
LABEL_82:
      if (((_DWORD)v10 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v9, (uint64_t)v24, (uint64_t)v25, v26, a5, a6, a7, a8);
        LODWORD(v10) = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v10) = -721215457;
      LODWORD(v10) = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = (_DWORD)v10;
    }
    while ((int)v10 < *(_DWORD *)(a2 + 52));
  }
LABEL_24:
  v117 = v29;
  JSC::FTL::PatchpointExceptionHandle::scheduleExitCreation(*(JSC::FTL::PatchpointExceptionHandle **)(a1 + 40), a3, (uint64_t *)&v119);
  v33 = *(_QWORD *)(a1 + 56);
  v116 = *(_QWORD *)(a1 + 48);
  if ((v33 & 1) != 0)
  {
    v76 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
    if ((v33 & 2) != 0
      || ((v77 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v77 != 0x3FFFFFFF)
        ? (v78 = (_DWORD)v77 == -1)
        : (v78 = 1),
          v78))
    {
      v79 = 2;
    }
    else if (v77 >> 28)
    {
      v113 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v113 = v76;
      *(_DWORD *)(v113 + 8) = v77;
      v79 = 1;
      v76 = v113;
    }
    else
    {
      v79 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
      v76 = v77 << 36;
    }
    v33 = v76 | v79;
  }
  v34 = (unsigned int *)v119;
  if (v119)
  {
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  v118 = v9;
  do
    v36 = __ldaxr(v15);
  while (__stlxr(v36 + 1, v15));
  v37 = *((_QWORD *)a3 + 7);
  v38 = v33;
  if ((v33 & 1) != 0)
  {
    v80 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
    if ((v33 & 2) != 0
      || ((v81 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v81 != 0x3FFFFFFF)
        ? (v82 = (_DWORD)v81 == -1)
        : (v82 = 1),
          v82))
    {
      v83 = 2;
    }
    else if (v81 >> 28)
    {
      v114 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v114 = v80;
      *(_DWORD *)(v114 + 8) = v81;
      v83 = 1;
      v80 = v114;
    }
    else
    {
      v83 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
      v80 = v81 << 36;
    }
    v38 = v80 | v83;
  }
  if (v34)
  {
    do
      v39 = __ldaxr(v34);
    while (__stlxr(v39 + 1, v34));
  }
  do
    v40 = __ldaxr(v15);
  while (__stlxr(v40 + 1, v15));
  v48 = WTF::fastMalloc((WTF *)0x58);
  *(_DWORD *)(v48 + 8) = 1;
  *(_QWORD *)v48 = &off_1E3576AF0;
  *(_DWORD *)(v48 + 16) = (_DWORD)v10;
  *(_QWORD *)(v48 + 20) = v117;
  *(_QWORD *)(v48 + 32) = v116;
  *(_DWORD *)(v48 + 40) = v28;
  v49 = v38;
  if ((v38 & 1) != 0)
  {
    v84 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
    if ((v38 & 2) != 0
      || ((v85 = *(unsigned int *)((v38 & 0xFFFFFFFF8) + 8), (_DWORD)v85 != 0x3FFFFFFF)
        ? (v86 = (_DWORD)v85 == -1)
        : (v86 = 1),
          v86))
    {
      v87 = 2;
    }
    else if (v85 >> 28)
    {
      v115 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v115 = v84;
      *(_DWORD *)(v115 + 8) = v85;
      v87 = 1;
      v84 = v115;
    }
    else
    {
      v87 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
      v84 = v85 << 36;
    }
    v49 = v84 | v87;
  }
  *(_QWORD *)(v48 + 48) = v49;
  if (v34)
  {
    do
      v50 = __ldaxr(v34);
    while (__stlxr(v50 + 1, v34));
  }
  *(_QWORD *)(v48 + 56) = v34;
  *(_QWORD *)(v48 + 64) = v30;
  *(_QWORD *)(v48 + 72) = v118;
  do
    v51 = __ldaxr(v15);
  while (__stlxr(v51 + 1, v15));
  *(_QWORD *)(v48 + 80) = v8;
  *(_QWORD *)&v120 = v48;
  v52 = *(unsigned int *)(v37 + 12);
  if ((_DWORD)v52 == *(_DWORD *)(v37 + 8))
  {
    WTF::Vector<WTF::RefPtr<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::B3::Air::GenerationContext &)>>>>(v37, (uint64_t *)&v120);
    v69 = (unsigned int *)v120;
    *(_QWORD *)&v120 = 0;
    if (v69)
    {
      v70 = v69 + 2;
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (!v72)
      {
        atomic_store(1u, v69 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v69 + 8))(v69);
      }
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v37 + 8 * v52) = v48;
    *(_DWORD *)(v37 + 12) = v52 + 1;
    *(_QWORD *)&v120 = 0;
  }
  do
  {
    v53 = __ldaxr(v15);
    v54 = v53 - 1;
  }
  while (__stlxr(v54, v15));
  if (!v54)
  {
    atomic_store(1u, (unsigned int *)(v8 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  if (v34)
  {
    do
    {
      v55 = __ldaxr(v34);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v34));
    if (!v56)
    {
      atomic_store(1u, v34);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v34, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
  }
  if ((v38 & 1) != 0 && (v38 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v38 & 0xFFFFFFFF8, v41, v42, v43, v44, v45, v46, v47);
  do
  {
    v57 = __ldaxr(v15);
    v58 = v57 - 1;
  }
  while (__stlxr(v58, v15));
  if (!v58)
  {
    atomic_store(1u, (unsigned int *)(v8 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  if (v34)
  {
    do
    {
      v59 = __ldaxr(v34);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v34));
    if (!v60)
    {
      atomic_store(1u, v34);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v34, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
  }
  if ((v33 & 1) != 0 && (v33 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v33 & 0xFFFFFFFF8, v41, v42, v43, v44, v45, v46, v47);
  v61 = (unsigned int *)v119;
  v119 = 0;
  if (v61)
  {
    do
    {
      v62 = __ldaxr(v61);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, v61));
    if (!v63)
    {
      atomic_store(1u, v61);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v61, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
  }
  do
  {
    v64 = __ldaxr(v15);
    v65 = v64 - 1;
  }
  while (__stlxr(v65, v15));
  if (!v65)
  {
    atomic_store(1u, (unsigned int *)(v8 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  if (v121)
    WTF::fastFree((unint64_t)v121, v41, v42, v43, v44, v45, v46, v47);
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &),WTF::Ref<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>,WTF::RawPtrTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>,WTF::DefaultRefDerefTraits<WTF::SharedTask<void ()(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)>>> JSC::FTL::createLazyCallGenerator<JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID>(JSC::VM &,WTF::CodePtr<(WTF::PtrTag)1,(WTF::FunctionAttributes)0>,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID)::{lambda(JSC::CCallHelpers &,JSC::FTL::LazySlowPath::GenerationParams &)#1}>::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  JSC::ARM64LogicalImmediate *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int i;
  unsigned int v34;
  char v35;
  uint64_t v36;
  int *v37;
  int *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  char v43;
  __int16 v44;
  char v45;
  _BYTE v46[32];

  v10 = *(_QWORD *)(a3 + 40);
  v11 = *(_QWORD *)(a3 + 48);
  v12 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(v11 + 32);
  v14 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v15 = *(_BYTE *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_BYTE *)(a1 + 48);
  if ((_DWORD)v12)
  {
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197DB8434);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, v12, a2 + 264, a4, a5, a6, a7, a8);
    v25 = *(_DWORD *)(a2 + 200);
    if (v25 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v18, v19, v20, v21, v22, v23, v24);
      v25 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v25) = -1207811152;
    *(_DWORD *)(a2 + 200) += 4;
  }
  JSC::FTL::callOperation<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID>((uint64_t)v46, v14, *(_QWORD *)(v11 + 24), (_DWORD *)a2, v10, v13, v15, v16, v17);
  for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v26, v27, v28, v29, v30, v31, v32);
      i = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
    i = *(_DWORD *)(a2 + 200) + 4;
  }
  v34 = i;
  if ((i + 4) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v26, v27, v28, v29, v30, v31, v32);
    v34 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v34) = 335544320;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v35 = 69;
  else
    v35 = 65;
  v41 = i;
  v42 = 0;
  v43 = v35;
  v44 = 15;
  v45 = -1;
  if (i != -1)
  {
    v36 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v36 == *(_DWORD *)(a3 + 8))
    {
      v37 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, (void *)(v36 + 1), (unint64_t)&v41, v28, v29, v30, v31, v32);
      v39 = *v37;
      v38 = v37 + 1;
      v40 = *(_QWORD *)a3 + 12 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v40 = v39;
    }
    else
    {
      v38 = &v42;
      v40 = *(_QWORD *)a3 + 12 * v36;
      *(_DWORD *)v40 = i;
    }
    *(_QWORD *)(v40 + 4) = *(_QWORD *)v38;
    ++*(_DWORD *)(a3 + 12);
  }
}

_QWORD *_ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_29compileOwnPropertyKeysVariantEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED1Ev(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;

  v9 = (unsigned int *)a1[10];
  a1[10] = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = a1[7];
  a1[7] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v18 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v24 = v13;
          WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      v21 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          v25 = v13;
          WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
          v13 = v25;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = a1[6];
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_29compileOwnPropertyKeysVariantEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_ED0Ev(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;

  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 16);
      *(_QWORD *)(v13 + 16) = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          v23 = v13;
          WTF::fastFree((unint64_t)v17, a2, a3, a4, a5, a6, a7, a8);
          v13 = v23;
        }
      }
      v20 = *(unsigned int **)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (v20)
      {
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v20);
          v24 = v13;
          WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
          v13 = v24;
        }
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v16 = *((_QWORD *)this + 6);
  if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void _ZN3WTF17SharedTaskFunctorIFvRN3JSC12CCallHelpersERNS1_2B33Air17GenerationContextEEZNKS4_24StackmapGenerationParams11addLatePathIZZNS1_3FTL12_GLOBAL__N_112LowerDFGToB312lazySlowPathIZNSD_29compileOwnPropertyKeysVariantEvEUlRKNS_6VectorINSB_8LocationELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEE_EEPNS4_15PatchpointValueERKT_RKNSF_IPNS4_5ValueELm0ESH_Lm16ESI_EEENKUlS3_RKS9_E_clES3_SY_EUlS3_E_EEvSR_EUlS3_S7_E_E3runES3_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unint64_t v79;
  uint64_t *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  const void *v94;
  void *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  const void *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  JSC::ExecutableMemoryHandle *v128[2];

  v10 = (unsigned int *)(a1 + 16);
  v11 = *(_BYTE *)(a2 + 212);
  if (!v11)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v20 = *(unsigned int *)(v19 + 308);
  if ((_DWORD)v20 == *(_DWORD *)(v19 + 304))
  {
    v91 = v20 + (v20 >> 2);
    if (v91 >= 0x10)
      v92 = v91 + 1;
    else
      v92 = 16;
    if (v92 <= v20 + 1)
      v93 = v20 + 1;
    else
      v93 = v92;
    if (v93 >> 29)
    {
      __break(0xC471u);
      goto LABEL_107;
    }
    v94 = *(const void **)(v19 + 296);
    v95 = (void *)WTF::fastMalloc((WTF *)(8 * v93));
    *(_DWORD *)(v19 + 304) = v93;
    *(_QWORD *)(v19 + 296) = v95;
    memcpy(v95, v94, 8 * v20);
    if (v94)
    {
      if (*(const void **)(v19 + 296) == v94)
      {
        *(_QWORD *)(v19 + 296) = 0;
        *(_DWORD *)(v19 + 304) = 0;
      }
      WTF::fastFree((unint64_t)v94, v12, v13, v14, v15, v16, v17, v18);
    }
    v22 = *(unsigned int *)(v19 + 308);
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v22);
  }
  else
  {
    v21 = (_QWORD *)(*(_QWORD *)(v19 + 296) + 8 * v20);
    LODWORD(v22) = *(_DWORD *)(v19 + 308);
  }
  *v21 = 0;
  *(_DWORD *)(v19 + 308) = v22 + 1;
  v23 = *(_DWORD *)(a2 + 200);
  if (v23 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v23 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v23) = -1447083024;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v20, 16, v14, v15, v16, v17, v18);
  v31 = *(_DWORD *)(a2 + 200);
  if (v31 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v24, v25, v26, v27, v28, v29, v30);
    v31 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = -134216720;
  v32 = *(_DWORD *)(a2 + 200);
  v33 = v32 + 4;
  *(_DWORD *)(a2 + 200) = v32 + 4;
  if ((v32 + 8) > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v24, v25, v26, v27, v28, v29, v30);
    v33 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v33) = -129989648;
  *(_DWORD *)(a2 + 200) += 4;
  v34 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 16);
  JSC::JITThunks::ctiStub(*(_QWORD *)(v34 + 90440), v34, (void (*)(uint64_t *__return_ptr, uint64_t))JSC::FTL::lazySlowPathGenerationThunkGenerator, v26, v27, v28, v29, v30, v128);
  JSC::MacroAssembler::jumpThunk<(WTF::PtrTag)26129>(a2, (uint64_t)v128[0], v35, v36, v37, v38, v39, v40);
  v48 = (unsigned int *)v128[1];
  v128[1] = 0;
  if (v48)
  {
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      atomic_store(1u, v48);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v48, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
  }
  v51 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 24);
  v127 = v11;
  if (v51)
  {
    v52 = v51 + 2;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 + 1, v52));
    v54 = *(_DWORD *)(a1 + 16);
    v55 = *(_QWORD *)(a1 + 20);
    v56 = *(_DWORD *)(a1 + 40);
    do
      v57 = __ldaxr(v52);
    while (__stlxr(v57 + 1, v52));
  }
  else
  {
    v54 = *(_DWORD *)(a1 + 16);
    v55 = *(_QWORD *)(a1 + 20);
    v56 = *(_DWORD *)(a1 + 40);
  }
  v58 = *(_QWORD *)(a1 + 48);
  if ((v58 & 1) != 0)
  {
    v101 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
    if ((v58 & 2) != 0
      || ((v102 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v102 != 0x3FFFFFFF)
        ? (v103 = (_DWORD)v102 == -1)
        : (v103 = 1),
          v103))
    {
      v104 = 2;
    }
    else if (v102 >> 28)
    {
      v125 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v125 = v101;
      *(_DWORD *)(v125 + 8) = v102;
      v104 = 1;
      v101 = v125;
    }
    else
    {
      v104 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
      v101 = v102 << 36;
    }
    v58 = v101 | v104;
  }
  v59 = *(unsigned int **)(a1 + 56);
  if (v59)
  {
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 + 1, v59));
  }
  *(_OWORD *)v128 = *(_OWORD *)(a1 + 64);
  v61 = *(unsigned int **)(a1 + 80);
  if (v61)
  {
    v62 = v61 + 2;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 + 1, v62));
  }
  v64 = WTF::fastMalloc((WTF *)0x58);
  v72 = v64;
  *(_DWORD *)(v64 + 8) = 1;
  *(_QWORD *)v64 = &off_1E3576B18;
  *(_DWORD *)(v64 + 16) = v54;
  *(_QWORD *)(v64 + 20) = v55;
  *(_DWORD *)(v64 + 28) = v56;
  if (v51)
  {
    v73 = v51 + 2;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 + 1, v73));
  }
  *(_QWORD *)(v64 + 32) = v51;
  v75 = v58;
  if ((v58 & 1) != 0)
  {
    v105 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
    if ((v58 & 2) != 0
      || ((v106 = *(unsigned int *)((v58 & 0xFFFFFFFF8) + 8), (_DWORD)v106 != 0x3FFFFFFF)
        ? (v107 = (_DWORD)v106 == -1)
        : (v107 = 1),
          v107))
    {
      v108 = 2;
    }
    else if (v106 >> 28)
    {
      v126 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v126 = v105;
      *(_DWORD *)(v126 + 8) = v106;
      v108 = 1;
      v105 = v126;
    }
    else
    {
      v108 = *(_QWORD *)(v58 & 0xFFFFFFFF8);
      v105 = v106 << 36;
    }
    v75 = v105 | v108;
  }
  *(_QWORD *)(v72 + 40) = v75;
  if (v59)
  {
    do
      v76 = __ldaxr(v59);
    while (__stlxr(v76 + 1, v59));
  }
  *(_QWORD *)(v72 + 48) = v59;
  *(_OWORD *)(v72 + 56) = *(_OWORD *)v128;
  if (v61)
  {
    v77 = v61 + 2;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 + 1, v77));
  }
  *(_QWORD *)(v72 + 72) = v61;
  *(_DWORD *)(v72 + 80) = v20;
  v79 = *(unsigned int *)(a2 + 244);
  if ((_DWORD)v79 != *(_DWORD *)(a2 + 240))
  {
    v80 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v79);
    goto LABEL_37;
  }
  v96 = v79 + (v79 >> 2);
  if (v96 >= 0x10)
    v97 = v96 + 1;
  else
    v97 = 16;
  if (v97 <= v79 + 1)
    v98 = v79 + 1;
  else
    v98 = v97;
  if (v98 >> 29)
  {
    __break(0xC471u);
LABEL_107:
    JUMPOUT(0x197DB8C54);
  }
  v99 = *(const void **)(a2 + 232);
  v100 = (void *)WTF::fastMalloc((WTF *)(8 * v98));
  *(_DWORD *)(a2 + 240) = v98;
  *(_QWORD *)(a2 + 232) = v100;
  memcpy(v100, v99, 8 * v79);
  if (v99)
  {
    if (*(const void **)(a2 + 232) == v99)
    {
      *(_QWORD *)(a2 + 232) = 0;
      *(_DWORD *)(a2 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v99, v65, v66, v67, v68, v69, v70, v71);
  }
  v79 = *(unsigned int *)(a2 + 244);
  v80 = (uint64_t *)(*(_QWORD *)(a2 + 232) + 8 * v79);
LABEL_37:
  *v80 = v72;
  *(_DWORD *)(a2 + 244) = v79 + 1;
  if (v61)
  {
    v81 = v61 + 2;
    do
    {
      v82 = __ldaxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
    {
      atomic_store(1u, v61 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 8))(v61);
    }
  }
  if (v59)
  {
    do
    {
      v84 = __ldaxr(v59);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v59));
    if (!v85)
    {
      atomic_store(1u, v59);
      JSC::FTL::ExceptionTarget::~ExceptionTarget((JSC::FTL::ExceptionTarget *)v59, v65, v66, v67, v68, v69, v70, v71);
      WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
    }
  }
  if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v58 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
  if (v51)
  {
    v86 = v51 + 2;
    do
    {
      v87 = __ldaxr(v86);
      v88 = v87 - 1;
    }
    while (__stlxr(v88, v86));
    if (!v88)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 32))(v51);
    }
    do
    {
      v89 = __ldaxr(v86);
      v90 = v89 - 1;
    }
    while (__stlxr(v90, v86));
    if (!v90)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 32))(v51);
    }
  }
  *(_BYTE *)(a2 + 212) = v127;
}

